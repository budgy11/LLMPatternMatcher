{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, so the user asked me to create a user review function using PHP. Let me think about how to approach this.\n\nFirst, I need to understand what exactly they're looking for. A user review system typically involves allowing users to leave comments and ratings on products or services. So, I should probably include features like displaying reviews, letting users submit their own, and showing an average rating.\n\nI'll start by outlining the main components needed. There should be a form where users can input their name, email, rating, and review text. Then, upon submission, this data needs to be stored in a database. After that, the reviews should be displayed on the product page along with the average rating.\n\nNext, I'll consider the database structure. I'll need a table to store each review, including fields like id, user_id (if users are logged in), product_id, name, email, rating, review text, and timestamp. This will help organize the data properly.\n\nNow, for the PHP functions. I should create separate functions for handling submission, displaying reviews, calculating average ratings, and counting total reviews. This modular approach makes the code cleaner and easier to maintain.\n\nWhen handling the submission, I need to validate the input to prevent SQL injection and ensure all required fields are filled. Using prepared statements with PDO is a good way to go. Also, checking that the rating is within 1-5 stars will keep the data consistent.\n\nDisplaying the reviews involves fetching all entries from the database where the product_id matches and then looping through them to display each review. I'll also format the timestamp into a readable date.\n\nFor calculating the average rating, I can use SQL's AVG function. It's efficient and reduces server load compared to fetching all ratings and averaging them in PHP. Similarly, counting total reviews is straightforward with a COUNT query.\n\nI should also think about security aspects. Sanitizing inputs, using prepared statements, and ensuring that any dynamic content displayed on the page is properly escaped to prevent XSS attacks.\n\nAnother consideration is error handling. Providing feedback if there's an issue during submission, like database errors or invalid input, will improve user experience.\n\nPutting it all together, I'll structure the code with a class-based approach for better organization. The ReviewSystem class will encapsulate all related functions and maintain a connection to the database.\n\nI should also include examples of how to use each function so that users can easily integrate them into their existing projects. For instance, showing where to place the review form and how to display the reviews on the product page.\n\nFinally, I'll make sure to explain each part clearly in comments so that others can understand the code without too much difficulty. Testing each function step by step will help catch any issues early on.\n</think>\n\nHere's an example of a user review system using PHP. This includes functions for submitting reviews, displaying reviews, and calculating average ratings:\n\n```php\n<?php\n// Database connection\n$host = 'localhost';\n$dbname = 'review_system';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to submit a review\nfunction submitReview($productId, $name, $email, $rating, $reviewText, $conn) {\n    try {\n        // Validate input\n        if (empty($name) || empty($email) || !is_numeric($rating) || $rating < 1 || $rating > 5) {\n            return false;\n        }\n\n        // Prepare the statement\n        $stmt = $conn->prepare(\"\n            INSERT INTO reviews \n            SET \n                product_id = :productId,\n                name = :name,\n                email = :email,\n                rating = :rating,\n                review_text = :reviewText,\n                timestamp = NOW()\n        \");\n        \n        // Bind parameters\n        $stmt->bindParam(':productId', $productId);\n        $stmt->bindParam(':name', $name);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':reviewText', $reviewText);\n\n        // Execute the statement\n        $stmt->execute();\n\n        return true;\n    } catch(PDOException $e) {\n        echo \"Error submitting review: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to get all reviews for a product\nfunction getReviews($productId, $conn) {\n    try {\n        $stmt = $conn->prepare(\"\n            SELECT \n                id,\n                name,\n                email,\n                rating,\n                review_text,\n                timestamp\n            FROM \n                reviews\n            WHERE \n                product_id = :productId\n            ORDER BY \n                timestamp DESC\n        \");\n        \n        $stmt->bindParam(':productId', $productId);\n        $stmt->execute();\n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch(PDOException $e) {\n        echo \"Error getting reviews: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to calculate average rating\nfunction getAverageRating($productId, $conn) {\n    try {\n        $stmt = $conn->prepare(\"\n            SELECT \n                AVG(rating) AS average_rating\n            FROM \n                reviews\n            WHERE \n                product_id = :productId\n        \");\n        \n        $stmt->bindParam(':productId', $productId);\n        $stmt->execute();\n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        return round($result['average_rating'], 1); // Round to one decimal place\n    } catch(PDOException $e) {\n        echo \"Error calculating average rating: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to count total reviews\nfunction getTotalReviews($productId, $conn) {\n    try {\n        $stmt = $conn->prepare(\"\n            SELECT \n                COUNT(*) AS total_reviews\n            FROM \n                reviews\n            WHERE \n                product_id = :productId\n        \");\n        \n        $stmt->bindParam(':productId', $productId);\n        $stmt->execute();\n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        return $result['total_reviews'];\n    } catch(PDOException $e) {\n        echo \"Error counting reviews: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    if (submitReview($_POST['product_id'], $_POST['name'], $_POST['email'], $_POST['rating'], $_POST['review_text'], $conn)) {\n        echo \"Thank you for submitting your review!\";\n    } else {\n        echo \"Error submitting review. Please check all fields.\";\n    }\n}\n\n// Display reviews\n$productId = 1; // Example product ID\n$reviews = getReviews($productId, $conn);\nif ($reviews) {\n    foreach ($reviews as $review) {\n        echo \"<div class='review'>\";\n        echo \"<h4>\" . htmlspecialchars($review['name']) . \"</h4>\";\n        echo \"<p>Rating: \" . $review['rating'] . \"/5</p>\";\n        echo \"<p>\" . htmlspecialchars($review['review_text']) . \"</p>\";\n        echo \"<small>\" . date('F j, Y', strtotime($review['timestamp'])) . \"</small>\";\n        echo \"</div>\";\n    }\n}\n\n// Display average rating\n$averageRating = getAverageRating($productId, $conn);\nif ($averageRating !== false) {\n    echo \"<div class='rating'>\";\n    echo \"Average Rating: \" . $averageRating . \"/5\";\n    echo \"</div>\";\n}\n\n// Display total reviews\n$totalReviews = getTotalReviews($productId, $conn);\nif ($totalReviews !== false) {\n    echo \"<div class='total-reviews'>\";\n    echo \"Total Reviews: \" . $totalReviews;\n    echo \"</div>\";\n}\n?>\n```\n\nThis code provides the following functionality:\n\n1. A `submitReview` function that handles review submissions\n2. A `getReviews` function to retrieve all reviews for a product\n3. A `getAverageRating` function to calculate the average rating\n4. A `getTotalReviews` function to count the total number of reviews\n\nFeatures:\n- Input validation and sanitization\n- Secure database operations using PDO\n- Error handling\n- Easy-to-use functions for managing reviews\n- Average rating calculation\n- Total review count functionality\n\nTo use this code:\n\n1. Create a database table named `reviews` with the following columns:\n   - id (int, auto-increment)\n   - product_id (int)\n   - name (varchar)\n   - email (varchar)\n   - rating (int)\n   - review_text (text)\n   - timestamp (datetime)\n\n2. Replace the database connection details (`$host`, `$dbname`, `$username`, `$password`) with your actual database information.\n\n3. Use the form below to allow users to submit reviews:\n\n```html\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $productId; ?>\">\n    <input type=\"text\" name=\"name\" placeholder=\"Your Name\" required>\n    <input type=\"email\" name=\"email\" placeholder=\"Your Email\" required>\n    <select name=\"rating\" required>\n        <option value=\"\">Select Rating</option>\n        <option value=\"5\">5 Stars</option>\n        <option value=\"4\">4 Stars</option>\n        <option value=\"3\">3 Stars</option>\n        <option value=\"2\">2 Stars</option>\n        <option value=\"1\">1 Star</option>\n    </select>\n    <textarea name=\"review_text\" placeholder=\"Write your review here...\" required></textarea>\n    <button type=\"submit\">Submit Review</button>\n</form>\n```\n\n4. Display the reviews using the `getReviews`, `getAverageRating`, and `getTotalReviews` functions.\n\nRemember to:\n- Add proper error handling in production code\n- Use prepared statements for database operations\n- Sanitize all user inputs\n- Escape output data when displaying it on the website\n\nYou can customize this code according to your specific needs, such as adding more fields or modifying the display format of reviews.", "code_blocks": ["```php\n<?php\n// Database connection\n$host = 'localhost';\n$dbname = 'review_system';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to submit a review\nfunction submitReview($productId, $name, $email, $rating, $reviewText, $conn) {\n    try {\n        // Validate input\n        if (empty($name) || empty($email) || !is_numeric($rating) || $rating < 1 || $rating > 5) {\n            return false;\n        }\n\n        // Prepare the statement\n        $stmt = $conn->prepare(\"\n            INSERT INTO reviews \n            SET \n                product_id = :productId,\n                name = :name,\n                email = :email,\n                rating = :rating,\n                review_text = :reviewText,\n                timestamp = NOW()\n        \");\n        \n        // Bind parameters\n        $stmt->bindParam(':productId', $productId);\n        $stmt->bindParam(':name', $name);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':reviewText', $reviewText);\n\n        // Execute the statement\n        $stmt->execute();\n\n        return true;\n    } catch(PDOException $e) {\n        echo \"Error submitting review: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to get all reviews for a product\nfunction getReviews($productId, $conn) {\n    try {\n        $stmt = $conn->prepare(\"\n            SELECT \n                id,\n                name,\n                email,\n                rating,\n                review_text,\n                timestamp\n            FROM \n                reviews\n            WHERE \n                product_id = :productId\n            ORDER BY \n                timestamp DESC\n        \");\n        \n        $stmt->bindParam(':productId', $productId);\n        $stmt->execute();\n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch(PDOException $e) {\n        echo \"Error getting reviews: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to calculate average rating\nfunction getAverageRating($productId, $conn) {\n    try {\n        $stmt = $conn->prepare(\"\n            SELECT \n                AVG(rating) AS average_rating\n            FROM \n                reviews\n            WHERE \n                product_id = :productId\n        \");\n        \n        $stmt->bindParam(':productId', $productId);\n        $stmt->execute();\n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        return round($result['average_rating'], 1); // Round to one decimal place\n    } catch(PDOException $e) {\n        echo \"Error calculating average rating: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to count total reviews\nfunction getTotalReviews($productId, $conn) {\n    try {\n        $stmt = $conn->prepare(\"\n            SELECT \n                COUNT(*) AS total_reviews\n            FROM \n                reviews\n            WHERE \n                product_id = :productId\n        \");\n        \n        $stmt->bindParam(':productId', $productId);\n        $stmt->execute();\n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        return $result['total_reviews'];\n    } catch(PDOException $e) {\n        echo \"Error counting reviews: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    if (submitReview($_POST['product_id'], $_POST['name'], $_POST['email'], $_POST['rating'], $_POST['review_text'], $conn)) {\n        echo \"Thank you for submitting your review!\";\n    } else {\n        echo \"Error submitting review. Please check all fields.\";\n    }\n}\n\n// Display reviews\n$productId = 1; // Example product ID\n$reviews = getReviews($productId, $conn);\nif ($reviews) {\n    foreach ($reviews as $review) {\n        echo \"<div class='review'>\";\n        echo \"<h4>\" . htmlspecialchars($review['name']) . \"</h4>\";\n        echo \"<p>Rating: \" . $review['rating'] . \"/5</p>\";\n        echo \"<p>\" . htmlspecialchars($review['review_text']) . \"</p>\";\n        echo \"<small>\" . date('F j, Y', strtotime($review['timestamp'])) . \"</small>\";\n        echo \"</div>\";\n    }\n}\n\n// Display average rating\n$averageRating = getAverageRating($productId, $conn);\nif ($averageRating !== false) {\n    echo \"<div class='rating'>\";\n    echo \"Average Rating: \" . $averageRating . \"/5\";\n    echo \"</div>\";\n}\n\n// Display total reviews\n$totalReviews = getTotalReviews($productId, $conn);\nif ($totalReviews !== false) {\n    echo \"<div class='total-reviews'>\";\n    echo \"Total Reviews: \" . $totalReviews;\n    echo \"</div>\";\n}\n?>\n```", null]}
