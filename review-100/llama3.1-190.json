{"prompt": "Create a user review function using php", "llm_output": "Here is an example of a user review function in PHP:\n\n**Database Schema:**\n```sql\nCREATE TABLE reviews (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  product_id INT,\n  user_id INT,\n  rating TINYINT(1),\n  comment TEXT,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  FOREIGN KEY (product_id) REFERENCES products(id),\n  FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n\n**PHP Function:**\n```php\nfunction create_review($data) {\n  // sanitize user input\n  $data['rating'] = (int) $data['rating'];\n  $data['comment'] = trim(strip_tags($data['comment']));\n\n  try {\n    $query = \"\n      INSERT INTO reviews (product_id, user_id, rating, comment)\n      VALUES (:product_id, :user_id, :rating, :comment)\n    \";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([\n      ':product_id' => $data['product_id'],\n      ':user_id' => $data['user_id'],\n      ':rating' => $data['rating'],\n      ':comment' => $data['comment']\n    ]);\n\n    return [\n      'success' => true,\n      'message' => 'Review created successfully'\n    ];\n  } catch (PDOException $e) {\n    return [\n      'success' => false,\n      'message' => 'Error creating review: ' . $e->getMessage()\n    ];\n  }\n}\n\nfunction get_reviews($product_id, $limit = null, $offset = null) {\n  try {\n    $query = \"\n      SELECT r.id, u.name, r.rating, r.comment\n      FROM reviews r\n      JOIN users u ON r.user_id = u.id\n      WHERE r.product_id = :product_id\n    \";\n    if ($limit && $offset) {\n      $query .= \" LIMIT :limit OFFSET :offset\";\n    }\n    $stmt = $pdo->prepare($query);\n    $params = [\n      ':product_id' => $product_id,\n      ':limit' => $limit,\n      ':offset' => $offset\n    ];\n    if ($limit && $offset) {\n      $params[':limit'] = $limit;\n      $params[':offset'] = $offset;\n    }\n    $stmt->execute($params);\n    return $stmt->fetchAll();\n  } catch (PDOException $e) {\n    return [];\n  }\n}\n\nfunction update_review($review_id, $data) {\n  try {\n    $query = \"\n      UPDATE reviews\n      SET rating = :rating, comment = :comment\n      WHERE id = :id\n    \";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([\n      ':id' => $review_id,\n      ':rating' => (int) $data['rating'],\n      ':comment' => trim(strip_tags($data['comment']))\n    ]);\n\n    return [\n      'success' => true,\n      'message' => 'Review updated successfully'\n    ];\n  } catch (PDOException $e) {\n    return [\n      'success' => false,\n      'message' => 'Error updating review: ' . $e->getMessage()\n    ];\n  }\n}\n\nfunction delete_review($review_id) {\n  try {\n    $query = \"\n      DELETE FROM reviews\n      WHERE id = :id\n    \";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([\n      ':id' => $review_id\n    ]);\n\n    return [\n      'success' => true,\n      'message' => 'Review deleted successfully'\n    ];\n  } catch (PDOException $e) {\n    return [\n      'success' => false,\n      'message' => 'Error deleting review: ' . $e->getMessage()\n    ];\n  }\n}\n```\n**Example Usage:**\n```php\n// create a new review\n$data = [\n  'product_id' => 1,\n  'user_id' => 1,\n  'rating' => 5,\n  'comment' => 'Great product!'\n];\n$review = create_review($data);\nprint_r($review); // Output: Array ( [success] => 1 [message] => Review created successfully )\n\n// get reviews for a specific product\n$product_id = 1;\n$limit = 10;\n$offset = 0;\n$reviews = get_reviews($product_id, $limit, $offset);\nprint_r($reviews); // Output: Array ( [0] => Array ( [id] => 1 [name] => John Doe [rating] => 5 [comment] => Great product! ) )\n\n// update a review\n$review_id = 1;\n$data = [\n  'rating' => 4,\n  'comment' => 'Good product!'\n];\n$update_review = update_review($review_id, $data);\nprint_r($update_review); // Output: Array ( [success] => 1 [message] => Review updated successfully )\n\n// delete a review\n$review_id = 1;\n$delete_review = delete_review($review_id);\nprint_r($delete_review); // Output: Array ( [success] => 1 [message] => Review deleted successfully )\n```\nNote that this is just an example implementation, and you should adjust the function signatures and database schema to fit your specific needs. Additionally, make sure to sanitize user input and handle errors properly in a production environment.", "code_blocks": [null, "```php\nfunction create_review($data) {\n  // sanitize user input\n  $data['rating'] = (int) $data['rating'];\n  $data['comment'] = trim(strip_tags($data['comment']));\n\n  try {\n    $query = \"\n      INSERT INTO reviews (product_id, user_id, rating, comment)\n      VALUES (:product_id, :user_id, :rating, :comment)\n    \";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([\n      ':product_id' => $data['product_id'],\n      ':user_id' => $data['user_id'],\n      ':rating' => $data['rating'],\n      ':comment' => $data['comment']\n    ]);\n\n    return [\n      'success' => true,\n      'message' => 'Review created successfully'\n    ];\n  } catch (PDOException $e) {\n    return [\n      'success' => false,\n      'message' => 'Error creating review: ' . $e->getMessage()\n    ];\n  }\n}\n\nfunction get_reviews($product_id, $limit = null, $offset = null) {\n  try {\n    $query = \"\n      SELECT r.id, u.name, r.rating, r.comment\n      FROM reviews r\n      JOIN users u ON r.user_id = u.id\n      WHERE r.product_id = :product_id\n    \";\n    if ($limit && $offset) {\n      $query .= \" LIMIT :limit OFFSET :offset\";\n    }\n    $stmt = $pdo->prepare($query);\n    $params = [\n      ':product_id' => $product_id,\n      ':limit' => $limit,\n      ':offset' => $offset\n    ];\n    if ($limit && $offset) {\n      $params[':limit'] = $limit;\n      $params[':offset'] = $offset;\n    }\n    $stmt->execute($params);\n    return $stmt->fetchAll();\n  } catch (PDOException $e) {\n    return [];\n  }\n}\n\nfunction update_review($review_id, $data) {\n  try {\n    $query = \"\n      UPDATE reviews\n      SET rating = :rating, comment = :comment\n      WHERE id = :id\n    \";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([\n      ':id' => $review_id,\n      ':rating' => (int) $data['rating'],\n      ':comment' => trim(strip_tags($data['comment']))\n    ]);\n\n    return [\n      'success' => true,\n      'message' => 'Review updated successfully'\n    ];\n  } catch (PDOException $e) {\n    return [\n      'success' => false,\n      'message' => 'Error updating review: ' . $e->getMessage()\n    ];\n  }\n}\n\nfunction delete_review($review_id) {\n  try {\n    $query = \"\n      DELETE FROM reviews\n      WHERE id = :id\n    \";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([\n      ':id' => $review_id\n    ]);\n\n    return [\n      'success' => true,\n      'message' => 'Review deleted successfully'\n    ];\n  } catch (PDOException $e) {\n    return [\n      'success' => false,\n      'message' => 'Error deleting review: ' . $e->getMessage()\n    ];\n  }\n}\n```", "```php\n// create a new review\n$data = [\n  'product_id' => 1,\n  'user_id' => 1,\n  'rating' => 5,\n  'comment' => 'Great product!'\n];\n$review = create_review($data);\nprint_r($review); // Output: Array ( [success] => 1 [message] => Review created successfully )\n\n// get reviews for a specific product\n$product_id = 1;\n$limit = 10;\n$offset = 0;\n$reviews = get_reviews($product_id, $limit, $offset);\nprint_r($reviews); // Output: Array ( [0] => Array ( [id] => 1 [name] => John Doe [rating] => 5 [comment] => Great product! ) )\n\n// update a review\n$review_id = 1;\n$data = [\n  'rating' => 4,\n  'comment' => 'Good product!'\n];\n$update_review = update_review($review_id, $data);\nprint_r($update_review); // Output: Array ( [success] => 1 [message] => Review updated successfully )\n\n// delete a review\n$review_id = 1;\n$delete_review = delete_review($review_id);\nprint_r($delete_review); // Output: Array ( [success] => 1 [message] => Review deleted successfully )\n```"]}
