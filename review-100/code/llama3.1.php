
<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_database';
$username = 'your_username';
$password = 'your_password';

// Connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

function createUserReview($conn, $product_id, $user_id, $rating, $comment) {
    // SQL query to create a new review
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
            VALUES (:product_id, :user_id, :rating, :comment)";
    
    // Prepare statement and bind parameters
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    
    // Execute statement
    try {
        if ($stmt->execute()) {
            return true;  // Review created successfully
        } else {
            throw new PDOException("Failed to create review");
        }
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false;
    }
}

function getUserReviews($conn, $user_id) {
    // SQL query to retrieve all reviews for a user
    $sql = "SELECT * FROM reviews WHERE user_id = :user_id";
    
    // Prepare statement and bind parameter
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':user_id', $user_id);
    
    // Execute statement and fetch results
    try {
        if ($stmt->execute()) {
            return $stmt->fetchAll();
        } else {
            throw new PDOException("Failed to retrieve reviews");
        }
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return array();  // Return an empty array on error
    }
}

function updateReview($conn, $review_id, $product_id, $user_id, $rating, $comment) {
    // SQL query to update an existing review
    $sql = "UPDATE reviews SET product_id = :product_id, user_id = :user_id, rating = :rating, comment = :comment WHERE id = :review_id";
    
    // Prepare statement and bind parameters
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':review_id', $review_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    
    // Execute statement
    try {
        if ($stmt->execute()) {
            return true;  // Review updated successfully
        } else {
            throw new PDOException("Failed to update review");
        }
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false;
    }
}

function deleteReview($conn, $review_id) {
    // SQL query to delete a review
    $sql = "DELETE FROM reviews WHERE id = :review_id";
    
    // Prepare statement and bind parameter
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':review_id', $review_id);
    
    // Execute statement
    try {
        if ($stmt->execute()) {
            return true;  // Review deleted successfully
        } else {
            throw new PDOException("Failed to delete review");
        }
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false;
    }
}

// Example usage:
$user_id = 12345;  // Replace with actual user ID

// Create a new review
if (createUserReview($conn, 67890, $user_id, 4, 'Good product')) {
    echo "Review created successfully!";
} else {
    echo "Failed to create review.";
}

// Retrieve all reviews for the specified user
$reviews = getUserReviews($conn, $user_id);
foreach ($reviews as $review) {
    echo "ID: " . $review['id'] . "
";
    echo "Product ID: " . $review['product_id'] . "
";
    echo "User ID: " . $review['user_id'] . "
";
    echo "Rating: " . $review['rating'] . "
";
    echo "Comment: " . $review['comment'] . "

";
}

// Update an existing review
if (updateReview($conn, 12345, 67890, $user_id, 5, 'Excellent product')) {
    echo "Review updated successfully!";
} else {
    echo "Failed to update review.";
}

// Delete a review
if (deleteReview($conn, 12345)) {
    echo "Review deleted successfully!";
} else {
    echo "Failed to delete review.";
}


class Review {
  private $db;

  function __construct() {
    // Assuming you're using a PDO connection to your database
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  }

  /**
   * Add a new review to the database
   *
   * @param array $data
   */
  function addReview($data) {
    $query = "INSERT INTO reviews (user_id, product_name, rating, review_text)
              VALUES (:user_id, :product_name, :rating, :review_text)";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute([
        'user_id' => $data['user_id'],
        'product_name' => $data['product_name'],
        'rating' => $data['rating'],
        'review_text' => $data['review_text']
      ]);
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Update an existing review in the database
   *
   * @param array $data
   */
  function updateReview($data) {
    $query = "UPDATE reviews SET rating = :rating, review_text = :review_text WHERE id = :id";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute([
        'id' => $data['id'],
        'rating' => $data['rating'],
        'review_text' => $data['review_text']
      ]);
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Delete a review from the database
   *
   * @param int $id
   */
  function deleteReview($id) {
    $query = "DELETE FROM reviews WHERE id = :id";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute(['id' => $id]);
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Get all reviews from the database
   *
   * @return array
   */
  function getAllReviews() {
    $query = "SELECT * FROM reviews";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return [];
    }
  }

  /**
   * Get a specific review from the database by ID
   *
   * @param int $id
   * @return array
   */
  function getReview($id) {
    $query = "SELECT * FROM reviews WHERE id = :id";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute(['id' => $id]);
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return [];
    }
  }

}


$review = new Review();

// Add a new review
$data = [
  'user_id' => 1,
  'product_name' => 'Example Product',
  'rating' => 5,
  'review_text' => 'This product is amazing!'
];
echo $review->addReview($data) ? "Review added successfully!" : "Error adding review.";

// Update an existing review
$data = [
  'id' => 1,
  'rating' => 4,
  'review_text' => 'I still love this product, but it could be improved.'
];
echo $review->updateReview($data) ? "Review updated successfully!" : "Error updating review.";

// Delete a review
$review->deleteReview(1);
echo "Review deleted successfully!";

// Get all reviews
$reviews = $review->getAllReviews();
print_r($reviews);

// Get a specific review by ID
$reviewData = $review->getReview(1);
print_r($reviewData);


class Review {
    private $id;
    private $rating;
    private $comment;

    public function __construct($id, $rating, $comment) {
        $this->id = $id;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public function getId() {
        return $this->id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


class ReviewController {
    private $reviews = array();

    public function addReview($review) {
        $this->reviews[] = $review;
    }

    public function getAllReviews() {
        return $this->reviews;
    }

    public function getReviewById($id) {
        foreach ($this->reviews as $review) {
            if ($review->getId() == $id) {
                return $review;
            }
        }
        return null;
    }
}


<?php
$reviewController = new ReviewController();

// Create a new review
$review = new Review(1, 5, 'Great product!');

// Add the review to the controller
$reviewController->addReview($review);

// Get all reviews from the controller
$reviews = $reviewController->getAllReviews();

// Display each review on the page
foreach ($reviews as $review) {
    echo '<h2>Review ID: ' . $review->getId() . '</h2>';
    echo '<p>Rating: ' . $review->getRating() . '/5</p>';
    echo '<p>Comment: ' . $review->getComment() . '</p>';
}
?>


if (isset($_POST['rating']) && isset($_POST['comment'])) {
    $reviewController = new ReviewController();
    $newReview = new Review(count($reviewController->getAllReviews()) + 1, $_POST['rating'], $_POST['comment']);
    $reviewController->addReview($newReview);
}


<?php

// Configuration
$database = 'reviews.db';
$table_name = 'reviews';

// Function to get all reviews
function get_reviews($page = 1, $limit = 10) {
    global $database, $table_name;
    
    // Connect to database
    $conn = new PDO('sqlite:'.$database);
    
    // SQL query to retrieve reviews
    $query = "SELECT * FROM $table_name ORDER BY id DESC LIMIT :limit OFFSET :offset";
    
    // Prepare statement and bind parameters
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':limit', $limit, PDO::PARAM_INT);
    $stmt->bindParam(':offset', ($page - 1) * $limit, PDO::PARAM_INT);
    
    // Execute query and retrieve results
    $stmt->execute();
    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    // Close database connection
    $conn = null;
    
    return $reviews;
}

// Function to add a new review
function add_review($data) {
    global $database, $table_name;
    
    // Connect to database
    $conn = new PDO('sqlite:'.$database);
    
    // SQL query to insert review
    $query = "INSERT INTO $table_name (title, content, rating, user_id) VALUES (:title, :content, :rating, :user_id)";
    
    // Prepare statement and bind parameters
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':title', $data['title'], PDO::PARAM_STR);
    $stmt->bindParam(':content', $data['content'], PDO::PARAM_STR);
    $stmt->bindParam(':rating', $data['rating'], PDO::PARAM_INT);
    $stmt->bindParam(':user_id', $data['user_id'], PDO::PARAM_INT);
    
    // Execute query and retrieve results
    $stmt->execute();
    $review_id = $conn->lastInsertId();
    
    // Close database connection
    $conn = null;
    
    return $review_id;
}

// Function to update a review
function update_review($data) {
    global $database, $table_name;
    
    // Connect to database
    $conn = new PDO('sqlite:'.$database);
    
    // SQL query to update review
    $query = "UPDATE $table_name SET title=:title, content=:content, rating=:rating WHERE id=:id";
    
    // Prepare statement and bind parameters
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':title', $data['title'], PDO::PARAM_STR);
    $stmt->bindParam(':content', $data['content'], PDO::PARAM_STR);
    $stmt->bindParam(':rating', $data['rating'], PDO::PARAM_INT);
    $stmt->bindParam(':id', $data['id'], PDO::PARAM_INT);
    
    // Execute query and retrieve results
    $stmt->execute();
    
    // Close database connection
    $conn = null;
}

// Function to delete a review
function delete_review($review_id) {
    global $database, $table_name;
    
    // Connect to database
    $conn = new PDO('sqlite:'.$database);
    
    // SQL query to delete review
    $query = "DELETE FROM $table_name WHERE id=:id";
    
    // Prepare statement and bind parameters
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':id', $review_id, PDO::PARAM_INT);
    
    // Execute query and retrieve results
    $stmt->execute();
    
    // Close database connection
    $conn = null;
}

?>


// Get all reviews on page 2 with 10 per page
$reviews = get_reviews(2, 10);
print_r($reviews);

// Add a new review
$data = array(
    'title' => 'My awesome review!',
    'content' => 'This is a great product!',
    'rating' => 5,
    'user_id' => 1
);
$review_id = add_review($data);
echo "Review added with ID: $review_id";

// Update an existing review
$data = array(
    'title' => 'My updated review',
    'content' => 'This is a great product, indeed!',
    'rating' => 5,
    'id' => 1
);
update_review($data);

// Delete a review
delete_review(2);


<?php

class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  /**
   * Create a new review
   *
   * @param int $user_id
   * @param int $product_id
   * @param int $rating
   * @param string $review_text
   */
  public function createReview($user_id, $product_id, $rating, $review_text) {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (?, ?, ?, ?)");
    $stmt->execute([$user_id, $product_id, $rating, $review_text]);
    return $this->db->lastInsertId();
  }

  /**
   * Get all reviews for a product
   *
   * @param int $product_id
   */
  public function getReviewsForProduct($product_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
    $stmt->execute([$product_id]);
    return $stmt->fetchAll();
  }

  /**
   * Get a single review by ID
   *
   * @param int $review_id
   */
  public function getReview($review_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = ?");
    $stmt->execute([$review_id]);
    return $stmt->fetch();
  }

  /**
   * Update a review
   *
   * @param int $review_id
   * @param int $rating
   * @param string $review_text
   */
  public function updateReview($review_id, $rating, $review_text) {
    $stmt = $this->db->prepare("UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?");
    $stmt->execute([$rating, $review_text, $review_id]);
  }

  /**
   * Delete a review
   *
   * @param int $review_id
   */
  public function deleteReview($review_id) {
    $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
    $stmt->execute([$review_id]);
  }
}


$db = new PDO('sqlite:reviews.db');

$review = new Review($db);

// Create a new review
$user_id = 1;
$product_id = 1;
$rating = 4;
$review_text = "Great product!";
$review_id = $review->createReview($user_id, $product_id, $rating, $review_text);

// Get all reviews for a product
$reviews = $review->getReviewsForProduct($product_id);
print_r($reviews);

// Get a single review by ID
$single_review = $review->getReview($review_id);
print_r($single_review);

// Update a review
$rating = 5;
$review_text = "Even better!";
$review->updateReview($review_id, $rating, $review_text);

// Delete a review
$review->deleteReview($review_id);


// db.php (database connection file)
<?php
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$dbname = 'your_database';

$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


// review.php (review submission and display)
<?php
require_once 'db.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

// Get the product ID from URL parameter
$product_id = $_GET['product_id'] ?? '';

// Display reviews for a specific product
if ($product_id) {
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($query);
    $reviews = array();
    while ($row = $result->fetch_assoc()) {
        $reviews[] = array(
            'id' => $row['id'],
            'rating' => $row['rating'],
            'review' => $row['review']
        );
    }
} else {
    // Display all reviews (not specific to a product)
}

// Submit new review
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $product_id = $_POST['product_id'];
    $rating = $_POST['rating'];
    $review = $_POST['review'];

    if (!empty($product_id) && !empty($rating) && !empty($review)) {
        $query = "INSERT INTO reviews (user_id, product_id, rating, review)
                  VALUES ('" . $_SESSION['user_id'] . "', '$product_id', '$rating', '" . mysqli_real_escape_string($conn, $review) . "')";
        if ($conn->query($query)) {
            header('Location: review.php?product_id=' . $product_id);
            exit;
        } else {
            echo 'Error submitting review!';
        }
    } else {
        echo 'Please fill in all fields!';
    }
}

// Display form to submit new review
?>
<form method="post">
    <label>Product ID:</label>
    <input type="text" name="product_id"><br><br>
    <label>Rating:</label>
    <select name="rating">
        <?php for ($i = 1; $i <= 5; $i++) { ?>
            <option value="<?php echo $i; ?>"><?php echo $i . '/5'; ?></option>
        <?php } ?>
    </select><br><br>
    <label>Review:</label>
    <textarea name="review"></textarea><br><br>
    <input type="submit" value="Submit Review">
</form>

<!-- Display reviews -->
<?php if (isset($reviews)) { ?>
    <h2>Reviews:</h2>
    <?php foreach ($reviews as $review) { ?>
        <p><?php echo $review['rating']; ?>/5 - <?php echo $review['review']; ?></p>
    <?php } ?>
<?php } ?>


class ReviewFunctions {
  private $db;

  public function __construct() {
    // Initialize database connection (e.g., using PDO)
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  }

  /**
   * Create a new review
   *
   * @param int $user_id
   * @param int $product_id
   * @param int $rating
   * @param string $comment
   * @return int ID of the newly created review or false on failure
   */
  public function createReview($user_id, $product_id, $rating, $comment) {
    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)');
    $result = $stmt->execute([$user_id, $product_id, $rating, $comment]);
    if ($result) {
      return $this->db->lastInsertId();
    } else {
      return false;
    }
  }

  /**
   * Get all reviews for a specific product
   *
   * @param int $product_id
   * @return array Reviews as an associative array of arrays (id, user_id, rating, comment)
   */
  public function getReviewsByProduct($product_id) {
    $stmt = $this->db->prepare('SELECT id, user_id, rating, comment FROM reviews WHERE product_id = ?');
    $stmt->execute([$product_id]);
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Update an existing review
   *
   * @param int $review_id
   * @param int $rating
   * @param string $comment
   * @return bool True on success, false on failure
   */
  public function updateReview($review_id, $rating, $comment) {
    $stmt = $this->db->prepare('UPDATE reviews SET rating = ?, comment = ? WHERE id = ?');
    $result = $stmt->execute([$rating, $comment, $review_id]);
    return $result;
  }

  /**
   * Delete a review
   *
   * @param int $review_id
   * @return bool True on success, false on failure
   */
  public function deleteReview($review_id) {
    $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = ?');
    return $stmt->execute([$review_id]);
  }
}


require_once 'review_functions.php';

$reviewFunctions = new ReviewFunctions();

// Create a new review
$user_id = 1;
$product_id = 123;
$rating = 5;
$comment = 'Great product!';
$review_id = $reviewFunctions->createReview($user_id, $product_id, $rating, $comment);

// Get all reviews for a specific product
$product_id = 123;
$reviews = $reviewFunctions->getReviewsByProduct($product_id);
print_r($reviews);

// Update an existing review
$review_id = 1;
$rating = 4;
$comment = 'Good product!';
$result = $reviewFunctions->updateReview($review_id, $rating, $comment);
echo $result ? 'Success!' : 'Failure!';

// Delete a review
$review_id = 1;
$result = $reviewFunctions->deleteReview($review_id);
echo $result ? 'Success!' : 'Failure!';


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

class ReviewSystem {

  // Function to submit a review
  public function submitReview($productId, $rating, $comment) {
    if (!empty($_SESSION['user_id'])) {
      $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
                VALUES (?, ?, ?, ?)";
      $stmt = $conn->prepare($query);
      $stmt->bind_param("iis", $productId, $_SESSION['user_id'], $rating, $comment);
      if ($stmt->execute()) {
        return true;
      } else {
        echo "Error submitting review: " . $conn->error;
        return false;
      }
    } else {
      echo "You must be logged in to submit a review.";
      return false;
    }
  }

  // Function to display reviews
  public function getReviews($productId) {
    $query = "SELECT r.id, u.username, r.rating, r.comment, r.created_at
              FROM reviews r
              JOIN users u ON r.user_id = u.id
              WHERE product_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $productId);
    if ($stmt->execute()) {
      $result = $stmt->get_result();
      while ($row = $result->fetch_assoc()) {
        echo "<h3>Review by " . $row['username'] . "</h3>";
        echo "<p>Rating: " . $row['rating'] . "/5</p>";
        echo "<p>Comment: " . $row['comment'] . "</p>";
        echo "<p>Created at: " . $row['created_at'] . "</p>";
      }
    } else {
      echo "Error fetching reviews: " . $conn->error;
    }
  }

}

// Usage example
$reviewSystem = new ReviewSystem();

if (isset($_POST['submit'])) {
  $productId = $_POST['product_id'];
  $rating = $_POST['rating'];
  $comment = $_POST['comment'];

  if ($reviewSystem->submitReview($productId, $rating, $comment)) {
    echo "Review submitted successfully!";
  }
}

?>


<?php

// Configuration
define('DB_HOST', 'your_host');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function displayReviews() {
    global $conn;
    $sql = "SELECT * FROM reviews";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            echo "Review by: " . $row["username"] . "<br>";
            echo "Product Name: " . $row["product_name"] . "<br>";
            echo "Rating: " . $row["rating"] . "/5<br>";
            echo "Review Text: " . $row["review_text"] . "<br><hr>";
        }
    } else {
        echo "0 reviews";
    }
}

function addReview($username, $product_name, $review_text, $rating) {
    global $conn;
    $sql = "INSERT INTO reviews (user_id, product_name, review_text, rating)
            VALUES (1, '$product_name', '$review_text', $rating)";
    
    if ($conn->query($sql) === TRUE) {
        echo "Review added successfully";
    } else {
        echo "Error: " . $conn->error;
    }
}

?>


<?php
require_once 'review.php';

$review = array(
    'username' => 'JohnDoe',
    'product_name' => 'Test Product',
    'review_text' => 'This is a test review.',
    'rating' => 4
);

addReview($review['username'], $review['product_name'], $review['review_text'], $review['rating']);
?>


<?php
require_once 'review.php';

displayReviews();
?>


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  public function addReview($userId, $productId, $rating, $review) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
  }

  public function getReviewsForProduct($productId) {
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getReviewsForUser($userId) {
    $query = "SELECT * FROM reviews WHERE user_id = :user_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }
}


class ReviewController {
  private $review;

  public function __construct() {
    $this->review = new Review();
  }

  public function addReviewAction($userId, $productId, $rating, $review) {
    if ($this->review->addReview($userId, $productId, $rating, $review)) {
      return 'Review added successfully!';
    } else {
      return 'Error adding review';
    }
  }

  public function getReviewsForProductAction($productId) {
    $reviews = $this->review->getReviewsForProduct($productId);
    return json_encode($reviews);
  }

  public function getReviewsForUserAction($userId) {
    $reviews = $this->review->getReviewsForUser($userId);
    return json_encode($reviews);
  }
}


$router->post('/add-review', function ($userId, $productId, $rating, $review) {
  return (new ReviewController())->addReviewAction($userId, $productId, $rating, $review);
});

$router->get('/reviews-for-product/{product_id}', function ($productId) {
  return (new ReviewController())->getReviewsForProductAction($productId);
});

$router->get('/reviews-for-user/{user_id}', function ($userId) {
  return (new ReviewController())->getReviewsForUserAction($userId);
});


class Review {
  private $id;
  private $product_id;
  private $user_id;
  private $rating;
  private $content;

  public function __construct($data = array()) {
    if (!empty($data)) {
      $this->loadFromData($data);
    }
  }

  public function loadFromData(array $data) {
    foreach ($data as $key => $value) {
      $this->$key = $value;
    }
  }

  public static function createReview(array $reviewData, $userId) {
    // Basic validation
    if (!isset($reviewData['rating']) || !in_array($reviewData['rating'], array(1, 2, 3, 4, 5))) {
      throw new Exception('Invalid rating');
    }

    if (empty($reviewData['content'])) {
      throw new Exception('Content is required');
    }

    // Create new review
    $newReview = new Review(array(
      'product_id' => isset($reviewData['product_id']) ? $reviewData['product_id'] : null,
      'user_id' => $userId,
      'rating' => $reviewData['rating'],
      'content' => $reviewData['content']
    ));

    // Save review to database (not implemented here)
    return $newReview;
  }

  public static function getReviewsByProduct($productId) {
    // Retrieve reviews from database (not implemented here)
    return array();
  }

  public static function updateReview($reviewId, array $data) {
    // Basic validation
    if (!isset($data['rating']) || !in_array($data['rating'], array(1, 2, 3, 4, 5))) {
      throw new Exception('Invalid rating');
    }

    if (empty($data['content'])) {
      throw new Exception('Content is required');
    }

    // Update review
    $updatedReview = new Review(array(
      'id' => $reviewId,
      'rating' => $data['rating'],
      'content' => $data['content']
    ));

    // Save updated review to database (not implemented here)
    return $updatedReview;
  }
}


// Create new review
$reviewData = array(
  'product_id' => 123,
  'rating' => 4,
  'content' => 'Great product!'
);
$newReview = Review::createReview($reviewData, 456);

// Retrieve reviews by product ID
$productReviews = Review::getReviewsByProduct(123);

// Update existing review
$updateData = array(
  'rating' => 5,
  'content' => 'Even better now!'
);
$updatedReview = Review::updateReview(789, $updateData);


<?php

// Include database connection settings
require_once 'db_config.php';

// Function to add a new review
function add_review($user_id, $product_id, $review_text, $rating) {
    // Validate input data
    if (empty($user_id) || empty($product_id) || empty($review_text)) {
        return false;
    }

    try {
        // Create query to insert review into database
        $query = "INSERT INTO reviews SET user_id = ?, product_id = ?, review_text = ?, rating = ?";

        // Prepare and execute query
        $stmt = $pdo->prepare($query);
        $stmt->execute([$user_id, $product_id, $review_text, $rating]);

        return true;

    } catch (PDOException $e) {
        echo "Error adding review: " . $e->getMessage();
        return false;
    }
}

// Function to get all reviews for a product
function get_reviews($product_id) {
    try {
        // Create query to select reviews from database
        $query = "SELECT * FROM reviews WHERE product_id = ?";

        // Prepare and execute query
        $stmt = $pdo->prepare($query);
        $stmt->execute([$product_id]);

        return $stmt->fetchAll();

    } catch (PDOException $e) {
        echo "Error retrieving reviews: " . $e->getMessage();
        return array();
    }
}

// Function to get all reviews for a user
function get_user_reviews($user_id) {
    try {
        // Create query to select reviews from database
        $query = "SELECT * FROM reviews WHERE user_id = ?";

        // Prepare and execute query
        $stmt = $pdo->prepare($query);
        $stmt->execute([$user_id]);

        return $stmt->fetchAll();

    } catch (PDOException $e) {
        echo "Error retrieving user reviews: " . $e->getMessage();
        return array();
    }
}

?>


// Add a new review
$user_id = 123;
$product_id = 456;
$review_text = "This product is amazing!";
$rating = 5;

if (add_review($user_id, $product_id, $review_text, $rating)) {
    echo "Review added successfully!";
} else {
    echo "Error adding review.";
}

// Get all reviews for a product
$product_id = 456;
$reviews = get_reviews($product_id);
echo json_encode($reviews);

// Get all reviews for a user
$user_id = 123;
$reviews = get_user_reviews($user_id);
echo json_encode($reviews);


/**
 * Adds a new review to the database.
 *
 * @param int $userId The ID of the user who submitted the review.
 * @param int $productId The ID of the product being reviewed.
 * @param float $rating The rating given by the user (1-5).
 * @param string $review The text of the review.
 *
 * @return bool True if the review was successfully added, false otherwise.
 */
function addReview($userId, $productId, $rating, $review) {
  global $db; // assume you're using a database object called db

  $query = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES (:user_id, :product_id, :rating, :review)";

  try {
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);

    return $stmt->execute();
  } catch (PDOException $e) {
    // handle database error
    print "Error adding review: " . $e->getMessage();
    return false;
  }
}

/**
 * Retrieves a list of reviews for a given product.
 *
 * @param int $productId The ID of the product to retrieve reviews for.
 *
 * @return array An array of review objects, each containing user_id, rating, and review text.
 */
function getReviews($productId) {
  global $db;

  $query = "SELECT u.id AS userId, r.rating, r.review
            FROM reviews r
            JOIN users u ON r.user_id = u.id
            WHERE r.product_id = :product_id";

  try {
    $stmt = $db->prepare($query);
    $stmt->bindParam(':product_id', $productId);

    $stmt->execute();

    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    // handle database error
    print "Error retrieving reviews: " . $e->getMessage();
    return array();
  }
}

/**
 * Retrieves a single review for a given user and product.
 *
 * @param int $userId The ID of the user who submitted the review.
 * @param int $productId The ID of the product being reviewed.
 *
 * @return array|null A review object containing user_id, rating, and review text, or null if not found.
 */
function getReview($userId, $productId) {
  global $db;

  $query = "SELECT r.rating, r.review
            FROM reviews r
            WHERE r.user_id = :user_id AND r.product_id = :product_id";

  try {
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);

    $stmt->execute();

    return $stmt->fetch(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    // handle database error
    print "Error retrieving review: " . $e->getMessage();
    return null;
  }
}


// Add a new review
$userId = 123;
$productId = 456;
$rating = 4.5;
$reviewText = 'Great product!';

if (addReview($userId, $productId, $rating, $reviewText)) {
  print "Review added successfully!";
} else {
  print "Error adding review.";
}

// Retrieve all reviews for a given product
$productId = 456;

$reviews = getReviews($productId);

print_r($reviews); // prints array of review objects

// Retrieve a single review for a user and product
$userId = 123;
$productId = 456;

$review = getReview($userId, $productId);

if ($review) {
  print "User $userId gave $product_id a rating of {$review['rating']} with the following review: " . $review['review'];
} else {
  print "No review found for user $userId and product $productId.";
}


// database.php - assume this is where you have your database credentials and connections setup
require_once 'database.php';

class ReviewSystem {
  public function createReview($userId, $productId, $rating, $review) {
    // validate input
    if (!is_int($userId) || !is_int($productId) || !is_int($rating) || !$this->isValidRating($rating)) {
      throw new Exception('Invalid review data');
    }

    // create review
    $stmt = $pdo->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:userId, :productId, :rating, :review)");
    $stmt->execute(['userId' => $userId, 'productId' => $productId, 'rating' => $rating, 'review' => $review]);

    return true;
  }

  public function getReviewsForProduct($productId) {
    // retrieve reviews for product
    $stmt = $pdo->prepare("SELECT * FROM reviews WHERE product_id = :productId");
    $stmt->execute(['productId' => $productId]);
    $reviews = $stmt->fetchAll();

    return $reviews;
  }

  public function updateReview($reviewId, $newRating, $newReview) {
    // validate input
    if (!is_int($reviewId) || !is_int($newRating)) {
      throw new Exception('Invalid review data');
    }

    // update review
    $stmt = $pdo->prepare("UPDATE reviews SET rating = :newRating, review = :newReview WHERE id = :reviewId");
    $stmt->execute(['newRating' => $newRating, 'newReview' => $newReview, 'reviewId' => $reviewId]);

    return true;
  }

  public function deleteReview($reviewId) {
    // validate input
    if (!is_int($reviewId)) {
      throw new Exception('Invalid review data');
    }

    // delete review
    $stmt = $pdo->prepare("DELETE FROM reviews WHERE id = :reviewId");
    $stmt->execute(['reviewId' => $reviewId]);

    return true;
  }

  private function isValidRating($rating) {
    return in_array($rating, [1, 2, 3, 4, 5]);
  }
}


$reviewSystem = new ReviewSystem();

// create a review
$userId = 123;
$productId = 456;
$rating = 5;
$review = 'This is an awesome product!';
$reviewSystem->createReview($userId, $productId, $rating, $review);

// get reviews for a product
$reviewsForProduct = $reviewSystem->getReviewsForProduct(456);
print_r($reviewsForProduct);

// update review
$reviewId = 789;
$newRating = 4;
$newReview = 'This is an okay product.';
$reviewSystem->updateReview($reviewId, $newRating, $newReview);

// delete review
$reviewSystem->deleteReview(789);


// Review model
class Review {
  private $db;

  function __construct($db) {
    $this->db = $db;
  }

  public function getReviews() {
    $query = "SELECT * FROM reviews";
    return $this->db->query($query)->fetchAll();
  }

  public function addReview($user_id, $product_id, $rating, $comment) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:user_id, :product_id, :rating, :comment)";
    $this->db->prepare($query)->execute(array(
      ':user_id' => $user_id,
      ':product_id' => $product_id,
      ':rating' => $rating,
      ':comment' => $comment
    ));
  }

  public function getReviewsForProduct($product_id) {
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    return $this->db->prepare($query)->execute(array(':product_id' => $product_id))->fetchAll();
  }
}

// User review class
class UserReview extends Review {
  private $user_id;

  function __construct($db, $user_id) {
    parent::__construct($db);
    $this->user_id = $user_id;
  }

  public function addReviewForProduct($product_id, $rating, $comment) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:user_id, :product_id, :rating, :comment)";
    $this->db->prepare($query)->execute(array(
      ':user_id' => $this->user_id,
      ':product_id' => $product_id,
      ':rating' => $rating,
      ':comment' => $comment
    ));
  }

  public function getReviewsForUser() {
    $query = "SELECT * FROM reviews WHERE user_id = :user_id";
    return $this->db->prepare($query)->execute(array(':user_id' => $this->user_id))->fetchAll();
  }
}

// Example usage
$db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');

$review_model = new Review($db);
$user_review = new UserReview($db, 1);

// Add review for product
$user_review->addReviewForProduct(123, 5, "Great product!");

// Get all reviews for user
$reviews = $user_review->getReviewsForUser();
print_r($reviews);

// Get all reviews for product
$product_reviews = $review_model->getReviewsForProduct(123);
print_r($product_reviews);


<?php

// Configuration variables
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add a review
function addReview($userId, $productId, $rating, $reviewText)
{
    // Prepare query
    $query = "INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (?, ?, ?, ?)";

    // Bind parameters
    $stmt = $conn->prepare($query);
    $stmt->bind_param("iiii", $userId, $productId, $rating, $reviewText);

    // Execute query
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }

    // Close statement and connection
    $stmt->close();
    $conn->close();
}

// Function to get all reviews for a product
function getProductReviews($productId)
{
    // Prepare query
    $query = "SELECT * FROM reviews WHERE product_id = ?";

    // Bind parameters
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $productId);

    // Execute query
    if ($stmt->execute()) {
        return $stmt->get_result();
    } else {
        return null;
    }

    // Close statement and connection
    $stmt->close();
    $conn->close();
}

// Function to get all reviews for a user
function getUserReviews($userId)
{
    // Prepare query
    $query = "SELECT * FROM reviews WHERE user_id = ?";

    // Bind parameters
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $userId);

    // Execute query
    if ($stmt->execute()) {
        return $stmt->get_result();
    } else {
        return null;
    }

    // Close statement and connection
    $stmt->close();
    $conn->close();
}

// Example usage:
$userId = 1; // Replace with actual user ID
$productId = 2; // Replace with actual product ID

if (addReview($userId, $productId, 5, "This is a great product!")) {
    echo "Review added successfully!";
} else {
    echo "Failed to add review.";
}

$reviews = getProductReviews($productId);
if ($reviews) {
    while ($review = $reviews->fetch_assoc()) {
        echo "User ID: " . $review['user_id'] . ", Rating: " . $review['rating'] . ", Review Text: " . $review['review_text'];
    }
} else {
    echo "No reviews found for this product.";
}

?>


<?php

// Connect to database
$mysqli = new mysqli("localhost", "username", "password", "database");

function get_product_reviews($product_id, $limit = null) {
    global $mysqli;

    // Get reviews for product with given ID
    $query = "SELECT * FROM reviews WHERE product_id = ? ORDER BY id DESC";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $reviews = $stmt->get_result();

    if ($limit !== null) {
        // Limit results
        $reviews = $reviews->fetch_all(MYSQLI_ASSOC, MYSQLI_USE_RESULT);
        array_splice($reviews, 0, -1 * $limit); // Remove excess rows
    }

    return $reviews;
}

function get_product_average_rating($product_id) {
    global $mysqli;

    // Get average rating for product with given ID
    $query = "SELECT AVG(rating) AS average FROM reviews WHERE product_id = ?";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows === 1) {
        return (float)$result->fetch_assoc()["average"];
    } else {
        return null;
    }
}

function create_review($user_id, $product_id, $rating, $review) {
    global $mysqli;

    // Insert new review into database
    $query = "INSERT INTO reviews SET user_id = ?, product_id = ?, rating = ?, review = ?";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param("iifs", $user_id, $product_id, $rating, $review);
    return $stmt->execute();
}

?>


// Get reviews for product with ID 1 and limit to 5
$reviews = get_product_reviews(1, 5);

// Calculate average rating for product with ID 2
$average_rating = get_product_average_rating(2);

// Create a new review for product with ID 3
$result = create_review(1, 3, 4.0, "This is a great product!");
if ($result) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}


<?php

// Connect to database
$dsn = 'mysql:host=localhost;dbname=your_database';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
    exit;
}

// Function to add a review
function add_review($product_id, $user_name, $review_text, $rating) {
    global $pdo;

    try {
        $stmt = $pdo->prepare('INSERT INTO reviews (product_id, user_name, review_text, rating) VALUES (:product_id, :user_name, :review_text, :rating)');
        $stmt->execute([
            'product_id' => $product_id,
            'user_name' => $user_name,
            'review_text' => $review_text,
            'rating' => $rating
        ]);

        return true;
    } catch (PDOException $e) {
        echo 'Error adding review: ' . $e->getMessage();
        return false;
    }
}

// Function to get reviews for a product
function get_reviews($product_id) {
    global $pdo;

    try {
        $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
        $stmt->execute(['product_id' => $product_id]);
        return $stmt->fetchAll();
    } catch (PDOException $e) {
        echo 'Error fetching reviews: ' . $e->getMessage();
        return null;
    }
}

// Example usage
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['submit_review'])) {
        // Add a new review
        add_review(
            $_POST['product_id'],
            $_POST['user_name'],
            $_POST['review_text'],
            $_POST['rating']
        );
    }
}

// Get reviews for a product
$reviews = get_reviews(1); // Replace with the ID of the product

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reviews</title>
</head>
<body>

<h1>Reviews for Product 1:</h1>

<?php if ($reviews) : ?>
    <?php foreach ($reviews as $review) : ?>
        <div>
            <p><?= $review['user_name'] ?> gave this product <?= $review['rating'] ?>/5 stars.</p>
            <p><?= $review['review_text'] ?></p>
        </div>
    <?php endforeach; ?>
<?php else : ?>
    <p>No reviews yet!</p>
<?php endif; ?>

<h2>Leave a review:</h2>

<form action="<?= $_SERVER['PHP_SELF'] ?>" method="post">
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id"><br><br>
    <label for="user_name">Your Name:</label>
    <input type="text" id="user_name" name="user_name"><br><br>
    <label for="review_text">Review:</label>
    <textarea id="review_text" name="review_text"></textarea><br><br>
    <label for="rating">Rating (1-5):</label>
    <input type="number" id="rating" name="rating"><br><br>
    <button type="submit" name="submit_review">Submit Review</button>
</form>

</body>
</html>


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_NAME', 'your_database_name');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');

// Connect to database
$conn = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USER, DB_PASSWORD);

// Function to create a review
function createReview($title, $content, $rating) {
  global $conn;
  
  try {
    // Insert review into database
    $stmt = $conn->prepare("INSERT INTO reviews (title, content, rating, user_id) VALUES (:title, :content, :rating, NULL)");
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    $stmt->execute();
    
    // Get the review ID
    $reviewId = $conn->lastInsertId();
    
    return $reviewId;
  } catch (PDOException $e) {
    echo "Error: " . $e->getMessage();
    return null;
  }
}

// Function to get all reviews
function getAllReviews() {
  global $conn;
  
  try {
    // Select all reviews from database
    $stmt = $conn->prepare("SELECT * FROM reviews");
    $stmt->execute();
    
    // Fetch and return reviews
    $reviews = array();
    while ($row = $stmt->fetch()) {
      $review = array(
        'id' => $row['id'],
        'title' => $row['title'],
        'content' => $row['content'],
        'rating' => $row['rating']
      );
      $reviews[] = $review;
    }
    
    return $reviews;
  } catch (PDOException $e) {
    echo "Error: " . $e->getMessage();
    return null;
  }
}

// Example usage
$reviewId = createReview("Example Review", "This is an example review.", 5);
if ($reviewId !== null) {
  echo "Review created successfully! ID: $reviewId
";
  
  $reviews = getAllReviews();
  if ($reviews !== null) {
    foreach ($reviews as $review) {
      echo "ID: " . $review['id'] . ", Title: " . $review['title'] . ", Content: " . substr($review['content'], 0, 50) . "
";
    }
  } else {
    echo "Error fetching reviews.
";
  }
} else {
  echo "Error creating review.
";
}

?>


// Include the database connection file
require_once 'db.php';

// Function to get all reviews for a user
function getUserReviews($userId) {
  $query = "SELECT r.*, p.name AS product_name FROM reviews r INNER JOIN products p ON r.product_id = p.id WHERE r.user_id = :user_id";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to get all reviews for a product
function getProductReviews($productId) {
  $query = "SELECT r.*, u.name AS user_name FROM reviews r INNER JOIN users u ON r.user_id = u.id WHERE r.product_id = :product_id";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to add a new review
function addReview($userId, $productId, $rating, $review) {
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  return $stmt->execute();
}

// Function to update a review
function updateReview($reviewId, $newRating, $newReview) {
  $query = "UPDATE reviews SET rating = :new_rating, review = :new_review WHERE id = :review_id";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':review_id', $reviewId);
  $stmt->bindParam(':new_rating', $newRating);
  $stmt->bindParam(':new_review', $newReview);
  return $stmt->execute();
}

// Function to delete a review
function deleteReview($reviewId) {
  $query = "DELETE FROM reviews WHERE id = :review_id";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':review_id', $reviewId);
  return $stmt->execute();
}


// Get all reviews for a user
$userId = 1;
$userReviews = getUserReviews($userId);
print_r($userReviews);

// Get all reviews for a product
$productId = 1;
$productReviews = getProductReviews($productId);
print_r($productReviews);

// Add a new review
$newReview = array(
  'rating' => 5,
  'review' => 'This is an awesome product!'
);
$result = addReview(1, 1, $newReview['rating'], $newReview['review']);
echo "Review added successfully: " . ($result ? "true" : "false");

// Update a review
$reviewId = 1;
$newRating = 4;
$newReview = 'This is an okay product';
$result = updateReview($reviewId, $newRating, $newReview);
echo "Review updated successfully: " . ($result ? "true" : "false");

// Delete a review
$result = deleteReview(1);
echo "Review deleted successfully: " . ($result ? "true" : "false");


<?php
// Configuration
$reviews_table = 'reviews'; // name of the database table for reviews
$user_table = 'users'; // name of the database table for users

// Function to get all reviews
function get_reviews($product_id) {
  global $reviews_table;
  $query = "SELECT * FROM $reviews_table WHERE product_id = '$product_id'";
  $result = mysqli_query($GLOBALS['db'], $query);
  $reviews = array();
  while ($row = mysqli_fetch_assoc($result)) {
    $reviews[] = array(
      'id' => $row['id'],
      'user_name' => get_user_name($row['user_id']),
      'rating' => $row['rating'],
      'review' => $row['review']
    );
  }
  return $reviews;
}

// Function to add a new review
function add_review($product_id, $user_id, $rating, $review) {
  global $reviews_table;
  global $db;
  $query = "INSERT INTO $reviews_table (product_id, user_id, rating, review) VALUES ('$product_id', '$user_id', '$rating', '$review')";
  mysqli_query($db, $query);
}

// Function to get a user's name from their ID
function get_user_name($user_id) {
  global $user_table;
  $query = "SELECT name FROM $user_table WHERE id = '$user_id'";
  $result = mysqli_query($GLOBALS['db'], $query);
  return mysqli_fetch_assoc($result)['name'];
}

// Example usage:
$product_id = 1; // ID of the product being reviewed
$reviews = get_reviews($product_id);
foreach ($reviews as $review) {
  echo "User: " . $review['user_name'] . "
";
  echo "Rating: " . $review['rating'] . "
";
  echo "Review: " . $review['review'] . "

";
}


// To add a new review:
add_review(1, 123, 5, "This product is great!");

// To retrieve all reviews for a given product:
$reviews = get_reviews(1);
foreach ($reviews as $review) {
  echo "User: " . $review['user_name'] . "
";
  echo "Rating: " . $review['rating'] . "
";
  echo "Review: " . $review['review'] . "

";
}


// users.php

class User {
    private $id;
    private $name;

    public function __construct($id, $name) {
        $this->id = $id;
        $this->name = $name;
    }

    // Getters and setters
    public function getId() { return $this->id; }
    public function getName() { return $this->name; }
}

// reviews.php

class Review {
    private $id;
    private $userId;
    private $productName;
    private $rating;
    private $content;

    public function __construct($id, $userId, $productName, $rating, $content) {
        $this->id = $id;
        $this->userId = $userId;
        $this->productName = $productName;
        $this->rating = $rating;
        $this->content = $content;
    }

    // Getters and setters
    public function getId() { return $this->id; }
    public function getUserId() { return $this->userId; }
    public function getProductName() { return $this->productName; }
    public function getRating() { return $this->rating; }
    public function getContent() { return $this->content; }
}

// reviewSystem.php

class ReviewSystem {
    private $db;

    public function __construct($dbName) {
        $this->db = new PDO("mysql:host=localhost;dbname=$dbName", "username", "password");
    }

    // Add a review
    public function addReview(User $user, $productName, $rating, $content) {
        try {
            $query = $this->db->prepare("INSERT INTO reviews (user_id, product_name, rating, content) VALUES (:userId, :product_name, :rating, :content)");
            $query->bindParam(":userId", $user->getId());
            $query->bindParam(":product_name", $productName);
            $query->bindParam(":rating", $rating);
            $query->bindParam(":content", $content);
            $query->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Get a review
    public function getReview($id) {
        try {
            $query = $this->db->prepare("SELECT * FROM reviews WHERE id = :id");
            $query->bindParam(":id", $id);
            $query->execute();
            $reviewData = $query->fetch(PDO::FETCH_ASSOC);
            if ($reviewData === false) return null;
            return new Review($reviewData['id'], $reviewData['user_id'], $reviewData['product_name'], $reviewData['rating'], $reviewData['content']);
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return null;
        }
    }

    // Get all reviews for a user
    public function getReviewsForUser($id) {
        try {
            $query = $this->db->prepare("SELECT * FROM reviews WHERE user_id = :id");
            $query->bindParam(":id", $id);
            $query->execute();
            $reviewData = $query->fetchAll(PDO::FETCH_ASSOC);
            if ($reviewData === false) return array();
            $reviews = array();
            foreach ($reviewData as $data) {
                $reviews[] = new Review($data['id'], $data['user_id'], $data['product_name'], $data['rating'], $data['content']);
            }
            return $reviews;
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return array();
        }
    }

    // Edit a review
    public function editReview(Review $review, $newProductName = null, $newRating = null, $newContent = null) {
        try {
            if ($newProductName !== null) $query = $this->db->prepare("UPDATE reviews SET product_name = :product_name WHERE id = :id");
            else if ($newRating !== null) $query = $this->db->prepare("UPDATE reviews SET rating = :rating WHERE id = :id");
            else if ($newContent !== null) $query = $this->db->prepare("UPDATE reviews SET content = :content WHERE id = :id");
            else return false;
            $query->bindParam(":product_name", $newProductName);
            $query->bindParam(":rating", $newRating);
            $query->bindParam(":content", $newContent);
            $query->bindParam(":id", $review->getId());
            $query->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Delete a review
    public function deleteReview(Review $review) {
        try {
            $this->db->prepare("DELETE FROM reviews WHERE id = :id")->bindParam(":id", $review->getId())->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }
}

// Usage
$reviewSystem = new ReviewSystem('your_database_name');

$user = new User(1, 'John Doe');
$productName = 'Example Product';
$rating = 5;
$content = 'This product is great!';

if ($reviewSystem->addReview($user, $productName, $rating, $content)) {
    echo "Review added successfully!";
} else {
    echo "Error adding review.";
}

$reviews = $reviewSystem->getReviewsForUser(1);
foreach ($reviews as $review) {
    echo "Product: " . $review->getProductName() . ", Rating: " . $review->getRating() . ", Content: " . $review->getContent();
}


// Include database connection file
require 'database.php';

function displayReviews() {
    // Query for all reviews from database
    $query = "SELECT * FROM reviews";
    $reviews = mysqli_query($GLOBALS['db'], $query);

    if (!$reviews) {
        die('Error: ' . mysqli_error($GLOBALS['db']));
    }

    echo "<h1>Product Reviews</h1>";
    while ($review = mysqli_fetch_assoc($reviews)) {
        // Display each review
        echo '<div>';
        echo "Reviewer ID: $review[reviewer_id]";
        echo "<br>";
        echo "Rating: $review[rating] / 5";
        echo "<br>";
        echo "Text: $review[text]";
        echo "</div>";
    }
}

function addReview($data) {
    // Insert new review into database
    $query = "INSERT INTO reviews (reviewer_id, product_id, rating, text)
              VALUES ('" . $_SESSION['user_id'] . "', '" . $_POST['product_id'] . "', '".$_POST['rating']."','".$_POST['text']."')";
    
    if (!mysqli_query($GLOBALS['db'], $query)) {
        die('Error: ' . mysqli_error($GLOBALS['db']));
    }
}

// Form for submitting reviews
function reviewForm() {
    echo "<h1>Submit a Review</h1>";
    echo '<form action="review.php" method="post">';
    echo "Product ID: <input type='text' name='product_id'><br><br>";
    echo "Rating (out of 5): <input type='number' name='rating' min='0' max='5'><br><br>";
    echo "Text: <textarea name='text'></textarea><br><br>";
    echo '<button type="submit">Submit Review</button>';
    echo '</form>';
}

// Main script
if (isset($_POST['product_id'])) {
    addReview($_POST);
} else if ($_SERVER["REQUEST_METHOD"] == "GET") {
    reviewForm();
}
displayReviews();


// Connect to database
require 'database.php';

// Start session
session_start();

// If user is logged in, display product selection page and add option for them to submit reviews
if ($_SESSION['is_logged_in']) {
    // Query for all products from database
    $query = "SELECT * FROM products";
    $products = mysqli_query($GLOBALS['db'], $query);

    echo "<h1>Products</h1>";
    while ($product = mysqli_fetch_assoc($products)) {
        // Display each product and add link to submit review for logged-in user
        echo '<div>';
        echo "Product ID: $product[id]";
        echo "<br>";
        echo "Name: $product[name]";
        echo "<br>";
        echo '<a href="review.php?product_id='.$product['id'].'">Submit Review</a>';
        echo "</div>";
    }
}


// models/Review.php

class Review {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview($data) {
        $query = "INSERT INTO reviews (user_id, product_name, review, rating) VALUES (:user_id, :product_name, :review, :rating)";
        $stmt = $this->db->prepare($query);
        $stmt->execute([
            ':user_id' => $data['user_id'],
            ':product_name' => $data['product_name'],
            ':review' => $data['review'],
            ':rating' => $data['rating']
        ]);
        return $this->db->lastInsertId();
    }

    public function getReviews() {
        $query = "SELECT * FROM reviews";
        $stmt = $this->db->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
}


// controllers/ReviewController.php

class ReviewController {
    private $review;

    public function __construct(Review $review) {
        $this->review = $review;
    }

    public function index() {
        // Get all reviews from the database.
        return json_encode($this->review->getReviews());
    }

    public function store() {
        // Create a new review in the database.
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            try {
                $data = $_POST;
                $reviewId = $this->review->createReview($data);
                return json_encode(['message' => 'Review created successfully', 'id' => $reviewId]);
            } catch (PDOException $e) {
                return json_encode(['error' => 'Failed to create review']);
            }
        }
    }
}


// index.php

require_once('vendor/autoload.php');
require_once('models/Review.php');
require_once('controllers/ReviewController.php');

$db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
$review = new Review($db);
$reviewController = new ReviewController($review);

if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    echo $reviewController->index();
} elseif ($_SERVER['REQUEST_METHOD'] === 'POST') {
    echo $reviewController->store();
}


<?php

// Include connection settings and function to connect to database
require_once 'dbconnect.php';

function insertReview($user_id, $product_id, $rating, $review) {
    // Prepare SQL query
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES (?, ?, ?, ?)";

    // Prepare statement and execute query
    $stmt = $db->prepare($sql);
    $stmt->execute([$user_id, $product_id, $rating, $review]);

    return $stmt->rowCount();
}

function getReviews() {
    // Retrieve reviews from database
    $reviews = array();

    try {
        $sql = "SELECT r.id, u.username, p.name AS product_name, r.rating, r.review, r.created_at 
                FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id";

        $stmt = $db->prepare($sql);
        $stmt->execute();

        while ($row = $stmt->fetch()) {
            $reviews[] = array(
                'id' => $row['id'],
                'username' => $row['username'],
                'product_name' => $row['product_name'],
                'rating' => $row['rating'],
                'review' => $row['review'],
                'created_at' => date('Y-m-d H:i:s', strtotime($row['created_at']))
            );
        }

    } catch (PDOException $e) {
        // Handle database error
        echo "Database error: " . $e->getMessage();
    }

    return $reviews;
}

function updateReview($id, $rating, $review) {
    // Prepare SQL query
    $sql = "UPDATE reviews SET rating = ?, review = ? WHERE id = ?";

    // Prepare statement and execute query
    $stmt = $db->prepare($sql);
    $result = $stmt->execute([$rating, $review, $id]);

    return $result;
}

function deleteReview($id) {
    // Prepare SQL query
    $sql = "DELETE FROM reviews WHERE id = ?";

    // Prepare statement and execute query
    $stmt = $db->prepare($sql);
    $result = $stmt->execute([$id]);

    return $result;
}

// Example usage:
$user_id = 1; // ID of user who wrote the review
$product_id = 2; // ID of product reviewed
$rating = 4;
$review = 'This is a great product!';

insertReview($user_id, $product_id, $rating, $review);

$reviews = getReviews();
print_r($reviews);

?>


// db.php: database connection file
$pdo = new PDO('mysql:host=localhost;dbname=reviews', 'root', '');

function create_review($user_id, $product_id, $review_text, $rating) {
  global $pdo;
  try {
    $stmt = $pdo->prepare("INSERT INTO reviews (user_id, product_id, review_text, rating)
                          VALUES (:user_id, :product_id, :review_text, :rating)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    return $stmt->execute();
  } catch (PDOException $e) {
    echo 'Error creating review: ' . $e->getMessage();
    return false;
  }
}

function get_reviews($product_id = null, $user_id = null) {
  global $pdo;
  try {
    if ($product_id && !$user_id) {
      $query = "SELECT * FROM reviews WHERE product_id = :product_id";
      $stmt = $pdo->prepare($query);
      $stmt->bindParam(':product_id', $product_id);
      return $stmt->fetchAll();
    } elseif (!$product_id && $user_id) {
      $query = "SELECT * FROM reviews WHERE user_id = :user_id";
      $stmt = $pdo->prepare($query);
      $stmt->bindParam(':user_id', $user_id);
      return $stmt->fetchAll();
    } else {
      return array(); // Return an empty array if both product_id and user_id are provided
    }
  } catch (PDOException $e) {
    echo 'Error fetching reviews: ' . $e->getMessage();
    return array();
  }
}

function update_review($id, $user_id, $product_id, $review_text, $rating) {
  global $pdo;
  try {
    $stmt = $pdo->prepare("UPDATE reviews SET review_text = :review_text, rating = :rating
                          WHERE id = :id AND user_id = :user_id AND product_id = :product_id");
    $stmt->bindParam(':id', $id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    return $stmt->execute();
  } catch (PDOException $e) {
    echo 'Error updating review: ' . $e->getMessage();
    return false;
  }
}

function delete_review($id, $user_id, $product_id) {
  global $pdo;
  try {
    $stmt = $pdo->prepare("DELETE FROM reviews WHERE id = :id AND user_id = :user_id AND product_id = :product_id");
    $stmt->bindParam(':id', $id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    return $stmt->execute();
  } catch (PDOException $e) {
    echo 'Error deleting review: ' . $e->getMessage();
    return false;
  }
}


// Create a new review
$user_id = 1;
$product_id = 2;
$review_text = "Great product!";
$rating = 5;
if (create_review($user_id, $product_id, $review_text, $rating)) {
  echo 'Review created successfully!';
} else {
  echo 'Error creating review';
}

// Get reviews for a specific product
$product_id = 2;
$reviews = get_reviews($product_id);
foreach ($reviews as $review) {
  echo $review['review_text'] . ', Rating: ' . $review['rating'];
}

// Update an existing review
$id = 1;
$user_id = 1;
$product_id = 2;
$review_text = "Great product, but a bit expensive.";
$rating = 4;
if (update_review($id, $user_id, $product_id, $review_text, $rating)) {
  echo 'Review updated successfully!';
} else {
  echo 'Error updating review';
}

// Delete an existing review
$id = 1;
$user_id = 1;
$product_id = 2;
if (delete_review($id, $user_id, $product_id)) {
  echo 'Review deleted successfully!';
} else {
  echo 'Error deleting review';
}


<?php

// Connect to database (replace with your own connection settings)
$dsn = 'mysql:host=localhost;dbname=your_database';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
    exit;
}

// Create a new review
function create_review($product_id, $user_id, $title, $content, $rating) {
    $sql = "INSERT INTO reviews (product_id, user_id, title, content, rating)
            VALUES (:product_id, :user_id, :title, :content, :rating)";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Retrieve all reviews for a specific product
function get_reviews($product_id) {
    $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    if ($stmt->execute()) {
        return $stmt->fetchAll();
    } else {
        return array();
    }
}

// Update an existing review
function update_review($review_id, $title, $content, $rating) {
    $sql = "UPDATE reviews SET title = :title, content = :content, rating = :rating WHERE id = :id";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':id', $review_id);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Delete a review
function delete_review($review_id) {
    $sql = "DELETE FROM reviews WHERE id = :id";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':id', $review_id);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

?>


// Create a new review
create_review(1, 1, 'Great product!', 'I love this product.', 5);

// Retrieve all reviews for a specific product
$reviews = get_reviews(1);
print_r($reviews);

// Update an existing review
update_review(1, 'Even better now!', 'I still love this product.', 4);

// Delete a review
delete_review(1);


// database.php (example connection file)
$conn = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');


function createUserReview($productId, $userId, $rating, $review) {
    global $conn;

    // validate input data
    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5";
    }
    if (empty($review)) {
        return "Error: Review cannot be empty";
    }

    try {
        // insert review into database
        $stmt = $conn->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)");
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        $stmt->execute();

        // if successful, return a success message
        return "Review created successfully!";
    } catch (PDOException $e) {
        return "Error: " . $e->getMessage();
    }
}


function getReviewsForProduct($productId) {
    global $conn;

    try {
        // retrieve reviews for the given product from database
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id ORDER BY id DESC");
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC); // returns array of review data

    } catch (PDOException $e) {
        return "Error: " . $e->getMessage();
    }
}


// create a new review for product with id 1, by user with id 2
$result = createUserReview(1, 2, 4, 'This product is amazing!');
echo $result;

// retrieve reviews for the product with id 1
$reviews = getReviewsForProduct(1);
foreach ($reviews as $review) {
    echo "Rating: $review[rating], Review: $review[review]";
}


class ReviewSystem {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  }

  /**
   * Create a new review.
   *
   * @param int $userId
   * @param int $productId
   * @param int $rating
   * @param string|null $comment
   *
   * @return bool|void
   */
  public function createReview($userId, $productId, $rating, $comment = null) {
    try {
      $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)');
      $stmt->execute([$userId, $productId, $rating, $comment]);
      return true;
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Get all reviews for a product.
   *
   * @param int $productId
   *
   * @return array|null
   */
  public function getReviewsForProduct($productId) {
    try {
      $stmt = $this->db->prepare('SELECT r.id, u.username, p.name, r.rating, r.comment FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id WHERE r.product_id = ?');
      $stmt->execute([$productId]);
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
      return null;
    }
  }

  /**
   * Update a review.
   *
   * @param int $reviewId
   * @param int|null $rating
   * @param string|null $comment
   *
   * @return bool|void
   */
  public function updateReview($reviewId, $rating = null, $comment = null) {
    try {
      if ($rating !== null) {
        $stmt = $this->db->prepare('UPDATE reviews SET rating = ? WHERE id = ?');
        $stmt->execute([$rating, $reviewId]);
      }
      if ($comment !== null) {
        $stmt = $this->db->prepare('UPDATE reviews SET comment = ? WHERE id = ?');
        $stmt->execute([$comment, $reviewId]);
      }
      return true;
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Delete a review.
   *
   * @param int $reviewId
   *
   * @return bool|void
   */
  public function deleteReview($reviewId) {
    try {
      $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = ?');
      $stmt->execute([$reviewId]);
      return true;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


$reviewSystem = new ReviewSystem();

// Create a new review
$userId = 1;
$productId = 1;
$rating = 5;
$comment = 'Great product!';
$result = $reviewSystem->createReview($userId, $productId, $rating, $comment);
if (!$result) {
  echo "Error creating review";
}

// Get all reviews for a product
$reviews = $reviewSystem->getReviewsForProduct($productId);
print_r($reviews);

// Update a review
$reviewId = 1;
$result = $reviewSystem->updateReview($reviewId, null, 'Even better product!');
if (!$result) {
  echo "Error updating review";
}

// Delete a review
$result = $reviewSystem->deleteReview($reviewId);
if (!$result) {
  echo "Error deleting review";
}


// Function to add a new review
function add_review($product_id, $rating, $review) {
  global $db;
  
  // Query to insert the review into the database
  $query = "INSERT INTO reviews (product_id, rating, review, user_id) VALUES (?, ?, ?, ?)";
  $stmt = $db->prepare($query);
  $stmt->bind_param("iiii", $product_id, $rating, $review, $_SESSION['user_id']);
  $stmt->execute();
}

// Function to get all reviews for a product
function get_reviews_for_product($product_id) {
  global $db;
  
  // Query to retrieve the reviews from the database
  $query = "SELECT * FROM reviews WHERE product_id = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  return $stmt->get_result();
}

// Function to get a single review by ID
function get_review_by_id($review_id) {
  global $db;
  
  // Query to retrieve the review from the database
  $query = "SELECT * FROM reviews WHERE id = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("i", $review_id);
  $stmt->execute();
  return $stmt->get_result()->fetch_assoc();
}

// Function to update a review
function update_review($review_id, $rating, $review) {
  global $db;
  
  // Query to update the review in the database
  $query = "UPDATE reviews SET rating = ?, review = ? WHERE id = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("iii", $rating, $review, $review_id);
  $stmt->execute();
}

// Function to delete a review
function delete_review($review_id) {
  global $db;
  
  // Query to delete the review from the database
  $query = "DELETE FROM reviews WHERE id = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("i", $review_id);
  $stmt->execute();
}


// Assume we have a logged-in user with ID 1 and product ID 1
$_SESSION['user_id'] = 1;
$product_id = 1;

// Add a new review
add_review($product_id, 5, 'Great product!');

// Get all reviews for the product
$reviews = get_reviews_for_product($product_id);
foreach ($reviews as $review) {
  echo "Rating: {$review['rating']}, Review: {$review['review']}<br>";
}

// Update a review
update_review(1, 4, 'Not bad...');

// Delete a review
delete_review(1);


<?php

// Database connection settings
$host = 'your_host';
$username = 'your_username';
$password = 'your_password';
$dbname = 'your_database';

// Connect to database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function submit_review($title, $content, $rating, $user_id) {
  global $conn;
  
  // Insert review into database
  $sql = "INSERT INTO reviews (title, content, rating, user_id)
          VALUES ('$title', '$content', '$rating', '$user_id')";
  if ($conn->query($sql)) {
    return true; // Review submitted successfully
  } else {
    return false; // Error submitting review
  }
}

function get_reviews() {
  global $conn;
  
  // Retrieve all reviews from database
  $sql = "SELECT * FROM reviews ORDER BY id DESC";
  $result = $conn->query($sql);
  if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
      $reviews[] = array(
        'id' => $row['id'],
        'title' => $row['title'],
        'content' => $row['content'],
        'rating' => $row['rating']
      );
    }
  } else {
    $reviews = null; // No reviews found
  }
  
  return $reviews;
}

function filter_reviews($rating) {
  global $conn;
  
  // Retrieve reviews with specified rating from database
  $sql = "SELECT * FROM reviews WHERE rating = '$rating'";
  $result = $conn->query($sql);
  if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
      $reviews[] = array(
        'id' => $row['id'],
        'title' => $row['title'],
        'content' => $row['content']
      );
    }
  } else {
    $reviews = null; // No reviews found
  }
  
  return $reviews;
}

?>


// Submit a review
$submitted = submit_review('My Review', 'This is my review.', 5, 1);
if ($submitted) {
    echo "Review submitted successfully!";
} else {
    echo "Error submitting review.";
}

// Get all reviews
$reviews = get_reviews();
if ($reviews) {
    foreach ($reviews as $review) {
        echo $review['title'] . ' (' . $review['rating'] . '/5)';
        echo '<br>';
        echo $review['content'];
        echo '<hr>';
    }
} else {
    echo "No reviews found.";
}

// Filter reviews by rating
$filtered_reviews = filter_reviews(4);
if ($filtered_reviews) {
    foreach ($filtered_reviews as $review) {
        echo $review['title'] . ' (' . $review['rating'] . '/5)';
        echo '<br>';
        echo $review['content'];
        echo '<hr>';
    }
} else {
    echo "No reviews found for specified rating.";
}


class Review {
  private $db;

  public function __construct(PDO $db) {
    $this->db = $db;
  }

  public function createReview($user_id, $product_id, $rating, $comment) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, comment)
              VALUES (:user_id, :product_id, :rating, :comment)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    return $stmt->execute();
  }

  public function getReviews($product_id) {
    $query = "SELECT * FROM reviews
              WHERE product_id = :product_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getUserReviews($user_id) {
    $query = "SELECT * FROM reviews
              WHERE user_id = :user_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function updateReview($review_id, $new_rating, $new_comment) {
    $query = "UPDATE reviews SET rating = :rating, comment = :comment
              WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $review_id);
    $stmt->bindParam(':rating', $new_rating);
    $stmt->bindParam(':comment', $new_comment);
    return $stmt->execute();
  }

  public function deleteReview($review_id) {
    $query = "DELETE FROM reviews
              WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $review_id);
    return $stmt->execute();
  }
}


function displayReviews() {
  // Get the current user ID
  $user_id = $_SESSION['user_id'];

  // Create an instance of the Review model
  $reviewModel = new Review($db);

  // Display a form for the user to submit their review
  ?>
  <h2>Submit Your Review</h2>
  <form action="" method="post">
    <input type="hidden" name="product_id" value="<?php echo $_GET['product_id']; ?>">
    <select name="rating">
      <option value="1">1/5</option>
      <option value="2">2/5</option>
      <option value="3">3/5</option>
      <option value="4">4/5</option>
      <option value="5">5/5</option>
    </select>
    <textarea name="comment"></textarea>
    <button type="submit" name="submit_review">Submit Review</button>
  </form>

  <?php
}

function handleSubmitReview() {
  // Get the current user ID
  $user_id = $_SESSION['user_id'];

  // Create an instance of the Review model
  $reviewModel = new Review($db);

  // Get the product ID and review data from the form submission
  $product_id = $_POST['product_id'];
  $rating = $_POST['rating'];
  $comment = $_POST['comment'];

  // Insert the review into the database
  if ($reviewModel->createReview($user_id, $product_id, $rating, $comment)) {
    echo "Review submitted successfully!";
  } else {
    echo "Error submitting review.";
  }
}


function displayProductReviews($product_id) {
  // Create an instance of the Review model
  $reviewModel = new Review($db);

  // Get the reviews for the current product
  $reviews = $reviewModel->getReviews($product_id);

  // Display the reviews
  ?>
  <h2>Reviews for this Product</h2>
  <?php foreach ($reviews as $review) { ?>
    <p>
      Rating: <?php echo $review['rating']; ?>/5
      Comment: <?php echo $review['comment']; ?>
    </p>
  <?php } ?>


<?php

// Review model
class Review {
    public $id;
    public $product_id;
    public $user_id;
    public $rating;
    public $review_text;

    function __construct($id, $product_id, $user_id, $rating, $review_text) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->user_id = $user_id;
        $this->rating = $rating;
        $this->review_text = $review_text;
    }
}

// Review controller
class ReviewController {
    private $reviews;

    function __construct() {
        // Initialize reviews array (in a real application, this would likely come from a database)
        $this->reviews = array();
    }

    function add_review($product_id, $user_id, $rating, $review_text) {
        // Create new review object
        $new_review = new Review(count($this->reviews) + 1, $product_id, $user_id, $rating, $review_text);

        // Add review to reviews array
        $this->reviews[] = $new_review;

        return $new_review;
    }

    function get_reviews_for_product($product_id) {
        // Filter reviews for the specified product
        $product_reviews = array_filter($this->reviews, function ($review) use ($product_id) {
            return $review->product_id == $product_id;
        });

        return $product_reviews;
    }
}

// Example usage:
$review_controller = new ReviewController();

$new_review = $review_controller->add_review(123, 456, 5, "Great product!");
echo "New review created: 
";
print_r($new_review);

$product_reviews = $review_controller->get_reviews_for_product(123);
echo "
Reviews for product 123:
";
print_r($product_reviews);

?>


// config.php
<?php

define('DB_HOST', 'localhost');
define('DB_USERNAME', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database');

?>


// review.php
<?php

require_once 'config.php';

class Review {
  private $db;

  public function __construct() {
    try {
      $this->db = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USERNAME, DB_PASSWORD);
      $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
      die('Could not connect to database: ' . $e->getMessage());
    }
  }

  public function create($productId, $userId, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)");
      $stmt->execute([$productId, $userId, $rating, $review]);
      return true;
    } catch (PDOException $e) {
      echo 'Error creating review: ' . $e->getMessage();
      return false;
    }
  }

  public function read($id = null) {
    try {
      if ($id !== null) {
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = ?");
        $stmt->execute([$id]);
        return $stmt->fetch(PDO::FETCH_ASSOC);
      } else {
        $stmt = $this->db->query("SELECT * FROM reviews");
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
      }
    } catch (PDOException $e) {
      echo 'Error reading review: ' . $e->getMessage();
      return null;
    }
  }

  public function update($id, $rating = null, $review = null) {
    try {
      if ($rating !== null || $review !== null) {
        $stmt = $this->db->prepare("UPDATE reviews SET rating = ?, review = ? WHERE id = ?");
        $stmt->execute([$rating, $review, $id]);
        return true;
      } else {
        echo 'Error updating review: must specify at least one field';
        return false;
      }
    } catch (PDOException $e) {
      echo 'Error updating review: ' . $e->getMessage();
      return false;
    }
  }

  public function delete($id) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
      $stmt->execute([$id]);
      return true;
    } catch (PDOException $e) {
      echo 'Error deleting review: ' . $e->getMessage();
      return false;
    }
  }

  public function getAverageRating($productId) {
    try {
      $stmt = $this->db->prepare("SELECT AVG(rating) FROM reviews WHERE product_id = ?");
      $stmt->execute([$productId]);
      return $stmt->fetchColumn();
    } catch (PDOException $e) {
      echo 'Error getting average rating: ' . $e->getMessage();
      return null;
    }
  }

  public function countReviews($productId, $userId = null) {
    try {
      if ($userId !== null) {
        $stmt = $this->db->prepare("SELECT COUNT(*) FROM reviews WHERE product_id = ? AND user_id = ?");
        $stmt->execute([$productId, $userId]);
        return $stmt->fetchColumn();
      } else {
        $stmt = $this->db->prepare("SELECT COUNT(*) FROM reviews WHERE product_id = ?");
        $stmt->execute([$productId]);
        return $stmt->fetchColumn();
      }
    } catch (PDOException $e) {
      echo 'Error counting reviews: ' . $e->getMessage();
      return null;
    }
  }
}

$review = new Review();

// Example usage:
echo "Creating review...
";
$review->create(1, 1, 5.0, "Great product!");

echo "
Reading review...
";
$reviewData = $review->read(1);
print_r($reviewData);

echo "
Updating review...
";
$review->update(1, 4.5, "Even better!");

echo "
Getting average rating...
";
$averageRating = $review->getAverageRating(1);
echo "$averageRating
";

echo "
Counting reviews for product and user...
";
$countReviews = $review->countReviews(1, 1);
echo "$countReviews
";

?>


// models/Review.php

class Review {
    private $id;
    private $user_id;
    private $product_id;
    private $rating;
    private $review;

    public function __construct($id = null) {
        if ($id !== null) {
            $this->load($id);
        }
    }

    public function load($id) {
        // Load review from database (e.g., using PDO or mysqli)
        // ...
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->user_id;
    }

    public function getProductId() {
        return $this->product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}


// controllers/ReviewsController.php

class ReviewsController {
    private $db;

    public function __construct() {
        // Initialize database connection (e.g., using PDO or mysqli)
        $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
    }

    public function createReview($user_id, $product_id, $rating, $review) {
        try {
            $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)');
            $stmt->execute([$user_id, $product_id, $rating, $review]);
            return true;
        } catch (PDOException $e) {
            // Handle database error
            return false;
        }
    }

    public function getReviews($product_id = null) {
        try {
            if ($product_id !== null) {
                $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = ?');
                $stmt->execute([$product_id]);
            } else {
                $stmt = $this->db->query('SELECT * FROM reviews');
            }
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            // Handle database error
            return [];
        }
    }

    public function updateReview($id, $rating, $review) {
        try {
            $stmt = $this->db->prepare('UPDATE reviews SET rating = ?, review = ? WHERE id = ?');
            $stmt->execute([$rating, $review, $id]);
            return true;
        } catch (PDOException $e) {
            // Handle database error
            return false;
        }
    }

    public function deleteReview($id) {
        try {
            $this->db->exec('DELETE FROM reviews WHERE id = ?');
            return true;
        } catch (PDOException $e) {
            // Handle database error
            return false;
        }
    }
}


$reviewsController = new ReviewsController();

// Create a new review
$user_id = 1;
$product_id = 2;
$rating = 5;
$review = 'Great product!';
$createdReviewId = $reviewsController->createReview($user_id, $product_id, $rating, $review);
echo "Created review with ID: $createdReviewId
";

// Get all reviews for a specific product
$productReviews = $reviewsController->getReviews($product_id);
print_r($productReviews);

// Update an existing review
$updatedReviewId = 1;
$newRating = 4;
$newReview = 'Good product!';
$updated = $reviewsController->updateReview($updatedReviewId, $newRating, $newReview);
echo "Updated review with ID: $updatedReviewId
";

// Delete a review
$deletedReviewId = 2;
$deleted = $reviewsController->deleteReview($deletedReviewId);
echo "Deleted review with ID: $deletedReviewId
";


class Database {
  private $db_name = 'reviews_database';
  
  public function __construct() {
    try {
      // Attempt to connect to the database
      $this->connect();
    } catch (PDOException $e) {
      echo "Connection failed: " . $e->getMessage();
    }
  }

  private function connect() {
    // Connect to the database using PDO
    $pdo = new PDO('sqlite:'.$this->db_name);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  }

  public function query($query, $params = array()) {
    try {
      $stmt = $this->pdo->prepare($query);
      $stmt->execute($params);
      return $stmt;
    } catch (PDOException $e) {
      echo "Query failed: " . $e->getMessage();
    }
  }

  public function fetchAll($query, $params = array()) {
    try {
      $stmt = $this->pdo->prepare($query);
      $stmt->execute($params);
      return $stmt->fetchAll();
    } catch (PDOException $e) {
      echo "Query failed: " . $e->getMessage();
    }
  }

  public function getLastId() {
    // Get the last inserted id
    return $this->pdo->lastInsertId();
  }
}


class Review {
  private $db;

  public function __construct(Database $db) {
    $this->db = $db;
  }

  public function create($user_id, $product_id, $rating, $review_text) {
    // Insert review into the database
    try {
      $query = "INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (:user_id, :product_id, :rating, :review_text)";
      $params = array(
        ':user_id' => $user_id,
        ':product_id' => $product_id,
        ':rating' => $rating,
        ':review_text' => $review_text
      );
      $this->db->query($query, $params);
    } catch (PDOException $e) {
      echo "Review creation failed: " . $e->getMessage();
    }
  }

  public function readAll() {
    // Select all reviews from the database
    try {
      $query = "SELECT * FROM reviews";
      return $this->db->fetchAll($query);
    } catch (PDOException $e) {
      echo "Review retrieval failed: " . $e->getMessage();
    }
  }

  public function update($id, $new_rating, $new_review_text) {
    // Update review in the database
    try {
      $query = "UPDATE reviews SET rating = :rating, review_text = :review_text WHERE id = :id";
      $params = array(
        ':rating' => $new_rating,
        ':review_text' => $new_review_text,
        ':id' => $id
      );
      $this->db->query($query, $params);
    } catch (PDOException $e) {
      echo "Review update failed: " . $e->getMessage();
    }
  }

  public function delete($id) {
    // Delete review from the database
    try {
      $query = "DELETE FROM reviews WHERE id = :id";
      $params = array(':id' => $id);
      $this->db->query($query, $params);
    } catch (PDOException $e) {
      echo "Review deletion failed: " . $e->getMessage();
    }
  }
}


$db = new Database();

$review = new Review($db);

// Create a review
$user_id = 1;
$product_id = 2;
$rating = 5;
$review_text = "This product is amazing!";

$review->create($user_id, $product_id, $rating, $review_text);

// Read all reviews
$reviews = $review->readAll();

print_r($reviews);

// Update a review
$new_rating = 4;
$new_review_text = "This product is okay.";

$review->update(1, $new_rating, $new_review_text);

// Delete a review
$review->delete(1);


// Review class to encapsulate review-related functionality
class Review {
  private $db;

  public function __construct() {
    // Initialize database connection
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  /**
   * Add a new review for a product
   *
   * @param int $product_id Product ID
   * @param float $rating Rating (1-5)
   * @param string $comment Comment
   */
  public function addReview($product_id, $rating, $comment) {
    // Validate input
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
      throw new Exception('Invalid rating');
    }

    try {
      // Insert review into database
      $stmt = $this->db->prepare('INSERT INTO reviews (product_id, rating, comment) VALUES (?, ?, ?)');
      $stmt->execute([$product_id, $rating, $comment]);
      return true;
    } catch (PDOException $e) {
      throw new Exception('Error adding review: ' . $e->getMessage());
    }
  }

  /**
   * Get all reviews for a product
   *
   * @param int $product_id Product ID
   */
  public function getReviews($product_id) {
    try {
      // Retrieve reviews from database
      $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = ?');
      $stmt->execute([$product_id]);
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      throw new Exception('Error retrieving reviews: ' . $e->getMessage());
    }
  }

  /**
   * Get a single review by ID
   *
   * @param int $id Review ID
   */
  public function getReview($id) {
    try {
      // Retrieve review from database
      $stmt = $this->db->prepare('SELECT * FROM reviews WHERE id = ?');
      $stmt->execute([$id]);
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      throw new Exception('Error retrieving review: ' . $e->getMessage());
    }
  }

  /**
   * Update a review
   *
   * @param int $id Review ID
   * @param float $rating New rating
   * @param string $comment New comment
   */
  public function updateReview($id, $rating, $comment) {
    try {
      // Validate input
      if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        throw new Exception('Invalid rating');
      }

      // Update review in database
      $stmt = $this->db->prepare('UPDATE reviews SET rating = ?, comment = ? WHERE id = ?');
      $stmt->execute([$rating, $comment, $id]);
      return true;
    } catch (PDOException $e) {
      throw new Exception('Error updating review: ' . $e->getMessage());
    }
  }

  /**
   * Delete a review
   *
   * @param int $id Review ID
   */
  public function deleteReview($id) {
    try {
      // Delete review from database
      $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = ?');
      $stmt->execute([$id]);
      return true;
    } catch (PDOException $e) {
      throw new Exception('Error deleting review: ' . $e->getMessage());
    }
  }
}


// Create a new Review instance
$review = new Review();

// Add a new review for a product
$product_id = 1;
$rating = 4.5;
$comment = "Great product!";
$review->addReview($product_id, $rating, $comment);

// Get all reviews for a product
$reviews = $review->getReviews($product_id);
print_r($reviews);

// Get a single review by ID
$id = 1;
$review->getReview($id);

// Update a review
$rating = 5.0;
$comment = "Excellent!";
$review->updateReview($id, $rating, $comment);

// Delete a review
$review->deleteReview($id);


// Include database connection settings
require 'config.php';

function submitReview($productId, $rating, $review) {
  // Check if user is logged in
  if (!isset($_SESSION['user_id'])) {
    return array('error' => 'Please login to submit a review.');
  }

  // Insert review into database
  $stmt = $pdo->prepare("INSERT INTO reviews (product_id, user_id, rating, review)
                        VALUES (:product_id, :user_id, :rating, :review)");
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':user_id', $_SESSION['user_id']);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  $stmt->execute();

  return array('success' => true, 'message' => 'Review submitted successfully.');
}

function getReviews($productId) {
  // Get all reviews for the specified product
  $stmt = $pdo->prepare("SELECT r.id, u.name, u.email, r.rating, r.review
                        FROM reviews r
                        JOIN users u ON r.user_id = u.id
                        WHERE r.product_id = :product_id");
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();

  return $stmt->fetchAll();
}

function displayReviews($reviews) {
  // Display reviews in HTML format
  echo '<ul>';
  foreach ($reviews as $review) {
    echo '<li>' . $review['name'] . ' (' . $review['email'] . ') - ';
    if (isset($_SESSION['user_id']) && $_SESSION['user_id'] == $review['user_id']) {
      echo '<button> Edit </button>';
    }
    echo 'Rating: ' . $review['rating'] . '/5, Review: ' . $review['review'];
    echo '</li>';
  }
  echo '</ul>';
}


if (isset($_POST['submit'])) {
  $productId = $_POST['product_id'];
  $rating = $_POST['rating'];
  $review = $_POST['review'];

  $result = submitReview($productId, $rating, $review);
  if ($result['success']) {
    echo 'Review submitted successfully!';
  } else {
    echo $result['error'];
  }
}


$productId = 1; // Replace with actual product ID
$reviews = getReviews($productId);
displayReviews($reviews);


require_once 'db_connect.php';


function get_reviews($product_id) {
  global $conn; // assuming you have a global variable named `$conn` representing the database connection

  $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
  $result = mysqli_query($conn, $query);

  if (mysqli_num_rows($result) > 0) {
    while ($review = mysqli_fetch_assoc($result)) {
      echo "<p>" . $review['rating'] . "/5 stars: " . $review['review_text'] . "</p>";
    }
  } else {
    echo "No reviews for this product.";
  }

  return;
}


function add_review($product_id, $user_id, $rating, $review_text) {
  global $conn; // assuming you have a global variable named `$conn` representing the database connection

  $query = "INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES ('$product_id', '$user_id', '$rating', '$review_text')";
  mysqli_query($conn, $query);

  return;
}


function display_review_form($product_id) {
  echo "<h2>Leave a Review for Product #{$product_id}</h2>";
  echo "<form action='' method='post'>";
  echo "<label for='rating'>Rating:</label>";
  echo "<select id='rating' name='rating'>";
  echo "<option value='1'>1/5 stars</option>";
  echo "<option value='2'>2/5 stars</option>";
  echo "<option value='3'>3/5 stars</option>";
  echo "<option value='4'>4/5 stars</option>";
  echo "<option value='5'>5/5 stars</option>";
  echo "</select><br><br>";
  echo "<label for='review_text'>Review:</label>";
  echo "<textarea id='review_text' name='review_text'></textarea><br><br>";
  echo "<input type='submit' value='Submit Review'>";
  echo "</form>";

  return;
}


display_review_form(1); // display review form for product #1

$reviews = get_reviews(1); // retrieve reviews for product #1 and output them in the page

// add a new review for product #2
add_review(2, 1234, 5, "This is an awesome product!");


// reviews.php

class UserReview {
  private $id;
  private $userId;
  private $productId;
  private $rating;
  private $comment;

  public function __construct($id, $userId, $productId, $rating, $comment) {
    $this->id = $id;
    $this->userId = $userId;
    $this->productId = $productId;
    $this->rating = $rating;
    $this->comment = $comment;
  }

  public function getId() { return $this->id; }
  public function getUserId() { return $this->userId; }
  public function getProductId() { return $this->productId; }
  public function getRating() { return $this->rating; }
  public function getComment() { return $this->comment; }

  // Static methods to create a new review
  public static function create($userId, $productId, $rating, $comment) {
    $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
    $stmt = $db->prepare("INSERT INTO reviews (userId, productId, rating, comment) VALUES (:userId, :productId, :rating, :comment)");
    $stmt->execute(array(
      ':userId' => $userId,
      ':productId' => $productId,
      ':rating' => $rating,
      ':comment' => $comment
    ));
    return new self($db->lastInsertId(), $userId, $productId, $rating, $comment);
  }

  // Static method to get all reviews for a product
  public static function getAllReviewsForProduct($productId) {
    $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
    $stmt = $db->prepare("SELECT * FROM reviews WHERE productId = :productId");
    $stmt->execute(array(':productId' => $productId));
    return array_map(function($reviewData) { return new self($reviewData['id'], $reviewData['userId'], $reviewData['productId'], $reviewData['rating'], $reviewData['comment']); }, $stmt->fetchAll());
  }

  // Static method to get all reviews for a user
  public static function getAllReviewsForUser($userId) {
    $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
    $stmt = $db->prepare("SELECT * FROM reviews WHERE userId = :userId");
    $stmt->execute(array(':userId' => $userId));
    return array_map(function($reviewData) { return new self($reviewData['id'], $reviewData['userId'], $reviewData['productId'], $reviewData['rating'], $reviewData['comment']); }, $stmt->fetchAll());
  }
}


// Create a new review
$review = UserReview::create(1, 3, 5, 'Great product!');

// Get all reviews for a product
$reviewsForProduct = UserReview::getAllReviewsForProduct(3);
print_r($reviewsForProduct);

// Get all reviews for a user
$reviewsForUser = UserReview::getAllReviewsForUser(1);
print_r($reviewsForUser);


// Connect to database
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add a review
function addReview($user_id, $review, $rating) {
    global $conn;
    $sql = "INSERT INTO reviews (user_id, review, rating)
            VALUES ('$user_id', '$review', '$rating')";
    if ($conn->query($sql)) {
        return true; // Review added successfully
    } else {
        return false; // Error adding review
    }
}

// Function to update a review
function updateReview($id, $new_review, $new_rating) {
    global $conn;
    $sql = "UPDATE reviews SET review='$new_review', rating='$new_rating'
            WHERE id=$id";
    if ($conn->query($sql)) {
        return true; // Review updated successfully
    } else {
        return false; // Error updating review
    }
}

// Function to delete a review
function deleteReview($id) {
    global $conn;
    $sql = "DELETE FROM reviews WHERE id=$id";
    if ($conn->query($sql)) {
        return true; // Review deleted successfully
    } else {
        return false; // Error deleting review
    }
}

// Function to get all reviews for a user
function getUserReviews($user_id) {
    global $conn;
    $sql = "SELECT * FROM reviews WHERE user_id=$user_id";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        // Output data of each row
        while($row = $result->fetch_assoc()) {
            echo "Review: " . $row["review"]. " - Rating: " . $row["rating"]. "<br>";
        }
    } else {
        echo "No reviews found for this user.";
    }
}


<?php require_once 'review_functions.php'; ?>


// Add a review
$result = addReview(1, "This is a great product!", 4.5);
if ($result) {
    echo "Review added successfully.";
} else {
    echo "Error adding review.";
}

// Update a review
$result = updateReview(2, "I'm so disappointed with this product.", 1.0);
if ($result) {
    echo "Review updated successfully.";
} else {
    echo "Error updating review.";
}

// Delete a review
$result = deleteReview(3);
if ($result) {
    echo "Review deleted successfully.";
} else {
    echo "Error deleting review.";
}

// Get all reviews for a user
getUserReviews(1);


<?php

// Database connection settings
$hostname = 'localhost';
$username = 'root';
$password = '';
$dbname = 'reviews';

// Establish database connection
$conn = mysqli_connect($hostname, $username, $password, $dbname);

function createUser($name, $email, $password) {
  global $conn;
  $sql = "INSERT INTO users (name, email, password) VALUES ('$name', '$email', '$password')";
  return mysqli_query($conn, $sql);
}

function getReviews($product_name = null) {
  global $conn;
  if ($product_name) {
    $sql = "SELECT * FROM reviews WHERE product_name LIKE '%$product_name%'";
  } else {
    $sql = "SELECT * FROM reviews";
  }
  return mysqli_query($conn, $sql);
}

function createReview($user_id, $product_name, $review_text, $rating) {
  global $conn;
  $sql = "INSERT INTO reviews (user_id, product_name, review_text, rating) VALUES ('$user_id', '$product_name', '$review_text', '$rating')";
  return mysqli_query($conn, $sql);
}

function updateReview($id, $new_rating) {
  global $conn;
  $sql = "UPDATE reviews SET rating = '$new_rating' WHERE id = '$id'";
  return mysqli_query($conn, $sql);
}

function deleteReview($id) {
  global $conn;
  $sql = "DELETE FROM reviews WHERE id = '$id'";
  return mysqli_query($conn, $sql);
}

// Example usage:
$name = 'John Doe';
$email = 'johndoe@example.com';
$password = 'password123';

createUser($name, $email, $password);

$product_name = 'Example Product';
$review_text = 'This is a great product!';
$rating = 5;

$user_id = 1; // Get user id from database

createReview($user_id, $product_name, $review_text, $rating);

// Read reviews
$reviews = getReviews();
while ($row = mysqli_fetch_assoc($reviews)) {
  echo "User ID: " . $row['user_id'] . "
";
  echo "Product Name: " . $row['product_name'] . "
";
  echo "Review Text: " . $row['review_text'] . "
";
  echo "Rating: " . $row['rating'] . "

";
}

?>


class Review {
    private $id;
    private $title;
    private $content;
    private $rating;
    private $created_at;

    public function __construct($id, $title, $content, $rating) {
        $this->id = $id;
        $this->title = $title;
        $this->content = $content;
        $this->rating = $rating;
        $this->created_at = date('Y-m-d H:i:s');
    }

    public function getId() {
        return $this->id;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getContent() {
        return $this->content;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getCreatedAt() {
        return $this->created_at;
    }
}


class ReviewController {
    private $reviews = array();

    public function addReview($title, $content, $rating) {
        $review = new Review(count($this->reviews) + 1, $title, $content, $rating);
        $this->reviews[] = $review;
        return $review;
    }

    public function getReviews() {
        return $this->reviews;
    }
}


class UserReview extends ReviewController {
    private $userId;

    public function __construct($userId) {
        $this->userId = $userId;
        parent::__construct();
    }

    public function addReview($title, $content, $rating) {
        $review = parent::addReview($title, $content, $rating);
        $review->setUserId($this->userId);
        return $review;
    }
}


class Review extends Model {
    private $id;
    private $title;
    private $content;
    private $rating;
    private $created_at;

    public function __construct() {
        parent::__construct();
    }

    public function setId($id) {
        $this->id = $id;
    }

    public function setTitle($title) {
        $this->title = $title;
    }

    public function setContent($content) {
        $this->content = $content;
    }

    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setUserId($userId) {
        $this->userId = $userId;
    }
}


function displayReviews() {
    $reviews = ReviewController::getReviews();
    foreach ($reviews as $review) {
        echo "Title: {$review->getTitle()}<br>";
        echo "Content: {$review->getContent()}<br>";
        echo "Rating: {$review->getRating()}<br>";
        echo "Created at: {$review->getCreatedAt()}<br><hr>";
    }
}


<?php

require_once 'functions.php';

$reviews = ReviewController::getReviews();

if (isset($_POST['addReview'])) {
    $title = $_POST['title'];
    $content = $_POST['content'];
    $rating = $_POST['rating'];

    $review = ReviewController::addReview($title, $content, $rating);

    echo "Review added successfully!<br>";

} else {
    displayReviews();
}
?>


<?php

// Assume we have a database connection established with MySQLi
$mysqli = new mysqli("localhost", "username", "password", "database");

function createReview($productId, $rating, $reviewText) {
    global $mysqli;
    
    // Validate input
    if (!is_int($rating)) {
        throw new InvalidArgumentException("Rating must be an integer");
    }
    if (!preg_match('/^[0-9]+$/', $rating)) {
        throw new InvalidArgumentException("Rating must be a number between 1 and 5");
    }
    if (empty($reviewText) || strlen($reviewText) > 2000) {
        throw new InvalidArgumentException("Review text cannot be empty or longer than 2000 characters");
    }
    
    // Prepare query
    $query = "INSERT INTO reviews (product_id, user_id, rating, review_text)
              VALUES (?, ?, ?, ?)";
    $stmt = $mysqli->prepare($query);
    
    // Bind parameters
    $stmt->bind_param("iii", $productId, 0, $rating, $reviewText); // Replace `0` with actual user ID
    
    // Execute query
    if (!$stmt->execute()) {
        throw new Exception("Failed to create review: " . $mysqli->error);
    }
    
    return $mysqli->insert_id;
}

function getReviews($productId) {
    global $mysqli;
    
    // Prepare query
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $mysqli->prepare($query);
    
    // Bind parameter
    $stmt->bind_param("i", $productId);
    
    // Execute query and fetch results
    if (!$stmt->execute()) {
        throw new Exception("Failed to retrieve reviews: " . $mysqli->error);
    }
    $result = $stmt->get_result();
    return $result;
}

function displayReviews($reviews) {
    echo "<h2>Reviews</h2>";
    foreach ($reviews as $review) {
        echo "<p>" . $review['rating'] . "/5 stars: " . $review['review_text'] . "</p>";
    }
}

// Example usage
try {
    $productId = 1; // Replace with actual product ID
    
    $reviews = getReviews($productId);
    
    displayReviews($reviews);
} catch (Exception $e) {
    echo "<p>Error: " . $e->getMessage() . "</p>";
}


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'root';
$password = '';

try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die("Error connecting to database: " . $e->getMessage());
}

function add_review($review_text, $product_id, $user_id) {
    global $conn;
    
    // Insert review into reviews table
    $stmt = $conn->prepare("INSERT INTO reviews (text, product_id, user_id) VALUES (:text, :product_id, :user_id)");
    $stmt->bindParam(':text', $review_text);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    
    // Get the ID of the newly inserted review
    $new_review_id = $conn->lastInsertId();
    
    return $new_review_id;
}

function get_reviews($product_id) {
    global $conn;
    
    // Retrieve reviews from reviews table where product_id matches
    $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    
    $reviews = array();
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        $reviews[] = array(
            'id' => $row['id'],
            'text' => $row['text'],
            'user_id' => $row['user_id']
        );
    }
    
    return $reviews;
}

function get_user_reviews($user_id) {
    global $conn;
    
    // Retrieve reviews from reviews table where user_id matches
    $stmt = $conn->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    
    $reviews = array();
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        $reviews[] = array(
            'id' => $row['id'],
            'text' => $row['text'],
            'product_id' => $row['product_id']
        );
    }
    
    return $reviews;
}

function delete_review($review_id) {
    global $conn;
    
    // Delete review from reviews table where id matches
    $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $review_id);
    $stmt->execute();
}

?>


require_once 'review.php';

// Add a new review
$new_review_id = add_review('This product is great!', 123, 456);

// Get all reviews for a specific product
$product_reviews = get_reviews(123);
print_r($product_reviews);

// Get all reviews written by a specific user
$user_reviews = get_user_reviews(456);
print_r($user_reviews);

// Delete a review
delete_review(789);


<?php

// Configuration and Database Connection
$host = 'localhost';
$dbname = 'reviews_system';
$username = 'your_username';
$password = 'your_password';

try {
    $dsn = "mysql:host=$host;dbname=$dbname";
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// Function to create a review
function create_review($product_id, $user_name, $review, $rating) {
    global $pdo;
    
    try {
        $stmt = $pdo->prepare("INSERT INTO reviews (product_id, user_name, review, rating) VALUES (:product_id, :user_name, :review, :rating)");
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review', $review);
        $stmt->bindParam(':rating', $rating);
        
        if ($stmt->execute()) {
            return true;
        } else {
            throw new PDOException($stmt->errorInfo());
        }
    } catch (PDOException $e) {
        echo 'Error creating review: ' . $e->getMessage();
        return false;
    }
}

// Function to read all reviews
function read_reviews() {
    global $pdo;
    
    try {
        $reviews = [];
        $stmt = $pdo->query("SELECT r.id, p.name as product_name, r.user_name, r.review, r.rating FROM reviews r INNER JOIN products p ON r.product_id=p.id");
        
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $reviews[] = $row;
        }
        
        return $reviews;
    } catch (PDOException $e) {
        echo 'Error reading reviews: ' . $e->getMessage();
        return [];
    }
}

// Function to read reviews by specific product
function read_reviews_by_product($product_id) {
    global $pdo;
    
    try {
        $stmt = $pdo->query("SELECT * FROM reviews WHERE product_id=:product_id");
        $stmt->bindParam(':product_id', $product_id);
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo 'Error reading reviews by product: ' . $e->getMessage();
        return [];
    }
}

// Function to update a review
function update_review($review_id, $new_rating, $new_review) {
    global $pdo;
    
    try {
        $stmt = $pdo->prepare("UPDATE reviews SET rating=:new_rating, review=:new_review WHERE id=:review_id");
        $stmt->bindParam(':review_id', $review_id);
        $stmt->bindParam(':new_rating', $new_rating);
        $stmt->bindParam(':new_review', $new_review);
        
        if ($stmt->execute()) {
            return true;
        } else {
            throw new PDOException($stmt->errorInfo());
        }
    } catch (PDOException $e) {
        echo 'Error updating review: ' . $e->getMessage();
        return false;
    }
}

// Function to delete a review
function delete_review($review_id) {
    global $pdo;
    
    try {
        $stmt = $pdo->prepare("DELETE FROM reviews WHERE id=:review_id");
        $stmt->bindParam(':review_id', $review_id);
        
        if ($stmt->execute()) {
            return true;
        } else {
            throw new PDOException($stmt->errorInfo());
        }
    } catch (PDOException $e) {
        echo 'Error deleting review: ' . $e->getMessage();
        return false;
    }
}

// Usage examples
create_review(1, 'John Doe', 'This product is great!', 5);
$reviews = read_reviews();
foreach ($reviews as $review) {
    echo "Review ID: $review[id]
";
    echo "Product Name: $review[product_name]
";
    echo "User Name: $review[user_name]
";
    echo "Review Text: $review[review]
";
    echo "Rating: $review[rating]

";
}

$reviews = read_reviews_by_product(1);
foreach ($reviews as $review) {
    echo "Review ID: $review[id]
";
    echo "Product Name: $review[product_name]
";
    echo "User Name: $review[user_name]
";
    echo "Review Text: $review[review]
";
    echo "Rating: $review[rating]

";
}

update_review(1, 4, 'This product is just okay.');
delete_review(2);

?>


<?php

// Configuration settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Function to create a review
function createReview($userId, $productId, $rating, $review) {
  global $db;

  // Insert review into database
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  $result = $stmt->execute();

  return $result;
}

// Function to read all reviews
function getReviews() {
  global $db;

  // Retrieve reviews from database
  $query = "SELECT * FROM reviews";
  $stmt = $db->prepare($query);
  $stmt->execute();
  $reviews = $stmt->fetchAll();

  return $reviews;
}

// Function to read a single review by ID
function getReviewById($id) {
  global $db;

  // Retrieve review from database
  $query = "SELECT * FROM reviews WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':id', $id);
  $stmt->execute();
  $review = $stmt->fetch();

  return $review;
}

// Function to update a review
function updateReview($id, $rating, $review) {
  global $db;

  // Update review in database
  $query = "UPDATE reviews SET rating = :rating, review = :review WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':id', $id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  $result = $stmt->execute();

  return $result;
}

// Function to delete a review
function deleteReview($id) {
  global $db;

  // Delete review from database
  $query = "DELETE FROM reviews WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':id', $id);
  $result = $stmt->execute();

  return $result;
}

// Initialize database connection
$db = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USERNAME, DB_PASSWORD);

?>


// Create a new review for a product with ID 1 from user with ID 1.
createReview(1, 1, 5, "I love this product! It's amazing.");

// Retrieve all reviews and print them out.
$reviews = getReviews();
foreach ($reviews as $review) {
  echo "ID: " . $review['id'] . ", Rating: " . $review['rating'] . ", Review: " . $review['review'] . "
";
}

// Update review with ID 1 to have a rating of 4 and new review text.
updateReview(1, 4, "I still love this product! But I've found some flaws now.");

// Delete the review with ID 2.
deleteReview(2);


<?php

// Include database connection
require_once 'db.php';

function create_review($user_id, $product_id, $rating, $review) {
  // Insert review into database
  $query = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES (:user_id, :product_id, :rating, :review)";
  $stmt = $pdo->prepare($query);
  $stmt->execute([
    ':user_id' => $user_id,
    ':product_id' => $product_id,
    ':rating' => $rating,
    ':review' => $review
  ]);
}

function get_reviews() {
  // Retrieve all reviews from database
  $query = "SELECT r.*, u.name AS user_name
            FROM reviews r
            JOIN users u ON r.user_id = u.id";
  $stmt = $pdo->prepare($query);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function delete_review($id) {
  // Delete review from database
  $query = "DELETE FROM reviews WHERE id = :id";
  $stmt = $pdo->prepare($query);
  $stmt->execute([':id' => $id]);
}

?>


<?php
require_once 'reviews.php';

// Display all reviews
$reviews = get_reviews();
?>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Reviews</title>
</head>
<body>

  <?php foreach ($reviews as $review): ?>
    <h2><?= $review['user_name'] ?> (<?= $review['rating'] ?>/5)</h2>
    <p><?= $review['review'] ?></p>
    <button onclick="deleteReview(<?= $review['id'] ?>)">Delete</button>

    <script>
      function deleteReview(id) {
        if (confirm('Are you sure you want to delete this review?')) {
          window.location.href = 'delete.php?id=' + id;
        }
      }
    </script>
  <?php endforeach; ?>

  <!-- Form for leaving new reviews -->
  <form action="create.php" method="post">
    <label for="user_id">User ID:</label>
    <input type="number" name="user_id" required>

    <br>

    <label for="product_id">Product ID:</label>
    <input type="number" name="product_id" required>

    <br>

    <label for="rating">Rating:</label>
    <select name="rating">
      <?php for ($i = 1; $i <= 5; $i++): ?>
        <option value="<?= $i ?>"><?= $i ?>/5</option>
      <?php endfor; ?>
    </select>

    <br>

    <label for="review">Review:</label>
    <textarea name="review"></textarea>

    <br>

    <button type="submit">Leave Review</button>
  </form>

  <!-- PHP for creating new reviews -->
  <?php if (isset($_POST['user_id']) && isset($_POST['product_id'])): ?>
    <?php create_review(
      $_POST['user_id'],
      $_POST['product_id'],
      $_POST['rating'],
      $_POST['review']
    ); ?>
    <script>alert('Review created successfully!');</script>
  <?php endif; ?>

</body>
</html>


<?php

require_once 'reviews.php';

// Create new review
if (isset($_POST['user_id']) && isset($_POST['product_id'])) {
  create_review(
    $_POST['user_id'],
    $_POST['product_id'],
    $_POST['rating'],
    $_POST['review']
  );
}

?>


<?php

// Database connection settings
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'reviews');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function create_review($user_id, $product_id, $rating, $review) {
    global $conn;
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiis", $user_id, $product_id, $rating, $review);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function get_reviews($product_id) {
    global $conn;
    $sql = "SELECT * FROM reviews
            WHERE product_id = ? AND rating >= 3";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    if ($stmt->execute()) {
        return $stmt->get_result();
    } else {
        return false;
    }
}

function get_user_reviews($user_id) {
    global $conn;
    $sql = "SELECT * FROM reviews
            WHERE user_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $user_id);
    if ($stmt->execute()) {
        return $stmt->get_result();
    } else {
        return false;
    }
}

// Example usage:
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = "Great product!";

if (create_review($user_id, $product_id, $rating, $review)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

$reviews = get_reviews($product_id);
if ($reviews) {
    while ($row = $reviews->fetch_assoc()) {
        echo $row['username'] . ": " . $row['review'];
    }
} else {
    echo "No reviews found.";
}


<?php

// Connect to the database
$mysqli = new mysqli('localhost', 'username', 'password', 'database');

if ($mysqli->connect_errno) {
    echo "Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error;
}

// Function to display reviews for a specific user
function get_user_reviews($user_id) {
    global $mysqli;

    $query = "SELECT r.id, u.name, r.product_name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.user_id = '$user_id' ORDER BY created_at DESC";
    $result = $mysqli->query($query);

    while ($row = $result->fetch_assoc()) {
        echo "<div><b>Review by " . $row['name'] . "</b><br>";
        echo "Product: <i>" . $row['product_name'] . "</i><br>";
        echo "Rating: <i>" . $row['rating'] . "/5</i><br>";
        echo "Review: <p>" . nl2br($row['review']) . "</p></div>";
    }
}

// Function to add a new review
function add_review($user_id, $product_name, $rating, $review) {
    global $mysqli;

    $query = "INSERT INTO reviews (user_id, product_name, rating, review) VALUES ('$user_id', '$product_name', '$rating', '$review')";
    if ($mysqli->query($query)) {
        echo "Review added successfully!";
    } else {
        echo "Failed to add review: (" . $mysqli->errno . ") " . $mysqli->error;
    }
}

// Example usage
get_user_reviews(1);

// Add a new review
add_review(1, 'Product A', 4, 'This product is great! I love its features.');

?>


<?php

// Configuration file for database connection details
require_once 'config.php';

class Review {
    private $db;

    public function __construct() {
        $this->db = new Database();
        if (!$this->db->connect()) {
            die("Connection failed: " . $this->db->error());
        }
    }

    // Function to create a review
    public function createReview($user_id, $product_id, $content, $rating) {
        try {
            $query = "INSERT INTO reviews (user_id, product_id, content, rating)
                      VALUES (?, ?, ?, ?)";
            $stmt = $this->db->prepare($query);
            $stmt->bind_param("iis", $user_id, $product_id, $content, $rating);

            if ($stmt->execute()) {
                return true;
            } else {
                throw new Exception($stmt->error);
            }
        } catch (Exception $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to retrieve all reviews for a product
    public function getReviewsForProduct($product_id) {
        try {
            $query = "SELECT r.id, u.name, p.title, r.content, r.rating
                      FROM reviews r
                      JOIN users u ON r.user_id = u.id
                      JOIN products p ON r.product_id = p.id
                      WHERE r.product_id = ?";
            $stmt = $this->db->prepare($query);
            $stmt->bind_param("i", $product_id);

            if ($stmt->execute()) {
                return $stmt->get_result();
            } else {
                throw new Exception($stmt->error);
            }
        } catch (Exception $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to edit a review
    public function editReview($review_id, $content = null, $rating = null) {
        try {
            if ($content !== null || $rating !== null) {
                $query = "UPDATE reviews SET content = ?, rating = ?
                            WHERE id = ?";
                $stmt = $this->db->prepare($query);
                $stmt->bind_param("sis", $content, $rating, $review_id);

                if ($stmt->execute()) {
                    return true;
                } else {
                    throw new Exception($stmt->error);
                }
            } else {
                return false; // No changes made
            }
        } catch (Exception $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to delete a review
    public function deleteReview($review_id) {
        try {
            $query = "DELETE FROM reviews WHERE id = ?";
            $stmt = $this->db->prepare($query);
            $stmt->bind_param("i", $review_id);

            if ($stmt->execute()) {
                return true;
            } else {
                throw new Exception($stmt->error);
            }
        } catch (Exception $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }
}

?>


require_once 'review.php';

$review = new Review();

// Create a review
$user_id = 1; // ID of the user who left the review
$product_id = 2; // ID of the product being reviewed
$content = "This is an example review.";
$rating = 4;

if ($review->createReview($user_id, $product_id, $content, $rating)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

// Retrieve all reviews for a product
$product_id = 2;
$result = $review->getReviewsForProduct($product_id);

if ($result) {
    while ($row = $result->fetch_assoc()) {
        echo "ID: " . $row["id"] . "<br>";
        echo "User Name: " . $row["name"] . "<br>";
        echo "Product Title: " . $row["title"] . "<br>";
        echo "Review Content: " . $row["content"] . "<br>";
        echo "Rating: " . $row["rating"] . "/5<br><hr>";
    }
} else {
    echo "No reviews found for this product.";
}

// Edit a review
$review_id = 1;
$content = "This is the updated review content.";
$rating = 4;

if ($review->editReview($review_id, $content, $rating)) {
    echo "Review edited successfully!";
} else {
    echo "Error editing review.";
}

// Delete a review
$review_id = 1;

if ($review->deleteReview($review_id)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}


// Database connection settings
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database_name";

// Create a new PDO instance
try {
    $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}

// Function to add review
function add_review($product_id, $user_name, $review_text, $rating) {
    global $conn;
    $sql = "INSERT INTO reviews (product_id, user_name, review_text, rating)
            VALUES (:product_id, :user_name, :review_text, :rating)";
    
    try {
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);
        
        if ($stmt->execute()) {
            return true;
        } else {
            echo "Error adding review: " . $conn->errorInfo();
            return false;
        }
    } catch (PDOException $e) {
        echo "Error adding review: " . $e->getMessage();
        return false;
    }
}

// Function to display average rating
function get_average_rating($product_id) {
    global $conn;
    $sql = "SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = :product_id";
    
    try {
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        
        if ($stmt->execute()) {
            $result = $stmt->fetch();
            return $result['average_rating'];
        } else {
            echo "Error getting average rating: " . $conn->errorInfo();
            return null;
        }
    } catch (PDOException $e) {
        echo "Error getting average rating: " . $e->getMessage();
        return null;
    }
}

// Function to display all reviews for a product
function get_reviews($product_id, $limit = 10) {
    global $conn;
    $sql = "SELECT * FROM reviews WHERE product_id = :product_id ORDER BY id DESC LIMIT :limit";
    
    try {
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':limit', $limit);
        
        if ($stmt->execute()) {
            return $stmt->fetchAll();
        } else {
            echo "Error getting reviews: " . $conn->errorInfo();
            return array();
        }
    } catch (PDOException $e) {
        echo "Error getting reviews: " . $e->getMessage();
        return array();
    }
}


add_review(1, 'John Doe', 'This is a great product!', 4.5);
echo get_average_rating(1); // outputs the average rating for product with id 1

$reviews = get_reviews(1);
foreach ($reviews as $review) {
    echo "Review by " . $review['user_name'] . ": " . $review['review_text'] . " (Rating: " . $review['rating'] . ")";
}


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database_name');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function createUserReview($product_id, $user_name, $review_text, $rating) {
    global $conn;
    
    // Prepare and execute query
    $sql = "INSERT INTO reviews (product_id, user_name, review, rating)
            VALUES (?, ?, ?, ?)";
    
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiss", $product_id, $user_name, $review_text, $rating);
    
    if ($stmt->execute()) {
        echo "Review created successfully.";
    } else {
        echo "Error creating review: " . $stmt->error;
    }
    
    $stmt->close();
}

function getReviews($product_id) {
    global $conn;
    
    // Prepare and execute query
    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    
    if ($stmt->execute()) {
        $reviews = array();
        
        $result = $stmt->get_result();
        
        while ($row = $result->fetch_assoc()) {
            $reviews[] = $row;
        }
        
        return $reviews;
    } else {
        echo "Error retrieving reviews: " . $stmt->error;
    }
    
    $stmt->close();
}

function calculateAverageRating($product_id) {
    global $conn;
    
    // Prepare and execute query
    $sql = "SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = ?";
    
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        
        $row = $result->fetch_assoc();
        
        return $row['average_rating'];
    } else {
        echo "Error calculating average rating: " . $stmt->error;
    }
    
    $stmt->close();
}

// Example usage
createUserReview(1, 'John Doe', 'Great product!', 5);
$reviews = getReviews(1);
foreach ($reviews as $review) {
    echo $review['user_name'] . ': ' . $review['review'];
}
echo 'Average rating: ' . calculateAverageRating(1);

?>


class Review {
    private $id;
    private $userId;
    private $productId;
    private $rating;
    private $review;

    public function __construct($id, $userId, $productId, $rating, $review) {
        $this->id = $id;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->review = $review;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}

class ReviewModel {
    private $reviews;

    public function __construct() {
        $this->reviews = array();
    }

    public function addReview($userId, $productId, $rating, $review) {
        $newReview = new Review(count($this->reviews), $userId, $productId, $rating, $review);
        array_push($this->reviews, $newReview);
        return $newReview;
    }

    public function getReviewsForProduct($id) {
        $productReviews = array();
        foreach ($this->reviews as $review) {
            if ($review->getProductId() == $id) {
                array_push($productReviews, $review);
            }
        }
        return $productReviews;
    }

    public function getReview($id) {
        foreach ($this->reviews as $review) {
            if ($review->getId() == $id) {
                return $review;
            }
        }
        return null;
    }

    public function deleteReview($id) {
        foreach ($this->reviews as $key => $review) {
            if ($review->getId() == $id) {
                unset($this->reviews[$key]);
                return true;
            }
        }
        return false;
    }
}

class ReviewController {
    private $model;

    public function __construct() {
        $this->model = new ReviewModel();
    }

    public function createReview($userId, $productId, $rating, $review) {
        return $this->model->addReview($userId, $productId, $rating, $review);
    }

    public function getReviewsForProduct($id) {
        return $this->model->getReviewsForProduct($id);
    }

    public function getReview($id) {
        return $this->model->getReview($id);
    }

    public function deleteReview($id) {
        return $this->model->deleteReview($id);
    }
}

class ReviewView {
    private $controller;

    public function __construct() {
        $this->controller = new ReviewController();
    }

    public function displayCreateForm() {
        echo '<form action="" method="post">';
        echo 'Username: <input type="text" name="username"><br>';
        echo 'Product ID: <input type="number" name="product_id"><br>';
        echo 'Rating (1-5): <input type="number" name="rating"><br>';
        echo 'Review: <textarea name="review"></textarea><br>';
        echo '<input type="submit" name="create_review">';
        echo '</form>';
    }

    public function displayReviews($reviews) {
        foreach ($reviews as $review) {
            echo 'Rating: ' . $review->getRating() . '/5<br>';
            echo 'Review: ' . $review->getReview() . '<br><br>';
        }
    }

    public function displayUpdateForm($id) {
        echo '<form action="" method="post">';
        echo 'ID: <input type="number" name="id" value="' . $id . '" disabled><br>';
        echo 'Username: <input type="text" name="username"><br>';
        echo 'Product ID: <input type="number" name="product_id"><br>';
        echo 'Rating (1-5): <input type="number" name="rating"><br>';
        echo 'Review: <textarea name="review"></textarea><br>';
        echo '<input type="submit" name="update_review">';
        echo '</form>';
    }
}

class ReviewAdminView {
    private $controller;

    public function __construct() {
        $this->controller = new ReviewController();
    }

    public function displayDeleteForm($id) {
        echo '<form action="" method="post">';
        echo 'ID: <input type="number" name="id" value="' . $id . '" disabled><br>';
        echo '<input type="submit" name="delete_review">';
        echo '</form>';
    }
}

// Usage
$view = new ReviewView();
$adminView = new ReviewAdminView();

// Create a new review
$view->displayCreateForm();
if (isset($_POST['create_review'])) {
    $userId = $_POST['username'];
    $productId = $_POST['product_id'];
    $rating = $_POST['rating'];
    $review = $_POST['review'];
    $reviewController = new ReviewController();
    $newReview = $reviewController->createReview($userId, $productId, $rating, $review);
    echo 'New review created: <br>';
    print_r($newReview);
}

// Display reviews for a product
$product_id = 1;
$reviews = $view->controller->getReviewsForProduct($product_id);
$view->displayReviews($reviews);

// Update an existing review
$existingReviewId = 1;
$view->displayUpdateForm($existingReviewId);
if (isset($_POST['update_review'])) {
    $reviewController = new ReviewController();
    $newReview = $reviewController->getReview($existingReviewId);
    if ($newReview) {
        $newReview->setRating($_POST['rating']);
        $newReview->setReview($_POST['review']);
        echo 'Review updated: <br>';
        print_r($newReview);
    } else {
        echo 'No review found with that ID.';
    }
}

// Delete a review
$existingReviewId = 1;
$adminView->displayDeleteForm($existingReviewId);
if (isset($_POST['delete_review'])) {
    $reviewController = new ReviewController();
    if ($reviewController->deleteReview($existingReviewId)) {
        echo 'Review deleted: <br>';
    } else {
        echo 'No review found with that ID.';
    }
}


<?php

// assume we have the following database table for reviews
// CREATE TABLE reviews (
//   id INT PRIMARY KEY AUTO_INCREMENT,
//   product_id INT,
//   user_id INT,
//   rating TINYINT,
//   comment TEXT,
//   created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
// );

class Review {
  private $id;
  private $product_id;
  private $user_id;
  private $rating;
  private $comment;

  public function __construct($data) {
    $this->id = $data['id'];
    $this->product_id = $data['product_id'];
    $this->user_id = $data['user_id'];
    $this->rating = $data['rating'];
    $this->comment = $data['comment'];
  }

  public function getId() { return $this->id; }
  public function getProductId() { return $this->product_id; }
  public function getUserId() { return $this->user_id; }
  public function getRating() { return $this->rating; }
  public function getComment() { return $this->comment; }

  // calculate average rating for a product
  public static function getAverageRating($productId) {
    global $db;
    $query = "SELECT AVG(rating) AS average FROM reviews WHERE product_id = :product_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':product_id', $productId, PDO::PARAM_INT);
    $stmt->execute();
    return $stmt->fetchColumn();
  }

  // create a new review
  public static function createReview($data) {
    global $db;
    $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
              VALUES (:product_id, :user_id, :rating, :comment)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':product_id', $data['product_id'], PDO::PARAM_INT);
    $stmt->bindParam(':user_id', $data['user_id'], PDO::PARAM_INT);
    $stmt->bindParam(':rating', $data['rating'], PDO::PARAM_INT);
    $stmt->bindParam(':comment', $data['comment'], PDO::PARAM_STR);
    return $stmt->execute();
  }

  // update an existing review
  public static function updateReview($reviewId, $data) {
    global $db;
    $query = "UPDATE reviews SET product_id = :product_id, user_id = :user_id,
                        rating = :rating, comment = :comment
              WHERE id = :id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':id', $reviewId, PDO::PARAM_INT);
    $stmt->bindParam(':product_id', $data['product_id'], PDO::PARAM_INT);
    $stmt->bindParam(':user_id', $data['user_id'], PDO::PARAM_INT);
    $stmt->bindParam(':rating', $data['rating'], PDO::PARAM_INT);
    $stmt->bindParam(':comment', $data['comment'], PDO::PARAM_STR);
    return $stmt->execute();
  }

  // delete a review
  public static function deleteReview($reviewId) {
    global $db;
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':id', $reviewId, PDO::PARAM_INT);
    return $stmt->execute();
  }
}

// assume we have a database connection object called $db

function getUserReviews($userId) {
  global $db;
  $query = "SELECT * FROM reviews WHERE user_id = :user_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':user_id', $userId, PDO::PARAM_INT);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
}

function getProductReviews($productId) {
  global $db;
  $query = "SELECT * FROM reviews WHERE product_id = :product_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':product_id', $productId, PDO::PARAM_INT);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
}

function displayReviews() {
  // get all reviews
  global $db;
  $query = "SELECT * FROM reviews";
  $stmt = $db->prepare($query);
  $stmt->execute();
  $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

  // loop through each review and echo its details
  foreach ($reviews as $review) {
    echo 'Product: ' . $review['product_id'] . '<br>';
    echo 'User: ' . $review['user_id'] . '<br>';
    echo 'Rating: ' . $review['rating'] . '/5<br>';
    echo 'Comment: ' . $review['comment'] . '<br><hr>';
  }
}

?>


CREATE TABLE users (
  id INT PRIMARY KEY,
  name VARCHAR(255),
  email VARCHAR(255)
);

CREATE TABLE reviews (
  id INT PRIMARY KEY,
  user_id INT,
  product_name VARCHAR(255),
  rating TINYINT(1),
  comment TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE products (
  id INT PRIMARY KEY,
  name VARCHAR(255)
);


// database connection settings
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'database';

// create a new PDO object to connect to the database
$pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_username, $db_password);

// function to get all reviews for a product
function get_reviews($product_id) {
  global $pdo;
  $stmt = $pdo->prepare("SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC");
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// function to get all products
function get_products() {
  global $pdo;
  $stmt = $pdo->query("SELECT * FROM products ORDER BY name ASC");
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// function to add a new review
function add_review($user_id, $product_name, $rating, $comment) {
  global $pdo;
  $stmt = $pdo->prepare("INSERT INTO reviews (user_id, product_name, rating, comment) VALUES (:user_id, :product_name, :rating, :comment)");
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':product_name', $product_name);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':comment', $comment);
  return $stmt->execute();
}

// function to display the review form
function display_review_form($product_id) {
  ?>
  <h1>Review <?php echo get_product_name_by_id($product_id); ?></h1>
  <form method="post" action="">
    <label for="rating">Rating:</label>
    <select id="rating" name="rating">
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
    </select>
    <label for="comment">Comment:</label>
    <textarea id="comment" name="comment"></textarea>
    <input type="submit" value="Submit Review">
  </form>
  <?php
}

// function to display a single review
function display_review($review) {
  ?>
  <h2><?php echo get_product_name_by_id($review['product_id']); ?></h2>
  <p>Rating: <?php echo $review['rating']; ?>/5</p>
  <p><?php echo nl2br($review['comment']); ?></p>
  <?php
}

// helper function to get product name by ID
function get_product_name_by_id($product_id) {
  global $pdo;
  $stmt = $pdo->query("SELECT name FROM products WHERE id = :id");
  $stmt->bindParam(':id', $product_id);
  return $stmt->fetchColumn();
}

// display the review form for a specific product
display_review_form(1);

// get all reviews for a specific product and display them
$reviews = get_reviews(1);
foreach ($reviews as $review) {
  display_review($review);
}


<?php

// Connect to database (replace with your own connection method)
$conn = new mysqli("localhost", "username", "password", "database");

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function addReview($data) {
    global $conn;
    
    // Insert review into database
    $sql = "INSERT INTO reviews (user_id, product_name, review_text, rating)
            VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("isss", $data['user_id'], $data['product_name'], $data['review_text'], $data['rating']);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function getReviews() {
    global $conn;
    
    // Retrieve reviews from database
    $sql = "SELECT * FROM reviews";
    $result = $conn->query($sql);
    $reviews = array();
    while ($row = $result->fetch_assoc()) {
        $reviews[] = array(
            'id' => $row['id'],
            'user_id' => $row['user_id'],
            'product_name' => $row['product_name'],
            'review_text' => $row['review_text'],
            'rating' => $row['rating']
        );
    }
    return $reviews;
}

function getUserReviews($userId) {
    global $conn;
    
    // Retrieve reviews from database for a specific user
    $sql = "SELECT * FROM reviews WHERE user_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $userId);
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        $reviews = array();
        while ($row = $result->fetch_assoc()) {
            $reviews[] = array(
                'id' => $row['id'],
                'product_name' => $row['product_name'],
                'review_text' => $row['review_text'],
                'rating' => $row['rating']
            );
        }
        return $reviews;
    } else {
        return false;
    }
}

function getAverageRating($userId) {
    global $conn;
    
    // Retrieve average rating for a specific user
    $sql = "SELECT AVG(rating) AS avg_rating FROM reviews WHERE user_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $userId);
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        $row = $result->fetch_assoc();
        return $row['avg_rating'];
    } else {
        return false;
    }
}

// Example usage:
$data = array(
    'user_id' => 1,
    'product_name' => 'Product X',
    'review_text' => 'This product is great!',
    'rating' => 5
);
addReview($data);

$reviews = getReviews();
print_r($reviews);

$userReviews = getUserReviews(1);
print_r($userReviews);

$averageRating = getAverageRating(1);
echo $averageRating;

?>


<?php

// Configuration
$dbHost = 'localhost';
$dbUsername = 'your_username';
$dbPassword = 'your_password';
$dbName = 'your_database_name';

try {
    $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUsername, $dbPassword);
} catch (PDOException $e) {
    die('Could not connect to the database: ' . $e->getMessage());
}

function createReview($data) {
    global $pdo;
    
    // Insert review into reviews table
    $stmt = $pdo->prepare('INSERT INTO reviews (user_id, product_id, rating, text) VALUES (:user_id, :product_id, :rating, :text)');
    $stmt->execute([
        'user_id' => $data['user_id'],
        'product_id' => $data['product_id'],
        'rating' => $data['rating'],
        'text' => $data['text']
    ]);
    
    // Get ID of newly created review
    return $pdo->lastInsertId();
}

function getReviews($productId) {
    global $pdo;
    
    // Select reviews for a given product
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    $stmt->execute(['product_id' => $productId]);
    
    return $stmt->fetchAll();
}

function getUserReviews($userId) {
    global $pdo;
    
    // Select reviews for a given user
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE user_id = :user_id');
    $stmt->execute(['user_id' => $userId]);
    
    return $stmt->fetchAll();
}

function deleteReview($reviewId) {
    global $pdo;
    
    // Delete review by ID
    $stmt = $pdo->prepare('DELETE FROM reviews WHERE id = :id');
    $stmt->execute(['id' => $reviewId]);
}

?>


$productId = 1;
$data = [
    'user_id' => 2,
    'product_id' => $productId,
    'rating' => 4,
    'text' => 'Great product!'
];

$reviewId = createReview($data);

// Get all reviews for a given product
$reviews = getReviews($productId);
print_r($reviews);

// Get all reviews for a given user
$userReviews = getUserReviews(2);
print_r($userReviews);

// Delete a review by ID
deleteReview(1);


class ReviewSystem {
  private $db;

  public function __construct() {
    // Initialize the database connection
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  /**
   * Get a list of all products with their corresponding reviews
   *
   * @return array
   */
  public function getReviews($productId = null) {
    if ($productId !== null) {
      // Retrieve reviews for a specific product
      $stmt = $this->db->prepare('SELECT r.id, u.username, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = ?');
      $stmt->execute([$productId]);
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } else {
      // Retrieve all reviews
      $stmt = $this->db->query('SELECT p.name, r.rating, r.review FROM products p JOIN reviews r ON p.id = r.product_id');
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
  }

  /**
   * Create a new review for a product
   *
   * @param int $productId
   * @param int $rating
   * @param string $review
   * @return bool
   */
  public function createReview($productId, $rating, $review) {
    // Validate user input
    if ($rating < 1 || $rating > 5) {
      throw new Exception('Invalid rating');
    }

    // Insert review into database
    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)');
    return $stmt->execute([$productId, $productId, $rating, $review]);
  }
}


$reviewSystem = new ReviewSystem();

// Get a list of all products with their reviews
$reviews = $reviewSystem->getReviews();
print_r($reviews);

// Create a new review for a product
$productId = 1;
$rating = 5;
$review = 'Great product!';
if ($reviewSystem->createReview($productId, $rating, $review)) {
    echo 'Review created successfully!';
} else {
    echo 'Error creating review';
}


class ProductReview {
    private $reviews = [];

    public function addReview($product_id, $user_id, $review) {
        // Validate input data
        if (!is_int($product_id) || !is_int($user_id)) {
            throw new InvalidArgumentException('Invalid product or user ID');
        }
        if (!is_string($review)) {
            throw new InvalidArgumentException('Invalid review content');
        }

        // Check if review already exists for this product and user
        foreach ($this->reviews[$product_id] ?? [] as &$existingReview) {
            if ($existingReview['user_id'] === $user_id) {
                return; // Review already exists, do not add duplicate
            }
        }

        // Add new review to the array
        $this->reviews[$product_id][] = [
            'user_id' => $user_id,
            'review' => $review,
        ];
    }

    public function getReviews($product_id) {
        return $this->reviews[$product_id] ?? [];
    }
}

// Example usage:
$reviewManager = new ProductReview();

// Add some reviews
$reviewManager->addReview(1, 1, 'Great product!');
$reviewManager->addReview(1, 2, 'Not impressed...');
$reviewManager->addReview(2, 3, 'Love this product!');

// Get all reviews for a specific product
$productReviews = $reviewManager->getReviews(1);
print_r($productReviews); // Output: Array ([0] => Array ( [user_id] => 1 [review] => Great product! ) [1] => Array ( [user_id] => 2 [review] => Not impressed... ))


// Configuration
$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'reviews';

// Connect to the database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function createUserReview($data) {
  global $conn;
  
  // Sanitize input data
  $username = trim($data['username']);
  $email = trim($data['email']);
  $productId = (int)$data['product_id'];
  $rating = (int)$data['rating'];
  $comment = trim($data['comment']);

  // Insert new review into the database
  $sql = "INSERT INTO reviews (user_id, product_id, rating, comment) 
          VALUES (NULL, ?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("iis", $productId, $rating, $comment);

  if ($stmt->execute()) {
    // Get the last inserted review ID
    $reviewId = $conn->insert_id;

    // Update product rating and count
    $sql = "UPDATE products SET 
            rating = (SELECT AVG(rating) FROM reviews WHERE product_id = ?), 
            review_count = (SELECT COUNT(*) FROM reviews WHERE product_id = ?)
            WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iis", $productId, $productId, $productId);

    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error updating product rating and count: " . $stmt->error;
      return false;
    }
  } else {
    echo "Error inserting review: " . $stmt->error;
    return false;
  }

  // Close the prepared statement
  $stmt->close();
}

function getUserReviews($userId) {
  global $conn;

  // Select all reviews for the given user ID
  $sql = "SELECT * FROM reviews WHERE user_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $userId);

  if ($stmt->execute()) {
    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  } else {
    echo "Error retrieving reviews: " . $stmt->error;
    return false;
  }

  // Close the prepared statement
  $stmt->close();
}

function getProductReviews($productId) {
  global $conn;

  // Select all reviews for the given product ID
  $sql = "SELECT * FROM reviews WHERE product_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $productId);

  if ($stmt->execute()) {
    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  } else {
    echo "Error retrieving reviews: " . $stmt->error;
    return false;
  }

  // Close the prepared statement
  $stmt->close();
}


// Create a new user review
$data = array(
  'username' => 'JohnDoe',
  'email' => 'johndoe@example.com',
  'product_id' => 1,
  'rating' => 5,
  'comment' => 'Great product!'
);
createUserReview($data);

// Get all reviews for a user
$userId = 1;
$userReviews = getUserReviews($userId);
print_r($userReviews);

// Get all reviews for a product
$productId = 1;
$productReviews = getProductReviews($productId);
print_r($productReviews);


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  /**
   * Add a new review to the database
   *
   * @param int $user_id
   * @param int $product_id
   * @param float $rating
   * @param string $review
   */
  public function addReview($user_id, $product_id, $rating, $review) {
    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    $stmt->execute();
  }

  /**
   * Get all reviews for a specific product
   *
   * @param int $product_id
   * @return array
   */
  public function getReviews($product_id) {
    $stmt = $this->db->prepare('SELECT r.id, u.name, p.name AS product_name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id WHERE r.product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Get all reviews for a specific user
   *
   * @param int $user_id
   * @return array
   */
  public function getUserReviews($user_id) {
    $stmt = $this->db->prepare('SELECT r.id, p.name AS product_name, r.rating, r.review FROM reviews r JOIN products p ON r.product_id = p.id WHERE r.user_id = :user_id');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Filter reviews by rating
   *
   * @param int $product_id
   * @param float $min_rating
   * @param float $max_rating
   * @return array
   */
  public function filterReviews($product_id, $min_rating = null, $max_rating = null) {
    $stmt = $this->db->prepare('SELECT r.id, u.name, p.name AS product_name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id WHERE r.product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);
    if ($min_rating !== null) {
      $stmt->andWhere('r.rating >= :min_rating');
      $stmt->bindParam(':min_rating', $min_rating);
    }
    if ($max_rating !== null) {
      $stmt->andWhere('r.rating <= :max_rating');
      $stmt->bindParam(':max_rating', $max_rating);
    }
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }
}


$review = new Review();

// Add a new review
$user_id = 1;
$product_id = 1;
$rating = 4.5;
$review_text = 'Great product!';
$review->addReview($user_id, $product_id, $rating, $review_text);

// Get all reviews for a specific product
$product_id = 1;
$reviews = $review->getReviews($product_id);
print_r($reviews);

// Get all reviews for a specific user
$user_id = 1;
$reviews = $review->getUserReviews($user_id);
print_r($reviews);

// Filter reviews by rating
$product_id = 1;
$min_rating = 4.0;
$max_rating = null;
$reviews = $review->filterReviews($product_id, $min_rating, $max_rating);
print_r($reviews);


// Define the database connection settings
$host = 'your_host';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
    // Establish a new connection
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    // Handle the exception if there's an error connecting to the database
    echo "Error: " . $e->getMessage();
}


// Function to add a review
function add_review($pdo, $product_id, $user_id, $rating, $comment) {
    try {
        // Prepare and execute the SQL query
        $stmt = $pdo->prepare("INSERT INTO reviews (product_id, user_id, rating, comment)
                                VALUES (:product_id, :user_id, :rating, :comment)");
        
        // Bind the parameters to prevent SQL injection attacks
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the query and get the last inserted ID (review_id)
        $review_id = $pdo->lastInsertId();
        
        return $review_id;
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false; // Return false if there's an error
    }
}

// Function to read a review by its ID
function get_review($pdo, $review_id) {
    try {
        // Prepare and execute the SQL query
        $stmt = $pdo->prepare("SELECT * FROM reviews WHERE review_id = :review_id");
        
        // Bind the parameter to prevent SQL injection attacks
        $stmt->bindParam(':review_id', $review_id);

        // Execute the query and fetch the result
        $stmt->execute();
        return $stmt->fetch(); // Fetch the first (and hopefully only) row
        
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false; // Return false if there's an error
    }
}

// Function to update a review
function update_review($pdo, $review_id, $rating, $comment) {
    try {
        // Prepare and execute the SQL query
        $stmt = $pdo->prepare("UPDATE reviews SET rating = :rating, comment = :comment WHERE review_id = :review_id");
        
        // Bind the parameters to prevent SQL injection attacks
        $stmt->bindParam(':review_id', $review_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the query and get the number of rows affected
        $rows_affected = $stmt->execute();
        
        return $rows_affected;
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false; // Return false if there's an error
    }
}

// Function to delete a review by its ID
function delete_review($pdo, $review_id) {
    try {
        // Prepare and execute the SQL query
        $stmt = $pdo->prepare("DELETE FROM reviews WHERE review_id = :review_id");
        
        // Bind the parameter to prevent SQL injection attacks
        $stmt->bindParam(':review_id', $review_id);

        // Execute the query and get the number of rows affected
        $rows_affected = $stmt->execute();
        
        return $rows_affected;
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false; // Return false if there's an error
    }
}


// Add a review for product 1 by user 2 with rating 5 and comment 'Great product!'
$review_id = add_review($pdo, 1, 2, 5, 'Great product!');

// Read the review just added
$review = get_review($pdo, $review_id);

// Update the review's rating to 4 and its comment to 'Good product'
$rows_affected = update_review($pdo, $review_id, 4, 'Good product');

// Delete the review with ID 1
$rows_affected = delete_review($pdo, 1);


class Review {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
    }

    // Add a new review
    public function addReview($product_id, $user_name, $review, $rating) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_name, review, rating) VALUES (?, ?, ?, ?)");
            $stmt->execute([$product_id, $user_name, $review, $rating]);
            return true;
        } catch (PDOException $e) {
            echo "Error adding review: " . $e->getMessage();
            return false;
        }
    }

    // List all reviews for a product
    public function listReviews($product_id) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
            $stmt->execute([$product_id]);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo "Error listing reviews: " . $e->getMessage();
            return array();
        }
    }

    // Edit an existing review
    public function editReview($review_id, $new_review = null, $new_rating = null) {
        try {
            if ($new_review !== null) {
                $stmt = $this->db->prepare("UPDATE reviews SET review = ? WHERE id = ?");
                $stmt->execute([$new_review, $review_id]);
            }
            if ($new_rating !== null) {
                $stmt = $this->db->prepare("UPDATE reviews SET rating = ? WHERE id = ?");
                $stmt->execute([$new_rating, $review_id]);
            }
            return true;
        } catch (PDOException $e) {
            echo "Error editing review: " . $e->getMessage();
            return false;
        }
    }

    // Delete a review
    public function deleteReview($review_id) {
        try {
            $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
            $stmt->execute([$review_id]);
            return true;
        } catch (PDOException $e) {
            echo "Error deleting review: " . $e->getMessage();
            return false;
        }
    }
}


$review = new Review();

// Add a new review
$product_id = 1;
$user_name = 'John Doe';
$review_text = 'This product is great!';
$rating = 5;
if ($review->addReview($product_id, $user_name, $review_text, $rating)) {
    echo "Review added successfully!";
} else {
    echo "Error adding review.";
}

// List all reviews for a product
$product_id = 1;
$reviews = $review->listReviews($product_id);
echo "Reviews for product $product_id:
";
foreach ($reviews as $review) {
    echo "$review[user_name]: $review[review] (Rating: $review[rating])
";
}

// Edit an existing review
$review_id = 1;
$new_review_text = 'This product is amazing!';
$new_rating = 6;
if ($review->editReview($review_id, $new_review_text, $new_rating)) {
    echo "Review edited successfully!";
} else {
    echo "Error editing review.";
}

// Delete a review
$review_id = 1;
if ($review->deleteReview($review_id)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}


// Review class
class Review {
  private $db;

  function __construct() {
    // Connect to database
    $this->db = new mysqli('localhost', 'username', 'password', 'database');
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }
  }

  // Get reviews for a product
  function getReviews($productId) {
    $query = "SELECT r.id, u.name, p.name AS productName, r.rating, r.review FROM reviews r JOIN users u ON r.user_id=u.id JOIN products p ON r.product_id=p.id WHERE r.product_id=?";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param('i', $productId);
    $stmt->execute();
    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  }

  // Add a review
  function addReview($userId, $productId, $rating, $review) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param('iiss', $userId, $productId, $rating, $review);
    if ($stmt->execute()) {
      return true;
    } else {
      return false;
    }
  }

  // Get user reviews
  function getUserReviews($userId) {
    $query = "SELECT r.id, p.name AS productName, r.rating, r.review FROM reviews r JOIN products p ON r.product_id=p.id WHERE r.user_id=?";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param('i', $userId);
    $stmt->execute();
    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  }
}

// Example usage
$review = new Review();

// Get reviews for a product
$product_id = 1;
$reviews = $review->getReviews($product_id);
foreach ($reviews as $review) {
  echo "Review by " . $review['name'] . ": ";
  echo "Rating: " . $review['rating'];
  echo ", Review: " . $review['review'];
  echo "<br>";
}

// Add a review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review_text = "Great product!";
if ($review->addReview($user_id, $product_id, $rating, $review_text)) {
  echo "Review added successfully.";
} else {
  echo "Error adding review.";
}

// Get user reviews
$user_id = 1;
$reviews = $review->getUserReviews($user_id);
foreach ($reviews as $review) {
  echo "Review of " . $review['productName'] . ": ";
  echo "Rating: " . $review['rating'];
  echo ", Review: " . $review['review'];
  echo "<br>";
}


<?php

// Connect to database
$conn = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

// Function to display all reviews for a product
function get_reviews($product_id) {
  global $conn;
  $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = :id");
  $stmt->bindParam(':id', $product_id);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to display a single review
function get_review($review_id) {
  global $conn;
  $stmt = $conn->prepare("SELECT * FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $review_id);
  $stmt->execute();
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

// Function to create a new review
function create_review($product_id, $user_id, $review, $rating) {
  global $conn;
  $stmt = $conn->prepare("INSERT INTO reviews (product_id, user_id, review, rating)
                          VALUES (:product_id, :user_id, :review, :rating)");
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':review', $review);
  $stmt->bindParam(':rating', $rating);
  return $stmt->execute();
}

// Function to update a review
function update_review($review_id, $new_review) {
  global $conn;
  $stmt = $conn->prepare("UPDATE reviews SET review = :review WHERE id = :id");
  $stmt->bindParam(':id', $review_id);
  $stmt->bindParam(':review', $new_review);
  return $stmt->execute();
}

// Function to delete a review
function delete_review($review_id) {
  global $conn;
  $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $review_id);
  return $stmt->execute();
}

?>


$product_id = 1;
$reviews = get_reviews($product_id);
foreach ($reviews as $review) {
  echo "Review by " . $review['user_id'] . ": " . $review['review'];
}


$product_id = 1;
$user_id = 2;
$review_text = "This product is great!";
$rating = 5;
create_review($product_id, $user_id, $review_text, $rating);


$review_id = 1;
$new_review_text = "I changed my mind about this product!";
update_review($review_id, $new_review_text);


$review_id = 1;
delete_review($review_id);


// Review class
class Review {
    private $db;

    function __construct($db) {
        $this->db = $db;
    }

    // Create a new review
    public function createReview($userId, $productId, $rating, $reviewText) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text)
                                        VALUES (:user_id, :product_id, :rating, :review_text)");
            $stmt->bindParam(":user_id", $userId);
            $stmt->bindParam(":product_id", $productId);
            $stmt->bindParam(":rating", $rating);
            $stmt->bindParam(":review_text", $reviewText);
            return $stmt->execute();
        } catch (PDOException $e) {
            // Handle database errors
            echo "Error creating review: " . $e->getMessage();
            return false;
        }
    }

    // Get all reviews for a product
    public function getReviewsForProduct($productId) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
            $stmt->bindParam(":product_id", $productId);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            // Handle database errors
            echo "Error getting reviews: " . $e->getMessage();
            return array();
        }
    }

    // Get a single review by ID
    public function getReviewById($reviewId) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :id");
            $stmt->bindParam(":id", $reviewId);
            $stmt->execute();
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            // Handle database errors
            echo "Error getting review: " . $e->getMessage();
            return array();
        }
    }

    // Update an existing review
    public function updateReview($reviewId, $rating, $reviewText) {
        try {
            $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, review_text = :review_text WHERE id = :id");
            $stmt->bindParam(":rating", $rating);
            $stmt->bindParam(":review_text", $reviewText);
            $stmt->bindParam(":id", $reviewId);
            return $stmt->execute();
        } catch (PDOException $e) {
            // Handle database errors
            echo "Error updating review: " . $e->getMessage();
            return false;
        }
    }

    // Delete a review by ID
    public function deleteReview($reviewId) {
        try {
            $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :id");
            $stmt->bindParam(":id", $reviewId);
            return $stmt->execute();
        } catch (PDOException $e) {
            // Handle database errors
            echo "Error deleting review: " . $e->getMessage();
            return false;
        }
    }
}


// Create a new database connection
$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');

// Create a new Review instance
$review = new Review($db);

// Create a new review
$userId = 1;
$productId = 5;
$rating = 4;
$reviewText = "Great product!";
if ($review->createReview($userId, $productId, $rating, $reviewText)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

// Get all reviews for a product
$productReviews = $review->getReviewsForProduct($productId);
print_r($productReviews);

// Update an existing review
$reviewId = 1;
$updatedRating = 5;
$updatedText = "Even better!";
if ($review->updateReview($reviewId, $updatedRating, $updatedText)) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review.";
}

// Delete a review by ID
if ($review->deleteReview($reviewId)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}


// Review class
class Review {
  private $id;
  private $userId;
  private $productName;
  private $reviewText;
  private $rating;

  public function __construct($data) {
    $this->id = isset($data['id']) ? $data['id'] : null;
    $this->userId = isset($data['user_id']) ? $data['user_id'] : null;
    $this->productName = isset($data['product_name']) ? $data['product_name'] : null;
    $this->reviewText = isset($data['review_text']) ? $data['review_text'] : null;
    $this->rating = isset($data['rating']) ? $data['rating'] : null;
  }

  public function getId() {
    return $this->id;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getProductName() {
    return $this->productName;
  }

  public function getReviewText() {
    return $this->reviewText;
  }

  public function getRating() {
    return $this->rating;
  }
}

// Review Manager class
class ReviewManager {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function addReview(Review $review) {
    // Insert review into database
    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_name, review_text, rating) VALUES (:user_id, :product_name, :review_text, :rating)');
    $stmt->execute([
      ':user_id' => $review->getUserId(),
      ':product_name' => $review->getProductName(),
      ':review_text' => $review->getReviewText(),
      ':rating' => $review->getRating()
    ]);
  }

  public function getReviews() {
    // Retrieve all reviews from database
    $stmt = $this->db->prepare('SELECT * FROM reviews');
    $reviews = array();
    while ($row = $stmt->fetch()) {
      $review = new Review($row);
      $reviews[] = $review;
    }
    return $reviews;
  }

  public function getReviewById($id) {
    // Retrieve review by ID from database
    $stmt = $this->db->prepare('SELECT * FROM reviews WHERE id = :id');
    $stmt->execute([':id' => $id]);
    $review = new Review($stmt->fetch());
    return $review;
  }

  public function updateReview(Review $review) {
    // Update review in database
    $stmt = $this->db->prepare('UPDATE reviews SET user_id = :user_id, product_name = :product_name, review_text = :review_text, rating = :rating WHERE id = :id');
    $stmt->execute([
      ':user_id' => $review->getUserId(),
      ':product_name' => $review->getProductName(),
      ':review_text' => $review->getReviewText(),
      ':rating' => $review->getRating(),
      ':id' => $review->getId()
    ]);
  }

  public function deleteReview($id) {
    // Delete review from database
    $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :id');
    $stmt->execute([':id' => $id]);
  }
}

// Example usage:
$db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');

$reviewManager = new ReviewManager($db);

$userReview = new Review([
  'user_id' => 1,
  'product_name' => 'Product A',
  'review_text' => 'This is a great product!',
  'rating' => 5
]);

$reviewManager->addReview($userReview);

$reviews = $reviewManager->getReviews();
foreach ($reviews as $review) {
  echo "User ID: {$review->getUserId()}
";
  echo "Product Name: {$review->getProductName()}
";
  echo "Review Text: {$review->getReviewText()}
";
  echo "Rating: {$review->getRating()}

";
}


<?php

// Include database connection
include 'db.php';

// Function to get all reviews for a product
function getReviews($product_id) {
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = mysqli_query($GLOBALS['conn'], $query);
    return mysqli_fetch_all($result, MYSQLI_ASSOC);
}

// Function to add a new review
function addReview($data) {
    $query = "INSERT INTO reviews (product_id, user_name, review, rating)
              VALUES ('$data[product_id]', '$data[user_name]', '$data[review]', '$data[rating]')";
    if (mysqli_query($GLOBALS['conn'], $query)) {
        return true;
    } else {
        return false;
    }
}

// Function to update a review
function updateReview($id, $data) {
    $query = "UPDATE reviews SET product_id = '$data[product_id]', user_name = '$data[user_name]', review = '$data[review]', rating = '$data[rating]'
              WHERE id = '$id'";
    if (mysqli_query($GLOBALS['conn'], $query)) {
        return true;
    } else {
        return false;
    }
}

// Function to delete a review
function deleteReview($id) {
    $query = "DELETE FROM reviews WHERE id = '$id'";
    if (mysqli_query($GLOBALS['conn'], $query)) {
        return true;
    } else {
        return false;
    }
}

?>


<?php

// Include database connection and user review function
include 'db.php';
include 'user_review.php';

// Get all reviews for product with id 1
$data = getReviews(1);

// Add new review
$data_to_add = array(
    "product_id" => 1,
    "user_name" => "John Doe",
    "review" => "This is a great product!",
    "rating" => 5
);
if (addReview($data_to_add)) {
    echo "Review added successfully!";
} else {
    echo "Failed to add review.";
}

// Update existing review
$data_to_update = array(
    "product_id" => 1,
    "user_name" => "Jane Doe",
    "review" => "This is an okay product.",
    "rating" => 3
);
if (updateReview(1, $data_to_update)) {
    echo "Review updated successfully!";
} else {
    echo "Failed to update review.";
}

// Delete existing review
deleteReview(2);

?>


// Configuration
require_once 'config.php';

// Database Connection
$db = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($db->connect_errno) {
    echo "Failed to connect to MySQL: " . $db->connect_error;
    exit();
}

// Review Class
class Review {
  private $id;
  private $product_id;
  private $user_id;
  private $rating;
  private $review;

  public function __construct($product_id, $user_id, $rating, $review) {
    $this->product_id = $product_id;
    $this->user_id = $user_id;
    $this->rating = $rating;
    $this->review = $review;
  }

  // Getters and Setters
  public function getId() { return $this->id; }
  public function getProductId() { return $this->product_id; }
  public function getUserId() { return $this->user_id; }
  public function getRating() { return $this->rating; }
  public function getReview() { return $this->review; }

  // Insert Review
  public static function insert($product_id, $user_id, $rating, $review) {
    global $db;
    $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $db->prepare($query);
    $stmt->bind_param("iiss", $product_id, $user_id, $rating, $review);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error inserting review: " . $stmt->error;
      return false;
    }
  }

  // Approve Review
  public static function approve($id) {
    global $db;
    $query = "UPDATE reviews SET approved = TRUE WHERE id = ?";
    $stmt = $db->prepare($query);
    $stmt->bind_param("i", $id);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error approving review: " . $stmt->error;
      return false;
    }
  }

  // Get Reviews for Product
  public static function getReviews($product_id) {
    global $db;
    $query = "SELECT * FROM reviews WHERE product_id = ? AND approved = TRUE";
    $stmt = $db->prepare($query);
    $stmt->bind_param("i", $product_id);
    if ($stmt->execute()) {
      return $stmt->get_result();
    } else {
      echo "Error getting reviews: " . $stmt->error;
      return null;
    }
  }
}


// Submit Review
$review = new Review(1, 1, 5, "Great product!");
if (Review::insert($review->getProductId(), $review->getUserId(), $review->getRating(), $review->getReview())) {
    echo "Review submitted successfully!";
} else {
    echo "Error submitting review.";
}

// Approve Review
if (Review::approve(1)) {
    echo "Review approved successfully!";
} else {
    echo "Error approving review.";
}

// Get Reviews for Product
$reviews = Review::getReviews(1);
if ($reviews) {
    while ($row = $reviews->fetch_assoc()) {
        echo $row['review'] . "
";
    }
} else {
    echo "No reviews found.";
}


// db.php (database connection file)
$conn = new mysqli($servername, $username, $password, $dbname);

function add_review($product_id, $review_text, $user_id) {
  global $conn;
  
  // Check if review already exists for product
  $query = "SELECT * FROM reviews WHERE product_id = '$product_id' AND user_id = '$user_id'";
  $result = mysqli_query($conn, $query);
  if (mysqli_num_rows($result) > 0) {
    return false; // Review already exists
  }
  
  // Insert new review into database
  $query = "INSERT INTO reviews (product_id, review_text, user_id) VALUES ('$product_id', '$review_text', '$user_id')";
  mysqli_query($conn, $query);
  return true;
}

function get_reviews($product_id) {
  global $conn;
  
  // Retrieve all reviews for product from database
  $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
  $result = mysqli_query($conn, $query);
  return $result;
}

function edit_review($review_id, $new_review_text) {
  global $conn;
  
  // Update review in database
  $query = "UPDATE reviews SET review_text = '$new_review_text' WHERE id = '$review_id'";
  mysqli_query($conn, $query);
}

function delete_review($review_id) {
  global $conn;
  
  // Delete review from database
  $query = "DELETE FROM reviews WHERE id = '$review_id'";
  mysqli_query($conn, $query);
}


// Add a new review for product with ID 1
if (add_review(1, 'Great product!', 1)) {
  echo 'Review added successfully!';
} else {
  echo 'Error adding review.';
}

// Get all reviews for product with ID 2
$result = get_reviews(2);
while ($review = mysqli_fetch_assoc($result)) {
  echo $review['review_text'] . '<br>';
}

// Edit a review with ID 1
edit_review(1, 'Even better than before!');

// Delete a review with ID 3
delete_review(3);


// Review class
class Review {
  public $id;
  public $rating;
  public $review_text;
  public $username;

  function __construct($id, $rating, $review_text, $username) {
    $this->id = $id;
    $this->rating = $rating;
    $this->review_text = $review_text;
    $this->username = $username;
  }
}

// Review model
class ReviewModel extends Model {
  function get_reviews($product_id) {
    // Retrieve reviews from database (e.g. using PDO or MySQLi)
    $reviews = array();
    foreach ($rows as $row) {
      $review = new Review(
        $row['id'],
        $row['rating'],
        $row['review_text'],
        $row['username']
      );
      $reviews[] = $review;
    }
    return $reviews;
  }

  function add_review($product_id, $rating, $review_text) {
    // Insert review into database (e.g. using PDO or MySQLi)
    // ...
  }

  function update_review($id, $new_rating, $new_review_text) {
    // Update review in database (e.g. using PDO or MySQLi)
    // ...
  }

  function delete_review($id) {
    // Delete review from database (e.g. using PDO or MySQLi)
    // ...
  }
}


// User review controller
class ReviewController extends Controller {
  public function index() {
    $product_id = $_GET['product_id'];
    $reviews = $this->review_model->get_reviews($product_id);
    return view('review_list', compact('reviews'));
  }

  public function create() {
    $product_id = $_POST['product_id'];
    $rating = $_POST['rating'];
    $review_text = $_POST['review_text'];
    $this->review_model->add_review($product_id, $rating, $review_text);
    return redirect()->to('/products/' . $product_id);
  }

  public function edit() {
    $id = $_GET['id'];
    $new_rating = $_POST['rating'];
    $new_review_text = $_POST['review_text'];
    $this->review_model->update_review($id, $new_rating, $new_review_text);
    return redirect()->to('/reviews');
  }

  public function delete() {
    $id = $_GET['id'];
    $this->review_model->delete_review($id);
    return redirect()->to('/products/' . $_POST['product_id']);
  }
}


$reviews = $this->review_model->get_reviews($product_id);


$this->review_model->add_review($product_id, $rating, $review_text);


$this->review_model->update_review($id, $new_rating, $new_review_text);


$this->review_model->delete_review($id);


<?php

// Review class
class Review {
    public $id;
    public $name;
    public $rating;
    public $comment;

    function __construct($id, $name, $rating, $comment) {
        $this->id = $id;
        $this->name = $name;
        $this->rating = $rating;
        $this->comment = $comment;
    }
}

// Review model
class ReviewModel {
    private $db;

    function __construct() {
        // Connect to the database
        $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
        $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    }

    // Function to get all reviews
    function getAllReviews() {
        $query = "SELECT * FROM reviews";
        $stmt = $this->db->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
    }

    // Function to add a new review
    function addReview($review) {
        $query = "INSERT INTO reviews (name, rating, comment) VALUES (:name, :rating, :comment)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':name', $review->name);
        $stmt->bindParam(':rating', $review->rating);
        $stmt->bindParam(':comment', $review->comment);
        $stmt->execute();
    }

    // Function to delete a review by ID
    function deleteReview($id) {
        $query = "DELETE FROM reviews WHERE id=:id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':id', $id);
        $stmt->execute();
    }
}

// Review controller
class ReviewController {
    private $reviewModel;

    function __construct() {
        $this->reviewModel = new ReviewModel();
    }

    // Function to display all reviews
    function displayReviews() {
        $reviews = $this->reviewModel->getAllReviews();
        foreach ($reviews as $review) {
            echo "<h2>" . $review->name . "'s review:</h2>";
            echo "<p>Rating: " . $review->rating . "/5</p>";
            echo "<p>Comment: " . $review->comment . "</p>";
        }
    }

    // Function to add a new review
    function addReview() {
        if ($_SERVER['REQUEST_METHOD'] == 'POST') {
            $name = $_POST['name'];
            $rating = $_POST['rating'];
            $comment = $_POST['comment'];

            $review = new Review(0, $name, $rating, $comment);
            $this->reviewModel->addReview($review);

            header('Location: index.php');
        }
    }

    // Function to delete a review
    function deleteReview() {
        if ($_SERVER['REQUEST_METHOD'] == 'POST') {
            $id = $_POST['id'];
            $this->reviewModel->deleteReview($id);

            header('Location: index.php');
        }
    }
}

// Main function to handle user reviews
function displayUserReviews() {
    $controller = new ReviewController();
    if (isset($_GET['action'])) {
        switch ($_GET['action']) {
            case 'display':
                $controller->displayReviews();
                break;
            case 'add':
                $controller->addReview();
                break;
            case 'delete':
                $controller->deleteReview();
                break;
        }
    } else {
        echo "You must specify an action to perform.";
    }
}

// Call the main function
displayUserReviews();

?>


<?php

class ReviewController {
    public function addReview($product_id, $rating, $comment) {
        try {
            // Connect to database
            $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
            
            // Insert review into database
            $stmt = $db->prepare("INSERT INTO reviews (product_id, rating, comment) VALUES (:product_id, :rating, :comment)");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);
            $stmt->execute();
            
            // Get the ID of the newly inserted review
            $review_id = $db->lastInsertId();
            
            // Return a success message and the review ID
            return array('message' => 'Review added successfully', 'id' => $review_id);
        } catch (PDOException $e) {
            // Handle database error
            return array('error' => 'Database error: ' . $e->getMessage());
        }
    }

    public function getReviews($product_id) {
        try {
            // Connect to database
            $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
            
            // Get reviews for the specified product
            $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->execute();
            
            // Fetch and return the reviews as an array
            $reviews = array();
            while ($row = $stmt->fetch()) {
                $reviews[] = array(
                    'id' => $row['id'],
                    'rating' => $row['rating'],
                    'comment' => $row['comment']
                );
            }
            
            return $reviews;
        } catch (PDOException $e) {
            // Handle database error
            return array('error' => 'Database error: ' . $e->getMessage());
        }
    }

    public function getReview($review_id) {
        try {
            // Connect to database
            $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
            
            // Get the review with the specified ID
            $stmt = $db->prepare("SELECT * FROM reviews WHERE id = :id");
            $stmt->bindParam(':id', $review_id);
            $stmt->execute();
            
            // Fetch and return the review as an array
            $row = $stmt->fetch();
            return array(
                'id' => $row['id'],
                'rating' => $row['rating'],
                'comment' => $row['comment']
            );
        } catch (PDOException $e) {
            // Handle database error
            return array('error' => 'Database error: ' . $e->getMessage());
        }
    }

    public function deleteReview($review_id) {
        try {
            // Connect to database
            $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
            
            // Delete the review with the specified ID
            $stmt = $db->prepare("DELETE FROM reviews WHERE id = :id");
            $stmt->bindParam(':id', $review_id);
            $stmt->execute();
            
            return array('message' => 'Review deleted successfully');
        } catch (PDOException $e) {
            // Handle database error
            return array('error' => 'Database error: ' . $e->getMessage());
        }
    }

}

?>


<?php

// Create an instance of the ReviewController class
$review_controller = new ReviewController();

// Add a review for a product with ID 1
$product_id = 1;
$rating = 5.0;
$comment = 'This is a great product!';
$result = $review_controller->addReview($product_id, $rating, $comment);
echo json_encode($result);

// Get reviews for a product with ID 1
$product_id = 1;
$reviews = $review_controller->getReviews($product_id);
echo json_encode($reviews);

// Get a review with ID 1
$review_id = 1;
$result = $review_controller->getReview($review_id);
echo json_encode($result);

// Delete a review with ID 1
$review_id = 1;
$result = $review_controller->deleteReview($review_id);
echo json_encode($result);

?>


class ReviewSystem {
  private $db;

  public function __construct() {
    // Connect to database
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  /**
   * Add a review for a product
   *
   * @param int $user_id
   * @param string $product_name
   * @param string $review
   * @param int $rating
   */
  public function addReview($user_id, $product_name, $review, $rating) {
    // Insert review into database
    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_name, review, rating) VALUES (:user_id, :product_name, :review, :rating)');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':rating', $rating);
    $stmt->execute();
  }

  /**
   * Get all reviews for a product
   *
   * @param string $product_name
   */
  public function getReviews($product_name) {
    // Retrieve reviews from database
    $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_name = :product_name');
    $stmt->bindParam(':product_name', $product_name);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Get all reviews for a user
   *
   * @param int $user_id
   */
  public function getUserReviews($user_id) {
    // Retrieve reviews from database
    $stmt = $this->db->prepare('SELECT * FROM reviews WHERE user_id = :user_id');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Get average rating for a product
   *
   * @param string $product_name
   */
  public function getAverageRating($product_name) {
    // Retrieve reviews from database
    $stmt = $this->db->prepare('SELECT AVG(rating) as average_rating FROM reviews WHERE product_name = :product_name');
    $stmt->bindParam(':product_name', $product_name);
    $stmt->execute();
    return $stmt->fetchColumn();
  }
}


$reviewSystem = new ReviewSystem();


$user_id = 1;
$product_name = 'Example Product';
$review = 'This is a great product!';
$rating = 5;

$reviewSystem->addReview($user_id, $product_name, $review, $rating);


$product_name = 'Example Product';
$reviews = $reviewSystem->getReviews($product_name);

print_r($reviews);


$product_name = 'Example Product';
$average_rating = $reviewSystem->getAverageRating($product_name);

echo 'Average Rating: ' . $average_rating;


class ReviewSystem {
  private $db;

  function __construct() {
    // Establish database connection
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  }

  // Function to add a review
  function addReview($userId, $productName, $reviewText, $rating) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_name, review_text, rating) VALUES (:user_id, :product_name, :review_text, :rating)");
      $stmt->bindParam(':user_id', $userId);
      $stmt->bindParam(':product_name', $productName);
      $stmt->bindParam(':review_text', $reviewText);
      $stmt->bindParam(':rating', $rating);
      $stmt->execute();
    } catch (PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
    }
  }

  // Function to get all reviews
  function getAllReviews() {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews");
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
    }
  }

  // Function to get a single review by ID
  function getReviewById($id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :id");
      $stmt->bindParam(':id', $id);
      $stmt->execute();
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error getting review by ID: " . $e->getMessage();
    }
  }

  // Function to update a review
  function updateReview($id, $reviewText, $rating) {
    try {
      $stmt = $this->db->prepare("UPDATE reviews SET review_text = :review_text, rating = :rating WHERE id = :id");
      $stmt->bindParam(':id', $id);
      $stmt->bindParam(':review_text', $reviewText);
      $stmt->bindParam(':rating', $rating);
      $stmt->execute();
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
    }
  }

  // Function to delete a review
  function deleteReview($id) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :id");
      $stmt->bindParam(':id', $id);
      $stmt->execute();
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
    }
  }
}


$reviewSystem = new ReviewSystem();

// Add a review
$reviewSystem->addReview(1, 'Product A', 'This is a great product!', 5);

// Get all reviews
$reviews = $reviewSystem->getAllReviews();
echo '<pre>';
print_r($reviews);
echo '</pre>';

// Get a single review by ID
$review = $reviewSystem->getReviewById(1);
echo '<pre>';
print_r($review);
echo '</pre>';

// Update a review
$reviewSystem->updateReview(1, 'This product is even better!', 5);

// Delete a review
$reviewSystem->deleteReview(1);


<?php

// configuration
require_once 'config.php';

// get the product id from the URL parameter
if (isset($_GET['product_id'])) {
  $product_id = $_GET['product_id'];
} else {
  echo "Product ID not specified.";
  exit;
}

// connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

// check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// get the product name from the products table
$product_name_query = "SELECT name FROM products WHERE id = '$product_id'";
$product_name_result = $conn->query($product_name_query);
if (!$product_name_result) {
  echo "Error getting product name.";
  exit;
}
$product_name = $product_name_result->fetch_assoc()['name'];

// display reviews for the product
$reviews_query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
$reviews_result = $conn->query($reviews_query);
if (!$reviews_result) {
  echo "Error getting reviews.";
  exit;
}
$reviews = array();
while ($review = $reviews_result->fetch_assoc()) {
  $reviews[] = $review;
}

// display form for submitting new review
?>
<h2>Reviews for <?php echo $product_name; ?></h2>

<?php if (isset($_SESSION['user_id'])) : ?>
  <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <label for="rating">Rating:</label>
    <select name="rating" id="rating">
      <?php for ($i = 1; $i <= 5; $i++) : ?>
        <option value="<?php echo $i; ?>"><?php echo $i . '/5'; ?></option>
      <?php endfor; ?>
    </select>
    <br><br>
    <label for="review">Review:</label>
    <textarea name="review" id="review"></textarea>
    <br><br>
    <input type="submit" value="Submit Review">
  </form>
<?php endif; ?>

<h3>Reviews:</h3>

<ul>
  <?php foreach ($reviews as $review) : ?>
    <li>
      Rating: <?php echo $review['rating']; ?>/5
      <br>
      Review: <?php echo nl2br($review['review']); ?>
      <br>
      By: <?php // get the user name from the users table, using the review's user_id; ?>
    </li>
  <?php endforeach; ?>
</ul>

<?php

// check if form has been submitted
if (isset($_POST['submit'])) {
  $rating = $_POST['rating'];
  $review = $_POST['review'];

  // insert new review into database
  $new_review_query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES ('$product_id', '$product_id', '$rating', '$review')";
  if ($conn->query($new_review_query)) {
    echo "Review submitted successfully.";
  } else {
    echo "Error submitting review.";
  }
}

// close database connection
$conn->close();

?>


// db_config.php

$host = 'your_host';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Error connecting to database: " . $e->getMessage();
}


// review.php

class Review {
    private $pdo;

    public function __construct(PDO $pdo) {
        $this->pdo = $pdo;
    }

    // Add a new review for a product
    public function addReview($product_id, $user_id, $review_text, $rating) {
        try {
            $stmt = $this->pdo->prepare("INSERT INTO reviews (product_id, user_id, review_text, rating)
                                          VALUES (:product_id, :user_id, :review_text, :rating)");
            $stmt->execute([
                'product_id' => $product_id,
                'user_id' => $user_id,
                'review_text' => $review_text,
                'rating' => $rating
            ]);
        } catch (PDOException $e) {
            echo "Error adding review: " . $e->getMessage();
        }
    }

    // Get all reviews for a product
    public function getReviews($product_id) {
        try {
            $stmt = $this->pdo->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
            $stmt->execute(['product_id' => $product_id]);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo "Error fetching reviews: " . $e->getMessage();
            return [];
        }
    }

    // Get individual review details
    public function getReview($review_id) {
        try {
            $stmt = $this->pdo->prepare("SELECT * FROM reviews WHERE id = :id");
            $stmt->execute(['id' => $review_id]);
            return $stmt->fetch();
        } catch (PDOException $e) {
            echo "Error fetching review: " . $e->getMessage();
            return [];
        }
    }

    // Update a review
    public function updateReview($review_id, $new_review_text, $new_rating) {
        try {
            $stmt = $this->pdo->prepare("UPDATE reviews SET review_text = :review_text, rating = :rating WHERE id = :id");
            $stmt->execute([
                'id' => $review_id,
                'review_text' => $new_review_text,
                'rating' => $new_rating
            ]);
        } catch (PDOException $e) {
            echo "Error updating review: " . $e->getMessage();
        }
    }

    // Delete a review
    public function deleteReview($review_id) {
        try {
            $stmt = $this->pdo->prepare("DELETE FROM reviews WHERE id = :id");
            $stmt->execute(['id' => $review_id]);
        } catch (PDOException $e) {
            echo "Error deleting review: " . $e->getMessage();
        }
    }
}


// index.php

require_once 'db_config.php';
require_once 'review.php';

$pdo = new PDO($dsn, $username, $password);

$review = new Review($pdo);

// Add a new review for product 1 by user 1 with text "This is a great product!" and rating 5
$review->addReview(1, 1, 'This is a great product!', 5);

// Get all reviews for product 1
$reviews = $review->getReviews(1);
print_r($reviews);

// Update review with id 1 to new text "I love this product!" and rating 4
$review->updateReview(1, 'I love this product!', 4);

// Delete review with id 2
$review->deleteReview(2);


// config.php: database connection settings
$dbhost = 'localhost';
$dbname = 'review_system';
$dbuser = 'root';
$dbpass = '';

// Connect to the database
function connectToDatabase() {
    $conn = new mysqli($GLOBALS['dbhost'], $GLOBALS['dbuser'], $GLOBALS['dbpass'], $GLOBALS['dbname']);
    
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Get reviews
function getReviews() {
    $conn = connectToDatabase();
    $sql = "SELECT * FROM reviews";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            echo "id: " . $row["id"]. " - title: " . $row["title"]. " - description: " . $row["description"] . "<br>";
        }
    } else {
        echo "0 results";
    }
    $conn->close();
}

// Get review by id
function getReview($id) {
    $conn = connectToDatabase();
    $sql = "SELECT * FROM reviews WHERE id = '$id'";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            return $row;
        }
    } else {
        echo "0 results";
    }
    $conn->close();
}

// Create a review
function createReview($title, $description, $rating) {
    $conn = connectToDatabase();
    
    if ($rating > 5 || $rating < 1) {
        return "Invalid rating";
    } else {
        $sql = "INSERT INTO reviews (title, description, rating)
                VALUES ('$title', '$description', '$rating')";
        
        if ($conn->query($sql) === TRUE) {
            echo "New review created successfully";
        } else {
            echo "Error: " . $sql . "<br>" . $conn->error;
        }
    }
}

// Update a review
function updateReview($id, $title, $description, $rating) {
    $conn = connectToDatabase();
    
    if ($rating > 5 || $rating < 1) {
        return "Invalid rating";
    } else {
        $sql = "UPDATE reviews SET title='$title', description='$description', rating='$rating' WHERE id=$id";
        
        if ($conn->query($sql) === TRUE) {
            echo "Review updated successfully";
        } else {
            echo "Error updating review: " . $conn->error;
        }
    }
}

// Delete a review
function deleteReview($id) {
    $conn = connectToDatabase();
    
    $sql = "DELETE FROM reviews WHERE id=$id";
    
    if ($conn->query($sql) === TRUE) {
        echo "Review deleted successfully";
    } else {
        echo "Error deleting review: " . $conn->error;
    }
}

// Test the functions
createReview("Awesome Product", "This product is really awesome", 5);
echo "<hr>";
getReviews();
echo "<hr>";
$review = getReview(1);
var_dump($review);

updateReview(1, "New Awesome Product", "Even more awesome now", 6);
echo "<hr>";

deleteReview(2);


// File: review.php

class Review {
    private $db;

    public function __construct() {
        // Connect to database
        $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myusername', 'mypassword');
        $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    }

    /**
     * Add a review from the user
     *
     * @param int   $user_id  The ID of the user who submitted the review
     * @param string $product_name  The name of the product being reviewed
     * @param string $review       The text of the review
     * @param int    $rating      The rating given to the product (1-5)
     *
     * @return bool|void          True if the review was added successfully, false otherwise
     */
    public function addReview($user_id, $product_name, $review, $rating) {
        try {
            // Prepare and execute SQL query
            $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_name, review, rating) VALUES (?, ?, ?, ?)');
            $stmt->execute([$user_id, $product_name, $review, $rating]);

            return true;
        } catch (PDOException $e) {
            // Handle database error
            echo 'Database error: ' . $e->getMessage();
            return false;
        }
    }

    /**
     * Get all reviews for a product
     *
     * @param string  $product_name The name of the product to retrieve reviews for
     *
     * @return array|void          An array of review data if found, empty array otherwise
     */
    public function getReviews($product_name) {
        try {
            // Prepare and execute SQL query
            $stmt = $this->db->prepare('SELECT u.name AS user_name, r.review, r.rating FROM reviews r JOIN users u ON r.user_id = u.id WHERE product_name = ?');
            $stmt->execute([$product_name]);

            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            // Handle database error
            echo 'Database error: ' . $e->getMessage();
            return [];
        }
    }

    /**
     * Get all reviews for a user
     *
     * @param int   $user_id The ID of the user to retrieve reviews for
     *
     * @return array|void          An array of review data if found, empty array otherwise
     */
    public function getUserReviews($user_id) {
        try {
            // Prepare and execute SQL query
            $stmt = $this->db->prepare('SELECT r.product_name, r.review, r.rating FROM reviews r WHERE user_id = ?');
            $stmt->execute([$user_id]);

            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            // Handle database error
            echo 'Database error: ' . $e->getMessage();
            return [];
        }
    }

    public function __destruct() {
        // Close database connection on object destruction
        $this->db = null;
    }
}


// File: index.php

require_once 'review.php';

$review = new Review();

// Add review
$user_id = 1; // Replace with actual user ID
$product_name = 'Product Name';
$review_text = 'This is a great product!';
$rating = 4;

if ($review->addReview($user_id, $product_name, $review_text, $rating)) {
    echo 'Review added successfully!';
} else {
    echo 'Error adding review.';
}

// Get reviews for a product
$product_name = 'Product Name';
$reviews = $review->getReviews($product_name);

if (!empty($reviews)) {
    foreach ($reviews as $review) {
        echo "User: {$review['user_name']}
";
        echo "Review: {$review['review']}
";
        echo "Rating: {$review['rating']} stars

";
    }
} else {
    echo 'No reviews found for this product.';
}


<?php

// Connect to database
$mysqli = new mysqli('localhost', 'username', 'password', 'database_name');

if ($mysqli->connect_errno) {
    echo "Failed to connect: " . $mysqli->connect_error;
    exit();
}

// Function to create a review
function create_review($product_id, $title, $content) {
    global $mysqli;

    // Insert into reviews table
    $query = "INSERT INTO reviews (product_id, title, content, created_at)
              VALUES ('$product_id', '$title', '$content', NOW())";
    if (!$mysqli->query($query)) {
        echo "Error creating review: " . $mysqli->error;
        exit();
    }

    // Get the ID of the newly inserted review
    $review_id = $mysqli->insert_id;

    return $review_id;
}

// Function to create a rating for a review
function create_rating($review_id, $rating) {
    global $mysqli;

    // Insert into ratings table
    $query = "INSERT INTO ratings (review_id, rating)
              VALUES ('$review_id', '$rating')";
    if (!$mysqli->query($query)) {
        echo "Error creating rating: " . $mysqli->error;
        exit();
    }
}

// Function to display all reviews for a product
function get_reviews_for_product($product_id) {
    global $mysqli;

    // Select from reviews and ratings tables
    $query = "SELECT r.title, r.content, COUNT(r.id) as num_ratings,
              AVG(ra.rating) as average_rating
             FROM reviews r
             LEFT JOIN ratings ra ON r.id = ra.review_id
             WHERE r.product_id = '$product_id'
             GROUP BY r.title";
    if ($result = $mysqli->query($query)) {
        // Display each review along with its average rating
        while ($row = $result->fetch_assoc()) {
            echo "Review Title: " . $row['title'] . "
";
            echo "Review Content: " . $row['content'] . "
";
            echo "Average Rating: " . $row['average_rating'] . "/" . 5 . "

";
        }
    } else {
        echo "Error getting reviews for product: " . $mysqli->error;
    }

    return true; // Changed return to true
}

// Example usage:
$product_id = 1;

$review_id = create_review($product_id, 'Great Product', 'This is a great product!');
create_rating($review_id, 4);

get_reviews_for_product($product_id);

?>


class Review {
    private $review_id;
    private $product_id;
    private $user_id;
    private $rating;
    private $title;
    private $content;

    public function __construct($data) {
        if (isset($data['id'])) {
            $this->review_id = (int)$data['id'];
        }

        $this->product_id = (int)$data['product_id'];
        $this->user_id = (int)$data['user_id'];
        $this->rating = (int)$data['rating'];
        $this->title = $data['title'];
        $this->content = $data['content'];
    }

    // Getters and setters
    public function getId() {
        return $this->review_id;
    }

    public function getProductID() {
        return $this->product_id;
    }

    public function getUserID() {
        return $this->user_id;
    }

    public function getRating() {
        return (int)$this->rating;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getContent() {
        return $this->content;
    }
}


class ReviewModel {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    // Create a new review
    public function createReview(Review $review) {
        try {
            $query = "INSERT INTO reviews (product_id, user_id, rating, title, content)
                      VALUES (:product_id, :user_id, :rating, :title, :content)";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':product_id', $review->getProductID());
            $stmt->bindParam(':user_id', $review->getUserID());
            $stmt->bindParam(':rating', $review->getRating());
            $stmt->bindParam(':title', $review->getTitle());
            $stmt->bindParam(':content', $review->getContent());

            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Get all reviews for a product
    public function getReviews($product_id) {
        try {
            $query = "SELECT * FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':product_id', (int)$product_id);

            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return array();
        }
    }

    // Get a review by ID
    public function getReview($review_id) {
        try {
            $query = "SELECT * FROM reviews WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', (int)$review_id);

            $stmt->execute();
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return array();
        }
    }

    // Update a review
    public function updateReview(Review $review) {
        try {
            $query = "UPDATE reviews SET rating = :rating, title = :title, content = :content WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':rating', $review->getRating());
            $stmt->bindParam(':title', $review->getTitle());
            $stmt->bindParam(':content', $review->getContent());
            $stmt->bindParam(':id', $review->getId());

            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Delete a review
    public function deleteReview($review_id) {
        try {
            $query = "DELETE FROM reviews WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', (int)$review_id);

            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }
}


// Connect to database
$db = new PDO('mysql:host=localhost;dbname=mydb', 'myuser', 'mypass');

// Create a new review model
$model = new ReviewModel($db);

// Create a new review
$review = new Review(array(
    'product_id' => 1,
    'user_id' => 2,
    'rating' => 5,
    'title' => 'Great product!',
    'content' => 'I love this product!'
));

$model->createReview($review);

// Get all reviews for a product
$reviews = $model->getReviews(1);
foreach ($reviews as $review) {
    echo "ID: {$review['id']}, Rating: {$review['rating']}<br>";
}

// Update a review
$review = new Review(array(
    'id' => 1,
    'rating' => 4,
    'title' => 'Good product',
    'content' => 'I like this product'
));

$model->updateReview($review);

// Delete a review
$model->deleteReview(2);


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function createReview($user_id, $product_id, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
      $stmt->bindParam(1, $user_id);
      $stmt->bindParam(2, $product_id);
      $stmt->bindParam(3, $rating);
      $stmt->bindParam(4, $review);
      return $stmt->execute();
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  public function getReviewsForProduct($product_id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
      $stmt->bindParam(1, $product_id);
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
      return array();
    }
  }

  public function getReviewsForUser($user_id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = ?");
      $stmt->bindParam(1, $user_id);
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
      return array();
    }
  }

  public function getAverageRatingForProduct($product_id) {
    try {
      $stmt = $this->db->prepare("SELECT AVG(rating) as average_rating FROM reviews WHERE product_id = ?");
      $stmt->bindParam(1, $product_id);
      $stmt->execute();
      return $stmt->fetchColumn();
    } catch (PDOException $e) {
      echo "Error getting average rating: " . $e->getMessage();
      return null;
    }
  }

  public function getAverageRatingForUser($user_id) {
    try {
      $stmt = $this->db->prepare("SELECT AVG(rating) as average_rating FROM reviews WHERE user_id = ?");
      $stmt->bindParam(1, $user_id);
      $stmt->execute();
      return $stmt->fetchColumn();
    } catch (PDOException $e) {
      echo "Error getting average rating: " . $e->getMessage();
      return null;
    }
  }
}


class ReviewController extends Controller {
  private $review;

  public function __construct($db) {
    $this->review = new Review($db);
  }

  public function createReview($user_id, $product_id, $rating, $review) {
    return $this->review->createReview($user_id, $product_id, $rating, $review);
  }

  public function getReviewsForProduct($product_id) {
    return $this->review->getReviewsForProduct($product_id);
  }

  public function getReviewsForUser($user_id) {
    return $this->review->getReviewsForUser($user_id);
  }

  public function getAverageRatingForProduct($product_id) {
    return $this->review->getAverageRatingForProduct($product_id);
  }

  public function getAverageRatingForUser($user_id) {
    return $this->review->getAverageRatingForUser($user_id);
  }
}


function createUserReview($user_id, $product_id, $rating, $review) {
  try {
    $db = new PDO("mysql:host=localhost;dbname=mydatabase", "username", "password");
    $controller = new ReviewController($db);
    return $controller->createReview($user_id, $product_id, $rating, $review);
  } catch (PDOException $e) {
    echo "Error creating review: " . $e->getMessage();
    return false;
  }
}

function getReviewsForProduct($product_id) {
  try {
    $db = new PDO("mysql:host=localhost;dbname=mydatabase", "username", "password");
    $controller = new ReviewController($db);
    return $controller->getReviewsForProduct($product_id);
  } catch (PDOException $e) {
    echo "Error getting reviews: " . $e->getMessage();
    return array();
  }
}

function getReviewsForUser($user_id) {
  try {
    $db = new PDO("mysql:host=localhost;dbname=mydatabase", "username", "password");
    $controller = new ReviewController($db);
    return $controller->getReviewsForUser($user_id);
  } catch (PDOException $e) {
    echo "Error getting reviews: " . $e->getMessage();
    return array();
  }
}

function getAverageRatingForProduct($product_id) {
  try {
    $db = new PDO("mysql:host=localhost;dbname=mydatabase", "username", "password");
    $controller = new ReviewController($db);
    return $controller->getAverageRatingForProduct($product_id);
  } catch (PDOException $e) {
    echo "Error getting average rating: " . $e->getMessage();
    return null;
  }
}

function getAverageRatingForUser($user_id) {
  try {
    $db = new PDO("mysql:host=localhost;dbname=mydatabase", "username", "password");
    $controller = new ReviewController($db);
    return $controller->getAverageRatingForUser($user_id);
  } catch (PDOException $e) {
    echo "Error getting average rating: " . $e->getMessage();
    return null;
  }
}


$review = createUserReview(1, 1, 5, "Great product!");
if ($review) {
  echo "Review created successfully!";
} else {
  echo "Error creating review.";
}


$reviews = getReviewsForProduct(1);
foreach ($reviews as $review) {
  echo $review['user_id'] . " - " . $review['rating'];
}


$average_rating = getAverageRatingForProduct(1);
echo "Average rating: " . $average_rating;


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

// Establish database connection
try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}

// Function to add a review
function add_review($user_id, $product_id, $rating, $review) {
    global $conn;
    
    $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);

    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Function to get all reviews
function get_reviews() {
    global $conn;

    $stmt = $conn->prepare("SELECT * FROM reviews");
    $stmt->execute();

    return $stmt->fetchAll();
}

// Function to update a review
function update_review($review_id, $rating, $review) {
    global $conn;

    $stmt = $conn->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
    $stmt->bindParam(':id', $review_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);

    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Function to delete a review
function delete_review($review_id) {
    global $conn;

    $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $review_id);

    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

?>


// Add a review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = "This product is amazing!";

if (add_review($user_id, $product_id, $rating, $review)) {
    echo "Review added successfully!";
} else {
    echo "Error adding review.";
}

// Get all reviews
$reviews = get_reviews();

foreach ($reviews as $review) {
    echo "User ID: " . $review['user_id'] . ", Product ID: " . $review['product_id'] . ", Rating: " . $review['rating'] . ", Review: " . $review['review'];
}

// Update a review
$review_id = 1;
$rating = 4;
$review = "I still love this product!";

if (update_review($review_id, $rating, $review)) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review.";
}

// Delete a review
$review_id = 1;

if (delete_review($review_id)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}


<?php

// Sample database operations using PDO
$pdo = new PDO('sqlite:reviews.db');

function get_reviews($product_id) {
    global $pdo;
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function create_review($user_name, $review_text, $rating, $product_id) {
    global $pdo;
    try {
        $stmt = $pdo->prepare('INSERT INTO reviews (user_name, review_text, rating, product_id) VALUES (:user_name, :review_text, :rating, :product_id)');
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':product_id', $product_id);
        return $stmt->execute();
    } catch (PDOException $e) {
        echo 'Error creating review: ' . $e->getMessage();
        return false;
    }
}

// Sample usage:
$product_id = 1; // ID of the product you want to display reviews for
$reviews = get_reviews($product_id);

foreach ($reviews as $review) {
    echo "User Name: $review[user_name]<br>";
    echo "Rating: $review[rating]/5<br>";
    echo "Review: $review[review_text]<br><hr>";
}

// Sample form for creating new reviews
?>

<form action="" method="post">
    <label>Product ID:</label>
    <input type="number" name="product_id" value="<?php echo $product_id; ?>">
    <br>
    <label>User Name:</label>
    <input type="text" name="user_name">
    <br>
    <label>Review Text:</label>
    <textarea name="review_text"></textarea>
    <br>
    <label>Rating (1-5):</label>
    <input type="number" min="1" max="5" name="rating">
    <br>
    <button type="submit">Submit Review</button>
</form>

<?php

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $user_name = $_POST['user_name'];
    $review_text = $_POST['review_text'];
    $rating = (int) $_POST['rating'];
    $product_id = (int) $_POST['product_id'];

    if ($rating >= 1 && $rating <= 5) {
        create_review($user_name, $review_text, $rating, $product_id);
    }
}
?>


class Review {
    public $id;
    public $product_id;
    public $user_id;
    public $rating;
    public $comment;

    function __construct($id, $product_id, $user_id, $rating, $comment) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->user_id = $user_id;
        $this->rating = $rating;
        $this->comment = $comment;
    }
}


class Product {
    public $id;
    public $name;
    public $reviews; // array of Review objects

    function __construct($id, $name) {
        $this->id = $id;
        $this->name = $name;
        $this->reviews = array();
    }

    function addReview(Review $review) {
        array_push($this->reviews, $review);
    }
}


class UserService {
    private $db; // PDO object or database connection

    function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
    }

    function getProductReviews($product_id) {
        $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        $reviews = array();
        while ($row = $stmt->fetch()) {
            $review = new Review($row['id'], $row['product_id'], $row['user_id'], $row['rating'], $row['comment']);
            array_push($reviews, $review);
        }

        return $reviews;
    }

    function getAverageRating($product_id) {
        $stmt = $this->db->prepare('SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = :product_id');
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        return $stmt->fetchColumn();
    }
}


function userReview($product_id, $rating, $comment) {
    $userService = new UserService();

    // Add review to database
    $stmt = $userService->db->prepare('INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $_SESSION['user_id']); // assuming you have a session with the user's ID
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->execute();

    // Get product object and add review to it
    $product = new Product($product_id, '');
    $userService->getProductReviews($product_id); // fetch reviews from database
    array_push($product->reviews, new Review(null, $product_id, $_SESSION['user_id'], $rating, $comment));

    return $product;
}


$product = userReview(1, 5, 'Great product!');
print_r($product->reviews);

$averageRating = $userService->getAverageRating(1);
echo "Average rating: $averageRating";


class Review {
    private $id;
    private $userId;
    private $productId;
    private $rating;
    private $reviewText;

    public function __construct($userId, $productId, $rating, $reviewText) {
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->reviewText = $reviewText;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReviewText() {
        return $this->reviewText;
    }
}


class ReviewModel {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview(Review $review) {
        $sql = "INSERT INTO reviews (user_id, product_id, rating, review_text)
                VALUES (:user_id, :product_id, :rating, :review_text)";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':user_id', $review->getUserId());
        $stmt->bindParam(':product_id', $review->getProductId());
        $stmt->bindParam(':rating', $review->getRating());
        $stmt->bindParam(':review_text', $review->getReviewText());
        return $stmt->execute();
    }

    public function getReviewsForProduct($productId) {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public function getAverageRatingForProduct($productId) {
        $sql = "SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        return $stmt->fetchColumn();
    }
}


function createUserReview($userId, $productId, $rating, $reviewText) {
    $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
    $reviewModel = new ReviewModel($db);
    $review = new Review($userId, $productId, $rating, $reviewText);
    return $reviewModel->createReview($review);
}

function getReviewsForProduct($productId) {
    $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
    $reviewModel = new ReviewModel($db);
    return $reviewModel->getReviewsForProduct($productId);
}

function getAverageRatingForProduct($productId) {
    $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
    $reviewModel = new ReviewModel($db);
    return $reviewModel->getAverageRatingForProduct($productId);
}


createUserReview(1, 1, 5, "Great product!");

$reviews = getReviewsForProduct(1);
print_r($reviews);

$averageRating = getAverageRatingForProduct(1);
echo $averageRating;


// Review class
class Review {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
    }

    // Add a review
    public function addReview($product_id, $user_name, $rating, $comment) {
        try {
            $query = "INSERT INTO reviews (product_id, user_name, rating, comment) VALUES (:product_id, :user_name, :rating, :comment)";
            $stmt = $this->db->prepare($query);
            $stmt->execute([
                'product_id' => $product_id,
                'user_name' => $user_name,
                'rating' => $rating,
                'comment' => $comment
            ]);
            return true;
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Get reviews for a product
    public function getReviews($product_id) {
        try {
            $query = "SELECT * FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($query);
            $stmt->execute(['product_id' => $product_id]);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return array();
        }
    }

    // Calculate average rating for a product
    public function getAverageRating($product_id) {
        try {
            $query = "SELECT AVG(rating) AS average FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($query);
            $stmt->execute(['product_id' => $product_id]);
            return $stmt->fetchColumn();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return 0;
        }
    }
}

// Example usage
$review = new Review();

// Add a review for product with id=1
if ($review->addReview(1, 'John Doe', 5, 'Great product!')) {
    echo 'Review added successfully!';
} else {
    echo 'Error adding review.';
}

// Get reviews for product with id=1
$reviews = $review->getReviews(1);
echo 'Reviews for product with id=1:';
foreach ($reviews as $review) {
    echo '<br>' . $review['user_name'] . ': ' . $review['rating'] . '/5 - ' . $review['comment'];
}

// Calculate average rating for product with id=1
$averageRating = $review->getAverageRating(1);
echo '<br>Average rating: ' . $averageRating;


<?php

// Include the database connection file
require_once 'db.php';

class Review {
    public function createReview($data) {
        // Sanitize input data
        $user_id = mysqli_real_escape_string($GLOBALS['conn'], $data['user_id']);
        $product_id = mysqli_real_escape_string($GLOBALS['conn'], $data['product_id']);
        $review_text = mysqli_real_escape_string($GLOBALS['conn'], $data['review_text']);
        $rating = mysqli_real_escape_string($GLOBALS['conn'], $data['rating']);

        // Query to insert review into database
        $query = "INSERT INTO reviews (user_id, product_id, review_text, rating) VALUES ('$user_id', '$product_id', '$review_text', '$rating')";
        if (mysqli_query($GLOBALS['conn'], $query)) {
            return true; // Review created successfully
        } else {
            return false; // Error creating review
        }
    }

    public function getReviewsByProduct($productId) {
        // Query to retrieve reviews for a specific product
        $query = "SELECT * FROM reviews WHERE product_id = '$productId' ORDER BY id DESC";
        $result = mysqli_query($GLOBALS['conn'], $query);
        if ($result && mysqli_num_rows($result) > 0) {
            return $result; // Reviews retrieved successfully
        } else {
            return false; // Error retrieving reviews
        }
    }

    public function calculateRating($productId) {
        // Query to retrieve rating for a specific product
        $query = "SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = '$productId'";
        $result = mysqli_query($GLOBALS['conn'], $query);
        if ($result && mysqli_num_rows($result) > 0) {
            return mysqli_fetch_assoc($result)['average_rating']; // Rating retrieved successfully
        } else {
            return false; // Error retrieving rating
        }
    }
}

// Example usage:
$review = new Review();

$data = array(
    'user_id' => 1,
    'product_id' => 1,
    'review_text' => 'This product is great!',
    'rating' => 5
);

if ($review->createReview($data)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

$reviews = $review->getReviewsByProduct(1);
if ($reviews) {
    while ($row = mysqli_fetch_assoc($reviews)) {
        echo "User ID: " . $row['user_id'] . ", Review Text: " . $row['review_text'] . ", Rating: " . $row['rating'] . "
";
    }
} else {
    echo "Error retrieving reviews.";
}

$rating = $review->calculateRating(1);
if ($rating) {
    echo "Average rating for product 1 is: " . $rating;
} else {
    echo "Error retrieving rating.";
}


// db.php - database connection file

<?php
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "reviews_db";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


// review_functions.php - user review functions

<?php
require_once 'db.php';

function add_review($product_id, $user_id, $rating, $comment) {
    global $conn;
    
    $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
              VALUES ('$product_id', '$user_id', '$rating', '$comment')";
    
    if ($conn->query($query)) {
        return true; // review added successfully
    } else {
        return false; // failed to add review
    }
}

function get_reviews($product_id) {
    global $conn;
    
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        return $result; // retrieve reviews
    } else {
        return false; // no reviews found
    }
}

function edit_review($review_id, $rating, $comment) {
    global $conn;
    
    $query = "UPDATE reviews SET rating = '$rating', comment = '$comment'
              WHERE id = '$review_id'";
    
    if ($conn->query($query)) {
        return true; // review updated successfully
    } else {
        return false; // failed to update review
    }
}

function delete_review($review_id) {
    global $conn;
    
    $query = "DELETE FROM reviews WHERE id = '$review_id'";
    
    if ($conn->query($query)) {
        return true; // review deleted successfully
    } else {
        return false; // failed to delete review
    }
}
?>


// add_review.php - example usage of adding a review

<?php
require_once 'review_functions.php';

$product_id = 1;
$user_id = 1;
$rating = 4.5;
$comment = "Great product!";

if (add_review($product_id, $user_id, $rating, $comment)) {
    echo "Review added successfully!";
} else {
    echo "Failed to add review.";
}
?>

// get_reviews.php - example usage of retrieving reviews

<?php
require_once 'review_functions.php';

$product_id = 1;

$reviews = get_reviews($product_id);

if ($reviews) {
    while ($row = $reviews->fetch_assoc()) {
        echo "Rating: " . $row['rating'] . ", Comment: " . $row['comment'];
    }
} else {
    echo "No reviews found.";
}
?>


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  }

  /**
   * Get all reviews for a specific user.
   *
   * @param int $user_id User ID
   * @return array Reviews
   */
  public function getUserReviews($user_id) {
    $stmt = $this->db->prepare('SELECT * FROM reviews WHERE user_id = :user_id');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Add a new review.
   *
   * @param array $data Review data
   * @return int Review ID
   */
  public function addReview($data) {
    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_name, review_text, rating) VALUES (:user_id, :product_name, :review_text, :rating)');
    $stmt->execute(array(
      ':user_id' => $data['user_id'],
      ':product_name' => $data['product_name'],
      ':review_text' => $data['review_text'],
      ':rating' => $data['rating']
    ));
    return $this->db->lastInsertId();
  }

  /**
   * Update an existing review.
   *
   * @param array $data Review data
   * @return bool Success
   */
  public function updateReview($data) {
    $stmt = $this->db->prepare('UPDATE reviews SET product_name = :product_name, review_text = :review_text, rating = :rating WHERE id = :id');
    return $stmt->execute(array(
      ':id' => $data['id'],
      ':product_name' => $data['product_name'],
      ':review_text' => $data['review_text'],
      ':rating' => $data['rating']
    ));
  }

  /**
   * Delete a review.
   *
   * @param int $review_id Review ID
   * @return bool Success
   */
  public function deleteReview($review_id) {
    $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :id');
    return $stmt->execute(array(':id' => $review_id));
  }
}


$review = new Review();

// Get all reviews for a specific user
$user_reviews = $review->getUserReviews(1);
print_r($user_reviews);

// Add a new review
$data = array(
  'user_id' => 1,
  'product_name' => 'Product X',
  'review_text' => 'This product is great!',
  'rating' => 5
);
$new_review_id = $review->addReview($data);
echo "New Review ID: $new_review_id";

// Update an existing review
$data['id'] = $new_review_id;
$review->updateReview($data);

// Delete a review
$review->deleteReview($new_review_id);


// config.php

define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'database');

// Establish database connection
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


// functions.php

function addReview($product_id, $user_id, $content, $rating) {
    global $conn;

    $sql = "INSERT INTO reviews (product_id, user_id, content, rating)
            VALUES (?, ?, ?, ?)";

    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiss", $product_id, $user_id, $content, $rating);

    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function getReviews($product_id) {
    global $conn;

    $sql = "SELECT * FROM reviews WHERE product_id = ?";

    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);

    if ($stmt->execute()) {
        return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
    } else {
        return array();
    }
}

function editReview($review_id, $content) {
    global $conn;

    $sql = "UPDATE reviews SET content = ? WHERE id = ?";

    $stmt = $conn->prepare($sql);
    $stmt->bind_param("si", $content, $review_id);

    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function deleteReview($review_id) {
    global $conn;

    $sql = "DELETE FROM reviews WHERE id = ?";

    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $review_id);

    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}


// index.php

include 'config.php';
include 'functions.php';

if (isset($_POST['add_review'])) {
    $product_id = $_POST['product_id'];
    $user_id = $_SESSION['user_id']; // Assume user is logged in and has a session ID
    $content = $_POST['content'];
    $rating = $_POST['rating'];

    if (addReview($product_id, $user_id, $content, $rating)) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review.";
    }
}

if (isset($_POST['edit_review'])) {
    $review_id = $_POST['review_id'];
    $content = $_POST['content'];

    if (editReview($review_id, $content)) {
        echo "Review edited successfully!";
    } else {
        echo "Error editing review.";
    }
}

if (isset($_GET['delete_review'])) {
    $review_id = $_GET['delete_review'];

    if (deleteReview($review_id)) {
        echo "Review deleted successfully!";
    } else {
        echo "Error deleting review.";
    }
}

// Display reviews
$product_id = 1; // Replace with actual product ID
$reviews = getReviews($product_id);

foreach ($reviews as $review) {
    echo "Rating: $review[rating]<br>";
    echo "Content: $review[content]<br><hr>";
}


// config.php: store database connection info
<?php
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "reviews";

$conn = new mysqli($servername, $username, $password, $dbname);
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>

// user.php: handle user functions
<?php
require_once 'config.php';

class User {
  private $conn;

  function __construct($conn) {
    $this->conn = $conn;
  }

  public function createAccount($name, $email, $password) {
    $stmt = $this->conn->prepare("INSERT INTO users (name, email, password) VALUES (?, ?, ?)");
    $stmt->bind_param("sss", $name, $email, $password);
    return $stmt->execute();
  }

  public function login($email, $password) {
    $stmt = $this->conn->prepare("SELECT * FROM users WHERE email = ?");
    $stmt->bind_param("s", $email);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($row = $result->fetch_assoc()) {
      if (password_verify($password, $row['password'])) {
        return true;
      }
    }

    return false;
  }
}

// product.php: handle product functions
<?php
require_once 'config.php';

class Product {
  private $conn;

  function __construct($conn) {
    $this->conn = $conn;
  }

  public function addProduct($title, $description, $price) {
    $stmt = $this->conn->prepare("INSERT INTO products (title, description, price) VALUES (?, ?, ?)");
    $stmt->bind_param("sss", $title, $description, $price);
    return $stmt->execute();
  }
}

// review.php: handle review functions
<?php
require_once 'config.php';

class Review {
  private $conn;

  function __construct($conn) {
    $this->conn = $conn;
  }

  public function createReview($user_id, $product_id, $rating, $review) {
    $stmt = $this->conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("iiii", $user_id, $product_id, $rating, $review);
    return $stmt->execute();
  }

  public function getReviews($product_id = null) {
    if ($product_id !== null) {
      $stmt = $this->conn->prepare("SELECT * FROM reviews WHERE product_id = ?");
      $stmt->bind_param("i", $product_id);
    } else {
      $stmt = $this->conn->prepare("SELECT * FROM reviews");
    }
    return $stmt->execute()->get_result();
  }
}

// index.php: main application file
<?php
require_once 'user.php';
require_once 'product.php';
require_once 'review.php';

$user = new User($conn);
$product = new Product($conn);
$review = new Review($conn);

if (isset($_POST['createAccount'])) {
  $name = $_POST['name'];
  $email = $_POST['email'];
  $password = password_hash($_POST['password'], PASSWORD_DEFAULT);
  if ($user->createAccount($name, $email, $password)) {
    echo "Account created successfully!";
  } else {
    echo "Failed to create account.";
  }
}

if (isset($_POST['login'])) {
  $email = $_POST['email'];
  $password = $_POST['password'];
  if ($user->login($email, $password)) {
    // User logged in
  } else {
    echo "Invalid email or password.";
  }
}

if (isset($_POST['addProduct'])) {
  $title = $_POST['title'];
  $description = $_POST['description'];
  $price = $_POST['price'];
  if ($product->addProduct($title, $description, $price)) {
    echo "Product added successfully!";
  } else {
    echo "Failed to add product.";
  }
}

if (isset($_POST['createReview'])) {
  $user_id = $_SESSION['id']; // Assuming user is logged in
  $product_id = $_POST['product_id'];
  $rating = $_POST['rating'];
  $review->createReview($user_id, $product_id, $rating, $_POST['review']);
}

// Display reviews for a product
$reviews = $review->getReviews();
?>


// reviews.php

class Review {
  private $id;
  private $product_id;
  private $rating;
  private $comment;

  public function __construct($data) {
    $this->id = (int) $data['id'];
    $this->product_id = (int) $data['product_id'];
    $this->rating = (float) $data['rating'];
    $this->comment = trim($data['comment']);
  }

  public function getId() {
    return $this->id;
  }

  public function getProductId() {
    return $this->product_id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }
}


// reviews_controller.php

class ReviewsController {
  private $reviews;

  public function __construct() {
    $this->reviews = array();
  }

  public function addReview($data) {
    // Validate input data
    if (empty($data['product_id']) || empty($data['rating']) || empty($data['comment'])) {
      throw new Exception('Invalid review data');
    }

    // Create new Review object
    $review = new Review($data);

    // Store in reviews array
    $this->reviews[] = $review;

    return $review;
  }

  public function getReviews() {
    return $this->reviews;
  }
}


// index.php

require_once 'reviews.php';
require_once 'reviews_controller.php';

$controller = new ReviewsController();

$data = array(
  'product_id' => 1,
  'rating' => 5.0,
  'comment' => 'Great product!'
);

$review = $controller->addReview($data);

echo "Review ID: " . $review->getId() . "
";
echo "Product ID: " . $review->getProductId() . "
";
echo "Rating: " . $review->getRating() . "
";
echo "Comment: " . $review->getComment() . "
";

$reviews = $controller->getReviews();

foreach ($reviews as $r) {
  echo "Review ID: " . $r->getId() . "
";
}


// Include database connection file
require_once 'database.php';

class Review {
    private $db;

    public function __construct() {
        $this->db = new Database();
    }

    // Get all reviews for a product
    public function getReviews($product_id) {
        $query = "SELECT * FROM reviews WHERE product_id = :product_id";
        $params = array(':product_id' => $product_id);
        return $this->db->query($query, $params)->fetchAll();
    }

    // Create a new review
    public function createReview($user_id, $product_id, $rating, $comment) {
        $query = "INSERT INTO reviews (user_id, product_id, rating, comment)
                  VALUES (:user_id, :product_id, :rating, :comment)";
        $params = array(':user_id' => $user_id,
                        ':product_id' => $product_id,
                        ':rating' => $rating,
                        ':comment' => $comment);
        return $this->db->query($query, $params)->execute();
    }

    // Update an existing review
    public function updateReview($review_id, $new_rating, $new_comment) {
        $query = "UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id";
        $params = array(':id' => $review_id,
                        ':rating' => $new_rating,
                        ':comment' => $new_comment);
        return $this->db->query($query, $params)->execute();
    }

    // Delete a review
    public function deleteReview($review_id) {
        $query = "DELETE FROM reviews WHERE id = :id";
        $params = array(':id' => $review_id);
        return $this->db->query($query, $params)->execute();
    }
}


$review = new Review();

// Get all reviews for a product with ID 123
$reviews = $review->getReviews(123);

// Create a new review for a user with ID 456 and product ID 789
$new_review_id = $review->createReview(456, 789, 4, 'Great product!');

// Update an existing review with ID 1011 to have a rating of 5 and comment 'Excellent service!'
$updated_review_id = $review->updateReview(1011, 5, 'Excellent service!');

// Delete a review with ID 2022
$deleted_review_id = $review->deleteReview(2022);


<?php
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "reviews";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

?>


<?php
include 'database.php';

if (isset($_POST['add_review'])) {
    $product_id = $_POST['product_id'];
    $rating = $_POST['rating'];
    $comment = $_POST['comment'];

    $sql = "INSERT INTO reviews (product_id, rating, comment) VALUES ('$product_id', '$rating', '$comment')";
    if ($conn->query($sql)) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review: " . $conn->error;
    }
}

if (isset($_GET['view_reviews'])) {
    $product_id = $_GET['product_id'];

    $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        echo "<h2>Reviews for Product $product_id</h2>";
        while ($row = $result->fetch_assoc()) {
            echo "<p>Rating: " . $row['rating'] . ", Comment: " . $row['comment'] . "</p>";
        }
    } else {
        echo "No reviews found.";
    }
}
?>


<?php
include 'database.php';

if (isset($_POST['add_review'])) {
    include 'review.php';
}

if (isset($_GET['view_reviews'])) {
    include 'review.php';
}

?>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id"><br><br>
    <label for="rating">Rating:</label>
    <select id="rating" name="rating">
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
        <option value="5">5</option>
    </select><br><br>
    <label for="comment">Comment:</label>
    <textarea id="comment" name="comment"></textarea><br><br>
    <input type="submit" name="add_review" value="Add Review">
</form>

<h2>View Reviews</h2>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="get">
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id"><br><br>
    <input type="submit" name="view_reviews" value="View Reviews">
</form>


// db.php (connection file)
$host = 'localhost';
$dbname = 'review_system';
$user = 'root';
$password = '';

try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $user, $password);
} catch(PDOException $e) {
    die("ERROR: Could not connect. " . $e->getMessage());
}

// review.php (controller)
function createUserReview($user_id, $product_id, $rating, $review_text) {
    global $conn;
    
    // Insert into reviews table
    $query = "INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (:user_id, :product_id, :rating, :review_text)";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $review_text);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function getUserReviews($user_id) {
    global $conn;
    
    // Get all reviews from the user
    $query = "SELECT * FROM reviews WHERE user_id = :user_id";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function getProductReviews($product_id) {
    global $conn;
    
    // Get all reviews for the product
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function updateReviewStatus($review_id, $status) {
    global $conn;
    
    // Update the review status
    $query = "UPDATE reviews SET status = :status WHERE id = :review_id";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':status', $status);
    $stmt->bindParam(':review_id', $review_id);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// usage
if (isset($_POST['submit'])) {
    createUserReview($_SESSION['user_id'], $_POST['product_id'], $_POST['rating'], $_POST['review_text']);
}


class Review {
    private $id;
    private $userId;
    private $productId;
    private $rating;
    private $comment;

    public function __construct($id = null, $userId = null, $productId = null, $rating = null, $comment = null) {
        $this->id = $id;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


class ReviewManager {
    private static $reviews = array();

    public static function addReview(Review $review) {
        self::$reviews[$review->getId()] = $review;
    }

    public static function getReviews() {
        return self::$reviews;
    }

    public static function getReview($id) {
        if (isset(self::$reviews[$id])) {
            return self::$reviews[$id];
        } else {
            return null;
        }
    }

    public static function deleteReview($id) {
        if (isset(self::$reviews[$id])) {
            unset(self::$reviews[$id]);
        }
    }
}


$review1 = new Review(1, 1234, 5678, 5, 'Great product!');
$review2 = new Review(2, 9012, 3456, 4, 'Good but not great.');

ReviewManager::addReview($review1);
ReviewManager::addReview($review2);

print_r(ReviewManager::getReviews());

echo "Review 1: ";
var_dump(ReviewManager::getReview(1));
echo "
";

// Delete a review
ReviewManager::deleteReview(2);

echo "After deletion:
";
print_r(ReviewManager::getReviews());


// database connection settings
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'root';
$password = '';

try {
  $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

  class ReviewSystem {
    private $conn;

    public function __construct($conn) {
      $this->conn = $conn;
    }

    // add a new review
    public function addReview($user_id, $product_id, $rating, $review_text) {
      $stmt = $this->conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (:user_id, :product_id, :rating, :review_text)");
      $stmt->bindParam(':user_id', $user_id);
      $stmt->bindParam(':product_id', $product_id);
      $stmt->bindParam(':rating', $rating);
      $stmt->bindParam(':review_text', $review_text);
      $stmt->execute();
    }

    // get all reviews for a product
    public function getReviewsForProduct($product_id) {
      $stmt = $this->conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
      $stmt->bindParam(':product_id', $product_id);
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    // get all products
    public function getProducts() {
      $stmt = $this->conn->prepare("SELECT * FROM products");
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    // add a new product
    public function addProduct($name, $description) {
      $stmt = $this->conn->prepare("INSERT INTO products (name, description) VALUES (:name, :description)");
      $stmt->bindParam(':name', $name);
      $stmt->bindParam(':description', $description);
      $stmt->execute();
    }
  }

  // usage example
  $reviewSystem = new ReviewSystem($conn);

  // add a new product
  $reviewSystem->addProduct('Test Product', 'This is a test product');

  // get all products
  $products = $reviewSystem->getProducts();
  print_r($products);

  // add a new review
  $reviewSystem->addReview(1, 1, 5, 'Great product!');

  // get all reviews for a product
  $reviews = $reviewSystem->getReviewsForProduct(1);
  print_r($reviews);

} catch (PDOException $e) {
  echo "Connection failed: " . $e->getMessage();
}


function create_review($data) {
  // sanitize user input
  $data['rating'] = (int) $data['rating'];
  $data['comment'] = trim(strip_tags($data['comment']));

  try {
    $query = "
      INSERT INTO reviews (product_id, user_id, rating, comment)
      VALUES (:product_id, :user_id, :rating, :comment)
    ";
    $stmt = $pdo->prepare($query);
    $stmt->execute([
      ':product_id' => $data['product_id'],
      ':user_id' => $data['user_id'],
      ':rating' => $data['rating'],
      ':comment' => $data['comment']
    ]);

    return [
      'success' => true,
      'message' => 'Review created successfully'
    ];
  } catch (PDOException $e) {
    return [
      'success' => false,
      'message' => 'Error creating review: ' . $e->getMessage()
    ];
  }
}

function get_reviews($product_id, $limit = null, $offset = null) {
  try {
    $query = "
      SELECT r.id, u.name, r.rating, r.comment
      FROM reviews r
      JOIN users u ON r.user_id = u.id
      WHERE r.product_id = :product_id
    ";
    if ($limit && $offset) {
      $query .= " LIMIT :limit OFFSET :offset";
    }
    $stmt = $pdo->prepare($query);
    $params = [
      ':product_id' => $product_id,
      ':limit' => $limit,
      ':offset' => $offset
    ];
    if ($limit && $offset) {
      $params[':limit'] = $limit;
      $params[':offset'] = $offset;
    }
    $stmt->execute($params);
    return $stmt->fetchAll();
  } catch (PDOException $e) {
    return [];
  }
}

function update_review($review_id, $data) {
  try {
    $query = "
      UPDATE reviews
      SET rating = :rating, comment = :comment
      WHERE id = :id
    ";
    $stmt = $pdo->prepare($query);
    $stmt->execute([
      ':id' => $review_id,
      ':rating' => (int) $data['rating'],
      ':comment' => trim(strip_tags($data['comment']))
    ]);

    return [
      'success' => true,
      'message' => 'Review updated successfully'
    ];
  } catch (PDOException $e) {
    return [
      'success' => false,
      'message' => 'Error updating review: ' . $e->getMessage()
    ];
  }
}

function delete_review($review_id) {
  try {
    $query = "
      DELETE FROM reviews
      WHERE id = :id
    ";
    $stmt = $pdo->prepare($query);
    $stmt->execute([
      ':id' => $review_id
    ]);

    return [
      'success' => true,
      'message' => 'Review deleted successfully'
    ];
  } catch (PDOException $e) {
    return [
      'success' => false,
      'message' => 'Error deleting review: ' . $e->getMessage()
    ];
  }
}


// create a new review
$data = [
  'product_id' => 1,
  'user_id' => 1,
  'rating' => 5,
  'comment' => 'Great product!'
];
$review = create_review($data);
print_r($review); // Output: Array ( [success] => 1 [message] => Review created successfully )

// get reviews for a specific product
$product_id = 1;
$limit = 10;
$offset = 0;
$reviews = get_reviews($product_id, $limit, $offset);
print_r($reviews); // Output: Array ( [0] => Array ( [id] => 1 [name] => John Doe [rating] => 5 [comment] => Great product! ) )

// update a review
$review_id = 1;
$data = [
  'rating' => 4,
  'comment' => 'Good product!'
];
$update_review = update_review($review_id, $data);
print_r($update_review); // Output: Array ( [success] => 1 [message] => Review updated successfully )

// delete a review
$review_id = 1;
$delete_review = delete_review($review_id);
print_r($delete_review); // Output: Array ( [success] => 1 [message] => Review deleted successfully )


// db.php: Database connection settings
$host = 'localhost';
$dbname = 'reviews_database';
$username = 'your_username';
$password = 'your_password';

try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// Review model
class Review {
    private $id;
    private $product_id;
    private $user_id;
    private $rating;
    private $review_text;

    public function __construct($id, $product_id, $user_id, $rating, $review_text) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->user_id = $user_id;
        $this->rating = $rating;
        $this->review_text = $review_text;
    }

    public function getId() { return $this->id; }
    public function getProductID() { return $this->product_id; }
    public function getUserID() { return $this->user_id; }
    public function getRating() { return $this->rating; }
    public function getReviewText() { return $this->review_text; }
}

// Review service
class ReviewService {
    private $conn;

    public function __construct($conn) {
        $this->conn = $conn;
    }

    // Add a new review
    public function addReview(Review $review) {
        $stmt = $this->conn->prepare("INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES (:product_id, :user_id, :rating, :review_text)");
        $stmt->bindParam(':product_id', $review->getProductID());
        $stmt->bindParam(':user_id', $review->getUserID());
        $stmt->bindParam(':rating', $review->getRating());
        $stmt->bindParam(':review_text', $review->getReviewText());
        return $stmt->execute();
    }

    // Get all reviews for a product
    public function getReviewsForProduct($product_id) {
        $stmt = $this->conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
        $stmt->bindParam(':product_id', $product_id);
        return $stmt->execute() ? $stmt->fetchAll(PDO::FETCH_ASSOC) : array();
    }

    // Get all reviews for a user
    public function getReviewsForUser($user_id) {
        $stmt = $this->conn->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
        $stmt->bindParam(':user_id', $user_id);
        return $stmt->execute() ? $stmt->fetchAll(PDO::FETCH_ASSOC) : array();
    }

    // Update an existing review
    public function updateReview(Review $review, $id) {
        $stmt = $this->conn->prepare("UPDATE reviews SET rating = :rating, review_text = :review_text WHERE id = :id");
        $stmt->bindParam(':rating', $review->getRating());
        $stmt->bindParam(':review_text', $review->getReviewText());
        $stmt->bindParam(':id', $id);
        return $stmt->execute();
    }

    // Delete a review
    public function deleteReview($id) {
        $stmt = $this->conn->prepare("DELETE FROM reviews WHERE id = :id");
        $stmt->bindParam(':id', $id);
        return $stmt->execute();
    }
}

// Example usage:
$review_service = new ReviewService($conn);

// Add a new review
$review = new Review(1, 1, 1, 5, "Great product!");
if ($review_service->addReview($review)) {
    echo "Review added successfully!";
} else {
    echo "Error adding review.";
}

// Get all reviews for a product
$product_id = 1;
$reviews = $review_service->getReviewsForProduct($product_id);
foreach ($reviews as $review) {
    echo "Rating: {$review['rating']}, Review Text: {$review['review_text']}
";
}


class Review {
    private $id;
    private $rating;
    private $content;
    private $username;

    public function __construct($id, $rating, $content, $username) {
        $this->id = $id;
        $this->rating = $rating;
        $this->content = $content;
        $this->username = $username;
    }

    public function getId() {
        return $this->id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getContent() {
        return $this->content;
    }

    public function getUsername() {
        return $this->username;
    }
}


class ReviewManager {
    private $reviews = [];

    public function addReview(Review $review) {
        array_push($this->reviews, $review);
    }

    public function getReviews() {
        return $this->reviews;
    }

    public function displayReviews() {
        foreach ($this->reviews as $review) {
            echo "ID: {$review->getId()} | Rating: {$review->getRating()} | Content: {$review->getContent()} | Username: {$review->getUsername()}";
            echo "<hr>";
        }
    }
}


$review1 = new Review(1, 5, "Great product!", "JohnDoe");
$review2 = new Review(2, 3, "Not what I expected.", "JaneSmith");

$reviewManager = new ReviewManager();
$reviewManager->addReview($review1);
$reviewManager->addReview($review2);

echo "<h2>Reviews:</h2>";
$reviewManager->displayReviews();


// database connection settings
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database_name');

// connect to database
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// functions for CRUD operations

function create_review($title, $content, $rating, $user_id) {
    global $conn;
    $sql = "INSERT INTO reviews (title, content, rating, user_id)
            VALUES ('$title', '$content', '$rating', '$user_id')";
    if ($conn->query($sql) === TRUE) {
        echo "Review created successfully.";
    } else {
        echo "Error creating review: " . $conn->error;
    }
}

function read_reviews() {
    global $conn;
    $sql = "SELECT * FROM reviews ORDER BY id DESC";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "ID: " . $row["id"]. " - Title: " . $row["title"]. " Rating: " . $row["rating"]. "<br>";
        }
    } else {
        echo "No reviews found.";
    }
}

function update_review($id, $title, $content, $rating) {
    global $conn;
    $sql = "UPDATE reviews SET title='$title', content='$content', rating='$rating' WHERE id=$id";
    if ($conn->query($sql) === TRUE) {
        echo "Review updated successfully.";
    } else {
        echo "Error updating review: " . $conn->error;
    }
}

function delete_review($id) {
    global $conn;
    $sql = "DELETE FROM reviews WHERE id=$id";
    if ($conn->query($sql) === TRUE) {
        echo "Review deleted successfully.";
    } else {
        echo "Error deleting review: " . $conn->error;
    }
}

// example usage
create_review("Example Review", "This is a sample review.", 5, 1);
read_reviews();
update_review(1, "Updated Title", "New content for review 1.", 4);
delete_review(1);

$conn->close();


<?php

// Database connection settings
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'database';

// Create a database connection
$dsn = "mysql:host=$db_host;dbname=$db_name";
$conn = new PDO($dsn, $db_username, $db_password);

function create_review($product_name, $review_text, $rating, $user_id) {
    global $conn;
    
    // Insert review into database
    $query = "INSERT INTO reviews (product_name, review_text, rating, user_id) VALUES (:product_name, :review_text, :rating, :user_id)";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
}

function get_reviews_for_product($product_name) {
    global $conn;
    
    // Retrieve reviews for a specific product
    $query = "SELECT * FROM reviews WHERE product_name = :product_name";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->execute();
    return $stmt->fetchAll();
}

function delete_review($review_id) {
    global $conn;
    
    // Delete a review
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':id', $review_id);
    $stmt->execute();
}

// Example usage:
create_review("Product Name", "This is a great product!", 5, 1);

$reviews = get_reviews_for_product("Product Name");
foreach ($reviews as $review) {
    echo "$review[product_name] by $review[user_id] on $review[created_at]
";
}

delete_review(1);

?>


<?php
// include database connection
include_once 'db_connection.php';

// retrieve all reviews from database
$query = "SELECT r.id, u.username, r.title, r.review, r.rating FROM reviews r JOIN users u ON r.user_id=u.id ORDER BY created_at DESC";
$reviews = mysqli_query($conn, $query);

?>


<!-- display form to add new review -->
<form action="add_review.php" method="post">
  <h2>Add a Review</h2>
  <label for="title">Title:</label><br>
  <input type="text" id="title" name="title"><br>
  <label for="review">Review:</label><br>
  <textarea id="review" name="review"></textarea><br>
  <label for="rating">Rating (out of 5):</label><br>
  <input type="number" id="rating" name="rating" min="0" max="5"><br><br>
  <button type="submit" class="btn btn-primary">Submit Review</button>
</form>

<!-- display all reviews -->
<h2>Reviews:</h2>
<ul>
  <?php
    while ($review = mysqli_fetch_assoc($reviews)) {
      echo '<li>';
      echo 'Title: <strong>' . $review['title'] . '</strong><br>';
      echo 'Review: ' . $review['review'] . '<br>';
      echo 'Rating: ' . $review['rating'] . '/5 stars<br>';
      echo 'User: ' . $review['username'];
      if ($_SESSION['user_id'] == $review['user_id']) {
        echo ' | <a href="edit_review.php?id=' . $review['id'] . '">Edit Review</a> | <a href="delete_review.php?id=' . $review['id'] . '">Delete Review</a>';
      }
      echo '</li>';
    }
  ?>
</ul>


<?php
// include database connection
include_once 'db_connection.php';

// retrieve form data
$title = $_POST['title'];
$review = $_POST['review'];
$rating = $_POST['rating'];

// insert review into database
$query = "INSERT INTO reviews (user_id, title, review, rating) VALUES ('" . $_SESSION['user_id'] . "', '$title', '$review', '$rating')";
mysqli_query($conn, $query);

header('Location: reviews.php');
exit;
?>


<?php
// include database connection
include_once 'db_connection.php';

// retrieve review ID from URL parameter
$id = $_GET['id'];

// retrieve review data from database
$query = "SELECT * FROM reviews WHERE id=$id";
$review = mysqli_query($conn, $query);
$review = mysqli_fetch_assoc($review);

// display form to edit review
?>
<form action="update_review.php" method="post">
  <h2>Edit Review</h2>
  <label for="title">Title:</label><br>
  <input type="text" id="title" name="title" value="<?php echo $review['title']; ?>"><br>
  <label for="review">Review:</label><br>
  <textarea id="review" name="review"><?php echo $review['review']; ?></textarea><br>
  <label for="rating">Rating (out of 5):</label><br>
  <input type="number" id="rating" name="rating" value="<?php echo $review['rating']; ?>" min="0" max="5"><br><br>
  <button type="submit" class="btn btn-primary">Update Review</button>
  <input type="hidden" name="id" value="<?php echo $id; ?>">
</form>


<?php
// include database connection
include_once 'db_connection.php';

// retrieve form data and ID from URL parameter
$id = $_POST['id'];
$title = $_POST['title'];
$review = $_POST['review'];
$rating = $_POST['rating'];

// update review in database
$query = "UPDATE reviews SET title='$title', review='$review', rating=$rating WHERE id=$id";
mysqli_query($conn, $query);

header('Location: reviews.php');
exit;
?>


<?php
// include database connection
include_once 'db_connection.php';

// retrieve ID from URL parameter
$id = $_GET['id'];

// delete review from database
$query = "DELETE FROM reviews WHERE id=$id";
mysqli_query($conn, $query);

header('Location: reviews.php');
exit;
?>


// database connection information
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'reviews_database';

// create a connection
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// review class to encapsulate the functionality
class ReviewSystem {

    private $conn;

    function __construct() {
        $this->conn = new mysqli($db_host, $db_username, $db_password, $db_name);
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
    }

    // method to display all reviews
    function display_reviews() {
        $query = "SELECT * FROM reviews";
        $result = $this->conn->query($query);

        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                echo "Title: " . $row["title"] . "<br>";
                echo "Review: " . $row["review"] . "<br><br>";
            }
        } else {
            echo "No reviews yet";
        }

    }

    // method to add a new review
    function add_review($title, $review) {
        $query = "INSERT INTO reviews (title, review) VALUES ('$title', '$review')";
        if ($this->conn->query($query)) {
            echo "Review added successfully";
        } else {
            echo "Error adding review: " . $this->conn->error;
        }
    }

    // method to update an existing review
    function update_review($id, $title, $review) {
        $query = "UPDATE reviews SET title='$title', review='$review' WHERE id=$id";
        if ($this->conn->query($query)) {
            echo "Review updated successfully";
        } else {
            echo "Error updating review: " . $this->conn->error;
        }
    }

    // method to delete a review
    function delete_review($id) {
        $query = "DELETE FROM reviews WHERE id=$id";
        if ($this->conn->query($query)) {
            echo "Review deleted successfully";
        } else {
            echo "Error deleting review: " . $this->conn->error;
        }
    }

}

// example usage
$review_system = new ReviewSystem();
$review_system->display_reviews();

// add a new review
$review_system->add_review("New title", "This is my new review");

// update an existing review
$review_system->update_review(1, "Updated title", "This is the updated review");

// delete a review
$review_system->delete_review(2);



<?php

class Review {
    private $db;

    function __construct() {
        // Connect to database
        $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
    }

    // Function to add a review
    function addReview($productId, $userId, $rating, $review) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:id, :user_id, :rating, :review)");
            $stmt->bindParam(':id', $productId);
            $stmt->bindParam(':user_id', $userId);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':review', $review);
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error adding review: " . $e->getMessage();
            return false;
        }
    }

    // Function to display all reviews for a product
    function displayReviews($productId) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :id");
            $stmt->bindParam(':id', $productId);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error displaying reviews: " . $e->getMessage();
            return false;
        }
    }

    // Function to calculate the average rating for a product
    function getAverageRating($productId) {
        try {
            $stmt = $this->db->prepare("SELECT AVG(rating) AS average FROM reviews WHERE product_id = :id");
            $stmt->bindParam(':id', $productId);
            $stmt->execute();
            return $stmt->fetchColumn();
        } catch (PDOException $e) {
            echo "Error calculating average rating: " . $e->getMessage();
            return false;
        }
    }
}

?>


$review = new Review();

// Add a review
$productId = 1;
$userId = 1;
$rating = 5;
$reviewText = "Great product!";
$review->addReview($productId, $userId, $rating, $reviewText);

// Display all reviews for a product
$productReviews = $review->displayReviews($productId);
print_r($productReviews);

// Calculate the average rating for a product
$averageRating = $review->getAverageRating($productId);
echo "Average Rating: " . $averageRating;


// config.php
$db_host = 'your_database_host';
$db_username = 'your_database_username';
$db_password = 'your_database_password';
$db_name = 'your_database_name';

$conn = new PDO("mysql:host=$db_host;dbname=$db_name", $db_username, $db_password);


// review.php (user review form)
<?php
require_once 'config.php';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // User has submitted a review
  $userId = $_SESSION['user_id'];
  $productId = $_POST['product_id'];
  $rating = $_POST['rating'];
  $review = $_POST['review'];

  try {
    $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    $stmt->execute();

    // Get the review ID
    $reviewId = $conn->lastInsertId();

    // Add rating to ratings table
    $stmt = $conn->prepare("INSERT INTO ratings (product_id, user_id, rating) VALUES (:product_id, :user_id, :rating)");
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':rating', $rating);
    $stmt->execute();

    echo "Review submitted successfully!";
  } catch (PDOException $e) {
    echo "Error submitting review: " . $e->getMessage();
  }
}

?>


// review_list.php (list of reviews for a product)
<?php
require_once 'config.php';

$productId = $_GET['product_id'];

$stmt = $conn->prepare("SELECT r.id, u.name, p.name AS product_name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id WHERE r.product_id = :product_id ORDER BY r.created_at DESC");
$stmt->bindParam(':product_id', $productId);
$stmt->execute();

$reviews = $stmt->fetchAll();

?>


<form action="review.php" method="post">
  <input type="hidden" name="product_id" value="<?php echo $product['id']; ?>">
  <textarea name="review"></textarea>
  <select name="rating">
    <?php foreach (array(1, 2, 3, 4, 5) as $rating): ?>
      <option value="<?php echo $rating; ?>"><?php echo $rating . "/5"; ?></option>
    <?php endforeach; ?>
  </select>
  <button type="submit">Submit Review</button>
</form>


<h1>Reviews for <?php echo $product['name']; ?></h1>

<ul>
  <?php foreach ($reviews as $review): ?>
    <li>
      <strong><?php echo $review['name']; ?></strong>
      - <?php echo $review['rating'] . "/5"; ?> stars
      - <?php echo $review['review']; ?>
    </li>
  <?php endforeach; ?>
</ul>


// Function to connect to database
function connectToDatabase() {
    $servername = "localhost";
    $username = "your_username";
    $password = "your_password";
    $dbname = "your_database";

    try {
        $conn = new PDO("mysql:host=$servername; dbname=$dbname", $username, $password);
        return $conn;
    } catch (PDOException $e) {
        echo "Error connecting to database: " . $e->getMessage();
        exit();
    }
}

// Function to add a review
function addReview($product_id, $user_id, $rating, $review_text) {
    $conn = connectToDatabase();

    try {
        $sql = "INSERT INTO reviews (product_id, user_id, rating, review_text)
                VALUES (:product_id, :user_id, :rating, :review_text)";
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(":product_id", $product_id);
        $stmt->bindParam(":user_id", $user_id);
        $stmt->bindParam(":rating", $rating);
        $stmt->bindParam(":review_text", $review_text);

        if ($stmt->execute()) {
            return true;
        } else {
            echo "Error adding review: ";
            print_r($conn->errorInfo());
            return false;
        }
    } catch (PDOException $e) {
        echo "Error adding review: " . $e->getMessage();
        return false;
    }

    $conn = null;
}

// Function to view reviews for a user
function viewReviewsForUser($user_id) {
    $conn = connectToDatabase();

    try {
        $sql = "SELECT * FROM reviews WHERE user_id = :user_id";
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(":user_id", $user_id);

        if ($stmt->execute()) {
            return $stmt->fetchAll();
        } else {
            echo "Error fetching reviews: ";
            print_r($conn->errorInfo());
            return array();
        }
    } catch (PDOException $e) {
        echo "Error fetching reviews: " . $e->getMessage();
        return array();
    }

    $conn = null;
}

// Function to average ratings for a product
function getAverageRatingForProduct($product_id) {
    $conn = connectToDatabase();

    try {
        $sql = "SELECT AVG(rating) as average_rating FROM reviews WHERE product_id = :product_id";
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(":product_id", $product_id);

        if ($stmt->execute()) {
            $result = $stmt->fetch();
            return $result['average_rating'];
        } else {
            echo "Error fetching average rating: ";
            print_r($conn->errorInfo());
            return 0;
        }
    } catch (PDOException $e) {
        echo "Error fetching average rating: " . $e->getMessage();
        return 0;
    }

    $conn = null;
}


// Add a review for a user
$product_id = 1;
$user_id = 2;
$rating = 4;
$review_text = 'This product is great!';
if (addReview($product_id, $user_id, $rating, $review_text)) {
    echo "Review added successfully!";
}

// View reviews for a user
$user_id = 2;
$reviews = viewReviewsForUser($user_id);
print_r($reviews);

// Get average rating for a product
$product_id = 1;
$average_rating = getAverageRatingForProduct($product_id);
echo "Average rating: $average_rating";


<?php

class Review {
    private $id;
    private $product_id;
    private $user_id;
    private $rating;
    private $review;

    public function __construct($product_id, $user_id, $rating, $review) {
        $this->product_id = $product_id;
        $this->user_id = $user_id;
        $this->rating = $rating;
        $this->review = $review;
    }

    public function getId() {
        return $this->id;
    }

    public function getProductID() {
        return $this->product_id;
    }

    public function getUserID() {
        return $this->user_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}

class ReviewSystem {
    private $reviews = array();

    public function addReview(Review $review) {
        if (!isset($this->reviews[$review->getProductID()])) {
            $this->reviews[$review->getProductID()] = array();
        }

        $this->reviews[$review->getProductID()][count($this->reviews[$review->getProductID()])] = $review;
    }

    public function updateReview(Review $review) {
        if (isset($this->reviews[$review->getProductID()])) {
            foreach ($this->reviews[$review->getProductID()] as &$item) {
                if ($item->getUserID() == $review->getUserID()) {
                    $item = $review;
                }
            }
        } else {
            $this->addReview($review);
        }
    }

    public function deleteReview(Review $review) {
        if (isset($this->reviews[$review->getProductID()])) {
            foreach ($this->reviews[$review->getProductID()] as &$item) {
                if ($item->getUserID() == $review->getUserID()) {
                    unset($item);
                    return;
                }
            }
        }
    }

    public function getReviewsForProduct($product_id) {
        if (isset($this->reviews[$product_id])) {
            return $this->reviews[$product_id];
        } else {
            return array();
        }
    }
}

// Example usage
$review_system = new ReviewSystem();

$review1 = new Review(1, 1, 5, 'Great product!');
$review2 = new Review(1, 1, 3, 'Good but not perfect.');
$review3 = new Review(1, 2, 4, 'Nice one!');

$review_system->addReview($review1);
$review_system->addReview($review2);

echo "Reviews for product 1:
";
foreach ($review_system->getReviewsForProduct(1) as $review) {
    echo 'Rating: ' . $review->getRating() . ', Review: ' . $review->getReview() . "
";
}

$review_system->updateReview($review3);
echo "Updated reviews for product 1:
";
foreach ($review_system->getReviewsForProduct(1) as $review) {
    echo 'Rating: ' . $review->getRating() . ', Review: ' . $review->getReview() . "
";
}

$review_system->deleteReview($review2);
echo "Updated reviews for product 1:
";
foreach ($review_system->getReviewsForProduct(1) as $review) {
    echo 'Rating: ' . $review->getRating() . ', Review: ' . $review->getReview() . "
";
}

?>


// db.php

class DB {
  private $host = 'localhost';
  private $username = 'your_username';
  private $password = 'your_password';
  private $dbname = 'your_database';

  public function connect() {
    try {
      $conn = new PDO('mysql:host=' . $this->host . ';dbname=' . $this->dbname, $this->username, $this->password);
      return $conn;
    } catch (PDOException $e) {
      echo 'Error connecting to database: ' . $e->getMessage();
    }
  }

  public function insertReview($reviewData) {
    $sql = "INSERT INTO reviews SET user_id = :user_id, product_name = :product_name, rating = :rating, review = :review";
    try {
      $conn = $this->connect();
      $stmt = $conn->prepare($sql);
      $stmt->execute([
        ':user_id' => $reviewData['user_id'],
        ':product_name' => $reviewData['product_name'],
        ':rating' => $reviewData['rating'],
        ':review' => $reviewData['review']
      ]);
    } catch (PDOException $e) {
      echo 'Error inserting review: ' . $e->getMessage();
    }
  }

  public function getReviews() {
    $sql = "SELECT * FROM reviews";
    try {
      $conn = $this->connect();
      $stmt = $conn->query($sql);
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error fetching reviews: ' . $e->getMessage();
    }
  }

  public function getUserReviews($userId) {
    $sql = "SELECT * FROM reviews WHERE user_id = :user_id";
    try {
      $conn = $this->connect();
      $stmt = $conn->prepare($sql);
      $stmt->execute([
        ':user_id' => $userId
      ]);
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error fetching user reviews: ' . $e->getMessage();
    }
  }

  public function deleteReview($reviewId) {
    $sql = "DELETE FROM reviews WHERE id = :id";
    try {
      $conn = $this->connect();
      $stmt = $conn->prepare($sql);
      $stmt->execute([
        ':id' => $reviewId
      ]);
    } catch (PDOException $e) {
      echo 'Error deleting review: ' . $e->getMessage();
    }
  }

}


class Review {
  private $db;

  public function __construct() {
    $this->db = new DB();
  }

  public function insert($reviewData) {
    return $this->db->insertReview($reviewData);
  }

  public function getAllReviews() {
    return $this->db->getReviews();
  }

  public function getUserReviews($userId) {
    return $this->db->getUserReviews($userId);
  }

  public function deleteReview($reviewId) {
    return $this->db->deleteReview($reviewId);
  }
}


$review = new Review();

// Insert a new review
$reviewData = [
  'user_id' => 1,
  'product_name' => 'Product Name',
  'rating' => 5,
  'review' => 'This is a great product!'
];
$review->insert($reviewData);

// Get all reviews
$reviews = $review->getAllReviews();
print_r($reviews);

// Get user's reviews
$userReviews = $review->getUserReviews(1);
print_r($userReviews);

// Delete a review
$reviewId = 1;
$review->deleteReview($reviewId);


class ReviewSystem {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
  }

  // Function to add a review
  public function addReview($userId, $productId, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
      $stmt->execute([$userId, $productId, $rating, $review]);
      return true;
    } catch (PDOException $e) {
      return false;
    }
  }

  // Function to get all reviews for a product
  public function getProductReviews($productId) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
      $stmt->execute([$productId]);
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      return [];
    }
  }

  // Function to get all reviews for a user
  public function getUserReviews($userId) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = ?");
      $stmt->execute([$userId]);
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      return [];
    }
  }

  // Function to update a review
  public function updateReview($reviewId, $rating, $review) {
    try {
      $stmt = $this->db->prepare("UPDATE reviews SET rating = ?, review = ? WHERE id = ?");
      $stmt->execute([$rating, $review, $reviewId]);
      return true;
    } catch (PDOException $e) {
      return false;
    }
  }

  // Function to delete a review
  public function deleteReview($reviewId) {
    try {
      $this->db->exec("DELETE FROM reviews WHERE id = ?");
      return true;
    } catch (PDOException $e) {
      return false;
    }
  }
}


$reviewSystem = new ReviewSystem();

// Add a review
$userId = 1;
$productId = 1;
$rating = 5;
$review = "This product is amazing!";
$reviewSystem->addReview($userId, $productId, $rating, $review);

// Get all reviews for a product
$productReviews = $reviewSystem->getProductReviews(1);
print_r($productReviews); // Output: Array of review data

// Update a review
$reviewId = 1;
$newRating = 4;
$newReview = "This product is great, but not perfect.";
$reviewSystem->updateReview($reviewId, $newRating, $newReview);

// Delete a review
$reviewSystem->deleteReview(1);


class Review {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    /**
     * Add a new review to the database.
     *
     * @param int   $product_id  The ID of the product being reviewed.
     * @param int   $user_id     The ID of the user submitting the review.
     * @param string $reviewText The text of the review.
     * @return int|null          The ID of the newly created review, or null on failure.
     */
    public function addReview($product_id, $user_id, $rating, $review_text) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, review_text)
                VALUES (?, ?, ?, ?)");
            $stmt->execute([$product_id, $user_id, $rating, $review_text]);
            return $this->db->lastInsertId();
        } catch (PDOException $e) {
            echo "Error adding review: " . $e->getMessage();
            return null;
        }
    }

    /**
     * Retrieve all reviews for a given product.
     *
     * @param int $product_id The ID of the product to retrieve reviews for.
     * @return array          An array of arrays containing review data.
     */
    public function getReviews($product_id) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
            $stmt->execute([$product_id]);
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error retrieving reviews: " . $e->getMessage();
            return [];
        }
    }

    /**
     * Update an existing review.
     *
     * @param int   $review_id The ID of the review to update.
     * @param string $newText  The new text for the review.
     * @return bool          True on success, false on failure.
     */
    public function updateReview($review_id, $new_text) {
        try {
            $stmt = $this->db->prepare("UPDATE reviews SET review_text = ? WHERE id = ?");
            return $stmt->execute([$new_text, $review_id]) !== false;
        } catch (PDOException $e) {
            echo "Error updating review: " . $e->getMessage();
            return false;
        }
    }

    /**
     * Delete a review.
     *
     * @param int $review_id The ID of the review to delete.
     * @return bool          True on success, false on failure.
     */
    public function deleteReview($review_id) {
        try {
            $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
            return $stmt->execute([$review_id]) !== false;
        } catch (PDOException $e) {
            echo "Error deleting review: " . $e->getMessage();
            return false;
        }
    }
}


$db = new PDO("mysql:host=localhost;dbname=mydatabase", "myuser", "mypassword");
$reviewSystem = new Review($db);

// Add a new review
$product_id = 1;
$user_id = 123;
$rating = 4;
$review_text = "Great product!";
$review_id = $reviewSystem->addReview($product_id, $user_id, $rating, $review_text);
echo "Added review with ID: $review_id
";

// Retrieve all reviews for a product
$product_reviews = $reviewSystem->getReviews(1);
print_r($product_reviews);

// Update an existing review
$new_text = "Even better now!";
$updated = $reviewSystem->updateReview($review_id, $new_text);
echo "Updated review: $updated
";

// Delete a review
$deleted = $reviewSystem->deleteReview($review_id);
echo "Deleted review: $deleted
";


class Review {
  private $db;

  public function __construct() {
    // Connect to database
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  /**
   * Add a new review
   *
   * @param int $user_id
   * @param int $product_id
   * @param string $review_text
   * @param int $rating
   */
  public function addReview($user_id, $product_id, $review_text, $rating) {
    try {
      // Insert into database
      $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, review_text, rating) VALUES (:user_id, :product_id, :review_text, :rating)');
      $stmt->bindParam(':user_id', $user_id);
      $stmt->bindParam(':product_id', $product_id);
      $stmt->bindParam(':review_text', $review_text);
      $stmt->bindParam(':rating', $rating);
      $stmt->execute();
    } catch (PDOException $e) {
      echo 'Error adding review: ' . $e->getMessage();
    }
  }

  /**
   * Edit an existing review
   *
   * @param int $id
   * @param string $review_text
   * @param int $rating
   */
  public function editReview($id, $review_text, $rating) {
    try {
      // Update database
      $stmt = $this->db->prepare('UPDATE reviews SET review_text = :review_text, rating = :rating WHERE id = :id');
      $stmt->bindParam(':id', $id);
      $stmt->bindParam(':review_text', $review_text);
      $stmt->bindParam(':rating', $rating);
      $stmt->execute();
    } catch (PDOException $e) {
      echo 'Error editing review: ' . $e->getMessage();
    }
  }

  /**
   * Delete a review
   *
   * @param int $id
   */
  public function deleteReview($id) {
    try {
      // Delete from database
      $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :id');
      $stmt->bindParam(':id', $id);
      $stmt->execute();
    } catch (PDOException $e) {
      echo 'Error deleting review: ' . $e->getMessage();
    }
  }

  /**
   * Get all reviews
   *
   * @return array
   */
  public function getReviews() {
    try {
      // Select from database
      $stmt = $this->db->prepare('SELECT * FROM reviews');
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error getting reviews: ' . $e->getMessage();
    }
  }
}


$review = new Review();

// Add a review
$review->addReview(1, 2, 'Great product!', 5);

// Edit a review
$review->editReview(3, 'Changed review text', 4);

// Delete a review
$review->deleteReview(2);

// Get all reviews
$reviews = $review->getReviews();
print_r($reviews);


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Create review
  public function create($user_id, $product_id, $title, $review, $rating) {
    try {
      $stmt = $this->db->prepare('INSERT INTO reviews (title, review, rating, user_id, product_id) VALUES (?, ?, ?, ?, ?)');
      $stmt->execute([$title, $review, $rating, $user_id, $product_id]);
      return true;
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  // Read reviews
  public function read($product_id = null, $limit = null, $offset = null) {
    try {
      if ($product_id === null) {
        $stmt = $this->db->prepare('SELECT * FROM reviews');
      } else {
        $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = ? ORDER BY id DESC LIMIT ? OFFSET ?');
        $stmt->execute([$product_id, $limit, $offset]);
      }
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error reading reviews: " . $e->getMessage();
      return array();
    }
  }

  // Update review
  public function update($id, $title = null, $review = null, $rating = null) {
    try {
      if ($title !== null || $review !== null || $rating !== null) {
        $stmt = $this->db->prepare('UPDATE reviews SET title = ?, review = ?, rating = ? WHERE id = ?');
        $stmt->execute([$title ?? '', $review ?? '', $rating ?? 0, $id]);
      }
      return true;
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
      return false;
    }
  }

  // Delete review
  public function delete($id) {
    try {
      $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = ?');
      $stmt->execute([$id]);
      return true;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');

$review = new Review($db);

// Create a review
$user_id = 1;
$product_id = 1;
$title = 'Review Title';
$review_text = 'This is the review text.';
$rating = 4;

$created_review = $review->create($user_id, $product_id, $title, $review_text, $rating);
if ($created_review) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

// Read reviews
$product_id = 1;
$limit = 10;
$offset = 0;

$reviews = $review->read($product_id, $limit, $offset);
foreach ($reviews as $r) {
    echo "ID: " . $r['id'] . ", Title: " . $r['title'] . ", Review: " . $r['review'] . ", Rating: " . $r['rating'];
}

// Update review
$id = 1;
$title = 'New title';
$review_text = 'New review text.';
$rating = 5;

$updated_review = $review->update($id, $title, $review_text, $rating);
if ($updated_review) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review.";
}

// Delete review
$id = 1;
$deleted_review = $review->delete($id);
if ($deleted_review) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}


class Review {
    private $id;
    private $user_id;
    private $product_id;
    private $rating;
    private $review;

    public function __construct($id = null) {
        if ($id !== null) {
            $this->loadReview($id);
        }
    }

    // Load a review by ID
    private function loadReview($id) {
        // Replace this with your database connection code
        $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
        $stmt = $db->prepare('SELECT * FROM reviews WHERE id = :id');
        $stmt->bindParam(':id', $id);
        $stmt->execute();
        $reviewData = $stmt->fetch(PDO::FETCH_ASSOC);

        if ($reviewData) {
            $this->id = $id;
            $this->user_id = $reviewData['user_id'];
            $this->product_id = $reviewData['product_id'];
            $this->rating = $reviewData['rating'];
            $this->review = $reviewData['review'];
        }
    }

    // Create a new review
    public function create($userId, $productId, $rating, $review) {
        // Replace this with your database connection code
        $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
        $stmt = $db->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:userId, :productId, :rating, :review)');
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        $stmt->execute();

        return $this->id = $db->lastInsertId();
    }

    // Update an existing review
    public function update($id, $userId, $productId, $rating, $review) {
        // Replace this with your database connection code
        $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
        $stmt = $db->prepare('UPDATE reviews SET user_id = :userId, product_id = :productId, rating = :rating, review = :review WHERE id = :id');
        $stmt->bindParam(':id', $id);
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        $stmt->execute();

        return true;
    }

    // Delete a review
    public function delete($id) {
        // Replace this with your database connection code
        $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
        $stmt = $db->prepare('DELETE FROM reviews WHERE id = :id');
        $stmt->bindParam(':id', $id);
        $stmt->execute();

        return true;
    }
}


// Create a new review
$review = new Review();
$review->create(1, 1, 5, 'Great product!');

// Update an existing review
$review->update(1, 1, 1, 4, 'Good product, but not great.');

// Delete a review
$review->delete(1);

// Load a review by ID
$review = new Review(1);
echo $review->rating; // Outputs: 4


class Review {
  private $db;

  public function __construct(PDO $db) {
    $this->db = $db;
  }

  public function getReviews($userId = null) {
    if ($userId === null) {
      $query = 'SELECT * FROM reviews';
    } else {
      $query = 'SELECT * FROM reviews WHERE user_id = :user_id';
      $params = array(':user_id' => $userId);
    }

    $stmt = $this->db->prepare($query);
    $stmt->execute($params);
    return $stmt->fetchAll();
  }

  public function createReview($data) {
    $query = 'INSERT INTO reviews (title, content, rating, user_id) VALUES (:title, :content, :rating, :user_id)';
    $params = array(
      ':title' => $data['title'],
      ':content' => $data['content'],
      ':rating' => $data['rating'],
      ':user_id' => $data['user_id']
    );

    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute($params);
      return $this->db->lastInsertId();
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  public function updateReview($id, $data) {
    $query = 'UPDATE reviews SET title = :title, content = :content, rating = :rating WHERE id = :id';
    $params = array(
      ':title' => $data['title'],
      ':content' => $data['content'],
      ':rating' => $data['rating'],
      ':id' => $id
    );

    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute($params);
      return true;
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
      return false;
    }
  }

  public function deleteReview($id) {
    $query = 'DELETE FROM reviews WHERE id = :id';
    $params = array(':id' => $id);

    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute($params);
      return true;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


function createUserReview($userId, $data) {
  // Create a new review object
  $review = new Review(new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password'));

  // Check if the review already exists
  $existingReviews = $review->getReviews($userId);
  foreach ($existingReviews as $existingReview) {
    echo "You have already submitted a review for this user.";
    return false;
  }

  // Create a new review
  $newId = $review->createReview(array(
    'title' => $data['title'],
    'content' => $data['content'],
    'rating' => $data['rating'],
    'user_id' => $userId
  ));

  if ($newId !== false) {
    echo "Thank you for submitting your review!";
    return true;
  } else {
    echo "Error creating review. Please try again.";
    return false;
  }
}

function updateUserReview($id, $data) {
  // Create a new review object
  $review = new Review(new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password'));

  // Update the existing review
  if ($review->updateReview($id, array(
    'title' => $data['title'],
    'content' => $data['content'],
    'rating' => $data['rating']
  ))) {
    echo "Thank you for updating your review!";
    return true;
  } else {
    echo "Error updating review. Please try again.";
    return false;
  }
}

function deleteUserReview($id) {
  // Create a new review object
  $review = new Review(new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password'));

  // Delete the existing review
  if ($review->deleteReview($id)) {
    echo "Thank you for deleting your review!";
    return true;
  } else {
    echo "Error deleting review. Please try again.";
    return false;
  }
}


createUserReview(1, array(
  'title' => 'Great product!',
  'content' => 'I love this product!',
  'rating' => 5
));


updateUserReview(1, array(
  'title' => 'Updated title',
  'content' => 'Updated content',
  'rating' => 4
));


deleteUserReview(1);


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Create a new review
  public function createReview($userId, $review, $rating) {
    $query = "INSERT INTO reviews (user_id, review, rating)
              VALUES (:user_id, :review, :rating)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':rating', $rating);
    return $stmt->execute();
  }

  // Get all reviews
  public function getAllReviews() {
    $query = "SELECT * FROM reviews";
    $stmt = $this->db->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll();
  }

  // Get a single review by ID
  public function getReviewById($id) {
    $query = "SELECT * FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch();
  }

  // Update a review
  public function updateReview($id, $review, $rating) {
    $query = "UPDATE reviews SET review = :review, rating = :rating
              WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $id);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':rating', $rating);
    return $stmt->execute();
  }

  // Delete a review
  public function deleteReview($id) {
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $id);
    return $stmt->execute();
  }
}


// Connect to database
$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

// Create a new review object
$review = new Review($db);

// Create a new review
$result = $review->createReview(1, 'This is a great product!', 5);
if ($result) {
  echo 'Review created successfully!';
} else {
  echo 'Error creating review.';
}

// Get all reviews
$reviews = $review->getAllReviews();
foreach ($reviews as $review) {
  echo $review['id'] . ': ' . $review['review'];
}

// Update a review
$result = $review->updateReview(1, 'This is an amazing product!', 5);
if ($result) {
  echo 'Review updated successfully!';
} else {
  echo 'Error updating review.';
}

// Delete a review
$result = $review->deleteReview(1);
if ($result) {
  echo 'Review deleted successfully!';
} else {
  echo 'Error deleting review.';
}


<?php

// database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// connect to the database
$mysqli = new mysqli($db_host, $db_username, $db_password, $db_name);

function getReviews() {
    global $mysqli;
    
    // query for all reviews
    $query = "SELECT * FROM reviews";
    $result = $mysqli->query($query);
    
    if ($result) {
        $reviews = array();
        
        while ($row = $result->fetch_assoc()) {
            $reviews[] = array(
                'id' => $row['id'],
                'product_id' => $row['product_id'],
                'username' => $row['username'],
                'rating' => $row['rating'],
                'review' => $row['review']
            );
        }
        
        return $reviews;
    } else {
        return array();
    }
}

function createReview($data) {
    global $mysqli;
    
    // validate user input
    if (!isset($data['product_id']) || !isset($data['username']) || !isset($data['rating']) || !isset($data['review'])) {
        return false;
    }
    
    // insert new review into database
    $query = "INSERT INTO reviews (product_id, username, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param('sssi', $data['product_id'], $data['username'], $data['rating'], $data['review']);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function updateReview($id, $data) {
    global $mysqli;
    
    // validate user input
    if (!isset($data['product_id']) || !isset($data['username']) || !isset($data['rating']) || !isset($data['review'])) {
        return false;
    }
    
    // update review in database
    $query = "UPDATE reviews SET product_id = ?, username = ?, rating = ?, review = ? WHERE id = ?";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param('sssi', $data['product_id'], $data['username'], $data['rating'], $data['review'], $id);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function deleteReview($id) {
    global $mysqli;
    
    // query for review by id
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param('i', $id);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// example usage:

$data = array(
    'product_id' => 1,
    'username' => 'John Doe',
    'rating' => 5,
    'review' => 'This product is great!'
);

createReview($data);
$reviews = getReviews();
print_r($reviews);

?>


// database connection settings
$host = 'localhost';
$username = 'root';
$password = '';
$dbname = 'reviews';

// connect to the database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function insertReview($user_id, $product_id, $rating, $review)
{
  global $conn;
  
  // prepare and execute the query
  $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
  $stmt->bind_param("iis", $user_id, $product_id, $rating, $review);
  $stmt->execute();
  
  // return the ID of the newly inserted review
  return $conn->insert_id;
}

function getReviews($product_id = null)
{
  global $conn;
  
  if ($product_id !== null) {
    // retrieve reviews for a specific product
    $result = $conn->query("SELECT r.id, u.name, p.name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id WHERE p.id = " . $product_id);
  } else {
    // retrieve all reviews
    $result = $conn->query("SELECT * FROM reviews");
  }
  
  return $result->fetch_all(MYSQLI_ASSOC);
}

function updateReview($id, $rating = null, $review = null)
{
  global $conn;
  
  if ($rating !== null || $review !== null) {
    // prepare and execute the query
    $query = "UPDATE reviews SET ";
    if ($rating !== null) {
      $query .= "rating = ?, ";
    }
    if ($review !== null) {
      $query .= "review = ?";
    }
    $query .= " WHERE id = " . $id;
    
    // prepare and execute the query
    $stmt = $conn->prepare($query);
    $args = array();
    $i = 0;
    foreach (explode(', ', $query) as $field) {
      if ($field == 'rating' || $field == 'review') {
        $args[$i] = $_GET[$field];
        $i++;
      }
    }
    
    // bind parameters
    for ($j = 0; $j < count($args); $j++) {
      $stmt->bind_param('i', $args[$j]);
    }
    $stmt->execute();
  }
}

function deleteReview($id)
{
  global $conn;
  
  // prepare and execute the query
  $stmt = $conn->prepare("DELETE FROM reviews WHERE id = ?");
  $stmt->bind_param("i", $id);
  $stmt->execute();
}


// insert a new review
$review_id = insertReview(1, 1, 5, 'This product is amazing!');

// retrieve all reviews
$reviews = getReviews();

// update an existing review
updateReview($review_id, null, 'I loved this product so much that I bought it twice!');

// delete a review
deleteReview($review_id);


<?php

class Review {
    private $id;
    private $rating;
    private $comment;
    private $product_id;

    public function __construct($id, $rating, $comment, $product_id) {
        $this->id = $id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->product_id = $product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public static function getAllReviews($db) {
        // Retrieve all reviews from the database
        $reviews = array();
        $query = "SELECT * FROM reviews";
        $result = mysqli_query($db, $query);
        while ($row = mysqli_fetch_assoc($result)) {
            $review = new Review($row['id'], $row['rating'], $row['comment'], $row['product_id']);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public static function addReview($db, $product_id, $rating, $comment) {
        // Insert a new review into the database
        $query = "INSERT INTO reviews (product_id, rating, comment) VALUES ('$product_id', '$rating', '$comment')";
        mysqli_query($db, $query);
    }
}

function displayReviews($reviews) {
    foreach ($reviews as $review) {
        echo "<p>Rating: $review->getRating() / 5</p>";
        echo "<p>$review->getComment()</p>";
    }
}


// Establish a connection to the database
$db = mysqli_connect("localhost", "username", "password", "database");

// Retrieve all reviews for a specific product
$reviews = Review::getAllReviews($db);
displayReviews($reviews);

// Add a new review for a specific product
Review::addReview($db, 123, 5, "Great product!");

?>


// Database connection settings
$host = 'your_host';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

// Create a database connection
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

function getUserReviews($userId) {
    global $conn;
    
    try {
        // Prepare the query to get reviews for a specific user
        $stmt = $conn->prepare("SELECT r.*, p.name as product_name FROM reviews r JOIN products p ON r.product_id = p.id WHERE r.user_id = :user_id");
        
        // Bind the parameters
        $stmt->bindParam(':user_id', $userId);
        
        // Execute the query and fetch results
        $stmt->execute();
        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        return $reviews;
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return array();
    }
}

function getProductReviews($productId) {
    global $conn;
    
    try {
        // Prepare the query to get reviews for a specific product
        $stmt = $conn->prepare("SELECT r.*, u.name as user_name FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = :product_id");
        
        // Bind the parameters
        $stmt->bindParam(':product_id', $productId);
        
        // Execute the query and fetch results
        $stmt->execute();
        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        return $reviews;
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return array();
    }
}

function addReview($userId, $productId, $rating, $reviewText) {
    global $conn;
    
    try {
        // Prepare the query to insert a new review
        $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
        
        // Bind the parameters
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $reviewText);
        
        // Execute the query
        $stmt->execute();
        
        return true;
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false;
    }
}

// Example usage:

// Get reviews for a specific user
$userId = 1;
$reviews = getUserReviews($userId);
print_r($reviews);

// Get reviews for a specific product
$productId = 1;
$reviews = getProductReviews($productId);
print_r($reviews);

// Add a new review
$userId = 1;
$productId = 1;
$rating = 5;
$reviewText = "This is an awesome product!";
$isAdded = addReview($userId, $productId, $rating, $reviewText);
echo $isAdded ? 'Review added successfully!' : 'Error adding review.';


<?php

class Review {
    private $id;
    private $username;
    private $reviewText;
    private $rating;

    public function __construct($id, $username, $reviewText, $rating) {
        $this->id = $id;
        $this->username = $username;
        $this->reviewText = $reviewText;
        $this->rating = $rating;
    }

    // Getters and setters
    public function getId() {
        return $this->id;
    }

    public function setId($id) {
        $this->id = $id;
    }

    public function getUsername() {
        return $this->username;
    }

    public function setUsername($username) {
        $this->username = $username;
    }

    public function getReviewText() {
        return $this->reviewText;
    }

    public function setReviewText($reviewText) {
        $this->reviewText = $reviewText;
    }

    public function getRating() {
        return $this->rating;
    }

    public function setRating($rating) {
        if ($rating >= 1 && $rating <= 5) {
            $this->rating = $rating;
        } else {
            throw new Exception("Invalid rating. Rating must be between 1 and 5.");
        }
    }
}

class ReviewManager {
    private $reviews;

    public function __construct() {
        $this->reviews = array();
    }

    // Add a review
    public function addReview(Review $review) {
        if ($review->getRating() >= 1 && $review->getRating() <= 5) {
            $this->reviews[] = $review;
        } else {
            throw new Exception("Invalid rating. Rating must be between 1 and 5.");
        }
    }

    // Get all reviews
    public function getAllReviews() {
        return $this->reviews;
    }

    // Average rating of all reviews
    public function getAverageRating() {
        if (count($this->reviews) == 0) {
            throw new Exception("No reviews available.");
        }
        $sum = 0;
        foreach ($this->reviews as $review) {
            $sum += $review->getRating();
        }
        return $sum / count($this->reviews);
    }

    // Average rating for a specific product
    public function getAverageRatingForProduct($productId) {
        if (count($this->reviews) == 0) {
            throw new Exception("No reviews available.");
        }
        $productReviews = array_filter($this->reviews, function ($review) use ($productId) {
            return $review->getId() == $productId;
        });
        if (empty($productReviews)) {
            throw new Exception("No reviews for this product.");
        }
        $sum = 0;
        foreach ($productReviews as $review) {
            $sum += $review->getRating();
        }
        return $sum / count($productReviews);
    }

    // Add user review
    public function addUserReview($username, $reviewText, $rating) {
        if (empty($this->reviews)) {
            throw new Exception("No reviews available.");
        }
        $newReview = new Review(count($this->reviews), $username, $reviewText, $rating);
        $this->addReview($newReview);
    }

    // Get user review
    public function getUserReview($id) {
        if (empty($this->reviews)) {
            throw new Exception("No reviews available.");
        }
        foreach ($this->reviews as $review) {
            if ($review->getId() == $id) {
                return $review;
            }
        }
        return null;
    }

    // Remove user review
    public function removeUserReview($id) {
        if (empty($this->reviews)) {
            throw new Exception("No reviews available.");
        }
        foreach ($this->reviews as $key => $review) {
            if ($review->getId() == $id) {
                unset($this->reviews[$key]);
                return;
            }
        }
    }

    // Update user review
    public function updateUserReview($id, $newUsername, $newReviewText, $newRating) {
        if (empty($this->reviews)) {
            throw new Exception("No reviews available.");
        }
        foreach ($this->reviews as &$review) {
            if ($review->getId() == $id) {
                $review->setUsername($newUsername);
                $review->setReviewText($newReviewText);
                $review->setRating($newRating);
                return;
            }
        }
    }
}

// Example usage
$reviewManager = new ReviewManager();
$reviewManager->addUserReview("John Doe", "This product is great!", 5);
$reviewManager->addUserReview("Jane Doe", "I'm not a fan of this product.", 2);

print_r($reviewManager->getAllReviews());

echo $reviewManager->getAverageRating();

?>


<?php

// Database connection settings
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'database';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

class ReviewModel {

  private $conn;

  public function __construct() {
    $this->conn = $conn;
  }

  // Function to add a new review
  public function addReview($product_id, $user_id, $review, $rating) {
    $stmt = $this->conn->prepare("INSERT INTO reviews (product_id, user_id, review, rating) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("iiii", $product_id, $user_id, $review, $rating);
    if ($stmt->execute()) {
      return true;
    } else {
      return false;
    }
  }

  // Function to get all reviews for a product
  public function getReviews($product_id) {
    $stmt = $this->conn->prepare("SELECT * FROM reviews WHERE product_id = ?");
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  }

  // Function to add a new comment
  public function addComment($review_id, $user_id, $comment) {
    $stmt = $this->conn->prepare("INSERT INTO comments (review_id, user_id, comment) VALUES (?, ?, ?)");
    $stmt->bind_param("iii", $review_id, $user_id, $comment);
    if ($stmt->execute()) {
      return true;
    } else {
      return false;
    }
  }

  // Function to get all comments for a review
  public function getComments($review_id) {
    $stmt = $this->conn->prepare("SELECT * FROM comments WHERE review_id = ?");
    $stmt->bind_param("i", $review_id);
    $stmt->execute();
    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  }

}

// Example usage:
$reviewModel = new ReviewModel();

// Add a new review
$product_id = 1;
$user_id = 1;
$review = "This product is amazing!";
$rating = 5;
if ($reviewModel->addReview($product_id, $user_id, $review, $rating)) {
  echo "Review added successfully!";
} else {
  echo "Error adding review.";
}

// Get all reviews for a product
$product_id = 1;
$reviews = $reviewModel->getReviews($product_id);
echo "<pre>";
print_r($reviews);
echo "</pre>";

?>


// database connection settings
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'reviews';

// connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


require_once 'database.php';

class Review {
    private $id;
    private $product_id;
    private $rating;
    private $title;
    private $content;

    public function __construct($id = null, $product_id = null, $rating = null, $title = null, $content = null) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->title = $title;
        $this->content = $content;
    }

    public function save() {
        global $conn;

        // insert review into database
        $sql = "INSERT INTO reviews (product_id, rating, title, content) VALUES (?, ?, ?, ?)";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("iiss", $this->product_id, $this->rating, $this->title, $this->content);
        $stmt->execute();

        // get the new review's ID
        $this->id = $conn->insert_id;
    }

    public function update() {
        global $conn;

        // update review in database
        $sql = "UPDATE reviews SET rating = ?, title = ?, content = ? WHERE id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("isss", $this->rating, $this->title, $this->content, $this->id);
        $stmt->execute();
    }

    public function delete() {
        global $conn;

        // delete review from database
        $sql = "DELETE FROM reviews WHERE id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("i", $this->id);
        $stmt->execute();
    }
}


require_once 'review.php';

class ReviewController {
    public function index() {
        global $conn;

        // get all reviews from database
        $sql = "SELECT * FROM reviews";
        $result = $conn->query($sql);

        // display reviews
        foreach ($result as $row) {
            echo '<h2>Review ' . $row['id'] . '</h2>';
            echo '<p>Product ID: ' . $row['product_id'] . '</p>';
            echo '<p>Rating: ' . $row['rating'] . '</p>';
            echo '<p>Title: ' . $row['title'] . '</p>';
            echo '<p>Content: ' . $row['content'] . '</p>';
        }
    }

    public function create() {
        // display review form
        echo '<h2>Create Review</h2>';
        echo '<form action="" method="post">';
        echo '<label for="product_id">Product ID:</label>';
        echo '<input type="text" id="product_id" name="product_id"><br><br>';
        echo '<label for="rating">Rating:</label>';
        echo '<select id="rating" name="rating">';
        for ($i = 1; $i <= 5; $i++) {
            echo '<option value="' . $i . '">' . $i . '</option>';
        }
        echo '</select><br><br>';
        echo '<label for="title">Title:</label>';
        echo '<input type="text" id="title" name="title"><br><br>';
        echo '<label for="content">Content:</label>';
        echo '<textarea id="content" name="content"></textarea><br><br>';
        echo '<button type="submit">Submit</button>';
        echo '</form>';

        // save review to database
        if (isset($_POST['product_id']) && isset($_POST['rating']) && isset($_POST['title']) && isset($_POST['content'])) {
            $review = new Review();
            $review->product_id = $_POST['product_id'];
            $review->rating = $_POST['rating'];
            $review->title = $_POST['title'];
            $review->content = $_POST['content'];
            $review->save();

            // display success message
            echo '<p>Review created successfully!</p>';
        }
    }

    public function edit($id) {
        global $conn;

        // get review from database
        $sql = "SELECT * FROM reviews WHERE id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("i", $id);
        $stmt->execute();
        $row = $stmt->get_result()->fetch_assoc();

        // display review form with current values
        echo '<h2>Edit Review ' . $id . '</h2>';
        echo '<form action="" method="post">';
        echo '<label for="product_id">Product ID:</label>';
        echo '<input type="text" id="product_id" name="product_id" value="' . $row['product_id'] . '"><br><br>';
        echo '<label for="rating">Rating:</label>';
        echo '<select id="rating" name="rating">';
        for ($i = 1; $i <= 5; $i++) {
            echo '<option value="' . $i . '"';
            if ($row['rating'] == $i) {
                echo ' selected';
            }
            echo '>' . $i . '</option>';
        }
        echo '</select><br><br>';
        echo '<label for="title">Title:</label>';
        echo '<input type="text" id="title" name="title" value="' . $row['title'] . '"><br><br>';
        echo '<label for="content">Content:</label>';
        echo '<textarea id="content" name="content">' . $row['content'] . '</textarea><br><br>';
        echo '<button type="submit">Submit</button>';
        echo '</form>';

        // update review in database
        if (isset($_POST['product_id']) && isset($_POST['rating']) && isset($_POST['title']) && isset($_POST['content'])) {
            $review = new Review($id);
            $review->product_id = $_POST['product_id'];
            $review->rating = $_POST['rating'];
            $review->title = $_POST['title'];
            $review->content = $_POST['content'];
            $review->update();

            // display success message
            echo '<p>Review updated successfully!</p>';
        }
    }

    public function delete($id) {
        global $conn;

        // delete review from database
        $sql = "DELETE FROM reviews WHERE id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("i", $id);
        $stmt->execute();

        // display success message
        echo '<p>Review deleted successfully!</p>';
    }
}


require_once 'review_controller.php';

$reviewController = new ReviewController();
$reviewController->index();


$reviewController = new ReviewController();
$reviewController->create(123); // Create a new review for product with ID 123

$reviewController = new ReviewController();
$reviewController->edit(456); // Edit the review with ID 456


<?php

// Connect to the database
function connect_to_db() {
  $servername = "localhost";
  $username = "root";
  $password = "";
  $dbname = "mydatabase";

  try {
    $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
    return $conn;
  } catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
  }
}

// Function to get user reviews
function get_user_reviews($user_id) {
  $db = connect_to_db();

  if ($db) {
    $stmt = $db->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll();
  } else {
    echo "Error connecting to database";
  }
}

// Function to add a new review
function add_review($product_id, $rating, $review) {
  $db = connect_to_db();

  if ($db) {
    $stmt = $db->prepare("INSERT INTO reviews (product_id, rating, review) VALUES (:product_id, :rating, :review)");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error adding review";
    }
  } else {
    echo "Error connecting to database";
  }
}

// Function to update a review
function update_review($review_id, $product_id, $rating, $review) {
  $db = connect_to_db();

  if ($db) {
    $stmt = $db->prepare("UPDATE reviews SET product_id = :product_id, rating = :rating, review = :review WHERE id = :review_id");
    $stmt->bindParam(':review_id', $review_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error updating review";
    }
  } else {
    echo "Error connecting to database";
  }
}

// Function to delete a review
function delete_review($review_id) {
  $db = connect_to_db();

  if ($db) {
    $stmt = $db->prepare("DELETE FROM reviews WHERE id = :review_id");
    $stmt->bindParam(':review_id', $review_id);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error deleting review";
    }
  } else {
    echo "Error connecting to database";
  }
}

?>


<?php

$user_id = 1; // Replace with actual user ID
$product_id = 1; // Replace with actual product ID
$rating = 4.5;
(review) = "Great product!";

// Get reviews for a specific user
$reviews = get_user_reviews($user_id);
print_r($reviews);

// Add a new review
if (add_review($product_id, $rating, $review)) {
  echo "Review added successfully!";
} else {
  echo "Error adding review";
}

// Update an existing review
$update_data = array(
  'product_id' => 2,
  'rating' => 4.8,
  'review' => "Excellent product!"
);
if (update_review(1, $update_data['product_id'], $update_data['rating'], $update_data['review'])) {
  echo "Review updated successfully!";
} else {
  echo "Error updating review";
}

// Delete a review
if (delete_review(2)) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review";
}
?>


<?php

// Database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Create database connection
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function add_review($product_id, $rating, $review_text, $username) {
    // Insert review into database
    $sql = "INSERT INTO reviews (product_id, rating, review_text, username) VALUES ('$product_id', '$rating', '$review_text', '$username')";
    if ($conn->query($sql) === TRUE) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review: " . $conn->error;
    }
}

function get_reviews($product_id) {
    // Retrieve reviews from database
    $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        // Output data of each row
        while($row = $result->fetch_assoc()) {
            echo "<p>" . $row["username"] . ": " . $row["rating"] . "/5 - " . $row["review_text"] . "</p>";
        }
    } else {
        echo "No reviews found for this product.";
    }
}

function update_review($review_id, $new_rating, $new_review_text) {
    // Update review in database
    $sql = "UPDATE reviews SET rating = '$new_rating', review_text = '$new_review_text' WHERE id = '$review_id'";
    if ($conn->query($sql) === TRUE) {
        echo "Review updated successfully!";
    } else {
        echo "Error updating review: " . $conn->error;
    }
}

function delete_review($review_id) {
    // Delete review from database
    $sql = "DELETE FROM reviews WHERE id = '$review_id'";
    if ($conn->query($sql) === TRUE) {
        echo "Review deleted successfully!";
    } else {
        echo "Error deleting review: " . $conn->error;
    }
}

?>


// Add a new review
add_review(1, 5, "Great product!", "JohnDoe");

// Get all reviews for a product
get_reviews(1);

// Update an existing review
update_review(1, 4, "Good product, but had some issues.");

// Delete a review
delete_review(2);


function add_review($product_id, $rating, $review_text, $username) {
    // Insert review into database using prepared statement
    $sql = "INSERT INTO reviews (product_id, rating, review_text, username) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiss", $product_id, $rating, $review_text, $username);
    if ($stmt->execute()) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review: " . $conn->error;
    }
}


function addReview($product_id, $review_text, $rating) {
  // Connect to database (assuming MySQL)
  $conn = new mysqli("localhost", "username", "password", "database");
  
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  
  // Prepare query
  $sql = "INSERT INTO reviews (product_id, review_text, rating)
          VALUES (?, ?, ?)";
  $stmt = $conn->prepare($sql);
  
  // Bind parameters
  $stmt->bind_param("iis", $product_id, $review_text, $rating);
  
  // Execute query
  if (!$stmt->execute()) {
    echo "Error adding review: " . $stmt->error;
  }
  
  // Close statement and connection
  $stmt->close();
  $conn->close();
}

function getReviews($product_id) {
  // Connect to database (assuming MySQL)
  $conn = new mysqli("localhost", "username", "password", "database");
  
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  
  // Prepare query
  $sql = "SELECT * FROM reviews WHERE product_id = ?";
  $stmt = $conn->prepare($sql);
  
  // Bind parameter
  $stmt->bind_param("i", $product_id);
  
  // Execute query
  if (!$stmt->execute()) {
    echo "Error getting reviews: " . $stmt->error;
  }
  
  // Get result
  $result = $stmt->get_result();
  
  // Close statement and connection
  $stmt->close();
  $conn->close();
  
  return $result;
}

function getUserReviews($user_id) {
  // Connect to database (assuming MySQL)
  $conn = new mysqli("localhost", "username", "password", "database");
  
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  
  // Prepare query
  $sql = "SELECT * FROM reviews WHERE user_id = ?";
  $stmt = $conn->prepare($sql);
  
  // Bind parameter
  $stmt->bind_param("i", $user_id);
  
  // Execute query
  if (!$stmt->execute()) {
    echo "Error getting user reviews: " . $stmt->error;
  }
  
  // Get result
  $result = $stmt->get_result();
  
  // Close statement and connection
  $stmt->close();
  $conn->close();
  
  return $result;
}


// Add a new review
addReview(1, "This product is great!", 5);

// Get all reviews for a specific product
$product_id = 1;
$reviews = getReviews($product_id);
foreach ($reviews as $review) {
  echo $review['review_text'];
}

// Get all reviews from a specific user
$user_id = 1;
$reviews = getUserReviews($user_id);
foreach ($reviews as $review) {
  echo $review['review_text'];
}


class Review {
    private $id;
    private $userId;
    private $productId;
    private $content;
    private $rating;

    public function __construct($id = null, $userId = null, $productId = null, $content = null, $rating = null) {
        $this->id = $id;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->content = $content;
        $this->rating = $rating;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getContent() {
        return $this->content;
    }

    public function getRating() {
        return $this->rating;
    }
}


class ReviewController {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview($userId, $productId, $content, $rating) {
        $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, content, rating) VALUES (?, ?, ?, ?)");
        $stmt->execute([$userId, $productId, $content, $rating]);
        return new Review($this->db->insertId());
    }

    public function getReviewsByUser($userId) {
        $reviews = [];
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = ?");
        $stmt->execute([$userId]);
        while ($row = $stmt->fetch()) {
            $review = new Review($row['id'], $row['user_id'], $row['product_id'], $row['content'], $row['rating']);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public function getReviewsByProduct($productId) {
        $reviews = [];
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
        $stmt->execute([$productId]);
        while ($row = $stmt->fetch()) {
            $review = new Review($row['id'], $row['user_id'], $row['product_id'], $row['content'], $row['rating']);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public function deleteReview($reviewId) {
        $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
        $stmt->execute([$reviewId]);
    }
}


$router->get('/users/{userId}/reviews', 'ReviewController:getReviewsByUser');
$router->get('/products/{productId}/reviews', 'ReviewController:getReviewsByProduct');
$router->post('/reviews', 'ReviewController:createReview');
$router->delete('/reviews/{reviewId}', 'ReviewController:deleteReview');


$db = new Database(); // assuming you have a Database class

$reviewController = new ReviewController($db);

// Create review
$userId = 1;
$productId = 1;
$content = 'Great product!';
$rating = 5;

$newReview = $reviewController->createReview($userId, $productId, $content, $rating);
echo "New review created: " . $newReview->getId() . "
";

// Get reviews by user
$userReviews = $reviewController->getReviewsByUser($userId);
foreach ($userReviews as $review) {
    echo "Review by user " . $review->getUserId() . ": " . $review->getContent() . "
";
}

// Get reviews by product
$productReviews = $reviewController->getReviewsByProduct($productId);
foreach ($productReviews as $review) {
    echo "Review on product " . $review->getProductId() . ": " . $review->getContent() . "
";
}

// Delete review
$reviewId = 1;
$reviewController->deleteReview($reviewId);
echo "Review deleted: " . $reviewId . "
";


// models/User.php

class User {
    private $id;
    private $name;

    public function __construct($id, $name) {
        $this->id = $id;
        $this->name = $name;
    }

    public function getId() {
        return $this->id;
    }

    public function getName() {
        return $this->name;
    }
}


// models/Product.php

class Product {
    private $id;
    private $name;

    public function __construct($id, $name) {
        $this->id = $id;
        $this->name = $name;
    }

    public function getId() {
        return $this->id;
    }

    public function getName() {
        return $this->name;
    }
}


// models/Review.php

class Review {
    private $id;
    private $rating;
    private $reviewText;
    private $user;
    private $product;

    public function __construct($id, $rating, $reviewText, User $user, Product $product) {
        $this->id = $id;
        $this->rating = $rating;
        $this->reviewText = $reviewText;
        $this->user = $user;
        $this->product = $product;
    }

    public function getId() {
        return $this->id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReviewText() {
        return $this->reviewText;
    }

    public function getUser() {
        return $this->user;
    }

    public function getProduct() {
        return $this->product;
    }
}


// db/Database.php

class Database {
    private static $conn;

    public static function connect() {
        self::$conn = new mysqli('localhost', 'username', 'password', 'database');
        if (self::$conn->connect_error) {
            die("Connection failed: " . self::$conn->connect_error);
        }
    }

    public static function query($sql) {
        return self::$conn->query($sql);
    }

    public static function close() {
        self::$conn->close();
    }
}


// controllers/ReviewController.php

class ReviewController {
    public function addReview(Review $review) {
        Database::connect();

        $sql = "INSERT INTO reviews (rating, review_text, user_id, product_id)
                VALUES (?, ?, ?, ?)";

        $stmt = Database::$conn->prepare($sql);
        $stmt->bind_param('ii', $review->getRating(), $review->getReviewText(), $review->getUser()->getId(), $review->getProduct()->getId());

        if ($stmt->execute()) {
            echo "Review added successfully";
        } else {
            echo "Failed to add review: " . $stmt->error;
        }

        Database::close();
    }
}


// ReviewController.php

$review = new Review(1, 5, 'Great product!', new User(1, 'John Doe'), new Product(1, 'Product A'));
$controller = new ReviewController();

$controller->addReview($review);


<?php

// Include database connection script
require 'db.php';

// Function to get user reviews for a specific product
function getUserReviews($productId, $userId = null) {
  global $conn;
  
  // Get all reviews for the specified product
  $query = "SELECT * FROM reviews WHERE product_id = :product_id";
  
  if ($userId !== null) {
    // Filter reviews by user ID
    $query .= " AND user_id = :user_id";
  }
  
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':user_id', $userId);
  
  try {
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo "Error retrieving reviews: " . $e->getMessage();
    return array();
  }
}

// Function to add a new review
function addReview($userId, $productId, $rating, $review) {
  global $conn;
  
  // Validate user input
  if (!ctype_digit($rating)) {
    throw new Exception("Invalid rating");
  }
  
  // Insert new review into database
  $query = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES (:user_id, :product_id, :rating, :review)";
  
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  
  try {
    $stmt->execute();
    return true;
  } catch (PDOException $e) {
    echo "Error adding review: " . $e->getMessage();
    return false;
  }
}

// Function to update an existing review
function updateReview($reviewId, $newRating, $newReview) {
  global $conn;
  
  // Validate user input
  if (!ctype_digit($newRating)) {
    throw new Exception("Invalid rating");
  }
  
  // Update existing review in database
  $query = "UPDATE reviews SET rating = :rating, review = :review WHERE id = :id";
  
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':rating', $newRating);
  $stmt->bindParam(':review', $newReview);
  $stmt->bindParam(':id', $reviewId);
  
  try {
    $stmt->execute();
    return true;
  } catch (PDOException $e) {
    echo "Error updating review: " . $e->getMessage();
    return false;
  }
}

// Function to delete a review
function deleteReview($reviewId) {
  global $conn;
  
  // Delete existing review from database
  $query = "DELETE FROM reviews WHERE id = :id";
  
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':id', $reviewId);
  
  try {
    $stmt->execute();
    return true;
  } catch (PDOException $e) {
    echo "Error deleting review: " . $e->getMessage();
    return false;
  }
}

?>


// Get all reviews for a specific product
$reviews = getUserReviews(1);
print_r($reviews);

// Add a new review
$result = addReview(1, 1, 5, "Great product!");
echo $result ? "Review added successfully!" : "Error adding review.";

// Update an existing review
$result = updateReview(1, 4, "Decent product.");
echo $result ? "Review updated successfully!" : "Error updating review.";

// Delete a review
$result = deleteReview(1);
echo $result ? "Review deleted successfully!" : "Error deleting review.";


function getReviews($productId = null, $rating = null, $limit = 10, $offset = 0) {
  global $db;

  if ($productId !== null && !$db->query("SELECT * FROM reviews WHERE product_id = '$productId'")->num_rows) {
    return array();
  }

  $query = "SELECT * FROM reviews";
  if ($rating !== null) {
    $query .= " WHERE rating = '$rating'";
  }
  if ($productId !== null) {
    $query .= " AND product_id = '$productId'";
  }

  $results = $db->query($query . " LIMIT $limit OFFSET $offset")->fetchAll();

  return $results;
}

function addReview($data) {
  global $db;

  try {
    $product_id = intval($data['product_id']);
    $user_name = trim($data['name']);
    $review = trim($data['review']);
    $rating = intval($data['rating']);

    if (empty($user_name)) {
      throw new Exception("Please enter your name.");
    }
    if (empty($review)) {
      throw new Exception("Please enter a review.");
    }
    if (!in_array($rating, array(1, 2, 3, 4, 5))) {
      throw new Exception("Rating must be between 1 and 5.");
    }

    $db->query("INSERT INTO reviews (product_id, user_name, review, rating) VALUES ('$product_id', '$user_name', '$review', '$rating')");
  } catch (Exception $e) {
    return array('error' => $e->getMessage());
  }
}


$data = array(
  'name' => $_POST['username'],
  'review' => $_POST['review'],
  'rating' => intval($_POST['rating']),
  'product_id' => intval($_POST['product_id'])
);

$results = addReview($data);
if (isset($results['error'])) {
  // error handling
}


$reviews = getReviews();
print_r($reviews);


// config/database.php
return [
    'connections' => [
        'mysql' => [
            'driver'   => 'mysql',
            'host'     => env('DB_HOST', 'localhost'),
            'database' => env('DB_DATABASE', 'reviews'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
        ],
    ],
];

// app/Models/User.php
namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;

class User extends Model
{
    protected $fillable = ['username', 'email'];

    public function reviews()
    {
        return $this->hasMany(Review::class);
    }
}

// app/Models/Review.php
namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Review extends Model
{
    protected $fillable = [
        'user_id',
        'title',
        'content',
        'rating',
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }
}

// app/Controllers/UserReviewController.php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\User;
use App\Models\Review;

class UserReviewController extends Controller
{
    public function index()
    {
        // Display a list of reviews for the current user.
        $reviews = Review::where('user_id', auth()->id())->get();
        return view('review.index', compact('reviews'));
    }

    public function create()
    {
        // Show the form to create a new review.
        return view('review.create');
    }

    public function store(Request $request)
    {
        // Handle the form submission and save the review.
        $validatedData = $request->validate([
            'title' => 'required',
            'content' => 'required',
            'rating' => 'required|numeric|between:1,5',
        ]);

        Review::create($validatedData);
        return redirect()->route('review.index')->withSuccess('Review created successfully!');
    }

    public function edit(Review $review)
    {
        // Display the form to update an existing review.
        return view('review.edit', compact('review'));
    }

    public function update(Request $request, Review $review)
    {
        // Update the review based on the submitted data.
        $validatedData = $request->validate([
            'title' => 'required',
            'content' => 'required',
            'rating' => 'required|numeric|between:1,5',
        ]);

        $review->update($validatedData);
        return redirect()->route('review.index')->withSuccess('Review updated successfully!');
    }

    public function destroy(Review $review)
    {
        // Delete the review.
        $review->delete();
        return redirect()->route('review.index')->withSuccess('Review deleted successfully!');
    }
}

// routes/web.php
Route::get('/reviews', [UserReviewController::class, 'index'])->name('review.index');
Route::get('/reviews/create', [UserReviewController::class, 'create'])->name('review.create');
Route::post('/reviews', [UserReviewController::class, 'store'])->name('review.store');
Route::get('/reviews/{review}/edit', [UserReviewController::class, 'edit'])->name('review.edit');
Route::patch('/reviews/{review}', [UserReviewController::class, 'update'])->name('review.update');
Route::delete('/reviews/{review}', [UserReviewController::class, 'destroy'])->name('review.destroy');


// resources/views/review/index.blade.php
@foreach ($reviews as $review)
    <div>
        {{ $review->title }} ({{ $review->rating }}/5 stars)
        <p>{{ $review->content }}</p>
        @if ($review->status === 'Approved')
            Approved by Admin
        @elseif ($review->status === 'Denied')
            Denied by Admin
        @endif
    </div>
@endforeach

// resources/views/review/create.blade.php
<form method="POST" action="{{ route('review.store') }}">
    @csrf
    <label for="title">Title:</label>
    <input type="text" id="title" name="title"><br><br>
    <label for="content">Content:</label>
    <textarea id="content" name="content"></textarea><br><br>
    <label for="rating">Rating (1-5):</label>
    <select id="rating" name="rating">
        @for ($i = 1; $i <= 5; $i++)
            <option value="{{ $i }}">{{ $i }}</option>
        @endfor
    </select><br><br>
    <button type="submit">Create Review</button>
</form>

// resources/views/review/edit.blade.php
<form method="PATCH" action="{{ route('review.update', $review) }}">
    @csrf
    <label for="title">Title:</label>
    <input type="text" id="title" name="title" value="{{ $review->title }}"><br><br>
    <label for="content">Content:</label>
    <textarea id="content" name="content">{{ $review->content }}</textarea><br><br>
    <label for="rating">Rating (1-5):</label>
    <select id="rating" name="rating">
        @for ($i = 1; $i <= 5; $i++)
            <option value="{{ $i }}" {{ $review->rating === $i ? 'selected' : '' }}">{{ $i }}</option>
        @endfor
    </select><br><br>
    <button type="submit">Update Review</button>
</form>


// db.php

class Database {
    private $host = 'localhost';
    private $db_name = 'reviews_db';
    private $username = 'root';
    private $password = '';

    public function connect() {
        try {
            $conn = new PDO('mysql:host=' . $this->host . ';dbname=' . $this->db_name, $this->username, $this->password);
            return $conn;
        } catch(PDOException $e) {
            echo 'Connection failed: ' . $e->getMessage();
        }
    }

    public function query($query) {
        $stmt = $this->connect()->prepare($query);
        $stmt->execute();
        return $stmt;
    }
}


// review.php

class Review {
    private $db;

    public function __construct() {
        $this->db = new Database();
    }

    // Get all reviews for a specific user
    public function getReviews($user_id) {
        $query = "SELECT * FROM reviews WHERE user_id = :user_id";
        $stmt = $this->db->query($query);
        $stmt->bindParam(':user_id', $user_id);
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    // Get a single review by id
    public function getReview($id) {
        $query = "SELECT * FROM reviews WHERE id = :id";
        $stmt = $this->db->query($query);
        $stmt->bindParam(':id', $id);
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }

    // Create a new review
    public function createReview($title, $content, $user_id) {
        $query = "INSERT INTO reviews (title, content, user_id) VALUES (:title, :content, :user_id)";
        $stmt = $this->db->query($query);
        $stmt->bindParam(':title', $title);
        $stmt->bindParam(':content', $content);
        $stmt->bindParam(':user_id', $user_id);
        return $stmt->execute();
    }

    // Update a review
    public function updateReview($id, $title, $content) {
        $query = "UPDATE reviews SET title = :title, content = :content WHERE id = :id";
        $stmt = $this->db->query($query);
        $stmt->bindParam(':id', $id);
        $stmt->bindParam(':title', $title);
        $stmt->bindParam(':content', $content);
        return $stmt->execute();
    }

    // Delete a review
    public function deleteReview($id) {
        $query = "DELETE FROM reviews WHERE id = :id";
        $stmt = $this->db->query($query);
        $stmt->bindParam(':id', $id);
        return $stmt->execute();
    }
}


// index.php

require_once 'review.php';

$review = new Review();

if (isset($_POST['submit'])) {
    $title = $_POST['title'];
    $content = $_POST['content'];
    $user_id = $_SESSION['user_id'];

    if ($review->createReview($title, $content, $user_id)) {
        echo 'Review created successfully!';
    } else {
        echo 'Error creating review.';
    }
}

// Display all reviews for the current user
$reviews = $review->getReviews($_SESSION['user_id']);
?>

<form action="" method="post">
    <label for="title">Title:</label>
    <input type="text" id="title" name="title"><br><br>
    <label for="content">Content:</label>
    <textarea id="content" name="content"></textarea><br><br>
    <input type="submit" value="Submit Review">
</form>

<h2>My Reviews:</h2>

<ul>
    <?php foreach ($reviews as $review): ?>
        <li>
            <h3><?= $review['title'] ?></h3>
            <?= $review['content'] ?><br><br>
            <a href="#">Edit Review</a> | <a href="#">Delete Review</a>
        </li>
    <?php endforeach; ?>
</ul>


// Include the necessary libraries
require_once 'vendor/autoload.php';
use Illuminate\Database\Capsule\Manager as Capsule;

// Connect to the database
$capsule = new Capsule();
$capsule->addConnection([
    'driver' => 'mysql',
    'host' => 'localhost',
    'database' => 'reviews',
    'username' => 'root',
    'password' => '',
]);
$capsule->setAsGlobal();

// Get the current user's reviews
function getUserReviews($userId) {
  return Capsule::table('reviews')
              ->where('user_id', $userId)
              ->orderBy('created_at', 'desc')
              ->get();
}

// Create a new review
function createReview($data) {
  $review = new stdClass;
  $review->rating = $data['rating'];
  $review->review = $data['review'];
  $review->user_id = $data['user_id'];
  $review->product_id = $data['product_id'];
  
  Capsule::table('reviews')->insert($review);
}

// Get a product's reviews
function getProductReviews($productId) {
  return Capsule::table('reviews')
              ->where('product_id', $productId)
              ->orderBy('created_at', 'desc')
              ->get();
}


// Get the current user's reviews
$userId = 1;
$reviews = getUserReviews($userId);
foreach ($reviews as $review) {
  echo "Rating: {$review->rating}, Review: {$review->review}";
}

// Create a new review
$data = [
  'rating' => 5,
  'review' => 'This product is amazing!',
  'user_id' => 1,
  'product_id' => 2
];
createReview($data);

// Get a product's reviews
$productId = 2;
$reviews = getProductReviews($productId);
foreach ($reviews as $review) {
  echo "Rating: {$review->rating}, Review: {$review->review}";
}


// Connect to database
$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

// Function to add a review
function addReview($product_id, $user_id, $rating, $title, $comment) {
  try {
    $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, rating, title, comment) VALUES (:product_id, :user_id, :rating, :title, :comment)");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':comment', $comment);
    $stmt->execute();
  } catch (PDOException $e) {
    echo "Error adding review: " . $e->getMessage();
    return false;
  }
  return true;
}

// Function to get all reviews for a product
function getReviews($product_id) {
  try {
    $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo "Error getting reviews: " . $e->getMessage();
    return array();
  }
}

// Function to get a user's reviews
function getUserReviews($user_id) {
  try {
    $stmt = $db->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo "Error getting user's reviews: " . $e->getMessage();
    return array();
  }
}

// Function to update a review
function updateReview($review_id, $new_rating, $new_title, $new_comment) {
  try {
    $stmt = $db->prepare("UPDATE reviews SET rating = :new_rating, title = :new_title, comment = :new_comment WHERE id = :review_id");
    $stmt->bindParam(':review_id', $review_id);
    $stmt->bindParam(':new_rating', $new_rating);
    $stmt->bindParam(':new_title', $new_title);
    $stmt->bindParam(':new_comment', $new_comment);
    $stmt->execute();
  } catch (PDOException $e) {
    echo "Error updating review: " . $e->getMessage();
    return false;
  }
  return true;
}

// Function to delete a review
function deleteReview($review_id) {
  try {
    $stmt = $db->prepare("DELETE FROM reviews WHERE id = :review_id");
    $stmt->bindParam(':review_id', $review_id);
    $stmt->execute();
  } catch (PDOException $e) {
    echo "Error deleting review: " . $e->getMessage();
    return false;
  }
  return true;
}


// Add a new review
addReview(1, 1, 5.0, 'Great product!', 'I love this product!');

// Get all reviews for a product
$reviews = getReviews(1);
print_r($reviews);

// Get a user's reviews
$reviews = getUserReviews(1);
print_r($reviews);

// Update a review
updateReview(1, 4.0, 'Good product!', 'I like this product!');

// Delete a review
deleteReview(1);


// review.php

class Review {
  private $db;

  function __construct($db) {
    $this->db = $db;
  }

  // Create a new review
  public function create($user_id, $product_id, $rating, $content) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, content) VALUES (:user_id, :product_id, :rating, :content)";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute([
        ':user_id' => $user_id,
        ':product_id' => $product_id,
        ':rating' => $rating,
        ':content' => $content
      ]);
      return true;
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  // Read reviews for a specific product or user
  public function read($product_id = null, $user_id = null) {
    if ($product_id !== null && $user_id === null) {
      $query = "SELECT * FROM reviews WHERE product_id = :product_id";
      try {
        $stmt = $this->db->prepare($query);
        $stmt->execute([':product_id' => $product_id]);
        return $stmt->fetchAll();
      } catch (PDOException $e) {
        echo "Error reading reviews for product: " . $e->getMessage();
        return [];
      }
    } elseif ($product_id === null && $user_id !== null) {
      $query = "SELECT * FROM reviews WHERE user_id = :user_id";
      try {
        $stmt = $this->db->prepare($query);
        $stmt->execute([':user_id' => $user_id]);
        return $stmt->fetchAll();
      } catch (PDOException $e) {
        echo "Error reading reviews for user: " . $e->getMessage();
        return [];
      }
    } else {
      echo "Invalid parameters";
      return [];
    }
  }

  // Update an existing review
  public function update($id, $rating = null, $content = null) {
    if ($rating !== null || $content !== null) {
      $query = "UPDATE reviews SET rating = :rating, content = :content WHERE id = :id";
      try {
        $stmt = $this->db->prepare($query);
        $stmt->execute([
          ':rating' => $rating,
          ':content' => $content,
          ':id' => $id
        ]);
        return true;
      } catch (PDOException $e) {
        echo "Error updating review: " . $e->getMessage();
        return false;
      }
    } else {
      echo "Invalid parameters";
      return false;
    }
  }

  // Delete a review
  public function delete($id) {
    $query = "DELETE FROM reviews WHERE id = :id";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute([':id' => $id]);
      return true;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


// Create a database connection object
$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myusername', 'mypassword');

// Create a Review instance with the database connection
$review = new Review($db);

// Create a new review for user 1 and product 1
$user_id = 1;
$product_id = 1;
$rating = 5;
$content = "Great product!";
$review->create($user_id, $product_id, $rating, $content);
echo "Review created successfully";

// Read reviews for product 1
$product_reviews = $review->read($product_id);
foreach ($product_reviews as $review) {
    echo "Rating: $review[rating], Content: $review[content]";
}

// Update an existing review
$review_id = 1;
$rating = 4;
$content = "Good product!";
$updated = $review->update($review_id, $rating, $content);
echo "Review updated successfully";

// Delete a review
$deleted = $review->delete($review_id);
echo "Review deleted successfully";


// Connect to the database
$mysqli = new mysqli("localhost", "username", "password", "database");

// Function to get all reviews for a product
function getReviews($productId, $userId = null) {
  global $mysqli;
  if ($userId !== null) {
    // Get user's own reviews
    $query = "SELECT * FROM reviews WHERE product_id = ? AND user_id = ?";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param("ii", $productId, $userId);
    $stmt->execute();
  } else {
    // Get all reviews for the product
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param("i", $productId);
    $stmt->execute();
  }
  return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
}

// Function to create a new review
function createReview($product_id, $user_id, $rating, $comment) {
  global $mysqli;
  $query = "INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (?, ?, ?, ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("iiss", $product_id, $user_id, $rating, $comment);
  return $stmt->execute();
}

// Function to update a product's average rating
function updateProductRating($productId) {
  global $mysqli;
  $query = "UPDATE products SET avg_rating = (SELECT AVG(rating) FROM reviews WHERE product_id = ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("i", $productId);
  return $stmt->execute();
}

// Example usage
$userId = 1; // user ID
$productID = 1; // product ID

// Get all reviews for the product
$reviews = getReviews($productID, $userId);
print_r($reviews);

// Create a new review
createReview($productID, $userId, 4, "Good product!");

// Update the product's average rating
updateProductRating($productID);


class Review {
    private $id;
    private $user_id;
    private $product_name;
    private $rating;
    private $comment;

    public function __construct($id, $user_id, $product_name, $rating, $comment) {
        $this->id = $id;
        $this->user_id = $user_id;
        $this->product_name = $product_name;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->user_id;
    }

    public function getProductName() {
        return $this->product_name;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


class User {
    private $id;
    private $name;

    public function __construct($id, $name) {
        $this->id = $id;
        $this->name = $name;
    }

    public function getId() {
        return $this->id;
    }

    public function getName() {
        return $this->name;
    }
}


class ReviewController {
    private $reviews;

    public function __construct() {
        $this->reviews = array();
    }

    public function addReview(Review $review) {
        $this->reviews[] = $review;
    }

    public function getReviews() {
        return $this->reviews;
    }

    public function getUserReviews($user_id) {
        $user_reviews = array();
        foreach ($this->reviews as $review) {
            if ($review->getUserId() == $user_id) {
                $user_reviews[] = $review;
            }
        }
        return $user_reviews;
    }

    public function deleteReview($id) {
        $index = null;
        foreach ($this->reviews as $key => $review) {
            if ($review->getId() == $id) {
                $index = $key;
                break;
            }
        }
        if ($index !== null) {
            unset($this->reviews[$index]);
        }
    }

    public function updateReview(Review $new_review, $id) {
        foreach ($this->reviews as &$review) {
            if ($review->getId() == $id) {
                $review = $new_review;
                break;
            }
        }
    }
}


class UserController {
    private $users;

    public function __construct() {
        $this->users = array();
    }

    public function addUser(User $user) {
        $this->users[] = $user;
    }

    public function getUsers() {
        return $this->users;
    }

    public function getUser($id) {
        foreach ($this->users as $user) {
            if ($user->getId() == $id) {
                return $user;
            }
        }
        return null;
    }

    public function deleteUser($id) {
        $index = null;
        foreach ($this->users as $key => $user) {
            if ($user->getId() == $id) {
                $index = $key;
                break;
            }
        }
        if ($index !== null) {
            unset($this->users[$index]);
        }
    }

    public function updateUser(User $new_user, $id) {
        foreach ($this->users as &$user) {
            if ($user->getId() == $id) {
                $user = $new_user;
                break;
            }
        }
    }
}


require_once 'review.php';
require_once 'review_controller.php';

$reviewController = new ReviewController();

$userController = new UserController();

// Create a new user and add it to the system
$newUser = new User(1, "John Doe");
$userController->addUser($newUser);

// Create a new review and add it to the system
$newReview = new Review(1, 1, "Product X", 4, "Great product!");
$reviewController->addReview($newReview);

// Get all reviews for a user
$user_reviews = $reviewController->getUserReviews(1);
foreach ($user_reviews as $review) {
    echo $review->getProductName() . ": " . $review->getRating() . "/5 (" . $review->getComment() . ")" . "
";
}

// Update a review
$newReview = new Review(1, 1, "Product X", 5, "Amazing product!");
$reviewController->updateReview($newReview, 1);

// Get all reviews for a user (updated)
$user_reviews = $reviewController->getUserReviews(1);
foreach ($user_reviews as $review) {
    echo $review->getProductName() . ": " . $review->getRating() . "/5 (" . $review->getComment() . ")" . "
";
}


class Review {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
    }

    /**
     * Get all reviews for a product
     *
     * @param int $productId Product ID
     * @return array Reviews
     */
    public function getReviews($productId) {
        $query = "SELECT r.id, u.username, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = :productId ORDER BY r.created_at DESC";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':productId', $productId);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * Submit a new review
     *
     * @param int $userId User ID
     * @param int $productId Product ID
     * @param int $rating Rating (1-5)
     * @param string $review Review text
     */
    public function submitReview($userId, $productId, $rating, $review) {
        if ($rating < 1 || $rating > 5) {
            throw new Exception('Invalid rating');
        }
        $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:userId, :productId, :rating, :review)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        return $stmt->execute();
    }
}


require_once 'review.class.php';

$review = new Review();

if (isset($_POST['submit'])) {
    try {
        $review->submitReview($_POST['userId'], $_POST['productId'], $_POST['rating'], $_POST['review']);
        echo "Review submitted successfully!";
    } catch (Exception $e) {
        echo "Error submitting review: " . $e->getMessage();
    }
}

$reviews = $review->getReviews(1); // Replace 1 with the actual product ID

?>
<h2>Reviews</h2>
<ul>
<?php foreach ($reviews as $review): ?>
    <li>
        <strong><?= $review['username'] ?></strong> - <?= $review['rating'] ?>/5
        <p><?= nl2br($review['review']) ?></p>
    </li>
<?php endforeach; ?>
</ul>

<form action="" method="post">
    <label for="userId">User ID:</label>
    <input type="text" id="userId" name="userId"><br><br>
    <label for="productId">Product ID:</label>
    <input type="text" id="productId" name="productId"><br><br>
    <label for="rating">Rating:</label>
    <input type="number" id="rating" name="rating" min="1" max="5"><br><br>
    <label for="review">Review:</label>
    <textarea id="review" name="review"></textarea><br><br>
    <input type="submit" name="submit" value="Submit Review">
</form>


function connectToDatabase() {
    $host = 'localhost';
    $database = 'product_reviews';
    $username = 'your_username';
    $password = 'your_password';

    try {
        $dsn = "mysql:host=$host;dbname=$database";
        $pdo = new PDO($dsn, $username, $password);
        return $pdo;
    } catch (PDOException $e) {
        echo 'Connection failed: ' . $e->getMessage();
    }
}


function createUserReview($product_id, $user_id, $rating, $text) {
    $pdo = connectToDatabase();

    try {
        $stmt = $pdo->prepare('INSERT INTO reviews (product_id, user_id, rating, text) VALUES (:product_id, :user_id, :rating, :text)');
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':text', $text);
        $stmt->execute();

        return true;
    } catch (PDOException $e) {
        echo 'Error creating review: ' . $e->getMessage();
        return false;
    }
}


$product_id = 1; // ID of the product being reviewed
$user_id = 1; // ID of the user leaving the review
$rating = 4;
$text = 'Great product!';

if (createUserReview($product_id, $user_id, $rating, $text)) {
    echo 'Review created successfully!';
} else {
    echo 'Error creating review';
}


function add_review($data) {
  // Validate input data
  if (!isset($data['user_id']) || !isset($data['product_name']) || !isset($data['rating']) || !isset($data['review_text'])) {
    return array('error' => 'Invalid data');
  }

  try {
    // Insert review into database
    $query = "INSERT INTO reviews (user_id, product_name, rating, review_text) VALUES (:user_id, :product_name, :rating, :review_text)";
    $stmt = db()->prepare($query);
    $stmt->execute(array(
      ':user_id' => $data['user_id'],
      ':product_name' => $data['product_name'],
      ':rating' => $data['rating'],
      ':review_text' => $data['review_text']
    ));

    return array('message' => 'Review added successfully');
  } catch (PDOException $e) {
    return array('error' => 'Database error: ' . $e->getMessage());
  }
}

function get_reviews($product_name = null, $user_id = null, $limit = 10, $offset = 0) {
  try {
    // Prepare query
    $query = "SELECT * FROM reviews";
    if ($product_name) $query .= " WHERE product_name LIKE :product_name";
    if ($user_id) $query .= " AND user_id = :user_id";

    // Execute query with prepared statement
    $stmt = db()->prepare($query);
    if ($product_name) {
      $stmt->bindValue(':product_name', '%' . $product_name . '%');
    }
    if ($user_id) {
      $stmt->bindValue(':user_id', $user_id, PDO::PARAM_INT);
    }

    // Execute query and retrieve results
    $stmt->execute();
    return db()->fetch_all($stmt, PDO::FETCH_ASSOC);

  } catch (PDOException $e) {
    return array('error' => 'Database error: ' . $e->getMessage());
  }
}

function update_review($data) {
  // Validate input data
  if (!isset($data['id']) || !isset($data['product_name']) || !isset($data['rating']) || !isset($data['review_text'])) {
    return array('error' => 'Invalid data');
  }

  try {
    // Update review in database
    $query = "UPDATE reviews SET product_name = :product_name, rating = :rating, review_text = :review_text WHERE id = :id";
    $stmt = db()->prepare($query);
    $stmt->execute(array(
      ':id' => $data['id'],
      ':product_name' => $data['product_name'],
      ':rating' => $data['rating'],
      ':review_text' => $data['review_text']
    ));

    return array('message' => 'Review updated successfully');
  } catch (PDOException $e) {
    return array('error' => 'Database error: ' . $e->getMessage());
  }
}

function delete_review($id) {
  try {
    // Delete review from database
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = db()->prepare($query);
    $stmt->execute(array(':id' => $id));

    return array('message' => 'Review deleted successfully');
  } catch (PDOException $e) {
    return array('error' => 'Database error: ' . $e->getMessage());
  }
}


// Add review
$data = array(
  'user_id' => 1,
  'product_name' => 'Product X',
  'rating' => 5,
  'review_text' => 'This product is awesome!'
);
$result = add_review($data);

// Get reviews for a specific product
$product_name = 'Product Y';
$reviews = get_reviews($product_name, null, 10, 0);

// Update review
$data = array(
  'id' => 1,
  'product_name' => 'Product Z',
  'rating' => 4,
  'review_text' => 'This product is okay.'
);
$result = update_review($data);

// Delete review
$id = 2;
$result = delete_review($id);


<?php
// Configuration array
$config = [
    'reviews_table' => 'reviews',
    'product_table' => 'products'
];

// Function to get all reviews
function getReviews($conn) {
    $query = "SELECT * FROM `" . $config['reviews_table'] . "`";
    return $conn->query($query)->fetchAll();
}

// Function to submit a new review
function submitReview($conn, $productId, $rating, $comment) {
    $query = "
        INSERT INTO `" . $config['reviews_table'] . "` 
        (`product_id`, `rating`, `comment`) 
        VALUES (:product_id, :rating, :comment)
    ";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    return $stmt->execute();
}

// Function to get average rating for a product
function getAverageRating($conn, $productId) {
    $query = "
        SELECT AVG(`rating`) as `average_rating` 
        FROM `" . $config['reviews_table'] . "` 
        WHERE `product_id` = :product_id
    ";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':product_id', $productId);
    return $stmt->execute() ? $stmt->fetch()['average_rating'] : null;
}

// Database connection configuration
$dsn = 'mysql:host=localhost;dbname=reviews_database';
$user = 'your_username';
$password = 'your_password';

try {
    // Connect to the database
    $conn = new PDO($dsn, $user, $password);
} catch (PDOException $e) {
    echo "Error connecting to the database: " . $e->getMessage();
}

// Example usage:

// Get all reviews
$reviews = getReviews($conn);

// Submit a new review
if ($_POST['submit_review']) {
    submitReview(
        $conn, 
        $_POST['product_id'], 
        $_POST['rating'], 
        $_POST['comment']
    );
}

// Display average rating for each product
foreach ($config['products'] as $productId => $productName) {
    echo "Average Rating for $productName: " . getAverageRating($conn, $productId);
}
?>


<form action="" method="post">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id"><br><br>
    <label for="rating">Rating (1-5):</label>
    <input type="number" id="rating" name="rating" min="1" max="5"><br><br>
    <label for="comment">Comment:</label>
    <textarea id="comment" name="comment"></textarea><br><br>
    <input type="submit" name="submit_review" value="Submit Review">
</form>


// config.php: Database configuration
<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

$dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME;
$options = [
    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
];

try {
    $pdo = new PDO($dsn, DB_USER, DB_PASSWORD, $options);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}
?>

// review.php
<?php
require_once 'config.php';

if (isset($_POST['review'])) {
    // Handle submission of a new review
    $rating = $_POST['rating'];
    $user_name = $_POST['user_name'];
    $review = $_POST['review'];
    $product_id = (int) $_GET['id'];

    try {
        $stmt = $pdo->prepare('INSERT INTO reviews SET product_id = :product_id, user_name = :user_name, rating = :rating, review = :review');
        $stmt->execute([
            ':product_id' => $product_id,
            ':user_name' => $user_name,
            ':rating' => (float) $rating,
            ':review' => $review
        ]);

        echo 'Review submitted successfully!';
    } catch (PDOException $e) {
        echo 'Failed to submit review: ' . $e->getMessage();
    }
} else if (isset($_GET['id'])) {
    // Display reviews for a specific product
    $product_id = (int) $_GET['id'];

    try {
        $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
        $stmt->execute([':product_id' => $product_id]);

        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
        echo 'Reviews for "' . getProductName($product_id) . '":';
        foreach ($reviews as $review) {
            // Display average rating
            $avgRating = calculateAverageRating($product_id);
            echo '<h2>' . $review['user_name'] . '</h2>';
            echo '<p>Rating: <strong>' . $review['rating'] . '/5</strong></p>';
            echo '<p>Review: ' . $review['review'] . '</p>';
        }
    } catch (PDOException $e) {
        echo 'Failed to retrieve reviews: ' . $e->getMessage();
    }

    // Helper function to calculate average rating
    function calculateAverageRating($product_id)
    {
        try {
            $stmt = $pdo->prepare('SELECT AVG(rating) AS avg_rating FROM reviews WHERE product_id = :product_id');
            $stmt->execute([':product_id' => (int) $product_id]);

            return $stmt->fetchColumn();
        } catch (PDOException $e) {
            echo 'Failed to calculate average rating: ' . $e->getMessage();
        }
    }

    // Helper function to get product name
    function getProductName($id)
    {
        try {
            $stmt = $pdo->prepare('SELECT name FROM products WHERE id = :id');
            $stmt->execute([':id' => (int) $id]);

            return $stmt->fetchColumn();
        } catch (PDOException $e) {
            echo 'Failed to retrieve product name: ' . $e->getMessage();
        }
    }
}
?>

// review-form.php
<?php
require_once 'config.php';
?>

<form method="post" action="review.php">
    <label for="rating">Rating:</label>
    <input type="number" id="rating" name="rating" step="0.01" required>

    <br><br>

    <label for="user_name">Your Name:</label>
    <input type="text" id="user_name" name="user_name" required>

    <br><br>

    <textarea id="review" name="review" cols="30" rows="10" placeholder="Write your review here..."></textarea>

    <input type="hidden" name="product_id" value="<?php echo (int) $_GET['id']; ?>">

    <button type="submit" name="review">Submit Review</button>
</form>


// db_config.php - database connection settings
$db_host = 'localhost';
$db_user = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to the database
function connectDB() {
  global $db_host, $db_user, $db_password, $db_name;
  $conn = mysqli_connect($db_host, $db_user, $db_password);
  if (!$conn) {
    die('Could not connect: ' . mysqli_error($conn));
  }
  mysqli_select_db($conn,$db_name);
  return $conn;
}

// Add a new review to the database
function addReview($product_id, $reviewer_name, $review_text, $rating) {
  global $db_host, $db_user, $db_password, $db_name;
  $conn = connectDB();
  $query = "INSERT INTO reviews (product_id, reviewer_name, review_text, rating)
            VALUES ('$product_id', '$reviewer_name', '$review_text', '$rating')";
  if (!mysqli_query($conn,$query)) {
    die('Error inserting data: ' . mysqli_error($conn));
  }
  mysqli_close($conn);
}

// Retrieve reviews from the database
function getReviews() {
  global $db_host, $db_user, $db_password, $db_name;
  $conn = connectDB();
  $query = "SELECT * FROM reviews";
  $result = mysqli_query($conn,$query);
  if (!$result) {
    die('Error retrieving data: ' . mysqli_error($conn));
  }
  while ($row = mysqli_fetch_array($result)) {
    echo "Review ID: " . $row['id'] . "<br>";
    echo "Product ID: " . $row['product_id'] . "<br>";
    echo "Reviewer Name: " . $row['reviewer_name'] . "<br>";
    echo "Review Text: " . $row['review_text'] . "<br>";
    echo "Rating: " . $row['rating'] . "/5<br><hr>";
  }
  mysqli_close($conn);
}

// Example usage
product_id = 1;
$reviewer_name = 'John Doe';
$review_text = 'Great product!';
$rating = 5;

addReview(product_id, $reviewer_name, $review_text, $rating);

echo '<h2>Reviews</h2>';
getReviews();


// database connection settings
$host = 'localhost';
$dbname = 'reviews_database';
$username = 'reviews_user';
$password = 'password';

// connect to the database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

function create_review($user_id, $product_id, $rating, $review) {
  // insert review into the database
  $stmt = $conn->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)');
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  $stmt->execute();
}

function get_reviews($product_id) {
  // retrieve reviews for a specific product
  $stmt = $conn->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  return $stmt->fetchAll();
}

function get_user_reviews($user_id) {
  // retrieve reviews submitted by a specific user
  $stmt = $conn->prepare('SELECT * FROM reviews WHERE user_id = :user_id');
  $stmt->bindParam(':user_id', $user_id);
  $stmt->execute();
  return $stmt->fetchAll();
}


// create a new review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = 'This product is amazing!';
create_review($user_id, $product_id, $rating, $review);

// retrieve reviews for a specific product
$product_id = 1;
$reviews = get_reviews($product_id);
print_r($reviews);

// retrieve reviews submitted by a specific user
$user_id = 1;
$reviews = get_user_reviews($user_id);
print_r($reviews);


try {
  $stmt->execute();
} catch (PDOException $e) {
  echo 'Error: ' . $e->getMessage();
}


function add_review($product_id, $user_id, $review, $rating) {
  // Database connection
  require_once 'database.php';
  
  // Prepare query
  $query = "INSERT INTO reviews (product_id, user_id, review, rating)
            VALUES (:product_id, :user_id, :review, :rating)";
  
  // Execute query
  try {
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':rating', $rating);
    $stmt->execute();
    
    // Return the newly inserted review ID
    return $pdo->lastInsertId();
  } catch (PDOException $e) {
    echo "Error adding review: " . $e->getMessage();
    return false;
  }
}


function get_reviews($product_id, $limit = null, $offset = null) {
  // Database connection
  require_once 'database.php';
  
  // Prepare query
  $query = "SELECT r.id, r.review, r.rating, u.username 
            FROM reviews r
            INNER JOIN users u ON r.user_id = u.id
            WHERE product_id = :product_id";
  
  // Execute query with optional limit and offset
  if ($limit && $offset) {
    $query .= " LIMIT :limit OFFSET :offset";
    
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':limit', $limit);
    $stmt->bindParam(':offset', $offset);
    $stmt->bindParam(':product_id', $product_id);
  } else {
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
  }
  
  try {
    $stmt->execute();
    
    // Fetch results
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo "Error fetching reviews: " . $e->getMessage();
    return array();
  }
}


$product_id = 1;
$user_id = 2;
$review = 'Great product!';
$rating = 5;

$review_id = add_review($product_id, $user_id, $review, $rating);
if ($review_id) {
  echo "Review added successfully!";
} else {
  echo "Failed to add review.";
}


$product_id = 1;
$limit = 10;
$offset = 0;

$reviews = get_reviews($product_id, $limit, $offset);
if ($reviews) {
  foreach ($reviews as $review) {
    echo "Review ID: " . $review['id'] . "
";
    echo "Review Text: " . $review['review'] . "
";
    echo "Rating: " . $review['rating'] . "/5
";
    echo "Username: " . $review['username'] . "
";
  }
} else {
  echo "No reviews found.";
}


// Include the database connection file (assuming it's named 'db.php')
require_once 'db.php';

function addReview($userId, $productId, $reviewText, $rating) {
    // Prepare the query to insert a new review
    $stmt = $pdo->prepare('INSERT INTO reviews (user_id, product_id, review_text, rating)
                           VALUES (:user_id, :product_id, :review_text, :rating)');
    
    // Bind the parameters
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':review_text', $reviewText);
    $stmt->bindParam(':rating', $rating);
    
    // Execute the query
    if ($stmt->execute()) {
        return true; // Review added successfully
    } else {
        return false; // Error adding review
    }
}

function getReviews($productId) {
    // Prepare the query to retrieve reviews for a specific product
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    
    // Bind the parameter
    $stmt->bindParam(':product_id', $productId);
    
    // Execute the query and return the result set
    if ($stmt->execute()) {
        return $stmt->fetchAll(PDO::FETCH_ASSOC); // Return an array of review data
    } else {
        return false; // Error retrieving reviews
    }
}

function updateReview($reviewId, $newText, $newRating) {
    // Prepare the query to update a specific review
    $stmt = $pdo->prepare('UPDATE reviews SET review_text = :new_text, rating = :new_rating
                           WHERE id = :id');
    
    // Bind the parameters
    $stmt->bindParam(':new_text', $newText);
    $stmt->bindParam(':new_rating', $newRating);
    $stmt->bindParam(':id', $reviewId);
    
    // Execute the query and return true if successful, false otherwise
    return ($stmt->execute() ? true : false);
}

function deleteReview($reviewId) {
    // Prepare the query to delete a specific review
    $stmt = $pdo->prepare('DELETE FROM reviews WHERE id = :id');
    
    // Bind the parameter
    $stmt->bindParam(':id', $reviewId);
    
    // Execute the query and return true if successful, false otherwise
    return ($stmt->execute() ? true : false);
}


// Connect to the database (assuming you've defined a function in 'db.php')
$conn = connectToDatabase();

// Add a new review
$userId = 1;
$product_id = 5;
(review_text = "Great product!");
$rating = 4;

if (addReview($userId, $product_id, $reviewText, $rating)) {
    echo "Review added successfully!";
} else {
    echo "Error adding review.";
}

// Get reviews for a specific product
$productId = 5;
$reviews = getReviews($productId);

if ($reviews) {
    foreach ($reviews as $review) {
        echo "User ID: $review[user_id], Rating: $review[rating]
";
        echo "$review[review_text]
";
    }
} else {
    echo "Error retrieving reviews.";
}

// Update a review
$reviewId = 10;
$newText = "Updated review text!";
$newRating = 5;

if (updateReview($reviewId, $newText, $newRating)) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review.";
}

// Delete a review
$reviewId = 15;

if (deleteReview($reviewId)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}


class ReviewSystem {
  private $db;

  public function __construct() {
    // Connect to the database
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  /**
   * Get all reviews for a product
   *
   * @param int $productId ID of the product to get reviews for
   * @return array Reviews for the product
   */
  public function getProductReviews($productId) {
    $stmt = $this->db->prepare('SELECT r.* FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = :product_id');
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Get a single review by ID
   *
   * @param int $reviewId ID of the review to get
   * @return array Review data
   */
  public function getReview($reviewId) {
    $stmt = $this->db->prepare('SELECT r.* FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.id = :id');
    $stmt->bindParam(':id', $reviewId);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  /**
   * Create a new review
   *
   * @param array $data Review data to create (product_id, user_id, rating, review)
   * @return int ID of the newly created review
   */
  public function createReview($data) {
    $stmt = $this->db->prepare('INSERT INTO reviews SET product_id = :product_id, user_id = :user_id, rating = :rating, review = :review');
    $stmt->bindParam(':product_id', $data['product_id']);
    $stmt->bindParam(':user_id', $data['user_id']);
    $stmt->bindParam(':rating', $data['rating']);
    $stmt->bindParam(':review', $data['review']);
    if ($stmt->execute()) {
      return $this->db->lastInsertId();
    } else {
      throw new Exception('Failed to create review');
    }
  }

  /**
   * Update an existing review
   *
   * @param int $reviewId ID of the review to update
   * @param array $data Review data to update (product_id, user_id, rating, review)
   */
  public function updateReview($reviewId, $data) {
    $stmt = $this->db->prepare('UPDATE reviews SET product_id = :product_id, user_id = :user_id, rating = :rating, review = :review WHERE id = :id');
    $stmt->bindParam(':id', $reviewId);
    $stmt->bindParam(':product_id', $data['product_id']);
    $stmt->bindParam(':user_id', $data['user_id']);
    $stmt->bindParam(':rating', $data['rating']);
    $stmt->bindParam(':review', $data['review']);
    if ($stmt->execute()) {
      return true;
    } else {
      throw new Exception('Failed to update review');
    }
  }

  /**
   * Delete a review by ID
   *
   * @param int $reviewId ID of the review to delete
   */
  public function deleteReview($reviewId) {
    $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :id');
    $stmt->bindParam(':id', $reviewId);
    if ($stmt->execute()) {
      return true;
    } else {
      throw new Exception('Failed to delete review');
    }
  }
}


$reviewSystem = new ReviewSystem();

// Get all reviews for a product
$productReviews = $reviewSystem->getProductReviews(1);
echo '<h2>Reviews for Product 1</h2>';
foreach ($productReviews as $review) {
  echo '<p>Rating: ' . $review['rating'] . ', Review: ' . $review['review'] . '</p>';
}

// Get a single review by ID
$singleReview = $reviewSystem->getReview(1);
echo '<h2>Single Review</h2>';
echo '<p>Rating: ' . $singleReview['rating'] . ', Review: ' . $singleReview['review'] . '</p>';

// Create a new review
$newReviewData = array(
  'product_id' => 2,
  'user_id' => 1,
  'rating' => 5,
  'review' => 'This is a great product!'
);
$newReviewId = $reviewSystem->createReview($newReviewData);
echo '<h2>New Review Created!</h2>';
echo '<p>ID: ' . $newReviewId . '</p>';

// Update an existing review
$updatedReviewData = array(
  'product_id' => 1,
  'user_id' => 2,
  'rating' => 4,
  'review' => 'This product is okay'
);
$reviewSystem->updateReview(1, $updatedReviewData);

// Delete a review by ID
$reviewSystem->deleteReview(1);


<?php

// Database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to get user reviews
function getUserReviews() {
    global $conn;
    
    // SQL query to retrieve user reviews
    $query = "SELECT * FROM reviews WHERE review_type='user'";
    
    // Execute the query
    $result = $conn->query($query);
    
    // Check if there are any results
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            // Process each row of data
            echo "Review ID: " . $row["review_id"] . "<br>";
            echo "User Name: " . $row["user_name"] . "<br>";
            echo "Review Text: " . $row["review_text"] . "<br>";
            echo "<hr>";
        }
    } else {
        echo "No reviews found.";
    }
}

// Function to add a new user review
function addUserReview($data) {
    global $conn;
    
    // SQL query to insert new review into database
    $query = "INSERT INTO reviews (user_name, review_text, review_type) VALUES ('" . $data["username"] . "', '" . $data["reviewtext"] . "', 'user')";
    
    // Execute the query
    if ($conn->query($query) === TRUE) {
        echo "Review added successfully.";
    } else {
        echo "Error adding review: " . $conn->error;
    }
}

// Function to get average rating for a product or service
function getAverageRating($productID) {
    global $conn;
    
    // SQL query to retrieve average rating
    $query = "SELECT AVG(review_rating) AS avg_rating FROM reviews WHERE product_id=$productID";
    
    // Execute the query
    $result = $conn->query($query);
    
    // Check if there are any results
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            echo "Average Rating: " . $row["avg_rating"] . "/5";
        }
    } else {
        echo "No ratings found.";
    }
}

?>


getUserReviews();


$data = array("username" => "JohnDoe", "reviewtext" => "This product is amazing!");
addUserReview($data);


$productID = 123;
getAverageRating($productID);


<?php

// Configuration
$database = array(
    'host' => 'localhost',
    'username' => 'your_username',
    'password' => 'your_password',
    'database' => 'your_database'
);

// Function to connect to database
function connect_to_database() {
    $conn = new mysqli($GLOBALS['database']['host'], $GLOBALS['database']['username'], $GLOBALS['database']['password'], $GLOBALS['database']['database']);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add a review
function add_review($user_id, $product_id, $rating, $comment) {
    $conn = connect_to_database();
    $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("iiis", $user_id, $product_id, $rating, $comment);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Function to view reviews
function view_reviews($product_id = null) {
    $conn = connect_to_database();
    if ($product_id === null) {
        $stmt = $conn->prepare("SELECT * FROM reviews");
    } else {
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = ?");
        $stmt->bind_param("i", $product_id);
    }
    $stmt->execute();
    return $stmt->get_result();
}

// Function to edit a review
function edit_review($id, $rating, $comment) {
    $conn = connect_to_database();
    $stmt = $conn->prepare("UPDATE reviews SET rating = ?, comment = ? WHERE id = ?");
    $stmt->bind_param("iis", $rating, $comment, $id);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Function to delete a review
function delete_review($id) {
    $conn = connect_to_database();
    $stmt = $conn->prepare("DELETE FROM reviews WHERE id = ?");
    $stmt->bind_param("i", $id);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

?>


// Add a review for a product
$product_id = 1; // ID of the product to add review for
$user_id = 1; // ID of the user adding review
$rating = 5; // Rating out of 5 for the review
$comment = "This product is amazing!"; // Comment for the review
add_review($user_id, $product_id, $rating, $comment);

// View reviews for a specific product
$product_id = 1;
$reviews = view_reviews($product_id);
while ($review = $reviews->fetch_assoc()) {
    echo "User ID: " . $review['user_id'] . ", Rating: " . $review['rating'] . ", Comment: " . $review['comment'];
}

// Edit a review
$review_id = 1; // ID of the review to edit
$new_rating = 4; // New rating for the review
$new_comment = "This product is great!"; // New comment for the review
edit_review($review_id, $new_rating, $new_comment);

// Delete a review
$review_id = 1;
delete_review($review_id);


// models/Review.php

class Review {
    private $id;
    private $user_id;
    private $review;
    private $rating;

    public function __construct($id, $user_id, $review, $rating) {
        $this->id = $id;
        $this->user_id = $user_id;
        $this->review = $review;
        $this->rating = $rating;
    }

    // Getters and setters
    public function getId() { return $this->id; }
    public function getUserID() { return $this->user_id; }
    public function getReview() { return $this->review; }
    public function getRating() { return $this->rating; }

    public static function getAllReviews($db) {
        // Retrieve all reviews from database
        $query = "SELECT * FROM reviews";
        $results = mysqli_query($db, $query);
        $reviews = array();

        while ($review = mysqli_fetch_assoc($results)) {
            $reviews[] = new Review(
                $review['id'],
                $review['user_id'],
                $review['review'],
                $review['rating']
            );
        }

        return $reviews;
    }
}


// models/User.php

class User {
    private $id;
    private $username;

    public function __construct($id, $username) {
        $this->id = $id;
        $this->username = $username;
    }

    // Getters and setters
    public function getID() { return $this->id; }
    public function getUsername() { return $this->username; }

    public static function getUser($id, $db) {
        // Retrieve user data from database
        $query = "SELECT * FROM users WHERE id = '$id'";
        $result = mysqli_query($db, $query);

        if ($user = mysqli_fetch_assoc($result)) {
            return new User($user['id'], $user['username']);
        } else {
            return null;
        }
    }
}


// controllers/ReviewController.php

class ReviewController {
    public function index() {
        // Retrieve all reviews from database and display on page
        $reviews = Review::getAllReviews($db);

        foreach ($reviews as $review) {
            echo "Username: " . User::getUser($review->getUserID(), $db)->getUsername();
            echo " - Rating: " . $review->getRating() . "/5";
            echo " - Review: " . $review->getReview();
            echo "<br>";
        }
    }

    public function create() {
        // Create a new review and store it in database
        if (isset($_POST['submit'])) {
            $review = $_POST['review'];
            $rating = $_POST['rating'];

            $query = "INSERT INTO reviews SET user_id = '".$_SESSION['user_id']."', review = '$review', rating = '$rating'";
            mysqli_query($db, $query);

            header('Location: index.php');
        }
    }

    public function update() {
        // Update an existing review and store it in database
        if (isset($_POST['submit'])) {
            $id = $_GET['id'];
            $review = $_POST['review'];
            $rating = $_POST['rating'];

            $query = "UPDATE reviews SET user_id = '".$_SESSION['user_id']."', review = '$review', rating = '$rating' WHERE id = '$id'";
            mysqli_query($db, $query);

            header('Location: index.php');
        }
    }

    public function delete() {
        // Delete a review from database
        if (isset($_GET['id'])) {
            $id = $_GET['id'];

            $query = "DELETE FROM reviews WHERE id = '$id'";
            mysqli_query($db, $query);

            header('Location: index.php');
        }
    }
}


// views/review.html

<?php foreach ($reviews as $review) { ?>
  <p>Username: <?php echo User::getUser($review->getUserID(), $db)->getUsername(); ?></p>
  <p>Rating: <?php echo $review->getRating() ?>/5</p>
  <p><?php echo $review->getReview(); ?></p>
<?php } ?>


// routes.php

Route::get('/', 'ReviewController@index');
Route::post('/create', 'ReviewController:create');
Route::get('/update/{id}', 'ReviewController:update');
Route::post('/update/{id}', 'ReviewController:update');
Route::get('/delete/{id}', 'ReviewController:delete');


class Review {
    private $name;
    private $rating;
    private $review;

    public function __construct($name, $rating, $review) {
        $this->name = $name;
        $this->rating = $rating;
        $this->review = $review;
    }

    public function getName() {
        return $this->name;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}

class ReviewManager {
    private $reviews;

    public function __construct() {
        $this->reviews = array();
    }

    public function addReview(Review $review) {
        array_push($this->reviews, $review);
    }

    public function getReviews() {
        return $this->reviews;
    }
}

// Example usage
$manager = new ReviewManager();

// Submitting a review
$name = 'John Doe';
$rating = 5;
$reviewText = 'This product is amazing!';

$review = new Review($name, $rating, $reviewText);
$manager->addReview($review);

// Displaying all reviews
foreach ($manager->getReviews() as $i => $review) {
    echo "Review #{$i+1} by {$review->getName()} (Rating: {$review->getRating()}/5)
";
    echo "{$review->getReview()}

";
}


// Database connection settings
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

// Connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);


class Review {
    private $conn;

    public function __construct($conn) {
        $this->conn = $conn;
    }

    // Function to create a new review
    public function create_review($product_id, $user_id, $rating, $review) {
        try {
            // Prepare SQL query
            $stmt = $this->conn->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':user_id', $user_id);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':review', $review);

            // Execute query
            if ($stmt->execute()) {
                return true;
            } else {
                throw new Exception('Failed to create review');
            }
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
            return false;
        }
    }

    // Function to retrieve reviews for a product
    public function get_reviews($product_id, $limit = 10, $offset = 0) {
        try {
            // Prepare SQL query
            $stmt = $this->conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id ORDER BY id DESC LIMIT :limit OFFSET :offset");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':limit', $limit);
            $stmt->bindParam(':offset', $offset);

            // Execute query
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
            return false;
        }
    }

    // Function to update a review
    public function update_review($review_id, $rating = null, $review = null) {
        try {
            // Prepare SQL query
            if ($rating !== null && $review !== null) {
                $stmt = $this->conn->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
                $stmt->bindParam(':id', $review_id);
                $stmt->bindParam(':rating', $rating);
                $stmt->bindParam(':review', $review);
            } elseif ($rating !== null) {
                $stmt = $this->conn->prepare("UPDATE reviews SET rating = :rating WHERE id = :id");
                $stmt->bindParam(':id', $review_id);
                $stmt->bindParam(':rating', $rating);
            } elseif ($review !== null) {
                $stmt->prepare("UPDATE reviews SET review = :review WHERE id = :id");
                $stmt->bindParam(':id', $review_id);
                $stmt->bindParam(':review', $review);
            }

            // Execute query
            if ($stmt->execute()) {
                return true;
            } else {
                throw new Exception('Failed to update review');
            }
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
            return false;
        }
    }

    // Function to delete a review
    public function delete_review($review_id) {
        try {
            // Prepare SQL query
            $stmt = $this->conn->prepare("DELETE FROM reviews WHERE id = :id");
            $stmt->bindParam(':id', $review_id);

            // Execute query
            if ($stmt->execute()) {
                return true;
            } else {
                throw new Exception('Failed to delete review');
            }
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
            return false;
        }
    }
}


// Create a new review instance
$review = new Review($conn);

// Create a new review
$product_id = 1;
$user_id = 1;
$rating = 5;
$review_text = 'Great product!';
if ($review->create_review($product_id, $user_id, $rating, $review_text)) {
    echo 'Review created successfully';
} else {
    echo 'Failed to create review';
}

// Retrieve reviews for a product
$product_id = 1;
$limit = 10;
$offset = 0;
$reviews = $review->get_reviews($product_id, $limit, $offset);
foreach ($reviews as $review) {
    echo $review['rating'] . ': ' . $review['review'];
}

// Update a review
$review_id = 1;
$rating = 4;
$review_text = 'Good product!';
if ($review->update_review($review_id, $rating, $review_text)) {
    echo 'Review updated successfully';
} else {
    echo 'Failed to update review';
}

// Delete a review
$review_id = 1;
if ($review->delete_review($review_id)) {
    echo 'Review deleted successfully';
} else {
    echo 'Failed to delete review';
}


class User {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
    }

    public function createUser($username, $password) {
        $query = "INSERT INTO users (username, password) VALUES (:username, :password)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':password', password_hash($password, PASSWORD_DEFAULT));
        $stmt->execute();
    }

    public function login($username, $password) {
        $query = "SELECT * FROM users WHERE username = :username";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':username', $username);
        $stmt->execute();
        $user = $stmt->fetch();
        if ($user && password_verify($password, $user['password'])) {
            return true;
        }
        return false;
    }
}


class Product {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
    }

    public function createProduct($name, $description) {
        $query = "INSERT INTO products (name, description) VALUES (:name, :description)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':name', $name);
        $stmt->bindParam(':description', $description);
        $stmt->execute();
    }

    public function getProduct($id) {
        $query = "SELECT * FROM products WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':id', $id);
        $stmt->execute();
        return $stmt->fetch();
    }
}


class Review {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
    }

    public function createReview($product_id, $user_id, $rating, $review) {
        $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        $stmt->execute();
    }

    public function getReviewsForProduct($id) {
        $query = "SELECT * FROM reviews WHERE product_id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':id', $id);
        $stmt->execute();
        return $stmt->fetchAll();
    }
}


class ReviewController {
    private $review;

    public function __construct() {
        $this->review = new Review();
    }

    public function createReview($product_id, $user_id, $rating, $review) {
        $this->review->createReview($product_id, $user_id, $rating, $review);
        return "Review created successfully!";
    }

    public function getReviewsForProduct($id) {
        return $this->review->getReviewsForProduct($id);
    }
}


$router->get('/reviews/{id}', 'ReviewController@getReviewsForProduct');
$router->post('/reviews', 'ReviewController@createReview');


@extends('layout')

@section('content')
    <h1>Leave a review for {{ $product['name'] }}</h1>
    <form method="POST" action="/reviews">
        @csrf
        <input type="hidden" name="product_id" value="{{ $product['id'] }}">
        <label for="rating">Rating:</label>
        <select id="rating" name="rating">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
        </select>
        <label for="review">Review:</label>
        <textarea id="review" name="review"></textarea>
        <input type="submit" value="Submit review">
    </form>
@endsection


function getReviews() {
  // Load reviews from JSON file
  $reviews = json_decode(file_get_contents('reviews.json'), true);

  return $reviews;
}

function addReview($username, $rating, $review) {
  // Load reviews from JSON file
  $reviews = getReviews();

  // Add new review to array
  $reviews[] = [
    'username' => $username,
    'rating' => $rating,
    'review' => $review,
  ];

  // Save updated reviews back to JSON file
  file_put_contents('reviews.json', json_encode($reviews));

  return true;
}

function getReview($id) {
  // Load reviews from JSON file
  $reviews = getReviews();

  // Find review by ID and return it
  foreach ($reviews as $review) {
    if ($review['id'] == $id) {
      return $review;
    }
  }

  return null;
}

function deleteReview($id) {
  // Load reviews from JSON file
  $reviews = getReviews();

  // Find review by ID and remove it from array
  foreach ($reviews as $key => $review) {
    if ($review['id'] == $id) {
      unset($reviews[$key]);
    }
  }

  // Save updated reviews back to JSON file
  file_put_contents('reviews.json', json_encode($reviews));

  return true;
}


// Add a new review
$username = 'JohnDoe';
$rating = 5;
$review = 'Great product!';

addReview($username, $rating, $review);

// Get all reviews
$reviews = getReviews();
print_r($reviews);

// Get a specific review by ID
$id = 1;
$review = getReview($id);
var_dump($review);

// Delete a review by ID
deleteReview($id);


// db.php (database connection file)
<?php
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "reviews";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Close the connection
function close_connection() {
    global $conn;
    if (isset($conn)) {
        $conn->close();
    }
}


// review_functions.php
<?php

include 'db.php';

function create_review($user_id, $product_id, $rating, $review) {
    // Check if product and user exist in database
    $query = "SELECT * FROM products WHERE id = '$product_id'";
    $result = mysqli_query($conn, $query);
    if (mysqli_num_rows($result) < 1) {
        return false;
    }

    $query = "SELECT * FROM users WHERE id = '$user_id'";
    $result = mysqli_query($conn, $query);
    if (mysqli_num_rows($result) < 1) {
        return false;
    }

    // Insert review into database
    $query = "INSERT INTO reviews (user_id, product_id, rating, review)
              VALUES ('$user_id', '$product_id', '$rating', '$review')";
    $result = mysqli_query($conn, $query);

    if ($result) {
        return true;
    } else {
        return false;
    }
}

function get_reviews() {
    // Get all reviews from database
    $query = "SELECT * FROM reviews";
    $result = mysqli_query($conn, $query);
    $reviews = array();
    while ($row = mysqli_fetch_assoc($result)) {
        $reviews[] = $row;
    }

    return $reviews;
}

function update_review($id, $rating, $review) {
    // Update review in database
    $query = "UPDATE reviews SET rating = '$rating', review = '$review' WHERE id = '$id'";
    $result = mysqli_query($conn, $query);

    if ($result) {
        return true;
    } else {
        return false;
    }
}

function delete_review($id) {
    // Delete review from database
    $query = "DELETE FROM reviews WHERE id = '$id'";
    $result = mysqli_query($conn, $query);

    if ($result) {
        return true;
    } else {
        return false;
    }
}


// Create a new review
$user_id = 1; // ID of user creating the review
$product_id = 2; // ID of product being reviewed
$rating = 4; // Rating given by user (out of 5)
$review = 'This is an amazing product!';

create_review($user_id, $product_id, $rating, $review);

// Get all reviews
$reviews = get_reviews();
foreach ($reviews as $review) {
    echo "ID: " . $review['id'] . ", Rating: " . $review['rating'] . ", Review: " . $review['review'];
}

// Update a review
$id = 1; // ID of review to update
$rating = 5;
$review = 'This product is even better now!';

update_review($id, $rating, $review);

// Delete a review
delete_review(2);


function displayReviews($productId) {
  // Connect to database
  $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

  // Prepare SQL query
  $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC");
  $stmt->bindParam(':product_id', $productId);

  // Execute query and fetch results
  $stmt->execute();
  $reviews = $stmt->fetchAll();

  // Close database connection
  $db = null;

  // Display reviews
  foreach ($reviews as $review) {
    echo "Rating: {$review['rating']}/5
";
    echo "Review:
{$review['review']}

";
  }
}

function submitReview($productId, $userId, $rating, $review) {
  // Connect to database
  $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

  // Prepare SQL query
  $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)");
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':user_id', $userId);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);

  // Execute query
  $stmt->execute();

  // Close database connection
  $db = null;
}


// Display reviews for product with ID 1
displayReviews(1);

// Submit review for product with ID 2 as user with ID 123
submitReview(2, 123, 4, 'Great product!');


class UserReview {
  private $id;
  private $reviewer_id;
  private $product_id;
  private $rating;
  private $review;

  public function __construct($id, $reviewer_id, $product_id, $rating, $review) {
    $this->id = $id;
    $this->reviewer_id = $reviewer_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->review = $review;
  }

  public function getId() { return $this->id; }
  public function getReviewerId() { return $this->reviewer_id; }
  public function getProductId() { return $this->product_id; }
  public function getRating() { return $this->rating; }
  public function getReview() { return $this->review; }
}


class UserReviewModel {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function createUserReview($data) {
    // Create a new review
    $query = "INSERT INTO user_reviews (reviewer_id, product_id, rating, review) VALUES (:reviewer_id, :product_id, :rating, :review)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':reviewer_id', $data['reviewer_id']);
    $stmt->bindParam(':product_id', $data['product_id']);
    $stmt->bindParam(':rating', $data['rating']);
    $stmt->bindParam(':review', $data['review']);
    $stmt->execute();

    // Get the ID of the newly created review
    $lastInsertId = $this->db->lastInsertId();

    return new UserReview($lastInsertId, $data['reviewer_id'], $data['product_id'], $data['rating'], $data['review']);
  }

  public function getUserReviews($productId) {
    // Get all reviews for a specific product
    $query = "SELECT * FROM user_reviews WHERE product_id = :product_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();

    $reviews = array();
    while ($row = $stmt->fetch()) {
      $reviews[] = new UserReview($row['id'], $row['reviewer_id'], $row['product_id'], $row['rating'], $row['review']);
    }

    return $reviews;
  }
}


class UserReviewController {
  private $model;

  public function __construct($model) {
    $this->model = $model;
  }

  public function createReview($data) {
    // Create a new review
    $review = $this->model->createUserReview($data);
    return $review;
  }

  public function getReviewsForProduct($productId) {
    // Get all reviews for a specific product
    $reviews = $this->model->getUserReviews($productId);
    return $reviews;
  }
}


$db = new PDO('mysql:host=localhost;dbname=example', 'username', 'password');

$model = new UserReviewModel($db);

$controller = new UserReviewController($model);

$data = array(
  'reviewer_id' => 1,
  'product_id' => 1,
  'rating' => 5,
  'review' => 'Great product!'
);

$review = $controller->createReview($data);
echo "New review created with ID: {$review->getId()}";

$reviewsForProduct = $controller->getReviewsForProduct(1);
foreach ($reviewsForProduct as $review) {
  echo "Reviewer: {$review->getReviewerId()} - Rating: {$review->getRating()} - Review: {$review->getReview()}
";
}


function add_review($pdo, $product_id, $user_id, $rating, $review_text) {
  try {
    $stmt = $pdo->prepare('INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES (?, ?, ?, ?)');
    $stmt->execute([$product_id, $user_id, $rating, $review_text]);
    return true;
  } catch(PDOException $e) {
    echo 'Error adding review: ' . $e->getMessage();
    return false;
  }
}

function display_reviews($pdo, $product_id) {
  try {
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = ? ORDER BY id DESC');
    $stmt->execute([$product_id]);
    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
    return $reviews;
  } catch(PDOException $e) {
    echo 'Error displaying reviews: ' . $e->getMessage();
    return array();
  }
}


$product_id = 1;
$user_id = 42; // assuming this is the current user's id
$rating = 4.5;
$review_text = 'This product is amazing!';

if (add_review($pdo, $product_id, $user_id, $rating, $review_text)) {
  echo 'Review added successfully!';
} else {
  echo 'Failed to add review.';
}


$reviews = display_reviews($pdo, $product_id);
foreach ($reviews as $review) {
  echo "Rating: {$review['rating']}, Review text: {$review['review_text']}";
}


// Connect to database
$conn = mysqli_connect("localhost", "username", "password", "database");

function addReview($product_id, $rating, $review, $user_id) {
    global $conn;
    if (mysqli_query($conn, "INSERT INTO reviews(product_id, user_id, rating, review) VALUES ('$product_id', '$user_id', '$rating', '$review')")) {
        return true;
    } else {
        echo mysqli_error($conn);
        return false;
    }
}

function getReviews($product_id) {
    global $conn;
    $query = "SELECT * FROM reviews WHERE product_id='$product_id'";
    $result = mysqli_query($conn, $query);
    $reviews = array();
    while ($row = mysqli_fetch_assoc($result)) {
        $reviews[] = array(
            'id' => $row['id'],
            'rating' => $row['rating'],
            'review' => $row['review']
        );
    }
    return $reviews;
}

function getAverageRating($product_id) {
    global $conn;
    $query = "SELECT AVG(rating) FROM reviews WHERE product_id='$product_id'";
    $result = mysqli_query($conn, $query);
    return mysqli_fetch_array($result)[0];
}


$product_id = 1; // Product ID
$rating = 5;
$review = "This product is amazing!";
$user_id = 1; // User ID

addReview($product_id, $rating, $review, $user_id);


$product_id = 1;

$reviews = getReviews($product_id);

foreach ($reviews as $review) {
    echo "Rating: " . $review['rating'] . "/5" . "
";
    echo "Review: " . $review['review'] . "

";
}


$product_id = 1;

$average_rating = getAverageRating($product_id);

echo "Average Rating: " . $average_rating . "/5" . "
";


<?php

// Include database connection file
include 'config.php';

// Function to register a new user
function registerUser($name, $email, $password) {
  global $db;
  
  // Prepare query and execute it
  $query = "INSERT INTO users (name, email, password) VALUES (?, ?, ?)";
  $stmt = $db->prepare($query);
  $stmt->execute([$name, $email, md5($password)]);
}

// Function to submit a review for a product
function submitReview($user_id, $product_id, $review_text, $rating) {
  global $db;
  
  // Prepare query and execute it
  $query = "INSERT INTO reviews (user_id, product_id, review_text, rating) VALUES (?, ?, ?, ?)";
  $stmt = $db->prepare($query);
  $stmt->execute([$user_id, $product_id, $review_text, $rating]);
}

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
  // If not, redirect to login page
  header('Location: login.php');
  exit;
}

// Handle review submission
if (isset($_POST['submit_review'])) {
  $user_id = $_SESSION['user_id'];
  $product_id = $_POST['product_id'];
  $review_text = $_POST['review_text'];
  $rating = $_POST['rating'];
  
  submitReview($user_id, $product_id, $review_text, $rating);
}

// Display product list and review form
?>
<h1>Product List</h1>
<ul>
  <?php foreach ($products as $product): ?>
    <li><?php echo $product['name']; ?></li>
    <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
      <input type="hidden" name="product_id" value="<?php echo $product['id']; ?>">
      <textarea name="review_text"></textarea>
      <select name="rating">
        <?php for ($i = 1; $i <= 5; $i++): ?>
          <option value="<?php echo $i; ?>"><?php echo $i; ?>/5</option>
        <?php endfor; ?>
      </select>
      <button type="submit" name="submit_review">Submit Review</button>
    </form>
  <?php endforeach; ?>
</ul>

<?php

// Include database connection file
include 'config.php';

// Retrieve products from database
$query = "SELECT * FROM products";
$stmt = $db->prepare($query);
$stmt->execute();
$products = $stmt->fetchAll();

?>


<?php

class Review {
    private $id;
    private $username;
    private $rating;
    private $comment;

    public function __construct($id, $username, $rating, $comment) {
        $this->id = $id;
        $this->username = $username;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public static function getAllReviews() {
        // Retrieve all reviews from database
        $reviews = array();
        // Example: assume we have a MySQL connection established as $conn
        $result = mysqli_query($conn, "SELECT * FROM reviews");
        while ($row = mysqli_fetch_assoc($result)) {
            $review = new Review($row['id'], $row['username'], $row['rating'], $row['comment']);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public static function getReviewById($id) {
        // Retrieve a review by ID from database
        // Example: assume we have a MySQL connection established as $conn
        $result = mysqli_query($conn, "SELECT * FROM reviews WHERE id = '$id'");
        if (mysqli_num_rows($result) > 0) {
            return new Review(mysqli_fetch_assoc($result)['id'], mysqli_fetch_assoc($result)['username'], mysqli_fetch_assoc($result)['rating'], mysqli_fetch_assoc($result)['comment']);
        } else {
            return null;
        }
    }

    public static function createReview($username, $rating, $comment) {
        // Insert a new review into database
        // Example: assume we have a MySQL connection established as $conn
        mysqli_query($conn, "INSERT INTO reviews (username, rating, comment) VALUES ('$username', '$rating', '$comment')");
    }

    public static function updateReview($id, $newComment) {
        // Update an existing review in database
        // Example: assume we have a MySQL connection established as $conn
        mysqli_query($conn, "UPDATE reviews SET comment = '$newComment' WHERE id = '$id'");
    }

    public static function deleteReview($id) {
        // Delete a review from database
        // Example: assume we have a MySQL connection established as $conn
        mysqli_query($conn, "DELETE FROM reviews WHERE id = '$id'");
    }
}

?>


// Get all reviews
$reviews = Review::getAllReviews();
foreach ($reviews as $review) {
    echo $review->username . ' gave ' . $review->rating . '/5 stars: ' . $review->comment . '<br>';
}

// Create a new review
Review::createReview('JohnDoe', 4, 'Great product!');

// Update an existing review
$review = Review::getReviewById(1);
if ($review !== null) {
    Review::updateReview($review->id, 'Even better now!');
}

// Delete a review
Review::deleteReview(2);


// Review class
class Review {
  private $db;

  public function __construct() {
    // Connect to database
    $this->db = new mysqli("localhost", "username", "password", "database");
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }
  }

  // Add a new review
  public function addReview($user_id, $product_name, $rating, $review_text) {
    $query = "INSERT INTO reviews (user_id, product_name, rating, review_text) VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param("isss", $user_id, $product_name, $rating, $review_text);
    $stmt->execute();
    return $this->db->insert_id;
  }

  // Get all reviews for a product
  public function getReviewsForProduct($product_name) {
    $query = "SELECT * FROM reviews WHERE product_name = ?";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param("s", $product_name);
    $stmt->execute();
    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  }

  // Get all reviews for a user
  public function getReviewsForUser($user_id) {
    $query = "SELECT * FROM reviews WHERE user_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param("i", $user_id);
    $stmt->execute();
    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  }
}


// Create a new Review instance
$review = new Review();

// Add a new review
$user_id = 1;
$product_name = "Product A";
$rating = 4.5;
$review_text = "This product is amazing!";
$review_id = $review->addReview($user_id, $product_name, $rating, $review_text);

// Get all reviews for a product
$product_reviews = $review->getReviewsForProduct($product_name);
foreach ($product_reviews as $review) {
  echo "User ID: " . $review["user_id"] . ", Rating: " . $review["rating"];
}

// Get all reviews for a user
$user_reviews = $review->getReviewsForUser($user_id);
foreach ($user_reviews as $review) {
  echo "Product Name: " . $review["product_name"] . ", Review Text: " . $review["review_text"];
}


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'reviews');

// Connect to database
$mysqli = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

// Function to add review
function addReview($productId, $userId, $rating, $review) {
  global $mysqli;
  
  // Prepare and execute query
  $stmt = $mysqli->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)");
  $stmt->bind_param("iiis", $productId, $userId, $rating, $review);
  $stmt->execute();
  
  // Get the review ID
  $reviewId = $mysqli->insert_id;
  
  return $reviewId;
}

// Function to get average rating
function getAverageRating($productId) {
  global $mysqli;
  
  // Prepare and execute query
  $stmt = $mysqli->prepare("SELECT AVG(rating) AS avg_rating FROM reviews WHERE product_id = ?");
  $stmt->bind_param("i", $productId);
  $stmt->execute();
  
  // Fetch the result
  $result = $stmt->get_result();
  $row = $result->fetch_assoc();
  
  return isset($row['avg_rating']) ? $row['avg_rating'] : null;
}

// Function to get reviews for a product
function getReviewsForProduct($productId) {
  global $mysqli;
  
  // Prepare and execute query
  $stmt = $mysqli->prepare("SELECT r.id, u.username, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = ?");
  $stmt->bind_param("i", $productId);
  $stmt->execute();
  
  // Fetch the results
  $result = $stmt->get_result();
  $reviews = array();
  
  while ($row = $result->fetch_assoc()) {
    $reviews[] = array(
      'id' => $row['id'],
      'username' => $row['username'],
      'rating' => $row['rating'],
      'review' => $row['review']
    );
  }
  
  return $reviews;
}

// Example usage
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  // Add review
  $productId = $_POST['product_id'];
  $userId = $_POST['user_id'];
  $rating = $_POST['rating'];
  $review = $_POST['review'];
  
  addReview($productId, $userId, $rating, $review);
}

// Get reviews for a product
$productId = 1; // Replace with actual product ID
$reviews = getReviewsForProduct($productId);

?>


// db_config.php (database connection settings)
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// connect to database
$mysqli = new mysqli($db_host, $db_username, $db_password, $db_name);

function addReview($user_id, $product_name, $rating, $review_text) {
  global $mysqli;
  
  // insert review into database
  $stmt = $mysqli->prepare("INSERT INTO reviews (user_id, product_name, rating, review_text) VALUES (?, ?, ?, ?)");
  $stmt->bind_param('isss', $user_id, $product_name, $rating, $review_text);
  $result = $stmt->execute();
  
  if ($result) {
    return true; // review added successfully
  } else {
    return false; // error adding review
  }
}

function getUserReviews($user_id) {
  global $mysqli;
  
  // retrieve reviews for user from database
  $stmt = $mysqli->prepare("SELECT * FROM reviews WHERE user_id = ?");
  $stmt->bind_param('i', $user_id);
  $result = $stmt->execute();
  
  if ($result) {
    return $stmt->get_result(); // fetch array of review data
  } else {
    return false; // error fetching reviews
  }
}

function getReview($review_id) {
  global $mysqli;
  
  // retrieve single review from database by ID
  $stmt = $mysqli->prepare("SELECT * FROM reviews WHERE id = ?");
  $stmt->bind_param('i', $review_id);
  $result = $stmt->execute();
  
  if ($result) {
    return $stmt->get_result()->fetch_assoc(); // fetch single review data as associative array
  } else {
    return false; // error fetching review
  }
}

function updateReview($review_id, $new_rating, $new_review_text) {
  global $mysqli;
  
  // update existing review in database
  $stmt = $mysqli->prepare("UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?");
  $stmt->bind_param('issi', $new_rating, $new_review_text, $review_id);
  $result = $stmt->execute();
  
  if ($result) {
    return true; // review updated successfully
  } else {
    return false; // error updating review
  }
}

function deleteReview($review_id) {
  global $mysqli;
  
  // delete review from database by ID
  $stmt = $mysqli->prepare("DELETE FROM reviews WHERE id = ?");
  $stmt->bind_param('i', $review_id);
  $result = $stmt->execute();
  
  if ($result) {
    return true; // review deleted successfully
  } else {
    return false; // error deleting review
  }
}


// add a new review for user with ID 1
$review_data = array(
  'product_name' => 'Apple iPhone',
  'rating' => 5,
  'review_text' => 'This is an amazing phone!'
);
addReview(1, $review_data['product_name'], $review_data['rating'], $review_data['review_text']);

// retrieve all reviews for user with ID 2
$user_reviews = getUserReviews(2);

// display individual review data
$review_id = 3; // example review ID
$review_data = getReview($review_id);
echo "Review Text: " . $review_data['review_text'];

// update existing review with ID 4
$new_rating = 4;
$new_review_text = 'This phone is great!';
updateReview(4, $new_rating, $new_review_text);

// delete review with ID 5
deleteReview(5);


// ReviewController.php

class ReviewController {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  // Get all reviews
  public function getReviews() {
    $stmt = $this->db->prepare("SELECT * FROM reviews");
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Add a new review
  public function addReview($data) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_name, rating, review) VALUES (?, ?, ?, ?)");
      $stmt->execute(array($data['user_id'], $data['product_name'], $data['rating'], $data['review']));
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }

  // Get a review by ID
  public function getReview($id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = ?");
      $stmt->execute(array($id));
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return null;
    }
  }

  // Update a review
  public function updateReview($data) {
    try {
      $stmt = $this->db->prepare("UPDATE reviews SET product_name = ?, rating = ?, review = ? WHERE id = ?");
      $stmt->execute(array($data['product_name'], $data['rating'], $data['review'], $data['id']));
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }

  // Delete a review
  public function deleteReview($id) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
      $stmt->execute(array($id));
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }
}

// UserController.php

class UserController {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  // Get user data
  public function getUserData($id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM users WHERE id = ?");
      $stmt->execute(array($id));
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return null;
    }
  }

  // Update user data
  public function updateUserData($data) {
    try {
      $stmt = $this->db->prepare("UPDATE users SET username = ?, email = ? WHERE id = ?");
      $stmt->execute(array($data['username'], $data['email'], $data['id']));
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }
}


$reviewController = new ReviewController();
$data = array(
  'user_id' => 1,
  'product_name' => 'Product Name',
  'rating' => 5,
  'review' => 'This is a great product!'
);
$reviewController->addReview($data);


$reviews = $reviewController->getReviews();
foreach ($reviews as $review) {
  echo "Rating: " . $review['rating'] . ", Review: " . $review['review'];
}


$reviewController = new ReviewController();
$data = array(
  'id' => 1,
  'product_name' => 'New Product Name',
  'rating' => 4,
  'review' => 'This is a good product!'
);
$reviewController->updateReview($data);


<?php

// Connect to database
$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');

function getReviews() {
  global $db;
  $query = "SELECT * FROM reviews ORDER BY created_at DESC";
  $stmt = $db->prepare($query);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function addReview($title, $content, $rating, $userId) {
  global $db;
  $query = "INSERT INTO reviews (title, content, rating, user_id) VALUES (:title, :content, :rating, :user_id)";
  $stmt = $db->prepare($query);
  $stmt->execute([
    ':title' => $title,
    ':content' => $content,
    ':rating' => $rating,
    ':user_id' => $userId
  ]);
}

function getReview($id) {
  global $db;
  $query = "SELECT * FROM reviews WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->execute([':id' => $id]);
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

// Example usage
$reviews = getReviews();
foreach ($reviews as $review) {
  echo "<h2>" . $review['title'] . "</h2>";
  echo "<p>Rating: " . $review['rating'] . "/5</p>";
  echo "<p>" . $review['content'] . "</p>";
}

?>


addReview('Great Product!', 'I love this product!', 5, 1);


$reviews = getReviews();
foreach ($reviews as $review) {
  // Display review details
}


<?php

class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  }

  public function addReview($user_id, $product_id, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
      $stmt->bindParam(':user_id', $user_id);
      $stmt->bindParam(':product_id', $product_id);
      $stmt->bindParam(':rating', $rating);
      $stmt->bindParam(':review', $review);
      $stmt->execute();
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
    }
  }

  public function getReviews($product_id = null, $user_id = null) {
    try {
      if ($product_id && !$user_id) {
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
        return $stmt->fetchAll();
      } elseif (!$product_id && $user_id) {
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
        $stmt->bindParam(':user_id', $user_id);
        $stmt->execute();
        return $stmt->fetchAll();
      } else {
        $stmt = $this->db->prepare("SELECT * FROM reviews");
        $stmt->execute();
        return $stmt->fetchAll();
      }
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
    }
  }

  public function deleteReview($review_id) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :id");
      $stmt->bindParam(':id', $review_id);
      $stmt->execute();
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
    }
  }

  public function updateReview($review_id, $rating, $review) {
    try {
      $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
      $stmt->bindParam(':id', $review_id);
      $stmt->bindParam(':rating', $rating);
      $stmt->bindParam(':review', $review);
      $stmt->execute();
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
    }
  }
}

?>


$review = new Review();

// Add a review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review_text = "This product is amazing!";
$review->addReview($user_id, $product_id, $rating, $review_text);

// Get reviews for a specific product
$product_id = 1;
$reviews = $review->getReviews($product_id);
print_r($reviews); // array of review objects

// Delete a review
$review_id = 1;
$review->deleteReview($review_id);

// Update a review
$review_id = 1;
$rating = 4;
$review_text = "This product is great!";
$review->updateReview($review_id, $rating, $review_text);


class ReviewManager {
    private $db;

    public function __construct() {
        // Connect to database
        $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
        $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    }

    /**
     * Insert a new review and rating.
     *
     * @param string $title
     * @param string $content
     * @return int|null Review ID if successful, null otherwise.
     */
    public function insertReview($title, $content) {
        try {
            // Prepare SQL query to insert review and rating.
            $stmt = $this->db->prepare("INSERT INTO reviews (title, content, created_at)
                                        VALUES (:title, :content, NOW())");

            // Execute the prepared statement with parameter values.
            $stmt->bindParam(':title', $title);
            $stmt->bindParam(':content', $content);

            if ($stmt->execute()) {
                return $this->db->lastInsertId();
            } else {
                throw new Exception('Failed to insert review');
            }
        } catch (PDOException $e) {
            print "Error: " . $e->getMessage() . "
";
            return null;
        }
    }

    /**
     * Update an existing review and rating.
     *
     * @param int $id Review ID
     * @param string $title New title for the review.
     * @return bool|null True if successful, false otherwise.
     */
    public function updateReview($id, $title) {
        try {
            // Prepare SQL query to update review and rating.
            $stmt = $this->db->prepare("UPDATE reviews SET title = :title WHERE id = :id");

            // Execute the prepared statement with parameter values.
            $stmt->bindParam(':id', $id);
            $stmt->bindParam(':title', $title);

            if ($stmt->execute()) {
                return true;
            } else {
                throw new Exception('Failed to update review');
            }
        } catch (PDOException $e) {
            print "Error: " . $e->getMessage() . "
";
            return false;
        }
    }

    /**
     * Delete a review and its corresponding rating.
     *
     * @param int $id Review ID
     * @return bool|null True if successful, false otherwise.
     */
    public function deleteReview($id) {
        try {
            // Prepare SQL query to delete review and rating.
            $stmt = $this->db->prepare("DELETE FROM ratings WHERE review_id = :id");
            $stmt2 = $this->db->prepare("DELETE FROM reviews WHERE id = :id");

            // Execute the prepared statements with parameter values.
            $stmt->bindParam(':id', $id);
            $stmt2->bindParam(':id', $id);

            if ($stmt->execute() && $stmt2->execute()) {
                return true;
            } else {
                throw new Exception('Failed to delete review');
            }
        } catch (PDOException $e) {
            print "Error: " . $e->getMessage() . "
";
            return false;
        }
    }
}


$reviewManager = new ReviewManager();

// Insert a new review.
$reviewId = $reviewManager->insertReview('New Review Title', 'This is my new review content.');
echo "Inserted review with ID: $reviewId
";

// Update an existing review.
$updateResult = $reviewManager->updateReview($reviewId, 'Updated title for the review');
if ($updateResult) {
    echo "Updated review successfully.
";
} else {
    echo "Failed to update review.
";
}

// Delete a review.
$deleteResult = $reviewManager->deleteReview($reviewId);
if ($deleteResult) {
    echo "Deleted review successfully.
";
} else {
    echo "Failed to delete review.
";
}


class UserReview {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  /**
   * Create a new review
   *
   * @param int $user_id
   * @param int $product_id
   * @param string $rating
   * @param string $review_text
   */
  public function createReview($user_id, $product_id, $rating, $review_text) {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (?, ?, ?, ?)");
    $stmt->execute([$user_id, $product_id, $rating, $review_text]);
  }

  /**
   * Get all reviews for a user
   *
   * @param int $user_id
   * @return array
   */
  public function getReviewsForUser($user_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = ?");
    $stmt->execute([$user_id]);
    return $stmt->fetchAll();
  }

  /**
   * Get all reviews for a product
   *
   * @param int $product_id
   * @return array
   */
  public function getReviewsForProduct($product_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
    $stmt->execute([$product_id]);
    return $stmt->fetchAll();
  }

  /**
   * Get the average rating for a product
   *
   * @param int $product_id
   * @return float
   */
  public function getAverageRating($product_id) {
    $stmt = $this->db->prepare("SELECT AVG(rating) FROM reviews WHERE product_id = ?");
    $stmt->execute([$product_id]);
    return $stmt->fetchColumn();
  }
}


$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');

$reviewSystem = new UserReview($db);

// Create a new review
$reviewSystem->createReview(1, 1, "5", "I love this product!");

// Get all reviews for a user
$userReviews = $reviewSystem->getReviewsForUser(1);
print_r($userReviews);

// Get all reviews for a product
$productReviews = $reviewSystem->getReviewsForProduct(1);
print_r($productReviews);

// Get the average rating for a product
$averageRating = $reviewSystem->getAverageRating(1);
echo "Average Rating: $averageRating";


<?php

// Configuration file for database connection
require_once 'config.php';

// Function to submit a new review
function submitReview($productId, $userId, $rating, $review) {
    global $conn;

    // Query to insert new review into reviews table
    $query = "INSERT INTO reviews (product_id, user_id, rating, review)
              VALUES (:productId, :userId, :rating, :review)";

    try {
        // Prepare and execute query with prepared statement
        $stmt = $conn->prepare($query);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);

        if ($stmt->execute()) {
            return true; // Review submitted successfully
        } else {
            throw new Exception('Error submitting review');
        }
    } catch (Exception $e) {
        echo 'Error: ' . $e->getMessage();
        return false;
    }
}

// Function to display all reviews for a product
function displayReviews($productId) {
    global $conn;

    // Query to retrieve reviews from database
    $query = "SELECT r.id, u.username, r.rating, r.review, r.created_at
              FROM reviews r
              JOIN users u ON r.user_id = u.id
              WHERE r.product_id = :productId";

    try {
        // Prepare and execute query with prepared statement
        $stmt = $conn->prepare($query);
        $stmt->bindParam(':productId', $productId);

        if ($stmt->execute()) {
            $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

            foreach ($reviews as &$review) {
                // Display review details on product page
                echo '<p>Username: ' . $review['username'] . '</p>';
                echo '<p>Rating: ' . $review['rating'] . '/5</p>';
                echo '<p>Review: ' . $review['review'] . '</p>';
                echo '<p>Created at: ' . $review['created_at'] . '</p>';
            }

            return true;
        } else {
            throw new Exception('Error displaying reviews');
        }
    } catch (Exception $e) {
        echo 'Error: ' . $e->getMessage();
        return false;
    }
}

// Function to delete a review
function deleteReview($reviewId, $adminId) {
    global $conn;

    // Query to delete review from database
    $query = "DELETE FROM reviews WHERE id = :reviewId AND user_id != :adminId";

    try {
        // Prepare and execute query with prepared statement
        $stmt = $conn->prepare($query);
        $stmt->bindParam(':reviewId', $reviewId);
        $stmt->bindParam(':adminId', $adminId);

        if ($stmt->execute()) {
            return true; // Review deleted successfully
        } else {
            throw new Exception('Error deleting review');
        }
    } catch (Exception $e) {
        echo 'Error: ' . $e->getMessage();
        return false;
    }
}
?>


// Example 1: Submitting a new review
$productId = 1; // ID of product being reviewed
$userId = 1; // ID of user submitting the review
$rating = 4; // Rating given to the product (out of 5)
$review = 'Great product, highly recommended!'; // User's review

if (submitReview($productId, $userId, $rating, $review)) {
    echo 'Review submitted successfully!';
} else {
    echo 'Error submitting review';
}

// Example 2: Displaying all reviews for a product
$productId = 1; // ID of product being reviewed

displayReviews($productId);

// Example 3: Deleting a review (admin only)
$reviewId = 1; // ID of review to be deleted
$adminId = 1; // ID of admin attempting to delete the review

if (deleteReview($reviewId, $adminId)) {
    echo 'Review deleted successfully!';
} else {
    echo 'Error deleting review';
}


CREATE TABLE reviews (
  id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT,
  product_id INT,
  rating TINYINT(1),
  comment TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE users (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255),
  email VARCHAR(255)
);


class Review {
  private $id;
  private $user_id;
  private $product_id;
  private $rating;
  private $comment;

  public function __construct($data) {
    if (isset($data['id'])) {
      $this->id = $data['id'];
    }
    if (isset($data['user_id'])) {
      $this->user_id = $data['user_id'];
    }
    if (isset($data['product_id'])) {
      $this->product_id = $data['product_id'];
    }
    if (isset($data['rating'])) {
      $this->rating = $data['rating'];
    }
    if (isset($data['comment'])) {
      $this->comment = $data['comment'];
    }
  }

  public static function createReview($user_id, $product_id, $rating, $comment) {
    // Insert review into database
    $query = "INSERT INTO reviews (user_id, product_id, rating, comment)
              VALUES (:user_id, :product_id, :rating, :comment)";
    $stmt = Database::prepare($query);
    $stmt->execute([
      ':user_id' => $user_id,
      ':product_id' => $product_id,
      ':rating' => $rating,
      ':comment' => $comment
    ]);
    return true;
  }

  public static function getReviewsForProduct($product_id) {
    // Get reviews for product from database
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = Database::prepare($query);
    $stmt->execute([':product_id' => $product_id]);
    return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
  }

  public static function getReviewsForUser($user_id) {
    // Get reviews for user from database
    $query = "SELECT * FROM reviews WHERE user_id = :user_id";
    $stmt = Database::prepare($query);
    $stmt->execute([':user_id' => $user_id]);
    return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
  }
}


class User {
  private $id;
  private $name;
  private $email;

  public function __construct($data) {
    if (isset($data['id'])) {
      $this->id = $data['id'];
    }
    if (isset($data['name'])) {
      $this->name = $data['name'];
    }
    if (isset($data['email'])) {
      $this->email = $data['email'];
    }
  }

  public static function createReview($product_id, $rating, $comment) {
    // Get user ID from session or database
    $user_id = $_SESSION['user_id']; // example: get user ID from session
    Review::createReview($user_id, $product_id, $rating, $comment);
  }
}


// Create a new review for a product
$user = new User(['id' => 1, 'name' => 'John Doe', 'email' => 'john@example.com']);
$product_id = 123;
$rating = 5;
$comment = 'Great product!';

User::createReview($product_id, $rating, $comment);

// Get reviews for a product
$reviews = Review::getReviewsForProduct($product_id);
print_r($reviews); // Output: array of Review objects

// Get reviews for a user
$reviews = Review::getReviewsForUser(1);
print_r($reviews); // Output: array of Review objects


<?php

// Include database connection file
require_once 'db.php';

// Function to add a review
function add_review($data) {
  $stmt = $pdo->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
  $stmt->execute([
    ':user_id' => $data['user_id'],
    ':product_id' => $data['product_id'],
    ':rating' => $data['rating'],
    ':review' => $data['review']
  ]);
  return $pdo->lastInsertId();
}

// Function to get all reviews for a product
function get_reviews($product_id) {
  $stmt = $pdo->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
  $stmt->execute([':product_id' => $product_id]);
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to update a review
function update_review($review_id, $data) {
  $stmt = $pdo->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
  $stmt->execute([
    ':rating' => $data['rating'],
    ':review' => $data['review'],
    ':id' => $review_id
  ]);
}

// Function to delete a review
function delete_review($review_id) {
  $pdo->exec("DELETE FROM reviews WHERE id = :id", ['id' => $review_id]);
}

// Example usage:
$data = [
  'user_id' => 1,
  'product_id' => 1,
  'rating' => 5,
  'review' => 'Great product!'
];
$review_id = add_review($data);
print("Review added with ID: " . $review_id);

// Get all reviews for a product
$product_id = 1;
$reviews = get_reviews($product_id);
print_r($reviews);

// Update a review
$data['rating'] = 4;
update_review(1, $data);

// Delete a review
delete_review(1);

?>


<?php

// Database connection settings
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = mysqli_connect($host, $username, $password, $db_name);

if (!$conn) {
  die('Could not connect: ' . mysqli_error($conn));
}

function add_review($user_id, $product_name, $rating, $review) {
  global $conn;
  
  // Check if review already exists for product
  $query = "SELECT * FROM reviews WHERE user_id = '$user_id' AND product_name = '$product_name'";
  $result = mysqli_query($conn, $query);
  if (mysqli_num_rows($result) > 0) {
    return false; // Review already exists
  }
  
  // Insert new review into database
  $query = "INSERT INTO reviews (user_id, product_name, rating, review) VALUES ('$user_id', '$product_name', '$rating', '$review')";
  mysqli_query($conn, $query);
  return true;
}

function get_reviews() {
  global $conn;
  
  // Retrieve all reviews from database
  $query = "SELECT * FROM reviews";
  $result = mysqli_query($conn, $query);
  $reviews = array();
  
  while ($row = mysqli_fetch_assoc($result)) {
    $reviews[] = array(
      'id' => $row['id'],
      'user_id' => $row['user_id'],
      'product_name' => $row['product_name'],
      'rating' => $row['rating'],
      'review' => $row['review']
    );
  }
  
  return $reviews;
}

function get_user_reviews($user_id) {
  global $conn;
  
  // Retrieve all reviews from user
  $query = "SELECT * FROM reviews WHERE user_id = '$user_id'";
  $result = mysqli_query($conn, $query);
  $reviews = array();
  
  while ($row = mysqli_fetch_assoc($result)) {
    $reviews[] = array(
      'id' => $row['id'],
      'product_name' => $row['product_name'],
      'rating' => $row['rating'],
      'review' => $row['review']
    );
  }
  
  return $reviews;
}

function display_reviews($reviews) {
  foreach ($reviews as $review) {
    echo '<h2>Product: ' . $review['product_name'] . '</h2>';
    echo '<p>Rating: ' . $review['rating'] . '/5</p>';
    echo '<p>' . $review['review'] . '</p>';
  }
}

// Example usage
$user_id = 1;
$product_name = 'Product A';
$rating = 4;
$review = 'This product is great!';

if (add_review($user_id, $product_name, $rating, $review)) {
  echo 'Review added successfully!';
} else {
  echo 'Error adding review.';
}

$reviews = get_reviews();
display_reviews($reviews);

?>


// Database connection settings
$host = 'localhost';
$dbname = 'review_system';
$username = 'root';
$password = '';

// Connect to the database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

function add_review($product_id, $user_id, $rating, $comment) {
  global $conn;
  
  try {
    // Prepare and execute the query
    $stmt = $conn->prepare('INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->execute();
    
    return true;
  } catch (PDOException $e) {
    echo 'Error adding review: ' . $e->getMessage();
    return false;
  }
}

function get_reviews($product_id) {
  global $conn;
  
  try {
    // Prepare and execute the query
    $stmt = $conn->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo 'Error fetching reviews: ' . $e->getMessage();
    return array();
  }
}

function update_review($review_id, $new_rating, $new_comment) {
  global $conn;
  
  try {
    // Prepare and execute the query
    $stmt = $conn->prepare('UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id');
    $stmt->bindParam(':id', $review_id);
    $stmt->bindParam(':rating', $new_rating);
    $stmt->bindParam(':comment', $new_comment);
    $stmt->execute();
    
    return true;
  } catch (PDOException $e) {
    echo 'Error updating review: ' . $e->getMessage();
    return false;
  }
}

function delete_review($review_id) {
  global $conn;
  
  try {
    // Prepare and execute the query
    $stmt = $conn->prepare('DELETE FROM reviews WHERE id = :id');
    $stmt->bindParam(':id', $review_id);
    $stmt->execute();
    
    return true;
  } catch (PDOException $e) {
    echo 'Error deleting review: ' . $e->getMessage();
    return false;
  }
}


// Add a new review for product with id 1
add_review(1, 1, 5, "Great product!");

// Get all reviews for product with id 1
$reviews = get_reviews(1);
print_r($reviews);

// Update the rating of a review with id 1 to 4
update_review(1, 4, "");

// Delete the review with id 1
delete_review(1);


<?php

// Database connection settings
$dsn = 'mysql:host=localhost;dbname=mydatabase';
$username = 'myusername';
$password = 'mypassword';

try {
  // Connect to database
  $db = new PDO($dsn, $username, $password);

  // Function to get user reviews
  function getUserReviews($userId) {
    global $db;
    $stmt = $db->prepare('SELECT * FROM reviews WHERE user_id = :user_id');
    $stmt->bindParam(':user_id', $userId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Function to add review
  function addReview($productId, $rating, $review) {
    global $db;
    $userId = $_SESSION['user']['id']; // assuming you have a session variable with the user's ID
    $stmt = $db->prepare('INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)');
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
  }

  // Function to get product reviews
  function getProductReviews($productId) {
    global $db;
    $stmt = $db->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

} catch (PDOException $e) {
  echo 'Error: ' . $e->getMessage();
}

?>


// Get user reviews
$userReviews = getUserReviews(1); // assuming the user ID is 1
print_r($userReviews);

// Add review
addReview(1, 5, 'Great product!'); // assuming the product ID is 1

// Get product reviews
$productReviews = getProductReviews(1);
print_r($productReviews);


// Configuration file for database connection
require_once 'config.php';

// Function to get all reviews for a product
function getReviews($productId) {
  $query = "SELECT * FROM reviews WHERE product_id = '$productId'";
  $result = mysqli_query($conn, $query);
  return $result;
}

// Function to calculate average rating for a product
function getAverageRating($productId) {
  $reviews = getReviews($productId);
  $sum = 0;
  foreach ($reviews as $review) {
    $sum += $review['rating'];
  }
  if (mysqli_num_rows($reviews) > 0) {
    return $sum / mysqli_num_rows($reviews);
  } else {
    return 0;
  }
}

// Function to add a new review
function addReview($productId, $userId, $rating, $review) {
  $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES ('$productId', '$userId', '$rating', '$review')";
  mysqli_query($conn, $query);
}

// Function to display all reviews for a product
function displayReviews($productId) {
  $reviews = getReviews($productId);
  if (mysqli_num_rows($reviews) > 0) {
    foreach ($reviews as $review) {
      echo '<p>' . $review['review'] . '</p>';
      echo '<p>Rating: ' . $review['rating'] . '/5</p>';
    }
  } else {
    echo '<p>No reviews available.</p>';
  }
}

// Example usage
$productId = 1;
echo 'Average rating for product ' . $productId . ': ' . getAverageRating($productId) . '</br>';

addReview($productId, 1, 4, 'Great product!');

displayReviews($productId);


<?php

// Review class
class Review {
    private $id;
    private $product_id;
    private $rating;
    private $title;
    private $description;

    public function __construct($id = null, $product_id = null, $rating = null, $title = null, $description = null) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->title = $title;
        $this->description = $description;
    }

    public function save() {
        global $db;

        // Insert review into database
        $query = "INSERT INTO reviews (product_id, rating, title, description) VALUES ('$this->product_id', '$this->rating', '$this->title', '$this->description')";
        $result = mysqli_query($db, $query);

        if ($result) {
            echo 'Review created successfully!';
        } else {
            echo 'Error creating review: ' . mysqli_error($db);
        }
    }

    public function getRating() {
        return $this->rating;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getDescription() {
        return $this->description;
    }
}

// Create a new review instance
$review = new Review();

// Assign user input to the review object's properties
$review->product_id = $_POST['product_id'];
$review->rating = $_POST['rating'];
$review->title = $_POST['title'];
$review->description = $_POST['description'];

// Save the review to the database
$review->save();

?>


<?php

// Database connection settings
$dbHost     = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName     = 'your_database';

// Connect to database
try {
    $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUsername, $dbPassword);
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}

class Review {
    private $id;
    private $product_id;
    private $rating;
    private $title;
    private $description;

    public function __construct($id = null, $product_id = null, $rating = null, $title = null, $description = null) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->title = $title;
        $this->description = $description;
    }

    public function save() {
        // Insert review into database
        $query = "INSERT INTO reviews (product_id, rating, title, description) VALUES (:product_id, :rating, :title, :description)";
        $stmt = $pdo->prepare($query);
        $stmt->bindParam(':product_id', $this->product_id);
        $stmt->bindParam(':rating', $this->rating);
        $stmt->bindParam(':title', $this->title);
        $stmt->bindParam(':description', $this->description);

        try {
            if ($stmt->execute()) {
                echo 'Review created successfully!';
            } else {
                throw new PDOException($stmt->errorInfo()[2]);
            }
        } catch (PDOException $e) {
            echo "Error creating review: " . $e->getMessage();
        }
    }

    public function getRating() {
        return $this->rating;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getDescription() {
        return $this->description;
    }
}

// Create a new review instance
$review = new Review();

// Assign user input to the review object's properties
$review->product_id = $_POST['product_id'];
$review->rating = $_POST['rating'];
$review->title = $_POST['title'];
$review->description = $_POST['description'];

// Save the review to the database
$review->save();

?>


// Create a new Review instance
$review = Review::create([
    'product_id' => $request->input('product_id'),
    'rating' => $request->input('rating'),
    'title' => $request->input('title'),
    'description' => $request->input('description')
]);


<?php

// Require database connection file
require_once 'db.php';

function getReviews() {
  // Retrieve all reviews from the database
  $query = "SELECT r.id, r.review, r.rating, u.name FROM reviews r JOIN users u ON r.user_id = u.id ORDER BY r.created_at DESC";
  $results = mysqli_query($conn, $query);
  return $results;
}

function getReview($id) {
  // Retrieve a specific review from the database
  $query = "SELECT * FROM reviews WHERE id = '$id'";
  $result = mysqli_query($conn, $query);
  if ($result && mysqli_num_rows($result) > 0) {
    return $result->fetch_assoc();
  } else {
    return false;
  }
}

function submitReview($data) {
  // Insert a new review into the database
  $query = "INSERT INTO reviews (user_id, review, rating) VALUES ('$data[user_id]', '$data[review]', '$data[rating]')";
  if (mysqli_query($conn, $query)) {
    return true;
  } else {
    return false;
  }
}

function editReview($id, $data) {
  // Update an existing review in the database
  $query = "UPDATE reviews SET review = '$data[review]', rating = '$data[rating]' WHERE id = '$id'";
  if (mysqli_query($conn, $query)) {
    return true;
  } else {
    return false;
  }
}

function deleteReview($id) {
  // Delete a review from the database
  $query = "DELETE FROM reviews WHERE id = '$id'";
  if (mysqli_query($conn, $query)) {
    return true;
  } else {
    return false;
  }
}


// Create a new user review
$data = array(
  'user_id' => 1,
  'review' => 'This product is amazing!',
  'rating' => 5
);
submitReview($data);

// Retrieve all reviews
$reviews = getReviews();
while ($row = $reviews->fetch_assoc()) {
  echo "Review ID: {$row['id']}
";
  echo "User Name: {$row['name']}
";
  echo "Review: {$row['review']}
";
  echo "Rating: {$row['rating']}

";
}

// Retrieve a specific review
$review = getReview(1);
echo "Review ID: {$review['id']}
";
echo "User Name: {$review['name']}
";
echo "Review: {$review['review']}
";
echo "Rating: {$review['rating']}

";

// Edit an existing review
$data = array(
  'review' => 'This product is even better!',
  'rating' => 5
);
editReview(1, $data);

// Delete a review
deleteReview(1);


<?php

// Connect to database
require_once 'db.php';

function getReviews() {
    $query = "SELECT * FROM reviews";
    return executeQuery($query);
}

function createUserReview($user_id, $product_name, $rating, $review) {
    $query = "INSERT INTO reviews (user_id, product_name, rating, review) VALUES (:user_id, :product_name, :rating, :review)";
    $params = [
        ':user_id' => $user_id,
        ':product_name' => $product_name,
        ':rating' => $rating,
        ':review' => $review
    ];
    return executeQuery($query, $params);
}

function getAverageRating() {
    $query = "SELECT AVG(rating) as average_rating FROM reviews";
    $result = executeQuery($query);
    return ($result[0]['average_rating'] ?? 0);
}

function displayReviews() {
    $reviews = getReviews();
    foreach ($reviews as $review) {
        echo "<h2>" . $review['product_name'] . "</h2>";
        echo "<p>Rating: " . $review['rating'] . "/5</p>";
        echo "<p>Review: " . $review['review'] . "</p>";
    }
}

function executeQuery($query, $params = []) {
    global $db;
    try {
        $stmt = $db->prepare($query);
        if (!empty($params)) {
            foreach ($params as $key => $value) {
                $stmt->bindValue(":$key", $value);
            }
        }
        $stmt->execute();
        return $stmt->fetchAll();
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        exit;
    }
}

// Initialize database connection
$db = new PDO('mysql:host=localhost;dbname=review_system', 'username', 'password');

// Display reviews
displayReviews();

// Get average rating
echo "<h2>Average Rating:</h2>";
echo getAverageRating() . "/5";

?>


function createUserReview($user_id, $product_id, $rating, $review) {
  // Validate input data
  if (!$user_id || !$product_id || !$rating || !$review) {
    throw new Exception("Invalid review submission");
  }

  try {
    // Connect to database
    $db = connectToDatabase();

    // Insert review into database
    $query = "INSERT INTO reviews (user_id, product_id, rating, review)
              VALUES (:user_id, :product_id, :rating, :review)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(":user_id", $user_id);
    $stmt->bindParam(":product_id", $product_id);
    $stmt->bindParam(":rating", $rating);
    $stmt->bindParam(":review", $review);
    $result = $stmt->execute();

    if ($result) {
      return true; // Review submitted successfully
    } else {
      throw new Exception("Failed to submit review");
    }
  } catch (PDOException $e) {
    // Handle database connection error
    logError($e->getMessage());
    throw new Exception("Failed to connect to database");
  } finally {
    closeDatabaseConnection($db);
  }

  return false; // Review submission failed
}


try {
  $user_id = 1;
  $product_id = 2;
  $rating = 5;
  $review = "This product is amazing!";

  if (createUserReview($user_id, $product_id, $rating, $review)) {
    echo "Review submitted successfully!";
  } else {
    echo "Failed to submit review.";
  }
} catch (Exception $e) {
  echo "Error: " . $e->getMessage();
}


<?php
// Configuration file for database connection
require_once 'config.php';

class ReviewSystem {
    private $conn;

    function __construct() {
        $this->conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
    }

    // Function to create a review
    function createReview($product_id, $user_name, $rating, $review_text) {
        $sql = "INSERT INTO reviews (product_id, user_name, rating, review_text)
                VALUES (?, ?, ?, ?)";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("isss", $product_id, $user_name, $rating, $review_text);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    }

    // Function to retrieve all reviews for a product
    function getReviews($product_id) {
        $sql = "SELECT * FROM reviews WHERE product_id = ?";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("i", $product_id);
        if ($stmt->execute()) {
            return $stmt->get_result();
        } else {
            return false;
        }
    }

    // Function to update a review
    function updateReview($review_id, $new_rating, $new_review_text) {
        $sql = "UPDATE reviews SET rating = ?, review_text = ?
                WHERE id = ?";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("isi", $new_rating, $new_review_text, $review_id);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    }

    // Function to delete a review
    function deleteReview($review_id) {
        $sql = "DELETE FROM reviews WHERE id = ?";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("i", $review_id);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    }

    function __destruct() {
        $this->conn->close();
    }
}

// Example usage
$reviewSystem = new ReviewSystem();

// Create a review
$user_name = 'John Doe';
$rating = 5;
$review_text = 'This product is amazing!';
$product_id = 1; // Replace with actual product ID
if ($reviewSystem->createReview($product_id, $user_name, $rating, $review_text)) {
    echo "Review created successfully.";
} else {
    echo "Failed to create review.";
}

// Retrieve all reviews for a product
$reviews = $reviewSystem->getReviews($product_id);
if ($reviews) {
    while ($row = $reviews->fetch_assoc()) {
        echo "Rating: " . $row['rating'] . ", Review Text: " . $row['review_text'];
    }
} else {
    echo "No reviews found.";
}

// Update a review
$review_id = 1; // Replace with actual review ID
$new_rating = 4;
$new_review_text = 'This product is good!';
if ($reviewSystem->updateReview($review_id, $new_rating, $new_review_text)) {
    echo "Review updated successfully.";
} else {
    echo "Failed to update review.";
}

// Delete a review
$review_id = 1; // Replace with actual review ID
if ($reviewSystem->deleteReview($review_id)) {
    echo "Review deleted successfully.";
} else {
    echo "Failed to delete review.";
}
?>


<?php

// Configuration
$host = 'localhost';
$dbname = 'database_name';
$user = 'username';
$password = 'password';

// Connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $user, $password);

class Review {
  private $conn;

  public function __construct() {
    $this->conn = new PDO("mysql:host=$host;dbname=$dbname", $user, $password);
  }

  // Create a review
  public function createReview($userId, $productId, $rating, $review) {
    $stmt = $this->conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
  }

  // Read all reviews
  public function readReviews() {
    $stmt = $this->conn->prepare("SELECT * FROM reviews");
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Read a single review by ID
  public function readReview($id) {
    $stmt = $this->conn->prepare("SELECT * FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  // Update a review
  public function updateReview($id, $userId, $productId, $rating, $review) {
    $stmt = $this->conn->prepare("UPDATE reviews SET user_id = :user_id, product_id = :product_id, rating = :rating, review = :review WHERE id = :id");
    $stmt->bindParam(':id', $id);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
  }

  // Delete a review
  public function deleteReview($id) {
    $stmt = $this->conn->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $id);
    return $stmt->execute();
  }
}

// Example usage:
$review = new Review();

// Create a review
$userId = 1;
$product_id = 1;
$rating = 5;
$review_text = 'Great product!';
$success = $review->createReview($userId, $product_id, $rating, $review_text);
echo "Created review: " . ($success ? "true" : "false");

// Read all reviews
$reviews = $review->readReviews();
foreach ($reviews as $review) {
  echo "User ID: $review[user_id], Product ID: $review[product_id], Rating: $review[rating], Review: $review[review]
";
}

// Read a single review by ID
$reviewId = 1;
$singleReview = $review->readReview($reviewId);
echo "ID: $singleReview[id], User ID: $singleReview[user_id], Product ID: $singleReview[product_id], Rating: $singleReview[rating], Review: $singleReview[review]
";

// Update a review
$newRating = 4;
$newReviewText = 'Good product!';
$success = $review->updateReview($reviewId, $userId, $product_id, $newRating, $newReviewText);
echo "Updated review: " . ($success ? "true" : "false");

// Delete a review
$success = $review->deleteReview($reviewId);
echo "Deleted review: " . ($success ? "true" : "false");


// reviews.php

$reviews = [
    1 => [
        'id' => 1,
        'title' => 'Great Product!',
        'rating' => 5,
        'review' => 'This product is amazing! I highly recommend it.',
        'user_id' => 1,
        'product_id' => 1
    ],
    2 => [
        'id' => 2,
        'title' => 'Not what I expected',
        'rating' => 2,
        'review' => 'Unfortunately, this product didn\'t meet my expectations.',
        'user_id' => 2,
        'product_id' => 1
    ],
];


// functions.php

function createUserReview($title, $rating, $review, $user_id, $product_id) {
    // Create a unique ID for the review
    $new_review_id = count($GLOBALS['reviews']) + 1;
    
    // Add new review to array (database)
    $GLOBALS['reviews'][$new_review_id] = [
        'id' => $new_review_id,
        'title' => $title,
        'rating' => $rating,
        'review' => $review,
        'user_id' => $user_id,
        'product_id' => $product_id
    ];
    
    // Return the new review's ID for reference
    return $new_review_id;
}


// index.php

require_once('functions.php');

$new_review_id = createUserReview(
    'Great Experience!',
    5,
    'I\'m so happy with my purchase! The customer service was top-notch.',
    1,
    1
);

echo "New Review Added: " . $new_review_id;


function getAllReviews() {
    return $GLOBALS['reviews'];
}

$all_reviews = getAllReviews();
foreach ($all_reviews as $review) {
    echo "Review #{$review['id']}: {$review['title']} ({$review['rating']}/5)
";
    echo "{$review['review']}

";
}


// review.php

class Review {
    private $id;
    private $userId;
    private $productId;
    private $rating;
    private $comment;

    public function __construct($id, $userId, $productId, $rating, $comment) {
        $this->id = $id;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


// reviewController.php

class ReviewController extends Controller {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview($productId, $rating, $comment, $userId) {
        $review = new Review(null, $userId, $productId, $rating, $comment);
        $this->db->insert('reviews', array(
            'product_id' => $review->getProductId(),
            'user_id' => $review->getUserId(),
            'rating' => $review->getRating(),
            'comment' => $review->getComment()
        ));
        return $this->db->lastInsertId();
    }

    public function getReviews($productId) {
        $reviews = array();
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC");
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        while ($row = $stmt->fetch()) {
            $review = new Review($row['id'], $row['user_id'], $row['product_id'], $row['rating'], $row['comment']);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public function updateReview($reviewId, $newRating, $newComment) {
        $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id");
        $stmt->bindParam(':id', $reviewId);
        $stmt->bindParam(':rating', $newRating);
        $stmt->bindParam(':comment', $newComment);
        return $stmt->execute();
    }

    public function deleteReview($reviewId) {
        return $this->db->delete('reviews', array('id' => $reviewId));
    }
}


// review.php

$db = new PDO('sqlite:reviews.db');

$reviewController = new ReviewController($db);

// Create a new review
$productId = 1;
$rating = 5;
$comment = 'Great product!';
$userId = 1;

$reviewId = $reviewController->createReview($productId, $rating, $comment, $userId);
echo "New review created with id: $reviewId
";

// Get all reviews for a product
$reviews = $reviewController->getReviews(1);
foreach ($reviews as $review) {
    echo "Rating: {$review->getRating()}, Comment: {$review->getComment()}
";
}

// Update an existing review
$reviewId = 1;
$newRating = 4;
$newComment = 'Good product!';

$success = $reviewController->updateReview($reviewId, $newRating, $newComment);
if ($success) {
    echo "Review updated successfully
";
} else {
    echo "Error updating review
";
}

// Delete a review
$reviewId = 1;

$success = $reviewController->deleteReview($reviewId);
if ($success) {
    echo "Review deleted successfully
";
} else {
    echo "Error deleting review
";
}


function create_review($product_id, $rating, $review_text) {
  // Check if the product exists
  $product = fetch_product_data($product_id);
  if (!$product) {
    throw new Exception("Product not found");
  }

  // Create a new review
  $new_review = array(
    "product_id" => $product_id,
    "rating" => $rating,
    "review_text" => $review_text,
    "created_at" => date("Y-m-d H:i:s")
  );

  // Insert the review into the database
  insert_review_into_database($new_review);

  return true;
}

function fetch_reviews_for_product($product_id) {
  // Fetch all reviews for a product from the database
  $reviews = fetch_reviews_from_database($product_id);
  return $reviews;
}


// Create a new review for a product with ID 1
$product_id = 1;
$rating = 5;
$review_text = "I loved this product! It's amazing.";
create_review($product_id, $rating, $review_text);

// Fetch all reviews for the product with ID 2
$product_id = 2;
$reviews = fetch_reviews_for_product($product_id);
print_r($reviews);


function insert_review_into_database($new_review) {
  // Connect to the database
  $db = new PDO("mysql:host=localhost;dbname=mydatabase", "myuser", "mypassword");

  // Prepare and execute the INSERT query
  $stmt = $db->prepare("INSERT INTO reviews (product_id, rating, review_text, created_at) VALUES (:product_id, :rating, :review_text, NOW())");
  $stmt->execute(array(
    ":product_id" => $new_review["product_id"],
    ":rating" => $new_review["rating"],
    ":review_text" => $new_review["review_text"]
  ));

  // Close the database connection
  $db = null;
}

function fetch_reviews_from_database($product_id) {
  // Connect to the database
  $db = new PDO("mysql:host=localhost;dbname=mydatabase", "myuser", "mypassword");

  // Prepare and execute the SELECT query
  $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
  $stmt->execute(array(":product_id" => $product_id));

  // Fetch all rows from the result set
  $reviews = array();
  while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
    $reviews[] = $row;
  }

  // Close the database connection
  $db = null;

  return $reviews;
}


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to create a review
function create_review($user_id, $product_id, $rating, $comment) {
    global $conn;
    
    // Prepare query
    $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("iis", $user_id, $product_id, $rating, $comment);
    
    // Execute query
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error: " . $stmt->error;
        return false;
    }
}

// Function to retrieve reviews for a product
function get_reviews($product_id) {
    global $conn;
    
    // Prepare query
    $stmt = $conn->prepare("SELECT r.id, u.name, r.rating, r.comment FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = ?");
    $stmt->bind_param("i", $product_id);
    
    // Execute query and fetch results
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        
        while ($row = $result->fetch_assoc()) {
            echo "<p>Review by " . $row['name'] . ":</p>";
            echo "<p>Rating: " . $row['rating'] . "/5</p>";
            echo "<p>" . $row['comment'] . "</p>";
        }
    } else {
        echo "Error: " . $stmt->error;
    }
}

// Function to display review form
function display_review_form($product_id) {
    global $conn;
    
    // Prepare query to retrieve user data
    $stmt = $conn->prepare("SELECT id, name FROM users WHERE id = ?");
    $stmt->bind_param("i", $_SESSION['user_id']);
    
    // Execute query and fetch result
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        
        while ($row = $result->fetch_assoc()) {
            echo "<h2>Review " . $product_id . "</h2>";
            
            // Display rating options
            echo "<select name='rating'>";
            for ($i = 1; $i <= 5; $i++) {
                echo "<option value='" . $i . "'>" . $i . "/5</option>";
            }
            echo "</select>";
            
            // Display comment textarea
            echo "<textarea name='comment' rows='10' cols='50'></textarea>";
        }
    } else {
        echo "Error: " . $stmt->error;
    }
}

// Function to submit review form
function submit_review($product_id) {
    global $conn;
    
    // Retrieve rating and comment from form data
    $rating = $_POST['rating'];
    $comment = $_POST['comment'];
    
    // Call create_review function
    if (create_review($_SESSION['user_id'], $product_id, $rating, $comment)) {
        echo "Review submitted successfully!";
    } else {
        echo "Error submitting review.";
    }
}

// Initialize review form display based on user action
if (isset($_GET['action']) && $_GET['action'] == 'review') {
    display_review_form($_GET['product_id']);
    
} elseif (isset($_POST['rating']) && isset($_POST['comment'])) {
    submit_review($_GET['product_id']);
}

?>


class Review {
  private $db;

  public function __construct() {
    // Initialize database connection
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  }

  /**
   * Create a new review
   *
   * @param int $user_id ID of the user making the review
   * @param string $product_name Name of the product being reviewed
   * @param int $rating Rating given to the product (1-5)
   * @param string $review Text of the review
   */
  public function createReview($user_id, $product_name, $rating, $review) {
    try {
      // Insert new review into database
      $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_name, rating, review) VALUES (:user_id, :product_name, :rating, :review)');
      $stmt->execute([
        'user_id' => $user_id,
        'product_name' => $product_name,
        'rating' => $rating,
        'review' => $review
      ]);

      return true;
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Get all reviews for a specific product
   *
   * @param string $product_name Name of the product to retrieve reviews for
   */
  public function getReviews($product_name) {
    try {
      // Retrieve reviews from database
      $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_name = :product_name');
      $stmt->execute(['product_name' => $product_name]);
      return $stmt->fetchAll();
    } catch (PDOException $e) {
      echo "Error retrieving reviews: " . $e->getMessage();
      return array();
    }
  }

  /**
   * Get a specific review by ID
   *
   * @param int $review_id ID of the review to retrieve
   */
  public function getReview($review_id) {
    try {
      // Retrieve review from database
      $stmt = $this->db->prepare('SELECT * FROM reviews WHERE id = :id');
      $stmt->execute(['id' => $review_id]);
      return $stmt->fetch();
    } catch (PDOException $e) {
      echo "Error retrieving review: " . $e->getMessage();
      return null;
    }
  }

  /**
   * Update an existing review
   *
   * @param int $review_id ID of the review to update
   * @param string $product_name Name of the product being reviewed
   * @param int $rating Rating given to the product (1-5)
   * @param string $review Text of the review
   */
  public function updateReview($review_id, $product_name, $rating, $review) {
    try {
      // Update review in database
      $stmt = $this->db->prepare('UPDATE reviews SET product_name = :product_name, rating = :rating, review = :review WHERE id = :id');
      $stmt->execute([
        'id' => $review_id,
        'product_name' => $product_name,
        'rating' => $rating,
        'review' => $review
      ]);

      return true;
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Delete a review by ID
   *
   * @param int $review_id ID of the review to delete
   */
  public function deleteReview($review_id) {
    try {
      // Delete review from database
      $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :id');
      $stmt->execute(['id' => $review_id]);

      return true;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }

}


$review = new Review();

// Create a new review
$user_id = 1; // ID of the user making the review
$product_name = 'Apple iPhone';
$rating = 4;
$review_text = 'This phone is amazing!';
$review->createReview($user_id, $product_name, $rating, $review_text);

// Get all reviews for a specific product
$product_name = 'Apple iPhone';
$reviews = $review->getReviews($product_name);
foreach ($reviews as $review) {
  echo "Rating: " . $review['rating'] . ", Review: " . $review['review'] . "
";
}

// Update an existing review
$review_id = 1; // ID of the review to update
$product_name = 'Apple iPhone';
$rating = 5;
$review_text = 'This phone is incredible!';
$review->updateReview($review_id, $product_name, $rating, $review_text);

// Delete a review by ID
$review_id = 1; // ID of the review to delete
$review->deleteReview($review_id);


class Review {
  private $db;

  public function __construct() {
    require_once 'db.php'; // assuming db.php has the database connection credentials
    $this->db = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
  }

  public function storeReview($productId, $userId, $rating, $comment) {
    if ($this->db->connect_error) {
      throw new Exception('Database connection error');
    }
    $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("iis", $productId, $userId, $rating, $comment);
    if (!$stmt->execute()) {
      throw new Exception('Failed to store review');
    }
  }

  public function getReviews($productId) {
    $reviews = array();
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
    $stmt->bind_param("i", $productId);
    if ($stmt->execute()) {
      $result = $stmt->get_result();
      while ($review = $result->fetch_assoc()) {
        $reviews[] = (object)array(
          'id' => $review['id'],
          'rating' => $review['rating'],
          'comment' => $review['comment']
        );
      }
    }
    return $reviews;
  }

  public function destroyReview($reviewId) {
    if ($this->db->connect_error) {
      throw new Exception('Database connection error');
    }
    $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
    $stmt->bind_param("i", $reviewId);
    if (!$stmt->execute()) {
      throw new Exception('Failed to delete review');
    }
  }
}


function userReview() {
  require_once 'Review.php'; // assuming the Review class is in this file

  $review = new Review();
  if (isset($_POST['reviewForm'])) {
    try {
      $productId = $_POST['product_id'];
      $userId = $_SESSION['user_id']; // assuming user ID is stored in session
      $rating = intval($_POST['rating']);
      $comment = $_POST['comment'];
      $review->storeReview($productId, $userId, $rating, $comment);
    } catch (Exception $e) {
      echo 'Error: ' . $e->getMessage();
    }
  }

  // Display reviews on product page
  if (isset($_GET['product_id'])) {
    $productId = intval($_GET['product_id']);
    $reviews = $review->getReviews($productId);
    foreach ($reviews as $review) {
      echo '<p>Rating: ' . $review->rating . ', Comment: ' . $review->comment . '</p>';
    }
  }
}


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
  }

  public function createReview($user_id, $product_id, $rating, $review) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, review)
              VALUES (:user_id, :product_id, :rating, :review)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
  }

  public function getReviewsForUser($user_id) {
    $query = "SELECT * FROM reviews
              WHERE user_id = :user_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    return $stmt->execute() ? $stmt->fetchAll(PDO::FETCH_ASSOC) : array();
  }

  public function editReview($review_id, $rating, $review) {
    $query = "UPDATE reviews
              SET rating = :rating,
                  review = :review
              WHERE id = :review_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':review_id', $review_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
  }

  public function deleteReview($review_id) {
    $query = "DELETE FROM reviews
              WHERE id = :review_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':review_id', $review_id);
    return $stmt->execute();
  }
}


$review = new Review();

// Create a new review
$review->createReview(1, 1, 5, "This product is amazing!");

// View reviews for user with ID 1
$reviewsForUser = $review->getReviewsForUser(1);
print_r($reviewsForUser);

// Edit the first review for user with ID 1
$review->editReview($reviewsForUser[0]['id'], 4, "This product is okay.");

// Delete the second review for user with ID 1
$review->deleteReview($reviewsForUser[1]['id']);


class Review {
    private $db;

    public function __construct() {
        $this->db = new mysqli('localhost', 'username', 'password', 'database');
    }

    // Create a new review
    public function create($product_id, $user_id, $rating, $review_text) {
        if (!$this->db->query("INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES ('$product_id', '$user_id', '$rating', '$review_text')")) {
            return false;
        }
        return true;
    }

    // Get all reviews for a product
    public function getAllReviewsForProduct($product_id) {
        $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
        $result = $this->db->query($query);
        while ($row = $result->fetch_assoc()) {
            $reviews[] = array(
                'id' => $row['id'],
                'rating' => $row['rating'],
                'review_text' => $row['review_text']
            );
        }
        return $reviews;
    }

    // Get all reviews for a user
    public function getAllReviewsForUser($user_id) {
        $query = "SELECT * FROM reviews WHERE user_id = '$user_id'";
        $result = $this->db->query($query);
        while ($row = $result->fetch_assoc()) {
            $reviews[] = array(
                'id' => $row['id'],
                'rating' => $row['rating'],
                'review_text' => $row['review_text']
            );
        }
        return $reviews;
    }

    // Update a review
    public function update($review_id, $product_id, $user_id, $rating, $review_text) {
        if (!$this->db->query("UPDATE reviews SET product_id = '$product_id', user_id = '$user_id', rating = '$rating', review_text = '$review_text' WHERE id = '$review_id'")) {
            return false;
        }
        return true;
    }

    // Delete a review
    public function delete($review_id) {
        if (!$this->db->query("DELETE FROM reviews WHERE id = '$review_id'")) {
            return false;
        }
        return true;
    }
}


$review = new Review();

// Create a new review
$result = $review->create(1, 1, 5, 'Great product!');
echo var_dump($result); // bool(true)

// Get all reviews for a product
$reviews = $review->getAllReviewsForProduct(1);
echo '<pre>';
print_r($reviews);
echo '</pre>';

// Update a review
$result = $review->update(1, 2, 2, 4, 'Not bad');
echo var_dump($result); // bool(true)

// Delete a review
$result = $review->delete(1);
echo var_dump($result); // bool(true)


// Database Connection Settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'product_reviews');

// Establish Database Connection
$connection = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}

class ReviewSystem {
    private $connection;

    function __construct() {
        $this->connection = $GLOBALS['connection'];
    }

    // Function to register a new user
    public function registerUser($username, $email, $password) {
        $query = "INSERT INTO users (username, email, password) VALUES (?, ?, ?)";
        $stmt = $this->connection->prepare($query);
        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
        $stmt->bind_param("sss", $username, $email, $hashedPassword);
        if ($stmt->execute()) {
            echo "User registered successfully!";
        } else {
            echo "Error registering user: " . $this->connection->error;
        }
    }

    // Function to login a user
    public function loginUser($username, $password) {
        $query = "SELECT * FROM users WHERE username = ?";
        $stmt = $this->connection->prepare($query);
        $stmt->bind_param("s", $username);
        if ($stmt->execute()) {
            $user = $stmt->get_result()->fetch_assoc();
            if (password_verify($password, $user['password'])) {
                echo "User logged in successfully!";
            } else {
                echo "Invalid password";
            }
        } else {
            echo "Error logging user: " . $this->connection->error;
        }
    }

    // Function to create a new review
    public function createReview($productId, $username, $reviewText) {
        $query = "INSERT INTO reviews (product_id, username, review_text) VALUES (?, ?, ?)";
        $stmt = $this->connection->prepare($query);
        $stmt->bind_param("sss", $productId, $username, $reviewText);
        if ($stmt->execute()) {
            echo "Review created successfully!";
        } else {
            echo "Error creating review: " . $this->connection->error;
        }
    }

    // Function to display all reviews for a product
    public function displayReviews($productId) {
        $query = "SELECT * FROM reviews WHERE product_id = ?";
        $stmt = $this->connection->prepare($query);
        $stmt->bind_param("s", $productId);
        if ($stmt->execute()) {
            $reviews = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
            echo json_encode($reviews);
        } else {
            echo "Error displaying reviews: " . $this->connection->error;
        }
    }
}

// Example Usage
$reviewSystem = new ReviewSystem();

// Register a new user
$username = 'john_doe';
$email = 'johndoe@example.com';
$password = 'password123';
$reviewSystem->registerUser($username, $email, $password);

// Login an existing user
$loginUsername = 'john_doe';
$loginPassword = 'password123';
$reviewSystem->loginUser($loginUsername, $loginPassword);

// Create a new review
$productId = 1;
$reviewText = 'This is a great product!';
$username = 'john_doe';
$reviewSystem->createReview($productId, $username, $reviewText);

// Display all reviews for a product
$productId = 1;
$reviews = $reviewSystem->displayReviews($productId);
echo $reviews;


<?php

// Database connection settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function addReview($reviewData) {
    // Insert review into database
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
            VALUES (?, ?, ?, ?)";
    
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiii", $reviewData['product_id'], $reviewData['user_id'], $reviewData['rating'], $reviewData['comment']);
    $result = $stmt->execute();
    
    if (!$result) {
        echo "Error adding review: " . $conn->error;
    } else {
        return true; // Review added successfully
    }
}

function getReviews($product_id, $limit = null, $offset = null) {
    // Retrieve reviews from database
    $sql = "SELECT * FROM reviews WHERE product_id = ? ORDER BY created_at DESC";
    
    if ($limit !== null) {
        $sql .= " LIMIT ?";
    }
    
    if ($offset !== null) {
        $sql .= " OFFSET ?";
    }
    
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    if ($limit !== null && $offset !== null) {
        $stmt->bind_param("ii", $limit, $offset);
    } elseif ($limit !== null) {
        $stmt->bind_param("i", $limit);
    }
    
    $result = $stmt->execute();
    $reviews = array();
    
    if (!$result || !$stmt->num_rows > 0) {
        return $reviews; // No reviews found
    }
    
    while ($row = $stmt->fetch_assoc()) {
        $reviews[] = $row;
    }
    
    return $reviews;
}

function editReview($review_id, $newData) {
    // Update review in database
    $sql = "UPDATE reviews SET rating = ?, comment = ? WHERE id = ?";
    
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iii", $newData['rating'], $newData['comment'], $review_id);
    $result = $stmt->execute();
    
    if (!$result) {
        echo "Error editing review: " . $conn->error;
    } else {
        return true; // Review edited successfully
    }
}

function deleteReview($review_id) {
    // Delete review from database
    $sql = "DELETE FROM reviews WHERE id = ?";
    
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $review_id);
    $result = $stmt->execute();
    
    if (!$result) {
        echo "Error deleting review: " . $conn->error;
    } else {
        return true; // Review deleted successfully
    }
}

?>


$reviewData = array(
    'product_id' => 123,
    'user_id' => 456,
    'rating' => 5,
    'comment' => 'Great product!'
);
addReview($reviewData); // Returns true if review added successfully


$reviews = getReviews(123, 10, 0); // Retrieves first 10 reviews for product with ID 123
print_r($reviews); // Prints array of review data


$newData = array(
    'rating' => 4,
    'comment' => 'Good product.'
);
editReview(789, $newData); // Returns true if review edited successfully


deleteReview(789); // Returns true if review deleted successfully


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to create a review
function create_review($product_id, $user_id, $rating, $review_text) {
    // Insert into reviews table
    $sql = "INSERT INTO reviews (product_id, user_id, rating, review_text)
            VALUES ('$product_id', '$user_id', '$rating', '$review_text')";
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to get all reviews for a product
function get_reviews($product_id) {
    $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $reviews[] = array(
                'id' => $row['id'],
                'user_id' => $row['user_id'],
                'rating' => $row['rating'],
                'review_text' => $row['review_text']
            );
        }
        return $reviews;
    } else {
        return null;
    }
}

// Function to get a review by ID
function get_review($id) {
    $sql = "SELECT * FROM reviews WHERE id = '$id'";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        return $row = $result->fetch_assoc();
    } else {
        return null;
    }
}

// Function to update a review
function update_review($id, $rating, $review_text) {
    // Update review in database
    $sql = "UPDATE reviews SET rating = '$rating', review_text = '$review_text'
            WHERE id = '$id'";
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to delete a review
function delete_review($id) {
    // Delete review from database
    $sql = "DELETE FROM reviews WHERE id = '$id'";
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

?>


<?php

// Create a new review
$product_id = 1; // ID of the product being reviewed
$user_id = 1; // ID of the user submitting the review
$rating = 5; // Rating (out of 5) given by the user
$review_text = "This product is amazing!"; // Text of the review

if (create_review($product_id, $user_id, $rating, $review_text)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

// Get all reviews for a product
$product_id = 1; // ID of the product being reviewed
$reviews = get_reviews($product_id);
if ($reviews) {
    foreach ($reviews as $review) {
        echo "Review #{$review['id']}: {$review['review_text']} (Rating: {$review['rating']})";
    }
} else {
    echo "No reviews found for this product.";
}

// Get a review by ID
$review_id = 1; // ID of the review being retrieved
$review = get_review($review_id);
if ($review) {
    echo "Review #{$review['id']}: {$review['review_text']} (Rating: {$review['rating']})";
} else {
    echo "No review found with this ID.";
}

// Update a review
$review_id = 1; // ID of the review being updated
$new_rating = 4; // New rating given by the user
$new_review_text = "This product is good, but not great."; // New text of the review

if (update_review($review_id, $new_rating, $new_review_text)) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review.";
}

// Delete a review
$review_id = 1; // ID of the review being deleted

if (delete_review($review_id)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}
?>


<?php

// Configuration for database connection
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$dbname = 'reviews_database';

// Establishing the database connection
$conn = new mysqli($host, $username, $password, $dbname);

// Check if the connection was successful
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

class ReviewSystem {

    public function createReview(int $productId, int $rating, string $reviewText): bool {
        // Preparing SQL statement to insert a new review
        $stmt = $conn->prepare("INSERT INTO reviews (product_id, rating, review_text) VALUES (?, ?, ?)");
        
        // Binding the parameters
        $stmt->bind_param('iis', $productId, $rating, $reviewText);
        
        // Executing the query
        if (!$stmt->execute()) {
            return false;  // Failed to insert review
        }
        
        // If no issues occurred during execution, close and free resources
        $stmt->close();
        return true;   // Successfully inserted review
    }

    public function getReviewsForProduct(int $productId): array {
        // SQL statement to retrieve reviews for a product
        $query = "SELECT r.id, r.rating, r.review_text, r.created_at FROM reviews r WHERE r.product_id = ?";

        // Preparing the query with parameters bound
        $stmt = $conn->prepare($query);
        $stmt->bind_param('i', $productId);

        // Executing the query and fetching results
        $stmt->execute();
        $result = $stmt->get_result();

        // Converting to an array for easier handling in PHP
        $reviewsArray = [];
        while ($review = $result->fetch_assoc()) {
            $reviewsArray[] = $review;
        }

        // Clean up resources and return the reviews array
        $stmt->close();
        return $reviewsArray;
    }

    public function updateReview(int $reviewId, int $newRating, string $newReviewText): bool {
        // SQL statement to update a review
        $query = "UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?";
        
        // Preparing the query with parameters bound
        $stmt = $conn->prepare($query);
        $stmt->bind_param('iis', $newRating, $newReviewText, $reviewId);

        // Executing the update
        if (!$stmt->execute()) {
            return false;  // Failed to update review
        }
        
        // If no issues occurred during execution, close and free resources
        $stmt->close();
        return true;   // Successfully updated review
    }

    public function deleteReview(int $reviewId): bool {
        // SQL statement to delete a review
        $query = "DELETE FROM reviews WHERE id = ?";

        // Preparing the query with parameter bound
        $stmt = $conn->prepare($query);
        $stmt->bind_param('i', $reviewId);

        // Executing the deletion and checking for success
        if (!$stmt->execute()) {
            return false;  // Failed to delete review
        }
        
        // If no issues occurred during execution, close resources
        $stmt->close();
        return true;   // Successfully deleted review
    }

}

// Example usage:
$reviewSystem = new ReviewSystem();

// Creating a new product
$productID = null;
$stmt = $conn->prepare("INSERT INTO products (name) VALUES (?)");
$stmt->bind_param('s', 'Test Product');
if (!$stmt->execute()) {
    echo "Failed to insert product: " . $conn->error;
} else {
    $productID = $conn->insert_id; // Get the ID of the new product
}

// Creating a new review for this product
$rating = 4;
(reviewText) = 'This is a great product!';
if (!$reviewSystem->createReview($productID, $rating, $reviewText)) {
    echo "Failed to create review.";
} else {
    echo "Review created successfully!";
}

// Retrieving reviews for the same product
$reviews = $reviewSystem->getReviewsForProduct($productID);
echo "Reviews: ";
print_r($reviews);

// Update an existing review
if (!$reviewSystem->updateReview(1, 5, 'This is a better product!')) {
    echo "Failed to update review.";
} else {
    echo "Review updated successfully!";
}

// Delete a review
if (!$reviewSystem->deleteReview(2)) {
    echo "Failed to delete review.";
} else {
    echo "Review deleted successfully!";
}

$conn->close();

?>


<?php
class Review {
    private $id;
    private $reviewer_name;
    private $rating;
    private $title;
    private $content;

    public function __construct($id, $reviewer_name, $rating, $title, $content) {
        $this->id = $id;
        $this->reviewer_name = $reviewer_name;
        $this->rating = $rating;
        $this->title = $title;
        $this->content = $content;
    }

    public function getId() {
        return $this->id;
    }

    public function getReviewerName() {
        return $this->reviewer_name;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getContent() {
        return $this->content;
    }
}

class ReviewManager {
    private $reviews = array();

    public function addReview(Review $review) {
        $this->reviews[$review->getId()] = $review;
    }

    public function getReviews() {
        return $this->reviews;
    }

    public function getReview($id) {
        if (isset($this->reviews[$id])) {
            return $this->reviews[$id];
        } else {
            return null;
        }
    }

    public function deleteReview($id) {
        if (isset($this->reviews[$id])) {
            unset($this->reviews[$id]);
        }
    }
}

// Example usage:

$reviewManager = new ReviewManager();

$review1 = new Review(1, 'John Doe', 5, 'Great product!', 'I love this product!');

$reviewManager->addReview($review1);

echo "Reviews:
";
foreach ($reviewManager->getReviews() as $review) {
    echo "ID: " . $review->getId() . "
";
    echo "Reviewer Name: " . $review->getReviewerName() . "
";
    echo "Rating: " . $review->getRating() . "/5
";
    echo "Title: " . $review->getTitle() . "
";
    echo "Content: " . $review->getContent() . "
";
}
?>


<?php

// Include configuration files
require_once 'config.php';
require_once 'functions.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    redirect_to('login.php');
}

// Handle form submission
if (isset($_POST['submit'])) {

    // Validate form data
    $title = trim($_POST['title']);
    $description = trim($_POST['description']);

    if (!$title || !$description) {
        $errors[] = 'Please fill in all fields.';
    }

    if (!empty($errors)) {
        echo display_errors($errors);
    } else {

        // Insert review into database
        $query = "INSERT INTO reviews (title, description, rating, approved, created_at)
                  VALUES (:title, :description, 0, 0, NOW())";
        $stmt = $pdo->prepare($query);
        $stmt->execute([
            ':title' => $title,
            ':description' => $description
        ]);

        echo 'Review submitted successfully!';
    }
}

// Display review form
?>

<form action="" method="post">
    <label for="title">Title:</label>
    <input type="text" id="title" name="title"><br><br>
    <label for="description">Description:</label>
    <textarea id="description" name="description"></textarea><br><br>
    <button type="submit" name="submit">Submit Review</button>
</form>

<?php


<?php

// Include configuration files
require_once 'config.php';
require_once 'functions.php';

// Check if user is logged in as administrator
if (!isset($_SESSION['user_id']) || !in_array($_SESSION['role'], ['administrator', 'admin'])) {
    redirect_to('login.php');
}

// Display review table
?>

<table>
    <tr>
        <th>Title</th>
        <th>Description</th>
        <th>Rating</th>
        <th>Approved?</th>
        <th>Action</th>
    </tr>

    <?php

    // Retrieve reviews from database
    $query = "SELECT * FROM reviews WHERE approved = 0";
    $stmt = $pdo->prepare($query);
    $stmt->execute();
    while ($row = $stmt->fetch()) {
        echo '<tr>';
        echo '<td>' . $row['title'] . '</td>';
        echo '<td>' . $row['description'] . '</td>';
        echo '<td>0</td>';
        if (!$row['approved']) {
            echo '<td>No</td>';
        } else {
            echo '<td,Yes</td>';
        }
        echo '<td><a href="approve.php?id=' . $row['id'] . '">Approve</a> | <a href="reject.php?id=' . $row['id'] . '">Reject</a></td>';
        echo '</tr>';
    }

    ?>
</table>

<?php


<?php

// Include configuration files
require_once 'config.php';
require_once 'functions.php';

// Check if user is logged in as administrator
if (!isset($_SESSION['user_id']) || !in_array($_SESSION['role'], ['administrator', 'admin'])) {
    redirect_to('login.php');
}

// Get review ID from URL parameter
$id = $_GET['id'];

// Update review to approved or rejected
$query = "UPDATE reviews SET approved = :approved WHERE id = :id";
$stmt = $pdo->prepare($query);
$stmt->execute([
    ':approved' => 1, // Approved
    ':id' => $id
]);

echo 'Review approved/rejected successfully!';

?>


<?php

// Include configuration files
require_once 'config.php';
require_once 'functions.php';

// Get user ID from URL parameter or session
$user_id = $_GET['id'] ?? $_SESSION['user_id'];

// Retrieve reviews from database
$query = "SELECT * FROM reviews WHERE id IN (SELECT review_id FROM users_reviews WHERE user_id = :user_id)";
$stmt = $pdo->prepare($query);
$stmt->execute([':user_id' => $user_id]);

?>

<table>
    <tr>
        <th>Title</th>
        <th>Description</th>
        <th>Rating</th>
    </tr>

    <?php

    while ($row = $stmt->fetch()) {
        echo '<tr>';
        echo '<td>' . $row['title'] . '</td>';
        echo '<td>' . $row['description'] . '</td>';
        echo '<td>0</td>';
        echo '</tr>';
    }

    ?>
</table>

<?php


<?php
// Configuration settings
define('DATABASE_HOST', 'localhost');
define('DATABASE_USERNAME', 'your_username');
define('DATABASE_PASSWORD', 'your_password');
define('DATABASE_NAME', 'your_database_name');

// Connect to database
$mysqli = new mysqli(DATABASE_HOST, DATABASE_USERNAME, DATABASE_PASSWORD, DATABASE_NAME);

function getReviews($product_id) {
    // SQL query to retrieve reviews for a product
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $mysqli->query($query);
    
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $reviews[] = array(
                'id' => $row['id'],
                'rating' => $row['rating'],
                'review' => $row['review'],
                'created_at' => $row['created_at']
            );
        }
    } else {
        $reviews = array();
    }

    return $reviews;
}

function addReview($product_id, $rating, $review) {
    // SQL query to insert a new review
    $query = "INSERT INTO reviews (product_id, rating, review, created_at) VALUES ('$product_id', '$rating', '$review', NOW())";
    
    if ($mysqli->query($query)) {
        return true;
    } else {
        return false;
    }
}

function getAverageRating($product_id) {
    // SQL query to calculate average rating for a product
    $query = "SELECT AVG(rating) AS average FROM reviews WHERE product_id = '$product_id'";
    $result = $mysqli->query($query);
    
    if ($result->num_rows > 0) {
        return $result->fetch_assoc()['average'];
    } else {
        return 0;
    }
}

// Example usage:
$product_id = 1; // Replace with the actual product ID
$reviews = getReviews($product_id);

if (!empty($reviews)) {
    foreach ($reviews as $review) {
        echo "Rating: $review[rating]/5, Review: $review[review], Created At: $review[created_at]<br>";
    }
    
    // Calculate average rating
    $average_rating = getAverageRating($product_id);
    echo "Average Rating: $average_rating/5<br>";
} else {
    echo "No reviews found for this product.";
}

// Close database connection
$mysqli->close();
?>


// database.php (example database connection file)
$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'reviews';

$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// reviews.php (user review function file)
require_once 'database.php';

function add_review($review_text, $rating, $username) {
    global $conn;

    // Validate input
    if (!ctype_alnum($username)) {
        echo 'Invalid username';
        return false;
    }

    if (!preg_match('/^[0-9]+$/', $rating)) {
        echo 'Invalid rating';
        return false;
    }

    $sql = "INSERT INTO reviews (review_text, rating, username) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("sss", $review_text, $rating, $username);

    if ($stmt->execute()) {
        echo 'Review added successfully';
        return true;
    } else {
        echo 'Error adding review: ' . $stmt->error;
        return false;
    }
}

function get_reviews() {
    global $conn;

    $sql = "SELECT * FROM reviews";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo 'Username: ' . $row['username'] . '<br>';
            echo 'Review Text: ' . $row['review_text'] . '<br>';
            echo 'Rating: ' . $row['rating'] . '<br><hr>';
        }
    } else {
        echo 'No reviews found';
    }
}


$username = 'JohnDoe';
$review_text = 'This is an example review';
$rating = 5;

if (add_review($review_text, $rating, $username)) {
    echo 'Review added successfully!';
}


get_reviews();


<?php

// Database connection settings
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create database connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function getReviews() {
    global $conn;
    
    // SQL query to fetch reviews
    $sql = "SELECT r.id, u.name, r.product_id, r.rating, r.review_text 
            FROM reviews r 
            INNER JOIN users u ON r.user_id = u.id 
            ORDER BY r.id DESC";
    
    $result = $conn->query($sql);
    
    // Check if query was successful
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            echo "ID: " . $row["id"]. " - Name: " . $row["name"]. " - Product ID: " . $row["product_id"]. " - Rating: " . $row["rating"]. " - Review Text: " . $row["review_text"]. "<br>";
        }
    } else {
        echo "0 results";
    }
}

function getAverageRating($productId) {
    global $conn;
    
    // SQL query to fetch average rating for a product
    $sql = "SELECT AVG(r.rating) AS avg_rating 
            FROM reviews r 
            WHERE r.product_id = '$productId'";
    
    $result = $conn->query($sql);
    
    // Check if query was successful and return result
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            return $row["avg_rating"];
        }
    } else {
        return null;
    }
}

// Add review function (example: create a form on your page with the following fields)
function addReview($userId, $productId, $rating, $reviewText) {
    global $conn;
    
    // SQL query to insert new review
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review_text) 
            VALUES ('$userId', '$productId', '$rating', '$reviewText')";
    
    if ($conn->query($sql) === TRUE) {
        echo "Review added successfully";
    } else {
        echo "Error adding review: " . $conn->error;
    }
}

// Example usage
$conn->close();

?>


// database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

// check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// create table for reviews (if it doesn't exist)
$sql = "
CREATE TABLE IF NOT EXISTS reviews (
  id INT AUTO_INCREMENT PRIMARY KEY,
  product_id INT,
  user_id INT,
  rating TINYINT(1),
  review TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
";

$conn->query($sql);

// function to add a new review
function add_review($product_id, $user_id, $rating, $review) {
  global $conn;
  $sql = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("iiss", $product_id, $user_id, $rating, $review);
  $stmt->execute();
}

// function to get all reviews for a product
function get_reviews($product_id) {
  global $conn;
  $sql = "SELECT * FROM reviews WHERE product_id = ? ORDER BY created_at DESC";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
}

// function to get all reviews for a user
function get_user_reviews($user_id) {
  global $conn;
  $sql = "SELECT * FROM reviews WHERE user_id = ? ORDER BY created_at DESC";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $user_id);
  $stmt->execute();
  return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
}

// example usage:
$product_id = 1;
$user_id = 1;
$rating = 5;
$review = "This product is amazing!";

add_review($product_id, $user_id, $rating, $review);

$reviews = get_reviews($product_id);
print_r($reviews);

$user_reviews = get_user_reviews($user_id);
print_r($user_reviews);


<?php

// Configuration
define('DB_HOST', 'your_host');
define('DB_USER', 'your_user');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($mysqli->connect_errno) {
    echo "Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error;
}

function createUserReview($product_id, $rating, $review) {
  global $mysqli;

  // Insert new review
  $query = "
    INSERT INTO reviews (user_id, product_id, rating, review)
    VALUES (1, ?, ?, ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('iii', $product_id, $rating, $review);
  if (!$stmt->execute()) {
      echo "Error: " . $mysqli->error;
  }

  // Update product rating
  $query = "
    UPDATE products
    SET rating = (SELECT AVG(rating) FROM reviews WHERE product_id = ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('i', $product_id);
  if (!$stmt->execute()) {
      echo "Error: " . $mysqli->error;
  }

  // Return new review ID
  return $mysqli->insert_id;
}

function getUserReviews($user_id) {
  global $mysqli;

  // Retrieve reviews for user
  $query = "
    SELECT r.id, p.name, r.rating, r.review
    FROM reviews r
    JOIN products p ON r.product_id = p.id
    WHERE r.user_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('i', $user_id);
  if (!$stmt->execute()) {
      echo "Error: " . $mysqli->error;
  }

  // Return reviews as array
  $reviews = array();
  while ($row = $stmt->fetch_assoc()) {
      $reviews[] = array(
          'id' => $row['id'],
          'product_name' => $row['name'],
          'rating' => $row['rating'],
          'review' => $row['review']
      );
  }
  return $reviews;
}

function getProductReviews($product_id) {
  global $mysqli;

  // Retrieve reviews for product
  $query = "
    SELECT r.id, u.username, r.rating, r.review
    FROM reviews r
    JOIN users u ON r.user_id = u.id
    WHERE r.product_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('i', $product_id);
  if (!$stmt->execute()) {
      echo "Error: " . $mysqli->error;
  }

  // Return reviews as array
  $reviews = array();
  while ($row = $stmt->fetch_assoc()) {
      $reviews[] = array(
          'id' => $row['id'],
          'username' => $row['username'],
          'rating' => $row['rating'],
          'review' => $row['review']
      );
  }
  return $reviews;
}

?>


$product_id = 123;
$rating = 5;
$review = "Great product!";

$review_id = createUserReview($product_id, $rating, $review);
echo "New review created with ID: $review_id";


$user_id = 1;

$reviews = getUserReviews($user_id);
foreach ($reviews as $review) {
    echo "Product: $review['product_name'], Rating: $review['rating'], Review: $review['review']";
}


$product_id = 123;

$reviews = getProductReviews($product_id);
foreach ($reviews as $review) {
    echo "Username: $review['username'], Rating: $review['rating'], Review: $review['review']";
}


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'username', 'password');
  }

  /**
   * Create a new review
   *
   * @param int $user_id User ID
   * @param int $product_id Product ID
   * @param string $review Review text
   * @param int $rating Rating (1-5)
   */
  public function createReview($user_id, $product_id, $review, $rating) {
    try {
      $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, review, rating) VALUES (?, ?, ?, ?)');
      $stmt->execute([$user_id, $product_id, $review, $rating]);
      return $this->db->lastInsertId();
    } catch (PDOException $e) {
      echo 'Error creating review: ' . $e->getMessage();
    }
  }

  /**
   * Get all reviews
   *
   * @return array Reviews data
   */
  public function getAllReviews() {
    try {
      $stmt = $this->db->prepare('SELECT * FROM reviews');
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error fetching reviews: ' . $e->getMessage();
    }
  }

  /**
   * Get review by ID
   *
   * @param int $id Review ID
   * @return array Review data
   */
  public function getReviewById($id) {
    try {
      $stmt = $this->db->prepare('SELECT * FROM reviews WHERE id = ?');
      $stmt->execute([$id]);
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error fetching review: ' . $e->getMessage();
    }
  }

  /**
   * Update a review
   *
   * @param int $id Review ID
   * @param string $review Review text
   * @param int $rating Rating (1-5)
   */
  public function updateReview($id, $review, $rating) {
    try {
      $stmt = $this->db->prepare('UPDATE reviews SET review = ?, rating = ? WHERE id = ?');
      $stmt->execute([$review, $rating, $id]);
    } catch (PDOException $e) {
      echo 'Error updating review: ' . $e->getMessage();
    }
  }

  /**
   * Delete a review
   *
   * @param int $id Review ID
   */
  public function deleteReview($id) {
    try {
      $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = ?');
      $stmt->execute([$id]);
    } catch (PDOException $e) {
      echo 'Error deleting review: ' . $e->getMessage();
    }
  }
}


$review = new Review();

// Create a new review
$user_id = 1;
$product_id = 2;
$review_text = 'Great product!';
$rating = 5;
$new_review_id = $review->createReview($user_id, $product_id, $review_text, $rating);

// Get all reviews
$reviews = $review->getAllReviews();

// Get a review by ID
$review_data = $review->getReviewById(1);

// Update a review
$review->updateReview(1, 'Updated review text!', 4);

// Delete a review
$review->deleteReview(1);


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function addReview($userId, $title, $content, $rating) {
    $query = "INSERT INTO reviews (user_id, title, content, rating) VALUES (:userId, :title, :content, :rating)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':userId', $userId);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    return $stmt->execute();
  }

  public function getReviews() {
    $query = "SELECT * FROM reviews";
    $stmt = $this->db->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getUserReviews($userId) {
    $query = "SELECT * FROM reviews WHERE user_id = :userId";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':userId', $userId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getReview($reviewId) {
    $query = "SELECT * FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $reviewId);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  public function updateReview($reviewId, $title, $content) {
    $query = "UPDATE reviews SET title = :title, content = :content WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $reviewId);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    return $stmt->execute();
  }

  public function deleteReview($reviewId) {
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $reviewId);
    return $stmt->execute();
  }
}


class ReviewController {
  private $reviewModel;

  public function __construct($reviewModel) {
    $this->reviewModel = $reviewModel;
  }

  public function addReview($userId, $title, $content, $rating) {
    return $this->reviewModel->addReview($userId, $title, $content, $rating);
  }

  public function getReviews() {
    return $this->reviewModel->getReviews();
  }

  public function getUserReviews($userId) {
    return $this->reviewModel->getUserReviews($userId);
  }

  public function getReview($reviewId) {
    return $this->reviewModel->getReview($reviewId);
  }

  public function updateReview($reviewId, $title, $content) {
    return $this->reviewModel->updateReview($reviewId, $title, $content);
  }

  public function deleteReview($reviewId) {
    return $this->reviewModel->deleteReview($reviewId);
  }
}


// index.php

require_once 'db.php';
require_once 'models/Review.php';
require_once 'controllers/ReviewController.php';

$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
$reviewModel = new Review($db);
$reviewController = new ReviewController($reviewModel);

// Handle user requests
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  if (isset($_POST['add-review'])) {
    $userId = $_SESSION['id'];
    $title = $_POST['title'];
    $content = $_POST['content'];
    $rating = $_POST['rating'];
    $result = $reviewController->addReview($userId, $title, $content, $rating);
    if ($result) {
      header('Location: index.php');
      exit();
    } else {
      echo 'Error adding review';
    }
  }

  // Update or delete reviews
  elseif (isset($_POST['update-review'])) {
    $reviewId = $_GET['id'];
    $title = $_POST['title'];
    $content = $_POST['content'];
    $result = $reviewController->updateReview($reviewId, $title, $content);
    if ($result) {
      header('Location: index.php');
      exit();
    } else {
      echo 'Error updating review';
    }
  }

  // Delete review
  elseif (isset($_POST['delete-review'])) {
    $reviewId = $_GET['id'];
    $result = $reviewController->deleteReview($reviewId);
    if ($result) {
      header('Location: index.php');
      exit();
    } else {
      echo 'Error deleting review';
    }
  }
}

// Display reviews
$reviews = $reviewController->getReviews();
foreach ($reviews as $review) {
  // Display review content here...
}


class UserReview {
    private $reviews = array();

    public function addReview($review) {
        $this->reviews[] = $review;
    }

    public function getAllReviews() {
        return $this->reviews;
    }

    public function getAverageRating() {
        if (empty($this->reviews)) {
            return 0;
        }
        $sum = array_sum(array_column($this->reviews, 'rating'));
        return round($sum / count($this->reviews));
    }

    public function getNumberOfReviews() {
        return count($this->reviews);
    }
}

class Review {
    public $rating;
    public $reviewText;

    function __construct($rating = 0, $reviewText = '') {
        $this->rating = $rating;
        $this->reviewText = $reviewText;
    }
}


$userReview = new UserReview();

$review1 = new Review(5, 'This product is great!');
$userReview->addReview($review1);

$review2 = new Review(4, 'This product is okay.');
$userReview->addReview($review2);

echo "Reviews:
";
foreach ($userReview->getAllReviews() as $review) {
    echo "Rating: {$review->rating}, Text: {$review->reviewText}
";
}

echo "Average Rating: {$userReview->getAverageRating()} out of 5
";
echo "Number of Reviews: {$userReview->getNumberOfReviews()}
";


class ReviewAPI {
    private $userReview;

    function __construct() {
        $this->userReview = new UserReview();
    }

    public function addReview($rating, $reviewText) {
        $newReview = new Review($rating, $reviewText);
        $this->userReview->addReview($newReview);
    }

    public function getReviews() {
        return $this->userReview->getAllReviews();
    }

    public function getAverageRating() {
        return $this->userReview->getAverageRating();
    }
}


$reviewAPI = new ReviewAPI();

$reviewAPI->addReview(5, 'This product is great!');
$reviewAPI->addReview(4, 'This product is okay.');

echo "Reviews:
";
foreach ($reviewAPI->getReviews() as $review) {
    echo "Rating: {$review->rating}, Text: {$review->reviewText}
";
}

echo "Average Rating: {$reviewAPI->getAverageRating()} out of 5
";


// config.php

<?php
define('DB_HOST', 'your_host');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

$pdo = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USERNAME, DB_PASSWORD);

?>


// review_functions.php

<?php
require_once('config.php');

function get_reviews($product_id) {
  $query = "SELECT * FROM reviews WHERE product_id = :product_id";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function add_review($user_id, $product_id, $rating, $review) {
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  return $stmt->execute();
}

?>


// index.php

<?php
require_once('config.php');
require_once('review_functions.php');

if (isset($_POST['add_review'])) {
  $user_id = $_SESSION['user']['id'];
  $product_id = $_GET['product_id'];
  $rating = $_POST['rating'];
  $review = $_POST['review'];

  if (add_review($user_id, $product_id, $rating, $review)) {
    header('Location: index.php?message=Review added successfully!');
    exit;
  }
}

$product_id = $_GET['product_id'];

$reviews = get_reviews($product_id);

?>

<!-- Review Form -->
<form action="" method="post">
  <label for="rating">Rating:</label>
  <select id="rating" name="rating">
    <?php for ($i = 1; $i <= 5; $i++) { ?>
      <option value="<?php echo $i; ?>"><?php echo $i; ?>/5</option>
    <?php } ?>
  </select>

  <label for="review">Review:</label>
  <textarea id="review" name="review"></textarea>

  <input type="submit" name="add_review" value="Add Review">
</form>

<!-- Reviews List -->
<h2>Reviews:</h2>
<ul>
  <?php foreach ($reviews as $review) { ?>
    <li>
      <p><?php echo $review['rating']; ?>/5 stars</p>
      <p><?php echo $review['review']; ?></p>
      <small>Posted by: <?php echo get_username($review['user_id']); ?> on <?php echo date('Y-m-d H:i:s', strtotime($review['created_at'])); ?></small>
    </li>
  <?php } ?>
</ul>

<?php
function get_username($user_id) {
  $query = "SELECT username FROM users WHERE id = :user_id";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->execute();
  return $stmt->fetchColumn();
}
?>


// config.php (database connection settings)
<?php

define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'reviews');

$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($mysqli->connect_error) {
    die("Connection failed: " . $mysqli->connect_error);
}

?>


// user_review.php (display reviews for a product)
<?php

require_once 'config.php';

$product_id = $_GET['product_id'];

$query = "SELECT * FROM products WHERE id = '$product_id'";
$result = $mysqli->query($query);

if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
        $product_name = $row['name'];
    }
} else {
    echo 'No product found';
}

$query = "SELECT * FROM reviews WHERE product_id = '$product_id' ORDER BY created_at DESC";
$result = $mysqli->query($query);

while ($review = $result->fetch_assoc()) {
    if ($review['approved'] == 1) { // Display only approved reviews
        echo '<div class="review">';
        echo '<h2>' . $review['user_name'] . '</h2>';
        echo '<p>Rating: ' . $review['rating'] . '/5</p>';
        echo '<p>' . $review['review'] . '</p>';
        echo '</div>';
    }
}

?>


// add_review.php (add a new review)
<?php

require_once 'config.php';

if (isset($_POST['submit'])) {
    $user_id = $_SESSION['user_id'];
    $product_id = $_GET['product_id'];
    $rating = $_POST['rating'];
    $review = $_POST['review'];

    $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES ('$user_id', '$product_id', '$rating', '$review')";
    $mysqli->query($query);

    echo 'Review added successfully!';
} else {
    // Display form to add a new review
}

?>


// admin_review.php (approve or reject reviews)
<?php

require_once 'config.php';

$query = "SELECT * FROM reviews WHERE approved = 0";
$result = $mysqli->query($query);

while ($review = $result->fetch_assoc()) {
    if (isset($_POST['approved_' . $review['id']])) {
        $query = "UPDATE reviews SET approved = 1 WHERE id = '$review[id]'";
        $mysqli->query($query);
    }

    echo '<div class="review">';
    echo '<h2>' . $review['user_name'] . '</h2>';
    echo '<p>Rating: ' . $review['rating'] . '/5</p>';
    echo '<p>' . $review['review'] . '</p>';
    echo '<form action="" method="post">';
    echo '<input type="hidden" name="approved_' . $review['id'] . '" value="1">';
    echo '<button type="submit">Approve</button>';
    echo '</form>';
    echo '</div>';
}
?>


// review.php

class Review {
  private $id;
  private $user_id;
  private $product_id;
  private $rating;
  private $review;

  public function __construct($data) {
    $this->id = isset($data['id']) ? $data['id'] : null;
    $this->user_id = $data['user_id'];
    $this->product_id = $data['product_id'];
    $this->rating = $data['rating'];
    $this->review = $data['review'];
  }

  public function getRating() {
    return $this->rating;
  }

  public function getReview() {
    return $this->review;
  }
}


// review.controller.php

class ReviewController {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function getAllReviews() {
    $query = "SELECT * FROM reviews";
    return $this->db->fetchAll($query);
  }

  public function getReviewById($id) {
    $query = "SELECT * FROM reviews WHERE id = :id";
    $params = array(":id" => $id);
    return $this->db->fetchAssoc($query, $params);
  }

  public function createReview($data) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, review)
              VALUES (:user_id, :product_id, :rating, :review)";
    $params = array(
      ":user_id" => $data['user_id'],
      ":product_id" => $data['product_id'],
      ":rating" => $data['rating'],
      ":review" => $data['review']
    );
    return $this->db->exec($query, $params);
  }

  public function updateReview($id, $data) {
    $query = "UPDATE reviews SET user_id = :user_id, product_id = :product_id, rating = :rating, review = :review
              WHERE id = :id";
    $params = array(
      ":user_id" => $data['user_id'],
      ":product_id" => $data['product_id'],
      ":rating" => $data['rating'],
      ":review" => $data['review'],
      ":id" => $id
    );
    return $this->db->exec($query, $params);
  }

  public function deleteReview($id) {
    $query = "DELETE FROM reviews WHERE id = :id";
    $params = array(":id" => $id);
    return $this->db->exec($query, $params);
  }
}


// db.php

class DB {
  private static $instance;

  public static function getInstance() {
    if (!self::$instance) {
      self::$instance = new PDO('sqlite:reviews.db');
    }
    return self::$instance;
  }

  public function fetchAll($query, $params = array()) {
    $stmt = $this->prepare($query);
    $stmt->execute($params);
    return $stmt->fetchAll();
  }

  public function fetchAssoc($query, $params = array()) {
    $stmt = $this->prepare($query);
    $stmt->execute($params);
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  public function exec($query, $params = array()) {
    $stmt = $this->prepare($query);
    $stmt->execute($params);
    return $stmt->rowCount();
  }
}


// index.php

require_once 'db.php';
require_once 'review.controller.php';

$db = DB::getInstance();

$reviewController = new ReviewController($db);

// Create a new review
$data = array(
  'user_id' => 1,
  'product_id' => 1,
  'rating' => 5,
  'review' => 'Great product!'
);
$reviewController->createReview($data);

// Get all reviews
$reviews = $reviewController->getAllReviews();
print_r($reviews);

// Get a review by ID
$review = $reviewController->getReviewById(1);
echo $review['rating'];

// Update a review
$data = array(
  'user_id' => 2,
  'product_id' => 2,
  'rating' => 4,
  'review' => 'Good product!'
);
$reviewController->updateReview(1, $data);

// Delete a review
$reviewController->deleteReview(1);


<?php

class Review {
    private $db;

    public function __construct() {
        $this->db = new Database();
    }

    // Function to add review
    public function add_review($data) {
        try {
            $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
                      VALUES (:product_id, :user_id, :rating, :comment)";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':product_id', $data['product_id']);
            $stmt->bindParam(':user_id', $data['user_id']);
            $stmt->bindParam(':rating', $data['rating']);
            $stmt->bindParam(':comment', $data['comment']);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to get all reviews for a product
    public function get_reviews($product_id) {
        try {
            $query = "SELECT * FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':product_id', $product_id);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to update review
    public function update_review($data) {
        try {
            $query = "UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', $data['review_id']);
            $stmt->bindParam(':rating', $data['new_rating']);
            $stmt->bindParam(':comment', $data['new_comment']);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to delete review
    public function delete_review($id) {
        try {
            $query = "DELETE FROM reviews WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', $id);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

}

// Usage example
$review = new Review();

// Add review
$data = array(
    'product_id' => 1,
    'user_id' => 1,
    'rating' => 5,
    'comment' => "Good product!"
);
if ($review->add_review($data)) {
    echo "Review added successfully!";
}

// Get reviews for a product
$product_id = 1;
$reviews = $review->get_reviews($product_id);
foreach ($reviews as $review) {
    echo "Rating: " . $review['rating'] . ", Comment: " . $review['comment'];
}

// Update review
$data = array(
    'review_id' => 1,
    'new_rating' => 4,
    'new_comment' => "Better product!"
);
if ($review->update_review($data)) {
    echo "Review updated successfully!";
}

// Delete review
$id = 1;
if ($review->delete_review($id)) {
    echo "Review deleted successfully!";
}


<?php

// Connect to database
$dsn = 'mysql:host=localhost;dbname=your_database';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// Function to display all reviews for a product
function display_reviews($product_id) {
    global $pdo;
    
    // Query to retrieve reviews for the given product
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    
    $reviews = $stmt->fetchAll();
    
    return $reviews;
}

// Function to display review form for a user
function display_review_form($user_id) {
    global $pdo;
    
    // Query to retrieve products that the user has reviewed or wants to review
    $stmt = $pdo->prepare('SELECT * FROM products WHERE id NOT IN (SELECT product_id FROM reviews WHERE user_id = :user_id)');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    
    $products = $stmt->fetchAll();
    
    // Display form to select a product and submit review
    ?>
    <form action="" method="post">
        <select name="product_id" id="product_id">
            <?php foreach ($products as $product) : ?>
                <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?></option>
            <?php endforeach; ?>
        </select>
        
        <input type="text" name="title" id="title" placeholder="Enter review title">
        <textarea name="content" id="content" cols="30" rows="10"></textarea>
        
        <input type="number" name="rating" id="rating" min="1" max="5" step="1">
        
        <button type="submit">Submit Review</button>
    </form>
    
    <?php
}

// Function to submit a review for a user
function submit_review($user_id, $product_id, $title, $content, $rating) {
    global $pdo;
    
    // Insert new review into database
    $stmt = $pdo->prepare('INSERT INTO reviews (user_id, product_id, title, content, rating) VALUES (:user_id, :product_id, :title, :content, :rating)');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    $stmt->execute();
}

// Example usage:

// Display reviews for a product
$product_id = 1;
$reviews = display_reviews($product_id);

// Display review form for a user
$user_id = 1;
display_review_form($user_id);

?>


// Include database connection settings
require 'db.php';

function create_review($data) {
  $sql = "INSERT INTO reviews (user_id, content, rating) VALUES (:user_id, :content, :rating)";
  $stmt = $pdo->prepare($sql);
  $stmt->execute([
    ':user_id' => $data['user_id'],
    ':content' => $data['content'],
    ':rating' => $data['rating']
  ]);
  return $pdo->lastInsertId();
}

function get_reviews() {
  $sql = "SELECT r.id, u.name, r.content, r.rating FROM reviews r JOIN users u ON r.user_id = u.id";
  $stmt = $pdo->query($sql);
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function update_review($id, $data) {
  $sql = "UPDATE reviews SET content = :content, rating = :rating WHERE id = :id";
  $stmt = $pdo->prepare($sql);
  $stmt->execute([
    ':id' => $id,
    ':content' => $data['content'],
    ':rating' => $data['rating']
  ]);
}

function delete_review($id) {
  $sql = "DELETE FROM reviews WHERE id = :id";
  $stmt = $pdo->prepare($sql);
  $stmt->execute([
    ':id' => $id
  ]);
}


$data = [
  'user_id' => 1,
  'content' => 'This is a great product!',
  'rating' => 5
];
$new_review_id = create_review($data);
echo "New review created with ID: $new_review_id";


$reviews = get_reviews();
foreach ($reviews as $review) {
  echo "$review[name] rated this product $review[rating]/5: $review[content]";
}


$data = [
  'content' => 'This is an updated review!',
  'rating' => 4
];
update_review(1, $data);
echo "Review with ID 1 updated successfully!";


delete_review(2);
echo "Review with ID 2 deleted successfully!";


function add_review($product_id, $rating, $review, $user_id) {
  global $db; // assuming you're using a database connection object

  $sql = "INSERT INTO reviews (product_id, rating, review, user_id) VALUES (?, ?, ?, ?)";
  $stmt = $db->prepare($sql);
  $stmt->execute([$product_id, $rating, $review, $user_id]);

  return $db->lastInsertId();
}

function get_reviews($product_id) {
  global $db; // assuming you're using a database connection object

  $sql = "SELECT * FROM reviews WHERE product_id = ?";
  $stmt = $db->prepare($sql);
  $stmt->execute([$product_id]);

  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function get_review($review_id) {
  global $db; // assuming you're using a database connection object

  $sql = "SELECT * FROM reviews WHERE id = ?";
  $stmt = $db->prepare($sql);
  $stmt->execute([$review_id]);

  return $stmt->fetch(PDO::FETCH_ASSOC);
}

function delete_review($review_id) {
  global $db; // assuming you're using a database connection object

  $sql = "DELETE FROM reviews WHERE id = ?";
  $stmt = $db->prepare($sql);
  $stmt->execute([$review_id]);
}


// add a new review
$user_id = 1;
$product_id = 123;
$rating = 5;
$review = 'This product is amazing!';

$review_id = add_review($product_id, $rating, $review, $user_id);

// get all reviews for a product
$product_reviews = get_reviews($product_id);
print_r($product_reviews); // output: array of review objects

// get a single review by ID
$single_review = get_review($review_id);
print_r($single_review); // output: review object

// delete a review
delete_review($review_id);


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  /**
   * Add a new review to the database.
   *
   * @param int $user_id The ID of the user who left the review.
   * @param int $product_id The ID of the product being reviewed.
   * @param int $rating The rating given by the user (1-5).
   * @param string $review The text of the review.
   *
   * @return bool True if the review was added successfully, false otherwise.
   */
  public function addReview($user_id, $product_id, $rating, $review) {
    try {
      $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)');
      $stmt->execute(array($user_id, $product_id, $rating, $review));
      return true;
    } catch (PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Get all reviews for a specific product.
   *
   * @param int $product_id The ID of the product being reviewed.
   *
   * @return array An array of review objects, each containing user and rating information.
   */
  public function getReviews($product_id) {
    try {
      $stmt = $this->db->prepare('SELECT u.name, r.rating, r.review FROM reviews r INNER JOIN users u ON r.user_id = u.id WHERE r.product_id = ?');
      $stmt->execute(array($product_id));
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
      return array();
    }
  }

  /**
   * Get all reviews left by a specific user.
   *
   * @param int $user_id The ID of the user who left the reviews.
   *
   * @return array An array of review objects, each containing product and rating information.
   */
  public function getUserReviews($user_id) {
    try {
      $stmt = $this->db->prepare('SELECT p.title, r.rating, r.review FROM reviews r INNER JOIN products p ON r.product_id = p.id WHERE r.user_id = ?');
      $stmt->execute(array($user_id));
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error getting user reviews: " . $e->getMessage();
      return array();
    }
  }
}


$review = new Review();

// Add a new review
$user_id = 1;
$product_id = 2;
$rating = 4;
$review_text = 'This product is great!';
$success = $review->addReview($user_id, $product_id, $rating, $review_text);
echo "Added review: " . ($success ? 'true' : 'false') . "
";

// Get all reviews for a specific product
$product_id = 2;
$reviews = $review->getReviews($product_id);
foreach ($reviews as $review) {
  echo "Review by " . $review['name'] . ": Rating: " . $review['rating'] . ", Review text: " . $review['review'] . "
";
}

// Get all reviews left by a specific user
$user_id = 1;
$reviews = $review->getUserReviews($user_id);
foreach ($reviews as $review) {
  echo "Review of " . $review['title'] . ": Rating: " . $review['rating'] . ", Review text: " . $review['review'] . "
";
}


// database connection settings
$dsn = 'mysql:host=localhost;dbname=your_database';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// function to create a review
function create_review($data) {
    $query = "INSERT INTO reviews SET user_id = :user_id, product_id = :product_id, rating = :rating, review = :review";
    $stmt = $pdo->prepare($query);
    $stmt->execute([
        ':user_id' => $data['user_id'],
        ':product_id' => $data['product_id'],
        ':rating' => $data['rating'],
        ':review' => $data['review']
    ]);
    return $pdo->lastInsertId();
}

// function to get all reviews
function get_reviews() {
    $query = "SELECT * FROM reviews";
    $stmt = $pdo->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// function to update a review
function update_review($id, $data) {
    $query = "UPDATE reviews SET user_id = :user_id, product_id = :product_id, rating = :rating, review = :review WHERE id = :id";
    $stmt = $pdo->prepare($query);
    $stmt->execute([
        ':id' => $id,
        ':user_id' => $data['user_id'],
        ':product_id' => $data['product_id'],
        ':rating' => $data['rating'],
        ':review' => $data['review']
    ]);
}

// function to delete a review
function delete_review($id) {
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $pdo->prepare($query);
    $stmt->execute([
        ':id' => $id
    ]);
}


// create a new review
$data = [
    'user_id' => 1,
    'product_id' => 10,
    'rating' => 5,
    'review' => 'Great product!'
];
$id = create_review($data);
echo "Review created with ID $id
";

// get all reviews
$reviews = get_reviews();
foreach ($reviews as $review) {
    echo "$review[id] - User ID: $review[user_id], Product ID: $review[product_id], Rating: $review[rating], Review: $review[review]
";
}

// update a review
update_review(1, [
    'user_id' => 2,
    'product_id' => 11,
    'rating' => 4,
    'review' => 'Good product.'
]);
echo "Review updated with ID 1
";

// delete a review
delete_review(1);
echo "Review deleted with ID 1
";


function createReview($product_id, $user_id, $rating, $review) {
  global $db;
  $sql = "INSERT INTO reviews (product_id, user_id, rating, review)
          VALUES (:product_id, :user_id, :rating, :review)";
  $stmt = $db->prepare($sql);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  return $stmt->execute();
}


function getReviews($product_id) {
  global $db;
  $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
  $stmt = $db->prepare($sql);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}


function updateReview($review_id, $rating, $review) {
  global $db;
  $sql = "UPDATE reviews SET rating = :rating, review = :review WHERE id = :id";
  $stmt = $db->prepare($sql);
  $stmt->bindParam(':id', $review_id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  return $stmt->execute();
}


function deleteReview($review_id) {
  global $db;
  $sql = "DELETE FROM reviews WHERE id = :id";
  $stmt = $db->prepare($sql);
  $stmt->bindParam(':id', $review_id);
  return $stmt->execute();
}


$db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');

// Create a new review
$product_id = 1;
$user_id = 2;
$rating = 4;
$review = "Great product!";
createReview($product_id, $user_id, $rating, $review);

// Read reviews for a product
$product_reviews = getReviews(1);
print_r($product_reviews);

// Update an existing review
$update_review = array(
  'rating' => 5,
  'review' => "Best product ever!"
);
updateReview(1, $update_review['rating'], $update_review['review']);

// Delete a review
deleteReview(2);


<?php

define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

?>


<?php

function connectToDatabase() {
  $conn = new PDO("mysql:host=".DB_HOST.";dbname=".DB_NAME, DB_USER, DB_PASSWORD);
  return $conn;
}

function createUser($username, $email, $password) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("INSERT INTO Users (username, email, password) VALUES (:username, :email, :password)");
  $stmt->bindParam(':username', $username);
  $stmt->bindParam(':email', $email);
  $stmt->bindParam(':password', $password);
  $stmt->execute();
}

function getUserReviews($userId) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("SELECT * FROM Reviews WHERE user_id = :user_id");
  $stmt->bindParam(':user_id', $userId);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function addReview($productId, $productName, $reviewText, $rating, $userId) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("INSERT INTO Reviews (product_name, review, rating, user_id) VALUES (:product_name, :review_text, :rating, :user_id)");
  $stmt->bindParam(':product_name', $productName);
  $stmt->bindParam(':review_text', $reviewText);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':user_id', $userId);
  $stmt->execute();
}

?>


<?php

require_once 'config.php';
require_once 'functions.php';

if (isset($_POST['username']) && isset($_POST['password'])) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("SELECT * FROM Users WHERE username = :username AND password = :password");
  $stmt->bindParam(':username', $_POST['username']);
  $stmt->bindParam(':password', $_POST['password']);
  $stmt->execute();
  if ($stmt->rowCount() > 0) {
    session_start();
    $_SESSION['user_id'] = $conn->lastInsertId();
    header('Location: dashboard.php');
    exit;
  } else {
    echo 'Invalid username or password';
  }
}

?>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="text" name="username" placeholder="Username">
  <input type="password" name="password" placeholder="Password">
  <button type="submit">Login</button>
</form>


<?php

require_once 'config.php';
require_once 'functions.php';

session_start();

if (!isset($_SESSION['user_id'])) {
  header('Location: login.php');
  exit;
}

$userReviews = getUserReviews($_SESSION['user_id']);

?>

<h1>My Reviews:</h1>
<ul>
  <?php foreach ($userReviews as $review) { ?>
    <li><?php echo $review['product_name']; ?> - <?php echo $review['rating']; ?>/5</li>
    <p><?php echo $review['review']; ?></p>
  <?php } ?>
</ul>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="text" name="product_name" placeholder="Product Name">
  <textarea name="review_text" placeholder="Review"></textarea>
  <select name="rating">
    <option value="1">1/5</option>
    <option value="2">2/5</option>
    <option value="3">3/5</option>
    <option value="4">4/5</option>
    <option value="5">5/5</option>
  </select>
  <button type="submit">Add Review</button>
</form>

<?php

if (isset($_POST['product_name']) && isset($_POST['review_text']) && isset($_POST['rating'])) {
  addReview($_POST['product_name'], $_POST['product_name'], $_POST['review_text'], $_POST['rating'], $_SESSION['user_id']);
}

?>


function addReview($userId, $reviewText) {
    global $reviews;

    // Check if the user already has a review
    foreach ($reviews as $user => $reviewsByUser) {
        if ($user == $userId) {
            array_push($reviews[$user], array('text' => $reviewText));
            return true;
        }
    }

    // Create new entry for this user
    $reviews[$userId] = array(array('text' => $reviewText));

    return true;
}


function getReviews($userId) {
    global $reviews;

    if (isset($reviews[$userId])) {
        return $reviews[$userId];
    } else {
        return array();
    }
}


$reviews = array();

// Add a new review from user 1
addReview(1, 'I loved this product!');

// Get all reviews from user 1
$reviewsFromUser1 = getReviews(1);
print_r($reviewsFromUser1); // Output: Array ( [0] => Array ( [text] => I loved this product! ) )

// Add another review from user 1
addReview(1, 'It was okay...');

// Get all reviews from user 1 again
$reviewsFromUser1 = getReviews(1);
print_r($reviewsFromUser1); // Output: Array ( [0] => Array ( [text] => I loved this product! ) [1] => Array ( [text] => It was okay... ) )


<?php

// database connection settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

function connectToDatabase() {
    $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

function createReview($product_id, $user_id, $rating, $comment) {
    $conn = connectToDatabase();
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
            VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiii", $product_id, $user_id, $rating, $comment);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error creating review: " . $stmt->error;
        return false;
    }
}

function getReviews() {
    $conn = connectToDatabase();
    $sql = "SELECT * FROM reviews";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "<p>Product ID: " . $row["product_id"] . "</p>";
            echo "<p>User ID: " . $row["user_id"] . "</p>";
            echo "<p>Rating: " . $row["rating"] . "/5</p>";
            echo "<p>Comment: " . $row["comment"] . "</p><hr>";
        }
    } else {
        echo "No reviews found.";
    }
}

function updateReview($review_id, $new_rating, $new_comment) {
    $conn = connectToDatabase();
    $sql = "UPDATE reviews SET rating = ?, comment = ?
            WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iii", $new_rating, $new_comment, $review_id);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error updating review: " . $stmt->error;
        return false;
    }
}

function deleteReview($review_id) {
    $conn = connectToDatabase();
    $sql = "DELETE FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $review_id);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error deleting review: " . $stmt->error;
        return false;
    }
}

?>


// Create a new review
createReview(1, 2, 4, "Great product!");

// Get all reviews
getReviews();

// Update an existing review
updateReview(1, 5, "Excellent product!");

// Delete a review
deleteReview(1);


<?php

// Configuration
require_once 'config.php';

// Connect to database
$db = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USER, DB_PASSWORD);

// Function to get all reviews for a product
function getReviews($productId) {
  global $db;
  $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to add a new review
function addReview($userId, $productId, $rating, $comment) {
  global $db;
  $review = array(
    'user_id' => $userId,
    'product_id' => $productId,
    'rating' => $rating,
    'comment' => $comment
  );
  $stmt = $db->prepare("INSERT INTO reviews SET user_id = :user_id, product_id = :product_id, rating = :rating, comment = :comment");
  $stmt->execute($review);
}

// Function to delete a review
function deleteReview($id) {
  global $db;
  $stmt = $db->prepare("DELETE FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $id);
  $stmt->execute();
}

// Function to update a review
function updateReview($id, $rating, $comment) {
  global $db;
  $review = array(
    'rating' => $rating,
    'comment' => $comment
  );
  $stmt = $db->prepare("UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id");
  $stmt->bindParam(':id', $id);
  $stmt->execute($review);
}

// Example usage:
if (isset($_POST['action'])) {
  switch ($_POST['action']) {
    case 'get_reviews':
      echo json_encode(getReviews($_POST['product_id']));
      break;
    case 'add_review':
      addReview($_POST['user_id'], $_POST['product_id'], $_POST['rating'], $_POST['comment']);
      break;
    case 'delete_review':
      deleteReview($_POST['id']);
      break;
    case 'update_review':
      updateReview($_POST['id'], $_POST['rating'], $_POST['comment']);
      break;
  }
}


// configuration.php
<?php
    $servername = "localhost";
    $username = "your_username";
    $password = "your_password";
    $dbname = "reviews_db";

    // Create connection
    $conn = new mysqli($servername, $username, $password, $dbname);

    // Check connection
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
?>


// functions.php
<?php
    include 'configuration.php';

    function add_review($title, $content, $rating) {
        global $conn;

        // Check if review already exists for the user
        $query = "SELECT * FROM reviews WHERE title='$title' AND content='$content'";
        $result = $conn->query($query);
        if ($result->num_rows > 0) {
            return "Review already exists.";
        }

        // Add new review
        $sql = "INSERT INTO reviews (title, content, rating)
                VALUES ('$title', '$content', $rating)";
        if ($conn->query($sql) === TRUE) {
            echo "New review created successfully";
        } else {
            return "Error creating review: " . $conn->error;
        }
    }

    function view_reviews() {
        global $conn;

        // Get all reviews
        $sql = "SELECT * FROM reviews ORDER BY date_added DESC";
        $result = $conn->query($sql);

        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                echo "Title: " . $row["title"] . "<br>Content: " . $row["content"]. "<br>Rating: " . $row["rating"]. "<br>Date Added: " . $row["date_added"]. "<hr>";
            }
        } else {
            return "No reviews available.";
        }
    }

    function delete_review($id) {
        global $conn;

        // Check if review exists
        $query = "SELECT * FROM reviews WHERE id='$id'";
        $result = $conn->query($query);
        if ($result->num_rows > 0) {
            // Delete review
            $sql = "DELETE FROM reviews WHERE id=$id";
            if ($conn->query($sql) === TRUE) {
                return "Review deleted successfully.";
            } else {
                return "Error deleting review: " . $conn->error;
            }
        } else {
            return "Review does not exist.";
        }
    }

?>


// index.php (example usage)
<?php
    include 'functions.php';

    // Add a new review
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        $title = $_POST['title'];
        $content = $_POST['content'];
        $rating = $_POST['rating'];

        echo add_review($title, $content, $rating);
    }

    // View all reviews
    view_reviews();

    // Delete a review by id
    if (isset($_GET['delete_id'])) {
        echo delete_review($_GET['delete_id']);
    }
?>


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
  }

  // Create a review
  public function createReview($userId, $productId, $rating, $reviewText) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (:user_id, :product_id, :rating, :review_text)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $reviewText);
    return $stmt->execute();
  }

  // Read all reviews
  public function getAllReviews() {
    $query = "SELECT * FROM reviews";
    $stmt = $this->db->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Update a review
  public function updateReview($reviewId, $newRating, $newReviewText) {
    $query = "UPDATE reviews SET rating = :rating, review_text = :review_text WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $reviewId);
    $stmt->bindParam(':rating', $newRating);
    $stmt->bindParam(':review_text', $newReviewText);
    return $stmt->execute();
  }

  // Delete a review
  public function deleteReview($reviewId) {
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $reviewId);
    return $stmt->execute();
  }
}


$review = new Review();

// Create a review
$user_id = 1;
$product_id = 1;
$rating = 4;
$review_text = 'Great product!';
$created = $review->createReview($user_id, $product_id, $rating, $review_text);
echo "Created review with id: " . $this->db->lastInsertId();

// Read all reviews
$reviews = $review->getAllReviews();
foreach ($reviews as $review) {
  echo 'User ID: ' . $review['user_id'] . ', Product ID: ' . $review['product_id'] . ', Rating: ' . $review['rating'];
}

// Update a review
$reviewId = 1;
$new_rating = 5;
$new_review_text = 'Excellent product!';
$updated = $review->updateReview($reviewId, $new_rating, $new_review_text);
echo "Updated review with id: $reviewId";

// Delete a review
$deleted = $review->deleteReview(2);
echo "Deleted review with id: 2";


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  /**
   * Add a new review to the database.
   *
   * @param int $user_id The ID of the user who wrote the review.
   * @param string $product_name The name of the product being reviewed.
   * @param int $rating The rating given by the user (1-5).
   * @param string $comment The comment left by the user.
   *
   * @return void
   */
  public function addReview($user_id, $product_name, $rating, $comment) {
    $stmt = $this->db->prepare("INSERT INTO reviews SET user_id = ?, product_name = ?, rating = ?, comment = ?");
    $stmt->execute([$user_id, $product_name, $rating, $comment]);
  }

  /**
   * Get all reviews for a specific user.
   *
   * @param int $user_id The ID of the user whose reviews you want to retrieve.
   *
   * @return array An array of review data.
   */
  public function getReviews($user_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = ?");
    $stmt->execute([$user_id]);
    return $stmt->fetchAll();
  }

  /**
   * Update an existing review in the database.
   *
   * @param int $review_id The ID of the review you want to update.
   * @param string $product_name The new name of the product being reviewed.
   * @param int $rating The new rating given by the user (1-5).
   * @param string $comment The new comment left by the user.
   *
   * @return void
   */
  public function updateReview($review_id, $product_name, $rating, $comment) {
    $stmt = $this->db->prepare("UPDATE reviews SET product_name = ?, rating = ?, comment = WHERE id = ?");
    $stmt->execute([$product_name, $rating, $comment, $review_id]);
  }
}


// Initialize the database connection
$db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');

// Create a new Review object
$review = new Review($db);

// Add a review for a user
$review->addReview(1, 'Product A', 5, 'Great product!');

// Retrieve all reviews for a user
$reviews = $review->getReviews(1);
print_r($reviews);

// Update an existing review
$review->updateReview(1, 'Product B', 4, 'Good product!');


class Review {
  private $id;
  private $product_id;
  private $user_id;
  private $rating;
  private $comment;

  public function __construct($data) {
    $this->id = isset($data['id']) ? $data['id'] : null;
    $this->product_id = isset($data['product_id']) ? $data['product_id'] : null;
    $this->user_id = isset($data['user_id']) ? $data['user_id'] : null;
    $this->rating = isset($data['rating']) ? $data['rating'] : null;
    $this->comment = isset($data['comment']) ? $data['comment'] : '';
  }

  public function getId() {
    return $this->id;
  }

  public function getProductID() {
    return $this->product_id;
  }

  public function getUserID() {
    return $this->user_id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public static function createReview($data) {
    // Sanitize and validate input data
    $sanitizedData = self::sanitizeInput($data);

    // Insert review into database
    $query = "INSERT INTO reviews SET product_id = ?, user_id = ?, rating = ?, comment = ?";
    $stmt = db()->prepare($query);
    $stmt->execute([$sanitizedData['product_id'], $sanitizedData['user_id'], $sanitizedData['rating'], $sanitizedData['comment']]);

    // Return new review ID
    return db()->insertId();
  }

  public static function getReviewsForProduct($productId) {
    // Retrieve reviews from database
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = db()->prepare($query);
    $stmt->execute([$productId]);
    return $stmt->fetchAll();
  }

  private static function sanitizeInput($data) {
    // Sanitize and validate input data (e.g., trim, filter special chars)
    $sanitizedData = [];
    foreach ($data as $key => $value) {
      switch ($key) {
        case 'rating':
          $sanitizedData[$key] = intval($value);
          break;
        default:
          $sanitizedData[$key] = trim($value);
      }
    }
    return $sanitizedData;
  }
}


// Create a new review for product ID 1, user ID 1, rating 5, and comment "Great product!"
$reviewId = Review::createReview([
  'product_id' => 1,
  'user_id' => 1,
  'rating' => 5,
  'comment' => "Great product!",
]);

// Retrieve reviews for product ID 1
$reviews = Review::getReviewsForProduct(1);

// Display reviews
foreach ($reviews as $review) {
  echo "Review ID: {$review['id']}
";
  echo "Rating: {$review['rating']}
";
  echo "Comment: {$review['comment']}

";
}


// Connect to database
$servername = "localhost";
$username = "username";
$password = "password";

$conn = new mysqli($servername, $username, $password);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

$conn->select_db('database_name');

// User Review class
class UserReview {
    private $id;
    private $user_id;
    private $product_id;
    private $rating;
    private $review_text;

    public function __construct($user_id, $product_id, $rating, $review_text) {
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->review_text = $review_text;
    }

    public function save() {
        // Insert into reviews table
        global $conn;
        $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (?, ?, ?, ?)");
        $stmt->bind_param('iiis', $this->user_id, $this->product_id, $this->rating, $this->review_text);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    }

    public static function get_reviews_for_product($product_id) {
        // Retrieve reviews for a specific product
        global $conn;
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = ?");
        $stmt->bind_param('i', $product_id);
        if ($stmt->execute()) {
            return $stmt->get_result();
        } else {
            return false;
        }
    }

    public static function get_review($review_id) {
        // Retrieve a specific review
        global $conn;
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE id = ?");
        $stmt->bind_param('i', $review_id);
        if ($stmt->execute()) {
            return $stmt->get_result()->fetch_assoc();
        } else {
            return false;
        }
    }

    public static function update_review($review_id, $new_rating, $new_text) {
        // Update a specific review
        global $conn;
        $stmt = $conn->prepare("UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?");
        $stmt->bind_param('iis', $new_rating, $new_text, $review_id);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    }

    public static function delete_review($review_id) {
        // Delete a specific review
        global $conn;
        $stmt = $conn->prepare("DELETE FROM reviews WHERE id = ?");
        $stmt->bind_param('i', $review_id);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    }
}


// Create a new user review
$user_review = new UserReview(1, 1, 4, "Great product!");
if ($user_review->save()) {
    echo "Review saved successfully!";
} else {
    echo "Error saving review.";
}

// Retrieve reviews for a specific product
$reviews_for_product = UserReview::get_reviews_for_product(1);
foreach ($reviews_for_product as $review) {
    echo "Rating: " . $review['rating'] . ", Review Text: " . $review['review_text'];
}

// Retrieve a specific review
$specific_review = UserReview::get_review(1);
echo "Rating: " . $specific_review['rating'] . ", Review Text: " . $specific_review['review_text'];

// Update a specific review
if (UserReview::update_review(1, 5, "Best product ever!")) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review.";
}

// Delete a specific review
if (UserReview::delete_review(1)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}


// Review.php
class Review {
    private $id;
    private $product_id;
    private $user_id;
    private $rating;
    private $comment;

    public function __construct($data) {
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->product_id = isset($data['product_id']) ? $data['product_id'] : null;
        $this->user_id = isset($data['user_id']) ? $data['user_id'] : null;
        $this->rating = isset($data['rating']) ? $data['rating'] : null;
        $this->comment = isset($data['comment']) ? $data['comment'] : '';
    }

    public function getId() {
        return $this->id;
    }

    public function getProductId() {
        return $this->product_id;
    }

    public function getUserId() {
        return $this->user_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


// ReviewController.php
class ReviewController {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview($data) {
        $review = new Review($data);
        if ($review->getRating() < 1 || $review->getRating() > 5) {
            throw new Exception('Invalid rating');
        }
        $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
                  VALUES (:product_id, :user_id, :rating, :comment)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $review->getProductId());
        $stmt->bindParam(':user_id', $review->getUserId());
        $stmt->bindParam(':rating', $review->getRating());
        $stmt->bindParam(':comment', $review->getComment());
        if ($stmt->execute()) {
            return 'Review created successfully';
        } else {
            throw new Exception('Failed to create review');
        }
    }

    public function getReviews($productId) {
        $query = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
    }

    public function getAverageRating($productId) {
        $query = "SELECT AVG(rating) AS average_rating
                  FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        return $stmt->fetchColumn();
    }
}


// Create a new database connection
$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

// Create a new review controller instance
$reviewController = new ReviewController($db);

// Create a new review data array
$data = [
    'product_id' => 1,
    'user_id' => 1,
    'rating' => 4,
    'comment' => 'Great product!'
];

// Create a new review using the controller
try {
    $result = $reviewController->createReview($data);
    echo $result;
} catch (Exception $e) {
    echo $e->getMessage();
}

// Get all reviews for a specific product
$productId = 1;
$reviews = $reviewController->getReviews($productId);

// Print the average rating for a specific product
echo 'Average rating: ' . $reviewController->getAverageRating($productId);


<?php

// Configuration
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = mysqli_connect($db_host, $db_username, $db_password, $db_name);

if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

function createReview($user_id, $product_name, $rating, $review) {
    global $conn;
    
    // Prepare query
    $query = "INSERT INTO reviews (user_id, product_name, rating, review)
              VALUES (?, ?, ?, ?)";
    $stmt = mysqli_prepare($conn, $query);
    if (!$stmt) {
        die("Prepare failed: " . mysqli_error($conn));
    }

    // Bind parameters
    mysqli_stmt_bind_param($stmt, 'iids', $user_id, $product_name, $rating, $review);

    // Execute query
    if (!mysqli_stmt_execute($stmt)) {
        die("Execute failed: " . mysqli_error($conn));
    }
}

function getReviews() {
    global $conn;
    
    // Prepare query
    $query = "SELECT r.id, u.name AS user_name, r.product_name, r.rating, r.review
              FROM reviews r JOIN users u ON r.user_id = u.id";
    $result = mysqli_query($conn, $query);
    
    if (!$result) {
        die("Query failed: " . mysqli_error($conn));
    }

    // Fetch results
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<h2>" . $row['user_name'] . " - " . $row['product_name'] . "</h2>";
        echo "<p>Rating: " . $row['rating'] . "/5</p>";
        echo "<p>" . $row['review'] . "</p>";
    }
}

// Example usage
createReview(1, 'Product 1', 4.5, 'Great product!');
getReviews();

mysqli_close($conn);

?>


<?php require 'review.php'; ?>


<?php

// Database connection settings
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database_name');

function get_db_connection() {
    $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Create a review
function create_review($product_id, $user_id, $rating, $review) {
    $conn = get_db_connection();
    $sql = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiii", $product_id, $user_id, $rating, $review);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error creating review: " . $stmt->error;
        return false;
    }
}

// Get all reviews for a product
function get_reviews($product_id) {
    $conn = get_db_connection();
    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        return $result->fetch_all(MYSQLI_ASSOC);
    } else {
        echo "Error getting reviews: " . $stmt->error;
        return array();
    }
}

// Get a single review by ID
function get_review($review_id) {
    $conn = get_db_connection();
    $sql = "SELECT * FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $review_id);
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        return $result->fetch_assoc();
    } else {
        echo "Error getting review: " . $stmt->error;
        return array();
    }
}

// Update a review
function update_review($review_id, $rating, $review) {
    $conn = get_db_connection();
    $sql = "UPDATE reviews SET rating = ?, review = ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iii", $rating, $review, $review_id);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error updating review: " . $stmt->error;
        return false;
    }
}

// Delete a review
function delete_review($review_id) {
    $conn = get_db_connection();
    $sql = "DELETE FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $review_id);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error deleting review: " . $stmt->error;
        return false;
    }
}

?>


// Create a new review for a product
$product_id = 123;
$user_id = 456;
$rating = 5;
$review = "This product is amazing!";
create_review($product_id, $user_id, $rating, $review);

// Get all reviews for a product
$product_id = 123;
$reviews = get_reviews($product_id);
print_r($reviews);

// Get a single review by ID
$review_id = 789;
$review = get_review($review_id);
echo json_encode($review);

// Update a review
$review_id = 789;
$rating = 4;
$review = "This product is good.";
update_review($review_id, $rating, $review);

// Delete a review
$review_id = 789;
delete_review($review_id);


class ReviewModel {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function addReview($product_id, $user_id, $rating, $review) {
    try {
      $query = "INSERT INTO reviews (product_id, user_id, rating, review)
                VALUES (:product_id, :user_id, :rating, :review)";
      $stmt = $this->db->prepare($query);
      $stmt->bindParam(':product_id', $product_id);
      $stmt->bindParam(':user_id', $user_id);
      $stmt->bindParam(':rating', $rating);
      $stmt->bindParam(':review', $review);
      return $stmt->execute();
    } catch (PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
      return false;
    }
  }

  public function getReviewsForProduct($product_id, $limit = null, $offset = null) {
    try {
      $query = "SELECT r.id, u.name, r.rating, r.review
                FROM reviews r
                JOIN users u ON r.user_id = u.id
                WHERE product_id = :product_id";
      if ($limit !== null && $offset !== null) {
        $query .= " LIMIT :limit OFFSET :offset";
      }
      $stmt = $this->db->prepare($query);
      $stmt->bindParam(':product_id', $product_id);
      if ($limit !== null && $offset !== null) {
        $stmt->bindParam(':limit', $limit);
        $stmt->bindParam(':offset', $offset);
      }
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error retrieving reviews: " . $e->getMessage();
      return array();
    }
  }

  public function getUserReviews($user_id, $limit = null, $offset = null) {
    try {
      $query = "SELECT r.id, p.name AS product_name, r.rating, r.review
                FROM reviews r
                JOIN products p ON r.product_id = p.id
                WHERE user_id = :user_id";
      if ($limit !== null && $offset !== null) {
        $query .= " LIMIT :limit OFFSET :offset";
      }
      $stmt = $this->db->prepare($query);
      $stmt->bindParam(':user_id', $user_id);
      if ($limit !== null && $offset !== null) {
        $stmt->bindParam(':limit', $limit);
        $stmt->bindParam(':offset', $offset);
      }
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error retrieving user reviews: " . $e->getMessage();
      return array();
    }
  }
}


class ReviewController {
  private $model;

  public function __construct($model) {
    $this->model = $model;
  }

  public function addReview() {
    if (isset($_POST['rating']) && isset($_POST['review'])) {
      $product_id = $_POST['product_id'];
      $user_id = $_SESSION['user_id'];
      $rating = $_POST['rating'];
      $review = $_POST['review'];

      $success = $this->model->addReview($product_id, $user_id, $rating, $review);
      if ($success) {
        header('Location: product.php?id=' . $product_id);
        exit;
      } else {
        echo "Error adding review";
      }
    } else {
      echo "Invalid request";
    }
  }

  public function getReviewsForProduct() {
    $product_id = $_GET['id'];
    $reviews = $this->model->getReviewsForProduct($product_id);
    return $reviews;
  }

  public function getUserReviews() {
    $user_id = $_SESSION['user_id'];
    $reviews = $this->model->getUserReviews($user_id);
    return $reviews;
  }
}


<?php
session_start();

require_once 'db_connection.php';
$db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');

$model = new ReviewModel($db);
$controller = new ReviewController($model);

if (isset($_POST['rating']) && isset($_POST['review'])) {
  $controller->addReview();
}

if (isset($_GET['id'])) {
  $reviews = $controller->getReviewsForProduct();
} else {
  $reviews = array();
}

if (isset($_SESSION['user_id'])) {
  $user_reviews = $controller->getUserReviews();
} else {
  $user_reviews = array();
}
?>


// Database configuration
define('DB_HOST', 'your_host');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Function to connect to the database
function dbConnect() {
    $conn = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USERNAME, DB_PASSWORD);
    return $conn;
}

// User Review Class
class UserReview {
    private $db;

    function __construct() {
        $this->db = dbConnect();
    }

    // Create a review for a product
    public function create($user_id, $product_id, $rating, $review) {
        $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)');
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        return $stmt->execute();
    }

    // Get all reviews for a product
    public function getAll($product_id) {
        $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    // Get a single review by id
    public function getOne($review_id) {
        $stmt = $this->db->prepare('SELECT * FROM reviews WHERE id = :id');
        $stmt->bindParam(':id', $review_id);
        $stmt->execute();
        return $stmt->fetch();
    }

    // Update a review
    public function update($review_id, $rating, $review) {
        $stmt = $this->db->prepare('UPDATE reviews SET rating = :rating, review = :review WHERE id = :id');
        $stmt->bindParam(':id', $review_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        return $stmt->execute();
    }

    // Delete a review
    public function delete($review_id) {
        $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :id');
        $stmt->bindParam(':id', $review_id);
        return $stmt->execute();
    }
}

// Example usage:
$userReview = new UserReview();

// Create a review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = 'Great product!';
$result = $userReview->create($user_id, $product_id, $rating, $review);
echo "Created review: " . ($result ? "Success" : "Failure");

// Get all reviews for a product
$product_id = 1;
$reviews = $userReview->getAll($product_id);
echo "Reviews for product ID $product_id:
";
foreach ($reviews as $review) {
    echo "Rating: $review[rating], Review: $review[review]
";
}

// Get a single review by id
$review_id = 1;
$reviewData = $userReview->getOne($review_id);
echo "Review ID $review_id:
";
echo "Rating: $reviewData[rating], Review: $reviewData[review]
";

// Update a review
$rating = 4;
$review = 'Great product, but not perfect!';
$result = $userReview->update(1, $rating, $review);
echo "Updated review: " . ($result ? "Success" : "Failure");

// Delete a review
$result = $userReview->delete(1);
echo "Deleted review: " . ($result ? "Success" : "Failure");


// database connection settings
$host = 'localhost';
$username = 'username';
$password = 'password';
$dbname = 'reviews';

// connect to the database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

class ReviewSystem {
    private $conn;

    function __construct() {
        $this->conn = new mysqli($host, $username, $password, $dbname);
    }

    // create a review
    function createReview($product_id, $user_id, $rating, $review) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "INSERT INTO reviews (product_id, user_id, rating, review)
                VALUES ('$product_id', '$user_id', '$rating', '$review')";
        
        if ($this->conn->query($sql) === TRUE) {
            return true;
        } else {
            echo "Error: " . $sql . "<br>" . $this->conn->error;
            return false;
        }
    }

    // get all reviews for a product
    function getReviewsForProduct($product_id) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
        $result = $this->conn->query($sql);
        
        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                echo "ID: " . $row["id"]. " - Product ID: " . $row["product_id"]. " - User ID: " . $row["user_id"]. " Rating: " . $row["rating"]. " - Review: " . $row["review"]. "<br>";
            }
        } else {
            echo "0 results";
        }
    }

    // get all reviews for a user
    function getReviewsForUser($user_id) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "SELECT * FROM reviews WHERE user_id = '$user_id'";
        $result = $this->conn->query($sql);
        
        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                echo "ID: " . $row["id"]. " - Product ID: " . $row["product_id"]. " - User ID: " . $row["user_id"]. " Rating: " . $row["rating"]. " - Review: " . $row["review"]. "<br>";
            }
        } else {
            echo "0 results";
        }
    }

    // get average rating for a product
    function getAverageRatingForProduct($product_id) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "SELECT AVG(rating) FROM reviews WHERE product_id = '$product_id'";
        $result = $this->conn->query($sql);
        
        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                echo "Average Rating: " . $row["AVG(rating)"]. "<br>";
            }
        } else {
            echo "0 results";
        }
    }

    // get average rating for a user
    function getAverageRatingForUser($user_id) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "SELECT AVG(rating) FROM reviews WHERE user_id = '$user_id'";
        $result = $this->conn->query($sql);
        
        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                echo "Average Rating: " . $row["AVG(rating)"]. "<br>";
            }
        } else {
            echo "0 results";
        }
    }

    // delete a review
    function deleteReview($id) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "DELETE FROM reviews WHERE id = '$id'";
        
        if ($this->conn->query($sql) === TRUE) {
            return true;
        } else {
            echo "Error: " . $sql . "<br>" . $this->conn->error;
            return false;
        }
    }

    // close the database connection
    function __destruct() {
        if ($this->conn) {
            $this->conn->close();
        }
    }
}

// usage example:
$reviewSystem = new ReviewSystem();

$product_id = 1;
$user_id = 1;
$rating = 5;
$review = 'Great product!';

if ($reviewSystem->createReview($product_id, $user_id, $rating, $review)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

// get all reviews for a product
$reviewSystem->getReviewsForProduct(1);

// get all reviews for a user
$reviewSystem->getReviewsForUser(1);

// get average rating for a product
$reviewSystem->getAverageRatingForProduct(1);

// get average rating for a user
$reviewSystem->getAverageRatingForUser(1);

// delete a review
if ($reviewSystem->deleteReview(1)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}

// close the database connection
unset($reviewSystem);


<?php

/**
 * User Review Function
 *
 * Handles CRUD operations for user reviews.
 */

class Review {
  private $id;
  private $title;
  private $content;
  private $rating;

  public function __construct($id = null, $title = '', $content = '', $rating = '') {
    $this->id = $id;
    $this->title = $title;
    $this->content = $content;
    $this->rating = $rating;
  }

  /**
   * Create a new review
   *
   * @param string $title Review title
   * @param string $content Review content
   * @param int $rating Review rating (1-5)
   */
  public static function createReview($title, $content, $rating) {
    if ($rating < 1 || $rating > 5) {
      throw new Exception('Invalid rating');
    }

    $review = new self(null, $title, $content, $rating);
    $review->save();
    return $review;
  }

  /**
   * Retrieve a review by ID
   *
   * @param int $id Review ID
   */
  public static function getReview($id) {
    $review = new self($id);
    if ($review->load()) {
      return $review;
    } else {
      throw new Exception('Review not found');
    }
  }

  /**
   * Update a review
   *
   * @param string $title New title
   * @param string $content New content
   * @param int $rating New rating (1-5)
   */
  public function update($title, $content, $rating) {
    if ($rating < 1 || $rating > 5) {
      throw new Exception('Invalid rating');
    }

    $this->title = $title;
    $this->content = $content;
    $this->rating = $rating;
    $this->save();
  }

  /**
   * Delete a review
   */
  public function delete() {
    // TODO: implement deletion logic
  }

  /**
   * Save the review to database
   *
   * @return bool Success flag
   */
  private function save() {
    // TODO: implement database connection and query
    return true;
  }

  /**
   * Load the review from database
   *
   * @return bool Success flag
   */
  private function load() {
    // TODO: implement database connection and query
    return false;
  }
}

?>


// Create a new review
$review = Review::createReview('Great product!', 'I loved the quality of this product.', 5);

// Retrieve an existing review
$existingReview = Review::getReview(1);

// Update an existing review
$existingReview->update('Even better now!', 'The customer support is excellent!', 5);

// Delete a review (TODO: implement deletion logic)


// config.php (database connection settings)
$db_host = 'localhost';
$db_user = 'username';
$db_password = 'password';
$db_name = 'database';

// connect to database
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// user_review.php (user review function)
function insertReview($productId, $userName, $reviewText, $rating) {
    global $conn;

    // prepare and execute query
    $stmt = $conn->prepare("INSERT INTO reviews (product_id, user_name, review_text, rating) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("isss", $productId, $userName, $reviewText, $rating);
    $result = $stmt->execute();

    if ($result) {
        return true; // review inserted successfully
    } else {
        return false; // error inserting review
    }
}

function getUserReviews($userId, $pageSize = 10) {
    global $conn;

    // prepare and execute query
    $stmt = $conn->prepare("SELECT * FROM reviews WHERE user_name = ? LIMIT ?");
    $stmt->bind_param("si", $userId, $pageSize);
    $result = $stmt->execute();

    if ($result) {
        return $stmt->get_result()->fetch_all(MYSQLI_ASSOC); // retrieve reviews
    } else {
        return array(); // error retrieving reviews
    }
}

function getProductReviews($productId, $pageSize = 10) {
    global $conn;

    // prepare and execute query
    $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = ? LIMIT ?");
    $stmt->bind_param("is", $productId, $pageSize);
    $result = $stmt->execute();

    if ($result) {
        return $stmt->get_result()->fetch_all(MYSQLI_ASSOC); // retrieve reviews
    } else {
        return array(); // error retrieving reviews
    }
}

// example usage:
$product_id = 1;
$user_name = 'John Doe';
$review_text = 'Great product!';
$rating = 5;

if (insertReview($product_id, $user_name, $review_text, $rating)) {
    echo "Review inserted successfully!";
} else {
    echo "Error inserting review.";
}

$reviews = getUserReviews(1);
foreach ($reviews as $review) {
    echo "Username: " . $review['user_name'] . "
";
    echo "Review Text: " . $review['review_text'] . "
";
    echo "Rating: " . $review['rating'] . "/5

";
}

$reviews = getProductReviews(1);
foreach ($reviews as $review) {
    echo "Username: " . $review['user_name'] . "
";
    echo "Review Text: " . $review['review_text'] . "
";
    echo "Rating: " . $review['rating'] . "/5

";
}


CREATE TABLE reviews (
  id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT,
  product_id INT,
  rating TINYINT(1),
  title VARCHAR(255),
  content TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE users (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(100)
);


// review.php

class Review {
  private $db;

  public function __construct() {
    // Connect to database
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  /**
   * Submit a new review
   *
   * @param int $userId The user's ID
   * @param int $productId The product's ID
   * @param string $title The title of the review
   * @param string $content The content of the review
   * @param int $rating The rating given to the product (1-5)
   *
   * @return bool True if the review was submitted successfully, false otherwise
   */
  public function submitReview($userId, $productId, $title, $content, $rating) {
    try {
      // Prepare and execute query
      $query = $this->db->prepare("INSERT INTO reviews (user_id, product_id, title, content, rating) VALUES (?, ?, ?, ?, ?)");
      $query->execute([$userId, $productId, $title, $content, $rating]);
      return true;
    } catch (PDOException $e) {
      // Log error and rethrow
      error_log($e->getMessage());
      throw $e;
    }
  }

  /**
   * Display reviews for a specific product
   *
   * @param int $productId The ID of the product
   *
   * @return array An array of review objects, or an empty array if no reviews exist
   */
  public function getReviews($productId) {
    try {
      // Prepare and execute query
      $query = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
      $query->execute([$productId]);
      $reviews = [];
      while ($row = $query->fetch()) {
        $review = new stdClass();
        $review->id = $row['id'];
        $review->user_id = $row['user_id'];
        $review->product_id = $row['product_id'];
        $review->rating = $row['rating'];
        $review->title = $row['title'];
        $review->content = $row['content'];
        $reviews[] = $review;
      }
      return $reviews;
    } catch (PDOException $e) {
      // Log error and rethrow
      error_log($e->getMessage());
      throw $e;
    }
  }

  /**
   * Calculate the average rating for a specific product
   *
   * @param int $productId The ID of the product
   *
   * @return float|null The average rating, or null if no reviews exist
   */
  public function getAverageRating($productId) {
    try {
      // Prepare and execute query
      $query = $this->db->prepare("SELECT AVG(rating) AS avg_rating FROM reviews WHERE product_id = ?");
      $query->execute([$productId]);
      $result = $query->fetch();
      return isset($result['avg_rating']) ? $result['avg_rating'] : null;
    } catch (PDOException $e) {
      // Log error and rethrow
      error_log($e->getMessage());
      throw $e;
    }
  }
}


// Include the review class
require 'review.php';

// Create a new instance of the Review class
$review = new Review();

// Submit a new review
$userId = 1;
$productId = 2;
$title = 'Great product!';
$content = 'I loved this product!';
$rating = 5;
$review->submitReview($userId, $productId, $title, $content, $rating);

// Display reviews for the specified product
$reviews = $review->getReviews($productId);
foreach ($reviews as $review) {
  echo "Rating: $review->rating, Title: $review->title, Content: $review->content
";
}

// Calculate and display the average rating for the product
$averageRating = $review->getAverageRating($productId);
echo "Average Rating: $averageRating
";


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_database';
$username = 'your_username';
$password = 'your_password';

try {
    // Connect to the database
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Error connecting to database: " . $e->getMessage();
}

// Function to add a review
function addReview($title, $content, $rating, $user_id) {
    global $conn;
    
    // Prepare the query
    $stmt = $conn->prepare("INSERT INTO reviews (title, content, rating, user_id) VALUES (:title, :content, :rating, :user_id)");
    
    // Bind the parameters
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':user_id', $user_id);
    
    // Execute the query
    try {
        $stmt->execute();
        
        // If successful, return True
        return true;
    } catch (PDOException $e) {
        echo "Error adding review: " . $e->getMessage();
        
        // If not successful, return False
        return false;
    }
}

// Function to view a user's reviews
function viewReviews($user_id) {
    global $conn;
    
    // Prepare the query
    $stmt = $conn->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
    
    // Bind the parameter
    $stmt->bindParam(':user_id', $user_id);
    
    // Execute the query and fetch results
    try {
        $stmt->execute();
        
        return $stmt->fetchAll();
    } catch (PDOException $e) {
        echo "Error viewing reviews: " . $e->getMessage();
        
        return null;
    }
}

// Function to delete a review
function deleteReview($review_id, $user_id) {
    global $conn;
    
    // Prepare the query
    $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :review_id AND user_id = :user_id");
    
    // Bind the parameters
    $stmt->bindParam(':review_id', $review_id);
    $stmt->bindParam(':user_id', $user_id);
    
    // Execute the query and check for success
    try {
        $stmt->execute();
        
        return true;
    } catch (PDOException $e) {
        echo "Error deleting review: " . $e->getMessage();
        
        return false;
    }
}

// Example usage:
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Get the form data
    $title = $_POST['title'];
    $content = $_POST['content'];
    $rating = $_POST['rating'];
    $user_id = $_POST['user_id'];
    
    // Add a review
    if (addReview($title, $content, $rating, $user_id)) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review.";
    }
}

// View reviews for user with ID 1
$reviews = viewReviews(1);
if ($reviews) {
    foreach ($reviews as $review) {
        echo $review['title'] . ": " . $review['content'];
    }
} else {
    echo "No reviews found.";
}
?>


// Include database connection file
require_once 'db.php';

// Function to display reviews for a product
function get_reviews($product_id, $limit = 10) {
    global $conn;
    
    // Query to retrieve reviews with average rating and count
    $query = "
        SELECT r.id, u.username, p.name, AVG(r.rating) AS avg_rating, COUNT(r.id) AS total_count
        FROM reviews r
        JOIN users u ON r.user_id = u.id
        JOIN products p ON r.product_id = p.id
        WHERE r.product_id = $product_id
        GROUP BY r.id, u.username, p.name
    ";
    
    // Execute query and return results
    $result = mysqli_query($conn, $query);
    return mysqli_fetch_all($result, MYSQLI_ASSOC);
}

// Function to add a review for a product
function add_review($product_id, $user_id, $rating, $comment) {
    global $conn;
    
    // Query to insert new review into database
    $query = "
        INSERT INTO reviews (product_id, user_id, rating, comment)
        VALUES ($product_id, $user_id, $rating, '$comment')
    ";
    
    // Execute query and return result
    $result = mysqli_query($conn, $query);
    return $result ? true : false;
}

// Function to edit a review for a product
function edit_review($review_id, $new_rating, $new_comment) {
    global $conn;
    
    // Query to update existing review in database
    $query = "
        UPDATE reviews
        SET rating = $new_rating, comment = '$new_comment'
        WHERE id = $review_id
    ";
    
    // Execute query and return result
    $result = mysqli_query($conn, $query);
    return $result ? true : false;
}

// Function to delete a review for a product
function delete_review($review_id) {
    global $conn;
    
    // Query to delete existing review from database
    $query = "
        DELETE FROM reviews
        WHERE id = $review_id
    ";
    
    // Execute query and return result
    $result = mysqli_query($conn, $query);
    return $result ? true : false;
}


// Display reviews for a product with ID 1
$reviews = get_reviews(1);
echo json_encode($reviews);

// Add a new review for product ID 2 from user ID 3
$result = add_review(2, 3, 5, 'Great product!');
var_dump($result); // true or false

// Edit an existing review with ID 4
$result = edit_review(4, 4, 'Excellent product!');
var_dump($result); // true or false

// Delete a review with ID 5
$result = delete_review(5);
var_dump($result); // true or false


<?php

// Configuration
require 'config.php';

// Database connection
$db = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

function createReview($userId, $productId, $rating, $review) {
  global $db;
  
  // Prepare and execute query
  $stmt = $db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
  $stmt->bind_param('iiis', $userId, $productId, $rating, $review);
  $stmt->execute();
  
  // Get the ID of the newly created review
  $reviewId = $db->insert_id;
  
  return $reviewId;
}

function getReviews($productId) {
  global $db;
  
  // Prepare and execute query
  $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = ?");
  $stmt->bind_param('i', $productId);
  $stmt->execute();
  
  // Fetch results as an array of associative arrays
  $reviews = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  
  return $reviews;
}

function getReview($reviewId) {
  global $db;
  
  // Prepare and execute query
  $stmt = $db->prepare("SELECT * FROM reviews WHERE id = ?");
  $stmt->bind_param('i', $reviewId);
  $stmt->execute();
  
  // Fetch result as an associative array
  $review = $stmt->get_result()->fetch_assoc();
  
  return $review;
}

function updateReview($reviewId, $rating, $review) {
  global $db;
  
  // Prepare and execute query
  $stmt = $db->prepare("UPDATE reviews SET rating = ?, review = ? WHERE id = ?");
  $stmt->bind_param('isi', $rating, $review, $reviewId);
  $stmt->execute();
}

function deleteReview($reviewId) {
  global $db;
  
  // Prepare and execute query
  $stmt = $db->prepare("DELETE FROM reviews WHERE id = ?");
  $stmt->bind_param('i', $reviewId);
  $stmt->execute();
}

?>


// Create a new review
$userId = 1;
$productId = 1;
$rating = 5;
$review = "This product is amazing!";
$reviewId = createReview($userId, $productId, $rating, $review);
echo "New review created with ID: $reviewId
";

// Get all reviews for a product
$product_id = 1;
$reviews = getReviews($product_id);
foreach ($reviews as $review) {
  echo "Rating: $review[rating], Review: $review[review]
";
}

// Get a specific review by its ID
$reviewId = 1;
$review = getReview($reviewId);
echo "Rating: $review[rating], Review: $review[review]
";

// Update an existing review
$update_rating = 4;
$update_review = "Updated review!";
updateReview($reviewId, $update_rating, $update_review);

// Delete a review
deleteReview($reviewId);


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_database';
$user = 'your_username';
$password = 'your_password';

// Create a database connection
$conn = new PDO("mysql:host=$host;dbname=$dbname", $user, $password);

function createUserReview($conn, $reviewData) {
  // Insert review into the reviews table and get its id
  $stmt = $conn->prepare('INSERT INTO reviews (user_id, content, rating) VALUES (:user_id, :content, :rating)');
  $stmt->execute([
    ':user_id' => $reviewData['user_id'],
    ':content' => $reviewData['content'],
    ':rating' => $reviewData['rating']
  ]);
  return $conn->lastInsertId();
}

function getAllReviews($conn) {
  // Retrieve all reviews from the database
  $stmt = $conn->prepare('SELECT * FROM reviews');
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function getReviewById($conn, $reviewId) {
  // Retrieve a review by its id
  $stmt = $conn->prepare('SELECT * FROM reviews WHERE id = :id');
  $stmt->bindParam(':id', $reviewId);
  $stmt->execute();
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

function updateReview($conn, $reviewId, $reviewData) {
  // Update an existing review
  $stmt = $conn->prepare('UPDATE reviews SET content = :content, rating = :rating WHERE id = :id');
  $stmt->bindParam(':id', $reviewId);
  $stmt->execute([
    ':content' => $reviewData['content'],
    ':rating' => $reviewData['rating']
  ]);
}

function deleteReview($conn, $reviewId) {
  // Delete a review by its id
  $stmt = $conn->prepare('DELETE FROM reviews WHERE id = :id');
  $stmt->bindParam(':id', $reviewId);
  $stmt->execute();
}


// Connect to the database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $user, $password);

// Create a user review
$userReviewData = [
  'user_id' => 1,
  'content' => 'This product is amazing!',
  'rating' => 5
];
$reviewId = createUserReview($conn, $userReviewData);
echo "Created review with id: $reviewId
";

// Retrieve all reviews
$reviews = getAllReviews($conn);
foreach ($reviews as $review) {
  echo "Review id: {$review['id']}, User ID: {$review['user_id']}, Content: {$review['content']}
";
}

// Update a review
updateReview($conn, $reviewId, [
  'content' => 'This product is even better now!',
  'rating' => 4
]);
echo "Updated review with id: $reviewId
";

// Delete a review
deleteReview($conn, $reviewId);
echo "Deleted review with id: $reviewId
";


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews';
$username = 'your_username';
$password = 'your_password';

// Connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

// Function to display reviews for a product
function displayReviews($product_id) {
  global $conn;
  
  $stmt = $conn->prepare('SELECT * FROM reviews WHERE product_id = ?');
  $stmt->execute([$product_id]);
  
  $reviews = $stmt->fetchAll();
  
  foreach ($reviews as $review) {
    echo '<p>Rating: ' . $review['rating'] . '/5</p>';
    echo '<p>' . $review['text'] . '</p>';
    echo '<p>Created by ' . getUserName($review['user_id']) . '</p>';
  }
}

// Function to display user's own reviews
function displayUserReviews($user_id) {
  global $conn;
  
  $stmt = $conn->prepare('SELECT * FROM reviews WHERE user_id = ?');
  $stmt->execute([$user_id]);
  
  $reviews = $stmt->fetchAll();
  
  foreach ($reviews as $review) {
    echo '<p>Rating: ' . $review['rating'] . '/5</p>';
    echo '<p>' . $review['text'] . '</p>';
    echo '<p>Created for product ' . getProductNames($review['product_id']) . '</p>';
  }
}

// Function to create a new review
function createReview() {
  global $conn;
  
  if (isset($_POST['create-review'])) {
    $user_id = $_SESSION['id'];
    $product_id = $_POST['product_id'];
    $rating = $_POST['rating'];
    $text = $_POST['text'];
    
    $stmt = $conn->prepare('INSERT INTO reviews (user_id, product_id, rating, text) VALUES (?, ?, ?, ?)');
    $stmt->execute([$user_id, $product_id, $rating, $text]);
    
    header('Location: index.php');
  }
}

// Function to edit a review
function editReview() {
  global $conn;
  
  if (isset($_POST['edit-review'])) {
    $review_id = $_POST['review_id'];
    $new_rating = $_POST['rating'];
    $new_text = $_POST['text'];
    
    $stmt = $conn->prepare('UPDATE reviews SET rating = ?, text = ? WHERE id = ?');
    $stmt->execute([$new_rating, $new_text, $review_id]);
  }
}

// Function to delete a review
function deleteReview() {
  global $conn;
  
  if (isset($_POST['delete-review'])) {
    $review_id = $_POST['review_id'];
    
    $stmt = $conn->prepare('DELETE FROM reviews WHERE id = ?');
    $stmt->execute([$review_id]);
  }
}

// Function to get the name of a user
function getUserName($user_id) {
  global $conn;
  
  $stmt = $conn->prepare('SELECT * FROM users WHERE id = ?');
  $stmt->execute([$user_id]);
  
  return $stmt->fetch()['name'];
}

// Function to get the name(s) of a product
function getProductNames($product_id) {
  global $conn;
  
  $stmt = $conn->prepare('SELECT name FROM products WHERE id = ?');
  $stmt->execute([$product_id]);
  
  return $stmt->fetch()['name'];
}

?>


// Display reviews for a product
displayReviews(1);

// Display user's own reviews
displayUserReviews($_SESSION['id']);

// Create a new review
createReview();

// Edit a review
editReview();

// Delete a review
deleteReview();


<?php

// database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// connect to the database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function get_reviews($product_id) {
    global $conn;
    
    // query reviews for the given product
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "<p>" . $row['review_text'] . "</p>";
            echo "<p>Rating: " . $row['rating'] . "/5</p>";
            echo "<p>Posted by: <a href='#'>" . $row['username'] . "</a></p>";
        }
    } else {
        echo "<p>No reviews available for this product.</p>";
    }
}

function add_review($product_id, $user_id, $rating, $review_text) {
    global $conn;
    
    // insert review into the database
    $query = "INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES ('$product_id', '$user_id', '$rating', '$review_text')";
    $result = $conn->query($query);
    
    if ($result) {
        echo "<p>Review added successfully!</p>";
    } else {
        echo "<p>Error adding review: " . $conn->error . "</p>";
    }
}

function get_user_reviews($user_id) {
    global $conn;
    
    // query reviews for the given user
    $query = "SELECT * FROM reviews WHERE user_id = '$user_id'";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "<p>" . $row['review_text'] . "</p>";
            echo "<p>Rating: " . $row['rating'] . "/5</p>";
            echo "<p>Posted for product: <a href='#'>" . $row['product_name'] . "</a></p>";
        }
    } else {
        echo "<p>No reviews available for this user.</p>";
    }
}

// example usage
get_reviews(1); // get reviews for product with id 1

?>


class Review {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    // Get all reviews for a user
    public function getReviewsForUser($userId) {
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = ?");
        $stmt->execute([$userId]);
        return $stmt->fetchAll();
    }

    // Create a new review
    public function createReview($data) {
        $stmt = $this->db->prepare("INSERT INTO reviews (user_id, content, rating) VALUES (?, ?, ?)");
        $stmt->execute([$data['user_id'], $data['content'], $data['rating']]);
        return $this->db->lastInsertId();
    }

    // Update a review
    public function updateReview($id, $data) {
        $stmt = $this->db->prepare("UPDATE reviews SET content = ?, rating = ? WHERE id = ?");
        $stmt->execute([$data['content'], $data['rating'], $id]);
        return true;
    }

    // Delete a review
    public function deleteReview($id) {
        $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
        $stmt->execute([$id]);
        return true;
    }
}


class User {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    // Get all users
    public function getAllUsers() {
        $stmt = $this->db->prepare("SELECT * FROM users");
        return $stmt->fetchAll();
    }
}


class ReviewController {
    private $review;

    public function __construct($db) {
        $this->review = new Review($db);
    }

    // Create a review
    public function create() {
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $data = $_POST;
            $userId = $data['user_id'];
            $content = $data['content'];
            $rating = $data['rating'];

            $newReviewId = $this->review->createReview([
                'user_id' => $userId,
                'content' => $content,
                'rating' => $rating
            ]);

            http_response_code(201);
            echo json_encode(['message' => 'Review created successfully', 'id' => $newReviewId]);
        } else {
            http_response_code(405);
            echo json_encode(['error' => 'Invalid request method']);
        }
    }

    // Get reviews for a user
    public function getReviews() {
        if ($_SERVER['REQUEST_METHOD'] === 'GET') {
            $userId = $_GET['user_id'];

            $reviews = $this->review->getReviewsForUser($userId);

            http_response_code(200);
            echo json_encode($reviews);
        } else {
            http_response_code(405);
            echo json_encode(['error' => 'Invalid request method']);
        }
    }

    // Update a review
    public function update() {
        if ($_SERVER['REQUEST_METHOD'] === 'PUT') {
            $id = $_GET['id'];
            $data = $_POST;

            $updatedReview = $this->review->updateReview($id, [
                'content' => $data['content'],
                'rating' => $data['rating']
            ]);

            if ($updatedReview) {
                http_response_code(200);
                echo json_encode(['message' => 'Review updated successfully']);
            } else {
                http_response_code(404);
                echo json_encode(['error' => 'Review not found']);
            }
        } else {
            http_response_code(405);
            echo json_encode(['error' => 'Invalid request method']);
        }
    }

    // Delete a review
    public function delete() {
        if ($_SERVER['REQUEST_METHOD'] === 'DELETE') {
            $id = $_GET['id'];

            $deletedReviewId = $this->review->deleteReview($id);

            if ($deletedReviewId) {
                http_response_code(200);
                echo json_encode(['message' => 'Review deleted successfully']);
            } else {
                http_response_code(404);
                echo json_encode(['error' => 'Review not found']);
            }
        } else {
            http_response_code(405);
            echo json_encode(['error' => 'Invalid request method']);
        }
    }
}


// db.php (database connection file)

<?php

define('DB_HOST', 'your_host');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

$dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME;
$db = new PDO($dsn, DB_USERNAME, DB_PASSWORD);

?>


// review.php (review management file)

<?php

require_once 'db.php';

function getReviews() {
  $stmt = $db->prepare("SELECT r.id, u.name, r.title, r.content, r.rating FROM reviews r INNER JOIN users u ON r.user_id = u.id");
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function getReview($id) {
  $stmt = $db->prepare("SELECT * FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $id);
  $stmt->execute();
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

function addReview($title, $content, $rating, $user_id) {
  $stmt = $db->prepare("INSERT INTO reviews (title, content, rating, user_id) VALUES (:title, :content, :rating, :user_id)");
  $stmt->bindParam(':title', $title);
  $stmt->bindParam(':content', $content);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':user_id', $user_id);
  return $stmt->execute();
}

function updateReview($id, $title, $content, $rating) {
  $stmt = $db->prepare("UPDATE reviews SET title = :title, content = :content, rating = :rating WHERE id = :id");
  $stmt->bindParam(':title', $title);
  $stmt->bindParam(':content', $content);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':id', $id);
  return $stmt->execute();
}

function deleteReview($id) {
  $stmt = $db->prepare("DELETE FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $id);
  return $stmt->execute();
}


// review_controller.php (review controller file)

<?php

require_once 'review.php';

class ReviewController {

  public function index() {
    $reviews = getReviews();
    echo json_encode($reviews);
  }

  public function show($id) {
    $review = getReview($id);
    echo json_encode($review);
  }

  public function store($title, $content, $rating, $user_id) {
    return addReview($title, $content, $rating, $user_id);
  }

  public function update($id, $title, $content, $rating) {
    return updateReview($id, $title, $content, $rating);
  }

  public function destroy($id) {
    return deleteReview($id);
  }
}

?>


// index.php (main file)

<?php

require_once 'review_controller.php';

$controller = new ReviewController();

if ($_SERVER['REQUEST_METHOD'] == 'GET') {
  if (isset($_GET['id'])) {
    $id = $_GET['id'];
    $controller->show($id);
  } else {
    $controller->index();
  }
} elseif ($_SERVER['REQUEST_METHOD'] == 'POST') {
  $title = $_POST['title'];
  $content = $_POST['content'];
  $rating = $_POST['rating'];
  $user_id = $_POST['user_id'];
  $result = $controller->store($title, $content, $rating, $user_id);
  if ($result) {
    echo json_encode(['message' => 'Review created successfully.']);
  } else {
    echo json_encode(['error' => 'Failed to create review.']);
  }
} elseif ($_SERVER['REQUEST_METHOD'] == 'PUT') {
  $id = $_GET['id'];
  $title = $_POST['title'];
  $content = $_POST['content'];
  $rating = $_POST['rating'];
  $result = $controller->update($id, $title, $content, $rating);
  if ($result) {
    echo json_encode(['message' => 'Review updated successfully.']);
  } else {
    echo json_encode(['error' => 'Failed to update review.']);
  }
} elseif ($_SERVER['REQUEST_METHOD'] == 'DELETE') {
  $id = $_GET['id'];
  $result = $controller->destroy($id);
  if ($result) {
    echo json_encode(['message' => 'Review deleted successfully.']);
  } else {
    echo json_encode(['error' => 'Failed to delete review.']);
  }
}

?>


// db_connection.php (for database connection)
<?php
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'your_username';
$password = 'your_password';

try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch(PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}
?>

// review_function.php
<?php
require_once 'db_connection.php';

function create_review($user_id, $product_id, $rating, $review) {
    global $conn;
    $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
}

function read_reviews($product_id) {
    global $conn;
    $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function update_review($id, $rating, $review) {
    global $conn;
    $stmt = $conn->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
    $stmt->bindParam(':id', $id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
}

function delete_review($id) {
    global $conn;
    $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $id);
    return $stmt->execute();
}
?>


// create a new review for a product
$user_id = 1; // user's ID
$product_id = 1; // product's ID
$rating = 4;
$review = 'This product is great!';
if (create_review($user_id, $product_id, $rating, $review)) {
    echo "Review created successfully!";
} else {
    echo "Failed to create review.";
}

// read reviews for a specific product
$product_id = 1;
$reviews = read_reviews($product_id);
foreach ($reviews as $review) {
    echo "Rating: {$review['rating']}, Review: {$review['review']}";
}

// update an existing review
$id = 1; // review's ID
$rating = 5;
$review = 'I love this product!';
if (update_review($id, $rating, $review)) {
    echo "Review updated successfully!";
} else {
    echo "Failed to update review.";
}

// delete a review
$id = 1; // review's ID
if (delete_review($id)) {
    echo "Review deleted successfully!";
} else {
    echo "Failed to delete review.";
}


<?php

class Review {
    private $id;
    private $title;
    private $content;
    private $rating;
    private $username;

    public function __construct($id, $title, $content, $rating, $username) {
        $this->id = $id;
        $this->title = $title;
        $this->content = $content;
        $this->rating = $rating;
        $this->username = $username;
    }

    public function getId() {
        return $this->id;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getContent() {
        return $this->content;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getUsername() {
        return $this->username;
    }
}

class ReviewService {
    private $reviews = array();

    public function addReview(Review $review) {
        $this->reviews[] = $review;
    }

    public function getReviews() {
        return $this->reviews;
    }

    public function getReviewsByUser($username) {
        $reviews = array();
        foreach ($this->reviews as $review) {
            if ($review->getUsername() == $username) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }
}

class ReviewController {
    private $reviewService;

    public function __construct(ReviewService $reviewService) {
        $this->reviewService = $reviewService;
    }

    public function addReview($title, $content, $rating, $username) {
        $review = new Review(count($this->reviewService->getReviews()) + 1, $title, $content, $rating, $username);
        $this->reviewService->addReview($review);
        return $review;
    }

    public function getReviews() {
        return $this->reviewService->getReviews();
    }

    public function getReviewsByUser($username) {
        return $this->reviewService->getReviewsByUser($username);
    }
}

// Example usage
$reviewService = new ReviewService();
$reviewController = new ReviewController($reviewService);

// Add some reviews
$review1 = $reviewController->addReview('Great product!', 'I love this product!', 5, 'JohnDoe');
$review2 = $reviewController->addReview('Good product, but not great.', 'It\'s okay, I guess.', 3, 'JaneDoe');

// Get all reviews
$reviews = $reviewController->getReviews();
foreach ($reviews as $review) {
    echo "Title: " . $review->getTitle() . ", Content: " . $review->getContent() . ", Rating: " . $review->getRating() . ", Username: " . $review->getUsername() . "
";
}

// Get reviews by user
$reviewsByJohn = $reviewController->getReviewsByUser('JohnDoe');
foreach ($reviewsByJohn as $review) {
    echo "Title: " . $review->getTitle() . ", Content: " . $review->getContent() . ", Rating: " . $review->getRating() . ", Username: " . $review->getUsername() . "
";
}


// Review model class
class Review {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview($product_id, $user_id, $rating, $comment) {
        $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
                  VALUES (:product_id, :user_id, :rating, :comment)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);
        return $stmt->execute();
    }

    public function getReviews($product_id) {
        $query = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public function getUserReviews($user_id) {
        $query = "SELECT * FROM reviews WHERE user_id = :user_id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public function getAverageRating($product_id) {
        $query = "SELECT AVG(rating) FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
        return $stmt->fetchColumn();
    }
}


// Create a new review instance
$reviewModel = new Review($pdo);

// Create a new review
$product_id = 1;
$user_id = 1;
$rating = 5;
$comment = "Great product!";
$result = $reviewModel->createReview($product_id, $user_id, $rating, $comment);
if ($result) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

// Get all reviews for a specific product
$product_id = 1;
$reviews = $reviewModel->getReviews($product_id);
foreach ($reviews as $review) {
    echo "Rating: {$review['rating']} | Comment: {$review['comment']}";
}

// Get average rating for a specific product
$product_id = 1;
$averageRating = $reviewModel->getAverageRating($product_id);
echo "Average Rating: {$averageRating}";

// Get reviews for a specific user
$user_id = 1;
$reviews = $reviewModel->getUserReviews($user_id);
foreach ($reviews as $review) {
    echo "Rating: {$review['rating']} | Comment: {$review['comment']}";
}


<?php

// Database connection settings
$host = 'localhost';
$db_name = 'reviews_db';
$user = 'your_username';
$password = 'your_password';

// Connect to database
$conn = new mysqli($host, $user, $password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function displayReviews() {
  global $conn;
  
  // Retrieve reviews from database
  $query = "SELECT * FROM reviews";
  $result = $conn->query($query);
  
  if (!$result) {
    echo "Error retrieving reviews.";
  } else {
    while ($row = $result->fetch_assoc()) {
      echo "<p>User ID: " . $row['user_id'] . "</p>";
      echo "<p>Review Text: " . $row['review_text'] . "</p>";
      echo "<p>Rating: " . $row['rating'] . "/5</p>";
      echo "<p>Created At: " . $row['created_at'] . "</p><hr>";
    }
  }
}

function createReview($user_id, $review_text, $rating) {
  global $conn;
  
  // Insert review into database
  $query = "INSERT INTO reviews (user_id, review_text, rating) VALUES (?, ?, ?)";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("iss", $user_id, $review_text, $rating);
  
  if ($stmt->execute()) {
    echo "Review created successfully.";
  } else {
    echo "Error creating review.";
  }
}

function editReview($id, $new_review_text) {
  global $conn;
  
  // Update review in database
  $query = "UPDATE reviews SET review_text = ? WHERE id = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("si", $new_review_text, $id);
  
  if ($stmt->execute()) {
    echo "Review updated successfully.";
  } else {
    echo "Error updating review.";
  }
}

function deleteReview($id) {
  global $conn;
  
  // Delete review from database
  $query = "DELETE FROM reviews WHERE id = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("i", $id);
  
  if ($stmt->execute()) {
    echo "Review deleted successfully.";
  } else {
    echo "Error deleting review.";
  }
}

?>


<?php
include 'user_review_function.php';

// Create a new review
createReview(1, "This is my review", 4);

// Display all reviews
displayReviews();

// Edit an existing review
editReview(1, "Updated review text");

// Delete a review
deleteReview(2);
?>


<?php

class Review {
  private $db;

  function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  function add_review($product_id, $user_id, $rating, $comment) {
    $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->execute();
  }

  function get_reviews($product_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  function get_product_reviews($product_id) {
    $reviews = $this->get_reviews($product_id);
    $product_name = $this->get_product_name($product_id);
    foreach ($reviews as &$review) {
      $review['product_name'] = $product_name;
    }
    return $reviews;
  }

  function get_product_name($product_id) {
    $stmt = $this->db->prepare("SELECT name FROM products WHERE id = :product_id");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchColumn();
  }
}

?>


<?php

require 'review.php';

$review = new Review();

if (isset($_POST['submit'])) {
  $product_id = $_POST['product_id'];
  $user_id = $_POST['user_id'];
  $rating = $_POST['rating'];
  $comment = $_POST['comment'];

  $review->add_review($product_id, $user_id, $rating, $comment);
}

$product_reviews = $review->get_product_reviews($_GET['id']);

?>
<!DOCTYPE html>
<html>
<head>
  <title>Reviews</title>
</head>
<body>

<h1>Reviews for <?php echo $_GET['name']; ?></h1>

<?php foreach ($product_reviews as $review) : ?>
  <div class="review">
    <p><?php echo $review['rating'] . '/5 stars'; ?></p>
    <p><?php echo $review['comment']; ?></p>
  </div>
<?php endforeach; ?>

<form action="" method="post">
  <label for="product_id">Product ID:</label>
  <input type="text" id="product_id" name="product_id"><br><br>
  <label for="rating">Rating (1-5):</label>
  <input type="number" id="rating" name="rating" min="1" max="5"><br><br>
  <label for="comment">Comment:</label>
  <textarea id="comment" name="comment"></textarea><br><br>
  <input type="submit" name="submit" value="Submit Review">
</form>

</body>
</html>


function add_review($product_id, $user_id, $rating, $comment) {
  // Validate input data
  if (!isset($product_id) || !isset($user_id) || !isset($rating) || !isset($comment)) {
    return array('error' => 'Invalid input data');
  }

  // Create new review
  $review = array(
    'product_id' => $product_id,
    'user_id' => $user_id,
    'rating' => $rating,
    'comment' => $comment
  );

  // Insert review into database
  $db = connect_to_db();
  $query = "INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)";
  $stmt = $db->prepare($query);
  $stmt->execute($review);

  // Return review ID
  return array('success' => true, 'id' => $db->lastInsertId());
}


function get_reviews_for_product($product_id) {
  // Validate input data
  if (!isset($product_id)) {
    return array('error' => 'Invalid product ID');
  }

  // Retrieve reviews from database
  $db = connect_to_db();
  $query = "SELECT * FROM reviews WHERE product_id = :product_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  $reviews = $stmt->fetchAll();

  // Return reviews
  return array('success' => true, 'reviews' => $reviews);
}


function get_reviews_for_user($user_id) {
  // Validate input data
  if (!isset($user_id)) {
    return array('error' => 'Invalid user ID');
  }

  // Retrieve reviews from database
  $db = connect_to_db();
  $query = "SELECT * FROM reviews WHERE user_id = :user_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->execute();
  $reviews = $stmt->fetchAll();

  // Return reviews
  return array('success' => true, 'reviews' => $reviews);
}


// Add a new review for product ID 1 by user ID 2 with rating 5 and comment "Great product!"
$review_id = add_review(1, 2, 5, "Great product!");

// Get all reviews for product ID 1
$reviews_for_product = get_reviews_for_product(1);

// Get all reviews for user ID 2
$reviews_for_user = get_reviews_for_user(2);


// database connection settings
$host = 'localhost';
$dbname = 'reviews_database';
$username = 'username';
$password = 'password';

// connect to the database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function addReview($reviewData) {
  global $conn;

  $query = "
    INSERT INTO reviews (user_id, product_id, rating, review)
    VALUES (?, ?, ?, ?)
  ";

  if ($stmt = mysqli_prepare($conn, $query)) {
    mysqli_stmt_bind_param($stmt, "iiii", $reviewData['userId'], $reviewData['productId'], $reviewData['rating'], $reviewData['review']);
    if (mysqli_stmt_execute($stmt)) {
      return true;
    } else {
      echo 'Error updating record: ' . mysqli_error($conn);
      return false;
    }
  }

  mysqli_stmt_close($stmt);

  return false;
}

function updateReview($reviewId, $newData) {
  global $conn;

  $query = "
    UPDATE reviews
    SET user_id = ?, product_id = ?, rating = ?, review = ?
    WHERE id = ?
  ";

  if ($stmt = mysqli_prepare($conn, $query)) {
    mysqli_stmt_bind_param($stmt, "iiii", $newData['userId'], $newData['productId'], $newData['rating'], $newData['review'], $reviewId);
    if (mysqli_stmt_execute($stmt)) {
      return true;
    } else {
      echo 'Error updating record: ' . mysqli_error($conn);
      return false;
    }
  }

  mysqli_stmt_close($stmt);

  return false;
}

function getReviews() {
  global $conn;

  $query = "
    SELECT r.id, u.name, p.title, r.rating, r.review
    FROM reviews r
    JOIN users u ON r.user_id = u.id
    JOIN products p ON r.product_id = p.id
  ";

  if ($result = mysqli_query($conn, $query)) {
    return $result;
  } else {
    echo 'Error retrieving records: ' . mysqli_error($conn);
    return false;
  }
}

// example usage
$reviewData = array(
  'userId' => 1,
  'productId' => 1,
  'rating' => 5,
  'review' => 'This product is amazing!'
);

addReview($reviewData);

$result = getReviews();
while ($row = mysqli_fetch_assoc($result)) {
  echo $row['name'] . ': ' . $row['title'] . ' - ' . $row['rating'] . '/5';
}

mysqli_close($conn);


<?php

class Review {
    private $pdo;

    public function __construct($pdo) {
        $this->pdo = $pdo;
    }

    /**
     * Get all reviews for a product
     *
     * @param int $productId Product ID
     * @return array Reviews
     */
    public function getReviews($productId) {
        $stmt = $this->pdo->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * Add a new review
     *
     * @param int   $userId User ID
     * @param int   $productId Product ID
     * @param int   $rating Rating
     * @param string $comment Comment
     */
    public function addReview($userId, $productId, $rating, $comment) {
        $stmt = $this->pdo->prepare("INSERT INTO reviews (user_id, product_id, rating, comment)
                                    VALUES (:user_id, :product_id, :rating, :comment)");
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);
        return $stmt->execute();
    }
}

// Example usage:
$pdo = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
$reviewSystem = new Review($pdo);

// Get reviews for a product
$productId = 1;
$reviews = $reviewSystem->getReviews($productId);
print_r($reviews);

// Add a new review
$userID = 1;
$productID = 2;
$rating = 4;
$comment = 'Great product!';
$success = $reviewSystem->addReview($userID, $productID, $rating, $comment);
echo $success ? 'Review added successfully!' : 'Error adding review.';


class UserReview {
    private $reviews = [];

    public function addReview($username, $rating, $comment) {
        $review = [
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment
        ];
        array_push($this->reviews, $review);
    }

    public function getReviews() {
        return $this->reviews;
    }
}


$review = new UserReview();

// Add a review
$review->addReview('JohnDoe', 5, 'Great product!');

// Get all reviews
$reviews = $review->getReviews();
print_r($reviews);


Array
(
    [0] => Array
        (
            [username] => JohnDoe
            [rating] => 5
            [comment] => Great product!
        )

)


class UserReviewDB extends UserReview {
    private $db;

    public function __construct() {
        $this->db = new mysqli('localhost', 'username', 'password', 'database');
    }

    public function addReview($username, $rating, $comment) {
        if ($this->db->connect_error) {
            die("Connection failed: " . $this->db->connect_error);
        }
        $query = "INSERT INTO reviews (username, rating, comment)
                  VALUES ('$username', '$rating', '$comment')";
        if (!$this->db->query($query)) {
            echo "Error adding review";
        } else {
            echo "Review added successfully!";
        }
    }

    public function getReviews() {
        $result = $this->db->query("SELECT * FROM reviews");
        return $result->fetch_all(MYSQLI_ASSOC);
    }
}


$review = new UserReviewDB();

// Add a review
$review->addReview('JohnDoe', 5, 'Great product!');

// Get all reviews
$reviews = $review->getReviews();
print_r($reviews);


<?php

// Configuration variables
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
function connect_to_db() {
  $conn = new PDO("mysql:host=".DB_HOST.";dbname=".DB_NAME, DB_USERNAME, DB_PASSWORD);
  return $conn;
}

// Create review
function create_review($user_id, $product_id, $rating, $review_text) {
  try {
    $conn = connect_to_db();
    $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (?, ?, ?, ?)");
    $stmt->execute([$user_id, $product_id, $rating, $review_text]);
    return true;
  } catch (PDOException $e) {
    return false;
  }
}

// Get all reviews for a product
function get_reviews_for_product($product_id) {
  try {
    $conn = connect_to_db();
    $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = ?");
    $stmt->execute([$product_id]);
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    return [];
  }
}

// Edit review
function edit_review($id, $user_id, $rating, $review_text) {
  try {
    $conn = connect_to_db();
    $stmt = $conn->prepare("UPDATE reviews SET user_id = ?, rating = ?, review_text = ? WHERE id = ?");
    $stmt->execute([$user_id, $rating, $review_text, $id]);
    return true;
  } catch (PDOException $e) {
    return false;
  }
}

// Delete review
function delete_review($id) {
  try {
    $conn = connect_to_db();
    $stmt = $conn->prepare("DELETE FROM reviews WHERE id = ?");
    $stmt->execute([$id]);
    return true;
  } catch (PDOException $e) {
    return false;
  }
}

// Example usage
$user_id = 1; // Replace with actual user ID
$product_id = 1; // Replace with actual product ID

$review_text = "This is a great product!";

if (create_review($user_id, $product_id, 5, $review_text)) {
  echo "Review created successfully!";
} else {
  echo "Error creating review.";
}

$reviews = get_reviews_for_product($product_id);
echo "<pre>";
print_r($reviews);
echo "</pre>";

// Edit review
if (edit_review(1, $user_id, 4, "Updated review text")) {
  echo "Review edited successfully!";
} else {
  echo "Error editing review.";
}

// Delete review
if (delete_review(1)) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review.";
}


// models/Review.php

class Review {
    private $id;
    private $product_id;
    private $rating;
    private $title;
    private $description;

    public function __construct($data) {
        $this->id = (int) $data['id'];
        $this->product_id = (int) $data['product_id'];
        $this->rating = (float) $data['rating'];
        $this->title = $data['title'];
        $this->description = $data['description'];
    }

    public function getId() {
        return $this->id;
    }

    public function getProductId() {
        return $this->product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getDescription() {
        return $this->description;
    }
}


// services/ReviewService.php

class ReviewService {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function getAllReviews() {
        $query = "SELECT * FROM reviews";
        $results = $this->db->query($query);
        $reviews = array();
        while ($row = $results->fetch_assoc()) {
            $review = new Review($row);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public function addReview(Review $review) {
        $query = "INSERT INTO reviews (product_id, rating, title, description)
                  VALUES (?, ?, ?, ?)";
        $stmt = $this->db->prepare($query);
        $stmt->bind_param("iiii", $review->getProductId(), $review->getRating(), $review->getTitle(), $review->getDescription());
        $stmt->execute();
    }

    public function updateReview(Review $review) {
        $query = "UPDATE reviews SET rating = ?, title = ?, description = ?
                  WHERE id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->bind_param("ifsi", $review->getRating(), $review->getTitle(), $review->getDescription(), $review->getId());
        $stmt->execute();
    }

    public function deleteReview(Review $review) {
        $query = "DELETE FROM reviews WHERE id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->bind_param("i", $review->getId());
        $stmt->execute();
    }
}


// controllers/ReviewController.php

class ReviewController {
    private $service;

    public function __construct(ReviewService $service) {
        $this->service = $service;
    }

    public function getAllReviews() {
        $reviews = $this->service->getAllReviews();
        return json_encode($reviews);
    }

    public function addReview(Request $request) {
        $review = new Review([
            'product_id' => (int) $request->input('product_id'),
            'rating' => (float) $request->input('rating'),
            'title' => $request->input('title'),
            'description' => $request->input('description')
        ]);
        $this->service->addReview($review);
        return json_encode(['message' => 'Review added successfully']);
    }

    public function updateReview(Request $request) {
        $review = new Review([
            'id' => (int) $request->input('id'),
            'product_id' => (int) $request->input('product_id'),
            'rating' => (float) $request->input('rating'),
            'title' => $request->input('title'),
            'description' => $request->input('description')
        ]);
        $this->service->updateReview($review);
        return json_encode(['message' => 'Review updated successfully']);
    }

    public function deleteReview(Request $request) {
        $review = new Review([
            'id' => (int) $request->input('id')
        ]);
        $this->service->deleteReview($review);
        return json_encode(['message' => 'Review deleted successfully']);
    }
}


// In your route file
$router->get('/reviews', 'ReviewController@getAllReviews');
$router->post('/reviews', 'ReviewController@addReview');
$router->put('/reviews/{id}', 'ReviewController@updateReview');
$router->delete('/reviews/{id}', 'ReviewController@deleteReview');

// In your client-side code
fetch('/reviews')
  .then(response => response.json())
  .then(reviews => console.log(reviews));

fetch('/reviews', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    product_id: 1,
    rating: 5.0,
    title: 'Great Product!',
    description: 'This is a great product!'
  })
})
  .then(response => response.json())
  .then(result => console.log(result));

fetch('/reviews/1', {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    id: 1,
    product_id: 2,
    rating: 4.0,
    title: 'Good Product!',
    description: 'This is a good product!'
  })
})
  .then(response => response.json())
  .then(result => console.log(result));

fetch('/reviews/1', {
  method: 'DELETE'
})
  .then(response => response.json())
  .then(result => console.log(result));


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'root', '');
  }

  public function addReview($productId, $userId, $rating, $comment) {
    $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, comment)
                                VALUES (:productId, :userId, :rating, :comment)");
    $stmt->bindParam(':productId', $productId);
    $stmt->bindParam(':userId', $userId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    try {
      $stmt->execute();
      return true;
    } catch (PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
      return false;
    }
  }

  public function getReviews($productId) {
    $stmt = $this->db->prepare("SELECT r.id, u.name AS username, r.rating, r.comment
                                FROM reviews r
                                JOIN users u ON r.user_id = u.id
                                WHERE r.product_id = :productId");
    $stmt->bindParam(':productId', $productId);

    try {
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
      return array();
    }
  }

  public function getAverageRating($productId) {
    $stmt = $this->db->prepare("SELECT AVG(r.rating) AS average_rating
                                FROM reviews r
                                WHERE r.product_id = :productId");
    $stmt->bindParam(':productId', $productId);

    try {
      $stmt->execute();
      return $stmt->fetchColumn();
    } catch (PDOException $e) {
      echo "Error getting average rating: " . $e->getMessage();
      return 0;
    }
  }
}


$review = new Review();

// Add a review for product ID 1
$result = $review->addReview(1, 1, 5, 'Great product!');
if ($result) {
  echo "Review added successfully!";
}

// Get all reviews for product ID 1
$reviews = $review->getReviews(1);
echo json_encode($reviews);

// Get the average rating for product ID 1
$averageRating = $review->getAverageRating(1);
echo "Average Rating: " . $averageRating;


<?php

// Database connection settings
$dsn = 'mysql:host=localhost;dbname=your_database';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// User Review Function
function create_review($product_id, $user_id, $review, $rating)
{
    global $pdo;
    
    $sql = "INSERT INTO reviews (product_id, user_id, review, rating) VALUES (:product_id, :user_id, :review, :rating)";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':rating', $rating);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function get_reviews($product_id)
{
    global $pdo;
    
    $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    
    if ($stmt->execute()) {
        return $stmt->fetchAll();
    } else {
        return false;
    }
}

function get_review($review_id)
{
    global $pdo;
    
    $sql = "SELECT * FROM reviews WHERE id = :review_id";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':review_id', $review_id);
    
    if ($stmt->execute()) {
        return $stmt->fetch();
    } else {
        return false;
    }
}

function update_review($review_id, $review, $rating)
{
    global $pdo;
    
    $sql = "UPDATE reviews SET review = :review, rating = :rating WHERE id = :review_id";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_id', $review_id);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function delete_review($review_id)
{
    global $pdo;
    
    $sql = "DELETE FROM reviews WHERE id = :review_id";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':review_id', $review_id);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

?>


// Create a new review
create_review(1, 1, "Great product!", 5);

// Get all reviews for a specific product
$reviews = get_reviews(1);
print_r($reviews);

// Get a single review by ID
$review = get_review(1);
var_dump($review);

// Update an existing review
update_review(1, "Even better now!", 4);

// Delete a review
delete_review(1);


<?php

// Include configuration file
require 'config.php';

// Connect to database
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to create a review
function createReview($user_id, $product_id, $review_text) {
    global $conn;
    
    // Insert review into database
    $sql = "INSERT INTO reviews (user_id, product_id, review_text)
            VALUES ('$user_id', '$product_id', '$review_text')";
    if ($conn->query($sql) === TRUE) {
        echo "New record created successfully";
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
    }
}

// Function to display all reviews
function displayReviews() {
    global $conn;
    
    // Select all reviews from database
    $sql = "SELECT * FROM reviews";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        // Output data of each row
        while($row = $result->fetch_assoc()) {
            echo "Review ID: " . $row["id"]. " - User ID: " . $row["user_id"]. " - Product ID: " . $row["product_id"]. " - Review Text: " . $row["review_text"]. "<br>";
        }
    } else {
        echo "0 results";
    }
}

// Function to update a review
function updateReview($id, $review_text) {
    global $conn;
    
    // Update review in database
    $sql = "UPDATE reviews SET review_text='$review_text' WHERE id='$id'";
    if ($conn->query($sql) === TRUE) {
        echo "Record updated successfully";
    } else {
        echo "Error updating record: " . $conn->error;
    }
}

// Function to delete a review
function deleteReview($id) {
    global $conn;
    
    // Delete review from database
    $sql = "DELETE FROM reviews WHERE id='$id'";
    if ($conn->query($sql) === TRUE) {
        echo "Record deleted successfully";
    } else {
        echo "Error deleting record: " . $conn->error;
    }
}

?>


<?php

// Include configuration file
require 'config.php';

// Connect to database
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>User Review System</title>
</head>
<body>

<h2>Review Creation Form</h2>

<form action="review.php" method="post">
    User ID: <input type="text" name="user_id"><br><br>
    Product ID: <input type="text" name="product_id"><br><br>
    Review Text: <textarea name="review_text"></textarea><br><br>
    <input type="submit" value="Create Review">
</form>

<h2>Review Display Form</h2>

<form action="review.php" method="post">
    <input type="submit" value="Display All Reviews">
</form>

<?php
// Call the functions to create a review and display all reviews
if (isset($_POST["create_review"])) {
    $user_id = $_POST['user_id'];
    $product_id = $_POST['product_id'];
    $review_text = $_POST['review_text'];
    createReview($user_id, $product_id, $review_text);
}

if (isset($_POST["display_reviews"])) {
    displayReviews();
}
?>

</body>
</html>

<?php
// Function to create a review
function createReview($user_id, $product_id, $review_text) {
    global $conn;
    
    // Insert review into database
    $sql = "INSERT INTO reviews (user_id, product_id, review_text)
            VALUES ('$user_id', '$product_id', '$review_text')";
    if ($conn->query($sql) === TRUE) {
        echo "New record created successfully";
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
    }
}

// Function to display all reviews
function displayReviews() {
    global $conn;
    
    // Select all reviews from database
    $sql = "SELECT * FROM reviews";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        // Output data of each row
        while($row = $result->fetch_assoc()) {
            echo "Review ID: " . $row["id"]. " - User ID: " . $row["user_id"]. " - Product ID: " . $row["product_id"]. " - Review Text: " . $row["review_text"]. "<br>";
        }
    } else {
        echo "0 results";
    }
}

?>


class Review {
    private $id;
    private $userId;
    private $productId;
    private $rating;
    private $review;

    public function __construct($id = null, $userId = null, $productId = null, $rating = null, $review = null) {
        $this->id = $id;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->review = $review;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}


class ReviewsController extends Controller {
    private $reviews;

    public function __construct($reviews) {
        $this->reviews = $reviews;
    }

    public function addReview(Review $review) {
        $this->reviews->add($review);
        return true;
    }

    public function editReview($id, Review $newReview) {
        if ($this->reviews->exists($id)) {
            $this->reviews->update($id, $newReview);
            return true;
        }
        return false;
    }

    public function deleteReview($id) {
        if ($this->reviews->exists($id)) {
            $this->reviews->remove($id);
            return true;
        }
        return false;
    }

    public function getAllReviews() {
        return $this->reviews->getAll();
    }
}


use Illuminate\Database\Eloquent\Model;

class ReviewsService extends Model {
    protected $fillable = ['id', 'user_id', 'product_id', 'rating', 'review'];

    public function add($review) {
        return Review::create($review)->save();
    }

    public function update($id, Review $newReview) {
        return Review::where('id', '=', $id)
            ->update([
                'rating' => $newReview->getRating(),
                'review' => $newReview->getReview()
            ]);
    }

    public function remove($id) {
        return Review::destroy($id);
    }

    public function getAll() {
        return Review::all();
    }
}


$reviewsService = new ReviewsService();

$review1 = new Review(null, 12345, 'P001', 5, "Great product!");
$review2 = new Review(null, 67890, 'P002', 4, "Good but not great.");

$reviewsController = new ReviewsController($reviewsService);
$reviewsController->addReview($review1);
$reviewsController->addReview($review2);

$allReviews = $reviewsController->getAllReviews();


function getReviews($product_id, $limit = null) {
    // Check if product exists in database
    if (!$product_id) {
        return array();
    }

    // Retrieve all reviews for this product from database
    global $db;
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    if ($limit !== null) {
        $query .= " LIMIT $limit";
    }
    $result = mysqli_query($db, $query);
    $reviews = array();
    while ($row = mysqli_fetch_assoc($result)) {
        $reviews[] = array(
            'id' => $row['id'],
            'user_id' => $row['user_id'],
            'rating' => $row['rating'],
            'review' => $row['review']
        );
    }
    return $reviews;
}

function createReview($product_id, $user_id, $rating, $review) {
    // Check if user exists in database
    global $db;
    $query = "INSERT INTO reviews (product_id, user_id, rating, review)
              VALUES ('$product_id', '$user_id', '$rating', '$review')";
    mysqli_query($db, $query);
}

function updateReview($id, $new_rating, $new_review) {
    // Check if review exists in database
    global $db;
    $query = "UPDATE reviews SET rating = '$new_rating', review = '$new_review'
              WHERE id = '$id'";
    mysqli_query($db, $query);
}

function deleteReview($id) {
    // Check if review exists in database
    global $db;
    $query = "DELETE FROM reviews WHERE id = '$id'";
    mysqli_query($db, $query);
}


// Connect to the database
$db = new mysqli('localhost', 'username', 'password', 'database');

// Get all reviews for a product with ID 1
$reviews = getReviews(1);
print_r($reviews);

// Create a review
createReview(1, 2, 4, "Great product!");

// Update an existing review
updateReview(1, 5, "Even better than I expected!");

// Delete an existing review
deleteReview(1);


$stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)");
$stmt->bind_param('isss', $product_id, $user_id, $rating, $review);
$stmt->execute();


// config.php (store your database credentials here)
$db_host = 'your_host';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// connect to the database
function db_connect() {
  global $db_host, $db_username, $db_password, $db_name;
  $conn = new mysqli($db_host, $db_username, $db_password, $db_name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// function to display reviews
function display_reviews() {
  // connect to the database
  $conn = db_connect();
  
  // query for all reviews
  $query = "SELECT r.id, u.name, r.product_name, r.review_text, r.rating FROM Reviews r JOIN Users u ON r.user_id=u.id ORDER BY r.created_at DESC";
  $result = $conn->query($query);
  
  if ($result->num_rows > 0) {
    // display reviews
    echo "<h2>Reviews</h2>";
    while($row = $result->fetch_assoc()) {
      echo "<p>" . $row["name"] . " reviewed " . $row["product_name"] . ": " . $row["review_text"] . "</p>";
      echo "<p>Rating: " . $row["rating"] . "/5</p>";
    }
  } else {
    echo "No reviews found.";
  }
  
  // close the database connection
  $conn->close();
}

// function to submit a new review
function submit_review($name, $email, $product_name, $review_text, $rating) {
  // connect to the database
  $conn = db_connect();
  
  // query to insert new review into the Reviews table
  $query = "INSERT INTO Reviews (user_id, product_name, review_text, rating) VALUES (?, ?, ?, ?)";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("sss", $name, $product_name, $review_text, $rating);
  
  // execute the query
  if ($stmt->execute()) {
    echo "Review submitted successfully!";
  } else {
    echo "Failed to submit review.";
  }
  
  // close the database connection
  $conn->close();
}

// function to retrieve user reviews
function get_user_reviews($user_id) {
  // connect to the database
  $conn = db_connect();
  
  // query for all reviews belonging to the specified user
  $query = "SELECT r.id, u.name, r.product_name, r.review_text, r.rating FROM Reviews r JOIN Users u ON r.user_id=u.id WHERE r.user_id=?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("i", $user_id);
  
  // execute the query and fetch results
  if ($result = $stmt->execute()) {
    return $result;
  } else {
    echo "Failed to retrieve reviews.";
  }
  
  // close the database connection
  $conn->close();
}


display_reviews();


submit_review("John Doe", "john.doe@example.com", "Product X", "This is an excellent product!", 5);


$user_id = 1;
$reviews = get_user_reviews($user_id);
if ($reviews) {
    foreach ($reviews as $review) {
        echo "<p>" . $review["name"] . " reviewed " . $review["product_name"] . ": " . $review["review_text"] . "</p>";
        echo "<p>Rating: " . $review["rating"] . "/5</p>";
    }
}


function addReview($userId, $productId, $rating, $comment) {
  // Connect to database (e.g. MySQL)
  $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

  // Insert review into database table
  $stmt = $db->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:userId, :productId, :rating, :comment)");
  $stmt->bindParam(':userId', $userId);
  $stmt->bindParam(':productId', $productId);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':comment', $comment);

  if ($stmt->execute()) {
    // Review added successfully
    return true;
  } else {
    // Error adding review
    return false;
  }

  // Close database connection
  $db = null;
}

function getReviews($productId) {
  // Connect to database (e.g. MySQL)
  $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

  // Retrieve reviews from database table
  $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :productId");
  $stmt->bindParam(':productId', $productId);

  if ($stmt->execute()) {
    // Get reviews as an array of associative arrays
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } else {
    // Error retrieving reviews
    return false;
  }

  // Close database connection
  $db = null;
}

function getUserReviews($userId) {
  // Connect to database (e.g. MySQL)
  $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

  // Retrieve reviews from database table
  $stmt = $db->prepare("SELECT * FROM reviews WHERE user_id = :userId");
  $stmt->bindParam(':userId', $userId);

  if ($stmt->execute()) {
    // Get reviews as an array of associative arrays
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } else {
    // Error retrieving reviews
    return false;
  }

  // Close database connection
  $db = null;
}

function updateReview($reviewId, $newRating, $newComment) {
  // Connect to database (e.g. MySQL)
  $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

  // Update review in database table
  $stmt = $db->prepare("UPDATE reviews SET rating = :newRating, comment = :newComment WHERE id = :reviewId");
  $stmt->bindParam(':reviewId', $reviewId);
  $stmt->bindParam(':newRating', $newRating);
  $stmt->bindParam(':newComment', $newComment);

  if ($stmt->execute()) {
    // Review updated successfully
    return true;
  } else {
    // Error updating review
    return false;
  }

  // Close database connection
  $db = null;
}

function deleteReview($reviewId) {
  // Connect to database (e.g. MySQL)
  $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

  // Delete review from database table
  $stmt = $db->prepare("DELETE FROM reviews WHERE id = :reviewId");
  $stmt->bindParam(':reviewId', $reviewId);

  if ($stmt->execute()) {
    // Review deleted successfully
    return true;
  } else {
    // Error deleting review
    return false;
  }

  // Close database connection
  $db = null;
}


// Add a new review for user 1 and product 1 with rating 5 and comment "Great product!"
$reviewId = addReview(1, 1, 5, "Great product!");

// Get all reviews for product 1
$reviews = getReviews(1);

// Get all reviews for user 1
$userReviews = getUserReviews(1);

// Update review with ID 1 to have a new rating of 4 and comment "Okay product"
$updateResult = updateReview(1, 4, "Okay product");

// Delete review with ID 1
$deleteResult = deleteReview(1);


<?php

// Configuration for the database connection
$dsn = 'mysql:host=localhost;dbname=database_name';
$username = 'username';
$password = 'password';

try {
    // Connect to the database
    $conn = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// Function to add a review
function add_review($user_id, $product_id, $rating, $comment) {
    global $conn;
    
    try {
        // Prepare the query
        $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, comment)
                                VALUES (:user_id, :product_id, :rating, :comment)");
        
        // Bind parameters
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);
        
        // Execute the query
        $stmt->execute();
    } catch (PDOException $e) {
        echo 'Error adding review: ' . $e->getMessage();
    }
}

// Function to get all reviews for a product
function get_reviews($product_id) {
    global $conn;
    
    try {
        // Prepare the query
        $stmt = $conn->prepare("SELECT r.id, u.name, r.rating, r.comment FROM reviews r
                                JOIN users u ON r.user_id = u.id WHERE r.product_id = :product_id");
        
        // Bind parameters
        $stmt->bindParam(':product_id', $product_id);
        
        // Execute the query and return results as an array of objects
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_OBJ);
    } catch (PDOException $e) {
        echo 'Error getting reviews: ' . $e->getMessage();
    }
}

// Function to get a single review by its ID
function get_review($review_id) {
    global $conn;
    
    try {
        // Prepare the query
        $stmt = $conn->prepare("SELECT r.id, u.name, r.rating, r.comment FROM reviews r
                                JOIN users u ON r.user_id = u.id WHERE r.id = :id");
        
        // Bind parameters
        $stmt->bindParam(':id', $review_id);
        
        // Execute the query and return result as an object
        $stmt->execute();
        return $stmt->fetch(PDO::FETCH_OBJ);
    } catch (PDOException $e) {
        echo 'Error getting review: ' . $e->getMessage();
    }
}

// Function to update a review
function update_review($review_id, $user_id, $product_id, $rating, $comment) {
    global $conn;
    
    try {
        // Prepare the query
        $stmt = $conn->prepare("UPDATE reviews SET user_id = :user_id, product_id = :product_id,
                                rating = :rating, comment = :comment WHERE id = :id");
        
        // Bind parameters
        $stmt->bindParam(':id', $review_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);
        
        // Execute the query
        $stmt->execute();
    } catch (PDOException $e) {
        echo 'Error updating review: ' . $e->getMessage();
    }
}

// Function to delete a review by its ID
function delete_review($review_id) {
    global $conn;
    
    try {
        // Prepare the query
        $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
        
        // Bind parameters
        $stmt->bindParam(':id', $review_id);
        
        // Execute the query
        $stmt->execute();
    } catch (PDOException $e) {
        echo 'Error deleting review: ' . $e->getMessage();
    }
}

?>


// Add a new review for product 1 with user ID 2, rating of 5 and comment "Good product"
add_review(2, 1, 5, "Good product");

// Get all reviews for product 1
$reviews = get_reviews(1);
print_r($reviews);

// Update the first review to change its rating to 4
update_review($reviews[0]->id, $reviews[0]->user_id, $reviews[0]->product_id, 4, "");

// Delete the updated review
delete_review($reviews[0]->id);


// user_review.php

function getReviews($productId, $userId = null) {
  // Get all reviews for a product or user-specific reviews
  global $db;
  
  if ($userId !== null) {
    $query = "SELECT * FROM reviews WHERE user_id = :user_id AND product_id = :product_id";
  } else {
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
  }
  
  try {
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $userId, PDO::PARAM_INT);
    $stmt->bindParam(':product_id', $productId, PDO::PARAM_INT);
    
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo "Error: " . $e->getMessage();
    return array();
  }
}

function addReview($data) {
  // Add a new review
  global $db;
  
  try {
    $query = "INSERT INTO reviews SET user_id = :user_id, product_id = :product_id, review = :review, rating = :rating";
    
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $data['user_id'], PDO::PARAM_INT);
    $stmt->bindParam(':product_id', $data['product_id'], PDO::PARAM_INT);
    $stmt->bindParam(':review', $data['review'], PDO::PARAM_STR);
    $stmt->bindParam(':rating', $data['rating'], PDO::PARAM_DECIMAL);
    
    $stmt->execute();
    return $db->lastInsertId();
  } catch (PDOException $e) {
    echo "Error: " . $e->getMessage();
    return null;
  }
}

function updateReview($reviewId, $data) {
  // Update an existing review
  global $db;
  
  try {
    $query = "UPDATE reviews SET user_id = :user_id, product_id = :product_id, review = :review, rating = :rating WHERE id = :id";
    
    $stmt = $db->prepare($query);
    $stmt->bindParam(':id', $reviewId, PDO::PARAM_INT);
    $stmt->bindParam(':user_id', $data['user_id'], PDO::PARAM_INT);
    $stmt->bindParam(':product_id', $data['product_id'], PDO::PARAM_INT);
    $stmt->bindParam(':review', $data['review'], PDO::PARAM_STR);
    $stmt->bindParam(':rating', $data['rating'], PDO::PARAM_DECIMAL);
    
    $stmt->execute();
    return true;
  } catch (PDOException $e) {
    echo "Error: " . $e->getMessage();
    return false;
  }
}

function deleteReview($reviewId) {
  // Delete a review
  global $db;
  
  try {
    $query = "DELETE FROM reviews WHERE id = :id";
    
    $stmt = $db->prepare($query);
    $stmt->bindParam(':id', $reviewId, PDO::PARAM_INT);
    
    $stmt->execute();
    return true;
  } catch (PDOException $e) {
    echo "Error: " . $e->getMessage();
    return false;
  }
}


// Get all reviews for a product with ID 1
$reviews = getReviews(1);
print_r($reviews);

// Add a new review
$data = array(
  'user_id' => 1,
  'product_id' => 1,
  'review' => 'Great product!',
  'rating' => 4.5
);
$reviewId = addReview($data);
echo "New review ID: $reviewId
";

// Update an existing review with ID 123
$data = array(
  'user_id' => 1,
  'product_id' => 1,
  'review' => 'Even better!',
  'rating' => 5.0
);
$updateReview = updateReview(123, $data);
echo "Update result: " . ($updateReview ? 'true' : 'false') . "
";

// Delete a review with ID 456
$deleteResult = deleteReview(456);
echo "Delete result: " . ($deleteResult ? 'true' : 'false') . "
";


// Review class
class Review {
    private $id;
    private $productId;
    private $userId;
    private $rating;
    private $comment;

    public function __construct($productId, $userId, $rating, $comment) {
        $this->productId = $productId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->id = uniqid();
    }

    public function getId() {
        return $this->id;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}

// Review Model
class ReviewModel {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    // Create a new review
    public function createReview(Review $review) {
        $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
                  VALUES (:productId, :userId, :rating, :comment)";
        try {
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(":productId", $review->getProductId());
            $stmt->bindParam(":userId", $review->getUserId());
            $stmt->bindParam(":rating", $review->getRating());
            $stmt->bindParam(":comment", $review->getComment());
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error creating review: " . $e->getMessage();
            return false;
        }
    }

    // Get all reviews for a product
    public function getReviewsForProduct($productId) {
        $query = "SELECT * FROM reviews WHERE product_id = :productId";
        try {
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(":productId", $productId);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
        } catch (PDOException $e) {
            echo "Error retrieving reviews: " . $e->getMessage();
            return array();
        }
    }

    // Get all reviews for a user
    public function getReviewsForUser($userId) {
        $query = "SELECT * FROM reviews WHERE user_id = :userId";
        try {
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(":userId", $userId);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
        } catch (PDOException $e) {
            echo "Error retrieving reviews: " . $e->getMessage();
            return array();
        }
    }

    // Delete a review
    public function deleteReview($reviewId) {
        $query = "DELETE FROM reviews WHERE id = :id";
        try {
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(":id", $reviewId);
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error deleting review: " . $e->getMessage();
            return false;
        }
    }
}


// Create a new PDO instance
$db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');

// Create a new ReviewModel instance
$reviewModel = new ReviewModel($db);

// Create a new review
$review = new Review(1, 1, 5, "Great product!");
if ($reviewModel->createReview($review)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review";
}

// Get all reviews for a product
$reviewsForProduct = $reviewModel->getReviewsForProduct(1);
echo "<h2>Reviews for Product 1:</h2>";
foreach ($reviewsForProduct as $review) {
    echo "<p>User ID: {$review->getUserId()}</p>";
    echo "<p>Rating: {$review->getRating()}</p>";
    echo "<p>Comment: {$review->getComment()}</p>";
}

// Get all reviews for a user
$reviewsForUser = $reviewModel->getReviewsForUser(1);
echo "<h2>Reviews for User 1:</h2>";
foreach ($reviewsForUser as $review) {
    echo "<p>Product ID: {$review->getProductId()}</p>";
    echo "<p>Rating: {$review->getRating()}</p>";
    echo "<p>Comment: {$review->getComment()}</p>";
}

// Delete a review
$reviewModel->deleteReview($reviewId);
echo "Review deleted successfully!";


// database connection details
$host = 'localhost';
$username = 'root';
$password = '';
$dbname = 'reviews';

// connect to the database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// function to retrieve all reviews
function getReviews() {
  global $conn;
  $query = "SELECT r.id, u.username, p.name, r.rating, r.review FROM reviews r INNER JOIN users u ON r.user_id = u.id INNER JOIN products p ON r.product_id = p.id";
  $result = $conn->query($query);
  return $result;
}

// function to create a new review
function createReview($user_id, $product_id, $rating, $review) {
  global $conn;
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("iiii", $user_id, $product_id, $rating, $review);
  return $stmt->execute();
}

// function to update an existing review
function updateReview($id, $user_id, $product_id, $rating, $review) {
  global $conn;
  $query = "UPDATE reviews SET user_id = ?, product_id = ?, rating = ?, review = ? WHERE id = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("iiii$i", $user_id, $product_id, $rating, $review, $id);
  return $stmt->execute();
}

// function to delete a review
function deleteReview($id) {
  global $conn;
  $query = "DELETE FROM reviews WHERE id = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("i", $id);
  return $stmt->execute();
}


// connect to database
$conn = new mysqli($host, $username, $password, $dbname);

// create a new review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = "This product is amazing!";
createReview($user_id, $product_id, $rating, $review);

// get all reviews
$result = getReviews();
while ($row = $result->fetch_assoc()) {
    echo "ID: " . $row['id'] . ", User: " . $row['username'] . ", Product: " . $row['name'] . ", Rating: " . $row['rating'] . ", Review: " . $row['review'];
}

// update an existing review
$id = 1;
$user_id = 1;
$product_id = 1;
$rating = 4;
$review = "This product is good!";
updateReview($id, $user_id, $product_id, $rating, $review);

// delete a review
deleteReview(2);


// db.php (database connection file)

$host = 'your_host';
$dbname = 'your_database';
$username = 'your_username';
$password = 'your_password';

$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

function add_review($user_id, $product_id, $rating, $review) {
  global $conn;
  
  try {
    $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    $stmt->execute();
    
    return true;
  } catch (PDOException $e) {
    echo 'Error: ' . $e->getMessage() . '<br>';
    return false;
  }
}

function view_reviews($product_id = null, $rating = null) {
  global $conn;
  
  try {
    if ($product_id !== null && $rating !== null) {
      $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id AND rating >= :rating");
      $stmt->bindParam(':product_id', $product_id);
      $stmt->bindParam(':rating', $rating);
    } elseif ($product_id !== null) {
      $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
      $stmt->bindParam(':product_id', $product_id);
    } else {
      $stmt = $conn->query('SELECT * FROM reviews');
    }
    
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo 'Error: ' . $e->getMessage() . '<br>';
    return array();
  }
}

// Example usage:
$user_id = 1;
$product_id = 1;
$rating = 4;
$review = 'This product is amazing!';

if (add_review($user_id, $product_id, $rating, $review)) {
  echo 'Review added successfully!';
} else {
  echo 'Error adding review.';
}

$reviews = view_reviews(null, null);
echo json_encode($reviews); // View all reviews

$filteredReviews = view_reviews(1, 4);
echo json_encode($filteredReviews); // Filter by product ID and rating


<?php

// Include database connection settings
require 'config.php';

// Function to create a new review
function create_review($user_id, $product_name, $rating, $review) {
  global $conn;

  $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_name, rating, review)
    VALUES (:user_id, :product_name, :rating, :review)");
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':product_name', $product_name);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);

  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to read reviews
function get_reviews($user_id = null) {
  global $conn;

  if ($user_id !== null) {
    $stmt = $conn->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll();
  } else {
    $stmt = $conn->prepare("SELECT * FROM reviews");
    $stmt->execute();
    return $stmt->fetchAll();
  }
}

// Function to update a review
function update_review($review_id, $user_id, $product_name, $rating, $review) {
  global $conn;

  $stmt = $conn->prepare("UPDATE reviews SET user_id = :user_id, product_name = :product_name, rating = :rating, review = :review WHERE id = :review_id");
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':product_name', $product_name);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  $stmt->bindParam(':review_id', $review_id);

  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to delete a review
function delete_review($review_id) {
  global $conn;

  $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :review_id");
  $stmt->bindParam(':review_id', $review_id);

  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

?>


// Create a new review
$user_id = 1;
$product_name = 'Product X';
$rating = 5;
$review = 'This is a great product!';
if (create_review($user_id, $product_name, $rating, $review)) {
  echo 'Review created successfully!';
} else {
  echo 'Error creating review.';
}

// Read reviews
$user_id = 1;
$reviews = get_reviews($user_id);
foreach ($reviews as $review) {
  echo 'Product: ' . $review['product_name'] . ', Rating: ' . $review['rating'] . ', Review: ' . $review['review'];
}

// Update a review
$review_id = 1;
$user_id = 1;
$product_name = 'Updated Product X';
$rating = 4;
$review = 'This is an updated review.';
if (update_review($review_id, $user_id, $product_name, $rating, $review)) {
  echo 'Review updated successfully!';
} else {
  echo 'Error updating review.';
}

// Delete a review
$review_id = 1;
if (delete_review($review_id)) {
  echo 'Review deleted successfully!';
} else {
  echo 'Error deleting review.';
}


// Database connection settings
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'root';
$password = '';

// Connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

function getReviews() {
  global $conn;
  
  // Get reviews from database
  $stmt = $conn->prepare('SELECT * FROM reviews');
  $stmt->execute();
  
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}


// Function to add a new review
function addReview($name, $rating, $comment) {
  global $conn;
  
  // Insert review into database
  $stmt = $conn->prepare('INSERT INTO reviews (name, rating, comment) VALUES (:name, :rating, :comment)');
  $stmt->bindParam(':name', $name);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':comment', $comment);
  
  return $stmt->execute();
}

// Function to update an existing review
function updateReview($id, $name, $rating, $comment) {
  global $conn;
  
  // Update review in database
  $stmt = $conn->prepare('UPDATE reviews SET name = :name, rating = :rating, comment = :comment WHERE id = :id');
  $stmt->bindParam(':id', $id);
  $stmt->bindParam(':name', $name);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':comment', $comment);
  
  return $stmt->execute();
}

// Function to delete a review
function deleteReview($id) {
  global $conn;
  
  // Delete review from database
  $stmt = $conn->prepare('DELETE FROM reviews WHERE id = :id');
  $stmt->bindParam(':id', $id);
  
  return $stmt->execute();
}


<?php
require_once 'database.php';
require_once 'review.php';

// Get all reviews from database
$reviews = getReviews();

// Display reviews on page
foreach ($reviews as $review) {
  echo '<h2>' . $review['name'] . '</h2>';
  echo '<p>Rating: ' . $review['rating'] . '/5</p>';
  echo '<p>Comment: ' . $review['comment'] . '</p>';
}

// Form to add new review
echo '<form action="" method="post">';
echo '<input type="text" name="name" placeholder="Name">';
echo '<select name="rating">';
echo '<option value="1">1</option>';
echo '<option value="2">2</option>';
echo '<option value="3">3</option>';
echo '<option value="4">4</option>';
echo '<option value="5">5</option>';
echo '</select>';
echo '<textarea name="comment"></textarea>';
echo '<button type="submit" name="add_review">Add Review</button>';
echo '</form>';

// Handle form submission
if (isset($_POST['add_review'])) {
  $name = $_POST['name'];
  $rating = $_POST['rating'];
  $comment = $_POST['comment'];
  
  // Add review to database
  addReview($name, $rating, $comment);
}
?>


// Review class to handle user reviews
class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Function to add a new review
  public function addReview($userId, $productId, $rating, $comment) {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)");
    $stmt->bindParam(1, $userId);
    $stmt->bindParam(2, $productId);
    $stmt->bindParam(3, $rating);
    $stmt->bindParam(4, $comment);
    return $stmt->execute();
  }

  // Function to get all reviews for a product
  public function getReviewsForProduct($productId) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
    $stmt->bindParam(1, $productId);
    return $stmt->fetchAll();
  }

  // Function to get all reviews for a user
  public function getReviewsForUser($userId) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = ?");
    $stmt->bindParam(1, $userId);
    return $stmt->fetchAll();
  }
}


// Initialize database connection
$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');

// Create a new Review object
$review = new Review($db);

// Add a new review
$userId = 1;
$productId = 2;
$rating = 5;
$comment = "Great product!";
$result = $review->addReview($userId, $productId, $rating, $comment);
if ($result) {
  echo "Review added successfully!";
} else {
  echo "Error adding review.";
}

// Get all reviews for a product
$productId = 2;
$reviews = $review->getReviewsForProduct($productId);
foreach ($reviews as $review) {
  echo "Rating: {$review['rating']}, Comment: {$review['comment']}";
}


// config.php

<?php
defined('BASEPATH') or exit('No direct script access allowed');

require_once 'vendor/autoload.php';

use Illuminate\Database\Capsule\Manager as Capsule;

$capsule = new Capsule();

$capsule->addConnection([
    'driver' => 'mysql',
    'host' => 'localhost',
    'database' => 'reviews',
    'username' => 'root',
    'password' => '',
]);

$capsule->setAsGlobal();


// ReviewController.php

<?php
defined('BASEPATH') or exit('No direct script access allowed');

class ReviewController extends CI_Controller {

  public function index() {
    $this->load->model('ReviewModel');
    $reviews = $this->ReviewModel->getReviews();
    echo json_encode($reviews);
  }

  public function create() {
    $this->load->model('ReviewModel');
    if ($this->input->post()) {
      $data = array(
        'user_id' => $this->session->userdata('id'),
        'product_id' => $this->input->post('product_id'),
        'rating' => $this->input->post('rating'),
        'review' => $this->input->post('review')
      );
      if ($this->ReviewModel->createReview($data)) {
        echo json_encode(array('success' => true));
      } else {
        echo json_encode(array('error' => true));
      }
    }
  }

}


// ReviewModel.php

<?php
defined('BASEPATH') or exit('No direct script access allowed');

class ReviewModel extends CI_Model {

  public function getReviews() {
    $this->db->select('*');
    $this->db->from('reviews');
    return $this->db->get()->result();
  }

  public function createReview($data) {
    return $this->db->insert('reviews', $data);
  }
}


// controller function that loads the ReviewController
function create_review() {
  $this->load->controller('ReviewController');
  $review_data = array(
    'user_id' => 1,
    'product_id' => 1,
    'rating' => 5,
    'review' => 'Great product!'
  );
  echo json_encode($this->ReviewController->create($review_data));
}


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

// Connect to database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to display reviews
function displayReviews() {
  global $conn;
  
  // Query to retrieve reviews from database
  $query = "SELECT * FROM reviews ORDER BY created_at DESC";
  $result = $conn->query($query);
  
  if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
      echo "<p>" . $row["review"] . "</p>";
      echo "<small>Rating: " . $row["rating"] . "/5</small><br>";
      echo "<small>Posted by User ID " . $row["user_id"] . "</small><br>";
    }
  } else {
    echo "No reviews yet!";
  }
}

// Function to add a new review
function addReview($review, $rating) {
  global $conn;
  
  // Insert new review into database
  $query = "INSERT INTO reviews (review, rating) VALUES ('$review', '$rating')";
  if ($conn->query($query)) {
    echo "Review added successfully!";
  } else {
    echo "Error adding review: " . $conn->error;
  }
}

// Display form to add a new review
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <label for="review">Write your review:</label>
  <textarea id="review" name="review"></textarea><br>
  <label for="rating">Rating (1-5):</label>
  <input type="number" id="rating" name="rating" min="1" max="5"><br>
  <button type="submit" name="submit">Submit Review</button>
</form>

<?php
if (isset($_POST['submit'])) {
  addReview($_POST['review'], $_POST['rating']);
}

displayReviews();

// Close database connection
$conn->close();
?>


// app/Models/UserReview.php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class UserReview extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'product_id',
        'review_text',
        'rating',
        'created_at',
        'updated_at'
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function product()
    {
        return $this->belongsTo(Product::class);
    }
}


// app/Http/Controllers/UserReviewController.php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\UserReview;

class UserReviewController extends Controller
{
    public function index(Request $request)
    {
        // Retrieve all user reviews, including pagination and filtering
        $userReviews = UserReview::with('user', 'product')->paginate(10);

        return view('user_reviews.index', compact('userReviews'));
    }

    public function create()
    {
        // Display form to submit new review
        return view('user_reviews.create');
    }

    public function store(Request $request)
    {
        // Validate and save the new review
        $validatedData = $request->validate([
            'review_text' => 'required',
            'rating' => 'required|numeric|min:1|max:5'
        ]);

        UserReview::create($validatedData);

        return redirect()->route('user_reviews.index')->withSuccess('Review submitted successfully');
    }

    public function show(UserReview $userReview)
    {
        // Display a specific review
        return view('user_reviews.show', compact('userReview'));
    }

    public function edit(UserReview $userReview)
    {
        // Display form to edit an existing review
        return view('user_reviews.edit', compact('userReview'));
    }

    public function update(Request $request, UserReview $userReview)
    {
        // Validate and update the existing review
        $validatedData = $request->validate([
            'review_text' => 'required',
            'rating' => 'required|numeric|min:1|max:5'
        ]);

        $userReview->update($validatedData);

        return redirect()->route('user_reviews.index')->withSuccess('Review updated successfully');
    }

    public function destroy(UserReview $userReview)
    {
        // Delete the review
        $userReview->delete();

        return redirect()->route('user_reviews.index')->withSuccess('Review deleted successfully');
    }
}


// routes/web.php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\UserReviewController;

Route::get('/user-reviews', [UserReviewController::class, 'index'])->name('user_reviews.index');
Route::get('/user-reviews/create', [UserReviewController::class, 'create'])->name('user_reviews.create');
Route::post('/user-reviews/store', [UserReviewController::class, 'store'])->name('user_reviews.store');
Route::get('/user-reviews/{userReview}', [UserReviewController::class, 'show'])->name('user_reviews.show');
Route::get('/user-reviews/{userReview}/edit', [UserReviewController::class, 'edit'])->name('user_reviews.edit');
Route::put('/user-reviews/{userReview}/update', [UserReviewController::class, 'update'])->name('user_reviews.update');
Route::delete('/user-reviews/{userReview}', [UserReviewController::class, 'destroy'])->name('user_reviews.destroy');


function createUserReview($reviewData) {
  // Validate input data
  if (empty($reviewData['product_id']) || empty($reviewData['user_id']) || empty($reviewData['rating']) || empty($reviewData['comment'])) {
    throw new Exception('Invalid review data');
  }

  // Connect to database
  $db = connectToDatabase();

  // Check if product exists in database
  $productExists = checkProductInDatabase($db, $reviewData['product_id']);

  if (!$productExists) {
    throw new Exception('Product not found');
  }

  // Insert review into database
  $query = "INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':product_id', $reviewData['product_id']);
  $stmt->bindParam(':user_id', $reviewData['user_id']);
  $stmt->bindParam(':rating', $reviewData['rating']);
  $stmt->bindParam(':comment', $reviewData['comment']);
  $stmt->execute();

  // Return review ID
  return $db->lastInsertId();
}


$reviewData = array(
  'product_id' => 123,
  'user_id' => 456,
  'rating' => 5,
  'comment' => 'Great product!'
);

try {
  $reviewID = createUserReview($reviewData);
  echo "Review created with ID: $reviewID";
} catch (Exception $e) {
  echo "Error creating review: " . $e->getMessage();
}


class Review {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function submitReview($productId, $userId, $rating, $comment) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)");
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':user_id', $userId);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error submitting review: " . $e->getMessage();
            return false;
        }
    }

    public function getReviews($productId) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error retrieving reviews: " . $e->getMessage();
            return array();
        }
    }

    public function getAverageRating($productId) {
        try {
            $stmt = $this->db->prepare("SELECT AVG(rating) FROM reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();
            return $stmt->fetchColumn();
        } catch (PDOException $e) {
            echo "Error retrieving average rating: " . $e->getMessage();
            return 0;
        }
    }
}


class ReviewController {
    private $model;

    public function __construct($model) {
        $this->model = $model;
    }

    public function submitReview() {
        if ($_SERVER['REQUEST_METHOD'] == 'POST') {
            $productId = $_POST['product_id'];
            $userId = $_POST['user_id'];
            $rating = $_POST['rating'];
            $comment = $_POST['comment'];

            if ($this->model->submitReview($productId, $userId, $rating, $comment)) {
                echo "Review submitted successfully!";
            } else {
                echo "Error submitting review.";
            }
        }
    }

    public function getReviews() {
        if ($_SERVER['REQUEST_METHOD'] == 'GET') {
            $productId = $_GET['product_id'];
            $reviews = $this->model->getReviews($productId);
            foreach ($reviews as $review) {
                echo "Rating: " . $review['rating'] . ", Comment: " . $review['comment'] . "<br>";
            }
        }
    }

    public function getAverageRating() {
        if ($_SERVER['REQUEST_METHOD'] == 'GET') {
            $productId = $_GET['product_id'];
            $averageRating = $this->model->getAverageRating($productId);
            echo "Average rating: " . $averageRating;
        }
    }
}


require_once('review.model.php');
require_once('review.controller.php');

$db = new PDO('mysql:host=localhost;dbname=mydb', 'username', 'password');

$model = new Review($db);
$controller = new ReviewController($model);

if (isset($_GET['action'])) {
    $controller->{$controller->getAction()}();
}

function getAction() {
    switch ($_GET['action']) {
        case 'submit-review':
            return 'submitReview';
        case 'get-reviews':
            return 'getReviews';
        case 'average-rating':
            return 'getAverageRating';
        default:
            return 'index';
    }
}


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'root';
$password = '';

// Create database connection
$conn = new mysqli($host, $username, $password, $dbname);

// Check if the connection was successful
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

class ReviewSystem {

    private $conn;

    // Initialize a new review system instance with a database connection.
    public function __construct($conn) {
        $this->conn = $conn;
    }

    // Submit a new review
    public function submit_review($product_id, $user_name, $review_text) {
        if ($stmt = $this->conn->prepare("INSERT INTO reviews (product_id, user_name, review_text) VALUES (?, ?, ?)")) {

            // Bind parameters to the prepared statement.
            $stmt->bind_param("sss", $product_id, $user_name, $review_text);

            // Execute the statement
            if ($stmt->execute()) {
                echo "Review submitted successfully!";
            } else {
                echo "Failed to submit review";
            }

        } else {
            echo "Error preparing the insert statement";
        }
    }

    // Get all reviews for a product.
    public function get_reviews_by_product($product_id) {
        $reviews = array();
        if ($stmt = $this->conn->prepare("SELECT * FROM reviews WHERE product_id=?")) {

            // Bind parameters to the prepared statement
            $stmt->bind_param("s", $product_id);

            // Execute the query and store results in an array.
            if ($stmt->execute()) {
                $result = $stmt->get_result();
                while($row = $result->fetch_assoc()) {
                    $reviews[] = $row;
                }
            } else {
                echo "Error executing the query";
            }

        } else {
            echo "Error preparing the select statement for product reviews";
        }
        return $reviews;
    }

    // Get all reviews by a user
    public function get_reviews_by_user($user_name) {
        $reviews = array();
        if ($stmt = $this->conn->prepare("SELECT * FROM reviews WHERE user_name=?")) {

            // Bind parameters to the prepared statement.
            $stmt->bind_param("s", $user_name);

            // Execute the query and store results in an array.
            if ($stmt->execute()) {
                $result = $stmt->get_result();
                while($row = $result->fetch_assoc()) {
                    $reviews[] = $row;
                }
            } else {
                echo "Error executing the query";
            }

        } else {
            echo "Error preparing the select statement for user reviews";
        }
        return $reviews;
    }
}

// Create a new review system instance with our database connection.
$review_system = new ReviewSystem($conn);

// Example usage:
// Submit a new review
$user_name = 'John Doe';
$product_id = 1;
$review_text = "This product is amazing!";
$review_system->submit_review($product_id, $user_name, $review_text);

// Get all reviews for a product.
$product_id = 1;
$reviews = $review_system->get_reviews_by_product($product_id);
print_r($reviews);

// Get all reviews by a user
$user_name = 'John Doe';
$reviews = $review_system->get_reviews_by_user($user_name);
print_r($reviews);

?>


<?php

// Configuration settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to the database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function get_reviews($product_id, $limit = 10) {
    global $conn;
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id' ORDER BY id DESC LIMIT $limit";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "<div class='review'>";
            echo "<p>" . $row['username'] . " gave this product " . $row['rating'] . "/5 stars</p>";
            echo "<p>" . $row['review_text'] . "</p>";
            echo "</div>";
        }
    } else {
        echo "No reviews found for this product.";
    }
}

function add_review($product_id, $username, $review_text, $rating) {
    global $conn;
    $query = "INSERT INTO reviews (user_id, product_id, review_text, rating)
                VALUES ('" . get_user_id($username) . "', '$product_id', '$review_text', '$rating')";
    if ($conn->query($query)) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review: " . $conn->error;
    }
}

function get_user_id($username) {
    global $conn;
    $query = "SELECT id FROM users WHERE username = '$username'";
    $result = $conn->query($query);
    if ($result->num_rows > 0) {
        return $result->fetch_assoc()['id'];
    } else {
        echo "User not found.";
        return false;
    }
}

// Example usage:
$product_id = '123'; // Replace with the actual product ID
get_reviews($product_id);

$username = 'johndoe';
$review_text = 'This is a great product!';
$rating = 5;

add_review($product_id, $username, $review_text, $rating);


class ReviewController {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  }

  public function addReview($user_id, $product_id, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
      $stmt->execute([$user_id, $product_id, $rating, $review]);
      return true;
    } catch(PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
      return false;
    }
  }

  public function getReviews($product_id = null, $limit = 10, $offset = 0) {
    try {
      if ($product_id !== null) {
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ? ORDER BY created_at DESC LIMIT ?, ?");
        $stmt->execute([$product_id, $offset, $limit]);
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
      } else {
        $stmt = $this->db->prepare("SELECT * FROM reviews ORDER BY created_at DESC LIMIT ?, ?");
        $stmt->execute([$offset, $limit]);
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
      }
    } catch(PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
      return array();
    }
  }

  public function getReview($review_id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = ?");
      $stmt->execute([$review_id]);
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch(PDOException $e) {
      echo "Error getting review: " . $e->getMessage();
      return array();
    }
  }

  public function deleteReview($review_id) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
      $stmt->execute([$review_id]);
      return true;
    } catch(PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


$review = new ReviewController();

// Add a review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review_text = "This product is great!";
$success = $review->addReview($user_id, $product_id, $rating, $review_text);
if ($success) {
  echo "Review added successfully!";
} else {
  echo "Error adding review.";
}

// Get reviews for a specific product
$product_id = 1;
$limit = 10;
$offset = 0;
$reviews = $review->getReviews($product_id, $limit, $offset);
foreach ($reviews as $review) {
  echo "User ID: " . $review['user_id'] . ", Product ID: " . $review['product_id'] . ", Rating: " . $review['rating'] . ", Review: " . $review['review'];
}

// Get a specific review
$review_id = 1;
$review_data = $review->getReview($review_id);
echo "Review ID: " . $review_data['id'] . ", User ID: " . $review_data['user_id'] . ", Product ID: " . $review_data['product_id'] . ", Rating: " . $review_data['rating'] . ", Review: " . $review_data['review'];

// Delete a review
$review_id = 1;
$success = $review->deleteReview($review_id);
if ($success) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review.";
}


// db.php (database connection file)
$dsn = 'mysql:host=localhost;dbname=review_system';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

function createUserReview($user_id, $product_id, $review, $rating)
{
    global $pdo;
    $stmt = $pdo->prepare('INSERT INTO reviews (user_id, product_id, review, rating) VALUES (:user_id, :product_id, :review, :rating)');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':rating', $rating);
    return $stmt->execute();
}

function getReviews($product_id)
{
    global $pdo;
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll();
}

function updateReview($review_id, $review)
{
    global $pdo;
    $stmt = $pdo->prepare('UPDATE reviews SET review = :review WHERE id = :review_id');
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':review_id', $review_id);
    return $stmt->execute();
}

function deleteReview($review_id)
{
    global $pdo;
    $stmt = $pdo->prepare('DELETE FROM reviews WHERE id = :review_id');
    $stmt->bindParam(':review_id', $review_id);
    return $stmt->execute();
}


// Create a new review for product 1 by user 1 with rating 5 and review "Great product!"
createUserReview(1, 1, 'Great product!', 5);

// Get all reviews for product 1
$reviews = getReviews(1);
print_r($reviews);

// Update the first review to have a new text
updateReview($reviews[0]['id'], 'Excellent product!');

// Delete the first review
deleteReview($reviews[0]['id']);


// dbconfig.php (database connection settings)
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "review_db";

// Connect to database
$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Review class
class Review {
    private $id;
    private $user_id;
    private $product_id;
    private $rating;
    private $comment;

    public function __construct($user_id, $product_id, $rating, $comment) {
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public static function createReview($review) {
        global $conn;

        // Insert review into database
        $sql = "INSERT INTO reviews (user_id, product_id, rating, comment)
                VALUES (?, ?, ?, ?)";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("iis", $review->getUser_id(), $review->getProduct_id(), $review->getRating(), $review->getComment());
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    }

    public static function getReviews($product_id) {
        global $conn;

        // Retrieve reviews for a specific product
        $sql = "SELECT * FROM reviews WHERE product_id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("i", $product_id);
        $stmt->execute();
        $result = $stmt->get_result();

        $reviews = array();
        while ($row = $result->fetch_assoc()) {
            $review = new Review(
                $row["user_id"],
                $row["product_id"],
                $row["rating"],
                $row["comment"]
            );
            $reviews[] = $review;
        }

        return $reviews;
    }
}

// Example usage
$review1 = new Review(1, 1, 5, "Great product!");
if (Review::createReview($review1)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

$reviews = Review::getReviews(1);
foreach ($reviews as $review) {
    echo "User: " . $review->getUser_id() . ", Rating: " . $review->getRating() . ", Comment: " . $review->getComment() . "
";
}


<?php

// Database connection settings
$dsn = 'mysql:host=localhost;dbname=your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
  $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
  echo 'Connection failed: ' . $e->getMessage();
}

// Function to add a new review
function add_review($product_name, $rating, $review, $user_id) {
  global $pdo;
  
  // Insert the review into the database
  $stmt = $pdo->prepare('INSERT INTO reviews (product_name, rating, review, user_id) VALUES (:product_name, :rating, :review, :user_id)');
  $stmt->bindParam(':product_name', $product_name);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  $stmt->bindParam(':user_id', $user_id);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to get all reviews for a product
function get_reviews($product_name) {
  global $pdo;
  
  // Select the reviews from the database
  $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_name = :product_name');
  $stmt->bindParam(':product_name', $product_name);
  
  if ($stmt->execute()) {
    return $stmt->fetchAll();
  } else {
    return false;
  }
}

// Function to get all reviews for a user
function get_user_reviews($user_id) {
  global $pdo;
  
  // Select the reviews from the database
  $stmt = $pdo->prepare('SELECT * FROM reviews WHERE user_id = :user_id');
  $stmt->bindParam(':user_id', $user_id);
  
  if ($stmt->execute()) {
    return $stmt->fetchAll();
  } else {
    return false;
  }
}

// Function to get a single review
function get_review($id) {
  global $pdo;
  
  // Select the review from the database
  $stmt = $pdo->prepare('SELECT * FROM reviews WHERE id = :id');
  $stmt->bindParam(':id', $id);
  
  if ($stmt->execute()) {
    return $stmt->fetch();
  } else {
    return false;
  }
}

// Function to update a review
function update_review($id, $product_name, $rating, $review) {
  global $pdo;
  
  // Update the review in the database
  $stmt = $pdo->prepare('UPDATE reviews SET product_name = :product_name, rating = :rating, review = :review WHERE id = :id');
  $stmt->bindParam(':product_name', $product_name);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  $stmt->bindParam(':id', $id);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to delete a review
function delete_review($id) {
  global $pdo;
  
  // Delete the review from the database
  $stmt = $pdo->prepare('DELETE FROM reviews WHERE id = :id');
  $stmt->bindParam(':id', $id);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

?>


// Add a new review
$product_name = 'Example Product';
$rating = 5;
$review = 'This product is great!';
$user_id = 1;

if (add_review($product_name, $rating, $review, $user_id)) {
  echo 'Review added successfully!';
} else {
  echo 'Failed to add review.';
}

// Get all reviews for a product
$product_name = 'Example Product';

$reviews = get_reviews($product_name);

if ($reviews) {
  foreach ($reviews as $review) {
    echo 'Product: ' . $review['product_name'] . '<br>';
    echo 'Rating: ' . $review['rating'] . '/5<br>';
    echo 'Review: ' . $review['review'] . '<br><br>';
  }
} else {
  echo 'No reviews found for this product.';
}

// Get all reviews for a user
$user_id = 1;

$reviews = get_user_reviews($user_id);

if ($reviews) {
  foreach ($reviews as $review) {
    echo 'Product: ' . $review['product_name'] . '<br>';
    echo 'Rating: ' . $review['rating'] . '/5<br>';
    echo 'Review: ' . $review['review'] . '<br><br>';
  }
} else {
  echo 'No reviews found for this user.';
}

// Get a single review
$id = 1;

$review = get_review($id);

if ($review) {
  echo 'Product: ' . $review['product_name'] . '<br>';
  echo 'Rating: ' . $review['rating'] . '/5<br>';
  echo 'Review: ' . $review['review'] . '<br><br>';
} else {
  echo 'No review found with this ID.';
}

// Update a review
$id = 1;
$product_name = 'Updated Product';
$rating = 4;
$review = 'This product is okay...';

if (update_review($id, $product_name, $rating, $review)) {
  echo 'Review updated successfully!';
} else {
  echo 'Failed to update review.';
}

// Delete a review
$id = 1;

if (delete_review($id)) {
  echo 'Review deleted successfully!';
} else {
  echo 'Failed to delete review.';
}


class Review {
    private $db;

    public function __construct() {
        require_once 'config/database.php';
        $this->db = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USER, DB_PASSWORD);
    }

    // Create a review
    public function createReview($product_id, $user_id, $rating, $review) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':user_id', $user_id);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':review', $review);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error creating review: " . $e->getMessage();
            return false;
        }
    }

    // Get all reviews for a product
    public function getReviews($product_id) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $product_id);
            return $stmt->execute()->fetchAll();
        } catch (PDOException $e) {
            echo "Error getting reviews: " . $e->getMessage();
            return false;
        }
    }

    // Get a single review by id
    public function getReview($id) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :id");
            $stmt->bindParam(':id', $id);
            return $stmt->execute()->fetch();
        } catch (PDOException $e) {
            echo "Error getting review: " . $e->getMessage();
            return false;
        }
    }

    // Update a review
    public function updateReview($id, $rating, $review) {
        try {
            $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
            $stmt->bindParam(':id', $id);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':review', $review);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error updating review: " . $e->getMessage();
            return false;
        }
    }

    // Delete a review
    public function deleteReview($id) {
        try {
            $this->db->prepare("DELETE FROM reviews WHERE id = :id")->bindParam(':id', $id)->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error deleting review: " . $e->getMessage();
            return false;
        }
    }
}


require_once 'review.php';

$review = new Review();

// Create a review
$product_id = 1; // id of the product
$user_id = 1; // id of the user
$rating = 5;
$reviewText = "This is a great product!";
if ($review->createReview($product_id, $user_id, $rating, $reviewText)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review";
}

// Get all reviews for a product
$product_reviews = $review->getReviews(1);
print_r($product_reviews);

// Get a single review by id
$single_review = $review->getReview(1);
var_dump($single_review);

// Update a review
if ($review->updateReview(1, 4, "This is an updated review!")) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review";
}

// Delete a review
if ($review->deleteReview(1)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review";
}


CREATE TABLE reviews (
  id INT PRIMARY KEY AUTO_INCREMENT,
  title VARCHAR(255),
  content TEXT,
  rating TINYINT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  user_id INT,
  FOREIGN KEY (user_id) REFERENCES users(id)
);


<?php

$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

?>


<?php

function create_review($title, $content, $rating, $user_id) {
  global $conn;
  
  $sql = "INSERT INTO reviews (title, content, rating, user_id) VALUES ('$title', '$content', '$rating', '$user_id')";
  if ($conn->query($sql)) {
    return true;
  } else {
    return false;
  }
}

function get_reviews() {
  global $conn;
  
  $sql = "SELECT * FROM reviews ORDER BY id DESC";
  $result = $conn->query($sql);
  while ($row = $result->fetch_assoc()) {
    echo "
      <div class='review'>
        <h2>$row[title]</h2>
        <p>$row[content]</p>
        <p>Rating: $row[rating] / 5</p>
        <p>Created at: $row[created_at]</p>
      </div>
    ";
  }
}

function update_review($id, $new_title, $new_content, $new_rating) {
  global $conn;
  
  $sql = "UPDATE reviews SET title='$new_title', content='$new_content', rating='$new_rating' WHERE id=$id";
  if ($conn->query($sql)) {
    return true;
  } else {
    return false;
  }
}

function delete_review($id) {
  global $conn;
  
  $sql = "DELETE FROM reviews WHERE id=$id";
  if ($conn->query($sql)) {
    return true;
  } else {
    return false;
  }
}

?>


<?php

require_once 'db_connection.php';
require_once 'functions.php';

?>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Reviews</title>
  <style>
    .review {
      border: 1px solid #ccc;
      padding: 20px;
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

<h1>Reviews</h1>

<form action="" method="post">
  <input type="text" name="title" placeholder="Title">
  <textarea name="content"></textarea>
  <select name="rating">
    <option value="1">1/5</option>
    <option value="2">2/5</option>
    <option value="3">3/5</option>
    <option value="4">4/5</option>
    <option value="5">5/5</option>
  </select>
  <input type="submit" name="submit" value="Create Review">
</form>

<?php
if (isset($_POST['submit'])) {
  create_review($_POST['title'], $_POST['content'], $_POST['rating'], $_GET['user_id']);
}
?>

<h2>All Reviews:</h2>
<div class="reviews-container">
  <?php get_reviews(); ?>
</div>

<h2>Update Review:</h2>
<form action="" method="post">
  <input type="text" name="new_title" placeholder="New Title">
  <textarea name="new_content"></textarea>
  <select name="new_rating">
    <option value="1">1/5</option>
    <option value="2">2/5</option>
    <option value="3">3/5</option>
    <option value="4">4/5</option>
    <option value="5">5/5</option>
  </select>
  <input type="hidden" name="id" value="<?php echo $_GET['id']; ?>">
  <input type="submit" name="update_submit" value="Update Review">
</form>

<?php
if (isset($_POST['update_submit'])) {
  update_review($_POST['id'], $_POST['new_title'], $_POST['new_content'], $_POST['new_rating']);
}
?>

<h2>Delete Review:</h2>
<form action="" method="post">
  <input type="hidden" name="delete_id" value="<?php echo $_GET['id']; ?>">
  <input type="submit" name="delete_submit" value="Delete Review">
</form>

<?php
if (isset($_POST['delete_submit'])) {
  delete_review($_POST['delete_id']);
}
?>

</body>
</html>


// models/Review.php

class Review {
    private $db;

    function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
    }

    public function submit_review($product_id, $user_id, $rating, $review_text) {
        $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, review_text)
                                    VALUES (:product_id, :user_id, :rating, :review_text)");
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review_text', $review_text);

        return $stmt->execute();
    }

    public function get_reviews_for_product($product_id) {
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public function get_reviews_for_user($user_id) {
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
        $stmt->bindParam(':user_id', $user_id);
        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public function calculate_average_rating($product_id) {
        $stmt = $this->db->prepare("SELECT AVG(rating) FROM reviews WHERE product_id = :product_id");
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        return $stmt->fetchColumn();
    }
}


// controllers/ReviewController.php

class ReviewController {
    private $review_model;

    function __construct() {
        $this->review_model = new Review();
    }

    public function submit_review($product_id, $user_id, $rating, $review_text) {
        return $this->review_model->submit_review($product_id, $user_id, $rating, $review_text);
    }

    public function get_reviews_for_product($product_id) {
        return $this->review_model->get_reviews_for_product($product_id);
    }

    public function get_reviews_for_user($user_id) {
        return $this->review_model->get_reviews_for_user($user_id);
    }

    public function calculate_average_rating($product_id) {
        return $this->review_model->calculate_average_rating($product_id);
    }
}


// services/ReviewService.php

class ReviewService {
    private $review_controller;

    function __construct() {
        $this->review_controller = new ReviewController();
    }

    public function submit_review($product_id, $user_id, $rating, $review_text) {
        return $this->review_controller->submit_review($product_id, $user_id, $rating, $review_text);
    }

    public function get_reviews_for_product($product_id) {
        return $this->review_controller->get_reviews_for_product($product_id);
    }

    public function get_reviews_for_user($user_id) {
        return $this->review_controller->get_reviews_for_user($user_id);
    }

    public function calculate_average_rating($product_id) {
        return $this->review_controller->calculate_average_rating($product_id);
    }
}


<!-- views/review.php -->

<?php require_once 'services/ReviewService.php'; ?>

<!DOCTYPE html>
<html>
<head>
    <title>Reviews</title>
</head>
<body>

    <?php if (isset($_POST['submit_review'])): ?>
        <?php $review_service = new ReviewService(); ?>
        <?php $result = $review_service->submit_review($_POST['product_id'], $_SESSION['user_id'], $_POST['rating'], $_POST['review_text']); ?>

        <?php if ($result): ?>
            <p>Review submitted successfully!</p>
        <?php else: ?>
            <p>Error submitting review.</p>
        <?php endif; ?>
    <?php endif; ?>

    <h1>Reviews for Product <?= $product_id ?></h1>

    <?php foreach ($review_service->get_reviews_for_product($product_id) as $review): ?>
        <div>
            <h2><?= $review['user_name'] ?> (<?= $review['rating'] ?>/5)</h2>
            <p><?= $review['review_text'] ?></p>
        </div>
    <?php endforeach; ?>

</body>
</html>


// config.php (database connection settings)
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'database';

// connect to database
$mysqli = new mysqli($db_host, $db_username, $db_password, $db_name);

function get_user_reviews($user_id) {
  // retrieve user's reviews
  $query = "SELECT * FROM reviews WHERE user_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("i", $user_id);
  $stmt->execute();
  $reviews = array();
  while ($row = $stmt->get_result()->fetch_assoc()) {
    $reviews[] = array(
      'id' => $row['id'],
      'product_id' => $row['product_id'],
      'rating' => $row['rating'],
      'comment' => $row['comment']
    );
  }
  return $reviews;
}

function add_review($user_id, $product_id, $rating, $comment) {
  // insert new review
  $query = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("iiss", $user_id, $product_id, $rating, $comment);
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

function get_average_rating($product_id) {
  // retrieve average rating for product
  $query = "SELECT AVG(rating) AS avg_rating FROM reviews WHERE product_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  return $stmt->get_result()->fetch_assoc()['avg_rating'];
}

// example usage:
$user_id = 1;
$reviews = get_user_reviews($user_id);
foreach ($reviews as $review) {
  echo "Review: {$review['comment']} ({$review['rating']}/5)
";
}


<?php

// Include database connection settings
include_once 'config.php';

// Function to get user reviews
function getUserReviews($user_id) {
  global $pdo;
  try {
    $stmt = $pdo->prepare("SELECT r.id, r.rating, r.comment, p.name AS product_name 
                          FROM reviews r INNER JOIN products p ON r.product_id = p.id 
                          WHERE r.user_id = :id");
    $stmt->bindParam(':id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo "Error fetching user reviews: " . $e->getMessage();
  }
}

// Function to get product reviews
function getProductReviews($product_id) {
  global $pdo;
  try {
    $stmt = $pdo->prepare("SELECT r.id, r.rating, r.comment, u.username AS user_name 
                          FROM reviews r INNER JOIN users u ON r.user_id = u.id 
                          WHERE r.product_id = :id");
    $stmt->bindParam(':id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo "Error fetching product reviews: " . $e->getMessage();
  }
}

// Function to create a new review
function createReview($user_id, $product_id, $rating, $comment) {
  global $pdo;
  try {
    $stmt = $pdo->prepare("INSERT INTO reviews (user_id, product_id, rating, comment)
                          VALUES (:uid, :pid, :rate, :com)");
    $stmt->bindParam(':uid', $user_id);
    $stmt->bindParam(':pid', $product_id);
    $stmt->bindParam(':rate', $rating);
    $stmt->bindParam(':com', $comment);
    return $stmt->execute();
  } catch (PDOException $e) {
    echo "Error creating review: " . $e->getMessage();
  }
}

// Authentication function
function authenticateUser($username, $password) {
  global $pdo;
  try {
    $stmt = $pdo->prepare("SELECT id FROM users WHERE username = :un AND password = :pw");
    $stmt->bindParam(':un', $username);
    $stmt->bindParam(':pw', $password);
    $stmt->execute();
    return $stmt->fetchColumn() !== false;
  } catch (PDOException $e) {
    echo "Error authenticating user: " . $e->getMessage();
  }
}

// Example usage
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  if (isset($_POST['username']) && isset($_POST['password'])) {
    // Authenticate user
    if (authenticateUser($_POST['username'], $_POST['password'])) {
      // Get reviews for the authenticated user
      $user_id = $_SESSION['user_id'];
      $reviews = getUserReviews($user_id);
      echo json_encode($reviews);

      // Create a new review
      $createReviewResult = createReview($_SESSION['user_id'], 1, 5, 'Good product!');
      if ($createReviewResult) {
        echo "Review created successfully!";
      }
    } else {
      echo "Authentication failed.";
    }
  }
}

// Include HTML template for user reviews page
include_once 'reviews-template.php';


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Reviews Page</title>
</head>
<body>
  <?php if (isset($_SESSION['user_id'])) : ?>
    <!-- Display reviews for the authenticated user -->
    <h2>My Reviews:</h2>
    <ul>
      <?php foreach ($reviews as $review) : ?>
        <li>
          Product: <?= $review['product_name'] ?><br />
          Rating: <?= $review['rating'] ?>/5<br />
          Comment: <?= $review['comment'] ?><br />
        </li>
      <?php endforeach; ?>
    </ul>

    <!-- Create a new review form -->
    <h2>Create a New Review:</h2>
    <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
      <input type="hidden" name="username" value="<?php echo $_SESSION['username']; ?>">
      <label for="product_id">Product ID:</label>
      <input type="number" id="product_id" name="product_id"><br><br>
      <label for="rating">Rating (1-5):</label>
      <input type="number" id="rating" name="rating" min="1" max="5"><br><br>
      <label for="comment">Comment:</label>
      <textarea id="comment" name="comment"></textarea><br><br>
      <input type="submit" value="Submit">
    </form>

  <?php else : ?>
    <!-- Display login form -->
    <h2>Login:</h2>
    <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
      <label for="username">Username:</label>
      <input type="text" id="username" name="username"><br><br>
      <label for="password">Password:</label>
      <input type="password" id="password" name="password"><br><br>
      <input type="submit" value="Login">
    </form>

  <?php endif; ?>
</body>
</html>


function create_review($product_id, $user_id, $rating, $review) {
  global $db;

  // Prepare query
  $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, rating, review)
                        VALUES (:product_id, :user_id, :rating, :review)");

  try {
    // Bind parameters and execute
    $stmt->bindParam(":product_id", $product_id);
    $stmt->bindParam(":user_id", $user_id);
    $stmt->bindParam(":rating", $rating);
    $stmt->bindParam(":review", $review);

    $stmt->execute();

    return $db->lastInsertId();
  } catch (PDOException $e) {
    // Handle error
    echo "Error creating review: " . $e->getMessage();
    return null;
  }
}


function get_reviews($product_id, $limit = null, $offset = null) {
  global $db;

  // Prepare query
  $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");

  try {
    // Bind parameter and execute
    $stmt->bindParam(":product_id", $product_id);
    $stmt->execute();

    if ($limit && $offset) {
      // Retrieve limited number of records with offset
      $reviews = array();
      while ($row = $stmt->fetch()) {
        $reviews[] = array(
          'id' => $row['id'],
          'user_id' => $row['user_id'],
          'rating' => $row['rating'],
          'review' => $row['review']
        );
      }

      return array_slice($reviews, $offset, $limit);
    } else {
      // Retrieve all records
      $reviews = array();
      while ($row = $stmt->fetch()) {
        $reviews[] = array(
          'id' => $row['id'],
          'user_id' => $row['user_id'],
          'rating' => $row['rating'],
          'review' => $row['review']
        );
      }

      return $reviews;
    }
  } catch (PDOException $e) {
    // Handle error
    echo "Error retrieving reviews: " . $e->getMessage();
    return null;
  }
}


function get_user_reviews($user_id, $limit = null, $offset = null) {
  global $db;

  // Prepare query
  $stmt = $db->prepare("SELECT * FROM reviews WHERE user_id = :user_id");

  try {
    // Bind parameter and execute
    $stmt->bindParam(":user_id", $user_id);
    $stmt->execute();

    if ($limit && $offset) {
      // Retrieve limited number of records with offset
      $reviews = array();
      while ($row = $stmt->fetch()) {
        $reviews[] = array(
          'id' => $row['id'],
          'product_id' => $row['product_id'],
          'rating' => $row['rating'],
          'review' => $row['review']
        );
      }

      return array_slice($reviews, $offset, $limit);
    } else {
      // Retrieve all records
      $reviews = array();
      while ($row = $stmt->fetch()) {
        $reviews[] = array(
          'id' => $row['id'],
          'product_id' => $row['product_id'],
          'rating' => $row['rating'],
          'review' => $row['review']
        );
      }

      return $reviews;
    }
  } catch (PDOException $e) {
    // Handle error
    echo "Error retrieving user reviews: " . $e->getMessage();
    return null;
  }
}


// Create a new review
$product_id = 123;
$user_id = 456;
$rating = 4;
$review = 'Great product!';

$new_review_id = create_review($product_id, $user_id, $rating, $review);
echo "New review ID: $new_review_id
";

// Get all reviews for a product
$product_id = 123;
$reviews = get_reviews($product_id);
print_r($reviews);

// Get user's own reviews
$user_id = 456;
$reviews = get_user_reviews($user_id);
print_r($reviews);


class Review {
  private $id;
  private $reviewText;
  private $rating;
  private $productId;

  public function __construct($id = null, $reviewText = null, $rating = null, $productId = null) {
    $this->id = $id;
    $this->reviewText = $reviewText;
    $this->rating = $rating;
    $this->productId = $productId;
  }

  public function createReview($productId, $reviewText, $rating) {
    // Check if review already exists for product
    if ($this->getReviewByProductId($productId)) {
      throw new Exception("Review already exists for this product");
    }
    
    // Create new review
    $newReview = new Review(null, $reviewText, $rating, $productId);
    // Save review to database ( implementation omitted )
    return $newReview;
  }

  public function getReviews() {
    // Retrieve all reviews from database ( implementation omitted )
    return array();
  }

  public function getReviewByProductId($productId) {
    // Retrieve review for product from database ( implementation omitted )
    foreach ($this->getReviews() as $review) {
      if ($review->productId == $productId) {
        return $review;
      }
    }
    return null;
  }

  public function updateReview($id, $reviewText = null, $rating = null) {
    // Update review in database ( implementation omitted )
    return true; // Assume successful update
  }

  public function deleteReview($id) {
    // Delete review from database ( implementation omitted )
    return true; // Assume successful deletion
  }
}


$review = new Review();
$productId = '12345';
$reviewText = 'Great product!';
$rating = 5;

// Create a new review for the product
$newReview = $review->createReview($productId, $reviewText, $rating);

// Retrieve all reviews
$reviews = $review->getReviews();

// Retrieve review by product ID
$productReview = $review->getReviewByProductId($productId);

// Update an existing review
$result = $review->updateReview($newReview->id, 'Updated review text', 4);
print_r($result); // Output: true

// Delete a review
$result = $review->deleteReview($newReview->id);
print_r($result); // Output: true


<?php

// Connect to database
$conn = new mysqli('localhost', 'username', 'password', 'database');

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to create a new review
function create_review($user_id, $product_id, $rating, $review) {
  global $conn;
  
  $sql = "INSERT INTO reviews (user_id, product_id, rating, review)
          VALUES ('$user_id', '$product_id', '$rating', '$review')";
  
  if ($conn->query($sql) === TRUE) {
    return true;
  } else {
    return false;
  }
}

// Function to get all reviews
function get_reviews() {
  global $conn;
  
  $sql = "SELECT * FROM reviews";
  
  $result = $conn->query($sql);
  
  if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
      echo "User ID: " . $row['user_id'] . "<br>";
      echo "Product ID: " . $row['product_id'] . "<br>";
      echo "Rating: " . $row['rating'] . "<br>";
      echo "Review: " . $row['review'] . "<br><br>";
    }
  } else {
    echo "0 results";
  }
}

// Function to update a review
function update_review($id, $user_id, $product_id, $rating, $review) {
  global $conn;
  
  $sql = "UPDATE reviews SET user_id='$user_id', product_id='$product_id', rating='$rating', review='$review' WHERE id='$id'";
  
  if ($conn->query($sql) === TRUE) {
    return true;
  } else {
    return false;
  }
}

// Function to delete a review
function delete_review($id) {
  global $conn;
  
  $sql = "DELETE FROM reviews WHERE id='$id'";
  
  if ($conn->query($sql) === TRUE) {
    return true;
  } else {
    return false;
  }
}

?>


create_review(1, 2, 5, "This product is amazing!");
get_reviews();
update_review(1, 3, 4, 4, "I'm not too happy with this product.");
delete_review(1);


<?php

// Connect to database
$conn = mysqli_connect("localhost", "username", "password", "database");

// Check connection
if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

function createUser($name) {
  global $conn;
  // Prepare query
  $stmt = mysqli_prepare($conn, "INSERT INTO users (name) VALUES (?)");
  // Bind parameters
  mysqli_stmt_bind_param($stmt, "s", $name);
  // Execute query
  if (!mysqli_stmt_execute($stmt)) {
    echo "Error creating user: " . mysqli_error($conn);
  }
  // Get ID of newly created user
  $newUserId = mysqli_insert_id($conn);
  return $newUserId;
}

function createReview($userId, $content, $rating) {
  global $conn;
  // Prepare query
  $stmt = mysqli_prepare($conn, "INSERT INTO reviews (user_id, content, rating) VALUES (?, ?, ?)");
  // Bind parameters
  mysqli_stmt_bind_param($stmt, "isi", $userId, $content, $rating);
  // Execute query
  if (!mysqli_stmt_execute($stmt)) {
    echo "Error creating review: " . mysqli_error($conn);
  }
}

function getReviews() {
  global $conn;
  // Prepare query
  $stmt = mysqli_prepare($conn, "SELECT r.id, u.name, r.content, r.rating FROM reviews r JOIN users u ON r.user_id = u.id");
  // Execute query and fetch results
  if (!mysqli_stmt_execute($stmt)) {
    echo "Error fetching reviews: " . mysqli_error($conn);
  }
  $reviews = array();
  while ($row = mysqli_fetch_assoc($stmt)) {
    $reviews[] = $row;
  }
  return $reviews;
}

function updateReview($reviewId, $content, $rating) {
  global $conn;
  // Prepare query
  $stmt = mysqli_prepare($conn, "UPDATE reviews SET content = ?, rating = ? WHERE id = ?");
  // Bind parameters
  mysqli_stmt_bind_param($stmt, "sii", $content, $rating, $reviewId);
  // Execute query
  if (!mysqli_stmt_execute($stmt)) {
    echo "Error updating review: " . mysqli_error($conn);
  }
}

function deleteReview($reviewId) {
  global $conn;
  // Prepare query
  $stmt = mysqli_prepare($conn, "DELETE FROM reviews WHERE id = ?");
  // Bind parameter
  mysqli_stmt_bind_param($stmt, "i", $reviewId);
  // Execute query
  if (!mysqli_stmt_execute($stmt)) {
    echo "Error deleting review: " . mysqli_error($conn);
  }
}

?>


// Create new user
$newUserId = createUser("John Doe");

// Create new review for the newly created user
createReview($newUserId, "This is a great product!", 5);

// Get all reviews
$reviews = getReviews();

// Update an existing review
updateReview(1, "This is a decent product.", 3);

// Delete a review
deleteReview(2);


<?php

// Connect to database
$db = new mysqli('localhost', 'username', 'password', 'database');

// Function to create a new review
function add_review($product_id, $rating, $comment) {
  global $db;
  $query = "INSERT INTO reviews (product_id, rating, comment)
            VALUES ('$product_id', '$rating', '$comment')";
  mysqli_query($db, $query);
}

// Function to retrieve all reviews for a product
function get_reviews($product_id) {
  global $db;
  $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
  $result = mysqli_query($db, $query);
  return $result;
}

// Function to calculate average rating for a product
function avg_rating($product_id) {
  global $db;
  $query = "SELECT AVG(rating) AS average FROM reviews WHERE product_id = '$product_id'";
  $result = mysqli_query($db, $query);
  $row = mysqli_fetch_assoc($result);
  return isset($row['average']) ? $row['average'] : 0;
}

// Function to display review form
function display_review_form($product_id) {
  ?>
  <form action="" method="post">
    <label>Rating:</label>
    <select name="rating" required>
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
    </select>
    <br>
    <label>Comment:</label>
    <textarea name="comment" required></textarea>
    <br>
    <input type="submit" name="submit" value="Submit Review">
  </form>
  <?php
}

// Function to display reviews for a product
function display_reviews($product_id) {
  $reviews = get_reviews($product_id);
  while ($row = mysqli_fetch_assoc($reviews)) {
    echo "Rating: $row[rating] stars";
    echo "<br>Comment: $row[comment]";
    echo "<hr>";
  }
}

// Check if user submitted review form
if (isset($_POST['submit'])) {
  add_review($_POST['product_id'], $_POST['rating'], $_POST['comment']);
  header('Location: ' . $_SERVER['PHP_SELF'] . '?success=true');
  exit;
}

?>


<?php include 'review.php'; ?>

<!DOCTYPE html>
<html>
<head>
  <title>Product Reviews</title>
</head>
<body>

  <?php if (isset($_GET['success'])): ?>
    <p>Review submitted successfully!</p>
  <?php endif; ?>

  <h1>Reviews for Product ID <?= $_GET['product_id'] ?></h1>

  <?php display_reviews($_GET['product_id']); ?>

  <?php display_review_form($_GET['product_id']); ?>

</body>
</html>


<?php
// Function to create a new review
function create_review($data) {
  global $db;
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
  $stmt = $db->prepare($query);
  $stmt->execute($data);
}

// Function to get all reviews for a user
function get_reviews_for_user($user_id) {
  global $db;
  $query = "SELECT * FROM reviews WHERE user_id = :user_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->execute();
  return $stmt->fetchAll();
}

// Function to get all reviews for a product
function get_reviews_for_product($product_id) {
  global $db;
  $query = "SELECT * FROM reviews WHERE product_id = :product_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  return $stmt->fetchAll();
}

// Function to update an existing review
function update_review($review_id, $data) {
  global $db;
  $query = "UPDATE reviews SET rating = :rating, review = :review WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':rating', $data['rating']);
  $stmt->bindParam(':review', $data['review']);
  $stmt->bindParam(':id', $review_id);
  $stmt->execute();
}

// Function to delete a review
function delete_review($review_id) {
  global $db;
  $query = "DELETE FROM reviews WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':id', $review_id);
  $stmt->execute();
}


// Create a new review
$data = array(
  'user_id' => 1,
  'product_id' => 2,
  'rating' => 5,
  'review' => 'Great product!'
);
create_review($data);

// Get all reviews for a user
$user_id = 1;
$reviews = get_reviews_for_user($user_id);
print_r($reviews);

// Update an existing review
$review_id = 1;
$data = array(
  'rating' => 4,
  'review' => 'Good product!'
);
update_review($review_id, $data);

// Delete a review
$review_id = 1;
delete_review($review_id);


// Connect to the database
$mysqli = new mysqli('localhost', 'username', 'password', 'database');

// Function to add a review
function add_review($user_id, $product_id, $rating, $comment) {
  $query = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('iiis', $user_id, $product_id, $rating, $comment);
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to view reviews for a product
function get_reviews_for_product($product_id) {
  $query = "SELECT * FROM reviews WHERE product_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('i', $product_id);
  $stmt->execute();
  return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
}

// Function to view reviews for a user
function get_reviews_for_user($user_id) {
  $query = "SELECT * FROM reviews WHERE user_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('i', $user_id);
  $stmt->execute();
  return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
}

// Function to edit a review
function edit_review($review_id, $rating, $comment) {
  $query = "UPDATE reviews SET rating = ?, comment = ? WHERE id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('iis', $rating, $comment, $review_id);
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to delete a review
function delete_review($review_id) {
  $query = "DELETE FROM reviews WHERE id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('i', $review_id);
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Example usage:
$user_id = 1;
$product_id = 2;
$rating = 4;
$comment = 'Great product!';

add_review($user_id, $product_id, $rating, $comment);

$reviews = get_reviews_for_product($product_id);
print_r($reviews);

$review = get_reviews_for_user($user_id)[0];
echo "Review ID: " . $review['id'] . "
";
echo "Rating: " . $review['rating'] . "
";
echo "Comment: " . $review['comment'] . "
";

edit_review($review['id'], 5, 'Excellent product!');

delete_review($review['id']);


// Review class to encapsulate review logic
class Review {
  private $db;

  public function __construct() {
    // Initialize the database connection
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  }

  /**
   * Create a new review
   *
   * @param int $product_id The ID of the product being reviewed
   * @param int $user_id The ID of the user submitting the review
   * @param float $rating The rating given by the user (1-5)
   * @param string $review The text of the review
   *
   * @return bool Whether the review was created successfully
   */
  public function create($product_id, $user_id, $rating, $review) {
    $stmt = $this->db->prepare('INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);

    return $stmt->execute();
  }

  /**
   * Get all reviews for a product
   *
   * @param int $product_id The ID of the product being reviewed
   *
   * @return array An array of review objects
   */
  public function getAll($product_id) {
    $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);

    $reviews = [];
    while ($row = $stmt->fetch()) {
      $reviews[] = new Review();
      // Initialize review properties
      $reviews[count($reviews) - 1]->id = $row['id'];
      $reviews[count($reviews) - 1]->product_id = $row['product_id'];
      $reviews[count($reviews) - 1]->user_id = $row['user_id'];
      $reviews[count($reviews) - 1]->rating = $row['rating'];
      $reviews[count($reviews) - 1]->review = $row['review'];
    }

    return $reviews;
  }

  /**
   * Update a review
   *
   * @param int $id The ID of the review being updated
   * @param float $new_rating The new rating for the review
   * @param string $new_review The new text for the review
   *
   * @return bool Whether the review was updated successfully
   */
  public function update($id, $new_rating, $new_review) {
    $stmt = $this->db->prepare('UPDATE reviews SET rating = :new_rating, review = :new_review WHERE id = :id');
    $stmt->bindParam(':new_rating', $new_rating);
    $stmt->bindParam(':new_review', $new_review);
    $stmt->bindParam(':id', $id);

    return $stmt->execute();
  }

  /**
   * Delete a review
   *
   * @param int $id The ID of the review being deleted
   *
   * @return bool Whether the review was deleted successfully
   */
  public function delete($id) {
    $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :id');
    $stmt->bindParam(':id', $id);

    return $stmt->execute();
  }
}


// Create a new review
$review = new Review();
$product_id = 1;
$user_id = 1;
$rating = 4.5;
$review_text = 'This is a great product!';
if ($review->create($product_id, $user_id, $rating, $review_text)) {
  echo "Review created successfully!";
} else {
  echo "Error creating review: " . $review->db->errorInfo()[2];
}

// Get all reviews for a product
$reviews = $review->getAll(1);
foreach ($reviews as $review) {
  echo "Rating: " . $review->rating . ", Review: " . $review->review;
}

// Update a review
$new_rating = 5.0;
$new_review = 'This is an amazing product!';
if ($review->update(1, $new_rating, $new_review)) {
  echo "Review updated successfully!";
} else {
  echo "Error updating review: " . $review->db->errorInfo()[2];
}

// Delete a review
if ($review->delete(1)) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review: " . $review->db->errorInfo()[2];
}


function add_review($title, $content, $rating, $product_id, $user_id) {
  // Create a new review in the database
  $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  $stmt = $db->prepare("INSERT INTO reviews (title, content, rating, product_id, user_id) VALUES (?, ?, ?, ?, ?)");
  $stmt->execute(array($title, $content, $rating, $product_id, $user_id));
  return $db->lastInsertId();
}

function get_reviews($product_id = null) {
  // Retrieve reviews from the database
  if ($product_id === null) {
    $reviews = array();
    $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
    $stmt = $db->query("SELECT * FROM reviews");
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
      $review = array(
        'id' => $row['id'],
        'title' => $row['title'],
        'content' => $row['content'],
        'rating' => $row['rating'],
        'user_id' => $row['user_id'],
        'product_id' => $row['product_id']
      );
      array_push($reviews, $review);
    }
  } else {
    $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
    $stmt = $db->query("SELECT * FROM reviews WHERE product_id = ?", array($product_id));
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
      $review = array(
        'id' => $row['id'],
        'title' => $row['title'],
        'content' => $row['content'],
        'rating' => $row['rating'],
        'user_id' => $row['user_id'],
        'product_id' => $row['product_id']
      );
      array_push($reviews, $review);
    }
  }
  return $reviews;
}

function delete_review($review_id) {
  // Delete a review from the database
  $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  $stmt = $db->prepare("DELETE FROM reviews WHERE id = ?");
  $stmt->execute(array($review_id));
}

function update_review($review_id, $title, $content, $rating) {
  // Update a review in the database
  $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  $stmt = $db->prepare("UPDATE reviews SET title = ?, content = ?, rating = ? WHERE id = ?");
  $stmt->execute(array($title, $content, $rating, $review_id));
}


$title = "My review";
$content = "This is a great product!";
$rating = 5;
$product_id = 1;
$user_id = 1;

$review_id = add_review($title, $content, $rating, $product_id, $user_id);
echo "Review created with ID: $review_id";


$product_id = 1;
$reviews = get_reviews($product_id);

foreach ($reviews as $review) {
  echo "Title: $review[title]
";
  echo "Content: $review[content]
";
  echo "Rating: $review[rating]/5
";
}


class ReviewSystem {
  private $db;

  public function __construct() {
    // Connect to database
    $this->db = new mysqli('localhost', 'username', 'password', 'database');
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }
  }

  /**
   * Add a new review
   *
   * @param int $user_id ID of the user making the review
   * @param int $product_id ID of the product being reviewed
   * @param string $review Text of the review
   * @param int $rating Rating (1-5)
   */
  public function addReview($user_id, $product_id, $review, $rating) {
    // Check if user and product exist in database
    $result = $this->db->query("SELECT * FROM users WHERE id = '$user_id'");
    if (!$result || !$result->num_rows) {
      return false; // User not found
    }
    $result = $this->db->query("SELECT * FROM products WHERE id = '$product_id'");
    if (!$result || !$result->num_rows) {
      return false; // Product not found
    }

    // Insert review into database
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES ('$user_id', '$product_id', '$rating', '$review')";
    $this->db->query($sql);
  }

  /**
   * Get all reviews for a specific user or product
   *
   * @param int $user_id ID of the user (optional)
   * @param int $product_id ID of the product (optional)
   */
  public function getReviews($user_id = null, $product_id = null) {
    if ($user_id && !$product_id) {
      // Get reviews for specific user
      $sql = "SELECT * FROM reviews WHERE user_id = '$user_id'";
    } elseif (!$user_id && $product_id) {
      // Get reviews for specific product
      $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    } else {
      // Get all reviews
      $sql = "SELECT * FROM reviews";
    }

    $result = $this->db->query($sql);
    if (!$result) {
      return false; // Error getting reviews
    }
    return $result;
  }

  /**
   * Get average rating for a specific product
   *
   * @param int $product_id ID of the product
   */
  public function getAverageRating($product_id) {
    $sql = "SELECT AVG(rating) as average_rating FROM reviews WHERE product_id = '$product_id'";
    $result = $this->db->query($sql);
    if (!$result || !$result->num_rows) {
      return false; // No ratings found
    }
    return $result->fetch_assoc()['average_rating'];
  }

  /**
   * Get user's reviews
   *
   * @param int $user_id ID of the user
   */
  public function getUserReviews($user_id) {
    $sql = "SELECT * FROM reviews WHERE user_id = '$user_id'";
    $result = $this->db->query($sql);
    if (!$result) {
      return false; // Error getting reviews
    }
    return $result;
  }
}


$reviewSystem = new ReviewSystem();

// Add a review
$reviewSystem->addReview(1, 1, 'Great product!', 5);

// Get all reviews for user with ID 1
$reviews = $reviewSystem->getReviews(1);
print_r($reviews);

// Get average rating for product with ID 1
$averageRating = $reviewSystem->getAverageRating(1);
echo "Average rating: $averageRating";

// Get user's reviews
$userReviews = $reviewSystem->getUserReviews(1);
print_r($userReviews);


<?php

// Configuration
$db_host = 'localhost';
$db_username = 'root';
$db_password = '';
$db_name = 'your_database_name';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function create_review($user_id, $rating, $review)
{
    global $conn;
    
    // Check if user exists
    $query = "SELECT * FROM users WHERE id = '$user_id'";
    $result = $conn->query($query);

    if ($result->num_rows == 0) {
        return false; // User does not exist
    }

    // Insert review into database
    $query = "INSERT INTO reviews (user_id, rating, review) VALUES ('$user_id', '$rating', '$review')";
    $conn->query($query);
    
    return true;
}

function display_reviews()
{
    global $conn;

    // Retrieve all reviews from database
    $query = "SELECT r.id, u.name, r.rating, r.review FROM reviews r INNER JOIN users u ON r.user_id = u.id";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "Review by " . $row['name'] . ": " . $row['rating'] . "/5 - " . $row['review'];
            echo "<br>";
        }
    } else {
        echo "No reviews yet.";
    }
}

function calculate_overall_rating()
{
    global $conn;

    // Retrieve all ratings from database
    $query = "SELECT AVG(rating) as average FROM reviews";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            return (float)$row['average'];
        }
    } else {
        return 0.00; // Default rating
    }

    return false;
}

?>


<?php
require_once 'review_system.php';

// Create a new review
create_review(1, 4.5, "Great product! Highly recommended.");

// Display all reviews
display_reviews();

// Calculate overall rating
echo "Overall Rating: " . calculate_overall_rating();
?>


$query = "INSERT INTO reviews (user_id, rating, review) VALUES (?, ?, ?)";
$stmt = $conn->prepare($query);
$stmt->bind_param("idd", $user_id, $rating, $review);
$stmt->execute();


class Review {
    private $id;
    private $userId;
    private $productId;
    private $rating;
    private $comment;

    public function __construct($id = null) {
        if ($id !== null) {
            $this->loadReview($id);
        }
    }

    public function loadReview($id) {
        // Load review data from database (e.g., using PDO)
        // For demonstration purposes, assume we have a simple array of reviews
        $reviews = [
            1 => ['userId' => 1, 'productId' => 1, 'rating' => 5, 'comment' => 'Great product!'],
            2 => ['userId' => 2, 'productId' => 1, 'rating' => 4, 'comment' => 'Good quality.'],
        ];
        $this->id = $id;
        $this->userId = isset($reviews[$id]['userId']) ? $reviews[$id]['userId'] : null;
        $this->productId = isset($reviews[$id]['productId']) ? $reviews[$id]['productId'] : null;
        $this->rating = isset($reviews[$id]['rating']) ? $reviews[$id]['rating'] : null;
        $this->comment = isset($reviews[$id]['comment']) ? $reviews[$id]['comment'] : null;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


class ReviewRepository {
    private static $_reviews = [];

    public static function addReview(Review $review) {
        self::$_reviews[$review->getId()] = $review;
    }

    public static function getReviews() {
        return self::$_reviews;
    }

    public static function deleteReview($id) {
        unset(self::$_reviews[$id]);
    }
}


class ReviewService {
    private $_repository;

    public function __construct(ReviewRepository $repository) {
        $this->_repository = $repository;
    }

    public function addReview(Review $review) {
        $this->_repository->addReview($review);
    }

    public function getReviews() {
        return $this->_repository->getReviews();
    }

    public function deleteReview($id) {
        $this->_repository->deleteReview($id);
    }
}


// Create review service instance
$reviewService = new ReviewService(new ReviewRepository());

// Add a new review
$review = new Review(null);
$review->setUserId(1);
$review->setProductId(1);
$review->setRating(5);
$review->setComment('Great product!');
$reviewService->addReview($review);

// Get all reviews
$reviews = $reviewService->getReviews();
print_r($reviews);

// Delete a review by ID
$reviewService->deleteReview(1);

// Get all reviews again after deletion
$reviews = $reviewService->getReviews();
print_r($reviews);


// Connect to the database
$conn = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');

function getUserReviews($userId, $productId = null) {
    global $conn;
    if ($productId !== null) {
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE user_id = :user_id AND product_id = :product_id");
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
    } else {
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
        $stmt->bindParam(':user_id', $userId);
        $stmt->execute();
    }
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function addReview($userId, $productId, $rating, $review) {
    global $conn;
    try {
        $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        return $stmt->execute();
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false;
    }
}

function editReview($reviewId, $newRating, $newReview) {
    global $conn;
    try {
        $stmt = $conn->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
        $stmt->bindParam(':id', $reviewId);
        $stmt->bindParam(':rating', $newRating);
        $stmt->bindParam(':review', $newReview);
        return $stmt->execute();
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false;
    }
}

function deleteReview($reviewId) {
    global $conn;
    try {
        $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
        $stmt->bindParam(':id', $reviewId);
        return $stmt->execute();
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false;
    }
}

// Example usage:
$userId = 1; // ID of the user
$product_id = 2; // ID of the product

$reviews = getUserReviews($userId);
foreach ($reviews as $review) {
    echo "Review id: " . $review['id'] . ", Rating: " . $review['rating'] . ", Review: " . $review['review'];
}

$newRating = 5;
$newReview = 'Great product!';
$added = addReview($userId, $product_id, $newRating, $newReview);
echo "Added review successfully: " . ($added ? 'true' : 'false');

// To edit a review
$reviewId = 1; // ID of the review to be edited
$newRating = 4;
$newReview = 'Even better product!';
$edited = editReview($reviewId, $newRating, $newReview);
echo "Edited review successfully: " . ($edited ? 'true' : 'false');

// To delete a review
$deleted = deleteReview($reviewId);
echo "Deleted review successfully: " . ($deleted ? 'true' : 'false');


function submit_review($user_id, $review_text, $rating) {
    global $db;

    // Validate input data
    if (!is_numeric($user_id)) {
        throw new Exception('Invalid user ID');
    }
    if (empty($review_text)) {
        throw new Exception('Review text cannot be empty');
    }
    if (!in_array($rating, array(1, 2, 3, 4, 5))) {
        throw new Exception('Invalid rating');
    }

    // Insert review into database
    $query = "
        INSERT INTO reviews (user_id, review_text, rating)
        VALUES (:user_id, :review_text, :rating);
    ";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    try {
        $stmt->execute();
        return true;
    } catch (PDOException $e) {
        throw new Exception('Failed to submit review: ' . $e->getMessage());
    }
}

function get_reviews($user_id = null, $limit = 10, $offset = 0) {
    global $db;

    // Build query
    if ($user_id !== null) {
        $query = "
            SELECT * FROM reviews
            WHERE user_id = :user_id
            LIMIT :limit OFFSET :offset;
        ";
        $stmt = $db->prepare($query);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':limit', $limit);
        $stmt->bindParam(':offset', $offset);
    } else {
        $query = "
            SELECT * FROM reviews
            LIMIT :limit OFFSET :offset;
        ";
        $stmt = $db->prepare($query);
        $stmt->bindParam(':limit', $limit);
        $stmt->bindParam(':offset', $offset);
    }

    // Execute query and fetch results
    try {
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        throw new Exception('Failed to retrieve reviews: ' . $e->getMessage());
    }
}

function get_user_reviews($user_id, $limit = 10, $offset = 0) {
    return get_reviews($user_id, $limit, $offset);
}


// Submit review
$review_text = 'This product is amazing!';
$user_id = 1;
$rating = 5;
if (submit_review($user_id, $review_text, $rating)) {
    echo "Review submitted successfully!";
} else {
    echo "Failed to submit review.";
}

// Get all reviews for a user
$user_id = 1;
$limit = 10;
$offset = 0;
$reviews = get_user_reviews($user_id, $limit, $offset);
print_r($reviews);

// Get all reviews with pagination
$limit = 10;
$offset = 5;
$reviews = get_reviews(null, $limit, $offset);
print_r($reviews);


<?php

// Configuration settings
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'reviews_database');

// Function to connect to the database
function db_connect() {
    $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
    
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    
    return $conn;
}

// Function to get all reviews
function get_reviews($product_id) {
    $conn = db_connect();
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($query);
    
    if (!$result) {
        die("Error: " . $conn->error);
    }
    
    $reviews = array();
    while ($row = $result->fetch_assoc()) {
        $reviews[] = array(
            'id' => $row['id'],
            'product_id' => $row['product_id'],
            'user_id' => $row['user_id'],
            'rating' => $row['rating'],
            'review' => $row['review']
        );
    }
    
    $conn->close();
    
    return $reviews;
}

// Function to get a single review
function get_review($id) {
    $conn = db_connect();
    $query = "SELECT * FROM reviews WHERE id = '$id'";
    $result = $conn->query($query);
    
    if (!$result) {
        die("Error: " . $conn->error);
    }
    
    $review = $result->fetch_assoc();
    
    $conn->close();
    
    return array(
        'id' => $review['id'],
        'product_id' => $review['product_id'],
        'user_id' => $review['user_id'],
        'rating' => $review['rating'],
        'review' => $review['review']
    );
}

// Function to create a new review
function create_review($data) {
    $conn = db_connect();
    
    // Sanitize input data
    $product_id = htmlspecialchars($data['product_id']);
    $user_id = htmlspecialchars($data['user_id']);
    $rating = htmlspecialchars($data['rating']);
    $review = htmlspecialchars($data['review']);
    
    $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES ('$product_id', '$user_id', '$rating', '$review')";
    
    if ($conn->query($query)) {
        echo "Review created successfully!";
    } else {
        die("Error: " . $conn->error);
    }
    
    $conn->close();
}

// Function to update an existing review
function update_review($data) {
    $conn = db_connect();
    
    // Sanitize input data
    $id = htmlspecialchars($data['id']);
    $product_id = htmlspecialchars($data['product_id']);
    $user_id = htmlspecialchars($data['user_id']);
    $rating = htmlspecialchars($data['rating']);
    $review = htmlspecialchars($data['review']);
    
    $query = "UPDATE reviews SET product_id = '$product_id', user_id = '$user_id', rating = '$rating', review = '$review' WHERE id = '$id'";
    
    if ($conn->query($query)) {
        echo "Review updated successfully!";
    } else {
        die("Error: " . $conn->error);
    }
    
    $conn->close();
}

// Function to delete a review
function delete_review($id) {
    $conn = db_connect();
    
    $query = "DELETE FROM reviews WHERE id = '$id'";
    
    if ($conn->query($query)) {
        echo "Review deleted successfully!";
    } else {
        die("Error: " . $conn->error);
    }
    
    $conn->close();
}

// Example usage
$product_id = 1;
$reviews = get_reviews($product_id);

echo "Reviews for Product ID $product_id:
";
foreach ($reviews as $review) {
    echo "ID: " . $review['id'] . "
";
    echo "Product ID: " . $review['product_id'] . "
";
    echo "User ID: " . $review['user_id'] . "
";
    echo "Rating: " . $review['rating'] . "
";
    echo "Review: " . $review['review'] . "

";
}

// Create a new review
$data = array(
    'product_id' => 1,
    'user_id' => 1,
    'rating' => 5,
    'review' => 'This product is amazing!'
);
create_review($data);

?>


<?php

class Review {
  private $db; // database connection

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  public function addReview($title, $content, $rating) {
    $query = "INSERT INTO reviews (title, content, rating, user_id)
              VALUES (:title, :content, :rating, :user_id)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    // assume user_id is passed from elsewhere
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->execute();
  }

  public function getReviews() {
    $query = "SELECT * FROM reviews";
    $stmt = $this->db->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getReviewById($id) {
    $query = "SELECT * FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  public function updateReview($id, $title, $content, $rating) {
    $query = "UPDATE reviews SET title = :title, content = :content, rating = :rating
              WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':id', $id);
    $stmt->execute();
  }

  public function deleteReview($id) {
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $id);
    $stmt->execute();
  }
}

// example usage
$review = new Review();

// add a review
$review->addReview('Great Product!', 'I loved the product.', 5);

// get all reviews
$reviews = $review->getReviews();

// get a single review by ID
$reviewById = $review->getReviewById(1);

// update a review
$review->updateReview(1, 'Even Better!', 'The product was amazing.', 6);

// delete a review
$review->deleteReview(1);


function createUserReview($reviewData) {
    // Check if review data exists
    if (!isset($reviewData['product_id']) || !isset($reviewData['rating']) || !isset($reviewData['comment'])) {
        return array('error' => 'Invalid review data');
    }

    // Connect to database
    $db = new mysqli("localhost", "username", "password", "database");

    // Check connection
    if ($db->connect_error) {
        return array('error' => 'Database connection failed: ' . $db->connect_error);
    }

    // Prepare SQL query
    $stmt = $db->prepare("INSERT INTO reviews (product_id, rating, comment, user_id) VALUES (?, ?, ?, ?)");

    // Bind parameters
    $stmt->bind_param("iii", $reviewData['product_id'], $reviewData['rating'], $reviewData['comment'], $_SESSION['user_id']);

    // Execute query
    if (!$stmt->execute()) {
        return array('error' => 'Database error: ' . $db->error);
    }

    // Close statement and database connection
    $stmt->close();
    $db->close();

    // Return success message
    return array('message' => 'Review created successfully');
}


$reviewData = array(
    'product_id' => 123,
    'rating' => 4,
    'comment' => 'Great product! Highly recommend.'
);

$response = createUserReview($reviewData);
print_r($response); // Output: Array ( [message] => Review created successfully )


class Review {
    private $id;
    private $rating;
    private $content;
    private $userId;

    public function __construct($id = null, $rating = 0, $content = '', $userId) {
        $this->id = $id;
        $this->rating = $rating;
        $this->content = $content;
        $this->userId = $userId;
    }

    public function getId() {
        return $this->id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getContent() {
        return $this->content;
    }

    public function getUserId() {
        return $this->userId;
    }
}


class ReviewService {
    private $reviews = [];

    public function addReview(Review $review) {
        array_push($this->reviews, $review);
    }

    public function getReviews() {
        return $this->reviews;
    }

    public function deleteReview($id) {
        foreach ($this->reviews as $key => $value) {
            if ($value->getId() == $id) {
                unset($this->reviews[$key]);
            }
        }
    }
}


class ReviewController {
    private $service;

    public function __construct(ReviewService $service) {
        $this->service = $service;
    }

    public function addReview(Request $request) {
        if ($request->isPost()) {
            $rating = $request->get('rating');
            $content = $request->get('content');

            $review = new Review(null, $rating, $content, 1); // Replace with actual userId
            $this->service->addReview($review);

            header("Location: " . $_SERVER['PHP_SELF']);
            exit;
        }
    }

    public function deleteReview(Request $request) {
        if ($request->isPost()) {
            $id = $request->get('id');
            $this->service->deleteReview($id);
            header("Location: " . $_SERVER['PHP_SELF']);
            exit;
        }
    }

    public function displayReviews() {
        $reviews = $this->service->getReviews();
        return $reviews;
    }
}


$reviewService = new ReviewService();

$reviewController = new ReviewController($reviewService);

if (isset($_GET['add'])) {
    $reviewController->addReview($_POST);
}

if (isset($_GET['delete'])) {
    $reviewController->deleteReview($_POST['id']);
}

$reviews = $reviewController->displayReviews();


class Request {
    private $get;
    private $post;

    public function __construct() {
        if (isset($_GET)) {
            $this->get = $_GET;
        }

        if (isset($_POST)) {
            $this->post = $_POST;
        }
    }

    public function get($key) {
        return isset($this->get[$key]) ? $this->get[$key] : null;
    }

    public function post($key) {
        return isset($this->post[$key]) ? $this->post[$key] : null;
    }
}


<?php

// Review class to store review data
class Review {
  public $id;
  public $title;
  public $rating;
  public $content;
  public $user_id;

  // Constructor to initialize object with data
  public function __construct($data) {
    $this->id = $data['id'];
    $this->title = $data['title'];
    $this->rating = $data['rating'];
    $this->content = $data['content'];
    $this->user_id = $data['user_id'];
  }
}

// ReviewManager class to manage reviews
class ReviewManager {
  private $reviews;

  // Constructor to initialize object with data
  public function __construct() {
    $this->reviews = array();
  }

  // Add review method to add new review
  public function addReview($review) {
    array_push($this->reviews, $review);
  }

  // Get reviews method to retrieve all reviews
  public function getReviews() {
    return $this->reviews;
  }

  // Get single review by ID method
  public function getReviewById($id) {
    foreach ($this->reviews as $review) {
      if ($review->id == $id) {
        return $review;
      }
    }
    return null;
  }

  // Update review method to update existing review
  public function updateReview($id, $data) {
    $existingReview = $this->getReviewById($id);
    if ($existingReview != null) {
      $existingReview->__construct($data);
      $index = array_search($existingReview, $this->reviews);
      unset($this->reviews[$index]);
      array_push($this->reviews, $existingReview);
    }
  }

  // Delete review method to remove existing review
  public function deleteReview($id) {
    foreach ($this->reviews as $key => $review) {
      if ($review->id == $id) {
        unset($this->reviews[$key]);
        return true;
      }
    }
    return false;
  }
}

// Example usage:
$reviewManager = new ReviewManager();

$review1 = new Review(array(
  'id' => 1,
  'title' => 'Great product!',
  'rating' => 5,
  'content' => 'I love this product!',
  'user_id' => 1
));
$review2 = new Review(array(
  'id' => 2,
  'title' => 'Not so great...',
  'rating' => 3,
  'content' => 'It\'s okay, I guess.',
  'user_id' => 2
));

$reviewManager->addReview($review1);
$reviewManager->addReview($review2);

print_r($reviewManager->getReviews());

echo $reviewManager->getReviewById(1)->title; // Output: Great product!

$updatedReview = array(
  'id' => 1,
  'title' => 'Even better!',
  'rating' => 6,
  'content' => 'I love this product even more!',
  'user_id' => 1
);
$reviewManager->updateReview(1, $updatedReview);

print_r($reviewManager->getReviews());

$reviewManager->deleteReview(2);

?>


<?php

// Sample data: Product ID and its corresponding reviews
$reviews = [
    1 => [
        ['rating' => 4, 'comment' => 'Great product!'],
        ['rating' => 3, 'comment' => 'It was okay.'],
        ['rating' => 5, 'comment' => 'Love it!']
    ],
    2 => [
        ['rating' => 1, 'comment' => 'Terrible experience.'],
        ['rating' => 4, 'comment' => 'Good product but expensive.']
    ]
];

function displayReviews($productId) {
    global $reviews;

    if (!isset($reviews[$productId])) {
        echo "No reviews for Product ID: $productId";
        return;
    }

    foreach ($reviews[$productId] as $review) {
        echo "Rating: {$review['rating']}/5 | Comment: {$review['comment']}
";
    }
}

// Example usage:
displayReviews(1);

?>


class Review {
  private $id;
  private $userId;
  private $productId;
  private $rating;
  private $review;

  public function __construct($id, $userId, $productId, $rating, $review) {
    $this->id = $id;
    $this->userId = $userId;
    $this->productId = $productId;
    $this->rating = $rating;
    $this->review = $review;
  }

  public function getId() { return $this->id; }
  public function getUserId() { return $this->userId; }
  public function getProductId() { return $this->productId; }
  public function getRating() { return $this->rating; }
  public function getReview() { return $this->review; }

  // ...
}


class ReviewDAO {
  private static $db;

  public static function connectToDatabase($host, $username, $password) {
    self::$db = new PDO("mysql:host=$host;dbname=reviews", $username, $password);
  }

  // ...

  public static function createReview(Review $review) {
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:userId, :productId, :rating, :review)";
    self::$db->prepare($sql)->execute([
      ':userId' => $review->getUserId(),
      ':productId' => $review->getProductId(),
      ':rating' => $review->getRating(),
      ':review' => $review->getReview()
    ]);
  }

  public static function getReviews() {
    $sql = "SELECT * FROM reviews";
    return self::$db->query($sql)->fetchAll(PDO::FETCH_CLASS, 'Review');
  }

  // ...
}


function createReview($userId, $productId, $rating, $review) {
  $reviewDAO = new ReviewDAO();
  $reviewDAO->connectToDatabase('localhost', 'username', 'password');
  $review = new Review(null, $userId, $productId, $rating, $review);
  $reviewDAO->createReview($review);
}

function getReviews() {
  $reviewDAO = new ReviewDAO();
  return $reviewDAO->getReviews();
}


createReview(1, 1, 5, 'Great product!');
$reviews = getReviews();
foreach ($reviews as $review) {
  echo "User ID: {$review->getUserId()} | Product ID: {$review->getProductId()} | Rating: {$review->getRating()} | Review: {$review->getReview()}
";
}


class UserReview {
    private $db;

    public function __construct() {
        // Initialize database connection (e.g., MySQLi)
        $this->db = new mysqli("localhost", "username", "password", "database_name");
    }

    // Create a new review
    public function create_review($user_id, $product_id, $rating, $comment) {
        if ($this->db->connect_error) {
            die("Connection failed: " . $this->db->connect_error);
        }

        $sql = "INSERT INTO reviews (user_id, product_id, rating, comment)
                VALUES ('$user_id', '$product_id', '$rating', '$comment')";
        if ($this->db->query($sql) === TRUE) {
            return true; // Review created successfully
        } else {
            echo "Error creating review: " . $this->db->error;
            return false;
        }
    }

    // Read all reviews for a specific user or product
    public function read_reviews($user_id = null, $product_id = null) {
        if ($this->db->connect_error) {
            die("Connection failed: " . $this->db->connect_error);
        }

        if ($user_id !== null && $product_id === null) {
            // Get reviews for a user
            $sql = "SELECT * FROM reviews WHERE user_id = '$user_id'";
        } elseif ($product_id !== null && $user_id === null) {
            // Get reviews for a product
            $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
        } else {
            // If both user ID and product ID are provided, return an error or handle this case as needed
            echo "Error: Both user ID and product ID cannot be specified simultaneously.";
            return array(); // Return empty array in this example
        }

        $result = $this->db->query($sql);

        if ($result === FALSE) {
            echo "Error reading reviews: " . $this->db->error;
            return array();
        }

        $reviews = array();
        while ($row = $result->fetch_assoc()) {
            $reviews[] = $row;
        }
        return $reviews;
    }

    // Update an existing review
    public function update_review($review_id, $new_rating = null, $new_comment = null) {
        if ($this->db->connect_error) {
            die("Connection failed: " . $this->db->connect_error);
        }

        if (!isset($review_id)) {
            echo "Error updating review: Review ID not specified.";
            return false;
        }

        // Check if new rating or comment is provided
        $update_fields = array();
        if ($new_rating !== null) {
            $update_fields['rating'] = $new_rating;
        }
        if ($new_comment !== null) {
            $update_fields['comment'] = $new_comment;
        }

        $sql = "UPDATE reviews SET ";
        foreach ($update_fields as $field => $value) {
            $sql .= "$field = '$value', ";
        }
        $sql .= "WHERE review_id = '$review_id'";

        if ($this->db->query($sql) === TRUE) {
            return true; // Review updated successfully
        } else {
            echo "Error updating review: " . $this->db->error;
            return false;
        }
    }

    // Delete a review by ID
    public function delete_review($review_id) {
        if ($this->db->connect_error) {
            die("Connection failed: " . $this->db->connect_error);
        }

        if (!isset($review_id)) {
            echo "Error deleting review: Review ID not specified.";
            return false;
        }

        $sql = "DELETE FROM reviews WHERE review_id = '$review_id'";
        if ($this->db->query($sql) === TRUE) {
            return true; // Review deleted successfully
        } else {
            echo "Error deleting review: " . $this->db->error;
            return false;
        }
    }

    public function __destruct() {
        // Close the database connection when this object is destroyed
        $this->db->close();
    }
}


<?php

// Configuration
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to get user reviews
function getUserReviews($user_id) {
  global $conn;
  
  // SQL query to retrieve reviews for a specific user
  $query = "
    SELECT r.id, r.product_name, r.rating, r.review_text
    FROM reviews r
    WHERE r.user_id = '$user_id'
  ";
  
  $result = $conn->query($query);
  
  if ($result->num_rows > 0) {
    // Create an array to store reviews
    $reviews = array();
    
    while ($row = $result->fetch_assoc()) {
      $reviews[] = array(
        'id' => $row['id'],
        'product_name' => $row['product_name'],
        'rating' => $row['rating'],
        'review_text' => $row['review_text']
      );
    }
    
    return $reviews;
  } else {
    // No reviews found
    return array();
  }
}

// Function to add new review
function addReview($user_id, $product_name, $rating, $review_text) {
  global $conn;
  
  // SQL query to insert new review
  $query = "
    INSERT INTO reviews (user_id, product_name, rating, review_text)
    VALUES ('$user_id', '$product_name', '$rating', '$review_text')
  ";
  
  if ($conn->query($query)) {
    return true; // Review added successfully
  } else {
    return false; // Error adding review
  }
}

// Example usage:
$user_id = 1;
$reviews = getUserReviews($user_id);
print_r($reviews);

$new_review = array(
  'product_name' => 'Example Product',
  'rating' => 5,
  'review_text' => 'This product is amazing!'
);

if (addReview($user_id, $new_review['product_name'], $new_review['rating'], $new_review['review_text'])) {
  echo "Review added successfully!";
} else {
  echo "Error adding review.";
}

?>


// Review model
class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=database', 'username', 'password');
  }

  public function addReview($product_id, $username, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (product_id, username, rating, review) VALUES (?, ?, ?, ?)");
      $stmt->execute(array($product_id, $username, $rating, $review));
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }

  public function getReviewsForProduct($product_id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
      $stmt->execute(array($product_id));
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return array();
    }
  }

  public function getAverageRatingForProduct($product_id) {
    try {
      $stmt = $this->db->prepare("SELECT AVG(rating) AS average FROM reviews WHERE product_id = ?");
      $stmt->execute(array($product_id));
      $result = $stmt->fetch(PDO::FETCH_ASSOC);
      return isset($result['average']) ? $result['average'] : 0;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return 0;
    }
  }

  public function getUserReviews() {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE username = ?");
      $stmt->execute(array($_SESSION['username']));
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return array();
    }
  }

  public function deleteReview($review_id) {
    try {
      $this->db->query("DELETE FROM reviews WHERE id = ?");
      $this->db->execute(array($review_id));
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }
}

// Controller
class ReviewController {
  private $review;

  public function __construct() {
    $this->review = new Review();
  }

  public function addReviewAction($product_id, $username, $rating, $review) {
    if ($this->review->addReview($product_id, $username, $rating, $review)) {
      echo "Review added successfully!";
    } else {
      echo "Error adding review.";
    }
  }

  public function getReviewsForProductAction($product_id) {
    return json_encode($this->review->getReviewsForProduct($product_id));
  }

  public function getAverageRatingForProductAction($product_id) {
    return $this->review->getAverageRatingForProduct($product_id);
  }

  public function getUserReviewsAction() {
    return json_encode($this->review->getUserReviews());
  }

  public function deleteReviewAction($review_id) {
    if ($this->review->deleteReview($review_id)) {
      echo "Review deleted successfully!";
    } else {
      echo "Error deleting review.";
    }
  }
}


// Add a new review
$reviewController = new ReviewController();
$reviewController->addReviewAction(1, 'johnDoe', 5, 'This product is amazing!');

// Get reviews for a product
echo $reviewController->getReviewsForProductAction(1);

// Get average rating for a product
echo $reviewController->getAverageRatingForProductAction(1);

// Get user's reviews
echo $reviewController->getUserReviewsAction();

// Delete a review
$reviewController->deleteReviewAction(1);


class Review {
  private $db;

  public function __construct() {
    // Connect to database
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  // Function to create a new review
  public function createReview($user_id, $product_name, $review_text, $rating) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_name, review_text, rating) VALUES (:user_id, :product_name, :review_text, :rating)");
      $stmt->bindParam(':user_id', $user_id);
      $stmt->bindParam(':product_name', $product_name);
      $stmt->bindParam(':review_text', $review_text);
      $stmt->bindParam(':rating', $rating);
      $stmt->execute();
      return true;
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  // Function to read all reviews
  public function getAllReviews() {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews");
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error reading reviews: " . $e->getMessage();
      return array();
    }
  }

  // Function to read a single review by id
  public function getReview($review_id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :id");
      $stmt->bindParam(':id', $review_id);
      $stmt->execute();
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error reading review: " . $e->getMessage();
      return array();
    }
  }

  // Function to update a review
  public function updateReview($review_id, $product_name = null, $review_text = null, $rating = null) {
    try {
      if ($product_name !== null) {
        $stmt = $this->db->prepare("UPDATE reviews SET product_name = :product_name WHERE id = :id");
        $stmt->bindParam(':product_name', $product_name);
        $stmt->bindParam(':id', $review_id);
        $stmt->execute();
      }
      if ($review_text !== null) {
        $stmt = $this->db->prepare("UPDATE reviews SET review_text = :review_text WHERE id = :id");
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':id', $review_id);
        $stmt->execute();
      }
      if ($rating !== null) {
        $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating WHERE id = :id");
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':id', $review_id);
        $stmt->execute();
      }
      return true;
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
      return false;
    }
  }

  // Function to delete a review
  public function deleteReview($review_id) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :id");
      $stmt->bindParam(':id', $review_id);
      $stmt->execute();
      return true;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


$review = new Review();

// Create a new review
$user_id = 1; // Replace with actual user id
$product_name = 'Product Name';
$review_text = 'This is a great product!';
$rating = 4.5;
$result = $review->createReview($user_id, $product_name, $review_text, $rating);
if ($result) {
  echo "Review created successfully!";
} else {
  echo "Error creating review.";
}

// Read all reviews
$reviews = $review->getAllReviews();
foreach ($reviews as $review) {
  echo $review['id'] . ': ' . $review['product_name'] . ' (' . $review['rating'] . '/5)';
}

// Read a single review by id
$review_id = 1; // Replace with actual review id
$result = $review->getReview($review_id);
if ($result) {
  echo "Product Name: " . $result['product_name'];
} else {
  echo "Error reading review.";
}

// Update a review
$review_id = 1; // Replace with actual review id
$product_name = 'New Product Name';
$result = $review->updateReview($review_id, $product_name);
if ($result) {
  echo "Review updated successfully!";
} else {
  echo "Error updating review.";
}

// Delete a review
$review_id = 1; // Replace with actual review id
$result = $review->deleteReview($review_id);
if ($result) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review.";
}


// Database connection settings
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


class Review {
    private $id;
    private $reviewer_name;
    private $review_text;
    private $rating;

    function __construct($id, $reviewer_name, $review_text, $rating) {
        $this->id = $id;
        $this->reviewer_name = $reviewer_name;
        $this->review_text = $review_text;
        $this->rating = $rating;
    }

    // Getters
    public function getId() { return $this->id; }
    public function getReviewerName() { return $this->reviewer_name; }
    public function getReviewText() { return $this->review_text; }
    public function getRating() { return $this->rating; }

    // Setters
    public function setId($id) { $this->id = $id; }
    public function setReviewerName($name) { $this->reviewer_name = $name; }
    public function setReviewText($text) { $this->review_text = $text; }
    public function setRating($rating) { $this->rating = $rating; }

    // Display review
    public function display() {
        echo "ID: $this->id <br>";
        echo "Reviewer Name: $this->reviewer_name <br>";
        echo "Review Text: $this->review_text <br>";
        echo "Rating: $this->rating/5";
    }
}


function addReview($review) {
    global $conn;
    $query = "INSERT INTO reviews (reviewer_name, review_text, rating)
              VALUES ('$review->getReviewerName()', '$review->getReviewText()', '$review->getRating()')";
    if ($conn->query($query)) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review: " . $conn->error;
    }
}


function editReview($id, $review) {
    global $conn;
    $query = "UPDATE reviews SET reviewer_name='$review->getReviewerName()', review_text='$review->getReviewText()', rating='$review->getRating()' WHERE id=$id";
    if ($conn->query($query)) {
        echo "Review edited successfully!";
    } else {
        echo "Error editing review: " . $conn->error;
    }
}


function deleteReview($id) {
    global $conn;
    $query = "DELETE FROM reviews WHERE id=$id";
    if ($conn->query($query)) {
        echo "Review deleted successfully!";
    } else {
        echo "Error deleting review: " . $conn->error;
    }
}


function getReviews() {
    global $conn;
    $query = "SELECT * FROM reviews";
    $result = $conn->query($query);
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "ID: " . $row["id"] . "<br>";
            echo "Reviewer Name: " . $row["reviewer_name"] . "<br>";
            echo "Review Text: " . $row["review_text"] . "<br>";
            echo "Rating: " . $row["rating"] / 5 . "<br><hr>";
        }
    } else {
        echo "No reviews found.";
    }
}


$review = new Review(1, "John Doe", "Great product!", 4);
addReview($review);

getReviews();

$review->setId(1);
$review->setReviewerName("Jane Doe");
$review->setReviewText("Good product!");
$review->setRating(5);
editReview(1, $review);

deleteReview(1);


<?php
function store_review($data) {
  global $db;

  // Validate data
  if (!isset($data['user_id']) || !isset($data['product_id']) ||
      !isset($data['rating']) || !isset($data['review'])) {
    return array('error' => 'Invalid data');
  }

  try {
    // Insert review into database
    $query = "INSERT INTO Reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $data['user_id']);
    $stmt->bindParam(':product_id', $data['product_id']);
    $stmt->bindParam(':rating', $data['rating']);
    $stmt->bindParam(':review', $data['review']);
    $stmt->execute();

    // Return success message
    return array('success' => 'Review stored successfully');
  } catch (PDOException $e) {
    // Return error message
    return array('error' => 'Error storing review: ' . $e->getMessage());
  }
}

function display_reviews($product_id) {
  global $db;

  try {
    // Retrieve reviews for product from database
    $query = "SELECT Users.username, Reviews.rating, Reviews.review FROM Reviews
              JOIN Users ON Reviews.user_id = Users.id
              WHERE Reviews.product_id = :product_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();

    // Fetch and return reviews as array
    $reviews = array();
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
      $reviews[] = array('username' => $row['username'], 'rating' => $row['rating'], 'review' => $row['review']);
    }
    return $reviews;
  } catch (PDOException $e) {
    // Return error message
    return array('error' => 'Error displaying reviews: ' . $e->getMessage());
  }
}

function calculate_average_rating($product_id) {
  global $db;

  try {
    // Retrieve average rating for product from database
    $query = "SELECT AVG(Rating) FROM Reviews WHERE Product_id = :product_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();

    // Fetch and return average rating as float
    $result = $stmt->fetchColumn();
    return $result === NULL ? 0 : $result;
  } catch (PDOException $e) {
    // Return error message
    return array('error' => 'Error calculating average rating: ' . $e->getMessage());
  }
}
?>


// Connect to database
$db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');

// Store review
$data = array(
  'user_id' => 1,
  'product_id' => 1,
  'rating' => 5,
  'review' => 'Great product!'
);
$result = store_review($data);

if ($result['success']) {
  echo "Review stored successfully!";
} else if (isset($result['error'])) {
  echo "Error storing review: " . $result['error'];
}

// Display reviews
$product_id = 1;
$reviews = display_reviews($product_id);
print_r($reviews); // Output: Array of reviews as associative array

// Calculate average rating
$average_rating = calculate_average_rating(1);
echo "Average rating for product ID 1: $average_rating";


function submit_review($product_id, $rating, $review_content, $user_id) {
    // Connect to the database
    $db = new mysqli("localhost", "username", "password", "database");

    if ($db->connect_error) {
        die("Connection failed: " . $db->connect_error);
    }

    // Prepare the SQL statement
    $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, review, rating) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("iiis", $product_id, $user_id, $review_content, $rating);

    // Execute the query
    if (!$stmt->execute()) {
        die("Error: " . $db->error);
    }

    // Close the statement and database connection
    $stmt->close();
    $db->close();

    return true;
}


function get_user_reviews($user_id) {
    // Connect to the database
    $db = new mysqli("localhost", "username", "password", "database");

    if ($db->connect_error) {
        die("Connection failed: " . $db->connect_error);
    }

    // Prepare the SQL statement
    $stmt = $db->prepare("SELECT id, product_id, review, rating FROM reviews WHERE user_id = ?");
    $stmt->bind_param("i", $user_id);

    // Execute the query
    if (!$stmt->execute()) {
        die("Error: " . $db->error);
    }

    // Get the result set
    $result = $stmt->get_result();

    // Create an array to store the reviews
    $reviews = array();

    while ($row = $result->fetch_assoc()) {
        $review_id = $row["id"];
        $product_id = $row["product_id"];
        $review_content = $row["review"];
        $rating = $row["rating"];

        // Calculate the rating display
        $rating_display = calculate_rating_display($rating);

        $reviews[] = array(
            "id" => $review_id,
            "product_id" => $product_id,
            "review" => $review_content,
            "rating" => $rating_display,
        );
    }

    // Close the statement and database connection
    $stmt->close();
    $db->close();

    return $reviews;
}


function calculate_rating_display($rating) {
    if ($rating < 1.0) {
        return "No rating given";
    } elseif ($rating <= 2.5) {
        return "Poor - Not recommended";
    } elseif ($rating <= 4.5) {
        return "Average - Okay, but could be better";
    } else {
        return "Good - Recommended!";
    }
}


<?php

// Submit review function
function submit_review($product_id, $rating, $review_content, $user_id) {
    // Connect to the database
    $db = new mysqli("localhost", "username", "password", "database");

    if ($db->connect_error) {
        die("Connection failed: " . $db->connect_error);
    }

    // Prepare the SQL statement
    $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, review, rating) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("iiis", $product_id, $user_id, $review_content, $rating);

    // Execute the query
    if (!$stmt->execute()) {
        die("Error: " . $db->error);
    }

    // Close the statement and database connection
    $stmt->close();
    $db->close();

    return true;
}

// Get user reviews function
function get_user_reviews($user_id) {
    // Connect to the database
    $db = new mysqli("localhost", "username", "password", "database");

    if ($db->connect_error) {
        die("Connection failed: " . $db->connect_error);
    }

    // Prepare the SQL statement
    $stmt = $db->prepare("SELECT id, product_id, review, rating FROM reviews WHERE user_id = ?");
    $stmt->bind_param("i", $user_id);

    // Execute the query
    if (!$stmt->execute()) {
        die("Error: " . $db->error);
    }

    // Get the result set
    $result = $stmt->get_result();

    // Create an array to store the reviews
    $reviews = array();

    while ($row = $result->fetch_assoc()) {
        $review_id = $row["id"];
        $product_id = $row["product_id"];
        $review_content = $row["review"];
        $rating = $row["rating"];

        // Calculate the rating display
        $rating_display = calculate_rating_display($rating);

        $reviews[] = array(
            "id" => $review_id,
            "product_id" => $product_id,
            "review" => $review_content,
            "rating" => $rating_display,
        );
    }

    // Close the statement and database connection
    $stmt->close();
    $db->close();

    return $reviews;
}

// Calculate rating display function
function calculate_rating_display($rating) {
    if ($rating < 1.0) {
        return "No rating given";
    } elseif ($rating <= 2.5) {
        return "Poor - Not recommended";
    } elseif ($rating <= 4.5) {
        return "Average - Okay, but could be better";
    } else {
        return "Good - Recommended!";
    }
}

// Example usage
$user_id = 1;
$product_id = 1;

$review_content = $_POST["review"];
$rating = (float) $_POST["rating"];

if (submit_review($product_id, $rating, $review_content, $user_id)) {
    echo "Review submitted successfully!";
} else {
    echo "Error submitting review.";
}

$user_reviews = get_user_reviews($user_id);
foreach ($user_reviews as $review) {
    echo "ID: $review[id]<br>";
    echo "Product ID: $review[product_id]<br>";
    echo "Review: $review[review]<br>";
    echo "Rating: $review[rating]<br><hr>";
}
?>


<?php

// Review class
class Review {
    public $id;
    public $product_id;
    public $user_id;
    public $rating;
    public $review;

    function __construct($id, $product_id, $user_id, $rating, $review) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->user_id = $user_id;
        $this->rating = $rating;
        $this->review = $review;
    }
}

// User class
class User {
    public $id;
    public $name;

    function __construct($id, $name) {
        $this->id = $id;
        $this->name = $name;
    }
}

// Product class (simple example)
class Product {
    public $id;
    public $name;

    function __construct($id, $name) {
        $this->id = $id;
        $this->name = $name;
    }
}

// Review system functions
function add_review($product_id, $user_id, $rating, $review) {
    // Simulating database insertion (replace with actual database code)
    global $reviews;
    array_push($reviews, new Review(count($reviews), $product_id, $user_id, $rating, $review));
}

function get_reviews($product_id) {
    // Filter reviews by product id
    global $reviews;
    return array_filter($reviews, function ($review) use ($product_id) {
        return $review->product_id == $product_id;
    });
}

function calculate_average_rating($reviews) {
    if (count($reviews) == 0) {
        return 0;
    }
    return array_sum(array_column($reviews, 'rating')) / count($reviews);
}

// Example usage
$products = [
    new Product(1, "Product A"),
    new Product(2, "Product B")
];

$users = [
    new User(1, "John Doe"),
    new User(2, "Jane Doe")
];

$reviews = [];

add_review(1, 1, 5, "Great product!");
add_review(1, 2, 4, "Good but not great.");
add_review(2, 1, 3, "Not my favorite.");

echo "Reviews for Product A:
";
foreach (get_reviews(1) as $review) {
    echo "User: " . $users[$review->user_id - 1]->name . "
";
    echo "Rating: " . $review->rating . "/5
";
    echo "Review: " . $review->review . "

";
}

echo "Average rating for Product A: " . calculate_average_rating(get_reviews(1)) . "
";

?>


<?php

// Include database connection settings
require_once 'db_config.php';

// Function to get all reviews for a product
function get_reviews($product_id) {
  $query = "SELECT * FROM reviews WHERE product_id = ?";
  $stmt = $pdo->prepare($query);
  $stmt->execute([$product_id]);
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to add new review
function add_review($user_id, $product_id, $review_text, $rating) {
  $query = "INSERT INTO reviews (user_id, product_id, review, rating)
            VALUES (?, ?, ?, ?)";
  $stmt = $pdo->prepare($query);
  $stmt->execute([$user_id, $product_id, $review_text, $rating]);
}

// Function to update existing review
function update_review($id, $new_rating) {
  $query = "UPDATE reviews SET rating = ? WHERE id = ?";
  $stmt = $pdo->prepare($query);
  $stmt->execute([$new_rating, $id]);
}

// Function to delete review
function delete_review($id) {
  $query = "DELETE FROM reviews WHERE id = ?";
  $stmt = $pdo->prepare($query);
  $stmt->execute([$id]);
}


require_once 'review.php';

// Get all reviews for a product with ID 123
$reviews = get_reviews(123);
print_r($reviews);

// Add new review for user ID 456 and product ID 789
add_review(456, 789, "Great product!", 5);

// Update existing review with ID 101
update_review(101, 4);

// Delete review with ID 202
delete_review(202);


<?php

class Review {
    private $id;
    private $product_id;
    private $user_id;
    private $rating;
    private $review;

    public function __construct($data = array()) {
        if (!empty($data)) {
            $this->loadData($data);
        }
    }

    private function loadData($data) {
        $this->id = (isset($data['id'])) ? intval($data['id']) : 0;
        $this->product_id = (isset($data['product_id'])) ? intval($data['product_id']) : 0;
        $this->user_id = (isset($data['user_id'])) ? intval($data['user_id']) : 0;
        $this->rating = (isset($data['rating'])) ? floatval($data['rating']) : 0.00;
        $this->review = (isset($data['review'])) ? strval($data['review']) : '';
    }

    public function getId() {
        return $this->id;
    }

    public function getProductId() {
        return $this->product_id;
    }

    public function getUserId() {
        return $this->user_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}

class ReviewModel {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview(Review $review) {
        $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $review->getProductId());
        $stmt->bindParam(':user_id', $review->getUserId());
        $stmt->bindParam(':rating', $review->getRating());
        $stmt->bindParam(':review', $review->getReview());
        return $stmt->execute();
    }

    public function getReviews() {
        $query = "SELECT * FROM reviews";
        $stmt = $this->db->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
    }

    public function getReviewById($id) {
        $query = "SELECT * FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':id', intval($id));
        $stmt->execute();
        return $stmt->fetchObject('Review');
    }

    public function updateReview(Review $review) {
        $query = "UPDATE reviews SET product_id = :product_id, user_id = :user_id, rating = :rating, review = :review WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':id', intval($review->getId()));
        $stmt->bindParam(':product_id', $review->getProductId());
        $stmt->bindParam(':user_id', $review->getUserId());
        $stmt->bindParam(':rating', $review->getRating());
        $stmt->bindParam(':review', $review->getReview());
        return $stmt->execute();
    }

    public function deleteReview($id) {
        $query = "DELETE FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':id', intval($id));
        return $stmt->execute();
    }
}

class ReviewController {
    private $reviewModel;

    public function __construct($reviewModel) {
        $this->reviewModel = $reviewModel;
    }

    public function createReview() {
        if (isset($_POST['create_review'])) {
            $product_id = intval(filter_input(INPUT_POST, 'product_id', FILTER_SANITIZE_NUMBER_INT));
            $user_id = intval(filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT));
            $rating = floatval(filter_input(INPUT_POST, 'rating', FILTER_SANITIZE_NUMBER_FLOAT));
            $review = filter_input(INPUT_POST, 'review', FILTER_SANITIZE_STRING);
            $reviewObj = new Review(array('product_id' => $product_id, 'user_id' => $user_id, 'rating' => $rating, 'review' => $review));
            return $this->reviewModel->createReview($reviewObj) ? true : false;
        }
    }

    public function getReviews() {
        return $this->reviewModel->getReviews();
    }

    public function getReviewById($id) {
        return $this->reviewModel->getReviewById(intval($id));
    }

    public function updateReview() {
        if (isset($_POST['update_review'])) {
            $product_id = intval(filter_input(INPUT_POST, 'product_id', FILTER_SANITIZE_NUMBER_INT));
            $user_id = intval(filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT));
            $rating = floatval(filter_input(INPUT_POST, 'rating', FILTER_SANITIZE_NUMBER_FLOAT));
            $review = filter_input(INPUT_POST, 'review', FILTER_SANITIZE_STRING);
            $id = intval(filter_input(INPUT_GET, 'id', FILTER_SANITIZE_NUMBER_INT));
            $reviewObj = new Review(array('id' => $id, 'product_id' => $product_id, 'user_id' => $user_id, 'rating' => $rating, 'review' => $review));
            return $this->reviewModel->updateReview($reviewObj) ? true : false;
        }
    }

    public function deleteReview() {
        if (isset($_GET['id'])) {
            $id = intval(filter_input(INPUT_GET, 'id', FILTER_SANITIZE_NUMBER_INT));
            return $this->reviewModel->deleteReview(intval($id)) ? true : false;
        }
    }
}

// Connect to your database
$db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');

// Create an instance of ReviewModel and ReviewController
$reviewModel = new ReviewModel($db);
$reviewController = new ReviewController($reviewModel);

?>


// review.php

class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Create new review
  public function create($user_id, $product_name, $rating, $review) {
    $query = "INSERT INTO reviews (user_id, product_name, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$user_id, $product_name, $rating, $review]);
    return $this->db->lastInsertId();
  }

  // Get all reviews
  public function getAll() {
    $query = "SELECT * FROM reviews";
    return $this->db->query($query)->fetchAll();
  }

  // Get review by ID
  public function get($id) {
    $query = "SELECT * FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$id]);
    return $stmt->fetch();
  }

  // Update review
  public function update($id, $product_name, $rating, $review) {
    $query = "UPDATE reviews SET product_name = ?, rating = ?, review = ? WHERE id = ?";
    $stmt = $this->db->prepare($query);
    return $stmt->execute([$product_name, $rating, $review, $id]);
  }

  // Delete review
  public function delete($id) {
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($query);
    return $stmt->execute([$id]);
  }
}


// db.php (database connection settings)

$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

$review = new Review($db);

// Create a new review
$user_id = 1;
$product_name = "Example Product";
$rating = 5;
$review_text = "This is an example review";

$review_id = $review->create($user_id, $product_name, $rating, $review_text);
echo "Review created with ID: $review_id
";

// Get all reviews
$reviews = $review->getAll();
foreach ($reviews as $r) {
  echo "$r[id] - $r[user_id]: $r[product_name] ($r[rating]/5)
";
}

// Update a review
$review_id = 1;
$product_name = "Updated Product Name";
$rating = 4;
$review_text = "This is an updated review";

if ($review->update($review_id, $product_name, $rating, $review_text)) {
  echo "Review updated successfully
";
} else {
  echo "Error updating review
";
}

// Delete a review
$review_id = 1;

if ($review->delete($review_id)) {
  echo "Review deleted successfully
";
} else {
  echo "Error deleting review
";
}


// database connection settings
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database";

// connect to the database
$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function createUserReview($user_id, $product_id, $rating, $review)
{
    global $conn;
    // prepare and execute the query
    $stmt = $conn->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("iids", $product_id, $user_id, $rating, $review);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error: " . $stmt->error;
        return false;
    }
}

function readReviews($product_id = null)
{
    global $conn;
    // prepare and execute the query
    $query = "SELECT * FROM reviews";
    if ($product_id) {
        $query .= " WHERE product_id = ?";
    }
    $stmt = $conn->prepare($query);
    if ($product_id) {
        $stmt->bind_param("i", $product_id);
    }
    $stmt->execute();
    $result = $stmt->get_result();
    return $result;
}

function updateReview($id, $rating, $review)
{
    global $conn;
    // prepare and execute the query
    $query = "UPDATE reviews SET rating = ?, review = ? WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("dsi", $rating, $review, $id);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error: " . $stmt->error;
        return false;
    }
}

function deleteReview($id)
{
    global $conn;
    // prepare and execute the query
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $id);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error: " . $stmt->error;
        return false;
    }
}


// create a new review
$user_id = 1; // user ID
$product_id = 10; // product ID
$rating = 4.5;
$review = "This is a great product!";
if (createUserReview($user_id, $product_id, $rating, $review)) {
    echo "Review created successfully.";
} else {
    echo "Failed to create review.";
}

// read reviews for a specific product
$product_id = 10;
$result = readReviews($product_id);
while ($row = $result->fetch_assoc()) {
    echo "ID: " . $row["id"] . ", Rating: " . $row["rating"] . ", Review: " . $row["review"];
}

// update a review
$id = 1; // review ID
$rating = 4.8;
$review = "This is an excellent product!";
if (updateReview($id, $rating, $review)) {
    echo "Review updated successfully.";
} else {
    echo "Failed to update review.";
}

// delete a review
$id = 1; // review ID
if (deleteReview($id)) {
    echo "Review deleted successfully.";
} else {
    echo "Failed to delete review.";
}


// db.php - database connection settings
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'username';
$password = 'password';

// Connect to the database
function connectDB() {
  global $host, $dbname, $username, $password;
  try {
    return new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
  } catch (PDOException $e) {
    echo "Error connecting to database: " . $e->getMessage();
    exit();
  }
}

// Review model
class ReviewModel {
  private $db;

  function __construct() {
    $this->db = connectDB();
  }

  // Create a new review
  function createReview($user_id, $product_id, $rating, $review) {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review)
                                VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->bindParam(":user_id", $user_id);
    $stmt->bindParam(":product_id", $product_id);
    $stmt->bindParam(":rating", $rating);
    $stmt->bindParam(":review", $review);
    return $stmt->execute();
  }

  // Get all reviews for a product
  function getReviews($product_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
    $stmt->bindParam(":product_id", $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Get a single review by ID
  function getReview($review_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :review_id");
    $stmt->bindParam(":review_id", $review_id);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  // Update a review
  function updateReview($review_id, $rating, $review) {
    $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :review_id");
    $stmt->bindParam(":review_id", $review_id);
    $stmt->bindParam(":rating", $rating);
    $stmt->bindParam(":review", $review);
    return $stmt->execute();
  }

  // Delete a review
  function deleteReview($review_id) {
    $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :review_id");
    $stmt->bindParam(":review_id", $review_id);
    return $stmt->execute();
  }
}

// User model (simplified for brevity)
class UserModel {
  private $db;

  function __construct() {
    $this->db = connectDB();
  }

  // Get user by ID
  function getUser($user_id) {
    $stmt = $this->db->prepare("SELECT * FROM users WHERE id = :user_id");
    $stmt->bindParam(":user_id", $user_id);
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }
}

// Review controller (simplified for brevity)
class ReviewController {
  private $reviewModel;

  function __construct() {
    $this->reviewModel = new ReviewModel();
  }

  // Create a new review
  function createReview($user_id, $product_id, $rating, $review) {
    return $this->reviewModel->createReview($user_id, $product_id, $rating, $review);
  }

  // Get all reviews for a product
  function getReviews($product_id) {
    return $this->reviewModel->getReviews($product_id);
  }

  // Update a review
  function updateReview($review_id, $rating, $review) {
    return $this->reviewModel->updateReview($review_id, $rating, $review);
  }

  // Delete a review
  function deleteReview($review_id) {
    return $this->reviewModel->deleteReview($review_id);
  }
}


// Create a new review controller instance
$reviewController = new ReviewController();

// Create a new user (simplified for brevity)
$userController = new UserModel();
$userData = array('name' => 'John Doe', 'email' => 'john@example.com');
$userID = $userController->getUser($userData['id']);

// Create a new review
$rating = 5;
$reviewText = 'This product is amazing!';
$isCreated = $reviewController->createReview($userID, 1, $rating, $reviewText);

// Get all reviews for a product
$reviews = $reviewController->getReviews(1);

// Update a review (simplified for brevity)
$reviewID = 1;
$newRating = 4;
$isUpdated = $reviewController->updateReview($reviewID, $newRating, '');

// Delete a review (simplified for brevity)
$deleteResult = $reviewController->deleteReview(1);


// Configuration
$dbHost = 'localhost';
$dbUsername = 'your_username';
$dbPassword = 'your_password';
$dbName = 'your_database';

// Connect to database
$conn = mysqli_connect($dbHost, $dbUsername, $dbPassword, $dbName);

function getUserReviews($userId) {
  global $conn;
  
  // Query for user reviews
  $query = "SELECT * FROM reviews WHERE user_id = '$userId'";
  $result = mysqli_query($conn, $query);
  
  return $result;
}

function getReviewCount() {
  global $conn;
  
  // Query for total review count
  $query = "SELECT COUNT(*) as review_count FROM reviews";
  $result = mysqli_query($conn, $query);
  
  return $result->fetch_assoc()['review_count'];
}

function leaveReview($productId, $rating, $review) {
  global $conn;
  
  // Query to insert new review
  $query = "INSERT INTO reviews (product_id, rating, review) VALUES ('$productId', '$rating', '$review')";
  mysqli_query($conn, $query);
}

// Function for displaying reviews
function displayReviews() {
  global $conn;
  
  // Query for all reviews
  $query = "SELECT * FROM reviews";
  $result = mysqli_query($conn, $query);
  
  while ($row = $result->fetch_assoc()) {
    echo '<div>';
    echo 'Rating: ' . $row['rating'] . '<br>';
    echo 'Review: ' . $row['review'] . '<br>';
    echo '</div>';
  }
}


// Assume user with id=1 exists in the database
$userId = 1;

// Display user's reviews
$result = getUserReviews($userId);
while ($row = $result->fetch_assoc()) {
  echo 'Review ID: ' . $row['id'] . '<br>';
}

// Leave a new review
leaveReview(1, 5, 'This product is amazing!');

// Get total review count
$totalReviews = getReviewCount();
echo 'Total Reviews: ' . $totalReviews;


class Review {
    private $id;
    private $rating;
    private $comment;
    private $product_id;

    public function __construct($id, $rating, $comment, $product_id) {
        $this->id = $id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->product_id = $product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


class ReviewModel {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function addReview(Review $review) {
        $query = "INSERT INTO reviews (product_id, rating, comment) VALUES (:product_id, :rating, :comment)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $review->getProductID());
        $stmt->bindParam(':rating', $review->getRating());
        $stmt->bindParam(':comment', $review->getComment());
        return $stmt->execute();
    }

    public function getAllReviews() {
        $query = "SELECT * FROM reviews";
        $stmt = $this->db->prepare($query);
        $stmt->execute();
        $reviews = array();
        while ($row = $stmt->fetch()) {
            $review = new Review($row['id'], $row['rating'], $row['comment'], $row['product_id']);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public function getReviewsForProduct($productId) {
        $query = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        $reviews = array();
        while ($row = $stmt->fetch()) {
            $review = new Review($row['id'], $row['rating'], $row['comment'], $row['product_id']);
            $reviews[] = $review;
        }
        return $reviews;
    }
}


class UserController extends Controller {
    public function addReview($productId) {
        if ($_SERVER['REQUEST_METHOD'] == 'POST') {
            $rating = $_POST['rating'];
            $comment = $_POST['comment'];
            $review = new Review(NULL, $rating, $comment, $productId);
            $model = new ReviewModel($db);
            $success = $model->addReview($review);
            if ($success) {
                header('Location: ' . $_SERVER['HTTP_REFERER']);
                exit;
            } else {
                echo "Error adding review";
            }
        }
    }

    public function getAllReviews() {
        $model = new ReviewModel($db);
        $reviews = $model->getAllReviews();
        return $reviews;
    }

    public function getReviewsForProduct($productId) {
        $model = new ReviewModel($db);
        $reviews = $model->getReviewsForProduct($productId);
        return $reviews;
    }
}


<form action="<?= base_url('user/add_review') ?>" method="post">
    <label for="rating">Rating:</label>
    <input type="number" id="rating" name="rating">
    <br>
    <label for="comment">Comment:</label>
    <textarea id="comment" name="comment"></textarea>
    <br>
    <button type="submit">Submit Review</button>
</form>


<?php foreach ($reviews as $review) : ?>
    <?= $review->getRating() ?> / 5 stars: <?= $review->getComment() ?>
<?php endforeach; ?>


// Define the database connection settings
define('DB_HOST', 'localhost');
define('DB_NAME', 'database_name');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');

function connectToDatabase() {
  $conn = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USER, DB_PASSWORD);
  return $conn;
}

// Create a review
function createReview($product_id, $user_id, $rating, $review) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)");
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Read all reviews for a product
function getReviewsForProduct($product_id) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Read a single review
function getReview($review_id) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("SELECT * FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $review_id);
  $stmt->execute();
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

// Update a review
function updateReview($review_id, $new_rating, $new_review) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
  $stmt->bindParam(':rating', $new_rating);
  $stmt->bindParam(':review', $new_review);
  $stmt->bindParam(':id', $review_id);
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Delete a review
function deleteReview($review_id) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $review_id);
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}


// Create a new review
$product_id = 1;
$user_id = 1;
$rating = 5;
$review = "This product is amazing!";
createReview($product_id, $user_id, $rating, $review);

// Get all reviews for a product
$product_reviews = getReviewsForProduct(1);
print_r($product_reviews);

// Get a single review
$single_review = getReview(1);
print_r($single_review);

// Update a review
updateReview(1, 4, "I loved it!");
$updated_review = getReview(1);
print_r($updated_review);

// Delete a review
deleteReview(1);


<?php

class Review {
    private $id;
    private $username;
    private $rating;
    private $review;

    public function __construct($id, $username, $rating, $review) {
        $this->id = $id;
        $this->username = $username;
        $this->rating = $rating;
        $this->review = $review;
    }

    public function getId() {
        return $this->id;
    }

    public function getUsername() {
        return $this->username;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}

class ReviewManager {
    private $reviews;

    public function __construct() {
        $this->reviews = array();
    }

    public function addReview(Review $review) {
        $this->reviews[] = $review;
    }

    public function getReviews($product_id = null) {
        if ($product_id !== null) {
            return array_filter($this->reviews, function($review) use ($product_id) {
                return $review->getId() === $product_id;
            });
        } else {
            return $this->reviews;
        }
    }

    public function getUserReviews($username = null) {
        if ($username !== null) {
            return array_filter($this->reviews, function($review) use ($username) {
                return $review->getUsername() === $username;
            });
        } else {
            return $this->reviews;
        }
    }

    public function getAverageRating($product_id = null) {
        if ($product_id !== null) {
            $reviews = $this->getReviews($product_id);
            $total_rating = array_sum(array_column($reviews, 'rating'));
            return count($reviews) > 0 ? $total_rating / count($reviews) : 0;
        } else {
            $reviews = $this->reviews;
            $total_rating = array_sum(array_column($reviews, 'rating'));
            return count($reviews) > 0 ? $total_rating / count($reviews) : 0;
        }
    }

    public function getReviewCount() {
        return count($this->reviews);
    }
}

// Example usage:
$review_manager = new ReviewManager();

$review1 = new Review(1, 'John Doe', 5, 'Great product!');
$review2 = new Review(2, 'Jane Doe', 4, 'Good but not great.');
$review3 = new Review(1, 'John Doe', 5, 'Love this product!');

$review_manager->addReview($review1);
$review_manager->addReview($review2);
$review_manager->addReview($review3);

echo "Reviews for product with ID 1:
";
print_r($review_manager->getReviews(1));

echo "
Average rating for product with ID 1:
";
echo $review_manager->getAverageRating(1);

echo "
User reviews from John Doe:
";
print_r($review_manager->getUserReviews('John Doe'));

echo "
Total review count:
";
echo $review_manager->getReviewCount();

?>


// Review Model
class Review {
    private $id;
    private $productId;
    private $userId;
    private $rating;
    private $review;

    public function __construct($id = null) {
        if ($id !== null) {
            $this->load($id);
        }
    }

    public function load($id) {
        // Assuming we have a database connection
        global $db;

        $query = "SELECT * FROM reviews WHERE id = ?";
        $stmt = $db->prepare($query);
        $stmt->execute([$id]);
        $result = $stmt->fetch();

        if ($result !== false) {
            $this->id = $result['id'];
            $this->productId = $result['product_id'];
            $this->userId = $result['user_id'];
            $this->rating = $result['rating'];
            $this->review = $result['review'];
        }
    }

    public function save() {
        // Assuming we have a database connection
        global $db;

        if ($this->id === null) {
            $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)";
            $stmt = $db->prepare($query);
            $stmt->execute([$this->productId, $this->userId, $this->rating, $this->review]);
            $this->id = $db->lastInsertId();
        } else {
            $query = "UPDATE reviews SET product_id = ?, user_id = ?, rating = ?, review = ? WHERE id = ?";
            $stmt = $db->prepare($query);
            $stmt->execute([$this->productId, $this->userId, $this->rating, $this->review, $this->id]);
        }
    }

    // Getters and setters
    public function getId() {
        return $this->id;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}


// User Review Function
function addUserReview($productId, $userId, $rating, $review) {
    // Create a new review object
    $review = new Review();

    // Set the product ID and user ID
    $review->setProductId($productId);
    $review->setUserId($userId);

    // Set the rating and review text
    $review->setRating($rating);
    $review->setReview($review);

    // Save the review to the database
    $review->save();

    return true;
}


// Add a new review for a product
$product_id = 1; // Product ID
$user_id = 1;    // User ID
$rating = 5;     // Rating (out of 5)
$review_text = 'This product is amazing!'; // Review text

addUserReview($product_id, $user_id, $rating, $review_text);


// Get all reviews for a product
function getReviewsForProduct($productId) {
    // Create an array to store the reviews
    $reviews = [];

    // Query the database for reviews
    global $db;

    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $db->prepare($query);
    $stmt->execute([$productId]);

    $results = $stmt->fetchAll();

    foreach ($results as $result) {
        $review = new Review();
        $review->load($result['id']);
        $reviews[] = $review;
    }

    return $reviews;
}


// Display reviews for a product
$product_id = 1; // Product ID

$reviews = getReviewsForProduct($product_id);

foreach ($reviews as $review) {
    echo 'Rating: ' . $review->getRating() . '/5';
    echo '<br>';
    echo 'Review: ';
    echo $review->getReview();
    echo '<hr>';
}


// Calculate the average rating for a product
function getAverageRatingForProduct($productId) {
    // Initialize variables to store the sum of ratings and count of reviews
    $sum_ratings = 0;
    $count_reviews = 0;

    // Query the database for reviews
    global $db;

    $query = "SELECT rating FROM reviews WHERE product_id = ?";
    $stmt = $db->prepare($query);
    $stmt->execute([$productId]);

    $results = $stmt->fetchAll();

    foreach ($results as $result) {
        $sum_ratings += $result['rating'];
        $count_reviews++;
    }

    // Calculate the average rating
    if ($count_reviews > 0) {
        return round($sum_ratings / $count_reviews, 2);
    } else {
        return 'No reviews yet!';
    }
}


// Display the average rating for a product
$product_id = 1; // Product ID

$average_rating = getAverageRatingForProduct($product_id);

echo 'Average Rating: ' . $average_rating;


class Review {
    private $db;
    private $id;
    private $product_id;
    private $user_id;
    private $rating;
    private $review;

    public function __construct($db) {
        $this->db = $db;
    }

    public function setId($id) {
        $this->id = (int) $id;
    }

    public function setProductId($product_id) {
        $this->product_id = (int) $id;
    }

    public function setUserId($user_id) {
        $this->user_id = (int) $id;
    }

    public function setRating($rating) {
        $this->rating = (int) $rating;
    }

    public function setReview($review) {
        $this->review = trim($review);
    }

    public function save() {
        if ($this->id) {
            // Update existing review
            return $this->db->update('reviews', ['rating' => $this->rating, 'review' => $this->review], ['id' => $this->id]);
        } else {
            // Insert new review
            return $this->db->insert('reviews', [
                'product_id' => $this->product_id,
                'user_id' => $this->user_id,
                'rating' => $this->rating,
                'review' => $this->review
            ]);
        }
    }

    public function getReview() {
        return $this->db->get('reviews', ['id', 'product_id', 'user_id', 'rating', 'review'], ['id' => $this->id]);
    }

    public function delete() {
        return $this->db->delete('reviews', ['id' => $this->id]);
    }
}


class ReviewManager {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function getReviewsForProduct($product_id) {
        return $this->db->get('reviews', ['id', 'rating', 'review'], ['product_id' => $product_id]);
    }

    public function getUserReviews($user_id) {
        return $this->db->get('reviews', ['id', 'rating', 'review'], ['user_id' => $user_id]);
    }

    public function addReview($review_data) {
        $review = new Review($this->db);
        foreach ($review_data as $key => $value) {
            $review->$key = $value;
        }
        return $review->save();
    }

    public function editReview($review_id, $new_review_data) {
        $review = new Review($this->db);
        $review->setId($review_id);
        foreach ($new_review_data as $key => $value) {
            $review->$key = $value;
        }
        return $review->save();
    }

    public function deleteReview($review_id) {
        $review = new Review($this->db);
        $review->setId($review_id);
        return $review->delete();
    }
}


$db = new Database(); // Connect to database
$review_manager = new ReviewManager($db);

// Add a review for product 1 by user 1 with rating 5 and review "Great product!"
$review_data = [
    'product_id' => 1,
    'user_id' => 1,
    'rating' => 5,
    'review' => 'Great product!'
];
$result = $review_manager->addReview($review_data);

// Get reviews for product 1
$product_reviews = $review_manager->getReviewsForProduct(1);
print_r($product_reviews);

// Edit review with id 1 to change rating to 4 and review to "Good product"
$edit_review_data = [
    'rating' => 4,
    'review' => 'Good product'
];
$result = $review_manager->editReview(1, $edit_review_data);

// Delete review with id 2
$result = $review_manager->deleteReview(2);


<?php
// Include the database connection file
require_once 'database.php';

function add_review($product_id, $rating, $review, $user_name) {
  // Insert the review into the database
  $query = "INSERT INTO reviews (product_id, rating, review, user_name)
            VALUES (:product_id, :rating, :review, :user_name)";
  try {
    $stmt = $db->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':user_name', $user_name);
    $stmt->execute();
  } catch (PDOException $e) {
    echo "Error adding review: " . $e->getMessage();
  }
}

function view_reviews($product_id = null) {
  if ($product_id !== null) {
    // Get reviews for a specific product
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    try {
      $stmt = $db->prepare($query);
      $stmt->bindParam(':product_id', $product_id);
      $stmt->execute();
      return $stmt->fetchAll();
    } catch (PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
    }
  } else {
    // Get all reviews
    $query = "SELECT * FROM reviews";
    try {
      $stmt = $db->prepare($query);
      $stmt->execute();
      return $stmt->fetchAll();
    } catch (PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
    }
  }
}
?>


// Add a review for product with ID 1
add_review(1, 5, 'Great product!', 'John Doe');

// Get all reviews
$reviews = view_reviews();
foreach ($reviews as $review) {
  echo "Rating: $review[rating], Review: $review[review], User Name: $review[user_name]";
}

// Get reviews for a specific product (ID 1)
$product_reviews = view_reviews(1);
foreach ($product_reviews as $review) {
  echo "Rating: $review[rating], Review: $review[review], User Name: $review[user_name]";
}


// db.php: configuration file for our database

<?php
$dsn = 'mysql:host=localhost;dbname=your_database';
$user = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $user, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

function addReview($review, $rating, $productId, $userId)
{
    global $pdo;

    try {
        $stmt = $pdo->prepare('INSERT INTO reviews (review, rating, product_id, user_id) VALUES (:review, :rating, :product_id, :user_id)');
        $stmt->bindParam(':review', $review);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':user_id', $userId);
        $stmt->execute();
    } catch (PDOException $e) {
        echo 'Error adding review: ' . $e->getMessage();
    }
}

function viewReviews()
{
    global $pdo;

    try {
        $stmt = $pdo->prepare('SELECT reviews.id, users.name AS username, products.name AS product_name, reviews.review, reviews.rating FROM reviews INNER JOIN users ON reviews.user_id = users.id INNER JOIN products ON reviews.product_id = products.id');
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo 'Error viewing reviews: ' . $e->getMessage();
    }
}

function deleteReview($reviewId)
{
    global $pdo;

    try {
        $pdo->exec('DELETE FROM reviews WHERE id = :id', array(':id' => $reviewId));
    } catch (PDOException $e) {
        echo 'Error deleting review: ' . $e->getMessage();
    }
}


// index.php

require_once('db.php');

if (isset($_POST['add_review'])) {
    $review = $_POST['review'];
    $rating = $_POST['rating'];
    $productId = 1; // replace with product ID from database
    $userId = 1; // replace with user ID from database
    addReview($review, $rating, $productId, $userId);
}

if (isset($_POST['delete_review'])) {
    $reviewId = $_POST['review_id'];
    deleteReview($reviewId);
}

reviews = viewReviews();

?>

<!-- HTML for adding reviews -->
<form action="" method="post">
    <input type="text" name="review" placeholder="Write a review...">
    <input type="number" min="1" max="5" name="rating" placeholder="Rating (out of 5)">
    <button type="submit" name="add_review">Add Review</button>
</form>

<!-- HTML for displaying reviews -->
<h2>Reviews:</h2>
<ul>
<?php foreach ($reviews as $review) { ?>
    <li><?php echo $review['username'] ?> gave <?php echo $review['product_name'] ?> <?php echo $review['rating'] ?>/5: "<?php echo $review['review'] ?>"</li>
<?php } ?>
</ul>

<!-- HTML for deleting reviews -->
<form action="" method="post">
    <input type="number" name="review_id" placeholder="Review ID to delete...">
    <button type="submit" name="delete_review">Delete Review</button>
</form>


// db.php (database connection file)

<?php

class Database {
  private $db;

  function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
  }

  function query($sql, $params = array()) {
    $stmt = $this->db->prepare($sql);
    $stmt->execute($params);
    return $stmt;
  }
}

// review.php (review handling file)

<?php

require_once 'db.php';

class ReviewSystem {
  private $db;

  function __construct() {
    $this->db = new Database();
  }

  // Add a new review
  function addReview($user_id, $product_id, $rating, $review) {
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
    $params = array(
      ':user_id' => $user_id,
      ':product_id' => $product_id,
      ':rating' => $rating,
      ':review' => $review
    );
    $this->db->query($sql, $params);
  }

  // Get all reviews for a product
  function getReviewsForProduct($product_id) {
    $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
    $params = array(
      ':product_id' => $product_id
    );
    return $this->db->query($sql, $params)->fetchAll();
  }

  // Get all reviews for a user
  function getReviewsForUser($user_id) {
    $sql = "SELECT * FROM reviews WHERE user_id = :user_id";
    $params = array(
      ':user_id' => $user_id
    );
    return $this->db->query($sql, $params)->fetchAll();
  }

  // Get a single review by id
  function getReviewById($review_id) {
    $sql = "SELECT * FROM reviews WHERE id = :review_id";
    $params = array(
      ':review_id' => $review_id
    );
    return $this->db->query($sql, $params)->fetch();
  }

  // Update an existing review
  function updateReview($review_id, $new_rating, $new_review) {
    $sql = "UPDATE reviews SET rating = :rating, review = :review WHERE id = :id";
    $params = array(
      ':rating' => $new_rating,
      ':review' => $new_review,
      ':id' => $review_id
    );
    return $this->db->query($sql, $params);
  }

  // Delete a review by id
  function deleteReview($review_id) {
    $sql = "DELETE FROM reviews WHERE id = :review_id";
    $params = array(
      ':review_id' => $review_id
    );
    return $this->db->query($sql, $params);
  }
}

// Example usage:

$reviewSystem = new ReviewSystem();
$user_id = 1;
$product_id = 1;

// Add a new review
$rating = 5;
$review = 'This is an awesome product!';
$reviewSystem->addReview($user_id, $product_id, $rating, $review);

// Get all reviews for a product
$reviews = $reviewSystem->getReviewsForProduct($product_id);
print_r($reviews);

// Get all reviews for a user
$reviews = $reviewSystem->getReviewsForUser($user_id);
print_r($reviews);

// Get a single review by id
$review = $reviewSystem->getReviewById(1);
print_r($review);

// Update an existing review
$new_rating = 4;
$new_review = 'I loved this product!';
$result = $reviewSystem->updateReview(1, $new_rating, $new_review);
echo $result ? "Review updated successfully!" : "Failed to update review.";

// Delete a review by id
$result = $reviewSystem->deleteReview(1);
echo $result ? "Review deleted successfully!" : "Failed to delete review.";


// config.php - database connection settings
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'database';

// connect to database
$conn = new PDO("mysql:host=$db_host;dbname=$db_name", $db_username, $db_password);

function display_reviews($product_id) {
  global $conn;
  
  // get product name from products table
  $stmt = $conn->prepare("SELECT name FROM products WHERE id=:id");
  $stmt->bindParam(':id', $product_id);
  $stmt->execute();
  $product_name = $stmt->fetchColumn();

  // display reviews for this product
  $reviews_query = "SELECT r.id, r.product_id, r.user_id, u.name AS username, r.rating, r.review FROM reviews r 
                     INNER JOIN users u ON r.user_id=u.id 
                     WHERE r.product_id=:product_id ORDER BY r.id DESC";
  
  $stmt = $conn->prepare($reviews_query);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

  echo "<h2>$product_name Reviews</h2>";
  if ($reviews) {
    foreach ($reviews as $review) {
      echo "<p><strong>" . $review['username'] . ":</strong> " . $review['rating'] . "/5 - " . $review['review'] . "</p>";
    }
  } else {
    echo "<p>No reviews for this product yet!</p>";
  }
}

function submit_review($product_id, $user_id, $rating, $review) {
  global $conn;
  
  // insert review into reviews table
  $stmt = $conn->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)");
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  $stmt->execute();
}

// example usage:
display_reviews(1); // display reviews for product with id=1


// Function to get all reviews for a product
function getReviews($productId) {
  $pdo = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
  $stmt = $pdo->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to get a single review
function getReview($reviewId) {
  $pdo = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
  $stmt = $pdo->prepare("SELECT * FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $reviewId);
  $stmt->execute();
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

// Function to create a new review
function createReview($productId, $rating, $title, $review, $userId) {
  $pdo = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
  $stmt = $pdo->prepare("INSERT INTO reviews (product_id, rating, title, review, user_id) VALUES (:product_id, :rating, :title, :review, :user_id)");
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':title', $title);
  $stmt->bindParam(':review', $review);
  $stmt->bindParam(':user_id', $userId);
  return $stmt->execute();
}

// Function to update an existing review
function updateReview($reviewId, $newRating, $newTitle, $newReview) {
  $pdo = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
  $stmt = $pdo->prepare("UPDATE reviews SET rating = :rating, title = :title, review = :review WHERE id = :id");
  $stmt->bindParam(':rating', $newRating);
  $stmt->bindParam(':title', $newTitle);
  $stmt->bindParam(':review', $newReview);
  $stmt->bindParam(':id', $reviewId);
  return $stmt->execute();
}

// Function to delete a review
function deleteReview($reviewId) {
  $pdo = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
  $stmt = $pdo->prepare("DELETE FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $reviewId);
  return $stmt->execute();
}


// Create a new review
$product_id = 1;
$rating = 5;
$title = "Great product!";
$review = "I love this product!";
$user_id = 1;

if (createReview($product_id, $rating, $title, $review, $user_id)) {
  echo "Review created successfully!";
} else {
  echo "Error creating review.";
}

// Get all reviews for a product
$product_id = 1;
$reviews = getReviews($product_id);
foreach ($reviews as $review) {
  echo "Title: " . $review['title'] . "
";
  echo "Rating: " . $review['rating'] . "
";
  echo "Review: " . $review['review'] . "

";
}

// Get a single review
$review_id = 1;
$review = getReview($review_id);
echo "Title: " . $review['title'] . "
";
echo "Rating: " . $review['rating'] . "
";
echo "Review: " . $review['review'] . "

";

// Update an existing review
$review_id = 1;
$new_rating = 4;
$new_title = "Great product, but...";
$new_review = "I love this product, but there are some issues with it.";

if (updateReview($review_id, $new_rating, $new_title, $new_review)) {
  echo "Review updated successfully!";
} else {
  echo "Error updating review.";
}

// Delete a review
$review_id = 1;

if (deleteReview($review_id)) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review.";
}


<?php

// Define the database connection settings
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create a PDO instance
$conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);

// Function to add a review
function addReview($user_id, $product_id, $rating, $review) {
  global $conn;
  
  // Prepare the query
  $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
  
  // Bind the parameters
  $stmt->bindParam(":user_id", $user_id);
  $stmt->bindParam(":product_id", $product_id);
  $stmt->bindParam(":rating", $rating);
  $stmt->bindParam(":review", $review);
  
  // Execute the query
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to get all reviews for a user
function getUserReviews($user_id) {
  global $conn;
  
  // Prepare the query
  $stmt = $conn->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
  
  // Bind the parameter
  $stmt->bindParam(":user_id", $user_id);
  
  // Execute the query and fetch the results
  if ($stmt->execute()) {
    return $stmt->fetchAll();
  } else {
    return array();
  }
}

// Function to get a review by its ID
function getReview($review_id) {
  global $conn;
  
  // Prepare the query
  $stmt = $conn->prepare("SELECT * FROM reviews WHERE id = :review_id");
  
  // Bind the parameter
  $stmt->bindParam(":review_id", $review_id);
  
  // Execute the query and fetch the result
  if ($stmt->execute()) {
    return $stmt->fetch();
  } else {
    return null;
  }
}

// Function to update a review
function updateReview($review_id, $rating, $review) {
  global $conn;
  
  // Prepare the query
  $stmt = $conn->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :review_id");
  
  // Bind the parameters
  $stmt->bindParam(":rating", $rating);
  $stmt->bindParam(":review", $review);
  $stmt->bindParam(":review_id", $review_id);
  
  // Execute the query
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to delete a review
function deleteReview($review_id) {
  global $conn;
  
  // Prepare the query
  $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :review_id");
  
  // Bind the parameter
  $stmt->bindParam(":review_id", $review_id);
  
  // Execute the query
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

?>


// Add a new review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = "Great product!";
addReview($user_id, $product_id, $rating, $review);

// Get all reviews for a user
$user_id = 1;
$reviews = getUserReviews($user_id);
print_r($reviews);

// Get a review by its ID
$review_id = 1;
$review = getReview($review_id);
print_r($review);

// Update a review
$review_id = 1;
$rating = 4;
$review = "Good product, but not great.";
updateReview($review_id, $rating, $review);

// Delete a review
$review_id = 1;
deleteReview($review_id);


// db.php: database connection file

// Establish a database connection
$conn = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');

// Function to get all reviews for a product
function getAllReviews($productId) {
  global $conn;
  $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = ?");
  $stmt->execute([$productId]);
  return $stmt->fetchAll();
}

// Function to add a new review
function addReview($product_id, $user_id, $rating, $review) {
  global $conn;
  $stmt = $conn->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)");
  $stmt->execute([$product_id, $user_id, $rating, $review]);
}

// Function to handle a POST request from the client
function handleReviewPost() {
  global $conn;
  if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    extract($_POST);
    // Validate input data
    if (empty($product_id) || empty($user_id) || !is_numeric($rating) || empty($review)) {
      echo "Invalid input";
      return false;
    }
    
    // Add review to database
    addReview($product_id, $user_id, $rating, $review);
    echo "Review added successfully!";
  } else {
    echo "Invalid request method";
  }
}

// Function to handle a GET request from the client
function getReviewsForProduct() {
  global $conn;
  if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    extract($_GET);
    // Get reviews for product by ID
    $reviews = getAllReviews($product_id);
    echo json_encode($reviews);
  } else {
    echo "Invalid request method";
  }
}


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function createReview($product_id, $rating, $comment, $user_id) {
    $query = "INSERT INTO reviews (product_id, rating, comment, user_id)
              VALUES (:product_id, :rating, :comment, :user_id)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->bindParam(':user_id', $user_id);
    return $stmt->execute();
  }

  public function getReviews($product_id) {
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getUserReviews($user_id) {
    $query = "SELECT * FROM reviews WHERE user_id = :user_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }
}


class UserReview {
  private $review;

  public function __construct($db) {
    $this->review = new Review($db);
  }

  public function addReview($product_id, $rating, $comment, $user_id) {
    return $this->review->createReview($product_id, $rating, $comment, $user_id);
  }

  public function getReviewsForProduct($product_id) {
    return $this->review->getReviews($product_id);
  }

  public function getReviewsByUser($user_id) {
    return $this->review->getUserReviews($user_id);
  }
}


$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

$user_review = new UserReview($db);

$product_id = 1;
$rating = 5;
$comment = 'Great product!';
$user_id = 1;

$user_review->addReview($product_id, $rating, $comment, $user_id);

$reviews_for_product = $user_review->getReviewsForProduct($product_id);
echo json_encode($reviews_for_product);

$reviews_by_user = $user_review->getReviewsByUser($user_id);
echo json_encode($reviews_by_user);


<?php

// Define the Review class
class Review {
    public $id;
    public $product_id;
    public $rating;
    public $review_text;
    public $user_name;
    public $created_at;

    // Constructor to initialize the object properties
    public function __construct($id, $product_id, $rating, $review_text, $user_name) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->review_text = $review_text;
        $this->user_name = $user_name;
        $this->created_at = date('Y-m-d H:i:s');
    }

    // Method to display the review
    public function displayReview() {
        return "Product ID: $this->product_id, Rating: $this->rating, User Name: $this->user_name, Review Text: $this->review_text, Created At: $this->created_at";
    }
}

// Function to create a new review
function create_review($data) {
    // Validate the input data
    if (!isset($data['product_id']) || !isset($data['rating']) || !isset($data['review_text'])) {
        throw new Exception('Invalid input data');
    }

    // Create a new Review object
    $new_review = new Review(null, $data['product_id'], $data['rating'], $data['review_text'], $data['user_name']);

    // Save the review to database (for simplicity, assume we have a function called 'save_to_database' that does this)
    save_to_database($new_review);

    return $new_review;
}

// Function to display all reviews
function get_reviews() {
    // Assume we have an array of Review objects in our example code for simplicity
    $reviews = [
        new Review(1, 1, 5, 'Great product!', 'John Doe'),
        new Review(2, 1, 4, 'Good product.', 'Jane Smith'),
        new Review(3, 2, 3, 'Average product.', 'Bob Johnson')
    ];

    foreach ($reviews as $review) {
        echo $review->displayReview() . "
";
    }
}

// Function to save a review to database (for simplicity, assume we have this function)
function save_to_database($review) {
    // Simulate saving the review to database
    return true;
}

// Example usage:
$data = [
    'product_id' => 1,
    'rating' => 5,
    'review_text' => 'Great product!',
    'user_name' => 'John Doe'
];

try {
    $new_review = create_review($data);
    echo "New review created successfully!" . "
";
} catch (Exception $e) {
    echo "Error creating new review: " . $e->getMessage() . "
";
}

get_reviews();

?>


class Review {
  private $db;

  public function __construct() {
    $this->db = new mysqli('localhost', 'username', 'password', 'database_name');
  }

  /**
   * Add a new review to the database.
   *
   * @param int $user_id
   * @param int $product_id
   * @param int $rating
   * @param string $review
   */
  public function addReview($user_id, $product_id, $rating, $review) {
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }

    $sql = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param('iiss', $user_id, $product_id, $rating, $review);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error adding review: " . $stmt->error;
    }
  }

  /**
   * Retrieve all reviews for a specific product.
   *
   * @param int $product_id
   */
  public function getReviews($product_id) {
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }

    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param('i', $product_id);
    if ($stmt->execute()) {
      return $stmt->get_result();
    } else {
      echo "Error retrieving reviews: " . $stmt->error;
    }
  }

  /**
   * Retrieve a single review by its ID.
   *
   * @param int $review_id
   */
  public function getReview($review_id) {
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }

    $sql = "SELECT * FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param('i', $review_id);
    if ($stmt->execute()) {
      return $stmt->get_result()->fetch_assoc();
    } else {
      echo "Error retrieving review: " . $stmt->error;
    }
  }

  /**
   * Update a review in the database.
   *
   * @param int $review_id
   * @param int $user_id
   * @param int $product_id
   * @param int $rating
   * @param string $review
   */
  public function updateReview($review_id, $user_id, $product_id, $rating, $review) {
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }

    $sql = "UPDATE reviews SET user_id = ?, product_id = ?, rating = ?, review = ?
            WHERE id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param('iisss', $user_id, $product_id, $rating, $review, $review_id);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error updating review: " . $stmt->error;
    }
  }

  /**
   * Delete a review from the database.
   *
   * @param int $review_id
   */
  public function deleteReview($review_id) {
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }

    $sql = "DELETE FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param('i', $review_id);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error deleting review: " . $stmt->error;
    }
  }
}


$review = new Review();

// Add a new review
$user_id = 1;
$product_id = 2;
$rating = 4;
$review_text = 'Great product!';
if ($review->addReview($user_id, $product_id, $rating, $review_text)) {
  echo "Review added successfully!";
}

// Retrieve all reviews for a specific product
$product_id = 3;
$reviews = $review->getReviews($product_id);
foreach ($reviews as $review) {
  echo "User ID: " . $review['user_id'] . ", Rating: " . $review['rating'];
}

// Retrieve a single review by its ID
$review_id = 1;
$single_review = $review->getReview($review_id);
echo "Review Text: " . $single_review['review'];

// Update a review
$new_user_id = 2;
$new_product_id = 4;
$new_rating = 5;
$new_review_text = 'Even better!';
if ($review->updateReview($review_id, $new_user_id, $new_product_id, $new_rating, $new_review_text)) {
  echo "Review updated successfully!";
}

// Delete a review
$review->deleteReview($review_id);
echo "Review deleted successfully!";


function review_product($product_id, $rating, $comment, $user_id) {
  // Validate input data
  if (!is_numeric($product_id)) {
    throw new Exception("Invalid product ID");
  }
  if (!is_int($rating) || $rating < 1 || $rating > 5) {
    throw new Exception("Invalid rating (must be between 1 and 5)");
  }
  if (!$comment) {
    throw new Exception("Comment is required");
  }

  // Get user data
  $user = get_user($user_id);

  // Get product data
  $product = get_product($product_id);

  // Check if review already exists for this product and user
  if (review_exists($product_id, $user_id)) {
    throw new Exception("You have already reviewed this product");
  }

  // Insert review into database
  try {
    $db = connect_to_database();
    $query = "INSERT INTO reviews SET 
      user_id = :user_id,
      product_id = :product_id,
      rating = :rating,
      comment = :comment";
    $stmt = $db->prepare($query);
    $stmt->bindParam(":user_id", $user_id);
    $stmt->bindParam(":product_id", $product_id);
    $stmt->bindParam(":rating", $rating);
    $stmt->bindParam(":comment", $comment);
    $stmt->execute();
  } catch (PDOException $e) {
    throw new Exception("Error inserting review: " . $e->getMessage());
  }

  // Return success response
  return array(
    "message" => "Review submitted successfully",
    "review_id" => $db->lastInsertId()
  );
}

function get_user($user_id) {
  // Get user data from database
  try {
    $db = connect_to_database();
    $query = "SELECT * FROM users WHERE id = :id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(":id", $user_id);
    $stmt->execute();
    return $stmt->fetch();
  } catch (PDOException $e) {
    throw new Exception("Error getting user data: " . $e->getMessage());
  }
}

function get_product($product_id) {
  // Get product data from database
  try {
    $db = connect_to_database();
    $query = "SELECT * FROM products WHERE id = :id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(":id", $product_id);
    $stmt->execute();
    return $stmt->fetch();
  } catch (PDOException $e) {
    throw new Exception("Error getting product data: " . $e->getMessage());
  }
}

function review_exists($product_id, $user_id) {
  // Check if review already exists for this product and user
  try {
    $db = connect_to_database();
    $query = "SELECT COUNT(*) FROM reviews WHERE product_id = :product_id AND user_id = :user_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(":product_id", $product_id);
    $stmt->bindParam(":user_id", $user_id);
    $stmt->execute();
    return (int) $stmt->fetchColumn() > 0;
  } catch (PDOException $e) {
    throw new Exception("Error checking review existence: " . $e->getMessage());
  }
}


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
function connectDatabase() {
  $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Create review table if it doesn't exist
function createReviewTable($conn) {
  $sql = "CREATE TABLE IF NOT EXISTS reviews (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id INT,
          product_id INT,
          rating TINYINT(1),
          comment TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)";
  if (!$conn->query($sql)) {
    die("Error creating review table: " . $conn->error);
  }
}

// Get reviews for a specific product
function getReviewsForProduct($product_id, $limit = null) {
  $conn = connectDatabase();
  createReviewTable($conn);

  $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
  if ($limit) {
    $sql .= " LIMIT $limit";
  }

  $result = $conn->query($sql);
  return $result->fetch_all(MYSQLI_ASSOC);
}

// Get a specific review by id
function getReviewById($review_id) {
  $conn = connectDatabase();
  createReviewTable($conn);

  $sql = "SELECT * FROM reviews WHERE id = '$review_id'";
  $result = $conn->query($sql);
  return $result->fetch_assoc();
}

// Create a new review
function createReview($user_id, $product_id, $rating, $comment) {
  $conn = connectDatabase();
  createReviewTable($conn);

  $sql = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES ('$user_id', '$product_id', '$rating', '$comment')";
  if (!$conn->query($sql)) {
    die("Error creating review: " . $conn->error);
  }
}

// Update an existing review
function updateReview($review_id, $new_rating, $new_comment) {
  $conn = connectDatabase();
  createReviewTable($conn);

  $sql = "UPDATE reviews SET rating = '$new_rating', comment = '$new_comment' WHERE id = '$review_id'";
  if (!$conn->query($sql)) {
    die("Error updating review: " . $conn->error);
  }
}

// Delete a review
function deleteReview($review_id) {
  $conn = connectDatabase();
  createReviewTable($conn);

  $sql = "DELETE FROM reviews WHERE id = '$review_id'";
  if (!$conn->query($sql)) {
    die("Error deleting review: " . $conn->error);
  }
}

?>


// Get all reviews for product with ID 123
$reviews = getReviewsForProduct(123, 10);

foreach ($reviews as $review) {
  echo "Review ID: {$review['id']}<br>";
  echo "User ID: {$review['user_id']}<br>";
  echo "Product ID: {$review['product_id']}<br>";
  echo "Rating: {$review['rating']}<br>";
  echo "Comment: {$review['comment']}<br><br>";
}

// Create a new review for product with ID 123
createReview(1, 123, 5, 'This is a great product!');

// Update an existing review
updateReview(1, 4, 'I changed my mind...');

// Delete a review
deleteReview(2);


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_db';
$user = 'root';
$password = '';

// Connect to database
$conn = new mysqli($host, $user, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function add_review($product_id, $rating, $comment) {
    // Add review to database
    $sql = "INSERT INTO reviews (product_id, rating, comment, created_at)
            VALUES ('$product_id', '$rating', '$comment', NOW())";
    if ($conn->query($sql) === TRUE) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review: " . $conn->error;
    }
}

function get_reviews($product_id) {
    // Retrieve reviews from database
    $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            echo "<p>Rating: $row[rating]</p>";
            echo "<p>Comment: $row[comment]</p>";
            echo "<hr>";
        }
    } else {
        echo "No reviews found for this product.";
    }
}

function update_review($review_id, $rating, $comment) {
    // Update review in database
    $sql = "UPDATE reviews SET rating = '$rating', comment = '$comment' WHERE id = '$review_id'";
    if ($conn->query($sql) === TRUE) {
        echo "Review updated successfully!";
    } else {
        echo "Error updating review: " . $conn->error;
    }
}

function delete_review($review_id) {
    // Delete review from database
    $sql = "DELETE FROM reviews WHERE id = '$review_id'";
    if ($conn->query($sql) === TRUE) {
        echo "Review deleted successfully!";
    } else {
        echo "Error deleting review: " . $conn->error;
    }
}

// Close connection
$conn->close();

?>


add_review(1, 5, "Great product!");


get_reviews(1);



update_review(1, 4, "Good product, but... ");



delete_review(1);


<?php

class Review {
  private $db;

  public function __construct() {
    $this->db = new mysqli('localhost', 'username', 'password', 'database');
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }
  }

  public function addReview($productId, $userId, $rating, $comment) {
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
            VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param("iiss", $productId, $userId, $rating, $comment);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error: " . $stmt->error;
      return false;
    }
  }

  public function getReviewsForProduct($productId) {
    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param("i", $productId);
    if ($stmt->execute()) {
      return $stmt->get_result();
    } else {
      echo "Error: " . $stmt->error;
      return false;
    }
  }

  public function getReviewsForUser($userId) {
    $sql = "SELECT * FROM reviews WHERE user_id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param("i", $userId);
    if ($stmt->execute()) {
      return $stmt->get_result();
    } else {
      echo "Error: " . $stmt->error;
      return false;
    }
  }

  public function deleteReview($reviewId) {
    $sql = "DELETE FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param("i", $reviewId);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error: " . $stmt->error;
      return false;
    }
  }

  public function updateReview($reviewId, $rating, $comment) {
    $sql = "UPDATE reviews SET rating = ?, comment = ?
            WHERE id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param("is", $rating, $comment, $reviewId);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error: " . $stmt->error;
      return false;
    }
  }

}

?>


$review = new Review();

// Add a review
if ($review->addReview(1, 1, 5, 'Great product!')) {
  echo 'Review added successfully!';
} else {
  echo 'Error adding review';
}

// Get reviews for a product
$results = $review->getReviewsForProduct(1);
while ($row = $results->fetch_assoc()) {
  echo $row['rating'] . ': ' . $row['comment'];
}

// Get reviews for a user
$results = $review->getReviewsForUser(1);
while ($row = $results->fetch_assoc()) {
  echo $row['product_id'] . ': ' . $row['rating'] . ': ' . $row['comment'];
}

// Delete a review
if ($review->deleteReview(1)) {
  echo 'Review deleted successfully!';
} else {
  echo 'Error deleting review';
}

// Update a review
if ($review->updateReview(1, 4, 'Good product!')) {
  echo 'Review updated successfully!';
} else {
  echo 'Error updating review';
}


<?php

// Configuration
$db_host = 'your_database_host';
$db_username = 'your_database_username';
$db_password = 'your_database_password';
$db_name = 'your_database_name';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function createUserReview($user_id, $product_id, $rating, $review)
{
    global $conn;
    
    // Check if review already exists
    $sql = "SELECT * FROM reviews WHERE user_id = '$user_id' AND product_id = '$product_id'";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        return false; // Review already exists for this user and product
    }
    
    // Insert review into database
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES ('$user_id', '$product_id', '$rating', '$review')";
    if ($conn->query($sql) === TRUE) {
        return true; // Review created successfully
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false; // Error creating review
    }
}

function getUserReviews($user_id)
{
    global $conn;
    
    // Retrieve all reviews for this user
    $sql = "SELECT * FROM reviews WHERE user_id = '$user_id'";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        return $result; // Reviews retrieved successfully
    } else {
        echo "Error: No reviews found for this user";
        return false; // Error retrieving reviews
    }
}

function getAverageRating($product_id)
{
    global $conn;
    
    // Retrieve average rating for this product
    $sql = "SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        return $result->fetch_assoc()['average_rating']; // Average rating retrieved successfully
    } else {
        echo "Error: No ratings found for this product";
        return false; // Error retrieving average rating
    }
}

?>


// Create a new review for a user
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = 'Great product!';

if (createUserReview($user_id, $product_id, $rating, $review)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review";
}

// Retrieve all reviews for a user
$user_reviews = getUserReviews($user_id);

if ($user_reviews) {
    while ($row = $user_reviews->fetch_assoc()) {
        echo 'Rating: ' . $row['rating'] . ', Review: ' . $row['review'];
    }
} else {
    echo "Error retrieving reviews";
}

// Retrieve average rating for a product
$product_id = 1;
$average_rating = getAverageRating($product_id);

if ($average_rating) {
    echo 'Average rating: ' . $average_rating;
} else {
    echo "Error retrieving average rating";
}


function createUserReview($userId, $productId, $rating, $review) {
    try {
        // Connect to database
        $conn = new PDO('mysql:host=localhost;dbname=yourdatabase', 'username', 'password');
        
        // Prepare review query
        $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:userId, :productId, :rating, :review)");
        
        // Bind parameters
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        
        // Execute review query
        if ($stmt->execute()) {
            return true;
        } else {
            echo "Error creating review: " . $conn->errorInfo()[2];
            return false;
        }
    } catch (PDOException $e) {
        echo "Error connecting to database: " . $e->getMessage();
        return false;
    } finally {
        // Close connection
        if ($conn instanceof PDO) {
            $conn = null;
        }
    }
}

function getUserReviews($userId, $limit = 10) {
    try {
        // Connect to database
        $conn = new PDO('mysql:host=localhost;dbname=yourdatabase', 'username', 'password');
        
        // Prepare review query
        $stmt = $conn->prepare("SELECT r.id, p.title, u.name, r.rating, r.review 
                                FROM reviews r
                                JOIN users u ON r.user_id = u.id
                                JOIN products p ON r.product_id = p.id
                                WHERE r.user_id = :userId
                                ORDER BY r.id DESC
                                LIMIT :limit");
        
        // Bind parameters
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':limit', $limit);
        
        // Execute review query
        if ($stmt->execute()) {
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } else {
            echo "Error retrieving reviews: " . $conn->errorInfo()[2];
            return array();
        }
    } catch (PDOException $e) {
        echo "Error connecting to database: " . $e->getMessage();
        return array();
    } finally {
        // Close connection
        if ($conn instanceof PDO) {
            $conn = null;
        }
    }
}

function getProductReviews($productId, $limit = 10) {
    try {
        // Connect to database
        $conn = new PDO('mysql:host=localhost;dbname=yourdatabase', 'username', 'password');
        
        // Prepare review query
        $stmt = $conn->prepare("SELECT r.id, p.title, u.name, r.rating, r.review 
                                FROM reviews r
                                JOIN users u ON r.user_id = u.id
                                JOIN products p ON r.product_id = p.id
                                WHERE r.product_id = :productId
                                ORDER BY r.id DESC
                                LIMIT :limit");
        
        // Bind parameters
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':limit', $limit);
        
        // Execute review query
        if ($stmt->execute()) {
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } else {
            echo "Error retrieving reviews: " . $conn->errorInfo()[2];
            return array();
        }
    } catch (PDOException $e) {
        echo "Error connecting to database: " . $e->getMessage();
        return array();
    } finally {
        // Close connection
        if ($conn instanceof PDO) {
            $conn = null;
        }
    }
}


// Create a new review for user 1 on product 1 with rating 5 and review "Great product!"
 createUserReview(1, 1, 5, "Great product!");

// Retrieve all reviews from user 1 with a limit of 10
$reviews = getUserReviews(1);

// Retrieve all reviews from product 1 with a limit of 10
$reviews = getProductReviews(1);


CREATE TABLE users (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255),
  email VARCHAR(255)
);

CREATE TABLE products (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255)
);

CREATE TABLE reviews (
  id INT PRIMARY KEY AUTO_INCREMENT,
  product_id INT,
  user_id INT,
  rating TINYINT,
  comment TEXT,
  FOREIGN KEY (product_id) REFERENCES products(id),
  FOREIGN KEY (user_id) REFERENCES users(id)
);


<?php

// Configuration file with database connection details
require_once 'config.php';

// Function to add a new review
function addReview($productId, $userId, $rating, $comment) {
  // Prepare the query to insert the review into the database
  $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
            VALUES (:productId, :userId, :rating, :comment)";

  try {
    // Execute the query with prepared statement
    $stmt = $db->prepare($query);
    $stmt->bindParam(':productId', $productId);
    $stmt->bindParam(':userId', $userId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $result = $stmt->execute();

    // Return the ID of the newly added review
    return $db->lastInsertId();
  } catch (PDOException $e) {
    echo "Error adding review: " . $e->getMessage();
    return false;
  }
}

// Function to get all reviews for a specific product
function getReviews($productId) {
  // Prepare the query to select all reviews from the database
  $query = "SELECT r.id, u.name, r.rating, r.comment, p.name AS productName
            FROM reviews r
            JOIN users u ON r.user_id = u.id
            JOIN products p ON r.product_id = p.id
            WHERE r.product_id = :productId";

  try {
    // Execute the query with prepared statement
    $stmt = $db->prepare($query);
    $stmt->bindParam(':productId', $productId);
    $result = $stmt->execute();

    // Return all reviews as an array of associative arrays
    return $result->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo "Error getting reviews: " . $e->getMessage();
    return false;
  }
}

// Function to get a single review by its ID
function getReview($reviewId) {
  // Prepare the query to select a single review from the database
  $query = "SELECT r.id, u.name, r.rating, r.comment, p.name AS productName
            FROM reviews r
            JOIN users u ON r.user_id = u.id
            JOIN products p ON r.product_id = p.id
            WHERE r.id = :reviewId";

  try {
    // Execute the query with prepared statement
    $stmt = $db->prepare($query);
    $stmt->bindParam(':reviewId', $reviewId);
    $result = $stmt->execute();

    // Return a single review as an associative array, or false if not found
    return $result->fetch(PDO::FETCH_ASSOC) ?: false;
  } catch (PDOException $e) {
    echo "Error getting review: " . $e->getMessage();
    return false;
  }
}

// Example usage:
$productId = 1; // ID of the product to get reviews for
$userRating = 5; // User's rating for the product (1-5)
$userComment = 'Great product!'; // User's comment for the product

$reviewId = addReview($productId, $_SESSION['userId'], $userRating, $userComment);
if ($reviewId) {
  echo "Review added successfully!";
} else {
  echo "Error adding review.";
}

$reviews = getReviews($productId);
foreach ($reviews as $review) {
  echo "Review by {$review['name']} on product {$review['productName']}: {$review['rating']} stars, {$review['comment']}";
}


// review.model.php

class Review {
    private $id;
    private $rating;
    private $title;
    private $content;
    private $user_id;

    public function __construct($id, $rating, $title, $content, $user_id) {
        $this->id = $id;
        $this->rating = $rating;
        $this->title = $title;
        $this->content = $content;
        $this->user_id = $user_id;
    }

    public function getId() {
        return $this->id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getContent() {
        return $this->content;
    }

    public function getUserID() {
        return $this->user_id;
    }
}


// review.controller.php

class ReviewController {
    private $reviews;

    public function __construct() {
        $this->reviews = array();
    }

    public function addReview(Review $review) {
        array_push($this->reviews, $review);
    }

    public function getReviews() {
        return $this->reviews;
    }

    public function deleteReview(int $id) {
        foreach ($this->reviews as $key => $review) {
            if ($review->getId() == $id) {
                unset($this->reviews[$key]);
                break;
            }
        }
    }
}


// review.function.php

function createUserReview(ReviewController $controller, int $user_id, string $title, string $content, float $rating) {
    $review = new Review(NULL, $rating, $title, $content, $user_id);
    $controller->addReview($review);
    return $review;
}

function getUserReviews(ReviewController $controller, int $user_id) {
    $reviews = array_filter($controller->getReviews(), function ($review) use ($user_id) {
        return $review->getUserID() == $user_id;
    });
    return $reviews;
}

function deleteReview(ReviewController $controller, int $id) {
    $controller->deleteReview($id);
}


$controller = new ReviewController();

// Create a new review
$review = createUserReview($controller, 1, 'Great product!', 'I love this product!', 5.0);

// Get all reviews for user with ID 1
$reviews = getUserReviews($controller, 1);
print_r($reviews);

// Delete the first review in the list
deleteReview($controller, $reviews[0]->getId());


// connect.php: database connection settings
$dsn = 'mysql:host=localhost;dbname=mydatabase';
$username = 'myusername';
$password = 'mypassword';

// db_connect.php: wrapper for database connections
function connect_to_db() {
  $conn = new PDO($dsn, $username, $password);
  return $conn;
}

// review.php: user review function
require_once 'connect.php';
require_once 'db_connect.php';

function create_review($product_id, $user_id, $rating, $review_text) {
  // create a new review in the database
  $conn = connect_to_db();
  $stmt = $conn->prepare('INSERT INTO reviews (product_id, user_id, rating, review_text)
    VALUES (:product_id, :user_id, :rating, :review_text)');
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review_text', $review_text);
  $stmt->execute();
  return $conn->lastInsertId();
}

function get_reviews($product_id) {
  // retrieve reviews for a specific product
  $conn = connect_to_db();
  $stmt = $conn->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function get_user_reviews($user_id) {
  // retrieve reviews submitted by a specific user
  $conn = connect_to_db();
  $stmt = $conn->prepare('SELECT * FROM reviews WHERE user_id = :user_id');
  $stmt->bindParam(':user_id', $user_id);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function delete_review($review_id) {
  // delete a review from the database
  $conn = connect_to_db();
  $stmt = $conn->prepare('DELETE FROM reviews WHERE id = :review_id');
  $stmt->bindParam(':review_id', $review_id);
  $stmt->execute();
}


$product_id = 123;
$user_id = 456;
$rating = 4;
$review_text = 'Great product!';

$review_id = create_review($product_id, $user_id, $rating, $review_text);
echo "Review created with ID: $review_id";


$product_id = 123;

$reviews = get_reviews($product_id);
foreach ($reviews as $review) {
  echo "Rating: {$review['rating']}, Review Text: {$review['review_text']}<br>";
}


$user_id = 456;

$reviews = get_user_reviews($user_id);
foreach ($reviews as $review) {
  echo "Rating: {$review['rating']}, Review Text: {$review['review_text']}<br>";
}


$review_id = 789;

delete_review($review_id);
echo "Review deleted with ID: $review_id";


<?php

// Include database connection settings
require_once 'db_config.php';

// Function to create a review
function create_review($user_id, $product_id, $rating, $comment) {
  global $db;
  
  // Check if user is logged in
  if (!isset($_SESSION['logged_in']) || !$_SESSION['logged_in']) {
    return array('error' => 'Please log in to leave a review');
  }
  
  try {
    // Insert review into database
    $stmt = $db->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:user_id, :product_id, :rating, :comment)");
    $stmt->execute(array(
      ':user_id' => $user_id,
      ':product_id' => $product_id,
      ':rating' => $rating,
      ':comment' => $comment
    ));
    
    // Get the review ID
    $review_id = $db->lastInsertId();
    
    return array('success' => true, 'review_id' => $review_id);
  } catch (PDOException $e) {
    return array('error' => 'Error creating review: ' . $e->getMessage());
  }
}

// Function to retrieve reviews for a product
function get_reviews($product_id) {
  global $db;
  
  try {
    // Retrieve reviews from database
    $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
    $stmt->execute(array(':product_id' => $product_id));
    
    return array('success' => true, 'reviews' => $stmt->fetchAll());
  } catch (PDOException $e) {
    return array('error' => 'Error retrieving reviews: ' . $e->getMessage());
  }
}

// Function to retrieve user's reviews
function get_user_reviews($user_id) {
  global $db;
  
  try {
    // Retrieve reviews from database
    $stmt = $db->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
    $stmt->execute(array(':user_id' => $user_id));
    
    return array('success' => true, 'reviews' => $stmt->fetchAll());
  } catch (PDOException $e) {
    return array('error' => 'Error retrieving user reviews: ' . $e->getMessage());
  }
}

// Example usage:
$user_id = $_SESSION['logged_in'];
$product_id = 1;
$rating = 5;
$comment = "Great product!";

$result = create_review($user_id, $product_id, $rating, $comment);
if ($result['success']) {
  echo 'Review created successfully!';
} else {
  echo 'Error creating review: ' . $result['error'];
}

?>


class Review {
    private $id;
    private $userId;
    private $reviewText;
    private $rating;

    public function __construct($id, $userId, $reviewText, $rating) {
        $this->id = $id;
        $this->userId = $userId;
        $this->reviewText = $reviewText;
        $this->rating = $rating;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getReviewText() {
        return $this->reviewText;
    }

    public function getRating() {
        return $this->rating;
    }
}


class ReviewService {
    private $reviews = array();

    public function addReview(Review $review) {
        $this->reviews[] = $review;
        return $review;
    }

    public function getReviews() {
        return $this->reviews;
    }
}


$reviewService = new ReviewService();
$review1 = new Review(1, 1, 'Great product!', 5);
$review2 = new Review(2, 2, 'Okay product.', 3);

$reviewService->addReview($review1);
$reviewService->addReview($review2);

foreach ($reviewService->getReviews() as $review) {
    echo "Review ID: {$review->getId()}
";
    echo "User ID: {$review->getUserId()}
";
    echo "Review Text: {$review->getReviewText()}
";
    echo "Rating: {$review->getRating()}/5

";
}


class ReviewService {
    private $reviews = array();
    private $authManager;

    public function __construct($authManager) {
        $this->authManager = $authManager;
    }

    public function addReview(Review $review, $userId) {
        if (!$this->authManager->isAuthenticated()) {
            throw new Exception('User must be authenticated to add a review');
        }
        
        if ($this->authManager->getUser()->getId() !== (int)$userId) {
            throw new Exception('You do not have permission to add reviews for this user');
        }

        $this->reviews[] = $review;
        return $review;
    }

    public function getReviews() {
        return $this->reviews;
    }
}


<?php

// Database Connection
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "review_system";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function add_review() {
    global $conn;
    
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        
        // Get the review data
        $product_id = $_POST['product_id'];
        $user_id = $_POST['user_id'];
        $rating = $_POST['rating'];
        $review_text = $_POST['review_text'];

        // Check if the product exists in the database
        $query = "SELECT * FROM products WHERE id = '$product_id'";
        $result = $conn->query($query);

        if ($result->num_rows > 0) {
            // Add review to database
            $sql = "INSERT INTO reviews (user_id, product_id, rating, review_text)
                    VALUES ('$user_id', '$product_id', '$rating', '$review_text')";
            
            if ($conn->query($sql) === TRUE) {
                echo "Review added successfully!";
            } else {
                echo "Error: " . $sql . "<br>" . $conn->error;
            }
        } else {
            echo "Product not found.";
        }
    }
}

function get_reviews() {
    global $conn;
    
    // Get reviews for a specific product
    $product_id = $_GET['product_id'];
    
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            echo "<h2>Review</h2>";
            echo "Rating: " . $row['rating'] . "/5";
            echo "<br>Text: " . $row['review_text'];
            echo "<hr>";
        }
    } else {
        echo "No reviews found for this product.";
    }
}

function delete_review() {
    global $conn;
    
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        
        // Get the review id
        $review_id = $_POST['review_id'];
        
        $query = "DELETE FROM reviews WHERE id = '$review_id'";
        
        if ($conn->query($query) === TRUE) {
            echo "Review deleted successfully!";
        } else {
            echo "Error: " . $sql . "<br>" . $conn->error;
        }
    }
}

?>


// add_review.php

add_review();
?>

<form action="" method="post">
    <label>Product ID:</label>
    <input type="text" name="product_id"><br><br>
    <label>User ID:</label>
    <input type="text" name="user_id"><br><br>
    <label>Rating:</label>
    <select name="rating">
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
        <option value="5">5</option>
    </select><br><br>
    <label>Review:</label>
    <textarea name="review_text"></textarea><br><br>
    <input type="submit" value="Add Review">
</form>

<?php
// get_reviews.php

get_reviews();
?>

<form action="" method="post">
    <input type="hidden" name="product_id" value="<?php echo $_GET['product_id']; ?>">
    <input type="submit" value="Delete Review" onclick="return confirm('Are you sure you want to delete this review?')">
</form>

<?php
// delete_review.php

delete_review();
?>


// review.php

// database connection info (replace with your own)
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database_name";

// create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// function to add a new review
function add_review($product_id, $user_id, $rating, $review_text) {
    global $conn;
    $sql = "INSERT INTO reviews (product_id, user_id, rating, review_text)
            VALUES ('$product_id', '$user_id', '$rating', '$review_text')";
    if ($conn->query($sql) === TRUE) {
        return true; // review added successfully
    } else {
        return false; // error adding review
    }
}

// function to update an existing review
function update_review($id, $product_id, $user_id, $rating, $review_text) {
    global $conn;
    $sql = "UPDATE reviews SET product_id='$product_id', user_id='$user_id', rating='$rating', review_text='$review_text'
            WHERE id='$id'";
    if ($conn->query($sql) === TRUE) {
        return true; // review updated successfully
    } else {
        return false; // error updating review
    }
}

// function to delete a review
function delete_review($id) {
    global $conn;
    $sql = "DELETE FROM reviews WHERE id='$id'";
    if ($conn->query($sql) === TRUE) {
        return true; // review deleted successfully
    } else {
        return false; // error deleting review
    }
}

// close connection when done
$conn->close();


// display_reviews.php

// include review.php to get functions and database connection info
include "review.php";

// get list of reviews for a given product
$product_id = $_GET['product_id'];
$reviews = array();

$sql = "SELECT * FROM reviews WHERE product_id='$product_id'";
$result = $conn->query($sql);

if ($result->num_rows > 0) {
    // output data of each row
    while($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }
} else {
    echo "No reviews found for this product.";
}

// close connection when done
$conn->close();

// display list of reviews
foreach ($reviews as $review) {
    echo "Rating: " . $review['rating'] . ", Review Text: " . $review['review_text'];
}


<!-- add_review.php -->

<form action="review.php" method="post">
    <input type="hidden" name="product_id" value="<?php echo $_GET['product_id']; ?>">
    <label for="rating">Rating:</label>
    <select id="rating" name="rating">
        <?php
            for ($i = 1; $i <= 5; $i++) {
                echo "<option value='$i'>$i stars</option>";
            }
        ?>
    </select>

    <br><br>

    <textarea id="review_text" name="review_text" placeholder="Write your review here..."></textarea>

    <br><br>

    <input type="submit" value="Submit Review">
</form>


// db.php: database connection file

$servername = 'localhost';
$username = 'username';
$password = 'password';
$dbname = 'database_name';

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function createUserReview($productId, $rating, $review, $userId) {
    global $conn;

    if (!$conn) {
        die("Connection failed");
    }

    $sql = "INSERT INTO reviews (product_id, rating, review, user_id)
            VALUES ('$productId', '$rating', '$review', '$userId')";

    if ($conn->query($sql)) {
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}

function getReview($id) {
    global $conn;

    if (!$conn) {
        die("Connection failed");
    }

    $sql = "SELECT * FROM reviews WHERE id = '$id'";

    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        return $result->fetch_assoc();
    } else {
        return null;
    }
}

function getReviewsByProductId($productId) {
    global $conn;

    if (!$conn) {
        die("Connection failed");
    }

    $sql = "SELECT * FROM reviews WHERE product_id = '$productId'";

    $result = $conn->query($sql);

    return $result->fetch_all(MYSQLI_ASSOC);
}

function getReviewsByUserId($userId) {
    global $conn;

    if (!$conn) {
        die("Connection failed");
    }

    $sql = "SELECT * FROM reviews WHERE user_id = '$userId'";

    $result = $conn->query($sql);

    return $result->fetch_all(MYSQLI_ASSOC);
}

function updateReview($id, $rating, $review) {
    global $conn;

    if (!$conn) {
        die("Connection failed");
    }

    $sql = "UPDATE reviews SET rating = '$rating', review = '$review' WHERE id = '$id'";

    if ($conn->query($sql)) {
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}

function deleteReview($id) {
    global $conn;

    if (!$conn) {
        die("Connection failed");
    }

    $sql = "DELETE FROM reviews WHERE id = '$id'";

    if ($conn->query($sql)) {
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}


// Create a new review for product 1 by user 1
createUserReview(1, '4.5', 'This is an amazing product!', 1);

// Get all reviews for product 1
$reviews = getReviewsByProductId(1);
print_r($reviews);

// Update the rating and review of review with id 1
updateReview(1, '5.0', 'I loved this product!');

// Delete a review with id 1
deleteReview(1);


// Include database connection file
require 'db.php';

function createReview($data) {
  $userId = $data['user_id'];
  $productId = $data['product_id'];
  $rating = $data['rating'];
  $review = $data['review'];

  // Validate input data
  if (!$userId || !$productId || !$rating || !$review) {
    return false;
  }

  // Insert review into database
  $query = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES ('$userId', '$productId', '$rating', '$review')";
  mysqli_query($db, $query);

  // Return true if review created successfully
  return true;
}

function getReviewsForProduct($productId) {
  // Query database to retrieve reviews for specific product
  $query = "SELECT * FROM reviews WHERE product_id = '$productId'";
  $result = mysqli_query($db, $query);
  $reviews = array();

  while ($row = mysqli_fetch_assoc($result)) {
    $reviews[] = array(
      'id' => $row['id'],
      'user_id' => $row['user_id'],
      'product_id' => $row['product_id'],
      'rating' => $row['rating'],
      'review' => $row['review']
    );
  }

  // Return reviews as an array
  return $reviews;
}

function updateReview($data) {
  // Validate input data
  if (!$data['id'] || !$data['user_id']) {
    return false;
  }

  // Update review in database
  $query = "UPDATE reviews SET user_id = '$data[user_id]', product_id = '$data[product_id]',
                  rating = '$data[rating]', review = '$data[review]' WHERE id = '$data[id]'";
  mysqli_query($db, $query);

  // Return true if review updated successfully
  return true;
}

function deleteReview($id) {
  // Validate input data
  if (!$id) {
    return false;
  }

  // Delete review from database
  $query = "DELETE FROM reviews WHERE id = '$id'";
  mysqli_query($db, $query);

  // Return true if review deleted successfully
  return true;
}


// Create a new review
$data = array(
  'user_id' => 1,
  'product_id' => 1,
  'rating' => 5,
  'review' => 'Great product!'
);
createReview($data);

// Get reviews for specific product
$productId = 1;
$reviews = getReviewsForProduct($productId);
print_r($reviews);

// Update a review
$data = array(
  'id' => 1,
  'user_id' => 2,
  'product_id' => 1,
  'rating' => 4,
  'review' => 'Good product.'
);
updateReview($data);

// Delete a review
$reviewId = 1;
deleteReview($reviewId);


class Review {
    private $id;
    private $productId;
    private $userId;
    private $rating;
    private $review;

    public function __construct($data) {
        $this->id = $data['id'] ?? null;
        $this->productId = $data['product_id'];
        $this->userId = $data['user_id'];
        $this->rating = $data['rating'];
        $this->review = $data['review'];
    }

    public function getId() {
        return $this->id;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}


class ReviewController extends Controller {
    private $db;

    public function __construct() {
        parent::__construct();
        $this->db = Database::getInstance()->getConnection();
    }

    public function createReview($data) {
        // Insert new review into database
        $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)";
        $stmt = $this->db->prepare($query);
        $stmt->execute([
            ':product_id' => $data['product_id'],
            ':user_id' => $data['user_id'],
            ':rating' => $data['rating'],
            ':review' => $data['review']
        ]);
    }

    public function getReviews() {
        // Retrieve all reviews from database
        $query = "SELECT * FROM reviews";
        $stmt = $this->db->prepare($query);
        $stmt->execute();
        $reviews = [];
        while ($row = $stmt->fetch()) {
            $review = new Review([
                'id' => $row['id'],
                'product_id' => $row['product_id'],
                'user_id' => $row['user_id'],
                'rating' => $row['rating'],
                'review' => $row['review']
            ]);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public function getReview($id) {
        // Retrieve a single review from database
        $query = "SELECT * FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->execute([':id' => $id]);
        return new Review($stmt->fetch());
    }

    public function updateReview($data) {
        // Update a review in database
        $query = "UPDATE reviews SET rating = :rating, review = :review WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->execute([
            ':rating' => $data['rating'],
            ':review' => $data['review'],
            ':id' => $data['id']
        ]);
    }

    public function deleteReview($id) {
        // Delete a review from database
        $query = "DELETE FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->execute([':id' => $id]);
    }
}


class UserController extends Controller {
    private $db;

    public function __construct() {
        parent::__construct();
        $this->db = Database::getInstance()->getConnection();
    }

    public function getReviews($userId) {
        // Retrieve all reviews from a user
        $query = "SELECT * FROM reviews WHERE user_id = :user_id";
        $stmt = $this->db->prepare($query);
        $stmt->execute([':user_id' => $userId]);
        return ReviewController::getReviewsFromStatement($stmt);
    }

    private function getReviewsFromStatement($stmt) {
        $reviews = [];
        while ($row = $stmt->fetch()) {
            $review = new Review([
                'id' => $row['id'],
                'product_id' => $row['product_id'],
                'user_id' => $row['user_id'],
                'rating' => $row['rating'],
                'review' => $row['review']
            ]);
            $reviews[] = $review;
        }
        return $reviews;
    }
}


class Controller {
    protected $db;

    public function __construct() {
        // Initialize database connection here
        $this->db = Database::getInstance()->getConnection();
    }

    public function redirect($url) {
        header("Location: $url");
        exit;
    }
}


class Database {
    private static $_instance;

    public static function getInstance() {
        if (!self::$_instance instanceof self) {
            self::$_instance = new self();
        }
        return self::$_instance;
    }

    protected function getConnection() {
        $config = require 'config.php';
        try {
            $dsn = "mysql:host=$config['host'];dbname=$config['db']";
            $pdo = new PDO($dsn, $config['username'], $config['password']);
            return $pdo;
        } catch (PDOException $e) {
            echo "Error connecting to database: " . $e->getMessage();
            exit;
        }
    }
}


<?php foreach ($reviews as $review): ?>
    <h2>Review by <?php echo $review->getUserId(); ?></h2>
    <p>Rating: <?php echo $review->getRating(); ?>/5</p>
    <p>Review: <?php echo $review->getReview(); ?></p>
<?php endforeach; ?>


$reviewController = new ReviewController();
$reviewData = [
    'product_id' => 1,
    'user_id' => 2,
    'rating' => 4,
    'review' => 'Great product!'
];
$reviewController->createReview($reviewData);

$reviews = $reviewController->getReviews();
foreach ($reviews as $review) {
    echo $review->getId() . ': ' . $review->getReview() . '<br>';
}


<?php

// Connect to database
$conn = mysqli_connect("localhost", "username", "password", "database_name");

if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Functions for CRUD operations
function create_review($user_id, $product_name, $rating, $review_text) {
    global $conn;
    $sql = "INSERT INTO reviews (user_id, product_name, rating, review_text) VALUES (?, ?, ?, ?)";
    $stmt = mysqli_prepare($conn, $sql);
    mysqli_stmt_bind_param($stmt, "iiss", $user_id, $product_name, $rating, $review_text);
    mysqli_stmt_execute($stmt);
}

function get_reviews() {
    global $conn;
    $sql = "SELECT * FROM reviews ORDER BY created_at DESC";
    $result = mysqli_query($conn, $sql);
    return mysqli_fetch_all($result, MYSQLI_ASSOC);
}

function get_review_by_id($id) {
    global $conn;
    $sql = "SELECT * FROM reviews WHERE id = ?";
    $stmt = mysqli_prepare($conn, $sql);
    mysqli_stmt_bind_param($stmt, "i", $id);
    mysqli_stmt_execute($stmt);
    return mysqli_fetch_assoc($stmt->get_result());
}

function update_review($id, $rating, $review_text) {
    global $conn;
    $sql = "UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?";
    $stmt = mysqli_prepare($conn, $sql);
    mysqli_stmt_bind_param($stmt, "iis", $rating, $review_text, $id);
    mysqli_stmt_execute($stmt);
}

function delete_review($id) {
    global $conn;
    $sql = "DELETE FROM reviews WHERE id = ?";
    $stmt = mysqli_prepare($conn, $sql);
    mysqli_stmt_bind_param($stmt, "i", $id);
    mysqli_stmt_execute($stmt);
}


// review.php

class Review {
  private $id;
  private $reviewer_id;
  private $product_id;
  private $rating;
  private $comment;

  public function __construct($id, $reviewer_id, $product_id, $rating, $comment) {
    $this->id = $id;
    $this->reviewer_id = $reviewer_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->comment = $comment;
  }

  public function getId() {
    return $this->id;
  }

  public function getReviewerId() {
    return $this->reviewer_id;
  }

  public function getProductId() {
    return $this->product_id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }
}


// review_controller.php

class ReviewController {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function getAllReviews() {
    // retrieve all reviews from database
    $reviews = array();
    $query = "SELECT * FROM reviews";
    $result = mysqli_query($this->db, $query);
    while ($row = mysqli_fetch_assoc($result)) {
      $review = new Review(
        $row['id'],
        $row['reviewer_id'],
        $row['product_id'],
        $row['rating'],
        $row['comment']
      );
      $reviews[] = $review;
    }
    return $reviews;
  }

  public function getReviewById($id) {
    // retrieve review by id from database
    $query = "SELECT * FROM reviews WHERE id = '$id'";
    $result = mysqli_query($this->db, $query);
    if ($row = mysqli_fetch_assoc($result)) {
      return new Review(
        $row['id'],
        $row['reviewer_id'],
        $row['product_id'],
        $row['rating'],
        $row['comment']
      );
    } else {
      return null;
    }
  }

  public function createReview($review) {
    // insert review into database
    $query = "INSERT INTO reviews (reviewer_id, product_id, rating, comment) VALUES ('$review->reviewer_id', '$review->product_id', '$review->rating', '$review->comment')";
    mysqli_query($this->db, $query);
  }

  public function updateReview($id, $review) {
    // update review in database
    $query = "UPDATE reviews SET reviewer_id = '$review->reviewer_id', product_id = '$review->product_id', rating = '$review->rating', comment = '$review->comment' WHERE id = '$id'";
    mysqli_query($this->db, $query);
  }

  public function deleteReview($id) {
    // delete review from database
    $query = "DELETE FROM reviews WHERE id = '$id'";
    mysqli_query($this->db, $query);
  }
}


// user_review.php

class UserReview {
  private $reviewController;

  public function __construct($reviewController) {
    $this->reviewController = $reviewController;
  }

  public function displayReviews() {
    // retrieve all reviews and display them to the user
    $reviews = $this->reviewController->getAllReviews();
    foreach ($reviews as $review) {
      echo "Reviewer ID: " . $review->getReviewerId() . "<br>";
      echo "Product ID: " . $review->getProductId() . "<br>";
      echo "Rating: " . $review->getRating() . "/5<br>";
      echo "Comment: " . $review->getComment() . "<br><hr>";
    }
  }

  public function createReview($review) {
    // retrieve the review controller and create a new review
    $this->reviewController->createReview($review);
  }

  public function updateReview($id, $newReview) {
    // retrieve the review by id and update it with the new review information
    $oldReview = $this->reviewController->getReviewById($id);
    if ($oldReview !== null) {
      $this->reviewController->updateReview($id, $newReview);
    }
  }

  public function deleteReview($id) {
    // retrieve the review by id and delete it
    $this->reviewController->deleteReview($id);
  }
}


// main.php

$db = new mysqli("localhost", "username", "password", "database");

$reviewController = new ReviewController($db);

$userReview = new UserReview($reviewController);

// Create a new review
$review = new Review(1, 2, 3, 4, "This product is amazing!");
$userReview->createReview($review);

// Display all reviews
$userReview->displayReviews();

// Update a review
$newReview = new Review(1, 2, 3, 5, "I changed my mind, this product is terrible!");
$userReview->updateReview(1, $newReview);

// Delete a review
$userReview->deleteReview(1);


function submit_review($product_id, $user_id, $review_text, $rating = 0) {
  // Validate user input
  if (!$product_id || !$user_id || !$review_text) {
    return array('error' => 'Missing required fields');
  }

  // Insert review into database
  $query = "INSERT INTO reviews (product_id, user_id, review_text, rating)
            VALUES (:product_id, :user_id, :review_text, :rating)";
  try {
    $stmt = Database::prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    $stmt->execute();

    // Return the new review's ID
    return array('id' => Database::lastInsertId());
  } catch (Exception $e) {
    // Handle database error
    return array('error' => 'Database error: ' . $e->getMessage());
  }
}

function approve_review($review_id, $approved = 'yes') {
  // Validate user input
  if (!$review_id) {
    return array('error' => 'Missing required fields');
  }

  // Update review in database
  $query = "UPDATE reviews SET approved = :approved WHERE id = :review_id";
  try {
    $stmt = Database::prepare($query);
    $stmt->bindParam(':approved', $approved);
    $stmt->bindParam(':review_id', $review_id);
    $stmt->execute();

    // Return success message
    return array('message' => 'Review approved');
  } catch (Exception $e) {
    // Handle database error
    return array('error' => 'Database error: ' . $e->getMessage());
  }
}


$product_id = 1;
$user_id = 2;
$review_text = "This product is amazing!";
$rating = 5;

$result = submit_review($product_id, $user_id, $review_text, $rating);
if ($result['error']) {
  echo 'Error: ' . $result['error'];
} else {
  echo 'Review submitted successfully! ID: ' . $result['id'];
}


$review_id = 1;
$result = approve_review($review_id);
if ($result['error']) {
  echo 'Error: ' . $result['error'];
} else {
  echo 'Review approved successfully!';
}


<?php

class ReviewSystem {
  private $db;

  function __construct() {
    // Connect to database
    $this->db = new PDO('mysql:host=localhost;dbname=database', 'username', 'password');
    $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  }

  /**
   * Create a new review
   *
   * @param int $user_id ID of the user who made the review
   * @param int $product_id ID of the product being reviewed
   * @param int $rating Rating given to the product (1-5)
   * @param string $review Text review
   */
  function createReview($user_id, $product_id, $rating, $review) {
    // Insert new review into database
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    $stmt->execute();
  }

  /**
   * Get all reviews for a product
   *
   * @param int $product_id ID of the product being reviewed
   */
  function getReviews($product_id) {
    // Retrieve reviews from database
    $stmt = $this->db->prepare("SELECT r.id, u.username, p.name, r.rating, r.review FROM reviews r INNER JOIN users u ON r.user_id = u.id INNER JOIN products p ON r.product_id = p.id WHERE r.product_id = :product_id");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Update an existing review
   *
   * @param int $review_id ID of the review being updated
   * @param int $rating New rating for the product (1-5)
   * @param string $review New text review
   */
  function updateReview($review_id, $rating, $review) {
    // Update existing review in database
    $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :review_id");
    $stmt->bindParam(':review_id', $review_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    $stmt->execute();
  }

  /**
   * Delete a review
   *
   * @param int $review_id ID of the review being deleted
   */
  function deleteReview($review_id) {
    // Delete review from database
    $this->db->prepare("DELETE FROM reviews WHERE id = :review_id")->bindParam(':review_id', $review_id)->execute();
  }
}

?>


$reviewSystem = new ReviewSystem();

// Create a new review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = 'This product is amazing!';
$reviewSystem->createReview($user_id, $product_id, $rating, $review);

// Get all reviews for a product
$product_id = 1;
$reviews = $reviewSystem->getReviews($product_id);
print_r($reviews);

// Update an existing review
$review_id = 1;
$rating = 4;
$review = 'This product is still great!';
$reviewSystem->updateReview($review_id, $rating, $review);

// Delete a review
$review_id = 2;
$reviewSystem->deleteReview($review_id);


function add_review($product_id, $username, $rating, $comment) {
  // Check if product exists
  $product = get_product_by_id($product_id);
  if (!$product) {
    throw new Exception("Product not found");
  }

  // Create a new review object
  $review = array(
    'product_id' => $product_id,
    'username' => $username,
    'rating' => $rating,
    'comment' => $comment
  );

  // Save the review to the database
  insert_review($review);

  return $review;
}

function get_reviews_by_product($product_id) {
  // Retrieve reviews from the database for a specific product
  $reviews = retrieve_reviews_by_product($product_id);
  return $reviews;
}


// Insert review into database
function insert_review($review) {
  global $db;
  $query = "INSERT INTO reviews (product_id, username, rating, comment)
            VALUES (:product_id, :username, :rating, :comment)";
  $stmt = $db->prepare($query);
  $stmt->execute(array(
    ':product_id' => $review['product_id'],
    ':username' => $review['username'],
    ':rating' => $review['rating'],
    ':comment' => $review['comment']
  ));
}

// Retrieve reviews from database for a specific product
function retrieve_reviews_by_product($product_id) {
  global $db;
  $query = "SELECT * FROM reviews WHERE product_id = :product_id";
  $stmt = $db->prepare($query);
  $stmt->execute(array(':product_id' => $product_id));
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}


// Create a new review for a product
$review = add_review(123, 'JohnDoe', 5, 'Great product!');

// Retrieve all reviews for a specific product
$reviews = get_reviews_by_product(123);

// Display the reviews on a web page
foreach ($reviews as $review) {
  echo "Username: $review['username']";
  echo "Rating: $review['rating']";
  echo "Comment: $review['comment']";
}


// reviews.php

class Review {
    private $id;
    private $rating;
    private $title;
    private $content;
    private $product_id;

    public function __construct($data) {
        $this->id = $data['id'];
        $this->rating = $data['rating'];
        $this->title = $data['title'];
        $this->content = $data['content'];
        $this->product_id = $data['product_id'];
    }

    public function getId() {
        return $this->id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getContent() {
        return $this->content;
    }

    public function getProduct_id() {
        return $this->product_id;
    }
}


// reviews.controller.php

class ReviewController {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function create_review($data) {
        // Insert review into database
        $query = "INSERT INTO reviews (rating, title, content, product_id) VALUES (?, ?, ?, ?)";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$data['rating'], $data['title'], $data['content'], $data['product_id']]);

        return true;
    }

    public function get_reviews_by_product($product_id) {
        // Retrieve reviews for a specific product
        $query = "SELECT * FROM reviews WHERE product_id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$product_id]);
        $reviews = array();
        while ($row = $stmt->fetch()) {
            $review = new Review($row);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public function get_review_by_id($id) {
        // Retrieve a single review by ID
        $query = "SELECT * FROM reviews WHERE id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$id]);
        $review = $stmt->fetch();
        return new Review($review);
    }

    public function update_review($data) {
        // Update a review in the database
        $query = "UPDATE reviews SET rating = ?, title = ?, content = ? WHERE id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$data['rating'], $data['title'], $data['content'], $data['id']]);
    }

    public function delete_review($id) {
        // Delete a review from the database
        $query = "DELETE FROM reviews WHERE id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$id]);
    }
}


// Example usage in an index.php file

$db = new Database(); // assuming a Database class is created elsewhere
$review_controller = new ReviewController($db);

// Create a new review
$data = array(
    'rating' => 5,
    'title' => 'Great product!',
    'content' => 'I love this product!',
    'product_id' => 1
);
$review_controller->create_review($data);

// Get reviews for a specific product
$product_id = 1;
$reviews = $review_controller->get_reviews_by_product($product_id);
foreach ($reviews as $review) {
    echo "Title: " . $review->getTitle() . "
";
    echo "Rating: " . $review->getRating() . "

";
}

// Get a single review by ID
$id = 1;
$review = $review_controller->get_review_by_id($id);
echo "Title: " . $review->getTitle() . "
";
echo "Rating: " . $review->getRating() . "
";

// Update a review
$data['rating'] = 4;
$review_controller->update_review($data);

// Delete a review
$id = 1;
$review_controller->delete_review($id);


<?php

// Database connection details
$host = 'localhost';
$dbname = 'reviews_database';
$username = 'your_username';
$password = 'your_password';

// Function to connect to database
function dbConnect() {
    global $host, $dbname, $username, $password;
    
    try {
        // Attempt to connect
        $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
        
        return $conn;
    } catch (PDOException $e) {
        echo "Connection failed: " . $e->getMessage();
        exit();
    }
}

// Function to create table if it doesn't exist
function createTable() {
    global $host, $dbname, $username, $password;
    
    $conn = dbConnect();
    
    try {
        // SQL command to create the reviews table
        $sql = "
            CREATE TABLE IF NOT EXISTS reviews (
                id INT PRIMARY KEY AUTO_INCREMENT,
                review_text TEXT,
                rating INT,
                user_name VARCHAR(255),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        ";
        
        $conn->exec($sql);
    } catch (PDOException $e) {
        echo "Table creation failed: " . $e->getMessage();
        exit();
    }
}

// Function to insert a review into the database
function addReview() {
    global $host, $dbname, $username, $password;
    
    $conn = dbConnect();
    
    try {
        // SQL command to insert a new review
        $sql = "
            INSERT INTO reviews (review_text, rating, user_name)
            VALUES (:review_text, :rating, :user_name);
        ";
        
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(':review_text', $_POST['review']);
        $stmt->bindParam(':rating', $_POST['rating']);
        $stmt->bindParam(':user_name', $_POST['username']);
        
        if ($stmt->execute()) {
            echo "Review submitted successfully!";
        } else {
            echo "Error submitting review: " . $stmt->errorInfo()[2];
        }
    } catch (PDOException $e) {
        echo "Insert failed: " . $e->getMessage();
    }
}

// Function to display all reviews
function displayReviews() {
    global $host, $dbname, $username, $password;
    
    $conn = dbConnect();
    
    try {
        // SQL command to retrieve all reviews
        $sql = "
            SELECT id, review_text, rating, user_name, created_at
            FROM reviews
            ORDER BY created_at DESC;
        ";
        
        $stmt = $conn->query($sql);
        
        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        foreach ($reviews as $review) {
            echo "Review ID: " . $review['id'] . "<br>";
            echo "Review Text: " . $review['review_text'] . "<br>";
            echo "Rating: " . $review['rating'] . "<br>";
            echo "User Name: " . $review['user_name'] . "<br>";
            echo "Created At: " . date('Y-m-d H:i:s', strtotime($review['created_at'])) . "<br><hr>";
        }
    } catch (PDOException $e) {
        echo "Error retrieving reviews: " . $e->getMessage();
    }
}

// Connect to the database and create the table if it doesn't exist
createTable();

?>


// Review class
class Review {
  private $id;
  private $user_id;
  private $product_id;
  private $rating;
  private $review_text;

  public function __construct($id, $user_id, $product_id, $rating, $review_text) {
    $this->id = $id;
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->review_text = $review_text;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getReviewText() {
    return $this->review_text;
  }
}

// Review Manager class
class ReviewManager {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Get all reviews for a product
  public function getReviewsForProduct($productId) {
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $params = array(':product_id' => $productId);
    $reviews = array();
    foreach ($this->db->fetchAll($query, $params) as $row) {
      $review = new Review($row['id'], $row['user_id'], $row['product_id'], $row['rating'], $row['review_text']);
      $reviews[] = $review;
    }
    return $reviews;
  }

  // Add a review for a product
  public function addReview($productId, $userId, $rating, $reviewText) {
    $query = "INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES (:product_id, :user_id, :rating, :review_text)";
    $params = array(':product_id' => $productId, ':user_id' => $userId, ':rating' => $rating, ':review_text' => $reviewText);
    return $this->db->execute($query, $params);
  }
}


// Create a Review Manager instance with a database connection
$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
$reviewManager = new ReviewManager($db);

// Get all reviews for a product
$product_id = 1;
$reviews = $reviewManager->getReviewsForProduct($product_id);
foreach ($reviews as $review) {
  echo "Rating: {$review->getRating()}, Review Text: {$review->getReviewText()}
";
}

// Add a review for a product
$user_id = 1;
$product_id = 1;
$rating = 5;
$review_text = 'Great product!';
$success = $reviewManager->addReview($product_id, $user_id, $rating, $review_text);
if ($success) {
  echo "Review added successfully!
";
} else {
  echo "Failed to add review.
";
}


CREATE TABLE users (
  id INT PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL
);

CREATE TABLE products (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL,
  description TEXT
);

CREATE TABLE reviews (
  id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT NOT NULL,
  product_id INT NOT NULL,
  rating TINYINT NOT NULL,
  review_text TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (product_id) REFERENCES products(id)
);


<?php

function add_review($user_id, $product_id, $rating, $review_text = '') {
  global $db;

  // Validate user and product IDs
  if (!is_numeric($user_id) || !is_numeric($product_id)) {
    return array('error' => 'Invalid user or product ID');
  }

  // Check if review already exists for this user-product pair
  $existing_review = get_review_by_user_product($db, $user_id, $product_id);
  if ($existing_review) {
    return array('error' => 'Review already exists');
  }

  // Add new review to database
  $query = "INSERT INTO reviews (user_id, product_id, rating, review_text)
            VALUES (:user_id, :product_id, :rating, :review_text)";
  $stmt = $db->prepare($query);
  $stmt->execute(array(
    ':user_id' => $user_id,
    ':product_id' => $product_id,
    ':rating' => $rating,
    ':review_text' => $review_text
  ));

  // Return review ID for further use
  return array('success' => true, 'review_id' => $db->lastInsertId());
}

function get_review_by_user_product($db, $user_id, $product_id) {
  $query = "SELECT * FROM reviews WHERE user_id = :user_id AND product_id = :product_id";
  $stmt = $db->prepare($query);
  $stmt->execute(array(':user_id' => $user_id, ':product_id' => $product_id));
  return $stmt->fetch();
}

function get_reviews_by_product($db, $product_id) {
  $query = "SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC";
  $stmt = $db->prepare($query);
  $stmt->execute(array(':product_id' => $product_id));
  return $stmt->fetchAll();
}

function get_reviews_by_user($db, $user_id) {
  $query = "SELECT * FROM reviews WHERE user_id = :user_id ORDER BY created_at DESC";
  $stmt = $db->prepare($query);
  $stmt->execute(array(':user_id' => $user_id));
  return $stmt->fetchAll();
}

function update_review_rating($review_id, $new_rating) {
  global $db;

  // Validate review ID and new rating
  if (!is_numeric($review_id) || !is_numeric($new_rating)) {
    return array('error' => 'Invalid review ID or new rating');
  }

  // Update review in database
  $query = "UPDATE reviews SET rating = :rating WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->execute(array(':rating' => $new_rating, ':id' => $review_id));

  return array('success' => true);
}

function delete_review($review_id) {
  global $db;

  // Validate review ID
  if (!is_numeric($review_id)) {
    return array('error' => 'Invalid review ID');
  }

  // Delete review from database
  $query = "DELETE FROM reviews WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->execute(array(':id' => $review_id));

  return array('success' => true);
}

?>


<?php

// Display reviews for a specific product

$query = "SELECT r.* FROM reviews r WHERE product_id = $product_id";
$result = mysqli_query($db, $query);

?>
<div>
    <h2>Reviews</h2>
    <?php while ($review = mysqli_fetch_assoc($result)) { ?>
        <div class="review">
            <p><?= $review['title'] ?></p>
            <p><?= $review['content'] ?></p>
            <p>Ratings: <?= $review['rating'] ?>/5</p>
            <p>Submitted by <?= $review['username'] ?> on <?= $review['created_at'] ?></p>
        </div>
    <?php } ?>
</div>

<a href="submit-review.php">Submit a Review!</a>


<?php

// Allow users to submit reviews for a specific product

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $title = $_POST['title'];
    $content = $_POST['content'];
    $rating = $_POST['rating'];
    $product_id = $_POST['product_id'];

    // Validate form data
    if (empty($title) || empty($content) || empty($rating)) {
        echo 'Please fill in all fields!';
    } else {
        $query = "INSERT INTO reviews (title, content, rating, user_id, product_id)
                  VALUES ('$title', '$content', '$rating', '".$_SESSION['user']['id']."', '$product_id')";
        mysqli_query($db, $query);

        header("Location: index.php");
    }
}

?>
<h2>Submit a Review</h2>
<form action="<?= $_SERVER["PHP_SELF"] ?>" method="post">
    <input type="hidden" name="product_id" value="<?= $product_id ?>">
    <label for="title">Title:</label>
    <input type="text" id="title" name="title"><br><br>
    <label for="content">Content:</label>
    <textarea id="content" name="content"></textarea><br><br>
    <label for="rating">Rating (1-5):</label>
    <select id="rating" name="rating">
        <?php for ($i = 1; $i <= 5; $i++) { ?>
            <option value="<?= $i ?>"><?= $i ?>/5</option>
        <?php } ?>
    </select><br><br>
    <input type="submit" value="Submit Review">
</form>


<?php

class ReviewModel {
    private $db;

    function __construct($db) {
        $this->db = $db;
    }

    public function create_review($title, $content, $rating, $user_id, $product_id) {
        $query = "INSERT INTO reviews (title, content, rating, user_id, product_id)
                  VALUES ('$title', '$content', '$rating', '$user_id', '$product_id')";
        mysqli_query($this->db, $query);
    }

    public function get_reviews_for_product($product_id) {
        $query = "SELECT * FROM reviews WHERE product_id = $product_id";
        return mysqli_query($this->db, $query);
    }
}

?>


<?php

function getReviews($productId) {
    global $db;
    if ($product_id === null) return array();

    $stmt = $db->prepare("SELECT r.id, u.username, r.rating, r.text 
                         FROM reviews r INNER JOIN users u ON r.reviewer_id = u.id
                         WHERE r.product_id = :id ORDER BY r.id DESC");
    $stmt->bindParam(':id', $productId);
    $stmt->execute();
    
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function saveReview($review) {
    global $db;

    if (!isset($review['product_id']) || !isset($review['rating'])
        || !isset($review['text']) || !isset($review['username'])) {
        
        throw new Exception("Invalid review data");
    }

    try {
        $stmt = $db->prepare("INSERT INTO reviews (product_id, reviewer_id, rating, text)
                              VALUES (:product_id, :reviewer_id, :rating, :text)");
        
        $stmt->bindParam(':product_id', $review['product_id']);
        $stmt->bindParam(':reviewer_id', $review['username']);
        $stmt->bindParam(':rating', $review['rating']);
        $stmt->bindParam(':text', $review['text']);

        $stmt->execute();
    } catch (PDOException $e) {
        echo "Error saving review: " . $e->getMessage() . "
";
    }
}

// Example usage:
$product_id = 1; // Replace with the ID of the product you want to retrieve reviews for
$reviews = getReviews($product_id);

foreach ($reviews as $review) {
    echo $review['username'] . ": " . $review['text'] . ", Rating: " . $review['rating'];
}

// Example usage:
$review_data = array(
    'product_id' => 1, // Replace with the ID of the product you want to review
    'rating' => 4,
    'text' => 'Great product!',
    'username' => 12345 // Replace with the username of the reviewer
);

saveReview($review_data);
?>


$db = new PDO("mysql:host=$host;dbname=$database", $username, $password);


// Connect to database (replace with your own connection code)
$mysqli = new mysqli("localhost", "username", "password", "database");

function submitReview($user_id, $product_id, $rating, $comment) {
    // Validate input data
    if (!is_numeric($rating) || !ctype_digit($rating)) {
        throw new Exception("Invalid rating");
    }
    
    if (strlen($comment) < 1 || strlen($comment) > 1000) {
        throw new Exception("Comment must be between 1 and 1000 characters long");
    }

    // Prepare SQL query
    $query = "INSERT INTO reviews (user_id, product_id, rating, comment)
              VALUES (?, ?, ?, ?)";
    
    // Bind parameters to prevent SQL injection attacks
    if (!$stmt = $mysqli->prepare($query)) {
        throw new Exception("Failed to prepare statement");
    }
    
    // Execute query with bound parameters
    $stmt->bind_param("iiii", $user_id, $product_id, $rating, $comment);
    if (!$stmt->execute()) {
        throw new Exception("Failed to execute query");
    }

    // Return the ID of the newly inserted review
    return $mysqli->insert_id;
}

function getReviews($product_id) {
    // Prepare SQL query to retrieve reviews for a specific product
    $query = "SELECT * FROM reviews WHERE product_id = ?";

    // Bind parameter to prevent SQL injection attacks
    if (!$stmt = $mysqli->prepare($query)) {
        throw new Exception("Failed to prepare statement");
    }

    // Execute query with bound parameter
    $stmt->bind_param("i", $product_id);
    if (!$stmt->execute()) {
        throw new Exception("Failed to execute query");
    }

    // Fetch and return all reviews for the product
    $reviews = array();
    while ($row = $stmt->get_result()->fetch_assoc()) {
        $reviews[] = $row;
    }
    
    return $reviews;
}

// Example usage:
$user_id = 1; // Replace with actual user ID
$product_id = 1; // Replace with actual product ID

try {
    $review_id = submitReview($user_id, $product_id, 4.5, "Great product!");
    echo "Review submitted successfully! Review ID: $review_id
";

    $reviews = getReviews($product_id);
    foreach ($reviews as $review) {
        echo "User ID: {$review['user_id']}
";
        echo "Rating: {$review['rating']} out of 5
";
        echo "Comment: {$review['comment']}
";
        echo "
";
    }
} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . "
";
}


class UserReview {
  private $id;
  private $userId;
  private $productId;
  private $rating;
  private $review;

  public function __construct($id, $userId, $productId, $rating, $review) {
    $this->id = $id;
    $this->userId = $userId;
    $this->productId = $productId;
    $this->rating = $rating;
    $this->review = $review;
  }

  public function getId() {
    return $this->id;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getProductId() {
    return $this->productId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getReview() {
    return $this->review;
  }
}


function addReview($userId, $productId, $rating, $review) {
  // Create a new user review object
  $newReview = new UserReview(null, $userId, $productId, $rating, $review);

  // Save the new review to the database (e.g. using PDO or MySQLi)
  // For demonstration purposes, we'll assume it's already saved

  return $newReview;
}

function getReviewsForProduct($productId) {
  // Retrieve reviews for a specific product from the database
  // For demonstration purposes, we'll assume it's an array of UserReview objects
  $reviews = array(
    new UserReview(1, 1, $productId, 5, "Great product!"),
    new UserReview(2, 2, $productId, 4, "Good, but not great."),
    new UserReview(3, 3, $productId, 3, "Okay.")
  );

  return $reviews;
}

function getReviewsForUser($userId) {
  // Retrieve reviews for a specific user from the database
  // For demonstration purposes, we'll assume it's an array of UserReview objects
  $reviews = array(
    new UserReview(1, $userId, 1, 5, "Great product!"),
    new UserReview(2, $userId, 2, 4, "Good, but not great."),
    new UserReview(3, $userId, 3, 3, "Okay.")
  );

  return $reviews;
}


// Create a new review for user with ID 1 on product with ID 1
$newReview = addReview(1, 1, 5, "Great product!");

// Get all reviews for product with ID 1
$reviewsForProduct = getReviewsForProduct(1);

// Get all reviews for user with ID 1
$reviewsForUser = getReviewsForUser(1);


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
function connectToDatabase() {
  $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Disconnect from database
function disconnectFromDatabase($conn) {
  $conn->close();
}

// Get all reviews for a product
function getReviewsForProduct($product_id, $conn) {
  $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
  $result = $conn->query($query);
  return $result->fetch_all(MYSQLI_ASSOC);
}

// Create a new review
function createReview($user_id, $product_id, $rating, $review, $conn) {
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES ('$user_id', '$product_id', '$rating', '$review')";
  if ($conn->query($query)) {
    return true;
  } else {
    return false;
  }
}

// Update an existing review
function updateReview($id, $user_id, $product_id, $rating, $review, $conn) {
  $query = "UPDATE reviews SET user_id = '$user_id', product_id = '$product_id', rating = '$rating', review = '$review' WHERE id = '$id'";
  if ($conn->query($query)) {
    return true;
  } else {
    return false;
  }
}

// Delete a review
function deleteReview($id, $conn) {
  $query = "DELETE FROM reviews WHERE id = '$id'";
  if ($conn->query($query)) {
    return true;
  } else {
    return false;
  }
}

// Example usage
$conn = connectToDatabase();
$product_id = 1;

// Get all reviews for the product
$reviews = getReviewsForProduct($product_id, $conn);
print_r($reviews);

// Create a new review
$user_id = 1;
$rating = 5;
$review = 'Great product!';
createReview($user_id, $product_id, $rating, $review, $conn);

// Update an existing review
$id = 1;
$update_rating = 4;
$update_review = 'Good product!';
updateReview($id, $user_id, $product_id, $update_rating, $update_review, $conn);

// Delete a review
deleteReview($id, $conn);
disconnectFromDatabase($conn);

?>


class Review {
    private $id;
    private $userId;
    private $productId;
    private $rating;
    private $reviewText;

    public function __construct($id = null, $userId = null, $productId = null, $rating = null, $reviewText = null) {
        $this->id = $id;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->reviewText = $reviewText;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReviewText() {
        return $this->reviewText;
    }
}


class User {
    private $id;
    private $username;

    public function __construct($id = null, $username = null) {
        $this->id = $id;
        $this->username = $username;
    }

    public function getId() {
        return $this->id;
    }

    public function getUsername() {
        return $this->username;
    }
}


class Product {
    private $id;
    private $name;

    public function __construct($id = null, $name = null) {
        $this->id = $id;
        $this->name = $name;
    }

    public function getId() {
        return $this->id;
    }

    public function getName() {
        return $this->name;
    }
}


class ReviewModel {
    private $reviews;

    public function __construct() {
        $this->reviews = array();
    }

    public function addReview(Review $review) {
        $this->reviews[$review->getId()] = $review;
    }

    public function getReviewsByUserId($userId) {
        $reviews = array_filter($this->reviews, function ($review) use ($userId) {
            return $review->getUserId() == $userId;
        });
        return $reviews;
    }
}


class ReviewService {
    private $reviewModel;

    public function __construct(ReviewModel $reviewModel) {
        $this->reviewModel = $reviewModel;
    }

    public function addReview(Review $review) {
        $this->reviewModel->addReview($review);
    }

    public function getReviewsByUserId($userId) {
        return $this->reviewModel->getReviewsByUserId($userId);
    }
}


class ReviewController {
    private $reviewService;

    public function __construct(ReviewService $reviewService) {
        $this->reviewService = $reviewService;
    }

    public function addReview(Request $request) {
        // Validate request data
        if (!$request->hasValidData()) {
            return Response::create('Invalid request', 400);
        }

        $review = new Review();
        $review->setRating($request->get('rating'));
        $review->setReviewText($request->get('review_text'));
        $review->setUserId($request->getUser()->getId());
        $review->setProductId($request->getProduct()->getId());

        $this->reviewService->addReview($review);
        return Response::create('Review added successfully', 201);
    }

    public function getReviewsByUserId(Request $request) {
        // Validate request data
        if (!$request->hasValidData()) {
            return Response::create('Invalid request', 400);
        }

        $reviews = $this->reviewService->getReviewsByUserId($request->getUser()->getId());
        return Response::create($reviews, 200);
    }
}


$reviewModel = new ReviewModel();
$reviewService = new ReviewService($reviewModel);
$reviewController = new ReviewController($reviewService);

// Add a review
$request = new Request();
$request->setUser(new User(1, 'john_doe'));
$request->setProduct(new Product(1, 'Apple iPhone 13'));
$request->setRating(5);
$request->setReviewText('This phone is amazing!');
$response = $reviewController->addReview($request);

// Get reviews by user
$request = new Request();
$request->setUser(new User(1, 'john_doe'));
$response = $reviewController->getReviewsByUserId($request);


<?php

// Configuration
require_once 'config.php';

// Database connection
$conn = new PDO("mysql:host=$servername;dbname=$database", $username, $password);

function createUser($username, $password) {
  global $conn;
  
  // Hash password
  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
  
  try {
    // Insert user into database
    $stmt = $conn->prepare("INSERT INTO Users (username, password_hash) VALUES (:username, :password)");
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':password', $hashedPassword);
    $stmt->execute();
    
    return true;
  } catch(PDOException $e) {
    echo "Error: " . $e->getMessage() . "
";
    return false;
  }
}

function loginUser($username, $password) {
  global $conn;
  
  try {
    // Retrieve user from database
    $stmt = $conn->prepare("SELECT * FROM Users WHERE username = :username");
    $stmt->bindParam(':username', $username);
    $stmt->execute();
    
    $user = $stmt->fetch();
    
    if($user && password_verify($password, $user['password_hash'])) {
      return $user;
    } else {
      return false;
    }
  } catch(PDOException $e) {
    echo "Error: " . $e->getMessage() . "
";
    return false;
  }
}

function submitReview($product_name, $review_text, $rating) {
  global $conn;
  
  try {
    // Insert review into database
    $stmt = $conn->prepare("INSERT INTO Reviews (user_id, product_name, review_text, rating) VALUES (:user_id, :product_name, :review_text, :rating)");
    
    // Get user ID from logged in user
    $loggedInUser = $_SESSION['user'];
    $stmt->bindParam(':user_id', $loggedInUser['id']);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    
    $stmt->execute();
    
    return true;
  } catch(PDOException $e) {
    echo "Error: " . $e->getMessage() . "
";
    return false;
  }
}

function viewReviews() {
  global $conn;
  
  try {
    // Retrieve reviews from database
    $stmt = $conn->prepare("SELECT * FROM Reviews ORDER BY id DESC");
    $stmt->execute();
    
    return $stmt->fetchAll();
  } catch(PDOException $e) {
    echo "Error: " . $e->getMessage() . "
";
    return array();
  }
}

// Session handling
session_start();

if(isset($_POST['createUser'])) {
  createUser($_POST['username'], $_POST['password']);
} elseif(isset($_POST['loginUser'])) {
  $user = loginUser($_POST['username'], $_POST['password']);
  
  if($user) {
    $_SESSION['user'] = $user;
  }
}

if(isset($_POST['submitReview'])) {
  submitReview($_POST['product_name'], $_POST['review_text'], $_POST['rating']);
}

$reviews = viewReviews();

?>


// Review.php

class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Get all reviews for a specific product
  public function getReviewsForProduct(int $productId): array {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Get a single review by ID
  public function getReview(int $reviewId): array {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $reviewId);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  // Add a new review
  public function addReview(int $userId, int $productId, int $rating, string $review): bool {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
  }

  // Update an existing review
  public function updateReview(int $reviewId, int $newRating, string $newReview): bool {
    $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
    $stmt->bindParam(':rating', $newRating);
    $stmt->bindParam(':review', $newReview);
    $stmt->bindParam(':id', $reviewId);
    return $stmt->execute();
  }

  // Delete a review
  public function deleteReview(int $reviewId): bool {
    $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $reviewId);
    return $stmt->execute();
  }
}


// Connect to the database
$db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');

// Create a Review instance
$review = new Review($db);

// Get all reviews for product ID 1
$reviews = $review->getReviewsForProduct(1);
print_r($reviews);

// Add a new review
$newReview = array(
  'user_id' => 1,
  'product_id' => 1,
  'rating' => 5,
  'review' => 'Great product!'
);
$success = $review->addReview(...array_values($newReview));
if ($success) {
  echo "New review added successfully!";
} else {
  echo "Error adding new review.";
}


// Connect to the database
$mysqli = new mysqli("localhost", "username", "password", "database");

function get_product_reviews($product_id) {
  global $mysqli;
  
  // Get reviews for this product
  $query = "SELECT r.id, r.rating, r.review_text FROM reviews r JOIN products p ON r.product_id = p.id WHERE p.id = '$product_id'";
  $result = $mysqli->query($query);
  
  // Initialize variables to store the average rating and number of reviews
  $total_rating = 0;
  $num_reviews = 0;
  
  while ($review = $result->fetch_assoc()) {
    $total_rating += $review['rating'];
    $num_reviews++;
  }
  
  if ($num_reviews > 0) {
    // Calculate the average rating
    $average_rating = round($total_rating / $num_reviews, 2);
  } else {
    $average_rating = 0;
  }
  
  return array(
    'reviews' => $result->fetch_all(),
    'average_rating' => $average_rating,
    'num_reviews' => $num_reviews
  );
}

function submit_review($product_id, $rating, $review_text) {
  global $mysqli;
  
  // Insert the review into the database
  $query = "INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES ('$product_id', '$user_id', '$rating', '$review_text')";
  $mysqli->query($query);
}

// Example usage:
$product_id = 1;
$reviews = get_product_reviews($product_id);
echo "Product ID: $product_id
";
echo "Reviews:
";
print_r($reviews['reviews']);
echo "Average Rating: " . $reviews['average_rating'] . "
";
echo "Number of Reviews: " . $reviews['num_reviews'] . "
";

// Submit a review
$rating = 5;
$review_text = "This product is amazing!";
submit_review(1, $rating, $review_text);


// Function to create a new review
function create_review($product_id, $user_id, $review_text, $rating) {
  global $db; // Database connection object
  
  try {
    $stmt = $db->prepare("INSERT INTO user_reviews (product_id, user_id, review_text, rating) VALUES (?, ?, ?, ?)");
    $stmt->execute([$product_id, $user_id, $review_text, $rating]);
    
    return true;
  } catch (Exception $e) {
    echo "Error creating review: " . $e->getMessage();
    return false;
  }
}

// Function to retrieve a list of reviews for a product
function get_reviews($product_id) {
  global $db; // Database connection object
  
  try {
    $stmt = $db->prepare("SELECT * FROM user_reviews WHERE product_id = ?");
    $stmt->execute([$product_id]);
    
    return $stmt->fetchAll();
  } catch (Exception $e) {
    echo "Error retrieving reviews: " . $e->getMessage();
    return array();
  }
}

// Function to update an existing review
function update_review($review_id, $new_rating, $new_review_text) {
  global $db; // Database connection object
  
  try {
    $stmt = $db->prepare("UPDATE user_reviews SET rating = ?, review_text = ? WHERE id = ?");
    $stmt->execute([$new_rating, $new_review_text, $review_id]);
    
    return true;
  } catch (Exception $e) {
    echo "Error updating review: " . $e->getMessage();
    return false;
  }
}

// Function to delete a review
function delete_review($review_id) {
  global $db; // Database connection object
  
  try {
    $stmt = $db->prepare("DELETE FROM user_reviews WHERE id = ?");
    $stmt->execute([$review_id]);
    
    return true;
  } catch (Exception $e) {
    echo "Error deleting review: " . $e->getMessage();
    return false;
  }
}


// Create a new database connection
$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myusername', 'mypassword');

// Create a new review
create_review(1, 2, "Great product!", 5);

// Retrieve reviews for product ID 1
$reviews = get_reviews(1);
print_r($reviews); // Output: Array of review objects

// Update an existing review
update_review(1, 4, "Not so great after all.");

// Delete a review
delete_review(2);


class Review {
    public $id;
    public $rating;
    public $comment;
    public $product_id;
    public $created_at;

    public function __construct($data) {
        $this->id = $data['id'];
        $this->rating = $data['rating'];
        $this->comment = $data['comment'];
        $this->product_id = $data['product_id'];
        $this->created_at = date('Y-m-d H:i:s');
    }
}


class ReviewRepository {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview(Review $review) {
        try {
            $query = "INSERT INTO reviews (rating, comment, product_id) VALUES (:rating, :comment, :product_id)";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':rating', $review->rating);
            $stmt->bindParam(':comment', $review->comment);
            $stmt->bindParam(':product_id', $review->product_id);
            return $stmt->execute();
        } catch (PDOException $e) {
            throw new Exception('Error creating review: ' . $e->getMessage());
        }
    }

    public function getReviews($productId, $limit = 10, $offset = 0) {
        try {
            $query = "SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC LIMIT :limit OFFSET :offset";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':limit', $limit);
            $stmt->bindParam(':offset', $offset);
            return $stmt->execute() ? $stmt->fetchAll(PDO::FETCH_CLASS, 'Review') : array();
        } catch (PDOException $e) {
            throw new Exception('Error fetching reviews: ' . $e->getMessage());
        }
    }

    public function getReview($id) {
        try {
            $query = "SELECT * FROM reviews WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', $id);
            return $stmt->execute() ? $stmt->fetchObject('Review') : null;
        } catch (PDOException $e) {
            throw new Exception('Error fetching review: ' . $e->getMessage());
        }
    }

    public function updateReview(Review $review) {
        try {
            $query = "UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':rating', $review->rating);
            $stmt->bindParam(':comment', $review->comment);
            $stmt->bindParam(':id', $review->id);
            return $stmt->execute();
        } catch (PDOException $e) {
            throw new Exception('Error updating review: ' . $e->getMessage());
        }
    }

    public function deleteReview($id) {
        try {
            $query = "DELETE FROM reviews WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', $id);
            return $stmt->execute();
        } catch (PDOException $e) {
            throw new Exception('Error deleting review: ' . $e->getMessage());
        }
    }
}


class ReviewService {
    private $reviewRepository;

    public function __construct(ReviewRepository $reviewRepository) {
        $this->reviewRepository = $reviewRepository;
    }

    public function createReview($rating, $comment, $productId) {
        $review = new Review(array('rating' => $rating, 'comment' => $comment, 'product_id' => $productId));
        return $this->reviewRepository->createReview($review);
    }

    public function getReviews($productId, $limit = 10, $offset = 0) {
        return $this->reviewRepository->getReviews($productId, $limit, $offset);
    }

    public function getReview($id) {
        return $this->reviewRepository->getReview($id);
    }

    public function updateReview($id, $rating, $comment) {
        $review = new Review(array('rating' => $rating, 'comment' => $comment, 'id' => $id));
        return $this->reviewRepository->updateReview($review);
    }

    public function deleteReview($id) {
        return $this->reviewRepository->deleteReview($id);
    }
}


$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
$reviewRepository = new ReviewRepository($db);
$reviewService = new ReviewService($reviewRepository);

// Create a new review
$rating = 5;
$comment = 'Great product!';
$product_id = 1;
$reviewService->createReview($rating, $comment, $product_id);

// Get all reviews for a product
$productId = 1;
$limit = 10;
$offset = 0;
$reviews = $reviewService->getReviews($productId, $limit, $offset);
foreach ($reviews as $review) {
    echo $review->id . ': ' . $review->rating . '/' . $review->comment . PHP_EOL;
}

// Get a single review
$id = 1;
$review = $reviewService->getReview($id);
echo $review->id . ': ' . $review->rating . '/' . $review->comment . PHP_EOL;

// Update a review
$rating = 4;
$comment = 'Good product!';
$id = 1;
$reviewService->updateReview($id, $rating, $comment);

// Delete a review
$id = 1;
$reviewService->deleteReview($id);


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
  }

  // Create a new review
  public function createReview($user_id, $product_name, $rating, $review_text) {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_name, rating, review_text) VALUES (:user_id, :product_name, :rating, :review_text)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $review_text);
    return $stmt->execute();
  }

  // Get all reviews for a user
  public function getReviewsForUser($user_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
    $stmt->bindParam(':user_id', $user_id);
    return $stmt->execute() ? $stmt->fetchAll(PDO::FETCH_ASSOC) : array();
  }

  // Get a single review by ID
  public function getReview($review_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :review_id");
    $stmt->bindParam(':review_id', $review_id);
    return $stmt->execute() ? $stmt->fetch(PDO::FETCH_ASSOC) : array();
  }

  // Update a review
  public function updateReview($review_id, $product_name, $rating, $review_text) {
    $stmt = $this->db->prepare("UPDATE reviews SET product_name = :product_name, rating = :rating, review_text = :review_text WHERE id = :review_id");
    $stmt->bindParam(':review_id', $review_id);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $review_text);
    return $stmt->execute();
  }

  // Delete a review
  public function deleteReview($review_id) {
    $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :review_id");
    $stmt->bindParam(':review_id', $review_id);
    return $stmt->execute();
  }
}


$review = new Review();

// Create a new review
$user_id = 1;
$product_name = 'Product X';
$rating = 5;
$review_text = 'This product is amazing!';
$created = $review->createReview($user_id, $product_name, $rating, $review_text);

if ($created) {
  echo "Review created successfully!";
} else {
  echo "Error creating review.";
}

// Get all reviews for a user
$user_reviews = $review->getReviewsForUser($user_id);
print_r($user_reviews);

// Get a single review by ID
$review->id = 1;
$single_review = $review->getReview(1);
echo json_encode($single_review);

// Update a review
$update_result = $review->updateReview(1, 'Product Y', 4, 'This product is good.');
if ($update_result) {
  echo "Review updated successfully!";
} else {
  echo "Error updating review.";
}

// Delete a review
$delete_result = $review->deleteReview(1);
if ($delete_result) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review.";
}


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$mysqli = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($mysqli->connect_error) {
    die("Connection failed: " . $mysqli->connect_error);
}

function getReviews($product_id) {
  // Retrieve reviews for a specific product
  $query = "SELECT * FROM reviews WHERE product_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $reviews = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  return $reviews;
}

function addReview($data) {
  // Validate and sanitize input data
  if (empty($data['rating']) || !is_numeric($data['rating'])) {
    throw new Exception('Invalid rating');
  }
  if (empty($data['review'])) {
    throw new Exception('Please enter a review');
  }

  // Insert new review into database
  $query = "INSERT INTO reviews (product_id, rating, review, user_id) VALUES (?, ?, ?, ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("iiss", $data['product_id'], $data['rating'], $data['review'], $_SESSION['user_id']);
  $stmt->execute();
}

function getAverageRating($product_id) {
  // Retrieve average rating for a specific product
  $query = "SELECT AVG(rating) as average_rating FROM reviews WHERE product_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  return $stmt->get_result()->fetch_assoc()['average_rating'];
}

function displayReviews() {
  // Retrieve and display all reviews
  $reviews = getReviews(0); // Use product ID of your choice (e.g., 0)
  echo "<h2>Reviews</h2>";
  foreach ($reviews as $review) {
    echo "<p><b>" . $review['rating'] . "/5 stars</b> - " . $review['review'] . "</p>";
  }
}


<?php
  // Assuming we have a logged-in user with an ID of 1
  $_SESSION['user_id'] = 1;

  $data = array(
    'product_id' => 123, // Replace with the actual product ID
    'rating' => 5,
    'review' => 'This is a great product!'
  );

  addReview($data);
?>


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function addReview($userId, $productId, $rating, $review) {
    // Check if the user exists
    $userQuery = "SELECT * FROM users WHERE id = ?";
    $stmt = $this->db->prepare($userQuery);
    $stmt->execute([$userId]);
    $user = $stmt->fetch();
    
    if (!$user) {
      throw new Exception("User not found");
    }

    // Check if the product exists
    $productQuery = "SELECT * FROM products WHERE id = ?";
    $stmt = $this->db->prepare($productQuery);
    $stmt->execute([$productId]);
    $product = $stmt->fetch();
    
    if (!$product) {
      throw new Exception("Product not found");
    }

    // Insert the review
    $reviewQuery = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($reviewQuery);
    $stmt->execute([$userId, $productId, $rating, $review]);

    return $this->db->lastInsertId();
  }

  public function getReviewsForProduct($productId) {
    // Get all reviews for the product
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$productId]);
    
    return $stmt->fetchAll();
  }

  public function getReviewsForUser($userId) {
    // Get all reviews for the user
    $query = "SELECT * FROM reviews WHERE user_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$userId]);
    
    return $stmt->fetchAll();
  }

  public function updateReview($reviewId, $rating, $review) {
    // Update the review
    $query = "UPDATE reviews SET rating = ?, review = ? WHERE id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$rating, $review, $reviewId]);
  }

  public function deleteReview($reviewId) {
    // Delete the review
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$reviewId]);
  }
}


$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

$review = new Review($db);

try {
  $reviewId = $review->addReview(1, 1, 5, "Great product!");
  echo "Review added successfully!";
} catch (Exception $e) {
  echo "Error: " . $e->getMessage();
}

$reviewsForProduct = $review->getReviewsForProduct(1);
echo "Reviews for product 1:
";
print_r($reviewsForProduct);

$reviewsForUser = $review->getReviewsForUser(1);
echo "Reviews for user 1:
";
print_r($reviewsForUser);

$review->updateReview(1, 4, "Not so great after all.");
echo "Review updated successfully!";

$review->deleteReview(1);
echo "Review deleted successfully!";


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Function to get all reviews for a product
  public function getAllReviewsForProduct($productId) {
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Function to get all products with reviews
  public function getAllProductsWithReviews() {
    $query = "SELECT p.id, p.name, COUNT(r.id) AS review_count FROM products p LEFT JOIN reviews r ON p.id = r.product_id GROUP BY p.id";
    $stmt = $this->db->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Function to create a new review
  public function createReview($userId, $productId, $rating, $reviewText) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (:user_id, :product_id, :rating, :review_text)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $reviewText);
    return $stmt->execute();
  }

  // Function to update a review
  public function updateReview($reviewId, $newRating, $newReviewText) {
    $query = "UPDATE reviews SET rating = :new_rating, review_text = :new_review_text WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':new_rating', $newRating);
    $stmt->bindParam(':new_review_text', $newReviewText);
    $stmt->bindParam(':id', $reviewId);
    return $stmt->execute();
  }

  // Function to delete a review
  public function deleteReview($reviewId) {
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $reviewId);
    return $stmt->execute();
  }
}


$db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

$review = new Review($db);

// Get all reviews for a product
$productReviews = $review->getAllReviewsForProduct(1);
print_r($productReviews);

// Create a new review
$newReviewCreated = $review->createReview(1, 1, 4, "Great product!");
echo var_dump($newReviewCreated); // Returns true if the review was created successfully

// Update an existing review
$updatedReview = $review->updateReview(1, 5, "Even better product now!");
echo var_dump($updatedReview); // Returns true if the review was updated successfully

// Delete a review
$deletedReview = $review->deleteReview(2);
echo var_dump($deletedReview); // Returns true if the review was deleted successfully


<?php

// Database connection settings
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "review_system";

// Create a database connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check the connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add review
function add_review() {
    global $conn;

    // Get form data from POST request
    if (isset($_POST['submit'])) {
        $name = $_POST['name'];
        $rating = $_POST['rating'];
        $review = $_POST['review'];
        $product_name = $_POST['product_name'];

        // Insert review into database
        $sql = "INSERT INTO reviews (name, rating, review, product_name) VALUES ('$name', '$rating', '$review', '$product_name')";
        if ($conn->query($sql)) {
            echo "Review added successfully!";
        } else {
            echo "Error adding review: " . $conn->error;
        }
    }
}

// Function to view reviews
function view_reviews() {
    global $conn;

    // Set pagination variables
    $per_page = 5; // Number of reviews per page
    $page = $_GET['page']; // Current page

    if (empty($page)) {
        $page = 1;
    }

    // Get total number of pages and current reviews
    $total_pages = ceil(count_reviews() / $per_page);
    $start_index = ($page - 1) * $per_page;

    // Retrieve reviews for the current page
    $sql = "SELECT id, name, rating, review, product_name FROM reviews ORDER BY id DESC LIMIT $start_index, $per_page";
    $results = $conn->query($sql);

    echo "<h2>Reviews</h2>";

    if ($results->num_rows > 0) {
        while ($row = $results->fetch_assoc()) {
            echo "ID: " . $row['id'] . ", Name: " . $row['name'] . ", Rating: " . $row['rating'] . "/5, Product: " . $row['product_name'];
            echo "<button onclick='window.location.href=\"delete_review.php?id=" . $row['id'] . "\"'>Delete</button>";
            echo "<br><br>";
        }
    } else {
        echo "No reviews available.";
    }

    // Show pagination links
    show_pagination_links($total_pages, $page);
}

// Function to delete review
function delete_review() {
    global $conn;

    // Get ID of the review to be deleted from GET request
    if (isset($_GET['id'])) {
        $review_id = $_GET['id'];

        // Delete review from database
        $sql = "DELETE FROM reviews WHERE id='$review_id'";
        if ($conn->query($sql)) {
            echo "Review deleted successfully!";
        } else {
            echo "Error deleting review: " . $conn->error;
        }
    }
}

// Function to count total number of reviews
function count_reviews() {
    global $conn;

    // Count the number of reviews in the database
    $sql = "SELECT COUNT(*) FROM reviews";
    return $conn->query($sql)->fetch_row()[0];
}

// Function to show pagination links
function show_pagination_links($total_pages, $current_page) {
    echo "<div style='text-align: center;'>";
    for ($i = 1; $i <= $total_pages; $i++) {
        if ($i == $current_page) {
            echo "<span style='font-weight: bold;'>$i</span> | ";
        } else {
            echo "<a href='?page=$i'>$i</a> | ";
        }
    }
    echo "</div>";
}

// Main script
if (isset($_GET['action']) && $_GET['action'] == "delete") {
    delete_review();
} elseif (isset($_POST['submit'])) {
    add_review();
} else {
    view_reviews();
}
?>


// models/Review.php

class Review {
    public $id;
    public $title;
    public $content;
    public $rating;
    public $created_at;

    function __construct($data) {
        $this->id = $data['id'];
        $this->title = $data['title'];
        $this->content = $data['content'];
        $this->rating = $data['rating'];
        $this->created_at = $data['created_at'];
    }
}


// repositories/ReviewRepository.php

class ReviewRepository {
    private $db;

    function __construct($db) {
        $this->db = $db;
    }

    public function getAllReviews() {
        $query = "SELECT * FROM reviews";
        return $this->db->query($query)->fetchAll(PDO::FETCH_CLASS, 'Review');
    }

    public function addReview($review) {
        $query = "INSERT INTO reviews (title, content, rating) VALUES (:title, :content, :rating)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':title', $review->title);
        $stmt->bindParam(':content', $review->content);
        $stmt->bindParam(':rating', $review->rating);
        return $stmt->execute();
    }
}


// controllers/ReviewController.php

class ReviewController {
    private $repo;

    function __construct($repo) {
        $this->repo = $repo;
    }

    public function index() {
        $reviews = $this->repo->getAllReviews();
        return view('reviews/index', ['reviews' => $reviews]);
    }

    public function create() {
        return view('reviews/create');
    }

    public function store(Request $request) {
        $review = new Review($request->all());
        if ($this->repo->addReview($review)) {
            return redirect()->route('reviews.index')->withSuccess('Review added successfully!');
        } else {
            return back()->withErrors(['Error adding review']);
        }
    }
}


// views/reviews/index.blade.php

<h1>Reviews</h1>

@foreach ($reviews as $review)
    <div>
        <h2>{{ $review->title }}</h2>
        <p>{{ $review->content }}</p>
        <p>Rating: {{ $review->rating }}/5</p>
    </div>
@endforeach


// routes/web.php

Route::get('/reviews', 'ReviewController@index');
Route::get('/reviews/create', 'ReviewController@create');
Route::post('/reviews', 'ReviewController@store');


// Review Model
class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function addReview($productId, $userId, $rating, $comment) {
    $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
              VALUES (:product_id, :user_id, :rating, :comment)";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->bindParam(':product_id', $productId);
      $stmt->bindParam(':user_id', $userId);
      $stmt->bindParam(':rating', $rating);
      $stmt->bindParam(':comment', $comment);
      return $stmt->execute();
    } catch (PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
      return false;
    }
  }

  public function getReviews($productId = null, $userId = null) {
    if ($productId !== null && $userId !== null) {
      $query = "SELECT * FROM reviews WHERE product_id = :product_id AND user_id = :user_id";
    } elseif ($productId !== null) {
      $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    } elseif ($userId !== null) {
      $query = "SELECT * FROM reviews WHERE user_id = :user_id";
    } else {
      $query = "SELECT * FROM reviews";
    }
    try {
      $stmt = $this->db->prepare($query);
      if ($productId !== null) {
        $stmt->bindParam(':product_id', $productId);
      }
      if ($userId !== null) {
        $stmt->bindParam(':user_id', $userId);
      }
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error fetching reviews: " . $e->getMessage();
      return array();
    }
  }

  public function updateReview($reviewId, $rating = null, $comment = null) {
    if ($rating !== null || $comment !== null) {
      $query = "UPDATE reviews SET ";
      if ($rating !== null) {
        $query .= "rating = :rating";
      }
      if ($comment !== null) {
        if (strpos($query, "WHERE") === false) {
          $query .= ", ";
        }
        $query .= "comment = :comment";
      }
      $query .= " WHERE id = :id";
    } else {
      echo "Error updating review: no rating or comment provided.";
      return false;
    }
    try {
      $stmt = $this->db->prepare($query);
      if ($rating !== null) {
        $stmt->bindParam(':rating', $rating);
      }
      if ($comment !== null) {
        $stmt->bindParam(':comment', $comment);
      }
      $stmt->bindParam(':id', $reviewId);
      return $stmt->execute();
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
      return false;
    }
  }

  public function deleteReview($reviewId) {
    $query = "DELETE FROM reviews WHERE id = :id";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->bindParam(':id', $reviewId);
      return $stmt->execute();
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');

$reviewModel = new Review($db);

// Add a new review
$product_id = 123;
$user_id = 456;
$rating = 4;
$comment = "Great product!";
$result = $reviewModel->addReview($product_id, $user_id, $rating, $comment);
if ($result) {
    echo "Review added successfully!";
} else {
    echo "Error adding review";
}

// Get reviews for a specific product
$product_id = 123;
$reviews = $reviewModel->getReviews($productId);
foreach ($reviews as $review) {
    echo $review['id'] . ": " . $review['comment'];
}

// Update an existing review
$reviewId = 1;
$rating = 5;
$result = $reviewModel->updateReview($reviewId, null, null, $rating);
if ($result) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review";
}


// db.php: Database connection script ( omitted for brevity )

class ReviewManager {
    private $db;

    public function __construct() {
        $this->db = connect_to_db(); // Assuming a database connection function
    }

    /**
     * Get all reviews for a specific product.
     *
     * @param int $product_id ID of the product being reviewed.
     * @return array Reviews for the given product.
     */
    public function getReviews($product_id) {
        $query = "SELECT r.id, u.username, r.rating, r.review_text
                  FROM reviews r
                  JOIN users u ON r.user_id = u.id
                  WHERE r.product_id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$product_id]);
        return $stmt->fetchAll();
    }

    /**
     * Add a new review for a product.
     *
     * @param int $user_id ID of the user submitting the review.
     * @param int $product_id ID of the product being reviewed.
     * @param int $rating Rating from 1 to 5.
     * @param string $review_text User's review text.
     */
    public function addReview($user_id, $product_id, $rating, $review_text) {
        $query = "INSERT INTO reviews (user_id, product_id, rating, review_text)
                  VALUES (?, ?, ?, ?)";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$user_id, $product_id, $rating, $review_text]);
    }

    /**
     * Calculate the average rating for a product.
     *
     * @param int $product_id ID of the product being reviewed.
     * @return float Average rating for the given product.
     */
    public function getAverageRating($product_id) {
        $query = "SELECT AVG(r.rating) AS avg_rating
                  FROM reviews r
                  WHERE r.product_id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$product_id]);
        return $stmt->fetch()['avg_rating'] ?? 0;
    }
}


$reviewManager = new ReviewManager();
$product_id = 123; // Replace with the actual product ID

// Get all reviews for a specific product.
$reviews = $reviewManager->getReviews($product_id);
print_r($reviews);

// Add a new review for a product.
$user_id = 456; // Replace with the actual user ID
$rating = 4;
$review_text = "Great product!";
$reviewManager->addReview($user_id, $product_id, $rating, $review_text);

// Calculate the average rating for a product.
$average_rating = $reviewManager->getAverageRating($product_id);
echo "Average Rating: $average_rating";


class Review {
  private $id;
  private $title;
  private $content;
  private $rating;
  private $user_id;

  public function __construct($id = null) {
    if ($id !== null) {
      $this->loadReview($id);
    }
  }

  public function loadReview($id) {
    global $db; // assuming a database connection is established

    $stmt = $db->prepare("SELECT * FROM reviews WHERE id = :id");
    $stmt->bindParam(":id", $id);
    $stmt->execute();

    if ($review = $stmt->fetch()) {
      $this->id = $review['id'];
      $this->title = $review['title'];
      $this->content = $review['content'];
      $this->rating = $review['rating'];
      $this->user_id = $review['user_id'];
    }
  }

  public function submitReview($user_id, $title, $content, $rating) {
    global $db; // assuming a database connection is established

    if ($title && $content && $rating > 0 && $rating <= 5) {
      $stmt = $db->prepare("INSERT INTO reviews (user_id, title, content, rating) VALUES (:user_id, :title, :content, :rating)");
      $stmt->bindParam(":user_id", $user_id);
      $stmt->bindParam(":title", $title);
      $stmt->bindParam(":content", $content);
      $stmt->bindParam(":rating", $rating);
      $stmt->execute();

      return true;
    }

    return false;
  }
}


require_once 'review.php';

// create a new review instance
$review = new Review();

// submit a new review
if ($review->submitReview(1, "Great Product!", "I love this product! It's amazing.", 5)) {
  echo "Review submitted successfully!";
} else {
  echo "Error submitting review.";
}

// load an existing review
$review = new Review(1);
echo $review->title; // outputs: Great Product!


<?php
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


function submit_review($product_id, $rating, $review_text, $user_id) {
    global $conn;

    // Check if product exists
    $query = "SELECT * FROM products WHERE id = '$product_id'";
    $result = $conn->query($query);
    if (!$result->num_rows > 0) {
        return false; // Product not found
    }

    // Insert review into database
    $query = "INSERT INTO reviews (user_id, product_id, rating, review_text)
              VALUES ('$user_id', '$product_id', '$rating', '$review_text')";
    if ($conn->query($query) === TRUE) {
        return true; // Review submitted successfully
    } else {
        echo "Error: " . $conn->error;
        return false; // Error submitting review
    }
}


function get_user_reviews($user_id) {
    global $conn;

    // Retrieve reviews from database
    $query = "SELECT * FROM reviews WHERE user_id = '$user_id'";
    $result = $conn->query($query);
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            // Process review data here
            echo "Review ID: " . $row["id"] . "<br>";
            echo "Product Name: " . get_product_name($row["product_id"]) . "<br>";
            echo "Rating: " . $row["rating"] . "/5<br>";
            echo "Review Text: " . $row["review_text"] . "<br><hr>";
        }
    } else {
        // No reviews found
        echo "No reviews found for this user.";
    }
}

function get_product_name($product_id) {
    global $conn;

    // Retrieve product name from database
    $query = "SELECT name FROM products WHERE id = '$product_id'";
    $result = $conn->query($query);
    if ($result->num_rows > 0) {
        return $result->fetch_assoc()["name"];
    } else {
        return ""; // Product not found
    }
}


// Submit a review for product ID 1 with rating 4 and review text "Great product!"
submit_review(1, 4, "Great product!", 1);

// Get all reviews left by user ID 1
get_user_reviews(1);


// database connection settings
$host = 'localhost';
$dbname = 'review_system';
$username = 'root';
$password = '';

// connect to the database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

class ReviewSystem {

    private $conn;

    function __construct() {
        $this->conn = $conn;
    }

    // create a review
    public function createReview($userId, $productId, $rating, $review) {
        $sql = "INSERT INTO reviews (user_id, product_id, rating, review)
                VALUES ('$userId', '$productId', '$rating', '$review')";
        
        if ($this->conn->query($sql) === TRUE) {
            return true;
        } else {
            return false;
        }
    }

    // get all reviews for a product
    public function getReviewsForProduct($productId) {
        $sql = "SELECT * FROM reviews WHERE product_id = '$productId'";
        
        $result = $this->conn->query($sql);
        
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_assoc()) {
                echo "id: " . $row["id"]. " - User ID: " . $row["user_id"]. " - Rating: " . $row["rating"]. " - Review: " . $row["review"]. "
";
            }
        } else {
            echo "0 results";
        }
    }

    // get all reviews for a user
    public function getReviewsForUser($userId) {
        $sql = "SELECT * FROM reviews WHERE user_id = '$userId'";
        
        $result = $this->conn->query($sql);
        
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_assoc()) {
                echo "id: " . $row["id"]. " - Product ID: " . $row["product_id"]. " - Rating: " . $row["rating"]. " - Review: " . $row["review"]. "
";
            }
        } else {
            echo "0 results";
        }
    }

    // update a review
    public function updateReview($id, $rating, $review) {
        $sql = "UPDATE reviews SET rating = '$rating', review = '$review' WHERE id = '$id'";
        
        if ($this->conn->query($sql) === TRUE) {
            return true;
        } else {
            return false;
        }
    }

    // delete a review
    public function deleteReview($id) {
        $sql = "DELETE FROM reviews WHERE id = '$id'";
        
        if ($this->conn->query($sql) === TRUE) {
            return true;
        } else {
            return false;
        }
    }
}

// usage example:
$reviewSystem = new ReviewSystem();

// create a review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = "This product is amazing!";
$result = $reviewSystem->createReview($user_id, $product_id, $rating, $review);
if ($result) {
    echo "Review created successfully!
";
} else {
    echo "Failed to create review.
";
}

// get all reviews for a product
$product_id = 1;
$reviewSystem->getReviewsForProduct($product_id);

// get all reviews for a user
$user_id = 1;
$reviewSystem->getReviewsForUser($user_id);

// update a review
$id = 1;
$rating = 4;
$review = "This product is good!";
$result = $reviewSystem->updateReview($id, $rating, $review);
if ($result) {
    echo "Review updated successfully!
";
} else {
    echo "Failed to update review.
";
}

// delete a review
$id = 1;
$result = $reviewSystem->deleteReview($id);
if ($result) {
    echo "Review deleted successfully!
";
} else {
    echo "Failed to delete review.
";
}


// database.php (database connection settings)
<?php
class Database {
    private $host;
    private $db_name;
    private $user;
    private $password;

    public function __construct() {
        // Initialize database connection settings here
        $this->host = 'your_host';
        $this->db_name = 'your_database';
        $this->user = 'your_user';
        $this->password = 'your_password';

        try {
            $conn = new PDO('mysql:host=' . $this->host . ';dbname=' . $this->db_name, $this->user, $this->password);
            return $conn;
        } catch (PDOException $e) {
            echo "Error connecting to database: " . $e->getMessage();
        }
    }
}

// review.php (Review class)
<?php
require_once 'database.php';

class Review {
    private $id;
    private $product_id;
    private $user_id;
    private $rating;
    private $text;

    public function __construct($data = array()) {
        if (!empty($data)) {
            $this->id = isset($data['id']) ? $data['id'] : '';
            $this->product_id = isset($data['product_id']) ? $data['product_id'] : '';
            $this->user_id = isset($data['user_id']) ? $data['user_id'] : '';
            $this->rating = isset($data['rating']) ? $data['rating'] : 0;
            $this->text = isset($data['text']) ? $data['text'] : '';
        }
    }

    public function save() {
        global $db;
        $sql = "INSERT INTO reviews (product_id, user_id, rating, text) VALUES (:product_id, :user_id, :rating, :text)";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':product_id', $this->product_id);
        $stmt->bindParam(':user_id', $this->user_id);
        $stmt->bindParam(':rating', $this->rating);
        $stmt->bindParam(':text', $this->text);

        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error saving review: " . $e->getMessage();
            return false;
        }
    }

    public function delete() {
        global $db;
        $sql = "DELETE FROM reviews WHERE id = :id";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':id', $this->id);

        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error deleting review: " . $e->getMessage();
            return false;
        }
    }

    public function getReviews($product_id) {
        global $db;
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);

        try {
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error fetching reviews: " . $e->getMessage();
            return array();
        }
    }
}

// product.php (Product class)
<?php
require_once 'database.php';

class Product {
    private $id;
    private $name;
    private $description;

    public function __construct($data = array()) {
        if (!empty($data)) {
            $this->id = isset($data['id']) ? $data['id'] : '';
            $this->name = isset($data['name']) ? $data['name'] : '';
            $this->description = isset($data['description']) ? $data['description'] : '';
        }
    }

    public function save() {
        global $db;
        $sql = "INSERT INTO products (name, description) VALUES (:name, :description)";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':name', $this->name);
        $stmt->bindParam(':description', $this->description);

        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error saving product: " . $e->getMessage();
            return false;
        }
    }

    public function delete() {
        global $db;
        $sql = "DELETE FROM products WHERE id = :id";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':id', $this->id);

        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error deleting product: " . $e->getMessage();
            return false;
        }
    }

    public function getProducts() {
        global $db;
        $sql = "SELECT * FROM products";
        try {
            $stmt = $db->query($sql);
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error fetching products: " . $e->getMessage();
            return array();
        }
    }

    public function getProductReviews() {
        global $db;
        $review = new Review();

        try {
            $reviews = $review->getReviews($this->id);
            return $reviews;
        } catch (PDOException $e) {
            echo "Error fetching reviews: " . $e->getMessage();
            return array();
        }
    }

}

// user.php (User class)
<?php
require_once 'database.php';

class User {
    private $id;
    private $username;
    private $email;

    public function __construct($data = array()) {
        if (!empty($data)) {
            $this->id = isset($data['id']) ? $data['id'] : '';
            $this->username = isset($data['username']) ? $data['username'] : '';
            $this->email = isset($data['email']) ? $data['email'] : '';
        }
    }

    public function save() {
        global $db;
        $sql = "INSERT INTO users (username, email) VALUES (:username, :email)";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':username', $this->username);
        $stmt->bindParam(':email', $this->email);

        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error saving user: " . $e->getMessage();
            return false;
        }
    }

    public function delete() {
        global $db;
        $sql = "DELETE FROM users WHERE id = :id";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':id', $this->id);

        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error deleting user: " . $e->getMessage();
            return false;
        }
    }

    public function getUserReviews() {
        global $db;
        $review = new Review();

        try {
            $reviews = $review->getReviews($this->id);
            return $reviews;
        } catch (PDOException $e) {
            echo "Error fetching reviews: " . $e->getMessage();
            return array();
        }
    }

}


// Save a new product
$product = new Product(array('name' => 'My Product', 'description' => 'This is my product'));
$product->save();

// Get all products
$products = Product::getProducts();

// Create a new user
$user = new User(array('username' => 'john_doe', 'email' => 'john@example.com'));
$user->save();

// Save a new review for the user
$review = new Review();
$review->product_id = $product->id;
$review->user_id = $user->id;
$review->rating = 5;
$review->text = 'I love this product!';
$review->save();

// Get all reviews for the product
$product_reviews = Product::getProductReviews($product->id);

// Delete a review
$review->delete();


<?php

// Connect to the database
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database_name";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to create a review
function createReview($user_id, $product_name, $rating, $review) {
    global $conn;
    
    // Check if the user is logged in
    if (!isset($_SESSION["id"])) {
        echo "Please log in to leave a review.";
        return false;
    }
    
    // Insert the review into the database
    $sql = "INSERT INTO reviews (user_id, product_name, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("isss", $user_id, $product_name, $rating, $review);
    if ($stmt->execute()) {
        echo "Review created successfully!";
        return true;
    } else {
        echo "Error creating review: " . $stmt->error;
        return false;
    }
}

// Function to retrieve all reviews for a product
function getReviews($product_name) {
    global $conn;
    
    // Retrieve the reviews from the database
    $sql = "SELECT * FROM reviews WHERE product_name = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $product_name);
    $stmt->execute();
    $result = $stmt->get_result();
    
    return $result;
}

// Function to get the average rating for a product
function getAverageRating($product_name) {
    global $conn;
    
    // Retrieve the average rating from the database
    $sql = "SELECT AVG(rating) AS average_rating FROM reviews WHERE product_name = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $product_name);
    $stmt->execute();
    $result = $stmt->get_result();
    
    return $result;
}

// Function to update the review
function updateReview($id, $rating, $review) {
    global $conn;
    
    // Update the review in the database
    $sql = "UPDATE reviews SET rating = ?, review = ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iss", $rating, $review, $id);
    if ($stmt->execute()) {
        echo "Review updated successfully!";
        return true;
    } else {
        echo "Error updating review: " . $stmt->error;
        return false;
    }
}

// Function to delete the review
function deleteReview($id) {
    global $conn;
    
    // Delete the review from the database
    $sql = "DELETE FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $id);
    if ($stmt->execute()) {
        echo "Review deleted successfully!";
        return true;
    } else {
        echo "Error deleting review: " . $stmt->error;
        return false;
    }
}

?>


<?php

// Create a new review
$user_id = 1;
$product_name = "Product A";
$rating = 4;
$review = "This product is great!";
createReview($user_id, $product_name, $rating, $review);

// Retrieve all reviews for a product
$product_name = "Product B";
$reviews = getReviews($product_name);
while ($row = $reviews->fetch_assoc()) {
    echo $row["id"] . ": " . $row["user_id"] . ", Rating: " . $row["rating"];
}

// Get the average rating for a product
$product_name = "Product C";
$average_rating = getAverageRating($product_name);
echo "Average rating: " . $average_rating->fetch_assoc()["average_rating"];

// Update a review
$id = 1;
$rating = 5;
$review = "This product is amazing!";
updateReview($id, $rating, $review);

// Delete a review
$id = 2;
deleteReview($id);

?>


class Review {
  private $id;
  private $productId;
  private $userId;
  private $rating;
  private $comment;

  public function __construct($id = null, $productId = null, $userId = null, $rating = null, $comment = null) {
    $this->id = $id;
    $this->productId = $productId;
    $this->userId = $userId;
    $this->rating = $rating;
    $this->comment = $comment;
  }

  // Getters and setters
  public function getId() { return $this->id; }
  public function getProductId() { return $this->productId; }
  public function getUserId() { return $this->userId; }
  public function getRating() { return $this->rating; }
  public function getComment() { return $this->comment; }

  // Static method to retrieve all reviews for a product
  public static function getReviewsForProduct($productId) {
    // Assuming a database connection is established
    $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

    $query = 'SELECT * FROM reviews WHERE product_id = :product_id';
    $stmt = $db->prepare($query);
    $stmt->bindParam(':product_id', $productId);

    $reviews = array();
    while ($row = $stmt->fetch()) {
      $review = new Review(
        $row['id'],
        $row['product_id'],
        $row['user_id'],
        $row['rating'],
        $row['comment']
      );
      $reviews[] = $review;
    }

    return $reviews;
  }
}


// Create a new review
$review = new Review(1, 1, 1, 5, 'Great product!');

// Save the review to database (assuming a saveReview function exists)
saveReview($review);

// Retrieve all reviews for product with id 1
$reviewsForProduct = Review::getReviewsForProduct(1);
foreach ($reviewsForProduct as $review) {
  echo "Rating: {$review->getRating()} - Comment: {$review->getComment()}
";
}


// Review.php

class Review {
    private $id;
    private $name;
    private $rating;
    private $comment;

    public function __construct($name = '', $rating = 0, $comment = '') {
        $this->name = $name;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    // Getters and setters
    public function getId() { return $this->id; }
    public function getName() { return $this->name; }
    public function getRating() { return $this->rating; }
    public function getComment() { return $this->comment; }

    public function setName($name) { $this->name = $name; }
    public function setRating($rating) { $this->rating = $rating; }
    public function setComment($comment) { $this->comment = $comment; }
}

// ReviewManager.php

class ReviewManager {
    private static $_reviews = [];

    public static function createReview(Review $review) {
        self::$_reviews[] = $review;
        return count(self::$_reviews) - 1;
    }

    public static function getReviews() {
        return self::$_reviews;
    }

    public static function updateReview($id, Review $newReview) {
        if ($id < count(self::$_reviews)) {
            self::$_reviews[$id] = $newReview;
        }
    }

    public static function deleteReview($id) {
        if ($id < count(self::$_reviews)) {
            unset(self::$_reviews[$id]);
        }
    }
}

// Example usage:

$review1 = new Review('John Doe', 5, 'Great product!');
$review2 = new Review('Jane Doe', 4, 'Good but not perfect.');

$reviewId1 = ReviewManager::createReview($review1);
$reviewId2 = ReviewManager::createReview($review2);

print_r(ReviewManager::getReviews()); // Array of all reviews

$review1->setComment('Excellent!');
ReviewManager::updateReview($reviewId1, $review1);

print_r(ReviewManager::getReviews()); // Updated review comment


// Review class
class Review {
  private $db;

  public function __construct() {
    // Connect to the database
    $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'username', 'password');
  }

  // Function to create a review
  public function createReview($userId, $productId, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:userId, :productId, :rating, :review)");
      $stmt->bindParam(':userId', $userId);
      $stmt->bindParam(':productId', $productId);
      $stmt->bindParam(':rating', $rating);
      $stmt->bindParam(':review', $review);

      if ($stmt->execute()) {
        return true;
      } else {
        return false;
      }
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  // Function to read reviews for a specific product
  public function getReviews($productId) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :productId");
      $stmt->bindParam(':productId', $productId);
      $stmt->execute();

      return $stmt->fetchAll();
    } catch (PDOException $e) {
      echo "Error reading reviews: " . $e->getMessage();
      return array();
    }
  }

  // Function to update a review
  public function updateReview($reviewId, $newRating, $newReview) {
    try {
      $stmt = $this->db->prepare("UPDATE reviews SET rating = :newRating, review = :newReview WHERE id = :reviewId");
      $stmt->bindParam(':reviewId', $reviewId);
      $stmt->bindParam(':newRating', $newRating);
      $stmt->bindParam(':newReview', $newReview);

      if ($stmt->execute()) {
        return true;
      } else {
        return false;
      }
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
      return false;
    }
  }

  // Function to delete a review
  public function deleteReview($reviewId) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :reviewId");
      $stmt->bindParam(':reviewId', $reviewId);

      if ($stmt->execute()) {
        return true;
      } else {
        return false;
      }
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


// Create a new Review object
$review = new Review();

// Create a new review
if ($review->createReview(1, 1, 5, 'This product is amazing!')) {
  echo "Review created successfully!";
} else {
  echo "Error creating review.";
}

// Read reviews for a specific product
$reviews = $review->getReviews(1);
foreach ($reviews as $review) {
  echo "Rating: " . $review['rating'] . ", Review: " . $review['review'];
}

// Update a review
if ($review->updateReview(1, 4, 'This product is okay.')) {
  echo "Review updated successfully!";
} else {
  echo "Error updating review.";
}

// Delete a review
if ($review->deleteReview(1)) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review.";
}


CREATE TABLE users (
  id INT PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL
);

CREATE TABLE reviews (
  id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT NOT NULL,
  product_id INT NOT NULL,
  rating TINYINT NOT NULL,
  review TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE products (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL
);


<?php
$dsn = 'mysql:host=localhost;dbname=mydatabase';
$username = 'myusername';
$password = 'mypassword';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}
?>


<?php
require_once 'config.php';

function add_review($user_id, $product_id, $rating, $review) {
    try {
        $stmt = $pdo->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)');
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        $stmt->execute();
        return true;
    } catch (PDOException $e) {
        echo 'Error adding review: ' . $e->getMessage();
        return false;
    }
}

function get_reviews($product_id) {
    try {
        $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo 'Error getting reviews: ' . $e->getMessage();
        return array();
    }
}

function get_user_reviews($user_id) {
    try {
        $stmt = $pdo->prepare('SELECT * FROM reviews WHERE user_id = :user_id');
        $stmt->bindParam(':user_id', $user_id);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo 'Error getting user reviews: ' . $e->getMessage();
        return array();
    }
}

// Example usage:
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    if (isset($_POST['submit'])) {
        $user_id = $_SESSION['user_id'];
        $product_id = $_POST['product_id'];
        $rating = $_POST['rating'];
        $review = $_POST['review'];

        add_review($user_id, $product_id, $rating, $review);
    }
}

$reviews = get_reviews($_GET['product_id']);
foreach ($reviews as $review) {
    echo 'Rating: ' . $review['rating'] . ', Review: ' . $review['review'];
}
?>


<?php
require_once 'config.php';

// User authentication logic (e.g. using sessions or a login system)
if (!isset($_SESSION['user_id'])) {
    echo 'You must be logged in to add reviews.';
}

// Get the product ID from the URL query string
$product_id = $_GET['product_id'];

// Display the review form
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
    <label for="rating">Rating:</label>
    <select id="rating" name="rating">
        <?php for ($i = 1; $i <= 5; $i++) { ?>
            <option value="<?php echo $i; ?>"><?php echo $i; ?></option>
        <?php } ?>
    </select>
    <br>
    <label for="review">Review:</label>
    <textarea id="review" name="review"></textarea>
    <br>
    <input type="submit" name="submit" value="Add Review">
</form>

<?php
require_once 'review.php';
?>


// Connect to database
$mysqli = new mysqli("localhost", "username", "password", "database");

function getReviews($product_id) {
  // Get all reviews for a specific product
  $query = "SELECT r.id, u.name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id WHERE product_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $result = $stmt->get_result();

  return $result;
}

function addReview($user_id, $product_id, $rating, $review) {
  // Add a new review to the database
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("iiss", $user_id, $product_id, $rating, $review);
  $stmt->execute();

  return true;
}

function getUserReviewHistory($user_id) {
  // Get all reviews written by a specific user
  $query = "SELECT p.name, r.rating, r.review FROM reviews r JOIN products p ON r.product_id = p.id WHERE r.user_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("i", $user_id);
  $stmt->execute();
  $result = $stmt->get_result();

  return $result;
}

// Example usage
$user_id = 1; // Replace with actual user ID
$product_id = 1; // Replace with actual product ID

$reviews = getReviews($product_id);
foreach ($reviews as $review) {
  echo "User: {$review['name']}, Rating: {$review['rating']}, Review: {$review['review']}
";
}

// Add a new review
addReview($user_id, $product_id, 5, "This product is great!");

// Get user's review history
$user_reviews = getUserReviewHistory($user_id);
foreach ($user_reviews as $review) {
  echo "Product: {$review['name']}, Rating: {$review['rating']}, Review: {$review['review']}
";
}


<?php

class Review {
  private $id;
  private $title;
  private $rating;
  private $content;

  public function __construct($id, $title, $rating, $content) {
    $this->id = $id;
    $this->title = $title;
    $this->rating = $rating;
    $this->content = $content;
  }

  public static function createReview($title, $rating, $content) {
    // Insert review into database (e.g. using PDO)
    $db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
    $stmt = $db->prepare("INSERT INTO reviews (title, rating, content) VALUES (:title, :rating, :content)");
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':content', $content);
    $stmt->execute();
    return new Review($db->lastInsertId(), $title, $rating, $content);
  }

  public static function getReviews() {
    // Retrieve reviews from database (e.g. using PDO)
    $db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
    $stmt = $db->query("SELECT * FROM reviews");
    $reviews = array();
    while ($row = $stmt->fetch()) {
      $review = new Review($row['id'], $row['title'], $row['rating'], $row['content']);
      $reviews[] = $review;
    }
    return $reviews;
  }

  public static function deleteReview($id) {
    // Delete review from database (e.g. using PDO)
    $db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
    $stmt = $db->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $id);
    $stmt->execute();
  }
}

?>


<?php

class ReviewController {
  public function createReview() {
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
      $title = $_POST['title'];
      $rating = $_POST['rating'];
      $content = $_POST['content'];
      $review = Review::createReview($title, $rating, $content);
      header('Location: index.php');
    }
  }

  public function getReviews() {
    $reviews = Review::getReviews();
    require_once 'views/review_list.php';
  }

  public function deleteReview() {
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
      $id = $_POST['id'];
      Review::deleteReview($id);
      header('Location: index.php');
    }
  }
}

?>


<?php

$reviews = $controller->getReviews();

?>

<h1>Reviews</h1>

<ul>
  <?php foreach ($reviews as $review) { ?>
    <li>
      <h2><?php echo $review->title; ?></h2>
      <p><?php echo $review->rating; ?>/5 stars</p>
      <p><?php echo substr($review->content, 0, 200); ?>...</p>
      <a href="#" class="delete" data-id="<?php echo $review->id; ?>">Delete review</a>
    </li>
  <?php } ?>
</ul>

<?php


<?php

require_once 'includes/autoload.php';

$controller = new ReviewController();

?>

<form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
  <input type="text" name="title" placeholder="Review title">
  <input type="number" min="1" max="5" step="0.01" name="rating" placeholder="Rating (out of 5)">
  <textarea name="content" placeholder="Content"></textarea>
  <button type="submit">Create review</button>
</form>

<?php


class Review {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    /**
     * Add a new review.
     *
     * @param int   $productId The ID of the product being reviewed.
     * @param int   $userId    The ID of the user submitting the review.
     * @param string $reviewText
     * @param int   $rating
     *
     * @return bool True if the review was successfully added, false otherwise.
     */
    public function addReview($productId, $userId, $reviewText, $rating) {
        $query = "INSERT INTO reviews (product_id, user_id, review, rating)
                  VALUES (:productId, :userId, :reviewText, :rating)";
        
        $stmt = $this->db->prepare($query);
        return $stmt->execute([
            ':productId' => $productId,
            ':userId'    => $userId,
            ':reviewText' => $reviewText,
            ':rating'     => $rating
        ]);
    }

    /**
     * Retrieve all reviews for a product.
     *
     * @param int $productId The ID of the product to retrieve reviews for.
     *
     * @return array An array of review objects, each containing user and review details.
     */
    public function getReviews($productId) {
        $query = "SELECT r.id, u.name AS username, r.review, r.rating
                  FROM reviews r JOIN users u ON r.user_id = u.id
                  WHERE r.product_id = :productId ORDER BY created_at DESC";
        
        $stmt = $this->db->prepare($query);
        $stmt->execute([':productId' => $productId]);
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * Update an existing review.
     *
     * @param int   $reviewId The ID of the review to update.
     * @param string $newReviewText
     * @param int   $newRating
     *
     * @return bool True if the review was successfully updated, false otherwise.
     */
    public function updateReview($reviewId, $newReviewText, $newRating) {
        $query = "UPDATE reviews SET review = :newReviewText, rating = :newRating
                  WHERE id = :reviewId";
        
        $stmt = $this->db->prepare($query);
        return $stmt->execute([
            ':reviewId'      => $reviewId,
            ':newReviewText' => $newReviewText,
            ':newRating'     => $newRating
        ]);
    }

    /**
     * Delete a review.
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True if the review was successfully deleted, false otherwise.
     */
    public function deleteReview($reviewId) {
        $query = "DELETE FROM reviews WHERE id = :reviewId";
        
        $stmt = $this->db->prepare($query);
        return $stmt->execute([':reviewId' => $reviewId]);
    }
}


require_once 'database.php';

$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myusername', 'mypassword');

$review = new Review($db);

// Add a review
if ($review->addReview(1, 1, "Great product!", 5)) {
    echo "Review added successfully.";
} else {
    echo "Failed to add review.";
}

// Retrieve all reviews for a product
$reviews = $review->getReviews(1);
print_r($reviews);

// Update an existing review
if ($review->updateReview(1, "Even better!", 5)) {
    echo "Review updated successfully.";
} else {
    echo "Failed to update review.";
}

// Delete a review
if ($review->deleteReview(1)) {
    echo "Review deleted successfully.";
} else {
    echo "Failed to delete review.";
}


<?php
class Review {
    private $db;

    public function __construct() {
        // Connect to the database
        $this->db = new SQLite3('reviews.db');
    }

    // Function to add a review
    public function addReview($product_id, $username, $rating, $review) {
        $query = "INSERT INTO reviews (product_id, username, rating, review) VALUES ('$product_id', '$username', '$rating', '$review')";
        $this->db->exec($query);
        return true;
    }

    // Function to update a review
    public function updateReview($id, $product_id, $username, $rating, $review) {
        $query = "UPDATE reviews SET product_id='$product_id', username='$username', rating='$rating', review='$review' WHERE id='$id'";
        $this->db->exec($query);
        return true;
    }

    // Function to delete a review
    public function deleteReview($id) {
        $query = "DELETE FROM reviews WHERE id='$id'";
        $this->db->exec($query);
        return true;
    }

    // Function to get all reviews for a product
    public function getAllReviewsForProduct($product_id) {
        $query = "SELECT * FROM reviews WHERE product_id='$product_id' ORDER BY rating DESC";
        $result = $this->db->query($query);
        $reviews = array();
        while ($row = $result->fetchArray(SQLITE3_ASSOC)) {
            $reviews[] = $row;
        }
        return $reviews;
    }

    // Function to get a review by ID
    public function getReviewById($id) {
        $query = "SELECT * FROM reviews WHERE id='$id'";
        $result = $this->db->query($query);
        return $result->fetchArray(SQLITE3_ASSOC);
    }
}

// Example usage:
$reviewSystem = new Review();

// Add a review
$reviewSystem->addReview(1, 'John Doe', 5, 'This product is great!');

// Get all reviews for a product
$reviews = $reviewSystem->getAllReviewsForProduct(1);

// Print the reviews
foreach ($reviews as $review) {
    echo 'Username: ' . $review['username'] . ', Rating: ' . $review['rating'] . ', Review: ' . $review['review'] . '<br>';
}
?>


// Function to retrieve reviews for a specific product
function getReviews($productId) {
    global $db; // assume database connection is stored in a variable called db

    $query = "SELECT r.id, u.name AS username, p.name AS product_name, r.rating, r.review 
              FROM reviews r 
              JOIN users u ON r.user_id = u.id 
              JOIN products p ON r.product_id = p.id 
              WHERE r.product_id = :productId 
              ORDER BY created_at DESC";

    $stmt = $db->prepare($query);
    $stmt->bindParam(':productId', $productId);

    try {
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo "Error retrieving reviews: " . $e->getMessage();
        return array();
    }
}

// Function to add a new review
function addReview($userId, $productId, $rating, $review) {
    global $db; // assume database connection is stored in a variable called db

    try {
        $query = "INSERT INTO reviews (user_id, product_id, rating, review)
                  VALUES (:userId, :productId, :rating, :review)";

        $stmt = $db->prepare($query);
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);

        $stmt->execute();

        return true;
    } catch (PDOException $e) {
        echo "Error adding review: " . $e->getMessage();
        return false;
    }
}

// Function to update an existing review
function updateReview($reviewId, $rating, $review) {
    global $db; // assume database connection is stored in a variable called db

    try {
        $query = "UPDATE reviews 
                  SET rating = :rating, review = :review 
                  WHERE id = :reviewId";

        $stmt = $db->prepare($query);
        $stmt->bindParam(':reviewId', $reviewId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);

        $stmt->execute();

        return true;
    } catch (PDOException $e) {
        echo "Error updating review: " . $e->getMessage();
        return false;
    }
}

// Function to delete a review
function deleteReview($reviewId) {
    global $db; // assume database connection is stored in a variable called db

    try {
        $query = "DELETE FROM reviews 
                  WHERE id = :reviewId";

        $stmt = $db->prepare($query);
        $stmt->bindParam(':reviewId', $reviewId);

        $stmt->execute();

        return true;
    } catch (PDOException $e) {
        echo "Error deleting review: " . $e->getMessage();
        return false;
    }
}


// Retrieve reviews for product with ID 123
$reviews = getReviews(123);
echo json_encode($reviews);

// Add a new review for user with ID 456 and product with ID 123
$newReview = addReview(456, 123, 4, "Great product!");
echo $newReview ? "Review added successfully!" : "Error adding review";

// Update the rating and review of review with ID 789
$updateResult = updateReview(789, 5, "Excellent service!");
echo $updateResult ? "Review updated successfully!" : "Error updating review";

// Delete review with ID 456
$deleteResult = deleteReview(456);
echo $deleteResult ? "Review deleted successfully!" : "Error deleting review";


// db.php - database connection script

class Review {

    private $conn;

    public function __construct() {
        require_once 'db.php';
        $this->conn = new mysqli($GLOBALS['server'], $GLOBALS['username'], $GLOBALS['password'], $GLOBALS['database']);
    }

    // Create a review
    public function createReview($productId, $userId, $rating, $reviewText) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "INSERT INTO reviews (product_id, user_id, rating, review_text)
                VALUES (?, ?, ?, ?)";
        
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("iiss", $productId, $userId, $rating, $reviewText);

        if ($stmt->execute()) {
            return true;
        } else {
            echo "Error: " . $stmt->error;
            return false;
        }
    }

    // Get all reviews for a product
    public function getReviewsForProduct($productId) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "SELECT * FROM reviews WHERE product_id = ?";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("i", $productId);

        if ($stmt->execute()) {
            return $stmt->get_result();
        } else {
            echo "Error: " . $stmt->error;
            return false;
        }
    }

    // Get all reviews for a user
    public function getReviewsForUser($userId) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "SELECT * FROM reviews WHERE user_id = ?";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("i", $userId);

        if ($stmt->execute()) {
            return $stmt->get_result();
        } else {
            echo "Error: " . $stmt->error;
            return false;
        }
    }

    // Update a review
    public function updateReview($reviewId, $rating, $reviewText) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("iis", $rating, $reviewText, $reviewId);

        if ($stmt->execute()) {
            return true;
        } else {
            echo "Error: " . $stmt->error;
            return false;
        }
    }

    // Delete a review
    public function deleteReview($reviewId) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "DELETE FROM reviews WHERE id = ?";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("i", $reviewId);

        if ($stmt->execute()) {
            return true;
        } else {
            echo "Error: " . $stmt->error;
            return false;
        }
    }

}


require_once 'db.php';
require_once 'review.php';

$review = new Review();

// Create a review
if ($review->createReview(1, 1, 4, "Good product!")) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

// Get all reviews for a product
$result = $review->getReviewsForProduct(1);
while ($row = $result->fetch_assoc()) {
    echo "ID: " . $row['id'] . "<br>";
    echo "Product ID: " . $row['product_id'] . "<br>";
    echo "User ID: " . $row['user_id'] . "<br>";
    echo "Rating: " . $row['rating'] . "/5<br>";
    echo "Review Text: " . $row['review_text'] . "<br><hr>";
}

// Update a review
if ($review->updateReview(1, 5, "Excellent product!")) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review.";
}

// Delete a review
if ($review->deleteReview(1)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_NAME', 'reviews_db');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');

// Function to connect to the database
function db_connect() {
  $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to leave a review
function leave_review($product_id, $user_id, $rating, $comment) {
  $conn = db_connect();
  $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
          VALUES (?, ?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("iiss", $product_id, $user_id, $rating, $comment);
  $stmt->execute();
  $review_id = $conn->insert_id;
  $conn->close();
  return $review_id;
}

// Function to get all reviews for a product
function get_reviews($product_id) {
  $conn = db_connect();
  $sql = "SELECT * FROM reviews WHERE product_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $reviews = array();
  while ($row = $stmt->get_result()->fetch_assoc()) {
    $reviews[] = array(
      'id' => $row['id'],
      'rating' => $row['rating'],
      'comment' => $row['comment']
    );
  }
  $conn->close();
  return $reviews;
}

// Function to get average rating for a product
function get_average_rating($product_id) {
  $conn = db_connect();
  $sql = "SELECT AVG(rating) FROM reviews WHERE product_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $result = $stmt->get_result()->fetch_assoc();
  $avg_rating = $result['AVG(rating)'] ?: 0;
  $conn->close();
  return $avg_rating;
}

// Example usage
$product_id = 1;
$user_id = 1;
$rating = 4;
$comment = 'This product is great!';

$review_id = leave_review($product_id, $user_id, $rating, $comment);
print "Review left with ID: $review_id
";

$reviews = get_reviews($product_id);
print_r($reviews);

$avg_rating = get_average_rating($product_id);
print "Average rating for product $product_id is: $avg_rating
";


<?php

// Database connection settings
$dsn = 'mysql:host=localhost;dbname=your_database_name';
$username = 'your_database_username';
$password = 'your_database_password';

try {
  // Connect to database
  $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
  echo 'Connection failed: ' . $e->getMessage();
  exit;
}

// Function to get all reviews
function getAllReviews() {
  global $pdo;
  $stmt = $pdo->prepare('SELECT * FROM reviews ORDER BY created_at DESC');
  $stmt->execute();
  return $stmt->fetchAll();
}

// Function to get a single review by ID
function getReviewById($id) {
  global $pdo;
  $stmt = $pdo->prepare('SELECT * FROM reviews WHERE id = :id');
  $stmt->bindParam(':id', $id);
  $stmt->execute();
  return $stmt->fetch();
}

// Function to add a new review
function addReview($user_id, $title, $content, $rating) {
  global $pdo;
  $stmt = $pdo->prepare('INSERT INTO reviews (user_id, title, content, rating) VALUES (:user_id, :title, :content, :rating)');
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':title', $title);
  $stmt->bindParam(':content', $content);
  $stmt->bindParam(':rating', $rating);
  return $stmt->execute();
}

// Function to update an existing review
function updateReview($id, $title, $content, $rating) {
  global $pdo;
  $stmt = $pdo->prepare('UPDATE reviews SET title = :title, content = :content, rating = :rating WHERE id = :id');
  $stmt->bindParam(':id', $id);
  $stmt->bindParam(':title', $title);
  $stmt->bindParam(':content', $content);
  $stmt->bindParam(':rating', $rating);
  return $stmt->execute();
}

// Function to delete a review
function deleteReview($id) {
  global $pdo;
  $stmt = $pdo->prepare('DELETE FROM reviews WHERE id = :id');
  $stmt->bindParam(':id', $id);
  return $stmt->execute();
}


<?php

// Check if form has been submitted
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // Get user input
  $title = $_POST['title'];
  $content = $_POST['content'];
  $rating = $_POST['rating'];

  // Add review to database
  addReview($_SESSION['user_id'], $title, $content, $rating);

  // Redirect to index page
  header('Location: index.php');
  exit;
}

// If form has not been submitted, display empty form
?>
<!DOCTYPE html>
<html>
<head>
  <title>Add Review</title>
</head>
<body>

  <!-- Display review form -->
  <h1>Add a new review:</h1>
  <form action="add_review.php" method="post">
    <input type="text" name="title" placeholder="Title...">
    <textarea name="content" rows="5" cols="30"></textarea>
    <select name="rating">
      <option value="1">1/5</option>
      <option value="2">2/5</option>
      <option value="3">3/5</option>
      <option value="4">4/5</option>
      <option value="5">5/5</option>
    </select>
    <input type="submit" value="Submit">
  </form>

</body>
</html>


<?php

// Get review ID from URL parameter
$id = $_GET['id'];

// Get review data from database
$review = getReviewById($id);

// Display review content
?>
<!DOCTYPE html>
<html>
<head>
  <title>Review: <?php echo $review['title'] ?></title>
</head>
<body>

  <!-- Display review title -->
  <h1><?php echo $review['title'] ?></h1>

  <!-- Display review rating and content -->
  <p>Rating: <?php echo $review['rating'] ?>/5</p>
  <p><?php echo $review['content'] ?></p>

</body>
</html>


// Define the UserReview class
class UserReview {
  private $reviews;

  public function __construct() {
    $this->reviews = [];
  }

  /**
   * Add a new review
   *
   * @param string $reviewerName
   * @param string $reviewTitle
   * @param string $reviewContent
   */
  public function addReview($reviewerName, $reviewTitle, $reviewContent) {
    $newReview = [
      'reviewer' => $reviewerName,
      'title' => $reviewTitle,
      'content' => $reviewContent,
      'timestamp' => date('Y-m-d H:i:s')
    ];
    array_push($this->reviews, $newReview);
  }

  /**
   * Display all reviews
   *
   * @return string
   */
  public function displayReviews() {
    $output = '';
    foreach ($this->reviews as $review) {
      $output .= '<p><strong>' . $review['title'] . '</strong> by ' . $review['reviewer'] . ' on ' . $review['timestamp'] . '</p>';
      $output .= '<p>' . $review['content'] . '</p>';
    }
    return $output;
  }

  /**
   * Get the number of reviews
   *
   * @return int
   */
  public function getNumReviews() {
    return count($this->reviews);
  }
}


// Create a new UserReview instance
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview('John Doe', 'Great product!', 'I love this product!');
$reviewSystem->addReview('Jane Smith', 'Good service', 'The staff were helpful and friendly.');
$reviewSystem->addReview('Bob Johnson', 'Disappointing experience', 'Unfortunately, my order arrived late.');

// Display all reviews
echo $reviewSystem->displayReviews();

// Get the number of reviews
echo 'Number of reviews: ' . $reviewSystem->getNumReviews();


<?php

// Database connection settings
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($mysqli->connect_errno) {
    echo "Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error;
}

function get_reviews($product_id) {
    global $mysqli;

    // Get reviews for a specific product
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $mysqli->query($query);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $reviews[] = array(
                'id' => $row['id'],
                'user_name' => $row['user_name'],
                'review_text' => $row['review_text'],
                'rating' => $row['rating']
            );
        }

        return $reviews;
    } else {
        return false;
    }
}

function submit_review($product_id, $user_name, $review_text, $rating) {
    global $mysqli;

    // Insert new review into database
    $query = "INSERT INTO reviews (product_id, user_name, review_text, rating)
              VALUES ('$product_id', '$user_name', '$review_text', '$rating')";
    $result = $mysqli->query($query);

    if ($result) {
        return true;
    } else {
        echo "Error submitting review: (" . $mysqli->errno . ") " . $mysqli->error;
        return false;
    }
}

// Example usage
$product_id = 1; // ID of the product for which to display reviews

$reviews = get_reviews($product_id);

if ($reviews) {
    foreach ($reviews as $review) {
        echo "User: $review[user_name] | Rating: $review[rating]/5 | Review: $review[review_text]<br>";
    }
} else {
    echo "No reviews found for this product.";
}

?>


<?php

// Include review.php file
include 'review.php';

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $product_id = $_POST['product_id'];
    $user_name = $_POST['user_name'];
    $review_text = $_POST['review_text'];
    $rating = $_POST['rating'];

    // Submit review to database
    if (submit_review($product_id, $user_name, $review_text, $rating)) {
        echo "Review submitted successfully!";
    } else {
        echo "Error submitting review.";
    }
}

?>


// ReviewSystem.php

class ReviewSystem {
    private $db;

    public function __construct() {
        // Connect to database
        $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
    }

    /**
     * Get all reviews for a product.
     *
     * @param int $productId Product ID
     */
    public function getReviews($productId) {
        $stmt = $this->db->prepare('SELECT r.id, u.name, r.rating, r.review FROM Reviews r INNER JOIN Users u ON r.user_id = u.id WHERE r.product_id = ?');
        $stmt->execute([$productId]);
        return $stmt->fetchAll();
    }

    /**
     * Get the average rating of a product.
     *
     * @param int $productId Product ID
     */
    public function getAverageRating($productId) {
        $stmt = $this->db->prepare('SELECT AVG(r.rating) AS avg_rating FROM Reviews r WHERE r.product_id = ?');
        $stmt->execute([$productId]);
        return $stmt->fetchColumn();
    }

    /**
     * Add a new review.
     *
     * @param int $productId Product ID
     * @param string $review Review text
     * @param int $rating Rating (1-5)
     */
    public function addReview($productId, $review, $rating) {
        if ($this->isUserLoggedIn()) {
            // Insert review into database
            $stmt = $this->db->prepare('INSERT INTO Reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)');
            $stmt->execute([$productId, $_SESSION['id'], $rating, $review]);
        } else {
            // User is not logged in
        }
    }

    /**
     * Check if the user is logged in.
     */
    private function isUserLoggedIn() {
        return isset($_SESSION['id']);
    }
}


// index.php

require_once 'ReviewSystem.php';

$reviewSystem = new ReviewSystem();

if (isset($_GET['product_id'])) {
    $productId = $_GET['product_id'];
    $reviews = $reviewSystem->getReviews($productId);
} else {
    // No product ID provided
}

if (isset($_POST['submit'])) {
    $productId = $_POST['product_id'];
    $review = $_POST['review'];
    $rating = $_POST['rating'];

    $reviewSystem->addReview($productId, $review, $rating);

    header('Location: index.php?product_id=' . $productId);
    exit;
}


class UserReview {
    private $id;
    private $reviewText;
    private $rating;

    public function __construct($id = null, $reviewText = '', $rating = 0) {
        $this->id = $id;
        $this->reviewText = $reviewText;
        $this->rating = $rating;
    }

    // Getters
    public function getId() { return $this->id; }
    public function getReviewText() { return $this->reviewText; }
    public function getRating() { return $this->rating; }

    // Setters
    public function setId($id) { $this->id = $id; }
    public function setReviewText($text) {
        if (empty($text)) {
            throw new Exception('Review text cannot be empty.');
        }
        $this->reviewText = $text;
    }
    public function setRating($rating) {
        if (!is_int($rating) || $rating < 0 || $rating > 5) {
            throw new Exception('Invalid rating. Must be an integer between 0 and 5.');
        }
        $this->rating = $rating;
    }

    // Methods
    public static function createReview($reviewText, $rating) {
        return new UserReview(null, $reviewText, $rating);
    }

    public static function getReviews() {
        // Simulate fetching reviews from database (replace with actual implementation)
        return array(
            new UserReview(1, 'Great product!', 5),
            new UserReview(2, 'Average experience.', 3),
        );
    }
}


// Create a new review
$review = UserReview::createReview('Excellent service!', 5);
echo $review->getReviewText() . PHP_EOL; // Excellent service!
echo $review->getRating() . PHP_EOL;     // 5

// Get all reviews
$reviews = UserReview::getReviews();
foreach ($reviews as $r) {
    echo "ID: {$r->getId()} | Review Text: {$r->getReviewText()} | Rating: {$r->getRating()}" . PHP_EOL;
}

// Update a review
$review = new UserReview(1, '', 0);
$review->setReviewText('Even better experience!');
echo $review->getReviewText() . PHP_EOL; // Even better experience!

// Delete a review (not implemented in this example)


/**
 * @class UserReview
 * @brief Represents a user review.
 *
 * @property int $id Review ID (unique identifier)
 * @property string $reviewText Text of the review
 * @property int $rating Rating given by the user (0-5)
 */


<?php

// Include database connection file
require_once 'db.php';

// Function to display review form
function displayReviewForm() {
  echo '<form action="" method="post">';
  echo '<label>Rating:</label>';
  echo '<select name="rating" required>';
  for ($i = 1; $i <= 5; $i++) {
    echo '<option value="' . $i . '">' . $i . '</option>';
  }
  echo '</select><br>';
  echo '<label>Review:</label>';
  echo '<textarea name="review" rows="4" cols="50"></textarea><br>';
  echo '<input type="submit" value="Submit Review">';
  echo '</form>';
}

// Function to add new review
function addReview() {
  if (isset($_POST['rating']) && isset($_POST['review'])) {
    $userId = $_SESSION['user']['id'];
    $productId = $_GET['product_id']; // assume product ID is passed as GET parameter
    $rating = $_POST['rating'];
    $review = $_POST['review'];

    try {
      // Insert review into database
      $stmt = $db->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)');
      $stmt->bindParam(':user_id', $userId);
      $stmt->bindParam(':product_id', $productId);
      $stmt->bindParam(':rating', $rating);
      $stmt->bindParam(':review', $review);
      $stmt->execute();

      // Display success message
      echo '<p>Review added successfully!</p>';
    } catch (PDOException $e) {
      echo '<p>Error adding review: ' . $e->getMessage() . '</p>';
    }
  }
}

// Function to display reviews for a product
function displayReviews($productId) {
  try {
    // Get reviews for product from database
    $stmt = $db->prepare('SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC');
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();

    // Display reviews
    echo '<h2>Reviews for Product ' . $productId . '</h2>';
    while ($review = $stmt->fetch()) {
      echo '<p>' . $review['user']['name'] . ': ' . $review['rating'] . '/5 stars</p>';
      echo '<p>' . $review['review'] . '</p>';
      echo '<hr>';
    }
  } catch (PDOException $e) {
    echo '<p>Error getting reviews: ' . $e->getMessage() . '</p>';
  }
}

?>


<?php require_once 'review.php'; displayReviewForm(); ?>


<?php addReview(); ?>


<?php displayReviews($productId); ?>


// db.php: Database connection file

$mysqli = new mysqli('localhost', 'username', 'password', 'database');

if ($mysqli->connect_error) {
    die("Connection failed: " . $mysqli->connect_error);
}


// review_functions.php: Function to interact with reviews table

require_once 'db.php';

function create_review($user_id, $product_id, $rating, $review) {
    // Prepare the query
    $stmt = $mysqli->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
    
    // Bind parameters
    $stmt->bind_param('iiss', $user_id, $product_id, $rating, $review);
    
    // Execute the query
    if (!$stmt->execute()) {
        echo 'Error creating review: ' . $mysqli->error;
    }
    
    return true;
}

function get_reviews($product_id) {
    // Prepare the query
    $stmt = $mysqli->prepare("SELECT r.id, u.name AS user_name, p.name AS product_name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id WHERE r.product_id = ?");
    
    // Bind parameter
    $stmt->bind_param('i', $product_id);
    
    // Execute the query and fetch results
    if (!$stmt->execute()) {
        echo 'Error fetching reviews: ' . $mysqli->error;
    }
    
    $reviews = array();
    $result = $stmt->get_result();
    
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }
    
    return $reviews;
}

function update_review($review_id, $new_rating, $new_review) {
    // Prepare the query
    $stmt = $mysqli->prepare("UPDATE reviews SET rating = ?, review = ? WHERE id = ?");
    
    // Bind parameters
    $stmt->bind_param('iis', $new_rating, $new_review, $review_id);
    
    // Execute the query
    if (!$stmt->execute()) {
        echo 'Error updating review: ' . $mysqli->error;
    }
}

function delete_review($review_id) {
    // Prepare the query
    $stmt = $mysqli->prepare("DELETE FROM reviews WHERE id = ?");
    
    // Bind parameter
    $stmt->bind_param('i', $review_id);
    
    // Execute the query
    if (!$stmt->execute()) {
        echo 'Error deleting review: ' . $mysqli->error;
    }
}


// Create a new review
create_review(1, 2, 5, "Great product!");

// Get all reviews for a specific product
$reviews = get_reviews(2);
print_r($reviews);

// Update an existing review
update_review(1, 4, "Good product, but not great.");

// Delete a review
delete_review(1);


<?php

// Database connection settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

class Review {
    private $id;
    private $username;
    private $rating;
    private $review;

    public function __construct($data = array()) {
        if (isset($data['id'])) {
            $this->id = $data['id'];
        }
        if (isset($data['username'])) {
            $this->username = $data['username'];
        }
        if (isset($data['rating'])) {
            $this->rating = $data['rating'];
        }
        if (isset($data['review'])) {
            $this->review = $data['review'];
        }
    }

    public function save() {
        global $conn;

        // Check if review already exists
        $query = "SELECT * FROM reviews WHERE username = '" . $this->username . "' AND rating = " . $this->rating;
        $result = $conn->query($query);

        if ($result->num_rows > 0) {
            return true; // Review already exists
        }

        // Insert new review into database
        $sql = "INSERT INTO reviews (username, rating, review) VALUES ('" . $this->username . "', '" . $this->rating . "', '" . $this->review . "')";

        if ($conn->query($sql) === TRUE) {
            return true; // Review saved successfully
        } else {
            echo "Error: " . $sql . "<br>" . $conn->error;
        }
    }

    public static function getAll() {
        global $conn;

        // Retrieve all reviews from database
        $query = "SELECT * FROM reviews";
        $result = $conn->query($query);

        if ($result->num_rows > 0) {
            return $result; // Return all reviews as a result set
        } else {
            return null;
        }
    }

    public static function getReviewById($id) {
        global $conn;

        // Retrieve review by ID from database
        $query = "SELECT * FROM reviews WHERE id = '" . $id . "'";
        $result = $conn->query($query);

        if ($result->num_rows > 0) {
            return $result; // Return review as a result set
        } else {
            return null;
        }
    }
}

?>


<?php

require_once 'review.php';

// Create a new review
$review = new Review(array(
    'username' => 'John Doe',
    'rating' => 5,
    'review' => 'This product is amazing!'
));

if ($review->save()) {
    echo "Review saved successfully!";
} else {
    echo "Error saving review.";
}

// Retrieve all reviews
$reviews = Review::getAll();

if ($reviews !== null) {
    foreach ($reviews as $row) {
        echo $row['username'] . ": " . $row['rating'] . "/5 - " . $row['review'];
    }
} else {
    echo "No reviews found.";
}

?>


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function getReviewsForProduct($productId) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
    $stmt->execute([$productId]);
    return $stmt->fetchAll();
  }

  public function createReview($userId, $productId, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
      $stmt->execute([$userId, $productId, $rating, $review]);
      return true;
    } catch (PDOException $e) {
      return false;
    }
  }

  public function getAverageRatingForProduct($productId) {
    $stmt = $this->db->prepare("SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = ?");
    $stmt->execute([$productId]);
    $result = $stmt->fetch();
    return isset($result['average_rating']) ? $result['average_rating'] : 0;
  }
}


function review($db, $userId, $productId, $rating, $review) {
  try {
    if (isset($_POST['submit'])) {
      $reviewClass = new Review($db);
      $result = $reviewClass->createReview($userId, $productId, $rating, $review);
      if ($result) {
        return "Review created successfully!";
      } else {
        return "Error creating review.";
      }
    }
  } catch (PDOException $e) {
    return "Error: " . $e->getMessage();
  }
}


$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
$userId = $_SESSION['user_id'];
$productId = $_POST['product_id'];
$rating = $_POST['rating'];
$review = $_POST['review'];

echo review($db, $userId, $productId, $rating, $review);


// config.php
$database = array(
    'host' => 'localhost',
    'username' => 'your_username',
    'password' => 'your_password',
    'name' => 'your_database'
);

$conn = new mysqli($database['host'], $database['username'], $database['password'], $database['name']);

function createReview($product_id, $rating, $review) {
    global $conn;
    
    // Check if user is logged in
    if (isset($_SESSION['user_id'])) {
        $query = "INSERT INTO reviews (user_id, product_id, rating, review)
                  VALUES (?, ?, ?, ?)";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("iis", $_SESSION['user_id'], $product_id, $rating, $review);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    } else {
        return 'You must be logged in to create a review.';
    }
}

function updateReview($id, $new_rating, $new_review) {
    global $conn;
    
    // Check if user is allowed to update the review
    $query = "SELECT * FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $id);
    $stmt->execute();
    $result = $stmt->get_result();
    
    if ($result && $result->fetch_assoc()['user_id'] == $_SESSION['user_id']) {
        // Update review
        $query = "UPDATE reviews SET rating = ?, review = ?
                  WHERE id = ?";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("iis", $new_rating, $new_review, $id);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    } else {
        return 'You are not allowed to update this review.';
    }
}

function deleteReview($id) {
    global $conn;
    
    // Check if user is allowed to delete the review
    $query = "SELECT * FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $id);
    $stmt->execute();
    $result = $stmt->get_result();
    
    if ($result && $result->fetch_assoc()['user_id'] == $_SESSION['user_id']) {
        // Delete review
        $query = "DELETE FROM reviews WHERE id = ?";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("i", $id);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    } else {
        return 'You are not allowed to delete this review.';
    }
}

function getReviewsForProduct($product_id) {
    global $conn;
    
    // Get reviews for product
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    return $stmt->get_result();
}

// Example usage:
if (isset($_POST['create_review'])) {
    $result = createReview($_POST['product_id'], $_POST['rating'], $_POST['review']);
    echo json_encode($result);
} elseif (isset($_POST['update_review'])) {
    $result = updateReview($_POST['id'], $_POST['new_rating'], $_POST['new_review']);
    echo json_encode($result);
} elseif (isset($_POST['delete_review'])) {
    $result = deleteReview($_POST['id']);
    echo json_encode($result);
}


// database connection settings
$dsn = 'mysql:host=localhost;dbname=database_name';
$username = 'username';
$password = 'password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// user review class
class ReviewSystem {
    private $pdo;

    function __construct() {
        $this->pdo = $GLOBALS['pdo'];
    }

    // create a new review
    public function createReview($user_id, $product_id, $review, $rating) {
        try {
            $stmt = $this->pdo->prepare('INSERT INTO reviews (user_id, product_id, review, rating) VALUES (:user_id, :product_id, :review, :rating)');
            $stmt->execute(array(':user_id' => $user_id, ':product_id' => $product_id, ':review' => $review, ':rating' => $rating));
            return true;
        } catch (PDOException $e) {
            echo 'Error creating review: ' . $e->getMessage();
            return false;
        }
    }

    // get all reviews for a product
    public function getReviews($product_id) {
        try {
            $stmt = $this->pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
            $stmt->execute(array(':product_id' => $product_id));
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo 'Error getting reviews: ' . $e->getMessage();
            return array();
        }
    }

    // get a single review by id
    public function getReview($review_id) {
        try {
            $stmt = $this->pdo->prepare('SELECT * FROM reviews WHERE id = :id');
            $stmt->execute(array(':id' => $review_id));
            return $stmt->fetch();
        } catch (PDOException $e) {
            echo 'Error getting review: ' . $e->getMessage();
            return null;
        }
    }

    // update a review
    public function updateReview($review_id, $review, $rating) {
        try {
            $stmt = $this->pdo->prepare('UPDATE reviews SET review = :review, rating = :rating WHERE id = :id');
            $stmt->execute(array(':id' => $review_id, ':review' => $review, ':rating' => $rating));
            return true;
        } catch (PDOException $e) {
            echo 'Error updating review: ' . $e->getMessage();
            return false;
        }
    }

    // delete a review
    public function deleteReview($review_id) {
        try {
            $stmt = $this->pdo->prepare('DELETE FROM reviews WHERE id = :id');
            $stmt->execute(array(':id' => $review_id));
            return true;
        } catch (PDOException $e) {
            echo 'Error deleting review: ' . $e->getMessage();
            return false;
        }
    }
}


// create a new instance of the ReviewSystem class
$reviewSystem = new ReviewSystem();

// create a new review
$user_id = 1;
$product_id = 1;
$review = 'This product is great!';
$rating = 5;
$created_review = $reviewSystem->createReview($user_id, $product_id, $review, $rating);

// get all reviews for a product
$product_reviews = $reviewSystem->getReviews($product_id);

// update an existing review
$review_id = 1;
$new_review = 'This product is even better!';
$new_rating = 5;
$updated_review = $reviewSystem->updateReview($review_id, $new_review, $new_rating);

// delete a review
$deleted_review = $reviewSystem->deleteReview($review_id);


<?php

// Require database connection file
require_once 'db.php';

function getUserReviews($userId) {
  // Retrieve reviews from database
  $query = "SELECT * FROM reviews WHERE user_id = :user_id ORDER BY created_at DESC";
  $stmt = db()->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function addReview($reviewData) {
  // Insert review into database
  $query = "INSERT INTO reviews (user_id, review_text, rating) VALUES (:user_id, :review_text, :rating)";
  $stmt = db()->prepare($query);
  $stmt->bindParam(':user_id', $reviewData['user_id']);
  $stmt->bindParam(':review_text', $reviewData['review_text']);
  $stmt->bindParam(':rating', $reviewData['rating']);
  return $stmt->execute();
}

function displayReviews() {
  // Retrieve reviews from database and display on page
  $reviews = getUserReviews(getCurrentUserId());
  echo '<h2>Recent Reviews:</h2>';
  foreach ($reviews as $review) {
    echo "<p>$review[review_text] (Rating: $review[rating]/5)</p>";
  }
}

?>


// Add review from user input form (e.g., index.php)
$reviewData = array(
  'user_id' => $_SESSION['user_id'],
  'review_text' => $_POST['review_text'],
  'rating' => $_POST['rating']
);
addReview($reviewData);

// Display reviews on page
displayReviews();


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  public function submitReview($user_id, $product_id, $rating, $review) {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->execute(array(
      ':user_id' => $user_id,
      ':product_id' => $product_id,
      ':rating' => $rating,
      ':review' => $review
    ));
  }

  public function getAllReviews() {
    $stmt = $this->db->query("SELECT r.id, u.name, p.name as product_name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id");
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getReviewsForProduct($product_id) {
    $stmt = $this->db->prepare("SELECT r.id, u.name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = :product_id");
    $stmt->execute(array(':product_id' => $product_id));
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getReviewsForUser($user_id) {
    $stmt = $this->db->prepare("SELECT r.id, p.name as product_name, r.rating, r.review FROM reviews r JOIN products p ON r.product_id = p.id WHERE r.user_id = :user_id");
    $stmt->execute(array(':user_id' => $user_id));
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }
}


$review = new Review();

// Submit a review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review_text = "I love this product!";
$review->submitReview($user_id, $product_id, $rating, $review_text);

// Get all reviews
$reviews = $review->getAllReviews();
print_r($reviews);

// Get reviews for a specific product
$product_reviews = $review->getReviewsForProduct(1);
print_r($product_reviews);

// Get reviews for a specific user
$user_reviews = $review->getReviewsForUser(1);
print_r($user_reviews);


class Review {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
        $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    }

    // Create a review
    public function createReview($productId, $userId, $rating, $reviewText) {
        try {
            $query = "INSERT INTO reviews (product_id, user_id, rating, review_text)
                      VALUES (:product_id, :user_id, :rating, :review_text)";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':user_id', $userId);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':review_text', $reviewText);
            $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
        }
    }

    // Read all reviews
    public function getReviews() {
        try {
            $query = "SELECT r.id, r.product_id, u.username, p.name, r.rating, r.review_text FROM reviews r
                      JOIN users u ON r.user_id = u.id
                      JOIN products p ON r.product_id = p.id";
            $stmt = $this->db->prepare($query);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
        }
    }

    // Read a single review
    public function getReview($id) {
        try {
            $query = "SELECT r.id, r.product_id, u.username, p.name, r.rating, r.review_text FROM reviews r
                      JOIN users u ON r.user_id = u.id
                      JOIN products p ON r.product_id = p.id WHERE r.id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', $id);
            $stmt->execute();
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
        }
    }

    // Update a review
    public function updateReview($id, $rating, $reviewText) {
        try {
            $query = "UPDATE reviews SET rating = :rating, review_text = :review_text WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', $id);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':review_text', $reviewText);
            $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
        }
    }

    // Delete a review
    public function deleteReview($id) {
        try {
            $query = "DELETE FROM reviews WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', $id);
            $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
        }
    }
}


$review = new Review();

// Create a review
$productId = 1;
$userId = 2;
$rating = 4;
$reviewText = 'This is a great product!';
$review->createReview($productId, $userId, $rating, $reviewText);

// Read all reviews
$reviews = $review->getReviews();
foreach ($reviews as $review) {
    echo "ID: " . $review['id'] . ", Product ID: " . $review['product_id'] . ", Username: " . $review['username'] . ", Rating: " . $review['rating'] . ", Review Text: " . $review['review_text'];
}

// Read a single review
$reviewId = 1;
$singleReview = $review->getReview($reviewId);
echo "ID: " . $singleReview['id'] . ", Product ID: " . $singleReview['product_id'] . ", Username: " . $singleReview['username'] . ", Rating: " . $singleReview['rating'] . ", Review Text: " . $singleReview['review_text'];

// Update a review
$reviewId = 1;
$rating = 5;
$reviewText = 'This is an amazing product!';
$review->updateReview($reviewId, $rating, $reviewText);

// Delete a review
$reviewId = 1;
$review->deleteReview($reviewId);


class Review {
  private $id;
  private $rating;
  private $title;
  private $content;

  public function __construct($id, $rating, $title, $content) {
    $this->id = $id;
    $this->rating = $rating;
    $this->title = $title;
    $this->content = $content;
  }

  public function getId() {
    return $this->id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getTitle() {
    return $this->title;
  }

  public function getContent() {
    return $this->content;
  }
}


class ReviewRepository {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function getAllReviews() {
    $query = "SELECT * FROM reviews";
    $stmt = $this->db->prepare($query);
    $stmt->execute();
    $reviews = array();
    while ($row = $stmt->fetch()) {
      $review = new Review($row['id'], $row['rating'], $row['title'], $row['content']);
      $reviews[] = $review;
    }
    return $reviews;
  }

  public function getReviewById($id) {
    $query = "SELECT * FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    $review = $stmt->fetch();
    return new Review($review['id'], $review['rating'], $review['title'], $review['content']);
  }

  public function addReview($rating, $title, $content) {
    $query = "INSERT INTO reviews (rating, title, content) VALUES (:rating, :title, :content)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->execute();
  }
}


class ReviewController {
  private $repository;

  public function __construct($repository) {
    $this->repository = $repository;
  }

  public function getAllReviews() {
    return $this->repository->getAllReviews();
  }

  public function getReviewById($id) {
    return $this->repository->getReviewById($id);
  }

  public function addReview($rating, $title, $content) {
    $this->repository->addReview($rating, $title, $content);
  }
}


class ReviewService {
  private $controller;

  public function __construct($controller) {
    $this->controller = $controller;
  }

  public function getAllReviews() {
    return $this->controller->getAllReviews();
  }

  public function getReviewById($id) {
    return $this->controller->getReviewById($id);
  }

  public function addReview($rating, $title, $content) {
    $this->controller->addReview($rating, $title, $content);
  }
}


function review() {
  // Create a new instance of the ReviewService class.
  $service = new ReviewService(new ReviewController(new ReviewRepository(DB)));

  // Get all reviews.
  $reviews = $service->getAllReviews();

  // Display all reviews.
  foreach ($reviews as $review) {
    echo "Title: " . $review->getTitle() . "<br>";
    echo "Rating: " . $review->getRating() . "/5<br>";
    echo "Content: " . $review->getContent() . "<br><hr>";
  }

  // Get a review by id.
  $review = $service->getReviewById(1);

  // Display the review.
  if ($review) {
    echo "Title: " . $review->getTitle() . "<br>";
    echo "Rating: " . $review->getRating() . "/5<br>";
    echo "Content: " . $review->getContent() . "<br><hr>";
  }

  // Add a new review.
  $service->addReview(4, 'New Review', 'This is a new review.');
}


// Review class
class Review {
  private $db;

  function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  }

  // Get all reviews for a product
  function getReviews($productId) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :productId");
    $stmt->bindParam(':productId', $productId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Add a new review
  function addReview($product_id, $reviewer, $rating, $comment) {
    $stmt = $this->db->prepare("INSERT INTO reviews (product_id, reviewer, rating, comment) VALUES (:product_id, :reviewer, :rating, :comment)");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':reviewer', $reviewer);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    return $stmt->execute();
  }

  // Get the average rating for a product
  function getAverageRating($productId) {
    $stmt = $this->db->prepare("SELECT AVG(rating) FROM reviews WHERE product_id = :productId");
    $stmt->bindParam(':productId', $productId);
    $stmt->execute();
    return $stmt->fetchColumn();
  }
}

// User review system
class ReviewSystem {
  private $review;

  function __construct() {
    $this->review = new Review();
  }

  // Display a form to add a new review
  function displayAddReviewForm($productId) {
    ?>
    <form action="" method="post">
      <label for="reviewer">Your name:</label>
      <input type="text" id="reviewer" name="reviewer"><br><br>
      <label for="rating">Rating (1-5):</label>
      <select id="rating" name="rating">
        <?php for ($i = 1; $i <= 5; $i++) { ?>
          <option value="<?php echo $i ?>"><?php echo $i ?></option>
        <?php } ?>
      </select><br><br>
      <label for="comment">Comment:</label>
      <textarea id="comment" name="comment"></textarea><br><br>
      <input type="submit" name="add_review" value="Add review">
    </form>
    <?php
  }

  // Process a new review submission
  function processReviewSubmission($productId) {
    if (isset($_POST['add_review'])) {
      $reviewer = $_POST['reviewer'];
      $rating = $_POST['rating'];
      $comment = $_POST['comment'];

      if ($this->review->addReview($productId, $reviewer, $rating, $comment)) {
        echo "Thank you for your review!";
      } else {
        echo "Error adding review.";
      }
    }
  }

  // Display a list of reviews
  function displayReviews($productId) {
    $reviews = $this->review->getReviews($productId);
    ?>
    <h2>Reviews:</h2>
    <?php foreach ($reviews as $review) { ?>
      <p><strong><?php echo $review['reviewer'] ?></strong> gave this product a rating of <?php echo $review['rating'] ?>/5 and wrote: <?php echo $review['comment'] ?></p>
    <?php } ?>
    <?php
  }

  // Display the average rating for a product
  function displayAverageRating($productId) {
    $averageRating = $this->review->getAverageRating($productId);
    ?>
    <h2>Average Rating:</h2>
    <p><?php echo 'The average rating for this product is: ' . $averageRating ?>/5</p>
    <?php
  }
}


$reviewSystem = new ReviewSystem();

// Display a form to add a new review for product #123
$productId = 123;
$reviewSystem->displayAddReviewForm($productId);

// Process a new review submission
if (isset($_POST['add_review'])) {
  $reviewSystem->processReviewSubmission($productId);
}

// Display reviews for product #123
$reviews = $reviewSystem->getReviews($productId);
?>

<h2>Reviews:</h2>
<?php foreach ($reviews as $review) { ?>
  <p><strong><?php echo $review['reviewer'] ?></strong> gave this product a rating of <?php echo $review['rating'] ?>/5 and wrote: <?php echo $review['comment'] ?></p>
<?php } ?>

// Display the average rating for product #123
$averageRating = $reviewSystem->getAverageRating($productId);
?>
<h2>Average Rating:</h2>
<p><?php echo 'The average rating for this product is: ' . $averageRating ?>/5</p>


<?php
class Review {
  private $id;
  private $user_id;
  private $product_id;
  private $rating;
  private $comment;

  public function __construct($user_id, $product_id, $rating, $comment) {
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->comment = $comment;
  }

  public function getId() { return $this->id; }
  public function getUserId() { return $this->user_id; }
  public function getProductId() { return $this->product_id; }
  public function getRating() { return $this->rating; }
  public function getComment() { return $this->comment; }
}
?>


<?php
function create_review($user_id, $product_id, $rating, $comment) {
  // assume that we're using a database to store reviews
  // for simplicity, let's use an array in this example
  global $reviews;
  $new_review = new Review($user_id, $product_id, $rating, $comment);
  $reviews[] = $new_review;
  return $new_review->getId();
}

function get_reviews_for_product($product_id) {
  global $reviews;
  $product_reviews = array_filter($reviews, function($review) use ($product_id) {
    return $review->getProductId() == $product_id;
  });
  usort($product_reviews, function($a, $b) {
    return $b->getRating() - $a->getRating();
  });
  return $product_reviews;
}

function average_rating_for_product($product_id) {
  global $reviews;
  $product_reviews = get_reviews_for_product($product_id);
  if (empty($product_reviews)) {
    return 0;
  }
  $sum = array_sum(array_column($product_reviews, 'rating'));
  return round($sum / count($product_reviews));
}

function display_reviews($product_id) {
  global $reviews;
  $product_reviews = get_reviews_for_product($product_id);
  foreach ($product_reviews as $review) {
    echo "<p>Rating: " . $review->getRating() . ", Comment: " . $review->getComment() . "</p>";
  }
}
?>


<?php
include 'review_functions.php';

// create some reviews
$user1_id = 123;
$user2_id = 456;
$product_id = 789;

create_review($user1_id, $product_id, 5, "Great product!");
create_review($user2_id, $product_id, 4, "Good product, but not perfect.");

// display reviews for a product
display_reviews($product_id);

// average rating for a product
echo "Average rating: " . average_rating_for_product($product_id);
?>


// config.php (database connection settings)
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'database';

// connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// functions.php (review functionality)
function get_reviews($product_name) {
  global $conn;
  $query = "SELECT * FROM reviews WHERE product_name = '$product_name'";
  $result = $conn->query($query);
  return $result;
}

function add_review($user_id, $product_name, $review_text, $rating) {
  global $conn;
  $query = "INSERT INTO reviews (user_id, product_name, review_text, rating)
            VALUES ('$user_id', '$product_name', '$review_text', '$rating')";
  $result = $conn->query($query);
  return $result;
}

function delete_review($id) {
  global $conn;
  $query = "DELETE FROM reviews WHERE id = '$id'";
  $result = $conn->query($query);
  return $result;
}


// index.php (user review form)
<?php include 'functions.php'; ?>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <label for="product_name">Product Name:</label>
  <input type="text" id="product_name" name="product_name"><br><br>
  <label for="review_text">Review Text:</label>
  <textarea id="review_text" name="review_text"></textarea><br><br>
  <label for="rating">Rating (1-5):</label>
  <input type="number" id="rating" name="rating"><br><br>
  <button type="submit">Submit Review</button>
</form>

<?php
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  $product_name = $_POST['product_name'];
  $review_text = $_POST['review_text'];
  $rating = $_POST['rating'];

  if (!empty($product_name) && !empty($review_text) && !empty($rating)) {
    add_review($_SESSION['user_id'], $product_name, $review_text, $rating);
    header('Location: index.php');
  } else {
    echo 'Please fill out all fields.';
  }
}
?>


// database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

function db_connect() {
    global $db_host, $db_username, $db_password, $db_name;
    
    $conn = new mysqli($db_host, $db_username, $db_password, $db_name);
    
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    
    return $conn;
}

function add_review($user_id, $product_id, $rating, $review) {
    global $db_connect;
    
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES (?, ?, ?, ?)";
            
    $stmt = db_connect()->prepare($sql);
    $stmt->bind_param("iiii", $user_id, $product_id, $rating, $review);
    $result = $stmt->execute();
    
    if (!$result) {
        return "Error: " . $stmt->error;
    }
    
    return true;
}

function view_reviews($product_id = null) {
    global $db_connect;
    
    if ($product_id !== null) {
        $sql = "SELECT * FROM reviews WHERE product_id = ?";
        $stmt = db_connect()->prepare($sql);
        $stmt->bind_param("i", $product_id);
        $result = $stmt->execute();
        
        return $stmt->get_result();
    } else {
        $sql = "SELECT * FROM reviews";
        $result = db_connect()->query($sql);
        
        return $result;
    }
}

function update_review($review_id, $rating, $review) {
    global $db_connect;
    
    $sql = "UPDATE reviews SET rating = ?, review = ?
            WHERE id = ?";
            
    $stmt = db_connect()->prepare($sql);
    $stmt->bind_param("iii", $rating, $review, $review_id);
    $result = $stmt->execute();
    
    if (!$result) {
        return "Error: " . $stmt->error;
    }
    
    return true;
}

function delete_review($review_id) {
    global $db_connect;
    
    $sql = "DELETE FROM reviews WHERE id = ?";
            
    $stmt = db_connect()->prepare($sql);
    $stmt->bind_param("i", $review_id);
    $result = $stmt->execute();
    
    if (!$result) {
        return "Error: " . $stmt->error;
    }
    
    return true;
}


// Add a review
$user_id = 1; // user ID
$product_id = 1; // product ID
$rating = 5;
$review = "Great product!";
$result = add_review($user_id, $product_id, $rating, $review);
if ($result !== true) {
    echo "Error adding review: " . $result;
}

// View reviews for a specific product
$product_id = 1; // product ID
$result = view_reviews($product_id);
if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
        echo "Review by " . $row["user_id"] . ": " . $row["review"];
    }
} else {
    echo "No reviews found.";
}

// Update a review
$review_id = 1; // review ID
$rating = 4;
$review = "Good product!";
$result = update_review($review_id, $rating, $review);
if ($result !== true) {
    echo "Error updating review: " . $result;
}

// Delete a review
$review_id = 1; // review ID
$result = delete_review($review_id);
if ($result !== true) {
    echo "Error deleting review: " . $result;
}


// config.php: Database configuration file
<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

$connection = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}
?>

// review_functions.php: Functions for interacting with reviews
<?php

function create_review($user_id, $product_id, $rating, $review) {
    global $connection;
    $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $connection->prepare($query);
    $stmt->bind_param("iis", $user_id, $product_id, $rating, $review);
    $result = $stmt->execute();
    return $result;
}

function get_reviews() {
    global $connection;
    $query = "SELECT * FROM reviews";
    $result = $connection->query($query);
    return $result;
}

function delete_review($id) {
    global $connection;
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $connection->prepare($query);
    $stmt->bind_param("i", $id);
    $result = $stmt->execute();
    return $result;
}

?>


// Create a new review
$user_id = 1; // ID of the user creating the review
$product_id = 1; // ID of the product being reviewed
$rating = 5; // Rating given by the user (out of 5)
$review = "Great product!"; // User's review

$result = create_review($user_id, $product_id, $rating, $review);
if ($result) {
    echo "Review created successfully!";
} else {
    echo "Failed to create review.";
}

// Get all reviews
$result = get_reviews();
while ($row = $result->fetch_assoc()) {
    echo "ID: " . $row['id'] . ", User ID: " . $row['user_id'] . ", Product ID: " . $row['product_id'] . ", Rating: " . $row['rating'] . ", Review: " . $row['review'];
}

// Delete a review
$review_id = 1; // ID of the review to delete

$result = delete_review($review_id);
if ($result) {
    echo "Review deleted successfully!";
} else {
    echo "Failed to delete review.";
}


// database connection info (update with your own)
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'database');

function dbConnect() {
    global $conn;
    try {
        $conn = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USER, DB_PASSWORD);
        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
        die('ERROR: ' . $e->getMessage());
    }
}

function dbDisconnect() {
    global $conn;
    $conn = null;
}

function createReview($user_id, $product_id, $rating, $review_text) {
    try {
        dbConnect();
        $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (:user_id, :product_id, :rating, :review_text)");
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review_text', $review_text);
        return $stmt->execute();
    } catch (PDOException $e) {
        echo "ERROR: " . $e->getMessage();
        return false;
    }
}

function getReviews($product_id) {
    try {
        dbConnect();
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo "ERROR: " . $e->getMessage();
        return false;
    }
}

function getReview($id) {
    try {
        dbConnect();
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE id = :id");
        $stmt->bindParam(':id', $id);
        $stmt->execute();
        return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo "ERROR: " . $e->getMessage();
        return false;
    }
}

function updateReview($id, $rating = null, $review_text = null) {
    try {
        dbConnect();
        if ($rating !== null) {
            $stmt = $conn->prepare("UPDATE reviews SET rating = :rating WHERE id = :id");
            $stmt->bindParam(':rating', $rating);
        } elseif ($review_text !== null) {
            $stmt = $conn->prepare("UPDATE reviews SET review_text = :review_text WHERE id = :id");
            $stmt->bindParam(':review_text', $review_text);
        }
        if (isset($stmt)) {
            $stmt->bindParam(':id', $id);
            return $stmt->execute();
        } else {
            throw new PDOException('No update statement specified');
        }
    } catch (PDOException $e) {
        echo "ERROR: " . $e->getMessage();
        return false;
    }
}

function deleteReview($id) {
    try {
        dbConnect();
        $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
        $stmt->bindParam(':id', $id);
        return $stmt->execute();
    } catch (PDOException $e) {
        echo "ERROR: " . $e->getMessage();
        return false;
    }
}


dbConnect();

$user_id = 1; // user ID for current user
$product_id = 10; // product ID to review

// create new review
$rating = 5;
$review_text = "This is an amazing product!";
$new_review = createReview($user_id, $product_id, $rating, $review_text);

if ($new_review) {
    echo "New review created successfully.";
}

// get all reviews for a product
$product_reviews = getReviews($product_id);
print_r($product_reviews);

// get single review by ID
$single_review = getReview(1); // replace with actual review ID
print_r($single_review);

// update existing review
$review_id = 1; // replace with actual review ID
updateReview($review_id, null, 'Updated review text');

// delete review
deleteReview(2); // replace with actual review ID


<?php

// Include database connection script
require_once 'db_connection.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

function display_reviews($product_id) {
    global $conn;

    // Get all reviews for the product
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    $reviews = $stmt->fetchAll();

    // Display reviews
    foreach ($reviews as $review) {
        echo '<div class="review">';
        echo '<h2>Rating: ' . $review['rating'] . '/5</h2>';
        echo '<p>' . nl2br($review['review_text']) . '</p>';
        echo '<p>Posted by User ID: ' . $review['user_id'] . '</p>';
        echo '</div>';
    }
}

function add_review($product_id, $rating, $review_text) {
    global $conn;

    // Check if user is logged in
    if (!isset($_SESSION['user_id'])) {
        header('Location: login.php');
        exit;
    }

    try {
        // Insert new review into database
        $query = "INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES (:product_id, :user_id, :rating, :review_text)";
        $stmt = $conn->prepare($query);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $_SESSION['user_id']);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->execute();
    } catch (PDOException $e) {
        echo 'Error adding review: ' . $e->getMessage();
    }
}

?>


<div class="product-reviews">
    <?php display_reviews(123); ?>
</div>


<form method="post" action="review.php">
    <input type="hidden" name="product_id" value="123">
    <label>Rating:</label>
    <select name="rating">
        <option value="1">1/5</option>
        <option value="2">2/5</option>
        <!-- ... -->
        <option value="5">5/5</option>
    </select>

    <label>Review Text:</label>
    <textarea name="review_text"></textarea>

    <button type="submit" name="add_review">Add Review</button>
</form>


<?php

// Configuration for database connection
$dsn = 'mysql:host=localhost;dbname=reviews';
$username = 'your_username';
$password = 'your_password';

try {
    // Establish a connection to the database
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// Function to create a new review
function createReview(array $data): int {
    $query = "INSERT INTO reviews (title, content, rating) VALUES (:title, :content, :rating)";
    $stmt = $pdo->prepare($query);
    $stmt->execute($data);
    return $pdo->lastInsertId();
}

// Function to get all reviews
function getReviews(): array {
    $query = "SELECT * FROM reviews ORDER BY created_at DESC";
    $stmt = $pdo->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to get a review by its ID
function getReview(int $id): ?array {
    $query = "SELECT * FROM reviews WHERE id = :id";
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
}

// Function to update a review
function updateReview(int $id, array $data): bool {
    $query = "UPDATE reviews SET title = :title, content = :content, rating = :rating WHERE id = :id";
    $stmt = $pdo->prepare($query);
    return $stmt->execute($data + ['id' => $id]);
}

// Function to delete a review
function deleteReview(int $id): bool {
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $pdo->prepare($query);
    return $stmt->execute(['id' => $id]);
}

// Example usage:
$reviewData = ['title' => 'Example Review', 'content' => 'This is an example review.', 'rating' => 4];
$newReviewId = createReview($reviewData);

echo "New review created with ID: $newReviewId
";

$reviews = getReviews();
print_r($reviews);

$existingReview = getReview(1);
var_dump($existingReview);

$updatedReviewId = updateReview(1, ['title' => 'Updated Review', 'content' => 'This is an updated review.', 'rating' => 5]);
echo "Review updated with ID: $updatedReviewId
";

deleteReview(2);

?>


<?php

class ReviewDB {
    private $db_host;
    private $db_username;
    private $db_password;
    private $db_name;

    public function __construct() {
        $this->db_host = 'your_database_host';
        $this->db_username = 'your_database_username';
        $this->db_password = 'your_database_password';
        $this->db_name = 'your_database_name';

        try {
            $this->conn = new PDO('mysql:host=' . $this->db_host . ';dbname=' . $this->db_name, $this->db_username, $this->db_password);
            $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        } catch (PDOException $e) {
            echo "Connection failed: " . $e->getMessage();
        }
    }

    public function addReview($product_id, $user_id, $rating, $review) {
        try {
            $stmt = $this->conn->prepare('INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)');
            $stmt->bindParam(1, $product_id);
            $stmt->bindParam(2, $user_id);
            $stmt->bindParam(3, $rating);
            $stmt->bindParam(4, $review);
            $stmt->execute();
        } catch (PDOException $e) {
            echo "Error adding review: " . $e->getMessage();
        }
    }

    public function getReviews($product_id = null) {
        try {
            if ($product_id === null) {
                $stmt = $this->conn->prepare('SELECT * FROM reviews');
                $stmt->execute();
            } else {
                $stmt = $this->conn->prepare('SELECT * FROM reviews WHERE product_id = ?');
                $stmt->bindParam(1, $product_id);
                $stmt->execute();
            }

            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo "Error getting reviews: " . $e->getMessage();
        }
    }
}


<?php

require_once 'review_db.php';

$review_db = new ReviewDB();

if (isset($_POST['submit'])) {
    $product_id = $_POST['product_id'];
    $user_id = $_POST['user_id'];
    $rating = $_POST['rating'];
    $review = $_POST['review'];

    try {
        $review_db->addReview($product_id, $user_id, $rating, $review);
        echo "Review submitted successfully!";
    } catch (PDOException $e) {
        echo "Error submitting review: " . $e->getMessage();
    }
}

$reviews = $review_db->getReviews();

?>

<form method="post">
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id"><br><br>

    <label for="user_id">User ID:</label>
    <input type="text" id="user_id" name="user_id"><br><br>

    <label for="rating">Rating:</label>
    <input type="number" id="rating" name="rating"><br><br>

    <label for="review">Review:</label>
    <textarea id="review" name="review"></textarea><br><br>

    <input type="submit" value="Submit Review">
</form>

<h2>Reviews:</h2>

<?php foreach ($reviews as $review): ?>
    <p>User ID: <?= $review['user_id'] ?>, Rating: <?= $review['rating'] ?>/5, Review: <?= $review['review'] ?></p>
<?php endforeach; ?>


// Review model class
class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function createReview($product_id, $user_id, $rating, $title, $content) {
    // Insert review into database
    $query = "INSERT INTO reviews (product_id, user_id, rating, title, content)
              VALUES (?, ?, ?, ?, ?)";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$product_id, $user_id, $rating, $title, $content]);
    return $this->db->lastInsertId();
  }

  public function getReviews($product_id) {
    // Retrieve reviews for a specific product
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$product_id]);
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getAverageRating($product_id) {
    // Retrieve average rating for a specific product
    $query = "SELECT AVG(rating) AS avg_rating FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$product_id]);
    return $stmt->fetchColumn();
  }

  public function getReviewCount($product_id) {
    // Retrieve count of reviews for a specific product
    $query = "SELECT COUNT(*) AS review_count FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$product_id]);
    return $stmt->fetchColumn();
  }
}

// Example usage:
$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
$reviewModel = new Review($db);

$product_id = 123;
$user_id = 456;

$title = "Great product!";
$content = "I love this product!";

$rating = 5;

$reviewId = $reviewModel->createReview($product_id, $user_id, $rating, $title, $content);
echo "Review created with ID: $reviewId
";

$reviews = $reviewModel->getReviews($product_id);
print_r($reviews);

$averageRating = $reviewModel->getAverageRating($product_id);
echo "Average rating: $averageRating
";

$reviewCount = $reviewModel->getReviewCount($product_id);
echo "Number of reviews: $reviewCount
";


// database connection settings
$host = 'localhost';
$dbname = 'review_system';
$username = 'root';
$password = '';

// connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

function createUser($data) {
  global $conn;
  
  // insert user into database
  $query = "INSERT INTO users (name, email) VALUES (:name, :email)";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':name', $data['name']);
  $stmt->bindParam(':email', $data['email']);
  $stmt->execute();
  
  // get the user's ID
  $userId = $conn->lastInsertId();
  
  return $userId;
}

function createReview($data) {
  global $conn;
  
  // insert review into database
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':user_id', $data['user_id']);
  $stmt->bindParam(':product_id', $data['product_id']);
  $stmt->bindParam(':rating', $data['rating']);
  $stmt->bindParam(':review', $data['review']);
  $stmt->execute();
  
  // get the review's ID
  $reviewId = $conn->lastInsertId();
  
  return $reviewId;
}

function getReviews($productId) {
  global $conn;
  
  // fetch reviews from database
  $query = "SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();
  $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
  
  return $reviews;
}

function getReview($reviewId) {
  global $conn;
  
  // fetch review from database
  $query = "SELECT * FROM reviews WHERE id = :id";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':id', $reviewId);
  $stmt->execute();
  $review = $stmt->fetch(PDO::FETCH_ASSOC);
  
  return $review;
}

function updateReview($data) {
  global $conn;
  
  // update review in database
  $query = "UPDATE reviews SET rating = :rating, review = :review WHERE id = :id";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':rating', $data['rating']);
  $stmt->bindParam(':review', $data['review']);
  $stmt->bindParam(':id', $data['id']);
  $stmt->execute();
}

function deleteReview($reviewId) {
  global $conn;
  
  // delete review from database
  $query = "DELETE FROM reviews WHERE id = :id";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':id', $reviewId);
  $stmt->execute();
}


// create a user
$userData = array('name' => 'John Doe', 'email' => 'john@example.com');
$userId = createUser($userData);

// create a review
$productData = array('id' => 1, 'rating' => 5, 'review' => 'Great product!');
$reviewId = createReview(array('user_id' => $userId, 'product_id' => 1, 'rating' => 5, 'review' => 'Great product!'));

// get reviews for a product
$productId = 1;
$reviews = getReviews($productId);
print_r($reviews);

// get a specific review
$reviewId = 1;
$review = getReview($reviewId);
print_r($review);

// update a review
$reviewData = array('id' => $reviewId, 'rating' => 4, 'review' => 'Good product!');
updateReview($reviewData);

// delete a review
$deleteReview($reviewId);


// Review Model
class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
  }

  public function createReview($user_id, $product_id, $rating, $comment) {
    $sql = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:user_id, :product_id, :rating, :comment)";
    $stmt = $this->db->prepare($sql);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    return $stmt->execute();
  }

  public function getReviewsForProduct($product_id) {
    $sql = "SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC";
    $stmt = $this->db->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    return $stmt->execute() ? $stmt->fetchAll(PDO::FETCH_ASSOC) : array();
  }

  public function getReviewsForUser($user_id) {
    $sql = "SELECT * FROM reviews WHERE user_id = :user_id ORDER BY created_at DESC";
    $stmt = $this->db->prepare($sql);
    $stmt->bindParam(':user_id', $user_id);
    return $stmt->execute() ? $stmt->fetchAll(PDO::FETCH_ASSOC) : array();
  }
}


// Create a new review
if (isset($_POST['submit'])) {
  $review = new Review();
  $result = $review->createReview($_SESSION['user_id'], $_POST['product_id'], $_POST['rating'], $_POST['comment']);
  if ($result) {
    echo "Review created successfully!";
  } else {
    echo "Error creating review.";
  }
}

// Get reviews for a product
$reviews = new Review();
$product_reviews = $reviews->getReviewsForProduct($_GET['product_id']);

// Get reviews for a user
$user_reviews = $reviews->getReviewsForUser($_SESSION['user_id']);


<!-- Create review form -->
<form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
  <input type="hidden" name="product_id" value="<?php echo $_GET['product_id']; ?>">
  <label for="rating">Rating:</label>
  <select id="rating" name="rating">
    <?php foreach (range(1, 5) as $i) { ?>
      <option value="<?php echo $i; ?>"><?php echo $i; ?>/5</option>
    <?php } ?>
  </select>
  <br><br>
  <label for="comment">Comment:</label>
  <textarea id="comment" name="comment"></textarea>
  <br><br>
  <input type="submit" name="submit" value="Submit Review">
</form>

<!-- Display reviews for a product -->
<h2>Reviews for <?php echo $_GET['product_id']; ?></h2>
<ul>
  <?php foreach ($product_reviews as $review) { ?>
    <li>
      <strong><?php echo $review['rating']; ?>/5 by <?php echo $review['user_name']; ?></strong><br>
      <?php echo $review['comment']; ?><br><br>
    </li>
  <?php } ?>
</ul>

<!-- Display reviews for a user -->
<h2>Reviews by <?php echo $_SESSION['name']; ?></h2>
<ul>
  <?php foreach ($user_reviews as $review) { ?>
    <li>
      <strong><?php echo $review['rating']; ?>/5 on <?php echo $review['product_title']; ?></strong><br>
      <?php echo $review['comment']; ?><br><br>
    </li>
  <?php } ?>
</ul>


// Define a class for the Review model
class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Create a new review
  public function createReview($userId, $productId, $reviewText, $rating) {
    $query = "INSERT INTO reviews (user_id, product_id, review_text, rating)
              VALUES (:user_id, :product_id, :review_text, :rating)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':review_text', $reviewText);
    $stmt->bindParam(':rating', $rating);
    return $stmt->execute();
  }

  // Get all reviews for a product
  public function getReviewsForProduct($productId) {
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Get all reviews for a user
  public function getReviewsForUser($userId) {
    $query = "SELECT * FROM reviews WHERE user_id = :user_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Update a review
  public function updateReview($reviewId, $newRating) {
    $query = "UPDATE reviews SET rating = :rating WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':rating', $newRating);
    $stmt->bindParam(':id', $reviewId);
    return $stmt->execute();
  }

  // Delete a review
  public function deleteReview($reviewId) {
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $reviewId);
    return $stmt->execute();
  }
}


$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

$review = new Review($db);

// Create a new review
$user_id = 1;
$product_id = 1;
$review_text = "This product is amazing!";
$rating = 5;
$result = $review->createReview($user_id, $product_id, $review_text, $rating);
if ($result) {
    echo "Review created successfully!";
} else {
    echo "Error creating review";
}

// Get all reviews for a product
$product_id = 1;
$reviews = $review->getReviewsForProduct($product_id);
foreach ($reviews as $review) {
    echo "User ID: $review[user_id], Rating: $review[rating]";
}

// Update a review
$reviewId = 1;
$newRating = 4;
$result = $review->updateReview($reviewId, $newRating);
if ($result) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review";
}

// Delete a review
$reviewId = 1;
$result = $review->deleteReview($reviewId);
if ($result) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review";
}


// review.php

class Review {
  private $id;
  private $title;
  private $content;
  private $rating;
  private $product_id;

  public function __construct($id, $title, $content, $rating, $product_id) {
    $this->id = $id;
    $this->title = $title;
    $this->content = $content;
    $this->rating = $rating;
    $this->product_id = $product_id;
  }

  public function getId() {
    return $this->id;
  }

  public function getTitle() {
    return $this->title;
  }

  public function getContent() {
    return $this->content;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getProductId() {
    return $this->product_id;
  }
}


// review.controller.php

class ReviewController {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function addReview(Review $review) {
    $sql = "INSERT INTO reviews (title, content, rating, product_id) VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($sql);
    $stmt->execute([$review->getTitle(), $review->getContent(), $review->getRating(), $review->getProductId()]);
  }

  public function getReviews($product_id) {
    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->execute([$product_id]);
    return $stmt->fetchAll();
  }

  public function updateReview(Review $review) {
    $sql = "UPDATE reviews SET title = ?, content = ?, rating = ? WHERE id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->execute([$review->getTitle(), $review->getContent(), $review->getRating(), $review->getId()]);
  }

  public function deleteReview($id) {
    $sql = "DELETE FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->execute([$id]);
  }
}


// review.function.php

function createUserReview(ReviewController $review_controller, Review $review) {
  try {
    $review_controller->addReview($review);
    return true;
  } catch (Exception $e) {
    echo "Error creating review: " . $e->getMessage();
    return false;
  }
}

function getReviewsForProduct(ReviewController $review_controller, $product_id) {
  try {
    $reviews = $review_controller->getReviews($product_id);
    return $reviews;
  } catch (Exception $e) {
    echo "Error fetching reviews: " . $e->getMessage();
    return null;
  }
}

function updateReview(ReviewController $review_controller, Review $review) {
  try {
    $review_controller->updateReview($review);
    return true;
  } catch (Exception $e) {
    echo "Error updating review: " . $e->getMessage();
    return false;
  }
}

function deleteReview(ReviewController $review_controller, $id) {
  try {
    $review_controller->deleteReview($id);
    return true;
  } catch (Exception $e) {
    echo "Error deleting review: " . $e->getMessage();
    return false;
  }
}


$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');

$review_controller = new ReviewController($db);

$review = new Review(1, 'Great product!', 'I love this product.', 5, 12345);

createUserReview($review_controller, $review);

$reviews = getReviewsForProduct($review_controller, 12345);
print_r($reviews);


// functions.php

function create_review($user_id, $review_text, $rating) {
  // Connect to database
  $conn = new mysqli("localhost", "username", "password", "database_name");

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // Insert review into reviews table
  $sql = "INSERT INTO reviews (user_id, review, rating) VALUES (?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("iis", $user_id, $review_text, $rating);
  $result = $stmt->execute();

  if (!$result) {
    die("Error creating review: " . $conn->error);
  }

  // Get the ID of the newly created review
  $review_id = $conn->insert_id;

  // Close database connection
  $conn->close();

  return $review_id;
}

function get_reviews() {
  // Connect to database
  $conn = new mysqli("localhost", "username", "password", "database_name");

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // Select all reviews from reviews table
  $sql = "SELECT * FROM reviews";
  $result = $conn->query($sql);

  if (!$result) {
    die("Error fetching reviews: " . $conn->error);
  }

  // Fetch and return review data
  $reviews = array();
  while ($row = $result->fetch_assoc()) {
    $reviews[] = array(
      'id' => $row['id'],
      'user_id' => $row['user_id'],
      'review' => $row['review'],
      'rating' => $row['rating']
    );
  }

  // Close database connection
  $conn->close();

  return $reviews;
}

function update_review($review_id, $new_text, $new_rating) {
  // Connect to database
  $conn = new mysqli("localhost", "username", "password", "database_name");

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // Update review in reviews table
  $sql = "UPDATE reviews SET review = ?, rating = ? WHERE id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("sis", $new_text, $new_rating, $review_id);
  $result = $stmt->execute();

  if (!$result) {
    die("Error updating review: " . $conn->error);
  }

  // Close database connection
  $conn->close();
}

function delete_review($review_id) {
  // Connect to database
  $conn = new mysqli("localhost", "username", "password", "database_name");

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // Delete review from reviews table
  $sql = "DELETE FROM reviews WHERE id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $review_id);
  $result = $stmt->execute();

  if (!$result) {
    die("Error deleting review: " . $conn->error);
  }

  // Close database connection
  $conn->close();
}


// Create a new review
$review_id = create_review(1, 'Great product!', 5);

// Get all reviews
$reviews = get_reviews();

// Update an existing review
update_review($review_id, 'Even better product!', 6);

// Delete a review
delete_review($review_id);


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'root';
$password = '';

// Create a database object
try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}

// Function to create a review
function create_review($user_id, $product_name, $rating, $review_text) {
    global $pdo;
    
    // Insert into reviews table
    $stmt = $pdo->prepare("INSERT INTO reviews (user_id, product_name, rating, review_text) VALUES (:user_id, :product_name, :rating, :review_text)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $review_text);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Function to get all reviews
function get_reviews() {
    global $pdo;
    
    // Select from reviews table
    $stmt = $pdo->query("SELECT * FROM reviews");
    
    return $stmt->fetchAll();
}

// Function to get a review by ID
function get_review($id) {
    global $pdo;
    
    // Select from reviews table where id matches
    $stmt = $pdo->prepare("SELECT * FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $id);
    
    return $stmt->fetch();
}

// Function to update a review
function update_review($id, $product_name, $rating, $review_text) {
    global $pdo;
    
    // Update in reviews table where id matches
    $stmt = $pdo->prepare("UPDATE reviews SET product_name = :product_name, rating = :rating, review_text = :review_text WHERE id = :id");
    $stmt->bindParam(':id', $id);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $review_text);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Function to delete a review
function delete_review($id) {
    global $pdo;
    
    // Delete from reviews table where id matches
    $stmt = $pdo->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $id);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Example usage
$user_id = 1;
$product_name = 'Example Product';
$rating = 5;
$review_text = 'This product is great!';

if (create_review($user_id, $product_name, $rating, $review_text)) {
    echo "Review created successfully!";
} else {
    echo "Failed to create review.";
}

$reviews = get_reviews();
foreach ($reviews as $review) {
    echo "ID: " . $review['id'] . ", User ID: " . $review['user_id'] . ", Product Name: " . $review['product_name'] . ", Rating: " . $review['rating'] . ", Review Text: " . $review['review_text'];
}

$review = get_review(1);
echo "Review: " . $review['product_name'] . ", Rating: " . $review['rating'] . ", Review Text: " . $review['review_text'];

if (update_review(1, 'Updated Product', 4, 'This product is okay.')) {
    echo "Review updated successfully!";
} else {
    echo "Failed to update review.";
}

if (delete_review(1)) {
    echo "Review deleted successfully!";
} else {
    echo "Failed to delete review.";
}

?>


// User class
class User {
  private $id;
  private $name;
  private $email;

  public function __construct($id, $name, $email) {
    $this->id = $id;
    $this->name = $name;
    $this->email = $email;
  }

  public static function create($name, $email) {
    // Assume database connection is established
    $db = Database::getConnection();
    $query = "INSERT INTO users (name, email) VALUES (:name, :email)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':name', $name);
    $stmt->bindParam(':email', $email);
    if ($stmt->execute()) {
      return new User($db->lastInsertId(), $name, $email);
    } else {
      throw new Exception('Error creating user');
    }
  }

  public static function getAll() {
    // Assume database connection is established
    $db = Database::getConnection();
    $query = "SELECT * FROM users";
    $stmt = $db->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_CLASS, 'User');
  }
}

// Product class
class Product {
  private $id;
  private $title;
  private $description;

  public function __construct($id, $title, $description) {
    $this->id = $id;
    $this->title = $title;
    $this->description = $description;
  }

  public static function create($title, $description) {
    // Assume database connection is established
    $db = Database::getConnection();
    $query = "INSERT INTO products (title, description) VALUES (:title, :description)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':description', $description);
    if ($stmt->execute()) {
      return new Product($db->lastInsertId(), $title, $description);
    } else {
      throw new Exception('Error creating product');
    }
  }

  public static function getAll() {
    // Assume database connection is established
    $db = Database::getConnection();
    $query = "SELECT * FROM products";
    $stmt = $db->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_CLASS, 'Product');
  }
}

// Review class
class Review {
  private $id;
  private $user_id;
  private $product_id;
  private $rating;
  private $review;

  public function __construct($id, $user_id, $product_id, $rating, $review) {
    $this->id = $id;
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->review = $review;
  }

  public static function create($user_id, $product_id, $rating, $review) {
    // Assume database connection is established
    $db = Database::getConnection();
    $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    if ($stmt->execute()) {
      return new Review($db->lastInsertId(), $user_id, $product_id, $rating, $review);
    } else {
      throw new Exception('Error creating review');
    }
  }

  public static function getReviewsForProduct($product_id) {
    // Assume database connection is established
    $db = Database::getConnection();
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
  }
}


function createUserReview($review_text, $rating, $user_id, $product_id) {
  try {
    // Validate input data (e.g., check for empty strings)
    if (!$review_text || !$rating || !$user_id || !$product_id) {
      throw new Exception('Invalid input');
    }

    // Create a new review
    $new_review = Review::create($user_id, $product_id, $rating, $review_text);

    // Return the newly created review's ID (or other relevant data)
    return $new_review->id;

  } catch (Exception $e) {
    // Handle any exceptions that occur during review creation
    echo "Error creating user review: " . $e->getMessage();
    return null;
  }
}


// Create a new product and user
$product = Product::create("Test Product", "This is a test product");
$user = User::create("John Doe", "john.doe@example.com");

// Create a review for the product using the newly created user
$review_id = createUserReview("I loved this product!", 5, $user->id, $product->id);

if ($review_id) {
  echo "Review created successfully!";
} else {
  echo "Error creating review";
}


class Review {
  private $id;
  private $product_id;
  private $user_id;
  private $rating;
  private $comment;

  public function __construct($data = array()) {
    if (!empty($data)) {
      $this->id = isset($data['id']) ? $data['id'] : null;
      $this->product_id = isset($data['product_id']) ? $data['product_id'] : null;
      $this->user_id = isset($data['user_id']) ? $data['user_id'] : null;
      $this->rating = isset($data['rating']) ? $data['rating'] : null;
      $this->comment = isset($data['comment']) ? $data['comment'] : null;
    }
  }

  public function getId() {
    return $this->id;
  }

  public function getProductID() {
    return $this->product_id;
  }

  public function getUserID() {
    return $this->user_id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }
}


class ReviewController {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function createReview($reviewData) {
    $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
              VALUES (:product_id, :user_id, :rating, :comment)";
    $stmt = $this->db->prepare($query);
    $stmt->execute(array(
      ':product_id' => $reviewData['product_id'],
      ':user_id' => $reviewData['user_id'],
      ':rating' => $reviewData['rating'],
      ':comment' => $reviewData['comment']
    ));
    return true;
  }

  public function getReviewsForProduct($productId) {
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $this->db->prepare($query);
    $stmt->execute(array(':product_id' => $productId));
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getReviewsForUser($userId) {
    $query = "SELECT * FROM reviews WHERE user_id = :user_id";
    $stmt = $this->db->prepare($query);
    $stmt->execute(array(':user_id' => $userId));
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }
}


class ReviewService {
  private $reviewController;

  public function __construct($reviewController) {
    $this->reviewController = $reviewController;
  }

  public function createReview($reviewData) {
    return $this->reviewController->createReview($reviewData);
  }

  public function getReviewsForProduct($productId) {
    return $this->reviewController->getReviewsForProduct($productId);
  }

  public function getReviewsForUser($userId) {
    return $this->reviewController->getReviewsForUser($userId);
  }
}


$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

$reviewService = new ReviewService(new ReviewController($db));

$reviewData = array(
  'product_id' => 1,
  'user_id' => 1,
  'rating' => 5,
  'comment' => 'Great product!'
);

$reviewService->createReview($reviewData);

$reviewsForProduct = $reviewService->getReviewsForProduct(1);
print_r($reviewsForProduct);

$reviewsForUser = $reviewService->getReviewsForUser(1);
print_r($reviewsForUser);


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_database';
$username = 'your_username';
$password = 'your_password';

// Connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

class ReviewSystem {
  public function submit_review($title, $content, $rating) {
    // Insert review into database
    $stmt = $conn->prepare('INSERT INTO reviews (user_id, title, content, rating) VALUES (:user_id, :title, :content, :rating)');
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    $stmt->execute();
  }

  public function get_reviews() {
    // Retrieve reviews from database
    $stmt = $conn->prepare('SELECT * FROM reviews');
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }
}

// Initialize review system
$review_system = new ReviewSystem();

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  $title = $_POST['title'];
  $content = $_POST['content'];
  $rating = $_POST['rating'];

  // Authenticate user (replace with actual authentication logic)
  if (isset($_SESSION['user_id'])) {
    $review_system->submit_review($title, $content, $rating);
  } else {
    echo 'You must be logged in to submit a review.';
  }
}

// Display reviews
$reviews = $review_system->get_reviews();
?>

<!-- Display form -->
<form method="post">
  <label for="title">Title:</label>
  <input type="text" id="title" name="title"><br><br>
  <label for="content">Content:</label>
  <textarea id="content" name="content"></textarea><br><br>
  <label for="rating">Rating (1-5):</label>
  <select id="rating" name="rating">
    <?php for ($i = 1; $i <= 5; $i++) : ?>
      <option value="<?php echo $i; ?>"><?php echo $i; ?></option>
    <?php endfor; ?>
  </select><br><br>
  <input type="submit" value="Submit Review">
</form>

<!-- Display reviews -->
<h2>Reviews:</h2>
<ul>
  <?php foreach ($reviews as $review) : ?>
    <li>
      <strong><?php echo $review['title']; ?></strong>
      <p><?php echo $review['content']; ?></p>
      <p>Rated: <?php echo $review['rating']; ?>/5</p>
      <p>Submitted by: <?php // Retrieve user name from database ?></p>
    </li>
  <?php endforeach; ?>
</ul>


class Review {
  private $pdo;

  public function __construct($pdo) {
    $this->pdo = $pdo;
  }

  // Create review
  public function create($user_id, $product_id, $rating, $review) {
    $stmt = $this->pdo->prepare("INSERT INTO reviews (user_id, product_id, rating, review)
                                  VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->execute([
      ':user_id' => $user_id,
      ':product_id' => $product_id,
      ':rating' => $rating,
      ':review' => $review
    ]);
  }

  // Read review by ID
  public function read($id) {
    $stmt = $this->pdo->prepare("SELECT * FROM reviews WHERE id = :id");
    $stmt->execute([':id' => $id]);
    return $stmt->fetch();
  }

  // Update review
  public function update($id, $user_id, $product_id, $rating, $review) {
    $stmt = $this->pdo->prepare("UPDATE reviews SET user_id = :user_id, product_id = :product_id,
                                 rating = :rating, review = :review WHERE id = :id");
    $stmt->execute([
      ':user_id' => $user_id,
      ':product_id' => $product_id,
      ':rating' => $rating,
      ':review' => $review,
      ':id' => $id
    ]);
  }

  // Delete review by ID
  public function delete($id) {
    $stmt = $this->pdo->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->execute([':id' => $id]);
  }
}


// Connect to database
$pdo = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');

// Create a new review
$review = new Review($pdo);
$review->create(1, 1, 5, "Great product! I love it.");

// Read review by ID
(reviewData = $review->read(1);
echo json_encode($reviewData);

// Update review
$review->update(1, 2, 2, 4, "Okay product. It's fine.");

// Delete review
$review->delete(1);


// Function to add a new review
function addReview($userId, $review, $rating = 0) {
    // Connect to database
    require_once 'database.php';
    connectDB();

    // Query to insert new review into database
    $query = "INSERT INTO reviews (user_id, review, rating) VALUES (?, ?, ?)";
    $stmt = $db->prepare($query);
    $stmt->execute([$userId, $review, $rating]);

    // Close database connection
    closeDB();

    return true;
}

// Function to delete a review by ID
function deleteReview($id) {
    // Connect to database
    require_once 'database.php';
    connectDB();

    // Query to delete review from database
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $db->prepare($query);
    $stmt->execute([$id]);

    // Close database connection
    closeDB();

    return true;
}

// Function to get all reviews
function getReviews() {
    // Connect to database
    require_once 'database.php';
    connectDB();

    // Query to select all reviews from database
    $query = "SELECT r.id, u.username, r.review, r.rating FROM reviews r JOIN users u ON r.user_id = u.id";
    $stmt = $db->prepare($query);
    $stmt->execute();
    $reviews = $stmt->fetchAll();

    // Close database connection
    closeDB();

    return $reviews;
}

// Function to get a single review by ID
function getReview($id) {
    // Connect to database
    require_once 'database.php';
    connectDB();

    // Query to select review from database
    $query = "SELECT r.id, u.username, r.review, r.rating FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.id = ?";
    $stmt = $db->prepare($query);
    $stmt->execute([$id]);
    $review = $stmt->fetch();

    // Close database connection
    closeDB();

    return $review;
}


// Add a new review
addReview(1, "This product is amazing!", 5);

// Delete a review by ID
deleteReview(1);

// Get all reviews
$reviews = getReviews();
print_r($reviews);

// Get a single review by ID
$review = getReview(1);
print_r($review);


// Database connection settings
$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'reviews';

// Create a database connection
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function getAllReviews() {
    global $conn;
    
    // SQL query to get all reviews
    $sql = "SELECT r.id, u.username, p.name, r.comment, r.rating 
            FROM reviews r 
            INNER JOIN users u ON r.user_id = u.id 
            INNER JOIN products p ON r.product_id = p.id";
            
    // Execute the query
    $result = $conn->query($sql);
    
    // Store the result in an array
    $reviews = array();
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }
    
    return $reviews;
}

function getUserReviews($userId) {
    global $conn;
    
    // SQL query to get reviews for a specific user
    $sql = "SELECT r.id, u.username, p.name, r.comment, r.rating 
            FROM reviews r 
            INNER JOIN users u ON r.user_id = u.id 
            INNER JOIN products p ON r.product_id = p.id 
            WHERE r.user_id = '$userId'";
            
    // Execute the query
    $result = $conn->query($sql);
    
    // Store the result in an array
    $reviews = array();
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }
    
    return $reviews;
}

function getReviewById($reviewId) {
    global $conn;
    
    // SQL query to get a review by its ID
    $sql = "SELECT r.id, u.username, p.name, r.comment, r.rating 
            FROM reviews r 
            INNER JOIN users u ON r.user_id = u.id 
            INNER JOIN products p ON r.product_id = p.id 
            WHERE r.id = '$reviewId'";
            
    // Execute the query
    $result = $conn->query($sql);
    
    // Fetch the result
    return $result->fetch_assoc();
}

function addReview($userId, $productId, $comment, $rating) {
    global $conn;
    
    // SQL query to insert a new review
    $sql = "INSERT INTO reviews (user_id, product_id, comment, rating) 
            VALUES ('$userId', '$productId', '$comment', '$rating')";
            
    // Execute the query
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

function updateReview($reviewId, $newComment = null, $newRating = null) {
    global $conn;
    
    // SQL query to update a review
    $sql = "UPDATE reviews 
            SET comment = '$newComment', rating = '$newRating' 
            WHERE id = '$reviewId'";
            
    // Execute the query
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

function deleteReview($reviewId) {
    global $conn;
    
    // SQL query to delete a review
    $sql = "DELETE FROM reviews 
            WHERE id = '$reviewId'";
            
    // Execute the query
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Example usage:
$reviews = getAllReviews();
foreach ($reviews as $review) {
    echo "User: $review[username], Product: $review[name], Comment: $review[comment], Rating: $review[rating]";
}


// connect to database
$mysqli = new mysqli('localhost', 'username', 'password', 'database_name');

function get_user_reviews($user_id) {
  $query = "SELECT r.id, u.name, p.name AS product_name, r.rating, r.review 
            FROM reviews r 
            JOIN users u ON r.user_id = u.id 
            JOIN products p ON r.product_id = p.id 
            WHERE r.user_id = '$user_id'";
  
  $result = $mysqli->query($query);
  
  $reviews = array();
  while ($row = $result->fetch_assoc()) {
    $reviews[] = array(
      'id' => $row['id'],
      'name' => $row['name'],
      'product_name' => $row['product_name'],
      'rating' => $row['rating'],
      'review' => $row['review']
    );
  }
  
  return $reviews;
}

function add_review($user_id, $product_id, $rating, $review) {
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) 
            VALUES ('$user_id', '$product_id', '$rating', '$review')";
  
  if ($mysqli->query($query)) {
    return true;
  } else {
    return false;
  }
}

function delete_review($review_id) {
  $query = "DELETE FROM reviews WHERE id = '$review_id'";
  
  if ($mysqli->query($query)) {
    return true;
  } else {
    return false;
  }
}


// get user's reviews
$user_id = 1; // replace with actual user ID
$reviews = get_user_reviews($user_id);
print_r($reviews);

// add review
$product_id = 1; // replace with actual product ID
$rating = 5;
$review = "Great product!";
if (add_review($user_id, $product_id, $rating, $review)) {
  echo "Review added successfully";
} else {
  echo "Failed to add review";
}

// delete review
$review_id = 1; // replace with actual review ID
if (delete_review($review_id)) {
  echo "Review deleted successfully";
} else {
  echo "Failed to delete review";
}


// database connection settings
$dsn = 'mysql:host=localhost;dbname=reviews';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

function getReviews() {
    global $pdo;
    $stmt = $pdo->prepare('SELECT r.id, u.name as username, p.title as product_title, r.content, r.rating FROM reviews r INNER JOIN users u ON r.user_id = u.id INNER JOIN products p ON r.product_id = p.id');
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function addReview($reviewData) {
    global $pdo;
    try {
        $stmt = $pdo->prepare('INSERT INTO reviews (user_id, product_id, content, rating) VALUES (:user_id, :product_id, :content, :rating)');
        $stmt->execute([
            ':user_id' => $reviewData['user_id'],
            ':product_id' => $reviewData['product_id'],
            ':content' => $reviewData['content'],
            ':rating' => $reviewData['rating']
        ]);
        return true;
    } catch (PDOException $e) {
        echo 'Error adding review: ' . $e->getMessage();
        return false;
    }
}

function editReview($reviewId, $newReviewData) {
    global $pdo;
    try {
        $stmt = $pdo->prepare('UPDATE reviews SET user_id = :user_id, product_id = :product_id, content = :content, rating = :rating WHERE id = :id');
        $stmt->execute([
            ':user_id' => $newReviewData['user_id'],
            ':product_id' => $newReviewData['product_id'],
            ':content' => $newReviewData['content'],
            ':rating' => $newReviewData['rating'],
            ':id' => $reviewId
        ]);
        return true;
    } catch (PDOException $e) {
        echo 'Error editing review: ' . $e->getMessage();
        return false;
    }
}

function deleteReview($reviewId) {
    global $pdo;
    try {
        $stmt = $pdo->prepare('DELETE FROM reviews WHERE id = :id');
        $stmt->execute([':id' => $reviewId]);
        return true;
    } catch (PDOException $e) {
        echo 'Error deleting review: ' . $e->getMessage();
        return false;
    }
}

// Usage:

$reviews = getReviews();
echo '<pre>';
print_r($reviews);
echo '</pre>';

$newReviewData = [
    'user_id' => 1,
    'product_id' => 1,
    'content' => 'This is a great product!',
    'rating' => 5
];
if (addReview($newReviewData)) {
    echo "Review added successfully!";
}

$editedReviewData = [
    'user_id' => 1,
    'product_id' => 2,
    'content' => 'This is an even better product!',
    'rating' => 6
];
if (editReview(1, $editedReviewData)) {
    echo "Review edited successfully!";
}

if (deleteReview(1)) {
    echo "Review deleted successfully!";
}


<?php

// Connect to database
$conn = new mysqli("localhost", "username", "password", "database");

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function getUserReviews($userId, $productIds = null) {
  global $conn;

  if ($productIds === null) {
    // Get all reviews for user
    $query = "SELECT * FROM reviews WHERE user_id = ?";
  } else {
    // Get reviews for specific products
    $query = "SELECT * FROM reviews WHERE user_id = ? AND product_id IN (" . implode(",", $productIds) . ")";
  }

  $stmt = $conn->prepare($query);
  $stmt->bind_param("i", $userId);

  $stmt->execute();
  $result = $stmt->get_result();

  $reviews = array();
  while ($row = $result->fetch_assoc()) {
    $reviews[] = array(
      'id' => $row['id'],
      'review' => $row['review'],
      'rating' => $row['rating'],
      'created_at' => $row['created_at']
    );
  }

  return $reviews;
}

function submitReview($userId, $productId, $review, $rating) {
  global $conn;

  $query = "INSERT INTO reviews (user_id, product_id, review, rating) VALUES (?, ?, ?, ?)";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("iiss", $userId, $productId, $review, $rating);

  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Example usage:
$userId = 123;
$productIds = array(456, 789); // Optional

$reviews = getUserReviews($userId, $productIds);
foreach ($reviews as $review) {
  echo "Review ID: " . $review['id'] . ", Review: " . $review['review'] . ", Rating: " . $review['rating'];
}

// Submit a new review
$result = submitReview($userId, 456, "This product is great!", 5);
if ($result) {
  echo "Review submitted successfully!";
} else {
  echo "Failed to submit review.";
}
?>


// config.php (database connection settings)
<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'your_database');

// Create a database connection object
$dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME;
$db = new PDO($dsn, DB_USER, DB_PASSWORD);
?>


// review.php (user review creation)
<?php
require_once 'config.php';

if (isset($_POST['submit'])) {
    // Validate user input
    $product_id = $_POST['product_id'];
    $content = trim($_POST['review']);

    if (!$product_id || !$content) {
        echo "Please fill in all fields.";
        exit;
    }

    try {
        // Insert review into database
        $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, content)
                              VALUES (:product_id, :user_id, :content)");
        $stmt->bindParam(':product_id', $_POST['product_id']);
        $stmt->bindParam(':user_id', $_SESSION['user_id']); // assuming you're using a session
        $stmt->bindParam(':content', $_POST['review']);
        $stmt->execute();

        echo "Review created successfully!";
    } catch (PDOException $e) {
        echo "Error creating review: " . $e->getMessage();
    }
}

// Display product list and allow user to create new reviews
$product_list = array(
    array('id' => 1, 'name' => 'Product A'),
    array('id' => 2, 'name' => 'Product B')
);

?>

<form action="" method="post">
    <?php foreach ($product_list as $product) { ?>
        <input type="radio" name="product_id" value="<?php echo $product['id']; ?>">
        <label><?php echo $product['name']; ?></label>
        <br>
    <?php } ?>
    <textarea name="review"></textarea><br>
    <button type="submit" name="submit">Create Review</button>
</form>


// review_list.php (displaying all reviews for a product)
<?php
require_once 'config.php';

$product_id = $_GET['product_id'];

try {
    // Retrieve reviews from database
    $stmt = $db->prepare("SELECT r.id, r.content, u.username
                          FROM reviews r
                          JOIN users u ON r.user_id = u.id
                          WHERE r.product_id = :product_id");
    $stmt->bindParam(':product_id', $_GET['product_id']);
    $reviews = $stmt->execute()->fetchAll();

} catch (PDOException $e) {
    echo "Error retrieving reviews: " . $e->getMessage();
}

?>

<h2>Reviews for Product <?php echo $_GET['product_id']; ?></h2>

<ul>
    <?php foreach ($reviews as $review) { ?>
        <li><?php echo $review['username']; ?>: <?php echo nl2br($review['content']); ?></li>
    <?php } ?>
</ul>


function addReview($product_id, $rating, $review_text) {
    // Check if the user is logged in
    if (!isset($_SESSION['user_id'])) {
        echo "You must be logged in to leave a review.";
        return;
    }

    // Connect to the database
    $db = connectToDatabase();

    // Insert the new review into the reviews table
    $query = "INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES ('$product_id', '" . $_SESSION['user_id'] . "', '$rating', '$review_text')";
    $result = mysqli_query($db, $query);

    // Check if the review was added successfully
    if (!$result) {
        echo "Error adding review: " . mysqli_error($db);
        return;
    }

    // Close the database connection
    mysqli_close($db);

    // Update the average rating for the product
    updateAverageRating($product_id);

    // Redirect the user to the product page
    header("Location: /products/$product_id");
}


function getReviews($product_id, $limit = 10) {
    // Connect to the database
    $db = connectToDatabase();

    // Select all reviews from the reviews table where product_id matches the given ID
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id' ORDER BY id DESC LIMIT $limit";
    $result = mysqli_query($db, $query);

    // Fetch and store each review in an array
    $reviews = array();
    while ($row = mysqli_fetch_assoc($result)) {
        $reviews[] = array(
            'id' => $row['id'],
            'rating' => $row['rating'],
            'review_text' => $row['review_text']
        );
    }

    // Close the database connection
    mysqli_close($db);

    // Return the list of reviews
    return $reviews;
}


function updateAverageRating($product_id) {
    // Connect to the database
    $db = connectToDatabase();

    // Calculate the sum of all ratings for the product
    $query = "SELECT SUM(rating) as total FROM reviews WHERE product_id = '$product_id'";
    $result = mysqli_query($db, $query);
    $row = mysqli_fetch_assoc($result);
    $total_rating = $row['total'];

    // Calculate the average rating by dividing the sum of ratings by the number of reviews
    $num_reviews = count(getReviews($product_id));
    if ($num_reviews > 0) {
        $average_rating = $total_rating / $num_reviews;
    } else {
        $average_rating = 0;
    }

    // Update the average rating in the products table
    $query = "UPDATE products SET average_rating = '$average_rating' WHERE id = '$product_id'";
    mysqli_query($db, $query);

    // Close the database connection
    mysqli_close($db);
}


// Add a new review for product 123 with rating 5 and review text "This is a great product!"
addReview(123, 5, 'This is a great product!');

// Get all reviews for product 123
$reviews = getReviews(123);

// Update the average rating for product 123
updateAverageRating(123);


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  public function createReview($user_id, $product_name, $review_text, $rating) {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_name, review_text, rating)
      VALUES (:user_id, :product_name, :review_text, :rating)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    $stmt->execute();
  }

  public function getAllReviews() {
    $stmt = $this->db->query("SELECT * FROM reviews ORDER BY created_at DESC");
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getReviewById($id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }
}


function user_review($user_id, $product_name, $review_text, $rating) {
  require_once 'Review.php'; // Include the Review class

  $review = new Review();
  $review->createReview($user_id, $product_name, $review_text, $rating);
}


$user_id = 1;
$product_name = "Product A";
$review_text = "This product is great!";
$rating = 5;

user_review($user_id, $product_name, $review_text, $rating);


$reviews = Review::getAllReviews();
print_r($reviews); // Output: Array of review data


class Review {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
    }

    // Function to add a review
    public function addReview($productId, $userId, $review, $rating) {
        $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, review, rating) VALUES (?, ?, ?, ?)");
        $stmt->execute([$productId, $userId, $review, $rating]);
    }

    // Function to get all reviews
    public function getAllReviews($productId = null) {
        if ($productId !== null) {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
            $stmt->execute([$productId]);
            return $stmt->fetchAll();
        } else {
            $stmt = $this->db->query("SELECT * FROM reviews");
            return $stmt->fetchAll();
        }
    }

    // Function to get average rating for a product
    public function getAverageRating($productId) {
        $stmt = $this->db->prepare("SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = ?");
        $stmt->execute([$productId]);
        return $stmt->fetchColumn();
    }

    // Function to delete a review
    public function deleteReview($reviewId) {
        $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
        $stmt->execute([$reviewId]);
    }
}


$review = new Review();

// Add a review
$review->addReview(1, 1, "This product is amazing!", 5);

// Get all reviews for a specific product (by id)
$reviews = $review->getAllReviews(1);
print_r($reviews);

// Get average rating for a specific product (by id)
$averageRating = $review->getAverageRating(1);
echo "Average Rating: $averageRating";

// Delete a review
$review->deleteReview(1);


<?php

// Configuration variables
$dbHost = 'localhost';
$dbUsername = 'your_username';
$dbPassword = 'your_password';
$dbName = 'your_database';

// Establish database connection
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

function addReview($product_id, $reviewer, $rating, $review) {
    global $conn;

    // Validate input data
    if (empty($product_id) || empty($reviewer) || empty($rating) || empty($review)) {
        return false;
    }

    // Prepare SQL query to insert review into database
    $sql = "INSERT INTO reviews (product_id, reviewer, rating, review)
            VALUES (?, ?, ?, ?)";
    
    // Execute prepared statement with input data
    if ($stmt = mysqli_prepare($conn, $sql)) {
        mysqli_stmt_bind_param($stmt, 'isss', $product_id, $reviewer, $rating, $review);
        
        if (mysqli_stmt_execute($stmt)) {
            return true;
        } else {
            echo "Error: Failed to add review - " . mysqli_error($conn);
            return false;
        }
    }

    // Close prepared statement and connection
    mysqli_stmt_close($stmt);
    mysqli_close($conn);

    return false;
}

function getReviews() {
    global $conn;

    // Prepare SQL query to retrieve reviews from database
    $sql = "SELECT id, product_id, reviewer, rating, review, created_at FROM reviews ORDER BY created_at DESC";

    // Execute prepared statement and fetch results
    if ($result = mysqli_query($conn, $sql)) {
        return $result;
    } else {
        echo "Error: Failed to retrieve reviews - " . mysqli_error($conn);
        return false;
    }
}

function getReviewsForProduct($product_id) {
    global $conn;

    // Prepare SQL query to retrieve reviews for specific product
    $sql = "SELECT id, reviewer, rating, review, created_at FROM reviews WHERE product_id = ? ORDER BY created_at DESC";

    // Execute prepared statement with input data and fetch results
    if ($stmt = mysqli_prepare($conn, $sql)) {
        mysqli_stmt_bind_param($stmt, 'i', $product_id);

        if (mysqli_stmt_execute($stmt) && ($result = mysqli_stmt_get_result($stmt))) {
            return $result;
        } else {
            echo "Error: Failed to retrieve reviews for product - " . mysqli_error($conn);
            return false;
        }
    }

    // Close prepared statement and connection
    mysqli_stmt_close($stmt);
    mysqli_close($conn);

    return false;
}

?>


require_once 'review_function.php';

$product_id = 1; // Product ID to associate with this review
$reviewer = "John Doe";
$rating = 5; // Rating from 1-5
$review = "Great product!";

if (addReview($product_id, $reviewer, $rating, $review)) {
    echo "Review added successfully!";
} else {
    echo "Error: Failed to add review.";
}


$result = getReviews();

if ($result) {
    while ($row = mysqli_fetch_assoc($result)) {
        echo $row['reviewer'] . ": " . $row['rating'] . "/5 - " . $row['review'];
    }
} else {
    echo "No reviews available.";
}


$product_id = 1; // Product ID to associate with these reviews

$result = getReviewsForProduct($product_id);

if ($result) {
    while ($row = mysqli_fetch_assoc($result)) {
        echo $row['reviewer'] . ": " . $row['rating'] . "/5 - " . $row['review'];
    }
} else {
    echo "No reviews available for this product.";
}


function createUserReview($productId, $userId, $rating, $reviewText) {
  // Validate input data
  if (!ctype_digit($productId)) return false;
  if (!ctype_digit($userId)) return false;

  try {
    // Create query to insert new review into database
    $query = "INSERT INTO reviews (product_id, user_id, rating, review_text)
              VALUES (:product_id, :user_id, :rating, :review_text)";

    // Prepare and execute query with prepared statements
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $reviewText);

    // Execute query and return true if successful
    return $stmt->execute();
  } catch (PDOException $e) {
    // Handle database errors
    echo "Error creating review: " . $e->getMessage() . "
";
    return false;
  }
}


function getReviewsForProduct($productId) {
  try {
    // Create query to select all reviews for specified product
    $query = "SELECT * FROM reviews
              WHERE product_id = :product_id";

    // Prepare and execute query with prepared statements
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':product_id', $productId);

    // Execute query and return array of results
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    // Handle database errors
    echo "Error retrieving reviews: " . $e->getMessage() . "
";
    return [];
  }
}


// Assume we have a PDO instance named `$pdo`
$productId = 1;
$userId = 1;
$rating = 5;
$reviewText = 'Great product!';

createUserReview($productId, $userId, $rating, $reviewText);

$productReviews = getReviewsForProduct($productId);
print_r($productReviews);


<?php
class Review {
  private $db;

  function __construct() {
    // Connect to the database
    $this->db = new mysqli('localhost', 'username', 'password', 'database_name');
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }
  }

  function add_review($product_id, $user_name, $rating, $review_text) {
    // Insert the review into the database
    $query = "INSERT INTO reviews (product_id, user_name, rating, review_text) VALUES ('$product_id', '$user_name', '$rating', '$review_text')";
    if ($this->db->query($query)) {
      return true;
    } else {
      echo "Error adding review: " . $this->db->error;
      return false;
    }
  }

  function get_reviews($product_id) {
    // Retrieve reviews for a specific product
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $this->db->query($query);
    if ($result->num_rows > 0) {
      return $result;
    } else {
      echo "No reviews found";
      return null;
    }
  }

  function calculate_average_rating($product_id) {
    // Calculate the average rating for a specific product
    $query = "SELECT AVG(rating) as average_rating FROM reviews WHERE product_id = '$product_id'";
    $result = $this->db->query($query);
    if ($result->num_rows > 0) {
      return $result->fetch_assoc()['average_rating'];
    } else {
      echo "No ratings found";
      return null;
    }
  }

  function close_connection() {
    // Close the database connection
    $this->db->close();
  }
}
?>


$review = new Review();

// Add a review
$product_id = 1;
$user_name = 'John Doe';
$rating = 4;
$review_text = 'Great product!';
if ($review->add_review($product_id, $user_name, $rating, $review_text)) {
  echo "Review added successfully";
} else {
  echo "Error adding review";
}

// Get reviews for a specific product
$product_id = 1;
$result = $review->get_reviews($product_id);
if ($result) {
  while ($row = $result->fetch_assoc()) {
    echo "User: " . $row['user_name'] . ", Rating: " . $row['rating'] . ", Review: " . $row['review_text'];
  }
} else {
  echo "No reviews found";
}

// Calculate average rating for a specific product
$product_id = 1;
$average_rating = $review->calculate_average_rating($product_id);
echo "Average Rating: " . $average_rating;

// Close database connection
$review->close_connection();
?>


// functions.php

function getReviews($productId = null) {
  global $db;
  
  if ($productId !== null) {
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    return query($query, array($productId));
  } else {
    return query("SELECT * FROM reviews");
  }
}

function createReview($data) {
  global $db;
  
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)";
  return insert($query, $data);
}

function updateReview($id, $data) {
  global $db;
  
  $query = "UPDATE reviews SET user_id = ?, product_id = ?, rating = ?, review = ? WHERE id = ?";
  return query($query, array_merge(array($id), $data));
}

function deleteReview($id) {
  global $db;
  
  $query = "DELETE FROM reviews WHERE id = ?";
  return query($query, array($id));
}


// index.php

require_once 'functions.php';

if (isset($_POST['submit'])) {
  $data = array(
    $_POST['user_id'],
    $_POST['product_id'],
    $_POST['rating'],
    $_POST['review']
  );
  
  if (createReview($data)) {
    header('Location: index.php');
    exit;
  } else {
    echo 'Error creating review.';
  }
}

?>


// db.php (database connection settings)
define('DB_HOST', 'your_host');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to the database
function connectToDatabase() {
    $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
    
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    
    return $conn;
}

// Disconnect from the database
function disconnectFromDatabase($conn) {
    $conn->close();
}

// Review class
class Review {
    private $id;
    private $userId;
    private $review;
    private $rating;

    public function __construct($id = null, $userId = null, $review = null, $rating = null) {
        if ($id !== null) {
            $this->setId($id);
        }
        
        if ($userId !== null) {
            $this->setUserId($userId);
        }
        
        if ($review !== null) {
            $this->setReview($review);
        }
        
        if ($rating !== null) {
            $this->setRating($rating);
        }
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getReview() {
        return $this->review;
    }

    public function getRating() {
        return $this->rating;
    }

    private function setId($id) {
        $this->id = $id;
    }

    private function setUserId($userId) {
        $this->userId = $userId;
    }

    private function setReview($review) {
        $this->review = $review;
    }

    private function setRating($rating) {
        $this->rating = $rating;
    }
}

// Review functions
function createReview($conn, Review $review) {
    $query = "INSERT INTO reviews (user_id, review, rating) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("isi", $review->getUserId(), $review->getReview(), $review->getRating());
    
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error creating review: " . $stmt->error;
        return false;
    }
}

function getReviews($conn) {
    $query = "SELECT * FROM reviews";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        $reviews = array();
        
        while ($row = $result->fetch_assoc()) {
            $review = new Review($row['id'], $row['user_id'], $row['review'], $row['rating']);
            $reviews[] = $review;
        }
        
        return $reviews;
    } else {
        echo "No reviews found";
        return array();
    }
}

function getReviewById($conn, $id) {
    $query = "SELECT * FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $id);
    
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        
        if ($result->num_rows > 0) {
            $review = new Review();
            
            while ($row = $result->fetch_assoc()) {
                $review->setId($row['id']);
                $review->setUserId($row['user_id']);
                $review->setReview($row['review']);
                $review->setRating($row['rating']);
            }
            
            return $review;
        } else {
            echo "No review found with ID: $id";
            return null;
        }
    } else {
        echo "Error fetching review by ID: " . $stmt->error;
        return null;
    }
}

function updateReview($conn, Review $review) {
    $query = "UPDATE reviews SET user_id = ?, review = ?, rating = ? WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("isii", $review->getUserId(), $review->getReview(), $review->getRating(), $review->getId());
    
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error updating review: " . $stmt->error;
        return false;
    }
}

function deleteReview($conn, $id) {
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $id);
    
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error deleting review: " . $stmt->error;
        return false;
    }
}


$conn = connectToDatabase();

$review1 = new Review(null, 1, 'This is a great product!', 5);
$review2 = new Review(null, 2, 'Not bad but not great either.', 3);

if (createReview($conn, $review1)) {
    echo "Review created successfully!";
}

if (createReview($conn, $review2)) {
    echo "Review created successfully!";
}

$reviews = getReviews($conn);
foreach ($reviews as $review) {
    echo "ID: " . $review->getId() . ", User ID: " . $review->getUserId() . ", Review: " . $review->getReview() . ", Rating: " . $review->getRating() . "
";
}

$updatedReview = new Review(null, 1, 'This is an updated review!', 5);
if (updateReview($conn, $updatedReview)) {
    echo "Review updated successfully!";
}

if (deleteReview($conn, 2)) {
    echo "Review deleted successfully!";
}

disconnectFromDatabase($conn);


// config.php
<?php
require_once 'db.inc.php';

// database connection settings
define('DB_HOST', 'your_host');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// function to connect to the database
function db_connect() {
    $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}
?>

// review.php (display reviews for a product)
<?php
require_once 'config.php';

// get the product id from the URL or form data
$product_id = $_GET['id'];

// connect to the database
$conn = db_connect();

// get all reviews for the current product
$stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = ?");
$stmt->bind_param('i', $product_id);
$stmt->execute();
$reviews = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);

// display reviews
echo '<h2>Reviews for ' . $_GET['name'] . '</h2>';
foreach ($reviews as $review) {
    echo '<p>' . $review['comment'] . ' (' . $review['rating'] . '/5)</p>';
}
?>

// submit_review.php (handle form submission)
<?php
require_once 'config.php';

// get the product id and user data from the form
$product_id = $_POST['product_id'];
$user_name = $_POST['user_name'];
$comment = $_POST['comment'];
$rating = $_POST['rating'];

// connect to the database
$conn = db_connect();

// insert review into the reviews table
$stmt = $conn->prepare("INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (?, ?, ?, ?)");
$stmt->bind_param('iiss', $product_id, $_SESSION['user_id'], $rating, $comment);
$stmt->execute();
?>


// review.php

class Review {
  private $db;

  function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  // Submit a new review
  public function submitReview($userId, $productId, $review, $rating) {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, review, rating) VALUES (:userId, :productId, :review, :rating)");
    $stmt->bindParam(':userId', $userId);
    $stmt->bindParam(':productId', $productId);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':rating', $rating);
    return $stmt->execute();
  }

  // Get all reviews for a product
  public function getReviews($productId) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :productId");
    $stmt->bindParam(':productId', $productId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }
}


// review-form.php

<?php require_once 'review.php'; ?>

<form action="" method="post">
  <label for="productId">Product ID:</label>
  <input type="text" id="productId" name="productId"><br><br>
  <label for="review">Review:</label>
  <textarea id="review" name="review"></textarea><br><br>
  <label for="rating">Rating (1-5):</label>
  <select id="rating" name="rating">
    <?php for ($i = 1; $i <= 5; $i++) { ?>
      <option value="<?php echo $i; ?>"><?php echo $i; ?></option>
    <?php } ?>
  </select><br><br>
  <input type="submit" name="submit" value="Submit Review">
</form>

<?php if (isset($_POST['submit'])) {
  $review = new Review();
  $userId = $_SESSION['user_id']; // Replace with actual user ID
  $productId = $_POST['productId'];
  $reviewText = $_POST['review'];
  $rating = $_POST['rating'];

  if ($review->submitReview($userId, $productId, $reviewText, $rating)) {
    echo 'Review submitted successfully!';
  } else {
    echo 'Error submitting review. Please try again.';
  }
} ?>


// display-reviews.php

<?php require_once 'review.php'; ?>

<?php $reviews = new Review(); ?>
<?php $productId = $_GET['id']; ?>

<h2>Reviews for Product <?php echo $productId; ?></h2>

<ul>
  <?php foreach ($reviews->getReviews($productId) as $review) { ?>
    <li>
      <strong>User ID:</strong> <?php echo $review['user_id']; ?><br>
      <strong>Review:</strong> <?php echo $review['review']; ?><br>
      <strong>Rating:</strong> <?php echo $review['rating']; ?>/5
    </li>
  <?php } ?>
</ul>


<?php

// assume we have the following classes and functions defined
class Review {
    public $id;
    public $review_text;
    public $rating;
}

class Product {
    public $id;
    public $name;
}

class User {
    public $id;
    public $username;
    public $reviews; // an array of Review objects
}

function create_review($product_id, $user_id, $text, $rating) {
    // database interaction to insert new review into reviews table
    // for simplicity we'll just simulate a database connection here
    $review = new Review();
    $review->id = uniqid(); // unique id for the review
    $review->review_text = $text;
    $review->rating = $rating;

    // update user's reviews array
    return $review;
}

function get_user_reviews($user_id) {
    // database interaction to retrieve user's reviews from reviews table
    // for simplicity we'll just simulate a database connection here
    $reviews = [];

    // loop through all reviews and filter by user id
    foreach (get_all_reviews() as $review) {
        if ($review->user_id == $user_id) {
            $reviews[] = $review;
        }
    }

    return $reviews;
}

function get_all_reviews() {
    // database interaction to retrieve all reviews from reviews table
    // for simplicity we'll just simulate a database connection here
    $reviews = [
        new Review(['id' => 1, 'user_id' => 1, 'product_id' => 1, 'review_text' => 'Great product!', 'rating' => 5]),
        new Review(['id' => 2, 'user_id' => 2, 'product_id' => 2, 'review_text' => 'Good', 'rating' => 4]),
    ];

    return $reviews;
}

function update_product_rating($product_id) {
    // calculate average rating for the product
    $total_rating = 0;
    $num_reviews = 0;

    foreach (get_all_reviews() as $review) {
        if ($review->product_id == $product_id) {
            $total_rating += $review->rating;
            $num_reviews++;
        }
    }

    // calculate average rating
    $average_rating = $num_reviews > 0 ? $total_rating / $num_reviews : 0;

    return $average_rating;
}

function write_review_form($product) {
?>
    <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
        <label for="review_text">Your review:</label>
        <textarea name="review_text" id="review_text"></textarea><br>

        <label for="rating">Rating (1-5):</label>
        <select name="rating" id="rating">
            <?php
                for ($i = 1; $i <= 5; $i++) {
                    echo "<option value=\"$i\">$i stars</option>";
                }
            ?>
        </select><br>

        <input type="hidden" name="product_id" value="<?php echo $product->id; ?>">
        <button type="submit">Submit review!</button>
    </form>
<?php
}

// main function to handle user review submission
function display_review_form() {
    if (isset($_POST['review_text']) && isset($_POST['rating'])) {
        // create new review object and save it to database
        $product_id = $_POST['product_id'];
        $text = $_POST['review_text'];
        $rating = $_POST['rating'];

        // check if user is logged in (for simplicity we'll just assume they are)
        $user_reviews = get_user_reviews(1); // replace 1 with actual user id
        $new_review = create_review($product_id, 1, $text, $rating);
        $user_reviews[] = $new_review;

        // update product rating (calculate average rating for the product)
        $average_rating = update_product_rating($product_id);

        echo "Review submitted! Average rating for this product: $average_rating stars";
    } else {
        // render review form
        $product = new Product(['id' => 1, 'name' => 'Example Product']);
        write_review_form($product);
    }
}

// call display_review_form() to start the process
display_review_form();

?>


<?php

// Database connection settings
$host = 'your_host';
$dbname = 'your_database';
$username = 'your_username';
$password = 'your_password';

try {
    // Connect to database
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    die('Error connecting to database: ' . $e->getMessage());
}

// Function to add a review
function add_review($user_id, $product_id, $review_text, $rating) {
    global $pdo;
    
    // Validate input
    if (!ctype_digit($user_id) || !ctype_digit($product_id)) {
        throw new Exception('Invalid user or product ID');
    }
    
    // Insert review into database
    $stmt = $pdo->prepare('INSERT INTO reviews (user_id, product_id, review_text, rating) VALUES (:user_id, :product_id, :review_text, :rating)');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    
    try {
        $stmt->execute();
        return true;
    } catch (PDOException $e) {
        throw new Exception('Error adding review: ' . $e->getMessage());
    }
}

// Function to get all reviews for a product
function get_reviews($product_id) {
    global $pdo;
    
    // Retrieve reviews from database
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);
    
    try {
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        throw new Exception('Error retrieving reviews: ' . $e->getMessage());
    }
}

?>


// Add a review for product 1 with user ID 123 and rating 4
if (add_review(123, 1, 'This product is great!', 4)) {
    echo "Review added successfully!";
} else {
    echo "Error adding review";
}

// Get all reviews for product 2
$reviews = get_reviews(2);
foreach ($reviews as $review) {
    echo "User: " . $review['user_id'] . ", Rating: " . $review['rating'] . ", Review Text: " . $review['review_text'];
}


<?php

// Review model
class Review {
  public $id;
  public $product_id;
  public $user_id;
  public $rating;
  public $review;

  // Constructor
  public function __construct($data) {
    $this->id = $data['id'];
    $this->product_id = $data['product_id'];
    $this->user_id = $data['user_id'];
    $this->rating = $data['rating'];
    $this->review = $data['review'];
  }
}

// Review controller
class ReviewController {
  public function index() {
    // Retrieve all reviews from the database
    $reviews = Review::all();
    return $reviews;
  }

  public function add($product_id, $user_id, $rating, $review) {
    // Create a new review object
    $new_review = new Review([
      'product_id' => $product_id,
      'user_id' => $user_id,
      'rating' => $rating,
      'review' => $review
    ]);

    // Insert the review into the database
    $result = Review::create($new_review);

    return $result;
  }

  public function edit($id, $product_id, $user_id, $rating, $review) {
    // Retrieve the review from the database
    $existing_review = Review::find($id);

    // Update the review object
    $existing_review->product_id = $product_id;
    $existing_review->user_id = $user_id;
    $existing_review->rating = $rating;
    $existing_review->review = $review;

    // Save the updated review to the database
    Review::update($id, $existing_review);

    return true;
  }

  public function delete($id) {
    // Delete the review from the database
    Review::delete($id);
    return true;
  }
}

// Review model implementation
class Review extends Model {
  protected static $_table = 'reviews';

  public static function all() {
    $query = "SELECT * FROM reviews";
    $results = DB::query($query);
    return array_map(function($row) { return new Review($row); }, $results);
  }

  public static function create($data) {
    $fields = [
      'product_id',
      'user_id',
      'rating',
      'review'
    ];

    $values = array_fill(0, count($fields), '?');
    $query = "INSERT INTO reviews (" . implode(', ', $fields) . ") VALUES (" . implode(', ', $values) . ")";
    DB::query($query, ...$data);

    return true;
  }

  public static function update($id, $data) {
    $fields = [
      'product_id',
      'user_id',
      'rating',
      'review'
    ];

    $values = array_fill(0, count($fields), '?');
    $query = "UPDATE reviews SET " . implode(', ', array_map(function($field, $value) { return "$field = ?"; }, $fields, $data)) . " WHERE id = ?";
    DB::query($query, ...$data);

    return true;
  }

  public static function delete($id) {
    $query = "DELETE FROM reviews WHERE id = ?";
    DB::query($query, $id);
    return true;
  }
}

?>


// Create a new review
$review_controller = new ReviewController();
$new_review_id = $review_controller->add(1, 2, 5, 'This product is great!');

// Retrieve all reviews for a product
$product_reviews = $review_controller->index();

// Edit an existing review
$review_controller->edit($new_review_id, 3, 4, 4, 'I agree with the previous reviewer.');

// Delete a review
$review_controller->delete($new_review_id);


class Review {
    private $id;
    private $rating;
    private $comment;
    private $user_id;
    private $product_id;

    function __construct($id = null, $rating = null, $comment = null, $user_id = null, $product_id = null) {
        $this->id = $id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->user_id = $user_id;
        $this->product_id = $product_id;
    }

    function save() {
        // Connect to database
        require_once 'connect.php';
        $db = new Database();

        $query = "INSERT INTO reviews (rating, comment, user_id, product_id) VALUES (:rating, :comment, :user_id, :product_id)";
        try {
            $result = $db->prepare($query);
            $result->execute(array(
                ':rating' => $this->rating,
                ':comment' => $this->comment,
                ':user_id' => $this->user_id,
                ':product_id' => $this->product_id
            ));
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }

    function getAllReviews() {
        // Connect to database
        require_once 'connect.php';
        $db = new Database();

        $query = "SELECT * FROM reviews ORDER BY id DESC";
        try {
            $result = $db->prepare($query);
            $result->execute(array());
            return $result->fetchAll();
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }

    function getReviewById($id) {
        // Connect to database
        require_once 'connect.php';
        $db = new Database();

        $query = "SELECT * FROM reviews WHERE id = :id";
        try {
            $result = $db->prepare($query);
            $result->execute(array(':id' => $id));
            return $result->fetch();
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }

    function updateReview() {
        // Connect to database
        require_once 'connect.php';
        $db = new Database();

        $query = "UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id";
        try {
            $result = $db->prepare($query);
            $result->execute(array(
                ':rating' => $this->rating,
                ':comment' => $this->comment,
                ':id' => $this->id
            ));
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }

    function deleteReview() {
        // Connect to database
        require_once 'connect.php';
        $db = new Database();

        $query = "DELETE FROM reviews WHERE id = :id";
        try {
            $result = $db->prepare($query);
            $result->execute(array(':id' => $this->id));
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }
}


class reviewController extends Controller {

    function index() {
        require_once 'reviewModel.php';

        $reviews = new Review();

        if (isset($_POST['submit'])) {
            $reviews->rating = $_POST['rating'];
            $reviews->comment = $_POST['comment'];
            $reviews->user_id = $_SESSION['id'];
            $reviews->save();
        }

        $data['reviews'] = $reviews->getAllReviews();

        $this->loadView('reviewView.php', $data);
    }
}


<?php foreach ($reviews as $key => $value): ?>
    <div class="review">
        <p>Rating: <?php echo $value['rating']; ?></p>
        <p>Comment: <?php echo $value['comment']; ?></p>
    </div>
<?php endforeach; ?>

<form action="" method="post">
    Rating: <input type="number" name="rating"><br><br>
    Comment: <textarea name="comment"></textarea><br><br>
    <input type="submit" name="submit" value="Submit Review">
</form>


<?php

class ReviewManager {
  private $db;

  public function __construct() {
    // Establish a database connection (e.g., using PDO)
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  /**
   * Create a new review
   *
   * @param int $userId The ID of the user submitting the review
   * @param int $productId The ID of the product being reviewed
   * @param float $rating The rating given by the user (0-5)
   * @param string $content The content of the review
   */
  public function createReview($userId, $productId, $rating, $content) {
    // Validate input data
    if (!is_numeric($userId) || !is_numeric($productId)) {
      throw new Exception('Invalid user or product ID');
    }
    if ($rating < 0 || $rating > 5) {
      throw new Exception('Rating must be between 0 and 5');
    }

    // Insert review into database
    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, content) VALUES (:userId, :productId, :rating, :content)');
    $stmt->execute([
      ':userId' => $userId,
      ':productId' => $productId,
      ':rating' => $rating,
      ':content' => $content
    ]);

    // Return the newly created review ID
    return $this->db->lastInsertId();
  }

  /**
   * Update an existing review
   *
   * @param int $reviewId The ID of the review to update
   * @param float $rating The new rating given by the user (0-5)
   * @param string $content The new content of the review
   */
  public function updateReview($reviewId, $rating, $content) {
    // Validate input data
    if (!is_numeric($reviewId)) {
      throw new Exception('Invalid review ID');
    }
    if ($rating < 0 || $rating > 5) {
      throw new Exception('Rating must be between 0 and 5');
    }

    // Update review in database
    $stmt = $this->db->prepare('UPDATE reviews SET rating = :rating, content = :content WHERE id = :reviewId');
    $stmt->execute([
      ':rating' => $rating,
      ':content' => $content,
      ':reviewId' => $reviewId
    ]);
  }

  /**
   * Retrieve all reviews for a product or user
   *
   * @param int $productId The ID of the product to retrieve reviews for (optional)
   * @param int $userId The ID of the user to retrieve reviews from (optional)
   */
  public function getReviews($productId = null, $userId = null) {
    // Build query parameters
    $params = [];
    if ($productId !== null) {
      $params[':productId'] = $productId;
    }
    if ($userId !== null) {
      $params[':userId'] = $userId;
    }

    // Retrieve reviews from database
    $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = :productId OR user_id = :userId');
    $stmt->execute($params);
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }
}

?>


$reviewManager = new ReviewManager();

// Create a new review
$reviewId = $reviewManager->createReview(1, 1, 4.5, 'Great product!');

// Update an existing review
$reviewManager->updateReview($reviewId, 5.0, 'Even better now!');

// Retrieve all reviews for a product or user
$productReviews = $reviewManager->getReviews(1);
$userReviews = $reviewManager->getReviews(null, 1);

print_r($productReviews); // Array of product reviews
print_r($userReviews); // Array of user reviews


// Review class to encapsulate review logic
class Review {
  private $db;

  public function __construct() {
    // Initialize database connection (e.g. using PDO)
    $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
  }

  /**
   * Create a new review for a product
   *
   * @param int $product_id Product ID to leave a review for
   * @param int $user_id User ID leaving the review
   * @param float $rating Rating (0-5)
   * @param string $comment Review comment
   */
  public function createReview($product_id, $user_id, $rating, $comment) {
    // Validate input data
    if (!is_int($product_id) || !is_int($user_id)) {
      throw new Exception('Invalid product/user ID');
    }
    if ($rating < 0 || $rating > 5) {
      throw new Exception('Rating must be between 0 and 5');
    }

    // Insert review into database
    $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, comment)
                                VALUES (:product_id, :user_id, :rating, :comment)");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->execute();
  }

  /**
   * Get all reviews for a product
   *
   * @param int $product_id Product ID to retrieve reviews for
   */
  public function getReviews($product_id) {
    // Retrieve reviews from database
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Get a single review by ID
   *
   * @param int $review_id Review ID to retrieve
   */
  public function getReview($review_id) {
    // Retrieve review from database
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $review_id);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  /**
   * Update a review
   *
   * @param int $review_id Review ID to update
   * @param float $rating New rating (0-5)
   * @param string $comment New comment
   */
  public function updateReview($review_id, $rating, $comment) {
    // Validate input data
    if ($rating < 0 || $rating > 5) {
      throw new Exception('Rating must be between 0 and 5');
    }

    // Update review in database
    $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id");
    $stmt->bindParam(':id', $review_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->execute();
  }

  /**
   * Delete a review
   *
   * @param int $review_id Review ID to delete
   */
  public function deleteReview($review_id) {
    // Delete review from database
    $this->db->prepare("DELETE FROM reviews WHERE id = :id")->bindParam(':id', $review_id)->execute();
  }
}


// Initialize Review class instance
$review = new Review();

// Create a new review for a product
$review->createReview(123, 456, 4.5, 'Great product!');

// Get all reviews for a product
$reviews = $review->getReviews(123);

// Get a single review by ID
$single_review = $review->getReview(789);

// Update an existing review
$review->updateReview(789, 4.8, 'Excellent service!');

// Delete a review
$review->deleteReview(987);


class Product {
    public $id;
    public $name;
    public $reviews;

    function __construct($id, $name) {
        $this->id = $id;
        $this->name = $name;
        $this->reviews = array();
    }
}

function add_review($product_id, $user_name, $review_text) {
    // Get the product from the array
    foreach (get_products() as $product) {
        if ($product->id == $product_id) {
            // Add review to the product's reviews array
            $product->reviews[] = new Review($user_name, $review_text);
            return true;
        }
    }

    // Product not found
    return false;
}

function get_reviews($product_id) {
    // Get the product from the array
    foreach (get_products() as $product) {
        if ($product->id == $product_id) {
            return $product->reviews;
        }
    }

    // Product not found
    return null;
}

function display_reviews($product_id) {
    $reviews = get_reviews($product_id);
    if ($reviews !== null) {
        foreach ($reviews as $review) {
            echo "User: " . $review->user_name . "
";
            echo "Review: " . $review->text . "

";
        }
    } else {
        echo "No reviews found for this product.
";
    }
}

class Review {
    public $user_name;
    public $text;

    function __construct($user_name, $text) {
        $this->user_name = $user_name;
        $this->text = $text;
    }
}

// Example usage:
$product1 = new Product(1, "Product 1");
$product2 = new Product(2, "Product 2");

add_review(1, "John Doe", "Great product!");
add_review(1, "Jane Doe", "Not so great.");
add_review(2, "Bob Smith", "Best product ever!");

display_reviews(1);


class Review {
    private $id;
    private $reviewer_id;
    private $product_id;
    private $rating;
    private $title;
    private $content;

    public function __construct($id, $reviewer_id, $product_id, $rating, $title, $content) {
        $this->id = $id;
        $this->reviewer_id = $reviewer_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->title = $title;
        $this->content = $content;
    }

    public function getId() {
        return $this->id;
    }

    public function getReviewerId() {
        return $this->reviewer_id;
    }

    public function getProductID() {
        return $this->product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getContent() {
        return $this->content;
    }
}


class User {
    private $id;
    private $username;
    private $email;

    public function __construct($id, $username, $email) {
        $this->id = $id;
        $this->username = $username;
        $this->email = $email;
    }

    public function getId() {
        return $this->id;
    }

    public function getUsername() {
        return $this->username;
    }

    public function getEmail() {
        return $this->email;
    }
}


class Product {
    private $id;
    private $title;
    private $description;

    public function __construct($id, $title, $description) {
        $this->id = $id;
        $this->title = $title;
        $this->description = $description;
    }

    public function getId() {
        return $this->id;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getDescription() {
        return $this->description;
    }
}


class ReviewController {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview(Review $review, User $user, Product $product) {
        // Insert review into database
        $query = "INSERT INTO reviews (reviewer_id, product_id, rating, title, content) VALUES (:reviewer_id, :product_id, :rating, :title, :content)";
        $stmt = $this->db->prepare($query);
        $stmt->execute([
            ':reviewer_id' => $user->getId(),
            ':product_id' => $product->getId(),
            ':rating' => $review->getRating(),
            ':title' => $review->getTitle(),
            ':content' => $review->getContent()
        ]);
    }

    public function getReviews() {
        // Retrieve reviews from database
        $query = "SELECT * FROM reviews";
        $stmt = $this->db->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
    }
}


class ReviewService {
    private $reviewController;

    public function __construct($reviewController) {
        $this->reviewController = $reviewController;
    }

    public function createReview(Review $review, User $user, Product $product) {
        $this->reviewController->createReview($review, $user, $product);
    }

    public function getReviews() {
        return $this->reviewController->getReviews();
    }
}


use App\Controllers\ReviewController;
use App\Services\ReviewService;

$app->map('/reviews', ['ReviewController', 'getReviews'], function ($request, $response) use ($app) {
    return ReviewService::getInstance($app)->getReviews();
})->via('GET');

$app->post('/reviews', function ($request, $response) use ($app) {
    $review = new Review(0, 1, 1, 5, 'Test review', 'This is a test review.');
    $user = new User(1, 'testuser', 'test@example.com');
    $product = new Product(1, 'Test product', 'This is a test product.');

    ReviewService::getInstance($app)->createReview($review, $user, $product);

    return $response->withJson(['message' => 'Review created successfully.']);
})->via('POST');


// Get all reviews
$response = $client->get('/reviews');
$reviews = json_decode($response->getBody()->getContents(), true);
print_r($reviews);

// Create a new review
$response = $client->post('/reviews', ['json' => [
    'rating' => 5,
    'title' => 'Test review',
    'content' => 'This is a test review.'
]]);
print_r(json_decode($response->getBody()->getContents(), true));


// Review class to encapsulate functionality
class Review {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    // Submit a new review
    public function submitReview($productId, $rating, $comment, $userId) {
        try {
            $stmt = $this->db->prepare("INSERT INTO Reviews (product_id, rating, comment, user_id) VALUES (:product_id, :rating, :comment, :user_id)");
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);
            $stmt->bindParam(':user_id', $userId);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error submitting review: " . $e->getMessage();
            return false;
        }
    }

    // Get all reviews for a product
    public function getReviews($productId) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM Reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error fetching reviews: " . $e->getMessage();
            return array();
        }
    }

    // Get all reviews for a user
    public function getReviewsByUser($userId) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM Reviews WHERE user_id = :user_id");
            $stmt->bindParam(':user_id', $userId);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error fetching reviews: " . $e->getMessage();
            return array();
        }
    }

    // Get average rating for a product
    public function getAverageRating($productId) {
        try {
            $stmt = $this->db->prepare("SELECT AVG(rating) as avg_rating FROM Reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();
            return $stmt->fetch(PDO::FETCH_ASSOC)['avg_rating'] ?? 0;
        } catch (PDOException $e) {
            echo "Error fetching average rating: " . $e->getMessage();
            return 0;
        }
    }

    // Helper function to get product by id
    public function getProduct($productId) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM Products WHERE id = :product_id");
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error fetching product: " . $e->getMessage();
            return array();
        }
    }
}


$db = new PDO('mysql:host=localhost;dbname=database', 'username', 'password');

$review = new Review($db);

// Submit a review
$user_id = 1;
$product_id = 1;
$rating = 5;
$comment = "Great product!";

if ($review->submitReview($product_id, $rating, $comment, $user_id)) {
    echo "Review submitted successfully!";
} else {
    echo "Error submitting review.";
}

// Get all reviews for a product
$product_id = 1;
$reviews = $review->getReviews($product_id);
echo "Reviews for product ID: " . print_r($reviews, true);

// Get average rating for a product
$product_id = 1;
$average_rating = $review->getAverageRating($product_id);
echo "Average rating for product ID: " . print_r($average_rating, true);

// Helper function to get product by id
$product_id = 1;
$product = $review->getProduct($product_id);
echo "Product details: " . print_r($product, true);


<?php

// Define the Review class
class Review {
  public $id;
  public $reviewer_name;
  public $rating;
  public $review_text;
  public $created_at;

  function __construct($id, $reviewer_name, $rating, $review_text) {
    $this->id = $id;
    $this->reviewer_name = $reviewer_name;
    $this->rating = $rating;
    $this->review_text = $review_text;
    $this->created_at = date('Y-m-d H:i:s');
  }
}

// Define the ReviewModel class
class ReviewModel {
  public function get_reviews($product_id) {
    // Get reviews from database (using PDO or MySQLi)
    $reviews = array();
    // Example query to retrieve reviews
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    while ($row = $stmt->fetch()) {
      $review = new Review($row['id'], $row['reviewer_name'], $row['rating'], $row['review_text']);
      $reviews[] = $review;
    }
    return $reviews;
  }

  public function add_review($product_id, $review_data) {
    // Get product ID and review data from the request
    $query = "INSERT INTO reviews (product_id, reviewer_name, rating, review_text)
              VALUES (:product_id, :reviewer_name, :rating, :review_text)";
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':reviewer_name', $review_data['reviewer_name']);
    $stmt->bindParam(':rating', $review_data['rating']);
    $stmt->bindParam(':review_text', $review_data['review_text']);
    return $stmt->execute();
  }
}

// Define the ReviewController class
class ReviewController {
  public function index($product_id) {
    // Get reviews for a specific product
    $reviews = (new ReviewModel())->get_reviews($product_id);
    echo json_encode($reviews);
  }

  public function add_review() {
    // Handle adding new review
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
      $review_data = $_POST;
      $result = (new ReviewModel())->add_review($_GET['product_id'], $review_data);
      echo json_encode(array('success' => $result));
    }
  }
}

// Example usage:
$review_controller = new ReviewController();

// Get reviews for a specific product
echo $review_controller->index(123);

// Add new review
$_POST = array(
  'reviewer_name' => 'John Doe',
  'rating' => 5,
  'review_text' => 'Great product!'
);
$review_controller->add_review();
?>


// Review Model
class Review {
    private $id;
    private $product_id;
    private $user_id;
    private $rating;
    private $comment;

    public function __construct($id, $product_id, $user_id, $rating, $comment) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->user_id = $user_id;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public function getId() {
        return $this->id;
    }

    public function getProductID() {
        return $this->product_id;
    }

    public function getUserID() {
        return $this->user_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}

// Review Controller
class ReviewController {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview(Review $review) {
        // Check if review already exists for user and product
        $existingReview = $this->getReviewByUserAndProduct($review->getUserID(), $review->getProductID());
        if ($existingReview !== null) {
            return "Review already exists";
        }

        // Insert new review into database
        $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
                VALUES (:product_id, :user_id, :rating, :comment)";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(":product_id", $review->getProductID());
        $stmt->bindParam(":user_id", $review->getUserID());
        $stmt->bindParam(":rating", $review->getRating());
        $stmt->bindParam(":comment", $review->getComment());
        $stmt->execute();

        return "Review created successfully";
    }

    public function getReviewsByProduct($product_id) {
        // Get all reviews for product
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(":product_id", $product_id);
        $stmt->execute();
        $reviews = $stmt->fetchAll();

        return $reviews;
    }

    public function getReviewByUserAndProduct($user_id, $product_id) {
        // Get review for user and product
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id AND user_id = :user_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(":product_id", $product_id);
        $stmt->bindParam(":user_id", $user_id);
        $stmt->execute();
        $review = $stmt->fetch();

        return $review;
    }
}


// Create database connection
$db = new PDO("mysql:host=localhost;dbname=mydatabase", "username", "password");

// Create review controller
$reviewController = new ReviewController($db);

// Create new review
$review = new Review(null, 1, 1, 5, "Great product!");

// Create review
$result = $reviewController->createReview($review);
echo $result; // Output: Review created successfully

// Get all reviews for product
$product_id = 1;
$reviews = $reviewController->getReviewsByProduct($product_id);
foreach ($reviews as $review) {
    echo "Rating: {$review['rating']}, Comment: {$review['comment']}<br>";
}


CREATE TABLE reviews (
  id INT PRIMARY KEY AUTO_INCREMENT,
  product_id INT NOT NULL,
  user_id INT NOT NULL,
  rating TINYINT(1) NOT NULL,
  review TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE products (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL,
  description TEXT NOT NULL
);


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function getAllReviewsForProduct($productId) {
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$productId]);
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function addReview($data) {
    $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($query);
    $stmt->execute([
      $data['product_id'],
      $data['user_id'],
      $data['rating'],
      $data['review']
    ]);
  }

  public function getReviewById($id) {
    $query = "SELECT * FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$id]);
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }
}


function addUserReview($productId, $userId, $rating, $review) {
  $db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  $reviewModel = new Review($db);

  if ($review) {
    $reviewData = [
      'product_id' => $productId,
      'user_id' => $userId,
      'rating' => $rating,
      'review' => $review
    ];

    $reviewModel->addReview($reviewData);
    echo "Review added successfully!";
  } else {
    echo "Please enter a review.";
  }
}


addUserReview(1, 1, 5, 'This product is amazing!');


<?php
class Review {
  private $db;

  public function __construct() {
    // Connect to database (e.g. MySQL)
    $this->db = new mysqli('localhost', 'username', 'password', 'database');
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }
  }

  public function addReview($userId, $productId, $rating, $comment) {
    // Validate input
    if (!$rating || !is_numeric($rating)) {
      throw new Exception('Invalid rating');
    }
    if (empty($comment)) {
      throw new Exception('Comment is required');
    }

    // Insert review into database
    $query = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param('iiii', $userId, $productId, $rating, $comment);
    $result = $stmt->execute();
    if (!$result) {
      throw new Exception('Error adding review');
    }
  }

  public function getReviewsForProduct($productId) {
    // Get reviews for specific product
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param('i', $productId);
    $result = $stmt->execute();
    if ($result) {
      return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
    } else {
      throw new Exception('Error retrieving reviews');
    }
  }

  public function getReviewsForUser($userId) {
    // Get reviews for specific user
    $query = "SELECT * FROM reviews WHERE user_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param('i', $userId);
    $result = $stmt->execute();
    if ($result) {
      return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
    } else {
      throw new Exception('Error retrieving reviews');
    }
  }

  public function deleteReview($reviewId) {
    // Delete review from database
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param('i', $reviewId);
    $result = $stmt->execute();
    if (!$result) {
      throw new Exception('Error deleting review');
    }
  }
}
?>


// Create instance of Review class
$review = new Review();

// Add a review for a product
try {
  $review->addReview(1, 5, 4.5, 'Great product!');
} catch (Exception $e) {
  echo "Error: " . $e->getMessage();
}

// Get reviews for a product
$reviews = $review->getReviewsForProduct(5);
foreach ($reviews as $review) {
  echo $review['comment'] . "
";
}

// Delete a review
try {
  $review->deleteReview(1);
} catch (Exception $e) {
  echo "Error: " . $e->getMessage();
}


// database connection details
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'database';

// connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

function user_review($user_id, $product_id) {
  global $conn;

  // check if review already exists for this product and user
  $sql = "SELECT * FROM reviews WHERE user_id = '$user_id' AND product_id = '$product_id'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    return false; // review already exists, do not allow editing
  }

  // get user rating and review for this product
  $sql = "SELECT rating, review FROM reviews WHERE user_id = '$user_id' AND product_id = '$product_id'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
      return array(
        'rating' => $row['rating'],
        'review' => $row['review']
      );
    }
  }

  // no review found, create new one
  $sql = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES ('$user_id', '$product_id', NULL, '')";
  if ($conn->query($sql) === TRUE) {
    return true;
  } else {
    return false; // error inserting review
  }
}


$user_id = 1;
$product_id = 3;

$result = user_review($user_id, $product_id);

if ($result === true) {
  echo "Review created successfully!";
} elseif ($result === false) {
  echo "Error creating review.";
} else {
  echo "Rating: " . $result['rating'];
  echo "Review: " . $result['review'];
}


<?php

class Review {
  private $id;
  private $product_id;
  private $rating;
  private $review_text;

  public function __construct($data) {
    $this->id = $data['id'];
    $this->product_id = $data['product_id'];
    $this->rating = $data['rating'];
    $this->review_text = $data['review_text'];
  }

  public static function getReviews($productId, $limit = 10) {
    // Retrieve reviews from database
    $reviews = array();
    // Simulate database query for simplicity
    if ($productId == 1) {
      $reviews[] = new Review(array('id' => 1, 'product_id' => 1, 'rating' => 5, 'review_text' => 'Great product!'));
      $reviews[] = new Review(array('id' => 2, 'product_id' => 1, 'rating' => 4, 'review_text' => 'Good product, but expensive.'));
    }
    return $reviews;
  }

  public static function addReview($data) {
    // Validate review data
    if (!isset($data['product_id']) || !isset($data['rating']) || !isset($data['review_text'])) {
      throw new Exception('Invalid review data');
    }
    // Insert review into database
    // Simulate database insertion for simplicity
    $newReview = new Review(array('id' => 3, 'product_id' => $data['product_id'], 'rating' => $data['rating'], 'review_text' => $data['review_text']));
    return $newReview;
  }
}

?>


// Get reviews for a product with ID 1
$reviews = Review::getReviews(1);
foreach ($reviews as $review) {
  echo "Rating: {$review->rating} - Review: {$review->review_text}
";
}

// Add a new review for a product with ID 1
$newReviewData = array('product_id' => 1, 'rating' => 5, 'review_text' => 'Love this product!');
$newReview = Review::addReview($newReviewData);
echo "New review added: {$newReview->id} - Rating: {$newReview->rating} - Review: {$newReview->review_text}
";


CREATE TABLE users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255),
    email VARCHAR(255)
);

CREATE TABLE products (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255),
    description TEXT
);

CREATE TABLE reviews (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    product_id INT,
    rating INT,
    comment TEXT,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);


// Review.php

class Review {
    private $id;
    private $userId;
    private $productId;
    private $rating;
    private $comment;

    public function __construct($id = null, $userId = null, $productId = null, $rating = null, $comment = null) {
        $this->id = $id;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


// ReviewController.php

class ReviewController {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    // Get all reviews for a product
    public function getReviewsForProduct($productId) {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
    }

    // Create a new review
    public function createReview(Review $review) {
        $sql = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:user_id, :product_id, :rating, :comment)";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':user_id', $review->getUserId());
        $stmt->bindParam(':product_id', $review->getProductId());
        $stmt->bindParam(':rating', $review->getRating());
        $stmt->bindParam(':comment', $review->getComment());
        return $stmt->execute();
    }
}


// index.php

require_once 'config.php';
require_once 'ReviewController.php';

$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');

$reviewController = new ReviewController($db);

// Get all reviews for a product
$reviews = $reviewController->getReviewsForProduct(1);
foreach ($reviews as $review) {
    echo "Review ID: " . $review->getId() . "
";
    echo "User ID: " . $review->getUserId() . "
";
    echo "Product ID: " . $review->getProductId() . "
";
    echo "Rating: " . $review->getRating() . "
";
    echo "Comment: " . $review->getComment() . "

";
}

// Create a new review
$review = new Review(0, 1, 1, 5, "Great product!");
$success = $reviewController->createReview($review);
if ($success) {
    echo "Review created successfully!
";
} else {
    echo "Error creating review.
";
}


<?php

// Connect to database
require_once 'dbconfig.php';
$connection = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

// Check connection
if (!$connection) {
  die("Connection failed: " . mysqli_connect_error());
}

// Function to create a new review
function create_review($user_id, $product_name, $rating, $review_text) {
  global $connection;
  
  $sql = "INSERT INTO reviews (user_id, product_name, rating, review_text)
          VALUES ('$user_id', '$product_name', '$rating', '$review_text')";
  
  if (mysqli_query($connection, $sql)) {
    echo 'Review created successfully!';
  } else {
    echo 'Error creating review: ' . mysqli_error($connection);
  }
}

// Function to view all reviews
function view_reviews() {
  global $connection;
  
  $sql = "SELECT * FROM reviews";
  $result = mysqli_query($connection, $sql);
  
  if (mysqli_num_rows($result) > 0) {
    echo '<table border="1" cellpadding="10">';
    while ($row = mysqli_fetch_assoc($result)) {
      echo '<tr>';
      echo '<td>' . $row['product_name'] . '</td>';
      echo '<td>' . $row['rating'] . '</td>';
      echo '<td>' . $row['review_text'] . '</td>';
      echo '<td><a href="update_review.php?id=' . $row['id'] . '">Update</a></td>';
      echo '<td><a href="delete_review.php?id=' . $row['id'] . '">Delete</a></td>';
      echo '</tr>';
    }
    echo '</table>';
  } else {
    echo 'No reviews found.';
  }
}

// Function to update a review
function update_review($review_id, $product_name, $rating, $review_text) {
  global $connection;
  
  $sql = "UPDATE reviews SET product_name='$product_name', rating='$rating', review_text='$review_text' WHERE id=$review_id";
  
  if (mysqli_query($connection, $sql)) {
    echo 'Review updated successfully!';
  } else {
    echo 'Error updating review: ' . mysqli_error($connection);
  }
}

// Function to delete a review
function delete_review($review_id) {
  global $connection;
  
  $sql = "DELETE FROM reviews WHERE id=$review_id";
  
  if (mysqli_query($connection, $sql)) {
    echo 'Review deleted successfully!';
  } else {
    echo 'Error deleting review: ' . mysqli_error($connection);
  }
}

// Test the functions
if (isset($_GET['action'])) {
  switch ($_GET['action']) {
    case 'create':
      create_review($_POST['user_id'], $_POST['product_name'], $_POST['rating'], $_POST['review_text']);
      break;
    case 'view_reviews':
      view_reviews();
      break;
    case 'update':
      update_review($_POST['id'], $_POST['product_name'], $_POST['rating'], $_POST['review_text']);
      break;
    case 'delete':
      delete_review($_GET['id']);
      break;
  }
} else {
  echo '<form action="reviews.php?action=create" method="post">';
  echo 'Product Name: <input type="text" name="product_name"><br>';
  echo 'Rating: <select name="rating">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
          </select><br>';
  echo 'Review Text: <textarea name="review_text"></textarea><br>';
  echo '<input type="hidden" name="user_id" value="' . $_SESSION['id'] . '">';
  echo '<input type="submit" value="Create Review">';
  echo '</form>';
}

?>


// Connect to database
$db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');

function addReview($productId, $userId, $rating, $review) {
  // Insert review into database
  $stmt = $db->prepare('INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)');
  $stmt->execute([
    ':product_id' => $productId,
    ':user_id' => $userId,
    ':rating' => $rating,
    ':review' => $review
  ]);
}

function getAverageRating($productId) {
  // Retrieve average rating from database
  $stmt = $db->prepare('SELECT AVG(rating) FROM reviews WHERE product_id = :product_id');
  $stmt->execute([':product_id' => $productId]);
  return (int)$stmt->fetchColumn();
}

function getReviewsForProduct($productId, $limit = 10) {
  // Retrieve reviews for a specific product from database
  $stmt = $db->prepare('SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC LIMIT :limit');
  $stmt->execute([':product_id' => $productId, ':limit' => $limit]);
  return $stmt->fetchAll();
}

// Example usage:
addReview(1, 1, 5, 'Great product!');
echo getAverageRating(1); // Output: 5
$reviews = getReviewsForProduct(1);
print_r($reviews); // Output: Array of reviews for product ID 1


<?php

function create_review($product_id, $rating, $comment) {
  // Check if product exists
  if (!exists_product($product_id)) {
    return array("error" => "Product not found");
  }

  // Create new review
  $review = array(
    "product_id" => $product_id,
    "rating" => $rating,
    "comment" => $comment
  );

  // Insert review into database
  try {
    db_connect();
    query("INSERT INTO reviews (product_id, rating, comment) VALUES (:product_id, :rating, :comment)", array(
      ":product_id" => $product_id,
      ":rating" => $rating,
      ":comment" => $comment
    ));
    close_db();
  } catch (PDOException $e) {
    return array("error" => "Failed to create review");
  }

  // Return success message
  return array("success" => "Review created successfully");
}

function get_reviews($product_id) {
  // Check if product exists
  if (!exists_product($product_id)) {
    return array("error" => "Product not found");
  }

  // Get reviews from database
  try {
    db_connect();
    $reviews = query("SELECT * FROM reviews WHERE product_id = :product_id", array(
      ":product_id" => $product_id
    ));
    close_db();

    // Format reviews as JSON
    foreach ($reviews as &$review) {
      $review["rating"] = (int)$review["rating"];
    }
    return json_encode($reviews);
  } catch (PDOException $e) {
    return array("error" => "Failed to retrieve reviews");
  }
}

function exists_product($product_id) {
  // Check if product exists in database
  try {
    db_connect();
    $result = query("SELECT * FROM products WHERE id = :id", array(
      ":id" => $product_id
    ));
    close_db();

    return !empty($result);
  } catch (PDOException $e) {
    return false;
  }
}

?>


$review_data = create_review(1, 4, "Great product!");
print_r($review_data);


$reviews = get_reviews(1);
echo $reviews;


// Include database connection settings
require 'db_connection.php';

// Function to display all reviews
function display_reviews() {
  $sql = "SELECT * FROM reviews ORDER BY created_at DESC";
  $result = mysqli_query($conn, $sql);
  while ($review = mysqli_fetch_assoc($result)) {
    echo '<div class="review">';
    echo '<h2>' . $review['product_name'] . '</h2>';
    echo '<p>Rating: ' . $review['rating'] . '/5</p>';
    echo '<p>' . substr($review['review'], 0, 200) . '...</p>';
    echo '<p>Posted by ' . get_user_name($review['user_id']) . '</p>';
    echo '</div>';
  }
}

// Function to display user reviews
function display_user_reviews($user_id) {
  $sql = "SELECT * FROM reviews WHERE user_id = '$user_id' ORDER BY created_at DESC";
  $result = mysqli_query($conn, $sql);
  while ($review = mysqli_fetch_assoc($result)) {
    echo '<div class="review">';
    echo '<h2>' . $review['product_name'] . '</h2>';
    echo '<p>Rating: ' . $review['rating'] . '/5</p>';
    echo '<p>' . substr($review['review'], 0, 200) . '...</p>';
    echo '<p>Posted by ' . get_user_name($review['user_id']) . '</p>';
    echo '</div>';
  }
}

// Function to add a new review
function add_review($product_name, $rating, $review, $user_id) {
  $sql = "INSERT INTO reviews (product_name, rating, review, user_id) VALUES ('$product_name', '$rating', '$review', '$user_id')";
  if (mysqli_query($conn, $sql)) {
    echo 'Review added successfully!';
  } else {
    echo 'Error adding review: ' . mysqli_error($conn);
  }
}

// Function to get the name of a user
function get_user_name($user_id) {
  $sql = "SELECT username FROM users WHERE id = '$user_id'";
  $result = mysqli_query($conn, $sql);
  return mysqli_fetch_assoc($result)['username'];
}


<?php display_reviews(); ?>


<?php display_user_reviews(1); // Replace 1 with the desired user ID ?>


<?php add_review('Product Name', 4, 'This is a great product!', 2); // Replace values with your own ?>


// models/Review.php

class Review {
  private $id;
  private $userId;
  private $productId;
  private $rating;
  private $comment;

  public function __construct($data) {
    $this->id = (int)$data['id'];
    $this->userId = (int)$data['user_id'];
    $this->productId = (int)$data['product_id'];
    $this->rating = (float)$data['rating'];
    $this->comment = $data['comment'];
  }

  public function getId() {
    return $this->id;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getProductId() {
    return $this->productId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }
}


// services/ReviewService.php

class ReviewService {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function getAllReviews($productId) {
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$productId]);
    return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
  }

  public function getReview($id) {
    $query = "SELECT * FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$id]);
    return $stmt->fetchObject('Review');
  }

  public function addReview(Review $review) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$review->getUserId(), $review->getProductId(), $review->getRating(), $review->getComment()]);
  }

  public function updateReview(Review $review) {
    $query = "UPDATE reviews SET rating = ?, comment = ? WHERE id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$review->getRating(), $review->getComment(), $review->getId()]);
  }

  public function deleteReview($id) {
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$id]);
  }
}


// controllers/ReviewController.php

class ReviewController {
  private $reviewService;

  public function __construct(ReviewService $reviewService) {
    $this->reviewService = $reviewService;
  }

  public function index() {
    $productId = $_GET['product_id'];
    $reviews = $this->reviewService->getAllReviews($productId);
    return view('reviews.index', ['reviews' => $reviews]);
  }

  public function show($id) {
    $review = $this->reviewService->getReview($id);
    return view('reviews.show', ['review' => $review]);
  }

  public function create() {
    // render create form
  }

  public function store(Request $request) {
    $review = new Review(['user_id' => auth()->id(), 'product_id' => $_GET['product_id'], 'rating' => (float)$request->input('rating'), 'comment' => $request->input('comment')]);
    $this->reviewService->addReview($review);
    return redirect()->back();
  }

  public function edit($id) {
    // render edit form
  }

  public function update(Request $request, $id) {
    $review = new Review(['rating' => (float)$request->input('rating'), 'comment' => $request->input('comment')]);
    $this->reviewService->updateReview($review);
    return redirect()->back();
  }

  public function destroy($id) {
    $this->reviewService->deleteReview($id);
    return redirect()->back();
  }
}


// views/reviews/index.blade.php

@foreach ($reviews as $review)
  {{ $review->getRating() }} stars by {{ $review->getUserId() }}
  {{ $review->getComment() }}
@endforeach


<?php
class Review {
    private $id;
    private $user_id;
    private $product_id;
    private $rating;
    private $comment;

    public function __construct($data = null) {
        if ($data !== null) {
            $this->loadData($data);
        }
    }

    private function loadData($data) {
        $this->id = (int)$data['id'];
        $this->user_id = (int)$data['user_id'];
        $this->product_id = (int)$data['product_id'];
        $this->rating = (float)$data['rating'];
        $this->comment = trim($data['comment']);
    }

    public function getId() {
        return $this->id;
    }

    public function getUserID() {
        return $this->user_id;
    }

    public function getProductID() {
        return $this->product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}

class ReviewManager {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function storeReview(Review $review) {
        $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)');
        return $stmt->execute([$review->getUserID(), $review->getProductID(), $review->getRating(), $review->getComment()]);
    }

    public function getReviews($productID = null) {
        if ($productID === null) {
            $stmt = $this->db->prepare('SELECT * FROM reviews ORDER BY id DESC');
        } else {
            $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = ? ORDER BY id DESC');
            $stmt->execute([$productID]);
        }

        return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
    }

    public function calculateAverageRating($productID) {
        $reviews = $this->getReviews($productID);
        if (empty($reviews)) {
            return 0;
        }

        $sum = array_sum(array_column($reviews, 'rating'));
        return round($sum / count($reviews));
    }
}
?>


require_once 'review.php';

// assume we have a PDO instance named `$db` that's connected to our database

$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

$manager = new ReviewManager($db);
$review1 = new Review(['user_id' => 1, 'product_id' => 10, 'rating' => 5.0, 'comment' => 'Great product!']);
$review2 = new Review(['user_id' => 2, 'product_id' => 10, 'rating' => 4.0, 'comment' => 'Good product']);

$manager->storeReview($review1);
$manager->storeReview($review2);

// get all reviews
$reviews = $manager->getReviews();

// get reviews for a specific product
$productID = 10;
$reviewsForProduct = $manager->getReviews($productID);

// calculate average rating for a product
$averageRating = $manager->calculateAverageRating($productID);
echo "Average rating for product $productID is $averageRating stars";


// Review system functions

// Function to display reviews for a given product
function get_reviews($product_id) {
    global $db;
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    return mysqli_query($db, $query);
}

// Function to add a review for a given product
function create_review($product_id, $rating, $comment) {
    global $db;
    $query = "INSERT INTO reviews (product_id, rating, comment)
               VALUES ('$product_id', '$rating', '$comment')";
    return mysqli_query($db, $query);
}

// Function to display review form for a given product
function get_review_form($product_id) {
    ?>
    <h2>Leave a Review</h2>
    <form action="create_review.php" method="post">
        <label for="rating">Rating:</label>
        <select id="rating" name="rating">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
        </select><br>
        <label for="comment">Comment:</label>
        <textarea id="comment" name="comment"></textarea><br>
        <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
        <button type="submit">Submit Review</button>
    </form>
    <?php
}

// Function to display individual review details
function get_review_details($review_id) {
    global $db;
    $query = "SELECT * FROM reviews WHERE id = '$review_id'";
    return mysqli_fetch_assoc(mysqli_query($db, $query));
}


// Display reviews for a given product
<?php
$product_id = 1;
$reviews = get_reviews($product_id);
foreach ($reviews as $review) {
    echo $review['comment'] . " (" . $review['rating'] . "/5)";
}
?>

// Add a review for a given product
<?php
$product_id = $_POST['product_id'];
$rating = $_POST['rating'];
$comment = $_POST['comment'];

if (create_review($product_id, $rating, $comment)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}
?>


// Example using PDO and prepared statement
$stmt = $db->prepare("INSERT INTO reviews (product_id, rating, comment)
                     VALUES (:product_id, :rating, :comment)");
$stmt->bindParam(':product_id', $product_id);
$stmt->bindParam(':rating', $rating);
$stmt->bindParam(':comment', $comment);
if ($stmt->execute()) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}


// Database connection settings
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database";

// Create a connection to the database
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function createUserReview($userId, $productId, $rating, $comment) {
    global $conn;

    // Query to create a new review
    $sql = "INSERT INTO reviews (user_id, product_id, rating, comment)
            VALUES ('$userId', '$productId', '$rating', '$comment')";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}

function getUserReviews($userId) {
    global $conn;

    // Query to retrieve all reviews from a user
    $sql = "SELECT * FROM reviews WHERE user_id = '$userId'";

    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        return $result;
    } else {
        echo "No reviews found.";
        return null;
    }
}

function getProductReviews($productId) {
    global $conn;

    // Query to retrieve all reviews for a product
    $sql = "SELECT * FROM reviews WHERE product_id = '$productId'";

    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        return $result;
    } else {
        echo "No reviews found.";
        return null;
    }
}

function updateReviewRating($reviewId, $newRating) {
    global $conn;

    // Query to update a review's rating
    $sql = "UPDATE reviews SET rating = '$newRating' WHERE id = '$reviewId'";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}

function updateReviewComment($reviewId, $newComment) {
    global $conn;

    // Query to update a review's comment
    $sql = "UPDATE reviews SET comment = '$newComment' WHERE id = '$reviewId'";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}

function deleteReview($reviewId) {
    global $conn;

    // Query to delete a review
    $sql = "DELETE FROM reviews WHERE id = '$reviewId'";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}


// Create a new user review
createUserReview(1, 1, 5, 'This product is great!');

// Retrieve all reviews from a user
$result = getUserReviews(1);
while ($row = $result->fetch_assoc()) {
    echo "Rating: " . $row['rating'] . ", Comment: " . $row['comment'];
}

// Update a review's rating
updateReviewRating(1, 4);

// Retrieve all reviews for a product
$result = getProductReviews(1);
while ($row = $result->fetch_assoc()) {
    echo "Rating: " . $row['rating'] . ", Comment: " . $row['comment'];
}

// Update a review's comment
updateReviewComment(1, 'This product is okay.');

// Delete a review
deleteReview(1);


// configuration file
require 'config.php';

// function to get all reviews for a product
function getReviews($productId) {
    global $db;
    $query = "SELECT * FROM reviews WHERE product_id = '$productId'";
    return $db->query($query)->fetch_all(MYSQLI_ASSOC);
}

// function to add new review
function addReview($data) {
    global $db;
    extract($data);

    // sanitize inputs
    $rating = (int)$rating;
    $review = mysqli_real_escape_string($db, $review);

    // insert into database
    $query = "INSERT INTO reviews (product_id, user_id, rating, review)
              VALUES ('$productId', '$userId', '$rating', '$review')";
    return $db->query($query);
}

// function to display average rating for a product
function getAverageRating($productId) {
    global $db;
    $query = "SELECT AVG(rating) as average FROM reviews WHERE product_id = '$productId'";
    $result = $db->query($query)->fetch_assoc();
    return isset($result['average']) ? (float)$result['average'] : 0;
}

// example usage:
$productId = 1; // replace with actual product ID

// get all reviews for this product
$reviews = getReviews($productId);
echo "Reviews for Product $productId:<br>";

foreach ($reviews as $review) {
    echo "Rating: $review[rating] - Review: $review[review]<br>";
}

// add new review
$data = array(
    'product_id' => 1,
    'user_id' => 1,
    'rating' => 5,
    'review' => 'This is a great product!'
);
addReview($data);

// display average rating for this product
echo "Average Rating: ".getAverageRating(1)."<br>";



<?php

// Database configuration
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'root';
$password = '';

try {
    // Establish a connection to the database
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    die("Connection failed: " . $e->getMessage());
}

function createUser($name)
{
    global $pdo;

    try {
        // Create a prepared statement to insert user data
        $stmt = $pdo->prepare("INSERT INTO users (name) VALUES (:name)");
        $stmt->bindParam(':name', $name);
        $stmt->execute();

        return $pdo->lastInsertId();
    } catch (PDOException $e) {
        die("Error creating user: " . $e->getMessage());
    }
}

function createReview($userId, $productId, $rating, $review)
{
    global $pdo;

    try {
        // Create a prepared statement to insert review data
        $stmt = $pdo->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        $stmt->execute();

        return $pdo->lastInsertId();
    } catch (PDOException $e) {
        die("Error creating review: " . $e->getMessage());
    }
}

function getReview($id)
{
    global $pdo;

    try {
        // Create a prepared statement to select the specified review
        $stmt = $pdo->prepare("SELECT * FROM reviews WHERE id = :id");
        $stmt->bindParam(':id', $id);
        $stmt->execute();

        return $stmt->fetch();
    } catch (PDOException $e) {
        die("Error getting review: " . $e->getMessage());
    }
}

function updateReview($id, $rating = null, $review = null)
{
    global $pdo;

    try {
        // Create a prepared statement to update the specified review
        $stmt = $pdo->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
        if ($rating !== null) {
            $stmt->bindParam(':rating', $rating);
        }
        if ($review !== null) {
            $stmt->bindParam(':review', $review);
        }
        $stmt->bindParam(':id', $id);
        $stmt->execute();

        return true;
    } catch (PDOException $e) {
        die("Error updating review: " . $e->getMessage());
    }
}

function deleteReview($id)
{
    global $pdo;

    try {
        // Create a prepared statement to delete the specified review
        $stmt = $pdo->prepare("DELETE FROM reviews WHERE id = :id");
        $stmt->bindParam(':id', $id);
        $stmt->execute();

        return true;
    } catch (PDOException $e) {
        die("Error deleting review: " . $e->getMessage());
    }
}

// Example usage
$userName = 'John Doe';
$userId = createUser($userName);

$productName = 'Example Product';
$productDescription = 'This is an example product.';
$product = array('name' => $productName, 'description' => $productDescription);

$productId = createProduct($productName, $productDescription); // Note: This function doesn't exist in the original code snippet. You'll need to implement it separately.

$reviewRating = 5;
$reviewText = 'This product is amazing!';

$reviewId = createReview($userId, $productId, $reviewRating, $reviewText);

// Retrieve a review by ID
$review = getReview($reviewId);
print_r($review);

// Update the review
$updateData = array('rating' => 4, 'review' => 'This product is great!');
updateReview($reviewId, $updateData['rating'], $updateData['review']);

// Delete the review
deleteReview($reviewId);


// Connect to database
$dsn = 'mysql:host=localhost;dbname=mydatabase';
$username = 'myusername';
$password = 'mypassword';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// Function to create a review
function create_review($product_id, $user_id, $rating, $review) {
    global $pdo;
    
    $stmt = $pdo->prepare('INSERT INTO reviews SET product_id = :product_id, user_id = :user_id, rating = :rating, review = :review');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Function to get all reviews for a product
function get_reviews($product_id) {
    global $pdo;
    
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);
    
    if ($stmt->execute()) {
        return $stmt->fetchAll();
    } else {
        return array();
    }
}

// Function to get average rating for a product
function get_average_rating($product_id) {
    global $pdo;
    
    $stmt = $pdo->prepare('SELECT AVG(rating) AS average FROM reviews WHERE product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);
    
    if ($stmt->execute()) {
        $result = $stmt->fetch();
        return isset($result['average']) ? $result['average'] : 0;
    } else {
        return 0;
    }
}

// Example usage:
$product_id = 1;
$user_id = 1;
$rating = 4;
$review = 'Great product!';

if (create_review($product_id, $user_id, $rating, $review)) {
    echo 'Review created successfully!';
} else {
    echo 'Error creating review.';
}

$reviews = get_reviews($product_id);
echo 'Reviews for product ' . $product_id . ':';
print_r($reviews);

$average_rating = get_average_rating($product_id);
echo 'Average rating: ' . $average_rating;


// config.php
<?php
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'root';
$password = '';

try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
    echo "Connected to the database successfully!";
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}


// Review.php
<?php
class Review {
    private $conn;

    public function __construct($db) {
        $this->conn = $db;
    }

    // Function to add new reviews
    public function add_review($product_id, $user_id, $rating, $comment) {
        try {
            $query = "INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)";
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':user_id', $user_id);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to view all reviews
    public function view_reviews() {
        try {
            $query = "SELECT * FROM reviews";
            $stmt = $this->conn->prepare($query);
            $stmt->execute();
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to update an existing review
    public function update_review($review_id, $new_comment) {
        try {
            $query = "UPDATE reviews SET comment = :comment WHERE id = :id";
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':id', $review_id);
            $stmt->bindParam(':comment', $new_comment);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to delete a review
    public function delete_review($review_id) {
        try {
            $query = "DELETE FROM reviews WHERE id = :id";
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':id', $review_id);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }
}


// user_reviews.php
<?php
require_once 'config.php';
require_once 'Review.php';

class UserReviews {
    private $review;

    public function __construct() {
        $this->review = new Review($conn);
    }

    // Function to add a review for a product
    public function add_review_for_product($product_id, $user_id, $rating, $comment) {
        return $this->review->add_review($product_id, $user_id, $rating, $comment);
    }

    // Function to view all reviews for a user
    public function view_reviews_by_user($user_id) {
        try {
            $query = "SELECT * FROM reviews WHERE user_id = :id";
            $stmt = $conn->prepare($query);
            $stmt->bindParam(':id', $user_id);
            $stmt->execute();
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to view all reviews for a product
    public function view_reviews_by_product($product_id) {
        try {
            $query = "SELECT * FROM reviews WHERE product_id = :id";
            $stmt = $conn->prepare($query);
            $stmt->bindParam(':id', $product_id);
            $stmt->execute();
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to update an existing review
    public function update_review($review_id, $new_comment) {
        return $this->review->update_review($review_id, $new_comment);
    }

    // Function to delete a review
    public function delete_review($review_id) {
        return $this->review->delete_review($review_id);
    }
}

// Example usage:
$reviews = new UserReviews();

// Add a review for a product
$product_id = 1;
$user_id = 1;
$rating = 5;
$comment = "Excellent product!";
echo var_export($reviews->add_review_for_product($product_id, $user_id, $rating, $comment), true);

// View all reviews by user
$user_id = 1;
echo "<pre>";
print_r($reviews->view_reviews_by_user($user_id));
echo "</pre>";

// Update an existing review
$review_id = 1;
$new_comment = "Best product ever!";
echo var_export($reviews->update_review($review_id, $new_comment), true);

// Delete a review
$review_id = 1;
echo var_export($reviews->delete_review($review_id), true);


<?php

// Database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Create a new database connection
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

// Check the connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function submitReview() {
    global $conn;

    // Get the review text and rating from the form
    $review_text = $_POST['review_text'];
    $rating = $_POST['rating'];

    // Insert a new review into the database
    $sql = "INSERT INTO reviews (user_id, review_text, rating)
            VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param('iss', 1, $review_text, $rating);
    if (!$stmt->execute()) {
        echo "Error submitting review: " . $stmt->error;
    }
}

function getReviews() {
    global $conn;

    // Retrieve all reviews from the database
    $sql = "SELECT r.id, r.review_text, r.rating, u.username
            FROM reviews r JOIN users u ON r.user_id = u.id";
    $result = $conn->query($sql);

    // Display each review in a table row
    echo "<table border='1'>";
    while ($row = $result->fetch_assoc()) {
        echo "<tr>";
        echo "<td>" . $row['review_text'] . "</td>";
        echo "<td>" . $row['rating'] . "/5</td>";
        echo "<td>Submitted by " . $row['username'] . "</td>";
        echo "</tr>";
    }
    echo "</table>";
}

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    submitReview();
}
?>

<form action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" method="post">
    <label for="review_text">Enter your review:</label>
    <br>
    <textarea id="review_text" name="review_text"></textarea>
    <br>
    <label for="rating">Rating (1-5):</label>
    <select id="rating" name="rating">
        <?php
            for ($i = 1; $i <= 5; $i++) {
                echo "<option value='$i'>$i/5</option>";
            }
        ?>
    </select>
    <br>
    <input type="submit" value="Submit Review">
</form>

<h2>Reviews:</h2>
<?php getReviews(); ?>

<?php
// Close the database connection when finished
$conn->close();
?>


<?php
// database connection settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// create a function to connect to the database
function dbConnect() {
    $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// create functions for CRUD operations
function createUserReview($user_id, $product_id, $rating, $review_text) {
    $conn = dbConnect();
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiss", $user_id, $product_id, $rating, $review_text);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function getReviewsByProduct($product_id) {
    $conn = dbConnect();
    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    return $stmt->get_result();
}

function getUserReview($user_id, $product_id) {
    $conn = dbConnect();
    $sql = "SELECT * FROM reviews WHERE user_id = ? AND product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ii", $user_id, $product_id);
    $stmt->execute();
    return $stmt->get_result()->fetch_assoc();
}

function updateReview($id, $rating, $review_text) {
    $conn = dbConnect();
    $sql = "UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iis", $rating, $review_text, $id);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function deleteReview($id) {
    $conn = dbConnect();
    $sql = "DELETE FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $id);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}


<?php
$reviews = getReviewsByProduct(123); // replace with your product ID
?>
<ul>
  <?php foreach ($reviews as $review) { ?>
    <li>Rating: <?= $review['rating']; ?> - <?= $review['review_text']; ?></li>
  <?php } ?>
</ul>


<?php
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $user_id = $_POST['user_id'];
    $product_id = $_POST['product_id'];
    $rating = $_POST['rating'];
    $review_text = $_POST['review_text'];

    if (createUserReview($user_id, $product_id, $rating, $review_text)) {
        // review submitted successfully
    } else {
        // error submitting review
    }
}
?>


<?php

// Include database connection settings
require_once 'database.php';

// Function to submit a review
function submit_review($data) {
  global $db;

  try {
    // Insert review into database
    $stmt = $db->prepare("INSERT INTO reviews (user_id, product_id, review, rating) VALUES (:user_id, :product_id, :review, :rating)");
    $stmt->execute([
      'user_id' => $_SESSION['id'],
      'product_id' => $data['product_id'] ?? null,
      'review' => $data['review'],
      'rating' => $data['rating']
    ]);

    return true;

  } catch (PDOException $e) {
    echo "Error submitting review: " . $e->getMessage();
    return false;
  }
}

// Function to view all reviews
function view_reviews() {
  global $db;

  try {
    // Retrieve all reviews from database
    $stmt = $db->prepare("SELECT * FROM reviews JOIN users ON reviews.user_id = users.id");
    $stmt->execute();

    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

    return $reviews;

  } catch (PDOException $e) {
    echo "Error viewing reviews: " . $e->getMessage();
    return false;
  }
}

// Function to view a specific review
function view_review($id) {
  global $db;

  try {
    // Retrieve review from database by ID
    $stmt = $db->prepare("SELECT * FROM reviews JOIN users ON reviews.user_id = users.id WHERE id = :id");
    $stmt->execute(['id' => $id]);

    return $stmt->fetch(PDO::FETCH_ASSOC);

  } catch (PDOException $e) {
    echo "Error viewing review: " . $e->getMessage();
    return false;
  }
}

?>


<?php

// Configuration
$databaseHost = 'localhost';
$databaseName = 'your_database_name';
$databaseUsername = 'your_database_username';
$databasePassword = 'your_database_password';

// Connect to database
$mysqli = new mysqli($databaseHost, $databaseUsername, $databasePassword, $databaseName);

if ($mysqli->connect_errno) {
    echo "Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error;
}

function addReview($userId, $productId, $rating, $comment) {
    global $mysqli;

    // Check if review already exists
    $query = "SELECT * FROM reviews WHERE user_id = '$userId' AND product_id = '$productId'";
    $result = $mysqli->query($query);
    if ($result->num_rows > 0) {
        return array('error' => 'Review already exists');
    }

    // Insert new review
    $sql = "INSERT INTO reviews (user_id, product_id, rating, comment)
            VALUES ('$userId', '$productId', '$rating', '$comment')";
    if (!$mysqli->query($sql)) {
        return array('error' => 'Failed to add review');
    }

    return array('success' => true);
}

function getReview($reviewId) {
    global $mysqli;

    // Retrieve review by ID
    $query = "SELECT * FROM reviews WHERE id = '$reviewId'";
    $result = $mysqli->query($query);
    if ($result->num_rows > 0) {
        return $result->fetch_assoc();
    }

    return array('error' => 'Review not found');
}

function getUserReviews($userId) {
    global $mysqli;

    // Retrieve reviews by user ID
    $query = "SELECT * FROM reviews WHERE user_id = '$userId'";
    $result = $mysqli->query($query);
    if ($result->num_rows > 0) {
        return array_map(function($row) { return (object)array(
            'id' => $row['id'],
            'rating' => $row['rating'],
            'comment' => $row['comment']
        ); }, $result->fetch_all());
    }

    return array();
}

function getAllReviews() {
    global $mysqli;

    // Retrieve all reviews
    $query = "SELECT * FROM reviews";
    $result = $mysqli->query($query);
    if ($result->num_rows > 0) {
        return array_map(function($row) { return (object)array(
            'id' => $row['id'],
            'rating' => $row['rating'],
            'comment' => $row['comment']
        ); }, $result->fetch_all());
    }

    return array();
}

// Close database connection
$mysqli->close();

?>


<?php

require_once 'review.php';

// Add new review
$userId = 1;
$productId = 1;
$rating = 5;
$comment = "Great product!";
$result = addReview($userId, $productId, $rating, $comment);
if ($result['success']) {
    echo "Review added successfully";
} else {
    echo "Error: " . $result['error'];
}

// Get review by ID
$reviewId = 1;
$reviewData = getReview($reviewId);
if (isset($reviewData['id'])) {
    echo "Review found with rating: " . $reviewData['rating'] . " and comment: " . $reviewData['comment'];
} else {
    echo "Error: Review not found";
}

// Get user reviews
$userId = 1;
$userReviews = getUserReviews($userId);
echo "User's reviews:
";
foreach ($userReviews as $review) {
    echo "Rating: " . $review->rating . ", Comment: " . $review->comment . "
";
}

// Get all reviews
$allReviews = getAllReviews();
echo "All reviews:
";
foreach ($allReviews as $review) {
    echo "Rating: " . $review->rating . ", Comment: " . $review->comment . "
";
}

?>


class Review {
    private $db;

    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Create a new review
     *
     * @param int $productId
     * @param int $userId
     * @param float $rating
     * @param string $review
     */
    public function createReview($productId, $userId, $rating, $review)
    {
        $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:productId, :userId, :rating, :review)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        return $stmt->execute();
    }

    /**
     * Get all reviews for a product
     *
     * @param int $productId
     */
    public function getReviewsForProduct($productId)
    {
        $query = "SELECT * FROM reviews WHERE product_id = :productId";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':productId', $productId);
        return $stmt->execute()->fetchAll();
    }

    /**
     * Get all reviews for a user
     *
     * @param int $userId
     */
    public function getReviewsForUser($userId)
    {
        $query = "SELECT * FROM reviews WHERE user_id = :userId";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':userId', $userId);
        return $stmt->execute()->fetchAll();
    }

    /**
     * Update a review
     *
     * @param int $reviewId
     * @param string $newRating
     * @param string $newReview
     */
    public function updateReview($reviewId, $newRating, $newReview)
    {
        $query = "UPDATE reviews SET rating = :rating, review = :review WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':id', $reviewId);
        $stmt->bindParam(':rating', $newRating);
        $stmt->bindParam(':review', $newReview);
        return $stmt->execute();
    }

    /**
     * Delete a review
     *
     * @param int $reviewId
     */
    public function deleteReview($reviewId)
    {
        $query = "DELETE FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':id', $reviewId);
        return $stmt->execute();
    }
}


$db = new PDO('mysql:host=localhost;dbname=your_database_name', 'username', 'password');
$review = new Review($db);

// Create a new review
$productId = 1;
$userId = 2;
$rating = 5.0;
$reviewText = "This product is amazing!";
$review->createReview($productId, $userId, $rating, $reviewText);

// Get all reviews for a product
$productReviews = $review->getReviewsForProduct(1);
print_r($productReviews);

// Update a review
$newRating = 4.5;
$newReviewText = "I've updated my review!";
$review->updateReview(1, $newRating, $newReviewText);

// Delete a review
$review->deleteReview(2);


<?php

// Review class to store and retrieve reviews
class Review {
  private $id;
  private $title;
  private $content;
  private $rating;
  private $date;

  public function __construct($id, $title, $content, $rating, $date) {
    $this->id = $id;
    $this->title = $title;
    $this->content = $content;
    $this->rating = $rating;
    $this->date = $date;
  }

  public function getId() { return $this->id; }
  public function getTitle() { return $this->title; }
  public function getContent() { return $this->content; }
  public function getRating() { return $this->rating; }
  public function getDate() { return $this->date; }
}

// ReviewRepository class to manage reviews
class ReviewRepository {
  private $reviews;

  public function __construct() {
    $this->reviews = array();
  }

  public function addReview(Review $review) {
    $this->reviews[] = $review;
  }

  public function getReviews() { return $this->reviews; }
}

// User review function
function createUserReview($title, $content, $rating, $date = null) {
  if (empty($title) || empty($content)) {
    throw new Exception("Both title and content are required");
  }

  if (!is_numeric($rating)) {
    throw new Exception("Rating must be a number");
  }

  if ($rating < 1 || $rating > 5) {
    throw new Exception("Rating must be between 1 and 5");
  }

  if (empty($date)) {
    $date = date('Y-m-d H:i:s');
  }

  $review = new Review(null, $title, $content, $rating, $date);
  $repository = new ReviewRepository();
  $repository->addReview($review);

  return $review;
}

// Example usage
$review = createUserReview("Great product!", "I love this product!", 5);
echo "Title: {$review->getTitle()}
";
echo "Content: {$review->getContent()}
";
echo "Rating: {$review->getRating()}
";
echo "Date: {$review->getDate()}
";

?>


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function displayReviews() {
    $query = "SELECT r.id, u.name, p.title, r.rating, r.review_text FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id";
    return $this->db->fetchAll($query);
  }

  public function addReview($data) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (:user_id, :product_id, :rating, :review_text)";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute(array(
        ":user_id" => $data['user_id'],
        ":product_id" => $data['product_id'],
        ":rating" => $data['rating'],
        ":review_text" => $data['review_text']
      ));
      return true;
    } catch (PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
      return false;
    }
  }

  public function deleteReview($id) {
    $query = "DELETE FROM reviews WHERE id = :id";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute(array(":id" => $id));
      return true;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }

  public function editReview($data) {
    $query = "UPDATE reviews SET rating = :rating, review_text = :review_text WHERE id = :id";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute(array(
        ":rating" => $data['rating'],
        ":review_text" => $data['review_text'],
        ":id" => $data['id']
      ));
      return true;
    } catch (PDOException $e) {
      echo "Error editing review: " . $e->getMessage();
      return false;
    }
  }
}


class ReviewController {
  private $review;

  public function __construct($db) {
    $this->review = new Review($db);
  }

  public function displayReviews() {
    return $this->review->displayReviews();
  }

  public function addReview() {
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
      $data = $_POST;
      if ($this->review->addReview($data)) {
        echo "Review added successfully!";
      } else {
        echo "Error adding review.";
      }
    }
  }

  public function deleteReview() {
    if ($_SERVER['REQUEST_METHOD'] == 'GET' && isset($_GET['id'])) {
      $id = $_GET['id'];
      if ($this->review->deleteReview($id)) {
        echo "Review deleted successfully!";
      } else {
        echo "Error deleting review.";
      }
    }
  }

  public function editReview() {
    if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['id'])) {
      $data = $_POST;
      if ($this->review->editReview($data)) {
        echo "Review edited successfully!";
      } else {
        echo "Error editing review.";
      }
    }
  }
}


class ReviewModel {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
  }

  public function displayReviews() {
    $query = "SELECT r.id, u.name, p.title, r.rating, r.review_text FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id";
    return $this->db->fetchAll($query);
  }

  public function addReview($data) {
    // Same code as above
  }

  public function deleteReview($id) {
    // Same code as above
  }

  public function editReview($data) {
    // Same code as above
  }
}


<?php
require_once 'ReviewController.php';
$review = new ReviewController(new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password'));

if (isset($_GET['action']) && $_GET['action'] == 'displayReviews') {
  $reviews = $review->displayReviews();
  echo "<h1>Reviews</h1>";
  echo "<table>";
  foreach ($reviews as $review) {
    echo "<tr>";
    echo "<td>$review[0]</td>";
    echo "<td>$review[1] - $review[2]</td>";
    echo "<td>$review[3]/5 stars</td>";
    echo "<td>$review[4]</td>";
    echo "</tr>";
  }
  echo "</table>";
} elseif (isset($_POST['action']) && $_POST['action'] == 'addReview') {
  $review->addReview();
} elseif (isset($_GET['action']) && $_GET['action'] == 'deleteReview') {
  $review->deleteReview();
} elseif (isset($_POST['action']) && $_POST['action'] == 'editReview') {
  $review->editReview();
}
?>


class Review {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=yourdatabase', 'username', 'password');
    }

    /**
     * Get all reviews for a product
     *
     * @param int $productId ID of the product to get reviews for
     * @return array Reviews for the given product
     */
    public function getAllReviewsForProduct($productId) {
        $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * Get a review by its ID
     *
     * @param int $reviewId ID of the review to get
     * @return array Review with the given ID, or false if not found
     */
    public function getReviewById($reviewId) {
        $stmt = $this->db->prepare('SELECT * FROM reviews WHERE id = :id');
        $stmt->bindParam(':id', $reviewId);
        $stmt->execute();
        return $stmt->fetch(PDO::FETCH_ASSOC) ?: false;
    }

    /**
     * Create a new review
     *
     * @param array $data Review data (product_id, rating, review)
     * @return int ID of the newly created review, or 0 on failure
     */
    public function createReview($data) {
        try {
            $stmt = $this->db->prepare('INSERT INTO reviews SET product_id = :product_id, rating = :rating, review = :review');
            $stmt->bindParam(':product_id', $data['product_id']);
            $stmt->bindParam(':rating', $data['rating']);
            $stmt->bindParam(':review', $data['review']);
            return $this->db->lastInsertId();
        } catch (PDOException $e) {
            echo "Error creating review: " . $e->getMessage();
            return 0;
        }
    }

    /**
     * Update an existing review
     *
     * @param array $data Review data (id, product_id, rating, review)
     * @return int ID of the updated review, or 0 on failure
     */
    public function updateReview($data) {
        try {
            $stmt = $this->db->prepare('UPDATE reviews SET product_id = :product_id, rating = :rating, review = :review WHERE id = :id');
            $stmt->bindParam(':id', $data['id']);
            $stmt->bindParam(':product_id', $data['product_id']);
            $stmt->bindParam(':rating', $data['rating']);
            $stmt->bindParam(':review', $data['review']);
            return $this->db->lastInsertId();
        } catch (PDOException $e) {
            echo "Error updating review: " . $e->getMessage();
            return 0;
        }
    }

    /**
     * Delete a review
     *
     * @param int $reviewId ID of the review to delete
     * @return bool Whether the deletion was successful
     */
    public function deleteReview($reviewId) {
        try {
            $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :id');
            $stmt->bindParam(':id', $reviewId);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error deleting review: " . $e->getMessage();
            return false;
        }
    }
}


class ReviewController extends Controller {
    public function index() {
        // Get all reviews for a product
        $reviews = Review::getAllReviewsForProduct(1);
        return view('review.index', ['reviews' => $reviews]);
    }

    public function create($productId) {
        // Create a new review
        if ($_SERVER['REQUEST_METHOD'] == 'POST') {
            $data = $_POST;
            $reviewId = Review::createReview([
                'product_id' => $productId,
                'rating' => (int)$data['rating'],
                'review' => $data['review']
            ]);
            return redirect('reviews')->with('success', 'Review created successfully!');
        }
    }

    public function update($id) {
        // Update an existing review
        if ($_SERVER['REQUEST_METHOD'] == 'POST') {
            $data = $_POST;
            Review::updateReview([
                'id' => (int)$id,
                'product_id' => 1, // Set product ID to whatever value is desired
                'rating' => (int)$data['rating'],
                'review' => $data['review']
            ]);
            return redirect('reviews')->with('success', 'Review updated successfully!');
        }
    }

    public function delete($id) {
        // Delete a review
        Review::deleteReview((int)$id);
        return redirect('reviews')->with('success', 'Review deleted successfully!');
    }
}


Route::get('/reviews', 'ReviewController@index');
Route::post('/reviews/create/{productId}', 'ReviewController@create');
Route::get('/reviews/update/{id}', 'ReviewController@update');
Route::post('/reviews/update/{id}', 'ReviewController@update');
Route::get('/reviews/delete/{id}', 'ReviewController@delete');


// db.php: database connection settings
$dbHost = 'localhost';
$dbUsername = 'username';
$dbPassword = 'password';
$dbName = 'database_name';

// Connect to the database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function addReview($product_id, $user_id, $rating, $comment) {
    global $conn;

    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
            VALUES ('$product_id', '$user_id', '$rating', '$comment')";

    if ($conn->query($sql) === TRUE) {
        echo "New review created successfully";
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
    }
}

function getReviews($product_id) {
    global $conn;

    $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";

    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        // output data of each row
        while($row = $result->fetch_assoc()) {
            echo "Rating: " . $row["rating"]. "<br>Comment: " . $row["comment"]. "<br><br>";
        }
    } else {
        echo "No reviews found";
    }

}

// Example usage:
addReview(1, 1, 5, 'This product is amazing!');
getReviews(1);


<?php

function getRatingStars($rating) {
    $stars = '';
    for ($i = 0; $i < $rating; $i++) {
        $stars .= '<span class="fa fa-star checked"></span>';
    }
    return $stars;
}

// Example usage:
$rating = 4;
echo getRatingStars($rating);
?>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Review System</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
</head>
<body>

<?php include 'review.php'; ?>

<div class="container">
    <h2>Reviews for Product 1</h2>

    <?php getReviews(1); ?>
</div>

<form action="" method="post">
    <input type="hidden" name="product_id" value="1">
    <label for="rating">Rating:</label>
    <select id="rating" name="rating">
        <option value="1">1 star</option>
        <option value="2">2 stars</option>
        <option value="3">3 stars</option>
        <option value="4">4 stars</option>
        <option value="5">5 stars</option>
    </select><br>

    <label for="comment">Comment:</label>
    <textarea id="comment" name="comment"></textarea><br>

    <input type="submit" value="Submit Review">
</form>

</body>
</html>


// User class
class User {
  private $id;
  private $username;

  public function __construct($id, $username) {
    $this->id = $id;
    $this->username = $username;
  }

  // Getters and setters
  public function getId() {
    return $this->id;
  }

  public function getUsername() {
    return $this->username;
  }
}

// Product class
class Product {
  private $id;
  private $name;

  public function __construct($id, $name) {
    $this->id = $id;
    $this->name = $name;
  }

  // Getters and setters
  public function getId() {
    return $this->id;
  }

  public function getName() {
    return $this->name;
  }
}

// Review class
class Review {
  private $id;
  private $user_id;
  private $product_id;
  private $rating;
  private $review_text;

  public function __construct($id, $user_id, $product_id, $rating, $review_text) {
    $this->id = $id;
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->review_text = $review_text;
  }

  // Getters and setters
  public function getId() {
    return $this->id;
  }

  public function getUserId() {
    return $this->user_id;
  }

  public function getProductId() {
    return $this->product_id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getReviewText() {
    return $this->review_text;
  }
}


// Reviews class
class Reviews {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Add review
  public function addReview(User $user, Product $product, $rating, $review_text) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (?, ?, ?, ?)");
      $stmt->bindParam(1, $user->getId());
      $stmt->bindParam(2, $product->getId());
      $stmt->bindParam(3, $rating);
      $stmt->bindParam(4, $review_text);
      return $stmt->execute();
    } catch (PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
      return false;
    }
  }

  // Get all reviews
  public function getAllReviews() {
    try {
      $stmt = $this->db->query("SELECT * FROM reviews");
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error fetching reviews: " . $e->getMessage();
      return array();
    }
  }

  // Get review by id
  public function getReview($id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = ?");
      $stmt->bindParam(1, $id);
      return $stmt->execute() ? $stmt->fetch(PDO::FETCH_ASSOC) : null;
    } catch (PDOException $e) {
      echo "Error fetching review: " . $e->getMessage();
      return null;
    }
  }

  // Edit review
  public function editReview(Review $review, $new_rating, $new_review_text) {
    try {
      $stmt = $this->db->prepare("UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?");
      $stmt->bindParam(1, $new_rating);
      $stmt->bindParam(2, $new_review_text);
      $stmt->bindParam(3, $review->getId());
      return $stmt->execute();
    } catch (PDOException $e) {
      echo "Error editing review: " . $e->getMessage();
      return false;
    }
  }

  // Delete review
  public function deleteReview($id) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
      $stmt->bindParam(1, $id);
      return $stmt->execute();
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


// Initialize database connection
$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');

// Create reviews instance
$reviews = new Reviews($db);

// Get user and product instances
$user = new User(1, 'johnDoe');
$product = new Product(1, 'Product A');

// Add review
if ($reviews->addReview($user, $product, 4, 'Great product!')) {
  echo "Review added successfully!";
} else {
  echo "Error adding review.";
}

// Get all reviews
$allReviews = $reviews->getAllReviews();
print_r($allReviews);

// Get review by id
$review = $reviews->getReview(1);
echo $review['rating'] . ' - ' . $review['review_text'];

// Edit review
if ($reviews->editReview($review, 5, 'Excellent product!')) {
  echo "Review edited successfully!";
} else {
  echo "Error editing review.";
}

// Delete review
if ($reviews->deleteReview(1)) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review.";
}


function createUserReview($data) {
  try {
    // Check if user is logged in
    if (!isset($_SESSION['user_id'])) {
      throw new Exception('User not logged in');
    }

    // Insert review into database
    $review = array(
      'product_id' => $data['product_id'],
      'rating' => $data['rating'],
      'comment' => $data['comment']
    );
    db_insert('reviews', $review);

    // Return success message
    return array('message' => 'Review created successfully');
  } catch (Exception $e) {
    // Handle errors and return error message
    return array('error' => $e->getMessage());
  }
}

function getReviews($product_id = null, $page = 1, $limit = 10) {
  try {
    // Get reviews from database
    if ($product_id) {
      $reviews = db_select('reviews', 'id', '*', "product_id = '$product_id'", $limit, $page);
    } else {
      $reviews = db_select('reviews', '*', '*', '', $limit, $page);
    }

    // Return reviews as JSON
    return json_encode($reviews);
  } catch (Exception $e) {
    // Handle errors and return error message
    return array('error' => $e->getMessage());
  }
}

function updateReview($review_id, $data) {
  try {
    // Check if user is logged in
    if (!isset($_SESSION['user_id'])) {
      throw new Exception('User not logged in');
    }

    // Update review in database
    db_update('reviews', 'rating = ?', array($data['rating']), "id = '$review_id'");

    // Return success message
    return array('message' => 'Review updated successfully');
  } catch (Exception $e) {
    // Handle errors and return error message
    return array('error' => $e->getMessage());
  }
}

function deleteReview($review_id) {
  try {
    // Check if user is logged in
    if (!isset($_SESSION['user_id'])) {
      throw new Exception('User not logged in');
    }

    // Delete review from database
    db_delete('reviews', "id = '$review_id'");

    // Return success message
    return array('message' => 'Review deleted successfully');
  } catch (Exception $e) {
    // Handle errors and return error message
    return array('error' => $e->getMessage());
  }
}


// Create a new review
$data = array(
  'product_id' => 123,
  'rating' => 5,
  'comment' => 'Great product!'
);
$response = createUserReview($data);
echo json_encode($response);

// Get all reviews for a specific product
$product_id = 123;
$page = 1;
$limit = 10;
$response = getReviews($product_id, $page, $limit);
echo json_encode($response);

// Update an existing review
$review_id = 456;
$data = array(
  'rating' => 4,
  'comment' => 'Good product!'
);
$response = updateReview($review_id, $data);
echo json_encode($response);

// Delete a review
$review_id = 789;
$response = deleteReview($review_id);
echo json_encode($response);


// Review.php

class Review {
    private $id;
    private $reviewer_name;
    private $rating;
    private $comment;

    public function __construct($id, $reviewer_name, $rating, $comment) {
        $this->id = $id;
        $this->reviewer_name = $reviewer_name;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public function getId() {
        return $this->id;
    }

    public function getReviewerName() {
        return $this->reviewer_name;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


// ReviewController.php

class ReviewController {
    private $reviews = [];

    public function addReview($reviewer_name, $rating, $comment) {
        $review_id = count($this->reviews) + 1;
        $review = new Review($review_id, $reviewer_name, $rating, $comment);
        array_push($this->reviews, $review);
        return $review;
    }

    public function getReviews() {
        return $this->reviews;
    }
}


// ReviewService.php

class ReviewService {
    private $reviewController;

    public function __construct(ReviewController $reviewController) {
        $this->reviewController = $reviewController;
    }

    public function addReview($reviewer_name, $rating, $comment) {
        return $this->reviewController->addReview($reviewer_name, $rating, $comment);
    }

    public function getReviews() {
        return $this->reviewController->getReviews();
    }
}


// review.php

function display_reviews() {
    $reviewService = new ReviewService(new ReviewController());
    $reviews = $reviewService->getReviews();

    foreach ($reviews as $review) {
        echo "Reviewer: {$review->getReviewerName()}<br>";
        echo "Rating: {$review->getRating()} / 5<br>";
        echo "Comment: {$review->getComment()}<br><br>";
    }
}

function add_review() {
    if (isset($_POST['submit'])) {
        $reviewer_name = $_POST['reviewer_name'];
        $rating = $_POST['rating'];
        $comment = $_POST['comment'];

        $reviewService = new ReviewService(new ReviewController());
        $newReview = $reviewService->addReview($reviewer_name, $rating, $comment);

        echo "Review added successfully!";
    } else {
        // Display review form
        ?>
        <form action="" method="post">
            <label for="reviewer_name">Reviewer Name:</label>
            <input type="text" id="reviewer_name" name="reviewer_name"><br><br>

            <label for="rating">Rating (1-5):</label>
            <input type="number" id="rating" name="rating" min="1" max="5"><br><br>

            <label for="comment">Comment:</label>
            <textarea id="comment" name="comment"></textarea><br><br>

            <input type="submit" name="submit" value="Add Review">
        </form>
    <?php
    }
}


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'root';
$password = '';

try {
  // Create database connection
  $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

} catch (PDOException $e) {
  echo "Connection failed: " . $e->getMessage();
}

// Function to create a review
function create_review($user_id, $product_id, $rating, $comment) {
  global $conn;
  
  // Insert review into database
  $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:user_id, :product_id, :rating, :comment)");
  $stmt->bindParam(":user_id", $user_id);
  $stmt->bindParam(":product_id", $product_id);
  $stmt->bindParam(":rating", $rating);
  $stmt->bindParam(":comment", $comment);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to read reviews
function get_reviews() {
  global $conn;

  // Retrieve all reviews from database
  $stmt = $conn->query("SELECT * FROM reviews");
  $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
  
  return $reviews;
}

// Function to update a review
function update_review($id, $new_rating, $new_comment) {
  global $conn;

  // Update review in database
  $stmt = $conn->prepare("UPDATE reviews SET rating=:rating, comment=:comment WHERE id=:id");
  $stmt->bindParam(":rating", $new_rating);
  $stmt->bindParam(":comment", $new_comment);
  $stmt->bindParam(":id", $id);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to delete a review
function delete_review($id) {
  global $conn;

  // Delete review from database
  $stmt = $conn->prepare("DELETE FROM reviews WHERE id=:id");
  $stmt->bindParam(":id", $id);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

?>


// Create a new review
$user_id = 1;
$product_id = 1;
$rating = 5;
$comment = "Great product!";

create_review($user_id, $product_id, $rating, $comment);

// Read all reviews
$reviews = get_reviews();

print_r($reviews);

// Update a review
$id = 1;
$new_rating = 4;
$new_comment = "Good product!";

update_review($id, $new_rating, $new_comment);

// Delete a review
delete_review(2);


// db.php (database connection file)

<?php
$dsn = 'mysql:host=localhost;dbname=reviews';
$username = 'your_username';
$password = 'your_password';

try {
    $conn = new PDO($dsn, $username, $password);
} catch(PDOException $e) {
    echo "Error connecting to database: " . $e->getMessage();
}

function addUserReview($userId, $productId, $rating, $review) {
    global $conn;
    
    try {
        $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
        $stmt->execute([$userId, $productId, $rating, $review]);
        
        return true;
    } catch(PDOException $e) {
        echo "Error adding review: " . $e->getMessage();
        return false;
    }
}

function getUserReviews($userId) {
    global $conn;
    
    try {
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE user_id = ?");
        $stmt->execute([$userId]);
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch(PDOException $e) {
        echo "Error retrieving reviews: " . $e->getMessage();
        return array();
    }
}

function addProductReview($productId, $rating, $review) {
    global $conn;
    
    try {
        $stmt = $conn->prepare("INSERT INTO reviews (product_id, rating, review) VALUES (?, ?, ?)");
        $stmt->execute([$productId, $rating, $review]);
        
        return true;
    } catch(PDOException $e) {
        echo "Error adding product review: " . $e->getMessage();
        return false;
    }
}
?>


// index.php

<?php
require_once 'db.php';

if (isset($_POST['add_review'])) {
    $userId = $_POST['user_id'];
    $productId = $_POST['product_id'];
    $rating = $_POST['rating'];
    $review = $_POST['review'];

    if (addUserReview($userId, $productId, $rating, $review)) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review.";
    }
} elseif (isset($_POST['get_reviews'])) {
    $userId = $_POST['user_id'];
    
    $reviews = getUserReviews($userId);
    foreach ($reviews as $review) {
        echo "Rating: {$review['rating']}, Review: {$review['review']}<br>";
    }
}

?>

<form action="" method="post">
    <label for="user_id">User ID:</label>
    <input type="text" id="user_id" name="user_id"><br><br>
    
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id"><br><br>
    
    <label for="rating">Rating:</label>
    <input type="number" id="rating" name="rating"><br><br>
    
    <label for="review">Review:</label>
    <textarea id="review" name="review"></textarea><br><br>
    
    <input type="submit" name="add_review" value="Add Review">
</form>

<form action="" method="post">
    <label for="user_id">User ID:</label>
    <input type="text" id="user_id" name="user_id"><br><br>
    
    <input type="submit" name="get_reviews" value="Get Reviews">
</form>


// config.php (database connection settings)
<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

$conn = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USER, DB_PASSWORD);
?>

// Review.php (Review class)
<?php
class Review {
  private $id;
  private $user_id;
  private $product_id;
  private $rating;
  private $review_text;

  public function __construct($id = null) {
    if ($id) {
      $stmt = $conn->prepare("SELECT * FROM reviews WHERE id = :id");
      $stmt->bindParam(":id", $id);
      $stmt->execute();
      $row = $stmt->fetch(PDO::FETCH_ASSOC);
      $this->id = $row['id'];
      $this->user_id = $row['user_id'];
      $this->product_id = $row['product_id'];
      $this->rating = $row['rating'];
      $this->review_text = $row['review_text'];
    }
  }

  public function addReview($product_id, $rating, $review_text) {
    $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (:user_id, :product_id, :rating, :review_text)");
    $stmt->bindParam(":user_id", $_SESSION['user']['id']);
    $stmt->bindParam(":product_id", $product_id);
    $stmt->bindParam(":rating", $rating);
    $stmt->bindParam(":review_text", $review_text);
    return $stmt->execute();
  }

  public function updateReview($id, $rating, $review_text) {
    $stmt = $conn->prepare("UPDATE reviews SET rating = :rating, review_text = :review_text WHERE id = :id");
    $stmt->bindParam(":id", $id);
    $stmt->bindParam(":rating", $rating);
    $stmt->bindParam(":review_text", $review_text);
    return $stmt->execute();
  }

  public function deleteReview($id) {
    $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->bindParam(":id", $id);
    return $stmt->execute();
  }
}

// ReviewController.php (Review controller class)
<?php
class ReviewController {
  private $review;

  public function __construct() {
    $this->review = new Review();
  }

  public function addReview($product_id, $rating, $review_text) {
    return $this->review->addReview($product_id, $rating, $review_text);
  }

  public function updateReview($id, $rating, $review_text) {
    return $this->review->updateReview($id, $rating, $review_text);
  }

  public function deleteReview($id) {
    return $this->review->deleteReview($id);
  }
}

// ReviewView.php (Review view class)
<?php
class ReviewView {
  private $reviewController;

  public function __construct() {
    $this->reviewController = new ReviewController();
  }

  public function displayReviews() {
    // Retrieve all reviews from database
    $stmt = $conn->prepare("SELECT * FROM reviews");
    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

    // Display each review in a table
    echo "<table>";
    foreach ($reviews as $review) {
      echo "<tr>";
      echo "<td>" . $review['user_id'] . "</td>";
      echo "<td>" . $review['product_id'] . "</td>";
      echo "<td>" . $review['rating'] . "</td>";
      echo "<td>" . $review['review_text'] . "</td>";
      echo "<td><a href='#' onclick='updateReview($review[id])'>Update</a> | <a href='#' onclick='deleteReview($review[id])'>Delete</a></td>";
      echo "</tr>";
    }
    echo "</table>";
  }

  public function displayAddReviewForm() {
    // Display form to add new review
    echo "<form action '#' method='post'>";
    echo "<label for='product_id'>Product ID:</label>";
    echo "<input type='text' id='product_id' name='product_id'>";
    echo "<br>";
    echo "<label for='rating'>Rating:</label>";
    echo "<select id='rating' name='rating'>";
    echo "<option value='1'>1</option>";
    echo "<option value='2'>2</option>";
    echo "<option value='3'>3</option>";
    echo "<option value='4'>4</option>";
    echo "<option value='5'>5</option>";
    echo "</select>";
    echo "<br>";
    echo "<label for='review_text'>Review:</label>";
    echo "<textarea id='review_text' name='review_text'></textarea>";
    echo "<br>";
    echo "<input type='submit' value='Add Review'>";
    echo "</form>";
  }

  public function addReview($product_id, $rating, $review_text) {
    // Add new review using controller
    return $this->reviewController->addReview($product_id, $rating, $review_text);
  }
}
?>


require_once 'Review.php';
require_once 'ReviewController.php';
require_once 'ReviewView.php';

// Initialize Review view
$view = new ReviewView();

// Display add review form
$view->displayAddReviewForm();

// Add new review (example)
$product_id = 1;
$rating = 4;
$review_text = "Great product!";
if ($view->addReview($product_id, $rating, $review_text)) {
  echo "Review added successfully!";
} else {
  echo "Error adding review.";
}

// Display reviews
$view->displayReviews();


<?php

// Database configuration
$host = 'localhost';
$dbname = 'reviews_database';
$username = 'your_username';
$password = 'your_password';

try {
    // Connect to the database
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Error connecting to database: " . $e->getMessage();
}

?>


<?php

class Review {
    private $pdo;

    function __construct($pdo) {
        $this->pdo = $pdo;
    }

    // Add a new review
    function add_review($title, $content, $rating, $user_id) {
        try {
            $stmt = $this->pdo->prepare('INSERT INTO reviews (title, content, rating, user_id) VALUES (?, ?, ?, ?)');
            $stmt->execute([$title, $content, $rating, $user_id]);
            return true;
        } catch (PDOException $e) {
            echo "Error adding review: " . $e->getMessage();
            return false;
        }
    }

    // Get all reviews
    function get_reviews() {
        try {
            $stmt = $this->pdo->prepare('SELECT * FROM reviews');
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error retrieving reviews: " . $e->getMessage();
            return false;
        }
    }

    // Get a single review by ID
    function get_review($id) {
        try {
            $stmt = $this->pdo->prepare('SELECT * FROM reviews WHERE id = ?');
            $stmt->execute([$id]);
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error retrieving review: " . $e->getMessage();
            return false;
        }
    }

    // Update a review
    function update_review($id, $title, $content, $rating) {
        try {
            $stmt = $this->pdo->prepare('UPDATE reviews SET title = ?, content = ?, rating = ? WHERE id = ?');
            $stmt->execute([$title, $content, $rating, $id]);
            return true;
        } catch (PDOException $e) {
            echo "Error updating review: " . $e->getMessage();
            return false;
        }
    }

    // Delete a review
    function delete_review($id) {
        try {
            $stmt = $this->pdo->prepare('DELETE FROM reviews WHERE id = ?');
            $stmt->execute([$id]);
            return true;
        } catch (PDOException $e) {
            echo "Error deleting review: " . $e->getMessage();
            return false;
        }
    }

}

?>


<?php

require_once 'config.php';
require_once 'review.php';

$pdo = new PDO('mysql:host=localhost;dbname=reviews_database', 'your_username', 'your_password');

$review = new Review($pdo);

// Add a new review
$title = 'Example Review';
$content = 'This is an example review.';
$rating = 5;
$user_id = 1;

if ($review->add_review($title, $content, $rating, $user_id)) {
    echo "Review added successfully.";
} else {
    echo "Error adding review.";
}

// Get all reviews
$reviews = $review->get_reviews();
foreach ($reviews as $review) {
    echo $review['title'] . ' - ' . $review['content'];
}

// Get a single review by ID
$review_id = 1;
$single_review = $review->get_review($review_id);
echo $single_review['title'];

// Update a review
$new_title = 'Updated Review';
$new_content = 'This is an updated review.';
$new_rating = 4;

if ($review->update_review($review_id, $new_title, $new_content, $new_rating)) {
    echo "Review updated successfully.";
} else {
    echo "Error updating review.";
}

// Delete a review
if ($review->delete_review($review_id)) {
    echo "Review deleted successfully.";
} else {
    echo "Error deleting review.";
}

?>


// review.php

class Review {
  private $db;

  public function __construct() {
    // Connect to database
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  /**
   * Add a new review
   *
   * @param int $product_id Product ID
   * @param int $user_id User ID
   * @param int $rating Rating (1-5)
   * @param string $comment Comment text
   */
  public function addReview($product_id, $user_id, $rating, $comment) {
    try {
      // Insert review into database
      $stmt = $this->db->prepare('INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)');
      $stmt->execute(array(
        ':product_id' => $product_id,
        ':user_id' => $user_id,
        ':rating' => $rating,
        ':comment' => $comment
      ));
    } catch (PDOException $e) {
      echo 'Error adding review: ' . $e->getMessage();
    }
  }

  /**
   * Get all reviews for a product
   *
   * @param int $product_id Product ID
   */
  public function getReviews($product_id) {
    try {
      // Retrieve reviews from database
      $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
      $stmt->execute(array(':product_id' => $product_id));
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error getting reviews: ' . $e->getMessage();
      return array();
    }
  }

  /**
   * Get review by ID
   *
   * @param int $review_id Review ID
   */
  public function getReview($review_id) {
    try {
      // Retrieve review from database
      $stmt = $this->db->prepare('SELECT * FROM reviews WHERE id = :review_id');
      $stmt->execute(array(':review_id' => $review_id));
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error getting review: ' . $e->getMessage();
      return array();
    }
  }

  /**
   * Delete a review
   *
   * @param int $review_id Review ID
   */
  public function deleteReview($review_id) {
    try {
      // Delete review from database
      $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :review_id');
      $stmt->execute(array(':review_id' => $review_id));
    } catch (PDOException $e) {
      echo 'Error deleting review: ' . $e->getMessage();
    }
  }
}


// Create an instance of the Review class
$review = new Review();

// Add a new review
$review->addReview(1, 1, 4, "Great product!");

// Get all reviews for a product
$reviews = $review->getReviews(1);
echo '<pre>';
print_r($reviews);
echo '</pre>';

// Delete a review
$review->deleteReview(1);

// Get review by ID
$review = $review->getReview(2);
echo '<pre>';
print_r($review);
echo '</pre>';


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
  }

  public function createReview($product_id, $user_id, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)");
      $stmt->execute([
        ':product_id' => $product_id,
        ':user_id' => $user_id,
        ':rating' => $rating,
        ':review' => $review
      ]);
      return true;
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  public function getReviews($product_id = null, $limit = 10, $offset = 0) {
    try {
      if ($product_id) {
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC LIMIT :limit OFFSET :offset");
        $stmt->execute([
          ':product_id' => $product_id,
          ':limit' => $limit,
          ':offset' => $offset
        ]);
      } else {
        $stmt = $this->db->query("SELECT * FROM reviews ORDER BY created_at DESC LIMIT :limit OFFSET :offset");
        $stmt->execute([
          ':limit' => $limit,
          ':offset' => $offset
        ]);
      }
      return $stmt->fetchAll();
    } catch (PDOException $e) {
      echo "Error fetching reviews: " . $e->getMessage();
      return array();
    }
  }

  public function updateReview($review_id, $rating, $review) {
    try {
      $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :review_id");
      $stmt->execute([
        ':review_id' => $review_id,
        ':rating' => $rating,
        ':review' => $review
      ]);
      return true;
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
      return false;
    }
  }

  public function deleteReview($review_id) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :review_id");
      $stmt->execute([
        ':review_id' => $review_id
      ]);
      return true;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


$review = new Review();

// Create a new review
$product_id = 123;
$user_id = 456;
$rating = 5;
$review_text = "This product is amazing!";
$result = $review->createReview($product_id, $user_id, $rating, $review_text);
echo $result ? 'Review created successfully!' : 'Error creating review.';

// Fetch reviews for a specific product
$product_id = 123;
$limit = 10;
$offset = 0;
$reviews = $review->getReviews($product_id, $limit, $offset);
foreach ($reviews as $review) {
  echo "Review ID: {$review['id']}
";
  echo "Rating: {$review['rating']}
";
  echo "Review Text: {$review['review']}

";
}

// Update a review
$review_id = 123;
$new_rating = 4;
$new_review_text = "This product is okay...";
$result = $review->updateReview($review_id, $new_rating, $new_review_text);
echo $result ? 'Review updated successfully!' : 'Error updating review.';

// Delete a review
$review_id = 123;
$result = $review->deleteReview($review_id);
echo $result ? 'Review deleted successfully!' : 'Error deleting review.';


// database.php - Database connection settings
<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

function db_connect() {
    $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// reviews.php - User review functions
<?php

function insert_review($user_id, $product_id, $review_text, $rating) {
    require_once 'database.php';
    $conn = db_connect();
    $sql = "INSERT INTO reviews (user_id, product_id, review_text, rating)
            VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiss", $user_id, $product_id, $review_text, $rating);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function get_all_reviews() {
    require_once 'database.php';
    $conn = db_connect();
    $sql = "SELECT * FROM reviews";
    $result = $conn->query($sql);
    while ($row = $result->fetch_assoc()) {
        echo $row['review_text'] . ' - Rating: ' . $row['rating'] . '<br>';
    }
}

function update_review($id, $new_rating) {
    require_once 'database.php';
    $conn = db_connect();
    $sql = "UPDATE reviews SET rating = ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ii", $new_rating, $id);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}


// Insert a new review for user with id 1 on product with id 2
insert_review(1, 2, 'This is a good product.', 4);

// Get all reviews from the database and print them out
get_all_reviews();

// Update a specific review's rating to 5
update_review(3, 5);


class Review {
  private $db;

  public function __construct() {
    // Connect to the database using PDO (PHP Data Objects)
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
    $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  }

  public function createReview($userId, $productId, $reviewText, $rating) {
    // Prepare a SQL query to insert the review
    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, review_text, rating) VALUES (:user_id, :product_id, :review_text, :rating)');
    
    try {
      // Bind parameters and execute the query
      $stmt->bindParam(':user_id', $userId);
      $stmt->bindParam(':product_id', $productId);
      $stmt->bindParam(':review_text', $reviewText);
      $stmt->bindParam(':rating', $rating);
      return $stmt->execute();
    } catch (PDOException $e) {
      // Handle any errors that occur during execution
      echo 'Error creating review: ' . $e->getMessage();
      return false;
    }
  }

  public function listReviews() {
    // Prepare a SQL query to select all reviews
    $stmt = $this->db->prepare('SELECT * FROM reviews');
    
    try {
      // Execute the query and return the results as an array of Review objects
      $stmt->execute();
      $reviews = [];
      while ($row = $stmt->fetch()) {
        $review = new Review($row['id'], $row['user_id'], $row['product_id'], $row['review_text'], $row['rating']);
        $reviews[] = $review;
      }
      return $reviews;
    } catch (PDOException $e) {
      // Handle any errors that occur during execution
      echo 'Error listing reviews: ' . $e->getMessage();
      return [];
    }
  }

  public function displayReview($id) {
    // Prepare a SQL query to select the review with the given ID
    $stmt = $this->db->prepare('SELECT * FROM reviews WHERE id = :id');
    
    try {
      // Bind parameters and execute the query
      $stmt->bindParam(':id', $id);
      $stmt->execute();
      
      // Fetch the result as an array
      return $stmt->fetch();
    } catch (PDOException $e) {
      // Handle any errors that occur during execution
      echo 'Error displaying review: ' . $e->getMessage();
      return [];
    }
  }
}


// Create a new Review object
$review = new Review();

// Set up user credentials (for demonstration purposes)
$userCredentials = [
  'username' => 'john',
  'email' => 'john@example.com',
  'password' => 'password123'
];

// Register the user
// ...

// Create a new review for the registered user
$userId = // User ID obtained from registration or login process
$productID = 1; // Product ID of interest
$reviewText = 'This product is great!';
$rating = 5;
if ($review->createReview($userId, $productID, $reviewText, $rating)) {
  echo 'Review created successfully!';
} else {
  echo 'Error creating review.';
}

// List all reviews for the user
$userReviews = $review->listReviews();
echo '<h2>Reviews by User:</h2>';
foreach ($userReviews as $review) {
  echo '<p>ID: ' . $review['id'] . '</p>';
  echo '<p>User ID: ' . $review['user_id'] . '</p>';
  echo '<p>Product ID: ' . $review['product_id'] . '</p>';
  echo '<p>Review Text: ' . $review['review_text'] . '</p>';
  echo '<p>Rating: ' . $review['rating'] . '/5</p>';
}

// Display a specific review
$reviewID = 1; // ID of the review to display
$singleReview = $review->displayReview($reviewID);
if ($singleReview) {
  echo '<h2>Review:</h2>';
  echo '<p>ID: ' . $singleReview['id'] . '</p>';
  echo '<p>User ID: ' . $singleReview['user_id'] . '</p>';
  echo '<p>Product ID: ' . $singleReview['product_id'] . '</p>';
  echo '<p>Review Text: ' . $singleReview['review_text'] . '</p>';
  echo '<p>Rating: ' . $singleReview['rating'] . '/5</p>';
} else {
  echo 'Error displaying review.';
}


<?php

// Define the Review class
class Review {
  private $id;
  private $rating;
  private $comment;
  private $reviewed_at;

  public function __construct($data) {
    $this->id = isset($data['id']) ? $data['id'] : null;
    $this->rating = isset($data['rating']) ? $data['rating'] : null;
    $this->comment = isset($data['comment']) ? $data['comment'] : null;
    $this->reviewed_at = isset($data['reviewed_at']) ? $data['reviewed_at'] : null;
  }

  public function getId() {
    return $this->id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getReviewedAt() {
    return $this->reviewed_at;
  }
}

// Define the ReviewManager class
class ReviewManager {
  private $reviews = array();

  public function addReview($data) {
    $review = new Review($data);
    $this->reviews[] = $review;
    return $review;
  }

  public function getReviews() {
    return $this->reviews;
  }

  public function getReviewById($id) {
    foreach ($this->reviews as $review) {
      if ($review->getId() == $id) {
        return $review;
      }
    }
    return null;
  }
}

// Create a new ReviewManager instance
$reviewManager = new ReviewManager();

// Example usage:
$data = array(
  'rating' => 5,
  'comment' => 'Great product!',
  'reviewed_at' => date('Y-m-d H:i:s')
);

$review = $reviewManager->addReview($data);
echo "Review ID: {$review->getId()}<br>";
echo "Rating: {$review->getRating()}<br>";
echo "Comment: {$review->getComment()}<br>";
echo "Reviewed at: {$review->getReviewedAt()}<br>";

$reviews = $reviewManager->getReviews();
foreach ($reviews as $review) {
  echo "Review ID: {$review->getId()} - Rating: {$review->getRating()} - Comment: {$review->getComment()}<br>";
}

// Get a review by ID
$reviewId = 1;
$review = $reviewManager->getReviewById($reviewId);
if ($review) {
  echo "Review found with ID:{$reviewId} - Rating: {$review->getRating()} - Comment: {$review->getComment()}";
} else {
  echo "No review found with ID:{$reviewId}";
}


<?php

// Database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'reviews_database';

// Create a database connection
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function store_review($review_id, $product_id, $user_id, $rating, $comment)
{
    // SQL query to insert review
    $sql = "INSERT INTO reviews (id, product_id, user_id, rating, comment) VALUES (?, ?, ?, ?, ?)";
    
    // Prepare and execute the query
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iisi", $review_id, $product_id, $user_id, $rating, $comment);
    $result = $stmt->execute();
    
    if (!$result) {
        echo "Error storing review: " . $conn->error;
    }
}

?>


<?php

// Database connection settings (same as above)

function display_reviews($product_id)
{
    // SQL query to select reviews for a product
    $sql = "SELECT * FROM reviews WHERE product_id = ? ORDER BY id DESC";
    
    // Prepare and execute the query
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();
    
    if (!$result) {
        echo "Error displaying reviews: " . $conn->error;
    } else {
        // Fetch and display the reviews
        while ($review = $result->fetch_assoc()) {
            echo "Rating: " . $review['rating'] . "/5, Comment: " . $review['comment'] . "<br>";
        }
    }
}

?>


store_review(1, 12345, 67890, 4, 'Great product!');


display_reviews(12345);


// models/Review.php

class Review {
  private $id;
  private $userId;
  private $productName;
  private $rating;
  private $reviewText;

  public function __construct($id = null, $userId = null, $productName = null, $rating = null, $reviewText = null) {
    $this->id = $id;
    $this->userId = $userId;
    $this->productName = $productName;
    $this->rating = $rating;
    $this->reviewText = $reviewText;
  }

  public function getId() {
    return $this->id;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getProductName() {
    return $this->productName;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getReviewText() {
    return $this->reviewText;
  }

  public static function create($user_id, $product_name, $rating, $review_text) {
    // Assume a database connection is established
    $db = new PDO('mysql:host=localhost;dbname=database', 'username', 'password');
    $stmt = $db->prepare("INSERT INTO reviews (user_id, product_name, rating, review_text) VALUES (:user_id, :product_name, :rating, :review_text)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->execute();
    return new self($db->lastInsertId(), $user_id, $product_name, $rating, $review_text);
  }

  public static function getAllReviews() {
    // Assume a database connection is established
    $db = new PDO('mysql:host=localhost;dbname=database', 'username', 'password');
    $stmt = $db->prepare("SELECT * FROM reviews");
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_CLASS, self::class);
  }
}


// controllers/UserReview.php

function user_review($product_name, $rating, $review_text) {
  // Authenticate the user (not shown in this example)
  if (!isset($_SESSION['user_id'])) {
    // Handle unauthorized access
  }

  try {
    $review = Review::create(
      $_SESSION['user_id'],
      $product_name,
      $rating,
      $review_text
    );
    echo "Review submitted successfully!";
  } catch (Exception $e) {
    echo "Error submitting review: " . $e->getMessage();
  }
}


// views/user-review.php

<form action="controllers/UserReview.php" method="post">
  <label for="product_name">Product Name:</label>
  <input type="text" id="product_name" name="product_name"><br><br>
  <label for="rating">Rating:</label>
  <select id="rating" name="rating">
    <option value="1">1</option>
    <option value="2">2</option>
    <option value="3">3</option>
    <option value="4">4</option>
    <option value="5">5</option>
  </select><br><br>
  <label for="review_text">Review Text:</label>
  <textarea id="review_text" name="review_text"></textarea><br><br>
  <input type="submit" value="Submit Review">
</form>


<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


<?php include_once 'config.php'; ?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Reviews</title>
</head>
<body>

<h1>Reviews</h1>

<ul>
    <?php
    $query = "SELECT * FROM reviews ORDER BY id DESC";
    $result = $conn->query($query);
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            echo '<li>' . $row['user_name'] . ' - ' . $row['rating'] . '/5: ' . $row['review_text'] . '</li>';
        }
    } else {
        echo "No reviews yet.";
    }
    ?>
</ul>

<form action="add_review.php" method="post">
    <input type="text" name="product_id" placeholder="Enter product ID">
    <input type="text" name="user_name" placeholder="Your Name">
    <textarea name="review_text" placeholder="Review"></textarea>
    <select name="rating">
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
        <option value="5">5</option>
    </select>
    <input type="submit" value="Submit Review">
</form>

<?php $conn->close(); ?>
</body>
</html>


<?php include_once 'config.php'; ?>

<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id = $_POST['product_id'];
    $user_name = $_POST['user_name'];
    $review_text = $_POST['review_text'];
    $rating = $_POST['rating'];

    if (!empty($product_id) && !empty($user_name) && !empty($review_text)) {
        $query = "INSERT INTO reviews (product_id, user_name, review_text, rating)
                  VALUES ('$product_id', '$user_name', '$review_text', '$rating')";
        $result = $conn->query($query);
        if ($result === TRUE) {
            echo "<p>Review submitted successfully!</p>";
        } else {
            echo "Error: " . $query . "<br>" . $conn->error;
        }
    }
}
?>

<?php $conn->close(); ?>


// db.php

<?php
$host = 'localhost';
$username = 'root';
$password = '';
$dbname = 'reviews';

try {
  $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
  echo "Connection failed: " . $e->getMessage();
}

function addReview($data) {
  global $conn;
  
  $query = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES (:user_id, :product_id, :rating, :review)";
  
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':user_id', $data['user_id']);
  $stmt->bindParam(':product_id', $data['product_id']);
  $stmt->bindParam(':rating', $data['rating']);
  $stmt->bindParam(':review', $data['review']);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

function getReviews($productId) {
  global $conn;
  
  $query = "SELECT r.id, u.name, p.name AS product_name, r.rating, r.review
            FROM reviews r
            JOIN users u ON r.user_id = u.id
            JOIN products p ON r.product_id = p.id
            WHERE r.product_id = :product_id";
  
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':product_id', $productId);
  
  $stmt->execute();
  
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function editReview($data) {
  global $conn;
  
  $query = "UPDATE reviews
            SET rating = :rating, review = :review
            WHERE id = :id";
  
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':rating', $data['rating']);
  $stmt->bindParam(':review', $data['review']);
  $stmt->bindParam(':id', $data['id']);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

function deleteReview($id) {
  global $conn;
  
  $query = "DELETE FROM reviews
            WHERE id = :id";
  
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':id', $id);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}
?>


// reviews.php

<?php
require_once 'db.php';

if (isset($_POST['submit'])) {
  $data = array(
    'user_id' => $_SESSION['user']['id'],
    'product_id' => $_GET['id'],
    'rating' => $_POST['rating'],
    'review' => $_POST['review']
  );
  
  if (addReview($data)) {
    echo "Review added successfully!";
  } else {
    echo "Failed to add review.";
  }
}

if (isset($_GET['edit'])) {
  $id = $_GET['edit'];
  
  $review = getReviews($id);
  foreach ($review as $row) {
    $rating = $row['rating'];
    $reviewText = $row['review'];
  }
}

if (isset($_POST['update'])) {
  $data = array(
    'id' => $_GET['edit'],
    'rating' => $_POST['rating'],
    'review' => $_POST['review']
  );
  
  if (editReview($data)) {
    echo "Review updated successfully!";
  } else {
    echo "Failed to update review.";
  }
}

if (isset($_GET['delete'])) {
  $id = $_GET['delete'];
  
  if (deleteReview($id)) {
    echo "Review deleted successfully!";
  } else {
    echo "Failed to delete review.";
  }
}
?>


// db.php is a separate file containing the database connection settings

// Include database connection settings
require_once 'db.php';

function createReview($userId, $productId, $reviewText, $rating) {
  // Create query string
  $query = "
    INSERT INTO reviews (user_id, product_id, review, rating)
    VALUES (:userId, :productId, :reviewText, :rating)
  ";

  // Prepare and execute query
  $stmt = $db->prepare($query);
  $stmt->bindParam(':userId', $userId);
  $stmt->bindParam(':productId', $productId);
  $stmt->bindParam(':reviewText', $reviewText);
  $stmt->bindParam(':rating', $rating);

  if ($stmt->execute()) {
    // Get the new review's ID
    $newReviewId = $db->lastInsertId();
    return true;
  } else {
    echo "Error creating review: " . print_r($stmt->errorInfo(), true);
    return false;
  }
}

function getReviews() {
  // Create query string
  $query = "
    SELECT reviews.id, users.username, products.product_name, reviews.review, reviews.rating
    FROM reviews
    INNER JOIN users ON reviews.user_id = users.id
    INNER JOIN products ON reviews.product_id = products.id
    ORDER BY reviews.created_at DESC
  ";

  // Prepare and execute query
  $stmt = $db->prepare($query);
  $stmt->execute();

  return $stmt->fetchAll();
}


// Include review.php for database interactions
require_once 'review.php';

function displayReviews() {
  // Get all reviews from database
  $reviews = getReviews();

  if ($reviews) {
    foreach ($reviews as $review) {
      echo "<div>
        <h2>" . $review['username'] . "</h2>
        <p>" . $review['product_name'] . "</p>
        <p>" . nl2br($review['review']) . "</p>
        <p>Rating: " . $review['rating'] . "/5</p>
      </div>";
    }
  } else {
    echo "No reviews available.";
  }
}

function createReviewForm() {
  echo "
    <form method='post'>
      <label for='username'>Username:</label>
      <input type='text' id='username' name='username' required>

      <label for='product_id'>Product ID:</label>
      <input type='number' id='product_id' name='product_id' required>

      <label for='review_text'>Review:</label>
      <textarea id='review_text' name='review_text'></textarea>

      <label for='rating'>Rating (1-5):</label>
      <input type='number' id='rating' name='rating' min='1' max='5'>

      <button type='submit'>Submit Review</button>
    </form>
  ";
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  // Create review
  $userId = $_SESSION['user_id'];
  $productId = $_POST['product_id'];
  $reviewText = $_POST['review_text'];
  $rating = $_POST['rating'];

  createReview($userId, $productId, $reviewText, $rating);
}


// Include user_review.php for display and form functionality
require_once 'user_review.php';

displayReviews();

createReviewForm();


<?php
// Include database connection settings
require 'db.php';

function createReview($userId, $productId, $rating, $comment) {
  // Check if user and product exist
  $user = getUserById($userId);
  if (!$user) return false;
  
  $product = getProductById($productId);
  if (!$product) return false;

  // Insert review into database
  $query = "INSERT INTO reviews (user_id, product_id, rating, comment)
            VALUES (:user_id, :product_id, :rating, :comment)";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':comment', $comment);
  return $stmt->execute();
}

function getReviewsForProduct($productId) {
  // Retrieve reviews for product
  $query = "SELECT r.id, u.username, p.name, r.rating, r.comment, r.created_at 
            FROM reviews r 
            JOIN users u ON r.user_id = u.id 
            JOIN products p ON r.product_id = p.id 
            WHERE r.product_id = :product_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function updateReview($reviewId, $newRating, $newComment) {
  // Check if review exists
  $review = getReviewById($reviewId);
  if (!$review) return false;

  // Update review in database
  $query = "UPDATE reviews SET rating = :rating, comment = :comment 
            WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':id', $reviewId);
  $stmt->bindParam(':rating', $newRating);
  $stmt->bindParam(':comment', $newComment);
  return $stmt->execute();
}

function deleteReview($reviewId) {
  // Check if review exists
  $review = getReviewById($reviewId);
  if (!$review) return false;

  // Delete review from database
  $query = "DELETE FROM reviews WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':id', $reviewId);
  return $stmt->execute();
}

function getUserReviews($userId) {
  // Retrieve reviews for user
  $query = "SELECT r.id, p.name, r.rating, r.comment, r.created_at 
            FROM reviews r 
            JOIN products p ON r.product_id = p.id 
            WHERE r.user_id = :user_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function getReviewById($reviewId) {
  // Retrieve review by ID
  $query = "SELECT * FROM reviews WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':id', $reviewId);
  $stmt->execute();
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

function getProductById($productId) {
  // Retrieve product by ID
  $query = "SELECT * FROM products WHERE id = :product_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

function getUserById($userId) {
  // Retrieve user by ID
  $query = "SELECT * FROM users WHERE id = :user_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->execute();
  return $stmt->fetch(PDO::FETCH_ASSOC);
}


// Create a new review
createReview(1, 2, 5, 'Great product!');

// Get reviews for a specific product
$reviews = getReviewsForProduct(2);
print_r($reviews);

// Update an existing review
updateReview(1, 4, 'Good product, but not great.');

// Delete a review
deleteReview(1);

// Retrieve all reviews for a user
$userReviews = getUserReviews(1);
print_r($userReviews);


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_database';
$username = 'your_username';
$password = 'your_password';

// Connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

function createUserReview($conn, $product_id, $user_id, $rating, $comment) {
    // SQL query to create a new review
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
            VALUES (:product_id, :user_id, :rating, :comment)";
    
    // Prepare statement and bind parameters
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    
    // Execute statement
    try {
        if ($stmt->execute()) {
            return true;  // Review created successfully
        } else {
            throw new PDOException("Failed to create review");
        }
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false;
    }
}

function getUserReviews($conn, $user_id) {
    // SQL query to retrieve all reviews for a user
    $sql = "SELECT * FROM reviews WHERE user_id = :user_id";
    
    // Prepare statement and bind parameter
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':user_id', $user_id);
    
    // Execute statement and fetch results
    try {
        if ($stmt->execute()) {
            return $stmt->fetchAll();
        } else {
            throw new PDOException("Failed to retrieve reviews");
        }
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return array();  // Return an empty array on error
    }
}

function updateReview($conn, $review_id, $product_id, $user_id, $rating, $comment) {
    // SQL query to update an existing review
    $sql = "UPDATE reviews SET product_id = :product_id, user_id = :user_id, rating = :rating, comment = :comment WHERE id = :review_id";
    
    // Prepare statement and bind parameters
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':review_id', $review_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    
    // Execute statement
    try {
        if ($stmt->execute()) {
            return true;  // Review updated successfully
        } else {
            throw new PDOException("Failed to update review");
        }
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false;
    }
}

function deleteReview($conn, $review_id) {
    // SQL query to delete a review
    $sql = "DELETE FROM reviews WHERE id = :review_id";
    
    // Prepare statement and bind parameter
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':review_id', $review_id);
    
    // Execute statement
    try {
        if ($stmt->execute()) {
            return true;  // Review deleted successfully
        } else {
            throw new PDOException("Failed to delete review");
        }
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false;
    }
}

// Example usage:
$user_id = 12345;  // Replace with actual user ID

// Create a new review
if (createUserReview($conn, 67890, $user_id, 4, 'Good product')) {
    echo "Review created successfully!";
} else {
    echo "Failed to create review.";
}

// Retrieve all reviews for the specified user
$reviews = getUserReviews($conn, $user_id);
foreach ($reviews as $review) {
    echo "ID: " . $review['id'] . "
";
    echo "Product ID: " . $review['product_id'] . "
";
    echo "User ID: " . $review['user_id'] . "
";
    echo "Rating: " . $review['rating'] . "
";
    echo "Comment: " . $review['comment'] . "

";
}

// Update an existing review
if (updateReview($conn, 12345, 67890, $user_id, 5, 'Excellent product')) {
    echo "Review updated successfully!";
} else {
    echo "Failed to update review.";
}

// Delete a review
if (deleteReview($conn, 12345)) {
    echo "Review deleted successfully!";
} else {
    echo "Failed to delete review.";
}


class Review {
  private $db;

  function __construct() {
    // Assuming you're using a PDO connection to your database
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  }

  /**
   * Add a new review to the database
   *
   * @param array $data
   */
  function addReview($data) {
    $query = "INSERT INTO reviews (user_id, product_name, rating, review_text)
              VALUES (:user_id, :product_name, :rating, :review_text)";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute([
        'user_id' => $data['user_id'],
        'product_name' => $data['product_name'],
        'rating' => $data['rating'],
        'review_text' => $data['review_text']
      ]);
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Update an existing review in the database
   *
   * @param array $data
   */
  function updateReview($data) {
    $query = "UPDATE reviews SET rating = :rating, review_text = :review_text WHERE id = :id";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute([
        'id' => $data['id'],
        'rating' => $data['rating'],
        'review_text' => $data['review_text']
      ]);
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Delete a review from the database
   *
   * @param int $id
   */
  function deleteReview($id) {
    $query = "DELETE FROM reviews WHERE id = :id";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute(['id' => $id]);
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Get all reviews from the database
   *
   * @return array
   */
  function getAllReviews() {
    $query = "SELECT * FROM reviews";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return [];
    }
  }

  /**
   * Get a specific review from the database by ID
   *
   * @param int $id
   * @return array
   */
  function getReview($id) {
    $query = "SELECT * FROM reviews WHERE id = :id";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute(['id' => $id]);
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return [];
    }
  }

}


$review = new Review();

// Add a new review
$data = [
  'user_id' => 1,
  'product_name' => 'Example Product',
  'rating' => 5,
  'review_text' => 'This product is amazing!'
];
echo $review->addReview($data) ? "Review added successfully!" : "Error adding review.";

// Update an existing review
$data = [
  'id' => 1,
  'rating' => 4,
  'review_text' => 'I still love this product, but it could be improved.'
];
echo $review->updateReview($data) ? "Review updated successfully!" : "Error updating review.";

// Delete a review
$review->deleteReview(1);
echo "Review deleted successfully!";

// Get all reviews
$reviews = $review->getAllReviews();
print_r($reviews);

// Get a specific review by ID
$reviewData = $review->getReview(1);
print_r($reviewData);


class Review {
    private $id;
    private $rating;
    private $comment;

    public function __construct($id, $rating, $comment) {
        $this->id = $id;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public function getId() {
        return $this->id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


class ReviewController {
    private $reviews = array();

    public function addReview($review) {
        $this->reviews[] = $review;
    }

    public function getAllReviews() {
        return $this->reviews;
    }

    public function getReviewById($id) {
        foreach ($this->reviews as $review) {
            if ($review->getId() == $id) {
                return $review;
            }
        }
        return null;
    }
}


<?php
$reviewController = new ReviewController();

// Create a new review
$review = new Review(1, 5, 'Great product!');

// Add the review to the controller
$reviewController->addReview($review);

// Get all reviews from the controller
$reviews = $reviewController->getAllReviews();

// Display each review on the page
foreach ($reviews as $review) {
    echo '<h2>Review ID: ' . $review->getId() . '</h2>';
    echo '<p>Rating: ' . $review->getRating() . '/5</p>';
    echo '<p>Comment: ' . $review->getComment() . '</p>';
}
?>


if (isset($_POST['rating']) && isset($_POST['comment'])) {
    $reviewController = new ReviewController();
    $newReview = new Review(count($reviewController->getAllReviews()) + 1, $_POST['rating'], $_POST['comment']);
    $reviewController->addReview($newReview);
}


<?php

// Configuration
$database = 'reviews.db';
$table_name = 'reviews';

// Function to get all reviews
function get_reviews($page = 1, $limit = 10) {
    global $database, $table_name;
    
    // Connect to database
    $conn = new PDO('sqlite:'.$database);
    
    // SQL query to retrieve reviews
    $query = "SELECT * FROM $table_name ORDER BY id DESC LIMIT :limit OFFSET :offset";
    
    // Prepare statement and bind parameters
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':limit', $limit, PDO::PARAM_INT);
    $stmt->bindParam(':offset', ($page - 1) * $limit, PDO::PARAM_INT);
    
    // Execute query and retrieve results
    $stmt->execute();
    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    // Close database connection
    $conn = null;
    
    return $reviews;
}

// Function to add a new review
function add_review($data) {
    global $database, $table_name;
    
    // Connect to database
    $conn = new PDO('sqlite:'.$database);
    
    // SQL query to insert review
    $query = "INSERT INTO $table_name (title, content, rating, user_id) VALUES (:title, :content, :rating, :user_id)";
    
    // Prepare statement and bind parameters
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':title', $data['title'], PDO::PARAM_STR);
    $stmt->bindParam(':content', $data['content'], PDO::PARAM_STR);
    $stmt->bindParam(':rating', $data['rating'], PDO::PARAM_INT);
    $stmt->bindParam(':user_id', $data['user_id'], PDO::PARAM_INT);
    
    // Execute query and retrieve results
    $stmt->execute();
    $review_id = $conn->lastInsertId();
    
    // Close database connection
    $conn = null;
    
    return $review_id;
}

// Function to update a review
function update_review($data) {
    global $database, $table_name;
    
    // Connect to database
    $conn = new PDO('sqlite:'.$database);
    
    // SQL query to update review
    $query = "UPDATE $table_name SET title=:title, content=:content, rating=:rating WHERE id=:id";
    
    // Prepare statement and bind parameters
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':title', $data['title'], PDO::PARAM_STR);
    $stmt->bindParam(':content', $data['content'], PDO::PARAM_STR);
    $stmt->bindParam(':rating', $data['rating'], PDO::PARAM_INT);
    $stmt->bindParam(':id', $data['id'], PDO::PARAM_INT);
    
    // Execute query and retrieve results
    $stmt->execute();
    
    // Close database connection
    $conn = null;
}

// Function to delete a review
function delete_review($review_id) {
    global $database, $table_name;
    
    // Connect to database
    $conn = new PDO('sqlite:'.$database);
    
    // SQL query to delete review
    $query = "DELETE FROM $table_name WHERE id=:id";
    
    // Prepare statement and bind parameters
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':id', $review_id, PDO::PARAM_INT);
    
    // Execute query and retrieve results
    $stmt->execute();
    
    // Close database connection
    $conn = null;
}

?>


// Get all reviews on page 2 with 10 per page
$reviews = get_reviews(2, 10);
print_r($reviews);

// Add a new review
$data = array(
    'title' => 'My awesome review!',
    'content' => 'This is a great product!',
    'rating' => 5,
    'user_id' => 1
);
$review_id = add_review($data);
echo "Review added with ID: $review_id";

// Update an existing review
$data = array(
    'title' => 'My updated review',
    'content' => 'This is a great product, indeed!',
    'rating' => 5,
    'id' => 1
);
update_review($data);

// Delete a review
delete_review(2);


<?php

class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  /**
   * Create a new review
   *
   * @param int $user_id
   * @param int $product_id
   * @param int $rating
   * @param string $review_text
   */
  public function createReview($user_id, $product_id, $rating, $review_text) {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (?, ?, ?, ?)");
    $stmt->execute([$user_id, $product_id, $rating, $review_text]);
    return $this->db->lastInsertId();
  }

  /**
   * Get all reviews for a product
   *
   * @param int $product_id
   */
  public function getReviewsForProduct($product_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
    $stmt->execute([$product_id]);
    return $stmt->fetchAll();
  }

  /**
   * Get a single review by ID
   *
   * @param int $review_id
   */
  public function getReview($review_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = ?");
    $stmt->execute([$review_id]);
    return $stmt->fetch();
  }

  /**
   * Update a review
   *
   * @param int $review_id
   * @param int $rating
   * @param string $review_text
   */
  public function updateReview($review_id, $rating, $review_text) {
    $stmt = $this->db->prepare("UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?");
    $stmt->execute([$rating, $review_text, $review_id]);
  }

  /**
   * Delete a review
   *
   * @param int $review_id
   */
  public function deleteReview($review_id) {
    $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
    $stmt->execute([$review_id]);
  }
}


$db = new PDO('sqlite:reviews.db');

$review = new Review($db);

// Create a new review
$user_id = 1;
$product_id = 1;
$rating = 4;
$review_text = "Great product!";
$review_id = $review->createReview($user_id, $product_id, $rating, $review_text);

// Get all reviews for a product
$reviews = $review->getReviewsForProduct($product_id);
print_r($reviews);

// Get a single review by ID
$single_review = $review->getReview($review_id);
print_r($single_review);

// Update a review
$rating = 5;
$review_text = "Even better!";
$review->updateReview($review_id, $rating, $review_text);

// Delete a review
$review->deleteReview($review_id);


// db.php (database connection file)
<?php
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$dbname = 'your_database';

$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


// review.php (review submission and display)
<?php
require_once 'db.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

// Get the product ID from URL parameter
$product_id = $_GET['product_id'] ?? '';

// Display reviews for a specific product
if ($product_id) {
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($query);
    $reviews = array();
    while ($row = $result->fetch_assoc()) {
        $reviews[] = array(
            'id' => $row['id'],
            'rating' => $row['rating'],
            'review' => $row['review']
        );
    }
} else {
    // Display all reviews (not specific to a product)
}

// Submit new review
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $product_id = $_POST['product_id'];
    $rating = $_POST['rating'];
    $review = $_POST['review'];

    if (!empty($product_id) && !empty($rating) && !empty($review)) {
        $query = "INSERT INTO reviews (user_id, product_id, rating, review)
                  VALUES ('" . $_SESSION['user_id'] . "', '$product_id', '$rating', '" . mysqli_real_escape_string($conn, $review) . "')";
        if ($conn->query($query)) {
            header('Location: review.php?product_id=' . $product_id);
            exit;
        } else {
            echo 'Error submitting review!';
        }
    } else {
        echo 'Please fill in all fields!';
    }
}

// Display form to submit new review
?>
<form method="post">
    <label>Product ID:</label>
    <input type="text" name="product_id"><br><br>
    <label>Rating:</label>
    <select name="rating">
        <?php for ($i = 1; $i <= 5; $i++) { ?>
            <option value="<?php echo $i; ?>"><?php echo $i . '/5'; ?></option>
        <?php } ?>
    </select><br><br>
    <label>Review:</label>
    <textarea name="review"></textarea><br><br>
    <input type="submit" value="Submit Review">
</form>

<!-- Display reviews -->
<?php if (isset($reviews)) { ?>
    <h2>Reviews:</h2>
    <?php foreach ($reviews as $review) { ?>
        <p><?php echo $review['rating']; ?>/5 - <?php echo $review['review']; ?></p>
    <?php } ?>
<?php } ?>


class ReviewFunctions {
  private $db;

  public function __construct() {
    // Initialize database connection (e.g., using PDO)
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  }

  /**
   * Create a new review
   *
   * @param int $user_id
   * @param int $product_id
   * @param int $rating
   * @param string $comment
   * @return int ID of the newly created review or false on failure
   */
  public function createReview($user_id, $product_id, $rating, $comment) {
    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)');
    $result = $stmt->execute([$user_id, $product_id, $rating, $comment]);
    if ($result) {
      return $this->db->lastInsertId();
    } else {
      return false;
    }
  }

  /**
   * Get all reviews for a specific product
   *
   * @param int $product_id
   * @return array Reviews as an associative array of arrays (id, user_id, rating, comment)
   */
  public function getReviewsByProduct($product_id) {
    $stmt = $this->db->prepare('SELECT id, user_id, rating, comment FROM reviews WHERE product_id = ?');
    $stmt->execute([$product_id]);
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Update an existing review
   *
   * @param int $review_id
   * @param int $rating
   * @param string $comment
   * @return bool True on success, false on failure
   */
  public function updateReview($review_id, $rating, $comment) {
    $stmt = $this->db->prepare('UPDATE reviews SET rating = ?, comment = ? WHERE id = ?');
    $result = $stmt->execute([$rating, $comment, $review_id]);
    return $result;
  }

  /**
   * Delete a review
   *
   * @param int $review_id
   * @return bool True on success, false on failure
   */
  public function deleteReview($review_id) {
    $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = ?');
    return $stmt->execute([$review_id]);
  }
}


require_once 'review_functions.php';

$reviewFunctions = new ReviewFunctions();

// Create a new review
$user_id = 1;
$product_id = 123;
$rating = 5;
$comment = 'Great product!';
$review_id = $reviewFunctions->createReview($user_id, $product_id, $rating, $comment);

// Get all reviews for a specific product
$product_id = 123;
$reviews = $reviewFunctions->getReviewsByProduct($product_id);
print_r($reviews);

// Update an existing review
$review_id = 1;
$rating = 4;
$comment = 'Good product!';
$result = $reviewFunctions->updateReview($review_id, $rating, $comment);
echo $result ? 'Success!' : 'Failure!';

// Delete a review
$review_id = 1;
$result = $reviewFunctions->deleteReview($review_id);
echo $result ? 'Success!' : 'Failure!';


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

class ReviewSystem {

  // Function to submit a review
  public function submitReview($productId, $rating, $comment) {
    if (!empty($_SESSION['user_id'])) {
      $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
                VALUES (?, ?, ?, ?)";
      $stmt = $conn->prepare($query);
      $stmt->bind_param("iis", $productId, $_SESSION['user_id'], $rating, $comment);
      if ($stmt->execute()) {
        return true;
      } else {
        echo "Error submitting review: " . $conn->error;
        return false;
      }
    } else {
      echo "You must be logged in to submit a review.";
      return false;
    }
  }

  // Function to display reviews
  public function getReviews($productId) {
    $query = "SELECT r.id, u.username, r.rating, r.comment, r.created_at
              FROM reviews r
              JOIN users u ON r.user_id = u.id
              WHERE product_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $productId);
    if ($stmt->execute()) {
      $result = $stmt->get_result();
      while ($row = $result->fetch_assoc()) {
        echo "<h3>Review by " . $row['username'] . "</h3>";
        echo "<p>Rating: " . $row['rating'] . "/5</p>";
        echo "<p>Comment: " . $row['comment'] . "</p>";
        echo "<p>Created at: " . $row['created_at'] . "</p>";
      }
    } else {
      echo "Error fetching reviews: " . $conn->error;
    }
  }

}

// Usage example
$reviewSystem = new ReviewSystem();

if (isset($_POST['submit'])) {
  $productId = $_POST['product_id'];
  $rating = $_POST['rating'];
  $comment = $_POST['comment'];

  if ($reviewSystem->submitReview($productId, $rating, $comment)) {
    echo "Review submitted successfully!";
  }
}

?>


<?php

// Configuration
define('DB_HOST', 'your_host');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function displayReviews() {
    global $conn;
    $sql = "SELECT * FROM reviews";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            echo "Review by: " . $row["username"] . "<br>";
            echo "Product Name: " . $row["product_name"] . "<br>";
            echo "Rating: " . $row["rating"] . "/5<br>";
            echo "Review Text: " . $row["review_text"] . "<br><hr>";
        }
    } else {
        echo "0 reviews";
    }
}

function addReview($username, $product_name, $review_text, $rating) {
    global $conn;
    $sql = "INSERT INTO reviews (user_id, product_name, review_text, rating)
            VALUES (1, '$product_name', '$review_text', $rating)";
    
    if ($conn->query($sql) === TRUE) {
        echo "Review added successfully";
    } else {
        echo "Error: " . $conn->error;
    }
}

?>


<?php
require_once 'review.php';

$review = array(
    'username' => 'JohnDoe',
    'product_name' => 'Test Product',
    'review_text' => 'This is a test review.',
    'rating' => 4
);

addReview($review['username'], $review['product_name'], $review['review_text'], $review['rating']);
?>


<?php
require_once 'review.php';

displayReviews();
?>


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  public function addReview($userId, $productId, $rating, $review) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
  }

  public function getReviewsForProduct($productId) {
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getReviewsForUser($userId) {
    $query = "SELECT * FROM reviews WHERE user_id = :user_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }
}


class ReviewController {
  private $review;

  public function __construct() {
    $this->review = new Review();
  }

  public function addReviewAction($userId, $productId, $rating, $review) {
    if ($this->review->addReview($userId, $productId, $rating, $review)) {
      return 'Review added successfully!';
    } else {
      return 'Error adding review';
    }
  }

  public function getReviewsForProductAction($productId) {
    $reviews = $this->review->getReviewsForProduct($productId);
    return json_encode($reviews);
  }

  public function getReviewsForUserAction($userId) {
    $reviews = $this->review->getReviewsForUser($userId);
    return json_encode($reviews);
  }
}


$router->post('/add-review', function ($userId, $productId, $rating, $review) {
  return (new ReviewController())->addReviewAction($userId, $productId, $rating, $review);
});

$router->get('/reviews-for-product/{product_id}', function ($productId) {
  return (new ReviewController())->getReviewsForProductAction($productId);
});

$router->get('/reviews-for-user/{user_id}', function ($userId) {
  return (new ReviewController())->getReviewsForUserAction($userId);
});


class Review {
  private $id;
  private $product_id;
  private $user_id;
  private $rating;
  private $content;

  public function __construct($data = array()) {
    if (!empty($data)) {
      $this->loadFromData($data);
    }
  }

  public function loadFromData(array $data) {
    foreach ($data as $key => $value) {
      $this->$key = $value;
    }
  }

  public static function createReview(array $reviewData, $userId) {
    // Basic validation
    if (!isset($reviewData['rating']) || !in_array($reviewData['rating'], array(1, 2, 3, 4, 5))) {
      throw new Exception('Invalid rating');
    }

    if (empty($reviewData['content'])) {
      throw new Exception('Content is required');
    }

    // Create new review
    $newReview = new Review(array(
      'product_id' => isset($reviewData['product_id']) ? $reviewData['product_id'] : null,
      'user_id' => $userId,
      'rating' => $reviewData['rating'],
      'content' => $reviewData['content']
    ));

    // Save review to database (not implemented here)
    return $newReview;
  }

  public static function getReviewsByProduct($productId) {
    // Retrieve reviews from database (not implemented here)
    return array();
  }

  public static function updateReview($reviewId, array $data) {
    // Basic validation
    if (!isset($data['rating']) || !in_array($data['rating'], array(1, 2, 3, 4, 5))) {
      throw new Exception('Invalid rating');
    }

    if (empty($data['content'])) {
      throw new Exception('Content is required');
    }

    // Update review
    $updatedReview = new Review(array(
      'id' => $reviewId,
      'rating' => $data['rating'],
      'content' => $data['content']
    ));

    // Save updated review to database (not implemented here)
    return $updatedReview;
  }
}


// Create new review
$reviewData = array(
  'product_id' => 123,
  'rating' => 4,
  'content' => 'Great product!'
);
$newReview = Review::createReview($reviewData, 456);

// Retrieve reviews by product ID
$productReviews = Review::getReviewsByProduct(123);

// Update existing review
$updateData = array(
  'rating' => 5,
  'content' => 'Even better now!'
);
$updatedReview = Review::updateReview(789, $updateData);


<?php

// Include database connection settings
require_once 'db_config.php';

// Function to add a new review
function add_review($user_id, $product_id, $review_text, $rating) {
    // Validate input data
    if (empty($user_id) || empty($product_id) || empty($review_text)) {
        return false;
    }

    try {
        // Create query to insert review into database
        $query = "INSERT INTO reviews SET user_id = ?, product_id = ?, review_text = ?, rating = ?";

        // Prepare and execute query
        $stmt = $pdo->prepare($query);
        $stmt->execute([$user_id, $product_id, $review_text, $rating]);

        return true;

    } catch (PDOException $e) {
        echo "Error adding review: " . $e->getMessage();
        return false;
    }
}

// Function to get all reviews for a product
function get_reviews($product_id) {
    try {
        // Create query to select reviews from database
        $query = "SELECT * FROM reviews WHERE product_id = ?";

        // Prepare and execute query
        $stmt = $pdo->prepare($query);
        $stmt->execute([$product_id]);

        return $stmt->fetchAll();

    } catch (PDOException $e) {
        echo "Error retrieving reviews: " . $e->getMessage();
        return array();
    }
}

// Function to get all reviews for a user
function get_user_reviews($user_id) {
    try {
        // Create query to select reviews from database
        $query = "SELECT * FROM reviews WHERE user_id = ?";

        // Prepare and execute query
        $stmt = $pdo->prepare($query);
        $stmt->execute([$user_id]);

        return $stmt->fetchAll();

    } catch (PDOException $e) {
        echo "Error retrieving user reviews: " . $e->getMessage();
        return array();
    }
}

?>


// Add a new review
$user_id = 123;
$product_id = 456;
$review_text = "This product is amazing!";
$rating = 5;

if (add_review($user_id, $product_id, $review_text, $rating)) {
    echo "Review added successfully!";
} else {
    echo "Error adding review.";
}

// Get all reviews for a product
$product_id = 456;
$reviews = get_reviews($product_id);
echo json_encode($reviews);

// Get all reviews for a user
$user_id = 123;
$reviews = get_user_reviews($user_id);
echo json_encode($reviews);


/**
 * Adds a new review to the database.
 *
 * @param int $userId The ID of the user who submitted the review.
 * @param int $productId The ID of the product being reviewed.
 * @param float $rating The rating given by the user (1-5).
 * @param string $review The text of the review.
 *
 * @return bool True if the review was successfully added, false otherwise.
 */
function addReview($userId, $productId, $rating, $review) {
  global $db; // assume you're using a database object called db

  $query = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES (:user_id, :product_id, :rating, :review)";

  try {
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);

    return $stmt->execute();
  } catch (PDOException $e) {
    // handle database error
    print "Error adding review: " . $e->getMessage();
    return false;
  }
}

/**
 * Retrieves a list of reviews for a given product.
 *
 * @param int $productId The ID of the product to retrieve reviews for.
 *
 * @return array An array of review objects, each containing user_id, rating, and review text.
 */
function getReviews($productId) {
  global $db;

  $query = "SELECT u.id AS userId, r.rating, r.review
            FROM reviews r
            JOIN users u ON r.user_id = u.id
            WHERE r.product_id = :product_id";

  try {
    $stmt = $db->prepare($query);
    $stmt->bindParam(':product_id', $productId);

    $stmt->execute();

    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    // handle database error
    print "Error retrieving reviews: " . $e->getMessage();
    return array();
  }
}

/**
 * Retrieves a single review for a given user and product.
 *
 * @param int $userId The ID of the user who submitted the review.
 * @param int $productId The ID of the product being reviewed.
 *
 * @return array|null A review object containing user_id, rating, and review text, or null if not found.
 */
function getReview($userId, $productId) {
  global $db;

  $query = "SELECT r.rating, r.review
            FROM reviews r
            WHERE r.user_id = :user_id AND r.product_id = :product_id";

  try {
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);

    $stmt->execute();

    return $stmt->fetch(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    // handle database error
    print "Error retrieving review: " . $e->getMessage();
    return null;
  }
}


// Add a new review
$userId = 123;
$productId = 456;
$rating = 4.5;
$reviewText = 'Great product!';

if (addReview($userId, $productId, $rating, $reviewText)) {
  print "Review added successfully!";
} else {
  print "Error adding review.";
}

// Retrieve all reviews for a given product
$productId = 456;

$reviews = getReviews($productId);

print_r($reviews); // prints array of review objects

// Retrieve a single review for a user and product
$userId = 123;
$productId = 456;

$review = getReview($userId, $productId);

if ($review) {
  print "User $userId gave $product_id a rating of {$review['rating']} with the following review: " . $review['review'];
} else {
  print "No review found for user $userId and product $productId.";
}


// database.php - assume this is where you have your database credentials and connections setup
require_once 'database.php';

class ReviewSystem {
  public function createReview($userId, $productId, $rating, $review) {
    // validate input
    if (!is_int($userId) || !is_int($productId) || !is_int($rating) || !$this->isValidRating($rating)) {
      throw new Exception('Invalid review data');
    }

    // create review
    $stmt = $pdo->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:userId, :productId, :rating, :review)");
    $stmt->execute(['userId' => $userId, 'productId' => $productId, 'rating' => $rating, 'review' => $review]);

    return true;
  }

  public function getReviewsForProduct($productId) {
    // retrieve reviews for product
    $stmt = $pdo->prepare("SELECT * FROM reviews WHERE product_id = :productId");
    $stmt->execute(['productId' => $productId]);
    $reviews = $stmt->fetchAll();

    return $reviews;
  }

  public function updateReview($reviewId, $newRating, $newReview) {
    // validate input
    if (!is_int($reviewId) || !is_int($newRating)) {
      throw new Exception('Invalid review data');
    }

    // update review
    $stmt = $pdo->prepare("UPDATE reviews SET rating = :newRating, review = :newReview WHERE id = :reviewId");
    $stmt->execute(['newRating' => $newRating, 'newReview' => $newReview, 'reviewId' => $reviewId]);

    return true;
  }

  public function deleteReview($reviewId) {
    // validate input
    if (!is_int($reviewId)) {
      throw new Exception('Invalid review data');
    }

    // delete review
    $stmt = $pdo->prepare("DELETE FROM reviews WHERE id = :reviewId");
    $stmt->execute(['reviewId' => $reviewId]);

    return true;
  }

  private function isValidRating($rating) {
    return in_array($rating, [1, 2, 3, 4, 5]);
  }
}


$reviewSystem = new ReviewSystem();

// create a review
$userId = 123;
$productId = 456;
$rating = 5;
$review = 'This is an awesome product!';
$reviewSystem->createReview($userId, $productId, $rating, $review);

// get reviews for a product
$reviewsForProduct = $reviewSystem->getReviewsForProduct(456);
print_r($reviewsForProduct);

// update review
$reviewId = 789;
$newRating = 4;
$newReview = 'This is an okay product.';
$reviewSystem->updateReview($reviewId, $newRating, $newReview);

// delete review
$reviewSystem->deleteReview(789);


// Review model
class Review {
  private $db;

  function __construct($db) {
    $this->db = $db;
  }

  public function getReviews() {
    $query = "SELECT * FROM reviews";
    return $this->db->query($query)->fetchAll();
  }

  public function addReview($user_id, $product_id, $rating, $comment) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:user_id, :product_id, :rating, :comment)";
    $this->db->prepare($query)->execute(array(
      ':user_id' => $user_id,
      ':product_id' => $product_id,
      ':rating' => $rating,
      ':comment' => $comment
    ));
  }

  public function getReviewsForProduct($product_id) {
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    return $this->db->prepare($query)->execute(array(':product_id' => $product_id))->fetchAll();
  }
}

// User review class
class UserReview extends Review {
  private $user_id;

  function __construct($db, $user_id) {
    parent::__construct($db);
    $this->user_id = $user_id;
  }

  public function addReviewForProduct($product_id, $rating, $comment) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:user_id, :product_id, :rating, :comment)";
    $this->db->prepare($query)->execute(array(
      ':user_id' => $this->user_id,
      ':product_id' => $product_id,
      ':rating' => $rating,
      ':comment' => $comment
    ));
  }

  public function getReviewsForUser() {
    $query = "SELECT * FROM reviews WHERE user_id = :user_id";
    return $this->db->prepare($query)->execute(array(':user_id' => $this->user_id))->fetchAll();
  }
}

// Example usage
$db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');

$review_model = new Review($db);
$user_review = new UserReview($db, 1);

// Add review for product
$user_review->addReviewForProduct(123, 5, "Great product!");

// Get all reviews for user
$reviews = $user_review->getReviewsForUser();
print_r($reviews);

// Get all reviews for product
$product_reviews = $review_model->getReviewsForProduct(123);
print_r($product_reviews);


<?php

// Configuration variables
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add a review
function addReview($userId, $productId, $rating, $reviewText)
{
    // Prepare query
    $query = "INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (?, ?, ?, ?)";

    // Bind parameters
    $stmt = $conn->prepare($query);
    $stmt->bind_param("iiii", $userId, $productId, $rating, $reviewText);

    // Execute query
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }

    // Close statement and connection
    $stmt->close();
    $conn->close();
}

// Function to get all reviews for a product
function getProductReviews($productId)
{
    // Prepare query
    $query = "SELECT * FROM reviews WHERE product_id = ?";

    // Bind parameters
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $productId);

    // Execute query
    if ($stmt->execute()) {
        return $stmt->get_result();
    } else {
        return null;
    }

    // Close statement and connection
    $stmt->close();
    $conn->close();
}

// Function to get all reviews for a user
function getUserReviews($userId)
{
    // Prepare query
    $query = "SELECT * FROM reviews WHERE user_id = ?";

    // Bind parameters
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $userId);

    // Execute query
    if ($stmt->execute()) {
        return $stmt->get_result();
    } else {
        return null;
    }

    // Close statement and connection
    $stmt->close();
    $conn->close();
}

// Example usage:
$userId = 1; // Replace with actual user ID
$productId = 2; // Replace with actual product ID

if (addReview($userId, $productId, 5, "This is a great product!")) {
    echo "Review added successfully!";
} else {
    echo "Failed to add review.";
}

$reviews = getProductReviews($productId);
if ($reviews) {
    while ($review = $reviews->fetch_assoc()) {
        echo "User ID: " . $review['user_id'] . ", Rating: " . $review['rating'] . ", Review Text: " . $review['review_text'];
    }
} else {
    echo "No reviews found for this product.";
}

?>


<?php

// Connect to database
$mysqli = new mysqli("localhost", "username", "password", "database");

function get_product_reviews($product_id, $limit = null) {
    global $mysqli;

    // Get reviews for product with given ID
    $query = "SELECT * FROM reviews WHERE product_id = ? ORDER BY id DESC";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $reviews = $stmt->get_result();

    if ($limit !== null) {
        // Limit results
        $reviews = $reviews->fetch_all(MYSQLI_ASSOC, MYSQLI_USE_RESULT);
        array_splice($reviews, 0, -1 * $limit); // Remove excess rows
    }

    return $reviews;
}

function get_product_average_rating($product_id) {
    global $mysqli;

    // Get average rating for product with given ID
    $query = "SELECT AVG(rating) AS average FROM reviews WHERE product_id = ?";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows === 1) {
        return (float)$result->fetch_assoc()["average"];
    } else {
        return null;
    }
}

function create_review($user_id, $product_id, $rating, $review) {
    global $mysqli;

    // Insert new review into database
    $query = "INSERT INTO reviews SET user_id = ?, product_id = ?, rating = ?, review = ?";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param("iifs", $user_id, $product_id, $rating, $review);
    return $stmt->execute();
}

?>


// Get reviews for product with ID 1 and limit to 5
$reviews = get_product_reviews(1, 5);

// Calculate average rating for product with ID 2
$average_rating = get_product_average_rating(2);

// Create a new review for product with ID 3
$result = create_review(1, 3, 4.0, "This is a great product!");
if ($result) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}


<?php

// Connect to database
$dsn = 'mysql:host=localhost;dbname=your_database';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
    exit;
}

// Function to add a review
function add_review($product_id, $user_name, $review_text, $rating) {
    global $pdo;

    try {
        $stmt = $pdo->prepare('INSERT INTO reviews (product_id, user_name, review_text, rating) VALUES (:product_id, :user_name, :review_text, :rating)');
        $stmt->execute([
            'product_id' => $product_id,
            'user_name' => $user_name,
            'review_text' => $review_text,
            'rating' => $rating
        ]);

        return true;
    } catch (PDOException $e) {
        echo 'Error adding review: ' . $e->getMessage();
        return false;
    }
}

// Function to get reviews for a product
function get_reviews($product_id) {
    global $pdo;

    try {
        $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
        $stmt->execute(['product_id' => $product_id]);
        return $stmt->fetchAll();
    } catch (PDOException $e) {
        echo 'Error fetching reviews: ' . $e->getMessage();
        return null;
    }
}

// Example usage
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['submit_review'])) {
        // Add a new review
        add_review(
            $_POST['product_id'],
            $_POST['user_name'],
            $_POST['review_text'],
            $_POST['rating']
        );
    }
}

// Get reviews for a product
$reviews = get_reviews(1); // Replace with the ID of the product

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reviews</title>
</head>
<body>

<h1>Reviews for Product 1:</h1>

<?php if ($reviews) : ?>
    <?php foreach ($reviews as $review) : ?>
        <div>
            <p><?= $review['user_name'] ?> gave this product <?= $review['rating'] ?>/5 stars.</p>
            <p><?= $review['review_text'] ?></p>
        </div>
    <?php endforeach; ?>
<?php else : ?>
    <p>No reviews yet!</p>
<?php endif; ?>

<h2>Leave a review:</h2>

<form action="<?= $_SERVER['PHP_SELF'] ?>" method="post">
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id"><br><br>
    <label for="user_name">Your Name:</label>
    <input type="text" id="user_name" name="user_name"><br><br>
    <label for="review_text">Review:</label>
    <textarea id="review_text" name="review_text"></textarea><br><br>
    <label for="rating">Rating (1-5):</label>
    <input type="number" id="rating" name="rating"><br><br>
    <button type="submit" name="submit_review">Submit Review</button>
</form>

</body>
</html>


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_NAME', 'your_database_name');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');

// Connect to database
$conn = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USER, DB_PASSWORD);

// Function to create a review
function createReview($title, $content, $rating) {
  global $conn;
  
  try {
    // Insert review into database
    $stmt = $conn->prepare("INSERT INTO reviews (title, content, rating, user_id) VALUES (:title, :content, :rating, NULL)");
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    $stmt->execute();
    
    // Get the review ID
    $reviewId = $conn->lastInsertId();
    
    return $reviewId;
  } catch (PDOException $e) {
    echo "Error: " . $e->getMessage();
    return null;
  }
}

// Function to get all reviews
function getAllReviews() {
  global $conn;
  
  try {
    // Select all reviews from database
    $stmt = $conn->prepare("SELECT * FROM reviews");
    $stmt->execute();
    
    // Fetch and return reviews
    $reviews = array();
    while ($row = $stmt->fetch()) {
      $review = array(
        'id' => $row['id'],
        'title' => $row['title'],
        'content' => $row['content'],
        'rating' => $row['rating']
      );
      $reviews[] = $review;
    }
    
    return $reviews;
  } catch (PDOException $e) {
    echo "Error: " . $e->getMessage();
    return null;
  }
}

// Example usage
$reviewId = createReview("Example Review", "This is an example review.", 5);
if ($reviewId !== null) {
  echo "Review created successfully! ID: $reviewId
";
  
  $reviews = getAllReviews();
  if ($reviews !== null) {
    foreach ($reviews as $review) {
      echo "ID: " . $review['id'] . ", Title: " . $review['title'] . ", Content: " . substr($review['content'], 0, 50) . "
";
    }
  } else {
    echo "Error fetching reviews.
";
  }
} else {
  echo "Error creating review.
";
}

?>


// Include the database connection file
require_once 'db.php';

// Function to get all reviews for a user
function getUserReviews($userId) {
  $query = "SELECT r.*, p.name AS product_name FROM reviews r INNER JOIN products p ON r.product_id = p.id WHERE r.user_id = :user_id";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to get all reviews for a product
function getProductReviews($productId) {
  $query = "SELECT r.*, u.name AS user_name FROM reviews r INNER JOIN users u ON r.user_id = u.id WHERE r.product_id = :product_id";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to add a new review
function addReview($userId, $productId, $rating, $review) {
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  return $stmt->execute();
}

// Function to update a review
function updateReview($reviewId, $newRating, $newReview) {
  $query = "UPDATE reviews SET rating = :new_rating, review = :new_review WHERE id = :review_id";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':review_id', $reviewId);
  $stmt->bindParam(':new_rating', $newRating);
  $stmt->bindParam(':new_review', $newReview);
  return $stmt->execute();
}

// Function to delete a review
function deleteReview($reviewId) {
  $query = "DELETE FROM reviews WHERE id = :review_id";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':review_id', $reviewId);
  return $stmt->execute();
}


// Get all reviews for a user
$userId = 1;
$userReviews = getUserReviews($userId);
print_r($userReviews);

// Get all reviews for a product
$productId = 1;
$productReviews = getProductReviews($productId);
print_r($productReviews);

// Add a new review
$newReview = array(
  'rating' => 5,
  'review' => 'This is an awesome product!'
);
$result = addReview(1, 1, $newReview['rating'], $newReview['review']);
echo "Review added successfully: " . ($result ? "true" : "false");

// Update a review
$reviewId = 1;
$newRating = 4;
$newReview = 'This is an okay product';
$result = updateReview($reviewId, $newRating, $newReview);
echo "Review updated successfully: " . ($result ? "true" : "false");

// Delete a review
$result = deleteReview(1);
echo "Review deleted successfully: " . ($result ? "true" : "false");


<?php
// Configuration
$reviews_table = 'reviews'; // name of the database table for reviews
$user_table = 'users'; // name of the database table for users

// Function to get all reviews
function get_reviews($product_id) {
  global $reviews_table;
  $query = "SELECT * FROM $reviews_table WHERE product_id = '$product_id'";
  $result = mysqli_query($GLOBALS['db'], $query);
  $reviews = array();
  while ($row = mysqli_fetch_assoc($result)) {
    $reviews[] = array(
      'id' => $row['id'],
      'user_name' => get_user_name($row['user_id']),
      'rating' => $row['rating'],
      'review' => $row['review']
    );
  }
  return $reviews;
}

// Function to add a new review
function add_review($product_id, $user_id, $rating, $review) {
  global $reviews_table;
  global $db;
  $query = "INSERT INTO $reviews_table (product_id, user_id, rating, review) VALUES ('$product_id', '$user_id', '$rating', '$review')";
  mysqli_query($db, $query);
}

// Function to get a user's name from their ID
function get_user_name($user_id) {
  global $user_table;
  $query = "SELECT name FROM $user_table WHERE id = '$user_id'";
  $result = mysqli_query($GLOBALS['db'], $query);
  return mysqli_fetch_assoc($result)['name'];
}

// Example usage:
$product_id = 1; // ID of the product being reviewed
$reviews = get_reviews($product_id);
foreach ($reviews as $review) {
  echo "User: " . $review['user_name'] . "
";
  echo "Rating: " . $review['rating'] . "
";
  echo "Review: " . $review['review'] . "

";
}


// To add a new review:
add_review(1, 123, 5, "This product is great!");

// To retrieve all reviews for a given product:
$reviews = get_reviews(1);
foreach ($reviews as $review) {
  echo "User: " . $review['user_name'] . "
";
  echo "Rating: " . $review['rating'] . "
";
  echo "Review: " . $review['review'] . "

";
}


// users.php

class User {
    private $id;
    private $name;

    public function __construct($id, $name) {
        $this->id = $id;
        $this->name = $name;
    }

    // Getters and setters
    public function getId() { return $this->id; }
    public function getName() { return $this->name; }
}

// reviews.php

class Review {
    private $id;
    private $userId;
    private $productName;
    private $rating;
    private $content;

    public function __construct($id, $userId, $productName, $rating, $content) {
        $this->id = $id;
        $this->userId = $userId;
        $this->productName = $productName;
        $this->rating = $rating;
        $this->content = $content;
    }

    // Getters and setters
    public function getId() { return $this->id; }
    public function getUserId() { return $this->userId; }
    public function getProductName() { return $this->productName; }
    public function getRating() { return $this->rating; }
    public function getContent() { return $this->content; }
}

// reviewSystem.php

class ReviewSystem {
    private $db;

    public function __construct($dbName) {
        $this->db = new PDO("mysql:host=localhost;dbname=$dbName", "username", "password");
    }

    // Add a review
    public function addReview(User $user, $productName, $rating, $content) {
        try {
            $query = $this->db->prepare("INSERT INTO reviews (user_id, product_name, rating, content) VALUES (:userId, :product_name, :rating, :content)");
            $query->bindParam(":userId", $user->getId());
            $query->bindParam(":product_name", $productName);
            $query->bindParam(":rating", $rating);
            $query->bindParam(":content", $content);
            $query->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Get a review
    public function getReview($id) {
        try {
            $query = $this->db->prepare("SELECT * FROM reviews WHERE id = :id");
            $query->bindParam(":id", $id);
            $query->execute();
            $reviewData = $query->fetch(PDO::FETCH_ASSOC);
            if ($reviewData === false) return null;
            return new Review($reviewData['id'], $reviewData['user_id'], $reviewData['product_name'], $reviewData['rating'], $reviewData['content']);
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return null;
        }
    }

    // Get all reviews for a user
    public function getReviewsForUser($id) {
        try {
            $query = $this->db->prepare("SELECT * FROM reviews WHERE user_id = :id");
            $query->bindParam(":id", $id);
            $query->execute();
            $reviewData = $query->fetchAll(PDO::FETCH_ASSOC);
            if ($reviewData === false) return array();
            $reviews = array();
            foreach ($reviewData as $data) {
                $reviews[] = new Review($data['id'], $data['user_id'], $data['product_name'], $data['rating'], $data['content']);
            }
            return $reviews;
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return array();
        }
    }

    // Edit a review
    public function editReview(Review $review, $newProductName = null, $newRating = null, $newContent = null) {
        try {
            if ($newProductName !== null) $query = $this->db->prepare("UPDATE reviews SET product_name = :product_name WHERE id = :id");
            else if ($newRating !== null) $query = $this->db->prepare("UPDATE reviews SET rating = :rating WHERE id = :id");
            else if ($newContent !== null) $query = $this->db->prepare("UPDATE reviews SET content = :content WHERE id = :id");
            else return false;
            $query->bindParam(":product_name", $newProductName);
            $query->bindParam(":rating", $newRating);
            $query->bindParam(":content", $newContent);
            $query->bindParam(":id", $review->getId());
            $query->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Delete a review
    public function deleteReview(Review $review) {
        try {
            $this->db->prepare("DELETE FROM reviews WHERE id = :id")->bindParam(":id", $review->getId())->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }
}

// Usage
$reviewSystem = new ReviewSystem('your_database_name');

$user = new User(1, 'John Doe');
$productName = 'Example Product';
$rating = 5;
$content = 'This product is great!';

if ($reviewSystem->addReview($user, $productName, $rating, $content)) {
    echo "Review added successfully!";
} else {
    echo "Error adding review.";
}

$reviews = $reviewSystem->getReviewsForUser(1);
foreach ($reviews as $review) {
    echo "Product: " . $review->getProductName() . ", Rating: " . $review->getRating() . ", Content: " . $review->getContent();
}


// Include database connection file
require 'database.php';

function displayReviews() {
    // Query for all reviews from database
    $query = "SELECT * FROM reviews";
    $reviews = mysqli_query($GLOBALS['db'], $query);

    if (!$reviews) {
        die('Error: ' . mysqli_error($GLOBALS['db']));
    }

    echo "<h1>Product Reviews</h1>";
    while ($review = mysqli_fetch_assoc($reviews)) {
        // Display each review
        echo '<div>';
        echo "Reviewer ID: $review[reviewer_id]";
        echo "<br>";
        echo "Rating: $review[rating] / 5";
        echo "<br>";
        echo "Text: $review[text]";
        echo "</div>";
    }
}

function addReview($data) {
    // Insert new review into database
    $query = "INSERT INTO reviews (reviewer_id, product_id, rating, text)
              VALUES ('" . $_SESSION['user_id'] . "', '" . $_POST['product_id'] . "', '".$_POST['rating']."','".$_POST['text']."')";
    
    if (!mysqli_query($GLOBALS['db'], $query)) {
        die('Error: ' . mysqli_error($GLOBALS['db']));
    }
}

// Form for submitting reviews
function reviewForm() {
    echo "<h1>Submit a Review</h1>";
    echo '<form action="review.php" method="post">';
    echo "Product ID: <input type='text' name='product_id'><br><br>";
    echo "Rating (out of 5): <input type='number' name='rating' min='0' max='5'><br><br>";
    echo "Text: <textarea name='text'></textarea><br><br>";
    echo '<button type="submit">Submit Review</button>';
    echo '</form>';
}

// Main script
if (isset($_POST['product_id'])) {
    addReview($_POST);
} else if ($_SERVER["REQUEST_METHOD"] == "GET") {
    reviewForm();
}
displayReviews();


// Connect to database
require 'database.php';

// Start session
session_start();

// If user is logged in, display product selection page and add option for them to submit reviews
if ($_SESSION['is_logged_in']) {
    // Query for all products from database
    $query = "SELECT * FROM products";
    $products = mysqli_query($GLOBALS['db'], $query);

    echo "<h1>Products</h1>";
    while ($product = mysqli_fetch_assoc($products)) {
        // Display each product and add link to submit review for logged-in user
        echo '<div>';
        echo "Product ID: $product[id]";
        echo "<br>";
        echo "Name: $product[name]";
        echo "<br>";
        echo '<a href="review.php?product_id='.$product['id'].'">Submit Review</a>';
        echo "</div>";
    }
}


// models/Review.php

class Review {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview($data) {
        $query = "INSERT INTO reviews (user_id, product_name, review, rating) VALUES (:user_id, :product_name, :review, :rating)";
        $stmt = $this->db->prepare($query);
        $stmt->execute([
            ':user_id' => $data['user_id'],
            ':product_name' => $data['product_name'],
            ':review' => $data['review'],
            ':rating' => $data['rating']
        ]);
        return $this->db->lastInsertId();
    }

    public function getReviews() {
        $query = "SELECT * FROM reviews";
        $stmt = $this->db->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
}


// controllers/ReviewController.php

class ReviewController {
    private $review;

    public function __construct(Review $review) {
        $this->review = $review;
    }

    public function index() {
        // Get all reviews from the database.
        return json_encode($this->review->getReviews());
    }

    public function store() {
        // Create a new review in the database.
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            try {
                $data = $_POST;
                $reviewId = $this->review->createReview($data);
                return json_encode(['message' => 'Review created successfully', 'id' => $reviewId]);
            } catch (PDOException $e) {
                return json_encode(['error' => 'Failed to create review']);
            }
        }
    }
}


// index.php

require_once('vendor/autoload.php');
require_once('models/Review.php');
require_once('controllers/ReviewController.php');

$db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
$review = new Review($db);
$reviewController = new ReviewController($review);

if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    echo $reviewController->index();
} elseif ($_SERVER['REQUEST_METHOD'] === 'POST') {
    echo $reviewController->store();
}


<?php

// Include connection settings and function to connect to database
require_once 'dbconnect.php';

function insertReview($user_id, $product_id, $rating, $review) {
    // Prepare SQL query
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES (?, ?, ?, ?)";

    // Prepare statement and execute query
    $stmt = $db->prepare($sql);
    $stmt->execute([$user_id, $product_id, $rating, $review]);

    return $stmt->rowCount();
}

function getReviews() {
    // Retrieve reviews from database
    $reviews = array();

    try {
        $sql = "SELECT r.id, u.username, p.name AS product_name, r.rating, r.review, r.created_at 
                FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id";

        $stmt = $db->prepare($sql);
        $stmt->execute();

        while ($row = $stmt->fetch()) {
            $reviews[] = array(
                'id' => $row['id'],
                'username' => $row['username'],
                'product_name' => $row['product_name'],
                'rating' => $row['rating'],
                'review' => $row['review'],
                'created_at' => date('Y-m-d H:i:s', strtotime($row['created_at']))
            );
        }

    } catch (PDOException $e) {
        // Handle database error
        echo "Database error: " . $e->getMessage();
    }

    return $reviews;
}

function updateReview($id, $rating, $review) {
    // Prepare SQL query
    $sql = "UPDATE reviews SET rating = ?, review = ? WHERE id = ?";

    // Prepare statement and execute query
    $stmt = $db->prepare($sql);
    $result = $stmt->execute([$rating, $review, $id]);

    return $result;
}

function deleteReview($id) {
    // Prepare SQL query
    $sql = "DELETE FROM reviews WHERE id = ?";

    // Prepare statement and execute query
    $stmt = $db->prepare($sql);
    $result = $stmt->execute([$id]);

    return $result;
}

// Example usage:
$user_id = 1; // ID of user who wrote the review
$product_id = 2; // ID of product reviewed
$rating = 4;
$review = 'This is a great product!';

insertReview($user_id, $product_id, $rating, $review);

$reviews = getReviews();
print_r($reviews);

?>


// db.php: database connection file
$pdo = new PDO('mysql:host=localhost;dbname=reviews', 'root', '');

function create_review($user_id, $product_id, $review_text, $rating) {
  global $pdo;
  try {
    $stmt = $pdo->prepare("INSERT INTO reviews (user_id, product_id, review_text, rating)
                          VALUES (:user_id, :product_id, :review_text, :rating)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    return $stmt->execute();
  } catch (PDOException $e) {
    echo 'Error creating review: ' . $e->getMessage();
    return false;
  }
}

function get_reviews($product_id = null, $user_id = null) {
  global $pdo;
  try {
    if ($product_id && !$user_id) {
      $query = "SELECT * FROM reviews WHERE product_id = :product_id";
      $stmt = $pdo->prepare($query);
      $stmt->bindParam(':product_id', $product_id);
      return $stmt->fetchAll();
    } elseif (!$product_id && $user_id) {
      $query = "SELECT * FROM reviews WHERE user_id = :user_id";
      $stmt = $pdo->prepare($query);
      $stmt->bindParam(':user_id', $user_id);
      return $stmt->fetchAll();
    } else {
      return array(); // Return an empty array if both product_id and user_id are provided
    }
  } catch (PDOException $e) {
    echo 'Error fetching reviews: ' . $e->getMessage();
    return array();
  }
}

function update_review($id, $user_id, $product_id, $review_text, $rating) {
  global $pdo;
  try {
    $stmt = $pdo->prepare("UPDATE reviews SET review_text = :review_text, rating = :rating
                          WHERE id = :id AND user_id = :user_id AND product_id = :product_id");
    $stmt->bindParam(':id', $id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    return $stmt->execute();
  } catch (PDOException $e) {
    echo 'Error updating review: ' . $e->getMessage();
    return false;
  }
}

function delete_review($id, $user_id, $product_id) {
  global $pdo;
  try {
    $stmt = $pdo->prepare("DELETE FROM reviews WHERE id = :id AND user_id = :user_id AND product_id = :product_id");
    $stmt->bindParam(':id', $id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    return $stmt->execute();
  } catch (PDOException $e) {
    echo 'Error deleting review: ' . $e->getMessage();
    return false;
  }
}


// Create a new review
$user_id = 1;
$product_id = 2;
$review_text = "Great product!";
$rating = 5;
if (create_review($user_id, $product_id, $review_text, $rating)) {
  echo 'Review created successfully!';
} else {
  echo 'Error creating review';
}

// Get reviews for a specific product
$product_id = 2;
$reviews = get_reviews($product_id);
foreach ($reviews as $review) {
  echo $review['review_text'] . ', Rating: ' . $review['rating'];
}

// Update an existing review
$id = 1;
$user_id = 1;
$product_id = 2;
$review_text = "Great product, but a bit expensive.";
$rating = 4;
if (update_review($id, $user_id, $product_id, $review_text, $rating)) {
  echo 'Review updated successfully!';
} else {
  echo 'Error updating review';
}

// Delete an existing review
$id = 1;
$user_id = 1;
$product_id = 2;
if (delete_review($id, $user_id, $product_id)) {
  echo 'Review deleted successfully!';
} else {
  echo 'Error deleting review';
}


<?php

// Connect to database (replace with your own connection settings)
$dsn = 'mysql:host=localhost;dbname=your_database';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
    exit;
}

// Create a new review
function create_review($product_id, $user_id, $title, $content, $rating) {
    $sql = "INSERT INTO reviews (product_id, user_id, title, content, rating)
            VALUES (:product_id, :user_id, :title, :content, :rating)";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Retrieve all reviews for a specific product
function get_reviews($product_id) {
    $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    if ($stmt->execute()) {
        return $stmt->fetchAll();
    } else {
        return array();
    }
}

// Update an existing review
function update_review($review_id, $title, $content, $rating) {
    $sql = "UPDATE reviews SET title = :title, content = :content, rating = :rating WHERE id = :id";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':id', $review_id);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Delete a review
function delete_review($review_id) {
    $sql = "DELETE FROM reviews WHERE id = :id";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':id', $review_id);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

?>


// Create a new review
create_review(1, 1, 'Great product!', 'I love this product.', 5);

// Retrieve all reviews for a specific product
$reviews = get_reviews(1);
print_r($reviews);

// Update an existing review
update_review(1, 'Even better now!', 'I still love this product.', 4);

// Delete a review
delete_review(1);


// database.php (example connection file)
$conn = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');


function createUserReview($productId, $userId, $rating, $review) {
    global $conn;

    // validate input data
    if ($rating < 1 || $rating > 5) {
        return "Error: Rating must be between 1 and 5";
    }
    if (empty($review)) {
        return "Error: Review cannot be empty";
    }

    try {
        // insert review into database
        $stmt = $conn->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)");
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        $stmt->execute();

        // if successful, return a success message
        return "Review created successfully!";
    } catch (PDOException $e) {
        return "Error: " . $e->getMessage();
    }
}


function getReviewsForProduct($productId) {
    global $conn;

    try {
        // retrieve reviews for the given product from database
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id ORDER BY id DESC");
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC); // returns array of review data

    } catch (PDOException $e) {
        return "Error: " . $e->getMessage();
    }
}


// create a new review for product with id 1, by user with id 2
$result = createUserReview(1, 2, 4, 'This product is amazing!');
echo $result;

// retrieve reviews for the product with id 1
$reviews = getReviewsForProduct(1);
foreach ($reviews as $review) {
    echo "Rating: $review[rating], Review: $review[review]";
}


class ReviewSystem {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  }

  /**
   * Create a new review.
   *
   * @param int $userId
   * @param int $productId
   * @param int $rating
   * @param string|null $comment
   *
   * @return bool|void
   */
  public function createReview($userId, $productId, $rating, $comment = null) {
    try {
      $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)');
      $stmt->execute([$userId, $productId, $rating, $comment]);
      return true;
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Get all reviews for a product.
   *
   * @param int $productId
   *
   * @return array|null
   */
  public function getReviewsForProduct($productId) {
    try {
      $stmt = $this->db->prepare('SELECT r.id, u.username, p.name, r.rating, r.comment FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id WHERE r.product_id = ?');
      $stmt->execute([$productId]);
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
      return null;
    }
  }

  /**
   * Update a review.
   *
   * @param int $reviewId
   * @param int|null $rating
   * @param string|null $comment
   *
   * @return bool|void
   */
  public function updateReview($reviewId, $rating = null, $comment = null) {
    try {
      if ($rating !== null) {
        $stmt = $this->db->prepare('UPDATE reviews SET rating = ? WHERE id = ?');
        $stmt->execute([$rating, $reviewId]);
      }
      if ($comment !== null) {
        $stmt = $this->db->prepare('UPDATE reviews SET comment = ? WHERE id = ?');
        $stmt->execute([$comment, $reviewId]);
      }
      return true;
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Delete a review.
   *
   * @param int $reviewId
   *
   * @return bool|void
   */
  public function deleteReview($reviewId) {
    try {
      $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = ?');
      $stmt->execute([$reviewId]);
      return true;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


$reviewSystem = new ReviewSystem();

// Create a new review
$userId = 1;
$productId = 1;
$rating = 5;
$comment = 'Great product!';
$result = $reviewSystem->createReview($userId, $productId, $rating, $comment);
if (!$result) {
  echo "Error creating review";
}

// Get all reviews for a product
$reviews = $reviewSystem->getReviewsForProduct($productId);
print_r($reviews);

// Update a review
$reviewId = 1;
$result = $reviewSystem->updateReview($reviewId, null, 'Even better product!');
if (!$result) {
  echo "Error updating review";
}

// Delete a review
$result = $reviewSystem->deleteReview($reviewId);
if (!$result) {
  echo "Error deleting review";
}


// Function to add a new review
function add_review($product_id, $rating, $review) {
  global $db;
  
  // Query to insert the review into the database
  $query = "INSERT INTO reviews (product_id, rating, review, user_id) VALUES (?, ?, ?, ?)";
  $stmt = $db->prepare($query);
  $stmt->bind_param("iiii", $product_id, $rating, $review, $_SESSION['user_id']);
  $stmt->execute();
}

// Function to get all reviews for a product
function get_reviews_for_product($product_id) {
  global $db;
  
  // Query to retrieve the reviews from the database
  $query = "SELECT * FROM reviews WHERE product_id = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  return $stmt->get_result();
}

// Function to get a single review by ID
function get_review_by_id($review_id) {
  global $db;
  
  // Query to retrieve the review from the database
  $query = "SELECT * FROM reviews WHERE id = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("i", $review_id);
  $stmt->execute();
  return $stmt->get_result()->fetch_assoc();
}

// Function to update a review
function update_review($review_id, $rating, $review) {
  global $db;
  
  // Query to update the review in the database
  $query = "UPDATE reviews SET rating = ?, review = ? WHERE id = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("iii", $rating, $review, $review_id);
  $stmt->execute();
}

// Function to delete a review
function delete_review($review_id) {
  global $db;
  
  // Query to delete the review from the database
  $query = "DELETE FROM reviews WHERE id = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("i", $review_id);
  $stmt->execute();
}


// Assume we have a logged-in user with ID 1 and product ID 1
$_SESSION['user_id'] = 1;
$product_id = 1;

// Add a new review
add_review($product_id, 5, 'Great product!');

// Get all reviews for the product
$reviews = get_reviews_for_product($product_id);
foreach ($reviews as $review) {
  echo "Rating: {$review['rating']}, Review: {$review['review']}<br>";
}

// Update a review
update_review(1, 4, 'Not bad...');

// Delete a review
delete_review(1);


<?php

// Database connection settings
$host = 'your_host';
$username = 'your_username';
$password = 'your_password';
$dbname = 'your_database';

// Connect to database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function submit_review($title, $content, $rating, $user_id) {
  global $conn;
  
  // Insert review into database
  $sql = "INSERT INTO reviews (title, content, rating, user_id)
          VALUES ('$title', '$content', '$rating', '$user_id')";
  if ($conn->query($sql)) {
    return true; // Review submitted successfully
  } else {
    return false; // Error submitting review
  }
}

function get_reviews() {
  global $conn;
  
  // Retrieve all reviews from database
  $sql = "SELECT * FROM reviews ORDER BY id DESC";
  $result = $conn->query($sql);
  if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
      $reviews[] = array(
        'id' => $row['id'],
        'title' => $row['title'],
        'content' => $row['content'],
        'rating' => $row['rating']
      );
    }
  } else {
    $reviews = null; // No reviews found
  }
  
  return $reviews;
}

function filter_reviews($rating) {
  global $conn;
  
  // Retrieve reviews with specified rating from database
  $sql = "SELECT * FROM reviews WHERE rating = '$rating'";
  $result = $conn->query($sql);
  if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
      $reviews[] = array(
        'id' => $row['id'],
        'title' => $row['title'],
        'content' => $row['content']
      );
    }
  } else {
    $reviews = null; // No reviews found
  }
  
  return $reviews;
}

?>


// Submit a review
$submitted = submit_review('My Review', 'This is my review.', 5, 1);
if ($submitted) {
    echo "Review submitted successfully!";
} else {
    echo "Error submitting review.";
}

// Get all reviews
$reviews = get_reviews();
if ($reviews) {
    foreach ($reviews as $review) {
        echo $review['title'] . ' (' . $review['rating'] . '/5)';
        echo '<br>';
        echo $review['content'];
        echo '<hr>';
    }
} else {
    echo "No reviews found.";
}

// Filter reviews by rating
$filtered_reviews = filter_reviews(4);
if ($filtered_reviews) {
    foreach ($filtered_reviews as $review) {
        echo $review['title'] . ' (' . $review['rating'] . '/5)';
        echo '<br>';
        echo $review['content'];
        echo '<hr>';
    }
} else {
    echo "No reviews found for specified rating.";
}


class Review {
  private $db;

  public function __construct(PDO $db) {
    $this->db = $db;
  }

  public function createReview($user_id, $product_id, $rating, $comment) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, comment)
              VALUES (:user_id, :product_id, :rating, :comment)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    return $stmt->execute();
  }

  public function getReviews($product_id) {
    $query = "SELECT * FROM reviews
              WHERE product_id = :product_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getUserReviews($user_id) {
    $query = "SELECT * FROM reviews
              WHERE user_id = :user_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function updateReview($review_id, $new_rating, $new_comment) {
    $query = "UPDATE reviews SET rating = :rating, comment = :comment
              WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $review_id);
    $stmt->bindParam(':rating', $new_rating);
    $stmt->bindParam(':comment', $new_comment);
    return $stmt->execute();
  }

  public function deleteReview($review_id) {
    $query = "DELETE FROM reviews
              WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $review_id);
    return $stmt->execute();
  }
}


function displayReviews() {
  // Get the current user ID
  $user_id = $_SESSION['user_id'];

  // Create an instance of the Review model
  $reviewModel = new Review($db);

  // Display a form for the user to submit their review
  ?>
  <h2>Submit Your Review</h2>
  <form action="" method="post">
    <input type="hidden" name="product_id" value="<?php echo $_GET['product_id']; ?>">
    <select name="rating">
      <option value="1">1/5</option>
      <option value="2">2/5</option>
      <option value="3">3/5</option>
      <option value="4">4/5</option>
      <option value="5">5/5</option>
    </select>
    <textarea name="comment"></textarea>
    <button type="submit" name="submit_review">Submit Review</button>
  </form>

  <?php
}

function handleSubmitReview() {
  // Get the current user ID
  $user_id = $_SESSION['user_id'];

  // Create an instance of the Review model
  $reviewModel = new Review($db);

  // Get the product ID and review data from the form submission
  $product_id = $_POST['product_id'];
  $rating = $_POST['rating'];
  $comment = $_POST['comment'];

  // Insert the review into the database
  if ($reviewModel->createReview($user_id, $product_id, $rating, $comment)) {
    echo "Review submitted successfully!";
  } else {
    echo "Error submitting review.";
  }
}


function displayProductReviews($product_id) {
  // Create an instance of the Review model
  $reviewModel = new Review($db);

  // Get the reviews for the current product
  $reviews = $reviewModel->getReviews($product_id);

  // Display the reviews
  ?>
  <h2>Reviews for this Product</h2>
  <?php foreach ($reviews as $review) { ?>
    <p>
      Rating: <?php echo $review['rating']; ?>/5
      Comment: <?php echo $review['comment']; ?>
    </p>
  <?php } ?>


<?php

// Review model
class Review {
    public $id;
    public $product_id;
    public $user_id;
    public $rating;
    public $review_text;

    function __construct($id, $product_id, $user_id, $rating, $review_text) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->user_id = $user_id;
        $this->rating = $rating;
        $this->review_text = $review_text;
    }
}

// Review controller
class ReviewController {
    private $reviews;

    function __construct() {
        // Initialize reviews array (in a real application, this would likely come from a database)
        $this->reviews = array();
    }

    function add_review($product_id, $user_id, $rating, $review_text) {
        // Create new review object
        $new_review = new Review(count($this->reviews) + 1, $product_id, $user_id, $rating, $review_text);

        // Add review to reviews array
        $this->reviews[] = $new_review;

        return $new_review;
    }

    function get_reviews_for_product($product_id) {
        // Filter reviews for the specified product
        $product_reviews = array_filter($this->reviews, function ($review) use ($product_id) {
            return $review->product_id == $product_id;
        });

        return $product_reviews;
    }
}

// Example usage:
$review_controller = new ReviewController();

$new_review = $review_controller->add_review(123, 456, 5, "Great product!");
echo "New review created: 
";
print_r($new_review);

$product_reviews = $review_controller->get_reviews_for_product(123);
echo "
Reviews for product 123:
";
print_r($product_reviews);

?>


// config.php
<?php

define('DB_HOST', 'localhost');
define('DB_USERNAME', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database');

?>


// review.php
<?php

require_once 'config.php';

class Review {
  private $db;

  public function __construct() {
    try {
      $this->db = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USERNAME, DB_PASSWORD);
      $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
      die('Could not connect to database: ' . $e->getMessage());
    }
  }

  public function create($productId, $userId, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)");
      $stmt->execute([$productId, $userId, $rating, $review]);
      return true;
    } catch (PDOException $e) {
      echo 'Error creating review: ' . $e->getMessage();
      return false;
    }
  }

  public function read($id = null) {
    try {
      if ($id !== null) {
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = ?");
        $stmt->execute([$id]);
        return $stmt->fetch(PDO::FETCH_ASSOC);
      } else {
        $stmt = $this->db->query("SELECT * FROM reviews");
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
      }
    } catch (PDOException $e) {
      echo 'Error reading review: ' . $e->getMessage();
      return null;
    }
  }

  public function update($id, $rating = null, $review = null) {
    try {
      if ($rating !== null || $review !== null) {
        $stmt = $this->db->prepare("UPDATE reviews SET rating = ?, review = ? WHERE id = ?");
        $stmt->execute([$rating, $review, $id]);
        return true;
      } else {
        echo 'Error updating review: must specify at least one field';
        return false;
      }
    } catch (PDOException $e) {
      echo 'Error updating review: ' . $e->getMessage();
      return false;
    }
  }

  public function delete($id) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
      $stmt->execute([$id]);
      return true;
    } catch (PDOException $e) {
      echo 'Error deleting review: ' . $e->getMessage();
      return false;
    }
  }

  public function getAverageRating($productId) {
    try {
      $stmt = $this->db->prepare("SELECT AVG(rating) FROM reviews WHERE product_id = ?");
      $stmt->execute([$productId]);
      return $stmt->fetchColumn();
    } catch (PDOException $e) {
      echo 'Error getting average rating: ' . $e->getMessage();
      return null;
    }
  }

  public function countReviews($productId, $userId = null) {
    try {
      if ($userId !== null) {
        $stmt = $this->db->prepare("SELECT COUNT(*) FROM reviews WHERE product_id = ? AND user_id = ?");
        $stmt->execute([$productId, $userId]);
        return $stmt->fetchColumn();
      } else {
        $stmt = $this->db->prepare("SELECT COUNT(*) FROM reviews WHERE product_id = ?");
        $stmt->execute([$productId]);
        return $stmt->fetchColumn();
      }
    } catch (PDOException $e) {
      echo 'Error counting reviews: ' . $e->getMessage();
      return null;
    }
  }
}

$review = new Review();

// Example usage:
echo "Creating review...
";
$review->create(1, 1, 5.0, "Great product!");

echo "
Reading review...
";
$reviewData = $review->read(1);
print_r($reviewData);

echo "
Updating review...
";
$review->update(1, 4.5, "Even better!");

echo "
Getting average rating...
";
$averageRating = $review->getAverageRating(1);
echo "$averageRating
";

echo "
Counting reviews for product and user...
";
$countReviews = $review->countReviews(1, 1);
echo "$countReviews
";

?>


// models/Review.php

class Review {
    private $id;
    private $user_id;
    private $product_id;
    private $rating;
    private $review;

    public function __construct($id = null) {
        if ($id !== null) {
            $this->load($id);
        }
    }

    public function load($id) {
        // Load review from database (e.g., using PDO or mysqli)
        // ...
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->user_id;
    }

    public function getProductId() {
        return $this->product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}


// controllers/ReviewsController.php

class ReviewsController {
    private $db;

    public function __construct() {
        // Initialize database connection (e.g., using PDO or mysqli)
        $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
    }

    public function createReview($user_id, $product_id, $rating, $review) {
        try {
            $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)');
            $stmt->execute([$user_id, $product_id, $rating, $review]);
            return true;
        } catch (PDOException $e) {
            // Handle database error
            return false;
        }
    }

    public function getReviews($product_id = null) {
        try {
            if ($product_id !== null) {
                $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = ?');
                $stmt->execute([$product_id]);
            } else {
                $stmt = $this->db->query('SELECT * FROM reviews');
            }
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            // Handle database error
            return [];
        }
    }

    public function updateReview($id, $rating, $review) {
        try {
            $stmt = $this->db->prepare('UPDATE reviews SET rating = ?, review = ? WHERE id = ?');
            $stmt->execute([$rating, $review, $id]);
            return true;
        } catch (PDOException $e) {
            // Handle database error
            return false;
        }
    }

    public function deleteReview($id) {
        try {
            $this->db->exec('DELETE FROM reviews WHERE id = ?');
            return true;
        } catch (PDOException $e) {
            // Handle database error
            return false;
        }
    }
}


$reviewsController = new ReviewsController();

// Create a new review
$user_id = 1;
$product_id = 2;
$rating = 5;
$review = 'Great product!';
$createdReviewId = $reviewsController->createReview($user_id, $product_id, $rating, $review);
echo "Created review with ID: $createdReviewId
";

// Get all reviews for a specific product
$productReviews = $reviewsController->getReviews($product_id);
print_r($productReviews);

// Update an existing review
$updatedReviewId = 1;
$newRating = 4;
$newReview = 'Good product!';
$updated = $reviewsController->updateReview($updatedReviewId, $newRating, $newReview);
echo "Updated review with ID: $updatedReviewId
";

// Delete a review
$deletedReviewId = 2;
$deleted = $reviewsController->deleteReview($deletedReviewId);
echo "Deleted review with ID: $deletedReviewId
";


class Database {
  private $db_name = 'reviews_database';
  
  public function __construct() {
    try {
      // Attempt to connect to the database
      $this->connect();
    } catch (PDOException $e) {
      echo "Connection failed: " . $e->getMessage();
    }
  }

  private function connect() {
    // Connect to the database using PDO
    $pdo = new PDO('sqlite:'.$this->db_name);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  }

  public function query($query, $params = array()) {
    try {
      $stmt = $this->pdo->prepare($query);
      $stmt->execute($params);
      return $stmt;
    } catch (PDOException $e) {
      echo "Query failed: " . $e->getMessage();
    }
  }

  public function fetchAll($query, $params = array()) {
    try {
      $stmt = $this->pdo->prepare($query);
      $stmt->execute($params);
      return $stmt->fetchAll();
    } catch (PDOException $e) {
      echo "Query failed: " . $e->getMessage();
    }
  }

  public function getLastId() {
    // Get the last inserted id
    return $this->pdo->lastInsertId();
  }
}


class Review {
  private $db;

  public function __construct(Database $db) {
    $this->db = $db;
  }

  public function create($user_id, $product_id, $rating, $review_text) {
    // Insert review into the database
    try {
      $query = "INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (:user_id, :product_id, :rating, :review_text)";
      $params = array(
        ':user_id' => $user_id,
        ':product_id' => $product_id,
        ':rating' => $rating,
        ':review_text' => $review_text
      );
      $this->db->query($query, $params);
    } catch (PDOException $e) {
      echo "Review creation failed: " . $e->getMessage();
    }
  }

  public function readAll() {
    // Select all reviews from the database
    try {
      $query = "SELECT * FROM reviews";
      return $this->db->fetchAll($query);
    } catch (PDOException $e) {
      echo "Review retrieval failed: " . $e->getMessage();
    }
  }

  public function update($id, $new_rating, $new_review_text) {
    // Update review in the database
    try {
      $query = "UPDATE reviews SET rating = :rating, review_text = :review_text WHERE id = :id";
      $params = array(
        ':rating' => $new_rating,
        ':review_text' => $new_review_text,
        ':id' => $id
      );
      $this->db->query($query, $params);
    } catch (PDOException $e) {
      echo "Review update failed: " . $e->getMessage();
    }
  }

  public function delete($id) {
    // Delete review from the database
    try {
      $query = "DELETE FROM reviews WHERE id = :id";
      $params = array(':id' => $id);
      $this->db->query($query, $params);
    } catch (PDOException $e) {
      echo "Review deletion failed: " . $e->getMessage();
    }
  }
}


$db = new Database();

$review = new Review($db);

// Create a review
$user_id = 1;
$product_id = 2;
$rating = 5;
$review_text = "This product is amazing!";

$review->create($user_id, $product_id, $rating, $review_text);

// Read all reviews
$reviews = $review->readAll();

print_r($reviews);

// Update a review
$new_rating = 4;
$new_review_text = "This product is okay.";

$review->update(1, $new_rating, $new_review_text);

// Delete a review
$review->delete(1);


// Review class to encapsulate review-related functionality
class Review {
  private $db;

  public function __construct() {
    // Initialize database connection
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  /**
   * Add a new review for a product
   *
   * @param int $product_id Product ID
   * @param float $rating Rating (1-5)
   * @param string $comment Comment
   */
  public function addReview($product_id, $rating, $comment) {
    // Validate input
    if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
      throw new Exception('Invalid rating');
    }

    try {
      // Insert review into database
      $stmt = $this->db->prepare('INSERT INTO reviews (product_id, rating, comment) VALUES (?, ?, ?)');
      $stmt->execute([$product_id, $rating, $comment]);
      return true;
    } catch (PDOException $e) {
      throw new Exception('Error adding review: ' . $e->getMessage());
    }
  }

  /**
   * Get all reviews for a product
   *
   * @param int $product_id Product ID
   */
  public function getReviews($product_id) {
    try {
      // Retrieve reviews from database
      $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = ?');
      $stmt->execute([$product_id]);
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      throw new Exception('Error retrieving reviews: ' . $e->getMessage());
    }
  }

  /**
   * Get a single review by ID
   *
   * @param int $id Review ID
   */
  public function getReview($id) {
    try {
      // Retrieve review from database
      $stmt = $this->db->prepare('SELECT * FROM reviews WHERE id = ?');
      $stmt->execute([$id]);
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      throw new Exception('Error retrieving review: ' . $e->getMessage());
    }
  }

  /**
   * Update a review
   *
   * @param int $id Review ID
   * @param float $rating New rating
   * @param string $comment New comment
   */
  public function updateReview($id, $rating, $comment) {
    try {
      // Validate input
      if (!is_numeric($rating) || $rating < 1 || $rating > 5) {
        throw new Exception('Invalid rating');
      }

      // Update review in database
      $stmt = $this->db->prepare('UPDATE reviews SET rating = ?, comment = ? WHERE id = ?');
      $stmt->execute([$rating, $comment, $id]);
      return true;
    } catch (PDOException $e) {
      throw new Exception('Error updating review: ' . $e->getMessage());
    }
  }

  /**
   * Delete a review
   *
   * @param int $id Review ID
   */
  public function deleteReview($id) {
    try {
      // Delete review from database
      $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = ?');
      $stmt->execute([$id]);
      return true;
    } catch (PDOException $e) {
      throw new Exception('Error deleting review: ' . $e->getMessage());
    }
  }
}


// Create a new Review instance
$review = new Review();

// Add a new review for a product
$product_id = 1;
$rating = 4.5;
$comment = "Great product!";
$review->addReview($product_id, $rating, $comment);

// Get all reviews for a product
$reviews = $review->getReviews($product_id);
print_r($reviews);

// Get a single review by ID
$id = 1;
$review->getReview($id);

// Update a review
$rating = 5.0;
$comment = "Excellent!";
$review->updateReview($id, $rating, $comment);

// Delete a review
$review->deleteReview($id);


// Include database connection settings
require 'config.php';

function submitReview($productId, $rating, $review) {
  // Check if user is logged in
  if (!isset($_SESSION['user_id'])) {
    return array('error' => 'Please login to submit a review.');
  }

  // Insert review into database
  $stmt = $pdo->prepare("INSERT INTO reviews (product_id, user_id, rating, review)
                        VALUES (:product_id, :user_id, :rating, :review)");
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':user_id', $_SESSION['user_id']);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  $stmt->execute();

  return array('success' => true, 'message' => 'Review submitted successfully.');
}

function getReviews($productId) {
  // Get all reviews for the specified product
  $stmt = $pdo->prepare("SELECT r.id, u.name, u.email, r.rating, r.review
                        FROM reviews r
                        JOIN users u ON r.user_id = u.id
                        WHERE r.product_id = :product_id");
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();

  return $stmt->fetchAll();
}

function displayReviews($reviews) {
  // Display reviews in HTML format
  echo '<ul>';
  foreach ($reviews as $review) {
    echo '<li>' . $review['name'] . ' (' . $review['email'] . ') - ';
    if (isset($_SESSION['user_id']) && $_SESSION['user_id'] == $review['user_id']) {
      echo '<button> Edit </button>';
    }
    echo 'Rating: ' . $review['rating'] . '/5, Review: ' . $review['review'];
    echo '</li>';
  }
  echo '</ul>';
}


if (isset($_POST['submit'])) {
  $productId = $_POST['product_id'];
  $rating = $_POST['rating'];
  $review = $_POST['review'];

  $result = submitReview($productId, $rating, $review);
  if ($result['success']) {
    echo 'Review submitted successfully!';
  } else {
    echo $result['error'];
  }
}


$productId = 1; // Replace with actual product ID
$reviews = getReviews($productId);
displayReviews($reviews);


require_once 'db_connect.php';


function get_reviews($product_id) {
  global $conn; // assuming you have a global variable named `$conn` representing the database connection

  $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
  $result = mysqli_query($conn, $query);

  if (mysqli_num_rows($result) > 0) {
    while ($review = mysqli_fetch_assoc($result)) {
      echo "<p>" . $review['rating'] . "/5 stars: " . $review['review_text'] . "</p>";
    }
  } else {
    echo "No reviews for this product.";
  }

  return;
}


function add_review($product_id, $user_id, $rating, $review_text) {
  global $conn; // assuming you have a global variable named `$conn` representing the database connection

  $query = "INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES ('$product_id', '$user_id', '$rating', '$review_text')";
  mysqli_query($conn, $query);

  return;
}


function display_review_form($product_id) {
  echo "<h2>Leave a Review for Product #{$product_id}</h2>";
  echo "<form action='' method='post'>";
  echo "<label for='rating'>Rating:</label>";
  echo "<select id='rating' name='rating'>";
  echo "<option value='1'>1/5 stars</option>";
  echo "<option value='2'>2/5 stars</option>";
  echo "<option value='3'>3/5 stars</option>";
  echo "<option value='4'>4/5 stars</option>";
  echo "<option value='5'>5/5 stars</option>";
  echo "</select><br><br>";
  echo "<label for='review_text'>Review:</label>";
  echo "<textarea id='review_text' name='review_text'></textarea><br><br>";
  echo "<input type='submit' value='Submit Review'>";
  echo "</form>";

  return;
}


display_review_form(1); // display review form for product #1

$reviews = get_reviews(1); // retrieve reviews for product #1 and output them in the page

// add a new review for product #2
add_review(2, 1234, 5, "This is an awesome product!");


// reviews.php

class UserReview {
  private $id;
  private $userId;
  private $productId;
  private $rating;
  private $comment;

  public function __construct($id, $userId, $productId, $rating, $comment) {
    $this->id = $id;
    $this->userId = $userId;
    $this->productId = $productId;
    $this->rating = $rating;
    $this->comment = $comment;
  }

  public function getId() { return $this->id; }
  public function getUserId() { return $this->userId; }
  public function getProductId() { return $this->productId; }
  public function getRating() { return $this->rating; }
  public function getComment() { return $this->comment; }

  // Static methods to create a new review
  public static function create($userId, $productId, $rating, $comment) {
    $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
    $stmt = $db->prepare("INSERT INTO reviews (userId, productId, rating, comment) VALUES (:userId, :productId, :rating, :comment)");
    $stmt->execute(array(
      ':userId' => $userId,
      ':productId' => $productId,
      ':rating' => $rating,
      ':comment' => $comment
    ));
    return new self($db->lastInsertId(), $userId, $productId, $rating, $comment);
  }

  // Static method to get all reviews for a product
  public static function getAllReviewsForProduct($productId) {
    $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
    $stmt = $db->prepare("SELECT * FROM reviews WHERE productId = :productId");
    $stmt->execute(array(':productId' => $productId));
    return array_map(function($reviewData) { return new self($reviewData['id'], $reviewData['userId'], $reviewData['productId'], $reviewData['rating'], $reviewData['comment']); }, $stmt->fetchAll());
  }

  // Static method to get all reviews for a user
  public static function getAllReviewsForUser($userId) {
    $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
    $stmt = $db->prepare("SELECT * FROM reviews WHERE userId = :userId");
    $stmt->execute(array(':userId' => $userId));
    return array_map(function($reviewData) { return new self($reviewData['id'], $reviewData['userId'], $reviewData['productId'], $reviewData['rating'], $reviewData['comment']); }, $stmt->fetchAll());
  }
}


// Create a new review
$review = UserReview::create(1, 3, 5, 'Great product!');

// Get all reviews for a product
$reviewsForProduct = UserReview::getAllReviewsForProduct(3);
print_r($reviewsForProduct);

// Get all reviews for a user
$reviewsForUser = UserReview::getAllReviewsForUser(1);
print_r($reviewsForUser);


// Connect to database
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add a review
function addReview($user_id, $review, $rating) {
    global $conn;
    $sql = "INSERT INTO reviews (user_id, review, rating)
            VALUES ('$user_id', '$review', '$rating')";
    if ($conn->query($sql)) {
        return true; // Review added successfully
    } else {
        return false; // Error adding review
    }
}

// Function to update a review
function updateReview($id, $new_review, $new_rating) {
    global $conn;
    $sql = "UPDATE reviews SET review='$new_review', rating='$new_rating'
            WHERE id=$id";
    if ($conn->query($sql)) {
        return true; // Review updated successfully
    } else {
        return false; // Error updating review
    }
}

// Function to delete a review
function deleteReview($id) {
    global $conn;
    $sql = "DELETE FROM reviews WHERE id=$id";
    if ($conn->query($sql)) {
        return true; // Review deleted successfully
    } else {
        return false; // Error deleting review
    }
}

// Function to get all reviews for a user
function getUserReviews($user_id) {
    global $conn;
    $sql = "SELECT * FROM reviews WHERE user_id=$user_id";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        // Output data of each row
        while($row = $result->fetch_assoc()) {
            echo "Review: " . $row["review"]. " - Rating: " . $row["rating"]. "<br>";
        }
    } else {
        echo "No reviews found for this user.";
    }
}


<?php require_once 'review_functions.php'; ?>


// Add a review
$result = addReview(1, "This is a great product!", 4.5);
if ($result) {
    echo "Review added successfully.";
} else {
    echo "Error adding review.";
}

// Update a review
$result = updateReview(2, "I'm so disappointed with this product.", 1.0);
if ($result) {
    echo "Review updated successfully.";
} else {
    echo "Error updating review.";
}

// Delete a review
$result = deleteReview(3);
if ($result) {
    echo "Review deleted successfully.";
} else {
    echo "Error deleting review.";
}

// Get all reviews for a user
getUserReviews(1);


<?php

// Database connection settings
$hostname = 'localhost';
$username = 'root';
$password = '';
$dbname = 'reviews';

// Establish database connection
$conn = mysqli_connect($hostname, $username, $password, $dbname);

function createUser($name, $email, $password) {
  global $conn;
  $sql = "INSERT INTO users (name, email, password) VALUES ('$name', '$email', '$password')";
  return mysqli_query($conn, $sql);
}

function getReviews($product_name = null) {
  global $conn;
  if ($product_name) {
    $sql = "SELECT * FROM reviews WHERE product_name LIKE '%$product_name%'";
  } else {
    $sql = "SELECT * FROM reviews";
  }
  return mysqli_query($conn, $sql);
}

function createReview($user_id, $product_name, $review_text, $rating) {
  global $conn;
  $sql = "INSERT INTO reviews (user_id, product_name, review_text, rating) VALUES ('$user_id', '$product_name', '$review_text', '$rating')";
  return mysqli_query($conn, $sql);
}

function updateReview($id, $new_rating) {
  global $conn;
  $sql = "UPDATE reviews SET rating = '$new_rating' WHERE id = '$id'";
  return mysqli_query($conn, $sql);
}

function deleteReview($id) {
  global $conn;
  $sql = "DELETE FROM reviews WHERE id = '$id'";
  return mysqli_query($conn, $sql);
}

// Example usage:
$name = 'John Doe';
$email = 'johndoe@example.com';
$password = 'password123';

createUser($name, $email, $password);

$product_name = 'Example Product';
$review_text = 'This is a great product!';
$rating = 5;

$user_id = 1; // Get user id from database

createReview($user_id, $product_name, $review_text, $rating);

// Read reviews
$reviews = getReviews();
while ($row = mysqli_fetch_assoc($reviews)) {
  echo "User ID: " . $row['user_id'] . "
";
  echo "Product Name: " . $row['product_name'] . "
";
  echo "Review Text: " . $row['review_text'] . "
";
  echo "Rating: " . $row['rating'] . "

";
}

?>


class Review {
    private $id;
    private $title;
    private $content;
    private $rating;
    private $created_at;

    public function __construct($id, $title, $content, $rating) {
        $this->id = $id;
        $this->title = $title;
        $this->content = $content;
        $this->rating = $rating;
        $this->created_at = date('Y-m-d H:i:s');
    }

    public function getId() {
        return $this->id;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getContent() {
        return $this->content;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getCreatedAt() {
        return $this->created_at;
    }
}


class ReviewController {
    private $reviews = array();

    public function addReview($title, $content, $rating) {
        $review = new Review(count($this->reviews) + 1, $title, $content, $rating);
        $this->reviews[] = $review;
        return $review;
    }

    public function getReviews() {
        return $this->reviews;
    }
}


class UserReview extends ReviewController {
    private $userId;

    public function __construct($userId) {
        $this->userId = $userId;
        parent::__construct();
    }

    public function addReview($title, $content, $rating) {
        $review = parent::addReview($title, $content, $rating);
        $review->setUserId($this->userId);
        return $review;
    }
}


class Review extends Model {
    private $id;
    private $title;
    private $content;
    private $rating;
    private $created_at;

    public function __construct() {
        parent::__construct();
    }

    public function setId($id) {
        $this->id = $id;
    }

    public function setTitle($title) {
        $this->title = $title;
    }

    public function setContent($content) {
        $this->content = $content;
    }

    public function setRating($rating) {
        $this->rating = $rating;
    }

    public function setUserId($userId) {
        $this->userId = $userId;
    }
}


function displayReviews() {
    $reviews = ReviewController::getReviews();
    foreach ($reviews as $review) {
        echo "Title: {$review->getTitle()}<br>";
        echo "Content: {$review->getContent()}<br>";
        echo "Rating: {$review->getRating()}<br>";
        echo "Created at: {$review->getCreatedAt()}<br><hr>";
    }
}


<?php

require_once 'functions.php';

$reviews = ReviewController::getReviews();

if (isset($_POST['addReview'])) {
    $title = $_POST['title'];
    $content = $_POST['content'];
    $rating = $_POST['rating'];

    $review = ReviewController::addReview($title, $content, $rating);

    echo "Review added successfully!<br>";

} else {
    displayReviews();
}
?>


<?php

// Assume we have a database connection established with MySQLi
$mysqli = new mysqli("localhost", "username", "password", "database");

function createReview($productId, $rating, $reviewText) {
    global $mysqli;
    
    // Validate input
    if (!is_int($rating)) {
        throw new InvalidArgumentException("Rating must be an integer");
    }
    if (!preg_match('/^[0-9]+$/', $rating)) {
        throw new InvalidArgumentException("Rating must be a number between 1 and 5");
    }
    if (empty($reviewText) || strlen($reviewText) > 2000) {
        throw new InvalidArgumentException("Review text cannot be empty or longer than 2000 characters");
    }
    
    // Prepare query
    $query = "INSERT INTO reviews (product_id, user_id, rating, review_text)
              VALUES (?, ?, ?, ?)";
    $stmt = $mysqli->prepare($query);
    
    // Bind parameters
    $stmt->bind_param("iii", $productId, 0, $rating, $reviewText); // Replace `0` with actual user ID
    
    // Execute query
    if (!$stmt->execute()) {
        throw new Exception("Failed to create review: " . $mysqli->error);
    }
    
    return $mysqli->insert_id;
}

function getReviews($productId) {
    global $mysqli;
    
    // Prepare query
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $mysqli->prepare($query);
    
    // Bind parameter
    $stmt->bind_param("i", $productId);
    
    // Execute query and fetch results
    if (!$stmt->execute()) {
        throw new Exception("Failed to retrieve reviews: " . $mysqli->error);
    }
    $result = $stmt->get_result();
    return $result;
}

function displayReviews($reviews) {
    echo "<h2>Reviews</h2>";
    foreach ($reviews as $review) {
        echo "<p>" . $review['rating'] . "/5 stars: " . $review['review_text'] . "</p>";
    }
}

// Example usage
try {
    $productId = 1; // Replace with actual product ID
    
    $reviews = getReviews($productId);
    
    displayReviews($reviews);
} catch (Exception $e) {
    echo "<p>Error: " . $e->getMessage() . "</p>";
}


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'root';
$password = '';

try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die("Error connecting to database: " . $e->getMessage());
}

function add_review($review_text, $product_id, $user_id) {
    global $conn;
    
    // Insert review into reviews table
    $stmt = $conn->prepare("INSERT INTO reviews (text, product_id, user_id) VALUES (:text, :product_id, :user_id)");
    $stmt->bindParam(':text', $review_text);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    
    // Get the ID of the newly inserted review
    $new_review_id = $conn->lastInsertId();
    
    return $new_review_id;
}

function get_reviews($product_id) {
    global $conn;
    
    // Retrieve reviews from reviews table where product_id matches
    $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    
    $reviews = array();
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        $reviews[] = array(
            'id' => $row['id'],
            'text' => $row['text'],
            'user_id' => $row['user_id']
        );
    }
    
    return $reviews;
}

function get_user_reviews($user_id) {
    global $conn;
    
    // Retrieve reviews from reviews table where user_id matches
    $stmt = $conn->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    
    $reviews = array();
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
        $reviews[] = array(
            'id' => $row['id'],
            'text' => $row['text'],
            'product_id' => $row['product_id']
        );
    }
    
    return $reviews;
}

function delete_review($review_id) {
    global $conn;
    
    // Delete review from reviews table where id matches
    $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $review_id);
    $stmt->execute();
}

?>


require_once 'review.php';

// Add a new review
$new_review_id = add_review('This product is great!', 123, 456);

// Get all reviews for a specific product
$product_reviews = get_reviews(123);
print_r($product_reviews);

// Get all reviews written by a specific user
$user_reviews = get_user_reviews(456);
print_r($user_reviews);

// Delete a review
delete_review(789);


<?php

// Configuration and Database Connection
$host = 'localhost';
$dbname = 'reviews_system';
$username = 'your_username';
$password = 'your_password';

try {
    $dsn = "mysql:host=$host;dbname=$dbname";
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// Function to create a review
function create_review($product_id, $user_name, $review, $rating) {
    global $pdo;
    
    try {
        $stmt = $pdo->prepare("INSERT INTO reviews (product_id, user_name, review, rating) VALUES (:product_id, :user_name, :review, :rating)");
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review', $review);
        $stmt->bindParam(':rating', $rating);
        
        if ($stmt->execute()) {
            return true;
        } else {
            throw new PDOException($stmt->errorInfo());
        }
    } catch (PDOException $e) {
        echo 'Error creating review: ' . $e->getMessage();
        return false;
    }
}

// Function to read all reviews
function read_reviews() {
    global $pdo;
    
    try {
        $reviews = [];
        $stmt = $pdo->query("SELECT r.id, p.name as product_name, r.user_name, r.review, r.rating FROM reviews r INNER JOIN products p ON r.product_id=p.id");
        
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            $reviews[] = $row;
        }
        
        return $reviews;
    } catch (PDOException $e) {
        echo 'Error reading reviews: ' . $e->getMessage();
        return [];
    }
}

// Function to read reviews by specific product
function read_reviews_by_product($product_id) {
    global $pdo;
    
    try {
        $stmt = $pdo->query("SELECT * FROM reviews WHERE product_id=:product_id");
        $stmt->bindParam(':product_id', $product_id);
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo 'Error reading reviews by product: ' . $e->getMessage();
        return [];
    }
}

// Function to update a review
function update_review($review_id, $new_rating, $new_review) {
    global $pdo;
    
    try {
        $stmt = $pdo->prepare("UPDATE reviews SET rating=:new_rating, review=:new_review WHERE id=:review_id");
        $stmt->bindParam(':review_id', $review_id);
        $stmt->bindParam(':new_rating', $new_rating);
        $stmt->bindParam(':new_review', $new_review);
        
        if ($stmt->execute()) {
            return true;
        } else {
            throw new PDOException($stmt->errorInfo());
        }
    } catch (PDOException $e) {
        echo 'Error updating review: ' . $e->getMessage();
        return false;
    }
}

// Function to delete a review
function delete_review($review_id) {
    global $pdo;
    
    try {
        $stmt = $pdo->prepare("DELETE FROM reviews WHERE id=:review_id");
        $stmt->bindParam(':review_id', $review_id);
        
        if ($stmt->execute()) {
            return true;
        } else {
            throw new PDOException($stmt->errorInfo());
        }
    } catch (PDOException $e) {
        echo 'Error deleting review: ' . $e->getMessage();
        return false;
    }
}

// Usage examples
create_review(1, 'John Doe', 'This product is great!', 5);
$reviews = read_reviews();
foreach ($reviews as $review) {
    echo "Review ID: $review[id]
";
    echo "Product Name: $review[product_name]
";
    echo "User Name: $review[user_name]
";
    echo "Review Text: $review[review]
";
    echo "Rating: $review[rating]

";
}

$reviews = read_reviews_by_product(1);
foreach ($reviews as $review) {
    echo "Review ID: $review[id]
";
    echo "Product Name: $review[product_name]
";
    echo "User Name: $review[user_name]
";
    echo "Review Text: $review[review]
";
    echo "Rating: $review[rating]

";
}

update_review(1, 4, 'This product is just okay.');
delete_review(2);

?>


<?php

// Configuration settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Function to create a review
function createReview($userId, $productId, $rating, $review) {
  global $db;

  // Insert review into database
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  $result = $stmt->execute();

  return $result;
}

// Function to read all reviews
function getReviews() {
  global $db;

  // Retrieve reviews from database
  $query = "SELECT * FROM reviews";
  $stmt = $db->prepare($query);
  $stmt->execute();
  $reviews = $stmt->fetchAll();

  return $reviews;
}

// Function to read a single review by ID
function getReviewById($id) {
  global $db;

  // Retrieve review from database
  $query = "SELECT * FROM reviews WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':id', $id);
  $stmt->execute();
  $review = $stmt->fetch();

  return $review;
}

// Function to update a review
function updateReview($id, $rating, $review) {
  global $db;

  // Update review in database
  $query = "UPDATE reviews SET rating = :rating, review = :review WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':id', $id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  $result = $stmt->execute();

  return $result;
}

// Function to delete a review
function deleteReview($id) {
  global $db;

  // Delete review from database
  $query = "DELETE FROM reviews WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':id', $id);
  $result = $stmt->execute();

  return $result;
}

// Initialize database connection
$db = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USERNAME, DB_PASSWORD);

?>


// Create a new review for a product with ID 1 from user with ID 1.
createReview(1, 1, 5, "I love this product! It's amazing.");

// Retrieve all reviews and print them out.
$reviews = getReviews();
foreach ($reviews as $review) {
  echo "ID: " . $review['id'] . ", Rating: " . $review['rating'] . ", Review: " . $review['review'] . "
";
}

// Update review with ID 1 to have a rating of 4 and new review text.
updateReview(1, 4, "I still love this product! But I've found some flaws now.");

// Delete the review with ID 2.
deleteReview(2);


<?php

// Include database connection
require_once 'db.php';

function create_review($user_id, $product_id, $rating, $review) {
  // Insert review into database
  $query = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES (:user_id, :product_id, :rating, :review)";
  $stmt = $pdo->prepare($query);
  $stmt->execute([
    ':user_id' => $user_id,
    ':product_id' => $product_id,
    ':rating' => $rating,
    ':review' => $review
  ]);
}

function get_reviews() {
  // Retrieve all reviews from database
  $query = "SELECT r.*, u.name AS user_name
            FROM reviews r
            JOIN users u ON r.user_id = u.id";
  $stmt = $pdo->prepare($query);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function delete_review($id) {
  // Delete review from database
  $query = "DELETE FROM reviews WHERE id = :id";
  $stmt = $pdo->prepare($query);
  $stmt->execute([':id' => $id]);
}

?>


<?php
require_once 'reviews.php';

// Display all reviews
$reviews = get_reviews();
?>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Reviews</title>
</head>
<body>

  <?php foreach ($reviews as $review): ?>
    <h2><?= $review['user_name'] ?> (<?= $review['rating'] ?>/5)</h2>
    <p><?= $review['review'] ?></p>
    <button onclick="deleteReview(<?= $review['id'] ?>)">Delete</button>

    <script>
      function deleteReview(id) {
        if (confirm('Are you sure you want to delete this review?')) {
          window.location.href = 'delete.php?id=' + id;
        }
      }
    </script>
  <?php endforeach; ?>

  <!-- Form for leaving new reviews -->
  <form action="create.php" method="post">
    <label for="user_id">User ID:</label>
    <input type="number" name="user_id" required>

    <br>

    <label for="product_id">Product ID:</label>
    <input type="number" name="product_id" required>

    <br>

    <label for="rating">Rating:</label>
    <select name="rating">
      <?php for ($i = 1; $i <= 5; $i++): ?>
        <option value="<?= $i ?>"><?= $i ?>/5</option>
      <?php endfor; ?>
    </select>

    <br>

    <label for="review">Review:</label>
    <textarea name="review"></textarea>

    <br>

    <button type="submit">Leave Review</button>
  </form>

  <!-- PHP for creating new reviews -->
  <?php if (isset($_POST['user_id']) && isset($_POST['product_id'])): ?>
    <?php create_review(
      $_POST['user_id'],
      $_POST['product_id'],
      $_POST['rating'],
      $_POST['review']
    ); ?>
    <script>alert('Review created successfully!');</script>
  <?php endif; ?>

</body>
</html>


<?php

require_once 'reviews.php';

// Create new review
if (isset($_POST['user_id']) && isset($_POST['product_id'])) {
  create_review(
    $_POST['user_id'],
    $_POST['product_id'],
    $_POST['rating'],
    $_POST['review']
  );
}

?>


<?php

// Database connection settings
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'reviews');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function create_review($user_id, $product_id, $rating, $review) {
    global $conn;
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiis", $user_id, $product_id, $rating, $review);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function get_reviews($product_id) {
    global $conn;
    $sql = "SELECT * FROM reviews
            WHERE product_id = ? AND rating >= 3";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    if ($stmt->execute()) {
        return $stmt->get_result();
    } else {
        return false;
    }
}

function get_user_reviews($user_id) {
    global $conn;
    $sql = "SELECT * FROM reviews
            WHERE user_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $user_id);
    if ($stmt->execute()) {
        return $stmt->get_result();
    } else {
        return false;
    }
}

// Example usage:
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = "Great product!";

if (create_review($user_id, $product_id, $rating, $review)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

$reviews = get_reviews($product_id);
if ($reviews) {
    while ($row = $reviews->fetch_assoc()) {
        echo $row['username'] . ": " . $row['review'];
    }
} else {
    echo "No reviews found.";
}


<?php

// Connect to the database
$mysqli = new mysqli('localhost', 'username', 'password', 'database');

if ($mysqli->connect_errno) {
    echo "Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error;
}

// Function to display reviews for a specific user
function get_user_reviews($user_id) {
    global $mysqli;

    $query = "SELECT r.id, u.name, r.product_name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.user_id = '$user_id' ORDER BY created_at DESC";
    $result = $mysqli->query($query);

    while ($row = $result->fetch_assoc()) {
        echo "<div><b>Review by " . $row['name'] . "</b><br>";
        echo "Product: <i>" . $row['product_name'] . "</i><br>";
        echo "Rating: <i>" . $row['rating'] . "/5</i><br>";
        echo "Review: <p>" . nl2br($row['review']) . "</p></div>";
    }
}

// Function to add a new review
function add_review($user_id, $product_name, $rating, $review) {
    global $mysqli;

    $query = "INSERT INTO reviews (user_id, product_name, rating, review) VALUES ('$user_id', '$product_name', '$rating', '$review')";
    if ($mysqli->query($query)) {
        echo "Review added successfully!";
    } else {
        echo "Failed to add review: (" . $mysqli->errno . ") " . $mysqli->error;
    }
}

// Example usage
get_user_reviews(1);

// Add a new review
add_review(1, 'Product A', 4, 'This product is great! I love its features.');

?>


<?php

// Configuration file for database connection details
require_once 'config.php';

class Review {
    private $db;

    public function __construct() {
        $this->db = new Database();
        if (!$this->db->connect()) {
            die("Connection failed: " . $this->db->error());
        }
    }

    // Function to create a review
    public function createReview($user_id, $product_id, $content, $rating) {
        try {
            $query = "INSERT INTO reviews (user_id, product_id, content, rating)
                      VALUES (?, ?, ?, ?)";
            $stmt = $this->db->prepare($query);
            $stmt->bind_param("iis", $user_id, $product_id, $content, $rating);

            if ($stmt->execute()) {
                return true;
            } else {
                throw new Exception($stmt->error);
            }
        } catch (Exception $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to retrieve all reviews for a product
    public function getReviewsForProduct($product_id) {
        try {
            $query = "SELECT r.id, u.name, p.title, r.content, r.rating
                      FROM reviews r
                      JOIN users u ON r.user_id = u.id
                      JOIN products p ON r.product_id = p.id
                      WHERE r.product_id = ?";
            $stmt = $this->db->prepare($query);
            $stmt->bind_param("i", $product_id);

            if ($stmt->execute()) {
                return $stmt->get_result();
            } else {
                throw new Exception($stmt->error);
            }
        } catch (Exception $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to edit a review
    public function editReview($review_id, $content = null, $rating = null) {
        try {
            if ($content !== null || $rating !== null) {
                $query = "UPDATE reviews SET content = ?, rating = ?
                            WHERE id = ?";
                $stmt = $this->db->prepare($query);
                $stmt->bind_param("sis", $content, $rating, $review_id);

                if ($stmt->execute()) {
                    return true;
                } else {
                    throw new Exception($stmt->error);
                }
            } else {
                return false; // No changes made
            }
        } catch (Exception $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to delete a review
    public function deleteReview($review_id) {
        try {
            $query = "DELETE FROM reviews WHERE id = ?";
            $stmt = $this->db->prepare($query);
            $stmt->bind_param("i", $review_id);

            if ($stmt->execute()) {
                return true;
            } else {
                throw new Exception($stmt->error);
            }
        } catch (Exception $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }
}

?>


require_once 'review.php';

$review = new Review();

// Create a review
$user_id = 1; // ID of the user who left the review
$product_id = 2; // ID of the product being reviewed
$content = "This is an example review.";
$rating = 4;

if ($review->createReview($user_id, $product_id, $content, $rating)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

// Retrieve all reviews for a product
$product_id = 2;
$result = $review->getReviewsForProduct($product_id);

if ($result) {
    while ($row = $result->fetch_assoc()) {
        echo "ID: " . $row["id"] . "<br>";
        echo "User Name: " . $row["name"] . "<br>";
        echo "Product Title: " . $row["title"] . "<br>";
        echo "Review Content: " . $row["content"] . "<br>";
        echo "Rating: " . $row["rating"] . "/5<br><hr>";
    }
} else {
    echo "No reviews found for this product.";
}

// Edit a review
$review_id = 1;
$content = "This is the updated review content.";
$rating = 4;

if ($review->editReview($review_id, $content, $rating)) {
    echo "Review edited successfully!";
} else {
    echo "Error editing review.";
}

// Delete a review
$review_id = 1;

if ($review->deleteReview($review_id)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}


// Database connection settings
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database_name";

// Create a new PDO instance
try {
    $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}

// Function to add review
function add_review($product_id, $user_name, $review_text, $rating) {
    global $conn;
    $sql = "INSERT INTO reviews (product_id, user_name, review_text, rating)
            VALUES (:product_id, :user_name, :review_text, :rating)";
    
    try {
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);
        
        if ($stmt->execute()) {
            return true;
        } else {
            echo "Error adding review: " . $conn->errorInfo();
            return false;
        }
    } catch (PDOException $e) {
        echo "Error adding review: " . $e->getMessage();
        return false;
    }
}

// Function to display average rating
function get_average_rating($product_id) {
    global $conn;
    $sql = "SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = :product_id";
    
    try {
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        
        if ($stmt->execute()) {
            $result = $stmt->fetch();
            return $result['average_rating'];
        } else {
            echo "Error getting average rating: " . $conn->errorInfo();
            return null;
        }
    } catch (PDOException $e) {
        echo "Error getting average rating: " . $e->getMessage();
        return null;
    }
}

// Function to display all reviews for a product
function get_reviews($product_id, $limit = 10) {
    global $conn;
    $sql = "SELECT * FROM reviews WHERE product_id = :product_id ORDER BY id DESC LIMIT :limit";
    
    try {
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':limit', $limit);
        
        if ($stmt->execute()) {
            return $stmt->fetchAll();
        } else {
            echo "Error getting reviews: " . $conn->errorInfo();
            return array();
        }
    } catch (PDOException $e) {
        echo "Error getting reviews: " . $e->getMessage();
        return array();
    }
}


add_review(1, 'John Doe', 'This is a great product!', 4.5);
echo get_average_rating(1); // outputs the average rating for product with id 1

$reviews = get_reviews(1);
foreach ($reviews as $review) {
    echo "Review by " . $review['user_name'] . ": " . $review['review_text'] . " (Rating: " . $review['rating'] . ")";
}


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database_name');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function createUserReview($product_id, $user_name, $review_text, $rating) {
    global $conn;
    
    // Prepare and execute query
    $sql = "INSERT INTO reviews (product_id, user_name, review, rating)
            VALUES (?, ?, ?, ?)";
    
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiss", $product_id, $user_name, $review_text, $rating);
    
    if ($stmt->execute()) {
        echo "Review created successfully.";
    } else {
        echo "Error creating review: " . $stmt->error;
    }
    
    $stmt->close();
}

function getReviews($product_id) {
    global $conn;
    
    // Prepare and execute query
    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    
    if ($stmt->execute()) {
        $reviews = array();
        
        $result = $stmt->get_result();
        
        while ($row = $result->fetch_assoc()) {
            $reviews[] = $row;
        }
        
        return $reviews;
    } else {
        echo "Error retrieving reviews: " . $stmt->error;
    }
    
    $stmt->close();
}

function calculateAverageRating($product_id) {
    global $conn;
    
    // Prepare and execute query
    $sql = "SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = ?";
    
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        
        $row = $result->fetch_assoc();
        
        return $row['average_rating'];
    } else {
        echo "Error calculating average rating: " . $stmt->error;
    }
    
    $stmt->close();
}

// Example usage
createUserReview(1, 'John Doe', 'Great product!', 5);
$reviews = getReviews(1);
foreach ($reviews as $review) {
    echo $review['user_name'] . ': ' . $review['review'];
}
echo 'Average rating: ' . calculateAverageRating(1);

?>


class Review {
    private $id;
    private $userId;
    private $productId;
    private $rating;
    private $review;

    public function __construct($id, $userId, $productId, $rating, $review) {
        $this->id = $id;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->review = $review;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}

class ReviewModel {
    private $reviews;

    public function __construct() {
        $this->reviews = array();
    }

    public function addReview($userId, $productId, $rating, $review) {
        $newReview = new Review(count($this->reviews), $userId, $productId, $rating, $review);
        array_push($this->reviews, $newReview);
        return $newReview;
    }

    public function getReviewsForProduct($id) {
        $productReviews = array();
        foreach ($this->reviews as $review) {
            if ($review->getProductId() == $id) {
                array_push($productReviews, $review);
            }
        }
        return $productReviews;
    }

    public function getReview($id) {
        foreach ($this->reviews as $review) {
            if ($review->getId() == $id) {
                return $review;
            }
        }
        return null;
    }

    public function deleteReview($id) {
        foreach ($this->reviews as $key => $review) {
            if ($review->getId() == $id) {
                unset($this->reviews[$key]);
                return true;
            }
        }
        return false;
    }
}

class ReviewController {
    private $model;

    public function __construct() {
        $this->model = new ReviewModel();
    }

    public function createReview($userId, $productId, $rating, $review) {
        return $this->model->addReview($userId, $productId, $rating, $review);
    }

    public function getReviewsForProduct($id) {
        return $this->model->getReviewsForProduct($id);
    }

    public function getReview($id) {
        return $this->model->getReview($id);
    }

    public function deleteReview($id) {
        return $this->model->deleteReview($id);
    }
}

class ReviewView {
    private $controller;

    public function __construct() {
        $this->controller = new ReviewController();
    }

    public function displayCreateForm() {
        echo '<form action="" method="post">';
        echo 'Username: <input type="text" name="username"><br>';
        echo 'Product ID: <input type="number" name="product_id"><br>';
        echo 'Rating (1-5): <input type="number" name="rating"><br>';
        echo 'Review: <textarea name="review"></textarea><br>';
        echo '<input type="submit" name="create_review">';
        echo '</form>';
    }

    public function displayReviews($reviews) {
        foreach ($reviews as $review) {
            echo 'Rating: ' . $review->getRating() . '/5<br>';
            echo 'Review: ' . $review->getReview() . '<br><br>';
        }
    }

    public function displayUpdateForm($id) {
        echo '<form action="" method="post">';
        echo 'ID: <input type="number" name="id" value="' . $id . '" disabled><br>';
        echo 'Username: <input type="text" name="username"><br>';
        echo 'Product ID: <input type="number" name="product_id"><br>';
        echo 'Rating (1-5): <input type="number" name="rating"><br>';
        echo 'Review: <textarea name="review"></textarea><br>';
        echo '<input type="submit" name="update_review">';
        echo '</form>';
    }
}

class ReviewAdminView {
    private $controller;

    public function __construct() {
        $this->controller = new ReviewController();
    }

    public function displayDeleteForm($id) {
        echo '<form action="" method="post">';
        echo 'ID: <input type="number" name="id" value="' . $id . '" disabled><br>';
        echo '<input type="submit" name="delete_review">';
        echo '</form>';
    }
}

// Usage
$view = new ReviewView();
$adminView = new ReviewAdminView();

// Create a new review
$view->displayCreateForm();
if (isset($_POST['create_review'])) {
    $userId = $_POST['username'];
    $productId = $_POST['product_id'];
    $rating = $_POST['rating'];
    $review = $_POST['review'];
    $reviewController = new ReviewController();
    $newReview = $reviewController->createReview($userId, $productId, $rating, $review);
    echo 'New review created: <br>';
    print_r($newReview);
}

// Display reviews for a product
$product_id = 1;
$reviews = $view->controller->getReviewsForProduct($product_id);
$view->displayReviews($reviews);

// Update an existing review
$existingReviewId = 1;
$view->displayUpdateForm($existingReviewId);
if (isset($_POST['update_review'])) {
    $reviewController = new ReviewController();
    $newReview = $reviewController->getReview($existingReviewId);
    if ($newReview) {
        $newReview->setRating($_POST['rating']);
        $newReview->setReview($_POST['review']);
        echo 'Review updated: <br>';
        print_r($newReview);
    } else {
        echo 'No review found with that ID.';
    }
}

// Delete a review
$existingReviewId = 1;
$adminView->displayDeleteForm($existingReviewId);
if (isset($_POST['delete_review'])) {
    $reviewController = new ReviewController();
    if ($reviewController->deleteReview($existingReviewId)) {
        echo 'Review deleted: <br>';
    } else {
        echo 'No review found with that ID.';
    }
}


<?php

// assume we have the following database table for reviews
// CREATE TABLE reviews (
//   id INT PRIMARY KEY AUTO_INCREMENT,
//   product_id INT,
//   user_id INT,
//   rating TINYINT,
//   comment TEXT,
//   created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
// );

class Review {
  private $id;
  private $product_id;
  private $user_id;
  private $rating;
  private $comment;

  public function __construct($data) {
    $this->id = $data['id'];
    $this->product_id = $data['product_id'];
    $this->user_id = $data['user_id'];
    $this->rating = $data['rating'];
    $this->comment = $data['comment'];
  }

  public function getId() { return $this->id; }
  public function getProductId() { return $this->product_id; }
  public function getUserId() { return $this->user_id; }
  public function getRating() { return $this->rating; }
  public function getComment() { return $this->comment; }

  // calculate average rating for a product
  public static function getAverageRating($productId) {
    global $db;
    $query = "SELECT AVG(rating) AS average FROM reviews WHERE product_id = :product_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':product_id', $productId, PDO::PARAM_INT);
    $stmt->execute();
    return $stmt->fetchColumn();
  }

  // create a new review
  public static function createReview($data) {
    global $db;
    $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
              VALUES (:product_id, :user_id, :rating, :comment)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':product_id', $data['product_id'], PDO::PARAM_INT);
    $stmt->bindParam(':user_id', $data['user_id'], PDO::PARAM_INT);
    $stmt->bindParam(':rating', $data['rating'], PDO::PARAM_INT);
    $stmt->bindParam(':comment', $data['comment'], PDO::PARAM_STR);
    return $stmt->execute();
  }

  // update an existing review
  public static function updateReview($reviewId, $data) {
    global $db;
    $query = "UPDATE reviews SET product_id = :product_id, user_id = :user_id,
                        rating = :rating, comment = :comment
              WHERE id = :id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':id', $reviewId, PDO::PARAM_INT);
    $stmt->bindParam(':product_id', $data['product_id'], PDO::PARAM_INT);
    $stmt->bindParam(':user_id', $data['user_id'], PDO::PARAM_INT);
    $stmt->bindParam(':rating', $data['rating'], PDO::PARAM_INT);
    $stmt->bindParam(':comment', $data['comment'], PDO::PARAM_STR);
    return $stmt->execute();
  }

  // delete a review
  public static function deleteReview($reviewId) {
    global $db;
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':id', $reviewId, PDO::PARAM_INT);
    return $stmt->execute();
  }
}

// assume we have a database connection object called $db

function getUserReviews($userId) {
  global $db;
  $query = "SELECT * FROM reviews WHERE user_id = :user_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':user_id', $userId, PDO::PARAM_INT);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
}

function getProductReviews($productId) {
  global $db;
  $query = "SELECT * FROM reviews WHERE product_id = :product_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':product_id', $productId, PDO::PARAM_INT);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
}

function displayReviews() {
  // get all reviews
  global $db;
  $query = "SELECT * FROM reviews";
  $stmt = $db->prepare($query);
  $stmt->execute();
  $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

  // loop through each review and echo its details
  foreach ($reviews as $review) {
    echo 'Product: ' . $review['product_id'] . '<br>';
    echo 'User: ' . $review['user_id'] . '<br>';
    echo 'Rating: ' . $review['rating'] . '/5<br>';
    echo 'Comment: ' . $review['comment'] . '<br><hr>';
  }
}

?>


CREATE TABLE users (
  id INT PRIMARY KEY,
  name VARCHAR(255),
  email VARCHAR(255)
);

CREATE TABLE reviews (
  id INT PRIMARY KEY,
  user_id INT,
  product_name VARCHAR(255),
  rating TINYINT(1),
  comment TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE products (
  id INT PRIMARY KEY,
  name VARCHAR(255)
);


// database connection settings
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'database';

// create a new PDO object to connect to the database
$pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_username, $db_password);

// function to get all reviews for a product
function get_reviews($product_id) {
  global $pdo;
  $stmt = $pdo->prepare("SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC");
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// function to get all products
function get_products() {
  global $pdo;
  $stmt = $pdo->query("SELECT * FROM products ORDER BY name ASC");
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// function to add a new review
function add_review($user_id, $product_name, $rating, $comment) {
  global $pdo;
  $stmt = $pdo->prepare("INSERT INTO reviews (user_id, product_name, rating, comment) VALUES (:user_id, :product_name, :rating, :comment)");
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':product_name', $product_name);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':comment', $comment);
  return $stmt->execute();
}

// function to display the review form
function display_review_form($product_id) {
  ?>
  <h1>Review <?php echo get_product_name_by_id($product_id); ?></h1>
  <form method="post" action="">
    <label for="rating">Rating:</label>
    <select id="rating" name="rating">
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
    </select>
    <label for="comment">Comment:</label>
    <textarea id="comment" name="comment"></textarea>
    <input type="submit" value="Submit Review">
  </form>
  <?php
}

// function to display a single review
function display_review($review) {
  ?>
  <h2><?php echo get_product_name_by_id($review['product_id']); ?></h2>
  <p>Rating: <?php echo $review['rating']; ?>/5</p>
  <p><?php echo nl2br($review['comment']); ?></p>
  <?php
}

// helper function to get product name by ID
function get_product_name_by_id($product_id) {
  global $pdo;
  $stmt = $pdo->query("SELECT name FROM products WHERE id = :id");
  $stmt->bindParam(':id', $product_id);
  return $stmt->fetchColumn();
}

// display the review form for a specific product
display_review_form(1);

// get all reviews for a specific product and display them
$reviews = get_reviews(1);
foreach ($reviews as $review) {
  display_review($review);
}


<?php

// Connect to database (replace with your own connection method)
$conn = new mysqli("localhost", "username", "password", "database");

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function addReview($data) {
    global $conn;
    
    // Insert review into database
    $sql = "INSERT INTO reviews (user_id, product_name, review_text, rating)
            VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("isss", $data['user_id'], $data['product_name'], $data['review_text'], $data['rating']);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function getReviews() {
    global $conn;
    
    // Retrieve reviews from database
    $sql = "SELECT * FROM reviews";
    $result = $conn->query($sql);
    $reviews = array();
    while ($row = $result->fetch_assoc()) {
        $reviews[] = array(
            'id' => $row['id'],
            'user_id' => $row['user_id'],
            'product_name' => $row['product_name'],
            'review_text' => $row['review_text'],
            'rating' => $row['rating']
        );
    }
    return $reviews;
}

function getUserReviews($userId) {
    global $conn;
    
    // Retrieve reviews from database for a specific user
    $sql = "SELECT * FROM reviews WHERE user_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $userId);
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        $reviews = array();
        while ($row = $result->fetch_assoc()) {
            $reviews[] = array(
                'id' => $row['id'],
                'product_name' => $row['product_name'],
                'review_text' => $row['review_text'],
                'rating' => $row['rating']
            );
        }
        return $reviews;
    } else {
        return false;
    }
}

function getAverageRating($userId) {
    global $conn;
    
    // Retrieve average rating for a specific user
    $sql = "SELECT AVG(rating) AS avg_rating FROM reviews WHERE user_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $userId);
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        $row = $result->fetch_assoc();
        return $row['avg_rating'];
    } else {
        return false;
    }
}

// Example usage:
$data = array(
    'user_id' => 1,
    'product_name' => 'Product X',
    'review_text' => 'This product is great!',
    'rating' => 5
);
addReview($data);

$reviews = getReviews();
print_r($reviews);

$userReviews = getUserReviews(1);
print_r($userReviews);

$averageRating = getAverageRating(1);
echo $averageRating;

?>


<?php

// Configuration
$dbHost = 'localhost';
$dbUsername = 'your_username';
$dbPassword = 'your_password';
$dbName = 'your_database_name';

try {
    $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUsername, $dbPassword);
} catch (PDOException $e) {
    die('Could not connect to the database: ' . $e->getMessage());
}

function createReview($data) {
    global $pdo;
    
    // Insert review into reviews table
    $stmt = $pdo->prepare('INSERT INTO reviews (user_id, product_id, rating, text) VALUES (:user_id, :product_id, :rating, :text)');
    $stmt->execute([
        'user_id' => $data['user_id'],
        'product_id' => $data['product_id'],
        'rating' => $data['rating'],
        'text' => $data['text']
    ]);
    
    // Get ID of newly created review
    return $pdo->lastInsertId();
}

function getReviews($productId) {
    global $pdo;
    
    // Select reviews for a given product
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    $stmt->execute(['product_id' => $productId]);
    
    return $stmt->fetchAll();
}

function getUserReviews($userId) {
    global $pdo;
    
    // Select reviews for a given user
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE user_id = :user_id');
    $stmt->execute(['user_id' => $userId]);
    
    return $stmt->fetchAll();
}

function deleteReview($reviewId) {
    global $pdo;
    
    // Delete review by ID
    $stmt = $pdo->prepare('DELETE FROM reviews WHERE id = :id');
    $stmt->execute(['id' => $reviewId]);
}

?>


$productId = 1;
$data = [
    'user_id' => 2,
    'product_id' => $productId,
    'rating' => 4,
    'text' => 'Great product!'
];

$reviewId = createReview($data);

// Get all reviews for a given product
$reviews = getReviews($productId);
print_r($reviews);

// Get all reviews for a given user
$userReviews = getUserReviews(2);
print_r($userReviews);

// Delete a review by ID
deleteReview(1);


class ReviewSystem {
  private $db;

  public function __construct() {
    // Initialize the database connection
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  /**
   * Get a list of all products with their corresponding reviews
   *
   * @return array
   */
  public function getReviews($productId = null) {
    if ($productId !== null) {
      // Retrieve reviews for a specific product
      $stmt = $this->db->prepare('SELECT r.id, u.username, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = ?');
      $stmt->execute([$productId]);
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } else {
      // Retrieve all reviews
      $stmt = $this->db->query('SELECT p.name, r.rating, r.review FROM products p JOIN reviews r ON p.id = r.product_id');
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
  }

  /**
   * Create a new review for a product
   *
   * @param int $productId
   * @param int $rating
   * @param string $review
   * @return bool
   */
  public function createReview($productId, $rating, $review) {
    // Validate user input
    if ($rating < 1 || $rating > 5) {
      throw new Exception('Invalid rating');
    }

    // Insert review into database
    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)');
    return $stmt->execute([$productId, $productId, $rating, $review]);
  }
}


$reviewSystem = new ReviewSystem();

// Get a list of all products with their reviews
$reviews = $reviewSystem->getReviews();
print_r($reviews);

// Create a new review for a product
$productId = 1;
$rating = 5;
$review = 'Great product!';
if ($reviewSystem->createReview($productId, $rating, $review)) {
    echo 'Review created successfully!';
} else {
    echo 'Error creating review';
}


class ProductReview {
    private $reviews = [];

    public function addReview($product_id, $user_id, $review) {
        // Validate input data
        if (!is_int($product_id) || !is_int($user_id)) {
            throw new InvalidArgumentException('Invalid product or user ID');
        }
        if (!is_string($review)) {
            throw new InvalidArgumentException('Invalid review content');
        }

        // Check if review already exists for this product and user
        foreach ($this->reviews[$product_id] ?? [] as &$existingReview) {
            if ($existingReview['user_id'] === $user_id) {
                return; // Review already exists, do not add duplicate
            }
        }

        // Add new review to the array
        $this->reviews[$product_id][] = [
            'user_id' => $user_id,
            'review' => $review,
        ];
    }

    public function getReviews($product_id) {
        return $this->reviews[$product_id] ?? [];
    }
}

// Example usage:
$reviewManager = new ProductReview();

// Add some reviews
$reviewManager->addReview(1, 1, 'Great product!');
$reviewManager->addReview(1, 2, 'Not impressed...');
$reviewManager->addReview(2, 3, 'Love this product!');

// Get all reviews for a specific product
$productReviews = $reviewManager->getReviews(1);
print_r($productReviews); // Output: Array ([0] => Array ( [user_id] => 1 [review] => Great product! ) [1] => Array ( [user_id] => 2 [review] => Not impressed... ))


// Configuration
$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'reviews';

// Connect to the database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function createUserReview($data) {
  global $conn;
  
  // Sanitize input data
  $username = trim($data['username']);
  $email = trim($data['email']);
  $productId = (int)$data['product_id'];
  $rating = (int)$data['rating'];
  $comment = trim($data['comment']);

  // Insert new review into the database
  $sql = "INSERT INTO reviews (user_id, product_id, rating, comment) 
          VALUES (NULL, ?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("iis", $productId, $rating, $comment);

  if ($stmt->execute()) {
    // Get the last inserted review ID
    $reviewId = $conn->insert_id;

    // Update product rating and count
    $sql = "UPDATE products SET 
            rating = (SELECT AVG(rating) FROM reviews WHERE product_id = ?), 
            review_count = (SELECT COUNT(*) FROM reviews WHERE product_id = ?)
            WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iis", $productId, $productId, $productId);

    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error updating product rating and count: " . $stmt->error;
      return false;
    }
  } else {
    echo "Error inserting review: " . $stmt->error;
    return false;
  }

  // Close the prepared statement
  $stmt->close();
}

function getUserReviews($userId) {
  global $conn;

  // Select all reviews for the given user ID
  $sql = "SELECT * FROM reviews WHERE user_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $userId);

  if ($stmt->execute()) {
    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  } else {
    echo "Error retrieving reviews: " . $stmt->error;
    return false;
  }

  // Close the prepared statement
  $stmt->close();
}

function getProductReviews($productId) {
  global $conn;

  // Select all reviews for the given product ID
  $sql = "SELECT * FROM reviews WHERE product_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $productId);

  if ($stmt->execute()) {
    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  } else {
    echo "Error retrieving reviews: " . $stmt->error;
    return false;
  }

  // Close the prepared statement
  $stmt->close();
}


// Create a new user review
$data = array(
  'username' => 'JohnDoe',
  'email' => 'johndoe@example.com',
  'product_id' => 1,
  'rating' => 5,
  'comment' => 'Great product!'
);
createUserReview($data);

// Get all reviews for a user
$userId = 1;
$userReviews = getUserReviews($userId);
print_r($userReviews);

// Get all reviews for a product
$productId = 1;
$productReviews = getProductReviews($productId);
print_r($productReviews);


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  /**
   * Add a new review to the database
   *
   * @param int $user_id
   * @param int $product_id
   * @param float $rating
   * @param string $review
   */
  public function addReview($user_id, $product_id, $rating, $review) {
    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    $stmt->execute();
  }

  /**
   * Get all reviews for a specific product
   *
   * @param int $product_id
   * @return array
   */
  public function getReviews($product_id) {
    $stmt = $this->db->prepare('SELECT r.id, u.name, p.name AS product_name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id WHERE r.product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Get all reviews for a specific user
   *
   * @param int $user_id
   * @return array
   */
  public function getUserReviews($user_id) {
    $stmt = $this->db->prepare('SELECT r.id, p.name AS product_name, r.rating, r.review FROM reviews r JOIN products p ON r.product_id = p.id WHERE r.user_id = :user_id');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Filter reviews by rating
   *
   * @param int $product_id
   * @param float $min_rating
   * @param float $max_rating
   * @return array
   */
  public function filterReviews($product_id, $min_rating = null, $max_rating = null) {
    $stmt = $this->db->prepare('SELECT r.id, u.name, p.name AS product_name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id WHERE r.product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);
    if ($min_rating !== null) {
      $stmt->andWhere('r.rating >= :min_rating');
      $stmt->bindParam(':min_rating', $min_rating);
    }
    if ($max_rating !== null) {
      $stmt->andWhere('r.rating <= :max_rating');
      $stmt->bindParam(':max_rating', $max_rating);
    }
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }
}


$review = new Review();

// Add a new review
$user_id = 1;
$product_id = 1;
$rating = 4.5;
$review_text = 'Great product!';
$review->addReview($user_id, $product_id, $rating, $review_text);

// Get all reviews for a specific product
$product_id = 1;
$reviews = $review->getReviews($product_id);
print_r($reviews);

// Get all reviews for a specific user
$user_id = 1;
$reviews = $review->getUserReviews($user_id);
print_r($reviews);

// Filter reviews by rating
$product_id = 1;
$min_rating = 4.0;
$max_rating = null;
$reviews = $review->filterReviews($product_id, $min_rating, $max_rating);
print_r($reviews);


// Define the database connection settings
$host = 'your_host';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
    // Establish a new connection
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    // Handle the exception if there's an error connecting to the database
    echo "Error: " . $e->getMessage();
}


// Function to add a review
function add_review($pdo, $product_id, $user_id, $rating, $comment) {
    try {
        // Prepare and execute the SQL query
        $stmt = $pdo->prepare("INSERT INTO reviews (product_id, user_id, rating, comment)
                                VALUES (:product_id, :user_id, :rating, :comment)");
        
        // Bind the parameters to prevent SQL injection attacks
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the query and get the last inserted ID (review_id)
        $review_id = $pdo->lastInsertId();
        
        return $review_id;
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false; // Return false if there's an error
    }
}

// Function to read a review by its ID
function get_review($pdo, $review_id) {
    try {
        // Prepare and execute the SQL query
        $stmt = $pdo->prepare("SELECT * FROM reviews WHERE review_id = :review_id");
        
        // Bind the parameter to prevent SQL injection attacks
        $stmt->bindParam(':review_id', $review_id);

        // Execute the query and fetch the result
        $stmt->execute();
        return $stmt->fetch(); // Fetch the first (and hopefully only) row
        
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false; // Return false if there's an error
    }
}

// Function to update a review
function update_review($pdo, $review_id, $rating, $comment) {
    try {
        // Prepare and execute the SQL query
        $stmt = $pdo->prepare("UPDATE reviews SET rating = :rating, comment = :comment WHERE review_id = :review_id");
        
        // Bind the parameters to prevent SQL injection attacks
        $stmt->bindParam(':review_id', $review_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);

        // Execute the query and get the number of rows affected
        $rows_affected = $stmt->execute();
        
        return $rows_affected;
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false; // Return false if there's an error
    }
}

// Function to delete a review by its ID
function delete_review($pdo, $review_id) {
    try {
        // Prepare and execute the SQL query
        $stmt = $pdo->prepare("DELETE FROM reviews WHERE review_id = :review_id");
        
        // Bind the parameter to prevent SQL injection attacks
        $stmt->bindParam(':review_id', $review_id);

        // Execute the query and get the number of rows affected
        $rows_affected = $stmt->execute();
        
        return $rows_affected;
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false; // Return false if there's an error
    }
}


// Add a review for product 1 by user 2 with rating 5 and comment 'Great product!'
$review_id = add_review($pdo, 1, 2, 5, 'Great product!');

// Read the review just added
$review = get_review($pdo, $review_id);

// Update the review's rating to 4 and its comment to 'Good product'
$rows_affected = update_review($pdo, $review_id, 4, 'Good product');

// Delete the review with ID 1
$rows_affected = delete_review($pdo, 1);


class Review {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
    }

    // Add a new review
    public function addReview($product_id, $user_name, $review, $rating) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_name, review, rating) VALUES (?, ?, ?, ?)");
            $stmt->execute([$product_id, $user_name, $review, $rating]);
            return true;
        } catch (PDOException $e) {
            echo "Error adding review: " . $e->getMessage();
            return false;
        }
    }

    // List all reviews for a product
    public function listReviews($product_id) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
            $stmt->execute([$product_id]);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo "Error listing reviews: " . $e->getMessage();
            return array();
        }
    }

    // Edit an existing review
    public function editReview($review_id, $new_review = null, $new_rating = null) {
        try {
            if ($new_review !== null) {
                $stmt = $this->db->prepare("UPDATE reviews SET review = ? WHERE id = ?");
                $stmt->execute([$new_review, $review_id]);
            }
            if ($new_rating !== null) {
                $stmt = $this->db->prepare("UPDATE reviews SET rating = ? WHERE id = ?");
                $stmt->execute([$new_rating, $review_id]);
            }
            return true;
        } catch (PDOException $e) {
            echo "Error editing review: " . $e->getMessage();
            return false;
        }
    }

    // Delete a review
    public function deleteReview($review_id) {
        try {
            $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
            $stmt->execute([$review_id]);
            return true;
        } catch (PDOException $e) {
            echo "Error deleting review: " . $e->getMessage();
            return false;
        }
    }
}


$review = new Review();

// Add a new review
$product_id = 1;
$user_name = 'John Doe';
$review_text = 'This product is great!';
$rating = 5;
if ($review->addReview($product_id, $user_name, $review_text, $rating)) {
    echo "Review added successfully!";
} else {
    echo "Error adding review.";
}

// List all reviews for a product
$product_id = 1;
$reviews = $review->listReviews($product_id);
echo "Reviews for product $product_id:
";
foreach ($reviews as $review) {
    echo "$review[user_name]: $review[review] (Rating: $review[rating])
";
}

// Edit an existing review
$review_id = 1;
$new_review_text = 'This product is amazing!';
$new_rating = 6;
if ($review->editReview($review_id, $new_review_text, $new_rating)) {
    echo "Review edited successfully!";
} else {
    echo "Error editing review.";
}

// Delete a review
$review_id = 1;
if ($review->deleteReview($review_id)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}


// Review class
class Review {
  private $db;

  function __construct() {
    // Connect to database
    $this->db = new mysqli('localhost', 'username', 'password', 'database');
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }
  }

  // Get reviews for a product
  function getReviews($productId) {
    $query = "SELECT r.id, u.name, p.name AS productName, r.rating, r.review FROM reviews r JOIN users u ON r.user_id=u.id JOIN products p ON r.product_id=p.id WHERE r.product_id=?";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param('i', $productId);
    $stmt->execute();
    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  }

  // Add a review
  function addReview($userId, $productId, $rating, $review) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param('iiss', $userId, $productId, $rating, $review);
    if ($stmt->execute()) {
      return true;
    } else {
      return false;
    }
  }

  // Get user reviews
  function getUserReviews($userId) {
    $query = "SELECT r.id, p.name AS productName, r.rating, r.review FROM reviews r JOIN products p ON r.product_id=p.id WHERE r.user_id=?";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param('i', $userId);
    $stmt->execute();
    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  }
}

// Example usage
$review = new Review();

// Get reviews for a product
$product_id = 1;
$reviews = $review->getReviews($product_id);
foreach ($reviews as $review) {
  echo "Review by " . $review['name'] . ": ";
  echo "Rating: " . $review['rating'];
  echo ", Review: " . $review['review'];
  echo "<br>";
}

// Add a review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review_text = "Great product!";
if ($review->addReview($user_id, $product_id, $rating, $review_text)) {
  echo "Review added successfully.";
} else {
  echo "Error adding review.";
}

// Get user reviews
$user_id = 1;
$reviews = $review->getUserReviews($user_id);
foreach ($reviews as $review) {
  echo "Review of " . $review['productName'] . ": ";
  echo "Rating: " . $review['rating'];
  echo ", Review: " . $review['review'];
  echo "<br>";
}


<?php

// Connect to database
$conn = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

// Function to display all reviews for a product
function get_reviews($product_id) {
  global $conn;
  $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = :id");
  $stmt->bindParam(':id', $product_id);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to display a single review
function get_review($review_id) {
  global $conn;
  $stmt = $conn->prepare("SELECT * FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $review_id);
  $stmt->execute();
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

// Function to create a new review
function create_review($product_id, $user_id, $review, $rating) {
  global $conn;
  $stmt = $conn->prepare("INSERT INTO reviews (product_id, user_id, review, rating)
                          VALUES (:product_id, :user_id, :review, :rating)");
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':review', $review);
  $stmt->bindParam(':rating', $rating);
  return $stmt->execute();
}

// Function to update a review
function update_review($review_id, $new_review) {
  global $conn;
  $stmt = $conn->prepare("UPDATE reviews SET review = :review WHERE id = :id");
  $stmt->bindParam(':id', $review_id);
  $stmt->bindParam(':review', $new_review);
  return $stmt->execute();
}

// Function to delete a review
function delete_review($review_id) {
  global $conn;
  $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $review_id);
  return $stmt->execute();
}

?>


$product_id = 1;
$reviews = get_reviews($product_id);
foreach ($reviews as $review) {
  echo "Review by " . $review['user_id'] . ": " . $review['review'];
}


$product_id = 1;
$user_id = 2;
$review_text = "This product is great!";
$rating = 5;
create_review($product_id, $user_id, $review_text, $rating);


$review_id = 1;
$new_review_text = "I changed my mind about this product!";
update_review($review_id, $new_review_text);


$review_id = 1;
delete_review($review_id);


// Review class
class Review {
    private $db;

    function __construct($db) {
        $this->db = $db;
    }

    // Create a new review
    public function createReview($userId, $productId, $rating, $reviewText) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text)
                                        VALUES (:user_id, :product_id, :rating, :review_text)");
            $stmt->bindParam(":user_id", $userId);
            $stmt->bindParam(":product_id", $productId);
            $stmt->bindParam(":rating", $rating);
            $stmt->bindParam(":review_text", $reviewText);
            return $stmt->execute();
        } catch (PDOException $e) {
            // Handle database errors
            echo "Error creating review: " . $e->getMessage();
            return false;
        }
    }

    // Get all reviews for a product
    public function getReviewsForProduct($productId) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
            $stmt->bindParam(":product_id", $productId);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            // Handle database errors
            echo "Error getting reviews: " . $e->getMessage();
            return array();
        }
    }

    // Get a single review by ID
    public function getReviewById($reviewId) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :id");
            $stmt->bindParam(":id", $reviewId);
            $stmt->execute();
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            // Handle database errors
            echo "Error getting review: " . $e->getMessage();
            return array();
        }
    }

    // Update an existing review
    public function updateReview($reviewId, $rating, $reviewText) {
        try {
            $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, review_text = :review_text WHERE id = :id");
            $stmt->bindParam(":rating", $rating);
            $stmt->bindParam(":review_text", $reviewText);
            $stmt->bindParam(":id", $reviewId);
            return $stmt->execute();
        } catch (PDOException $e) {
            // Handle database errors
            echo "Error updating review: " . $e->getMessage();
            return false;
        }
    }

    // Delete a review by ID
    public function deleteReview($reviewId) {
        try {
            $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :id");
            $stmt->bindParam(":id", $reviewId);
            return $stmt->execute();
        } catch (PDOException $e) {
            // Handle database errors
            echo "Error deleting review: " . $e->getMessage();
            return false;
        }
    }
}


// Create a new database connection
$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');

// Create a new Review instance
$review = new Review($db);

// Create a new review
$userId = 1;
$productId = 5;
$rating = 4;
$reviewText = "Great product!";
if ($review->createReview($userId, $productId, $rating, $reviewText)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

// Get all reviews for a product
$productReviews = $review->getReviewsForProduct($productId);
print_r($productReviews);

// Update an existing review
$reviewId = 1;
$updatedRating = 5;
$updatedText = "Even better!";
if ($review->updateReview($reviewId, $updatedRating, $updatedText)) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review.";
}

// Delete a review by ID
if ($review->deleteReview($reviewId)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}


// Review class
class Review {
  private $id;
  private $userId;
  private $productName;
  private $reviewText;
  private $rating;

  public function __construct($data) {
    $this->id = isset($data['id']) ? $data['id'] : null;
    $this->userId = isset($data['user_id']) ? $data['user_id'] : null;
    $this->productName = isset($data['product_name']) ? $data['product_name'] : null;
    $this->reviewText = isset($data['review_text']) ? $data['review_text'] : null;
    $this->rating = isset($data['rating']) ? $data['rating'] : null;
  }

  public function getId() {
    return $this->id;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getProductName() {
    return $this->productName;
  }

  public function getReviewText() {
    return $this->reviewText;
  }

  public function getRating() {
    return $this->rating;
  }
}

// Review Manager class
class ReviewManager {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function addReview(Review $review) {
    // Insert review into database
    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_name, review_text, rating) VALUES (:user_id, :product_name, :review_text, :rating)');
    $stmt->execute([
      ':user_id' => $review->getUserId(),
      ':product_name' => $review->getProductName(),
      ':review_text' => $review->getReviewText(),
      ':rating' => $review->getRating()
    ]);
  }

  public function getReviews() {
    // Retrieve all reviews from database
    $stmt = $this->db->prepare('SELECT * FROM reviews');
    $reviews = array();
    while ($row = $stmt->fetch()) {
      $review = new Review($row);
      $reviews[] = $review;
    }
    return $reviews;
  }

  public function getReviewById($id) {
    // Retrieve review by ID from database
    $stmt = $this->db->prepare('SELECT * FROM reviews WHERE id = :id');
    $stmt->execute([':id' => $id]);
    $review = new Review($stmt->fetch());
    return $review;
  }

  public function updateReview(Review $review) {
    // Update review in database
    $stmt = $this->db->prepare('UPDATE reviews SET user_id = :user_id, product_name = :product_name, review_text = :review_text, rating = :rating WHERE id = :id');
    $stmt->execute([
      ':user_id' => $review->getUserId(),
      ':product_name' => $review->getProductName(),
      ':review_text' => $review->getReviewText(),
      ':rating' => $review->getRating(),
      ':id' => $review->getId()
    ]);
  }

  public function deleteReview($id) {
    // Delete review from database
    $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :id');
    $stmt->execute([':id' => $id]);
  }
}

// Example usage:
$db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');

$reviewManager = new ReviewManager($db);

$userReview = new Review([
  'user_id' => 1,
  'product_name' => 'Product A',
  'review_text' => 'This is a great product!',
  'rating' => 5
]);

$reviewManager->addReview($userReview);

$reviews = $reviewManager->getReviews();
foreach ($reviews as $review) {
  echo "User ID: {$review->getUserId()}
";
  echo "Product Name: {$review->getProductName()}
";
  echo "Review Text: {$review->getReviewText()}
";
  echo "Rating: {$review->getRating()}

";
}


<?php

// Include database connection
include 'db.php';

// Function to get all reviews for a product
function getReviews($product_id) {
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = mysqli_query($GLOBALS['conn'], $query);
    return mysqli_fetch_all($result, MYSQLI_ASSOC);
}

// Function to add a new review
function addReview($data) {
    $query = "INSERT INTO reviews (product_id, user_name, review, rating)
              VALUES ('$data[product_id]', '$data[user_name]', '$data[review]', '$data[rating]')";
    if (mysqli_query($GLOBALS['conn'], $query)) {
        return true;
    } else {
        return false;
    }
}

// Function to update a review
function updateReview($id, $data) {
    $query = "UPDATE reviews SET product_id = '$data[product_id]', user_name = '$data[user_name]', review = '$data[review]', rating = '$data[rating]'
              WHERE id = '$id'";
    if (mysqli_query($GLOBALS['conn'], $query)) {
        return true;
    } else {
        return false;
    }
}

// Function to delete a review
function deleteReview($id) {
    $query = "DELETE FROM reviews WHERE id = '$id'";
    if (mysqli_query($GLOBALS['conn'], $query)) {
        return true;
    } else {
        return false;
    }
}

?>


<?php

// Include database connection and user review function
include 'db.php';
include 'user_review.php';

// Get all reviews for product with id 1
$data = getReviews(1);

// Add new review
$data_to_add = array(
    "product_id" => 1,
    "user_name" => "John Doe",
    "review" => "This is a great product!",
    "rating" => 5
);
if (addReview($data_to_add)) {
    echo "Review added successfully!";
} else {
    echo "Failed to add review.";
}

// Update existing review
$data_to_update = array(
    "product_id" => 1,
    "user_name" => "Jane Doe",
    "review" => "This is an okay product.",
    "rating" => 3
);
if (updateReview(1, $data_to_update)) {
    echo "Review updated successfully!";
} else {
    echo "Failed to update review.";
}

// Delete existing review
deleteReview(2);

?>


// Configuration
require_once 'config.php';

// Database Connection
$db = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($db->connect_errno) {
    echo "Failed to connect to MySQL: " . $db->connect_error;
    exit();
}

// Review Class
class Review {
  private $id;
  private $product_id;
  private $user_id;
  private $rating;
  private $review;

  public function __construct($product_id, $user_id, $rating, $review) {
    $this->product_id = $product_id;
    $this->user_id = $user_id;
    $this->rating = $rating;
    $this->review = $review;
  }

  // Getters and Setters
  public function getId() { return $this->id; }
  public function getProductId() { return $this->product_id; }
  public function getUserId() { return $this->user_id; }
  public function getRating() { return $this->rating; }
  public function getReview() { return $this->review; }

  // Insert Review
  public static function insert($product_id, $user_id, $rating, $review) {
    global $db;
    $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $db->prepare($query);
    $stmt->bind_param("iiss", $product_id, $user_id, $rating, $review);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error inserting review: " . $stmt->error;
      return false;
    }
  }

  // Approve Review
  public static function approve($id) {
    global $db;
    $query = "UPDATE reviews SET approved = TRUE WHERE id = ?";
    $stmt = $db->prepare($query);
    $stmt->bind_param("i", $id);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error approving review: " . $stmt->error;
      return false;
    }
  }

  // Get Reviews for Product
  public static function getReviews($product_id) {
    global $db;
    $query = "SELECT * FROM reviews WHERE product_id = ? AND approved = TRUE";
    $stmt = $db->prepare($query);
    $stmt->bind_param("i", $product_id);
    if ($stmt->execute()) {
      return $stmt->get_result();
    } else {
      echo "Error getting reviews: " . $stmt->error;
      return null;
    }
  }
}


// Submit Review
$review = new Review(1, 1, 5, "Great product!");
if (Review::insert($review->getProductId(), $review->getUserId(), $review->getRating(), $review->getReview())) {
    echo "Review submitted successfully!";
} else {
    echo "Error submitting review.";
}

// Approve Review
if (Review::approve(1)) {
    echo "Review approved successfully!";
} else {
    echo "Error approving review.";
}

// Get Reviews for Product
$reviews = Review::getReviews(1);
if ($reviews) {
    while ($row = $reviews->fetch_assoc()) {
        echo $row['review'] . "
";
    }
} else {
    echo "No reviews found.";
}


// db.php (database connection file)
$conn = new mysqli($servername, $username, $password, $dbname);

function add_review($product_id, $review_text, $user_id) {
  global $conn;
  
  // Check if review already exists for product
  $query = "SELECT * FROM reviews WHERE product_id = '$product_id' AND user_id = '$user_id'";
  $result = mysqli_query($conn, $query);
  if (mysqli_num_rows($result) > 0) {
    return false; // Review already exists
  }
  
  // Insert new review into database
  $query = "INSERT INTO reviews (product_id, review_text, user_id) VALUES ('$product_id', '$review_text', '$user_id')";
  mysqli_query($conn, $query);
  return true;
}

function get_reviews($product_id) {
  global $conn;
  
  // Retrieve all reviews for product from database
  $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
  $result = mysqli_query($conn, $query);
  return $result;
}

function edit_review($review_id, $new_review_text) {
  global $conn;
  
  // Update review in database
  $query = "UPDATE reviews SET review_text = '$new_review_text' WHERE id = '$review_id'";
  mysqli_query($conn, $query);
}

function delete_review($review_id) {
  global $conn;
  
  // Delete review from database
  $query = "DELETE FROM reviews WHERE id = '$review_id'";
  mysqli_query($conn, $query);
}


// Add a new review for product with ID 1
if (add_review(1, 'Great product!', 1)) {
  echo 'Review added successfully!';
} else {
  echo 'Error adding review.';
}

// Get all reviews for product with ID 2
$result = get_reviews(2);
while ($review = mysqli_fetch_assoc($result)) {
  echo $review['review_text'] . '<br>';
}

// Edit a review with ID 1
edit_review(1, 'Even better than before!');

// Delete a review with ID 3
delete_review(3);


// Review class
class Review {
  public $id;
  public $rating;
  public $review_text;
  public $username;

  function __construct($id, $rating, $review_text, $username) {
    $this->id = $id;
    $this->rating = $rating;
    $this->review_text = $review_text;
    $this->username = $username;
  }
}

// Review model
class ReviewModel extends Model {
  function get_reviews($product_id) {
    // Retrieve reviews from database (e.g. using PDO or MySQLi)
    $reviews = array();
    foreach ($rows as $row) {
      $review = new Review(
        $row['id'],
        $row['rating'],
        $row['review_text'],
        $row['username']
      );
      $reviews[] = $review;
    }
    return $reviews;
  }

  function add_review($product_id, $rating, $review_text) {
    // Insert review into database (e.g. using PDO or MySQLi)
    // ...
  }

  function update_review($id, $new_rating, $new_review_text) {
    // Update review in database (e.g. using PDO or MySQLi)
    // ...
  }

  function delete_review($id) {
    // Delete review from database (e.g. using PDO or MySQLi)
    // ...
  }
}


// User review controller
class ReviewController extends Controller {
  public function index() {
    $product_id = $_GET['product_id'];
    $reviews = $this->review_model->get_reviews($product_id);
    return view('review_list', compact('reviews'));
  }

  public function create() {
    $product_id = $_POST['product_id'];
    $rating = $_POST['rating'];
    $review_text = $_POST['review_text'];
    $this->review_model->add_review($product_id, $rating, $review_text);
    return redirect()->to('/products/' . $product_id);
  }

  public function edit() {
    $id = $_GET['id'];
    $new_rating = $_POST['rating'];
    $new_review_text = $_POST['review_text'];
    $this->review_model->update_review($id, $new_rating, $new_review_text);
    return redirect()->to('/reviews');
  }

  public function delete() {
    $id = $_GET['id'];
    $this->review_model->delete_review($id);
    return redirect()->to('/products/' . $_POST['product_id']);
  }
}


$reviews = $this->review_model->get_reviews($product_id);


$this->review_model->add_review($product_id, $rating, $review_text);


$this->review_model->update_review($id, $new_rating, $new_review_text);


$this->review_model->delete_review($id);


<?php

// Review class
class Review {
    public $id;
    public $name;
    public $rating;
    public $comment;

    function __construct($id, $name, $rating, $comment) {
        $this->id = $id;
        $this->name = $name;
        $this->rating = $rating;
        $this->comment = $comment;
    }
}

// Review model
class ReviewModel {
    private $db;

    function __construct() {
        // Connect to the database
        $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
        $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    }

    // Function to get all reviews
    function getAllReviews() {
        $query = "SELECT * FROM reviews";
        $stmt = $this->db->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
    }

    // Function to add a new review
    function addReview($review) {
        $query = "INSERT INTO reviews (name, rating, comment) VALUES (:name, :rating, :comment)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':name', $review->name);
        $stmt->bindParam(':rating', $review->rating);
        $stmt->bindParam(':comment', $review->comment);
        $stmt->execute();
    }

    // Function to delete a review by ID
    function deleteReview($id) {
        $query = "DELETE FROM reviews WHERE id=:id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':id', $id);
        $stmt->execute();
    }
}

// Review controller
class ReviewController {
    private $reviewModel;

    function __construct() {
        $this->reviewModel = new ReviewModel();
    }

    // Function to display all reviews
    function displayReviews() {
        $reviews = $this->reviewModel->getAllReviews();
        foreach ($reviews as $review) {
            echo "<h2>" . $review->name . "'s review:</h2>";
            echo "<p>Rating: " . $review->rating . "/5</p>";
            echo "<p>Comment: " . $review->comment . "</p>";
        }
    }

    // Function to add a new review
    function addReview() {
        if ($_SERVER['REQUEST_METHOD'] == 'POST') {
            $name = $_POST['name'];
            $rating = $_POST['rating'];
            $comment = $_POST['comment'];

            $review = new Review(0, $name, $rating, $comment);
            $this->reviewModel->addReview($review);

            header('Location: index.php');
        }
    }

    // Function to delete a review
    function deleteReview() {
        if ($_SERVER['REQUEST_METHOD'] == 'POST') {
            $id = $_POST['id'];
            $this->reviewModel->deleteReview($id);

            header('Location: index.php');
        }
    }
}

// Main function to handle user reviews
function displayUserReviews() {
    $controller = new ReviewController();
    if (isset($_GET['action'])) {
        switch ($_GET['action']) {
            case 'display':
                $controller->displayReviews();
                break;
            case 'add':
                $controller->addReview();
                break;
            case 'delete':
                $controller->deleteReview();
                break;
        }
    } else {
        echo "You must specify an action to perform.";
    }
}

// Call the main function
displayUserReviews();

?>


<?php

class ReviewController {
    public function addReview($product_id, $rating, $comment) {
        try {
            // Connect to database
            $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
            
            // Insert review into database
            $stmt = $db->prepare("INSERT INTO reviews (product_id, rating, comment) VALUES (:product_id, :rating, :comment)");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);
            $stmt->execute();
            
            // Get the ID of the newly inserted review
            $review_id = $db->lastInsertId();
            
            // Return a success message and the review ID
            return array('message' => 'Review added successfully', 'id' => $review_id);
        } catch (PDOException $e) {
            // Handle database error
            return array('error' => 'Database error: ' . $e->getMessage());
        }
    }

    public function getReviews($product_id) {
        try {
            // Connect to database
            $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
            
            // Get reviews for the specified product
            $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->execute();
            
            // Fetch and return the reviews as an array
            $reviews = array();
            while ($row = $stmt->fetch()) {
                $reviews[] = array(
                    'id' => $row['id'],
                    'rating' => $row['rating'],
                    'comment' => $row['comment']
                );
            }
            
            return $reviews;
        } catch (PDOException $e) {
            // Handle database error
            return array('error' => 'Database error: ' . $e->getMessage());
        }
    }

    public function getReview($review_id) {
        try {
            // Connect to database
            $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
            
            // Get the review with the specified ID
            $stmt = $db->prepare("SELECT * FROM reviews WHERE id = :id");
            $stmt->bindParam(':id', $review_id);
            $stmt->execute();
            
            // Fetch and return the review as an array
            $row = $stmt->fetch();
            return array(
                'id' => $row['id'],
                'rating' => $row['rating'],
                'comment' => $row['comment']
            );
        } catch (PDOException $e) {
            // Handle database error
            return array('error' => 'Database error: ' . $e->getMessage());
        }
    }

    public function deleteReview($review_id) {
        try {
            // Connect to database
            $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
            
            // Delete the review with the specified ID
            $stmt = $db->prepare("DELETE FROM reviews WHERE id = :id");
            $stmt->bindParam(':id', $review_id);
            $stmt->execute();
            
            return array('message' => 'Review deleted successfully');
        } catch (PDOException $e) {
            // Handle database error
            return array('error' => 'Database error: ' . $e->getMessage());
        }
    }

}

?>


<?php

// Create an instance of the ReviewController class
$review_controller = new ReviewController();

// Add a review for a product with ID 1
$product_id = 1;
$rating = 5.0;
$comment = 'This is a great product!';
$result = $review_controller->addReview($product_id, $rating, $comment);
echo json_encode($result);

// Get reviews for a product with ID 1
$product_id = 1;
$reviews = $review_controller->getReviews($product_id);
echo json_encode($reviews);

// Get a review with ID 1
$review_id = 1;
$result = $review_controller->getReview($review_id);
echo json_encode($result);

// Delete a review with ID 1
$review_id = 1;
$result = $review_controller->deleteReview($review_id);
echo json_encode($result);

?>


class ReviewSystem {
  private $db;

  public function __construct() {
    // Connect to database
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  /**
   * Add a review for a product
   *
   * @param int $user_id
   * @param string $product_name
   * @param string $review
   * @param int $rating
   */
  public function addReview($user_id, $product_name, $review, $rating) {
    // Insert review into database
    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_name, review, rating) VALUES (:user_id, :product_name, :review, :rating)');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':rating', $rating);
    $stmt->execute();
  }

  /**
   * Get all reviews for a product
   *
   * @param string $product_name
   */
  public function getReviews($product_name) {
    // Retrieve reviews from database
    $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_name = :product_name');
    $stmt->bindParam(':product_name', $product_name);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Get all reviews for a user
   *
   * @param int $user_id
   */
  public function getUserReviews($user_id) {
    // Retrieve reviews from database
    $stmt = $this->db->prepare('SELECT * FROM reviews WHERE user_id = :user_id');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Get average rating for a product
   *
   * @param string $product_name
   */
  public function getAverageRating($product_name) {
    // Retrieve reviews from database
    $stmt = $this->db->prepare('SELECT AVG(rating) as average_rating FROM reviews WHERE product_name = :product_name');
    $stmt->bindParam(':product_name', $product_name);
    $stmt->execute();
    return $stmt->fetchColumn();
  }
}


$reviewSystem = new ReviewSystem();


$user_id = 1;
$product_name = 'Example Product';
$review = 'This is a great product!';
$rating = 5;

$reviewSystem->addReview($user_id, $product_name, $review, $rating);


$product_name = 'Example Product';
$reviews = $reviewSystem->getReviews($product_name);

print_r($reviews);


$product_name = 'Example Product';
$average_rating = $reviewSystem->getAverageRating($product_name);

echo 'Average Rating: ' . $average_rating;


class ReviewSystem {
  private $db;

  function __construct() {
    // Establish database connection
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  }

  // Function to add a review
  function addReview($userId, $productName, $reviewText, $rating) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_name, review_text, rating) VALUES (:user_id, :product_name, :review_text, :rating)");
      $stmt->bindParam(':user_id', $userId);
      $stmt->bindParam(':product_name', $productName);
      $stmt->bindParam(':review_text', $reviewText);
      $stmt->bindParam(':rating', $rating);
      $stmt->execute();
    } catch (PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
    }
  }

  // Function to get all reviews
  function getAllReviews() {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews");
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
    }
  }

  // Function to get a single review by ID
  function getReviewById($id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :id");
      $stmt->bindParam(':id', $id);
      $stmt->execute();
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error getting review by ID: " . $e->getMessage();
    }
  }

  // Function to update a review
  function updateReview($id, $reviewText, $rating) {
    try {
      $stmt = $this->db->prepare("UPDATE reviews SET review_text = :review_text, rating = :rating WHERE id = :id");
      $stmt->bindParam(':id', $id);
      $stmt->bindParam(':review_text', $reviewText);
      $stmt->bindParam(':rating', $rating);
      $stmt->execute();
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
    }
  }

  // Function to delete a review
  function deleteReview($id) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :id");
      $stmt->bindParam(':id', $id);
      $stmt->execute();
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
    }
  }
}


$reviewSystem = new ReviewSystem();

// Add a review
$reviewSystem->addReview(1, 'Product A', 'This is a great product!', 5);

// Get all reviews
$reviews = $reviewSystem->getAllReviews();
echo '<pre>';
print_r($reviews);
echo '</pre>';

// Get a single review by ID
$review = $reviewSystem->getReviewById(1);
echo '<pre>';
print_r($review);
echo '</pre>';

// Update a review
$reviewSystem->updateReview(1, 'This product is even better!', 5);

// Delete a review
$reviewSystem->deleteReview(1);


<?php

// configuration
require_once 'config.php';

// get the product id from the URL parameter
if (isset($_GET['product_id'])) {
  $product_id = $_GET['product_id'];
} else {
  echo "Product ID not specified.";
  exit;
}

// connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

// check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// get the product name from the products table
$product_name_query = "SELECT name FROM products WHERE id = '$product_id'";
$product_name_result = $conn->query($product_name_query);
if (!$product_name_result) {
  echo "Error getting product name.";
  exit;
}
$product_name = $product_name_result->fetch_assoc()['name'];

// display reviews for the product
$reviews_query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
$reviews_result = $conn->query($reviews_query);
if (!$reviews_result) {
  echo "Error getting reviews.";
  exit;
}
$reviews = array();
while ($review = $reviews_result->fetch_assoc()) {
  $reviews[] = $review;
}

// display form for submitting new review
?>
<h2>Reviews for <?php echo $product_name; ?></h2>

<?php if (isset($_SESSION['user_id'])) : ?>
  <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <label for="rating">Rating:</label>
    <select name="rating" id="rating">
      <?php for ($i = 1; $i <= 5; $i++) : ?>
        <option value="<?php echo $i; ?>"><?php echo $i . '/5'; ?></option>
      <?php endfor; ?>
    </select>
    <br><br>
    <label for="review">Review:</label>
    <textarea name="review" id="review"></textarea>
    <br><br>
    <input type="submit" value="Submit Review">
  </form>
<?php endif; ?>

<h3>Reviews:</h3>

<ul>
  <?php foreach ($reviews as $review) : ?>
    <li>
      Rating: <?php echo $review['rating']; ?>/5
      <br>
      Review: <?php echo nl2br($review['review']); ?>
      <br>
      By: <?php // get the user name from the users table, using the review's user_id; ?>
    </li>
  <?php endforeach; ?>
</ul>

<?php

// check if form has been submitted
if (isset($_POST['submit'])) {
  $rating = $_POST['rating'];
  $review = $_POST['review'];

  // insert new review into database
  $new_review_query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES ('$product_id', '$product_id', '$rating', '$review')";
  if ($conn->query($new_review_query)) {
    echo "Review submitted successfully.";
  } else {
    echo "Error submitting review.";
  }
}

// close database connection
$conn->close();

?>


// db_config.php

$host = 'your_host';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Error connecting to database: " . $e->getMessage();
}


// review.php

class Review {
    private $pdo;

    public function __construct(PDO $pdo) {
        $this->pdo = $pdo;
    }

    // Add a new review for a product
    public function addReview($product_id, $user_id, $review_text, $rating) {
        try {
            $stmt = $this->pdo->prepare("INSERT INTO reviews (product_id, user_id, review_text, rating)
                                          VALUES (:product_id, :user_id, :review_text, :rating)");
            $stmt->execute([
                'product_id' => $product_id,
                'user_id' => $user_id,
                'review_text' => $review_text,
                'rating' => $rating
            ]);
        } catch (PDOException $e) {
            echo "Error adding review: " . $e->getMessage();
        }
    }

    // Get all reviews for a product
    public function getReviews($product_id) {
        try {
            $stmt = $this->pdo->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
            $stmt->execute(['product_id' => $product_id]);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo "Error fetching reviews: " . $e->getMessage();
            return [];
        }
    }

    // Get individual review details
    public function getReview($review_id) {
        try {
            $stmt = $this->pdo->prepare("SELECT * FROM reviews WHERE id = :id");
            $stmt->execute(['id' => $review_id]);
            return $stmt->fetch();
        } catch (PDOException $e) {
            echo "Error fetching review: " . $e->getMessage();
            return [];
        }
    }

    // Update a review
    public function updateReview($review_id, $new_review_text, $new_rating) {
        try {
            $stmt = $this->pdo->prepare("UPDATE reviews SET review_text = :review_text, rating = :rating WHERE id = :id");
            $stmt->execute([
                'id' => $review_id,
                'review_text' => $new_review_text,
                'rating' => $new_rating
            ]);
        } catch (PDOException $e) {
            echo "Error updating review: " . $e->getMessage();
        }
    }

    // Delete a review
    public function deleteReview($review_id) {
        try {
            $stmt = $this->pdo->prepare("DELETE FROM reviews WHERE id = :id");
            $stmt->execute(['id' => $review_id]);
        } catch (PDOException $e) {
            echo "Error deleting review: " . $e->getMessage();
        }
    }
}


// index.php

require_once 'db_config.php';
require_once 'review.php';

$pdo = new PDO($dsn, $username, $password);

$review = new Review($pdo);

// Add a new review for product 1 by user 1 with text "This is a great product!" and rating 5
$review->addReview(1, 1, 'This is a great product!', 5);

// Get all reviews for product 1
$reviews = $review->getReviews(1);
print_r($reviews);

// Update review with id 1 to new text "I love this product!" and rating 4
$review->updateReview(1, 'I love this product!', 4);

// Delete review with id 2
$review->deleteReview(2);


// config.php: database connection settings
$dbhost = 'localhost';
$dbname = 'review_system';
$dbuser = 'root';
$dbpass = '';

// Connect to the database
function connectToDatabase() {
    $conn = new mysqli($GLOBALS['dbhost'], $GLOBALS['dbuser'], $GLOBALS['dbpass'], $GLOBALS['dbname']);
    
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Get reviews
function getReviews() {
    $conn = connectToDatabase();
    $sql = "SELECT * FROM reviews";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            echo "id: " . $row["id"]. " - title: " . $row["title"]. " - description: " . $row["description"] . "<br>";
        }
    } else {
        echo "0 results";
    }
    $conn->close();
}

// Get review by id
function getReview($id) {
    $conn = connectToDatabase();
    $sql = "SELECT * FROM reviews WHERE id = '$id'";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            return $row;
        }
    } else {
        echo "0 results";
    }
    $conn->close();
}

// Create a review
function createReview($title, $description, $rating) {
    $conn = connectToDatabase();
    
    if ($rating > 5 || $rating < 1) {
        return "Invalid rating";
    } else {
        $sql = "INSERT INTO reviews (title, description, rating)
                VALUES ('$title', '$description', '$rating')";
        
        if ($conn->query($sql) === TRUE) {
            echo "New review created successfully";
        } else {
            echo "Error: " . $sql . "<br>" . $conn->error;
        }
    }
}

// Update a review
function updateReview($id, $title, $description, $rating) {
    $conn = connectToDatabase();
    
    if ($rating > 5 || $rating < 1) {
        return "Invalid rating";
    } else {
        $sql = "UPDATE reviews SET title='$title', description='$description', rating='$rating' WHERE id=$id";
        
        if ($conn->query($sql) === TRUE) {
            echo "Review updated successfully";
        } else {
            echo "Error updating review: " . $conn->error;
        }
    }
}

// Delete a review
function deleteReview($id) {
    $conn = connectToDatabase();
    
    $sql = "DELETE FROM reviews WHERE id=$id";
    
    if ($conn->query($sql) === TRUE) {
        echo "Review deleted successfully";
    } else {
        echo "Error deleting review: " . $conn->error;
    }
}

// Test the functions
createReview("Awesome Product", "This product is really awesome", 5);
echo "<hr>";
getReviews();
echo "<hr>";
$review = getReview(1);
var_dump($review);

updateReview(1, "New Awesome Product", "Even more awesome now", 6);
echo "<hr>";

deleteReview(2);


// File: review.php

class Review {
    private $db;

    public function __construct() {
        // Connect to database
        $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myusername', 'mypassword');
        $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    }

    /**
     * Add a review from the user
     *
     * @param int   $user_id  The ID of the user who submitted the review
     * @param string $product_name  The name of the product being reviewed
     * @param string $review       The text of the review
     * @param int    $rating      The rating given to the product (1-5)
     *
     * @return bool|void          True if the review was added successfully, false otherwise
     */
    public function addReview($user_id, $product_name, $review, $rating) {
        try {
            // Prepare and execute SQL query
            $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_name, review, rating) VALUES (?, ?, ?, ?)');
            $stmt->execute([$user_id, $product_name, $review, $rating]);

            return true;
        } catch (PDOException $e) {
            // Handle database error
            echo 'Database error: ' . $e->getMessage();
            return false;
        }
    }

    /**
     * Get all reviews for a product
     *
     * @param string  $product_name The name of the product to retrieve reviews for
     *
     * @return array|void          An array of review data if found, empty array otherwise
     */
    public function getReviews($product_name) {
        try {
            // Prepare and execute SQL query
            $stmt = $this->db->prepare('SELECT u.name AS user_name, r.review, r.rating FROM reviews r JOIN users u ON r.user_id = u.id WHERE product_name = ?');
            $stmt->execute([$product_name]);

            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            // Handle database error
            echo 'Database error: ' . $e->getMessage();
            return [];
        }
    }

    /**
     * Get all reviews for a user
     *
     * @param int   $user_id The ID of the user to retrieve reviews for
     *
     * @return array|void          An array of review data if found, empty array otherwise
     */
    public function getUserReviews($user_id) {
        try {
            // Prepare and execute SQL query
            $stmt = $this->db->prepare('SELECT r.product_name, r.review, r.rating FROM reviews r WHERE user_id = ?');
            $stmt->execute([$user_id]);

            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            // Handle database error
            echo 'Database error: ' . $e->getMessage();
            return [];
        }
    }

    public function __destruct() {
        // Close database connection on object destruction
        $this->db = null;
    }
}


// File: index.php

require_once 'review.php';

$review = new Review();

// Add review
$user_id = 1; // Replace with actual user ID
$product_name = 'Product Name';
$review_text = 'This is a great product!';
$rating = 4;

if ($review->addReview($user_id, $product_name, $review_text, $rating)) {
    echo 'Review added successfully!';
} else {
    echo 'Error adding review.';
}

// Get reviews for a product
$product_name = 'Product Name';
$reviews = $review->getReviews($product_name);

if (!empty($reviews)) {
    foreach ($reviews as $review) {
        echo "User: {$review['user_name']}
";
        echo "Review: {$review['review']}
";
        echo "Rating: {$review['rating']} stars

";
    }
} else {
    echo 'No reviews found for this product.';
}


<?php

// Connect to database
$mysqli = new mysqli('localhost', 'username', 'password', 'database_name');

if ($mysqli->connect_errno) {
    echo "Failed to connect: " . $mysqli->connect_error;
    exit();
}

// Function to create a review
function create_review($product_id, $title, $content) {
    global $mysqli;

    // Insert into reviews table
    $query = "INSERT INTO reviews (product_id, title, content, created_at)
              VALUES ('$product_id', '$title', '$content', NOW())";
    if (!$mysqli->query($query)) {
        echo "Error creating review: " . $mysqli->error;
        exit();
    }

    // Get the ID of the newly inserted review
    $review_id = $mysqli->insert_id;

    return $review_id;
}

// Function to create a rating for a review
function create_rating($review_id, $rating) {
    global $mysqli;

    // Insert into ratings table
    $query = "INSERT INTO ratings (review_id, rating)
              VALUES ('$review_id', '$rating')";
    if (!$mysqli->query($query)) {
        echo "Error creating rating: " . $mysqli->error;
        exit();
    }
}

// Function to display all reviews for a product
function get_reviews_for_product($product_id) {
    global $mysqli;

    // Select from reviews and ratings tables
    $query = "SELECT r.title, r.content, COUNT(r.id) as num_ratings,
              AVG(ra.rating) as average_rating
             FROM reviews r
             LEFT JOIN ratings ra ON r.id = ra.review_id
             WHERE r.product_id = '$product_id'
             GROUP BY r.title";
    if ($result = $mysqli->query($query)) {
        // Display each review along with its average rating
        while ($row = $result->fetch_assoc()) {
            echo "Review Title: " . $row['title'] . "
";
            echo "Review Content: " . $row['content'] . "
";
            echo "Average Rating: " . $row['average_rating'] . "/" . 5 . "

";
        }
    } else {
        echo "Error getting reviews for product: " . $mysqli->error;
    }

    return true; // Changed return to true
}

// Example usage:
$product_id = 1;

$review_id = create_review($product_id, 'Great Product', 'This is a great product!');
create_rating($review_id, 4);

get_reviews_for_product($product_id);

?>


class Review {
    private $review_id;
    private $product_id;
    private $user_id;
    private $rating;
    private $title;
    private $content;

    public function __construct($data) {
        if (isset($data['id'])) {
            $this->review_id = (int)$data['id'];
        }

        $this->product_id = (int)$data['product_id'];
        $this->user_id = (int)$data['user_id'];
        $this->rating = (int)$data['rating'];
        $this->title = $data['title'];
        $this->content = $data['content'];
    }

    // Getters and setters
    public function getId() {
        return $this->review_id;
    }

    public function getProductID() {
        return $this->product_id;
    }

    public function getUserID() {
        return $this->user_id;
    }

    public function getRating() {
        return (int)$this->rating;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getContent() {
        return $this->content;
    }
}


class ReviewModel {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    // Create a new review
    public function createReview(Review $review) {
        try {
            $query = "INSERT INTO reviews (product_id, user_id, rating, title, content)
                      VALUES (:product_id, :user_id, :rating, :title, :content)";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':product_id', $review->getProductID());
            $stmt->bindParam(':user_id', $review->getUserID());
            $stmt->bindParam(':rating', $review->getRating());
            $stmt->bindParam(':title', $review->getTitle());
            $stmt->bindParam(':content', $review->getContent());

            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Get all reviews for a product
    public function getReviews($product_id) {
        try {
            $query = "SELECT * FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':product_id', (int)$product_id);

            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return array();
        }
    }

    // Get a review by ID
    public function getReview($review_id) {
        try {
            $query = "SELECT * FROM reviews WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', (int)$review_id);

            $stmt->execute();
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return array();
        }
    }

    // Update a review
    public function updateReview(Review $review) {
        try {
            $query = "UPDATE reviews SET rating = :rating, title = :title, content = :content WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':rating', $review->getRating());
            $stmt->bindParam(':title', $review->getTitle());
            $stmt->bindParam(':content', $review->getContent());
            $stmt->bindParam(':id', $review->getId());

            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Delete a review
    public function deleteReview($review_id) {
        try {
            $query = "DELETE FROM reviews WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', (int)$review_id);

            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }
}


// Connect to database
$db = new PDO('mysql:host=localhost;dbname=mydb', 'myuser', 'mypass');

// Create a new review model
$model = new ReviewModel($db);

// Create a new review
$review = new Review(array(
    'product_id' => 1,
    'user_id' => 2,
    'rating' => 5,
    'title' => 'Great product!',
    'content' => 'I love this product!'
));

$model->createReview($review);

// Get all reviews for a product
$reviews = $model->getReviews(1);
foreach ($reviews as $review) {
    echo "ID: {$review['id']}, Rating: {$review['rating']}<br>";
}

// Update a review
$review = new Review(array(
    'id' => 1,
    'rating' => 4,
    'title' => 'Good product',
    'content' => 'I like this product'
));

$model->updateReview($review);

// Delete a review
$model->deleteReview(2);


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function createReview($user_id, $product_id, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
      $stmt->bindParam(1, $user_id);
      $stmt->bindParam(2, $product_id);
      $stmt->bindParam(3, $rating);
      $stmt->bindParam(4, $review);
      return $stmt->execute();
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  public function getReviewsForProduct($product_id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
      $stmt->bindParam(1, $product_id);
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
      return array();
    }
  }

  public function getReviewsForUser($user_id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = ?");
      $stmt->bindParam(1, $user_id);
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
      return array();
    }
  }

  public function getAverageRatingForProduct($product_id) {
    try {
      $stmt = $this->db->prepare("SELECT AVG(rating) as average_rating FROM reviews WHERE product_id = ?");
      $stmt->bindParam(1, $product_id);
      $stmt->execute();
      return $stmt->fetchColumn();
    } catch (PDOException $e) {
      echo "Error getting average rating: " . $e->getMessage();
      return null;
    }
  }

  public function getAverageRatingForUser($user_id) {
    try {
      $stmt = $this->db->prepare("SELECT AVG(rating) as average_rating FROM reviews WHERE user_id = ?");
      $stmt->bindParam(1, $user_id);
      $stmt->execute();
      return $stmt->fetchColumn();
    } catch (PDOException $e) {
      echo "Error getting average rating: " . $e->getMessage();
      return null;
    }
  }
}


class ReviewController extends Controller {
  private $review;

  public function __construct($db) {
    $this->review = new Review($db);
  }

  public function createReview($user_id, $product_id, $rating, $review) {
    return $this->review->createReview($user_id, $product_id, $rating, $review);
  }

  public function getReviewsForProduct($product_id) {
    return $this->review->getReviewsForProduct($product_id);
  }

  public function getReviewsForUser($user_id) {
    return $this->review->getReviewsForUser($user_id);
  }

  public function getAverageRatingForProduct($product_id) {
    return $this->review->getAverageRatingForProduct($product_id);
  }

  public function getAverageRatingForUser($user_id) {
    return $this->review->getAverageRatingForUser($user_id);
  }
}


function createUserReview($user_id, $product_id, $rating, $review) {
  try {
    $db = new PDO("mysql:host=localhost;dbname=mydatabase", "username", "password");
    $controller = new ReviewController($db);
    return $controller->createReview($user_id, $product_id, $rating, $review);
  } catch (PDOException $e) {
    echo "Error creating review: " . $e->getMessage();
    return false;
  }
}

function getReviewsForProduct($product_id) {
  try {
    $db = new PDO("mysql:host=localhost;dbname=mydatabase", "username", "password");
    $controller = new ReviewController($db);
    return $controller->getReviewsForProduct($product_id);
  } catch (PDOException $e) {
    echo "Error getting reviews: " . $e->getMessage();
    return array();
  }
}

function getReviewsForUser($user_id) {
  try {
    $db = new PDO("mysql:host=localhost;dbname=mydatabase", "username", "password");
    $controller = new ReviewController($db);
    return $controller->getReviewsForUser($user_id);
  } catch (PDOException $e) {
    echo "Error getting reviews: " . $e->getMessage();
    return array();
  }
}

function getAverageRatingForProduct($product_id) {
  try {
    $db = new PDO("mysql:host=localhost;dbname=mydatabase", "username", "password");
    $controller = new ReviewController($db);
    return $controller->getAverageRatingForProduct($product_id);
  } catch (PDOException $e) {
    echo "Error getting average rating: " . $e->getMessage();
    return null;
  }
}

function getAverageRatingForUser($user_id) {
  try {
    $db = new PDO("mysql:host=localhost;dbname=mydatabase", "username", "password");
    $controller = new ReviewController($db);
    return $controller->getAverageRatingForUser($user_id);
  } catch (PDOException $e) {
    echo "Error getting average rating: " . $e->getMessage();
    return null;
  }
}


$review = createUserReview(1, 1, 5, "Great product!");
if ($review) {
  echo "Review created successfully!";
} else {
  echo "Error creating review.";
}


$reviews = getReviewsForProduct(1);
foreach ($reviews as $review) {
  echo $review['user_id'] . " - " . $review['rating'];
}


$average_rating = getAverageRatingForProduct(1);
echo "Average rating: " . $average_rating;


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

// Establish database connection
try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}

// Function to add a review
function add_review($user_id, $product_id, $rating, $review) {
    global $conn;
    
    $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);

    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Function to get all reviews
function get_reviews() {
    global $conn;

    $stmt = $conn->prepare("SELECT * FROM reviews");
    $stmt->execute();

    return $stmt->fetchAll();
}

// Function to update a review
function update_review($review_id, $rating, $review) {
    global $conn;

    $stmt = $conn->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
    $stmt->bindParam(':id', $review_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);

    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Function to delete a review
function delete_review($review_id) {
    global $conn;

    $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $review_id);

    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

?>


// Add a review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = "This product is amazing!";

if (add_review($user_id, $product_id, $rating, $review)) {
    echo "Review added successfully!";
} else {
    echo "Error adding review.";
}

// Get all reviews
$reviews = get_reviews();

foreach ($reviews as $review) {
    echo "User ID: " . $review['user_id'] . ", Product ID: " . $review['product_id'] . ", Rating: " . $review['rating'] . ", Review: " . $review['review'];
}

// Update a review
$review_id = 1;
$rating = 4;
$review = "I still love this product!";

if (update_review($review_id, $rating, $review)) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review.";
}

// Delete a review
$review_id = 1;

if (delete_review($review_id)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}


<?php

// Sample database operations using PDO
$pdo = new PDO('sqlite:reviews.db');

function get_reviews($product_id) {
    global $pdo;
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function create_review($user_name, $review_text, $rating, $product_id) {
    global $pdo;
    try {
        $stmt = $pdo->prepare('INSERT INTO reviews (user_name, review_text, rating, product_id) VALUES (:user_name, :review_text, :rating, :product_id)');
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':product_id', $product_id);
        return $stmt->execute();
    } catch (PDOException $e) {
        echo 'Error creating review: ' . $e->getMessage();
        return false;
    }
}

// Sample usage:
$product_id = 1; // ID of the product you want to display reviews for
$reviews = get_reviews($product_id);

foreach ($reviews as $review) {
    echo "User Name: $review[user_name]<br>";
    echo "Rating: $review[rating]/5<br>";
    echo "Review: $review[review_text]<br><hr>";
}

// Sample form for creating new reviews
?>

<form action="" method="post">
    <label>Product ID:</label>
    <input type="number" name="product_id" value="<?php echo $product_id; ?>">
    <br>
    <label>User Name:</label>
    <input type="text" name="user_name">
    <br>
    <label>Review Text:</label>
    <textarea name="review_text"></textarea>
    <br>
    <label>Rating (1-5):</label>
    <input type="number" min="1" max="5" name="rating">
    <br>
    <button type="submit">Submit Review</button>
</form>

<?php

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $user_name = $_POST['user_name'];
    $review_text = $_POST['review_text'];
    $rating = (int) $_POST['rating'];
    $product_id = (int) $_POST['product_id'];

    if ($rating >= 1 && $rating <= 5) {
        create_review($user_name, $review_text, $rating, $product_id);
    }
}
?>


class Review {
    public $id;
    public $product_id;
    public $user_id;
    public $rating;
    public $comment;

    function __construct($id, $product_id, $user_id, $rating, $comment) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->user_id = $user_id;
        $this->rating = $rating;
        $this->comment = $comment;
    }
}


class Product {
    public $id;
    public $name;
    public $reviews; // array of Review objects

    function __construct($id, $name) {
        $this->id = $id;
        $this->name = $name;
        $this->reviews = array();
    }

    function addReview(Review $review) {
        array_push($this->reviews, $review);
    }
}


class UserService {
    private $db; // PDO object or database connection

    function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
    }

    function getProductReviews($product_id) {
        $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        $reviews = array();
        while ($row = $stmt->fetch()) {
            $review = new Review($row['id'], $row['product_id'], $row['user_id'], $row['rating'], $row['comment']);
            array_push($reviews, $review);
        }

        return $reviews;
    }

    function getAverageRating($product_id) {
        $stmt = $this->db->prepare('SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = :product_id');
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        return $stmt->fetchColumn();
    }
}


function userReview($product_id, $rating, $comment) {
    $userService = new UserService();

    // Add review to database
    $stmt = $userService->db->prepare('INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $_SESSION['user_id']); // assuming you have a session with the user's ID
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->execute();

    // Get product object and add review to it
    $product = new Product($product_id, '');
    $userService->getProductReviews($product_id); // fetch reviews from database
    array_push($product->reviews, new Review(null, $product_id, $_SESSION['user_id'], $rating, $comment));

    return $product;
}


$product = userReview(1, 5, 'Great product!');
print_r($product->reviews);

$averageRating = $userService->getAverageRating(1);
echo "Average rating: $averageRating";


class Review {
    private $id;
    private $userId;
    private $productId;
    private $rating;
    private $reviewText;

    public function __construct($userId, $productId, $rating, $reviewText) {
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->reviewText = $reviewText;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReviewText() {
        return $this->reviewText;
    }
}


class ReviewModel {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview(Review $review) {
        $sql = "INSERT INTO reviews (user_id, product_id, rating, review_text)
                VALUES (:user_id, :product_id, :rating, :review_text)";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':user_id', $review->getUserId());
        $stmt->bindParam(':product_id', $review->getProductId());
        $stmt->bindParam(':rating', $review->getRating());
        $stmt->bindParam(':review_text', $review->getReviewText());
        return $stmt->execute();
    }

    public function getReviewsForProduct($productId) {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public function getAverageRatingForProduct($productId) {
        $sql = "SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        return $stmt->fetchColumn();
    }
}


function createUserReview($userId, $productId, $rating, $reviewText) {
    $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
    $reviewModel = new ReviewModel($db);
    $review = new Review($userId, $productId, $rating, $reviewText);
    return $reviewModel->createReview($review);
}

function getReviewsForProduct($productId) {
    $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
    $reviewModel = new ReviewModel($db);
    return $reviewModel->getReviewsForProduct($productId);
}

function getAverageRatingForProduct($productId) {
    $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
    $reviewModel = new ReviewModel($db);
    return $reviewModel->getAverageRatingForProduct($productId);
}


createUserReview(1, 1, 5, "Great product!");

$reviews = getReviewsForProduct(1);
print_r($reviews);

$averageRating = getAverageRatingForProduct(1);
echo $averageRating;


// Review class
class Review {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
    }

    // Add a review
    public function addReview($product_id, $user_name, $rating, $comment) {
        try {
            $query = "INSERT INTO reviews (product_id, user_name, rating, comment) VALUES (:product_id, :user_name, :rating, :comment)";
            $stmt = $this->db->prepare($query);
            $stmt->execute([
                'product_id' => $product_id,
                'user_name' => $user_name,
                'rating' => $rating,
                'comment' => $comment
            ]);
            return true;
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Get reviews for a product
    public function getReviews($product_id) {
        try {
            $query = "SELECT * FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($query);
            $stmt->execute(['product_id' => $product_id]);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return array();
        }
    }

    // Calculate average rating for a product
    public function getAverageRating($product_id) {
        try {
            $query = "SELECT AVG(rating) AS average FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($query);
            $stmt->execute(['product_id' => $product_id]);
            return $stmt->fetchColumn();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return 0;
        }
    }
}

// Example usage
$review = new Review();

// Add a review for product with id=1
if ($review->addReview(1, 'John Doe', 5, 'Great product!')) {
    echo 'Review added successfully!';
} else {
    echo 'Error adding review.';
}

// Get reviews for product with id=1
$reviews = $review->getReviews(1);
echo 'Reviews for product with id=1:';
foreach ($reviews as $review) {
    echo '<br>' . $review['user_name'] . ': ' . $review['rating'] . '/5 - ' . $review['comment'];
}

// Calculate average rating for product with id=1
$averageRating = $review->getAverageRating(1);
echo '<br>Average rating: ' . $averageRating;


<?php

// Include the database connection file
require_once 'db.php';

class Review {
    public function createReview($data) {
        // Sanitize input data
        $user_id = mysqli_real_escape_string($GLOBALS['conn'], $data['user_id']);
        $product_id = mysqli_real_escape_string($GLOBALS['conn'], $data['product_id']);
        $review_text = mysqli_real_escape_string($GLOBALS['conn'], $data['review_text']);
        $rating = mysqli_real_escape_string($GLOBALS['conn'], $data['rating']);

        // Query to insert review into database
        $query = "INSERT INTO reviews (user_id, product_id, review_text, rating) VALUES ('$user_id', '$product_id', '$review_text', '$rating')";
        if (mysqli_query($GLOBALS['conn'], $query)) {
            return true; // Review created successfully
        } else {
            return false; // Error creating review
        }
    }

    public function getReviewsByProduct($productId) {
        // Query to retrieve reviews for a specific product
        $query = "SELECT * FROM reviews WHERE product_id = '$productId' ORDER BY id DESC";
        $result = mysqli_query($GLOBALS['conn'], $query);
        if ($result && mysqli_num_rows($result) > 0) {
            return $result; // Reviews retrieved successfully
        } else {
            return false; // Error retrieving reviews
        }
    }

    public function calculateRating($productId) {
        // Query to retrieve rating for a specific product
        $query = "SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = '$productId'";
        $result = mysqli_query($GLOBALS['conn'], $query);
        if ($result && mysqli_num_rows($result) > 0) {
            return mysqli_fetch_assoc($result)['average_rating']; // Rating retrieved successfully
        } else {
            return false; // Error retrieving rating
        }
    }
}

// Example usage:
$review = new Review();

$data = array(
    'user_id' => 1,
    'product_id' => 1,
    'review_text' => 'This product is great!',
    'rating' => 5
);

if ($review->createReview($data)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

$reviews = $review->getReviewsByProduct(1);
if ($reviews) {
    while ($row = mysqli_fetch_assoc($reviews)) {
        echo "User ID: " . $row['user_id'] . ", Review Text: " . $row['review_text'] . ", Rating: " . $row['rating'] . "
";
    }
} else {
    echo "Error retrieving reviews.";
}

$rating = $review->calculateRating(1);
if ($rating) {
    echo "Average rating for product 1 is: " . $rating;
} else {
    echo "Error retrieving rating.";
}


// db.php - database connection file

<?php
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "reviews_db";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


// review_functions.php - user review functions

<?php
require_once 'db.php';

function add_review($product_id, $user_id, $rating, $comment) {
    global $conn;
    
    $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
              VALUES ('$product_id', '$user_id', '$rating', '$comment')";
    
    if ($conn->query($query)) {
        return true; // review added successfully
    } else {
        return false; // failed to add review
    }
}

function get_reviews($product_id) {
    global $conn;
    
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        return $result; // retrieve reviews
    } else {
        return false; // no reviews found
    }
}

function edit_review($review_id, $rating, $comment) {
    global $conn;
    
    $query = "UPDATE reviews SET rating = '$rating', comment = '$comment'
              WHERE id = '$review_id'";
    
    if ($conn->query($query)) {
        return true; // review updated successfully
    } else {
        return false; // failed to update review
    }
}

function delete_review($review_id) {
    global $conn;
    
    $query = "DELETE FROM reviews WHERE id = '$review_id'";
    
    if ($conn->query($query)) {
        return true; // review deleted successfully
    } else {
        return false; // failed to delete review
    }
}
?>


// add_review.php - example usage of adding a review

<?php
require_once 'review_functions.php';

$product_id = 1;
$user_id = 1;
$rating = 4.5;
$comment = "Great product!";

if (add_review($product_id, $user_id, $rating, $comment)) {
    echo "Review added successfully!";
} else {
    echo "Failed to add review.";
}
?>

// get_reviews.php - example usage of retrieving reviews

<?php
require_once 'review_functions.php';

$product_id = 1;

$reviews = get_reviews($product_id);

if ($reviews) {
    while ($row = $reviews->fetch_assoc()) {
        echo "Rating: " . $row['rating'] . ", Comment: " . $row['comment'];
    }
} else {
    echo "No reviews found.";
}
?>


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  }

  /**
   * Get all reviews for a specific user.
   *
   * @param int $user_id User ID
   * @return array Reviews
   */
  public function getUserReviews($user_id) {
    $stmt = $this->db->prepare('SELECT * FROM reviews WHERE user_id = :user_id');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Add a new review.
   *
   * @param array $data Review data
   * @return int Review ID
   */
  public function addReview($data) {
    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_name, review_text, rating) VALUES (:user_id, :product_name, :review_text, :rating)');
    $stmt->execute(array(
      ':user_id' => $data['user_id'],
      ':product_name' => $data['product_name'],
      ':review_text' => $data['review_text'],
      ':rating' => $data['rating']
    ));
    return $this->db->lastInsertId();
  }

  /**
   * Update an existing review.
   *
   * @param array $data Review data
   * @return bool Success
   */
  public function updateReview($data) {
    $stmt = $this->db->prepare('UPDATE reviews SET product_name = :product_name, review_text = :review_text, rating = :rating WHERE id = :id');
    return $stmt->execute(array(
      ':id' => $data['id'],
      ':product_name' => $data['product_name'],
      ':review_text' => $data['review_text'],
      ':rating' => $data['rating']
    ));
  }

  /**
   * Delete a review.
   *
   * @param int $review_id Review ID
   * @return bool Success
   */
  public function deleteReview($review_id) {
    $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :id');
    return $stmt->execute(array(':id' => $review_id));
  }
}


$review = new Review();

// Get all reviews for a specific user
$user_reviews = $review->getUserReviews(1);
print_r($user_reviews);

// Add a new review
$data = array(
  'user_id' => 1,
  'product_name' => 'Product X',
  'review_text' => 'This product is great!',
  'rating' => 5
);
$new_review_id = $review->addReview($data);
echo "New Review ID: $new_review_id";

// Update an existing review
$data['id'] = $new_review_id;
$review->updateReview($data);

// Delete a review
$review->deleteReview($new_review_id);


// config.php

define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'database');

// Establish database connection
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


// functions.php

function addReview($product_id, $user_id, $content, $rating) {
    global $conn;

    $sql = "INSERT INTO reviews (product_id, user_id, content, rating)
            VALUES (?, ?, ?, ?)";

    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiss", $product_id, $user_id, $content, $rating);

    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function getReviews($product_id) {
    global $conn;

    $sql = "SELECT * FROM reviews WHERE product_id = ?";

    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);

    if ($stmt->execute()) {
        return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
    } else {
        return array();
    }
}

function editReview($review_id, $content) {
    global $conn;

    $sql = "UPDATE reviews SET content = ? WHERE id = ?";

    $stmt = $conn->prepare($sql);
    $stmt->bind_param("si", $content, $review_id);

    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function deleteReview($review_id) {
    global $conn;

    $sql = "DELETE FROM reviews WHERE id = ?";

    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $review_id);

    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}


// index.php

include 'config.php';
include 'functions.php';

if (isset($_POST['add_review'])) {
    $product_id = $_POST['product_id'];
    $user_id = $_SESSION['user_id']; // Assume user is logged in and has a session ID
    $content = $_POST['content'];
    $rating = $_POST['rating'];

    if (addReview($product_id, $user_id, $content, $rating)) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review.";
    }
}

if (isset($_POST['edit_review'])) {
    $review_id = $_POST['review_id'];
    $content = $_POST['content'];

    if (editReview($review_id, $content)) {
        echo "Review edited successfully!";
    } else {
        echo "Error editing review.";
    }
}

if (isset($_GET['delete_review'])) {
    $review_id = $_GET['delete_review'];

    if (deleteReview($review_id)) {
        echo "Review deleted successfully!";
    } else {
        echo "Error deleting review.";
    }
}

// Display reviews
$product_id = 1; // Replace with actual product ID
$reviews = getReviews($product_id);

foreach ($reviews as $review) {
    echo "Rating: $review[rating]<br>";
    echo "Content: $review[content]<br><hr>";
}


// config.php: store database connection info
<?php
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "reviews";

$conn = new mysqli($servername, $username, $password, $dbname);
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>

// user.php: handle user functions
<?php
require_once 'config.php';

class User {
  private $conn;

  function __construct($conn) {
    $this->conn = $conn;
  }

  public function createAccount($name, $email, $password) {
    $stmt = $this->conn->prepare("INSERT INTO users (name, email, password) VALUES (?, ?, ?)");
    $stmt->bind_param("sss", $name, $email, $password);
    return $stmt->execute();
  }

  public function login($email, $password) {
    $stmt = $this->conn->prepare("SELECT * FROM users WHERE email = ?");
    $stmt->bind_param("s", $email);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($row = $result->fetch_assoc()) {
      if (password_verify($password, $row['password'])) {
        return true;
      }
    }

    return false;
  }
}

// product.php: handle product functions
<?php
require_once 'config.php';

class Product {
  private $conn;

  function __construct($conn) {
    $this->conn = $conn;
  }

  public function addProduct($title, $description, $price) {
    $stmt = $this->conn->prepare("INSERT INTO products (title, description, price) VALUES (?, ?, ?)");
    $stmt->bind_param("sss", $title, $description, $price);
    return $stmt->execute();
  }
}

// review.php: handle review functions
<?php
require_once 'config.php';

class Review {
  private $conn;

  function __construct($conn) {
    $this->conn = $conn;
  }

  public function createReview($user_id, $product_id, $rating, $review) {
    $stmt = $this->conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("iiii", $user_id, $product_id, $rating, $review);
    return $stmt->execute();
  }

  public function getReviews($product_id = null) {
    if ($product_id !== null) {
      $stmt = $this->conn->prepare("SELECT * FROM reviews WHERE product_id = ?");
      $stmt->bind_param("i", $product_id);
    } else {
      $stmt = $this->conn->prepare("SELECT * FROM reviews");
    }
    return $stmt->execute()->get_result();
  }
}

// index.php: main application file
<?php
require_once 'user.php';
require_once 'product.php';
require_once 'review.php';

$user = new User($conn);
$product = new Product($conn);
$review = new Review($conn);

if (isset($_POST['createAccount'])) {
  $name = $_POST['name'];
  $email = $_POST['email'];
  $password = password_hash($_POST['password'], PASSWORD_DEFAULT);
  if ($user->createAccount($name, $email, $password)) {
    echo "Account created successfully!";
  } else {
    echo "Failed to create account.";
  }
}

if (isset($_POST['login'])) {
  $email = $_POST['email'];
  $password = $_POST['password'];
  if ($user->login($email, $password)) {
    // User logged in
  } else {
    echo "Invalid email or password.";
  }
}

if (isset($_POST['addProduct'])) {
  $title = $_POST['title'];
  $description = $_POST['description'];
  $price = $_POST['price'];
  if ($product->addProduct($title, $description, $price)) {
    echo "Product added successfully!";
  } else {
    echo "Failed to add product.";
  }
}

if (isset($_POST['createReview'])) {
  $user_id = $_SESSION['id']; // Assuming user is logged in
  $product_id = $_POST['product_id'];
  $rating = $_POST['rating'];
  $review->createReview($user_id, $product_id, $rating, $_POST['review']);
}

// Display reviews for a product
$reviews = $review->getReviews();
?>


// reviews.php

class Review {
  private $id;
  private $product_id;
  private $rating;
  private $comment;

  public function __construct($data) {
    $this->id = (int) $data['id'];
    $this->product_id = (int) $data['product_id'];
    $this->rating = (float) $data['rating'];
    $this->comment = trim($data['comment']);
  }

  public function getId() {
    return $this->id;
  }

  public function getProductId() {
    return $this->product_id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }
}


// reviews_controller.php

class ReviewsController {
  private $reviews;

  public function __construct() {
    $this->reviews = array();
  }

  public function addReview($data) {
    // Validate input data
    if (empty($data['product_id']) || empty($data['rating']) || empty($data['comment'])) {
      throw new Exception('Invalid review data');
    }

    // Create new Review object
    $review = new Review($data);

    // Store in reviews array
    $this->reviews[] = $review;

    return $review;
  }

  public function getReviews() {
    return $this->reviews;
  }
}


// index.php

require_once 'reviews.php';
require_once 'reviews_controller.php';

$controller = new ReviewsController();

$data = array(
  'product_id' => 1,
  'rating' => 5.0,
  'comment' => 'Great product!'
);

$review = $controller->addReview($data);

echo "Review ID: " . $review->getId() . "
";
echo "Product ID: " . $review->getProductId() . "
";
echo "Rating: " . $review->getRating() . "
";
echo "Comment: " . $review->getComment() . "
";

$reviews = $controller->getReviews();

foreach ($reviews as $r) {
  echo "Review ID: " . $r->getId() . "
";
}


// Include database connection file
require_once 'database.php';

class Review {
    private $db;

    public function __construct() {
        $this->db = new Database();
    }

    // Get all reviews for a product
    public function getReviews($product_id) {
        $query = "SELECT * FROM reviews WHERE product_id = :product_id";
        $params = array(':product_id' => $product_id);
        return $this->db->query($query, $params)->fetchAll();
    }

    // Create a new review
    public function createReview($user_id, $product_id, $rating, $comment) {
        $query = "INSERT INTO reviews (user_id, product_id, rating, comment)
                  VALUES (:user_id, :product_id, :rating, :comment)";
        $params = array(':user_id' => $user_id,
                        ':product_id' => $product_id,
                        ':rating' => $rating,
                        ':comment' => $comment);
        return $this->db->query($query, $params)->execute();
    }

    // Update an existing review
    public function updateReview($review_id, $new_rating, $new_comment) {
        $query = "UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id";
        $params = array(':id' => $review_id,
                        ':rating' => $new_rating,
                        ':comment' => $new_comment);
        return $this->db->query($query, $params)->execute();
    }

    // Delete a review
    public function deleteReview($review_id) {
        $query = "DELETE FROM reviews WHERE id = :id";
        $params = array(':id' => $review_id);
        return $this->db->query($query, $params)->execute();
    }
}


$review = new Review();

// Get all reviews for a product with ID 123
$reviews = $review->getReviews(123);

// Create a new review for a user with ID 456 and product ID 789
$new_review_id = $review->createReview(456, 789, 4, 'Great product!');

// Update an existing review with ID 1011 to have a rating of 5 and comment 'Excellent service!'
$updated_review_id = $review->updateReview(1011, 5, 'Excellent service!');

// Delete a review with ID 2022
$deleted_review_id = $review->deleteReview(2022);


<?php
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "reviews";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

?>


<?php
include 'database.php';

if (isset($_POST['add_review'])) {
    $product_id = $_POST['product_id'];
    $rating = $_POST['rating'];
    $comment = $_POST['comment'];

    $sql = "INSERT INTO reviews (product_id, rating, comment) VALUES ('$product_id', '$rating', '$comment')";
    if ($conn->query($sql)) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review: " . $conn->error;
    }
}

if (isset($_GET['view_reviews'])) {
    $product_id = $_GET['product_id'];

    $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        echo "<h2>Reviews for Product $product_id</h2>";
        while ($row = $result->fetch_assoc()) {
            echo "<p>Rating: " . $row['rating'] . ", Comment: " . $row['comment'] . "</p>";
        }
    } else {
        echo "No reviews found.";
    }
}
?>


<?php
include 'database.php';

if (isset($_POST['add_review'])) {
    include 'review.php';
}

if (isset($_GET['view_reviews'])) {
    include 'review.php';
}

?>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id"><br><br>
    <label for="rating">Rating:</label>
    <select id="rating" name="rating">
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
        <option value="5">5</option>
    </select><br><br>
    <label for="comment">Comment:</label>
    <textarea id="comment" name="comment"></textarea><br><br>
    <input type="submit" name="add_review" value="Add Review">
</form>

<h2>View Reviews</h2>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="get">
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id"><br><br>
    <input type="submit" name="view_reviews" value="View Reviews">
</form>


// db.php (connection file)
$host = 'localhost';
$dbname = 'review_system';
$user = 'root';
$password = '';

try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $user, $password);
} catch(PDOException $e) {
    die("ERROR: Could not connect. " . $e->getMessage());
}

// review.php (controller)
function createUserReview($user_id, $product_id, $rating, $review_text) {
    global $conn;
    
    // Insert into reviews table
    $query = "INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (:user_id, :product_id, :rating, :review_text)";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $review_text);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function getUserReviews($user_id) {
    global $conn;
    
    // Get all reviews from the user
    $query = "SELECT * FROM reviews WHERE user_id = :user_id";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function getProductReviews($product_id) {
    global $conn;
    
    // Get all reviews for the product
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function updateReviewStatus($review_id, $status) {
    global $conn;
    
    // Update the review status
    $query = "UPDATE reviews SET status = :status WHERE id = :review_id";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':status', $status);
    $stmt->bindParam(':review_id', $review_id);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// usage
if (isset($_POST['submit'])) {
    createUserReview($_SESSION['user_id'], $_POST['product_id'], $_POST['rating'], $_POST['review_text']);
}


class Review {
    private $id;
    private $userId;
    private $productId;
    private $rating;
    private $comment;

    public function __construct($id = null, $userId = null, $productId = null, $rating = null, $comment = null) {
        $this->id = $id;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


class ReviewManager {
    private static $reviews = array();

    public static function addReview(Review $review) {
        self::$reviews[$review->getId()] = $review;
    }

    public static function getReviews() {
        return self::$reviews;
    }

    public static function getReview($id) {
        if (isset(self::$reviews[$id])) {
            return self::$reviews[$id];
        } else {
            return null;
        }
    }

    public static function deleteReview($id) {
        if (isset(self::$reviews[$id])) {
            unset(self::$reviews[$id]);
        }
    }
}


$review1 = new Review(1, 1234, 5678, 5, 'Great product!');
$review2 = new Review(2, 9012, 3456, 4, 'Good but not great.');

ReviewManager::addReview($review1);
ReviewManager::addReview($review2);

print_r(ReviewManager::getReviews());

echo "Review 1: ";
var_dump(ReviewManager::getReview(1));
echo "
";

// Delete a review
ReviewManager::deleteReview(2);

echo "After deletion:
";
print_r(ReviewManager::getReviews());


// database connection settings
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'root';
$password = '';

try {
  $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

  class ReviewSystem {
    private $conn;

    public function __construct($conn) {
      $this->conn = $conn;
    }

    // add a new review
    public function addReview($user_id, $product_id, $rating, $review_text) {
      $stmt = $this->conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (:user_id, :product_id, :rating, :review_text)");
      $stmt->bindParam(':user_id', $user_id);
      $stmt->bindParam(':product_id', $product_id);
      $stmt->bindParam(':rating', $rating);
      $stmt->bindParam(':review_text', $review_text);
      $stmt->execute();
    }

    // get all reviews for a product
    public function getReviewsForProduct($product_id) {
      $stmt = $this->conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
      $stmt->bindParam(':product_id', $product_id);
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    // get all products
    public function getProducts() {
      $stmt = $this->conn->prepare("SELECT * FROM products");
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    // add a new product
    public function addProduct($name, $description) {
      $stmt = $this->conn->prepare("INSERT INTO products (name, description) VALUES (:name, :description)");
      $stmt->bindParam(':name', $name);
      $stmt->bindParam(':description', $description);
      $stmt->execute();
    }
  }

  // usage example
  $reviewSystem = new ReviewSystem($conn);

  // add a new product
  $reviewSystem->addProduct('Test Product', 'This is a test product');

  // get all products
  $products = $reviewSystem->getProducts();
  print_r($products);

  // add a new review
  $reviewSystem->addReview(1, 1, 5, 'Great product!');

  // get all reviews for a product
  $reviews = $reviewSystem->getReviewsForProduct(1);
  print_r($reviews);

} catch (PDOException $e) {
  echo "Connection failed: " . $e->getMessage();
}


function create_review($data) {
  // sanitize user input
  $data['rating'] = (int) $data['rating'];
  $data['comment'] = trim(strip_tags($data['comment']));

  try {
    $query = "
      INSERT INTO reviews (product_id, user_id, rating, comment)
      VALUES (:product_id, :user_id, :rating, :comment)
    ";
    $stmt = $pdo->prepare($query);
    $stmt->execute([
      ':product_id' => $data['product_id'],
      ':user_id' => $data['user_id'],
      ':rating' => $data['rating'],
      ':comment' => $data['comment']
    ]);

    return [
      'success' => true,
      'message' => 'Review created successfully'
    ];
  } catch (PDOException $e) {
    return [
      'success' => false,
      'message' => 'Error creating review: ' . $e->getMessage()
    ];
  }
}

function get_reviews($product_id, $limit = null, $offset = null) {
  try {
    $query = "
      SELECT r.id, u.name, r.rating, r.comment
      FROM reviews r
      JOIN users u ON r.user_id = u.id
      WHERE r.product_id = :product_id
    ";
    if ($limit && $offset) {
      $query .= " LIMIT :limit OFFSET :offset";
    }
    $stmt = $pdo->prepare($query);
    $params = [
      ':product_id' => $product_id,
      ':limit' => $limit,
      ':offset' => $offset
    ];
    if ($limit && $offset) {
      $params[':limit'] = $limit;
      $params[':offset'] = $offset;
    }
    $stmt->execute($params);
    return $stmt->fetchAll();
  } catch (PDOException $e) {
    return [];
  }
}

function update_review($review_id, $data) {
  try {
    $query = "
      UPDATE reviews
      SET rating = :rating, comment = :comment
      WHERE id = :id
    ";
    $stmt = $pdo->prepare($query);
    $stmt->execute([
      ':id' => $review_id,
      ':rating' => (int) $data['rating'],
      ':comment' => trim(strip_tags($data['comment']))
    ]);

    return [
      'success' => true,
      'message' => 'Review updated successfully'
    ];
  } catch (PDOException $e) {
    return [
      'success' => false,
      'message' => 'Error updating review: ' . $e->getMessage()
    ];
  }
}

function delete_review($review_id) {
  try {
    $query = "
      DELETE FROM reviews
      WHERE id = :id
    ";
    $stmt = $pdo->prepare($query);
    $stmt->execute([
      ':id' => $review_id
    ]);

    return [
      'success' => true,
      'message' => 'Review deleted successfully'
    ];
  } catch (PDOException $e) {
    return [
      'success' => false,
      'message' => 'Error deleting review: ' . $e->getMessage()
    ];
  }
}


// create a new review
$data = [
  'product_id' => 1,
  'user_id' => 1,
  'rating' => 5,
  'comment' => 'Great product!'
];
$review = create_review($data);
print_r($review); // Output: Array ( [success] => 1 [message] => Review created successfully )

// get reviews for a specific product
$product_id = 1;
$limit = 10;
$offset = 0;
$reviews = get_reviews($product_id, $limit, $offset);
print_r($reviews); // Output: Array ( [0] => Array ( [id] => 1 [name] => John Doe [rating] => 5 [comment] => Great product! ) )

// update a review
$review_id = 1;
$data = [
  'rating' => 4,
  'comment' => 'Good product!'
];
$update_review = update_review($review_id, $data);
print_r($update_review); // Output: Array ( [success] => 1 [message] => Review updated successfully )

// delete a review
$review_id = 1;
$delete_review = delete_review($review_id);
print_r($delete_review); // Output: Array ( [success] => 1 [message] => Review deleted successfully )


// db.php: Database connection settings
$host = 'localhost';
$dbname = 'reviews_database';
$username = 'your_username';
$password = 'your_password';

try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// Review model
class Review {
    private $id;
    private $product_id;
    private $user_id;
    private $rating;
    private $review_text;

    public function __construct($id, $product_id, $user_id, $rating, $review_text) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->user_id = $user_id;
        $this->rating = $rating;
        $this->review_text = $review_text;
    }

    public function getId() { return $this->id; }
    public function getProductID() { return $this->product_id; }
    public function getUserID() { return $this->user_id; }
    public function getRating() { return $this->rating; }
    public function getReviewText() { return $this->review_text; }
}

// Review service
class ReviewService {
    private $conn;

    public function __construct($conn) {
        $this->conn = $conn;
    }

    // Add a new review
    public function addReview(Review $review) {
        $stmt = $this->conn->prepare("INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES (:product_id, :user_id, :rating, :review_text)");
        $stmt->bindParam(':product_id', $review->getProductID());
        $stmt->bindParam(':user_id', $review->getUserID());
        $stmt->bindParam(':rating', $review->getRating());
        $stmt->bindParam(':review_text', $review->getReviewText());
        return $stmt->execute();
    }

    // Get all reviews for a product
    public function getReviewsForProduct($product_id) {
        $stmt = $this->conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
        $stmt->bindParam(':product_id', $product_id);
        return $stmt->execute() ? $stmt->fetchAll(PDO::FETCH_ASSOC) : array();
    }

    // Get all reviews for a user
    public function getReviewsForUser($user_id) {
        $stmt = $this->conn->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
        $stmt->bindParam(':user_id', $user_id);
        return $stmt->execute() ? $stmt->fetchAll(PDO::FETCH_ASSOC) : array();
    }

    // Update an existing review
    public function updateReview(Review $review, $id) {
        $stmt = $this->conn->prepare("UPDATE reviews SET rating = :rating, review_text = :review_text WHERE id = :id");
        $stmt->bindParam(':rating', $review->getRating());
        $stmt->bindParam(':review_text', $review->getReviewText());
        $stmt->bindParam(':id', $id);
        return $stmt->execute();
    }

    // Delete a review
    public function deleteReview($id) {
        $stmt = $this->conn->prepare("DELETE FROM reviews WHERE id = :id");
        $stmt->bindParam(':id', $id);
        return $stmt->execute();
    }
}

// Example usage:
$review_service = new ReviewService($conn);

// Add a new review
$review = new Review(1, 1, 1, 5, "Great product!");
if ($review_service->addReview($review)) {
    echo "Review added successfully!";
} else {
    echo "Error adding review.";
}

// Get all reviews for a product
$product_id = 1;
$reviews = $review_service->getReviewsForProduct($product_id);
foreach ($reviews as $review) {
    echo "Rating: {$review['rating']}, Review Text: {$review['review_text']}
";
}


class Review {
    private $id;
    private $rating;
    private $content;
    private $username;

    public function __construct($id, $rating, $content, $username) {
        $this->id = $id;
        $this->rating = $rating;
        $this->content = $content;
        $this->username = $username;
    }

    public function getId() {
        return $this->id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getContent() {
        return $this->content;
    }

    public function getUsername() {
        return $this->username;
    }
}


class ReviewManager {
    private $reviews = [];

    public function addReview(Review $review) {
        array_push($this->reviews, $review);
    }

    public function getReviews() {
        return $this->reviews;
    }

    public function displayReviews() {
        foreach ($this->reviews as $review) {
            echo "ID: {$review->getId()} | Rating: {$review->getRating()} | Content: {$review->getContent()} | Username: {$review->getUsername()}";
            echo "<hr>";
        }
    }
}


$review1 = new Review(1, 5, "Great product!", "JohnDoe");
$review2 = new Review(2, 3, "Not what I expected.", "JaneSmith");

$reviewManager = new ReviewManager();
$reviewManager->addReview($review1);
$reviewManager->addReview($review2);

echo "<h2>Reviews:</h2>";
$reviewManager->displayReviews();


// database connection settings
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database_name');

// connect to database
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// functions for CRUD operations

function create_review($title, $content, $rating, $user_id) {
    global $conn;
    $sql = "INSERT INTO reviews (title, content, rating, user_id)
            VALUES ('$title', '$content', '$rating', '$user_id')";
    if ($conn->query($sql) === TRUE) {
        echo "Review created successfully.";
    } else {
        echo "Error creating review: " . $conn->error;
    }
}

function read_reviews() {
    global $conn;
    $sql = "SELECT * FROM reviews ORDER BY id DESC";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "ID: " . $row["id"]. " - Title: " . $row["title"]. " Rating: " . $row["rating"]. "<br>";
        }
    } else {
        echo "No reviews found.";
    }
}

function update_review($id, $title, $content, $rating) {
    global $conn;
    $sql = "UPDATE reviews SET title='$title', content='$content', rating='$rating' WHERE id=$id";
    if ($conn->query($sql) === TRUE) {
        echo "Review updated successfully.";
    } else {
        echo "Error updating review: " . $conn->error;
    }
}

function delete_review($id) {
    global $conn;
    $sql = "DELETE FROM reviews WHERE id=$id";
    if ($conn->query($sql) === TRUE) {
        echo "Review deleted successfully.";
    } else {
        echo "Error deleting review: " . $conn->error;
    }
}

// example usage
create_review("Example Review", "This is a sample review.", 5, 1);
read_reviews();
update_review(1, "Updated Title", "New content for review 1.", 4);
delete_review(1);

$conn->close();


<?php

// Database connection settings
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'database';

// Create a database connection
$dsn = "mysql:host=$db_host;dbname=$db_name";
$conn = new PDO($dsn, $db_username, $db_password);

function create_review($product_name, $review_text, $rating, $user_id) {
    global $conn;
    
    // Insert review into database
    $query = "INSERT INTO reviews (product_name, review_text, rating, user_id) VALUES (:product_name, :review_text, :rating, :user_id)";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
}

function get_reviews_for_product($product_name) {
    global $conn;
    
    // Retrieve reviews for a specific product
    $query = "SELECT * FROM reviews WHERE product_name = :product_name";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->execute();
    return $stmt->fetchAll();
}

function delete_review($review_id) {
    global $conn;
    
    // Delete a review
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':id', $review_id);
    $stmt->execute();
}

// Example usage:
create_review("Product Name", "This is a great product!", 5, 1);

$reviews = get_reviews_for_product("Product Name");
foreach ($reviews as $review) {
    echo "$review[product_name] by $review[user_id] on $review[created_at]
";
}

delete_review(1);

?>


<?php
// include database connection
include_once 'db_connection.php';

// retrieve all reviews from database
$query = "SELECT r.id, u.username, r.title, r.review, r.rating FROM reviews r JOIN users u ON r.user_id=u.id ORDER BY created_at DESC";
$reviews = mysqli_query($conn, $query);

?>


<!-- display form to add new review -->
<form action="add_review.php" method="post">
  <h2>Add a Review</h2>
  <label for="title">Title:</label><br>
  <input type="text" id="title" name="title"><br>
  <label for="review">Review:</label><br>
  <textarea id="review" name="review"></textarea><br>
  <label for="rating">Rating (out of 5):</label><br>
  <input type="number" id="rating" name="rating" min="0" max="5"><br><br>
  <button type="submit" class="btn btn-primary">Submit Review</button>
</form>

<!-- display all reviews -->
<h2>Reviews:</h2>
<ul>
  <?php
    while ($review = mysqli_fetch_assoc($reviews)) {
      echo '<li>';
      echo 'Title: <strong>' . $review['title'] . '</strong><br>';
      echo 'Review: ' . $review['review'] . '<br>';
      echo 'Rating: ' . $review['rating'] . '/5 stars<br>';
      echo 'User: ' . $review['username'];
      if ($_SESSION['user_id'] == $review['user_id']) {
        echo ' | <a href="edit_review.php?id=' . $review['id'] . '">Edit Review</a> | <a href="delete_review.php?id=' . $review['id'] . '">Delete Review</a>';
      }
      echo '</li>';
    }
  ?>
</ul>


<?php
// include database connection
include_once 'db_connection.php';

// retrieve form data
$title = $_POST['title'];
$review = $_POST['review'];
$rating = $_POST['rating'];

// insert review into database
$query = "INSERT INTO reviews (user_id, title, review, rating) VALUES ('" . $_SESSION['user_id'] . "', '$title', '$review', '$rating')";
mysqli_query($conn, $query);

header('Location: reviews.php');
exit;
?>


<?php
// include database connection
include_once 'db_connection.php';

// retrieve review ID from URL parameter
$id = $_GET['id'];

// retrieve review data from database
$query = "SELECT * FROM reviews WHERE id=$id";
$review = mysqli_query($conn, $query);
$review = mysqli_fetch_assoc($review);

// display form to edit review
?>
<form action="update_review.php" method="post">
  <h2>Edit Review</h2>
  <label for="title">Title:</label><br>
  <input type="text" id="title" name="title" value="<?php echo $review['title']; ?>"><br>
  <label for="review">Review:</label><br>
  <textarea id="review" name="review"><?php echo $review['review']; ?></textarea><br>
  <label for="rating">Rating (out of 5):</label><br>
  <input type="number" id="rating" name="rating" value="<?php echo $review['rating']; ?>" min="0" max="5"><br><br>
  <button type="submit" class="btn btn-primary">Update Review</button>
  <input type="hidden" name="id" value="<?php echo $id; ?>">
</form>


<?php
// include database connection
include_once 'db_connection.php';

// retrieve form data and ID from URL parameter
$id = $_POST['id'];
$title = $_POST['title'];
$review = $_POST['review'];
$rating = $_POST['rating'];

// update review in database
$query = "UPDATE reviews SET title='$title', review='$review', rating=$rating WHERE id=$id";
mysqli_query($conn, $query);

header('Location: reviews.php');
exit;
?>


<?php
// include database connection
include_once 'db_connection.php';

// retrieve ID from URL parameter
$id = $_GET['id'];

// delete review from database
$query = "DELETE FROM reviews WHERE id=$id";
mysqli_query($conn, $query);

header('Location: reviews.php');
exit;
?>


// database connection information
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'reviews_database';

// create a connection
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// review class to encapsulate the functionality
class ReviewSystem {

    private $conn;

    function __construct() {
        $this->conn = new mysqli($db_host, $db_username, $db_password, $db_name);
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
    }

    // method to display all reviews
    function display_reviews() {
        $query = "SELECT * FROM reviews";
        $result = $this->conn->query($query);

        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                echo "Title: " . $row["title"] . "<br>";
                echo "Review: " . $row["review"] . "<br><br>";
            }
        } else {
            echo "No reviews yet";
        }

    }

    // method to add a new review
    function add_review($title, $review) {
        $query = "INSERT INTO reviews (title, review) VALUES ('$title', '$review')";
        if ($this->conn->query($query)) {
            echo "Review added successfully";
        } else {
            echo "Error adding review: " . $this->conn->error;
        }
    }

    // method to update an existing review
    function update_review($id, $title, $review) {
        $query = "UPDATE reviews SET title='$title', review='$review' WHERE id=$id";
        if ($this->conn->query($query)) {
            echo "Review updated successfully";
        } else {
            echo "Error updating review: " . $this->conn->error;
        }
    }

    // method to delete a review
    function delete_review($id) {
        $query = "DELETE FROM reviews WHERE id=$id";
        if ($this->conn->query($query)) {
            echo "Review deleted successfully";
        } else {
            echo "Error deleting review: " . $this->conn->error;
        }
    }

}

// example usage
$review_system = new ReviewSystem();
$review_system->display_reviews();

// add a new review
$review_system->add_review("New title", "This is my new review");

// update an existing review
$review_system->update_review(1, "Updated title", "This is the updated review");

// delete a review
$review_system->delete_review(2);



<?php

class Review {
    private $db;

    function __construct() {
        // Connect to database
        $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
    }

    // Function to add a review
    function addReview($productId, $userId, $rating, $review) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:id, :user_id, :rating, :review)");
            $stmt->bindParam(':id', $productId);
            $stmt->bindParam(':user_id', $userId);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':review', $review);
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error adding review: " . $e->getMessage();
            return false;
        }
    }

    // Function to display all reviews for a product
    function displayReviews($productId) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :id");
            $stmt->bindParam(':id', $productId);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error displaying reviews: " . $e->getMessage();
            return false;
        }
    }

    // Function to calculate the average rating for a product
    function getAverageRating($productId) {
        try {
            $stmt = $this->db->prepare("SELECT AVG(rating) AS average FROM reviews WHERE product_id = :id");
            $stmt->bindParam(':id', $productId);
            $stmt->execute();
            return $stmt->fetchColumn();
        } catch (PDOException $e) {
            echo "Error calculating average rating: " . $e->getMessage();
            return false;
        }
    }
}

?>


$review = new Review();

// Add a review
$productId = 1;
$userId = 1;
$rating = 5;
$reviewText = "Great product!";
$review->addReview($productId, $userId, $rating, $reviewText);

// Display all reviews for a product
$productReviews = $review->displayReviews($productId);
print_r($productReviews);

// Calculate the average rating for a product
$averageRating = $review->getAverageRating($productId);
echo "Average Rating: " . $averageRating;


// config.php
$db_host = 'your_database_host';
$db_username = 'your_database_username';
$db_password = 'your_database_password';
$db_name = 'your_database_name';

$conn = new PDO("mysql:host=$db_host;dbname=$db_name", $db_username, $db_password);


// review.php (user review form)
<?php
require_once 'config.php';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // User has submitted a review
  $userId = $_SESSION['user_id'];
  $productId = $_POST['product_id'];
  $rating = $_POST['rating'];
  $review = $_POST['review'];

  try {
    $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    $stmt->execute();

    // Get the review ID
    $reviewId = $conn->lastInsertId();

    // Add rating to ratings table
    $stmt = $conn->prepare("INSERT INTO ratings (product_id, user_id, rating) VALUES (:product_id, :user_id, :rating)");
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':rating', $rating);
    $stmt->execute();

    echo "Review submitted successfully!";
  } catch (PDOException $e) {
    echo "Error submitting review: " . $e->getMessage();
  }
}

?>


// review_list.php (list of reviews for a product)
<?php
require_once 'config.php';

$productId = $_GET['product_id'];

$stmt = $conn->prepare("SELECT r.id, u.name, p.name AS product_name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id WHERE r.product_id = :product_id ORDER BY r.created_at DESC");
$stmt->bindParam(':product_id', $productId);
$stmt->execute();

$reviews = $stmt->fetchAll();

?>


<form action="review.php" method="post">
  <input type="hidden" name="product_id" value="<?php echo $product['id']; ?>">
  <textarea name="review"></textarea>
  <select name="rating">
    <?php foreach (array(1, 2, 3, 4, 5) as $rating): ?>
      <option value="<?php echo $rating; ?>"><?php echo $rating . "/5"; ?></option>
    <?php endforeach; ?>
  </select>
  <button type="submit">Submit Review</button>
</form>


<h1>Reviews for <?php echo $product['name']; ?></h1>

<ul>
  <?php foreach ($reviews as $review): ?>
    <li>
      <strong><?php echo $review['name']; ?></strong>
      - <?php echo $review['rating'] . "/5"; ?> stars
      - <?php echo $review['review']; ?>
    </li>
  <?php endforeach; ?>
</ul>


// Function to connect to database
function connectToDatabase() {
    $servername = "localhost";
    $username = "your_username";
    $password = "your_password";
    $dbname = "your_database";

    try {
        $conn = new PDO("mysql:host=$servername; dbname=$dbname", $username, $password);
        return $conn;
    } catch (PDOException $e) {
        echo "Error connecting to database: " . $e->getMessage();
        exit();
    }
}

// Function to add a review
function addReview($product_id, $user_id, $rating, $review_text) {
    $conn = connectToDatabase();

    try {
        $sql = "INSERT INTO reviews (product_id, user_id, rating, review_text)
                VALUES (:product_id, :user_id, :rating, :review_text)";
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(":product_id", $product_id);
        $stmt->bindParam(":user_id", $user_id);
        $stmt->bindParam(":rating", $rating);
        $stmt->bindParam(":review_text", $review_text);

        if ($stmt->execute()) {
            return true;
        } else {
            echo "Error adding review: ";
            print_r($conn->errorInfo());
            return false;
        }
    } catch (PDOException $e) {
        echo "Error adding review: " . $e->getMessage();
        return false;
    }

    $conn = null;
}

// Function to view reviews for a user
function viewReviewsForUser($user_id) {
    $conn = connectToDatabase();

    try {
        $sql = "SELECT * FROM reviews WHERE user_id = :user_id";
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(":user_id", $user_id);

        if ($stmt->execute()) {
            return $stmt->fetchAll();
        } else {
            echo "Error fetching reviews: ";
            print_r($conn->errorInfo());
            return array();
        }
    } catch (PDOException $e) {
        echo "Error fetching reviews: " . $e->getMessage();
        return array();
    }

    $conn = null;
}

// Function to average ratings for a product
function getAverageRatingForProduct($product_id) {
    $conn = connectToDatabase();

    try {
        $sql = "SELECT AVG(rating) as average_rating FROM reviews WHERE product_id = :product_id";
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(":product_id", $product_id);

        if ($stmt->execute()) {
            $result = $stmt->fetch();
            return $result['average_rating'];
        } else {
            echo "Error fetching average rating: ";
            print_r($conn->errorInfo());
            return 0;
        }
    } catch (PDOException $e) {
        echo "Error fetching average rating: " . $e->getMessage();
        return 0;
    }

    $conn = null;
}


// Add a review for a user
$product_id = 1;
$user_id = 2;
$rating = 4;
$review_text = 'This product is great!';
if (addReview($product_id, $user_id, $rating, $review_text)) {
    echo "Review added successfully!";
}

// View reviews for a user
$user_id = 2;
$reviews = viewReviewsForUser($user_id);
print_r($reviews);

// Get average rating for a product
$product_id = 1;
$average_rating = getAverageRatingForProduct($product_id);
echo "Average rating: $average_rating";


<?php

class Review {
    private $id;
    private $product_id;
    private $user_id;
    private $rating;
    private $review;

    public function __construct($product_id, $user_id, $rating, $review) {
        $this->product_id = $product_id;
        $this->user_id = $user_id;
        $this->rating = $rating;
        $this->review = $review;
    }

    public function getId() {
        return $this->id;
    }

    public function getProductID() {
        return $this->product_id;
    }

    public function getUserID() {
        return $this->user_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}

class ReviewSystem {
    private $reviews = array();

    public function addReview(Review $review) {
        if (!isset($this->reviews[$review->getProductID()])) {
            $this->reviews[$review->getProductID()] = array();
        }

        $this->reviews[$review->getProductID()][count($this->reviews[$review->getProductID()])] = $review;
    }

    public function updateReview(Review $review) {
        if (isset($this->reviews[$review->getProductID()])) {
            foreach ($this->reviews[$review->getProductID()] as &$item) {
                if ($item->getUserID() == $review->getUserID()) {
                    $item = $review;
                }
            }
        } else {
            $this->addReview($review);
        }
    }

    public function deleteReview(Review $review) {
        if (isset($this->reviews[$review->getProductID()])) {
            foreach ($this->reviews[$review->getProductID()] as &$item) {
                if ($item->getUserID() == $review->getUserID()) {
                    unset($item);
                    return;
                }
            }
        }
    }

    public function getReviewsForProduct($product_id) {
        if (isset($this->reviews[$product_id])) {
            return $this->reviews[$product_id];
        } else {
            return array();
        }
    }
}

// Example usage
$review_system = new ReviewSystem();

$review1 = new Review(1, 1, 5, 'Great product!');
$review2 = new Review(1, 1, 3, 'Good but not perfect.');
$review3 = new Review(1, 2, 4, 'Nice one!');

$review_system->addReview($review1);
$review_system->addReview($review2);

echo "Reviews for product 1:
";
foreach ($review_system->getReviewsForProduct(1) as $review) {
    echo 'Rating: ' . $review->getRating() . ', Review: ' . $review->getReview() . "
";
}

$review_system->updateReview($review3);
echo "Updated reviews for product 1:
";
foreach ($review_system->getReviewsForProduct(1) as $review) {
    echo 'Rating: ' . $review->getRating() . ', Review: ' . $review->getReview() . "
";
}

$review_system->deleteReview($review2);
echo "Updated reviews for product 1:
";
foreach ($review_system->getReviewsForProduct(1) as $review) {
    echo 'Rating: ' . $review->getRating() . ', Review: ' . $review->getReview() . "
";
}

?>


// db.php

class DB {
  private $host = 'localhost';
  private $username = 'your_username';
  private $password = 'your_password';
  private $dbname = 'your_database';

  public function connect() {
    try {
      $conn = new PDO('mysql:host=' . $this->host . ';dbname=' . $this->dbname, $this->username, $this->password);
      return $conn;
    } catch (PDOException $e) {
      echo 'Error connecting to database: ' . $e->getMessage();
    }
  }

  public function insertReview($reviewData) {
    $sql = "INSERT INTO reviews SET user_id = :user_id, product_name = :product_name, rating = :rating, review = :review";
    try {
      $conn = $this->connect();
      $stmt = $conn->prepare($sql);
      $stmt->execute([
        ':user_id' => $reviewData['user_id'],
        ':product_name' => $reviewData['product_name'],
        ':rating' => $reviewData['rating'],
        ':review' => $reviewData['review']
      ]);
    } catch (PDOException $e) {
      echo 'Error inserting review: ' . $e->getMessage();
    }
  }

  public function getReviews() {
    $sql = "SELECT * FROM reviews";
    try {
      $conn = $this->connect();
      $stmt = $conn->query($sql);
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error fetching reviews: ' . $e->getMessage();
    }
  }

  public function getUserReviews($userId) {
    $sql = "SELECT * FROM reviews WHERE user_id = :user_id";
    try {
      $conn = $this->connect();
      $stmt = $conn->prepare($sql);
      $stmt->execute([
        ':user_id' => $userId
      ]);
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error fetching user reviews: ' . $e->getMessage();
    }
  }

  public function deleteReview($reviewId) {
    $sql = "DELETE FROM reviews WHERE id = :id";
    try {
      $conn = $this->connect();
      $stmt = $conn->prepare($sql);
      $stmt->execute([
        ':id' => $reviewId
      ]);
    } catch (PDOException $e) {
      echo 'Error deleting review: ' . $e->getMessage();
    }
  }

}


class Review {
  private $db;

  public function __construct() {
    $this->db = new DB();
  }

  public function insert($reviewData) {
    return $this->db->insertReview($reviewData);
  }

  public function getAllReviews() {
    return $this->db->getReviews();
  }

  public function getUserReviews($userId) {
    return $this->db->getUserReviews($userId);
  }

  public function deleteReview($reviewId) {
    return $this->db->deleteReview($reviewId);
  }
}


$review = new Review();

// Insert a new review
$reviewData = [
  'user_id' => 1,
  'product_name' => 'Product Name',
  'rating' => 5,
  'review' => 'This is a great product!'
];
$review->insert($reviewData);

// Get all reviews
$reviews = $review->getAllReviews();
print_r($reviews);

// Get user's reviews
$userReviews = $review->getUserReviews(1);
print_r($userReviews);

// Delete a review
$reviewId = 1;
$review->deleteReview($reviewId);


class ReviewSystem {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
  }

  // Function to add a review
  public function addReview($userId, $productId, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
      $stmt->execute([$userId, $productId, $rating, $review]);
      return true;
    } catch (PDOException $e) {
      return false;
    }
  }

  // Function to get all reviews for a product
  public function getProductReviews($productId) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
      $stmt->execute([$productId]);
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      return [];
    }
  }

  // Function to get all reviews for a user
  public function getUserReviews($userId) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = ?");
      $stmt->execute([$userId]);
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      return [];
    }
  }

  // Function to update a review
  public function updateReview($reviewId, $rating, $review) {
    try {
      $stmt = $this->db->prepare("UPDATE reviews SET rating = ?, review = ? WHERE id = ?");
      $stmt->execute([$rating, $review, $reviewId]);
      return true;
    } catch (PDOException $e) {
      return false;
    }
  }

  // Function to delete a review
  public function deleteReview($reviewId) {
    try {
      $this->db->exec("DELETE FROM reviews WHERE id = ?");
      return true;
    } catch (PDOException $e) {
      return false;
    }
  }
}


$reviewSystem = new ReviewSystem();

// Add a review
$userId = 1;
$productId = 1;
$rating = 5;
$review = "This product is amazing!";
$reviewSystem->addReview($userId, $productId, $rating, $review);

// Get all reviews for a product
$productReviews = $reviewSystem->getProductReviews(1);
print_r($productReviews); // Output: Array of review data

// Update a review
$reviewId = 1;
$newRating = 4;
$newReview = "This product is great, but not perfect.";
$reviewSystem->updateReview($reviewId, $newRating, $newReview);

// Delete a review
$reviewSystem->deleteReview(1);


class Review {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    /**
     * Add a new review to the database.
     *
     * @param int   $product_id  The ID of the product being reviewed.
     * @param int   $user_id     The ID of the user submitting the review.
     * @param string $reviewText The text of the review.
     * @return int|null          The ID of the newly created review, or null on failure.
     */
    public function addReview($product_id, $user_id, $rating, $review_text) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, review_text)
                VALUES (?, ?, ?, ?)");
            $stmt->execute([$product_id, $user_id, $rating, $review_text]);
            return $this->db->lastInsertId();
        } catch (PDOException $e) {
            echo "Error adding review: " . $e->getMessage();
            return null;
        }
    }

    /**
     * Retrieve all reviews for a given product.
     *
     * @param int $product_id The ID of the product to retrieve reviews for.
     * @return array          An array of arrays containing review data.
     */
    public function getReviews($product_id) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
            $stmt->execute([$product_id]);
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error retrieving reviews: " . $e->getMessage();
            return [];
        }
    }

    /**
     * Update an existing review.
     *
     * @param int   $review_id The ID of the review to update.
     * @param string $newText  The new text for the review.
     * @return bool          True on success, false on failure.
     */
    public function updateReview($review_id, $new_text) {
        try {
            $stmt = $this->db->prepare("UPDATE reviews SET review_text = ? WHERE id = ?");
            return $stmt->execute([$new_text, $review_id]) !== false;
        } catch (PDOException $e) {
            echo "Error updating review: " . $e->getMessage();
            return false;
        }
    }

    /**
     * Delete a review.
     *
     * @param int $review_id The ID of the review to delete.
     * @return bool          True on success, false on failure.
     */
    public function deleteReview($review_id) {
        try {
            $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
            return $stmt->execute([$review_id]) !== false;
        } catch (PDOException $e) {
            echo "Error deleting review: " . $e->getMessage();
            return false;
        }
    }
}


$db = new PDO("mysql:host=localhost;dbname=mydatabase", "myuser", "mypassword");
$reviewSystem = new Review($db);

// Add a new review
$product_id = 1;
$user_id = 123;
$rating = 4;
$review_text = "Great product!";
$review_id = $reviewSystem->addReview($product_id, $user_id, $rating, $review_text);
echo "Added review with ID: $review_id
";

// Retrieve all reviews for a product
$product_reviews = $reviewSystem->getReviews(1);
print_r($product_reviews);

// Update an existing review
$new_text = "Even better now!";
$updated = $reviewSystem->updateReview($review_id, $new_text);
echo "Updated review: $updated
";

// Delete a review
$deleted = $reviewSystem->deleteReview($review_id);
echo "Deleted review: $deleted
";


class Review {
  private $db;

  public function __construct() {
    // Connect to database
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  /**
   * Add a new review
   *
   * @param int $user_id
   * @param int $product_id
   * @param string $review_text
   * @param int $rating
   */
  public function addReview($user_id, $product_id, $review_text, $rating) {
    try {
      // Insert into database
      $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, review_text, rating) VALUES (:user_id, :product_id, :review_text, :rating)');
      $stmt->bindParam(':user_id', $user_id);
      $stmt->bindParam(':product_id', $product_id);
      $stmt->bindParam(':review_text', $review_text);
      $stmt->bindParam(':rating', $rating);
      $stmt->execute();
    } catch (PDOException $e) {
      echo 'Error adding review: ' . $e->getMessage();
    }
  }

  /**
   * Edit an existing review
   *
   * @param int $id
   * @param string $review_text
   * @param int $rating
   */
  public function editReview($id, $review_text, $rating) {
    try {
      // Update database
      $stmt = $this->db->prepare('UPDATE reviews SET review_text = :review_text, rating = :rating WHERE id = :id');
      $stmt->bindParam(':id', $id);
      $stmt->bindParam(':review_text', $review_text);
      $stmt->bindParam(':rating', $rating);
      $stmt->execute();
    } catch (PDOException $e) {
      echo 'Error editing review: ' . $e->getMessage();
    }
  }

  /**
   * Delete a review
   *
   * @param int $id
   */
  public function deleteReview($id) {
    try {
      // Delete from database
      $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :id');
      $stmt->bindParam(':id', $id);
      $stmt->execute();
    } catch (PDOException $e) {
      echo 'Error deleting review: ' . $e->getMessage();
    }
  }

  /**
   * Get all reviews
   *
   * @return array
   */
  public function getReviews() {
    try {
      // Select from database
      $stmt = $this->db->prepare('SELECT * FROM reviews');
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error getting reviews: ' . $e->getMessage();
    }
  }
}


$review = new Review();

// Add a review
$review->addReview(1, 2, 'Great product!', 5);

// Edit a review
$review->editReview(3, 'Changed review text', 4);

// Delete a review
$review->deleteReview(2);

// Get all reviews
$reviews = $review->getReviews();
print_r($reviews);


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Create review
  public function create($user_id, $product_id, $title, $review, $rating) {
    try {
      $stmt = $this->db->prepare('INSERT INTO reviews (title, review, rating, user_id, product_id) VALUES (?, ?, ?, ?, ?)');
      $stmt->execute([$title, $review, $rating, $user_id, $product_id]);
      return true;
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  // Read reviews
  public function read($product_id = null, $limit = null, $offset = null) {
    try {
      if ($product_id === null) {
        $stmt = $this->db->prepare('SELECT * FROM reviews');
      } else {
        $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = ? ORDER BY id DESC LIMIT ? OFFSET ?');
        $stmt->execute([$product_id, $limit, $offset]);
      }
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error reading reviews: " . $e->getMessage();
      return array();
    }
  }

  // Update review
  public function update($id, $title = null, $review = null, $rating = null) {
    try {
      if ($title !== null || $review !== null || $rating !== null) {
        $stmt = $this->db->prepare('UPDATE reviews SET title = ?, review = ?, rating = ? WHERE id = ?');
        $stmt->execute([$title ?? '', $review ?? '', $rating ?? 0, $id]);
      }
      return true;
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
      return false;
    }
  }

  // Delete review
  public function delete($id) {
    try {
      $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = ?');
      $stmt->execute([$id]);
      return true;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');

$review = new Review($db);

// Create a review
$user_id = 1;
$product_id = 1;
$title = 'Review Title';
$review_text = 'This is the review text.';
$rating = 4;

$created_review = $review->create($user_id, $product_id, $title, $review_text, $rating);
if ($created_review) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

// Read reviews
$product_id = 1;
$limit = 10;
$offset = 0;

$reviews = $review->read($product_id, $limit, $offset);
foreach ($reviews as $r) {
    echo "ID: " . $r['id'] . ", Title: " . $r['title'] . ", Review: " . $r['review'] . ", Rating: " . $r['rating'];
}

// Update review
$id = 1;
$title = 'New title';
$review_text = 'New review text.';
$rating = 5;

$updated_review = $review->update($id, $title, $review_text, $rating);
if ($updated_review) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review.";
}

// Delete review
$id = 1;
$deleted_review = $review->delete($id);
if ($deleted_review) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}


class Review {
    private $id;
    private $user_id;
    private $product_id;
    private $rating;
    private $review;

    public function __construct($id = null) {
        if ($id !== null) {
            $this->loadReview($id);
        }
    }

    // Load a review by ID
    private function loadReview($id) {
        // Replace this with your database connection code
        $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
        $stmt = $db->prepare('SELECT * FROM reviews WHERE id = :id');
        $stmt->bindParam(':id', $id);
        $stmt->execute();
        $reviewData = $stmt->fetch(PDO::FETCH_ASSOC);

        if ($reviewData) {
            $this->id = $id;
            $this->user_id = $reviewData['user_id'];
            $this->product_id = $reviewData['product_id'];
            $this->rating = $reviewData['rating'];
            $this->review = $reviewData['review'];
        }
    }

    // Create a new review
    public function create($userId, $productId, $rating, $review) {
        // Replace this with your database connection code
        $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
        $stmt = $db->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:userId, :productId, :rating, :review)');
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        $stmt->execute();

        return $this->id = $db->lastInsertId();
    }

    // Update an existing review
    public function update($id, $userId, $productId, $rating, $review) {
        // Replace this with your database connection code
        $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
        $stmt = $db->prepare('UPDATE reviews SET user_id = :userId, product_id = :productId, rating = :rating, review = :review WHERE id = :id');
        $stmt->bindParam(':id', $id);
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        $stmt->execute();

        return true;
    }

    // Delete a review
    public function delete($id) {
        // Replace this with your database connection code
        $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
        $stmt = $db->prepare('DELETE FROM reviews WHERE id = :id');
        $stmt->bindParam(':id', $id);
        $stmt->execute();

        return true;
    }
}


// Create a new review
$review = new Review();
$review->create(1, 1, 5, 'Great product!');

// Update an existing review
$review->update(1, 1, 1, 4, 'Good product, but not great.');

// Delete a review
$review->delete(1);

// Load a review by ID
$review = new Review(1);
echo $review->rating; // Outputs: 4


class Review {
  private $db;

  public function __construct(PDO $db) {
    $this->db = $db;
  }

  public function getReviews($userId = null) {
    if ($userId === null) {
      $query = 'SELECT * FROM reviews';
    } else {
      $query = 'SELECT * FROM reviews WHERE user_id = :user_id';
      $params = array(':user_id' => $userId);
    }

    $stmt = $this->db->prepare($query);
    $stmt->execute($params);
    return $stmt->fetchAll();
  }

  public function createReview($data) {
    $query = 'INSERT INTO reviews (title, content, rating, user_id) VALUES (:title, :content, :rating, :user_id)';
    $params = array(
      ':title' => $data['title'],
      ':content' => $data['content'],
      ':rating' => $data['rating'],
      ':user_id' => $data['user_id']
    );

    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute($params);
      return $this->db->lastInsertId();
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  public function updateReview($id, $data) {
    $query = 'UPDATE reviews SET title = :title, content = :content, rating = :rating WHERE id = :id';
    $params = array(
      ':title' => $data['title'],
      ':content' => $data['content'],
      ':rating' => $data['rating'],
      ':id' => $id
    );

    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute($params);
      return true;
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
      return false;
    }
  }

  public function deleteReview($id) {
    $query = 'DELETE FROM reviews WHERE id = :id';
    $params = array(':id' => $id);

    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute($params);
      return true;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


function createUserReview($userId, $data) {
  // Create a new review object
  $review = new Review(new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password'));

  // Check if the review already exists
  $existingReviews = $review->getReviews($userId);
  foreach ($existingReviews as $existingReview) {
    echo "You have already submitted a review for this user.";
    return false;
  }

  // Create a new review
  $newId = $review->createReview(array(
    'title' => $data['title'],
    'content' => $data['content'],
    'rating' => $data['rating'],
    'user_id' => $userId
  ));

  if ($newId !== false) {
    echo "Thank you for submitting your review!";
    return true;
  } else {
    echo "Error creating review. Please try again.";
    return false;
  }
}

function updateUserReview($id, $data) {
  // Create a new review object
  $review = new Review(new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password'));

  // Update the existing review
  if ($review->updateReview($id, array(
    'title' => $data['title'],
    'content' => $data['content'],
    'rating' => $data['rating']
  ))) {
    echo "Thank you for updating your review!";
    return true;
  } else {
    echo "Error updating review. Please try again.";
    return false;
  }
}

function deleteUserReview($id) {
  // Create a new review object
  $review = new Review(new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password'));

  // Delete the existing review
  if ($review->deleteReview($id)) {
    echo "Thank you for deleting your review!";
    return true;
  } else {
    echo "Error deleting review. Please try again.";
    return false;
  }
}


createUserReview(1, array(
  'title' => 'Great product!',
  'content' => 'I love this product!',
  'rating' => 5
));


updateUserReview(1, array(
  'title' => 'Updated title',
  'content' => 'Updated content',
  'rating' => 4
));


deleteUserReview(1);


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Create a new review
  public function createReview($userId, $review, $rating) {
    $query = "INSERT INTO reviews (user_id, review, rating)
              VALUES (:user_id, :review, :rating)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':rating', $rating);
    return $stmt->execute();
  }

  // Get all reviews
  public function getAllReviews() {
    $query = "SELECT * FROM reviews";
    $stmt = $this->db->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll();
  }

  // Get a single review by ID
  public function getReviewById($id) {
    $query = "SELECT * FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch();
  }

  // Update a review
  public function updateReview($id, $review, $rating) {
    $query = "UPDATE reviews SET review = :review, rating = :rating
              WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $id);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':rating', $rating);
    return $stmt->execute();
  }

  // Delete a review
  public function deleteReview($id) {
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $id);
    return $stmt->execute();
  }
}


// Connect to database
$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

// Create a new review object
$review = new Review($db);

// Create a new review
$result = $review->createReview(1, 'This is a great product!', 5);
if ($result) {
  echo 'Review created successfully!';
} else {
  echo 'Error creating review.';
}

// Get all reviews
$reviews = $review->getAllReviews();
foreach ($reviews as $review) {
  echo $review['id'] . ': ' . $review['review'];
}

// Update a review
$result = $review->updateReview(1, 'This is an amazing product!', 5);
if ($result) {
  echo 'Review updated successfully!';
} else {
  echo 'Error updating review.';
}

// Delete a review
$result = $review->deleteReview(1);
if ($result) {
  echo 'Review deleted successfully!';
} else {
  echo 'Error deleting review.';
}


<?php

// database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// connect to the database
$mysqli = new mysqli($db_host, $db_username, $db_password, $db_name);

function getReviews() {
    global $mysqli;
    
    // query for all reviews
    $query = "SELECT * FROM reviews";
    $result = $mysqli->query($query);
    
    if ($result) {
        $reviews = array();
        
        while ($row = $result->fetch_assoc()) {
            $reviews[] = array(
                'id' => $row['id'],
                'product_id' => $row['product_id'],
                'username' => $row['username'],
                'rating' => $row['rating'],
                'review' => $row['review']
            );
        }
        
        return $reviews;
    } else {
        return array();
    }
}

function createReview($data) {
    global $mysqli;
    
    // validate user input
    if (!isset($data['product_id']) || !isset($data['username']) || !isset($data['rating']) || !isset($data['review'])) {
        return false;
    }
    
    // insert new review into database
    $query = "INSERT INTO reviews (product_id, username, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param('sssi', $data['product_id'], $data['username'], $data['rating'], $data['review']);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function updateReview($id, $data) {
    global $mysqli;
    
    // validate user input
    if (!isset($data['product_id']) || !isset($data['username']) || !isset($data['rating']) || !isset($data['review'])) {
        return false;
    }
    
    // update review in database
    $query = "UPDATE reviews SET product_id = ?, username = ?, rating = ?, review = ? WHERE id = ?";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param('sssi', $data['product_id'], $data['username'], $data['rating'], $data['review'], $id);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function deleteReview($id) {
    global $mysqli;
    
    // query for review by id
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param('i', $id);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// example usage:

$data = array(
    'product_id' => 1,
    'username' => 'John Doe',
    'rating' => 5,
    'review' => 'This product is great!'
);

createReview($data);
$reviews = getReviews();
print_r($reviews);

?>


// database connection settings
$host = 'localhost';
$username = 'root';
$password = '';
$dbname = 'reviews';

// connect to the database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function insertReview($user_id, $product_id, $rating, $review)
{
  global $conn;
  
  // prepare and execute the query
  $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
  $stmt->bind_param("iis", $user_id, $product_id, $rating, $review);
  $stmt->execute();
  
  // return the ID of the newly inserted review
  return $conn->insert_id;
}

function getReviews($product_id = null)
{
  global $conn;
  
  if ($product_id !== null) {
    // retrieve reviews for a specific product
    $result = $conn->query("SELECT r.id, u.name, p.name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id WHERE p.id = " . $product_id);
  } else {
    // retrieve all reviews
    $result = $conn->query("SELECT * FROM reviews");
  }
  
  return $result->fetch_all(MYSQLI_ASSOC);
}

function updateReview($id, $rating = null, $review = null)
{
  global $conn;
  
  if ($rating !== null || $review !== null) {
    // prepare and execute the query
    $query = "UPDATE reviews SET ";
    if ($rating !== null) {
      $query .= "rating = ?, ";
    }
    if ($review !== null) {
      $query .= "review = ?";
    }
    $query .= " WHERE id = " . $id;
    
    // prepare and execute the query
    $stmt = $conn->prepare($query);
    $args = array();
    $i = 0;
    foreach (explode(', ', $query) as $field) {
      if ($field == 'rating' || $field == 'review') {
        $args[$i] = $_GET[$field];
        $i++;
      }
    }
    
    // bind parameters
    for ($j = 0; $j < count($args); $j++) {
      $stmt->bind_param('i', $args[$j]);
    }
    $stmt->execute();
  }
}

function deleteReview($id)
{
  global $conn;
  
  // prepare and execute the query
  $stmt = $conn->prepare("DELETE FROM reviews WHERE id = ?");
  $stmt->bind_param("i", $id);
  $stmt->execute();
}


// insert a new review
$review_id = insertReview(1, 1, 5, 'This product is amazing!');

// retrieve all reviews
$reviews = getReviews();

// update an existing review
updateReview($review_id, null, 'I loved this product so much that I bought it twice!');

// delete a review
deleteReview($review_id);


<?php

class Review {
    private $id;
    private $rating;
    private $comment;
    private $product_id;

    public function __construct($id, $rating, $comment, $product_id) {
        $this->id = $id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->product_id = $product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }

    public static function getAllReviews($db) {
        // Retrieve all reviews from the database
        $reviews = array();
        $query = "SELECT * FROM reviews";
        $result = mysqli_query($db, $query);
        while ($row = mysqli_fetch_assoc($result)) {
            $review = new Review($row['id'], $row['rating'], $row['comment'], $row['product_id']);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public static function addReview($db, $product_id, $rating, $comment) {
        // Insert a new review into the database
        $query = "INSERT INTO reviews (product_id, rating, comment) VALUES ('$product_id', '$rating', '$comment')";
        mysqli_query($db, $query);
    }
}

function displayReviews($reviews) {
    foreach ($reviews as $review) {
        echo "<p>Rating: $review->getRating() / 5</p>";
        echo "<p>$review->getComment()</p>";
    }
}


// Establish a connection to the database
$db = mysqli_connect("localhost", "username", "password", "database");

// Retrieve all reviews for a specific product
$reviews = Review::getAllReviews($db);
displayReviews($reviews);

// Add a new review for a specific product
Review::addReview($db, 123, 5, "Great product!");

?>


// Database connection settings
$host = 'your_host';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

// Create a database connection
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

function getUserReviews($userId) {
    global $conn;
    
    try {
        // Prepare the query to get reviews for a specific user
        $stmt = $conn->prepare("SELECT r.*, p.name as product_name FROM reviews r JOIN products p ON r.product_id = p.id WHERE r.user_id = :user_id");
        
        // Bind the parameters
        $stmt->bindParam(':user_id', $userId);
        
        // Execute the query and fetch results
        $stmt->execute();
        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        return $reviews;
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return array();
    }
}

function getProductReviews($productId) {
    global $conn;
    
    try {
        // Prepare the query to get reviews for a specific product
        $stmt = $conn->prepare("SELECT r.*, u.name as user_name FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = :product_id");
        
        // Bind the parameters
        $stmt->bindParam(':product_id', $productId);
        
        // Execute the query and fetch results
        $stmt->execute();
        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        return $reviews;
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return array();
    }
}

function addReview($userId, $productId, $rating, $reviewText) {
    global $conn;
    
    try {
        // Prepare the query to insert a new review
        $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
        
        // Bind the parameters
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $reviewText);
        
        // Execute the query
        $stmt->execute();
        
        return true;
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false;
    }
}

// Example usage:

// Get reviews for a specific user
$userId = 1;
$reviews = getUserReviews($userId);
print_r($reviews);

// Get reviews for a specific product
$productId = 1;
$reviews = getProductReviews($productId);
print_r($reviews);

// Add a new review
$userId = 1;
$productId = 1;
$rating = 5;
$reviewText = "This is an awesome product!";
$isAdded = addReview($userId, $productId, $rating, $reviewText);
echo $isAdded ? 'Review added successfully!' : 'Error adding review.';


<?php

class Review {
    private $id;
    private $username;
    private $reviewText;
    private $rating;

    public function __construct($id, $username, $reviewText, $rating) {
        $this->id = $id;
        $this->username = $username;
        $this->reviewText = $reviewText;
        $this->rating = $rating;
    }

    // Getters and setters
    public function getId() {
        return $this->id;
    }

    public function setId($id) {
        $this->id = $id;
    }

    public function getUsername() {
        return $this->username;
    }

    public function setUsername($username) {
        $this->username = $username;
    }

    public function getReviewText() {
        return $this->reviewText;
    }

    public function setReviewText($reviewText) {
        $this->reviewText = $reviewText;
    }

    public function getRating() {
        return $this->rating;
    }

    public function setRating($rating) {
        if ($rating >= 1 && $rating <= 5) {
            $this->rating = $rating;
        } else {
            throw new Exception("Invalid rating. Rating must be between 1 and 5.");
        }
    }
}

class ReviewManager {
    private $reviews;

    public function __construct() {
        $this->reviews = array();
    }

    // Add a review
    public function addReview(Review $review) {
        if ($review->getRating() >= 1 && $review->getRating() <= 5) {
            $this->reviews[] = $review;
        } else {
            throw new Exception("Invalid rating. Rating must be between 1 and 5.");
        }
    }

    // Get all reviews
    public function getAllReviews() {
        return $this->reviews;
    }

    // Average rating of all reviews
    public function getAverageRating() {
        if (count($this->reviews) == 0) {
            throw new Exception("No reviews available.");
        }
        $sum = 0;
        foreach ($this->reviews as $review) {
            $sum += $review->getRating();
        }
        return $sum / count($this->reviews);
    }

    // Average rating for a specific product
    public function getAverageRatingForProduct($productId) {
        if (count($this->reviews) == 0) {
            throw new Exception("No reviews available.");
        }
        $productReviews = array_filter($this->reviews, function ($review) use ($productId) {
            return $review->getId() == $productId;
        });
        if (empty($productReviews)) {
            throw new Exception("No reviews for this product.");
        }
        $sum = 0;
        foreach ($productReviews as $review) {
            $sum += $review->getRating();
        }
        return $sum / count($productReviews);
    }

    // Add user review
    public function addUserReview($username, $reviewText, $rating) {
        if (empty($this->reviews)) {
            throw new Exception("No reviews available.");
        }
        $newReview = new Review(count($this->reviews), $username, $reviewText, $rating);
        $this->addReview($newReview);
    }

    // Get user review
    public function getUserReview($id) {
        if (empty($this->reviews)) {
            throw new Exception("No reviews available.");
        }
        foreach ($this->reviews as $review) {
            if ($review->getId() == $id) {
                return $review;
            }
        }
        return null;
    }

    // Remove user review
    public function removeUserReview($id) {
        if (empty($this->reviews)) {
            throw new Exception("No reviews available.");
        }
        foreach ($this->reviews as $key => $review) {
            if ($review->getId() == $id) {
                unset($this->reviews[$key]);
                return;
            }
        }
    }

    // Update user review
    public function updateUserReview($id, $newUsername, $newReviewText, $newRating) {
        if (empty($this->reviews)) {
            throw new Exception("No reviews available.");
        }
        foreach ($this->reviews as &$review) {
            if ($review->getId() == $id) {
                $review->setUsername($newUsername);
                $review->setReviewText($newReviewText);
                $review->setRating($newRating);
                return;
            }
        }
    }
}

// Example usage
$reviewManager = new ReviewManager();
$reviewManager->addUserReview("John Doe", "This product is great!", 5);
$reviewManager->addUserReview("Jane Doe", "I'm not a fan of this product.", 2);

print_r($reviewManager->getAllReviews());

echo $reviewManager->getAverageRating();

?>


<?php

// Database connection settings
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'database';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

class ReviewModel {

  private $conn;

  public function __construct() {
    $this->conn = $conn;
  }

  // Function to add a new review
  public function addReview($product_id, $user_id, $review, $rating) {
    $stmt = $this->conn->prepare("INSERT INTO reviews (product_id, user_id, review, rating) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("iiii", $product_id, $user_id, $review, $rating);
    if ($stmt->execute()) {
      return true;
    } else {
      return false;
    }
  }

  // Function to get all reviews for a product
  public function getReviews($product_id) {
    $stmt = $this->conn->prepare("SELECT * FROM reviews WHERE product_id = ?");
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  }

  // Function to add a new comment
  public function addComment($review_id, $user_id, $comment) {
    $stmt = $this->conn->prepare("INSERT INTO comments (review_id, user_id, comment) VALUES (?, ?, ?)");
    $stmt->bind_param("iii", $review_id, $user_id, $comment);
    if ($stmt->execute()) {
      return true;
    } else {
      return false;
    }
  }

  // Function to get all comments for a review
  public function getComments($review_id) {
    $stmt = $this->conn->prepare("SELECT * FROM comments WHERE review_id = ?");
    $stmt->bind_param("i", $review_id);
    $stmt->execute();
    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  }

}

// Example usage:
$reviewModel = new ReviewModel();

// Add a new review
$product_id = 1;
$user_id = 1;
$review = "This product is amazing!";
$rating = 5;
if ($reviewModel->addReview($product_id, $user_id, $review, $rating)) {
  echo "Review added successfully!";
} else {
  echo "Error adding review.";
}

// Get all reviews for a product
$product_id = 1;
$reviews = $reviewModel->getReviews($product_id);
echo "<pre>";
print_r($reviews);
echo "</pre>";

?>


// database connection settings
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'reviews';

// connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


require_once 'database.php';

class Review {
    private $id;
    private $product_id;
    private $rating;
    private $title;
    private $content;

    public function __construct($id = null, $product_id = null, $rating = null, $title = null, $content = null) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->title = $title;
        $this->content = $content;
    }

    public function save() {
        global $conn;

        // insert review into database
        $sql = "INSERT INTO reviews (product_id, rating, title, content) VALUES (?, ?, ?, ?)";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("iiss", $this->product_id, $this->rating, $this->title, $this->content);
        $stmt->execute();

        // get the new review's ID
        $this->id = $conn->insert_id;
    }

    public function update() {
        global $conn;

        // update review in database
        $sql = "UPDATE reviews SET rating = ?, title = ?, content = ? WHERE id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("isss", $this->rating, $this->title, $this->content, $this->id);
        $stmt->execute();
    }

    public function delete() {
        global $conn;

        // delete review from database
        $sql = "DELETE FROM reviews WHERE id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("i", $this->id);
        $stmt->execute();
    }
}


require_once 'review.php';

class ReviewController {
    public function index() {
        global $conn;

        // get all reviews from database
        $sql = "SELECT * FROM reviews";
        $result = $conn->query($sql);

        // display reviews
        foreach ($result as $row) {
            echo '<h2>Review ' . $row['id'] . '</h2>';
            echo '<p>Product ID: ' . $row['product_id'] . '</p>';
            echo '<p>Rating: ' . $row['rating'] . '</p>';
            echo '<p>Title: ' . $row['title'] . '</p>';
            echo '<p>Content: ' . $row['content'] . '</p>';
        }
    }

    public function create() {
        // display review form
        echo '<h2>Create Review</h2>';
        echo '<form action="" method="post">';
        echo '<label for="product_id">Product ID:</label>';
        echo '<input type="text" id="product_id" name="product_id"><br><br>';
        echo '<label for="rating">Rating:</label>';
        echo '<select id="rating" name="rating">';
        for ($i = 1; $i <= 5; $i++) {
            echo '<option value="' . $i . '">' . $i . '</option>';
        }
        echo '</select><br><br>';
        echo '<label for="title">Title:</label>';
        echo '<input type="text" id="title" name="title"><br><br>';
        echo '<label for="content">Content:</label>';
        echo '<textarea id="content" name="content"></textarea><br><br>';
        echo '<button type="submit">Submit</button>';
        echo '</form>';

        // save review to database
        if (isset($_POST['product_id']) && isset($_POST['rating']) && isset($_POST['title']) && isset($_POST['content'])) {
            $review = new Review();
            $review->product_id = $_POST['product_id'];
            $review->rating = $_POST['rating'];
            $review->title = $_POST['title'];
            $review->content = $_POST['content'];
            $review->save();

            // display success message
            echo '<p>Review created successfully!</p>';
        }
    }

    public function edit($id) {
        global $conn;

        // get review from database
        $sql = "SELECT * FROM reviews WHERE id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("i", $id);
        $stmt->execute();
        $row = $stmt->get_result()->fetch_assoc();

        // display review form with current values
        echo '<h2>Edit Review ' . $id . '</h2>';
        echo '<form action="" method="post">';
        echo '<label for="product_id">Product ID:</label>';
        echo '<input type="text" id="product_id" name="product_id" value="' . $row['product_id'] . '"><br><br>';
        echo '<label for="rating">Rating:</label>';
        echo '<select id="rating" name="rating">';
        for ($i = 1; $i <= 5; $i++) {
            echo '<option value="' . $i . '"';
            if ($row['rating'] == $i) {
                echo ' selected';
            }
            echo '>' . $i . '</option>';
        }
        echo '</select><br><br>';
        echo '<label for="title">Title:</label>';
        echo '<input type="text" id="title" name="title" value="' . $row['title'] . '"><br><br>';
        echo '<label for="content">Content:</label>';
        echo '<textarea id="content" name="content">' . $row['content'] . '</textarea><br><br>';
        echo '<button type="submit">Submit</button>';
        echo '</form>';

        // update review in database
        if (isset($_POST['product_id']) && isset($_POST['rating']) && isset($_POST['title']) && isset($_POST['content'])) {
            $review = new Review($id);
            $review->product_id = $_POST['product_id'];
            $review->rating = $_POST['rating'];
            $review->title = $_POST['title'];
            $review->content = $_POST['content'];
            $review->update();

            // display success message
            echo '<p>Review updated successfully!</p>';
        }
    }

    public function delete($id) {
        global $conn;

        // delete review from database
        $sql = "DELETE FROM reviews WHERE id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("i", $id);
        $stmt->execute();

        // display success message
        echo '<p>Review deleted successfully!</p>';
    }
}


require_once 'review_controller.php';

$reviewController = new ReviewController();
$reviewController->index();


$reviewController = new ReviewController();
$reviewController->create(123); // Create a new review for product with ID 123

$reviewController = new ReviewController();
$reviewController->edit(456); // Edit the review with ID 456


<?php

// Connect to the database
function connect_to_db() {
  $servername = "localhost";
  $username = "root";
  $password = "";
  $dbname = "mydatabase";

  try {
    $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
    return $conn;
  } catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
  }
}

// Function to get user reviews
function get_user_reviews($user_id) {
  $db = connect_to_db();

  if ($db) {
    $stmt = $db->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll();
  } else {
    echo "Error connecting to database";
  }
}

// Function to add a new review
function add_review($product_id, $rating, $review) {
  $db = connect_to_db();

  if ($db) {
    $stmt = $db->prepare("INSERT INTO reviews (product_id, rating, review) VALUES (:product_id, :rating, :review)");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error adding review";
    }
  } else {
    echo "Error connecting to database";
  }
}

// Function to update a review
function update_review($review_id, $product_id, $rating, $review) {
  $db = connect_to_db();

  if ($db) {
    $stmt = $db->prepare("UPDATE reviews SET product_id = :product_id, rating = :rating, review = :review WHERE id = :review_id");
    $stmt->bindParam(':review_id', $review_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error updating review";
    }
  } else {
    echo "Error connecting to database";
  }
}

// Function to delete a review
function delete_review($review_id) {
  $db = connect_to_db();

  if ($db) {
    $stmt = $db->prepare("DELETE FROM reviews WHERE id = :review_id");
    $stmt->bindParam(':review_id', $review_id);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error deleting review";
    }
  } else {
    echo "Error connecting to database";
  }
}

?>


<?php

$user_id = 1; // Replace with actual user ID
$product_id = 1; // Replace with actual product ID
$rating = 4.5;
(review) = "Great product!";

// Get reviews for a specific user
$reviews = get_user_reviews($user_id);
print_r($reviews);

// Add a new review
if (add_review($product_id, $rating, $review)) {
  echo "Review added successfully!";
} else {
  echo "Error adding review";
}

// Update an existing review
$update_data = array(
  'product_id' => 2,
  'rating' => 4.8,
  'review' => "Excellent product!"
);
if (update_review(1, $update_data['product_id'], $update_data['rating'], $update_data['review'])) {
  echo "Review updated successfully!";
} else {
  echo "Error updating review";
}

// Delete a review
if (delete_review(2)) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review";
}
?>


<?php

// Database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Create database connection
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function add_review($product_id, $rating, $review_text, $username) {
    // Insert review into database
    $sql = "INSERT INTO reviews (product_id, rating, review_text, username) VALUES ('$product_id', '$rating', '$review_text', '$username')";
    if ($conn->query($sql) === TRUE) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review: " . $conn->error;
    }
}

function get_reviews($product_id) {
    // Retrieve reviews from database
    $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        // Output data of each row
        while($row = $result->fetch_assoc()) {
            echo "<p>" . $row["username"] . ": " . $row["rating"] . "/5 - " . $row["review_text"] . "</p>";
        }
    } else {
        echo "No reviews found for this product.";
    }
}

function update_review($review_id, $new_rating, $new_review_text) {
    // Update review in database
    $sql = "UPDATE reviews SET rating = '$new_rating', review_text = '$new_review_text' WHERE id = '$review_id'";
    if ($conn->query($sql) === TRUE) {
        echo "Review updated successfully!";
    } else {
        echo "Error updating review: " . $conn->error;
    }
}

function delete_review($review_id) {
    // Delete review from database
    $sql = "DELETE FROM reviews WHERE id = '$review_id'";
    if ($conn->query($sql) === TRUE) {
        echo "Review deleted successfully!";
    } else {
        echo "Error deleting review: " . $conn->error;
    }
}

?>


// Add a new review
add_review(1, 5, "Great product!", "JohnDoe");

// Get all reviews for a product
get_reviews(1);

// Update an existing review
update_review(1, 4, "Good product, but had some issues.");

// Delete a review
delete_review(2);


function add_review($product_id, $rating, $review_text, $username) {
    // Insert review into database using prepared statement
    $sql = "INSERT INTO reviews (product_id, rating, review_text, username) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiss", $product_id, $rating, $review_text, $username);
    if ($stmt->execute()) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review: " . $conn->error;
    }
}


function addReview($product_id, $review_text, $rating) {
  // Connect to database (assuming MySQL)
  $conn = new mysqli("localhost", "username", "password", "database");
  
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  
  // Prepare query
  $sql = "INSERT INTO reviews (product_id, review_text, rating)
          VALUES (?, ?, ?)";
  $stmt = $conn->prepare($sql);
  
  // Bind parameters
  $stmt->bind_param("iis", $product_id, $review_text, $rating);
  
  // Execute query
  if (!$stmt->execute()) {
    echo "Error adding review: " . $stmt->error;
  }
  
  // Close statement and connection
  $stmt->close();
  $conn->close();
}

function getReviews($product_id) {
  // Connect to database (assuming MySQL)
  $conn = new mysqli("localhost", "username", "password", "database");
  
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  
  // Prepare query
  $sql = "SELECT * FROM reviews WHERE product_id = ?";
  $stmt = $conn->prepare($sql);
  
  // Bind parameter
  $stmt->bind_param("i", $product_id);
  
  // Execute query
  if (!$stmt->execute()) {
    echo "Error getting reviews: " . $stmt->error;
  }
  
  // Get result
  $result = $stmt->get_result();
  
  // Close statement and connection
  $stmt->close();
  $conn->close();
  
  return $result;
}

function getUserReviews($user_id) {
  // Connect to database (assuming MySQL)
  $conn = new mysqli("localhost", "username", "password", "database");
  
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  
  // Prepare query
  $sql = "SELECT * FROM reviews WHERE user_id = ?";
  $stmt = $conn->prepare($sql);
  
  // Bind parameter
  $stmt->bind_param("i", $user_id);
  
  // Execute query
  if (!$stmt->execute()) {
    echo "Error getting user reviews: " . $stmt->error;
  }
  
  // Get result
  $result = $stmt->get_result();
  
  // Close statement and connection
  $stmt->close();
  $conn->close();
  
  return $result;
}


// Add a new review
addReview(1, "This product is great!", 5);

// Get all reviews for a specific product
$product_id = 1;
$reviews = getReviews($product_id);
foreach ($reviews as $review) {
  echo $review['review_text'];
}

// Get all reviews from a specific user
$user_id = 1;
$reviews = getUserReviews($user_id);
foreach ($reviews as $review) {
  echo $review['review_text'];
}


class Review {
    private $id;
    private $userId;
    private $productId;
    private $content;
    private $rating;

    public function __construct($id = null, $userId = null, $productId = null, $content = null, $rating = null) {
        $this->id = $id;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->content = $content;
        $this->rating = $rating;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getContent() {
        return $this->content;
    }

    public function getRating() {
        return $this->rating;
    }
}


class ReviewController {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview($userId, $productId, $content, $rating) {
        $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, content, rating) VALUES (?, ?, ?, ?)");
        $stmt->execute([$userId, $productId, $content, $rating]);
        return new Review($this->db->insertId());
    }

    public function getReviewsByUser($userId) {
        $reviews = [];
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = ?");
        $stmt->execute([$userId]);
        while ($row = $stmt->fetch()) {
            $review = new Review($row['id'], $row['user_id'], $row['product_id'], $row['content'], $row['rating']);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public function getReviewsByProduct($productId) {
        $reviews = [];
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
        $stmt->execute([$productId]);
        while ($row = $stmt->fetch()) {
            $review = new Review($row['id'], $row['user_id'], $row['product_id'], $row['content'], $row['rating']);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public function deleteReview($reviewId) {
        $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
        $stmt->execute([$reviewId]);
    }
}


$router->get('/users/{userId}/reviews', 'ReviewController:getReviewsByUser');
$router->get('/products/{productId}/reviews', 'ReviewController:getReviewsByProduct');
$router->post('/reviews', 'ReviewController:createReview');
$router->delete('/reviews/{reviewId}', 'ReviewController:deleteReview');


$db = new Database(); // assuming you have a Database class

$reviewController = new ReviewController($db);

// Create review
$userId = 1;
$productId = 1;
$content = 'Great product!';
$rating = 5;

$newReview = $reviewController->createReview($userId, $productId, $content, $rating);
echo "New review created: " . $newReview->getId() . "
";

// Get reviews by user
$userReviews = $reviewController->getReviewsByUser($userId);
foreach ($userReviews as $review) {
    echo "Review by user " . $review->getUserId() . ": " . $review->getContent() . "
";
}

// Get reviews by product
$productReviews = $reviewController->getReviewsByProduct($productId);
foreach ($productReviews as $review) {
    echo "Review on product " . $review->getProductId() . ": " . $review->getContent() . "
";
}

// Delete review
$reviewId = 1;
$reviewController->deleteReview($reviewId);
echo "Review deleted: " . $reviewId . "
";


// models/User.php

class User {
    private $id;
    private $name;

    public function __construct($id, $name) {
        $this->id = $id;
        $this->name = $name;
    }

    public function getId() {
        return $this->id;
    }

    public function getName() {
        return $this->name;
    }
}


// models/Product.php

class Product {
    private $id;
    private $name;

    public function __construct($id, $name) {
        $this->id = $id;
        $this->name = $name;
    }

    public function getId() {
        return $this->id;
    }

    public function getName() {
        return $this->name;
    }
}


// models/Review.php

class Review {
    private $id;
    private $rating;
    private $reviewText;
    private $user;
    private $product;

    public function __construct($id, $rating, $reviewText, User $user, Product $product) {
        $this->id = $id;
        $this->rating = $rating;
        $this->reviewText = $reviewText;
        $this->user = $user;
        $this->product = $product;
    }

    public function getId() {
        return $this->id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReviewText() {
        return $this->reviewText;
    }

    public function getUser() {
        return $this->user;
    }

    public function getProduct() {
        return $this->product;
    }
}


// db/Database.php

class Database {
    private static $conn;

    public static function connect() {
        self::$conn = new mysqli('localhost', 'username', 'password', 'database');
        if (self::$conn->connect_error) {
            die("Connection failed: " . self::$conn->connect_error);
        }
    }

    public static function query($sql) {
        return self::$conn->query($sql);
    }

    public static function close() {
        self::$conn->close();
    }
}


// controllers/ReviewController.php

class ReviewController {
    public function addReview(Review $review) {
        Database::connect();

        $sql = "INSERT INTO reviews (rating, review_text, user_id, product_id)
                VALUES (?, ?, ?, ?)";

        $stmt = Database::$conn->prepare($sql);
        $stmt->bind_param('ii', $review->getRating(), $review->getReviewText(), $review->getUser()->getId(), $review->getProduct()->getId());

        if ($stmt->execute()) {
            echo "Review added successfully";
        } else {
            echo "Failed to add review: " . $stmt->error;
        }

        Database::close();
    }
}


// ReviewController.php

$review = new Review(1, 5, 'Great product!', new User(1, 'John Doe'), new Product(1, 'Product A'));
$controller = new ReviewController();

$controller->addReview($review);


<?php

// Include database connection script
require 'db.php';

// Function to get user reviews for a specific product
function getUserReviews($productId, $userId = null) {
  global $conn;
  
  // Get all reviews for the specified product
  $query = "SELECT * FROM reviews WHERE product_id = :product_id";
  
  if ($userId !== null) {
    // Filter reviews by user ID
    $query .= " AND user_id = :user_id";
  }
  
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':user_id', $userId);
  
  try {
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo "Error retrieving reviews: " . $e->getMessage();
    return array();
  }
}

// Function to add a new review
function addReview($userId, $productId, $rating, $review) {
  global $conn;
  
  // Validate user input
  if (!ctype_digit($rating)) {
    throw new Exception("Invalid rating");
  }
  
  // Insert new review into database
  $query = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES (:user_id, :product_id, :rating, :review)";
  
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  
  try {
    $stmt->execute();
    return true;
  } catch (PDOException $e) {
    echo "Error adding review: " . $e->getMessage();
    return false;
  }
}

// Function to update an existing review
function updateReview($reviewId, $newRating, $newReview) {
  global $conn;
  
  // Validate user input
  if (!ctype_digit($newRating)) {
    throw new Exception("Invalid rating");
  }
  
  // Update existing review in database
  $query = "UPDATE reviews SET rating = :rating, review = :review WHERE id = :id";
  
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':rating', $newRating);
  $stmt->bindParam(':review', $newReview);
  $stmt->bindParam(':id', $reviewId);
  
  try {
    $stmt->execute();
    return true;
  } catch (PDOException $e) {
    echo "Error updating review: " . $e->getMessage();
    return false;
  }
}

// Function to delete a review
function deleteReview($reviewId) {
  global $conn;
  
  // Delete existing review from database
  $query = "DELETE FROM reviews WHERE id = :id";
  
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':id', $reviewId);
  
  try {
    $stmt->execute();
    return true;
  } catch (PDOException $e) {
    echo "Error deleting review: " . $e->getMessage();
    return false;
  }
}

?>


// Get all reviews for a specific product
$reviews = getUserReviews(1);
print_r($reviews);

// Add a new review
$result = addReview(1, 1, 5, "Great product!");
echo $result ? "Review added successfully!" : "Error adding review.";

// Update an existing review
$result = updateReview(1, 4, "Decent product.");
echo $result ? "Review updated successfully!" : "Error updating review.";

// Delete a review
$result = deleteReview(1);
echo $result ? "Review deleted successfully!" : "Error deleting review.";


function getReviews($productId = null, $rating = null, $limit = 10, $offset = 0) {
  global $db;

  if ($productId !== null && !$db->query("SELECT * FROM reviews WHERE product_id = '$productId'")->num_rows) {
    return array();
  }

  $query = "SELECT * FROM reviews";
  if ($rating !== null) {
    $query .= " WHERE rating = '$rating'";
  }
  if ($productId !== null) {
    $query .= " AND product_id = '$productId'";
  }

  $results = $db->query($query . " LIMIT $limit OFFSET $offset")->fetchAll();

  return $results;
}

function addReview($data) {
  global $db;

  try {
    $product_id = intval($data['product_id']);
    $user_name = trim($data['name']);
    $review = trim($data['review']);
    $rating = intval($data['rating']);

    if (empty($user_name)) {
      throw new Exception("Please enter your name.");
    }
    if (empty($review)) {
      throw new Exception("Please enter a review.");
    }
    if (!in_array($rating, array(1, 2, 3, 4, 5))) {
      throw new Exception("Rating must be between 1 and 5.");
    }

    $db->query("INSERT INTO reviews (product_id, user_name, review, rating) VALUES ('$product_id', '$user_name', '$review', '$rating')");
  } catch (Exception $e) {
    return array('error' => $e->getMessage());
  }
}


$data = array(
  'name' => $_POST['username'],
  'review' => $_POST['review'],
  'rating' => intval($_POST['rating']),
  'product_id' => intval($_POST['product_id'])
);

$results = addReview($data);
if (isset($results['error'])) {
  // error handling
}


$reviews = getReviews();
print_r($reviews);


// config/database.php
return [
    'connections' => [
        'mysql' => [
            'driver'   => 'mysql',
            'host'     => env('DB_HOST', 'localhost'),
            'database' => env('DB_DATABASE', 'reviews'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
        ],
    ],
];

// app/Models/User.php
namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;

class User extends Model
{
    protected $fillable = ['username', 'email'];

    public function reviews()
    {
        return $this->hasMany(Review::class);
    }
}

// app/Models/Review.php
namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Review extends Model
{
    protected $fillable = [
        'user_id',
        'title',
        'content',
        'rating',
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }
}

// app/Controllers/UserReviewController.php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\User;
use App\Models\Review;

class UserReviewController extends Controller
{
    public function index()
    {
        // Display a list of reviews for the current user.
        $reviews = Review::where('user_id', auth()->id())->get();
        return view('review.index', compact('reviews'));
    }

    public function create()
    {
        // Show the form to create a new review.
        return view('review.create');
    }

    public function store(Request $request)
    {
        // Handle the form submission and save the review.
        $validatedData = $request->validate([
            'title' => 'required',
            'content' => 'required',
            'rating' => 'required|numeric|between:1,5',
        ]);

        Review::create($validatedData);
        return redirect()->route('review.index')->withSuccess('Review created successfully!');
    }

    public function edit(Review $review)
    {
        // Display the form to update an existing review.
        return view('review.edit', compact('review'));
    }

    public function update(Request $request, Review $review)
    {
        // Update the review based on the submitted data.
        $validatedData = $request->validate([
            'title' => 'required',
            'content' => 'required',
            'rating' => 'required|numeric|between:1,5',
        ]);

        $review->update($validatedData);
        return redirect()->route('review.index')->withSuccess('Review updated successfully!');
    }

    public function destroy(Review $review)
    {
        // Delete the review.
        $review->delete();
        return redirect()->route('review.index')->withSuccess('Review deleted successfully!');
    }
}

// routes/web.php
Route::get('/reviews', [UserReviewController::class, 'index'])->name('review.index');
Route::get('/reviews/create', [UserReviewController::class, 'create'])->name('review.create');
Route::post('/reviews', [UserReviewController::class, 'store'])->name('review.store');
Route::get('/reviews/{review}/edit', [UserReviewController::class, 'edit'])->name('review.edit');
Route::patch('/reviews/{review}', [UserReviewController::class, 'update'])->name('review.update');
Route::delete('/reviews/{review}', [UserReviewController::class, 'destroy'])->name('review.destroy');


// resources/views/review/index.blade.php
@foreach ($reviews as $review)
    <div>
        {{ $review->title }} ({{ $review->rating }}/5 stars)
        <p>{{ $review->content }}</p>
        @if ($review->status === 'Approved')
            Approved by Admin
        @elseif ($review->status === 'Denied')
            Denied by Admin
        @endif
    </div>
@endforeach

// resources/views/review/create.blade.php
<form method="POST" action="{{ route('review.store') }}">
    @csrf
    <label for="title">Title:</label>
    <input type="text" id="title" name="title"><br><br>
    <label for="content">Content:</label>
    <textarea id="content" name="content"></textarea><br><br>
    <label for="rating">Rating (1-5):</label>
    <select id="rating" name="rating">
        @for ($i = 1; $i <= 5; $i++)
            <option value="{{ $i }}">{{ $i }}</option>
        @endfor
    </select><br><br>
    <button type="submit">Create Review</button>
</form>

// resources/views/review/edit.blade.php
<form method="PATCH" action="{{ route('review.update', $review) }}">
    @csrf
    <label for="title">Title:</label>
    <input type="text" id="title" name="title" value="{{ $review->title }}"><br><br>
    <label for="content">Content:</label>
    <textarea id="content" name="content">{{ $review->content }}</textarea><br><br>
    <label for="rating">Rating (1-5):</label>
    <select id="rating" name="rating">
        @for ($i = 1; $i <= 5; $i++)
            <option value="{{ $i }}" {{ $review->rating === $i ? 'selected' : '' }}">{{ $i }}</option>
        @endfor
    </select><br><br>
    <button type="submit">Update Review</button>
</form>


// db.php

class Database {
    private $host = 'localhost';
    private $db_name = 'reviews_db';
    private $username = 'root';
    private $password = '';

    public function connect() {
        try {
            $conn = new PDO('mysql:host=' . $this->host . ';dbname=' . $this->db_name, $this->username, $this->password);
            return $conn;
        } catch(PDOException $e) {
            echo 'Connection failed: ' . $e->getMessage();
        }
    }

    public function query($query) {
        $stmt = $this->connect()->prepare($query);
        $stmt->execute();
        return $stmt;
    }
}


// review.php

class Review {
    private $db;

    public function __construct() {
        $this->db = new Database();
    }

    // Get all reviews for a specific user
    public function getReviews($user_id) {
        $query = "SELECT * FROM reviews WHERE user_id = :user_id";
        $stmt = $this->db->query($query);
        $stmt->bindParam(':user_id', $user_id);
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    // Get a single review by id
    public function getReview($id) {
        $query = "SELECT * FROM reviews WHERE id = :id";
        $stmt = $this->db->query($query);
        $stmt->bindParam(':id', $id);
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }

    // Create a new review
    public function createReview($title, $content, $user_id) {
        $query = "INSERT INTO reviews (title, content, user_id) VALUES (:title, :content, :user_id)";
        $stmt = $this->db->query($query);
        $stmt->bindParam(':title', $title);
        $stmt->bindParam(':content', $content);
        $stmt->bindParam(':user_id', $user_id);
        return $stmt->execute();
    }

    // Update a review
    public function updateReview($id, $title, $content) {
        $query = "UPDATE reviews SET title = :title, content = :content WHERE id = :id";
        $stmt = $this->db->query($query);
        $stmt->bindParam(':id', $id);
        $stmt->bindParam(':title', $title);
        $stmt->bindParam(':content', $content);
        return $stmt->execute();
    }

    // Delete a review
    public function deleteReview($id) {
        $query = "DELETE FROM reviews WHERE id = :id";
        $stmt = $this->db->query($query);
        $stmt->bindParam(':id', $id);
        return $stmt->execute();
    }
}


// index.php

require_once 'review.php';

$review = new Review();

if (isset($_POST['submit'])) {
    $title = $_POST['title'];
    $content = $_POST['content'];
    $user_id = $_SESSION['user_id'];

    if ($review->createReview($title, $content, $user_id)) {
        echo 'Review created successfully!';
    } else {
        echo 'Error creating review.';
    }
}

// Display all reviews for the current user
$reviews = $review->getReviews($_SESSION['user_id']);
?>

<form action="" method="post">
    <label for="title">Title:</label>
    <input type="text" id="title" name="title"><br><br>
    <label for="content">Content:</label>
    <textarea id="content" name="content"></textarea><br><br>
    <input type="submit" value="Submit Review">
</form>

<h2>My Reviews:</h2>

<ul>
    <?php foreach ($reviews as $review): ?>
        <li>
            <h3><?= $review['title'] ?></h3>
            <?= $review['content'] ?><br><br>
            <a href="#">Edit Review</a> | <a href="#">Delete Review</a>
        </li>
    <?php endforeach; ?>
</ul>


// Include the necessary libraries
require_once 'vendor/autoload.php';
use Illuminate\Database\Capsule\Manager as Capsule;

// Connect to the database
$capsule = new Capsule();
$capsule->addConnection([
    'driver' => 'mysql',
    'host' => 'localhost',
    'database' => 'reviews',
    'username' => 'root',
    'password' => '',
]);
$capsule->setAsGlobal();

// Get the current user's reviews
function getUserReviews($userId) {
  return Capsule::table('reviews')
              ->where('user_id', $userId)
              ->orderBy('created_at', 'desc')
              ->get();
}

// Create a new review
function createReview($data) {
  $review = new stdClass;
  $review->rating = $data['rating'];
  $review->review = $data['review'];
  $review->user_id = $data['user_id'];
  $review->product_id = $data['product_id'];
  
  Capsule::table('reviews')->insert($review);
}

// Get a product's reviews
function getProductReviews($productId) {
  return Capsule::table('reviews')
              ->where('product_id', $productId)
              ->orderBy('created_at', 'desc')
              ->get();
}


// Get the current user's reviews
$userId = 1;
$reviews = getUserReviews($userId);
foreach ($reviews as $review) {
  echo "Rating: {$review->rating}, Review: {$review->review}";
}

// Create a new review
$data = [
  'rating' => 5,
  'review' => 'This product is amazing!',
  'user_id' => 1,
  'product_id' => 2
];
createReview($data);

// Get a product's reviews
$productId = 2;
$reviews = getProductReviews($productId);
foreach ($reviews as $review) {
  echo "Rating: {$review->rating}, Review: {$review->review}";
}


// Connect to database
$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

// Function to add a review
function addReview($product_id, $user_id, $rating, $title, $comment) {
  try {
    $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, rating, title, comment) VALUES (:product_id, :user_id, :rating, :title, :comment)");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':comment', $comment);
    $stmt->execute();
  } catch (PDOException $e) {
    echo "Error adding review: " . $e->getMessage();
    return false;
  }
  return true;
}

// Function to get all reviews for a product
function getReviews($product_id) {
  try {
    $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo "Error getting reviews: " . $e->getMessage();
    return array();
  }
}

// Function to get a user's reviews
function getUserReviews($user_id) {
  try {
    $stmt = $db->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo "Error getting user's reviews: " . $e->getMessage();
    return array();
  }
}

// Function to update a review
function updateReview($review_id, $new_rating, $new_title, $new_comment) {
  try {
    $stmt = $db->prepare("UPDATE reviews SET rating = :new_rating, title = :new_title, comment = :new_comment WHERE id = :review_id");
    $stmt->bindParam(':review_id', $review_id);
    $stmt->bindParam(':new_rating', $new_rating);
    $stmt->bindParam(':new_title', $new_title);
    $stmt->bindParam(':new_comment', $new_comment);
    $stmt->execute();
  } catch (PDOException $e) {
    echo "Error updating review: " . $e->getMessage();
    return false;
  }
  return true;
}

// Function to delete a review
function deleteReview($review_id) {
  try {
    $stmt = $db->prepare("DELETE FROM reviews WHERE id = :review_id");
    $stmt->bindParam(':review_id', $review_id);
    $stmt->execute();
  } catch (PDOException $e) {
    echo "Error deleting review: " . $e->getMessage();
    return false;
  }
  return true;
}


// Add a new review
addReview(1, 1, 5.0, 'Great product!', 'I love this product!');

// Get all reviews for a product
$reviews = getReviews(1);
print_r($reviews);

// Get a user's reviews
$reviews = getUserReviews(1);
print_r($reviews);

// Update a review
updateReview(1, 4.0, 'Good product!', 'I like this product!');

// Delete a review
deleteReview(1);


// review.php

class Review {
  private $db;

  function __construct($db) {
    $this->db = $db;
  }

  // Create a new review
  public function create($user_id, $product_id, $rating, $content) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, content) VALUES (:user_id, :product_id, :rating, :content)";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute([
        ':user_id' => $user_id,
        ':product_id' => $product_id,
        ':rating' => $rating,
        ':content' => $content
      ]);
      return true;
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  // Read reviews for a specific product or user
  public function read($product_id = null, $user_id = null) {
    if ($product_id !== null && $user_id === null) {
      $query = "SELECT * FROM reviews WHERE product_id = :product_id";
      try {
        $stmt = $this->db->prepare($query);
        $stmt->execute([':product_id' => $product_id]);
        return $stmt->fetchAll();
      } catch (PDOException $e) {
        echo "Error reading reviews for product: " . $e->getMessage();
        return [];
      }
    } elseif ($product_id === null && $user_id !== null) {
      $query = "SELECT * FROM reviews WHERE user_id = :user_id";
      try {
        $stmt = $this->db->prepare($query);
        $stmt->execute([':user_id' => $user_id]);
        return $stmt->fetchAll();
      } catch (PDOException $e) {
        echo "Error reading reviews for user: " . $e->getMessage();
        return [];
      }
    } else {
      echo "Invalid parameters";
      return [];
    }
  }

  // Update an existing review
  public function update($id, $rating = null, $content = null) {
    if ($rating !== null || $content !== null) {
      $query = "UPDATE reviews SET rating = :rating, content = :content WHERE id = :id";
      try {
        $stmt = $this->db->prepare($query);
        $stmt->execute([
          ':rating' => $rating,
          ':content' => $content,
          ':id' => $id
        ]);
        return true;
      } catch (PDOException $e) {
        echo "Error updating review: " . $e->getMessage();
        return false;
      }
    } else {
      echo "Invalid parameters";
      return false;
    }
  }

  // Delete a review
  public function delete($id) {
    $query = "DELETE FROM reviews WHERE id = :id";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute([':id' => $id]);
      return true;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


// Create a database connection object
$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myusername', 'mypassword');

// Create a Review instance with the database connection
$review = new Review($db);

// Create a new review for user 1 and product 1
$user_id = 1;
$product_id = 1;
$rating = 5;
$content = "Great product!";
$review->create($user_id, $product_id, $rating, $content);
echo "Review created successfully";

// Read reviews for product 1
$product_reviews = $review->read($product_id);
foreach ($product_reviews as $review) {
    echo "Rating: $review[rating], Content: $review[content]";
}

// Update an existing review
$review_id = 1;
$rating = 4;
$content = "Good product!";
$updated = $review->update($review_id, $rating, $content);
echo "Review updated successfully";

// Delete a review
$deleted = $review->delete($review_id);
echo "Review deleted successfully";


// Connect to the database
$mysqli = new mysqli("localhost", "username", "password", "database");

// Function to get all reviews for a product
function getReviews($productId, $userId = null) {
  global $mysqli;
  if ($userId !== null) {
    // Get user's own reviews
    $query = "SELECT * FROM reviews WHERE product_id = ? AND user_id = ?";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param("ii", $productId, $userId);
    $stmt->execute();
  } else {
    // Get all reviews for the product
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param("i", $productId);
    $stmt->execute();
  }
  return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
}

// Function to create a new review
function createReview($product_id, $user_id, $rating, $comment) {
  global $mysqli;
  $query = "INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (?, ?, ?, ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("iiss", $product_id, $user_id, $rating, $comment);
  return $stmt->execute();
}

// Function to update a product's average rating
function updateProductRating($productId) {
  global $mysqli;
  $query = "UPDATE products SET avg_rating = (SELECT AVG(rating) FROM reviews WHERE product_id = ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("i", $productId);
  return $stmt->execute();
}

// Example usage
$userId = 1; // user ID
$productID = 1; // product ID

// Get all reviews for the product
$reviews = getReviews($productID, $userId);
print_r($reviews);

// Create a new review
createReview($productID, $userId, 4, "Good product!");

// Update the product's average rating
updateProductRating($productID);


class Review {
    private $id;
    private $user_id;
    private $product_name;
    private $rating;
    private $comment;

    public function __construct($id, $user_id, $product_name, $rating, $comment) {
        $this->id = $id;
        $this->user_id = $user_id;
        $this->product_name = $product_name;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->user_id;
    }

    public function getProductName() {
        return $this->product_name;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


class User {
    private $id;
    private $name;

    public function __construct($id, $name) {
        $this->id = $id;
        $this->name = $name;
    }

    public function getId() {
        return $this->id;
    }

    public function getName() {
        return $this->name;
    }
}


class ReviewController {
    private $reviews;

    public function __construct() {
        $this->reviews = array();
    }

    public function addReview(Review $review) {
        $this->reviews[] = $review;
    }

    public function getReviews() {
        return $this->reviews;
    }

    public function getUserReviews($user_id) {
        $user_reviews = array();
        foreach ($this->reviews as $review) {
            if ($review->getUserId() == $user_id) {
                $user_reviews[] = $review;
            }
        }
        return $user_reviews;
    }

    public function deleteReview($id) {
        $index = null;
        foreach ($this->reviews as $key => $review) {
            if ($review->getId() == $id) {
                $index = $key;
                break;
            }
        }
        if ($index !== null) {
            unset($this->reviews[$index]);
        }
    }

    public function updateReview(Review $new_review, $id) {
        foreach ($this->reviews as &$review) {
            if ($review->getId() == $id) {
                $review = $new_review;
                break;
            }
        }
    }
}


class UserController {
    private $users;

    public function __construct() {
        $this->users = array();
    }

    public function addUser(User $user) {
        $this->users[] = $user;
    }

    public function getUsers() {
        return $this->users;
    }

    public function getUser($id) {
        foreach ($this->users as $user) {
            if ($user->getId() == $id) {
                return $user;
            }
        }
        return null;
    }

    public function deleteUser($id) {
        $index = null;
        foreach ($this->users as $key => $user) {
            if ($user->getId() == $id) {
                $index = $key;
                break;
            }
        }
        if ($index !== null) {
            unset($this->users[$index]);
        }
    }

    public function updateUser(User $new_user, $id) {
        foreach ($this->users as &$user) {
            if ($user->getId() == $id) {
                $user = $new_user;
                break;
            }
        }
    }
}


require_once 'review.php';
require_once 'review_controller.php';

$reviewController = new ReviewController();

$userController = new UserController();

// Create a new user and add it to the system
$newUser = new User(1, "John Doe");
$userController->addUser($newUser);

// Create a new review and add it to the system
$newReview = new Review(1, 1, "Product X", 4, "Great product!");
$reviewController->addReview($newReview);

// Get all reviews for a user
$user_reviews = $reviewController->getUserReviews(1);
foreach ($user_reviews as $review) {
    echo $review->getProductName() . ": " . $review->getRating() . "/5 (" . $review->getComment() . ")" . "
";
}

// Update a review
$newReview = new Review(1, 1, "Product X", 5, "Amazing product!");
$reviewController->updateReview($newReview, 1);

// Get all reviews for a user (updated)
$user_reviews = $reviewController->getUserReviews(1);
foreach ($user_reviews as $review) {
    echo $review->getProductName() . ": " . $review->getRating() . "/5 (" . $review->getComment() . ")" . "
";
}


class Review {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
    }

    /**
     * Get all reviews for a product
     *
     * @param int $productId Product ID
     * @return array Reviews
     */
    public function getReviews($productId) {
        $query = "SELECT r.id, u.username, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = :productId ORDER BY r.created_at DESC";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':productId', $productId);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * Submit a new review
     *
     * @param int $userId User ID
     * @param int $productId Product ID
     * @param int $rating Rating (1-5)
     * @param string $review Review text
     */
    public function submitReview($userId, $productId, $rating, $review) {
        if ($rating < 1 || $rating > 5) {
            throw new Exception('Invalid rating');
        }
        $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:userId, :productId, :rating, :review)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        return $stmt->execute();
    }
}


require_once 'review.class.php';

$review = new Review();

if (isset($_POST['submit'])) {
    try {
        $review->submitReview($_POST['userId'], $_POST['productId'], $_POST['rating'], $_POST['review']);
        echo "Review submitted successfully!";
    } catch (Exception $e) {
        echo "Error submitting review: " . $e->getMessage();
    }
}

$reviews = $review->getReviews(1); // Replace 1 with the actual product ID

?>
<h2>Reviews</h2>
<ul>
<?php foreach ($reviews as $review): ?>
    <li>
        <strong><?= $review['username'] ?></strong> - <?= $review['rating'] ?>/5
        <p><?= nl2br($review['review']) ?></p>
    </li>
<?php endforeach; ?>
</ul>

<form action="" method="post">
    <label for="userId">User ID:</label>
    <input type="text" id="userId" name="userId"><br><br>
    <label for="productId">Product ID:</label>
    <input type="text" id="productId" name="productId"><br><br>
    <label for="rating">Rating:</label>
    <input type="number" id="rating" name="rating" min="1" max="5"><br><br>
    <label for="review">Review:</label>
    <textarea id="review" name="review"></textarea><br><br>
    <input type="submit" name="submit" value="Submit Review">
</form>


function connectToDatabase() {
    $host = 'localhost';
    $database = 'product_reviews';
    $username = 'your_username';
    $password = 'your_password';

    try {
        $dsn = "mysql:host=$host;dbname=$database";
        $pdo = new PDO($dsn, $username, $password);
        return $pdo;
    } catch (PDOException $e) {
        echo 'Connection failed: ' . $e->getMessage();
    }
}


function createUserReview($product_id, $user_id, $rating, $text) {
    $pdo = connectToDatabase();

    try {
        $stmt = $pdo->prepare('INSERT INTO reviews (product_id, user_id, rating, text) VALUES (:product_id, :user_id, :rating, :text)');
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':text', $text);
        $stmt->execute();

        return true;
    } catch (PDOException $e) {
        echo 'Error creating review: ' . $e->getMessage();
        return false;
    }
}


$product_id = 1; // ID of the product being reviewed
$user_id = 1; // ID of the user leaving the review
$rating = 4;
$text = 'Great product!';

if (createUserReview($product_id, $user_id, $rating, $text)) {
    echo 'Review created successfully!';
} else {
    echo 'Error creating review';
}


function add_review($data) {
  // Validate input data
  if (!isset($data['user_id']) || !isset($data['product_name']) || !isset($data['rating']) || !isset($data['review_text'])) {
    return array('error' => 'Invalid data');
  }

  try {
    // Insert review into database
    $query = "INSERT INTO reviews (user_id, product_name, rating, review_text) VALUES (:user_id, :product_name, :rating, :review_text)";
    $stmt = db()->prepare($query);
    $stmt->execute(array(
      ':user_id' => $data['user_id'],
      ':product_name' => $data['product_name'],
      ':rating' => $data['rating'],
      ':review_text' => $data['review_text']
    ));

    return array('message' => 'Review added successfully');
  } catch (PDOException $e) {
    return array('error' => 'Database error: ' . $e->getMessage());
  }
}

function get_reviews($product_name = null, $user_id = null, $limit = 10, $offset = 0) {
  try {
    // Prepare query
    $query = "SELECT * FROM reviews";
    if ($product_name) $query .= " WHERE product_name LIKE :product_name";
    if ($user_id) $query .= " AND user_id = :user_id";

    // Execute query with prepared statement
    $stmt = db()->prepare($query);
    if ($product_name) {
      $stmt->bindValue(':product_name', '%' . $product_name . '%');
    }
    if ($user_id) {
      $stmt->bindValue(':user_id', $user_id, PDO::PARAM_INT);
    }

    // Execute query and retrieve results
    $stmt->execute();
    return db()->fetch_all($stmt, PDO::FETCH_ASSOC);

  } catch (PDOException $e) {
    return array('error' => 'Database error: ' . $e->getMessage());
  }
}

function update_review($data) {
  // Validate input data
  if (!isset($data['id']) || !isset($data['product_name']) || !isset($data['rating']) || !isset($data['review_text'])) {
    return array('error' => 'Invalid data');
  }

  try {
    // Update review in database
    $query = "UPDATE reviews SET product_name = :product_name, rating = :rating, review_text = :review_text WHERE id = :id";
    $stmt = db()->prepare($query);
    $stmt->execute(array(
      ':id' => $data['id'],
      ':product_name' => $data['product_name'],
      ':rating' => $data['rating'],
      ':review_text' => $data['review_text']
    ));

    return array('message' => 'Review updated successfully');
  } catch (PDOException $e) {
    return array('error' => 'Database error: ' . $e->getMessage());
  }
}

function delete_review($id) {
  try {
    // Delete review from database
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = db()->prepare($query);
    $stmt->execute(array(':id' => $id));

    return array('message' => 'Review deleted successfully');
  } catch (PDOException $e) {
    return array('error' => 'Database error: ' . $e->getMessage());
  }
}


// Add review
$data = array(
  'user_id' => 1,
  'product_name' => 'Product X',
  'rating' => 5,
  'review_text' => 'This product is awesome!'
);
$result = add_review($data);

// Get reviews for a specific product
$product_name = 'Product Y';
$reviews = get_reviews($product_name, null, 10, 0);

// Update review
$data = array(
  'id' => 1,
  'product_name' => 'Product Z',
  'rating' => 4,
  'review_text' => 'This product is okay.'
);
$result = update_review($data);

// Delete review
$id = 2;
$result = delete_review($id);


<?php
// Configuration array
$config = [
    'reviews_table' => 'reviews',
    'product_table' => 'products'
];

// Function to get all reviews
function getReviews($conn) {
    $query = "SELECT * FROM `" . $config['reviews_table'] . "`";
    return $conn->query($query)->fetchAll();
}

// Function to submit a new review
function submitReview($conn, $productId, $rating, $comment) {
    $query = "
        INSERT INTO `" . $config['reviews_table'] . "` 
        (`product_id`, `rating`, `comment`) 
        VALUES (:product_id, :rating, :comment)
    ";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    return $stmt->execute();
}

// Function to get average rating for a product
function getAverageRating($conn, $productId) {
    $query = "
        SELECT AVG(`rating`) as `average_rating` 
        FROM `" . $config['reviews_table'] . "` 
        WHERE `product_id` = :product_id
    ";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':product_id', $productId);
    return $stmt->execute() ? $stmt->fetch()['average_rating'] : null;
}

// Database connection configuration
$dsn = 'mysql:host=localhost;dbname=reviews_database';
$user = 'your_username';
$password = 'your_password';

try {
    // Connect to the database
    $conn = new PDO($dsn, $user, $password);
} catch (PDOException $e) {
    echo "Error connecting to the database: " . $e->getMessage();
}

// Example usage:

// Get all reviews
$reviews = getReviews($conn);

// Submit a new review
if ($_POST['submit_review']) {
    submitReview(
        $conn, 
        $_POST['product_id'], 
        $_POST['rating'], 
        $_POST['comment']
    );
}

// Display average rating for each product
foreach ($config['products'] as $productId => $productName) {
    echo "Average Rating for $productName: " . getAverageRating($conn, $productId);
}
?>


<form action="" method="post">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id"><br><br>
    <label for="rating">Rating (1-5):</label>
    <input type="number" id="rating" name="rating" min="1" max="5"><br><br>
    <label for="comment">Comment:</label>
    <textarea id="comment" name="comment"></textarea><br><br>
    <input type="submit" name="submit_review" value="Submit Review">
</form>


// config.php: Database configuration
<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

$dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME;
$options = [
    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
];

try {
    $pdo = new PDO($dsn, DB_USER, DB_PASSWORD, $options);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}
?>

// review.php
<?php
require_once 'config.php';

if (isset($_POST['review'])) {
    // Handle submission of a new review
    $rating = $_POST['rating'];
    $user_name = $_POST['user_name'];
    $review = $_POST['review'];
    $product_id = (int) $_GET['id'];

    try {
        $stmt = $pdo->prepare('INSERT INTO reviews SET product_id = :product_id, user_name = :user_name, rating = :rating, review = :review');
        $stmt->execute([
            ':product_id' => $product_id,
            ':user_name' => $user_name,
            ':rating' => (float) $rating,
            ':review' => $review
        ]);

        echo 'Review submitted successfully!';
    } catch (PDOException $e) {
        echo 'Failed to submit review: ' . $e->getMessage();
    }
} else if (isset($_GET['id'])) {
    // Display reviews for a specific product
    $product_id = (int) $_GET['id'];

    try {
        $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
        $stmt->execute([':product_id' => $product_id]);

        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
        echo 'Reviews for "' . getProductName($product_id) . '":';
        foreach ($reviews as $review) {
            // Display average rating
            $avgRating = calculateAverageRating($product_id);
            echo '<h2>' . $review['user_name'] . '</h2>';
            echo '<p>Rating: <strong>' . $review['rating'] . '/5</strong></p>';
            echo '<p>Review: ' . $review['review'] . '</p>';
        }
    } catch (PDOException $e) {
        echo 'Failed to retrieve reviews: ' . $e->getMessage();
    }

    // Helper function to calculate average rating
    function calculateAverageRating($product_id)
    {
        try {
            $stmt = $pdo->prepare('SELECT AVG(rating) AS avg_rating FROM reviews WHERE product_id = :product_id');
            $stmt->execute([':product_id' => (int) $product_id]);

            return $stmt->fetchColumn();
        } catch (PDOException $e) {
            echo 'Failed to calculate average rating: ' . $e->getMessage();
        }
    }

    // Helper function to get product name
    function getProductName($id)
    {
        try {
            $stmt = $pdo->prepare('SELECT name FROM products WHERE id = :id');
            $stmt->execute([':id' => (int) $id]);

            return $stmt->fetchColumn();
        } catch (PDOException $e) {
            echo 'Failed to retrieve product name: ' . $e->getMessage();
        }
    }
}
?>

// review-form.php
<?php
require_once 'config.php';
?>

<form method="post" action="review.php">
    <label for="rating">Rating:</label>
    <input type="number" id="rating" name="rating" step="0.01" required>

    <br><br>

    <label for="user_name">Your Name:</label>
    <input type="text" id="user_name" name="user_name" required>

    <br><br>

    <textarea id="review" name="review" cols="30" rows="10" placeholder="Write your review here..."></textarea>

    <input type="hidden" name="product_id" value="<?php echo (int) $_GET['id']; ?>">

    <button type="submit" name="review">Submit Review</button>
</form>


// db_config.php - database connection settings
$db_host = 'localhost';
$db_user = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to the database
function connectDB() {
  global $db_host, $db_user, $db_password, $db_name;
  $conn = mysqli_connect($db_host, $db_user, $db_password);
  if (!$conn) {
    die('Could not connect: ' . mysqli_error($conn));
  }
  mysqli_select_db($conn,$db_name);
  return $conn;
}

// Add a new review to the database
function addReview($product_id, $reviewer_name, $review_text, $rating) {
  global $db_host, $db_user, $db_password, $db_name;
  $conn = connectDB();
  $query = "INSERT INTO reviews (product_id, reviewer_name, review_text, rating)
            VALUES ('$product_id', '$reviewer_name', '$review_text', '$rating')";
  if (!mysqli_query($conn,$query)) {
    die('Error inserting data: ' . mysqli_error($conn));
  }
  mysqli_close($conn);
}

// Retrieve reviews from the database
function getReviews() {
  global $db_host, $db_user, $db_password, $db_name;
  $conn = connectDB();
  $query = "SELECT * FROM reviews";
  $result = mysqli_query($conn,$query);
  if (!$result) {
    die('Error retrieving data: ' . mysqli_error($conn));
  }
  while ($row = mysqli_fetch_array($result)) {
    echo "Review ID: " . $row['id'] . "<br>";
    echo "Product ID: " . $row['product_id'] . "<br>";
    echo "Reviewer Name: " . $row['reviewer_name'] . "<br>";
    echo "Review Text: " . $row['review_text'] . "<br>";
    echo "Rating: " . $row['rating'] . "/5<br><hr>";
  }
  mysqli_close($conn);
}

// Example usage
product_id = 1;
$reviewer_name = 'John Doe';
$review_text = 'Great product!';
$rating = 5;

addReview(product_id, $reviewer_name, $review_text, $rating);

echo '<h2>Reviews</h2>';
getReviews();


// database connection settings
$host = 'localhost';
$dbname = 'reviews_database';
$username = 'reviews_user';
$password = 'password';

// connect to the database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

function create_review($user_id, $product_id, $rating, $review) {
  // insert review into the database
  $stmt = $conn->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)');
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  $stmt->execute();
}

function get_reviews($product_id) {
  // retrieve reviews for a specific product
  $stmt = $conn->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  return $stmt->fetchAll();
}

function get_user_reviews($user_id) {
  // retrieve reviews submitted by a specific user
  $stmt = $conn->prepare('SELECT * FROM reviews WHERE user_id = :user_id');
  $stmt->bindParam(':user_id', $user_id);
  $stmt->execute();
  return $stmt->fetchAll();
}


// create a new review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = 'This product is amazing!';
create_review($user_id, $product_id, $rating, $review);

// retrieve reviews for a specific product
$product_id = 1;
$reviews = get_reviews($product_id);
print_r($reviews);

// retrieve reviews submitted by a specific user
$user_id = 1;
$reviews = get_user_reviews($user_id);
print_r($reviews);


try {
  $stmt->execute();
} catch (PDOException $e) {
  echo 'Error: ' . $e->getMessage();
}


function add_review($product_id, $user_id, $review, $rating) {
  // Database connection
  require_once 'database.php';
  
  // Prepare query
  $query = "INSERT INTO reviews (product_id, user_id, review, rating)
            VALUES (:product_id, :user_id, :review, :rating)";
  
  // Execute query
  try {
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':rating', $rating);
    $stmt->execute();
    
    // Return the newly inserted review ID
    return $pdo->lastInsertId();
  } catch (PDOException $e) {
    echo "Error adding review: " . $e->getMessage();
    return false;
  }
}


function get_reviews($product_id, $limit = null, $offset = null) {
  // Database connection
  require_once 'database.php';
  
  // Prepare query
  $query = "SELECT r.id, r.review, r.rating, u.username 
            FROM reviews r
            INNER JOIN users u ON r.user_id = u.id
            WHERE product_id = :product_id";
  
  // Execute query with optional limit and offset
  if ($limit && $offset) {
    $query .= " LIMIT :limit OFFSET :offset";
    
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':limit', $limit);
    $stmt->bindParam(':offset', $offset);
    $stmt->bindParam(':product_id', $product_id);
  } else {
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
  }
  
  try {
    $stmt->execute();
    
    // Fetch results
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo "Error fetching reviews: " . $e->getMessage();
    return array();
  }
}


$product_id = 1;
$user_id = 2;
$review = 'Great product!';
$rating = 5;

$review_id = add_review($product_id, $user_id, $review, $rating);
if ($review_id) {
  echo "Review added successfully!";
} else {
  echo "Failed to add review.";
}


$product_id = 1;
$limit = 10;
$offset = 0;

$reviews = get_reviews($product_id, $limit, $offset);
if ($reviews) {
  foreach ($reviews as $review) {
    echo "Review ID: " . $review['id'] . "
";
    echo "Review Text: " . $review['review'] . "
";
    echo "Rating: " . $review['rating'] . "/5
";
    echo "Username: " . $review['username'] . "
";
  }
} else {
  echo "No reviews found.";
}


// Include the database connection file (assuming it's named 'db.php')
require_once 'db.php';

function addReview($userId, $productId, $reviewText, $rating) {
    // Prepare the query to insert a new review
    $stmt = $pdo->prepare('INSERT INTO reviews (user_id, product_id, review_text, rating)
                           VALUES (:user_id, :product_id, :review_text, :rating)');
    
    // Bind the parameters
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':review_text', $reviewText);
    $stmt->bindParam(':rating', $rating);
    
    // Execute the query
    if ($stmt->execute()) {
        return true; // Review added successfully
    } else {
        return false; // Error adding review
    }
}

function getReviews($productId) {
    // Prepare the query to retrieve reviews for a specific product
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    
    // Bind the parameter
    $stmt->bindParam(':product_id', $productId);
    
    // Execute the query and return the result set
    if ($stmt->execute()) {
        return $stmt->fetchAll(PDO::FETCH_ASSOC); // Return an array of review data
    } else {
        return false; // Error retrieving reviews
    }
}

function updateReview($reviewId, $newText, $newRating) {
    // Prepare the query to update a specific review
    $stmt = $pdo->prepare('UPDATE reviews SET review_text = :new_text, rating = :new_rating
                           WHERE id = :id');
    
    // Bind the parameters
    $stmt->bindParam(':new_text', $newText);
    $stmt->bindParam(':new_rating', $newRating);
    $stmt->bindParam(':id', $reviewId);
    
    // Execute the query and return true if successful, false otherwise
    return ($stmt->execute() ? true : false);
}

function deleteReview($reviewId) {
    // Prepare the query to delete a specific review
    $stmt = $pdo->prepare('DELETE FROM reviews WHERE id = :id');
    
    // Bind the parameter
    $stmt->bindParam(':id', $reviewId);
    
    // Execute the query and return true if successful, false otherwise
    return ($stmt->execute() ? true : false);
}


// Connect to the database (assuming you've defined a function in 'db.php')
$conn = connectToDatabase();

// Add a new review
$userId = 1;
$product_id = 5;
(review_text = "Great product!");
$rating = 4;

if (addReview($userId, $product_id, $reviewText, $rating)) {
    echo "Review added successfully!";
} else {
    echo "Error adding review.";
}

// Get reviews for a specific product
$productId = 5;
$reviews = getReviews($productId);

if ($reviews) {
    foreach ($reviews as $review) {
        echo "User ID: $review[user_id], Rating: $review[rating]
";
        echo "$review[review_text]
";
    }
} else {
    echo "Error retrieving reviews.";
}

// Update a review
$reviewId = 10;
$newText = "Updated review text!";
$newRating = 5;

if (updateReview($reviewId, $newText, $newRating)) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review.";
}

// Delete a review
$reviewId = 15;

if (deleteReview($reviewId)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}


class ReviewSystem {
  private $db;

  public function __construct() {
    // Connect to the database
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  /**
   * Get all reviews for a product
   *
   * @param int $productId ID of the product to get reviews for
   * @return array Reviews for the product
   */
  public function getProductReviews($productId) {
    $stmt = $this->db->prepare('SELECT r.* FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = :product_id');
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Get a single review by ID
   *
   * @param int $reviewId ID of the review to get
   * @return array Review data
   */
  public function getReview($reviewId) {
    $stmt = $this->db->prepare('SELECT r.* FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.id = :id');
    $stmt->bindParam(':id', $reviewId);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  /**
   * Create a new review
   *
   * @param array $data Review data to create (product_id, user_id, rating, review)
   * @return int ID of the newly created review
   */
  public function createReview($data) {
    $stmt = $this->db->prepare('INSERT INTO reviews SET product_id = :product_id, user_id = :user_id, rating = :rating, review = :review');
    $stmt->bindParam(':product_id', $data['product_id']);
    $stmt->bindParam(':user_id', $data['user_id']);
    $stmt->bindParam(':rating', $data['rating']);
    $stmt->bindParam(':review', $data['review']);
    if ($stmt->execute()) {
      return $this->db->lastInsertId();
    } else {
      throw new Exception('Failed to create review');
    }
  }

  /**
   * Update an existing review
   *
   * @param int $reviewId ID of the review to update
   * @param array $data Review data to update (product_id, user_id, rating, review)
   */
  public function updateReview($reviewId, $data) {
    $stmt = $this->db->prepare('UPDATE reviews SET product_id = :product_id, user_id = :user_id, rating = :rating, review = :review WHERE id = :id');
    $stmt->bindParam(':id', $reviewId);
    $stmt->bindParam(':product_id', $data['product_id']);
    $stmt->bindParam(':user_id', $data['user_id']);
    $stmt->bindParam(':rating', $data['rating']);
    $stmt->bindParam(':review', $data['review']);
    if ($stmt->execute()) {
      return true;
    } else {
      throw new Exception('Failed to update review');
    }
  }

  /**
   * Delete a review by ID
   *
   * @param int $reviewId ID of the review to delete
   */
  public function deleteReview($reviewId) {
    $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :id');
    $stmt->bindParam(':id', $reviewId);
    if ($stmt->execute()) {
      return true;
    } else {
      throw new Exception('Failed to delete review');
    }
  }
}


$reviewSystem = new ReviewSystem();

// Get all reviews for a product
$productReviews = $reviewSystem->getProductReviews(1);
echo '<h2>Reviews for Product 1</h2>';
foreach ($productReviews as $review) {
  echo '<p>Rating: ' . $review['rating'] . ', Review: ' . $review['review'] . '</p>';
}

// Get a single review by ID
$singleReview = $reviewSystem->getReview(1);
echo '<h2>Single Review</h2>';
echo '<p>Rating: ' . $singleReview['rating'] . ', Review: ' . $singleReview['review'] . '</p>';

// Create a new review
$newReviewData = array(
  'product_id' => 2,
  'user_id' => 1,
  'rating' => 5,
  'review' => 'This is a great product!'
);
$newReviewId = $reviewSystem->createReview($newReviewData);
echo '<h2>New Review Created!</h2>';
echo '<p>ID: ' . $newReviewId . '</p>';

// Update an existing review
$updatedReviewData = array(
  'product_id' => 1,
  'user_id' => 2,
  'rating' => 4,
  'review' => 'This product is okay'
);
$reviewSystem->updateReview(1, $updatedReviewData);

// Delete a review by ID
$reviewSystem->deleteReview(1);


<?php

// Database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to get user reviews
function getUserReviews() {
    global $conn;
    
    // SQL query to retrieve user reviews
    $query = "SELECT * FROM reviews WHERE review_type='user'";
    
    // Execute the query
    $result = $conn->query($query);
    
    // Check if there are any results
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            // Process each row of data
            echo "Review ID: " . $row["review_id"] . "<br>";
            echo "User Name: " . $row["user_name"] . "<br>";
            echo "Review Text: " . $row["review_text"] . "<br>";
            echo "<hr>";
        }
    } else {
        echo "No reviews found.";
    }
}

// Function to add a new user review
function addUserReview($data) {
    global $conn;
    
    // SQL query to insert new review into database
    $query = "INSERT INTO reviews (user_name, review_text, review_type) VALUES ('" . $data["username"] . "', '" . $data["reviewtext"] . "', 'user')";
    
    // Execute the query
    if ($conn->query($query) === TRUE) {
        echo "Review added successfully.";
    } else {
        echo "Error adding review: " . $conn->error;
    }
}

// Function to get average rating for a product or service
function getAverageRating($productID) {
    global $conn;
    
    // SQL query to retrieve average rating
    $query = "SELECT AVG(review_rating) AS avg_rating FROM reviews WHERE product_id=$productID";
    
    // Execute the query
    $result = $conn->query($query);
    
    // Check if there are any results
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            echo "Average Rating: " . $row["avg_rating"] . "/5";
        }
    } else {
        echo "No ratings found.";
    }
}

?>


getUserReviews();


$data = array("username" => "JohnDoe", "reviewtext" => "This product is amazing!");
addUserReview($data);


$productID = 123;
getAverageRating($productID);


<?php

// Configuration
$database = array(
    'host' => 'localhost',
    'username' => 'your_username',
    'password' => 'your_password',
    'database' => 'your_database'
);

// Function to connect to database
function connect_to_database() {
    $conn = new mysqli($GLOBALS['database']['host'], $GLOBALS['database']['username'], $GLOBALS['database']['password'], $GLOBALS['database']['database']);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Function to add a review
function add_review($user_id, $product_id, $rating, $comment) {
    $conn = connect_to_database();
    $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("iiis", $user_id, $product_id, $rating, $comment);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Function to view reviews
function view_reviews($product_id = null) {
    $conn = connect_to_database();
    if ($product_id === null) {
        $stmt = $conn->prepare("SELECT * FROM reviews");
    } else {
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = ?");
        $stmt->bind_param("i", $product_id);
    }
    $stmt->execute();
    return $stmt->get_result();
}

// Function to edit a review
function edit_review($id, $rating, $comment) {
    $conn = connect_to_database();
    $stmt = $conn->prepare("UPDATE reviews SET rating = ?, comment = ? WHERE id = ?");
    $stmt->bind_param("iis", $rating, $comment, $id);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Function to delete a review
function delete_review($id) {
    $conn = connect_to_database();
    $stmt = $conn->prepare("DELETE FROM reviews WHERE id = ?");
    $stmt->bind_param("i", $id);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

?>


// Add a review for a product
$product_id = 1; // ID of the product to add review for
$user_id = 1; // ID of the user adding review
$rating = 5; // Rating out of 5 for the review
$comment = "This product is amazing!"; // Comment for the review
add_review($user_id, $product_id, $rating, $comment);

// View reviews for a specific product
$product_id = 1;
$reviews = view_reviews($product_id);
while ($review = $reviews->fetch_assoc()) {
    echo "User ID: " . $review['user_id'] . ", Rating: " . $review['rating'] . ", Comment: " . $review['comment'];
}

// Edit a review
$review_id = 1; // ID of the review to edit
$new_rating = 4; // New rating for the review
$new_comment = "This product is great!"; // New comment for the review
edit_review($review_id, $new_rating, $new_comment);

// Delete a review
$review_id = 1;
delete_review($review_id);


// models/Review.php

class Review {
    private $id;
    private $user_id;
    private $review;
    private $rating;

    public function __construct($id, $user_id, $review, $rating) {
        $this->id = $id;
        $this->user_id = $user_id;
        $this->review = $review;
        $this->rating = $rating;
    }

    // Getters and setters
    public function getId() { return $this->id; }
    public function getUserID() { return $this->user_id; }
    public function getReview() { return $this->review; }
    public function getRating() { return $this->rating; }

    public static function getAllReviews($db) {
        // Retrieve all reviews from database
        $query = "SELECT * FROM reviews";
        $results = mysqli_query($db, $query);
        $reviews = array();

        while ($review = mysqli_fetch_assoc($results)) {
            $reviews[] = new Review(
                $review['id'],
                $review['user_id'],
                $review['review'],
                $review['rating']
            );
        }

        return $reviews;
    }
}


// models/User.php

class User {
    private $id;
    private $username;

    public function __construct($id, $username) {
        $this->id = $id;
        $this->username = $username;
    }

    // Getters and setters
    public function getID() { return $this->id; }
    public function getUsername() { return $this->username; }

    public static function getUser($id, $db) {
        // Retrieve user data from database
        $query = "SELECT * FROM users WHERE id = '$id'";
        $result = mysqli_query($db, $query);

        if ($user = mysqli_fetch_assoc($result)) {
            return new User($user['id'], $user['username']);
        } else {
            return null;
        }
    }
}


// controllers/ReviewController.php

class ReviewController {
    public function index() {
        // Retrieve all reviews from database and display on page
        $reviews = Review::getAllReviews($db);

        foreach ($reviews as $review) {
            echo "Username: " . User::getUser($review->getUserID(), $db)->getUsername();
            echo " - Rating: " . $review->getRating() . "/5";
            echo " - Review: " . $review->getReview();
            echo "<br>";
        }
    }

    public function create() {
        // Create a new review and store it in database
        if (isset($_POST['submit'])) {
            $review = $_POST['review'];
            $rating = $_POST['rating'];

            $query = "INSERT INTO reviews SET user_id = '".$_SESSION['user_id']."', review = '$review', rating = '$rating'";
            mysqli_query($db, $query);

            header('Location: index.php');
        }
    }

    public function update() {
        // Update an existing review and store it in database
        if (isset($_POST['submit'])) {
            $id = $_GET['id'];
            $review = $_POST['review'];
            $rating = $_POST['rating'];

            $query = "UPDATE reviews SET user_id = '".$_SESSION['user_id']."', review = '$review', rating = '$rating' WHERE id = '$id'";
            mysqli_query($db, $query);

            header('Location: index.php');
        }
    }

    public function delete() {
        // Delete a review from database
        if (isset($_GET['id'])) {
            $id = $_GET['id'];

            $query = "DELETE FROM reviews WHERE id = '$id'";
            mysqli_query($db, $query);

            header('Location: index.php');
        }
    }
}


// views/review.html

<?php foreach ($reviews as $review) { ?>
  <p>Username: <?php echo User::getUser($review->getUserID(), $db)->getUsername(); ?></p>
  <p>Rating: <?php echo $review->getRating() ?>/5</p>
  <p><?php echo $review->getReview(); ?></p>
<?php } ?>


// routes.php

Route::get('/', 'ReviewController@index');
Route::post('/create', 'ReviewController:create');
Route::get('/update/{id}', 'ReviewController:update');
Route::post('/update/{id}', 'ReviewController:update');
Route::get('/delete/{id}', 'ReviewController:delete');


class Review {
    private $name;
    private $rating;
    private $review;

    public function __construct($name, $rating, $review) {
        $this->name = $name;
        $this->rating = $rating;
        $this->review = $review;
    }

    public function getName() {
        return $this->name;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}

class ReviewManager {
    private $reviews;

    public function __construct() {
        $this->reviews = array();
    }

    public function addReview(Review $review) {
        array_push($this->reviews, $review);
    }

    public function getReviews() {
        return $this->reviews;
    }
}

// Example usage
$manager = new ReviewManager();

// Submitting a review
$name = 'John Doe';
$rating = 5;
$reviewText = 'This product is amazing!';

$review = new Review($name, $rating, $reviewText);
$manager->addReview($review);

// Displaying all reviews
foreach ($manager->getReviews() as $i => $review) {
    echo "Review #{$i+1} by {$review->getName()} (Rating: {$review->getRating()}/5)
";
    echo "{$review->getReview()}

";
}


// Database connection settings
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

// Connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);


class Review {
    private $conn;

    public function __construct($conn) {
        $this->conn = $conn;
    }

    // Function to create a new review
    public function create_review($product_id, $user_id, $rating, $review) {
        try {
            // Prepare SQL query
            $stmt = $this->conn->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':user_id', $user_id);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':review', $review);

            // Execute query
            if ($stmt->execute()) {
                return true;
            } else {
                throw new Exception('Failed to create review');
            }
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
            return false;
        }
    }

    // Function to retrieve reviews for a product
    public function get_reviews($product_id, $limit = 10, $offset = 0) {
        try {
            // Prepare SQL query
            $stmt = $this->conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id ORDER BY id DESC LIMIT :limit OFFSET :offset");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':limit', $limit);
            $stmt->bindParam(':offset', $offset);

            // Execute query
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
            return false;
        }
    }

    // Function to update a review
    public function update_review($review_id, $rating = null, $review = null) {
        try {
            // Prepare SQL query
            if ($rating !== null && $review !== null) {
                $stmt = $this->conn->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
                $stmt->bindParam(':id', $review_id);
                $stmt->bindParam(':rating', $rating);
                $stmt->bindParam(':review', $review);
            } elseif ($rating !== null) {
                $stmt = $this->conn->prepare("UPDATE reviews SET rating = :rating WHERE id = :id");
                $stmt->bindParam(':id', $review_id);
                $stmt->bindParam(':rating', $rating);
            } elseif ($review !== null) {
                $stmt->prepare("UPDATE reviews SET review = :review WHERE id = :id");
                $stmt->bindParam(':id', $review_id);
                $stmt->bindParam(':review', $review);
            }

            // Execute query
            if ($stmt->execute()) {
                return true;
            } else {
                throw new Exception('Failed to update review');
            }
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
            return false;
        }
    }

    // Function to delete a review
    public function delete_review($review_id) {
        try {
            // Prepare SQL query
            $stmt = $this->conn->prepare("DELETE FROM reviews WHERE id = :id");
            $stmt->bindParam(':id', $review_id);

            // Execute query
            if ($stmt->execute()) {
                return true;
            } else {
                throw new Exception('Failed to delete review');
            }
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
            return false;
        }
    }
}


// Create a new review instance
$review = new Review($conn);

// Create a new review
$product_id = 1;
$user_id = 1;
$rating = 5;
$review_text = 'Great product!';
if ($review->create_review($product_id, $user_id, $rating, $review_text)) {
    echo 'Review created successfully';
} else {
    echo 'Failed to create review';
}

// Retrieve reviews for a product
$product_id = 1;
$limit = 10;
$offset = 0;
$reviews = $review->get_reviews($product_id, $limit, $offset);
foreach ($reviews as $review) {
    echo $review['rating'] . ': ' . $review['review'];
}

// Update a review
$review_id = 1;
$rating = 4;
$review_text = 'Good product!';
if ($review->update_review($review_id, $rating, $review_text)) {
    echo 'Review updated successfully';
} else {
    echo 'Failed to update review';
}

// Delete a review
$review_id = 1;
if ($review->delete_review($review_id)) {
    echo 'Review deleted successfully';
} else {
    echo 'Failed to delete review';
}


class User {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
    }

    public function createUser($username, $password) {
        $query = "INSERT INTO users (username, password) VALUES (:username, :password)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':password', password_hash($password, PASSWORD_DEFAULT));
        $stmt->execute();
    }

    public function login($username, $password) {
        $query = "SELECT * FROM users WHERE username = :username";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':username', $username);
        $stmt->execute();
        $user = $stmt->fetch();
        if ($user && password_verify($password, $user['password'])) {
            return true;
        }
        return false;
    }
}


class Product {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
    }

    public function createProduct($name, $description) {
        $query = "INSERT INTO products (name, description) VALUES (:name, :description)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':name', $name);
        $stmt->bindParam(':description', $description);
        $stmt->execute();
    }

    public function getProduct($id) {
        $query = "SELECT * FROM products WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':id', $id);
        $stmt->execute();
        return $stmt->fetch();
    }
}


class Review {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
    }

    public function createReview($product_id, $user_id, $rating, $review) {
        $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        $stmt->execute();
    }

    public function getReviewsForProduct($id) {
        $query = "SELECT * FROM reviews WHERE product_id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':id', $id);
        $stmt->execute();
        return $stmt->fetchAll();
    }
}


class ReviewController {
    private $review;

    public function __construct() {
        $this->review = new Review();
    }

    public function createReview($product_id, $user_id, $rating, $review) {
        $this->review->createReview($product_id, $user_id, $rating, $review);
        return "Review created successfully!";
    }

    public function getReviewsForProduct($id) {
        return $this->review->getReviewsForProduct($id);
    }
}


$router->get('/reviews/{id}', 'ReviewController@getReviewsForProduct');
$router->post('/reviews', 'ReviewController@createReview');


@extends('layout')

@section('content')
    <h1>Leave a review for {{ $product['name'] }}</h1>
    <form method="POST" action="/reviews">
        @csrf
        <input type="hidden" name="product_id" value="{{ $product['id'] }}">
        <label for="rating">Rating:</label>
        <select id="rating" name="rating">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
        </select>
        <label for="review">Review:</label>
        <textarea id="review" name="review"></textarea>
        <input type="submit" value="Submit review">
    </form>
@endsection


function getReviews() {
  // Load reviews from JSON file
  $reviews = json_decode(file_get_contents('reviews.json'), true);

  return $reviews;
}

function addReview($username, $rating, $review) {
  // Load reviews from JSON file
  $reviews = getReviews();

  // Add new review to array
  $reviews[] = [
    'username' => $username,
    'rating' => $rating,
    'review' => $review,
  ];

  // Save updated reviews back to JSON file
  file_put_contents('reviews.json', json_encode($reviews));

  return true;
}

function getReview($id) {
  // Load reviews from JSON file
  $reviews = getReviews();

  // Find review by ID and return it
  foreach ($reviews as $review) {
    if ($review['id'] == $id) {
      return $review;
    }
  }

  return null;
}

function deleteReview($id) {
  // Load reviews from JSON file
  $reviews = getReviews();

  // Find review by ID and remove it from array
  foreach ($reviews as $key => $review) {
    if ($review['id'] == $id) {
      unset($reviews[$key]);
    }
  }

  // Save updated reviews back to JSON file
  file_put_contents('reviews.json', json_encode($reviews));

  return true;
}


// Add a new review
$username = 'JohnDoe';
$rating = 5;
$review = 'Great product!';

addReview($username, $rating, $review);

// Get all reviews
$reviews = getReviews();
print_r($reviews);

// Get a specific review by ID
$id = 1;
$review = getReview($id);
var_dump($review);

// Delete a review by ID
deleteReview($id);


// db.php (database connection file)
<?php
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "reviews";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Close the connection
function close_connection() {
    global $conn;
    if (isset($conn)) {
        $conn->close();
    }
}


// review_functions.php
<?php

include 'db.php';

function create_review($user_id, $product_id, $rating, $review) {
    // Check if product and user exist in database
    $query = "SELECT * FROM products WHERE id = '$product_id'";
    $result = mysqli_query($conn, $query);
    if (mysqli_num_rows($result) < 1) {
        return false;
    }

    $query = "SELECT * FROM users WHERE id = '$user_id'";
    $result = mysqli_query($conn, $query);
    if (mysqli_num_rows($result) < 1) {
        return false;
    }

    // Insert review into database
    $query = "INSERT INTO reviews (user_id, product_id, rating, review)
              VALUES ('$user_id', '$product_id', '$rating', '$review')";
    $result = mysqli_query($conn, $query);

    if ($result) {
        return true;
    } else {
        return false;
    }
}

function get_reviews() {
    // Get all reviews from database
    $query = "SELECT * FROM reviews";
    $result = mysqli_query($conn, $query);
    $reviews = array();
    while ($row = mysqli_fetch_assoc($result)) {
        $reviews[] = $row;
    }

    return $reviews;
}

function update_review($id, $rating, $review) {
    // Update review in database
    $query = "UPDATE reviews SET rating = '$rating', review = '$review' WHERE id = '$id'";
    $result = mysqli_query($conn, $query);

    if ($result) {
        return true;
    } else {
        return false;
    }
}

function delete_review($id) {
    // Delete review from database
    $query = "DELETE FROM reviews WHERE id = '$id'";
    $result = mysqli_query($conn, $query);

    if ($result) {
        return true;
    } else {
        return false;
    }
}


// Create a new review
$user_id = 1; // ID of user creating the review
$product_id = 2; // ID of product being reviewed
$rating = 4; // Rating given by user (out of 5)
$review = 'This is an amazing product!';

create_review($user_id, $product_id, $rating, $review);

// Get all reviews
$reviews = get_reviews();
foreach ($reviews as $review) {
    echo "ID: " . $review['id'] . ", Rating: " . $review['rating'] . ", Review: " . $review['review'];
}

// Update a review
$id = 1; // ID of review to update
$rating = 5;
$review = 'This product is even better now!';

update_review($id, $rating, $review);

// Delete a review
delete_review(2);


function displayReviews($productId) {
  // Connect to database
  $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

  // Prepare SQL query
  $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC");
  $stmt->bindParam(':product_id', $productId);

  // Execute query and fetch results
  $stmt->execute();
  $reviews = $stmt->fetchAll();

  // Close database connection
  $db = null;

  // Display reviews
  foreach ($reviews as $review) {
    echo "Rating: {$review['rating']}/5
";
    echo "Review:
{$review['review']}

";
  }
}

function submitReview($productId, $userId, $rating, $review) {
  // Connect to database
  $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

  // Prepare SQL query
  $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)");
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':user_id', $userId);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);

  // Execute query
  $stmt->execute();

  // Close database connection
  $db = null;
}


// Display reviews for product with ID 1
displayReviews(1);

// Submit review for product with ID 2 as user with ID 123
submitReview(2, 123, 4, 'Great product!');


class UserReview {
  private $id;
  private $reviewer_id;
  private $product_id;
  private $rating;
  private $review;

  public function __construct($id, $reviewer_id, $product_id, $rating, $review) {
    $this->id = $id;
    $this->reviewer_id = $reviewer_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->review = $review;
  }

  public function getId() { return $this->id; }
  public function getReviewerId() { return $this->reviewer_id; }
  public function getProductId() { return $this->product_id; }
  public function getRating() { return $this->rating; }
  public function getReview() { return $this->review; }
}


class UserReviewModel {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function createUserReview($data) {
    // Create a new review
    $query = "INSERT INTO user_reviews (reviewer_id, product_id, rating, review) VALUES (:reviewer_id, :product_id, :rating, :review)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':reviewer_id', $data['reviewer_id']);
    $stmt->bindParam(':product_id', $data['product_id']);
    $stmt->bindParam(':rating', $data['rating']);
    $stmt->bindParam(':review', $data['review']);
    $stmt->execute();

    // Get the ID of the newly created review
    $lastInsertId = $this->db->lastInsertId();

    return new UserReview($lastInsertId, $data['reviewer_id'], $data['product_id'], $data['rating'], $data['review']);
  }

  public function getUserReviews($productId) {
    // Get all reviews for a specific product
    $query = "SELECT * FROM user_reviews WHERE product_id = :product_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();

    $reviews = array();
    while ($row = $stmt->fetch()) {
      $reviews[] = new UserReview($row['id'], $row['reviewer_id'], $row['product_id'], $row['rating'], $row['review']);
    }

    return $reviews;
  }
}


class UserReviewController {
  private $model;

  public function __construct($model) {
    $this->model = $model;
  }

  public function createReview($data) {
    // Create a new review
    $review = $this->model->createUserReview($data);
    return $review;
  }

  public function getReviewsForProduct($productId) {
    // Get all reviews for a specific product
    $reviews = $this->model->getUserReviews($productId);
    return $reviews;
  }
}


$db = new PDO('mysql:host=localhost;dbname=example', 'username', 'password');

$model = new UserReviewModel($db);

$controller = new UserReviewController($model);

$data = array(
  'reviewer_id' => 1,
  'product_id' => 1,
  'rating' => 5,
  'review' => 'Great product!'
);

$review = $controller->createReview($data);
echo "New review created with ID: {$review->getId()}";

$reviewsForProduct = $controller->getReviewsForProduct(1);
foreach ($reviewsForProduct as $review) {
  echo "Reviewer: {$review->getReviewerId()} - Rating: {$review->getRating()} - Review: {$review->getReview()}
";
}


function add_review($pdo, $product_id, $user_id, $rating, $review_text) {
  try {
    $stmt = $pdo->prepare('INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES (?, ?, ?, ?)');
    $stmt->execute([$product_id, $user_id, $rating, $review_text]);
    return true;
  } catch(PDOException $e) {
    echo 'Error adding review: ' . $e->getMessage();
    return false;
  }
}

function display_reviews($pdo, $product_id) {
  try {
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = ? ORDER BY id DESC');
    $stmt->execute([$product_id]);
    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
    return $reviews;
  } catch(PDOException $e) {
    echo 'Error displaying reviews: ' . $e->getMessage();
    return array();
  }
}


$product_id = 1;
$user_id = 42; // assuming this is the current user's id
$rating = 4.5;
$review_text = 'This product is amazing!';

if (add_review($pdo, $product_id, $user_id, $rating, $review_text)) {
  echo 'Review added successfully!';
} else {
  echo 'Failed to add review.';
}


$reviews = display_reviews($pdo, $product_id);
foreach ($reviews as $review) {
  echo "Rating: {$review['rating']}, Review text: {$review['review_text']}";
}


// Connect to database
$conn = mysqli_connect("localhost", "username", "password", "database");

function addReview($product_id, $rating, $review, $user_id) {
    global $conn;
    if (mysqli_query($conn, "INSERT INTO reviews(product_id, user_id, rating, review) VALUES ('$product_id', '$user_id', '$rating', '$review')")) {
        return true;
    } else {
        echo mysqli_error($conn);
        return false;
    }
}

function getReviews($product_id) {
    global $conn;
    $query = "SELECT * FROM reviews WHERE product_id='$product_id'";
    $result = mysqli_query($conn, $query);
    $reviews = array();
    while ($row = mysqli_fetch_assoc($result)) {
        $reviews[] = array(
            'id' => $row['id'],
            'rating' => $row['rating'],
            'review' => $row['review']
        );
    }
    return $reviews;
}

function getAverageRating($product_id) {
    global $conn;
    $query = "SELECT AVG(rating) FROM reviews WHERE product_id='$product_id'";
    $result = mysqli_query($conn, $query);
    return mysqli_fetch_array($result)[0];
}


$product_id = 1; // Product ID
$rating = 5;
$review = "This product is amazing!";
$user_id = 1; // User ID

addReview($product_id, $rating, $review, $user_id);


$product_id = 1;

$reviews = getReviews($product_id);

foreach ($reviews as $review) {
    echo "Rating: " . $review['rating'] . "/5" . "
";
    echo "Review: " . $review['review'] . "

";
}


$product_id = 1;

$average_rating = getAverageRating($product_id);

echo "Average Rating: " . $average_rating . "/5" . "
";


<?php

// Include database connection file
include 'config.php';

// Function to register a new user
function registerUser($name, $email, $password) {
  global $db;
  
  // Prepare query and execute it
  $query = "INSERT INTO users (name, email, password) VALUES (?, ?, ?)";
  $stmt = $db->prepare($query);
  $stmt->execute([$name, $email, md5($password)]);
}

// Function to submit a review for a product
function submitReview($user_id, $product_id, $review_text, $rating) {
  global $db;
  
  // Prepare query and execute it
  $query = "INSERT INTO reviews (user_id, product_id, review_text, rating) VALUES (?, ?, ?, ?)";
  $stmt = $db->prepare($query);
  $stmt->execute([$user_id, $product_id, $review_text, $rating]);
}

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
  // If not, redirect to login page
  header('Location: login.php');
  exit;
}

// Handle review submission
if (isset($_POST['submit_review'])) {
  $user_id = $_SESSION['user_id'];
  $product_id = $_POST['product_id'];
  $review_text = $_POST['review_text'];
  $rating = $_POST['rating'];
  
  submitReview($user_id, $product_id, $review_text, $rating);
}

// Display product list and review form
?>
<h1>Product List</h1>
<ul>
  <?php foreach ($products as $product): ?>
    <li><?php echo $product['name']; ?></li>
    <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
      <input type="hidden" name="product_id" value="<?php echo $product['id']; ?>">
      <textarea name="review_text"></textarea>
      <select name="rating">
        <?php for ($i = 1; $i <= 5; $i++): ?>
          <option value="<?php echo $i; ?>"><?php echo $i; ?>/5</option>
        <?php endfor; ?>
      </select>
      <button type="submit" name="submit_review">Submit Review</button>
    </form>
  <?php endforeach; ?>
</ul>

<?php

// Include database connection file
include 'config.php';

// Retrieve products from database
$query = "SELECT * FROM products";
$stmt = $db->prepare($query);
$stmt->execute();
$products = $stmt->fetchAll();

?>


<?php

class Review {
    private $id;
    private $username;
    private $rating;
    private $comment;

    public function __construct($id, $username, $rating, $comment) {
        $this->id = $id;
        $this->username = $username;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public static function getAllReviews() {
        // Retrieve all reviews from database
        $reviews = array();
        // Example: assume we have a MySQL connection established as $conn
        $result = mysqli_query($conn, "SELECT * FROM reviews");
        while ($row = mysqli_fetch_assoc($result)) {
            $review = new Review($row['id'], $row['username'], $row['rating'], $row['comment']);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public static function getReviewById($id) {
        // Retrieve a review by ID from database
        // Example: assume we have a MySQL connection established as $conn
        $result = mysqli_query($conn, "SELECT * FROM reviews WHERE id = '$id'");
        if (mysqli_num_rows($result) > 0) {
            return new Review(mysqli_fetch_assoc($result)['id'], mysqli_fetch_assoc($result)['username'], mysqli_fetch_assoc($result)['rating'], mysqli_fetch_assoc($result)['comment']);
        } else {
            return null;
        }
    }

    public static function createReview($username, $rating, $comment) {
        // Insert a new review into database
        // Example: assume we have a MySQL connection established as $conn
        mysqli_query($conn, "INSERT INTO reviews (username, rating, comment) VALUES ('$username', '$rating', '$comment')");
    }

    public static function updateReview($id, $newComment) {
        // Update an existing review in database
        // Example: assume we have a MySQL connection established as $conn
        mysqli_query($conn, "UPDATE reviews SET comment = '$newComment' WHERE id = '$id'");
    }

    public static function deleteReview($id) {
        // Delete a review from database
        // Example: assume we have a MySQL connection established as $conn
        mysqli_query($conn, "DELETE FROM reviews WHERE id = '$id'");
    }
}

?>


// Get all reviews
$reviews = Review::getAllReviews();
foreach ($reviews as $review) {
    echo $review->username . ' gave ' . $review->rating . '/5 stars: ' . $review->comment . '<br>';
}

// Create a new review
Review::createReview('JohnDoe', 4, 'Great product!');

// Update an existing review
$review = Review::getReviewById(1);
if ($review !== null) {
    Review::updateReview($review->id, 'Even better now!');
}

// Delete a review
Review::deleteReview(2);


// Review class
class Review {
  private $db;

  public function __construct() {
    // Connect to database
    $this->db = new mysqli("localhost", "username", "password", "database");
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }
  }

  // Add a new review
  public function addReview($user_id, $product_name, $rating, $review_text) {
    $query = "INSERT INTO reviews (user_id, product_name, rating, review_text) VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param("isss", $user_id, $product_name, $rating, $review_text);
    $stmt->execute();
    return $this->db->insert_id;
  }

  // Get all reviews for a product
  public function getReviewsForProduct($product_name) {
    $query = "SELECT * FROM reviews WHERE product_name = ?";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param("s", $product_name);
    $stmt->execute();
    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  }

  // Get all reviews for a user
  public function getReviewsForUser($user_id) {
    $query = "SELECT * FROM reviews WHERE user_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param("i", $user_id);
    $stmt->execute();
    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  }
}


// Create a new Review instance
$review = new Review();

// Add a new review
$user_id = 1;
$product_name = "Product A";
$rating = 4.5;
$review_text = "This product is amazing!";
$review_id = $review->addReview($user_id, $product_name, $rating, $review_text);

// Get all reviews for a product
$product_reviews = $review->getReviewsForProduct($product_name);
foreach ($product_reviews as $review) {
  echo "User ID: " . $review["user_id"] . ", Rating: " . $review["rating"];
}

// Get all reviews for a user
$user_reviews = $review->getReviewsForUser($user_id);
foreach ($user_reviews as $review) {
  echo "Product Name: " . $review["product_name"] . ", Review Text: " . $review["review_text"];
}


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'reviews');

// Connect to database
$mysqli = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

// Function to add review
function addReview($productId, $userId, $rating, $review) {
  global $mysqli;
  
  // Prepare and execute query
  $stmt = $mysqli->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)");
  $stmt->bind_param("iiis", $productId, $userId, $rating, $review);
  $stmt->execute();
  
  // Get the review ID
  $reviewId = $mysqli->insert_id;
  
  return $reviewId;
}

// Function to get average rating
function getAverageRating($productId) {
  global $mysqli;
  
  // Prepare and execute query
  $stmt = $mysqli->prepare("SELECT AVG(rating) AS avg_rating FROM reviews WHERE product_id = ?");
  $stmt->bind_param("i", $productId);
  $stmt->execute();
  
  // Fetch the result
  $result = $stmt->get_result();
  $row = $result->fetch_assoc();
  
  return isset($row['avg_rating']) ? $row['avg_rating'] : null;
}

// Function to get reviews for a product
function getReviewsForProduct($productId) {
  global $mysqli;
  
  // Prepare and execute query
  $stmt = $mysqli->prepare("SELECT r.id, u.username, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = ?");
  $stmt->bind_param("i", $productId);
  $stmt->execute();
  
  // Fetch the results
  $result = $stmt->get_result();
  $reviews = array();
  
  while ($row = $result->fetch_assoc()) {
    $reviews[] = array(
      'id' => $row['id'],
      'username' => $row['username'],
      'rating' => $row['rating'],
      'review' => $row['review']
    );
  }
  
  return $reviews;
}

// Example usage
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  // Add review
  $productId = $_POST['product_id'];
  $userId = $_POST['user_id'];
  $rating = $_POST['rating'];
  $review = $_POST['review'];
  
  addReview($productId, $userId, $rating, $review);
}

// Get reviews for a product
$productId = 1; // Replace with actual product ID
$reviews = getReviewsForProduct($productId);

?>


// db_config.php (database connection settings)
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// connect to database
$mysqli = new mysqli($db_host, $db_username, $db_password, $db_name);

function addReview($user_id, $product_name, $rating, $review_text) {
  global $mysqli;
  
  // insert review into database
  $stmt = $mysqli->prepare("INSERT INTO reviews (user_id, product_name, rating, review_text) VALUES (?, ?, ?, ?)");
  $stmt->bind_param('isss', $user_id, $product_name, $rating, $review_text);
  $result = $stmt->execute();
  
  if ($result) {
    return true; // review added successfully
  } else {
    return false; // error adding review
  }
}

function getUserReviews($user_id) {
  global $mysqli;
  
  // retrieve reviews for user from database
  $stmt = $mysqli->prepare("SELECT * FROM reviews WHERE user_id = ?");
  $stmt->bind_param('i', $user_id);
  $result = $stmt->execute();
  
  if ($result) {
    return $stmt->get_result(); // fetch array of review data
  } else {
    return false; // error fetching reviews
  }
}

function getReview($review_id) {
  global $mysqli;
  
  // retrieve single review from database by ID
  $stmt = $mysqli->prepare("SELECT * FROM reviews WHERE id = ?");
  $stmt->bind_param('i', $review_id);
  $result = $stmt->execute();
  
  if ($result) {
    return $stmt->get_result()->fetch_assoc(); // fetch single review data as associative array
  } else {
    return false; // error fetching review
  }
}

function updateReview($review_id, $new_rating, $new_review_text) {
  global $mysqli;
  
  // update existing review in database
  $stmt = $mysqli->prepare("UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?");
  $stmt->bind_param('issi', $new_rating, $new_review_text, $review_id);
  $result = $stmt->execute();
  
  if ($result) {
    return true; // review updated successfully
  } else {
    return false; // error updating review
  }
}

function deleteReview($review_id) {
  global $mysqli;
  
  // delete review from database by ID
  $stmt = $mysqli->prepare("DELETE FROM reviews WHERE id = ?");
  $stmt->bind_param('i', $review_id);
  $result = $stmt->execute();
  
  if ($result) {
    return true; // review deleted successfully
  } else {
    return false; // error deleting review
  }
}


// add a new review for user with ID 1
$review_data = array(
  'product_name' => 'Apple iPhone',
  'rating' => 5,
  'review_text' => 'This is an amazing phone!'
);
addReview(1, $review_data['product_name'], $review_data['rating'], $review_data['review_text']);

// retrieve all reviews for user with ID 2
$user_reviews = getUserReviews(2);

// display individual review data
$review_id = 3; // example review ID
$review_data = getReview($review_id);
echo "Review Text: " . $review_data['review_text'];

// update existing review with ID 4
$new_rating = 4;
$new_review_text = 'This phone is great!';
updateReview(4, $new_rating, $new_review_text);

// delete review with ID 5
deleteReview(5);


// ReviewController.php

class ReviewController {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  // Get all reviews
  public function getReviews() {
    $stmt = $this->db->prepare("SELECT * FROM reviews");
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Add a new review
  public function addReview($data) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_name, rating, review) VALUES (?, ?, ?, ?)");
      $stmt->execute(array($data['user_id'], $data['product_name'], $data['rating'], $data['review']));
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }

  // Get a review by ID
  public function getReview($id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = ?");
      $stmt->execute(array($id));
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return null;
    }
  }

  // Update a review
  public function updateReview($data) {
    try {
      $stmt = $this->db->prepare("UPDATE reviews SET product_name = ?, rating = ?, review = ? WHERE id = ?");
      $stmt->execute(array($data['product_name'], $data['rating'], $data['review'], $data['id']));
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }

  // Delete a review
  public function deleteReview($id) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
      $stmt->execute(array($id));
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }
}

// UserController.php

class UserController {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  // Get user data
  public function getUserData($id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM users WHERE id = ?");
      $stmt->execute(array($id));
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return null;
    }
  }

  // Update user data
  public function updateUserData($data) {
    try {
      $stmt = $this->db->prepare("UPDATE users SET username = ?, email = ? WHERE id = ?");
      $stmt->execute(array($data['username'], $data['email'], $data['id']));
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }
}


$reviewController = new ReviewController();
$data = array(
  'user_id' => 1,
  'product_name' => 'Product Name',
  'rating' => 5,
  'review' => 'This is a great product!'
);
$reviewController->addReview($data);


$reviews = $reviewController->getReviews();
foreach ($reviews as $review) {
  echo "Rating: " . $review['rating'] . ", Review: " . $review['review'];
}


$reviewController = new ReviewController();
$data = array(
  'id' => 1,
  'product_name' => 'New Product Name',
  'rating' => 4,
  'review' => 'This is a good product!'
);
$reviewController->updateReview($data);


<?php

// Connect to database
$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');

function getReviews() {
  global $db;
  $query = "SELECT * FROM reviews ORDER BY created_at DESC";
  $stmt = $db->prepare($query);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function addReview($title, $content, $rating, $userId) {
  global $db;
  $query = "INSERT INTO reviews (title, content, rating, user_id) VALUES (:title, :content, :rating, :user_id)";
  $stmt = $db->prepare($query);
  $stmt->execute([
    ':title' => $title,
    ':content' => $content,
    ':rating' => $rating,
    ':user_id' => $userId
  ]);
}

function getReview($id) {
  global $db;
  $query = "SELECT * FROM reviews WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->execute([':id' => $id]);
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

// Example usage
$reviews = getReviews();
foreach ($reviews as $review) {
  echo "<h2>" . $review['title'] . "</h2>";
  echo "<p>Rating: " . $review['rating'] . "/5</p>";
  echo "<p>" . $review['content'] . "</p>";
}

?>


addReview('Great Product!', 'I love this product!', 5, 1);


$reviews = getReviews();
foreach ($reviews as $review) {
  // Display review details
}


<?php

class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  }

  public function addReview($user_id, $product_id, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
      $stmt->bindParam(':user_id', $user_id);
      $stmt->bindParam(':product_id', $product_id);
      $stmt->bindParam(':rating', $rating);
      $stmt->bindParam(':review', $review);
      $stmt->execute();
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
    }
  }

  public function getReviews($product_id = null, $user_id = null) {
    try {
      if ($product_id && !$user_id) {
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
        return $stmt->fetchAll();
      } elseif (!$product_id && $user_id) {
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
        $stmt->bindParam(':user_id', $user_id);
        $stmt->execute();
        return $stmt->fetchAll();
      } else {
        $stmt = $this->db->prepare("SELECT * FROM reviews");
        $stmt->execute();
        return $stmt->fetchAll();
      }
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
    }
  }

  public function deleteReview($review_id) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :id");
      $stmt->bindParam(':id', $review_id);
      $stmt->execute();
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
    }
  }

  public function updateReview($review_id, $rating, $review) {
    try {
      $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
      $stmt->bindParam(':id', $review_id);
      $stmt->bindParam(':rating', $rating);
      $stmt->bindParam(':review', $review);
      $stmt->execute();
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
    }
  }
}

?>


$review = new Review();

// Add a review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review_text = "This product is amazing!";
$review->addReview($user_id, $product_id, $rating, $review_text);

// Get reviews for a specific product
$product_id = 1;
$reviews = $review->getReviews($product_id);
print_r($reviews); // array of review objects

// Delete a review
$review_id = 1;
$review->deleteReview($review_id);

// Update a review
$review_id = 1;
$rating = 4;
$review_text = "This product is great!";
$review->updateReview($review_id, $rating, $review_text);


class ReviewManager {
    private $db;

    public function __construct() {
        // Connect to database
        $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
        $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    }

    /**
     * Insert a new review and rating.
     *
     * @param string $title
     * @param string $content
     * @return int|null Review ID if successful, null otherwise.
     */
    public function insertReview($title, $content) {
        try {
            // Prepare SQL query to insert review and rating.
            $stmt = $this->db->prepare("INSERT INTO reviews (title, content, created_at)
                                        VALUES (:title, :content, NOW())");

            // Execute the prepared statement with parameter values.
            $stmt->bindParam(':title', $title);
            $stmt->bindParam(':content', $content);

            if ($stmt->execute()) {
                return $this->db->lastInsertId();
            } else {
                throw new Exception('Failed to insert review');
            }
        } catch (PDOException $e) {
            print "Error: " . $e->getMessage() . "
";
            return null;
        }
    }

    /**
     * Update an existing review and rating.
     *
     * @param int $id Review ID
     * @param string $title New title for the review.
     * @return bool|null True if successful, false otherwise.
     */
    public function updateReview($id, $title) {
        try {
            // Prepare SQL query to update review and rating.
            $stmt = $this->db->prepare("UPDATE reviews SET title = :title WHERE id = :id");

            // Execute the prepared statement with parameter values.
            $stmt->bindParam(':id', $id);
            $stmt->bindParam(':title', $title);

            if ($stmt->execute()) {
                return true;
            } else {
                throw new Exception('Failed to update review');
            }
        } catch (PDOException $e) {
            print "Error: " . $e->getMessage() . "
";
            return false;
        }
    }

    /**
     * Delete a review and its corresponding rating.
     *
     * @param int $id Review ID
     * @return bool|null True if successful, false otherwise.
     */
    public function deleteReview($id) {
        try {
            // Prepare SQL query to delete review and rating.
            $stmt = $this->db->prepare("DELETE FROM ratings WHERE review_id = :id");
            $stmt2 = $this->db->prepare("DELETE FROM reviews WHERE id = :id");

            // Execute the prepared statements with parameter values.
            $stmt->bindParam(':id', $id);
            $stmt2->bindParam(':id', $id);

            if ($stmt->execute() && $stmt2->execute()) {
                return true;
            } else {
                throw new Exception('Failed to delete review');
            }
        } catch (PDOException $e) {
            print "Error: " . $e->getMessage() . "
";
            return false;
        }
    }
}


$reviewManager = new ReviewManager();

// Insert a new review.
$reviewId = $reviewManager->insertReview('New Review Title', 'This is my new review content.');
echo "Inserted review with ID: $reviewId
";

// Update an existing review.
$updateResult = $reviewManager->updateReview($reviewId, 'Updated title for the review');
if ($updateResult) {
    echo "Updated review successfully.
";
} else {
    echo "Failed to update review.
";
}

// Delete a review.
$deleteResult = $reviewManager->deleteReview($reviewId);
if ($deleteResult) {
    echo "Deleted review successfully.
";
} else {
    echo "Failed to delete review.
";
}


class UserReview {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  /**
   * Create a new review
   *
   * @param int $user_id
   * @param int $product_id
   * @param string $rating
   * @param string $review_text
   */
  public function createReview($user_id, $product_id, $rating, $review_text) {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (?, ?, ?, ?)");
    $stmt->execute([$user_id, $product_id, $rating, $review_text]);
  }

  /**
   * Get all reviews for a user
   *
   * @param int $user_id
   * @return array
   */
  public function getReviewsForUser($user_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = ?");
    $stmt->execute([$user_id]);
    return $stmt->fetchAll();
  }

  /**
   * Get all reviews for a product
   *
   * @param int $product_id
   * @return array
   */
  public function getReviewsForProduct($product_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
    $stmt->execute([$product_id]);
    return $stmt->fetchAll();
  }

  /**
   * Get the average rating for a product
   *
   * @param int $product_id
   * @return float
   */
  public function getAverageRating($product_id) {
    $stmt = $this->db->prepare("SELECT AVG(rating) FROM reviews WHERE product_id = ?");
    $stmt->execute([$product_id]);
    return $stmt->fetchColumn();
  }
}


$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');

$reviewSystem = new UserReview($db);

// Create a new review
$reviewSystem->createReview(1, 1, "5", "I love this product!");

// Get all reviews for a user
$userReviews = $reviewSystem->getReviewsForUser(1);
print_r($userReviews);

// Get all reviews for a product
$productReviews = $reviewSystem->getReviewsForProduct(1);
print_r($productReviews);

// Get the average rating for a product
$averageRating = $reviewSystem->getAverageRating(1);
echo "Average Rating: $averageRating";


<?php

// Configuration file for database connection
require_once 'config.php';

// Function to submit a new review
function submitReview($productId, $userId, $rating, $review) {
    global $conn;

    // Query to insert new review into reviews table
    $query = "INSERT INTO reviews (product_id, user_id, rating, review)
              VALUES (:productId, :userId, :rating, :review)";

    try {
        // Prepare and execute query with prepared statement
        $stmt = $conn->prepare($query);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);

        if ($stmt->execute()) {
            return true; // Review submitted successfully
        } else {
            throw new Exception('Error submitting review');
        }
    } catch (Exception $e) {
        echo 'Error: ' . $e->getMessage();
        return false;
    }
}

// Function to display all reviews for a product
function displayReviews($productId) {
    global $conn;

    // Query to retrieve reviews from database
    $query = "SELECT r.id, u.username, r.rating, r.review, r.created_at
              FROM reviews r
              JOIN users u ON r.user_id = u.id
              WHERE r.product_id = :productId";

    try {
        // Prepare and execute query with prepared statement
        $stmt = $conn->prepare($query);
        $stmt->bindParam(':productId', $productId);

        if ($stmt->execute()) {
            $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

            foreach ($reviews as &$review) {
                // Display review details on product page
                echo '<p>Username: ' . $review['username'] . '</p>';
                echo '<p>Rating: ' . $review['rating'] . '/5</p>';
                echo '<p>Review: ' . $review['review'] . '</p>';
                echo '<p>Created at: ' . $review['created_at'] . '</p>';
            }

            return true;
        } else {
            throw new Exception('Error displaying reviews');
        }
    } catch (Exception $e) {
        echo 'Error: ' . $e->getMessage();
        return false;
    }
}

// Function to delete a review
function deleteReview($reviewId, $adminId) {
    global $conn;

    // Query to delete review from database
    $query = "DELETE FROM reviews WHERE id = :reviewId AND user_id != :adminId";

    try {
        // Prepare and execute query with prepared statement
        $stmt = $conn->prepare($query);
        $stmt->bindParam(':reviewId', $reviewId);
        $stmt->bindParam(':adminId', $adminId);

        if ($stmt->execute()) {
            return true; // Review deleted successfully
        } else {
            throw new Exception('Error deleting review');
        }
    } catch (Exception $e) {
        echo 'Error: ' . $e->getMessage();
        return false;
    }
}
?>


// Example 1: Submitting a new review
$productId = 1; // ID of product being reviewed
$userId = 1; // ID of user submitting the review
$rating = 4; // Rating given to the product (out of 5)
$review = 'Great product, highly recommended!'; // User's review

if (submitReview($productId, $userId, $rating, $review)) {
    echo 'Review submitted successfully!';
} else {
    echo 'Error submitting review';
}

// Example 2: Displaying all reviews for a product
$productId = 1; // ID of product being reviewed

displayReviews($productId);

// Example 3: Deleting a review (admin only)
$reviewId = 1; // ID of review to be deleted
$adminId = 1; // ID of admin attempting to delete the review

if (deleteReview($reviewId, $adminId)) {
    echo 'Review deleted successfully!';
} else {
    echo 'Error deleting review';
}


CREATE TABLE reviews (
  id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT,
  product_id INT,
  rating TINYINT(1),
  comment TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE users (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255),
  email VARCHAR(255)
);


class Review {
  private $id;
  private $user_id;
  private $product_id;
  private $rating;
  private $comment;

  public function __construct($data) {
    if (isset($data['id'])) {
      $this->id = $data['id'];
    }
    if (isset($data['user_id'])) {
      $this->user_id = $data['user_id'];
    }
    if (isset($data['product_id'])) {
      $this->product_id = $data['product_id'];
    }
    if (isset($data['rating'])) {
      $this->rating = $data['rating'];
    }
    if (isset($data['comment'])) {
      $this->comment = $data['comment'];
    }
  }

  public static function createReview($user_id, $product_id, $rating, $comment) {
    // Insert review into database
    $query = "INSERT INTO reviews (user_id, product_id, rating, comment)
              VALUES (:user_id, :product_id, :rating, :comment)";
    $stmt = Database::prepare($query);
    $stmt->execute([
      ':user_id' => $user_id,
      ':product_id' => $product_id,
      ':rating' => $rating,
      ':comment' => $comment
    ]);
    return true;
  }

  public static function getReviewsForProduct($product_id) {
    // Get reviews for product from database
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = Database::prepare($query);
    $stmt->execute([':product_id' => $product_id]);
    return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
  }

  public static function getReviewsForUser($user_id) {
    // Get reviews for user from database
    $query = "SELECT * FROM reviews WHERE user_id = :user_id";
    $stmt = Database::prepare($query);
    $stmt->execute([':user_id' => $user_id]);
    return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
  }
}


class User {
  private $id;
  private $name;
  private $email;

  public function __construct($data) {
    if (isset($data['id'])) {
      $this->id = $data['id'];
    }
    if (isset($data['name'])) {
      $this->name = $data['name'];
    }
    if (isset($data['email'])) {
      $this->email = $data['email'];
    }
  }

  public static function createReview($product_id, $rating, $comment) {
    // Get user ID from session or database
    $user_id = $_SESSION['user_id']; // example: get user ID from session
    Review::createReview($user_id, $product_id, $rating, $comment);
  }
}


// Create a new review for a product
$user = new User(['id' => 1, 'name' => 'John Doe', 'email' => 'john@example.com']);
$product_id = 123;
$rating = 5;
$comment = 'Great product!';

User::createReview($product_id, $rating, $comment);

// Get reviews for a product
$reviews = Review::getReviewsForProduct($product_id);
print_r($reviews); // Output: array of Review objects

// Get reviews for a user
$reviews = Review::getReviewsForUser(1);
print_r($reviews); // Output: array of Review objects


<?php

// Include database connection file
require_once 'db.php';

// Function to add a review
function add_review($data) {
  $stmt = $pdo->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
  $stmt->execute([
    ':user_id' => $data['user_id'],
    ':product_id' => $data['product_id'],
    ':rating' => $data['rating'],
    ':review' => $data['review']
  ]);
  return $pdo->lastInsertId();
}

// Function to get all reviews for a product
function get_reviews($product_id) {
  $stmt = $pdo->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
  $stmt->execute([':product_id' => $product_id]);
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to update a review
function update_review($review_id, $data) {
  $stmt = $pdo->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
  $stmt->execute([
    ':rating' => $data['rating'],
    ':review' => $data['review'],
    ':id' => $review_id
  ]);
}

// Function to delete a review
function delete_review($review_id) {
  $pdo->exec("DELETE FROM reviews WHERE id = :id", ['id' => $review_id]);
}

// Example usage:
$data = [
  'user_id' => 1,
  'product_id' => 1,
  'rating' => 5,
  'review' => 'Great product!'
];
$review_id = add_review($data);
print("Review added with ID: " . $review_id);

// Get all reviews for a product
$product_id = 1;
$reviews = get_reviews($product_id);
print_r($reviews);

// Update a review
$data['rating'] = 4;
update_review(1, $data);

// Delete a review
delete_review(1);

?>


<?php

// Database connection settings
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = mysqli_connect($host, $username, $password, $db_name);

if (!$conn) {
  die('Could not connect: ' . mysqli_error($conn));
}

function add_review($user_id, $product_name, $rating, $review) {
  global $conn;
  
  // Check if review already exists for product
  $query = "SELECT * FROM reviews WHERE user_id = '$user_id' AND product_name = '$product_name'";
  $result = mysqli_query($conn, $query);
  if (mysqli_num_rows($result) > 0) {
    return false; // Review already exists
  }
  
  // Insert new review into database
  $query = "INSERT INTO reviews (user_id, product_name, rating, review) VALUES ('$user_id', '$product_name', '$rating', '$review')";
  mysqli_query($conn, $query);
  return true;
}

function get_reviews() {
  global $conn;
  
  // Retrieve all reviews from database
  $query = "SELECT * FROM reviews";
  $result = mysqli_query($conn, $query);
  $reviews = array();
  
  while ($row = mysqli_fetch_assoc($result)) {
    $reviews[] = array(
      'id' => $row['id'],
      'user_id' => $row['user_id'],
      'product_name' => $row['product_name'],
      'rating' => $row['rating'],
      'review' => $row['review']
    );
  }
  
  return $reviews;
}

function get_user_reviews($user_id) {
  global $conn;
  
  // Retrieve all reviews from user
  $query = "SELECT * FROM reviews WHERE user_id = '$user_id'";
  $result = mysqli_query($conn, $query);
  $reviews = array();
  
  while ($row = mysqli_fetch_assoc($result)) {
    $reviews[] = array(
      'id' => $row['id'],
      'product_name' => $row['product_name'],
      'rating' => $row['rating'],
      'review' => $row['review']
    );
  }
  
  return $reviews;
}

function display_reviews($reviews) {
  foreach ($reviews as $review) {
    echo '<h2>Product: ' . $review['product_name'] . '</h2>';
    echo '<p>Rating: ' . $review['rating'] . '/5</p>';
    echo '<p>' . $review['review'] . '</p>';
  }
}

// Example usage
$user_id = 1;
$product_name = 'Product A';
$rating = 4;
$review = 'This product is great!';

if (add_review($user_id, $product_name, $rating, $review)) {
  echo 'Review added successfully!';
} else {
  echo 'Error adding review.';
}

$reviews = get_reviews();
display_reviews($reviews);

?>


// Database connection settings
$host = 'localhost';
$dbname = 'review_system';
$username = 'root';
$password = '';

// Connect to the database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

function add_review($product_id, $user_id, $rating, $comment) {
  global $conn;
  
  try {
    // Prepare and execute the query
    $stmt = $conn->prepare('INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->execute();
    
    return true;
  } catch (PDOException $e) {
    echo 'Error adding review: ' . $e->getMessage();
    return false;
  }
}

function get_reviews($product_id) {
  global $conn;
  
  try {
    // Prepare and execute the query
    $stmt = $conn->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo 'Error fetching reviews: ' . $e->getMessage();
    return array();
  }
}

function update_review($review_id, $new_rating, $new_comment) {
  global $conn;
  
  try {
    // Prepare and execute the query
    $stmt = $conn->prepare('UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id');
    $stmt->bindParam(':id', $review_id);
    $stmt->bindParam(':rating', $new_rating);
    $stmt->bindParam(':comment', $new_comment);
    $stmt->execute();
    
    return true;
  } catch (PDOException $e) {
    echo 'Error updating review: ' . $e->getMessage();
    return false;
  }
}

function delete_review($review_id) {
  global $conn;
  
  try {
    // Prepare and execute the query
    $stmt = $conn->prepare('DELETE FROM reviews WHERE id = :id');
    $stmt->bindParam(':id', $review_id);
    $stmt->execute();
    
    return true;
  } catch (PDOException $e) {
    echo 'Error deleting review: ' . $e->getMessage();
    return false;
  }
}


// Add a new review for product with id 1
add_review(1, 1, 5, "Great product!");

// Get all reviews for product with id 1
$reviews = get_reviews(1);
print_r($reviews);

// Update the rating of a review with id 1 to 4
update_review(1, 4, "");

// Delete the review with id 1
delete_review(1);


<?php

// Database connection settings
$dsn = 'mysql:host=localhost;dbname=mydatabase';
$username = 'myusername';
$password = 'mypassword';

try {
  // Connect to database
  $db = new PDO($dsn, $username, $password);

  // Function to get user reviews
  function getUserReviews($userId) {
    global $db;
    $stmt = $db->prepare('SELECT * FROM reviews WHERE user_id = :user_id');
    $stmt->bindParam(':user_id', $userId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Function to add review
  function addReview($productId, $rating, $review) {
    global $db;
    $userId = $_SESSION['user']['id']; // assuming you have a session variable with the user's ID
    $stmt = $db->prepare('INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)');
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
  }

  // Function to get product reviews
  function getProductReviews($productId) {
    global $db;
    $stmt = $db->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

} catch (PDOException $e) {
  echo 'Error: ' . $e->getMessage();
}

?>


// Get user reviews
$userReviews = getUserReviews(1); // assuming the user ID is 1
print_r($userReviews);

// Add review
addReview(1, 5, 'Great product!'); // assuming the product ID is 1

// Get product reviews
$productReviews = getProductReviews(1);
print_r($productReviews);


// Configuration file for database connection
require_once 'config.php';

// Function to get all reviews for a product
function getReviews($productId) {
  $query = "SELECT * FROM reviews WHERE product_id = '$productId'";
  $result = mysqli_query($conn, $query);
  return $result;
}

// Function to calculate average rating for a product
function getAverageRating($productId) {
  $reviews = getReviews($productId);
  $sum = 0;
  foreach ($reviews as $review) {
    $sum += $review['rating'];
  }
  if (mysqli_num_rows($reviews) > 0) {
    return $sum / mysqli_num_rows($reviews);
  } else {
    return 0;
  }
}

// Function to add a new review
function addReview($productId, $userId, $rating, $review) {
  $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES ('$productId', '$userId', '$rating', '$review')";
  mysqli_query($conn, $query);
}

// Function to display all reviews for a product
function displayReviews($productId) {
  $reviews = getReviews($productId);
  if (mysqli_num_rows($reviews) > 0) {
    foreach ($reviews as $review) {
      echo '<p>' . $review['review'] . '</p>';
      echo '<p>Rating: ' . $review['rating'] . '/5</p>';
    }
  } else {
    echo '<p>No reviews available.</p>';
  }
}

// Example usage
$productId = 1;
echo 'Average rating for product ' . $productId . ': ' . getAverageRating($productId) . '</br>';

addReview($productId, 1, 4, 'Great product!');

displayReviews($productId);


<?php

// Review class
class Review {
    private $id;
    private $product_id;
    private $rating;
    private $title;
    private $description;

    public function __construct($id = null, $product_id = null, $rating = null, $title = null, $description = null) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->title = $title;
        $this->description = $description;
    }

    public function save() {
        global $db;

        // Insert review into database
        $query = "INSERT INTO reviews (product_id, rating, title, description) VALUES ('$this->product_id', '$this->rating', '$this->title', '$this->description')";
        $result = mysqli_query($db, $query);

        if ($result) {
            echo 'Review created successfully!';
        } else {
            echo 'Error creating review: ' . mysqli_error($db);
        }
    }

    public function getRating() {
        return $this->rating;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getDescription() {
        return $this->description;
    }
}

// Create a new review instance
$review = new Review();

// Assign user input to the review object's properties
$review->product_id = $_POST['product_id'];
$review->rating = $_POST['rating'];
$review->title = $_POST['title'];
$review->description = $_POST['description'];

// Save the review to the database
$review->save();

?>


<?php

// Database connection settings
$dbHost     = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName     = 'your_database';

// Connect to database
try {
    $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUsername, $dbPassword);
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}

class Review {
    private $id;
    private $product_id;
    private $rating;
    private $title;
    private $description;

    public function __construct($id = null, $product_id = null, $rating = null, $title = null, $description = null) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->title = $title;
        $this->description = $description;
    }

    public function save() {
        // Insert review into database
        $query = "INSERT INTO reviews (product_id, rating, title, description) VALUES (:product_id, :rating, :title, :description)";
        $stmt = $pdo->prepare($query);
        $stmt->bindParam(':product_id', $this->product_id);
        $stmt->bindParam(':rating', $this->rating);
        $stmt->bindParam(':title', $this->title);
        $stmt->bindParam(':description', $this->description);

        try {
            if ($stmt->execute()) {
                echo 'Review created successfully!';
            } else {
                throw new PDOException($stmt->errorInfo()[2]);
            }
        } catch (PDOException $e) {
            echo "Error creating review: " . $e->getMessage();
        }
    }

    public function getRating() {
        return $this->rating;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getDescription() {
        return $this->description;
    }
}

// Create a new review instance
$review = new Review();

// Assign user input to the review object's properties
$review->product_id = $_POST['product_id'];
$review->rating = $_POST['rating'];
$review->title = $_POST['title'];
$review->description = $_POST['description'];

// Save the review to the database
$review->save();

?>


// Create a new Review instance
$review = Review::create([
    'product_id' => $request->input('product_id'),
    'rating' => $request->input('rating'),
    'title' => $request->input('title'),
    'description' => $request->input('description')
]);


<?php

// Require database connection file
require_once 'db.php';

function getReviews() {
  // Retrieve all reviews from the database
  $query = "SELECT r.id, r.review, r.rating, u.name FROM reviews r JOIN users u ON r.user_id = u.id ORDER BY r.created_at DESC";
  $results = mysqli_query($conn, $query);
  return $results;
}

function getReview($id) {
  // Retrieve a specific review from the database
  $query = "SELECT * FROM reviews WHERE id = '$id'";
  $result = mysqli_query($conn, $query);
  if ($result && mysqli_num_rows($result) > 0) {
    return $result->fetch_assoc();
  } else {
    return false;
  }
}

function submitReview($data) {
  // Insert a new review into the database
  $query = "INSERT INTO reviews (user_id, review, rating) VALUES ('$data[user_id]', '$data[review]', '$data[rating]')";
  if (mysqli_query($conn, $query)) {
    return true;
  } else {
    return false;
  }
}

function editReview($id, $data) {
  // Update an existing review in the database
  $query = "UPDATE reviews SET review = '$data[review]', rating = '$data[rating]' WHERE id = '$id'";
  if (mysqli_query($conn, $query)) {
    return true;
  } else {
    return false;
  }
}

function deleteReview($id) {
  // Delete a review from the database
  $query = "DELETE FROM reviews WHERE id = '$id'";
  if (mysqli_query($conn, $query)) {
    return true;
  } else {
    return false;
  }
}


// Create a new user review
$data = array(
  'user_id' => 1,
  'review' => 'This product is amazing!',
  'rating' => 5
);
submitReview($data);

// Retrieve all reviews
$reviews = getReviews();
while ($row = $reviews->fetch_assoc()) {
  echo "Review ID: {$row['id']}
";
  echo "User Name: {$row['name']}
";
  echo "Review: {$row['review']}
";
  echo "Rating: {$row['rating']}

";
}

// Retrieve a specific review
$review = getReview(1);
echo "Review ID: {$review['id']}
";
echo "User Name: {$review['name']}
";
echo "Review: {$review['review']}
";
echo "Rating: {$review['rating']}

";

// Edit an existing review
$data = array(
  'review' => 'This product is even better!',
  'rating' => 5
);
editReview(1, $data);

// Delete a review
deleteReview(1);


<?php

// Connect to database
require_once 'db.php';

function getReviews() {
    $query = "SELECT * FROM reviews";
    return executeQuery($query);
}

function createUserReview($user_id, $product_name, $rating, $review) {
    $query = "INSERT INTO reviews (user_id, product_name, rating, review) VALUES (:user_id, :product_name, :rating, :review)";
    $params = [
        ':user_id' => $user_id,
        ':product_name' => $product_name,
        ':rating' => $rating,
        ':review' => $review
    ];
    return executeQuery($query, $params);
}

function getAverageRating() {
    $query = "SELECT AVG(rating) as average_rating FROM reviews";
    $result = executeQuery($query);
    return ($result[0]['average_rating'] ?? 0);
}

function displayReviews() {
    $reviews = getReviews();
    foreach ($reviews as $review) {
        echo "<h2>" . $review['product_name'] . "</h2>";
        echo "<p>Rating: " . $review['rating'] . "/5</p>";
        echo "<p>Review: " . $review['review'] . "</p>";
    }
}

function executeQuery($query, $params = []) {
    global $db;
    try {
        $stmt = $db->prepare($query);
        if (!empty($params)) {
            foreach ($params as $key => $value) {
                $stmt->bindValue(":$key", $value);
            }
        }
        $stmt->execute();
        return $stmt->fetchAll();
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        exit;
    }
}

// Initialize database connection
$db = new PDO('mysql:host=localhost;dbname=review_system', 'username', 'password');

// Display reviews
displayReviews();

// Get average rating
echo "<h2>Average Rating:</h2>";
echo getAverageRating() . "/5";

?>


function createUserReview($user_id, $product_id, $rating, $review) {
  // Validate input data
  if (!$user_id || !$product_id || !$rating || !$review) {
    throw new Exception("Invalid review submission");
  }

  try {
    // Connect to database
    $db = connectToDatabase();

    // Insert review into database
    $query = "INSERT INTO reviews (user_id, product_id, rating, review)
              VALUES (:user_id, :product_id, :rating, :review)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(":user_id", $user_id);
    $stmt->bindParam(":product_id", $product_id);
    $stmt->bindParam(":rating", $rating);
    $stmt->bindParam(":review", $review);
    $result = $stmt->execute();

    if ($result) {
      return true; // Review submitted successfully
    } else {
      throw new Exception("Failed to submit review");
    }
  } catch (PDOException $e) {
    // Handle database connection error
    logError($e->getMessage());
    throw new Exception("Failed to connect to database");
  } finally {
    closeDatabaseConnection($db);
  }

  return false; // Review submission failed
}


try {
  $user_id = 1;
  $product_id = 2;
  $rating = 5;
  $review = "This product is amazing!";

  if (createUserReview($user_id, $product_id, $rating, $review)) {
    echo "Review submitted successfully!";
  } else {
    echo "Failed to submit review.";
  }
} catch (Exception $e) {
  echo "Error: " . $e->getMessage();
}


<?php
// Configuration file for database connection
require_once 'config.php';

class ReviewSystem {
    private $conn;

    function __construct() {
        $this->conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
    }

    // Function to create a review
    function createReview($product_id, $user_name, $rating, $review_text) {
        $sql = "INSERT INTO reviews (product_id, user_name, rating, review_text)
                VALUES (?, ?, ?, ?)";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("isss", $product_id, $user_name, $rating, $review_text);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    }

    // Function to retrieve all reviews for a product
    function getReviews($product_id) {
        $sql = "SELECT * FROM reviews WHERE product_id = ?";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("i", $product_id);
        if ($stmt->execute()) {
            return $stmt->get_result();
        } else {
            return false;
        }
    }

    // Function to update a review
    function updateReview($review_id, $new_rating, $new_review_text) {
        $sql = "UPDATE reviews SET rating = ?, review_text = ?
                WHERE id = ?";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("isi", $new_rating, $new_review_text, $review_id);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    }

    // Function to delete a review
    function deleteReview($review_id) {
        $sql = "DELETE FROM reviews WHERE id = ?";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("i", $review_id);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    }

    function __destruct() {
        $this->conn->close();
    }
}

// Example usage
$reviewSystem = new ReviewSystem();

// Create a review
$user_name = 'John Doe';
$rating = 5;
$review_text = 'This product is amazing!';
$product_id = 1; // Replace with actual product ID
if ($reviewSystem->createReview($product_id, $user_name, $rating, $review_text)) {
    echo "Review created successfully.";
} else {
    echo "Failed to create review.";
}

// Retrieve all reviews for a product
$reviews = $reviewSystem->getReviews($product_id);
if ($reviews) {
    while ($row = $reviews->fetch_assoc()) {
        echo "Rating: " . $row['rating'] . ", Review Text: " . $row['review_text'];
    }
} else {
    echo "No reviews found.";
}

// Update a review
$review_id = 1; // Replace with actual review ID
$new_rating = 4;
$new_review_text = 'This product is good!';
if ($reviewSystem->updateReview($review_id, $new_rating, $new_review_text)) {
    echo "Review updated successfully.";
} else {
    echo "Failed to update review.";
}

// Delete a review
$review_id = 1; // Replace with actual review ID
if ($reviewSystem->deleteReview($review_id)) {
    echo "Review deleted successfully.";
} else {
    echo "Failed to delete review.";
}
?>


<?php

// Configuration
$host = 'localhost';
$dbname = 'database_name';
$user = 'username';
$password = 'password';

// Connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $user, $password);

class Review {
  private $conn;

  public function __construct() {
    $this->conn = new PDO("mysql:host=$host;dbname=$dbname", $user, $password);
  }

  // Create a review
  public function createReview($userId, $productId, $rating, $review) {
    $stmt = $this->conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
  }

  // Read all reviews
  public function readReviews() {
    $stmt = $this->conn->prepare("SELECT * FROM reviews");
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Read a single review by ID
  public function readReview($id) {
    $stmt = $this->conn->prepare("SELECT * FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  // Update a review
  public function updateReview($id, $userId, $productId, $rating, $review) {
    $stmt = $this->conn->prepare("UPDATE reviews SET user_id = :user_id, product_id = :product_id, rating = :rating, review = :review WHERE id = :id");
    $stmt->bindParam(':id', $id);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
  }

  // Delete a review
  public function deleteReview($id) {
    $stmt = $this->conn->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $id);
    return $stmt->execute();
  }
}

// Example usage:
$review = new Review();

// Create a review
$userId = 1;
$product_id = 1;
$rating = 5;
$review_text = 'Great product!';
$success = $review->createReview($userId, $product_id, $rating, $review_text);
echo "Created review: " . ($success ? "true" : "false");

// Read all reviews
$reviews = $review->readReviews();
foreach ($reviews as $review) {
  echo "User ID: $review[user_id], Product ID: $review[product_id], Rating: $review[rating], Review: $review[review]
";
}

// Read a single review by ID
$reviewId = 1;
$singleReview = $review->readReview($reviewId);
echo "ID: $singleReview[id], User ID: $singleReview[user_id], Product ID: $singleReview[product_id], Rating: $singleReview[rating], Review: $singleReview[review]
";

// Update a review
$newRating = 4;
$newReviewText = 'Good product!';
$success = $review->updateReview($reviewId, $userId, $product_id, $newRating, $newReviewText);
echo "Updated review: " . ($success ? "true" : "false");

// Delete a review
$success = $review->deleteReview($reviewId);
echo "Deleted review: " . ($success ? "true" : "false");


// reviews.php

$reviews = [
    1 => [
        'id' => 1,
        'title' => 'Great Product!',
        'rating' => 5,
        'review' => 'This product is amazing! I highly recommend it.',
        'user_id' => 1,
        'product_id' => 1
    ],
    2 => [
        'id' => 2,
        'title' => 'Not what I expected',
        'rating' => 2,
        'review' => 'Unfortunately, this product didn\'t meet my expectations.',
        'user_id' => 2,
        'product_id' => 1
    ],
];


// functions.php

function createUserReview($title, $rating, $review, $user_id, $product_id) {
    // Create a unique ID for the review
    $new_review_id = count($GLOBALS['reviews']) + 1;
    
    // Add new review to array (database)
    $GLOBALS['reviews'][$new_review_id] = [
        'id' => $new_review_id,
        'title' => $title,
        'rating' => $rating,
        'review' => $review,
        'user_id' => $user_id,
        'product_id' => $product_id
    ];
    
    // Return the new review's ID for reference
    return $new_review_id;
}


// index.php

require_once('functions.php');

$new_review_id = createUserReview(
    'Great Experience!',
    5,
    'I\'m so happy with my purchase! The customer service was top-notch.',
    1,
    1
);

echo "New Review Added: " . $new_review_id;


function getAllReviews() {
    return $GLOBALS['reviews'];
}

$all_reviews = getAllReviews();
foreach ($all_reviews as $review) {
    echo "Review #{$review['id']}: {$review['title']} ({$review['rating']}/5)
";
    echo "{$review['review']}

";
}


// review.php

class Review {
    private $id;
    private $userId;
    private $productId;
    private $rating;
    private $comment;

    public function __construct($id, $userId, $productId, $rating, $comment) {
        $this->id = $id;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


// reviewController.php

class ReviewController extends Controller {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview($productId, $rating, $comment, $userId) {
        $review = new Review(null, $userId, $productId, $rating, $comment);
        $this->db->insert('reviews', array(
            'product_id' => $review->getProductId(),
            'user_id' => $review->getUserId(),
            'rating' => $review->getRating(),
            'comment' => $review->getComment()
        ));
        return $this->db->lastInsertId();
    }

    public function getReviews($productId) {
        $reviews = array();
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC");
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        while ($row = $stmt->fetch()) {
            $review = new Review($row['id'], $row['user_id'], $row['product_id'], $row['rating'], $row['comment']);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public function updateReview($reviewId, $newRating, $newComment) {
        $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id");
        $stmt->bindParam(':id', $reviewId);
        $stmt->bindParam(':rating', $newRating);
        $stmt->bindParam(':comment', $newComment);
        return $stmt->execute();
    }

    public function deleteReview($reviewId) {
        return $this->db->delete('reviews', array('id' => $reviewId));
    }
}


// review.php

$db = new PDO('sqlite:reviews.db');

$reviewController = new ReviewController($db);

// Create a new review
$productId = 1;
$rating = 5;
$comment = 'Great product!';
$userId = 1;

$reviewId = $reviewController->createReview($productId, $rating, $comment, $userId);
echo "New review created with id: $reviewId
";

// Get all reviews for a product
$reviews = $reviewController->getReviews(1);
foreach ($reviews as $review) {
    echo "Rating: {$review->getRating()}, Comment: {$review->getComment()}
";
}

// Update an existing review
$reviewId = 1;
$newRating = 4;
$newComment = 'Good product!';

$success = $reviewController->updateReview($reviewId, $newRating, $newComment);
if ($success) {
    echo "Review updated successfully
";
} else {
    echo "Error updating review
";
}

// Delete a review
$reviewId = 1;

$success = $reviewController->deleteReview($reviewId);
if ($success) {
    echo "Review deleted successfully
";
} else {
    echo "Error deleting review
";
}


function create_review($product_id, $rating, $review_text) {
  // Check if the product exists
  $product = fetch_product_data($product_id);
  if (!$product) {
    throw new Exception("Product not found");
  }

  // Create a new review
  $new_review = array(
    "product_id" => $product_id,
    "rating" => $rating,
    "review_text" => $review_text,
    "created_at" => date("Y-m-d H:i:s")
  );

  // Insert the review into the database
  insert_review_into_database($new_review);

  return true;
}

function fetch_reviews_for_product($product_id) {
  // Fetch all reviews for a product from the database
  $reviews = fetch_reviews_from_database($product_id);
  return $reviews;
}


// Create a new review for a product with ID 1
$product_id = 1;
$rating = 5;
$review_text = "I loved this product! It's amazing.";
create_review($product_id, $rating, $review_text);

// Fetch all reviews for the product with ID 2
$product_id = 2;
$reviews = fetch_reviews_for_product($product_id);
print_r($reviews);


function insert_review_into_database($new_review) {
  // Connect to the database
  $db = new PDO("mysql:host=localhost;dbname=mydatabase", "myuser", "mypassword");

  // Prepare and execute the INSERT query
  $stmt = $db->prepare("INSERT INTO reviews (product_id, rating, review_text, created_at) VALUES (:product_id, :rating, :review_text, NOW())");
  $stmt->execute(array(
    ":product_id" => $new_review["product_id"],
    ":rating" => $new_review["rating"],
    ":review_text" => $new_review["review_text"]
  ));

  // Close the database connection
  $db = null;
}

function fetch_reviews_from_database($product_id) {
  // Connect to the database
  $db = new PDO("mysql:host=localhost;dbname=mydatabase", "myuser", "mypassword");

  // Prepare and execute the SELECT query
  $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
  $stmt->execute(array(":product_id" => $product_id));

  // Fetch all rows from the result set
  $reviews = array();
  while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
    $reviews[] = $row;
  }

  // Close the database connection
  $db = null;

  return $reviews;
}


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to create a review
function create_review($user_id, $product_id, $rating, $comment) {
    global $conn;
    
    // Prepare query
    $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("iis", $user_id, $product_id, $rating, $comment);
    
    // Execute query
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error: " . $stmt->error;
        return false;
    }
}

// Function to retrieve reviews for a product
function get_reviews($product_id) {
    global $conn;
    
    // Prepare query
    $stmt = $conn->prepare("SELECT r.id, u.name, r.rating, r.comment FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = ?");
    $stmt->bind_param("i", $product_id);
    
    // Execute query and fetch results
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        
        while ($row = $result->fetch_assoc()) {
            echo "<p>Review by " . $row['name'] . ":</p>";
            echo "<p>Rating: " . $row['rating'] . "/5</p>";
            echo "<p>" . $row['comment'] . "</p>";
        }
    } else {
        echo "Error: " . $stmt->error;
    }
}

// Function to display review form
function display_review_form($product_id) {
    global $conn;
    
    // Prepare query to retrieve user data
    $stmt = $conn->prepare("SELECT id, name FROM users WHERE id = ?");
    $stmt->bind_param("i", $_SESSION['user_id']);
    
    // Execute query and fetch result
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        
        while ($row = $result->fetch_assoc()) {
            echo "<h2>Review " . $product_id . "</h2>";
            
            // Display rating options
            echo "<select name='rating'>";
            for ($i = 1; $i <= 5; $i++) {
                echo "<option value='" . $i . "'>" . $i . "/5</option>";
            }
            echo "</select>";
            
            // Display comment textarea
            echo "<textarea name='comment' rows='10' cols='50'></textarea>";
        }
    } else {
        echo "Error: " . $stmt->error;
    }
}

// Function to submit review form
function submit_review($product_id) {
    global $conn;
    
    // Retrieve rating and comment from form data
    $rating = $_POST['rating'];
    $comment = $_POST['comment'];
    
    // Call create_review function
    if (create_review($_SESSION['user_id'], $product_id, $rating, $comment)) {
        echo "Review submitted successfully!";
    } else {
        echo "Error submitting review.";
    }
}

// Initialize review form display based on user action
if (isset($_GET['action']) && $_GET['action'] == 'review') {
    display_review_form($_GET['product_id']);
    
} elseif (isset($_POST['rating']) && isset($_POST['comment'])) {
    submit_review($_GET['product_id']);
}

?>


class Review {
  private $db;

  public function __construct() {
    // Initialize database connection
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  }

  /**
   * Create a new review
   *
   * @param int $user_id ID of the user making the review
   * @param string $product_name Name of the product being reviewed
   * @param int $rating Rating given to the product (1-5)
   * @param string $review Text of the review
   */
  public function createReview($user_id, $product_name, $rating, $review) {
    try {
      // Insert new review into database
      $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_name, rating, review) VALUES (:user_id, :product_name, :rating, :review)');
      $stmt->execute([
        'user_id' => $user_id,
        'product_name' => $product_name,
        'rating' => $rating,
        'review' => $review
      ]);

      return true;
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Get all reviews for a specific product
   *
   * @param string $product_name Name of the product to retrieve reviews for
   */
  public function getReviews($product_name) {
    try {
      // Retrieve reviews from database
      $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_name = :product_name');
      $stmt->execute(['product_name' => $product_name]);
      return $stmt->fetchAll();
    } catch (PDOException $e) {
      echo "Error retrieving reviews: " . $e->getMessage();
      return array();
    }
  }

  /**
   * Get a specific review by ID
   *
   * @param int $review_id ID of the review to retrieve
   */
  public function getReview($review_id) {
    try {
      // Retrieve review from database
      $stmt = $this->db->prepare('SELECT * FROM reviews WHERE id = :id');
      $stmt->execute(['id' => $review_id]);
      return $stmt->fetch();
    } catch (PDOException $e) {
      echo "Error retrieving review: " . $e->getMessage();
      return null;
    }
  }

  /**
   * Update an existing review
   *
   * @param int $review_id ID of the review to update
   * @param string $product_name Name of the product being reviewed
   * @param int $rating Rating given to the product (1-5)
   * @param string $review Text of the review
   */
  public function updateReview($review_id, $product_name, $rating, $review) {
    try {
      // Update review in database
      $stmt = $this->db->prepare('UPDATE reviews SET product_name = :product_name, rating = :rating, review = :review WHERE id = :id');
      $stmt->execute([
        'id' => $review_id,
        'product_name' => $product_name,
        'rating' => $rating,
        'review' => $review
      ]);

      return true;
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Delete a review by ID
   *
   * @param int $review_id ID of the review to delete
   */
  public function deleteReview($review_id) {
    try {
      // Delete review from database
      $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :id');
      $stmt->execute(['id' => $review_id]);

      return true;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }

}


$review = new Review();

// Create a new review
$user_id = 1; // ID of the user making the review
$product_name = 'Apple iPhone';
$rating = 4;
$review_text = 'This phone is amazing!';
$review->createReview($user_id, $product_name, $rating, $review_text);

// Get all reviews for a specific product
$product_name = 'Apple iPhone';
$reviews = $review->getReviews($product_name);
foreach ($reviews as $review) {
  echo "Rating: " . $review['rating'] . ", Review: " . $review['review'] . "
";
}

// Update an existing review
$review_id = 1; // ID of the review to update
$product_name = 'Apple iPhone';
$rating = 5;
$review_text = 'This phone is incredible!';
$review->updateReview($review_id, $product_name, $rating, $review_text);

// Delete a review by ID
$review_id = 1; // ID of the review to delete
$review->deleteReview($review_id);


class Review {
  private $db;

  public function __construct() {
    require_once 'db.php'; // assuming db.php has the database connection credentials
    $this->db = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
  }

  public function storeReview($productId, $userId, $rating, $comment) {
    if ($this->db->connect_error) {
      throw new Exception('Database connection error');
    }
    $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("iis", $productId, $userId, $rating, $comment);
    if (!$stmt->execute()) {
      throw new Exception('Failed to store review');
    }
  }

  public function getReviews($productId) {
    $reviews = array();
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
    $stmt->bind_param("i", $productId);
    if ($stmt->execute()) {
      $result = $stmt->get_result();
      while ($review = $result->fetch_assoc()) {
        $reviews[] = (object)array(
          'id' => $review['id'],
          'rating' => $review['rating'],
          'comment' => $review['comment']
        );
      }
    }
    return $reviews;
  }

  public function destroyReview($reviewId) {
    if ($this->db->connect_error) {
      throw new Exception('Database connection error');
    }
    $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
    $stmt->bind_param("i", $reviewId);
    if (!$stmt->execute()) {
      throw new Exception('Failed to delete review');
    }
  }
}


function userReview() {
  require_once 'Review.php'; // assuming the Review class is in this file

  $review = new Review();
  if (isset($_POST['reviewForm'])) {
    try {
      $productId = $_POST['product_id'];
      $userId = $_SESSION['user_id']; // assuming user ID is stored in session
      $rating = intval($_POST['rating']);
      $comment = $_POST['comment'];
      $review->storeReview($productId, $userId, $rating, $comment);
    } catch (Exception $e) {
      echo 'Error: ' . $e->getMessage();
    }
  }

  // Display reviews on product page
  if (isset($_GET['product_id'])) {
    $productId = intval($_GET['product_id']);
    $reviews = $review->getReviews($productId);
    foreach ($reviews as $review) {
      echo '<p>Rating: ' . $review->rating . ', Comment: ' . $review->comment . '</p>';
    }
  }
}


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
  }

  public function createReview($user_id, $product_id, $rating, $review) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, review)
              VALUES (:user_id, :product_id, :rating, :review)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
  }

  public function getReviewsForUser($user_id) {
    $query = "SELECT * FROM reviews
              WHERE user_id = :user_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    return $stmt->execute() ? $stmt->fetchAll(PDO::FETCH_ASSOC) : array();
  }

  public function editReview($review_id, $rating, $review) {
    $query = "UPDATE reviews
              SET rating = :rating,
                  review = :review
              WHERE id = :review_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':review_id', $review_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
  }

  public function deleteReview($review_id) {
    $query = "DELETE FROM reviews
              WHERE id = :review_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':review_id', $review_id);
    return $stmt->execute();
  }
}


$review = new Review();

// Create a new review
$review->createReview(1, 1, 5, "This product is amazing!");

// View reviews for user with ID 1
$reviewsForUser = $review->getReviewsForUser(1);
print_r($reviewsForUser);

// Edit the first review for user with ID 1
$review->editReview($reviewsForUser[0]['id'], 4, "This product is okay.");

// Delete the second review for user with ID 1
$review->deleteReview($reviewsForUser[1]['id']);


class Review {
    private $db;

    public function __construct() {
        $this->db = new mysqli('localhost', 'username', 'password', 'database');
    }

    // Create a new review
    public function create($product_id, $user_id, $rating, $review_text) {
        if (!$this->db->query("INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES ('$product_id', '$user_id', '$rating', '$review_text')")) {
            return false;
        }
        return true;
    }

    // Get all reviews for a product
    public function getAllReviewsForProduct($product_id) {
        $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
        $result = $this->db->query($query);
        while ($row = $result->fetch_assoc()) {
            $reviews[] = array(
                'id' => $row['id'],
                'rating' => $row['rating'],
                'review_text' => $row['review_text']
            );
        }
        return $reviews;
    }

    // Get all reviews for a user
    public function getAllReviewsForUser($user_id) {
        $query = "SELECT * FROM reviews WHERE user_id = '$user_id'";
        $result = $this->db->query($query);
        while ($row = $result->fetch_assoc()) {
            $reviews[] = array(
                'id' => $row['id'],
                'rating' => $row['rating'],
                'review_text' => $row['review_text']
            );
        }
        return $reviews;
    }

    // Update a review
    public function update($review_id, $product_id, $user_id, $rating, $review_text) {
        if (!$this->db->query("UPDATE reviews SET product_id = '$product_id', user_id = '$user_id', rating = '$rating', review_text = '$review_text' WHERE id = '$review_id'")) {
            return false;
        }
        return true;
    }

    // Delete a review
    public function delete($review_id) {
        if (!$this->db->query("DELETE FROM reviews WHERE id = '$review_id'")) {
            return false;
        }
        return true;
    }
}


$review = new Review();

// Create a new review
$result = $review->create(1, 1, 5, 'Great product!');
echo var_dump($result); // bool(true)

// Get all reviews for a product
$reviews = $review->getAllReviewsForProduct(1);
echo '<pre>';
print_r($reviews);
echo '</pre>';

// Update a review
$result = $review->update(1, 2, 2, 4, 'Not bad');
echo var_dump($result); // bool(true)

// Delete a review
$result = $review->delete(1);
echo var_dump($result); // bool(true)


// Database Connection Settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'product_reviews');

// Establish Database Connection
$connection = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}

class ReviewSystem {
    private $connection;

    function __construct() {
        $this->connection = $GLOBALS['connection'];
    }

    // Function to register a new user
    public function registerUser($username, $email, $password) {
        $query = "INSERT INTO users (username, email, password) VALUES (?, ?, ?)";
        $stmt = $this->connection->prepare($query);
        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
        $stmt->bind_param("sss", $username, $email, $hashedPassword);
        if ($stmt->execute()) {
            echo "User registered successfully!";
        } else {
            echo "Error registering user: " . $this->connection->error;
        }
    }

    // Function to login a user
    public function loginUser($username, $password) {
        $query = "SELECT * FROM users WHERE username = ?";
        $stmt = $this->connection->prepare($query);
        $stmt->bind_param("s", $username);
        if ($stmt->execute()) {
            $user = $stmt->get_result()->fetch_assoc();
            if (password_verify($password, $user['password'])) {
                echo "User logged in successfully!";
            } else {
                echo "Invalid password";
            }
        } else {
            echo "Error logging user: " . $this->connection->error;
        }
    }

    // Function to create a new review
    public function createReview($productId, $username, $reviewText) {
        $query = "INSERT INTO reviews (product_id, username, review_text) VALUES (?, ?, ?)";
        $stmt = $this->connection->prepare($query);
        $stmt->bind_param("sss", $productId, $username, $reviewText);
        if ($stmt->execute()) {
            echo "Review created successfully!";
        } else {
            echo "Error creating review: " . $this->connection->error;
        }
    }

    // Function to display all reviews for a product
    public function displayReviews($productId) {
        $query = "SELECT * FROM reviews WHERE product_id = ?";
        $stmt = $this->connection->prepare($query);
        $stmt->bind_param("s", $productId);
        if ($stmt->execute()) {
            $reviews = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
            echo json_encode($reviews);
        } else {
            echo "Error displaying reviews: " . $this->connection->error;
        }
    }
}

// Example Usage
$reviewSystem = new ReviewSystem();

// Register a new user
$username = 'john_doe';
$email = 'johndoe@example.com';
$password = 'password123';
$reviewSystem->registerUser($username, $email, $password);

// Login an existing user
$loginUsername = 'john_doe';
$loginPassword = 'password123';
$reviewSystem->loginUser($loginUsername, $loginPassword);

// Create a new review
$productId = 1;
$reviewText = 'This is a great product!';
$username = 'john_doe';
$reviewSystem->createReview($productId, $username, $reviewText);

// Display all reviews for a product
$productId = 1;
$reviews = $reviewSystem->displayReviews($productId);
echo $reviews;


<?php

// Database connection settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function addReview($reviewData) {
    // Insert review into database
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
            VALUES (?, ?, ?, ?)";
    
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiii", $reviewData['product_id'], $reviewData['user_id'], $reviewData['rating'], $reviewData['comment']);
    $result = $stmt->execute();
    
    if (!$result) {
        echo "Error adding review: " . $conn->error;
    } else {
        return true; // Review added successfully
    }
}

function getReviews($product_id, $limit = null, $offset = null) {
    // Retrieve reviews from database
    $sql = "SELECT * FROM reviews WHERE product_id = ? ORDER BY created_at DESC";
    
    if ($limit !== null) {
        $sql .= " LIMIT ?";
    }
    
    if ($offset !== null) {
        $sql .= " OFFSET ?";
    }
    
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    if ($limit !== null && $offset !== null) {
        $stmt->bind_param("ii", $limit, $offset);
    } elseif ($limit !== null) {
        $stmt->bind_param("i", $limit);
    }
    
    $result = $stmt->execute();
    $reviews = array();
    
    if (!$result || !$stmt->num_rows > 0) {
        return $reviews; // No reviews found
    }
    
    while ($row = $stmt->fetch_assoc()) {
        $reviews[] = $row;
    }
    
    return $reviews;
}

function editReview($review_id, $newData) {
    // Update review in database
    $sql = "UPDATE reviews SET rating = ?, comment = ? WHERE id = ?";
    
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iii", $newData['rating'], $newData['comment'], $review_id);
    $result = $stmt->execute();
    
    if (!$result) {
        echo "Error editing review: " . $conn->error;
    } else {
        return true; // Review edited successfully
    }
}

function deleteReview($review_id) {
    // Delete review from database
    $sql = "DELETE FROM reviews WHERE id = ?";
    
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $review_id);
    $result = $stmt->execute();
    
    if (!$result) {
        echo "Error deleting review: " . $conn->error;
    } else {
        return true; // Review deleted successfully
    }
}

?>


$reviewData = array(
    'product_id' => 123,
    'user_id' => 456,
    'rating' => 5,
    'comment' => 'Great product!'
);
addReview($reviewData); // Returns true if review added successfully


$reviews = getReviews(123, 10, 0); // Retrieves first 10 reviews for product with ID 123
print_r($reviews); // Prints array of review data


$newData = array(
    'rating' => 4,
    'comment' => 'Good product.'
);
editReview(789, $newData); // Returns true if review edited successfully


deleteReview(789); // Returns true if review deleted successfully


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to create a review
function create_review($product_id, $user_id, $rating, $review_text) {
    // Insert into reviews table
    $sql = "INSERT INTO reviews (product_id, user_id, rating, review_text)
            VALUES ('$product_id', '$user_id', '$rating', '$review_text')";
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to get all reviews for a product
function get_reviews($product_id) {
    $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $reviews[] = array(
                'id' => $row['id'],
                'user_id' => $row['user_id'],
                'rating' => $row['rating'],
                'review_text' => $row['review_text']
            );
        }
        return $reviews;
    } else {
        return null;
    }
}

// Function to get a review by ID
function get_review($id) {
    $sql = "SELECT * FROM reviews WHERE id = '$id'";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        return $row = $result->fetch_assoc();
    } else {
        return null;
    }
}

// Function to update a review
function update_review($id, $rating, $review_text) {
    // Update review in database
    $sql = "UPDATE reviews SET rating = '$rating', review_text = '$review_text'
            WHERE id = '$id'";
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Function to delete a review
function delete_review($id) {
    // Delete review from database
    $sql = "DELETE FROM reviews WHERE id = '$id'";
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

?>


<?php

// Create a new review
$product_id = 1; // ID of the product being reviewed
$user_id = 1; // ID of the user submitting the review
$rating = 5; // Rating (out of 5) given by the user
$review_text = "This product is amazing!"; // Text of the review

if (create_review($product_id, $user_id, $rating, $review_text)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

// Get all reviews for a product
$product_id = 1; // ID of the product being reviewed
$reviews = get_reviews($product_id);
if ($reviews) {
    foreach ($reviews as $review) {
        echo "Review #{$review['id']}: {$review['review_text']} (Rating: {$review['rating']})";
    }
} else {
    echo "No reviews found for this product.";
}

// Get a review by ID
$review_id = 1; // ID of the review being retrieved
$review = get_review($review_id);
if ($review) {
    echo "Review #{$review['id']}: {$review['review_text']} (Rating: {$review['rating']})";
} else {
    echo "No review found with this ID.";
}

// Update a review
$review_id = 1; // ID of the review being updated
$new_rating = 4; // New rating given by the user
$new_review_text = "This product is good, but not great."; // New text of the review

if (update_review($review_id, $new_rating, $new_review_text)) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review.";
}

// Delete a review
$review_id = 1; // ID of the review being deleted

if (delete_review($review_id)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}
?>


<?php

// Configuration for database connection
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$dbname = 'reviews_database';

// Establishing the database connection
$conn = new mysqli($host, $username, $password, $dbname);

// Check if the connection was successful
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

class ReviewSystem {

    public function createReview(int $productId, int $rating, string $reviewText): bool {
        // Preparing SQL statement to insert a new review
        $stmt = $conn->prepare("INSERT INTO reviews (product_id, rating, review_text) VALUES (?, ?, ?)");
        
        // Binding the parameters
        $stmt->bind_param('iis', $productId, $rating, $reviewText);
        
        // Executing the query
        if (!$stmt->execute()) {
            return false;  // Failed to insert review
        }
        
        // If no issues occurred during execution, close and free resources
        $stmt->close();
        return true;   // Successfully inserted review
    }

    public function getReviewsForProduct(int $productId): array {
        // SQL statement to retrieve reviews for a product
        $query = "SELECT r.id, r.rating, r.review_text, r.created_at FROM reviews r WHERE r.product_id = ?";

        // Preparing the query with parameters bound
        $stmt = $conn->prepare($query);
        $stmt->bind_param('i', $productId);

        // Executing the query and fetching results
        $stmt->execute();
        $result = $stmt->get_result();

        // Converting to an array for easier handling in PHP
        $reviewsArray = [];
        while ($review = $result->fetch_assoc()) {
            $reviewsArray[] = $review;
        }

        // Clean up resources and return the reviews array
        $stmt->close();
        return $reviewsArray;
    }

    public function updateReview(int $reviewId, int $newRating, string $newReviewText): bool {
        // SQL statement to update a review
        $query = "UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?";
        
        // Preparing the query with parameters bound
        $stmt = $conn->prepare($query);
        $stmt->bind_param('iis', $newRating, $newReviewText, $reviewId);

        // Executing the update
        if (!$stmt->execute()) {
            return false;  // Failed to update review
        }
        
        // If no issues occurred during execution, close and free resources
        $stmt->close();
        return true;   // Successfully updated review
    }

    public function deleteReview(int $reviewId): bool {
        // SQL statement to delete a review
        $query = "DELETE FROM reviews WHERE id = ?";

        // Preparing the query with parameter bound
        $stmt = $conn->prepare($query);
        $stmt->bind_param('i', $reviewId);

        // Executing the deletion and checking for success
        if (!$stmt->execute()) {
            return false;  // Failed to delete review
        }
        
        // If no issues occurred during execution, close resources
        $stmt->close();
        return true;   // Successfully deleted review
    }

}

// Example usage:
$reviewSystem = new ReviewSystem();

// Creating a new product
$productID = null;
$stmt = $conn->prepare("INSERT INTO products (name) VALUES (?)");
$stmt->bind_param('s', 'Test Product');
if (!$stmt->execute()) {
    echo "Failed to insert product: " . $conn->error;
} else {
    $productID = $conn->insert_id; // Get the ID of the new product
}

// Creating a new review for this product
$rating = 4;
(reviewText) = 'This is a great product!';
if (!$reviewSystem->createReview($productID, $rating, $reviewText)) {
    echo "Failed to create review.";
} else {
    echo "Review created successfully!";
}

// Retrieving reviews for the same product
$reviews = $reviewSystem->getReviewsForProduct($productID);
echo "Reviews: ";
print_r($reviews);

// Update an existing review
if (!$reviewSystem->updateReview(1, 5, 'This is a better product!')) {
    echo "Failed to update review.";
} else {
    echo "Review updated successfully!";
}

// Delete a review
if (!$reviewSystem->deleteReview(2)) {
    echo "Failed to delete review.";
} else {
    echo "Review deleted successfully!";
}

$conn->close();

?>


<?php
class Review {
    private $id;
    private $reviewer_name;
    private $rating;
    private $title;
    private $content;

    public function __construct($id, $reviewer_name, $rating, $title, $content) {
        $this->id = $id;
        $this->reviewer_name = $reviewer_name;
        $this->rating = $rating;
        $this->title = $title;
        $this->content = $content;
    }

    public function getId() {
        return $this->id;
    }

    public function getReviewerName() {
        return $this->reviewer_name;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getContent() {
        return $this->content;
    }
}

class ReviewManager {
    private $reviews = array();

    public function addReview(Review $review) {
        $this->reviews[$review->getId()] = $review;
    }

    public function getReviews() {
        return $this->reviews;
    }

    public function getReview($id) {
        if (isset($this->reviews[$id])) {
            return $this->reviews[$id];
        } else {
            return null;
        }
    }

    public function deleteReview($id) {
        if (isset($this->reviews[$id])) {
            unset($this->reviews[$id]);
        }
    }
}

// Example usage:

$reviewManager = new ReviewManager();

$review1 = new Review(1, 'John Doe', 5, 'Great product!', 'I love this product!');

$reviewManager->addReview($review1);

echo "Reviews:
";
foreach ($reviewManager->getReviews() as $review) {
    echo "ID: " . $review->getId() . "
";
    echo "Reviewer Name: " . $review->getReviewerName() . "
";
    echo "Rating: " . $review->getRating() . "/5
";
    echo "Title: " . $review->getTitle() . "
";
    echo "Content: " . $review->getContent() . "
";
}
?>


<?php

// Include configuration files
require_once 'config.php';
require_once 'functions.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    redirect_to('login.php');
}

// Handle form submission
if (isset($_POST['submit'])) {

    // Validate form data
    $title = trim($_POST['title']);
    $description = trim($_POST['description']);

    if (!$title || !$description) {
        $errors[] = 'Please fill in all fields.';
    }

    if (!empty($errors)) {
        echo display_errors($errors);
    } else {

        // Insert review into database
        $query = "INSERT INTO reviews (title, description, rating, approved, created_at)
                  VALUES (:title, :description, 0, 0, NOW())";
        $stmt = $pdo->prepare($query);
        $stmt->execute([
            ':title' => $title,
            ':description' => $description
        ]);

        echo 'Review submitted successfully!';
    }
}

// Display review form
?>

<form action="" method="post">
    <label for="title">Title:</label>
    <input type="text" id="title" name="title"><br><br>
    <label for="description">Description:</label>
    <textarea id="description" name="description"></textarea><br><br>
    <button type="submit" name="submit">Submit Review</button>
</form>

<?php


<?php

// Include configuration files
require_once 'config.php';
require_once 'functions.php';

// Check if user is logged in as administrator
if (!isset($_SESSION['user_id']) || !in_array($_SESSION['role'], ['administrator', 'admin'])) {
    redirect_to('login.php');
}

// Display review table
?>

<table>
    <tr>
        <th>Title</th>
        <th>Description</th>
        <th>Rating</th>
        <th>Approved?</th>
        <th>Action</th>
    </tr>

    <?php

    // Retrieve reviews from database
    $query = "SELECT * FROM reviews WHERE approved = 0";
    $stmt = $pdo->prepare($query);
    $stmt->execute();
    while ($row = $stmt->fetch()) {
        echo '<tr>';
        echo '<td>' . $row['title'] . '</td>';
        echo '<td>' . $row['description'] . '</td>';
        echo '<td>0</td>';
        if (!$row['approved']) {
            echo '<td>No</td>';
        } else {
            echo '<td,Yes</td>';
        }
        echo '<td><a href="approve.php?id=' . $row['id'] . '">Approve</a> | <a href="reject.php?id=' . $row['id'] . '">Reject</a></td>';
        echo '</tr>';
    }

    ?>
</table>

<?php


<?php

// Include configuration files
require_once 'config.php';
require_once 'functions.php';

// Check if user is logged in as administrator
if (!isset($_SESSION['user_id']) || !in_array($_SESSION['role'], ['administrator', 'admin'])) {
    redirect_to('login.php');
}

// Get review ID from URL parameter
$id = $_GET['id'];

// Update review to approved or rejected
$query = "UPDATE reviews SET approved = :approved WHERE id = :id";
$stmt = $pdo->prepare($query);
$stmt->execute([
    ':approved' => 1, // Approved
    ':id' => $id
]);

echo 'Review approved/rejected successfully!';

?>


<?php

// Include configuration files
require_once 'config.php';
require_once 'functions.php';

// Get user ID from URL parameter or session
$user_id = $_GET['id'] ?? $_SESSION['user_id'];

// Retrieve reviews from database
$query = "SELECT * FROM reviews WHERE id IN (SELECT review_id FROM users_reviews WHERE user_id = :user_id)";
$stmt = $pdo->prepare($query);
$stmt->execute([':user_id' => $user_id]);

?>

<table>
    <tr>
        <th>Title</th>
        <th>Description</th>
        <th>Rating</th>
    </tr>

    <?php

    while ($row = $stmt->fetch()) {
        echo '<tr>';
        echo '<td>' . $row['title'] . '</td>';
        echo '<td>' . $row['description'] . '</td>';
        echo '<td>0</td>';
        echo '</tr>';
    }

    ?>
</table>

<?php


<?php
// Configuration settings
define('DATABASE_HOST', 'localhost');
define('DATABASE_USERNAME', 'your_username');
define('DATABASE_PASSWORD', 'your_password');
define('DATABASE_NAME', 'your_database_name');

// Connect to database
$mysqli = new mysqli(DATABASE_HOST, DATABASE_USERNAME, DATABASE_PASSWORD, DATABASE_NAME);

function getReviews($product_id) {
    // SQL query to retrieve reviews for a product
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $mysqli->query($query);
    
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $reviews[] = array(
                'id' => $row['id'],
                'rating' => $row['rating'],
                'review' => $row['review'],
                'created_at' => $row['created_at']
            );
        }
    } else {
        $reviews = array();
    }

    return $reviews;
}

function addReview($product_id, $rating, $review) {
    // SQL query to insert a new review
    $query = "INSERT INTO reviews (product_id, rating, review, created_at) VALUES ('$product_id', '$rating', '$review', NOW())";
    
    if ($mysqli->query($query)) {
        return true;
    } else {
        return false;
    }
}

function getAverageRating($product_id) {
    // SQL query to calculate average rating for a product
    $query = "SELECT AVG(rating) AS average FROM reviews WHERE product_id = '$product_id'";
    $result = $mysqli->query($query);
    
    if ($result->num_rows > 0) {
        return $result->fetch_assoc()['average'];
    } else {
        return 0;
    }
}

// Example usage:
$product_id = 1; // Replace with the actual product ID
$reviews = getReviews($product_id);

if (!empty($reviews)) {
    foreach ($reviews as $review) {
        echo "Rating: $review[rating]/5, Review: $review[review], Created At: $review[created_at]<br>";
    }
    
    // Calculate average rating
    $average_rating = getAverageRating($product_id);
    echo "Average Rating: $average_rating/5<br>";
} else {
    echo "No reviews found for this product.";
}

// Close database connection
$mysqli->close();
?>


// database.php (example database connection file)
$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'reviews';

$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// reviews.php (user review function file)
require_once 'database.php';

function add_review($review_text, $rating, $username) {
    global $conn;

    // Validate input
    if (!ctype_alnum($username)) {
        echo 'Invalid username';
        return false;
    }

    if (!preg_match('/^[0-9]+$/', $rating)) {
        echo 'Invalid rating';
        return false;
    }

    $sql = "INSERT INTO reviews (review_text, rating, username) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("sss", $review_text, $rating, $username);

    if ($stmt->execute()) {
        echo 'Review added successfully';
        return true;
    } else {
        echo 'Error adding review: ' . $stmt->error;
        return false;
    }
}

function get_reviews() {
    global $conn;

    $sql = "SELECT * FROM reviews";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo 'Username: ' . $row['username'] . '<br>';
            echo 'Review Text: ' . $row['review_text'] . '<br>';
            echo 'Rating: ' . $row['rating'] . '<br><hr>';
        }
    } else {
        echo 'No reviews found';
    }
}


$username = 'JohnDoe';
$review_text = 'This is an example review';
$rating = 5;

if (add_review($review_text, $rating, $username)) {
    echo 'Review added successfully!';
}


get_reviews();


<?php

// Database connection settings
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create database connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function getReviews() {
    global $conn;
    
    // SQL query to fetch reviews
    $sql = "SELECT r.id, u.name, r.product_id, r.rating, r.review_text 
            FROM reviews r 
            INNER JOIN users u ON r.user_id = u.id 
            ORDER BY r.id DESC";
    
    $result = $conn->query($sql);
    
    // Check if query was successful
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            echo "ID: " . $row["id"]. " - Name: " . $row["name"]. " - Product ID: " . $row["product_id"]. " - Rating: " . $row["rating"]. " - Review Text: " . $row["review_text"]. "<br>";
        }
    } else {
        echo "0 results";
    }
}

function getAverageRating($productId) {
    global $conn;
    
    // SQL query to fetch average rating for a product
    $sql = "SELECT AVG(r.rating) AS avg_rating 
            FROM reviews r 
            WHERE r.product_id = '$productId'";
    
    $result = $conn->query($sql);
    
    // Check if query was successful and return result
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            return $row["avg_rating"];
        }
    } else {
        return null;
    }
}

// Add review function (example: create a form on your page with the following fields)
function addReview($userId, $productId, $rating, $reviewText) {
    global $conn;
    
    // SQL query to insert new review
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review_text) 
            VALUES ('$userId', '$productId', '$rating', '$reviewText')";
    
    if ($conn->query($sql) === TRUE) {
        echo "Review added successfully";
    } else {
        echo "Error adding review: " . $conn->error;
    }
}

// Example usage
$conn->close();

?>


// database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

// check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// create table for reviews (if it doesn't exist)
$sql = "
CREATE TABLE IF NOT EXISTS reviews (
  id INT AUTO_INCREMENT PRIMARY KEY,
  product_id INT,
  user_id INT,
  rating TINYINT(1),
  review TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
";

$conn->query($sql);

// function to add a new review
function add_review($product_id, $user_id, $rating, $review) {
  global $conn;
  $sql = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("iiss", $product_id, $user_id, $rating, $review);
  $stmt->execute();
}

// function to get all reviews for a product
function get_reviews($product_id) {
  global $conn;
  $sql = "SELECT * FROM reviews WHERE product_id = ? ORDER BY created_at DESC";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
}

// function to get all reviews for a user
function get_user_reviews($user_id) {
  global $conn;
  $sql = "SELECT * FROM reviews WHERE user_id = ? ORDER BY created_at DESC";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $user_id);
  $stmt->execute();
  return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
}

// example usage:
$product_id = 1;
$user_id = 1;
$rating = 5;
$review = "This product is amazing!";

add_review($product_id, $user_id, $rating, $review);

$reviews = get_reviews($product_id);
print_r($reviews);

$user_reviews = get_user_reviews($user_id);
print_r($user_reviews);


<?php

// Configuration
define('DB_HOST', 'your_host');
define('DB_USER', 'your_user');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($mysqli->connect_errno) {
    echo "Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error;
}

function createUserReview($product_id, $rating, $review) {
  global $mysqli;

  // Insert new review
  $query = "
    INSERT INTO reviews (user_id, product_id, rating, review)
    VALUES (1, ?, ?, ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('iii', $product_id, $rating, $review);
  if (!$stmt->execute()) {
      echo "Error: " . $mysqli->error;
  }

  // Update product rating
  $query = "
    UPDATE products
    SET rating = (SELECT AVG(rating) FROM reviews WHERE product_id = ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('i', $product_id);
  if (!$stmt->execute()) {
      echo "Error: " . $mysqli->error;
  }

  // Return new review ID
  return $mysqli->insert_id;
}

function getUserReviews($user_id) {
  global $mysqli;

  // Retrieve reviews for user
  $query = "
    SELECT r.id, p.name, r.rating, r.review
    FROM reviews r
    JOIN products p ON r.product_id = p.id
    WHERE r.user_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('i', $user_id);
  if (!$stmt->execute()) {
      echo "Error: " . $mysqli->error;
  }

  // Return reviews as array
  $reviews = array();
  while ($row = $stmt->fetch_assoc()) {
      $reviews[] = array(
          'id' => $row['id'],
          'product_name' => $row['name'],
          'rating' => $row['rating'],
          'review' => $row['review']
      );
  }
  return $reviews;
}

function getProductReviews($product_id) {
  global $mysqli;

  // Retrieve reviews for product
  $query = "
    SELECT r.id, u.username, r.rating, r.review
    FROM reviews r
    JOIN users u ON r.user_id = u.id
    WHERE r.product_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('i', $product_id);
  if (!$stmt->execute()) {
      echo "Error: " . $mysqli->error;
  }

  // Return reviews as array
  $reviews = array();
  while ($row = $stmt->fetch_assoc()) {
      $reviews[] = array(
          'id' => $row['id'],
          'username' => $row['username'],
          'rating' => $row['rating'],
          'review' => $row['review']
      );
  }
  return $reviews;
}

?>


$product_id = 123;
$rating = 5;
$review = "Great product!";

$review_id = createUserReview($product_id, $rating, $review);
echo "New review created with ID: $review_id";


$user_id = 1;

$reviews = getUserReviews($user_id);
foreach ($reviews as $review) {
    echo "Product: $review['product_name'], Rating: $review['rating'], Review: $review['review']";
}


$product_id = 123;

$reviews = getProductReviews($product_id);
foreach ($reviews as $review) {
    echo "Username: $review['username'], Rating: $review['rating'], Review: $review['review']";
}


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'username', 'password');
  }

  /**
   * Create a new review
   *
   * @param int $user_id User ID
   * @param int $product_id Product ID
   * @param string $review Review text
   * @param int $rating Rating (1-5)
   */
  public function createReview($user_id, $product_id, $review, $rating) {
    try {
      $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, review, rating) VALUES (?, ?, ?, ?)');
      $stmt->execute([$user_id, $product_id, $review, $rating]);
      return $this->db->lastInsertId();
    } catch (PDOException $e) {
      echo 'Error creating review: ' . $e->getMessage();
    }
  }

  /**
   * Get all reviews
   *
   * @return array Reviews data
   */
  public function getAllReviews() {
    try {
      $stmt = $this->db->prepare('SELECT * FROM reviews');
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error fetching reviews: ' . $e->getMessage();
    }
  }

  /**
   * Get review by ID
   *
   * @param int $id Review ID
   * @return array Review data
   */
  public function getReviewById($id) {
    try {
      $stmt = $this->db->prepare('SELECT * FROM reviews WHERE id = ?');
      $stmt->execute([$id]);
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error fetching review: ' . $e->getMessage();
    }
  }

  /**
   * Update a review
   *
   * @param int $id Review ID
   * @param string $review Review text
   * @param int $rating Rating (1-5)
   */
  public function updateReview($id, $review, $rating) {
    try {
      $stmt = $this->db->prepare('UPDATE reviews SET review = ?, rating = ? WHERE id = ?');
      $stmt->execute([$review, $rating, $id]);
    } catch (PDOException $e) {
      echo 'Error updating review: ' . $e->getMessage();
    }
  }

  /**
   * Delete a review
   *
   * @param int $id Review ID
   */
  public function deleteReview($id) {
    try {
      $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = ?');
      $stmt->execute([$id]);
    } catch (PDOException $e) {
      echo 'Error deleting review: ' . $e->getMessage();
    }
  }
}


$review = new Review();

// Create a new review
$user_id = 1;
$product_id = 2;
$review_text = 'Great product!';
$rating = 5;
$new_review_id = $review->createReview($user_id, $product_id, $review_text, $rating);

// Get all reviews
$reviews = $review->getAllReviews();

// Get a review by ID
$review_data = $review->getReviewById(1);

// Update a review
$review->updateReview(1, 'Updated review text!', 4);

// Delete a review
$review->deleteReview(1);


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function addReview($userId, $title, $content, $rating) {
    $query = "INSERT INTO reviews (user_id, title, content, rating) VALUES (:userId, :title, :content, :rating)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':userId', $userId);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    return $stmt->execute();
  }

  public function getReviews() {
    $query = "SELECT * FROM reviews";
    $stmt = $this->db->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getUserReviews($userId) {
    $query = "SELECT * FROM reviews WHERE user_id = :userId";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':userId', $userId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getReview($reviewId) {
    $query = "SELECT * FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $reviewId);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  public function updateReview($reviewId, $title, $content) {
    $query = "UPDATE reviews SET title = :title, content = :content WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $reviewId);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    return $stmt->execute();
  }

  public function deleteReview($reviewId) {
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $reviewId);
    return $stmt->execute();
  }
}


class ReviewController {
  private $reviewModel;

  public function __construct($reviewModel) {
    $this->reviewModel = $reviewModel;
  }

  public function addReview($userId, $title, $content, $rating) {
    return $this->reviewModel->addReview($userId, $title, $content, $rating);
  }

  public function getReviews() {
    return $this->reviewModel->getReviews();
  }

  public function getUserReviews($userId) {
    return $this->reviewModel->getUserReviews($userId);
  }

  public function getReview($reviewId) {
    return $this->reviewModel->getReview($reviewId);
  }

  public function updateReview($reviewId, $title, $content) {
    return $this->reviewModel->updateReview($reviewId, $title, $content);
  }

  public function deleteReview($reviewId) {
    return $this->reviewModel->deleteReview($reviewId);
  }
}


// index.php

require_once 'db.php';
require_once 'models/Review.php';
require_once 'controllers/ReviewController.php';

$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
$reviewModel = new Review($db);
$reviewController = new ReviewController($reviewModel);

// Handle user requests
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  if (isset($_POST['add-review'])) {
    $userId = $_SESSION['id'];
    $title = $_POST['title'];
    $content = $_POST['content'];
    $rating = $_POST['rating'];
    $result = $reviewController->addReview($userId, $title, $content, $rating);
    if ($result) {
      header('Location: index.php');
      exit();
    } else {
      echo 'Error adding review';
    }
  }

  // Update or delete reviews
  elseif (isset($_POST['update-review'])) {
    $reviewId = $_GET['id'];
    $title = $_POST['title'];
    $content = $_POST['content'];
    $result = $reviewController->updateReview($reviewId, $title, $content);
    if ($result) {
      header('Location: index.php');
      exit();
    } else {
      echo 'Error updating review';
    }
  }

  // Delete review
  elseif (isset($_POST['delete-review'])) {
    $reviewId = $_GET['id'];
    $result = $reviewController->deleteReview($reviewId);
    if ($result) {
      header('Location: index.php');
      exit();
    } else {
      echo 'Error deleting review';
    }
  }
}

// Display reviews
$reviews = $reviewController->getReviews();
foreach ($reviews as $review) {
  // Display review content here...
}


class UserReview {
    private $reviews = array();

    public function addReview($review) {
        $this->reviews[] = $review;
    }

    public function getAllReviews() {
        return $this->reviews;
    }

    public function getAverageRating() {
        if (empty($this->reviews)) {
            return 0;
        }
        $sum = array_sum(array_column($this->reviews, 'rating'));
        return round($sum / count($this->reviews));
    }

    public function getNumberOfReviews() {
        return count($this->reviews);
    }
}

class Review {
    public $rating;
    public $reviewText;

    function __construct($rating = 0, $reviewText = '') {
        $this->rating = $rating;
        $this->reviewText = $reviewText;
    }
}


$userReview = new UserReview();

$review1 = new Review(5, 'This product is great!');
$userReview->addReview($review1);

$review2 = new Review(4, 'This product is okay.');
$userReview->addReview($review2);

echo "Reviews:
";
foreach ($userReview->getAllReviews() as $review) {
    echo "Rating: {$review->rating}, Text: {$review->reviewText}
";
}

echo "Average Rating: {$userReview->getAverageRating()} out of 5
";
echo "Number of Reviews: {$userReview->getNumberOfReviews()}
";


class ReviewAPI {
    private $userReview;

    function __construct() {
        $this->userReview = new UserReview();
    }

    public function addReview($rating, $reviewText) {
        $newReview = new Review($rating, $reviewText);
        $this->userReview->addReview($newReview);
    }

    public function getReviews() {
        return $this->userReview->getAllReviews();
    }

    public function getAverageRating() {
        return $this->userReview->getAverageRating();
    }
}


$reviewAPI = new ReviewAPI();

$reviewAPI->addReview(5, 'This product is great!');
$reviewAPI->addReview(4, 'This product is okay.');

echo "Reviews:
";
foreach ($reviewAPI->getReviews() as $review) {
    echo "Rating: {$review->rating}, Text: {$review->reviewText}
";
}

echo "Average Rating: {$reviewAPI->getAverageRating()} out of 5
";


// config.php

<?php
define('DB_HOST', 'your_host');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

$pdo = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USERNAME, DB_PASSWORD);

?>


// review_functions.php

<?php
require_once('config.php');

function get_reviews($product_id) {
  $query = "SELECT * FROM reviews WHERE product_id = :product_id";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function add_review($user_id, $product_id, $rating, $review) {
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  return $stmt->execute();
}

?>


// index.php

<?php
require_once('config.php');
require_once('review_functions.php');

if (isset($_POST['add_review'])) {
  $user_id = $_SESSION['user']['id'];
  $product_id = $_GET['product_id'];
  $rating = $_POST['rating'];
  $review = $_POST['review'];

  if (add_review($user_id, $product_id, $rating, $review)) {
    header('Location: index.php?message=Review added successfully!');
    exit;
  }
}

$product_id = $_GET['product_id'];

$reviews = get_reviews($product_id);

?>

<!-- Review Form -->
<form action="" method="post">
  <label for="rating">Rating:</label>
  <select id="rating" name="rating">
    <?php for ($i = 1; $i <= 5; $i++) { ?>
      <option value="<?php echo $i; ?>"><?php echo $i; ?>/5</option>
    <?php } ?>
  </select>

  <label for="review">Review:</label>
  <textarea id="review" name="review"></textarea>

  <input type="submit" name="add_review" value="Add Review">
</form>

<!-- Reviews List -->
<h2>Reviews:</h2>
<ul>
  <?php foreach ($reviews as $review) { ?>
    <li>
      <p><?php echo $review['rating']; ?>/5 stars</p>
      <p><?php echo $review['review']; ?></p>
      <small>Posted by: <?php echo get_username($review['user_id']); ?> on <?php echo date('Y-m-d H:i:s', strtotime($review['created_at'])); ?></small>
    </li>
  <?php } ?>
</ul>

<?php
function get_username($user_id) {
  $query = "SELECT username FROM users WHERE id = :user_id";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->execute();
  return $stmt->fetchColumn();
}
?>


// config.php (database connection settings)
<?php

define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'reviews');

$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($mysqli->connect_error) {
    die("Connection failed: " . $mysqli->connect_error);
}

?>


// user_review.php (display reviews for a product)
<?php

require_once 'config.php';

$product_id = $_GET['product_id'];

$query = "SELECT * FROM products WHERE id = '$product_id'";
$result = $mysqli->query($query);

if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
        $product_name = $row['name'];
    }
} else {
    echo 'No product found';
}

$query = "SELECT * FROM reviews WHERE product_id = '$product_id' ORDER BY created_at DESC";
$result = $mysqli->query($query);

while ($review = $result->fetch_assoc()) {
    if ($review['approved'] == 1) { // Display only approved reviews
        echo '<div class="review">';
        echo '<h2>' . $review['user_name'] . '</h2>';
        echo '<p>Rating: ' . $review['rating'] . '/5</p>';
        echo '<p>' . $review['review'] . '</p>';
        echo '</div>';
    }
}

?>


// add_review.php (add a new review)
<?php

require_once 'config.php';

if (isset($_POST['submit'])) {
    $user_id = $_SESSION['user_id'];
    $product_id = $_GET['product_id'];
    $rating = $_POST['rating'];
    $review = $_POST['review'];

    $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES ('$user_id', '$product_id', '$rating', '$review')";
    $mysqli->query($query);

    echo 'Review added successfully!';
} else {
    // Display form to add a new review
}

?>


// admin_review.php (approve or reject reviews)
<?php

require_once 'config.php';

$query = "SELECT * FROM reviews WHERE approved = 0";
$result = $mysqli->query($query);

while ($review = $result->fetch_assoc()) {
    if (isset($_POST['approved_' . $review['id']])) {
        $query = "UPDATE reviews SET approved = 1 WHERE id = '$review[id]'";
        $mysqli->query($query);
    }

    echo '<div class="review">';
    echo '<h2>' . $review['user_name'] . '</h2>';
    echo '<p>Rating: ' . $review['rating'] . '/5</p>';
    echo '<p>' . $review['review'] . '</p>';
    echo '<form action="" method="post">';
    echo '<input type="hidden" name="approved_' . $review['id'] . '" value="1">';
    echo '<button type="submit">Approve</button>';
    echo '</form>';
    echo '</div>';
}
?>


// review.php

class Review {
  private $id;
  private $user_id;
  private $product_id;
  private $rating;
  private $review;

  public function __construct($data) {
    $this->id = isset($data['id']) ? $data['id'] : null;
    $this->user_id = $data['user_id'];
    $this->product_id = $data['product_id'];
    $this->rating = $data['rating'];
    $this->review = $data['review'];
  }

  public function getRating() {
    return $this->rating;
  }

  public function getReview() {
    return $this->review;
  }
}


// review.controller.php

class ReviewController {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function getAllReviews() {
    $query = "SELECT * FROM reviews";
    return $this->db->fetchAll($query);
  }

  public function getReviewById($id) {
    $query = "SELECT * FROM reviews WHERE id = :id";
    $params = array(":id" => $id);
    return $this->db->fetchAssoc($query, $params);
  }

  public function createReview($data) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, review)
              VALUES (:user_id, :product_id, :rating, :review)";
    $params = array(
      ":user_id" => $data['user_id'],
      ":product_id" => $data['product_id'],
      ":rating" => $data['rating'],
      ":review" => $data['review']
    );
    return $this->db->exec($query, $params);
  }

  public function updateReview($id, $data) {
    $query = "UPDATE reviews SET user_id = :user_id, product_id = :product_id, rating = :rating, review = :review
              WHERE id = :id";
    $params = array(
      ":user_id" => $data['user_id'],
      ":product_id" => $data['product_id'],
      ":rating" => $data['rating'],
      ":review" => $data['review'],
      ":id" => $id
    );
    return $this->db->exec($query, $params);
  }

  public function deleteReview($id) {
    $query = "DELETE FROM reviews WHERE id = :id";
    $params = array(":id" => $id);
    return $this->db->exec($query, $params);
  }
}


// db.php

class DB {
  private static $instance;

  public static function getInstance() {
    if (!self::$instance) {
      self::$instance = new PDO('sqlite:reviews.db');
    }
    return self::$instance;
  }

  public function fetchAll($query, $params = array()) {
    $stmt = $this->prepare($query);
    $stmt->execute($params);
    return $stmt->fetchAll();
  }

  public function fetchAssoc($query, $params = array()) {
    $stmt = $this->prepare($query);
    $stmt->execute($params);
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  public function exec($query, $params = array()) {
    $stmt = $this->prepare($query);
    $stmt->execute($params);
    return $stmt->rowCount();
  }
}


// index.php

require_once 'db.php';
require_once 'review.controller.php';

$db = DB::getInstance();

$reviewController = new ReviewController($db);

// Create a new review
$data = array(
  'user_id' => 1,
  'product_id' => 1,
  'rating' => 5,
  'review' => 'Great product!'
);
$reviewController->createReview($data);

// Get all reviews
$reviews = $reviewController->getAllReviews();
print_r($reviews);

// Get a review by ID
$review = $reviewController->getReviewById(1);
echo $review['rating'];

// Update a review
$data = array(
  'user_id' => 2,
  'product_id' => 2,
  'rating' => 4,
  'review' => 'Good product!'
);
$reviewController->updateReview(1, $data);

// Delete a review
$reviewController->deleteReview(1);


<?php

class Review {
    private $db;

    public function __construct() {
        $this->db = new Database();
    }

    // Function to add review
    public function add_review($data) {
        try {
            $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
                      VALUES (:product_id, :user_id, :rating, :comment)";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':product_id', $data['product_id']);
            $stmt->bindParam(':user_id', $data['user_id']);
            $stmt->bindParam(':rating', $data['rating']);
            $stmt->bindParam(':comment', $data['comment']);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to get all reviews for a product
    public function get_reviews($product_id) {
        try {
            $query = "SELECT * FROM reviews WHERE product_id = :product_id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':product_id', $product_id);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to update review
    public function update_review($data) {
        try {
            $query = "UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', $data['review_id']);
            $stmt->bindParam(':rating', $data['new_rating']);
            $stmt->bindParam(':comment', $data['new_comment']);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to delete review
    public function delete_review($id) {
        try {
            $query = "DELETE FROM reviews WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', $id);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

}

// Usage example
$review = new Review();

// Add review
$data = array(
    'product_id' => 1,
    'user_id' => 1,
    'rating' => 5,
    'comment' => "Good product!"
);
if ($review->add_review($data)) {
    echo "Review added successfully!";
}

// Get reviews for a product
$product_id = 1;
$reviews = $review->get_reviews($product_id);
foreach ($reviews as $review) {
    echo "Rating: " . $review['rating'] . ", Comment: " . $review['comment'];
}

// Update review
$data = array(
    'review_id' => 1,
    'new_rating' => 4,
    'new_comment' => "Better product!"
);
if ($review->update_review($data)) {
    echo "Review updated successfully!";
}

// Delete review
$id = 1;
if ($review->delete_review($id)) {
    echo "Review deleted successfully!";
}


<?php

// Connect to database
$dsn = 'mysql:host=localhost;dbname=your_database';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// Function to display all reviews for a product
function display_reviews($product_id) {
    global $pdo;
    
    // Query to retrieve reviews for the given product
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    
    $reviews = $stmt->fetchAll();
    
    return $reviews;
}

// Function to display review form for a user
function display_review_form($user_id) {
    global $pdo;
    
    // Query to retrieve products that the user has reviewed or wants to review
    $stmt = $pdo->prepare('SELECT * FROM products WHERE id NOT IN (SELECT product_id FROM reviews WHERE user_id = :user_id)');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    
    $products = $stmt->fetchAll();
    
    // Display form to select a product and submit review
    ?>
    <form action="" method="post">
        <select name="product_id" id="product_id">
            <?php foreach ($products as $product) : ?>
                <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?></option>
            <?php endforeach; ?>
        </select>
        
        <input type="text" name="title" id="title" placeholder="Enter review title">
        <textarea name="content" id="content" cols="30" rows="10"></textarea>
        
        <input type="number" name="rating" id="rating" min="1" max="5" step="1">
        
        <button type="submit">Submit Review</button>
    </form>
    
    <?php
}

// Function to submit a review for a user
function submit_review($user_id, $product_id, $title, $content, $rating) {
    global $pdo;
    
    // Insert new review into database
    $stmt = $pdo->prepare('INSERT INTO reviews (user_id, product_id, title, content, rating) VALUES (:user_id, :product_id, :title, :content, :rating)');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    $stmt->execute();
}

// Example usage:

// Display reviews for a product
$product_id = 1;
$reviews = display_reviews($product_id);

// Display review form for a user
$user_id = 1;
display_review_form($user_id);

?>


// Include database connection settings
require 'db.php';

function create_review($data) {
  $sql = "INSERT INTO reviews (user_id, content, rating) VALUES (:user_id, :content, :rating)";
  $stmt = $pdo->prepare($sql);
  $stmt->execute([
    ':user_id' => $data['user_id'],
    ':content' => $data['content'],
    ':rating' => $data['rating']
  ]);
  return $pdo->lastInsertId();
}

function get_reviews() {
  $sql = "SELECT r.id, u.name, r.content, r.rating FROM reviews r JOIN users u ON r.user_id = u.id";
  $stmt = $pdo->query($sql);
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function update_review($id, $data) {
  $sql = "UPDATE reviews SET content = :content, rating = :rating WHERE id = :id";
  $stmt = $pdo->prepare($sql);
  $stmt->execute([
    ':id' => $id,
    ':content' => $data['content'],
    ':rating' => $data['rating']
  ]);
}

function delete_review($id) {
  $sql = "DELETE FROM reviews WHERE id = :id";
  $stmt = $pdo->prepare($sql);
  $stmt->execute([
    ':id' => $id
  ]);
}


$data = [
  'user_id' => 1,
  'content' => 'This is a great product!',
  'rating' => 5
];
$new_review_id = create_review($data);
echo "New review created with ID: $new_review_id";


$reviews = get_reviews();
foreach ($reviews as $review) {
  echo "$review[name] rated this product $review[rating]/5: $review[content]";
}


$data = [
  'content' => 'This is an updated review!',
  'rating' => 4
];
update_review(1, $data);
echo "Review with ID 1 updated successfully!";


delete_review(2);
echo "Review with ID 2 deleted successfully!";


function add_review($product_id, $rating, $review, $user_id) {
  global $db; // assuming you're using a database connection object

  $sql = "INSERT INTO reviews (product_id, rating, review, user_id) VALUES (?, ?, ?, ?)";
  $stmt = $db->prepare($sql);
  $stmt->execute([$product_id, $rating, $review, $user_id]);

  return $db->lastInsertId();
}

function get_reviews($product_id) {
  global $db; // assuming you're using a database connection object

  $sql = "SELECT * FROM reviews WHERE product_id = ?";
  $stmt = $db->prepare($sql);
  $stmt->execute([$product_id]);

  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function get_review($review_id) {
  global $db; // assuming you're using a database connection object

  $sql = "SELECT * FROM reviews WHERE id = ?";
  $stmt = $db->prepare($sql);
  $stmt->execute([$review_id]);

  return $stmt->fetch(PDO::FETCH_ASSOC);
}

function delete_review($review_id) {
  global $db; // assuming you're using a database connection object

  $sql = "DELETE FROM reviews WHERE id = ?";
  $stmt = $db->prepare($sql);
  $stmt->execute([$review_id]);
}


// add a new review
$user_id = 1;
$product_id = 123;
$rating = 5;
$review = 'This product is amazing!';

$review_id = add_review($product_id, $rating, $review, $user_id);

// get all reviews for a product
$product_reviews = get_reviews($product_id);
print_r($product_reviews); // output: array of review objects

// get a single review by ID
$single_review = get_review($review_id);
print_r($single_review); // output: review object

// delete a review
delete_review($review_id);


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  /**
   * Add a new review to the database.
   *
   * @param int $user_id The ID of the user who left the review.
   * @param int $product_id The ID of the product being reviewed.
   * @param int $rating The rating given by the user (1-5).
   * @param string $review The text of the review.
   *
   * @return bool True if the review was added successfully, false otherwise.
   */
  public function addReview($user_id, $product_id, $rating, $review) {
    try {
      $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)');
      $stmt->execute(array($user_id, $product_id, $rating, $review));
      return true;
    } catch (PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
      return false;
    }
  }

  /**
   * Get all reviews for a specific product.
   *
   * @param int $product_id The ID of the product being reviewed.
   *
   * @return array An array of review objects, each containing user and rating information.
   */
  public function getReviews($product_id) {
    try {
      $stmt = $this->db->prepare('SELECT u.name, r.rating, r.review FROM reviews r INNER JOIN users u ON r.user_id = u.id WHERE r.product_id = ?');
      $stmt->execute(array($product_id));
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
      return array();
    }
  }

  /**
   * Get all reviews left by a specific user.
   *
   * @param int $user_id The ID of the user who left the reviews.
   *
   * @return array An array of review objects, each containing product and rating information.
   */
  public function getUserReviews($user_id) {
    try {
      $stmt = $this->db->prepare('SELECT p.title, r.rating, r.review FROM reviews r INNER JOIN products p ON r.product_id = p.id WHERE r.user_id = ?');
      $stmt->execute(array($user_id));
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error getting user reviews: " . $e->getMessage();
      return array();
    }
  }
}


$review = new Review();

// Add a new review
$user_id = 1;
$product_id = 2;
$rating = 4;
$review_text = 'This product is great!';
$success = $review->addReview($user_id, $product_id, $rating, $review_text);
echo "Added review: " . ($success ? 'true' : 'false') . "
";

// Get all reviews for a specific product
$product_id = 2;
$reviews = $review->getReviews($product_id);
foreach ($reviews as $review) {
  echo "Review by " . $review['name'] . ": Rating: " . $review['rating'] . ", Review text: " . $review['review'] . "
";
}

// Get all reviews left by a specific user
$user_id = 1;
$reviews = $review->getUserReviews($user_id);
foreach ($reviews as $review) {
  echo "Review of " . $review['title'] . ": Rating: " . $review['rating'] . ", Review text: " . $review['review'] . "
";
}


// database connection settings
$dsn = 'mysql:host=localhost;dbname=your_database';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// function to create a review
function create_review($data) {
    $query = "INSERT INTO reviews SET user_id = :user_id, product_id = :product_id, rating = :rating, review = :review";
    $stmt = $pdo->prepare($query);
    $stmt->execute([
        ':user_id' => $data['user_id'],
        ':product_id' => $data['product_id'],
        ':rating' => $data['rating'],
        ':review' => $data['review']
    ]);
    return $pdo->lastInsertId();
}

// function to get all reviews
function get_reviews() {
    $query = "SELECT * FROM reviews";
    $stmt = $pdo->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// function to update a review
function update_review($id, $data) {
    $query = "UPDATE reviews SET user_id = :user_id, product_id = :product_id, rating = :rating, review = :review WHERE id = :id";
    $stmt = $pdo->prepare($query);
    $stmt->execute([
        ':id' => $id,
        ':user_id' => $data['user_id'],
        ':product_id' => $data['product_id'],
        ':rating' => $data['rating'],
        ':review' => $data['review']
    ]);
}

// function to delete a review
function delete_review($id) {
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $pdo->prepare($query);
    $stmt->execute([
        ':id' => $id
    ]);
}


// create a new review
$data = [
    'user_id' => 1,
    'product_id' => 10,
    'rating' => 5,
    'review' => 'Great product!'
];
$id = create_review($data);
echo "Review created with ID $id
";

// get all reviews
$reviews = get_reviews();
foreach ($reviews as $review) {
    echo "$review[id] - User ID: $review[user_id], Product ID: $review[product_id], Rating: $review[rating], Review: $review[review]
";
}

// update a review
update_review(1, [
    'user_id' => 2,
    'product_id' => 11,
    'rating' => 4,
    'review' => 'Good product.'
]);
echo "Review updated with ID 1
";

// delete a review
delete_review(1);
echo "Review deleted with ID 1
";


function createReview($product_id, $user_id, $rating, $review) {
  global $db;
  $sql = "INSERT INTO reviews (product_id, user_id, rating, review)
          VALUES (:product_id, :user_id, :rating, :review)";
  $stmt = $db->prepare($sql);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  return $stmt->execute();
}


function getReviews($product_id) {
  global $db;
  $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
  $stmt = $db->prepare($sql);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}


function updateReview($review_id, $rating, $review) {
  global $db;
  $sql = "UPDATE reviews SET rating = :rating, review = :review WHERE id = :id";
  $stmt = $db->prepare($sql);
  $stmt->bindParam(':id', $review_id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  return $stmt->execute();
}


function deleteReview($review_id) {
  global $db;
  $sql = "DELETE FROM reviews WHERE id = :id";
  $stmt = $db->prepare($sql);
  $stmt->bindParam(':id', $review_id);
  return $stmt->execute();
}


$db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');

// Create a new review
$product_id = 1;
$user_id = 2;
$rating = 4;
$review = "Great product!";
createReview($product_id, $user_id, $rating, $review);

// Read reviews for a product
$product_reviews = getReviews(1);
print_r($product_reviews);

// Update an existing review
$update_review = array(
  'rating' => 5,
  'review' => "Best product ever!"
);
updateReview(1, $update_review['rating'], $update_review['review']);

// Delete a review
deleteReview(2);


<?php

define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

?>


<?php

function connectToDatabase() {
  $conn = new PDO("mysql:host=".DB_HOST.";dbname=".DB_NAME, DB_USER, DB_PASSWORD);
  return $conn;
}

function createUser($username, $email, $password) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("INSERT INTO Users (username, email, password) VALUES (:username, :email, :password)");
  $stmt->bindParam(':username', $username);
  $stmt->bindParam(':email', $email);
  $stmt->bindParam(':password', $password);
  $stmt->execute();
}

function getUserReviews($userId) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("SELECT * FROM Reviews WHERE user_id = :user_id");
  $stmt->bindParam(':user_id', $userId);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function addReview($productId, $productName, $reviewText, $rating, $userId) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("INSERT INTO Reviews (product_name, review, rating, user_id) VALUES (:product_name, :review_text, :rating, :user_id)");
  $stmt->bindParam(':product_name', $productName);
  $stmt->bindParam(':review_text', $reviewText);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':user_id', $userId);
  $stmt->execute();
}

?>


<?php

require_once 'config.php';
require_once 'functions.php';

if (isset($_POST['username']) && isset($_POST['password'])) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("SELECT * FROM Users WHERE username = :username AND password = :password");
  $stmt->bindParam(':username', $_POST['username']);
  $stmt->bindParam(':password', $_POST['password']);
  $stmt->execute();
  if ($stmt->rowCount() > 0) {
    session_start();
    $_SESSION['user_id'] = $conn->lastInsertId();
    header('Location: dashboard.php');
    exit;
  } else {
    echo 'Invalid username or password';
  }
}

?>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="text" name="username" placeholder="Username">
  <input type="password" name="password" placeholder="Password">
  <button type="submit">Login</button>
</form>


<?php

require_once 'config.php';
require_once 'functions.php';

session_start();

if (!isset($_SESSION['user_id'])) {
  header('Location: login.php');
  exit;
}

$userReviews = getUserReviews($_SESSION['user_id']);

?>

<h1>My Reviews:</h1>
<ul>
  <?php foreach ($userReviews as $review) { ?>
    <li><?php echo $review['product_name']; ?> - <?php echo $review['rating']; ?>/5</li>
    <p><?php echo $review['review']; ?></p>
  <?php } ?>
</ul>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="text" name="product_name" placeholder="Product Name">
  <textarea name="review_text" placeholder="Review"></textarea>
  <select name="rating">
    <option value="1">1/5</option>
    <option value="2">2/5</option>
    <option value="3">3/5</option>
    <option value="4">4/5</option>
    <option value="5">5/5</option>
  </select>
  <button type="submit">Add Review</button>
</form>

<?php

if (isset($_POST['product_name']) && isset($_POST['review_text']) && isset($_POST['rating'])) {
  addReview($_POST['product_name'], $_POST['product_name'], $_POST['review_text'], $_POST['rating'], $_SESSION['user_id']);
}

?>


function addReview($userId, $reviewText) {
    global $reviews;

    // Check if the user already has a review
    foreach ($reviews as $user => $reviewsByUser) {
        if ($user == $userId) {
            array_push($reviews[$user], array('text' => $reviewText));
            return true;
        }
    }

    // Create new entry for this user
    $reviews[$userId] = array(array('text' => $reviewText));

    return true;
}


function getReviews($userId) {
    global $reviews;

    if (isset($reviews[$userId])) {
        return $reviews[$userId];
    } else {
        return array();
    }
}


$reviews = array();

// Add a new review from user 1
addReview(1, 'I loved this product!');

// Get all reviews from user 1
$reviewsFromUser1 = getReviews(1);
print_r($reviewsFromUser1); // Output: Array ( [0] => Array ( [text] => I loved this product! ) )

// Add another review from user 1
addReview(1, 'It was okay...');

// Get all reviews from user 1 again
$reviewsFromUser1 = getReviews(1);
print_r($reviewsFromUser1); // Output: Array ( [0] => Array ( [text] => I loved this product! ) [1] => Array ( [text] => It was okay... ) )


<?php

// database connection settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

function connectToDatabase() {
    $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

function createReview($product_id, $user_id, $rating, $comment) {
    $conn = connectToDatabase();
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
            VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiii", $product_id, $user_id, $rating, $comment);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error creating review: " . $stmt->error;
        return false;
    }
}

function getReviews() {
    $conn = connectToDatabase();
    $sql = "SELECT * FROM reviews";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "<p>Product ID: " . $row["product_id"] . "</p>";
            echo "<p>User ID: " . $row["user_id"] . "</p>";
            echo "<p>Rating: " . $row["rating"] . "/5</p>";
            echo "<p>Comment: " . $row["comment"] . "</p><hr>";
        }
    } else {
        echo "No reviews found.";
    }
}

function updateReview($review_id, $new_rating, $new_comment) {
    $conn = connectToDatabase();
    $sql = "UPDATE reviews SET rating = ?, comment = ?
            WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iii", $new_rating, $new_comment, $review_id);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error updating review: " . $stmt->error;
        return false;
    }
}

function deleteReview($review_id) {
    $conn = connectToDatabase();
    $sql = "DELETE FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $review_id);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error deleting review: " . $stmt->error;
        return false;
    }
}

?>


// Create a new review
createReview(1, 2, 4, "Great product!");

// Get all reviews
getReviews();

// Update an existing review
updateReview(1, 5, "Excellent product!");

// Delete a review
deleteReview(1);


<?php

// Configuration
require_once 'config.php';

// Connect to database
$db = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USER, DB_PASSWORD);

// Function to get all reviews for a product
function getReviews($productId) {
  global $db;
  $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to add a new review
function addReview($userId, $productId, $rating, $comment) {
  global $db;
  $review = array(
    'user_id' => $userId,
    'product_id' => $productId,
    'rating' => $rating,
    'comment' => $comment
  );
  $stmt = $db->prepare("INSERT INTO reviews SET user_id = :user_id, product_id = :product_id, rating = :rating, comment = :comment");
  $stmt->execute($review);
}

// Function to delete a review
function deleteReview($id) {
  global $db;
  $stmt = $db->prepare("DELETE FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $id);
  $stmt->execute();
}

// Function to update a review
function updateReview($id, $rating, $comment) {
  global $db;
  $review = array(
    'rating' => $rating,
    'comment' => $comment
  );
  $stmt = $db->prepare("UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id");
  $stmt->bindParam(':id', $id);
  $stmt->execute($review);
}

// Example usage:
if (isset($_POST['action'])) {
  switch ($_POST['action']) {
    case 'get_reviews':
      echo json_encode(getReviews($_POST['product_id']));
      break;
    case 'add_review':
      addReview($_POST['user_id'], $_POST['product_id'], $_POST['rating'], $_POST['comment']);
      break;
    case 'delete_review':
      deleteReview($_POST['id']);
      break;
    case 'update_review':
      updateReview($_POST['id'], $_POST['rating'], $_POST['comment']);
      break;
  }
}


// configuration.php
<?php
    $servername = "localhost";
    $username = "your_username";
    $password = "your_password";
    $dbname = "reviews_db";

    // Create connection
    $conn = new mysqli($servername, $username, $password, $dbname);

    // Check connection
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
?>


// functions.php
<?php
    include 'configuration.php';

    function add_review($title, $content, $rating) {
        global $conn;

        // Check if review already exists for the user
        $query = "SELECT * FROM reviews WHERE title='$title' AND content='$content'";
        $result = $conn->query($query);
        if ($result->num_rows > 0) {
            return "Review already exists.";
        }

        // Add new review
        $sql = "INSERT INTO reviews (title, content, rating)
                VALUES ('$title', '$content', $rating)";
        if ($conn->query($sql) === TRUE) {
            echo "New review created successfully";
        } else {
            return "Error creating review: " . $conn->error;
        }
    }

    function view_reviews() {
        global $conn;

        // Get all reviews
        $sql = "SELECT * FROM reviews ORDER BY date_added DESC";
        $result = $conn->query($sql);

        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                echo "Title: " . $row["title"] . "<br>Content: " . $row["content"]. "<br>Rating: " . $row["rating"]. "<br>Date Added: " . $row["date_added"]. "<hr>";
            }
        } else {
            return "No reviews available.";
        }
    }

    function delete_review($id) {
        global $conn;

        // Check if review exists
        $query = "SELECT * FROM reviews WHERE id='$id'";
        $result = $conn->query($query);
        if ($result->num_rows > 0) {
            // Delete review
            $sql = "DELETE FROM reviews WHERE id=$id";
            if ($conn->query($sql) === TRUE) {
                return "Review deleted successfully.";
            } else {
                return "Error deleting review: " . $conn->error;
            }
        } else {
            return "Review does not exist.";
        }
    }

?>


// index.php (example usage)
<?php
    include 'functions.php';

    // Add a new review
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        $title = $_POST['title'];
        $content = $_POST['content'];
        $rating = $_POST['rating'];

        echo add_review($title, $content, $rating);
    }

    // View all reviews
    view_reviews();

    // Delete a review by id
    if (isset($_GET['delete_id'])) {
        echo delete_review($_GET['delete_id']);
    }
?>


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
  }

  // Create a review
  public function createReview($userId, $productId, $rating, $reviewText) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (:user_id, :product_id, :rating, :review_text)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $reviewText);
    return $stmt->execute();
  }

  // Read all reviews
  public function getAllReviews() {
    $query = "SELECT * FROM reviews";
    $stmt = $this->db->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Update a review
  public function updateReview($reviewId, $newRating, $newReviewText) {
    $query = "UPDATE reviews SET rating = :rating, review_text = :review_text WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $reviewId);
    $stmt->bindParam(':rating', $newRating);
    $stmt->bindParam(':review_text', $newReviewText);
    return $stmt->execute();
  }

  // Delete a review
  public function deleteReview($reviewId) {
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $reviewId);
    return $stmt->execute();
  }
}


$review = new Review();

// Create a review
$user_id = 1;
$product_id = 1;
$rating = 4;
$review_text = 'Great product!';
$created = $review->createReview($user_id, $product_id, $rating, $review_text);
echo "Created review with id: " . $this->db->lastInsertId();

// Read all reviews
$reviews = $review->getAllReviews();
foreach ($reviews as $review) {
  echo 'User ID: ' . $review['user_id'] . ', Product ID: ' . $review['product_id'] . ', Rating: ' . $review['rating'];
}

// Update a review
$reviewId = 1;
$new_rating = 5;
$new_review_text = 'Excellent product!';
$updated = $review->updateReview($reviewId, $new_rating, $new_review_text);
echo "Updated review with id: $reviewId";

// Delete a review
$deleted = $review->deleteReview(2);
echo "Deleted review with id: 2";


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  /**
   * Add a new review to the database.
   *
   * @param int $user_id The ID of the user who wrote the review.
   * @param string $product_name The name of the product being reviewed.
   * @param int $rating The rating given by the user (1-5).
   * @param string $comment The comment left by the user.
   *
   * @return void
   */
  public function addReview($user_id, $product_name, $rating, $comment) {
    $stmt = $this->db->prepare("INSERT INTO reviews SET user_id = ?, product_name = ?, rating = ?, comment = ?");
    $stmt->execute([$user_id, $product_name, $rating, $comment]);
  }

  /**
   * Get all reviews for a specific user.
   *
   * @param int $user_id The ID of the user whose reviews you want to retrieve.
   *
   * @return array An array of review data.
   */
  public function getReviews($user_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = ?");
    $stmt->execute([$user_id]);
    return $stmt->fetchAll();
  }

  /**
   * Update an existing review in the database.
   *
   * @param int $review_id The ID of the review you want to update.
   * @param string $product_name The new name of the product being reviewed.
   * @param int $rating The new rating given by the user (1-5).
   * @param string $comment The new comment left by the user.
   *
   * @return void
   */
  public function updateReview($review_id, $product_name, $rating, $comment) {
    $stmt = $this->db->prepare("UPDATE reviews SET product_name = ?, rating = ?, comment = WHERE id = ?");
    $stmt->execute([$product_name, $rating, $comment, $review_id]);
  }
}


// Initialize the database connection
$db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');

// Create a new Review object
$review = new Review($db);

// Add a review for a user
$review->addReview(1, 'Product A', 5, 'Great product!');

// Retrieve all reviews for a user
$reviews = $review->getReviews(1);
print_r($reviews);

// Update an existing review
$review->updateReview(1, 'Product B', 4, 'Good product!');


class Review {
  private $id;
  private $product_id;
  private $user_id;
  private $rating;
  private $comment;

  public function __construct($data) {
    $this->id = isset($data['id']) ? $data['id'] : null;
    $this->product_id = isset($data['product_id']) ? $data['product_id'] : null;
    $this->user_id = isset($data['user_id']) ? $data['user_id'] : null;
    $this->rating = isset($data['rating']) ? $data['rating'] : null;
    $this->comment = isset($data['comment']) ? $data['comment'] : '';
  }

  public function getId() {
    return $this->id;
  }

  public function getProductID() {
    return $this->product_id;
  }

  public function getUserID() {
    return $this->user_id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public static function createReview($data) {
    // Sanitize and validate input data
    $sanitizedData = self::sanitizeInput($data);

    // Insert review into database
    $query = "INSERT INTO reviews SET product_id = ?, user_id = ?, rating = ?, comment = ?";
    $stmt = db()->prepare($query);
    $stmt->execute([$sanitizedData['product_id'], $sanitizedData['user_id'], $sanitizedData['rating'], $sanitizedData['comment']]);

    // Return new review ID
    return db()->insertId();
  }

  public static function getReviewsForProduct($productId) {
    // Retrieve reviews from database
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = db()->prepare($query);
    $stmt->execute([$productId]);
    return $stmt->fetchAll();
  }

  private static function sanitizeInput($data) {
    // Sanitize and validate input data (e.g., trim, filter special chars)
    $sanitizedData = [];
    foreach ($data as $key => $value) {
      switch ($key) {
        case 'rating':
          $sanitizedData[$key] = intval($value);
          break;
        default:
          $sanitizedData[$key] = trim($value);
      }
    }
    return $sanitizedData;
  }
}


// Create a new review for product ID 1, user ID 1, rating 5, and comment "Great product!"
$reviewId = Review::createReview([
  'product_id' => 1,
  'user_id' => 1,
  'rating' => 5,
  'comment' => "Great product!",
]);

// Retrieve reviews for product ID 1
$reviews = Review::getReviewsForProduct(1);

// Display reviews
foreach ($reviews as $review) {
  echo "Review ID: {$review['id']}
";
  echo "Rating: {$review['rating']}
";
  echo "Comment: {$review['comment']}

";
}


// Connect to database
$servername = "localhost";
$username = "username";
$password = "password";

$conn = new mysqli($servername, $username, $password);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

$conn->select_db('database_name');

// User Review class
class UserReview {
    private $id;
    private $user_id;
    private $product_id;
    private $rating;
    private $review_text;

    public function __construct($user_id, $product_id, $rating, $review_text) {
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->review_text = $review_text;
    }

    public function save() {
        // Insert into reviews table
        global $conn;
        $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (?, ?, ?, ?)");
        $stmt->bind_param('iiis', $this->user_id, $this->product_id, $this->rating, $this->review_text);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    }

    public static function get_reviews_for_product($product_id) {
        // Retrieve reviews for a specific product
        global $conn;
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = ?");
        $stmt->bind_param('i', $product_id);
        if ($stmt->execute()) {
            return $stmt->get_result();
        } else {
            return false;
        }
    }

    public static function get_review($review_id) {
        // Retrieve a specific review
        global $conn;
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE id = ?");
        $stmt->bind_param('i', $review_id);
        if ($stmt->execute()) {
            return $stmt->get_result()->fetch_assoc();
        } else {
            return false;
        }
    }

    public static function update_review($review_id, $new_rating, $new_text) {
        // Update a specific review
        global $conn;
        $stmt = $conn->prepare("UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?");
        $stmt->bind_param('iis', $new_rating, $new_text, $review_id);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    }

    public static function delete_review($review_id) {
        // Delete a specific review
        global $conn;
        $stmt = $conn->prepare("DELETE FROM reviews WHERE id = ?");
        $stmt->bind_param('i', $review_id);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    }
}


// Create a new user review
$user_review = new UserReview(1, 1, 4, "Great product!");
if ($user_review->save()) {
    echo "Review saved successfully!";
} else {
    echo "Error saving review.";
}

// Retrieve reviews for a specific product
$reviews_for_product = UserReview::get_reviews_for_product(1);
foreach ($reviews_for_product as $review) {
    echo "Rating: " . $review['rating'] . ", Review Text: " . $review['review_text'];
}

// Retrieve a specific review
$specific_review = UserReview::get_review(1);
echo "Rating: " . $specific_review['rating'] . ", Review Text: " . $specific_review['review_text'];

// Update a specific review
if (UserReview::update_review(1, 5, "Best product ever!")) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review.";
}

// Delete a specific review
if (UserReview::delete_review(1)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}


// Review.php
class Review {
    private $id;
    private $product_id;
    private $user_id;
    private $rating;
    private $comment;

    public function __construct($data) {
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->product_id = isset($data['product_id']) ? $data['product_id'] : null;
        $this->user_id = isset($data['user_id']) ? $data['user_id'] : null;
        $this->rating = isset($data['rating']) ? $data['rating'] : null;
        $this->comment = isset($data['comment']) ? $data['comment'] : '';
    }

    public function getId() {
        return $this->id;
    }

    public function getProductId() {
        return $this->product_id;
    }

    public function getUserId() {
        return $this->user_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


// ReviewController.php
class ReviewController {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview($data) {
        $review = new Review($data);
        if ($review->getRating() < 1 || $review->getRating() > 5) {
            throw new Exception('Invalid rating');
        }
        $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
                  VALUES (:product_id, :user_id, :rating, :comment)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $review->getProductId());
        $stmt->bindParam(':user_id', $review->getUserId());
        $stmt->bindParam(':rating', $review->getRating());
        $stmt->bindParam(':comment', $review->getComment());
        if ($stmt->execute()) {
            return 'Review created successfully';
        } else {
            throw new Exception('Failed to create review');
        }
    }

    public function getReviews($productId) {
        $query = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
    }

    public function getAverageRating($productId) {
        $query = "SELECT AVG(rating) AS average_rating
                  FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        return $stmt->fetchColumn();
    }
}


// Create a new database connection
$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

// Create a new review controller instance
$reviewController = new ReviewController($db);

// Create a new review data array
$data = [
    'product_id' => 1,
    'user_id' => 1,
    'rating' => 4,
    'comment' => 'Great product!'
];

// Create a new review using the controller
try {
    $result = $reviewController->createReview($data);
    echo $result;
} catch (Exception $e) {
    echo $e->getMessage();
}

// Get all reviews for a specific product
$productId = 1;
$reviews = $reviewController->getReviews($productId);

// Print the average rating for a specific product
echo 'Average rating: ' . $reviewController->getAverageRating($productId);


<?php

// Configuration
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = mysqli_connect($db_host, $db_username, $db_password, $db_name);

if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

function createReview($user_id, $product_name, $rating, $review) {
    global $conn;
    
    // Prepare query
    $query = "INSERT INTO reviews (user_id, product_name, rating, review)
              VALUES (?, ?, ?, ?)";
    $stmt = mysqli_prepare($conn, $query);
    if (!$stmt) {
        die("Prepare failed: " . mysqli_error($conn));
    }

    // Bind parameters
    mysqli_stmt_bind_param($stmt, 'iids', $user_id, $product_name, $rating, $review);

    // Execute query
    if (!mysqli_stmt_execute($stmt)) {
        die("Execute failed: " . mysqli_error($conn));
    }
}

function getReviews() {
    global $conn;
    
    // Prepare query
    $query = "SELECT r.id, u.name AS user_name, r.product_name, r.rating, r.review
              FROM reviews r JOIN users u ON r.user_id = u.id";
    $result = mysqli_query($conn, $query);
    
    if (!$result) {
        die("Query failed: " . mysqli_error($conn));
    }

    // Fetch results
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<h2>" . $row['user_name'] . " - " . $row['product_name'] . "</h2>";
        echo "<p>Rating: " . $row['rating'] . "/5</p>";
        echo "<p>" . $row['review'] . "</p>";
    }
}

// Example usage
createReview(1, 'Product 1', 4.5, 'Great product!');
getReviews();

mysqli_close($conn);

?>


<?php require 'review.php'; ?>


<?php

// Database connection settings
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database_name');

function get_db_connection() {
    $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Create a review
function create_review($product_id, $user_id, $rating, $review) {
    $conn = get_db_connection();
    $sql = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiii", $product_id, $user_id, $rating, $review);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error creating review: " . $stmt->error;
        return false;
    }
}

// Get all reviews for a product
function get_reviews($product_id) {
    $conn = get_db_connection();
    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        return $result->fetch_all(MYSQLI_ASSOC);
    } else {
        echo "Error getting reviews: " . $stmt->error;
        return array();
    }
}

// Get a single review by ID
function get_review($review_id) {
    $conn = get_db_connection();
    $sql = "SELECT * FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $review_id);
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        return $result->fetch_assoc();
    } else {
        echo "Error getting review: " . $stmt->error;
        return array();
    }
}

// Update a review
function update_review($review_id, $rating, $review) {
    $conn = get_db_connection();
    $sql = "UPDATE reviews SET rating = ?, review = ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iii", $rating, $review, $review_id);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error updating review: " . $stmt->error;
        return false;
    }
}

// Delete a review
function delete_review($review_id) {
    $conn = get_db_connection();
    $sql = "DELETE FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $review_id);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error deleting review: " . $stmt->error;
        return false;
    }
}

?>


// Create a new review for a product
$product_id = 123;
$user_id = 456;
$rating = 5;
$review = "This product is amazing!";
create_review($product_id, $user_id, $rating, $review);

// Get all reviews for a product
$product_id = 123;
$reviews = get_reviews($product_id);
print_r($reviews);

// Get a single review by ID
$review_id = 789;
$review = get_review($review_id);
echo json_encode($review);

// Update a review
$review_id = 789;
$rating = 4;
$review = "This product is good.";
update_review($review_id, $rating, $review);

// Delete a review
$review_id = 789;
delete_review($review_id);


class ReviewModel {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function addReview($product_id, $user_id, $rating, $review) {
    try {
      $query = "INSERT INTO reviews (product_id, user_id, rating, review)
                VALUES (:product_id, :user_id, :rating, :review)";
      $stmt = $this->db->prepare($query);
      $stmt->bindParam(':product_id', $product_id);
      $stmt->bindParam(':user_id', $user_id);
      $stmt->bindParam(':rating', $rating);
      $stmt->bindParam(':review', $review);
      return $stmt->execute();
    } catch (PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
      return false;
    }
  }

  public function getReviewsForProduct($product_id, $limit = null, $offset = null) {
    try {
      $query = "SELECT r.id, u.name, r.rating, r.review
                FROM reviews r
                JOIN users u ON r.user_id = u.id
                WHERE product_id = :product_id";
      if ($limit !== null && $offset !== null) {
        $query .= " LIMIT :limit OFFSET :offset";
      }
      $stmt = $this->db->prepare($query);
      $stmt->bindParam(':product_id', $product_id);
      if ($limit !== null && $offset !== null) {
        $stmt->bindParam(':limit', $limit);
        $stmt->bindParam(':offset', $offset);
      }
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error retrieving reviews: " . $e->getMessage();
      return array();
    }
  }

  public function getUserReviews($user_id, $limit = null, $offset = null) {
    try {
      $query = "SELECT r.id, p.name AS product_name, r.rating, r.review
                FROM reviews r
                JOIN products p ON r.product_id = p.id
                WHERE user_id = :user_id";
      if ($limit !== null && $offset !== null) {
        $query .= " LIMIT :limit OFFSET :offset";
      }
      $stmt = $this->db->prepare($query);
      $stmt->bindParam(':user_id', $user_id);
      if ($limit !== null && $offset !== null) {
        $stmt->bindParam(':limit', $limit);
        $stmt->bindParam(':offset', $offset);
      }
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error retrieving user reviews: " . $e->getMessage();
      return array();
    }
  }
}


class ReviewController {
  private $model;

  public function __construct($model) {
    $this->model = $model;
  }

  public function addReview() {
    if (isset($_POST['rating']) && isset($_POST['review'])) {
      $product_id = $_POST['product_id'];
      $user_id = $_SESSION['user_id'];
      $rating = $_POST['rating'];
      $review = $_POST['review'];

      $success = $this->model->addReview($product_id, $user_id, $rating, $review);
      if ($success) {
        header('Location: product.php?id=' . $product_id);
        exit;
      } else {
        echo "Error adding review";
      }
    } else {
      echo "Invalid request";
    }
  }

  public function getReviewsForProduct() {
    $product_id = $_GET['id'];
    $reviews = $this->model->getReviewsForProduct($product_id);
    return $reviews;
  }

  public function getUserReviews() {
    $user_id = $_SESSION['user_id'];
    $reviews = $this->model->getUserReviews($user_id);
    return $reviews;
  }
}


<?php
session_start();

require_once 'db_connection.php';
$db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');

$model = new ReviewModel($db);
$controller = new ReviewController($model);

if (isset($_POST['rating']) && isset($_POST['review'])) {
  $controller->addReview();
}

if (isset($_GET['id'])) {
  $reviews = $controller->getReviewsForProduct();
} else {
  $reviews = array();
}

if (isset($_SESSION['user_id'])) {
  $user_reviews = $controller->getUserReviews();
} else {
  $user_reviews = array();
}
?>


// Database configuration
define('DB_HOST', 'your_host');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Function to connect to the database
function dbConnect() {
    $conn = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USERNAME, DB_PASSWORD);
    return $conn;
}

// User Review Class
class UserReview {
    private $db;

    function __construct() {
        $this->db = dbConnect();
    }

    // Create a review for a product
    public function create($user_id, $product_id, $rating, $review) {
        $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)');
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        return $stmt->execute();
    }

    // Get all reviews for a product
    public function getAll($product_id) {
        $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    // Get a single review by id
    public function getOne($review_id) {
        $stmt = $this->db->prepare('SELECT * FROM reviews WHERE id = :id');
        $stmt->bindParam(':id', $review_id);
        $stmt->execute();
        return $stmt->fetch();
    }

    // Update a review
    public function update($review_id, $rating, $review) {
        $stmt = $this->db->prepare('UPDATE reviews SET rating = :rating, review = :review WHERE id = :id');
        $stmt->bindParam(':id', $review_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        return $stmt->execute();
    }

    // Delete a review
    public function delete($review_id) {
        $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :id');
        $stmt->bindParam(':id', $review_id);
        return $stmt->execute();
    }
}

// Example usage:
$userReview = new UserReview();

// Create a review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = 'Great product!';
$result = $userReview->create($user_id, $product_id, $rating, $review);
echo "Created review: " . ($result ? "Success" : "Failure");

// Get all reviews for a product
$product_id = 1;
$reviews = $userReview->getAll($product_id);
echo "Reviews for product ID $product_id:
";
foreach ($reviews as $review) {
    echo "Rating: $review[rating], Review: $review[review]
";
}

// Get a single review by id
$review_id = 1;
$reviewData = $userReview->getOne($review_id);
echo "Review ID $review_id:
";
echo "Rating: $reviewData[rating], Review: $reviewData[review]
";

// Update a review
$rating = 4;
$review = 'Great product, but not perfect!';
$result = $userReview->update(1, $rating, $review);
echo "Updated review: " . ($result ? "Success" : "Failure");

// Delete a review
$result = $userReview->delete(1);
echo "Deleted review: " . ($result ? "Success" : "Failure");


// database connection settings
$host = 'localhost';
$username = 'username';
$password = 'password';
$dbname = 'reviews';

// connect to the database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

class ReviewSystem {
    private $conn;

    function __construct() {
        $this->conn = new mysqli($host, $username, $password, $dbname);
    }

    // create a review
    function createReview($product_id, $user_id, $rating, $review) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "INSERT INTO reviews (product_id, user_id, rating, review)
                VALUES ('$product_id', '$user_id', '$rating', '$review')";
        
        if ($this->conn->query($sql) === TRUE) {
            return true;
        } else {
            echo "Error: " . $sql . "<br>" . $this->conn->error;
            return false;
        }
    }

    // get all reviews for a product
    function getReviewsForProduct($product_id) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
        $result = $this->conn->query($sql);
        
        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                echo "ID: " . $row["id"]. " - Product ID: " . $row["product_id"]. " - User ID: " . $row["user_id"]. " Rating: " . $row["rating"]. " - Review: " . $row["review"]. "<br>";
            }
        } else {
            echo "0 results";
        }
    }

    // get all reviews for a user
    function getReviewsForUser($user_id) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "SELECT * FROM reviews WHERE user_id = '$user_id'";
        $result = $this->conn->query($sql);
        
        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                echo "ID: " . $row["id"]. " - Product ID: " . $row["product_id"]. " - User ID: " . $row["user_id"]. " Rating: " . $row["rating"]. " - Review: " . $row["review"]. "<br>";
            }
        } else {
            echo "0 results";
        }
    }

    // get average rating for a product
    function getAverageRatingForProduct($product_id) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "SELECT AVG(rating) FROM reviews WHERE product_id = '$product_id'";
        $result = $this->conn->query($sql);
        
        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                echo "Average Rating: " . $row["AVG(rating)"]. "<br>";
            }
        } else {
            echo "0 results";
        }
    }

    // get average rating for a user
    function getAverageRatingForUser($user_id) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "SELECT AVG(rating) FROM reviews WHERE user_id = '$user_id'";
        $result = $this->conn->query($sql);
        
        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                echo "Average Rating: " . $row["AVG(rating)"]. "<br>";
            }
        } else {
            echo "0 results";
        }
    }

    // delete a review
    function deleteReview($id) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "DELETE FROM reviews WHERE id = '$id'";
        
        if ($this->conn->query($sql) === TRUE) {
            return true;
        } else {
            echo "Error: " . $sql . "<br>" . $this->conn->error;
            return false;
        }
    }

    // close the database connection
    function __destruct() {
        if ($this->conn) {
            $this->conn->close();
        }
    }
}

// usage example:
$reviewSystem = new ReviewSystem();

$product_id = 1;
$user_id = 1;
$rating = 5;
$review = 'Great product!';

if ($reviewSystem->createReview($product_id, $user_id, $rating, $review)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

// get all reviews for a product
$reviewSystem->getReviewsForProduct(1);

// get all reviews for a user
$reviewSystem->getReviewsForUser(1);

// get average rating for a product
$reviewSystem->getAverageRatingForProduct(1);

// get average rating for a user
$reviewSystem->getAverageRatingForUser(1);

// delete a review
if ($reviewSystem->deleteReview(1)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}

// close the database connection
unset($reviewSystem);


<?php

/**
 * User Review Function
 *
 * Handles CRUD operations for user reviews.
 */

class Review {
  private $id;
  private $title;
  private $content;
  private $rating;

  public function __construct($id = null, $title = '', $content = '', $rating = '') {
    $this->id = $id;
    $this->title = $title;
    $this->content = $content;
    $this->rating = $rating;
  }

  /**
   * Create a new review
   *
   * @param string $title Review title
   * @param string $content Review content
   * @param int $rating Review rating (1-5)
   */
  public static function createReview($title, $content, $rating) {
    if ($rating < 1 || $rating > 5) {
      throw new Exception('Invalid rating');
    }

    $review = new self(null, $title, $content, $rating);
    $review->save();
    return $review;
  }

  /**
   * Retrieve a review by ID
   *
   * @param int $id Review ID
   */
  public static function getReview($id) {
    $review = new self($id);
    if ($review->load()) {
      return $review;
    } else {
      throw new Exception('Review not found');
    }
  }

  /**
   * Update a review
   *
   * @param string $title New title
   * @param string $content New content
   * @param int $rating New rating (1-5)
   */
  public function update($title, $content, $rating) {
    if ($rating < 1 || $rating > 5) {
      throw new Exception('Invalid rating');
    }

    $this->title = $title;
    $this->content = $content;
    $this->rating = $rating;
    $this->save();
  }

  /**
   * Delete a review
   */
  public function delete() {
    // TODO: implement deletion logic
  }

  /**
   * Save the review to database
   *
   * @return bool Success flag
   */
  private function save() {
    // TODO: implement database connection and query
    return true;
  }

  /**
   * Load the review from database
   *
   * @return bool Success flag
   */
  private function load() {
    // TODO: implement database connection and query
    return false;
  }
}

?>


// Create a new review
$review = Review::createReview('Great product!', 'I loved the quality of this product.', 5);

// Retrieve an existing review
$existingReview = Review::getReview(1);

// Update an existing review
$existingReview->update('Even better now!', 'The customer support is excellent!', 5);

// Delete a review (TODO: implement deletion logic)


// config.php (database connection settings)
$db_host = 'localhost';
$db_user = 'username';
$db_password = 'password';
$db_name = 'database';

// connect to database
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// user_review.php (user review function)
function insertReview($productId, $userName, $reviewText, $rating) {
    global $conn;

    // prepare and execute query
    $stmt = $conn->prepare("INSERT INTO reviews (product_id, user_name, review_text, rating) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("isss", $productId, $userName, $reviewText, $rating);
    $result = $stmt->execute();

    if ($result) {
        return true; // review inserted successfully
    } else {
        return false; // error inserting review
    }
}

function getUserReviews($userId, $pageSize = 10) {
    global $conn;

    // prepare and execute query
    $stmt = $conn->prepare("SELECT * FROM reviews WHERE user_name = ? LIMIT ?");
    $stmt->bind_param("si", $userId, $pageSize);
    $result = $stmt->execute();

    if ($result) {
        return $stmt->get_result()->fetch_all(MYSQLI_ASSOC); // retrieve reviews
    } else {
        return array(); // error retrieving reviews
    }
}

function getProductReviews($productId, $pageSize = 10) {
    global $conn;

    // prepare and execute query
    $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = ? LIMIT ?");
    $stmt->bind_param("is", $productId, $pageSize);
    $result = $stmt->execute();

    if ($result) {
        return $stmt->get_result()->fetch_all(MYSQLI_ASSOC); // retrieve reviews
    } else {
        return array(); // error retrieving reviews
    }
}

// example usage:
$product_id = 1;
$user_name = 'John Doe';
$review_text = 'Great product!';
$rating = 5;

if (insertReview($product_id, $user_name, $review_text, $rating)) {
    echo "Review inserted successfully!";
} else {
    echo "Error inserting review.";
}

$reviews = getUserReviews(1);
foreach ($reviews as $review) {
    echo "Username: " . $review['user_name'] . "
";
    echo "Review Text: " . $review['review_text'] . "
";
    echo "Rating: " . $review['rating'] . "/5

";
}

$reviews = getProductReviews(1);
foreach ($reviews as $review) {
    echo "Username: " . $review['user_name'] . "
";
    echo "Review Text: " . $review['review_text'] . "
";
    echo "Rating: " . $review['rating'] . "/5

";
}


CREATE TABLE reviews (
  id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT,
  product_id INT,
  rating TINYINT(1),
  title VARCHAR(255),
  content TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE users (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(100)
);


// review.php

class Review {
  private $db;

  public function __construct() {
    // Connect to database
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  /**
   * Submit a new review
   *
   * @param int $userId The user's ID
   * @param int $productId The product's ID
   * @param string $title The title of the review
   * @param string $content The content of the review
   * @param int $rating The rating given to the product (1-5)
   *
   * @return bool True if the review was submitted successfully, false otherwise
   */
  public function submitReview($userId, $productId, $title, $content, $rating) {
    try {
      // Prepare and execute query
      $query = $this->db->prepare("INSERT INTO reviews (user_id, product_id, title, content, rating) VALUES (?, ?, ?, ?, ?)");
      $query->execute([$userId, $productId, $title, $content, $rating]);
      return true;
    } catch (PDOException $e) {
      // Log error and rethrow
      error_log($e->getMessage());
      throw $e;
    }
  }

  /**
   * Display reviews for a specific product
   *
   * @param int $productId The ID of the product
   *
   * @return array An array of review objects, or an empty array if no reviews exist
   */
  public function getReviews($productId) {
    try {
      // Prepare and execute query
      $query = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
      $query->execute([$productId]);
      $reviews = [];
      while ($row = $query->fetch()) {
        $review = new stdClass();
        $review->id = $row['id'];
        $review->user_id = $row['user_id'];
        $review->product_id = $row['product_id'];
        $review->rating = $row['rating'];
        $review->title = $row['title'];
        $review->content = $row['content'];
        $reviews[] = $review;
      }
      return $reviews;
    } catch (PDOException $e) {
      // Log error and rethrow
      error_log($e->getMessage());
      throw $e;
    }
  }

  /**
   * Calculate the average rating for a specific product
   *
   * @param int $productId The ID of the product
   *
   * @return float|null The average rating, or null if no reviews exist
   */
  public function getAverageRating($productId) {
    try {
      // Prepare and execute query
      $query = $this->db->prepare("SELECT AVG(rating) AS avg_rating FROM reviews WHERE product_id = ?");
      $query->execute([$productId]);
      $result = $query->fetch();
      return isset($result['avg_rating']) ? $result['avg_rating'] : null;
    } catch (PDOException $e) {
      // Log error and rethrow
      error_log($e->getMessage());
      throw $e;
    }
  }
}


// Include the review class
require 'review.php';

// Create a new instance of the Review class
$review = new Review();

// Submit a new review
$userId = 1;
$productId = 2;
$title = 'Great product!';
$content = 'I loved this product!';
$rating = 5;
$review->submitReview($userId, $productId, $title, $content, $rating);

// Display reviews for the specified product
$reviews = $review->getReviews($productId);
foreach ($reviews as $review) {
  echo "Rating: $review->rating, Title: $review->title, Content: $review->content
";
}

// Calculate and display the average rating for the product
$averageRating = $review->getAverageRating($productId);
echo "Average Rating: $averageRating
";


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_database';
$username = 'your_username';
$password = 'your_password';

try {
    // Connect to the database
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Error connecting to database: " . $e->getMessage();
}

// Function to add a review
function addReview($title, $content, $rating, $user_id) {
    global $conn;
    
    // Prepare the query
    $stmt = $conn->prepare("INSERT INTO reviews (title, content, rating, user_id) VALUES (:title, :content, :rating, :user_id)");
    
    // Bind the parameters
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':user_id', $user_id);
    
    // Execute the query
    try {
        $stmt->execute();
        
        // If successful, return True
        return true;
    } catch (PDOException $e) {
        echo "Error adding review: " . $e->getMessage();
        
        // If not successful, return False
        return false;
    }
}

// Function to view a user's reviews
function viewReviews($user_id) {
    global $conn;
    
    // Prepare the query
    $stmt = $conn->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
    
    // Bind the parameter
    $stmt->bindParam(':user_id', $user_id);
    
    // Execute the query and fetch results
    try {
        $stmt->execute();
        
        return $stmt->fetchAll();
    } catch (PDOException $e) {
        echo "Error viewing reviews: " . $e->getMessage();
        
        return null;
    }
}

// Function to delete a review
function deleteReview($review_id, $user_id) {
    global $conn;
    
    // Prepare the query
    $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :review_id AND user_id = :user_id");
    
    // Bind the parameters
    $stmt->bindParam(':review_id', $review_id);
    $stmt->bindParam(':user_id', $user_id);
    
    // Execute the query and check for success
    try {
        $stmt->execute();
        
        return true;
    } catch (PDOException $e) {
        echo "Error deleting review: " . $e->getMessage();
        
        return false;
    }
}

// Example usage:
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Get the form data
    $title = $_POST['title'];
    $content = $_POST['content'];
    $rating = $_POST['rating'];
    $user_id = $_POST['user_id'];
    
    // Add a review
    if (addReview($title, $content, $rating, $user_id)) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review.";
    }
}

// View reviews for user with ID 1
$reviews = viewReviews(1);
if ($reviews) {
    foreach ($reviews as $review) {
        echo $review['title'] . ": " . $review['content'];
    }
} else {
    echo "No reviews found.";
}
?>


// Include database connection file
require_once 'db.php';

// Function to display reviews for a product
function get_reviews($product_id, $limit = 10) {
    global $conn;
    
    // Query to retrieve reviews with average rating and count
    $query = "
        SELECT r.id, u.username, p.name, AVG(r.rating) AS avg_rating, COUNT(r.id) AS total_count
        FROM reviews r
        JOIN users u ON r.user_id = u.id
        JOIN products p ON r.product_id = p.id
        WHERE r.product_id = $product_id
        GROUP BY r.id, u.username, p.name
    ";
    
    // Execute query and return results
    $result = mysqli_query($conn, $query);
    return mysqli_fetch_all($result, MYSQLI_ASSOC);
}

// Function to add a review for a product
function add_review($product_id, $user_id, $rating, $comment) {
    global $conn;
    
    // Query to insert new review into database
    $query = "
        INSERT INTO reviews (product_id, user_id, rating, comment)
        VALUES ($product_id, $user_id, $rating, '$comment')
    ";
    
    // Execute query and return result
    $result = mysqli_query($conn, $query);
    return $result ? true : false;
}

// Function to edit a review for a product
function edit_review($review_id, $new_rating, $new_comment) {
    global $conn;
    
    // Query to update existing review in database
    $query = "
        UPDATE reviews
        SET rating = $new_rating, comment = '$new_comment'
        WHERE id = $review_id
    ";
    
    // Execute query and return result
    $result = mysqli_query($conn, $query);
    return $result ? true : false;
}

// Function to delete a review for a product
function delete_review($review_id) {
    global $conn;
    
    // Query to delete existing review from database
    $query = "
        DELETE FROM reviews
        WHERE id = $review_id
    ";
    
    // Execute query and return result
    $result = mysqli_query($conn, $query);
    return $result ? true : false;
}


// Display reviews for a product with ID 1
$reviews = get_reviews(1);
echo json_encode($reviews);

// Add a new review for product ID 2 from user ID 3
$result = add_review(2, 3, 5, 'Great product!');
var_dump($result); // true or false

// Edit an existing review with ID 4
$result = edit_review(4, 4, 'Excellent product!');
var_dump($result); // true or false

// Delete a review with ID 5
$result = delete_review(5);
var_dump($result); // true or false


<?php

// Configuration
require 'config.php';

// Database connection
$db = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

function createReview($userId, $productId, $rating, $review) {
  global $db;
  
  // Prepare and execute query
  $stmt = $db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
  $stmt->bind_param('iiis', $userId, $productId, $rating, $review);
  $stmt->execute();
  
  // Get the ID of the newly created review
  $reviewId = $db->insert_id;
  
  return $reviewId;
}

function getReviews($productId) {
  global $db;
  
  // Prepare and execute query
  $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = ?");
  $stmt->bind_param('i', $productId);
  $stmt->execute();
  
  // Fetch results as an array of associative arrays
  $reviews = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  
  return $reviews;
}

function getReview($reviewId) {
  global $db;
  
  // Prepare and execute query
  $stmt = $db->prepare("SELECT * FROM reviews WHERE id = ?");
  $stmt->bind_param('i', $reviewId);
  $stmt->execute();
  
  // Fetch result as an associative array
  $review = $stmt->get_result()->fetch_assoc();
  
  return $review;
}

function updateReview($reviewId, $rating, $review) {
  global $db;
  
  // Prepare and execute query
  $stmt = $db->prepare("UPDATE reviews SET rating = ?, review = ? WHERE id = ?");
  $stmt->bind_param('isi', $rating, $review, $reviewId);
  $stmt->execute();
}

function deleteReview($reviewId) {
  global $db;
  
  // Prepare and execute query
  $stmt = $db->prepare("DELETE FROM reviews WHERE id = ?");
  $stmt->bind_param('i', $reviewId);
  $stmt->execute();
}

?>


// Create a new review
$userId = 1;
$productId = 1;
$rating = 5;
$review = "This product is amazing!";
$reviewId = createReview($userId, $productId, $rating, $review);
echo "New review created with ID: $reviewId
";

// Get all reviews for a product
$product_id = 1;
$reviews = getReviews($product_id);
foreach ($reviews as $review) {
  echo "Rating: $review[rating], Review: $review[review]
";
}

// Get a specific review by its ID
$reviewId = 1;
$review = getReview($reviewId);
echo "Rating: $review[rating], Review: $review[review]
";

// Update an existing review
$update_rating = 4;
$update_review = "Updated review!";
updateReview($reviewId, $update_rating, $update_review);

// Delete a review
deleteReview($reviewId);


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_database';
$user = 'your_username';
$password = 'your_password';

// Create a database connection
$conn = new PDO("mysql:host=$host;dbname=$dbname", $user, $password);

function createUserReview($conn, $reviewData) {
  // Insert review into the reviews table and get its id
  $stmt = $conn->prepare('INSERT INTO reviews (user_id, content, rating) VALUES (:user_id, :content, :rating)');
  $stmt->execute([
    ':user_id' => $reviewData['user_id'],
    ':content' => $reviewData['content'],
    ':rating' => $reviewData['rating']
  ]);
  return $conn->lastInsertId();
}

function getAllReviews($conn) {
  // Retrieve all reviews from the database
  $stmt = $conn->prepare('SELECT * FROM reviews');
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function getReviewById($conn, $reviewId) {
  // Retrieve a review by its id
  $stmt = $conn->prepare('SELECT * FROM reviews WHERE id = :id');
  $stmt->bindParam(':id', $reviewId);
  $stmt->execute();
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

function updateReview($conn, $reviewId, $reviewData) {
  // Update an existing review
  $stmt = $conn->prepare('UPDATE reviews SET content = :content, rating = :rating WHERE id = :id');
  $stmt->bindParam(':id', $reviewId);
  $stmt->execute([
    ':content' => $reviewData['content'],
    ':rating' => $reviewData['rating']
  ]);
}

function deleteReview($conn, $reviewId) {
  // Delete a review by its id
  $stmt = $conn->prepare('DELETE FROM reviews WHERE id = :id');
  $stmt->bindParam(':id', $reviewId);
  $stmt->execute();
}


// Connect to the database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $user, $password);

// Create a user review
$userReviewData = [
  'user_id' => 1,
  'content' => 'This product is amazing!',
  'rating' => 5
];
$reviewId = createUserReview($conn, $userReviewData);
echo "Created review with id: $reviewId
";

// Retrieve all reviews
$reviews = getAllReviews($conn);
foreach ($reviews as $review) {
  echo "Review id: {$review['id']}, User ID: {$review['user_id']}, Content: {$review['content']}
";
}

// Update a review
updateReview($conn, $reviewId, [
  'content' => 'This product is even better now!',
  'rating' => 4
]);
echo "Updated review with id: $reviewId
";

// Delete a review
deleteReview($conn, $reviewId);
echo "Deleted review with id: $reviewId
";


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews';
$username = 'your_username';
$password = 'your_password';

// Connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

// Function to display reviews for a product
function displayReviews($product_id) {
  global $conn;
  
  $stmt = $conn->prepare('SELECT * FROM reviews WHERE product_id = ?');
  $stmt->execute([$product_id]);
  
  $reviews = $stmt->fetchAll();
  
  foreach ($reviews as $review) {
    echo '<p>Rating: ' . $review['rating'] . '/5</p>';
    echo '<p>' . $review['text'] . '</p>';
    echo '<p>Created by ' . getUserName($review['user_id']) . '</p>';
  }
}

// Function to display user's own reviews
function displayUserReviews($user_id) {
  global $conn;
  
  $stmt = $conn->prepare('SELECT * FROM reviews WHERE user_id = ?');
  $stmt->execute([$user_id]);
  
  $reviews = $stmt->fetchAll();
  
  foreach ($reviews as $review) {
    echo '<p>Rating: ' . $review['rating'] . '/5</p>';
    echo '<p>' . $review['text'] . '</p>';
    echo '<p>Created for product ' . getProductNames($review['product_id']) . '</p>';
  }
}

// Function to create a new review
function createReview() {
  global $conn;
  
  if (isset($_POST['create-review'])) {
    $user_id = $_SESSION['id'];
    $product_id = $_POST['product_id'];
    $rating = $_POST['rating'];
    $text = $_POST['text'];
    
    $stmt = $conn->prepare('INSERT INTO reviews (user_id, product_id, rating, text) VALUES (?, ?, ?, ?)');
    $stmt->execute([$user_id, $product_id, $rating, $text]);
    
    header('Location: index.php');
  }
}

// Function to edit a review
function editReview() {
  global $conn;
  
  if (isset($_POST['edit-review'])) {
    $review_id = $_POST['review_id'];
    $new_rating = $_POST['rating'];
    $new_text = $_POST['text'];
    
    $stmt = $conn->prepare('UPDATE reviews SET rating = ?, text = ? WHERE id = ?');
    $stmt->execute([$new_rating, $new_text, $review_id]);
  }
}

// Function to delete a review
function deleteReview() {
  global $conn;
  
  if (isset($_POST['delete-review'])) {
    $review_id = $_POST['review_id'];
    
    $stmt = $conn->prepare('DELETE FROM reviews WHERE id = ?');
    $stmt->execute([$review_id]);
  }
}

// Function to get the name of a user
function getUserName($user_id) {
  global $conn;
  
  $stmt = $conn->prepare('SELECT * FROM users WHERE id = ?');
  $stmt->execute([$user_id]);
  
  return $stmt->fetch()['name'];
}

// Function to get the name(s) of a product
function getProductNames($product_id) {
  global $conn;
  
  $stmt = $conn->prepare('SELECT name FROM products WHERE id = ?');
  $stmt->execute([$product_id]);
  
  return $stmt->fetch()['name'];
}

?>


// Display reviews for a product
displayReviews(1);

// Display user's own reviews
displayUserReviews($_SESSION['id']);

// Create a new review
createReview();

// Edit a review
editReview();

// Delete a review
deleteReview();


<?php

// database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// connect to the database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function get_reviews($product_id) {
    global $conn;
    
    // query reviews for the given product
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "<p>" . $row['review_text'] . "</p>";
            echo "<p>Rating: " . $row['rating'] . "/5</p>";
            echo "<p>Posted by: <a href='#'>" . $row['username'] . "</a></p>";
        }
    } else {
        echo "<p>No reviews available for this product.</p>";
    }
}

function add_review($product_id, $user_id, $rating, $review_text) {
    global $conn;
    
    // insert review into the database
    $query = "INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES ('$product_id', '$user_id', '$rating', '$review_text')";
    $result = $conn->query($query);
    
    if ($result) {
        echo "<p>Review added successfully!</p>";
    } else {
        echo "<p>Error adding review: " . $conn->error . "</p>";
    }
}

function get_user_reviews($user_id) {
    global $conn;
    
    // query reviews for the given user
    $query = "SELECT * FROM reviews WHERE user_id = '$user_id'";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "<p>" . $row['review_text'] . "</p>";
            echo "<p>Rating: " . $row['rating'] . "/5</p>";
            echo "<p>Posted for product: <a href='#'>" . $row['product_name'] . "</a></p>";
        }
    } else {
        echo "<p>No reviews available for this user.</p>";
    }
}

// example usage
get_reviews(1); // get reviews for product with id 1

?>


class Review {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    // Get all reviews for a user
    public function getReviewsForUser($userId) {
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = ?");
        $stmt->execute([$userId]);
        return $stmt->fetchAll();
    }

    // Create a new review
    public function createReview($data) {
        $stmt = $this->db->prepare("INSERT INTO reviews (user_id, content, rating) VALUES (?, ?, ?)");
        $stmt->execute([$data['user_id'], $data['content'], $data['rating']]);
        return $this->db->lastInsertId();
    }

    // Update a review
    public function updateReview($id, $data) {
        $stmt = $this->db->prepare("UPDATE reviews SET content = ?, rating = ? WHERE id = ?");
        $stmt->execute([$data['content'], $data['rating'], $id]);
        return true;
    }

    // Delete a review
    public function deleteReview($id) {
        $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
        $stmt->execute([$id]);
        return true;
    }
}


class User {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    // Get all users
    public function getAllUsers() {
        $stmt = $this->db->prepare("SELECT * FROM users");
        return $stmt->fetchAll();
    }
}


class ReviewController {
    private $review;

    public function __construct($db) {
        $this->review = new Review($db);
    }

    // Create a review
    public function create() {
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $data = $_POST;
            $userId = $data['user_id'];
            $content = $data['content'];
            $rating = $data['rating'];

            $newReviewId = $this->review->createReview([
                'user_id' => $userId,
                'content' => $content,
                'rating' => $rating
            ]);

            http_response_code(201);
            echo json_encode(['message' => 'Review created successfully', 'id' => $newReviewId]);
        } else {
            http_response_code(405);
            echo json_encode(['error' => 'Invalid request method']);
        }
    }

    // Get reviews for a user
    public function getReviews() {
        if ($_SERVER['REQUEST_METHOD'] === 'GET') {
            $userId = $_GET['user_id'];

            $reviews = $this->review->getReviewsForUser($userId);

            http_response_code(200);
            echo json_encode($reviews);
        } else {
            http_response_code(405);
            echo json_encode(['error' => 'Invalid request method']);
        }
    }

    // Update a review
    public function update() {
        if ($_SERVER['REQUEST_METHOD'] === 'PUT') {
            $id = $_GET['id'];
            $data = $_POST;

            $updatedReview = $this->review->updateReview($id, [
                'content' => $data['content'],
                'rating' => $data['rating']
            ]);

            if ($updatedReview) {
                http_response_code(200);
                echo json_encode(['message' => 'Review updated successfully']);
            } else {
                http_response_code(404);
                echo json_encode(['error' => 'Review not found']);
            }
        } else {
            http_response_code(405);
            echo json_encode(['error' => 'Invalid request method']);
        }
    }

    // Delete a review
    public function delete() {
        if ($_SERVER['REQUEST_METHOD'] === 'DELETE') {
            $id = $_GET['id'];

            $deletedReviewId = $this->review->deleteReview($id);

            if ($deletedReviewId) {
                http_response_code(200);
                echo json_encode(['message' => 'Review deleted successfully']);
            } else {
                http_response_code(404);
                echo json_encode(['error' => 'Review not found']);
            }
        } else {
            http_response_code(405);
            echo json_encode(['error' => 'Invalid request method']);
        }
    }
}


// db.php (database connection file)

<?php

define('DB_HOST', 'your_host');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

$dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME;
$db = new PDO($dsn, DB_USERNAME, DB_PASSWORD);

?>


// review.php (review management file)

<?php

require_once 'db.php';

function getReviews() {
  $stmt = $db->prepare("SELECT r.id, u.name, r.title, r.content, r.rating FROM reviews r INNER JOIN users u ON r.user_id = u.id");
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function getReview($id) {
  $stmt = $db->prepare("SELECT * FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $id);
  $stmt->execute();
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

function addReview($title, $content, $rating, $user_id) {
  $stmt = $db->prepare("INSERT INTO reviews (title, content, rating, user_id) VALUES (:title, :content, :rating, :user_id)");
  $stmt->bindParam(':title', $title);
  $stmt->bindParam(':content', $content);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':user_id', $user_id);
  return $stmt->execute();
}

function updateReview($id, $title, $content, $rating) {
  $stmt = $db->prepare("UPDATE reviews SET title = :title, content = :content, rating = :rating WHERE id = :id");
  $stmt->bindParam(':title', $title);
  $stmt->bindParam(':content', $content);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':id', $id);
  return $stmt->execute();
}

function deleteReview($id) {
  $stmt = $db->prepare("DELETE FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $id);
  return $stmt->execute();
}


// review_controller.php (review controller file)

<?php

require_once 'review.php';

class ReviewController {

  public function index() {
    $reviews = getReviews();
    echo json_encode($reviews);
  }

  public function show($id) {
    $review = getReview($id);
    echo json_encode($review);
  }

  public function store($title, $content, $rating, $user_id) {
    return addReview($title, $content, $rating, $user_id);
  }

  public function update($id, $title, $content, $rating) {
    return updateReview($id, $title, $content, $rating);
  }

  public function destroy($id) {
    return deleteReview($id);
  }
}

?>


// index.php (main file)

<?php

require_once 'review_controller.php';

$controller = new ReviewController();

if ($_SERVER['REQUEST_METHOD'] == 'GET') {
  if (isset($_GET['id'])) {
    $id = $_GET['id'];
    $controller->show($id);
  } else {
    $controller->index();
  }
} elseif ($_SERVER['REQUEST_METHOD'] == 'POST') {
  $title = $_POST['title'];
  $content = $_POST['content'];
  $rating = $_POST['rating'];
  $user_id = $_POST['user_id'];
  $result = $controller->store($title, $content, $rating, $user_id);
  if ($result) {
    echo json_encode(['message' => 'Review created successfully.']);
  } else {
    echo json_encode(['error' => 'Failed to create review.']);
  }
} elseif ($_SERVER['REQUEST_METHOD'] == 'PUT') {
  $id = $_GET['id'];
  $title = $_POST['title'];
  $content = $_POST['content'];
  $rating = $_POST['rating'];
  $result = $controller->update($id, $title, $content, $rating);
  if ($result) {
    echo json_encode(['message' => 'Review updated successfully.']);
  } else {
    echo json_encode(['error' => 'Failed to update review.']);
  }
} elseif ($_SERVER['REQUEST_METHOD'] == 'DELETE') {
  $id = $_GET['id'];
  $result = $controller->destroy($id);
  if ($result) {
    echo json_encode(['message' => 'Review deleted successfully.']);
  } else {
    echo json_encode(['error' => 'Failed to delete review.']);
  }
}

?>


// db_connection.php (for database connection)
<?php
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'your_username';
$password = 'your_password';

try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch(PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}
?>

// review_function.php
<?php
require_once 'db_connection.php';

function create_review($user_id, $product_id, $rating, $review) {
    global $conn;
    $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
}

function read_reviews($product_id) {
    global $conn;
    $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function update_review($id, $rating, $review) {
    global $conn;
    $stmt = $conn->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
    $stmt->bindParam(':id', $id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
}

function delete_review($id) {
    global $conn;
    $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $id);
    return $stmt->execute();
}
?>


// create a new review for a product
$user_id = 1; // user's ID
$product_id = 1; // product's ID
$rating = 4;
$review = 'This product is great!';
if (create_review($user_id, $product_id, $rating, $review)) {
    echo "Review created successfully!";
} else {
    echo "Failed to create review.";
}

// read reviews for a specific product
$product_id = 1;
$reviews = read_reviews($product_id);
foreach ($reviews as $review) {
    echo "Rating: {$review['rating']}, Review: {$review['review']}";
}

// update an existing review
$id = 1; // review's ID
$rating = 5;
$review = 'I love this product!';
if (update_review($id, $rating, $review)) {
    echo "Review updated successfully!";
} else {
    echo "Failed to update review.";
}

// delete a review
$id = 1; // review's ID
if (delete_review($id)) {
    echo "Review deleted successfully!";
} else {
    echo "Failed to delete review.";
}


<?php

class Review {
    private $id;
    private $title;
    private $content;
    private $rating;
    private $username;

    public function __construct($id, $title, $content, $rating, $username) {
        $this->id = $id;
        $this->title = $title;
        $this->content = $content;
        $this->rating = $rating;
        $this->username = $username;
    }

    public function getId() {
        return $this->id;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getContent() {
        return $this->content;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getUsername() {
        return $this->username;
    }
}

class ReviewService {
    private $reviews = array();

    public function addReview(Review $review) {
        $this->reviews[] = $review;
    }

    public function getReviews() {
        return $this->reviews;
    }

    public function getReviewsByUser($username) {
        $reviews = array();
        foreach ($this->reviews as $review) {
            if ($review->getUsername() == $username) {
                $reviews[] = $review;
            }
        }
        return $reviews;
    }
}

class ReviewController {
    private $reviewService;

    public function __construct(ReviewService $reviewService) {
        $this->reviewService = $reviewService;
    }

    public function addReview($title, $content, $rating, $username) {
        $review = new Review(count($this->reviewService->getReviews()) + 1, $title, $content, $rating, $username);
        $this->reviewService->addReview($review);
        return $review;
    }

    public function getReviews() {
        return $this->reviewService->getReviews();
    }

    public function getReviewsByUser($username) {
        return $this->reviewService->getReviewsByUser($username);
    }
}

// Example usage
$reviewService = new ReviewService();
$reviewController = new ReviewController($reviewService);

// Add some reviews
$review1 = $reviewController->addReview('Great product!', 'I love this product!', 5, 'JohnDoe');
$review2 = $reviewController->addReview('Good product, but not great.', 'It\'s okay, I guess.', 3, 'JaneDoe');

// Get all reviews
$reviews = $reviewController->getReviews();
foreach ($reviews as $review) {
    echo "Title: " . $review->getTitle() . ", Content: " . $review->getContent() . ", Rating: " . $review->getRating() . ", Username: " . $review->getUsername() . "
";
}

// Get reviews by user
$reviewsByJohn = $reviewController->getReviewsByUser('JohnDoe');
foreach ($reviewsByJohn as $review) {
    echo "Title: " . $review->getTitle() . ", Content: " . $review->getContent() . ", Rating: " . $review->getRating() . ", Username: " . $review->getUsername() . "
";
}


// Review model class
class Review {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview($product_id, $user_id, $rating, $comment) {
        $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
                  VALUES (:product_id, :user_id, :rating, :comment)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);
        return $stmt->execute();
    }

    public function getReviews($product_id) {
        $query = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public function getUserReviews($user_id) {
        $query = "SELECT * FROM reviews WHERE user_id = :user_id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public function getAverageRating($product_id) {
        $query = "SELECT AVG(rating) FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
        return $stmt->fetchColumn();
    }
}


// Create a new review instance
$reviewModel = new Review($pdo);

// Create a new review
$product_id = 1;
$user_id = 1;
$rating = 5;
$comment = "Great product!";
$result = $reviewModel->createReview($product_id, $user_id, $rating, $comment);
if ($result) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

// Get all reviews for a specific product
$product_id = 1;
$reviews = $reviewModel->getReviews($product_id);
foreach ($reviews as $review) {
    echo "Rating: {$review['rating']} | Comment: {$review['comment']}";
}

// Get average rating for a specific product
$product_id = 1;
$averageRating = $reviewModel->getAverageRating($product_id);
echo "Average Rating: {$averageRating}";

// Get reviews for a specific user
$user_id = 1;
$reviews = $reviewModel->getUserReviews($user_id);
foreach ($reviews as $review) {
    echo "Rating: {$review['rating']} | Comment: {$review['comment']}";
}


<?php

// Database connection settings
$host = 'localhost';
$db_name = 'reviews_db';
$user = 'your_username';
$password = 'your_password';

// Connect to database
$conn = new mysqli($host, $user, $password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function displayReviews() {
  global $conn;
  
  // Retrieve reviews from database
  $query = "SELECT * FROM reviews";
  $result = $conn->query($query);
  
  if (!$result) {
    echo "Error retrieving reviews.";
  } else {
    while ($row = $result->fetch_assoc()) {
      echo "<p>User ID: " . $row['user_id'] . "</p>";
      echo "<p>Review Text: " . $row['review_text'] . "</p>";
      echo "<p>Rating: " . $row['rating'] . "/5</p>";
      echo "<p>Created At: " . $row['created_at'] . "</p><hr>";
    }
  }
}

function createReview($user_id, $review_text, $rating) {
  global $conn;
  
  // Insert review into database
  $query = "INSERT INTO reviews (user_id, review_text, rating) VALUES (?, ?, ?)";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("iss", $user_id, $review_text, $rating);
  
  if ($stmt->execute()) {
    echo "Review created successfully.";
  } else {
    echo "Error creating review.";
  }
}

function editReview($id, $new_review_text) {
  global $conn;
  
  // Update review in database
  $query = "UPDATE reviews SET review_text = ? WHERE id = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("si", $new_review_text, $id);
  
  if ($stmt->execute()) {
    echo "Review updated successfully.";
  } else {
    echo "Error updating review.";
  }
}

function deleteReview($id) {
  global $conn;
  
  // Delete review from database
  $query = "DELETE FROM reviews WHERE id = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("i", $id);
  
  if ($stmt->execute()) {
    echo "Review deleted successfully.";
  } else {
    echo "Error deleting review.";
  }
}

?>


<?php
include 'user_review_function.php';

// Create a new review
createReview(1, "This is my review", 4);

// Display all reviews
displayReviews();

// Edit an existing review
editReview(1, "Updated review text");

// Delete a review
deleteReview(2);
?>


<?php

class Review {
  private $db;

  function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  function add_review($product_id, $user_id, $rating, $comment) {
    $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->execute();
  }

  function get_reviews($product_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  function get_product_reviews($product_id) {
    $reviews = $this->get_reviews($product_id);
    $product_name = $this->get_product_name($product_id);
    foreach ($reviews as &$review) {
      $review['product_name'] = $product_name;
    }
    return $reviews;
  }

  function get_product_name($product_id) {
    $stmt = $this->db->prepare("SELECT name FROM products WHERE id = :product_id");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchColumn();
  }
}

?>


<?php

require 'review.php';

$review = new Review();

if (isset($_POST['submit'])) {
  $product_id = $_POST['product_id'];
  $user_id = $_POST['user_id'];
  $rating = $_POST['rating'];
  $comment = $_POST['comment'];

  $review->add_review($product_id, $user_id, $rating, $comment);
}

$product_reviews = $review->get_product_reviews($_GET['id']);

?>
<!DOCTYPE html>
<html>
<head>
  <title>Reviews</title>
</head>
<body>

<h1>Reviews for <?php echo $_GET['name']; ?></h1>

<?php foreach ($product_reviews as $review) : ?>
  <div class="review">
    <p><?php echo $review['rating'] . '/5 stars'; ?></p>
    <p><?php echo $review['comment']; ?></p>
  </div>
<?php endforeach; ?>

<form action="" method="post">
  <label for="product_id">Product ID:</label>
  <input type="text" id="product_id" name="product_id"><br><br>
  <label for="rating">Rating (1-5):</label>
  <input type="number" id="rating" name="rating" min="1" max="5"><br><br>
  <label for="comment">Comment:</label>
  <textarea id="comment" name="comment"></textarea><br><br>
  <input type="submit" name="submit" value="Submit Review">
</form>

</body>
</html>


function add_review($product_id, $user_id, $rating, $comment) {
  // Validate input data
  if (!isset($product_id) || !isset($user_id) || !isset($rating) || !isset($comment)) {
    return array('error' => 'Invalid input data');
  }

  // Create new review
  $review = array(
    'product_id' => $product_id,
    'user_id' => $user_id,
    'rating' => $rating,
    'comment' => $comment
  );

  // Insert review into database
  $db = connect_to_db();
  $query = "INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)";
  $stmt = $db->prepare($query);
  $stmt->execute($review);

  // Return review ID
  return array('success' => true, 'id' => $db->lastInsertId());
}


function get_reviews_for_product($product_id) {
  // Validate input data
  if (!isset($product_id)) {
    return array('error' => 'Invalid product ID');
  }

  // Retrieve reviews from database
  $db = connect_to_db();
  $query = "SELECT * FROM reviews WHERE product_id = :product_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  $reviews = $stmt->fetchAll();

  // Return reviews
  return array('success' => true, 'reviews' => $reviews);
}


function get_reviews_for_user($user_id) {
  // Validate input data
  if (!isset($user_id)) {
    return array('error' => 'Invalid user ID');
  }

  // Retrieve reviews from database
  $db = connect_to_db();
  $query = "SELECT * FROM reviews WHERE user_id = :user_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->execute();
  $reviews = $stmt->fetchAll();

  // Return reviews
  return array('success' => true, 'reviews' => $reviews);
}


// Add a new review for product ID 1 by user ID 2 with rating 5 and comment "Great product!"
$review_id = add_review(1, 2, 5, "Great product!");

// Get all reviews for product ID 1
$reviews_for_product = get_reviews_for_product(1);

// Get all reviews for user ID 2
$reviews_for_user = get_reviews_for_user(2);


// database connection settings
$host = 'localhost';
$dbname = 'reviews_database';
$username = 'username';
$password = 'password';

// connect to the database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function addReview($reviewData) {
  global $conn;

  $query = "
    INSERT INTO reviews (user_id, product_id, rating, review)
    VALUES (?, ?, ?, ?)
  ";

  if ($stmt = mysqli_prepare($conn, $query)) {
    mysqli_stmt_bind_param($stmt, "iiii", $reviewData['userId'], $reviewData['productId'], $reviewData['rating'], $reviewData['review']);
    if (mysqli_stmt_execute($stmt)) {
      return true;
    } else {
      echo 'Error updating record: ' . mysqli_error($conn);
      return false;
    }
  }

  mysqli_stmt_close($stmt);

  return false;
}

function updateReview($reviewId, $newData) {
  global $conn;

  $query = "
    UPDATE reviews
    SET user_id = ?, product_id = ?, rating = ?, review = ?
    WHERE id = ?
  ";

  if ($stmt = mysqli_prepare($conn, $query)) {
    mysqli_stmt_bind_param($stmt, "iiii", $newData['userId'], $newData['productId'], $newData['rating'], $newData['review'], $reviewId);
    if (mysqli_stmt_execute($stmt)) {
      return true;
    } else {
      echo 'Error updating record: ' . mysqli_error($conn);
      return false;
    }
  }

  mysqli_stmt_close($stmt);

  return false;
}

function getReviews() {
  global $conn;

  $query = "
    SELECT r.id, u.name, p.title, r.rating, r.review
    FROM reviews r
    JOIN users u ON r.user_id = u.id
    JOIN products p ON r.product_id = p.id
  ";

  if ($result = mysqli_query($conn, $query)) {
    return $result;
  } else {
    echo 'Error retrieving records: ' . mysqli_error($conn);
    return false;
  }
}

// example usage
$reviewData = array(
  'userId' => 1,
  'productId' => 1,
  'rating' => 5,
  'review' => 'This product is amazing!'
);

addReview($reviewData);

$result = getReviews();
while ($row = mysqli_fetch_assoc($result)) {
  echo $row['name'] . ': ' . $row['title'] . ' - ' . $row['rating'] . '/5';
}

mysqli_close($conn);


<?php

class Review {
    private $pdo;

    public function __construct($pdo) {
        $this->pdo = $pdo;
    }

    /**
     * Get all reviews for a product
     *
     * @param int $productId Product ID
     * @return array Reviews
     */
    public function getReviews($productId) {
        $stmt = $this->pdo->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * Add a new review
     *
     * @param int   $userId User ID
     * @param int   $productId Product ID
     * @param int   $rating Rating
     * @param string $comment Comment
     */
    public function addReview($userId, $productId, $rating, $comment) {
        $stmt = $this->pdo->prepare("INSERT INTO reviews (user_id, product_id, rating, comment)
                                    VALUES (:user_id, :product_id, :rating, :comment)");
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);
        return $stmt->execute();
    }
}

// Example usage:
$pdo = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
$reviewSystem = new Review($pdo);

// Get reviews for a product
$productId = 1;
$reviews = $reviewSystem->getReviews($productId);
print_r($reviews);

// Add a new review
$userID = 1;
$productID = 2;
$rating = 4;
$comment = 'Great product!';
$success = $reviewSystem->addReview($userID, $productID, $rating, $comment);
echo $success ? 'Review added successfully!' : 'Error adding review.';


class UserReview {
    private $reviews = [];

    public function addReview($username, $rating, $comment) {
        $review = [
            'username' => $username,
            'rating' => $rating,
            'comment' => $comment
        ];
        array_push($this->reviews, $review);
    }

    public function getReviews() {
        return $this->reviews;
    }
}


$review = new UserReview();

// Add a review
$review->addReview('JohnDoe', 5, 'Great product!');

// Get all reviews
$reviews = $review->getReviews();
print_r($reviews);


Array
(
    [0] => Array
        (
            [username] => JohnDoe
            [rating] => 5
            [comment] => Great product!
        )

)


class UserReviewDB extends UserReview {
    private $db;

    public function __construct() {
        $this->db = new mysqli('localhost', 'username', 'password', 'database');
    }

    public function addReview($username, $rating, $comment) {
        if ($this->db->connect_error) {
            die("Connection failed: " . $this->db->connect_error);
        }
        $query = "INSERT INTO reviews (username, rating, comment)
                  VALUES ('$username', '$rating', '$comment')";
        if (!$this->db->query($query)) {
            echo "Error adding review";
        } else {
            echo "Review added successfully!";
        }
    }

    public function getReviews() {
        $result = $this->db->query("SELECT * FROM reviews");
        return $result->fetch_all(MYSQLI_ASSOC);
    }
}


$review = new UserReviewDB();

// Add a review
$review->addReview('JohnDoe', 5, 'Great product!');

// Get all reviews
$reviews = $review->getReviews();
print_r($reviews);


<?php

// Configuration variables
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
function connect_to_db() {
  $conn = new PDO("mysql:host=".DB_HOST.";dbname=".DB_NAME, DB_USERNAME, DB_PASSWORD);
  return $conn;
}

// Create review
function create_review($user_id, $product_id, $rating, $review_text) {
  try {
    $conn = connect_to_db();
    $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (?, ?, ?, ?)");
    $stmt->execute([$user_id, $product_id, $rating, $review_text]);
    return true;
  } catch (PDOException $e) {
    return false;
  }
}

// Get all reviews for a product
function get_reviews_for_product($product_id) {
  try {
    $conn = connect_to_db();
    $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = ?");
    $stmt->execute([$product_id]);
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    return [];
  }
}

// Edit review
function edit_review($id, $user_id, $rating, $review_text) {
  try {
    $conn = connect_to_db();
    $stmt = $conn->prepare("UPDATE reviews SET user_id = ?, rating = ?, review_text = ? WHERE id = ?");
    $stmt->execute([$user_id, $rating, $review_text, $id]);
    return true;
  } catch (PDOException $e) {
    return false;
  }
}

// Delete review
function delete_review($id) {
  try {
    $conn = connect_to_db();
    $stmt = $conn->prepare("DELETE FROM reviews WHERE id = ?");
    $stmt->execute([$id]);
    return true;
  } catch (PDOException $e) {
    return false;
  }
}

// Example usage
$user_id = 1; // Replace with actual user ID
$product_id = 1; // Replace with actual product ID

$review_text = "This is a great product!";

if (create_review($user_id, $product_id, 5, $review_text)) {
  echo "Review created successfully!";
} else {
  echo "Error creating review.";
}

$reviews = get_reviews_for_product($product_id);
echo "<pre>";
print_r($reviews);
echo "</pre>";

// Edit review
if (edit_review(1, $user_id, 4, "Updated review text")) {
  echo "Review edited successfully!";
} else {
  echo "Error editing review.";
}

// Delete review
if (delete_review(1)) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review.";
}


// models/Review.php

class Review {
    private $id;
    private $product_id;
    private $rating;
    private $title;
    private $description;

    public function __construct($data) {
        $this->id = (int) $data['id'];
        $this->product_id = (int) $data['product_id'];
        $this->rating = (float) $data['rating'];
        $this->title = $data['title'];
        $this->description = $data['description'];
    }

    public function getId() {
        return $this->id;
    }

    public function getProductId() {
        return $this->product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getDescription() {
        return $this->description;
    }
}


// services/ReviewService.php

class ReviewService {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function getAllReviews() {
        $query = "SELECT * FROM reviews";
        $results = $this->db->query($query);
        $reviews = array();
        while ($row = $results->fetch_assoc()) {
            $review = new Review($row);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public function addReview(Review $review) {
        $query = "INSERT INTO reviews (product_id, rating, title, description)
                  VALUES (?, ?, ?, ?)";
        $stmt = $this->db->prepare($query);
        $stmt->bind_param("iiii", $review->getProductId(), $review->getRating(), $review->getTitle(), $review->getDescription());
        $stmt->execute();
    }

    public function updateReview(Review $review) {
        $query = "UPDATE reviews SET rating = ?, title = ?, description = ?
                  WHERE id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->bind_param("ifsi", $review->getRating(), $review->getTitle(), $review->getDescription(), $review->getId());
        $stmt->execute();
    }

    public function deleteReview(Review $review) {
        $query = "DELETE FROM reviews WHERE id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->bind_param("i", $review->getId());
        $stmt->execute();
    }
}


// controllers/ReviewController.php

class ReviewController {
    private $service;

    public function __construct(ReviewService $service) {
        $this->service = $service;
    }

    public function getAllReviews() {
        $reviews = $this->service->getAllReviews();
        return json_encode($reviews);
    }

    public function addReview(Request $request) {
        $review = new Review([
            'product_id' => (int) $request->input('product_id'),
            'rating' => (float) $request->input('rating'),
            'title' => $request->input('title'),
            'description' => $request->input('description')
        ]);
        $this->service->addReview($review);
        return json_encode(['message' => 'Review added successfully']);
    }

    public function updateReview(Request $request) {
        $review = new Review([
            'id' => (int) $request->input('id'),
            'product_id' => (int) $request->input('product_id'),
            'rating' => (float) $request->input('rating'),
            'title' => $request->input('title'),
            'description' => $request->input('description')
        ]);
        $this->service->updateReview($review);
        return json_encode(['message' => 'Review updated successfully']);
    }

    public function deleteReview(Request $request) {
        $review = new Review([
            'id' => (int) $request->input('id')
        ]);
        $this->service->deleteReview($review);
        return json_encode(['message' => 'Review deleted successfully']);
    }
}


// In your route file
$router->get('/reviews', 'ReviewController@getAllReviews');
$router->post('/reviews', 'ReviewController@addReview');
$router->put('/reviews/{id}', 'ReviewController@updateReview');
$router->delete('/reviews/{id}', 'ReviewController@deleteReview');

// In your client-side code
fetch('/reviews')
  .then(response => response.json())
  .then(reviews => console.log(reviews));

fetch('/reviews', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    product_id: 1,
    rating: 5.0,
    title: 'Great Product!',
    description: 'This is a great product!'
  })
})
  .then(response => response.json())
  .then(result => console.log(result));

fetch('/reviews/1', {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    id: 1,
    product_id: 2,
    rating: 4.0,
    title: 'Good Product!',
    description: 'This is a good product!'
  })
})
  .then(response => response.json())
  .then(result => console.log(result));

fetch('/reviews/1', {
  method: 'DELETE'
})
  .then(response => response.json())
  .then(result => console.log(result));


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'root', '');
  }

  public function addReview($productId, $userId, $rating, $comment) {
    $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, comment)
                                VALUES (:productId, :userId, :rating, :comment)");
    $stmt->bindParam(':productId', $productId);
    $stmt->bindParam(':userId', $userId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);

    try {
      $stmt->execute();
      return true;
    } catch (PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
      return false;
    }
  }

  public function getReviews($productId) {
    $stmt = $this->db->prepare("SELECT r.id, u.name AS username, r.rating, r.comment
                                FROM reviews r
                                JOIN users u ON r.user_id = u.id
                                WHERE r.product_id = :productId");
    $stmt->bindParam(':productId', $productId);

    try {
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
      return array();
    }
  }

  public function getAverageRating($productId) {
    $stmt = $this->db->prepare("SELECT AVG(r.rating) AS average_rating
                                FROM reviews r
                                WHERE r.product_id = :productId");
    $stmt->bindParam(':productId', $productId);

    try {
      $stmt->execute();
      return $stmt->fetchColumn();
    } catch (PDOException $e) {
      echo "Error getting average rating: " . $e->getMessage();
      return 0;
    }
  }
}


$review = new Review();

// Add a review for product ID 1
$result = $review->addReview(1, 1, 5, 'Great product!');
if ($result) {
  echo "Review added successfully!";
}

// Get all reviews for product ID 1
$reviews = $review->getReviews(1);
echo json_encode($reviews);

// Get the average rating for product ID 1
$averageRating = $review->getAverageRating(1);
echo "Average Rating: " . $averageRating;


<?php

// Database connection settings
$dsn = 'mysql:host=localhost;dbname=your_database';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// User Review Function
function create_review($product_id, $user_id, $review, $rating)
{
    global $pdo;
    
    $sql = "INSERT INTO reviews (product_id, user_id, review, rating) VALUES (:product_id, :user_id, :review, :rating)";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':rating', $rating);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function get_reviews($product_id)
{
    global $pdo;
    
    $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    
    if ($stmt->execute()) {
        return $stmt->fetchAll();
    } else {
        return false;
    }
}

function get_review($review_id)
{
    global $pdo;
    
    $sql = "SELECT * FROM reviews WHERE id = :review_id";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':review_id', $review_id);
    
    if ($stmt->execute()) {
        return $stmt->fetch();
    } else {
        return false;
    }
}

function update_review($review_id, $review, $rating)
{
    global $pdo;
    
    $sql = "UPDATE reviews SET review = :review, rating = :rating WHERE id = :review_id";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_id', $review_id);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function delete_review($review_id)
{
    global $pdo;
    
    $sql = "DELETE FROM reviews WHERE id = :review_id";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':review_id', $review_id);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

?>


// Create a new review
create_review(1, 1, "Great product!", 5);

// Get all reviews for a specific product
$reviews = get_reviews(1);
print_r($reviews);

// Get a single review by ID
$review = get_review(1);
var_dump($review);

// Update an existing review
update_review(1, "Even better now!", 4);

// Delete a review
delete_review(1);


<?php

// Include configuration file
require 'config.php';

// Connect to database
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to create a review
function createReview($user_id, $product_id, $review_text) {
    global $conn;
    
    // Insert review into database
    $sql = "INSERT INTO reviews (user_id, product_id, review_text)
            VALUES ('$user_id', '$product_id', '$review_text')";
    if ($conn->query($sql) === TRUE) {
        echo "New record created successfully";
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
    }
}

// Function to display all reviews
function displayReviews() {
    global $conn;
    
    // Select all reviews from database
    $sql = "SELECT * FROM reviews";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        // Output data of each row
        while($row = $result->fetch_assoc()) {
            echo "Review ID: " . $row["id"]. " - User ID: " . $row["user_id"]. " - Product ID: " . $row["product_id"]. " - Review Text: " . $row["review_text"]. "<br>";
        }
    } else {
        echo "0 results";
    }
}

// Function to update a review
function updateReview($id, $review_text) {
    global $conn;
    
    // Update review in database
    $sql = "UPDATE reviews SET review_text='$review_text' WHERE id='$id'";
    if ($conn->query($sql) === TRUE) {
        echo "Record updated successfully";
    } else {
        echo "Error updating record: " . $conn->error;
    }
}

// Function to delete a review
function deleteReview($id) {
    global $conn;
    
    // Delete review from database
    $sql = "DELETE FROM reviews WHERE id='$id'";
    if ($conn->query($sql) === TRUE) {
        echo "Record deleted successfully";
    } else {
        echo "Error deleting record: " . $conn->error;
    }
}

?>


<?php

// Include configuration file
require 'config.php';

// Connect to database
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>User Review System</title>
</head>
<body>

<h2>Review Creation Form</h2>

<form action="review.php" method="post">
    User ID: <input type="text" name="user_id"><br><br>
    Product ID: <input type="text" name="product_id"><br><br>
    Review Text: <textarea name="review_text"></textarea><br><br>
    <input type="submit" value="Create Review">
</form>

<h2>Review Display Form</h2>

<form action="review.php" method="post">
    <input type="submit" value="Display All Reviews">
</form>

<?php
// Call the functions to create a review and display all reviews
if (isset($_POST["create_review"])) {
    $user_id = $_POST['user_id'];
    $product_id = $_POST['product_id'];
    $review_text = $_POST['review_text'];
    createReview($user_id, $product_id, $review_text);
}

if (isset($_POST["display_reviews"])) {
    displayReviews();
}
?>

</body>
</html>

<?php
// Function to create a review
function createReview($user_id, $product_id, $review_text) {
    global $conn;
    
    // Insert review into database
    $sql = "INSERT INTO reviews (user_id, product_id, review_text)
            VALUES ('$user_id', '$product_id', '$review_text')";
    if ($conn->query($sql) === TRUE) {
        echo "New record created successfully";
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
    }
}

// Function to display all reviews
function displayReviews() {
    global $conn;
    
    // Select all reviews from database
    $sql = "SELECT * FROM reviews";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        // Output data of each row
        while($row = $result->fetch_assoc()) {
            echo "Review ID: " . $row["id"]. " - User ID: " . $row["user_id"]. " - Product ID: " . $row["product_id"]. " - Review Text: " . $row["review_text"]. "<br>";
        }
    } else {
        echo "0 results";
    }
}

?>


class Review {
    private $id;
    private $userId;
    private $productId;
    private $rating;
    private $review;

    public function __construct($id = null, $userId = null, $productId = null, $rating = null, $review = null) {
        $this->id = $id;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->review = $review;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}


class ReviewsController extends Controller {
    private $reviews;

    public function __construct($reviews) {
        $this->reviews = $reviews;
    }

    public function addReview(Review $review) {
        $this->reviews->add($review);
        return true;
    }

    public function editReview($id, Review $newReview) {
        if ($this->reviews->exists($id)) {
            $this->reviews->update($id, $newReview);
            return true;
        }
        return false;
    }

    public function deleteReview($id) {
        if ($this->reviews->exists($id)) {
            $this->reviews->remove($id);
            return true;
        }
        return false;
    }

    public function getAllReviews() {
        return $this->reviews->getAll();
    }
}


use Illuminate\Database\Eloquent\Model;

class ReviewsService extends Model {
    protected $fillable = ['id', 'user_id', 'product_id', 'rating', 'review'];

    public function add($review) {
        return Review::create($review)->save();
    }

    public function update($id, Review $newReview) {
        return Review::where('id', '=', $id)
            ->update([
                'rating' => $newReview->getRating(),
                'review' => $newReview->getReview()
            ]);
    }

    public function remove($id) {
        return Review::destroy($id);
    }

    public function getAll() {
        return Review::all();
    }
}


$reviewsService = new ReviewsService();

$review1 = new Review(null, 12345, 'P001', 5, "Great product!");
$review2 = new Review(null, 67890, 'P002', 4, "Good but not great.");

$reviewsController = new ReviewsController($reviewsService);
$reviewsController->addReview($review1);
$reviewsController->addReview($review2);

$allReviews = $reviewsController->getAllReviews();


function getReviews($product_id, $limit = null) {
    // Check if product exists in database
    if (!$product_id) {
        return array();
    }

    // Retrieve all reviews for this product from database
    global $db;
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    if ($limit !== null) {
        $query .= " LIMIT $limit";
    }
    $result = mysqli_query($db, $query);
    $reviews = array();
    while ($row = mysqli_fetch_assoc($result)) {
        $reviews[] = array(
            'id' => $row['id'],
            'user_id' => $row['user_id'],
            'rating' => $row['rating'],
            'review' => $row['review']
        );
    }
    return $reviews;
}

function createReview($product_id, $user_id, $rating, $review) {
    // Check if user exists in database
    global $db;
    $query = "INSERT INTO reviews (product_id, user_id, rating, review)
              VALUES ('$product_id', '$user_id', '$rating', '$review')";
    mysqli_query($db, $query);
}

function updateReview($id, $new_rating, $new_review) {
    // Check if review exists in database
    global $db;
    $query = "UPDATE reviews SET rating = '$new_rating', review = '$new_review'
              WHERE id = '$id'";
    mysqli_query($db, $query);
}

function deleteReview($id) {
    // Check if review exists in database
    global $db;
    $query = "DELETE FROM reviews WHERE id = '$id'";
    mysqli_query($db, $query);
}


// Connect to the database
$db = new mysqli('localhost', 'username', 'password', 'database');

// Get all reviews for a product with ID 1
$reviews = getReviews(1);
print_r($reviews);

// Create a review
createReview(1, 2, 4, "Great product!");

// Update an existing review
updateReview(1, 5, "Even better than I expected!");

// Delete an existing review
deleteReview(1);


$stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)");
$stmt->bind_param('isss', $product_id, $user_id, $rating, $review);
$stmt->execute();


// config.php (store your database credentials here)
$db_host = 'your_host';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// connect to the database
function db_connect() {
  global $db_host, $db_username, $db_password, $db_name;
  $conn = new mysqli($db_host, $db_username, $db_password, $db_name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// function to display reviews
function display_reviews() {
  // connect to the database
  $conn = db_connect();
  
  // query for all reviews
  $query = "SELECT r.id, u.name, r.product_name, r.review_text, r.rating FROM Reviews r JOIN Users u ON r.user_id=u.id ORDER BY r.created_at DESC";
  $result = $conn->query($query);
  
  if ($result->num_rows > 0) {
    // display reviews
    echo "<h2>Reviews</h2>";
    while($row = $result->fetch_assoc()) {
      echo "<p>" . $row["name"] . " reviewed " . $row["product_name"] . ": " . $row["review_text"] . "</p>";
      echo "<p>Rating: " . $row["rating"] . "/5</p>";
    }
  } else {
    echo "No reviews found.";
  }
  
  // close the database connection
  $conn->close();
}

// function to submit a new review
function submit_review($name, $email, $product_name, $review_text, $rating) {
  // connect to the database
  $conn = db_connect();
  
  // query to insert new review into the Reviews table
  $query = "INSERT INTO Reviews (user_id, product_name, review_text, rating) VALUES (?, ?, ?, ?)";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("sss", $name, $product_name, $review_text, $rating);
  
  // execute the query
  if ($stmt->execute()) {
    echo "Review submitted successfully!";
  } else {
    echo "Failed to submit review.";
  }
  
  // close the database connection
  $conn->close();
}

// function to retrieve user reviews
function get_user_reviews($user_id) {
  // connect to the database
  $conn = db_connect();
  
  // query for all reviews belonging to the specified user
  $query = "SELECT r.id, u.name, r.product_name, r.review_text, r.rating FROM Reviews r JOIN Users u ON r.user_id=u.id WHERE r.user_id=?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("i", $user_id);
  
  // execute the query and fetch results
  if ($result = $stmt->execute()) {
    return $result;
  } else {
    echo "Failed to retrieve reviews.";
  }
  
  // close the database connection
  $conn->close();
}


display_reviews();


submit_review("John Doe", "john.doe@example.com", "Product X", "This is an excellent product!", 5);


$user_id = 1;
$reviews = get_user_reviews($user_id);
if ($reviews) {
    foreach ($reviews as $review) {
        echo "<p>" . $review["name"] . " reviewed " . $review["product_name"] . ": " . $review["review_text"] . "</p>";
        echo "<p>Rating: " . $review["rating"] . "/5</p>";
    }
}


function addReview($userId, $productId, $rating, $comment) {
  // Connect to database (e.g. MySQL)
  $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

  // Insert review into database table
  $stmt = $db->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:userId, :productId, :rating, :comment)");
  $stmt->bindParam(':userId', $userId);
  $stmt->bindParam(':productId', $productId);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':comment', $comment);

  if ($stmt->execute()) {
    // Review added successfully
    return true;
  } else {
    // Error adding review
    return false;
  }

  // Close database connection
  $db = null;
}

function getReviews($productId) {
  // Connect to database (e.g. MySQL)
  $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

  // Retrieve reviews from database table
  $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :productId");
  $stmt->bindParam(':productId', $productId);

  if ($stmt->execute()) {
    // Get reviews as an array of associative arrays
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } else {
    // Error retrieving reviews
    return false;
  }

  // Close database connection
  $db = null;
}

function getUserReviews($userId) {
  // Connect to database (e.g. MySQL)
  $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

  // Retrieve reviews from database table
  $stmt = $db->prepare("SELECT * FROM reviews WHERE user_id = :userId");
  $stmt->bindParam(':userId', $userId);

  if ($stmt->execute()) {
    // Get reviews as an array of associative arrays
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } else {
    // Error retrieving reviews
    return false;
  }

  // Close database connection
  $db = null;
}

function updateReview($reviewId, $newRating, $newComment) {
  // Connect to database (e.g. MySQL)
  $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

  // Update review in database table
  $stmt = $db->prepare("UPDATE reviews SET rating = :newRating, comment = :newComment WHERE id = :reviewId");
  $stmt->bindParam(':reviewId', $reviewId);
  $stmt->bindParam(':newRating', $newRating);
  $stmt->bindParam(':newComment', $newComment);

  if ($stmt->execute()) {
    // Review updated successfully
    return true;
  } else {
    // Error updating review
    return false;
  }

  // Close database connection
  $db = null;
}

function deleteReview($reviewId) {
  // Connect to database (e.g. MySQL)
  $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

  // Delete review from database table
  $stmt = $db->prepare("DELETE FROM reviews WHERE id = :reviewId");
  $stmt->bindParam(':reviewId', $reviewId);

  if ($stmt->execute()) {
    // Review deleted successfully
    return true;
  } else {
    // Error deleting review
    return false;
  }

  // Close database connection
  $db = null;
}


// Add a new review for user 1 and product 1 with rating 5 and comment "Great product!"
$reviewId = addReview(1, 1, 5, "Great product!");

// Get all reviews for product 1
$reviews = getReviews(1);

// Get all reviews for user 1
$userReviews = getUserReviews(1);

// Update review with ID 1 to have a new rating of 4 and comment "Okay product"
$updateResult = updateReview(1, 4, "Okay product");

// Delete review with ID 1
$deleteResult = deleteReview(1);


<?php

// Configuration for the database connection
$dsn = 'mysql:host=localhost;dbname=database_name';
$username = 'username';
$password = 'password';

try {
    // Connect to the database
    $conn = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// Function to add a review
function add_review($user_id, $product_id, $rating, $comment) {
    global $conn;
    
    try {
        // Prepare the query
        $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, comment)
                                VALUES (:user_id, :product_id, :rating, :comment)");
        
        // Bind parameters
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);
        
        // Execute the query
        $stmt->execute();
    } catch (PDOException $e) {
        echo 'Error adding review: ' . $e->getMessage();
    }
}

// Function to get all reviews for a product
function get_reviews($product_id) {
    global $conn;
    
    try {
        // Prepare the query
        $stmt = $conn->prepare("SELECT r.id, u.name, r.rating, r.comment FROM reviews r
                                JOIN users u ON r.user_id = u.id WHERE r.product_id = :product_id");
        
        // Bind parameters
        $stmt->bindParam(':product_id', $product_id);
        
        // Execute the query and return results as an array of objects
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_OBJ);
    } catch (PDOException $e) {
        echo 'Error getting reviews: ' . $e->getMessage();
    }
}

// Function to get a single review by its ID
function get_review($review_id) {
    global $conn;
    
    try {
        // Prepare the query
        $stmt = $conn->prepare("SELECT r.id, u.name, r.rating, r.comment FROM reviews r
                                JOIN users u ON r.user_id = u.id WHERE r.id = :id");
        
        // Bind parameters
        $stmt->bindParam(':id', $review_id);
        
        // Execute the query and return result as an object
        $stmt->execute();
        return $stmt->fetch(PDO::FETCH_OBJ);
    } catch (PDOException $e) {
        echo 'Error getting review: ' . $e->getMessage();
    }
}

// Function to update a review
function update_review($review_id, $user_id, $product_id, $rating, $comment) {
    global $conn;
    
    try {
        // Prepare the query
        $stmt = $conn->prepare("UPDATE reviews SET user_id = :user_id, product_id = :product_id,
                                rating = :rating, comment = :comment WHERE id = :id");
        
        // Bind parameters
        $stmt->bindParam(':id', $review_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':comment', $comment);
        
        // Execute the query
        $stmt->execute();
    } catch (PDOException $e) {
        echo 'Error updating review: ' . $e->getMessage();
    }
}

// Function to delete a review by its ID
function delete_review($review_id) {
    global $conn;
    
    try {
        // Prepare the query
        $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
        
        // Bind parameters
        $stmt->bindParam(':id', $review_id);
        
        // Execute the query
        $stmt->execute();
    } catch (PDOException $e) {
        echo 'Error deleting review: ' . $e->getMessage();
    }
}

?>


// Add a new review for product 1 with user ID 2, rating of 5 and comment "Good product"
add_review(2, 1, 5, "Good product");

// Get all reviews for product 1
$reviews = get_reviews(1);
print_r($reviews);

// Update the first review to change its rating to 4
update_review($reviews[0]->id, $reviews[0]->user_id, $reviews[0]->product_id, 4, "");

// Delete the updated review
delete_review($reviews[0]->id);


// user_review.php

function getReviews($productId, $userId = null) {
  // Get all reviews for a product or user-specific reviews
  global $db;
  
  if ($userId !== null) {
    $query = "SELECT * FROM reviews WHERE user_id = :user_id AND product_id = :product_id";
  } else {
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
  }
  
  try {
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $userId, PDO::PARAM_INT);
    $stmt->bindParam(':product_id', $productId, PDO::PARAM_INT);
    
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo "Error: " . $e->getMessage();
    return array();
  }
}

function addReview($data) {
  // Add a new review
  global $db;
  
  try {
    $query = "INSERT INTO reviews SET user_id = :user_id, product_id = :product_id, review = :review, rating = :rating";
    
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $data['user_id'], PDO::PARAM_INT);
    $stmt->bindParam(':product_id', $data['product_id'], PDO::PARAM_INT);
    $stmt->bindParam(':review', $data['review'], PDO::PARAM_STR);
    $stmt->bindParam(':rating', $data['rating'], PDO::PARAM_DECIMAL);
    
    $stmt->execute();
    return $db->lastInsertId();
  } catch (PDOException $e) {
    echo "Error: " . $e->getMessage();
    return null;
  }
}

function updateReview($reviewId, $data) {
  // Update an existing review
  global $db;
  
  try {
    $query = "UPDATE reviews SET user_id = :user_id, product_id = :product_id, review = :review, rating = :rating WHERE id = :id";
    
    $stmt = $db->prepare($query);
    $stmt->bindParam(':id', $reviewId, PDO::PARAM_INT);
    $stmt->bindParam(':user_id', $data['user_id'], PDO::PARAM_INT);
    $stmt->bindParam(':product_id', $data['product_id'], PDO::PARAM_INT);
    $stmt->bindParam(':review', $data['review'], PDO::PARAM_STR);
    $stmt->bindParam(':rating', $data['rating'], PDO::PARAM_DECIMAL);
    
    $stmt->execute();
    return true;
  } catch (PDOException $e) {
    echo "Error: " . $e->getMessage();
    return false;
  }
}

function deleteReview($reviewId) {
  // Delete a review
  global $db;
  
  try {
    $query = "DELETE FROM reviews WHERE id = :id";
    
    $stmt = $db->prepare($query);
    $stmt->bindParam(':id', $reviewId, PDO::PARAM_INT);
    
    $stmt->execute();
    return true;
  } catch (PDOException $e) {
    echo "Error: " . $e->getMessage();
    return false;
  }
}


// Get all reviews for a product with ID 1
$reviews = getReviews(1);
print_r($reviews);

// Add a new review
$data = array(
  'user_id' => 1,
  'product_id' => 1,
  'review' => 'Great product!',
  'rating' => 4.5
);
$reviewId = addReview($data);
echo "New review ID: $reviewId
";

// Update an existing review with ID 123
$data = array(
  'user_id' => 1,
  'product_id' => 1,
  'review' => 'Even better!',
  'rating' => 5.0
);
$updateReview = updateReview(123, $data);
echo "Update result: " . ($updateReview ? 'true' : 'false') . "
";

// Delete a review with ID 456
$deleteResult = deleteReview(456);
echo "Delete result: " . ($deleteResult ? 'true' : 'false') . "
";


// Review class
class Review {
    private $id;
    private $productId;
    private $userId;
    private $rating;
    private $comment;

    public function __construct($productId, $userId, $rating, $comment) {
        $this->productId = $productId;
        $this->userId = $userId;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->id = uniqid();
    }

    public function getId() {
        return $this->id;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}

// Review Model
class ReviewModel {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    // Create a new review
    public function createReview(Review $review) {
        $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
                  VALUES (:productId, :userId, :rating, :comment)";
        try {
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(":productId", $review->getProductId());
            $stmt->bindParam(":userId", $review->getUserId());
            $stmt->bindParam(":rating", $review->getRating());
            $stmt->bindParam(":comment", $review->getComment());
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error creating review: " . $e->getMessage();
            return false;
        }
    }

    // Get all reviews for a product
    public function getReviewsForProduct($productId) {
        $query = "SELECT * FROM reviews WHERE product_id = :productId";
        try {
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(":productId", $productId);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
        } catch (PDOException $e) {
            echo "Error retrieving reviews: " . $e->getMessage();
            return array();
        }
    }

    // Get all reviews for a user
    public function getReviewsForUser($userId) {
        $query = "SELECT * FROM reviews WHERE user_id = :userId";
        try {
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(":userId", $userId);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
        } catch (PDOException $e) {
            echo "Error retrieving reviews: " . $e->getMessage();
            return array();
        }
    }

    // Delete a review
    public function deleteReview($reviewId) {
        $query = "DELETE FROM reviews WHERE id = :id";
        try {
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(":id", $reviewId);
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error deleting review: " . $e->getMessage();
            return false;
        }
    }
}


// Create a new PDO instance
$db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');

// Create a new ReviewModel instance
$reviewModel = new ReviewModel($db);

// Create a new review
$review = new Review(1, 1, 5, "Great product!");
if ($reviewModel->createReview($review)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review";
}

// Get all reviews for a product
$reviewsForProduct = $reviewModel->getReviewsForProduct(1);
echo "<h2>Reviews for Product 1:</h2>";
foreach ($reviewsForProduct as $review) {
    echo "<p>User ID: {$review->getUserId()}</p>";
    echo "<p>Rating: {$review->getRating()}</p>";
    echo "<p>Comment: {$review->getComment()}</p>";
}

// Get all reviews for a user
$reviewsForUser = $reviewModel->getReviewsForUser(1);
echo "<h2>Reviews for User 1:</h2>";
foreach ($reviewsForUser as $review) {
    echo "<p>Product ID: {$review->getProductId()}</p>";
    echo "<p>Rating: {$review->getRating()}</p>";
    echo "<p>Comment: {$review->getComment()}</p>";
}

// Delete a review
$reviewModel->deleteReview($reviewId);
echo "Review deleted successfully!";


// database connection details
$host = 'localhost';
$username = 'root';
$password = '';
$dbname = 'reviews';

// connect to the database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// function to retrieve all reviews
function getReviews() {
  global $conn;
  $query = "SELECT r.id, u.username, p.name, r.rating, r.review FROM reviews r INNER JOIN users u ON r.user_id = u.id INNER JOIN products p ON r.product_id = p.id";
  $result = $conn->query($query);
  return $result;
}

// function to create a new review
function createReview($user_id, $product_id, $rating, $review) {
  global $conn;
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("iiii", $user_id, $product_id, $rating, $review);
  return $stmt->execute();
}

// function to update an existing review
function updateReview($id, $user_id, $product_id, $rating, $review) {
  global $conn;
  $query = "UPDATE reviews SET user_id = ?, product_id = ?, rating = ?, review = ? WHERE id = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("iiii$i", $user_id, $product_id, $rating, $review, $id);
  return $stmt->execute();
}

// function to delete a review
function deleteReview($id) {
  global $conn;
  $query = "DELETE FROM reviews WHERE id = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("i", $id);
  return $stmt->execute();
}


// connect to database
$conn = new mysqli($host, $username, $password, $dbname);

// create a new review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = "This product is amazing!";
createReview($user_id, $product_id, $rating, $review);

// get all reviews
$result = getReviews();
while ($row = $result->fetch_assoc()) {
    echo "ID: " . $row['id'] . ", User: " . $row['username'] . ", Product: " . $row['name'] . ", Rating: " . $row['rating'] . ", Review: " . $row['review'];
}

// update an existing review
$id = 1;
$user_id = 1;
$product_id = 1;
$rating = 4;
$review = "This product is good!";
updateReview($id, $user_id, $product_id, $rating, $review);

// delete a review
deleteReview(2);


// db.php (database connection file)

$host = 'your_host';
$dbname = 'your_database';
$username = 'your_username';
$password = 'your_password';

$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

function add_review($user_id, $product_id, $rating, $review) {
  global $conn;
  
  try {
    $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    $stmt->execute();
    
    return true;
  } catch (PDOException $e) {
    echo 'Error: ' . $e->getMessage() . '<br>';
    return false;
  }
}

function view_reviews($product_id = null, $rating = null) {
  global $conn;
  
  try {
    if ($product_id !== null && $rating !== null) {
      $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id AND rating >= :rating");
      $stmt->bindParam(':product_id', $product_id);
      $stmt->bindParam(':rating', $rating);
    } elseif ($product_id !== null) {
      $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
      $stmt->bindParam(':product_id', $product_id);
    } else {
      $stmt = $conn->query('SELECT * FROM reviews');
    }
    
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo 'Error: ' . $e->getMessage() . '<br>';
    return array();
  }
}

// Example usage:
$user_id = 1;
$product_id = 1;
$rating = 4;
$review = 'This product is amazing!';

if (add_review($user_id, $product_id, $rating, $review)) {
  echo 'Review added successfully!';
} else {
  echo 'Error adding review.';
}

$reviews = view_reviews(null, null);
echo json_encode($reviews); // View all reviews

$filteredReviews = view_reviews(1, 4);
echo json_encode($filteredReviews); // Filter by product ID and rating


<?php

// Include database connection settings
require 'config.php';

// Function to create a new review
function create_review($user_id, $product_name, $rating, $review) {
  global $conn;

  $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_name, rating, review)
    VALUES (:user_id, :product_name, :rating, :review)");
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':product_name', $product_name);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);

  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to read reviews
function get_reviews($user_id = null) {
  global $conn;

  if ($user_id !== null) {
    $stmt = $conn->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll();
  } else {
    $stmt = $conn->prepare("SELECT * FROM reviews");
    $stmt->execute();
    return $stmt->fetchAll();
  }
}

// Function to update a review
function update_review($review_id, $user_id, $product_name, $rating, $review) {
  global $conn;

  $stmt = $conn->prepare("UPDATE reviews SET user_id = :user_id, product_name = :product_name, rating = :rating, review = :review WHERE id = :review_id");
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':product_name', $product_name);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  $stmt->bindParam(':review_id', $review_id);

  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to delete a review
function delete_review($review_id) {
  global $conn;

  $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :review_id");
  $stmt->bindParam(':review_id', $review_id);

  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

?>


// Create a new review
$user_id = 1;
$product_name = 'Product X';
$rating = 5;
$review = 'This is a great product!';
if (create_review($user_id, $product_name, $rating, $review)) {
  echo 'Review created successfully!';
} else {
  echo 'Error creating review.';
}

// Read reviews
$user_id = 1;
$reviews = get_reviews($user_id);
foreach ($reviews as $review) {
  echo 'Product: ' . $review['product_name'] . ', Rating: ' . $review['rating'] . ', Review: ' . $review['review'];
}

// Update a review
$review_id = 1;
$user_id = 1;
$product_name = 'Updated Product X';
$rating = 4;
$review = 'This is an updated review.';
if (update_review($review_id, $user_id, $product_name, $rating, $review)) {
  echo 'Review updated successfully!';
} else {
  echo 'Error updating review.';
}

// Delete a review
$review_id = 1;
if (delete_review($review_id)) {
  echo 'Review deleted successfully!';
} else {
  echo 'Error deleting review.';
}


// Database connection settings
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'root';
$password = '';

// Connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

function getReviews() {
  global $conn;
  
  // Get reviews from database
  $stmt = $conn->prepare('SELECT * FROM reviews');
  $stmt->execute();
  
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}


// Function to add a new review
function addReview($name, $rating, $comment) {
  global $conn;
  
  // Insert review into database
  $stmt = $conn->prepare('INSERT INTO reviews (name, rating, comment) VALUES (:name, :rating, :comment)');
  $stmt->bindParam(':name', $name);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':comment', $comment);
  
  return $stmt->execute();
}

// Function to update an existing review
function updateReview($id, $name, $rating, $comment) {
  global $conn;
  
  // Update review in database
  $stmt = $conn->prepare('UPDATE reviews SET name = :name, rating = :rating, comment = :comment WHERE id = :id');
  $stmt->bindParam(':id', $id);
  $stmt->bindParam(':name', $name);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':comment', $comment);
  
  return $stmt->execute();
}

// Function to delete a review
function deleteReview($id) {
  global $conn;
  
  // Delete review from database
  $stmt = $conn->prepare('DELETE FROM reviews WHERE id = :id');
  $stmt->bindParam(':id', $id);
  
  return $stmt->execute();
}


<?php
require_once 'database.php';
require_once 'review.php';

// Get all reviews from database
$reviews = getReviews();

// Display reviews on page
foreach ($reviews as $review) {
  echo '<h2>' . $review['name'] . '</h2>';
  echo '<p>Rating: ' . $review['rating'] . '/5</p>';
  echo '<p>Comment: ' . $review['comment'] . '</p>';
}

// Form to add new review
echo '<form action="" method="post">';
echo '<input type="text" name="name" placeholder="Name">';
echo '<select name="rating">';
echo '<option value="1">1</option>';
echo '<option value="2">2</option>';
echo '<option value="3">3</option>';
echo '<option value="4">4</option>';
echo '<option value="5">5</option>';
echo '</select>';
echo '<textarea name="comment"></textarea>';
echo '<button type="submit" name="add_review">Add Review</button>';
echo '</form>';

// Handle form submission
if (isset($_POST['add_review'])) {
  $name = $_POST['name'];
  $rating = $_POST['rating'];
  $comment = $_POST['comment'];
  
  // Add review to database
  addReview($name, $rating, $comment);
}
?>


// Review class to handle user reviews
class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Function to add a new review
  public function addReview($userId, $productId, $rating, $comment) {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)");
    $stmt->bindParam(1, $userId);
    $stmt->bindParam(2, $productId);
    $stmt->bindParam(3, $rating);
    $stmt->bindParam(4, $comment);
    return $stmt->execute();
  }

  // Function to get all reviews for a product
  public function getReviewsForProduct($productId) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
    $stmt->bindParam(1, $productId);
    return $stmt->fetchAll();
  }

  // Function to get all reviews for a user
  public function getReviewsForUser($userId) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = ?");
    $stmt->bindParam(1, $userId);
    return $stmt->fetchAll();
  }
}


// Initialize database connection
$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');

// Create a new Review object
$review = new Review($db);

// Add a new review
$userId = 1;
$productId = 2;
$rating = 5;
$comment = "Great product!";
$result = $review->addReview($userId, $productId, $rating, $comment);
if ($result) {
  echo "Review added successfully!";
} else {
  echo "Error adding review.";
}

// Get all reviews for a product
$productId = 2;
$reviews = $review->getReviewsForProduct($productId);
foreach ($reviews as $review) {
  echo "Rating: {$review['rating']}, Comment: {$review['comment']}";
}


// config.php

<?php
defined('BASEPATH') or exit('No direct script access allowed');

require_once 'vendor/autoload.php';

use Illuminate\Database\Capsule\Manager as Capsule;

$capsule = new Capsule();

$capsule->addConnection([
    'driver' => 'mysql',
    'host' => 'localhost',
    'database' => 'reviews',
    'username' => 'root',
    'password' => '',
]);

$capsule->setAsGlobal();


// ReviewController.php

<?php
defined('BASEPATH') or exit('No direct script access allowed');

class ReviewController extends CI_Controller {

  public function index() {
    $this->load->model('ReviewModel');
    $reviews = $this->ReviewModel->getReviews();
    echo json_encode($reviews);
  }

  public function create() {
    $this->load->model('ReviewModel');
    if ($this->input->post()) {
      $data = array(
        'user_id' => $this->session->userdata('id'),
        'product_id' => $this->input->post('product_id'),
        'rating' => $this->input->post('rating'),
        'review' => $this->input->post('review')
      );
      if ($this->ReviewModel->createReview($data)) {
        echo json_encode(array('success' => true));
      } else {
        echo json_encode(array('error' => true));
      }
    }
  }

}


// ReviewModel.php

<?php
defined('BASEPATH') or exit('No direct script access allowed');

class ReviewModel extends CI_Model {

  public function getReviews() {
    $this->db->select('*');
    $this->db->from('reviews');
    return $this->db->get()->result();
  }

  public function createReview($data) {
    return $this->db->insert('reviews', $data);
  }
}


// controller function that loads the ReviewController
function create_review() {
  $this->load->controller('ReviewController');
  $review_data = array(
    'user_id' => 1,
    'product_id' => 1,
    'rating' => 5,
    'review' => 'Great product!'
  );
  echo json_encode($this->ReviewController->create($review_data));
}


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

// Connect to database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to display reviews
function displayReviews() {
  global $conn;
  
  // Query to retrieve reviews from database
  $query = "SELECT * FROM reviews ORDER BY created_at DESC";
  $result = $conn->query($query);
  
  if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
      echo "<p>" . $row["review"] . "</p>";
      echo "<small>Rating: " . $row["rating"] . "/5</small><br>";
      echo "<small>Posted by User ID " . $row["user_id"] . "</small><br>";
    }
  } else {
    echo "No reviews yet!";
  }
}

// Function to add a new review
function addReview($review, $rating) {
  global $conn;
  
  // Insert new review into database
  $query = "INSERT INTO reviews (review, rating) VALUES ('$review', '$rating')";
  if ($conn->query($query)) {
    echo "Review added successfully!";
  } else {
    echo "Error adding review: " . $conn->error;
  }
}

// Display form to add a new review
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <label for="review">Write your review:</label>
  <textarea id="review" name="review"></textarea><br>
  <label for="rating">Rating (1-5):</label>
  <input type="number" id="rating" name="rating" min="1" max="5"><br>
  <button type="submit" name="submit">Submit Review</button>
</form>

<?php
if (isset($_POST['submit'])) {
  addReview($_POST['review'], $_POST['rating']);
}

displayReviews();

// Close database connection
$conn->close();
?>


// app/Models/UserReview.php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class UserReview extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'product_id',
        'review_text',
        'rating',
        'created_at',
        'updated_at'
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function product()
    {
        return $this->belongsTo(Product::class);
    }
}


// app/Http/Controllers/UserReviewController.php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\UserReview;

class UserReviewController extends Controller
{
    public function index(Request $request)
    {
        // Retrieve all user reviews, including pagination and filtering
        $userReviews = UserReview::with('user', 'product')->paginate(10);

        return view('user_reviews.index', compact('userReviews'));
    }

    public function create()
    {
        // Display form to submit new review
        return view('user_reviews.create');
    }

    public function store(Request $request)
    {
        // Validate and save the new review
        $validatedData = $request->validate([
            'review_text' => 'required',
            'rating' => 'required|numeric|min:1|max:5'
        ]);

        UserReview::create($validatedData);

        return redirect()->route('user_reviews.index')->withSuccess('Review submitted successfully');
    }

    public function show(UserReview $userReview)
    {
        // Display a specific review
        return view('user_reviews.show', compact('userReview'));
    }

    public function edit(UserReview $userReview)
    {
        // Display form to edit an existing review
        return view('user_reviews.edit', compact('userReview'));
    }

    public function update(Request $request, UserReview $userReview)
    {
        // Validate and update the existing review
        $validatedData = $request->validate([
            'review_text' => 'required',
            'rating' => 'required|numeric|min:1|max:5'
        ]);

        $userReview->update($validatedData);

        return redirect()->route('user_reviews.index')->withSuccess('Review updated successfully');
    }

    public function destroy(UserReview $userReview)
    {
        // Delete the review
        $userReview->delete();

        return redirect()->route('user_reviews.index')->withSuccess('Review deleted successfully');
    }
}


// routes/web.php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\UserReviewController;

Route::get('/user-reviews', [UserReviewController::class, 'index'])->name('user_reviews.index');
Route::get('/user-reviews/create', [UserReviewController::class, 'create'])->name('user_reviews.create');
Route::post('/user-reviews/store', [UserReviewController::class, 'store'])->name('user_reviews.store');
Route::get('/user-reviews/{userReview}', [UserReviewController::class, 'show'])->name('user_reviews.show');
Route::get('/user-reviews/{userReview}/edit', [UserReviewController::class, 'edit'])->name('user_reviews.edit');
Route::put('/user-reviews/{userReview}/update', [UserReviewController::class, 'update'])->name('user_reviews.update');
Route::delete('/user-reviews/{userReview}', [UserReviewController::class, 'destroy'])->name('user_reviews.destroy');


function createUserReview($reviewData) {
  // Validate input data
  if (empty($reviewData['product_id']) || empty($reviewData['user_id']) || empty($reviewData['rating']) || empty($reviewData['comment'])) {
    throw new Exception('Invalid review data');
  }

  // Connect to database
  $db = connectToDatabase();

  // Check if product exists in database
  $productExists = checkProductInDatabase($db, $reviewData['product_id']);

  if (!$productExists) {
    throw new Exception('Product not found');
  }

  // Insert review into database
  $query = "INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':product_id', $reviewData['product_id']);
  $stmt->bindParam(':user_id', $reviewData['user_id']);
  $stmt->bindParam(':rating', $reviewData['rating']);
  $stmt->bindParam(':comment', $reviewData['comment']);
  $stmt->execute();

  // Return review ID
  return $db->lastInsertId();
}


$reviewData = array(
  'product_id' => 123,
  'user_id' => 456,
  'rating' => 5,
  'comment' => 'Great product!'
);

try {
  $reviewID = createUserReview($reviewData);
  echo "Review created with ID: $reviewID";
} catch (Exception $e) {
  echo "Error creating review: " . $e->getMessage();
}


class Review {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function submitReview($productId, $userId, $rating, $comment) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)");
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':user_id', $userId);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error submitting review: " . $e->getMessage();
            return false;
        }
    }

    public function getReviews($productId) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error retrieving reviews: " . $e->getMessage();
            return array();
        }
    }

    public function getAverageRating($productId) {
        try {
            $stmt = $this->db->prepare("SELECT AVG(rating) FROM reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();
            return $stmt->fetchColumn();
        } catch (PDOException $e) {
            echo "Error retrieving average rating: " . $e->getMessage();
            return 0;
        }
    }
}


class ReviewController {
    private $model;

    public function __construct($model) {
        $this->model = $model;
    }

    public function submitReview() {
        if ($_SERVER['REQUEST_METHOD'] == 'POST') {
            $productId = $_POST['product_id'];
            $userId = $_POST['user_id'];
            $rating = $_POST['rating'];
            $comment = $_POST['comment'];

            if ($this->model->submitReview($productId, $userId, $rating, $comment)) {
                echo "Review submitted successfully!";
            } else {
                echo "Error submitting review.";
            }
        }
    }

    public function getReviews() {
        if ($_SERVER['REQUEST_METHOD'] == 'GET') {
            $productId = $_GET['product_id'];
            $reviews = $this->model->getReviews($productId);
            foreach ($reviews as $review) {
                echo "Rating: " . $review['rating'] . ", Comment: " . $review['comment'] . "<br>";
            }
        }
    }

    public function getAverageRating() {
        if ($_SERVER['REQUEST_METHOD'] == 'GET') {
            $productId = $_GET['product_id'];
            $averageRating = $this->model->getAverageRating($productId);
            echo "Average rating: " . $averageRating;
        }
    }
}


require_once('review.model.php');
require_once('review.controller.php');

$db = new PDO('mysql:host=localhost;dbname=mydb', 'username', 'password');

$model = new Review($db);
$controller = new ReviewController($model);

if (isset($_GET['action'])) {
    $controller->{$controller->getAction()}();
}

function getAction() {
    switch ($_GET['action']) {
        case 'submit-review':
            return 'submitReview';
        case 'get-reviews':
            return 'getReviews';
        case 'average-rating':
            return 'getAverageRating';
        default:
            return 'index';
    }
}


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'root';
$password = '';

// Create database connection
$conn = new mysqli($host, $username, $password, $dbname);

// Check if the connection was successful
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

class ReviewSystem {

    private $conn;

    // Initialize a new review system instance with a database connection.
    public function __construct($conn) {
        $this->conn = $conn;
    }

    // Submit a new review
    public function submit_review($product_id, $user_name, $review_text) {
        if ($stmt = $this->conn->prepare("INSERT INTO reviews (product_id, user_name, review_text) VALUES (?, ?, ?)")) {

            // Bind parameters to the prepared statement.
            $stmt->bind_param("sss", $product_id, $user_name, $review_text);

            // Execute the statement
            if ($stmt->execute()) {
                echo "Review submitted successfully!";
            } else {
                echo "Failed to submit review";
            }

        } else {
            echo "Error preparing the insert statement";
        }
    }

    // Get all reviews for a product.
    public function get_reviews_by_product($product_id) {
        $reviews = array();
        if ($stmt = $this->conn->prepare("SELECT * FROM reviews WHERE product_id=?")) {

            // Bind parameters to the prepared statement
            $stmt->bind_param("s", $product_id);

            // Execute the query and store results in an array.
            if ($stmt->execute()) {
                $result = $stmt->get_result();
                while($row = $result->fetch_assoc()) {
                    $reviews[] = $row;
                }
            } else {
                echo "Error executing the query";
            }

        } else {
            echo "Error preparing the select statement for product reviews";
        }
        return $reviews;
    }

    // Get all reviews by a user
    public function get_reviews_by_user($user_name) {
        $reviews = array();
        if ($stmt = $this->conn->prepare("SELECT * FROM reviews WHERE user_name=?")) {

            // Bind parameters to the prepared statement.
            $stmt->bind_param("s", $user_name);

            // Execute the query and store results in an array.
            if ($stmt->execute()) {
                $result = $stmt->get_result();
                while($row = $result->fetch_assoc()) {
                    $reviews[] = $row;
                }
            } else {
                echo "Error executing the query";
            }

        } else {
            echo "Error preparing the select statement for user reviews";
        }
        return $reviews;
    }
}

// Create a new review system instance with our database connection.
$review_system = new ReviewSystem($conn);

// Example usage:
// Submit a new review
$user_name = 'John Doe';
$product_id = 1;
$review_text = "This product is amazing!";
$review_system->submit_review($product_id, $user_name, $review_text);

// Get all reviews for a product.
$product_id = 1;
$reviews = $review_system->get_reviews_by_product($product_id);
print_r($reviews);

// Get all reviews by a user
$user_name = 'John Doe';
$reviews = $review_system->get_reviews_by_user($user_name);
print_r($reviews);

?>


<?php

// Configuration settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to the database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function get_reviews($product_id, $limit = 10) {
    global $conn;
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id' ORDER BY id DESC LIMIT $limit";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "<div class='review'>";
            echo "<p>" . $row['username'] . " gave this product " . $row['rating'] . "/5 stars</p>";
            echo "<p>" . $row['review_text'] . "</p>";
            echo "</div>";
        }
    } else {
        echo "No reviews found for this product.";
    }
}

function add_review($product_id, $username, $review_text, $rating) {
    global $conn;
    $query = "INSERT INTO reviews (user_id, product_id, review_text, rating)
                VALUES ('" . get_user_id($username) . "', '$product_id', '$review_text', '$rating')";
    if ($conn->query($query)) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review: " . $conn->error;
    }
}

function get_user_id($username) {
    global $conn;
    $query = "SELECT id FROM users WHERE username = '$username'";
    $result = $conn->query($query);
    if ($result->num_rows > 0) {
        return $result->fetch_assoc()['id'];
    } else {
        echo "User not found.";
        return false;
    }
}

// Example usage:
$product_id = '123'; // Replace with the actual product ID
get_reviews($product_id);

$username = 'johndoe';
$review_text = 'This is a great product!';
$rating = 5;

add_review($product_id, $username, $review_text, $rating);


class ReviewController {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  }

  public function addReview($user_id, $product_id, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
      $stmt->execute([$user_id, $product_id, $rating, $review]);
      return true;
    } catch(PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
      return false;
    }
  }

  public function getReviews($product_id = null, $limit = 10, $offset = 0) {
    try {
      if ($product_id !== null) {
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ? ORDER BY created_at DESC LIMIT ?, ?");
        $stmt->execute([$product_id, $offset, $limit]);
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
      } else {
        $stmt = $this->db->prepare("SELECT * FROM reviews ORDER BY created_at DESC LIMIT ?, ?");
        $stmt->execute([$offset, $limit]);
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
      }
    } catch(PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
      return array();
    }
  }

  public function getReview($review_id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = ?");
      $stmt->execute([$review_id]);
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch(PDOException $e) {
      echo "Error getting review: " . $e->getMessage();
      return array();
    }
  }

  public function deleteReview($review_id) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
      $stmt->execute([$review_id]);
      return true;
    } catch(PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


$review = new ReviewController();

// Add a review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review_text = "This product is great!";
$success = $review->addReview($user_id, $product_id, $rating, $review_text);
if ($success) {
  echo "Review added successfully!";
} else {
  echo "Error adding review.";
}

// Get reviews for a specific product
$product_id = 1;
$limit = 10;
$offset = 0;
$reviews = $review->getReviews($product_id, $limit, $offset);
foreach ($reviews as $review) {
  echo "User ID: " . $review['user_id'] . ", Product ID: " . $review['product_id'] . ", Rating: " . $review['rating'] . ", Review: " . $review['review'];
}

// Get a specific review
$review_id = 1;
$review_data = $review->getReview($review_id);
echo "Review ID: " . $review_data['id'] . ", User ID: " . $review_data['user_id'] . ", Product ID: " . $review_data['product_id'] . ", Rating: " . $review_data['rating'] . ", Review: " . $review_data['review'];

// Delete a review
$review_id = 1;
$success = $review->deleteReview($review_id);
if ($success) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review.";
}


// db.php (database connection file)
$dsn = 'mysql:host=localhost;dbname=review_system';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

function createUserReview($user_id, $product_id, $review, $rating)
{
    global $pdo;
    $stmt = $pdo->prepare('INSERT INTO reviews (user_id, product_id, review, rating) VALUES (:user_id, :product_id, :review, :rating)');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':rating', $rating);
    return $stmt->execute();
}

function getReviews($product_id)
{
    global $pdo;
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll();
}

function updateReview($review_id, $review)
{
    global $pdo;
    $stmt = $pdo->prepare('UPDATE reviews SET review = :review WHERE id = :review_id');
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':review_id', $review_id);
    return $stmt->execute();
}

function deleteReview($review_id)
{
    global $pdo;
    $stmt = $pdo->prepare('DELETE FROM reviews WHERE id = :review_id');
    $stmt->bindParam(':review_id', $review_id);
    return $stmt->execute();
}


// Create a new review for product 1 by user 1 with rating 5 and review "Great product!"
createUserReview(1, 1, 'Great product!', 5);

// Get all reviews for product 1
$reviews = getReviews(1);
print_r($reviews);

// Update the first review to have a new text
updateReview($reviews[0]['id'], 'Excellent product!');

// Delete the first review
deleteReview($reviews[0]['id']);


// dbconfig.php (database connection settings)
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "review_db";

// Connect to database
$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Review class
class Review {
    private $id;
    private $user_id;
    private $product_id;
    private $rating;
    private $comment;

    public function __construct($user_id, $product_id, $rating, $comment) {
        $this->user_id = $user_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public static function createReview($review) {
        global $conn;

        // Insert review into database
        $sql = "INSERT INTO reviews (user_id, product_id, rating, comment)
                VALUES (?, ?, ?, ?)";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("iis", $review->getUser_id(), $review->getProduct_id(), $review->getRating(), $review->getComment());
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    }

    public static function getReviews($product_id) {
        global $conn;

        // Retrieve reviews for a specific product
        $sql = "SELECT * FROM reviews WHERE product_id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("i", $product_id);
        $stmt->execute();
        $result = $stmt->get_result();

        $reviews = array();
        while ($row = $result->fetch_assoc()) {
            $review = new Review(
                $row["user_id"],
                $row["product_id"],
                $row["rating"],
                $row["comment"]
            );
            $reviews[] = $review;
        }

        return $reviews;
    }
}

// Example usage
$review1 = new Review(1, 1, 5, "Great product!");
if (Review::createReview($review1)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

$reviews = Review::getReviews(1);
foreach ($reviews as $review) {
    echo "User: " . $review->getUser_id() . ", Rating: " . $review->getRating() . ", Comment: " . $review->getComment() . "
";
}


<?php

// Database connection settings
$dsn = 'mysql:host=localhost;dbname=your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
  $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
  echo 'Connection failed: ' . $e->getMessage();
}

// Function to add a new review
function add_review($product_name, $rating, $review, $user_id) {
  global $pdo;
  
  // Insert the review into the database
  $stmt = $pdo->prepare('INSERT INTO reviews (product_name, rating, review, user_id) VALUES (:product_name, :rating, :review, :user_id)');
  $stmt->bindParam(':product_name', $product_name);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  $stmt->bindParam(':user_id', $user_id);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to get all reviews for a product
function get_reviews($product_name) {
  global $pdo;
  
  // Select the reviews from the database
  $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_name = :product_name');
  $stmt->bindParam(':product_name', $product_name);
  
  if ($stmt->execute()) {
    return $stmt->fetchAll();
  } else {
    return false;
  }
}

// Function to get all reviews for a user
function get_user_reviews($user_id) {
  global $pdo;
  
  // Select the reviews from the database
  $stmt = $pdo->prepare('SELECT * FROM reviews WHERE user_id = :user_id');
  $stmt->bindParam(':user_id', $user_id);
  
  if ($stmt->execute()) {
    return $stmt->fetchAll();
  } else {
    return false;
  }
}

// Function to get a single review
function get_review($id) {
  global $pdo;
  
  // Select the review from the database
  $stmt = $pdo->prepare('SELECT * FROM reviews WHERE id = :id');
  $stmt->bindParam(':id', $id);
  
  if ($stmt->execute()) {
    return $stmt->fetch();
  } else {
    return false;
  }
}

// Function to update a review
function update_review($id, $product_name, $rating, $review) {
  global $pdo;
  
  // Update the review in the database
  $stmt = $pdo->prepare('UPDATE reviews SET product_name = :product_name, rating = :rating, review = :review WHERE id = :id');
  $stmt->bindParam(':product_name', $product_name);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  $stmt->bindParam(':id', $id);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to delete a review
function delete_review($id) {
  global $pdo;
  
  // Delete the review from the database
  $stmt = $pdo->prepare('DELETE FROM reviews WHERE id = :id');
  $stmt->bindParam(':id', $id);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

?>


// Add a new review
$product_name = 'Example Product';
$rating = 5;
$review = 'This product is great!';
$user_id = 1;

if (add_review($product_name, $rating, $review, $user_id)) {
  echo 'Review added successfully!';
} else {
  echo 'Failed to add review.';
}

// Get all reviews for a product
$product_name = 'Example Product';

$reviews = get_reviews($product_name);

if ($reviews) {
  foreach ($reviews as $review) {
    echo 'Product: ' . $review['product_name'] . '<br>';
    echo 'Rating: ' . $review['rating'] . '/5<br>';
    echo 'Review: ' . $review['review'] . '<br><br>';
  }
} else {
  echo 'No reviews found for this product.';
}

// Get all reviews for a user
$user_id = 1;

$reviews = get_user_reviews($user_id);

if ($reviews) {
  foreach ($reviews as $review) {
    echo 'Product: ' . $review['product_name'] . '<br>';
    echo 'Rating: ' . $review['rating'] . '/5<br>';
    echo 'Review: ' . $review['review'] . '<br><br>';
  }
} else {
  echo 'No reviews found for this user.';
}

// Get a single review
$id = 1;

$review = get_review($id);

if ($review) {
  echo 'Product: ' . $review['product_name'] . '<br>';
  echo 'Rating: ' . $review['rating'] . '/5<br>';
  echo 'Review: ' . $review['review'] . '<br><br>';
} else {
  echo 'No review found with this ID.';
}

// Update a review
$id = 1;
$product_name = 'Updated Product';
$rating = 4;
$review = 'This product is okay...';

if (update_review($id, $product_name, $rating, $review)) {
  echo 'Review updated successfully!';
} else {
  echo 'Failed to update review.';
}

// Delete a review
$id = 1;

if (delete_review($id)) {
  echo 'Review deleted successfully!';
} else {
  echo 'Failed to delete review.';
}


class Review {
    private $db;

    public function __construct() {
        require_once 'config/database.php';
        $this->db = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USER, DB_PASSWORD);
    }

    // Create a review
    public function createReview($product_id, $user_id, $rating, $review) {
        try {
            $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':user_id', $user_id);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':review', $review);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error creating review: " . $e->getMessage();
            return false;
        }
    }

    // Get all reviews for a product
    public function getReviews($product_id) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $product_id);
            return $stmt->execute()->fetchAll();
        } catch (PDOException $e) {
            echo "Error getting reviews: " . $e->getMessage();
            return false;
        }
    }

    // Get a single review by id
    public function getReview($id) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :id");
            $stmt->bindParam(':id', $id);
            return $stmt->execute()->fetch();
        } catch (PDOException $e) {
            echo "Error getting review: " . $e->getMessage();
            return false;
        }
    }

    // Update a review
    public function updateReview($id, $rating, $review) {
        try {
            $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
            $stmt->bindParam(':id', $id);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':review', $review);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error updating review: " . $e->getMessage();
            return false;
        }
    }

    // Delete a review
    public function deleteReview($id) {
        try {
            $this->db->prepare("DELETE FROM reviews WHERE id = :id")->bindParam(':id', $id)->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error deleting review: " . $e->getMessage();
            return false;
        }
    }
}


require_once 'review.php';

$review = new Review();

// Create a review
$product_id = 1; // id of the product
$user_id = 1; // id of the user
$rating = 5;
$reviewText = "This is a great product!";
if ($review->createReview($product_id, $user_id, $rating, $reviewText)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review";
}

// Get all reviews for a product
$product_reviews = $review->getReviews(1);
print_r($product_reviews);

// Get a single review by id
$single_review = $review->getReview(1);
var_dump($single_review);

// Update a review
if ($review->updateReview(1, 4, "This is an updated review!")) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review";
}

// Delete a review
if ($review->deleteReview(1)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review";
}


CREATE TABLE reviews (
  id INT PRIMARY KEY AUTO_INCREMENT,
  title VARCHAR(255),
  content TEXT,
  rating TINYINT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  user_id INT,
  FOREIGN KEY (user_id) REFERENCES users(id)
);


<?php

$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

?>


<?php

function create_review($title, $content, $rating, $user_id) {
  global $conn;
  
  $sql = "INSERT INTO reviews (title, content, rating, user_id) VALUES ('$title', '$content', '$rating', '$user_id')";
  if ($conn->query($sql)) {
    return true;
  } else {
    return false;
  }
}

function get_reviews() {
  global $conn;
  
  $sql = "SELECT * FROM reviews ORDER BY id DESC";
  $result = $conn->query($sql);
  while ($row = $result->fetch_assoc()) {
    echo "
      <div class='review'>
        <h2>$row[title]</h2>
        <p>$row[content]</p>
        <p>Rating: $row[rating] / 5</p>
        <p>Created at: $row[created_at]</p>
      </div>
    ";
  }
}

function update_review($id, $new_title, $new_content, $new_rating) {
  global $conn;
  
  $sql = "UPDATE reviews SET title='$new_title', content='$new_content', rating='$new_rating' WHERE id=$id";
  if ($conn->query($sql)) {
    return true;
  } else {
    return false;
  }
}

function delete_review($id) {
  global $conn;
  
  $sql = "DELETE FROM reviews WHERE id=$id";
  if ($conn->query($sql)) {
    return true;
  } else {
    return false;
  }
}

?>


<?php

require_once 'db_connection.php';
require_once 'functions.php';

?>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Reviews</title>
  <style>
    .review {
      border: 1px solid #ccc;
      padding: 20px;
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

<h1>Reviews</h1>

<form action="" method="post">
  <input type="text" name="title" placeholder="Title">
  <textarea name="content"></textarea>
  <select name="rating">
    <option value="1">1/5</option>
    <option value="2">2/5</option>
    <option value="3">3/5</option>
    <option value="4">4/5</option>
    <option value="5">5/5</option>
  </select>
  <input type="submit" name="submit" value="Create Review">
</form>

<?php
if (isset($_POST['submit'])) {
  create_review($_POST['title'], $_POST['content'], $_POST['rating'], $_GET['user_id']);
}
?>

<h2>All Reviews:</h2>
<div class="reviews-container">
  <?php get_reviews(); ?>
</div>

<h2>Update Review:</h2>
<form action="" method="post">
  <input type="text" name="new_title" placeholder="New Title">
  <textarea name="new_content"></textarea>
  <select name="new_rating">
    <option value="1">1/5</option>
    <option value="2">2/5</option>
    <option value="3">3/5</option>
    <option value="4">4/5</option>
    <option value="5">5/5</option>
  </select>
  <input type="hidden" name="id" value="<?php echo $_GET['id']; ?>">
  <input type="submit" name="update_submit" value="Update Review">
</form>

<?php
if (isset($_POST['update_submit'])) {
  update_review($_POST['id'], $_POST['new_title'], $_POST['new_content'], $_POST['new_rating']);
}
?>

<h2>Delete Review:</h2>
<form action="" method="post">
  <input type="hidden" name="delete_id" value="<?php echo $_GET['id']; ?>">
  <input type="submit" name="delete_submit" value="Delete Review">
</form>

<?php
if (isset($_POST['delete_submit'])) {
  delete_review($_POST['delete_id']);
}
?>

</body>
</html>


// models/Review.php

class Review {
    private $db;

    function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
    }

    public function submit_review($product_id, $user_id, $rating, $review_text) {
        $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, review_text)
                                    VALUES (:product_id, :user_id, :rating, :review_text)");
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review_text', $review_text);

        return $stmt->execute();
    }

    public function get_reviews_for_product($product_id) {
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public function get_reviews_for_user($user_id) {
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
        $stmt->bindParam(':user_id', $user_id);
        $stmt->execute();

        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public function calculate_average_rating($product_id) {
        $stmt = $this->db->prepare("SELECT AVG(rating) FROM reviews WHERE product_id = :product_id");
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();

        return $stmt->fetchColumn();
    }
}


// controllers/ReviewController.php

class ReviewController {
    private $review_model;

    function __construct() {
        $this->review_model = new Review();
    }

    public function submit_review($product_id, $user_id, $rating, $review_text) {
        return $this->review_model->submit_review($product_id, $user_id, $rating, $review_text);
    }

    public function get_reviews_for_product($product_id) {
        return $this->review_model->get_reviews_for_product($product_id);
    }

    public function get_reviews_for_user($user_id) {
        return $this->review_model->get_reviews_for_user($user_id);
    }

    public function calculate_average_rating($product_id) {
        return $this->review_model->calculate_average_rating($product_id);
    }
}


// services/ReviewService.php

class ReviewService {
    private $review_controller;

    function __construct() {
        $this->review_controller = new ReviewController();
    }

    public function submit_review($product_id, $user_id, $rating, $review_text) {
        return $this->review_controller->submit_review($product_id, $user_id, $rating, $review_text);
    }

    public function get_reviews_for_product($product_id) {
        return $this->review_controller->get_reviews_for_product($product_id);
    }

    public function get_reviews_for_user($user_id) {
        return $this->review_controller->get_reviews_for_user($user_id);
    }

    public function calculate_average_rating($product_id) {
        return $this->review_controller->calculate_average_rating($product_id);
    }
}


<!-- views/review.php -->

<?php require_once 'services/ReviewService.php'; ?>

<!DOCTYPE html>
<html>
<head>
    <title>Reviews</title>
</head>
<body>

    <?php if (isset($_POST['submit_review'])): ?>
        <?php $review_service = new ReviewService(); ?>
        <?php $result = $review_service->submit_review($_POST['product_id'], $_SESSION['user_id'], $_POST['rating'], $_POST['review_text']); ?>

        <?php if ($result): ?>
            <p>Review submitted successfully!</p>
        <?php else: ?>
            <p>Error submitting review.</p>
        <?php endif; ?>
    <?php endif; ?>

    <h1>Reviews for Product <?= $product_id ?></h1>

    <?php foreach ($review_service->get_reviews_for_product($product_id) as $review): ?>
        <div>
            <h2><?= $review['user_name'] ?> (<?= $review['rating'] ?>/5)</h2>
            <p><?= $review['review_text'] ?></p>
        </div>
    <?php endforeach; ?>

</body>
</html>


// config.php (database connection settings)
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'database';

// connect to database
$mysqli = new mysqli($db_host, $db_username, $db_password, $db_name);

function get_user_reviews($user_id) {
  // retrieve user's reviews
  $query = "SELECT * FROM reviews WHERE user_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("i", $user_id);
  $stmt->execute();
  $reviews = array();
  while ($row = $stmt->get_result()->fetch_assoc()) {
    $reviews[] = array(
      'id' => $row['id'],
      'product_id' => $row['product_id'],
      'rating' => $row['rating'],
      'comment' => $row['comment']
    );
  }
  return $reviews;
}

function add_review($user_id, $product_id, $rating, $comment) {
  // insert new review
  $query = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("iiss", $user_id, $product_id, $rating, $comment);
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

function get_average_rating($product_id) {
  // retrieve average rating for product
  $query = "SELECT AVG(rating) AS avg_rating FROM reviews WHERE product_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  return $stmt->get_result()->fetch_assoc()['avg_rating'];
}

// example usage:
$user_id = 1;
$reviews = get_user_reviews($user_id);
foreach ($reviews as $review) {
  echo "Review: {$review['comment']} ({$review['rating']}/5)
";
}


<?php

// Include database connection settings
include_once 'config.php';

// Function to get user reviews
function getUserReviews($user_id) {
  global $pdo;
  try {
    $stmt = $pdo->prepare("SELECT r.id, r.rating, r.comment, p.name AS product_name 
                          FROM reviews r INNER JOIN products p ON r.product_id = p.id 
                          WHERE r.user_id = :id");
    $stmt->bindParam(':id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo "Error fetching user reviews: " . $e->getMessage();
  }
}

// Function to get product reviews
function getProductReviews($product_id) {
  global $pdo;
  try {
    $stmt = $pdo->prepare("SELECT r.id, r.rating, r.comment, u.username AS user_name 
                          FROM reviews r INNER JOIN users u ON r.user_id = u.id 
                          WHERE r.product_id = :id");
    $stmt->bindParam(':id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo "Error fetching product reviews: " . $e->getMessage();
  }
}

// Function to create a new review
function createReview($user_id, $product_id, $rating, $comment) {
  global $pdo;
  try {
    $stmt = $pdo->prepare("INSERT INTO reviews (user_id, product_id, rating, comment)
                          VALUES (:uid, :pid, :rate, :com)");
    $stmt->bindParam(':uid', $user_id);
    $stmt->bindParam(':pid', $product_id);
    $stmt->bindParam(':rate', $rating);
    $stmt->bindParam(':com', $comment);
    return $stmt->execute();
  } catch (PDOException $e) {
    echo "Error creating review: " . $e->getMessage();
  }
}

// Authentication function
function authenticateUser($username, $password) {
  global $pdo;
  try {
    $stmt = $pdo->prepare("SELECT id FROM users WHERE username = :un AND password = :pw");
    $stmt->bindParam(':un', $username);
    $stmt->bindParam(':pw', $password);
    $stmt->execute();
    return $stmt->fetchColumn() !== false;
  } catch (PDOException $e) {
    echo "Error authenticating user: " . $e->getMessage();
  }
}

// Example usage
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  if (isset($_POST['username']) && isset($_POST['password'])) {
    // Authenticate user
    if (authenticateUser($_POST['username'], $_POST['password'])) {
      // Get reviews for the authenticated user
      $user_id = $_SESSION['user_id'];
      $reviews = getUserReviews($user_id);
      echo json_encode($reviews);

      // Create a new review
      $createReviewResult = createReview($_SESSION['user_id'], 1, 5, 'Good product!');
      if ($createReviewResult) {
        echo "Review created successfully!";
      }
    } else {
      echo "Authentication failed.";
    }
  }
}

// Include HTML template for user reviews page
include_once 'reviews-template.php';


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Reviews Page</title>
</head>
<body>
  <?php if (isset($_SESSION['user_id'])) : ?>
    <!-- Display reviews for the authenticated user -->
    <h2>My Reviews:</h2>
    <ul>
      <?php foreach ($reviews as $review) : ?>
        <li>
          Product: <?= $review['product_name'] ?><br />
          Rating: <?= $review['rating'] ?>/5<br />
          Comment: <?= $review['comment'] ?><br />
        </li>
      <?php endforeach; ?>
    </ul>

    <!-- Create a new review form -->
    <h2>Create a New Review:</h2>
    <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
      <input type="hidden" name="username" value="<?php echo $_SESSION['username']; ?>">
      <label for="product_id">Product ID:</label>
      <input type="number" id="product_id" name="product_id"><br><br>
      <label for="rating">Rating (1-5):</label>
      <input type="number" id="rating" name="rating" min="1" max="5"><br><br>
      <label for="comment">Comment:</label>
      <textarea id="comment" name="comment"></textarea><br><br>
      <input type="submit" value="Submit">
    </form>

  <?php else : ?>
    <!-- Display login form -->
    <h2>Login:</h2>
    <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
      <label for="username">Username:</label>
      <input type="text" id="username" name="username"><br><br>
      <label for="password">Password:</label>
      <input type="password" id="password" name="password"><br><br>
      <input type="submit" value="Login">
    </form>

  <?php endif; ?>
</body>
</html>


function create_review($product_id, $user_id, $rating, $review) {
  global $db;

  // Prepare query
  $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, rating, review)
                        VALUES (:product_id, :user_id, :rating, :review)");

  try {
    // Bind parameters and execute
    $stmt->bindParam(":product_id", $product_id);
    $stmt->bindParam(":user_id", $user_id);
    $stmt->bindParam(":rating", $rating);
    $stmt->bindParam(":review", $review);

    $stmt->execute();

    return $db->lastInsertId();
  } catch (PDOException $e) {
    // Handle error
    echo "Error creating review: " . $e->getMessage();
    return null;
  }
}


function get_reviews($product_id, $limit = null, $offset = null) {
  global $db;

  // Prepare query
  $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");

  try {
    // Bind parameter and execute
    $stmt->bindParam(":product_id", $product_id);
    $stmt->execute();

    if ($limit && $offset) {
      // Retrieve limited number of records with offset
      $reviews = array();
      while ($row = $stmt->fetch()) {
        $reviews[] = array(
          'id' => $row['id'],
          'user_id' => $row['user_id'],
          'rating' => $row['rating'],
          'review' => $row['review']
        );
      }

      return array_slice($reviews, $offset, $limit);
    } else {
      // Retrieve all records
      $reviews = array();
      while ($row = $stmt->fetch()) {
        $reviews[] = array(
          'id' => $row['id'],
          'user_id' => $row['user_id'],
          'rating' => $row['rating'],
          'review' => $row['review']
        );
      }

      return $reviews;
    }
  } catch (PDOException $e) {
    // Handle error
    echo "Error retrieving reviews: " . $e->getMessage();
    return null;
  }
}


function get_user_reviews($user_id, $limit = null, $offset = null) {
  global $db;

  // Prepare query
  $stmt = $db->prepare("SELECT * FROM reviews WHERE user_id = :user_id");

  try {
    // Bind parameter and execute
    $stmt->bindParam(":user_id", $user_id);
    $stmt->execute();

    if ($limit && $offset) {
      // Retrieve limited number of records with offset
      $reviews = array();
      while ($row = $stmt->fetch()) {
        $reviews[] = array(
          'id' => $row['id'],
          'product_id' => $row['product_id'],
          'rating' => $row['rating'],
          'review' => $row['review']
        );
      }

      return array_slice($reviews, $offset, $limit);
    } else {
      // Retrieve all records
      $reviews = array();
      while ($row = $stmt->fetch()) {
        $reviews[] = array(
          'id' => $row['id'],
          'product_id' => $row['product_id'],
          'rating' => $row['rating'],
          'review' => $row['review']
        );
      }

      return $reviews;
    }
  } catch (PDOException $e) {
    // Handle error
    echo "Error retrieving user reviews: " . $e->getMessage();
    return null;
  }
}


// Create a new review
$product_id = 123;
$user_id = 456;
$rating = 4;
$review = 'Great product!';

$new_review_id = create_review($product_id, $user_id, $rating, $review);
echo "New review ID: $new_review_id
";

// Get all reviews for a product
$product_id = 123;
$reviews = get_reviews($product_id);
print_r($reviews);

// Get user's own reviews
$user_id = 456;
$reviews = get_user_reviews($user_id);
print_r($reviews);


class Review {
  private $id;
  private $reviewText;
  private $rating;
  private $productId;

  public function __construct($id = null, $reviewText = null, $rating = null, $productId = null) {
    $this->id = $id;
    $this->reviewText = $reviewText;
    $this->rating = $rating;
    $this->productId = $productId;
  }

  public function createReview($productId, $reviewText, $rating) {
    // Check if review already exists for product
    if ($this->getReviewByProductId($productId)) {
      throw new Exception("Review already exists for this product");
    }
    
    // Create new review
    $newReview = new Review(null, $reviewText, $rating, $productId);
    // Save review to database ( implementation omitted )
    return $newReview;
  }

  public function getReviews() {
    // Retrieve all reviews from database ( implementation omitted )
    return array();
  }

  public function getReviewByProductId($productId) {
    // Retrieve review for product from database ( implementation omitted )
    foreach ($this->getReviews() as $review) {
      if ($review->productId == $productId) {
        return $review;
      }
    }
    return null;
  }

  public function updateReview($id, $reviewText = null, $rating = null) {
    // Update review in database ( implementation omitted )
    return true; // Assume successful update
  }

  public function deleteReview($id) {
    // Delete review from database ( implementation omitted )
    return true; // Assume successful deletion
  }
}


$review = new Review();
$productId = '12345';
$reviewText = 'Great product!';
$rating = 5;

// Create a new review for the product
$newReview = $review->createReview($productId, $reviewText, $rating);

// Retrieve all reviews
$reviews = $review->getReviews();

// Retrieve review by product ID
$productReview = $review->getReviewByProductId($productId);

// Update an existing review
$result = $review->updateReview($newReview->id, 'Updated review text', 4);
print_r($result); // Output: true

// Delete a review
$result = $review->deleteReview($newReview->id);
print_r($result); // Output: true


<?php

// Connect to database
$conn = new mysqli('localhost', 'username', 'password', 'database');

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to create a new review
function create_review($user_id, $product_id, $rating, $review) {
  global $conn;
  
  $sql = "INSERT INTO reviews (user_id, product_id, rating, review)
          VALUES ('$user_id', '$product_id', '$rating', '$review')";
  
  if ($conn->query($sql) === TRUE) {
    return true;
  } else {
    return false;
  }
}

// Function to get all reviews
function get_reviews() {
  global $conn;
  
  $sql = "SELECT * FROM reviews";
  
  $result = $conn->query($sql);
  
  if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
      echo "User ID: " . $row['user_id'] . "<br>";
      echo "Product ID: " . $row['product_id'] . "<br>";
      echo "Rating: " . $row['rating'] . "<br>";
      echo "Review: " . $row['review'] . "<br><br>";
    }
  } else {
    echo "0 results";
  }
}

// Function to update a review
function update_review($id, $user_id, $product_id, $rating, $review) {
  global $conn;
  
  $sql = "UPDATE reviews SET user_id='$user_id', product_id='$product_id', rating='$rating', review='$review' WHERE id='$id'";
  
  if ($conn->query($sql) === TRUE) {
    return true;
  } else {
    return false;
  }
}

// Function to delete a review
function delete_review($id) {
  global $conn;
  
  $sql = "DELETE FROM reviews WHERE id='$id'";
  
  if ($conn->query($sql) === TRUE) {
    return true;
  } else {
    return false;
  }
}

?>


create_review(1, 2, 5, "This product is amazing!");
get_reviews();
update_review(1, 3, 4, 4, "I'm not too happy with this product.");
delete_review(1);


<?php

// Connect to database
$conn = mysqli_connect("localhost", "username", "password", "database");

// Check connection
if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

function createUser($name) {
  global $conn;
  // Prepare query
  $stmt = mysqli_prepare($conn, "INSERT INTO users (name) VALUES (?)");
  // Bind parameters
  mysqli_stmt_bind_param($stmt, "s", $name);
  // Execute query
  if (!mysqli_stmt_execute($stmt)) {
    echo "Error creating user: " . mysqli_error($conn);
  }
  // Get ID of newly created user
  $newUserId = mysqli_insert_id($conn);
  return $newUserId;
}

function createReview($userId, $content, $rating) {
  global $conn;
  // Prepare query
  $stmt = mysqli_prepare($conn, "INSERT INTO reviews (user_id, content, rating) VALUES (?, ?, ?)");
  // Bind parameters
  mysqli_stmt_bind_param($stmt, "isi", $userId, $content, $rating);
  // Execute query
  if (!mysqli_stmt_execute($stmt)) {
    echo "Error creating review: " . mysqli_error($conn);
  }
}

function getReviews() {
  global $conn;
  // Prepare query
  $stmt = mysqli_prepare($conn, "SELECT r.id, u.name, r.content, r.rating FROM reviews r JOIN users u ON r.user_id = u.id");
  // Execute query and fetch results
  if (!mysqli_stmt_execute($stmt)) {
    echo "Error fetching reviews: " . mysqli_error($conn);
  }
  $reviews = array();
  while ($row = mysqli_fetch_assoc($stmt)) {
    $reviews[] = $row;
  }
  return $reviews;
}

function updateReview($reviewId, $content, $rating) {
  global $conn;
  // Prepare query
  $stmt = mysqli_prepare($conn, "UPDATE reviews SET content = ?, rating = ? WHERE id = ?");
  // Bind parameters
  mysqli_stmt_bind_param($stmt, "sii", $content, $rating, $reviewId);
  // Execute query
  if (!mysqli_stmt_execute($stmt)) {
    echo "Error updating review: " . mysqli_error($conn);
  }
}

function deleteReview($reviewId) {
  global $conn;
  // Prepare query
  $stmt = mysqli_prepare($conn, "DELETE FROM reviews WHERE id = ?");
  // Bind parameter
  mysqli_stmt_bind_param($stmt, "i", $reviewId);
  // Execute query
  if (!mysqli_stmt_execute($stmt)) {
    echo "Error deleting review: " . mysqli_error($conn);
  }
}

?>


// Create new user
$newUserId = createUser("John Doe");

// Create new review for the newly created user
createReview($newUserId, "This is a great product!", 5);

// Get all reviews
$reviews = getReviews();

// Update an existing review
updateReview(1, "This is a decent product.", 3);

// Delete a review
deleteReview(2);


<?php

// Connect to database
$db = new mysqli('localhost', 'username', 'password', 'database');

// Function to create a new review
function add_review($product_id, $rating, $comment) {
  global $db;
  $query = "INSERT INTO reviews (product_id, rating, comment)
            VALUES ('$product_id', '$rating', '$comment')";
  mysqli_query($db, $query);
}

// Function to retrieve all reviews for a product
function get_reviews($product_id) {
  global $db;
  $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
  $result = mysqli_query($db, $query);
  return $result;
}

// Function to calculate average rating for a product
function avg_rating($product_id) {
  global $db;
  $query = "SELECT AVG(rating) AS average FROM reviews WHERE product_id = '$product_id'";
  $result = mysqli_query($db, $query);
  $row = mysqli_fetch_assoc($result);
  return isset($row['average']) ? $row['average'] : 0;
}

// Function to display review form
function display_review_form($product_id) {
  ?>
  <form action="" method="post">
    <label>Rating:</label>
    <select name="rating" required>
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="4">4</option>
      <option value="5">5</option>
    </select>
    <br>
    <label>Comment:</label>
    <textarea name="comment" required></textarea>
    <br>
    <input type="submit" name="submit" value="Submit Review">
  </form>
  <?php
}

// Function to display reviews for a product
function display_reviews($product_id) {
  $reviews = get_reviews($product_id);
  while ($row = mysqli_fetch_assoc($reviews)) {
    echo "Rating: $row[rating] stars";
    echo "<br>Comment: $row[comment]";
    echo "<hr>";
  }
}

// Check if user submitted review form
if (isset($_POST['submit'])) {
  add_review($_POST['product_id'], $_POST['rating'], $_POST['comment']);
  header('Location: ' . $_SERVER['PHP_SELF'] . '?success=true');
  exit;
}

?>


<?php include 'review.php'; ?>

<!DOCTYPE html>
<html>
<head>
  <title>Product Reviews</title>
</head>
<body>

  <?php if (isset($_GET['success'])): ?>
    <p>Review submitted successfully!</p>
  <?php endif; ?>

  <h1>Reviews for Product ID <?= $_GET['product_id'] ?></h1>

  <?php display_reviews($_GET['product_id']); ?>

  <?php display_review_form($_GET['product_id']); ?>

</body>
</html>


<?php
// Function to create a new review
function create_review($data) {
  global $db;
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
  $stmt = $db->prepare($query);
  $stmt->execute($data);
}

// Function to get all reviews for a user
function get_reviews_for_user($user_id) {
  global $db;
  $query = "SELECT * FROM reviews WHERE user_id = :user_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->execute();
  return $stmt->fetchAll();
}

// Function to get all reviews for a product
function get_reviews_for_product($product_id) {
  global $db;
  $query = "SELECT * FROM reviews WHERE product_id = :product_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  return $stmt->fetchAll();
}

// Function to update an existing review
function update_review($review_id, $data) {
  global $db;
  $query = "UPDATE reviews SET rating = :rating, review = :review WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':rating', $data['rating']);
  $stmt->bindParam(':review', $data['review']);
  $stmt->bindParam(':id', $review_id);
  $stmt->execute();
}

// Function to delete a review
function delete_review($review_id) {
  global $db;
  $query = "DELETE FROM reviews WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':id', $review_id);
  $stmt->execute();
}


// Create a new review
$data = array(
  'user_id' => 1,
  'product_id' => 2,
  'rating' => 5,
  'review' => 'Great product!'
);
create_review($data);

// Get all reviews for a user
$user_id = 1;
$reviews = get_reviews_for_user($user_id);
print_r($reviews);

// Update an existing review
$review_id = 1;
$data = array(
  'rating' => 4,
  'review' => 'Good product!'
);
update_review($review_id, $data);

// Delete a review
$review_id = 1;
delete_review($review_id);


// Connect to the database
$mysqli = new mysqli('localhost', 'username', 'password', 'database');

// Function to add a review
function add_review($user_id, $product_id, $rating, $comment) {
  $query = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('iiis', $user_id, $product_id, $rating, $comment);
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to view reviews for a product
function get_reviews_for_product($product_id) {
  $query = "SELECT * FROM reviews WHERE product_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('i', $product_id);
  $stmt->execute();
  return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
}

// Function to view reviews for a user
function get_reviews_for_user($user_id) {
  $query = "SELECT * FROM reviews WHERE user_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('i', $user_id);
  $stmt->execute();
  return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
}

// Function to edit a review
function edit_review($review_id, $rating, $comment) {
  $query = "UPDATE reviews SET rating = ?, comment = ? WHERE id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('iis', $rating, $comment, $review_id);
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to delete a review
function delete_review($review_id) {
  $query = "DELETE FROM reviews WHERE id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param('i', $review_id);
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Example usage:
$user_id = 1;
$product_id = 2;
$rating = 4;
$comment = 'Great product!';

add_review($user_id, $product_id, $rating, $comment);

$reviews = get_reviews_for_product($product_id);
print_r($reviews);

$review = get_reviews_for_user($user_id)[0];
echo "Review ID: " . $review['id'] . "
";
echo "Rating: " . $review['rating'] . "
";
echo "Comment: " . $review['comment'] . "
";

edit_review($review['id'], 5, 'Excellent product!');

delete_review($review['id']);


// Review class to encapsulate review logic
class Review {
  private $db;

  public function __construct() {
    // Initialize the database connection
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  }

  /**
   * Create a new review
   *
   * @param int $product_id The ID of the product being reviewed
   * @param int $user_id The ID of the user submitting the review
   * @param float $rating The rating given by the user (1-5)
   * @param string $review The text of the review
   *
   * @return bool Whether the review was created successfully
   */
  public function create($product_id, $user_id, $rating, $review) {
    $stmt = $this->db->prepare('INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);

    return $stmt->execute();
  }

  /**
   * Get all reviews for a product
   *
   * @param int $product_id The ID of the product being reviewed
   *
   * @return array An array of review objects
   */
  public function getAll($product_id) {
    $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);

    $reviews = [];
    while ($row = $stmt->fetch()) {
      $reviews[] = new Review();
      // Initialize review properties
      $reviews[count($reviews) - 1]->id = $row['id'];
      $reviews[count($reviews) - 1]->product_id = $row['product_id'];
      $reviews[count($reviews) - 1]->user_id = $row['user_id'];
      $reviews[count($reviews) - 1]->rating = $row['rating'];
      $reviews[count($reviews) - 1]->review = $row['review'];
    }

    return $reviews;
  }

  /**
   * Update a review
   *
   * @param int $id The ID of the review being updated
   * @param float $new_rating The new rating for the review
   * @param string $new_review The new text for the review
   *
   * @return bool Whether the review was updated successfully
   */
  public function update($id, $new_rating, $new_review) {
    $stmt = $this->db->prepare('UPDATE reviews SET rating = :new_rating, review = :new_review WHERE id = :id');
    $stmt->bindParam(':new_rating', $new_rating);
    $stmt->bindParam(':new_review', $new_review);
    $stmt->bindParam(':id', $id);

    return $stmt->execute();
  }

  /**
   * Delete a review
   *
   * @param int $id The ID of the review being deleted
   *
   * @return bool Whether the review was deleted successfully
   */
  public function delete($id) {
    $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :id');
    $stmt->bindParam(':id', $id);

    return $stmt->execute();
  }
}


// Create a new review
$review = new Review();
$product_id = 1;
$user_id = 1;
$rating = 4.5;
$review_text = 'This is a great product!';
if ($review->create($product_id, $user_id, $rating, $review_text)) {
  echo "Review created successfully!";
} else {
  echo "Error creating review: " . $review->db->errorInfo()[2];
}

// Get all reviews for a product
$reviews = $review->getAll(1);
foreach ($reviews as $review) {
  echo "Rating: " . $review->rating . ", Review: " . $review->review;
}

// Update a review
$new_rating = 5.0;
$new_review = 'This is an amazing product!';
if ($review->update(1, $new_rating, $new_review)) {
  echo "Review updated successfully!";
} else {
  echo "Error updating review: " . $review->db->errorInfo()[2];
}

// Delete a review
if ($review->delete(1)) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review: " . $review->db->errorInfo()[2];
}


function add_review($title, $content, $rating, $product_id, $user_id) {
  // Create a new review in the database
  $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  $stmt = $db->prepare("INSERT INTO reviews (title, content, rating, product_id, user_id) VALUES (?, ?, ?, ?, ?)");
  $stmt->execute(array($title, $content, $rating, $product_id, $user_id));
  return $db->lastInsertId();
}

function get_reviews($product_id = null) {
  // Retrieve reviews from the database
  if ($product_id === null) {
    $reviews = array();
    $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
    $stmt = $db->query("SELECT * FROM reviews");
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
      $review = array(
        'id' => $row['id'],
        'title' => $row['title'],
        'content' => $row['content'],
        'rating' => $row['rating'],
        'user_id' => $row['user_id'],
        'product_id' => $row['product_id']
      );
      array_push($reviews, $review);
    }
  } else {
    $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
    $stmt = $db->query("SELECT * FROM reviews WHERE product_id = ?", array($product_id));
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
      $review = array(
        'id' => $row['id'],
        'title' => $row['title'],
        'content' => $row['content'],
        'rating' => $row['rating'],
        'user_id' => $row['user_id'],
        'product_id' => $row['product_id']
      );
      array_push($reviews, $review);
    }
  }
  return $reviews;
}

function delete_review($review_id) {
  // Delete a review from the database
  $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  $stmt = $db->prepare("DELETE FROM reviews WHERE id = ?");
  $stmt->execute(array($review_id));
}

function update_review($review_id, $title, $content, $rating) {
  // Update a review in the database
  $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  $stmt = $db->prepare("UPDATE reviews SET title = ?, content = ?, rating = ? WHERE id = ?");
  $stmt->execute(array($title, $content, $rating, $review_id));
}


$title = "My review";
$content = "This is a great product!";
$rating = 5;
$product_id = 1;
$user_id = 1;

$review_id = add_review($title, $content, $rating, $product_id, $user_id);
echo "Review created with ID: $review_id";


$product_id = 1;
$reviews = get_reviews($product_id);

foreach ($reviews as $review) {
  echo "Title: $review[title]
";
  echo "Content: $review[content]
";
  echo "Rating: $review[rating]/5
";
}


class ReviewSystem {
  private $db;

  public function __construct() {
    // Connect to database
    $this->db = new mysqli('localhost', 'username', 'password', 'database');
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }
  }

  /**
   * Add a new review
   *
   * @param int $user_id ID of the user making the review
   * @param int $product_id ID of the product being reviewed
   * @param string $review Text of the review
   * @param int $rating Rating (1-5)
   */
  public function addReview($user_id, $product_id, $review, $rating) {
    // Check if user and product exist in database
    $result = $this->db->query("SELECT * FROM users WHERE id = '$user_id'");
    if (!$result || !$result->num_rows) {
      return false; // User not found
    }
    $result = $this->db->query("SELECT * FROM products WHERE id = '$product_id'");
    if (!$result || !$result->num_rows) {
      return false; // Product not found
    }

    // Insert review into database
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES ('$user_id', '$product_id', '$rating', '$review')";
    $this->db->query($sql);
  }

  /**
   * Get all reviews for a specific user or product
   *
   * @param int $user_id ID of the user (optional)
   * @param int $product_id ID of the product (optional)
   */
  public function getReviews($user_id = null, $product_id = null) {
    if ($user_id && !$product_id) {
      // Get reviews for specific user
      $sql = "SELECT * FROM reviews WHERE user_id = '$user_id'";
    } elseif (!$user_id && $product_id) {
      // Get reviews for specific product
      $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    } else {
      // Get all reviews
      $sql = "SELECT * FROM reviews";
    }

    $result = $this->db->query($sql);
    if (!$result) {
      return false; // Error getting reviews
    }
    return $result;
  }

  /**
   * Get average rating for a specific product
   *
   * @param int $product_id ID of the product
   */
  public function getAverageRating($product_id) {
    $sql = "SELECT AVG(rating) as average_rating FROM reviews WHERE product_id = '$product_id'";
    $result = $this->db->query($sql);
    if (!$result || !$result->num_rows) {
      return false; // No ratings found
    }
    return $result->fetch_assoc()['average_rating'];
  }

  /**
   * Get user's reviews
   *
   * @param int $user_id ID of the user
   */
  public function getUserReviews($user_id) {
    $sql = "SELECT * FROM reviews WHERE user_id = '$user_id'";
    $result = $this->db->query($sql);
    if (!$result) {
      return false; // Error getting reviews
    }
    return $result;
  }
}


$reviewSystem = new ReviewSystem();

// Add a review
$reviewSystem->addReview(1, 1, 'Great product!', 5);

// Get all reviews for user with ID 1
$reviews = $reviewSystem->getReviews(1);
print_r($reviews);

// Get average rating for product with ID 1
$averageRating = $reviewSystem->getAverageRating(1);
echo "Average rating: $averageRating";

// Get user's reviews
$userReviews = $reviewSystem->getUserReviews(1);
print_r($userReviews);


<?php

// Configuration
$db_host = 'localhost';
$db_username = 'root';
$db_password = '';
$db_name = 'your_database_name';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function create_review($user_id, $rating, $review)
{
    global $conn;
    
    // Check if user exists
    $query = "SELECT * FROM users WHERE id = '$user_id'";
    $result = $conn->query($query);

    if ($result->num_rows == 0) {
        return false; // User does not exist
    }

    // Insert review into database
    $query = "INSERT INTO reviews (user_id, rating, review) VALUES ('$user_id', '$rating', '$review')";
    $conn->query($query);
    
    return true;
}

function display_reviews()
{
    global $conn;

    // Retrieve all reviews from database
    $query = "SELECT r.id, u.name, r.rating, r.review FROM reviews r INNER JOIN users u ON r.user_id = u.id";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "Review by " . $row['name'] . ": " . $row['rating'] . "/5 - " . $row['review'];
            echo "<br>";
        }
    } else {
        echo "No reviews yet.";
    }
}

function calculate_overall_rating()
{
    global $conn;

    // Retrieve all ratings from database
    $query = "SELECT AVG(rating) as average FROM reviews";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            return (float)$row['average'];
        }
    } else {
        return 0.00; // Default rating
    }

    return false;
}

?>


<?php
require_once 'review_system.php';

// Create a new review
create_review(1, 4.5, "Great product! Highly recommended.");

// Display all reviews
display_reviews();

// Calculate overall rating
echo "Overall Rating: " . calculate_overall_rating();
?>


$query = "INSERT INTO reviews (user_id, rating, review) VALUES (?, ?, ?)";
$stmt = $conn->prepare($query);
$stmt->bind_param("idd", $user_id, $rating, $review);
$stmt->execute();


class Review {
    private $id;
    private $userId;
    private $productId;
    private $rating;
    private $comment;

    public function __construct($id = null) {
        if ($id !== null) {
            $this->loadReview($id);
        }
    }

    public function loadReview($id) {
        // Load review data from database (e.g., using PDO)
        // For demonstration purposes, assume we have a simple array of reviews
        $reviews = [
            1 => ['userId' => 1, 'productId' => 1, 'rating' => 5, 'comment' => 'Great product!'],
            2 => ['userId' => 2, 'productId' => 1, 'rating' => 4, 'comment' => 'Good quality.'],
        ];
        $this->id = $id;
        $this->userId = isset($reviews[$id]['userId']) ? $reviews[$id]['userId'] : null;
        $this->productId = isset($reviews[$id]['productId']) ? $reviews[$id]['productId'] : null;
        $this->rating = isset($reviews[$id]['rating']) ? $reviews[$id]['rating'] : null;
        $this->comment = isset($reviews[$id]['comment']) ? $reviews[$id]['comment'] : null;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


class ReviewRepository {
    private static $_reviews = [];

    public static function addReview(Review $review) {
        self::$_reviews[$review->getId()] = $review;
    }

    public static function getReviews() {
        return self::$_reviews;
    }

    public static function deleteReview($id) {
        unset(self::$_reviews[$id]);
    }
}


class ReviewService {
    private $_repository;

    public function __construct(ReviewRepository $repository) {
        $this->_repository = $repository;
    }

    public function addReview(Review $review) {
        $this->_repository->addReview($review);
    }

    public function getReviews() {
        return $this->_repository->getReviews();
    }

    public function deleteReview($id) {
        $this->_repository->deleteReview($id);
    }
}


// Create review service instance
$reviewService = new ReviewService(new ReviewRepository());

// Add a new review
$review = new Review(null);
$review->setUserId(1);
$review->setProductId(1);
$review->setRating(5);
$review->setComment('Great product!');
$reviewService->addReview($review);

// Get all reviews
$reviews = $reviewService->getReviews();
print_r($reviews);

// Delete a review by ID
$reviewService->deleteReview(1);

// Get all reviews again after deletion
$reviews = $reviewService->getReviews();
print_r($reviews);


// Connect to the database
$conn = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');

function getUserReviews($userId, $productId = null) {
    global $conn;
    if ($productId !== null) {
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE user_id = :user_id AND product_id = :product_id");
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
    } else {
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
        $stmt->bindParam(':user_id', $userId);
        $stmt->execute();
    }
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function addReview($userId, $productId, $rating, $review) {
    global $conn;
    try {
        $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        return $stmt->execute();
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false;
    }
}

function editReview($reviewId, $newRating, $newReview) {
    global $conn;
    try {
        $stmt = $conn->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
        $stmt->bindParam(':id', $reviewId);
        $stmt->bindParam(':rating', $newRating);
        $stmt->bindParam(':review', $newReview);
        return $stmt->execute();
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false;
    }
}

function deleteReview($reviewId) {
    global $conn;
    try {
        $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
        $stmt->bindParam(':id', $reviewId);
        return $stmt->execute();
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        return false;
    }
}

// Example usage:
$userId = 1; // ID of the user
$product_id = 2; // ID of the product

$reviews = getUserReviews($userId);
foreach ($reviews as $review) {
    echo "Review id: " . $review['id'] . ", Rating: " . $review['rating'] . ", Review: " . $review['review'];
}

$newRating = 5;
$newReview = 'Great product!';
$added = addReview($userId, $product_id, $newRating, $newReview);
echo "Added review successfully: " . ($added ? 'true' : 'false');

// To edit a review
$reviewId = 1; // ID of the review to be edited
$newRating = 4;
$newReview = 'Even better product!';
$edited = editReview($reviewId, $newRating, $newReview);
echo "Edited review successfully: " . ($edited ? 'true' : 'false');

// To delete a review
$deleted = deleteReview($reviewId);
echo "Deleted review successfully: " . ($deleted ? 'true' : 'false');


function submit_review($user_id, $review_text, $rating) {
    global $db;

    // Validate input data
    if (!is_numeric($user_id)) {
        throw new Exception('Invalid user ID');
    }
    if (empty($review_text)) {
        throw new Exception('Review text cannot be empty');
    }
    if (!in_array($rating, array(1, 2, 3, 4, 5))) {
        throw new Exception('Invalid rating');
    }

    // Insert review into database
    $query = "
        INSERT INTO reviews (user_id, review_text, rating)
        VALUES (:user_id, :review_text, :rating);
    ";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    try {
        $stmt->execute();
        return true;
    } catch (PDOException $e) {
        throw new Exception('Failed to submit review: ' . $e->getMessage());
    }
}

function get_reviews($user_id = null, $limit = 10, $offset = 0) {
    global $db;

    // Build query
    if ($user_id !== null) {
        $query = "
            SELECT * FROM reviews
            WHERE user_id = :user_id
            LIMIT :limit OFFSET :offset;
        ";
        $stmt = $db->prepare($query);
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':limit', $limit);
        $stmt->bindParam(':offset', $offset);
    } else {
        $query = "
            SELECT * FROM reviews
            LIMIT :limit OFFSET :offset;
        ";
        $stmt = $db->prepare($query);
        $stmt->bindParam(':limit', $limit);
        $stmt->bindParam(':offset', $offset);
    }

    // Execute query and fetch results
    try {
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        throw new Exception('Failed to retrieve reviews: ' . $e->getMessage());
    }
}

function get_user_reviews($user_id, $limit = 10, $offset = 0) {
    return get_reviews($user_id, $limit, $offset);
}


// Submit review
$review_text = 'This product is amazing!';
$user_id = 1;
$rating = 5;
if (submit_review($user_id, $review_text, $rating)) {
    echo "Review submitted successfully!";
} else {
    echo "Failed to submit review.";
}

// Get all reviews for a user
$user_id = 1;
$limit = 10;
$offset = 0;
$reviews = get_user_reviews($user_id, $limit, $offset);
print_r($reviews);

// Get all reviews with pagination
$limit = 10;
$offset = 5;
$reviews = get_reviews(null, $limit, $offset);
print_r($reviews);


<?php

// Configuration settings
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'reviews_database');

// Function to connect to the database
function db_connect() {
    $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
    
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    
    return $conn;
}

// Function to get all reviews
function get_reviews($product_id) {
    $conn = db_connect();
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($query);
    
    if (!$result) {
        die("Error: " . $conn->error);
    }
    
    $reviews = array();
    while ($row = $result->fetch_assoc()) {
        $reviews[] = array(
            'id' => $row['id'],
            'product_id' => $row['product_id'],
            'user_id' => $row['user_id'],
            'rating' => $row['rating'],
            'review' => $row['review']
        );
    }
    
    $conn->close();
    
    return $reviews;
}

// Function to get a single review
function get_review($id) {
    $conn = db_connect();
    $query = "SELECT * FROM reviews WHERE id = '$id'";
    $result = $conn->query($query);
    
    if (!$result) {
        die("Error: " . $conn->error);
    }
    
    $review = $result->fetch_assoc();
    
    $conn->close();
    
    return array(
        'id' => $review['id'],
        'product_id' => $review['product_id'],
        'user_id' => $review['user_id'],
        'rating' => $review['rating'],
        'review' => $review['review']
    );
}

// Function to create a new review
function create_review($data) {
    $conn = db_connect();
    
    // Sanitize input data
    $product_id = htmlspecialchars($data['product_id']);
    $user_id = htmlspecialchars($data['user_id']);
    $rating = htmlspecialchars($data['rating']);
    $review = htmlspecialchars($data['review']);
    
    $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES ('$product_id', '$user_id', '$rating', '$review')";
    
    if ($conn->query($query)) {
        echo "Review created successfully!";
    } else {
        die("Error: " . $conn->error);
    }
    
    $conn->close();
}

// Function to update an existing review
function update_review($data) {
    $conn = db_connect();
    
    // Sanitize input data
    $id = htmlspecialchars($data['id']);
    $product_id = htmlspecialchars($data['product_id']);
    $user_id = htmlspecialchars($data['user_id']);
    $rating = htmlspecialchars($data['rating']);
    $review = htmlspecialchars($data['review']);
    
    $query = "UPDATE reviews SET product_id = '$product_id', user_id = '$user_id', rating = '$rating', review = '$review' WHERE id = '$id'";
    
    if ($conn->query($query)) {
        echo "Review updated successfully!";
    } else {
        die("Error: " . $conn->error);
    }
    
    $conn->close();
}

// Function to delete a review
function delete_review($id) {
    $conn = db_connect();
    
    $query = "DELETE FROM reviews WHERE id = '$id'";
    
    if ($conn->query($query)) {
        echo "Review deleted successfully!";
    } else {
        die("Error: " . $conn->error);
    }
    
    $conn->close();
}

// Example usage
$product_id = 1;
$reviews = get_reviews($product_id);

echo "Reviews for Product ID $product_id:
";
foreach ($reviews as $review) {
    echo "ID: " . $review['id'] . "
";
    echo "Product ID: " . $review['product_id'] . "
";
    echo "User ID: " . $review['user_id'] . "
";
    echo "Rating: " . $review['rating'] . "
";
    echo "Review: " . $review['review'] . "

";
}

// Create a new review
$data = array(
    'product_id' => 1,
    'user_id' => 1,
    'rating' => 5,
    'review' => 'This product is amazing!'
);
create_review($data);

?>


<?php

class Review {
  private $db; // database connection

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  public function addReview($title, $content, $rating) {
    $query = "INSERT INTO reviews (title, content, rating, user_id)
              VALUES (:title, :content, :rating, :user_id)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    // assume user_id is passed from elsewhere
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->execute();
  }

  public function getReviews() {
    $query = "SELECT * FROM reviews";
    $stmt = $this->db->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getReviewById($id) {
    $query = "SELECT * FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  public function updateReview($id, $title, $content, $rating) {
    $query = "UPDATE reviews SET title = :title, content = :content, rating = :rating
              WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':id', $id);
    $stmt->execute();
  }

  public function deleteReview($id) {
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $id);
    $stmt->execute();
  }
}

// example usage
$review = new Review();

// add a review
$review->addReview('Great Product!', 'I loved the product.', 5);

// get all reviews
$reviews = $review->getReviews();

// get a single review by ID
$reviewById = $review->getReviewById(1);

// update a review
$review->updateReview(1, 'Even Better!', 'The product was amazing.', 6);

// delete a review
$review->deleteReview(1);


function createUserReview($reviewData) {
    // Check if review data exists
    if (!isset($reviewData['product_id']) || !isset($reviewData['rating']) || !isset($reviewData['comment'])) {
        return array('error' => 'Invalid review data');
    }

    // Connect to database
    $db = new mysqli("localhost", "username", "password", "database");

    // Check connection
    if ($db->connect_error) {
        return array('error' => 'Database connection failed: ' . $db->connect_error);
    }

    // Prepare SQL query
    $stmt = $db->prepare("INSERT INTO reviews (product_id, rating, comment, user_id) VALUES (?, ?, ?, ?)");

    // Bind parameters
    $stmt->bind_param("iii", $reviewData['product_id'], $reviewData['rating'], $reviewData['comment'], $_SESSION['user_id']);

    // Execute query
    if (!$stmt->execute()) {
        return array('error' => 'Database error: ' . $db->error);
    }

    // Close statement and database connection
    $stmt->close();
    $db->close();

    // Return success message
    return array('message' => 'Review created successfully');
}


$reviewData = array(
    'product_id' => 123,
    'rating' => 4,
    'comment' => 'Great product! Highly recommend.'
);

$response = createUserReview($reviewData);
print_r($response); // Output: Array ( [message] => Review created successfully )


class Review {
    private $id;
    private $rating;
    private $content;
    private $userId;

    public function __construct($id = null, $rating = 0, $content = '', $userId) {
        $this->id = $id;
        $this->rating = $rating;
        $this->content = $content;
        $this->userId = $userId;
    }

    public function getId() {
        return $this->id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getContent() {
        return $this->content;
    }

    public function getUserId() {
        return $this->userId;
    }
}


class ReviewService {
    private $reviews = [];

    public function addReview(Review $review) {
        array_push($this->reviews, $review);
    }

    public function getReviews() {
        return $this->reviews;
    }

    public function deleteReview($id) {
        foreach ($this->reviews as $key => $value) {
            if ($value->getId() == $id) {
                unset($this->reviews[$key]);
            }
        }
    }
}


class ReviewController {
    private $service;

    public function __construct(ReviewService $service) {
        $this->service = $service;
    }

    public function addReview(Request $request) {
        if ($request->isPost()) {
            $rating = $request->get('rating');
            $content = $request->get('content');

            $review = new Review(null, $rating, $content, 1); // Replace with actual userId
            $this->service->addReview($review);

            header("Location: " . $_SERVER['PHP_SELF']);
            exit;
        }
    }

    public function deleteReview(Request $request) {
        if ($request->isPost()) {
            $id = $request->get('id');
            $this->service->deleteReview($id);
            header("Location: " . $_SERVER['PHP_SELF']);
            exit;
        }
    }

    public function displayReviews() {
        $reviews = $this->service->getReviews();
        return $reviews;
    }
}


$reviewService = new ReviewService();

$reviewController = new ReviewController($reviewService);

if (isset($_GET['add'])) {
    $reviewController->addReview($_POST);
}

if (isset($_GET['delete'])) {
    $reviewController->deleteReview($_POST['id']);
}

$reviews = $reviewController->displayReviews();


class Request {
    private $get;
    private $post;

    public function __construct() {
        if (isset($_GET)) {
            $this->get = $_GET;
        }

        if (isset($_POST)) {
            $this->post = $_POST;
        }
    }

    public function get($key) {
        return isset($this->get[$key]) ? $this->get[$key] : null;
    }

    public function post($key) {
        return isset($this->post[$key]) ? $this->post[$key] : null;
    }
}


<?php

// Review class to store review data
class Review {
  public $id;
  public $title;
  public $rating;
  public $content;
  public $user_id;

  // Constructor to initialize object with data
  public function __construct($data) {
    $this->id = $data['id'];
    $this->title = $data['title'];
    $this->rating = $data['rating'];
    $this->content = $data['content'];
    $this->user_id = $data['user_id'];
  }
}

// ReviewManager class to manage reviews
class ReviewManager {
  private $reviews;

  // Constructor to initialize object with data
  public function __construct() {
    $this->reviews = array();
  }

  // Add review method to add new review
  public function addReview($review) {
    array_push($this->reviews, $review);
  }

  // Get reviews method to retrieve all reviews
  public function getReviews() {
    return $this->reviews;
  }

  // Get single review by ID method
  public function getReviewById($id) {
    foreach ($this->reviews as $review) {
      if ($review->id == $id) {
        return $review;
      }
    }
    return null;
  }

  // Update review method to update existing review
  public function updateReview($id, $data) {
    $existingReview = $this->getReviewById($id);
    if ($existingReview != null) {
      $existingReview->__construct($data);
      $index = array_search($existingReview, $this->reviews);
      unset($this->reviews[$index]);
      array_push($this->reviews, $existingReview);
    }
  }

  // Delete review method to remove existing review
  public function deleteReview($id) {
    foreach ($this->reviews as $key => $review) {
      if ($review->id == $id) {
        unset($this->reviews[$key]);
        return true;
      }
    }
    return false;
  }
}

// Example usage:
$reviewManager = new ReviewManager();

$review1 = new Review(array(
  'id' => 1,
  'title' => 'Great product!',
  'rating' => 5,
  'content' => 'I love this product!',
  'user_id' => 1
));
$review2 = new Review(array(
  'id' => 2,
  'title' => 'Not so great...',
  'rating' => 3,
  'content' => 'It\'s okay, I guess.',
  'user_id' => 2
));

$reviewManager->addReview($review1);
$reviewManager->addReview($review2);

print_r($reviewManager->getReviews());

echo $reviewManager->getReviewById(1)->title; // Output: Great product!

$updatedReview = array(
  'id' => 1,
  'title' => 'Even better!',
  'rating' => 6,
  'content' => 'I love this product even more!',
  'user_id' => 1
);
$reviewManager->updateReview(1, $updatedReview);

print_r($reviewManager->getReviews());

$reviewManager->deleteReview(2);

?>


<?php

// Sample data: Product ID and its corresponding reviews
$reviews = [
    1 => [
        ['rating' => 4, 'comment' => 'Great product!'],
        ['rating' => 3, 'comment' => 'It was okay.'],
        ['rating' => 5, 'comment' => 'Love it!']
    ],
    2 => [
        ['rating' => 1, 'comment' => 'Terrible experience.'],
        ['rating' => 4, 'comment' => 'Good product but expensive.']
    ]
];

function displayReviews($productId) {
    global $reviews;

    if (!isset($reviews[$productId])) {
        echo "No reviews for Product ID: $productId";
        return;
    }

    foreach ($reviews[$productId] as $review) {
        echo "Rating: {$review['rating']}/5 | Comment: {$review['comment']}
";
    }
}

// Example usage:
displayReviews(1);

?>


class Review {
  private $id;
  private $userId;
  private $productId;
  private $rating;
  private $review;

  public function __construct($id, $userId, $productId, $rating, $review) {
    $this->id = $id;
    $this->userId = $userId;
    $this->productId = $productId;
    $this->rating = $rating;
    $this->review = $review;
  }

  public function getId() { return $this->id; }
  public function getUserId() { return $this->userId; }
  public function getProductId() { return $this->productId; }
  public function getRating() { return $this->rating; }
  public function getReview() { return $this->review; }

  // ...
}


class ReviewDAO {
  private static $db;

  public static function connectToDatabase($host, $username, $password) {
    self::$db = new PDO("mysql:host=$host;dbname=reviews", $username, $password);
  }

  // ...

  public static function createReview(Review $review) {
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:userId, :productId, :rating, :review)";
    self::$db->prepare($sql)->execute([
      ':userId' => $review->getUserId(),
      ':productId' => $review->getProductId(),
      ':rating' => $review->getRating(),
      ':review' => $review->getReview()
    ]);
  }

  public static function getReviews() {
    $sql = "SELECT * FROM reviews";
    return self::$db->query($sql)->fetchAll(PDO::FETCH_CLASS, 'Review');
  }

  // ...
}


function createReview($userId, $productId, $rating, $review) {
  $reviewDAO = new ReviewDAO();
  $reviewDAO->connectToDatabase('localhost', 'username', 'password');
  $review = new Review(null, $userId, $productId, $rating, $review);
  $reviewDAO->createReview($review);
}

function getReviews() {
  $reviewDAO = new ReviewDAO();
  return $reviewDAO->getReviews();
}


createReview(1, 1, 5, 'Great product!');
$reviews = getReviews();
foreach ($reviews as $review) {
  echo "User ID: {$review->getUserId()} | Product ID: {$review->getProductId()} | Rating: {$review->getRating()} | Review: {$review->getReview()}
";
}


class UserReview {
    private $db;

    public function __construct() {
        // Initialize database connection (e.g., MySQLi)
        $this->db = new mysqli("localhost", "username", "password", "database_name");
    }

    // Create a new review
    public function create_review($user_id, $product_id, $rating, $comment) {
        if ($this->db->connect_error) {
            die("Connection failed: " . $this->db->connect_error);
        }

        $sql = "INSERT INTO reviews (user_id, product_id, rating, comment)
                VALUES ('$user_id', '$product_id', '$rating', '$comment')";
        if ($this->db->query($sql) === TRUE) {
            return true; // Review created successfully
        } else {
            echo "Error creating review: " . $this->db->error;
            return false;
        }
    }

    // Read all reviews for a specific user or product
    public function read_reviews($user_id = null, $product_id = null) {
        if ($this->db->connect_error) {
            die("Connection failed: " . $this->db->connect_error);
        }

        if ($user_id !== null && $product_id === null) {
            // Get reviews for a user
            $sql = "SELECT * FROM reviews WHERE user_id = '$user_id'";
        } elseif ($product_id !== null && $user_id === null) {
            // Get reviews for a product
            $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
        } else {
            // If both user ID and product ID are provided, return an error or handle this case as needed
            echo "Error: Both user ID and product ID cannot be specified simultaneously.";
            return array(); // Return empty array in this example
        }

        $result = $this->db->query($sql);

        if ($result === FALSE) {
            echo "Error reading reviews: " . $this->db->error;
            return array();
        }

        $reviews = array();
        while ($row = $result->fetch_assoc()) {
            $reviews[] = $row;
        }
        return $reviews;
    }

    // Update an existing review
    public function update_review($review_id, $new_rating = null, $new_comment = null) {
        if ($this->db->connect_error) {
            die("Connection failed: " . $this->db->connect_error);
        }

        if (!isset($review_id)) {
            echo "Error updating review: Review ID not specified.";
            return false;
        }

        // Check if new rating or comment is provided
        $update_fields = array();
        if ($new_rating !== null) {
            $update_fields['rating'] = $new_rating;
        }
        if ($new_comment !== null) {
            $update_fields['comment'] = $new_comment;
        }

        $sql = "UPDATE reviews SET ";
        foreach ($update_fields as $field => $value) {
            $sql .= "$field = '$value', ";
        }
        $sql .= "WHERE review_id = '$review_id'";

        if ($this->db->query($sql) === TRUE) {
            return true; // Review updated successfully
        } else {
            echo "Error updating review: " . $this->db->error;
            return false;
        }
    }

    // Delete a review by ID
    public function delete_review($review_id) {
        if ($this->db->connect_error) {
            die("Connection failed: " . $this->db->connect_error);
        }

        if (!isset($review_id)) {
            echo "Error deleting review: Review ID not specified.";
            return false;
        }

        $sql = "DELETE FROM reviews WHERE review_id = '$review_id'";
        if ($this->db->query($sql) === TRUE) {
            return true; // Review deleted successfully
        } else {
            echo "Error deleting review: " . $this->db->error;
            return false;
        }
    }

    public function __destruct() {
        // Close the database connection when this object is destroyed
        $this->db->close();
    }
}


<?php

// Configuration
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to get user reviews
function getUserReviews($user_id) {
  global $conn;
  
  // SQL query to retrieve reviews for a specific user
  $query = "
    SELECT r.id, r.product_name, r.rating, r.review_text
    FROM reviews r
    WHERE r.user_id = '$user_id'
  ";
  
  $result = $conn->query($query);
  
  if ($result->num_rows > 0) {
    // Create an array to store reviews
    $reviews = array();
    
    while ($row = $result->fetch_assoc()) {
      $reviews[] = array(
        'id' => $row['id'],
        'product_name' => $row['product_name'],
        'rating' => $row['rating'],
        'review_text' => $row['review_text']
      );
    }
    
    return $reviews;
  } else {
    // No reviews found
    return array();
  }
}

// Function to add new review
function addReview($user_id, $product_name, $rating, $review_text) {
  global $conn;
  
  // SQL query to insert new review
  $query = "
    INSERT INTO reviews (user_id, product_name, rating, review_text)
    VALUES ('$user_id', '$product_name', '$rating', '$review_text')
  ";
  
  if ($conn->query($query)) {
    return true; // Review added successfully
  } else {
    return false; // Error adding review
  }
}

// Example usage:
$user_id = 1;
$reviews = getUserReviews($user_id);
print_r($reviews);

$new_review = array(
  'product_name' => 'Example Product',
  'rating' => 5,
  'review_text' => 'This product is amazing!'
);

if (addReview($user_id, $new_review['product_name'], $new_review['rating'], $new_review['review_text'])) {
  echo "Review added successfully!";
} else {
  echo "Error adding review.";
}

?>


// Review model
class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=database', 'username', 'password');
  }

  public function addReview($product_id, $username, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (product_id, username, rating, review) VALUES (?, ?, ?, ?)");
      $stmt->execute(array($product_id, $username, $rating, $review));
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }

  public function getReviewsForProduct($product_id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
      $stmt->execute(array($product_id));
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return array();
    }
  }

  public function getAverageRatingForProduct($product_id) {
    try {
      $stmt = $this->db->prepare("SELECT AVG(rating) AS average FROM reviews WHERE product_id = ?");
      $stmt->execute(array($product_id));
      $result = $stmt->fetch(PDO::FETCH_ASSOC);
      return isset($result['average']) ? $result['average'] : 0;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return 0;
    }
  }

  public function getUserReviews() {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE username = ?");
      $stmt->execute(array($_SESSION['username']));
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return array();
    }
  }

  public function deleteReview($review_id) {
    try {
      $this->db->query("DELETE FROM reviews WHERE id = ?");
      $this->db->execute(array($review_id));
      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }
}

// Controller
class ReviewController {
  private $review;

  public function __construct() {
    $this->review = new Review();
  }

  public function addReviewAction($product_id, $username, $rating, $review) {
    if ($this->review->addReview($product_id, $username, $rating, $review)) {
      echo "Review added successfully!";
    } else {
      echo "Error adding review.";
    }
  }

  public function getReviewsForProductAction($product_id) {
    return json_encode($this->review->getReviewsForProduct($product_id));
  }

  public function getAverageRatingForProductAction($product_id) {
    return $this->review->getAverageRatingForProduct($product_id);
  }

  public function getUserReviewsAction() {
    return json_encode($this->review->getUserReviews());
  }

  public function deleteReviewAction($review_id) {
    if ($this->review->deleteReview($review_id)) {
      echo "Review deleted successfully!";
    } else {
      echo "Error deleting review.";
    }
  }
}


// Add a new review
$reviewController = new ReviewController();
$reviewController->addReviewAction(1, 'johnDoe', 5, 'This product is amazing!');

// Get reviews for a product
echo $reviewController->getReviewsForProductAction(1);

// Get average rating for a product
echo $reviewController->getAverageRatingForProductAction(1);

// Get user's reviews
echo $reviewController->getUserReviewsAction();

// Delete a review
$reviewController->deleteReviewAction(1);


class Review {
  private $db;

  public function __construct() {
    // Connect to database
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  // Function to create a new review
  public function createReview($user_id, $product_name, $review_text, $rating) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_name, review_text, rating) VALUES (:user_id, :product_name, :review_text, :rating)");
      $stmt->bindParam(':user_id', $user_id);
      $stmt->bindParam(':product_name', $product_name);
      $stmt->bindParam(':review_text', $review_text);
      $stmt->bindParam(':rating', $rating);
      $stmt->execute();
      return true;
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  // Function to read all reviews
  public function getAllReviews() {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews");
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error reading reviews: " . $e->getMessage();
      return array();
    }
  }

  // Function to read a single review by id
  public function getReview($review_id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :id");
      $stmt->bindParam(':id', $review_id);
      $stmt->execute();
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error reading review: " . $e->getMessage();
      return array();
    }
  }

  // Function to update a review
  public function updateReview($review_id, $product_name = null, $review_text = null, $rating = null) {
    try {
      if ($product_name !== null) {
        $stmt = $this->db->prepare("UPDATE reviews SET product_name = :product_name WHERE id = :id");
        $stmt->bindParam(':product_name', $product_name);
        $stmt->bindParam(':id', $review_id);
        $stmt->execute();
      }
      if ($review_text !== null) {
        $stmt = $this->db->prepare("UPDATE reviews SET review_text = :review_text WHERE id = :id");
        $stmt->bindParam(':review_text', $review_text);
        $stmt->bindParam(':id', $review_id);
        $stmt->execute();
      }
      if ($rating !== null) {
        $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating WHERE id = :id");
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':id', $review_id);
        $stmt->execute();
      }
      return true;
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
      return false;
    }
  }

  // Function to delete a review
  public function deleteReview($review_id) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :id");
      $stmt->bindParam(':id', $review_id);
      $stmt->execute();
      return true;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


$review = new Review();

// Create a new review
$user_id = 1; // Replace with actual user id
$product_name = 'Product Name';
$review_text = 'This is a great product!';
$rating = 4.5;
$result = $review->createReview($user_id, $product_name, $review_text, $rating);
if ($result) {
  echo "Review created successfully!";
} else {
  echo "Error creating review.";
}

// Read all reviews
$reviews = $review->getAllReviews();
foreach ($reviews as $review) {
  echo $review['id'] . ': ' . $review['product_name'] . ' (' . $review['rating'] . '/5)';
}

// Read a single review by id
$review_id = 1; // Replace with actual review id
$result = $review->getReview($review_id);
if ($result) {
  echo "Product Name: " . $result['product_name'];
} else {
  echo "Error reading review.";
}

// Update a review
$review_id = 1; // Replace with actual review id
$product_name = 'New Product Name';
$result = $review->updateReview($review_id, $product_name);
if ($result) {
  echo "Review updated successfully!";
} else {
  echo "Error updating review.";
}

// Delete a review
$review_id = 1; // Replace with actual review id
$result = $review->deleteReview($review_id);
if ($result) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review.";
}


// Database connection settings
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


class Review {
    private $id;
    private $reviewer_name;
    private $review_text;
    private $rating;

    function __construct($id, $reviewer_name, $review_text, $rating) {
        $this->id = $id;
        $this->reviewer_name = $reviewer_name;
        $this->review_text = $review_text;
        $this->rating = $rating;
    }

    // Getters
    public function getId() { return $this->id; }
    public function getReviewerName() { return $this->reviewer_name; }
    public function getReviewText() { return $this->review_text; }
    public function getRating() { return $this->rating; }

    // Setters
    public function setId($id) { $this->id = $id; }
    public function setReviewerName($name) { $this->reviewer_name = $name; }
    public function setReviewText($text) { $this->review_text = $text; }
    public function setRating($rating) { $this->rating = $rating; }

    // Display review
    public function display() {
        echo "ID: $this->id <br>";
        echo "Reviewer Name: $this->reviewer_name <br>";
        echo "Review Text: $this->review_text <br>";
        echo "Rating: $this->rating/5";
    }
}


function addReview($review) {
    global $conn;
    $query = "INSERT INTO reviews (reviewer_name, review_text, rating)
              VALUES ('$review->getReviewerName()', '$review->getReviewText()', '$review->getRating()')";
    if ($conn->query($query)) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review: " . $conn->error;
    }
}


function editReview($id, $review) {
    global $conn;
    $query = "UPDATE reviews SET reviewer_name='$review->getReviewerName()', review_text='$review->getReviewText()', rating='$review->getRating()' WHERE id=$id";
    if ($conn->query($query)) {
        echo "Review edited successfully!";
    } else {
        echo "Error editing review: " . $conn->error;
    }
}


function deleteReview($id) {
    global $conn;
    $query = "DELETE FROM reviews WHERE id=$id";
    if ($conn->query($query)) {
        echo "Review deleted successfully!";
    } else {
        echo "Error deleting review: " . $conn->error;
    }
}


function getReviews() {
    global $conn;
    $query = "SELECT * FROM reviews";
    $result = $conn->query($query);
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "ID: " . $row["id"] . "<br>";
            echo "Reviewer Name: " . $row["reviewer_name"] . "<br>";
            echo "Review Text: " . $row["review_text"] . "<br>";
            echo "Rating: " . $row["rating"] / 5 . "<br><hr>";
        }
    } else {
        echo "No reviews found.";
    }
}


$review = new Review(1, "John Doe", "Great product!", 4);
addReview($review);

getReviews();

$review->setId(1);
$review->setReviewerName("Jane Doe");
$review->setReviewText("Good product!");
$review->setRating(5);
editReview(1, $review);

deleteReview(1);


<?php
function store_review($data) {
  global $db;

  // Validate data
  if (!isset($data['user_id']) || !isset($data['product_id']) ||
      !isset($data['rating']) || !isset($data['review'])) {
    return array('error' => 'Invalid data');
  }

  try {
    // Insert review into database
    $query = "INSERT INTO Reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $data['user_id']);
    $stmt->bindParam(':product_id', $data['product_id']);
    $stmt->bindParam(':rating', $data['rating']);
    $stmt->bindParam(':review', $data['review']);
    $stmt->execute();

    // Return success message
    return array('success' => 'Review stored successfully');
  } catch (PDOException $e) {
    // Return error message
    return array('error' => 'Error storing review: ' . $e->getMessage());
  }
}

function display_reviews($product_id) {
  global $db;

  try {
    // Retrieve reviews for product from database
    $query = "SELECT Users.username, Reviews.rating, Reviews.review FROM Reviews
              JOIN Users ON Reviews.user_id = Users.id
              WHERE Reviews.product_id = :product_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();

    // Fetch and return reviews as array
    $reviews = array();
    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
      $reviews[] = array('username' => $row['username'], 'rating' => $row['rating'], 'review' => $row['review']);
    }
    return $reviews;
  } catch (PDOException $e) {
    // Return error message
    return array('error' => 'Error displaying reviews: ' . $e->getMessage());
  }
}

function calculate_average_rating($product_id) {
  global $db;

  try {
    // Retrieve average rating for product from database
    $query = "SELECT AVG(Rating) FROM Reviews WHERE Product_id = :product_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();

    // Fetch and return average rating as float
    $result = $stmt->fetchColumn();
    return $result === NULL ? 0 : $result;
  } catch (PDOException $e) {
    // Return error message
    return array('error' => 'Error calculating average rating: ' . $e->getMessage());
  }
}
?>


// Connect to database
$db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');

// Store review
$data = array(
  'user_id' => 1,
  'product_id' => 1,
  'rating' => 5,
  'review' => 'Great product!'
);
$result = store_review($data);

if ($result['success']) {
  echo "Review stored successfully!";
} else if (isset($result['error'])) {
  echo "Error storing review: " . $result['error'];
}

// Display reviews
$product_id = 1;
$reviews = display_reviews($product_id);
print_r($reviews); // Output: Array of reviews as associative array

// Calculate average rating
$average_rating = calculate_average_rating(1);
echo "Average rating for product ID 1: $average_rating";


function submit_review($product_id, $rating, $review_content, $user_id) {
    // Connect to the database
    $db = new mysqli("localhost", "username", "password", "database");

    if ($db->connect_error) {
        die("Connection failed: " . $db->connect_error);
    }

    // Prepare the SQL statement
    $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, review, rating) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("iiis", $product_id, $user_id, $review_content, $rating);

    // Execute the query
    if (!$stmt->execute()) {
        die("Error: " . $db->error);
    }

    // Close the statement and database connection
    $stmt->close();
    $db->close();

    return true;
}


function get_user_reviews($user_id) {
    // Connect to the database
    $db = new mysqli("localhost", "username", "password", "database");

    if ($db->connect_error) {
        die("Connection failed: " . $db->connect_error);
    }

    // Prepare the SQL statement
    $stmt = $db->prepare("SELECT id, product_id, review, rating FROM reviews WHERE user_id = ?");
    $stmt->bind_param("i", $user_id);

    // Execute the query
    if (!$stmt->execute()) {
        die("Error: " . $db->error);
    }

    // Get the result set
    $result = $stmt->get_result();

    // Create an array to store the reviews
    $reviews = array();

    while ($row = $result->fetch_assoc()) {
        $review_id = $row["id"];
        $product_id = $row["product_id"];
        $review_content = $row["review"];
        $rating = $row["rating"];

        // Calculate the rating display
        $rating_display = calculate_rating_display($rating);

        $reviews[] = array(
            "id" => $review_id,
            "product_id" => $product_id,
            "review" => $review_content,
            "rating" => $rating_display,
        );
    }

    // Close the statement and database connection
    $stmt->close();
    $db->close();

    return $reviews;
}


function calculate_rating_display($rating) {
    if ($rating < 1.0) {
        return "No rating given";
    } elseif ($rating <= 2.5) {
        return "Poor - Not recommended";
    } elseif ($rating <= 4.5) {
        return "Average - Okay, but could be better";
    } else {
        return "Good - Recommended!";
    }
}


<?php

// Submit review function
function submit_review($product_id, $rating, $review_content, $user_id) {
    // Connect to the database
    $db = new mysqli("localhost", "username", "password", "database");

    if ($db->connect_error) {
        die("Connection failed: " . $db->connect_error);
    }

    // Prepare the SQL statement
    $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, review, rating) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("iiis", $product_id, $user_id, $review_content, $rating);

    // Execute the query
    if (!$stmt->execute()) {
        die("Error: " . $db->error);
    }

    // Close the statement and database connection
    $stmt->close();
    $db->close();

    return true;
}

// Get user reviews function
function get_user_reviews($user_id) {
    // Connect to the database
    $db = new mysqli("localhost", "username", "password", "database");

    if ($db->connect_error) {
        die("Connection failed: " . $db->connect_error);
    }

    // Prepare the SQL statement
    $stmt = $db->prepare("SELECT id, product_id, review, rating FROM reviews WHERE user_id = ?");
    $stmt->bind_param("i", $user_id);

    // Execute the query
    if (!$stmt->execute()) {
        die("Error: " . $db->error);
    }

    // Get the result set
    $result = $stmt->get_result();

    // Create an array to store the reviews
    $reviews = array();

    while ($row = $result->fetch_assoc()) {
        $review_id = $row["id"];
        $product_id = $row["product_id"];
        $review_content = $row["review"];
        $rating = $row["rating"];

        // Calculate the rating display
        $rating_display = calculate_rating_display($rating);

        $reviews[] = array(
            "id" => $review_id,
            "product_id" => $product_id,
            "review" => $review_content,
            "rating" => $rating_display,
        );
    }

    // Close the statement and database connection
    $stmt->close();
    $db->close();

    return $reviews;
}

// Calculate rating display function
function calculate_rating_display($rating) {
    if ($rating < 1.0) {
        return "No rating given";
    } elseif ($rating <= 2.5) {
        return "Poor - Not recommended";
    } elseif ($rating <= 4.5) {
        return "Average - Okay, but could be better";
    } else {
        return "Good - Recommended!";
    }
}

// Example usage
$user_id = 1;
$product_id = 1;

$review_content = $_POST["review"];
$rating = (float) $_POST["rating"];

if (submit_review($product_id, $rating, $review_content, $user_id)) {
    echo "Review submitted successfully!";
} else {
    echo "Error submitting review.";
}

$user_reviews = get_user_reviews($user_id);
foreach ($user_reviews as $review) {
    echo "ID: $review[id]<br>";
    echo "Product ID: $review[product_id]<br>";
    echo "Review: $review[review]<br>";
    echo "Rating: $review[rating]<br><hr>";
}
?>


<?php

// Review class
class Review {
    public $id;
    public $product_id;
    public $user_id;
    public $rating;
    public $review;

    function __construct($id, $product_id, $user_id, $rating, $review) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->user_id = $user_id;
        $this->rating = $rating;
        $this->review = $review;
    }
}

// User class
class User {
    public $id;
    public $name;

    function __construct($id, $name) {
        $this->id = $id;
        $this->name = $name;
    }
}

// Product class (simple example)
class Product {
    public $id;
    public $name;

    function __construct($id, $name) {
        $this->id = $id;
        $this->name = $name;
    }
}

// Review system functions
function add_review($product_id, $user_id, $rating, $review) {
    // Simulating database insertion (replace with actual database code)
    global $reviews;
    array_push($reviews, new Review(count($reviews), $product_id, $user_id, $rating, $review));
}

function get_reviews($product_id) {
    // Filter reviews by product id
    global $reviews;
    return array_filter($reviews, function ($review) use ($product_id) {
        return $review->product_id == $product_id;
    });
}

function calculate_average_rating($reviews) {
    if (count($reviews) == 0) {
        return 0;
    }
    return array_sum(array_column($reviews, 'rating')) / count($reviews);
}

// Example usage
$products = [
    new Product(1, "Product A"),
    new Product(2, "Product B")
];

$users = [
    new User(1, "John Doe"),
    new User(2, "Jane Doe")
];

$reviews = [];

add_review(1, 1, 5, "Great product!");
add_review(1, 2, 4, "Good but not great.");
add_review(2, 1, 3, "Not my favorite.");

echo "Reviews for Product A:
";
foreach (get_reviews(1) as $review) {
    echo "User: " . $users[$review->user_id - 1]->name . "
";
    echo "Rating: " . $review->rating . "/5
";
    echo "Review: " . $review->review . "

";
}

echo "Average rating for Product A: " . calculate_average_rating(get_reviews(1)) . "
";

?>


<?php

// Include database connection settings
require_once 'db_config.php';

// Function to get all reviews for a product
function get_reviews($product_id) {
  $query = "SELECT * FROM reviews WHERE product_id = ?";
  $stmt = $pdo->prepare($query);
  $stmt->execute([$product_id]);
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to add new review
function add_review($user_id, $product_id, $review_text, $rating) {
  $query = "INSERT INTO reviews (user_id, product_id, review, rating)
            VALUES (?, ?, ?, ?)";
  $stmt = $pdo->prepare($query);
  $stmt->execute([$user_id, $product_id, $review_text, $rating]);
}

// Function to update existing review
function update_review($id, $new_rating) {
  $query = "UPDATE reviews SET rating = ? WHERE id = ?";
  $stmt = $pdo->prepare($query);
  $stmt->execute([$new_rating, $id]);
}

// Function to delete review
function delete_review($id) {
  $query = "DELETE FROM reviews WHERE id = ?";
  $stmt = $pdo->prepare($query);
  $stmt->execute([$id]);
}


require_once 'review.php';

// Get all reviews for a product with ID 123
$reviews = get_reviews(123);
print_r($reviews);

// Add new review for user ID 456 and product ID 789
add_review(456, 789, "Great product!", 5);

// Update existing review with ID 101
update_review(101, 4);

// Delete review with ID 202
delete_review(202);


<?php

class Review {
    private $id;
    private $product_id;
    private $user_id;
    private $rating;
    private $review;

    public function __construct($data = array()) {
        if (!empty($data)) {
            $this->loadData($data);
        }
    }

    private function loadData($data) {
        $this->id = (isset($data['id'])) ? intval($data['id']) : 0;
        $this->product_id = (isset($data['product_id'])) ? intval($data['product_id']) : 0;
        $this->user_id = (isset($data['user_id'])) ? intval($data['user_id']) : 0;
        $this->rating = (isset($data['rating'])) ? floatval($data['rating']) : 0.00;
        $this->review = (isset($data['review'])) ? strval($data['review']) : '';
    }

    public function getId() {
        return $this->id;
    }

    public function getProductId() {
        return $this->product_id;
    }

    public function getUserId() {
        return $this->user_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}

class ReviewModel {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview(Review $review) {
        $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $review->getProductId());
        $stmt->bindParam(':user_id', $review->getUserId());
        $stmt->bindParam(':rating', $review->getRating());
        $stmt->bindParam(':review', $review->getReview());
        return $stmt->execute();
    }

    public function getReviews() {
        $query = "SELECT * FROM reviews";
        $stmt = $this->db->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
    }

    public function getReviewById($id) {
        $query = "SELECT * FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':id', intval($id));
        $stmt->execute();
        return $stmt->fetchObject('Review');
    }

    public function updateReview(Review $review) {
        $query = "UPDATE reviews SET product_id = :product_id, user_id = :user_id, rating = :rating, review = :review WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':id', intval($review->getId()));
        $stmt->bindParam(':product_id', $review->getProductId());
        $stmt->bindParam(':user_id', $review->getUserId());
        $stmt->bindParam(':rating', $review->getRating());
        $stmt->bindParam(':review', $review->getReview());
        return $stmt->execute();
    }

    public function deleteReview($id) {
        $query = "DELETE FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':id', intval($id));
        return $stmt->execute();
    }
}

class ReviewController {
    private $reviewModel;

    public function __construct($reviewModel) {
        $this->reviewModel = $reviewModel;
    }

    public function createReview() {
        if (isset($_POST['create_review'])) {
            $product_id = intval(filter_input(INPUT_POST, 'product_id', FILTER_SANITIZE_NUMBER_INT));
            $user_id = intval(filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT));
            $rating = floatval(filter_input(INPUT_POST, 'rating', FILTER_SANITIZE_NUMBER_FLOAT));
            $review = filter_input(INPUT_POST, 'review', FILTER_SANITIZE_STRING);
            $reviewObj = new Review(array('product_id' => $product_id, 'user_id' => $user_id, 'rating' => $rating, 'review' => $review));
            return $this->reviewModel->createReview($reviewObj) ? true : false;
        }
    }

    public function getReviews() {
        return $this->reviewModel->getReviews();
    }

    public function getReviewById($id) {
        return $this->reviewModel->getReviewById(intval($id));
    }

    public function updateReview() {
        if (isset($_POST['update_review'])) {
            $product_id = intval(filter_input(INPUT_POST, 'product_id', FILTER_SANITIZE_NUMBER_INT));
            $user_id = intval(filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT));
            $rating = floatval(filter_input(INPUT_POST, 'rating', FILTER_SANITIZE_NUMBER_FLOAT));
            $review = filter_input(INPUT_POST, 'review', FILTER_SANITIZE_STRING);
            $id = intval(filter_input(INPUT_GET, 'id', FILTER_SANITIZE_NUMBER_INT));
            $reviewObj = new Review(array('id' => $id, 'product_id' => $product_id, 'user_id' => $user_id, 'rating' => $rating, 'review' => $review));
            return $this->reviewModel->updateReview($reviewObj) ? true : false;
        }
    }

    public function deleteReview() {
        if (isset($_GET['id'])) {
            $id = intval(filter_input(INPUT_GET, 'id', FILTER_SANITIZE_NUMBER_INT));
            return $this->reviewModel->deleteReview(intval($id)) ? true : false;
        }
    }
}

// Connect to your database
$db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');

// Create an instance of ReviewModel and ReviewController
$reviewModel = new ReviewModel($db);
$reviewController = new ReviewController($reviewModel);

?>


// review.php

class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Create new review
  public function create($user_id, $product_name, $rating, $review) {
    $query = "INSERT INTO reviews (user_id, product_name, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$user_id, $product_name, $rating, $review]);
    return $this->db->lastInsertId();
  }

  // Get all reviews
  public function getAll() {
    $query = "SELECT * FROM reviews";
    return $this->db->query($query)->fetchAll();
  }

  // Get review by ID
  public function get($id) {
    $query = "SELECT * FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$id]);
    return $stmt->fetch();
  }

  // Update review
  public function update($id, $product_name, $rating, $review) {
    $query = "UPDATE reviews SET product_name = ?, rating = ?, review = ? WHERE id = ?";
    $stmt = $this->db->prepare($query);
    return $stmt->execute([$product_name, $rating, $review, $id]);
  }

  // Delete review
  public function delete($id) {
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($query);
    return $stmt->execute([$id]);
  }
}


// db.php (database connection settings)

$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

$review = new Review($db);

// Create a new review
$user_id = 1;
$product_name = "Example Product";
$rating = 5;
$review_text = "This is an example review";

$review_id = $review->create($user_id, $product_name, $rating, $review_text);
echo "Review created with ID: $review_id
";

// Get all reviews
$reviews = $review->getAll();
foreach ($reviews as $r) {
  echo "$r[id] - $r[user_id]: $r[product_name] ($r[rating]/5)
";
}

// Update a review
$review_id = 1;
$product_name = "Updated Product Name";
$rating = 4;
$review_text = "This is an updated review";

if ($review->update($review_id, $product_name, $rating, $review_text)) {
  echo "Review updated successfully
";
} else {
  echo "Error updating review
";
}

// Delete a review
$review_id = 1;

if ($review->delete($review_id)) {
  echo "Review deleted successfully
";
} else {
  echo "Error deleting review
";
}


// database connection settings
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database";

// connect to the database
$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function createUserReview($user_id, $product_id, $rating, $review)
{
    global $conn;
    // prepare and execute the query
    $stmt = $conn->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)");
    $stmt->bind_param("iids", $product_id, $user_id, $rating, $review);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error: " . $stmt->error;
        return false;
    }
}

function readReviews($product_id = null)
{
    global $conn;
    // prepare and execute the query
    $query = "SELECT * FROM reviews";
    if ($product_id) {
        $query .= " WHERE product_id = ?";
    }
    $stmt = $conn->prepare($query);
    if ($product_id) {
        $stmt->bind_param("i", $product_id);
    }
    $stmt->execute();
    $result = $stmt->get_result();
    return $result;
}

function updateReview($id, $rating, $review)
{
    global $conn;
    // prepare and execute the query
    $query = "UPDATE reviews SET rating = ?, review = ? WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("dsi", $rating, $review, $id);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error: " . $stmt->error;
        return false;
    }
}

function deleteReview($id)
{
    global $conn;
    // prepare and execute the query
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $id);
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error: " . $stmt->error;
        return false;
    }
}


// create a new review
$user_id = 1; // user ID
$product_id = 10; // product ID
$rating = 4.5;
$review = "This is a great product!";
if (createUserReview($user_id, $product_id, $rating, $review)) {
    echo "Review created successfully.";
} else {
    echo "Failed to create review.";
}

// read reviews for a specific product
$product_id = 10;
$result = readReviews($product_id);
while ($row = $result->fetch_assoc()) {
    echo "ID: " . $row["id"] . ", Rating: " . $row["rating"] . ", Review: " . $row["review"];
}

// update a review
$id = 1; // review ID
$rating = 4.8;
$review = "This is an excellent product!";
if (updateReview($id, $rating, $review)) {
    echo "Review updated successfully.";
} else {
    echo "Failed to update review.";
}

// delete a review
$id = 1; // review ID
if (deleteReview($id)) {
    echo "Review deleted successfully.";
} else {
    echo "Failed to delete review.";
}


// db.php - database connection settings
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'username';
$password = 'password';

// Connect to the database
function connectDB() {
  global $host, $dbname, $username, $password;
  try {
    return new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
  } catch (PDOException $e) {
    echo "Error connecting to database: " . $e->getMessage();
    exit();
  }
}

// Review model
class ReviewModel {
  private $db;

  function __construct() {
    $this->db = connectDB();
  }

  // Create a new review
  function createReview($user_id, $product_id, $rating, $review) {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review)
                                VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->bindParam(":user_id", $user_id);
    $stmt->bindParam(":product_id", $product_id);
    $stmt->bindParam(":rating", $rating);
    $stmt->bindParam(":review", $review);
    return $stmt->execute();
  }

  // Get all reviews for a product
  function getReviews($product_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
    $stmt->bindParam(":product_id", $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Get a single review by ID
  function getReview($review_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :review_id");
    $stmt->bindParam(":review_id", $review_id);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  // Update a review
  function updateReview($review_id, $rating, $review) {
    $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :review_id");
    $stmt->bindParam(":review_id", $review_id);
    $stmt->bindParam(":rating", $rating);
    $stmt->bindParam(":review", $review);
    return $stmt->execute();
  }

  // Delete a review
  function deleteReview($review_id) {
    $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :review_id");
    $stmt->bindParam(":review_id", $review_id);
    return $stmt->execute();
  }
}

// User model (simplified for brevity)
class UserModel {
  private $db;

  function __construct() {
    $this->db = connectDB();
  }

  // Get user by ID
  function getUser($user_id) {
    $stmt = $this->db->prepare("SELECT * FROM users WHERE id = :user_id");
    $stmt->bindParam(":user_id", $user_id);
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }
}

// Review controller (simplified for brevity)
class ReviewController {
  private $reviewModel;

  function __construct() {
    $this->reviewModel = new ReviewModel();
  }

  // Create a new review
  function createReview($user_id, $product_id, $rating, $review) {
    return $this->reviewModel->createReview($user_id, $product_id, $rating, $review);
  }

  // Get all reviews for a product
  function getReviews($product_id) {
    return $this->reviewModel->getReviews($product_id);
  }

  // Update a review
  function updateReview($review_id, $rating, $review) {
    return $this->reviewModel->updateReview($review_id, $rating, $review);
  }

  // Delete a review
  function deleteReview($review_id) {
    return $this->reviewModel->deleteReview($review_id);
  }
}


// Create a new review controller instance
$reviewController = new ReviewController();

// Create a new user (simplified for brevity)
$userController = new UserModel();
$userData = array('name' => 'John Doe', 'email' => 'john@example.com');
$userID = $userController->getUser($userData['id']);

// Create a new review
$rating = 5;
$reviewText = 'This product is amazing!';
$isCreated = $reviewController->createReview($userID, 1, $rating, $reviewText);

// Get all reviews for a product
$reviews = $reviewController->getReviews(1);

// Update a review (simplified for brevity)
$reviewID = 1;
$newRating = 4;
$isUpdated = $reviewController->updateReview($reviewID, $newRating, '');

// Delete a review (simplified for brevity)
$deleteResult = $reviewController->deleteReview(1);


// Configuration
$dbHost = 'localhost';
$dbUsername = 'your_username';
$dbPassword = 'your_password';
$dbName = 'your_database';

// Connect to database
$conn = mysqli_connect($dbHost, $dbUsername, $dbPassword, $dbName);

function getUserReviews($userId) {
  global $conn;
  
  // Query for user reviews
  $query = "SELECT * FROM reviews WHERE user_id = '$userId'";
  $result = mysqli_query($conn, $query);
  
  return $result;
}

function getReviewCount() {
  global $conn;
  
  // Query for total review count
  $query = "SELECT COUNT(*) as review_count FROM reviews";
  $result = mysqli_query($conn, $query);
  
  return $result->fetch_assoc()['review_count'];
}

function leaveReview($productId, $rating, $review) {
  global $conn;
  
  // Query to insert new review
  $query = "INSERT INTO reviews (product_id, rating, review) VALUES ('$productId', '$rating', '$review')";
  mysqli_query($conn, $query);
}

// Function for displaying reviews
function displayReviews() {
  global $conn;
  
  // Query for all reviews
  $query = "SELECT * FROM reviews";
  $result = mysqli_query($conn, $query);
  
  while ($row = $result->fetch_assoc()) {
    echo '<div>';
    echo 'Rating: ' . $row['rating'] . '<br>';
    echo 'Review: ' . $row['review'] . '<br>';
    echo '</div>';
  }
}


// Assume user with id=1 exists in the database
$userId = 1;

// Display user's reviews
$result = getUserReviews($userId);
while ($row = $result->fetch_assoc()) {
  echo 'Review ID: ' . $row['id'] . '<br>';
}

// Leave a new review
leaveReview(1, 5, 'This product is amazing!');

// Get total review count
$totalReviews = getReviewCount();
echo 'Total Reviews: ' . $totalReviews;


class Review {
    private $id;
    private $rating;
    private $comment;
    private $product_id;

    public function __construct($id, $rating, $comment, $product_id) {
        $this->id = $id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->product_id = $product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


class ReviewModel {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function addReview(Review $review) {
        $query = "INSERT INTO reviews (product_id, rating, comment) VALUES (:product_id, :rating, :comment)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $review->getProductID());
        $stmt->bindParam(':rating', $review->getRating());
        $stmt->bindParam(':comment', $review->getComment());
        return $stmt->execute();
    }

    public function getAllReviews() {
        $query = "SELECT * FROM reviews";
        $stmt = $this->db->prepare($query);
        $stmt->execute();
        $reviews = array();
        while ($row = $stmt->fetch()) {
            $review = new Review($row['id'], $row['rating'], $row['comment'], $row['product_id']);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public function getReviewsForProduct($productId) {
        $query = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        $reviews = array();
        while ($row = $stmt->fetch()) {
            $review = new Review($row['id'], $row['rating'], $row['comment'], $row['product_id']);
            $reviews[] = $review;
        }
        return $reviews;
    }
}


class UserController extends Controller {
    public function addReview($productId) {
        if ($_SERVER['REQUEST_METHOD'] == 'POST') {
            $rating = $_POST['rating'];
            $comment = $_POST['comment'];
            $review = new Review(NULL, $rating, $comment, $productId);
            $model = new ReviewModel($db);
            $success = $model->addReview($review);
            if ($success) {
                header('Location: ' . $_SERVER['HTTP_REFERER']);
                exit;
            } else {
                echo "Error adding review";
            }
        }
    }

    public function getAllReviews() {
        $model = new ReviewModel($db);
        $reviews = $model->getAllReviews();
        return $reviews;
    }

    public function getReviewsForProduct($productId) {
        $model = new ReviewModel($db);
        $reviews = $model->getReviewsForProduct($productId);
        return $reviews;
    }
}


<form action="<?= base_url('user/add_review') ?>" method="post">
    <label for="rating">Rating:</label>
    <input type="number" id="rating" name="rating">
    <br>
    <label for="comment">Comment:</label>
    <textarea id="comment" name="comment"></textarea>
    <br>
    <button type="submit">Submit Review</button>
</form>


<?php foreach ($reviews as $review) : ?>
    <?= $review->getRating() ?> / 5 stars: <?= $review->getComment() ?>
<?php endforeach; ?>


// Define the database connection settings
define('DB_HOST', 'localhost');
define('DB_NAME', 'database_name');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');

function connectToDatabase() {
  $conn = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USER, DB_PASSWORD);
  return $conn;
}

// Create a review
function createReview($product_id, $user_id, $rating, $review) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)");
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Read all reviews for a product
function getReviewsForProduct($product_id) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Read a single review
function getReview($review_id) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("SELECT * FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $review_id);
  $stmt->execute();
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

// Update a review
function updateReview($review_id, $new_rating, $new_review) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
  $stmt->bindParam(':rating', $new_rating);
  $stmt->bindParam(':review', $new_review);
  $stmt->bindParam(':id', $review_id);
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Delete a review
function deleteReview($review_id) {
  $conn = connectToDatabase();
  $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $review_id);
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}


// Create a new review
$product_id = 1;
$user_id = 1;
$rating = 5;
$review = "This product is amazing!";
createReview($product_id, $user_id, $rating, $review);

// Get all reviews for a product
$product_reviews = getReviewsForProduct(1);
print_r($product_reviews);

// Get a single review
$single_review = getReview(1);
print_r($single_review);

// Update a review
updateReview(1, 4, "I loved it!");
$updated_review = getReview(1);
print_r($updated_review);

// Delete a review
deleteReview(1);


<?php

class Review {
    private $id;
    private $username;
    private $rating;
    private $review;

    public function __construct($id, $username, $rating, $review) {
        $this->id = $id;
        $this->username = $username;
        $this->rating = $rating;
        $this->review = $review;
    }

    public function getId() {
        return $this->id;
    }

    public function getUsername() {
        return $this->username;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}

class ReviewManager {
    private $reviews;

    public function __construct() {
        $this->reviews = array();
    }

    public function addReview(Review $review) {
        $this->reviews[] = $review;
    }

    public function getReviews($product_id = null) {
        if ($product_id !== null) {
            return array_filter($this->reviews, function($review) use ($product_id) {
                return $review->getId() === $product_id;
            });
        } else {
            return $this->reviews;
        }
    }

    public function getUserReviews($username = null) {
        if ($username !== null) {
            return array_filter($this->reviews, function($review) use ($username) {
                return $review->getUsername() === $username;
            });
        } else {
            return $this->reviews;
        }
    }

    public function getAverageRating($product_id = null) {
        if ($product_id !== null) {
            $reviews = $this->getReviews($product_id);
            $total_rating = array_sum(array_column($reviews, 'rating'));
            return count($reviews) > 0 ? $total_rating / count($reviews) : 0;
        } else {
            $reviews = $this->reviews;
            $total_rating = array_sum(array_column($reviews, 'rating'));
            return count($reviews) > 0 ? $total_rating / count($reviews) : 0;
        }
    }

    public function getReviewCount() {
        return count($this->reviews);
    }
}

// Example usage:
$review_manager = new ReviewManager();

$review1 = new Review(1, 'John Doe', 5, 'Great product!');
$review2 = new Review(2, 'Jane Doe', 4, 'Good but not great.');
$review3 = new Review(1, 'John Doe', 5, 'Love this product!');

$review_manager->addReview($review1);
$review_manager->addReview($review2);
$review_manager->addReview($review3);

echo "Reviews for product with ID 1:
";
print_r($review_manager->getReviews(1));

echo "
Average rating for product with ID 1:
";
echo $review_manager->getAverageRating(1);

echo "
User reviews from John Doe:
";
print_r($review_manager->getUserReviews('John Doe'));

echo "
Total review count:
";
echo $review_manager->getReviewCount();

?>


// Review Model
class Review {
    private $id;
    private $productId;
    private $userId;
    private $rating;
    private $review;

    public function __construct($id = null) {
        if ($id !== null) {
            $this->load($id);
        }
    }

    public function load($id) {
        // Assuming we have a database connection
        global $db;

        $query = "SELECT * FROM reviews WHERE id = ?";
        $stmt = $db->prepare($query);
        $stmt->execute([$id]);
        $result = $stmt->fetch();

        if ($result !== false) {
            $this->id = $result['id'];
            $this->productId = $result['product_id'];
            $this->userId = $result['user_id'];
            $this->rating = $result['rating'];
            $this->review = $result['review'];
        }
    }

    public function save() {
        // Assuming we have a database connection
        global $db;

        if ($this->id === null) {
            $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)";
            $stmt = $db->prepare($query);
            $stmt->execute([$this->productId, $this->userId, $this->rating, $this->review]);
            $this->id = $db->lastInsertId();
        } else {
            $query = "UPDATE reviews SET product_id = ?, user_id = ?, rating = ?, review = ? WHERE id = ?";
            $stmt = $db->prepare($query);
            $stmt->execute([$this->productId, $this->userId, $this->rating, $this->review, $this->id]);
        }
    }

    // Getters and setters
    public function getId() {
        return $this->id;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}


// User Review Function
function addUserReview($productId, $userId, $rating, $review) {
    // Create a new review object
    $review = new Review();

    // Set the product ID and user ID
    $review->setProductId($productId);
    $review->setUserId($userId);

    // Set the rating and review text
    $review->setRating($rating);
    $review->setReview($review);

    // Save the review to the database
    $review->save();

    return true;
}


// Add a new review for a product
$product_id = 1; // Product ID
$user_id = 1;    // User ID
$rating = 5;     // Rating (out of 5)
$review_text = 'This product is amazing!'; // Review text

addUserReview($product_id, $user_id, $rating, $review_text);


// Get all reviews for a product
function getReviewsForProduct($productId) {
    // Create an array to store the reviews
    $reviews = [];

    // Query the database for reviews
    global $db;

    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $db->prepare($query);
    $stmt->execute([$productId]);

    $results = $stmt->fetchAll();

    foreach ($results as $result) {
        $review = new Review();
        $review->load($result['id']);
        $reviews[] = $review;
    }

    return $reviews;
}


// Display reviews for a product
$product_id = 1; // Product ID

$reviews = getReviewsForProduct($product_id);

foreach ($reviews as $review) {
    echo 'Rating: ' . $review->getRating() . '/5';
    echo '<br>';
    echo 'Review: ';
    echo $review->getReview();
    echo '<hr>';
}


// Calculate the average rating for a product
function getAverageRatingForProduct($productId) {
    // Initialize variables to store the sum of ratings and count of reviews
    $sum_ratings = 0;
    $count_reviews = 0;

    // Query the database for reviews
    global $db;

    $query = "SELECT rating FROM reviews WHERE product_id = ?";
    $stmt = $db->prepare($query);
    $stmt->execute([$productId]);

    $results = $stmt->fetchAll();

    foreach ($results as $result) {
        $sum_ratings += $result['rating'];
        $count_reviews++;
    }

    // Calculate the average rating
    if ($count_reviews > 0) {
        return round($sum_ratings / $count_reviews, 2);
    } else {
        return 'No reviews yet!';
    }
}


// Display the average rating for a product
$product_id = 1; // Product ID

$average_rating = getAverageRatingForProduct($product_id);

echo 'Average Rating: ' . $average_rating;


class Review {
    private $db;
    private $id;
    private $product_id;
    private $user_id;
    private $rating;
    private $review;

    public function __construct($db) {
        $this->db = $db;
    }

    public function setId($id) {
        $this->id = (int) $id;
    }

    public function setProductId($product_id) {
        $this->product_id = (int) $id;
    }

    public function setUserId($user_id) {
        $this->user_id = (int) $id;
    }

    public function setRating($rating) {
        $this->rating = (int) $rating;
    }

    public function setReview($review) {
        $this->review = trim($review);
    }

    public function save() {
        if ($this->id) {
            // Update existing review
            return $this->db->update('reviews', ['rating' => $this->rating, 'review' => $this->review], ['id' => $this->id]);
        } else {
            // Insert new review
            return $this->db->insert('reviews', [
                'product_id' => $this->product_id,
                'user_id' => $this->user_id,
                'rating' => $this->rating,
                'review' => $this->review
            ]);
        }
    }

    public function getReview() {
        return $this->db->get('reviews', ['id', 'product_id', 'user_id', 'rating', 'review'], ['id' => $this->id]);
    }

    public function delete() {
        return $this->db->delete('reviews', ['id' => $this->id]);
    }
}


class ReviewManager {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function getReviewsForProduct($product_id) {
        return $this->db->get('reviews', ['id', 'rating', 'review'], ['product_id' => $product_id]);
    }

    public function getUserReviews($user_id) {
        return $this->db->get('reviews', ['id', 'rating', 'review'], ['user_id' => $user_id]);
    }

    public function addReview($review_data) {
        $review = new Review($this->db);
        foreach ($review_data as $key => $value) {
            $review->$key = $value;
        }
        return $review->save();
    }

    public function editReview($review_id, $new_review_data) {
        $review = new Review($this->db);
        $review->setId($review_id);
        foreach ($new_review_data as $key => $value) {
            $review->$key = $value;
        }
        return $review->save();
    }

    public function deleteReview($review_id) {
        $review = new Review($this->db);
        $review->setId($review_id);
        return $review->delete();
    }
}


$db = new Database(); // Connect to database
$review_manager = new ReviewManager($db);

// Add a review for product 1 by user 1 with rating 5 and review "Great product!"
$review_data = [
    'product_id' => 1,
    'user_id' => 1,
    'rating' => 5,
    'review' => 'Great product!'
];
$result = $review_manager->addReview($review_data);

// Get reviews for product 1
$product_reviews = $review_manager->getReviewsForProduct(1);
print_r($product_reviews);

// Edit review with id 1 to change rating to 4 and review to "Good product"
$edit_review_data = [
    'rating' => 4,
    'review' => 'Good product'
];
$result = $review_manager->editReview(1, $edit_review_data);

// Delete review with id 2
$result = $review_manager->deleteReview(2);


<?php
// Include the database connection file
require_once 'database.php';

function add_review($product_id, $rating, $review, $user_name) {
  // Insert the review into the database
  $query = "INSERT INTO reviews (product_id, rating, review, user_name)
            VALUES (:product_id, :rating, :review, :user_name)";
  try {
    $stmt = $db->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':user_name', $user_name);
    $stmt->execute();
  } catch (PDOException $e) {
    echo "Error adding review: " . $e->getMessage();
  }
}

function view_reviews($product_id = null) {
  if ($product_id !== null) {
    // Get reviews for a specific product
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    try {
      $stmt = $db->prepare($query);
      $stmt->bindParam(':product_id', $product_id);
      $stmt->execute();
      return $stmt->fetchAll();
    } catch (PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
    }
  } else {
    // Get all reviews
    $query = "SELECT * FROM reviews";
    try {
      $stmt = $db->prepare($query);
      $stmt->execute();
      return $stmt->fetchAll();
    } catch (PDOException $e) {
      echo "Error getting reviews: " . $e->getMessage();
    }
  }
}
?>


// Add a review for product with ID 1
add_review(1, 5, 'Great product!', 'John Doe');

// Get all reviews
$reviews = view_reviews();
foreach ($reviews as $review) {
  echo "Rating: $review[rating], Review: $review[review], User Name: $review[user_name]";
}

// Get reviews for a specific product (ID 1)
$product_reviews = view_reviews(1);
foreach ($product_reviews as $review) {
  echo "Rating: $review[rating], Review: $review[review], User Name: $review[user_name]";
}


// db.php: configuration file for our database

<?php
$dsn = 'mysql:host=localhost;dbname=your_database';
$user = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $user, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

function addReview($review, $rating, $productId, $userId)
{
    global $pdo;

    try {
        $stmt = $pdo->prepare('INSERT INTO reviews (review, rating, product_id, user_id) VALUES (:review, :rating, :product_id, :user_id)');
        $stmt->bindParam(':review', $review);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':user_id', $userId);
        $stmt->execute();
    } catch (PDOException $e) {
        echo 'Error adding review: ' . $e->getMessage();
    }
}

function viewReviews()
{
    global $pdo;

    try {
        $stmt = $pdo->prepare('SELECT reviews.id, users.name AS username, products.name AS product_name, reviews.review, reviews.rating FROM reviews INNER JOIN users ON reviews.user_id = users.id INNER JOIN products ON reviews.product_id = products.id');
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo 'Error viewing reviews: ' . $e->getMessage();
    }
}

function deleteReview($reviewId)
{
    global $pdo;

    try {
        $pdo->exec('DELETE FROM reviews WHERE id = :id', array(':id' => $reviewId));
    } catch (PDOException $e) {
        echo 'Error deleting review: ' . $e->getMessage();
    }
}


// index.php

require_once('db.php');

if (isset($_POST['add_review'])) {
    $review = $_POST['review'];
    $rating = $_POST['rating'];
    $productId = 1; // replace with product ID from database
    $userId = 1; // replace with user ID from database
    addReview($review, $rating, $productId, $userId);
}

if (isset($_POST['delete_review'])) {
    $reviewId = $_POST['review_id'];
    deleteReview($reviewId);
}

reviews = viewReviews();

?>

<!-- HTML for adding reviews -->
<form action="" method="post">
    <input type="text" name="review" placeholder="Write a review...">
    <input type="number" min="1" max="5" name="rating" placeholder="Rating (out of 5)">
    <button type="submit" name="add_review">Add Review</button>
</form>

<!-- HTML for displaying reviews -->
<h2>Reviews:</h2>
<ul>
<?php foreach ($reviews as $review) { ?>
    <li><?php echo $review['username'] ?> gave <?php echo $review['product_name'] ?> <?php echo $review['rating'] ?>/5: "<?php echo $review['review'] ?>"</li>
<?php } ?>
</ul>

<!-- HTML for deleting reviews -->
<form action="" method="post">
    <input type="number" name="review_id" placeholder="Review ID to delete...">
    <button type="submit" name="delete_review">Delete Review</button>
</form>


// db.php (database connection file)

<?php

class Database {
  private $db;

  function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
  }

  function query($sql, $params = array()) {
    $stmt = $this->db->prepare($sql);
    $stmt->execute($params);
    return $stmt;
  }
}

// review.php (review handling file)

<?php

require_once 'db.php';

class ReviewSystem {
  private $db;

  function __construct() {
    $this->db = new Database();
  }

  // Add a new review
  function addReview($user_id, $product_id, $rating, $review) {
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
    $params = array(
      ':user_id' => $user_id,
      ':product_id' => $product_id,
      ':rating' => $rating,
      ':review' => $review
    );
    $this->db->query($sql, $params);
  }

  // Get all reviews for a product
  function getReviewsForProduct($product_id) {
    $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
    $params = array(
      ':product_id' => $product_id
    );
    return $this->db->query($sql, $params)->fetchAll();
  }

  // Get all reviews for a user
  function getReviewsForUser($user_id) {
    $sql = "SELECT * FROM reviews WHERE user_id = :user_id";
    $params = array(
      ':user_id' => $user_id
    );
    return $this->db->query($sql, $params)->fetchAll();
  }

  // Get a single review by id
  function getReviewById($review_id) {
    $sql = "SELECT * FROM reviews WHERE id = :review_id";
    $params = array(
      ':review_id' => $review_id
    );
    return $this->db->query($sql, $params)->fetch();
  }

  // Update an existing review
  function updateReview($review_id, $new_rating, $new_review) {
    $sql = "UPDATE reviews SET rating = :rating, review = :review WHERE id = :id";
    $params = array(
      ':rating' => $new_rating,
      ':review' => $new_review,
      ':id' => $review_id
    );
    return $this->db->query($sql, $params);
  }

  // Delete a review by id
  function deleteReview($review_id) {
    $sql = "DELETE FROM reviews WHERE id = :review_id";
    $params = array(
      ':review_id' => $review_id
    );
    return $this->db->query($sql, $params);
  }
}

// Example usage:

$reviewSystem = new ReviewSystem();
$user_id = 1;
$product_id = 1;

// Add a new review
$rating = 5;
$review = 'This is an awesome product!';
$reviewSystem->addReview($user_id, $product_id, $rating, $review);

// Get all reviews for a product
$reviews = $reviewSystem->getReviewsForProduct($product_id);
print_r($reviews);

// Get all reviews for a user
$reviews = $reviewSystem->getReviewsForUser($user_id);
print_r($reviews);

// Get a single review by id
$review = $reviewSystem->getReviewById(1);
print_r($review);

// Update an existing review
$new_rating = 4;
$new_review = 'I loved this product!';
$result = $reviewSystem->updateReview(1, $new_rating, $new_review);
echo $result ? "Review updated successfully!" : "Failed to update review.";

// Delete a review by id
$result = $reviewSystem->deleteReview(1);
echo $result ? "Review deleted successfully!" : "Failed to delete review.";


// config.php - database connection settings
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'database';

// connect to database
$conn = new PDO("mysql:host=$db_host;dbname=$db_name", $db_username, $db_password);

function display_reviews($product_id) {
  global $conn;
  
  // get product name from products table
  $stmt = $conn->prepare("SELECT name FROM products WHERE id=:id");
  $stmt->bindParam(':id', $product_id);
  $stmt->execute();
  $product_name = $stmt->fetchColumn();

  // display reviews for this product
  $reviews_query = "SELECT r.id, r.product_id, r.user_id, u.name AS username, r.rating, r.review FROM reviews r 
                     INNER JOIN users u ON r.user_id=u.id 
                     WHERE r.product_id=:product_id ORDER BY r.id DESC";
  
  $stmt = $conn->prepare($reviews_query);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

  echo "<h2>$product_name Reviews</h2>";
  if ($reviews) {
    foreach ($reviews as $review) {
      echo "<p><strong>" . $review['username'] . ":</strong> " . $review['rating'] . "/5 - " . $review['review'] . "</p>";
    }
  } else {
    echo "<p>No reviews for this product yet!</p>";
  }
}

function submit_review($product_id, $user_id, $rating, $review) {
  global $conn;
  
  // insert review into reviews table
  $stmt = $conn->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)");
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review', $review);
  $stmt->execute();
}

// example usage:
display_reviews(1); // display reviews for product with id=1


// Function to get all reviews for a product
function getReviews($productId) {
  $pdo = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
  $stmt = $pdo->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to get a single review
function getReview($reviewId) {
  $pdo = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
  $stmt = $pdo->prepare("SELECT * FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $reviewId);
  $stmt->execute();
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

// Function to create a new review
function createReview($productId, $rating, $title, $review, $userId) {
  $pdo = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
  $stmt = $pdo->prepare("INSERT INTO reviews (product_id, rating, title, review, user_id) VALUES (:product_id, :rating, :title, :review, :user_id)");
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':title', $title);
  $stmt->bindParam(':review', $review);
  $stmt->bindParam(':user_id', $userId);
  return $stmt->execute();
}

// Function to update an existing review
function updateReview($reviewId, $newRating, $newTitle, $newReview) {
  $pdo = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
  $stmt = $pdo->prepare("UPDATE reviews SET rating = :rating, title = :title, review = :review WHERE id = :id");
  $stmt->bindParam(':rating', $newRating);
  $stmt->bindParam(':title', $newTitle);
  $stmt->bindParam(':review', $newReview);
  $stmt->bindParam(':id', $reviewId);
  return $stmt->execute();
}

// Function to delete a review
function deleteReview($reviewId) {
  $pdo = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
  $stmt = $pdo->prepare("DELETE FROM reviews WHERE id = :id");
  $stmt->bindParam(':id', $reviewId);
  return $stmt->execute();
}


// Create a new review
$product_id = 1;
$rating = 5;
$title = "Great product!";
$review = "I love this product!";
$user_id = 1;

if (createReview($product_id, $rating, $title, $review, $user_id)) {
  echo "Review created successfully!";
} else {
  echo "Error creating review.";
}

// Get all reviews for a product
$product_id = 1;
$reviews = getReviews($product_id);
foreach ($reviews as $review) {
  echo "Title: " . $review['title'] . "
";
  echo "Rating: " . $review['rating'] . "
";
  echo "Review: " . $review['review'] . "

";
}

// Get a single review
$review_id = 1;
$review = getReview($review_id);
echo "Title: " . $review['title'] . "
";
echo "Rating: " . $review['rating'] . "
";
echo "Review: " . $review['review'] . "

";

// Update an existing review
$review_id = 1;
$new_rating = 4;
$new_title = "Great product, but...";
$new_review = "I love this product, but there are some issues with it.";

if (updateReview($review_id, $new_rating, $new_title, $new_review)) {
  echo "Review updated successfully!";
} else {
  echo "Error updating review.";
}

// Delete a review
$review_id = 1;

if (deleteReview($review_id)) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review.";
}


<?php

// Define the database connection settings
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Create a PDO instance
$conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);

// Function to add a review
function addReview($user_id, $product_id, $rating, $review) {
  global $conn;
  
  // Prepare the query
  $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
  
  // Bind the parameters
  $stmt->bindParam(":user_id", $user_id);
  $stmt->bindParam(":product_id", $product_id);
  $stmt->bindParam(":rating", $rating);
  $stmt->bindParam(":review", $review);
  
  // Execute the query
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to get all reviews for a user
function getUserReviews($user_id) {
  global $conn;
  
  // Prepare the query
  $stmt = $conn->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
  
  // Bind the parameter
  $stmt->bindParam(":user_id", $user_id);
  
  // Execute the query and fetch the results
  if ($stmt->execute()) {
    return $stmt->fetchAll();
  } else {
    return array();
  }
}

// Function to get a review by its ID
function getReview($review_id) {
  global $conn;
  
  // Prepare the query
  $stmt = $conn->prepare("SELECT * FROM reviews WHERE id = :review_id");
  
  // Bind the parameter
  $stmt->bindParam(":review_id", $review_id);
  
  // Execute the query and fetch the result
  if ($stmt->execute()) {
    return $stmt->fetch();
  } else {
    return null;
  }
}

// Function to update a review
function updateReview($review_id, $rating, $review) {
  global $conn;
  
  // Prepare the query
  $stmt = $conn->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :review_id");
  
  // Bind the parameters
  $stmt->bindParam(":rating", $rating);
  $stmt->bindParam(":review", $review);
  $stmt->bindParam(":review_id", $review_id);
  
  // Execute the query
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to delete a review
function deleteReview($review_id) {
  global $conn;
  
  // Prepare the query
  $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :review_id");
  
  // Bind the parameter
  $stmt->bindParam(":review_id", $review_id);
  
  // Execute the query
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

?>


// Add a new review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = "Great product!";
addReview($user_id, $product_id, $rating, $review);

// Get all reviews for a user
$user_id = 1;
$reviews = getUserReviews($user_id);
print_r($reviews);

// Get a review by its ID
$review_id = 1;
$review = getReview($review_id);
print_r($review);

// Update a review
$review_id = 1;
$rating = 4;
$review = "Good product, but not great.";
updateReview($review_id, $rating, $review);

// Delete a review
$review_id = 1;
deleteReview($review_id);


// db.php: database connection file

// Establish a database connection
$conn = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');

// Function to get all reviews for a product
function getAllReviews($productId) {
  global $conn;
  $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = ?");
  $stmt->execute([$productId]);
  return $stmt->fetchAll();
}

// Function to add a new review
function addReview($product_id, $user_id, $rating, $review) {
  global $conn;
  $stmt = $conn->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)");
  $stmt->execute([$product_id, $user_id, $rating, $review]);
}

// Function to handle a POST request from the client
function handleReviewPost() {
  global $conn;
  if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    extract($_POST);
    // Validate input data
    if (empty($product_id) || empty($user_id) || !is_numeric($rating) || empty($review)) {
      echo "Invalid input";
      return false;
    }
    
    // Add review to database
    addReview($product_id, $user_id, $rating, $review);
    echo "Review added successfully!";
  } else {
    echo "Invalid request method";
  }
}

// Function to handle a GET request from the client
function getReviewsForProduct() {
  global $conn;
  if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    extract($_GET);
    // Get reviews for product by ID
    $reviews = getAllReviews($product_id);
    echo json_encode($reviews);
  } else {
    echo "Invalid request method";
  }
}


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function createReview($product_id, $rating, $comment, $user_id) {
    $query = "INSERT INTO reviews (product_id, rating, comment, user_id)
              VALUES (:product_id, :rating, :comment, :user_id)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->bindParam(':user_id', $user_id);
    return $stmt->execute();
  }

  public function getReviews($product_id) {
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getUserReviews($user_id) {
    $query = "SELECT * FROM reviews WHERE user_id = :user_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }
}


class UserReview {
  private $review;

  public function __construct($db) {
    $this->review = new Review($db);
  }

  public function addReview($product_id, $rating, $comment, $user_id) {
    return $this->review->createReview($product_id, $rating, $comment, $user_id);
  }

  public function getReviewsForProduct($product_id) {
    return $this->review->getReviews($product_id);
  }

  public function getReviewsByUser($user_id) {
    return $this->review->getUserReviews($user_id);
  }
}


$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

$user_review = new UserReview($db);

$product_id = 1;
$rating = 5;
$comment = 'Great product!';
$user_id = 1;

$user_review->addReview($product_id, $rating, $comment, $user_id);

$reviews_for_product = $user_review->getReviewsForProduct($product_id);
echo json_encode($reviews_for_product);

$reviews_by_user = $user_review->getReviewsByUser($user_id);
echo json_encode($reviews_by_user);


<?php

// Define the Review class
class Review {
    public $id;
    public $product_id;
    public $rating;
    public $review_text;
    public $user_name;
    public $created_at;

    // Constructor to initialize the object properties
    public function __construct($id, $product_id, $rating, $review_text, $user_name) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->review_text = $review_text;
        $this->user_name = $user_name;
        $this->created_at = date('Y-m-d H:i:s');
    }

    // Method to display the review
    public function displayReview() {
        return "Product ID: $this->product_id, Rating: $this->rating, User Name: $this->user_name, Review Text: $this->review_text, Created At: $this->created_at";
    }
}

// Function to create a new review
function create_review($data) {
    // Validate the input data
    if (!isset($data['product_id']) || !isset($data['rating']) || !isset($data['review_text'])) {
        throw new Exception('Invalid input data');
    }

    // Create a new Review object
    $new_review = new Review(null, $data['product_id'], $data['rating'], $data['review_text'], $data['user_name']);

    // Save the review to database (for simplicity, assume we have a function called 'save_to_database' that does this)
    save_to_database($new_review);

    return $new_review;
}

// Function to display all reviews
function get_reviews() {
    // Assume we have an array of Review objects in our example code for simplicity
    $reviews = [
        new Review(1, 1, 5, 'Great product!', 'John Doe'),
        new Review(2, 1, 4, 'Good product.', 'Jane Smith'),
        new Review(3, 2, 3, 'Average product.', 'Bob Johnson')
    ];

    foreach ($reviews as $review) {
        echo $review->displayReview() . "
";
    }
}

// Function to save a review to database (for simplicity, assume we have this function)
function save_to_database($review) {
    // Simulate saving the review to database
    return true;
}

// Example usage:
$data = [
    'product_id' => 1,
    'rating' => 5,
    'review_text' => 'Great product!',
    'user_name' => 'John Doe'
];

try {
    $new_review = create_review($data);
    echo "New review created successfully!" . "
";
} catch (Exception $e) {
    echo "Error creating new review: " . $e->getMessage() . "
";
}

get_reviews();

?>


class Review {
  private $db;

  public function __construct() {
    $this->db = new mysqli('localhost', 'username', 'password', 'database_name');
  }

  /**
   * Add a new review to the database.
   *
   * @param int $user_id
   * @param int $product_id
   * @param int $rating
   * @param string $review
   */
  public function addReview($user_id, $product_id, $rating, $review) {
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }

    $sql = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param('iiss', $user_id, $product_id, $rating, $review);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error adding review: " . $stmt->error;
    }
  }

  /**
   * Retrieve all reviews for a specific product.
   *
   * @param int $product_id
   */
  public function getReviews($product_id) {
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }

    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param('i', $product_id);
    if ($stmt->execute()) {
      return $stmt->get_result();
    } else {
      echo "Error retrieving reviews: " . $stmt->error;
    }
  }

  /**
   * Retrieve a single review by its ID.
   *
   * @param int $review_id
   */
  public function getReview($review_id) {
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }

    $sql = "SELECT * FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param('i', $review_id);
    if ($stmt->execute()) {
      return $stmt->get_result()->fetch_assoc();
    } else {
      echo "Error retrieving review: " . $stmt->error;
    }
  }

  /**
   * Update a review in the database.
   *
   * @param int $review_id
   * @param int $user_id
   * @param int $product_id
   * @param int $rating
   * @param string $review
   */
  public function updateReview($review_id, $user_id, $product_id, $rating, $review) {
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }

    $sql = "UPDATE reviews SET user_id = ?, product_id = ?, rating = ?, review = ?
            WHERE id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param('iisss', $user_id, $product_id, $rating, $review, $review_id);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error updating review: " . $stmt->error;
    }
  }

  /**
   * Delete a review from the database.
   *
   * @param int $review_id
   */
  public function deleteReview($review_id) {
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }

    $sql = "DELETE FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param('i', $review_id);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error deleting review: " . $stmt->error;
    }
  }
}


$review = new Review();

// Add a new review
$user_id = 1;
$product_id = 2;
$rating = 4;
$review_text = 'Great product!';
if ($review->addReview($user_id, $product_id, $rating, $review_text)) {
  echo "Review added successfully!";
}

// Retrieve all reviews for a specific product
$product_id = 3;
$reviews = $review->getReviews($product_id);
foreach ($reviews as $review) {
  echo "User ID: " . $review['user_id'] . ", Rating: " . $review['rating'];
}

// Retrieve a single review by its ID
$review_id = 1;
$single_review = $review->getReview($review_id);
echo "Review Text: " . $single_review['review'];

// Update a review
$new_user_id = 2;
$new_product_id = 4;
$new_rating = 5;
$new_review_text = 'Even better!';
if ($review->updateReview($review_id, $new_user_id, $new_product_id, $new_rating, $new_review_text)) {
  echo "Review updated successfully!";
}

// Delete a review
$review->deleteReview($review_id);
echo "Review deleted successfully!";


function review_product($product_id, $rating, $comment, $user_id) {
  // Validate input data
  if (!is_numeric($product_id)) {
    throw new Exception("Invalid product ID");
  }
  if (!is_int($rating) || $rating < 1 || $rating > 5) {
    throw new Exception("Invalid rating (must be between 1 and 5)");
  }
  if (!$comment) {
    throw new Exception("Comment is required");
  }

  // Get user data
  $user = get_user($user_id);

  // Get product data
  $product = get_product($product_id);

  // Check if review already exists for this product and user
  if (review_exists($product_id, $user_id)) {
    throw new Exception("You have already reviewed this product");
  }

  // Insert review into database
  try {
    $db = connect_to_database();
    $query = "INSERT INTO reviews SET 
      user_id = :user_id,
      product_id = :product_id,
      rating = :rating,
      comment = :comment";
    $stmt = $db->prepare($query);
    $stmt->bindParam(":user_id", $user_id);
    $stmt->bindParam(":product_id", $product_id);
    $stmt->bindParam(":rating", $rating);
    $stmt->bindParam(":comment", $comment);
    $stmt->execute();
  } catch (PDOException $e) {
    throw new Exception("Error inserting review: " . $e->getMessage());
  }

  // Return success response
  return array(
    "message" => "Review submitted successfully",
    "review_id" => $db->lastInsertId()
  );
}

function get_user($user_id) {
  // Get user data from database
  try {
    $db = connect_to_database();
    $query = "SELECT * FROM users WHERE id = :id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(":id", $user_id);
    $stmt->execute();
    return $stmt->fetch();
  } catch (PDOException $e) {
    throw new Exception("Error getting user data: " . $e->getMessage());
  }
}

function get_product($product_id) {
  // Get product data from database
  try {
    $db = connect_to_database();
    $query = "SELECT * FROM products WHERE id = :id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(":id", $product_id);
    $stmt->execute();
    return $stmt->fetch();
  } catch (PDOException $e) {
    throw new Exception("Error getting product data: " . $e->getMessage());
  }
}

function review_exists($product_id, $user_id) {
  // Check if review already exists for this product and user
  try {
    $db = connect_to_database();
    $query = "SELECT COUNT(*) FROM reviews WHERE product_id = :product_id AND user_id = :user_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(":product_id", $product_id);
    $stmt->bindParam(":user_id", $user_id);
    $stmt->execute();
    return (int) $stmt->fetchColumn() > 0;
  } catch (PDOException $e) {
    throw new Exception("Error checking review existence: " . $e->getMessage());
  }
}


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
function connectDatabase() {
  $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Create review table if it doesn't exist
function createReviewTable($conn) {
  $sql = "CREATE TABLE IF NOT EXISTS reviews (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id INT,
          product_id INT,
          rating TINYINT(1),
          comment TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)";
  if (!$conn->query($sql)) {
    die("Error creating review table: " . $conn->error);
  }
}

// Get reviews for a specific product
function getReviewsForProduct($product_id, $limit = null) {
  $conn = connectDatabase();
  createReviewTable($conn);

  $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
  if ($limit) {
    $sql .= " LIMIT $limit";
  }

  $result = $conn->query($sql);
  return $result->fetch_all(MYSQLI_ASSOC);
}

// Get a specific review by id
function getReviewById($review_id) {
  $conn = connectDatabase();
  createReviewTable($conn);

  $sql = "SELECT * FROM reviews WHERE id = '$review_id'";
  $result = $conn->query($sql);
  return $result->fetch_assoc();
}

// Create a new review
function createReview($user_id, $product_id, $rating, $comment) {
  $conn = connectDatabase();
  createReviewTable($conn);

  $sql = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES ('$user_id', '$product_id', '$rating', '$comment')";
  if (!$conn->query($sql)) {
    die("Error creating review: " . $conn->error);
  }
}

// Update an existing review
function updateReview($review_id, $new_rating, $new_comment) {
  $conn = connectDatabase();
  createReviewTable($conn);

  $sql = "UPDATE reviews SET rating = '$new_rating', comment = '$new_comment' WHERE id = '$review_id'";
  if (!$conn->query($sql)) {
    die("Error updating review: " . $conn->error);
  }
}

// Delete a review
function deleteReview($review_id) {
  $conn = connectDatabase();
  createReviewTable($conn);

  $sql = "DELETE FROM reviews WHERE id = '$review_id'";
  if (!$conn->query($sql)) {
    die("Error deleting review: " . $conn->error);
  }
}

?>


// Get all reviews for product with ID 123
$reviews = getReviewsForProduct(123, 10);

foreach ($reviews as $review) {
  echo "Review ID: {$review['id']}<br>";
  echo "User ID: {$review['user_id']}<br>";
  echo "Product ID: {$review['product_id']}<br>";
  echo "Rating: {$review['rating']}<br>";
  echo "Comment: {$review['comment']}<br><br>";
}

// Create a new review for product with ID 123
createReview(1, 123, 5, 'This is a great product!');

// Update an existing review
updateReview(1, 4, 'I changed my mind...');

// Delete a review
deleteReview(2);


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_db';
$user = 'root';
$password = '';

// Connect to database
$conn = new mysqli($host, $user, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function add_review($product_id, $rating, $comment) {
    // Add review to database
    $sql = "INSERT INTO reviews (product_id, rating, comment, created_at)
            VALUES ('$product_id', '$rating', '$comment', NOW())";
    if ($conn->query($sql) === TRUE) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review: " . $conn->error;
    }
}

function get_reviews($product_id) {
    // Retrieve reviews from database
    $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            echo "<p>Rating: $row[rating]</p>";
            echo "<p>Comment: $row[comment]</p>";
            echo "<hr>";
        }
    } else {
        echo "No reviews found for this product.";
    }
}

function update_review($review_id, $rating, $comment) {
    // Update review in database
    $sql = "UPDATE reviews SET rating = '$rating', comment = '$comment' WHERE id = '$review_id'";
    if ($conn->query($sql) === TRUE) {
        echo "Review updated successfully!";
    } else {
        echo "Error updating review: " . $conn->error;
    }
}

function delete_review($review_id) {
    // Delete review from database
    $sql = "DELETE FROM reviews WHERE id = '$review_id'";
    if ($conn->query($sql) === TRUE) {
        echo "Review deleted successfully!";
    } else {
        echo "Error deleting review: " . $conn->error;
    }
}

// Close connection
$conn->close();

?>


add_review(1, 5, "Great product!");


get_reviews(1);



update_review(1, 4, "Good product, but... ");



delete_review(1);


<?php

class Review {
  private $db;

  public function __construct() {
    $this->db = new mysqli('localhost', 'username', 'password', 'database');
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }
  }

  public function addReview($productId, $userId, $rating, $comment) {
    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
            VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param("iiss", $productId, $userId, $rating, $comment);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error: " . $stmt->error;
      return false;
    }
  }

  public function getReviewsForProduct($productId) {
    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param("i", $productId);
    if ($stmt->execute()) {
      return $stmt->get_result();
    } else {
      echo "Error: " . $stmt->error;
      return false;
    }
  }

  public function getReviewsForUser($userId) {
    $sql = "SELECT * FROM reviews WHERE user_id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param("i", $userId);
    if ($stmt->execute()) {
      return $stmt->get_result();
    } else {
      echo "Error: " . $stmt->error;
      return false;
    }
  }

  public function deleteReview($reviewId) {
    $sql = "DELETE FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param("i", $reviewId);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error: " . $stmt->error;
      return false;
    }
  }

  public function updateReview($reviewId, $rating, $comment) {
    $sql = "UPDATE reviews SET rating = ?, comment = ?
            WHERE id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param("is", $rating, $comment, $reviewId);
    if ($stmt->execute()) {
      return true;
    } else {
      echo "Error: " . $stmt->error;
      return false;
    }
  }

}

?>


$review = new Review();

// Add a review
if ($review->addReview(1, 1, 5, 'Great product!')) {
  echo 'Review added successfully!';
} else {
  echo 'Error adding review';
}

// Get reviews for a product
$results = $review->getReviewsForProduct(1);
while ($row = $results->fetch_assoc()) {
  echo $row['rating'] . ': ' . $row['comment'];
}

// Get reviews for a user
$results = $review->getReviewsForUser(1);
while ($row = $results->fetch_assoc()) {
  echo $row['product_id'] . ': ' . $row['rating'] . ': ' . $row['comment'];
}

// Delete a review
if ($review->deleteReview(1)) {
  echo 'Review deleted successfully!';
} else {
  echo 'Error deleting review';
}

// Update a review
if ($review->updateReview(1, 4, 'Good product!')) {
  echo 'Review updated successfully!';
} else {
  echo 'Error updating review';
}


<?php

// Configuration
$db_host = 'your_database_host';
$db_username = 'your_database_username';
$db_password = 'your_database_password';
$db_name = 'your_database_name';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function createUserReview($user_id, $product_id, $rating, $review)
{
    global $conn;
    
    // Check if review already exists
    $sql = "SELECT * FROM reviews WHERE user_id = '$user_id' AND product_id = '$product_id'";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        return false; // Review already exists for this user and product
    }
    
    // Insert review into database
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES ('$user_id', '$product_id', '$rating', '$review')";
    if ($conn->query($sql) === TRUE) {
        return true; // Review created successfully
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false; // Error creating review
    }
}

function getUserReviews($user_id)
{
    global $conn;
    
    // Retrieve all reviews for this user
    $sql = "SELECT * FROM reviews WHERE user_id = '$user_id'";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        return $result; // Reviews retrieved successfully
    } else {
        echo "Error: No reviews found for this user";
        return false; // Error retrieving reviews
    }
}

function getAverageRating($product_id)
{
    global $conn;
    
    // Retrieve average rating for this product
    $sql = "SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        return $result->fetch_assoc()['average_rating']; // Average rating retrieved successfully
    } else {
        echo "Error: No ratings found for this product";
        return false; // Error retrieving average rating
    }
}

?>


// Create a new review for a user
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = 'Great product!';

if (createUserReview($user_id, $product_id, $rating, $review)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review";
}

// Retrieve all reviews for a user
$user_reviews = getUserReviews($user_id);

if ($user_reviews) {
    while ($row = $user_reviews->fetch_assoc()) {
        echo 'Rating: ' . $row['rating'] . ', Review: ' . $row['review'];
    }
} else {
    echo "Error retrieving reviews";
}

// Retrieve average rating for a product
$product_id = 1;
$average_rating = getAverageRating($product_id);

if ($average_rating) {
    echo 'Average rating: ' . $average_rating;
} else {
    echo "Error retrieving average rating";
}


function createUserReview($userId, $productId, $rating, $review) {
    try {
        // Connect to database
        $conn = new PDO('mysql:host=localhost;dbname=yourdatabase', 'username', 'password');
        
        // Prepare review query
        $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:userId, :productId, :rating, :review)");
        
        // Bind parameters
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        
        // Execute review query
        if ($stmt->execute()) {
            return true;
        } else {
            echo "Error creating review: " . $conn->errorInfo()[2];
            return false;
        }
    } catch (PDOException $e) {
        echo "Error connecting to database: " . $e->getMessage();
        return false;
    } finally {
        // Close connection
        if ($conn instanceof PDO) {
            $conn = null;
        }
    }
}

function getUserReviews($userId, $limit = 10) {
    try {
        // Connect to database
        $conn = new PDO('mysql:host=localhost;dbname=yourdatabase', 'username', 'password');
        
        // Prepare review query
        $stmt = $conn->prepare("SELECT r.id, p.title, u.name, r.rating, r.review 
                                FROM reviews r
                                JOIN users u ON r.user_id = u.id
                                JOIN products p ON r.product_id = p.id
                                WHERE r.user_id = :userId
                                ORDER BY r.id DESC
                                LIMIT :limit");
        
        // Bind parameters
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':limit', $limit);
        
        // Execute review query
        if ($stmt->execute()) {
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } else {
            echo "Error retrieving reviews: " . $conn->errorInfo()[2];
            return array();
        }
    } catch (PDOException $e) {
        echo "Error connecting to database: " . $e->getMessage();
        return array();
    } finally {
        // Close connection
        if ($conn instanceof PDO) {
            $conn = null;
        }
    }
}

function getProductReviews($productId, $limit = 10) {
    try {
        // Connect to database
        $conn = new PDO('mysql:host=localhost;dbname=yourdatabase', 'username', 'password');
        
        // Prepare review query
        $stmt = $conn->prepare("SELECT r.id, p.title, u.name, r.rating, r.review 
                                FROM reviews r
                                JOIN users u ON r.user_id = u.id
                                JOIN products p ON r.product_id = p.id
                                WHERE r.product_id = :productId
                                ORDER BY r.id DESC
                                LIMIT :limit");
        
        // Bind parameters
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':limit', $limit);
        
        // Execute review query
        if ($stmt->execute()) {
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } else {
            echo "Error retrieving reviews: " . $conn->errorInfo()[2];
            return array();
        }
    } catch (PDOException $e) {
        echo "Error connecting to database: " . $e->getMessage();
        return array();
    } finally {
        // Close connection
        if ($conn instanceof PDO) {
            $conn = null;
        }
    }
}


// Create a new review for user 1 on product 1 with rating 5 and review "Great product!"
 createUserReview(1, 1, 5, "Great product!");

// Retrieve all reviews from user 1 with a limit of 10
$reviews = getUserReviews(1);

// Retrieve all reviews from product 1 with a limit of 10
$reviews = getProductReviews(1);


CREATE TABLE users (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255),
  email VARCHAR(255)
);

CREATE TABLE products (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255)
);

CREATE TABLE reviews (
  id INT PRIMARY KEY AUTO_INCREMENT,
  product_id INT,
  user_id INT,
  rating TINYINT,
  comment TEXT,
  FOREIGN KEY (product_id) REFERENCES products(id),
  FOREIGN KEY (user_id) REFERENCES users(id)
);


<?php

// Configuration file with database connection details
require_once 'config.php';

// Function to add a new review
function addReview($productId, $userId, $rating, $comment) {
  // Prepare the query to insert the review into the database
  $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
            VALUES (:productId, :userId, :rating, :comment)";

  try {
    // Execute the query with prepared statement
    $stmt = $db->prepare($query);
    $stmt->bindParam(':productId', $productId);
    $stmt->bindParam(':userId', $userId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $result = $stmt->execute();

    // Return the ID of the newly added review
    return $db->lastInsertId();
  } catch (PDOException $e) {
    echo "Error adding review: " . $e->getMessage();
    return false;
  }
}

// Function to get all reviews for a specific product
function getReviews($productId) {
  // Prepare the query to select all reviews from the database
  $query = "SELECT r.id, u.name, r.rating, r.comment, p.name AS productName
            FROM reviews r
            JOIN users u ON r.user_id = u.id
            JOIN products p ON r.product_id = p.id
            WHERE r.product_id = :productId";

  try {
    // Execute the query with prepared statement
    $stmt = $db->prepare($query);
    $stmt->bindParam(':productId', $productId);
    $result = $stmt->execute();

    // Return all reviews as an array of associative arrays
    return $result->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    echo "Error getting reviews: " . $e->getMessage();
    return false;
  }
}

// Function to get a single review by its ID
function getReview($reviewId) {
  // Prepare the query to select a single review from the database
  $query = "SELECT r.id, u.name, r.rating, r.comment, p.name AS productName
            FROM reviews r
            JOIN users u ON r.user_id = u.id
            JOIN products p ON r.product_id = p.id
            WHERE r.id = :reviewId";

  try {
    // Execute the query with prepared statement
    $stmt = $db->prepare($query);
    $stmt->bindParam(':reviewId', $reviewId);
    $result = $stmt->execute();

    // Return a single review as an associative array, or false if not found
    return $result->fetch(PDO::FETCH_ASSOC) ?: false;
  } catch (PDOException $e) {
    echo "Error getting review: " . $e->getMessage();
    return false;
  }
}

// Example usage:
$productId = 1; // ID of the product to get reviews for
$userRating = 5; // User's rating for the product (1-5)
$userComment = 'Great product!'; // User's comment for the product

$reviewId = addReview($productId, $_SESSION['userId'], $userRating, $userComment);
if ($reviewId) {
  echo "Review added successfully!";
} else {
  echo "Error adding review.";
}

$reviews = getReviews($productId);
foreach ($reviews as $review) {
  echo "Review by {$review['name']} on product {$review['productName']}: {$review['rating']} stars, {$review['comment']}";
}


// review.model.php

class Review {
    private $id;
    private $rating;
    private $title;
    private $content;
    private $user_id;

    public function __construct($id, $rating, $title, $content, $user_id) {
        $this->id = $id;
        $this->rating = $rating;
        $this->title = $title;
        $this->content = $content;
        $this->user_id = $user_id;
    }

    public function getId() {
        return $this->id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getContent() {
        return $this->content;
    }

    public function getUserID() {
        return $this->user_id;
    }
}


// review.controller.php

class ReviewController {
    private $reviews;

    public function __construct() {
        $this->reviews = array();
    }

    public function addReview(Review $review) {
        array_push($this->reviews, $review);
    }

    public function getReviews() {
        return $this->reviews;
    }

    public function deleteReview(int $id) {
        foreach ($this->reviews as $key => $review) {
            if ($review->getId() == $id) {
                unset($this->reviews[$key]);
                break;
            }
        }
    }
}


// review.function.php

function createUserReview(ReviewController $controller, int $user_id, string $title, string $content, float $rating) {
    $review = new Review(NULL, $rating, $title, $content, $user_id);
    $controller->addReview($review);
    return $review;
}

function getUserReviews(ReviewController $controller, int $user_id) {
    $reviews = array_filter($controller->getReviews(), function ($review) use ($user_id) {
        return $review->getUserID() == $user_id;
    });
    return $reviews;
}

function deleteReview(ReviewController $controller, int $id) {
    $controller->deleteReview($id);
}


$controller = new ReviewController();

// Create a new review
$review = createUserReview($controller, 1, 'Great product!', 'I love this product!', 5.0);

// Get all reviews for user with ID 1
$reviews = getUserReviews($controller, 1);
print_r($reviews);

// Delete the first review in the list
deleteReview($controller, $reviews[0]->getId());


// connect.php: database connection settings
$dsn = 'mysql:host=localhost;dbname=mydatabase';
$username = 'myusername';
$password = 'mypassword';

// db_connect.php: wrapper for database connections
function connect_to_db() {
  $conn = new PDO($dsn, $username, $password);
  return $conn;
}

// review.php: user review function
require_once 'connect.php';
require_once 'db_connect.php';

function create_review($product_id, $user_id, $rating, $review_text) {
  // create a new review in the database
  $conn = connect_to_db();
  $stmt = $conn->prepare('INSERT INTO reviews (product_id, user_id, rating, review_text)
    VALUES (:product_id, :user_id, :rating, :review_text)');
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':review_text', $review_text);
  $stmt->execute();
  return $conn->lastInsertId();
}

function get_reviews($product_id) {
  // retrieve reviews for a specific product
  $conn = connect_to_db();
  $stmt = $conn->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function get_user_reviews($user_id) {
  // retrieve reviews submitted by a specific user
  $conn = connect_to_db();
  $stmt = $conn->prepare('SELECT * FROM reviews WHERE user_id = :user_id');
  $stmt->bindParam(':user_id', $user_id);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function delete_review($review_id) {
  // delete a review from the database
  $conn = connect_to_db();
  $stmt = $conn->prepare('DELETE FROM reviews WHERE id = :review_id');
  $stmt->bindParam(':review_id', $review_id);
  $stmt->execute();
}


$product_id = 123;
$user_id = 456;
$rating = 4;
$review_text = 'Great product!';

$review_id = create_review($product_id, $user_id, $rating, $review_text);
echo "Review created with ID: $review_id";


$product_id = 123;

$reviews = get_reviews($product_id);
foreach ($reviews as $review) {
  echo "Rating: {$review['rating']}, Review Text: {$review['review_text']}<br>";
}


$user_id = 456;

$reviews = get_user_reviews($user_id);
foreach ($reviews as $review) {
  echo "Rating: {$review['rating']}, Review Text: {$review['review_text']}<br>";
}


$review_id = 789;

delete_review($review_id);
echo "Review deleted with ID: $review_id";


<?php

// Include database connection settings
require_once 'db_config.php';

// Function to create a review
function create_review($user_id, $product_id, $rating, $comment) {
  global $db;
  
  // Check if user is logged in
  if (!isset($_SESSION['logged_in']) || !$_SESSION['logged_in']) {
    return array('error' => 'Please log in to leave a review');
  }
  
  try {
    // Insert review into database
    $stmt = $db->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:user_id, :product_id, :rating, :comment)");
    $stmt->execute(array(
      ':user_id' => $user_id,
      ':product_id' => $product_id,
      ':rating' => $rating,
      ':comment' => $comment
    ));
    
    // Get the review ID
    $review_id = $db->lastInsertId();
    
    return array('success' => true, 'review_id' => $review_id);
  } catch (PDOException $e) {
    return array('error' => 'Error creating review: ' . $e->getMessage());
  }
}

// Function to retrieve reviews for a product
function get_reviews($product_id) {
  global $db;
  
  try {
    // Retrieve reviews from database
    $stmt = $db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
    $stmt->execute(array(':product_id' => $product_id));
    
    return array('success' => true, 'reviews' => $stmt->fetchAll());
  } catch (PDOException $e) {
    return array('error' => 'Error retrieving reviews: ' . $e->getMessage());
  }
}

// Function to retrieve user's reviews
function get_user_reviews($user_id) {
  global $db;
  
  try {
    // Retrieve reviews from database
    $stmt = $db->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
    $stmt->execute(array(':user_id' => $user_id));
    
    return array('success' => true, 'reviews' => $stmt->fetchAll());
  } catch (PDOException $e) {
    return array('error' => 'Error retrieving user reviews: ' . $e->getMessage());
  }
}

// Example usage:
$user_id = $_SESSION['logged_in'];
$product_id = 1;
$rating = 5;
$comment = "Great product!";

$result = create_review($user_id, $product_id, $rating, $comment);
if ($result['success']) {
  echo 'Review created successfully!';
} else {
  echo 'Error creating review: ' . $result['error'];
}

?>


class Review {
    private $id;
    private $userId;
    private $reviewText;
    private $rating;

    public function __construct($id, $userId, $reviewText, $rating) {
        $this->id = $id;
        $this->userId = $userId;
        $this->reviewText = $reviewText;
        $this->rating = $rating;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getReviewText() {
        return $this->reviewText;
    }

    public function getRating() {
        return $this->rating;
    }
}


class ReviewService {
    private $reviews = array();

    public function addReview(Review $review) {
        $this->reviews[] = $review;
        return $review;
    }

    public function getReviews() {
        return $this->reviews;
    }
}


$reviewService = new ReviewService();
$review1 = new Review(1, 1, 'Great product!', 5);
$review2 = new Review(2, 2, 'Okay product.', 3);

$reviewService->addReview($review1);
$reviewService->addReview($review2);

foreach ($reviewService->getReviews() as $review) {
    echo "Review ID: {$review->getId()}
";
    echo "User ID: {$review->getUserId()}
";
    echo "Review Text: {$review->getReviewText()}
";
    echo "Rating: {$review->getRating()}/5

";
}


class ReviewService {
    private $reviews = array();
    private $authManager;

    public function __construct($authManager) {
        $this->authManager = $authManager;
    }

    public function addReview(Review $review, $userId) {
        if (!$this->authManager->isAuthenticated()) {
            throw new Exception('User must be authenticated to add a review');
        }
        
        if ($this->authManager->getUser()->getId() !== (int)$userId) {
            throw new Exception('You do not have permission to add reviews for this user');
        }

        $this->reviews[] = $review;
        return $review;
    }

    public function getReviews() {
        return $this->reviews;
    }
}


<?php

// Database Connection
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "review_system";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function add_review() {
    global $conn;
    
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        
        // Get the review data
        $product_id = $_POST['product_id'];
        $user_id = $_POST['user_id'];
        $rating = $_POST['rating'];
        $review_text = $_POST['review_text'];

        // Check if the product exists in the database
        $query = "SELECT * FROM products WHERE id = '$product_id'";
        $result = $conn->query($query);

        if ($result->num_rows > 0) {
            // Add review to database
            $sql = "INSERT INTO reviews (user_id, product_id, rating, review_text)
                    VALUES ('$user_id', '$product_id', '$rating', '$review_text')";
            
            if ($conn->query($sql) === TRUE) {
                echo "Review added successfully!";
            } else {
                echo "Error: " . $sql . "<br>" . $conn->error;
            }
        } else {
            echo "Product not found.";
        }
    }
}

function get_reviews() {
    global $conn;
    
    // Get reviews for a specific product
    $product_id = $_GET['product_id'];
    
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            echo "<h2>Review</h2>";
            echo "Rating: " . $row['rating'] . "/5";
            echo "<br>Text: " . $row['review_text'];
            echo "<hr>";
        }
    } else {
        echo "No reviews found for this product.";
    }
}

function delete_review() {
    global $conn;
    
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        
        // Get the review id
        $review_id = $_POST['review_id'];
        
        $query = "DELETE FROM reviews WHERE id = '$review_id'";
        
        if ($conn->query($query) === TRUE) {
            echo "Review deleted successfully!";
        } else {
            echo "Error: " . $sql . "<br>" . $conn->error;
        }
    }
}

?>


// add_review.php

add_review();
?>

<form action="" method="post">
    <label>Product ID:</label>
    <input type="text" name="product_id"><br><br>
    <label>User ID:</label>
    <input type="text" name="user_id"><br><br>
    <label>Rating:</label>
    <select name="rating">
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
        <option value="5">5</option>
    </select><br><br>
    <label>Review:</label>
    <textarea name="review_text"></textarea><br><br>
    <input type="submit" value="Add Review">
</form>

<?php
// get_reviews.php

get_reviews();
?>

<form action="" method="post">
    <input type="hidden" name="product_id" value="<?php echo $_GET['product_id']; ?>">
    <input type="submit" value="Delete Review" onclick="return confirm('Are you sure you want to delete this review?')">
</form>

<?php
// delete_review.php

delete_review();
?>


// review.php

// database connection info (replace with your own)
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database_name";

// create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// function to add a new review
function add_review($product_id, $user_id, $rating, $review_text) {
    global $conn;
    $sql = "INSERT INTO reviews (product_id, user_id, rating, review_text)
            VALUES ('$product_id', '$user_id', '$rating', '$review_text')";
    if ($conn->query($sql) === TRUE) {
        return true; // review added successfully
    } else {
        return false; // error adding review
    }
}

// function to update an existing review
function update_review($id, $product_id, $user_id, $rating, $review_text) {
    global $conn;
    $sql = "UPDATE reviews SET product_id='$product_id', user_id='$user_id', rating='$rating', review_text='$review_text'
            WHERE id='$id'";
    if ($conn->query($sql) === TRUE) {
        return true; // review updated successfully
    } else {
        return false; // error updating review
    }
}

// function to delete a review
function delete_review($id) {
    global $conn;
    $sql = "DELETE FROM reviews WHERE id='$id'";
    if ($conn->query($sql) === TRUE) {
        return true; // review deleted successfully
    } else {
        return false; // error deleting review
    }
}

// close connection when done
$conn->close();


// display_reviews.php

// include review.php to get functions and database connection info
include "review.php";

// get list of reviews for a given product
$product_id = $_GET['product_id'];
$reviews = array();

$sql = "SELECT * FROM reviews WHERE product_id='$product_id'";
$result = $conn->query($sql);

if ($result->num_rows > 0) {
    // output data of each row
    while($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }
} else {
    echo "No reviews found for this product.";
}

// close connection when done
$conn->close();

// display list of reviews
foreach ($reviews as $review) {
    echo "Rating: " . $review['rating'] . ", Review Text: " . $review['review_text'];
}


<!-- add_review.php -->

<form action="review.php" method="post">
    <input type="hidden" name="product_id" value="<?php echo $_GET['product_id']; ?>">
    <label for="rating">Rating:</label>
    <select id="rating" name="rating">
        <?php
            for ($i = 1; $i <= 5; $i++) {
                echo "<option value='$i'>$i stars</option>";
            }
        ?>
    </select>

    <br><br>

    <textarea id="review_text" name="review_text" placeholder="Write your review here..."></textarea>

    <br><br>

    <input type="submit" value="Submit Review">
</form>


// db.php: database connection file

$servername = 'localhost';
$username = 'username';
$password = 'password';
$dbname = 'database_name';

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function createUserReview($productId, $rating, $review, $userId) {
    global $conn;

    if (!$conn) {
        die("Connection failed");
    }

    $sql = "INSERT INTO reviews (product_id, rating, review, user_id)
            VALUES ('$productId', '$rating', '$review', '$userId')";

    if ($conn->query($sql)) {
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}

function getReview($id) {
    global $conn;

    if (!$conn) {
        die("Connection failed");
    }

    $sql = "SELECT * FROM reviews WHERE id = '$id'";

    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        return $result->fetch_assoc();
    } else {
        return null;
    }
}

function getReviewsByProductId($productId) {
    global $conn;

    if (!$conn) {
        die("Connection failed");
    }

    $sql = "SELECT * FROM reviews WHERE product_id = '$productId'";

    $result = $conn->query($sql);

    return $result->fetch_all(MYSQLI_ASSOC);
}

function getReviewsByUserId($userId) {
    global $conn;

    if (!$conn) {
        die("Connection failed");
    }

    $sql = "SELECT * FROM reviews WHERE user_id = '$userId'";

    $result = $conn->query($sql);

    return $result->fetch_all(MYSQLI_ASSOC);
}

function updateReview($id, $rating, $review) {
    global $conn;

    if (!$conn) {
        die("Connection failed");
    }

    $sql = "UPDATE reviews SET rating = '$rating', review = '$review' WHERE id = '$id'";

    if ($conn->query($sql)) {
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}

function deleteReview($id) {
    global $conn;

    if (!$conn) {
        die("Connection failed");
    }

    $sql = "DELETE FROM reviews WHERE id = '$id'";

    if ($conn->query($sql)) {
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}


// Create a new review for product 1 by user 1
createUserReview(1, '4.5', 'This is an amazing product!', 1);

// Get all reviews for product 1
$reviews = getReviewsByProductId(1);
print_r($reviews);

// Update the rating and review of review with id 1
updateReview(1, '5.0', 'I loved this product!');

// Delete a review with id 1
deleteReview(1);


// Include database connection file
require 'db.php';

function createReview($data) {
  $userId = $data['user_id'];
  $productId = $data['product_id'];
  $rating = $data['rating'];
  $review = $data['review'];

  // Validate input data
  if (!$userId || !$productId || !$rating || !$review) {
    return false;
  }

  // Insert review into database
  $query = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES ('$userId', '$productId', '$rating', '$review')";
  mysqli_query($db, $query);

  // Return true if review created successfully
  return true;
}

function getReviewsForProduct($productId) {
  // Query database to retrieve reviews for specific product
  $query = "SELECT * FROM reviews WHERE product_id = '$productId'";
  $result = mysqli_query($db, $query);
  $reviews = array();

  while ($row = mysqli_fetch_assoc($result)) {
    $reviews[] = array(
      'id' => $row['id'],
      'user_id' => $row['user_id'],
      'product_id' => $row['product_id'],
      'rating' => $row['rating'],
      'review' => $row['review']
    );
  }

  // Return reviews as an array
  return $reviews;
}

function updateReview($data) {
  // Validate input data
  if (!$data['id'] || !$data['user_id']) {
    return false;
  }

  // Update review in database
  $query = "UPDATE reviews SET user_id = '$data[user_id]', product_id = '$data[product_id]',
                  rating = '$data[rating]', review = '$data[review]' WHERE id = '$data[id]'";
  mysqli_query($db, $query);

  // Return true if review updated successfully
  return true;
}

function deleteReview($id) {
  // Validate input data
  if (!$id) {
    return false;
  }

  // Delete review from database
  $query = "DELETE FROM reviews WHERE id = '$id'";
  mysqli_query($db, $query);

  // Return true if review deleted successfully
  return true;
}


// Create a new review
$data = array(
  'user_id' => 1,
  'product_id' => 1,
  'rating' => 5,
  'review' => 'Great product!'
);
createReview($data);

// Get reviews for specific product
$productId = 1;
$reviews = getReviewsForProduct($productId);
print_r($reviews);

// Update a review
$data = array(
  'id' => 1,
  'user_id' => 2,
  'product_id' => 1,
  'rating' => 4,
  'review' => 'Good product.'
);
updateReview($data);

// Delete a review
$reviewId = 1;
deleteReview($reviewId);


class Review {
    private $id;
    private $productId;
    private $userId;
    private $rating;
    private $review;

    public function __construct($data) {
        $this->id = $data['id'] ?? null;
        $this->productId = $data['product_id'];
        $this->userId = $data['user_id'];
        $this->rating = $data['rating'];
        $this->review = $data['review'];
    }

    public function getId() {
        return $this->id;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReview() {
        return $this->review;
    }
}


class ReviewController extends Controller {
    private $db;

    public function __construct() {
        parent::__construct();
        $this->db = Database::getInstance()->getConnection();
    }

    public function createReview($data) {
        // Insert new review into database
        $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)";
        $stmt = $this->db->prepare($query);
        $stmt->execute([
            ':product_id' => $data['product_id'],
            ':user_id' => $data['user_id'],
            ':rating' => $data['rating'],
            ':review' => $data['review']
        ]);
    }

    public function getReviews() {
        // Retrieve all reviews from database
        $query = "SELECT * FROM reviews";
        $stmt = $this->db->prepare($query);
        $stmt->execute();
        $reviews = [];
        while ($row = $stmt->fetch()) {
            $review = new Review([
                'id' => $row['id'],
                'product_id' => $row['product_id'],
                'user_id' => $row['user_id'],
                'rating' => $row['rating'],
                'review' => $row['review']
            ]);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public function getReview($id) {
        // Retrieve a single review from database
        $query = "SELECT * FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->execute([':id' => $id]);
        return new Review($stmt->fetch());
    }

    public function updateReview($data) {
        // Update a review in database
        $query = "UPDATE reviews SET rating = :rating, review = :review WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->execute([
            ':rating' => $data['rating'],
            ':review' => $data['review'],
            ':id' => $data['id']
        ]);
    }

    public function deleteReview($id) {
        // Delete a review from database
        $query = "DELETE FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->execute([':id' => $id]);
    }
}


class UserController extends Controller {
    private $db;

    public function __construct() {
        parent::__construct();
        $this->db = Database::getInstance()->getConnection();
    }

    public function getReviews($userId) {
        // Retrieve all reviews from a user
        $query = "SELECT * FROM reviews WHERE user_id = :user_id";
        $stmt = $this->db->prepare($query);
        $stmt->execute([':user_id' => $userId]);
        return ReviewController::getReviewsFromStatement($stmt);
    }

    private function getReviewsFromStatement($stmt) {
        $reviews = [];
        while ($row = $stmt->fetch()) {
            $review = new Review([
                'id' => $row['id'],
                'product_id' => $row['product_id'],
                'user_id' => $row['user_id'],
                'rating' => $row['rating'],
                'review' => $row['review']
            ]);
            $reviews[] = $review;
        }
        return $reviews;
    }
}


class Controller {
    protected $db;

    public function __construct() {
        // Initialize database connection here
        $this->db = Database::getInstance()->getConnection();
    }

    public function redirect($url) {
        header("Location: $url");
        exit;
    }
}


class Database {
    private static $_instance;

    public static function getInstance() {
        if (!self::$_instance instanceof self) {
            self::$_instance = new self();
        }
        return self::$_instance;
    }

    protected function getConnection() {
        $config = require 'config.php';
        try {
            $dsn = "mysql:host=$config['host'];dbname=$config['db']";
            $pdo = new PDO($dsn, $config['username'], $config['password']);
            return $pdo;
        } catch (PDOException $e) {
            echo "Error connecting to database: " . $e->getMessage();
            exit;
        }
    }
}


<?php foreach ($reviews as $review): ?>
    <h2>Review by <?php echo $review->getUserId(); ?></h2>
    <p>Rating: <?php echo $review->getRating(); ?>/5</p>
    <p>Review: <?php echo $review->getReview(); ?></p>
<?php endforeach; ?>


$reviewController = new ReviewController();
$reviewData = [
    'product_id' => 1,
    'user_id' => 2,
    'rating' => 4,
    'review' => 'Great product!'
];
$reviewController->createReview($reviewData);

$reviews = $reviewController->getReviews();
foreach ($reviews as $review) {
    echo $review->getId() . ': ' . $review->getReview() . '<br>';
}


<?php

// Connect to database
$conn = mysqli_connect("localhost", "username", "password", "database_name");

if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Functions for CRUD operations
function create_review($user_id, $product_name, $rating, $review_text) {
    global $conn;
    $sql = "INSERT INTO reviews (user_id, product_name, rating, review_text) VALUES (?, ?, ?, ?)";
    $stmt = mysqli_prepare($conn, $sql);
    mysqli_stmt_bind_param($stmt, "iiss", $user_id, $product_name, $rating, $review_text);
    mysqli_stmt_execute($stmt);
}

function get_reviews() {
    global $conn;
    $sql = "SELECT * FROM reviews ORDER BY created_at DESC";
    $result = mysqli_query($conn, $sql);
    return mysqli_fetch_all($result, MYSQLI_ASSOC);
}

function get_review_by_id($id) {
    global $conn;
    $sql = "SELECT * FROM reviews WHERE id = ?";
    $stmt = mysqli_prepare($conn, $sql);
    mysqli_stmt_bind_param($stmt, "i", $id);
    mysqli_stmt_execute($stmt);
    return mysqli_fetch_assoc($stmt->get_result());
}

function update_review($id, $rating, $review_text) {
    global $conn;
    $sql = "UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?";
    $stmt = mysqli_prepare($conn, $sql);
    mysqli_stmt_bind_param($stmt, "iis", $rating, $review_text, $id);
    mysqli_stmt_execute($stmt);
}

function delete_review($id) {
    global $conn;
    $sql = "DELETE FROM reviews WHERE id = ?";
    $stmt = mysqli_prepare($conn, $sql);
    mysqli_stmt_bind_param($stmt, "i", $id);
    mysqli_stmt_execute($stmt);
}


// review.php

class Review {
  private $id;
  private $reviewer_id;
  private $product_id;
  private $rating;
  private $comment;

  public function __construct($id, $reviewer_id, $product_id, $rating, $comment) {
    $this->id = $id;
    $this->reviewer_id = $reviewer_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->comment = $comment;
  }

  public function getId() {
    return $this->id;
  }

  public function getReviewerId() {
    return $this->reviewer_id;
  }

  public function getProductId() {
    return $this->product_id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }
}


// review_controller.php

class ReviewController {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function getAllReviews() {
    // retrieve all reviews from database
    $reviews = array();
    $query = "SELECT * FROM reviews";
    $result = mysqli_query($this->db, $query);
    while ($row = mysqli_fetch_assoc($result)) {
      $review = new Review(
        $row['id'],
        $row['reviewer_id'],
        $row['product_id'],
        $row['rating'],
        $row['comment']
      );
      $reviews[] = $review;
    }
    return $reviews;
  }

  public function getReviewById($id) {
    // retrieve review by id from database
    $query = "SELECT * FROM reviews WHERE id = '$id'";
    $result = mysqli_query($this->db, $query);
    if ($row = mysqli_fetch_assoc($result)) {
      return new Review(
        $row['id'],
        $row['reviewer_id'],
        $row['product_id'],
        $row['rating'],
        $row['comment']
      );
    } else {
      return null;
    }
  }

  public function createReview($review) {
    // insert review into database
    $query = "INSERT INTO reviews (reviewer_id, product_id, rating, comment) VALUES ('$review->reviewer_id', '$review->product_id', '$review->rating', '$review->comment')";
    mysqli_query($this->db, $query);
  }

  public function updateReview($id, $review) {
    // update review in database
    $query = "UPDATE reviews SET reviewer_id = '$review->reviewer_id', product_id = '$review->product_id', rating = '$review->rating', comment = '$review->comment' WHERE id = '$id'";
    mysqli_query($this->db, $query);
  }

  public function deleteReview($id) {
    // delete review from database
    $query = "DELETE FROM reviews WHERE id = '$id'";
    mysqli_query($this->db, $query);
  }
}


// user_review.php

class UserReview {
  private $reviewController;

  public function __construct($reviewController) {
    $this->reviewController = $reviewController;
  }

  public function displayReviews() {
    // retrieve all reviews and display them to the user
    $reviews = $this->reviewController->getAllReviews();
    foreach ($reviews as $review) {
      echo "Reviewer ID: " . $review->getReviewerId() . "<br>";
      echo "Product ID: " . $review->getProductId() . "<br>";
      echo "Rating: " . $review->getRating() . "/5<br>";
      echo "Comment: " . $review->getComment() . "<br><hr>";
    }
  }

  public function createReview($review) {
    // retrieve the review controller and create a new review
    $this->reviewController->createReview($review);
  }

  public function updateReview($id, $newReview) {
    // retrieve the review by id and update it with the new review information
    $oldReview = $this->reviewController->getReviewById($id);
    if ($oldReview !== null) {
      $this->reviewController->updateReview($id, $newReview);
    }
  }

  public function deleteReview($id) {
    // retrieve the review by id and delete it
    $this->reviewController->deleteReview($id);
  }
}


// main.php

$db = new mysqli("localhost", "username", "password", "database");

$reviewController = new ReviewController($db);

$userReview = new UserReview($reviewController);

// Create a new review
$review = new Review(1, 2, 3, 4, "This product is amazing!");
$userReview->createReview($review);

// Display all reviews
$userReview->displayReviews();

// Update a review
$newReview = new Review(1, 2, 3, 5, "I changed my mind, this product is terrible!");
$userReview->updateReview(1, $newReview);

// Delete a review
$userReview->deleteReview(1);


function submit_review($product_id, $user_id, $review_text, $rating = 0) {
  // Validate user input
  if (!$product_id || !$user_id || !$review_text) {
    return array('error' => 'Missing required fields');
  }

  // Insert review into database
  $query = "INSERT INTO reviews (product_id, user_id, review_text, rating)
            VALUES (:product_id, :user_id, :review_text, :rating)";
  try {
    $stmt = Database::prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    $stmt->execute();

    // Return the new review's ID
    return array('id' => Database::lastInsertId());
  } catch (Exception $e) {
    // Handle database error
    return array('error' => 'Database error: ' . $e->getMessage());
  }
}

function approve_review($review_id, $approved = 'yes') {
  // Validate user input
  if (!$review_id) {
    return array('error' => 'Missing required fields');
  }

  // Update review in database
  $query = "UPDATE reviews SET approved = :approved WHERE id = :review_id";
  try {
    $stmt = Database::prepare($query);
    $stmt->bindParam(':approved', $approved);
    $stmt->bindParam(':review_id', $review_id);
    $stmt->execute();

    // Return success message
    return array('message' => 'Review approved');
  } catch (Exception $e) {
    // Handle database error
    return array('error' => 'Database error: ' . $e->getMessage());
  }
}


$product_id = 1;
$user_id = 2;
$review_text = "This product is amazing!";
$rating = 5;

$result = submit_review($product_id, $user_id, $review_text, $rating);
if ($result['error']) {
  echo 'Error: ' . $result['error'];
} else {
  echo 'Review submitted successfully! ID: ' . $result['id'];
}


$review_id = 1;
$result = approve_review($review_id);
if ($result['error']) {
  echo 'Error: ' . $result['error'];
} else {
  echo 'Review approved successfully!';
}


<?php

class ReviewSystem {
  private $db;

  function __construct() {
    // Connect to database
    $this->db = new PDO('mysql:host=localhost;dbname=database', 'username', 'password');
    $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  }

  /**
   * Create a new review
   *
   * @param int $user_id ID of the user who made the review
   * @param int $product_id ID of the product being reviewed
   * @param int $rating Rating given to the product (1-5)
   * @param string $review Text review
   */
  function createReview($user_id, $product_id, $rating, $review) {
    // Insert new review into database
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    $stmt->execute();
  }

  /**
   * Get all reviews for a product
   *
   * @param int $product_id ID of the product being reviewed
   */
  function getReviews($product_id) {
    // Retrieve reviews from database
    $stmt = $this->db->prepare("SELECT r.id, u.username, p.name, r.rating, r.review FROM reviews r INNER JOIN users u ON r.user_id = u.id INNER JOIN products p ON r.product_id = p.id WHERE r.product_id = :product_id");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Update an existing review
   *
   * @param int $review_id ID of the review being updated
   * @param int $rating New rating for the product (1-5)
   * @param string $review New text review
   */
  function updateReview($review_id, $rating, $review) {
    // Update existing review in database
    $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :review_id");
    $stmt->bindParam(':review_id', $review_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    $stmt->execute();
  }

  /**
   * Delete a review
   *
   * @param int $review_id ID of the review being deleted
   */
  function deleteReview($review_id) {
    // Delete review from database
    $this->db->prepare("DELETE FROM reviews WHERE id = :review_id")->bindParam(':review_id', $review_id)->execute();
  }
}

?>


$reviewSystem = new ReviewSystem();

// Create a new review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = 'This product is amazing!';
$reviewSystem->createReview($user_id, $product_id, $rating, $review);

// Get all reviews for a product
$product_id = 1;
$reviews = $reviewSystem->getReviews($product_id);
print_r($reviews);

// Update an existing review
$review_id = 1;
$rating = 4;
$review = 'This product is still great!';
$reviewSystem->updateReview($review_id, $rating, $review);

// Delete a review
$review_id = 2;
$reviewSystem->deleteReview($review_id);


function add_review($product_id, $username, $rating, $comment) {
  // Check if product exists
  $product = get_product_by_id($product_id);
  if (!$product) {
    throw new Exception("Product not found");
  }

  // Create a new review object
  $review = array(
    'product_id' => $product_id,
    'username' => $username,
    'rating' => $rating,
    'comment' => $comment
  );

  // Save the review to the database
  insert_review($review);

  return $review;
}

function get_reviews_by_product($product_id) {
  // Retrieve reviews from the database for a specific product
  $reviews = retrieve_reviews_by_product($product_id);
  return $reviews;
}


// Insert review into database
function insert_review($review) {
  global $db;
  $query = "INSERT INTO reviews (product_id, username, rating, comment)
            VALUES (:product_id, :username, :rating, :comment)";
  $stmt = $db->prepare($query);
  $stmt->execute(array(
    ':product_id' => $review['product_id'],
    ':username' => $review['username'],
    ':rating' => $review['rating'],
    ':comment' => $review['comment']
  ));
}

// Retrieve reviews from database for a specific product
function retrieve_reviews_by_product($product_id) {
  global $db;
  $query = "SELECT * FROM reviews WHERE product_id = :product_id";
  $stmt = $db->prepare($query);
  $stmt->execute(array(':product_id' => $product_id));
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}


// Create a new review for a product
$review = add_review(123, 'JohnDoe', 5, 'Great product!');

// Retrieve all reviews for a specific product
$reviews = get_reviews_by_product(123);

// Display the reviews on a web page
foreach ($reviews as $review) {
  echo "Username: $review['username']";
  echo "Rating: $review['rating']";
  echo "Comment: $review['comment']";
}


// reviews.php

class Review {
    private $id;
    private $rating;
    private $title;
    private $content;
    private $product_id;

    public function __construct($data) {
        $this->id = $data['id'];
        $this->rating = $data['rating'];
        $this->title = $data['title'];
        $this->content = $data['content'];
        $this->product_id = $data['product_id'];
    }

    public function getId() {
        return $this->id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getContent() {
        return $this->content;
    }

    public function getProduct_id() {
        return $this->product_id;
    }
}


// reviews.controller.php

class ReviewController {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function create_review($data) {
        // Insert review into database
        $query = "INSERT INTO reviews (rating, title, content, product_id) VALUES (?, ?, ?, ?)";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$data['rating'], $data['title'], $data['content'], $data['product_id']]);

        return true;
    }

    public function get_reviews_by_product($product_id) {
        // Retrieve reviews for a specific product
        $query = "SELECT * FROM reviews WHERE product_id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$product_id]);
        $reviews = array();
        while ($row = $stmt->fetch()) {
            $review = new Review($row);
            $reviews[] = $review;
        }
        return $reviews;
    }

    public function get_review_by_id($id) {
        // Retrieve a single review by ID
        $query = "SELECT * FROM reviews WHERE id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$id]);
        $review = $stmt->fetch();
        return new Review($review);
    }

    public function update_review($data) {
        // Update a review in the database
        $query = "UPDATE reviews SET rating = ?, title = ?, content = ? WHERE id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$data['rating'], $data['title'], $data['content'], $data['id']]);
    }

    public function delete_review($id) {
        // Delete a review from the database
        $query = "DELETE FROM reviews WHERE id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$id]);
    }
}


// Example usage in an index.php file

$db = new Database(); // assuming a Database class is created elsewhere
$review_controller = new ReviewController($db);

// Create a new review
$data = array(
    'rating' => 5,
    'title' => 'Great product!',
    'content' => 'I love this product!',
    'product_id' => 1
);
$review_controller->create_review($data);

// Get reviews for a specific product
$product_id = 1;
$reviews = $review_controller->get_reviews_by_product($product_id);
foreach ($reviews as $review) {
    echo "Title: " . $review->getTitle() . "
";
    echo "Rating: " . $review->getRating() . "

";
}

// Get a single review by ID
$id = 1;
$review = $review_controller->get_review_by_id($id);
echo "Title: " . $review->getTitle() . "
";
echo "Rating: " . $review->getRating() . "
";

// Update a review
$data['rating'] = 4;
$review_controller->update_review($data);

// Delete a review
$id = 1;
$review_controller->delete_review($id);


<?php

// Database connection details
$host = 'localhost';
$dbname = 'reviews_database';
$username = 'your_username';
$password = 'your_password';

// Function to connect to database
function dbConnect() {
    global $host, $dbname, $username, $password;
    
    try {
        // Attempt to connect
        $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
        
        return $conn;
    } catch (PDOException $e) {
        echo "Connection failed: " . $e->getMessage();
        exit();
    }
}

// Function to create table if it doesn't exist
function createTable() {
    global $host, $dbname, $username, $password;
    
    $conn = dbConnect();
    
    try {
        // SQL command to create the reviews table
        $sql = "
            CREATE TABLE IF NOT EXISTS reviews (
                id INT PRIMARY KEY AUTO_INCREMENT,
                review_text TEXT,
                rating INT,
                user_name VARCHAR(255),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        ";
        
        $conn->exec($sql);
    } catch (PDOException $e) {
        echo "Table creation failed: " . $e->getMessage();
        exit();
    }
}

// Function to insert a review into the database
function addReview() {
    global $host, $dbname, $username, $password;
    
    $conn = dbConnect();
    
    try {
        // SQL command to insert a new review
        $sql = "
            INSERT INTO reviews (review_text, rating, user_name)
            VALUES (:review_text, :rating, :user_name);
        ";
        
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(':review_text', $_POST['review']);
        $stmt->bindParam(':rating', $_POST['rating']);
        $stmt->bindParam(':user_name', $_POST['username']);
        
        if ($stmt->execute()) {
            echo "Review submitted successfully!";
        } else {
            echo "Error submitting review: " . $stmt->errorInfo()[2];
        }
    } catch (PDOException $e) {
        echo "Insert failed: " . $e->getMessage();
    }
}

// Function to display all reviews
function displayReviews() {
    global $host, $dbname, $username, $password;
    
    $conn = dbConnect();
    
    try {
        // SQL command to retrieve all reviews
        $sql = "
            SELECT id, review_text, rating, user_name, created_at
            FROM reviews
            ORDER BY created_at DESC;
        ";
        
        $stmt = $conn->query($sql);
        
        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        foreach ($reviews as $review) {
            echo "Review ID: " . $review['id'] . "<br>";
            echo "Review Text: " . $review['review_text'] . "<br>";
            echo "Rating: " . $review['rating'] . "<br>";
            echo "User Name: " . $review['user_name'] . "<br>";
            echo "Created At: " . date('Y-m-d H:i:s', strtotime($review['created_at'])) . "<br><hr>";
        }
    } catch (PDOException $e) {
        echo "Error retrieving reviews: " . $e->getMessage();
    }
}

// Connect to the database and create the table if it doesn't exist
createTable();

?>


// Review class
class Review {
  private $id;
  private $user_id;
  private $product_id;
  private $rating;
  private $review_text;

  public function __construct($id, $user_id, $product_id, $rating, $review_text) {
    $this->id = $id;
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->review_text = $review_text;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getReviewText() {
    return $this->review_text;
  }
}

// Review Manager class
class ReviewManager {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Get all reviews for a product
  public function getReviewsForProduct($productId) {
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $params = array(':product_id' => $productId);
    $reviews = array();
    foreach ($this->db->fetchAll($query, $params) as $row) {
      $review = new Review($row['id'], $row['user_id'], $row['product_id'], $row['rating'], $row['review_text']);
      $reviews[] = $review;
    }
    return $reviews;
  }

  // Add a review for a product
  public function addReview($productId, $userId, $rating, $reviewText) {
    $query = "INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES (:product_id, :user_id, :rating, :review_text)";
    $params = array(':product_id' => $productId, ':user_id' => $userId, ':rating' => $rating, ':review_text' => $reviewText);
    return $this->db->execute($query, $params);
  }
}


// Create a Review Manager instance with a database connection
$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
$reviewManager = new ReviewManager($db);

// Get all reviews for a product
$product_id = 1;
$reviews = $reviewManager->getReviewsForProduct($product_id);
foreach ($reviews as $review) {
  echo "Rating: {$review->getRating()}, Review Text: {$review->getReviewText()}
";
}

// Add a review for a product
$user_id = 1;
$product_id = 1;
$rating = 5;
$review_text = 'Great product!';
$success = $reviewManager->addReview($product_id, $user_id, $rating, $review_text);
if ($success) {
  echo "Review added successfully!
";
} else {
  echo "Failed to add review.
";
}


CREATE TABLE users (
  id INT PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL
);

CREATE TABLE products (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL,
  description TEXT
);

CREATE TABLE reviews (
  id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT NOT NULL,
  product_id INT NOT NULL,
  rating TINYINT NOT NULL,
  review_text TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (product_id) REFERENCES products(id)
);


<?php

function add_review($user_id, $product_id, $rating, $review_text = '') {
  global $db;

  // Validate user and product IDs
  if (!is_numeric($user_id) || !is_numeric($product_id)) {
    return array('error' => 'Invalid user or product ID');
  }

  // Check if review already exists for this user-product pair
  $existing_review = get_review_by_user_product($db, $user_id, $product_id);
  if ($existing_review) {
    return array('error' => 'Review already exists');
  }

  // Add new review to database
  $query = "INSERT INTO reviews (user_id, product_id, rating, review_text)
            VALUES (:user_id, :product_id, :rating, :review_text)";
  $stmt = $db->prepare($query);
  $stmt->execute(array(
    ':user_id' => $user_id,
    ':product_id' => $product_id,
    ':rating' => $rating,
    ':review_text' => $review_text
  ));

  // Return review ID for further use
  return array('success' => true, 'review_id' => $db->lastInsertId());
}

function get_review_by_user_product($db, $user_id, $product_id) {
  $query = "SELECT * FROM reviews WHERE user_id = :user_id AND product_id = :product_id";
  $stmt = $db->prepare($query);
  $stmt->execute(array(':user_id' => $user_id, ':product_id' => $product_id));
  return $stmt->fetch();
}

function get_reviews_by_product($db, $product_id) {
  $query = "SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC";
  $stmt = $db->prepare($query);
  $stmt->execute(array(':product_id' => $product_id));
  return $stmt->fetchAll();
}

function get_reviews_by_user($db, $user_id) {
  $query = "SELECT * FROM reviews WHERE user_id = :user_id ORDER BY created_at DESC";
  $stmt = $db->prepare($query);
  $stmt->execute(array(':user_id' => $user_id));
  return $stmt->fetchAll();
}

function update_review_rating($review_id, $new_rating) {
  global $db;

  // Validate review ID and new rating
  if (!is_numeric($review_id) || !is_numeric($new_rating)) {
    return array('error' => 'Invalid review ID or new rating');
  }

  // Update review in database
  $query = "UPDATE reviews SET rating = :rating WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->execute(array(':rating' => $new_rating, ':id' => $review_id));

  return array('success' => true);
}

function delete_review($review_id) {
  global $db;

  // Validate review ID
  if (!is_numeric($review_id)) {
    return array('error' => 'Invalid review ID');
  }

  // Delete review from database
  $query = "DELETE FROM reviews WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->execute(array(':id' => $review_id));

  return array('success' => true);
}

?>


<?php

// Display reviews for a specific product

$query = "SELECT r.* FROM reviews r WHERE product_id = $product_id";
$result = mysqli_query($db, $query);

?>
<div>
    <h2>Reviews</h2>
    <?php while ($review = mysqli_fetch_assoc($result)) { ?>
        <div class="review">
            <p><?= $review['title'] ?></p>
            <p><?= $review['content'] ?></p>
            <p>Ratings: <?= $review['rating'] ?>/5</p>
            <p>Submitted by <?= $review['username'] ?> on <?= $review['created_at'] ?></p>
        </div>
    <?php } ?>
</div>

<a href="submit-review.php">Submit a Review!</a>


<?php

// Allow users to submit reviews for a specific product

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $title = $_POST['title'];
    $content = $_POST['content'];
    $rating = $_POST['rating'];
    $product_id = $_POST['product_id'];

    // Validate form data
    if (empty($title) || empty($content) || empty($rating)) {
        echo 'Please fill in all fields!';
    } else {
        $query = "INSERT INTO reviews (title, content, rating, user_id, product_id)
                  VALUES ('$title', '$content', '$rating', '".$_SESSION['user']['id']."', '$product_id')";
        mysqli_query($db, $query);

        header("Location: index.php");
    }
}

?>
<h2>Submit a Review</h2>
<form action="<?= $_SERVER["PHP_SELF"] ?>" method="post">
    <input type="hidden" name="product_id" value="<?= $product_id ?>">
    <label for="title">Title:</label>
    <input type="text" id="title" name="title"><br><br>
    <label for="content">Content:</label>
    <textarea id="content" name="content"></textarea><br><br>
    <label for="rating">Rating (1-5):</label>
    <select id="rating" name="rating">
        <?php for ($i = 1; $i <= 5; $i++) { ?>
            <option value="<?= $i ?>"><?= $i ?>/5</option>
        <?php } ?>
    </select><br><br>
    <input type="submit" value="Submit Review">
</form>


<?php

class ReviewModel {
    private $db;

    function __construct($db) {
        $this->db = $db;
    }

    public function create_review($title, $content, $rating, $user_id, $product_id) {
        $query = "INSERT INTO reviews (title, content, rating, user_id, product_id)
                  VALUES ('$title', '$content', '$rating', '$user_id', '$product_id')";
        mysqli_query($this->db, $query);
    }

    public function get_reviews_for_product($product_id) {
        $query = "SELECT * FROM reviews WHERE product_id = $product_id";
        return mysqli_query($this->db, $query);
    }
}

?>


<?php

function getReviews($productId) {
    global $db;
    if ($product_id === null) return array();

    $stmt = $db->prepare("SELECT r.id, u.username, r.rating, r.text 
                         FROM reviews r INNER JOIN users u ON r.reviewer_id = u.id
                         WHERE r.product_id = :id ORDER BY r.id DESC");
    $stmt->bindParam(':id', $productId);
    $stmt->execute();
    
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function saveReview($review) {
    global $db;

    if (!isset($review['product_id']) || !isset($review['rating'])
        || !isset($review['text']) || !isset($review['username'])) {
        
        throw new Exception("Invalid review data");
    }

    try {
        $stmt = $db->prepare("INSERT INTO reviews (product_id, reviewer_id, rating, text)
                              VALUES (:product_id, :reviewer_id, :rating, :text)");
        
        $stmt->bindParam(':product_id', $review['product_id']);
        $stmt->bindParam(':reviewer_id', $review['username']);
        $stmt->bindParam(':rating', $review['rating']);
        $stmt->bindParam(':text', $review['text']);

        $stmt->execute();
    } catch (PDOException $e) {
        echo "Error saving review: " . $e->getMessage() . "
";
    }
}

// Example usage:
$product_id = 1; // Replace with the ID of the product you want to retrieve reviews for
$reviews = getReviews($product_id);

foreach ($reviews as $review) {
    echo $review['username'] . ": " . $review['text'] . ", Rating: " . $review['rating'];
}

// Example usage:
$review_data = array(
    'product_id' => 1, // Replace with the ID of the product you want to review
    'rating' => 4,
    'text' => 'Great product!',
    'username' => 12345 // Replace with the username of the reviewer
);

saveReview($review_data);
?>


$db = new PDO("mysql:host=$host;dbname=$database", $username, $password);


// Connect to database (replace with your own connection code)
$mysqli = new mysqli("localhost", "username", "password", "database");

function submitReview($user_id, $product_id, $rating, $comment) {
    // Validate input data
    if (!is_numeric($rating) || !ctype_digit($rating)) {
        throw new Exception("Invalid rating");
    }
    
    if (strlen($comment) < 1 || strlen($comment) > 1000) {
        throw new Exception("Comment must be between 1 and 1000 characters long");
    }

    // Prepare SQL query
    $query = "INSERT INTO reviews (user_id, product_id, rating, comment)
              VALUES (?, ?, ?, ?)";
    
    // Bind parameters to prevent SQL injection attacks
    if (!$stmt = $mysqli->prepare($query)) {
        throw new Exception("Failed to prepare statement");
    }
    
    // Execute query with bound parameters
    $stmt->bind_param("iiii", $user_id, $product_id, $rating, $comment);
    if (!$stmt->execute()) {
        throw new Exception("Failed to execute query");
    }

    // Return the ID of the newly inserted review
    return $mysqli->insert_id;
}

function getReviews($product_id) {
    // Prepare SQL query to retrieve reviews for a specific product
    $query = "SELECT * FROM reviews WHERE product_id = ?";

    // Bind parameter to prevent SQL injection attacks
    if (!$stmt = $mysqli->prepare($query)) {
        throw new Exception("Failed to prepare statement");
    }

    // Execute query with bound parameter
    $stmt->bind_param("i", $product_id);
    if (!$stmt->execute()) {
        throw new Exception("Failed to execute query");
    }

    // Fetch and return all reviews for the product
    $reviews = array();
    while ($row = $stmt->get_result()->fetch_assoc()) {
        $reviews[] = $row;
    }
    
    return $reviews;
}

// Example usage:
$user_id = 1; // Replace with actual user ID
$product_id = 1; // Replace with actual product ID

try {
    $review_id = submitReview($user_id, $product_id, 4.5, "Great product!");
    echo "Review submitted successfully! Review ID: $review_id
";

    $reviews = getReviews($product_id);
    foreach ($reviews as $review) {
        echo "User ID: {$review['user_id']}
";
        echo "Rating: {$review['rating']} out of 5
";
        echo "Comment: {$review['comment']}
";
        echo "
";
    }
} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . "
";
}


class UserReview {
  private $id;
  private $userId;
  private $productId;
  private $rating;
  private $review;

  public function __construct($id, $userId, $productId, $rating, $review) {
    $this->id = $id;
    $this->userId = $userId;
    $this->productId = $productId;
    $this->rating = $rating;
    $this->review = $review;
  }

  public function getId() {
    return $this->id;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getProductId() {
    return $this->productId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getReview() {
    return $this->review;
  }
}


function addReview($userId, $productId, $rating, $review) {
  // Create a new user review object
  $newReview = new UserReview(null, $userId, $productId, $rating, $review);

  // Save the new review to the database (e.g. using PDO or MySQLi)
  // For demonstration purposes, we'll assume it's already saved

  return $newReview;
}

function getReviewsForProduct($productId) {
  // Retrieve reviews for a specific product from the database
  // For demonstration purposes, we'll assume it's an array of UserReview objects
  $reviews = array(
    new UserReview(1, 1, $productId, 5, "Great product!"),
    new UserReview(2, 2, $productId, 4, "Good, but not great."),
    new UserReview(3, 3, $productId, 3, "Okay.")
  );

  return $reviews;
}

function getReviewsForUser($userId) {
  // Retrieve reviews for a specific user from the database
  // For demonstration purposes, we'll assume it's an array of UserReview objects
  $reviews = array(
    new UserReview(1, $userId, 1, 5, "Great product!"),
    new UserReview(2, $userId, 2, 4, "Good, but not great."),
    new UserReview(3, $userId, 3, 3, "Okay.")
  );

  return $reviews;
}


// Create a new review for user with ID 1 on product with ID 1
$newReview = addReview(1, 1, 5, "Great product!");

// Get all reviews for product with ID 1
$reviewsForProduct = getReviewsForProduct(1);

// Get all reviews for user with ID 1
$reviewsForUser = getReviewsForUser(1);


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
function connectToDatabase() {
  $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Disconnect from database
function disconnectFromDatabase($conn) {
  $conn->close();
}

// Get all reviews for a product
function getReviewsForProduct($product_id, $conn) {
  $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
  $result = $conn->query($query);
  return $result->fetch_all(MYSQLI_ASSOC);
}

// Create a new review
function createReview($user_id, $product_id, $rating, $review, $conn) {
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES ('$user_id', '$product_id', '$rating', '$review')";
  if ($conn->query($query)) {
    return true;
  } else {
    return false;
  }
}

// Update an existing review
function updateReview($id, $user_id, $product_id, $rating, $review, $conn) {
  $query = "UPDATE reviews SET user_id = '$user_id', product_id = '$product_id', rating = '$rating', review = '$review' WHERE id = '$id'";
  if ($conn->query($query)) {
    return true;
  } else {
    return false;
  }
}

// Delete a review
function deleteReview($id, $conn) {
  $query = "DELETE FROM reviews WHERE id = '$id'";
  if ($conn->query($query)) {
    return true;
  } else {
    return false;
  }
}

// Example usage
$conn = connectToDatabase();
$product_id = 1;

// Get all reviews for the product
$reviews = getReviewsForProduct($product_id, $conn);
print_r($reviews);

// Create a new review
$user_id = 1;
$rating = 5;
$review = 'Great product!';
createReview($user_id, $product_id, $rating, $review, $conn);

// Update an existing review
$id = 1;
$update_rating = 4;
$update_review = 'Good product!';
updateReview($id, $user_id, $product_id, $update_rating, $update_review, $conn);

// Delete a review
deleteReview($id, $conn);
disconnectFromDatabase($conn);

?>


class Review {
    private $id;
    private $userId;
    private $productId;
    private $rating;
    private $reviewText;

    public function __construct($id = null, $userId = null, $productId = null, $rating = null, $reviewText = null) {
        $this->id = $id;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->reviewText = $reviewText;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getReviewText() {
        return $this->reviewText;
    }
}


class User {
    private $id;
    private $username;

    public function __construct($id = null, $username = null) {
        $this->id = $id;
        $this->username = $username;
    }

    public function getId() {
        return $this->id;
    }

    public function getUsername() {
        return $this->username;
    }
}


class Product {
    private $id;
    private $name;

    public function __construct($id = null, $name = null) {
        $this->id = $id;
        $this->name = $name;
    }

    public function getId() {
        return $this->id;
    }

    public function getName() {
        return $this->name;
    }
}


class ReviewModel {
    private $reviews;

    public function __construct() {
        $this->reviews = array();
    }

    public function addReview(Review $review) {
        $this->reviews[$review->getId()] = $review;
    }

    public function getReviewsByUserId($userId) {
        $reviews = array_filter($this->reviews, function ($review) use ($userId) {
            return $review->getUserId() == $userId;
        });
        return $reviews;
    }
}


class ReviewService {
    private $reviewModel;

    public function __construct(ReviewModel $reviewModel) {
        $this->reviewModel = $reviewModel;
    }

    public function addReview(Review $review) {
        $this->reviewModel->addReview($review);
    }

    public function getReviewsByUserId($userId) {
        return $this->reviewModel->getReviewsByUserId($userId);
    }
}


class ReviewController {
    private $reviewService;

    public function __construct(ReviewService $reviewService) {
        $this->reviewService = $reviewService;
    }

    public function addReview(Request $request) {
        // Validate request data
        if (!$request->hasValidData()) {
            return Response::create('Invalid request', 400);
        }

        $review = new Review();
        $review->setRating($request->get('rating'));
        $review->setReviewText($request->get('review_text'));
        $review->setUserId($request->getUser()->getId());
        $review->setProductId($request->getProduct()->getId());

        $this->reviewService->addReview($review);
        return Response::create('Review added successfully', 201);
    }

    public function getReviewsByUserId(Request $request) {
        // Validate request data
        if (!$request->hasValidData()) {
            return Response::create('Invalid request', 400);
        }

        $reviews = $this->reviewService->getReviewsByUserId($request->getUser()->getId());
        return Response::create($reviews, 200);
    }
}


$reviewModel = new ReviewModel();
$reviewService = new ReviewService($reviewModel);
$reviewController = new ReviewController($reviewService);

// Add a review
$request = new Request();
$request->setUser(new User(1, 'john_doe'));
$request->setProduct(new Product(1, 'Apple iPhone 13'));
$request->setRating(5);
$request->setReviewText('This phone is amazing!');
$response = $reviewController->addReview($request);

// Get reviews by user
$request = new Request();
$request->setUser(new User(1, 'john_doe'));
$response = $reviewController->getReviewsByUserId($request);


<?php

// Configuration
require_once 'config.php';

// Database connection
$conn = new PDO("mysql:host=$servername;dbname=$database", $username, $password);

function createUser($username, $password) {
  global $conn;
  
  // Hash password
  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
  
  try {
    // Insert user into database
    $stmt = $conn->prepare("INSERT INTO Users (username, password_hash) VALUES (:username, :password)");
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':password', $hashedPassword);
    $stmt->execute();
    
    return true;
  } catch(PDOException $e) {
    echo "Error: " . $e->getMessage() . "
";
    return false;
  }
}

function loginUser($username, $password) {
  global $conn;
  
  try {
    // Retrieve user from database
    $stmt = $conn->prepare("SELECT * FROM Users WHERE username = :username");
    $stmt->bindParam(':username', $username);
    $stmt->execute();
    
    $user = $stmt->fetch();
    
    if($user && password_verify($password, $user['password_hash'])) {
      return $user;
    } else {
      return false;
    }
  } catch(PDOException $e) {
    echo "Error: " . $e->getMessage() . "
";
    return false;
  }
}

function submitReview($product_name, $review_text, $rating) {
  global $conn;
  
  try {
    // Insert review into database
    $stmt = $conn->prepare("INSERT INTO Reviews (user_id, product_name, review_text, rating) VALUES (:user_id, :product_name, :review_text, :rating)");
    
    // Get user ID from logged in user
    $loggedInUser = $_SESSION['user'];
    $stmt->bindParam(':user_id', $loggedInUser['id']);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    
    $stmt->execute();
    
    return true;
  } catch(PDOException $e) {
    echo "Error: " . $e->getMessage() . "
";
    return false;
  }
}

function viewReviews() {
  global $conn;
  
  try {
    // Retrieve reviews from database
    $stmt = $conn->prepare("SELECT * FROM Reviews ORDER BY id DESC");
    $stmt->execute();
    
    return $stmt->fetchAll();
  } catch(PDOException $e) {
    echo "Error: " . $e->getMessage() . "
";
    return array();
  }
}

// Session handling
session_start();

if(isset($_POST['createUser'])) {
  createUser($_POST['username'], $_POST['password']);
} elseif(isset($_POST['loginUser'])) {
  $user = loginUser($_POST['username'], $_POST['password']);
  
  if($user) {
    $_SESSION['user'] = $user;
  }
}

if(isset($_POST['submitReview'])) {
  submitReview($_POST['product_name'], $_POST['review_text'], $_POST['rating']);
}

$reviews = viewReviews();

?>


// Review.php

class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Get all reviews for a specific product
  public function getReviewsForProduct(int $productId): array {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Get a single review by ID
  public function getReview(int $reviewId): array {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $reviewId);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  // Add a new review
  public function addReview(int $userId, int $productId, int $rating, string $review): bool {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    return $stmt->execute();
  }

  // Update an existing review
  public function updateReview(int $reviewId, int $newRating, string $newReview): bool {
    $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
    $stmt->bindParam(':rating', $newRating);
    $stmt->bindParam(':review', $newReview);
    $stmt->bindParam(':id', $reviewId);
    return $stmt->execute();
  }

  // Delete a review
  public function deleteReview(int $reviewId): bool {
    $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $reviewId);
    return $stmt->execute();
  }
}


// Connect to the database
$db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');

// Create a Review instance
$review = new Review($db);

// Get all reviews for product ID 1
$reviews = $review->getReviewsForProduct(1);
print_r($reviews);

// Add a new review
$newReview = array(
  'user_id' => 1,
  'product_id' => 1,
  'rating' => 5,
  'review' => 'Great product!'
);
$success = $review->addReview(...array_values($newReview));
if ($success) {
  echo "New review added successfully!";
} else {
  echo "Error adding new review.";
}


// Connect to the database
$mysqli = new mysqli("localhost", "username", "password", "database");

function get_product_reviews($product_id) {
  global $mysqli;
  
  // Get reviews for this product
  $query = "SELECT r.id, r.rating, r.review_text FROM reviews r JOIN products p ON r.product_id = p.id WHERE p.id = '$product_id'";
  $result = $mysqli->query($query);
  
  // Initialize variables to store the average rating and number of reviews
  $total_rating = 0;
  $num_reviews = 0;
  
  while ($review = $result->fetch_assoc()) {
    $total_rating += $review['rating'];
    $num_reviews++;
  }
  
  if ($num_reviews > 0) {
    // Calculate the average rating
    $average_rating = round($total_rating / $num_reviews, 2);
  } else {
    $average_rating = 0;
  }
  
  return array(
    'reviews' => $result->fetch_all(),
    'average_rating' => $average_rating,
    'num_reviews' => $num_reviews
  );
}

function submit_review($product_id, $rating, $review_text) {
  global $mysqli;
  
  // Insert the review into the database
  $query = "INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES ('$product_id', '$user_id', '$rating', '$review_text')";
  $mysqli->query($query);
}

// Example usage:
$product_id = 1;
$reviews = get_product_reviews($product_id);
echo "Product ID: $product_id
";
echo "Reviews:
";
print_r($reviews['reviews']);
echo "Average Rating: " . $reviews['average_rating'] . "
";
echo "Number of Reviews: " . $reviews['num_reviews'] . "
";

// Submit a review
$rating = 5;
$review_text = "This product is amazing!";
submit_review(1, $rating, $review_text);


// Function to create a new review
function create_review($product_id, $user_id, $review_text, $rating) {
  global $db; // Database connection object
  
  try {
    $stmt = $db->prepare("INSERT INTO user_reviews (product_id, user_id, review_text, rating) VALUES (?, ?, ?, ?)");
    $stmt->execute([$product_id, $user_id, $review_text, $rating]);
    
    return true;
  } catch (Exception $e) {
    echo "Error creating review: " . $e->getMessage();
    return false;
  }
}

// Function to retrieve a list of reviews for a product
function get_reviews($product_id) {
  global $db; // Database connection object
  
  try {
    $stmt = $db->prepare("SELECT * FROM user_reviews WHERE product_id = ?");
    $stmt->execute([$product_id]);
    
    return $stmt->fetchAll();
  } catch (Exception $e) {
    echo "Error retrieving reviews: " . $e->getMessage();
    return array();
  }
}

// Function to update an existing review
function update_review($review_id, $new_rating, $new_review_text) {
  global $db; // Database connection object
  
  try {
    $stmt = $db->prepare("UPDATE user_reviews SET rating = ?, review_text = ? WHERE id = ?");
    $stmt->execute([$new_rating, $new_review_text, $review_id]);
    
    return true;
  } catch (Exception $e) {
    echo "Error updating review: " . $e->getMessage();
    return false;
  }
}

// Function to delete a review
function delete_review($review_id) {
  global $db; // Database connection object
  
  try {
    $stmt = $db->prepare("DELETE FROM user_reviews WHERE id = ?");
    $stmt->execute([$review_id]);
    
    return true;
  } catch (Exception $e) {
    echo "Error deleting review: " . $e->getMessage();
    return false;
  }
}


// Create a new database connection
$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myusername', 'mypassword');

// Create a new review
create_review(1, 2, "Great product!", 5);

// Retrieve reviews for product ID 1
$reviews = get_reviews(1);
print_r($reviews); // Output: Array of review objects

// Update an existing review
update_review(1, 4, "Not so great after all.");

// Delete a review
delete_review(2);


class Review {
    public $id;
    public $rating;
    public $comment;
    public $product_id;
    public $created_at;

    public function __construct($data) {
        $this->id = $data['id'];
        $this->rating = $data['rating'];
        $this->comment = $data['comment'];
        $this->product_id = $data['product_id'];
        $this->created_at = date('Y-m-d H:i:s');
    }
}


class ReviewRepository {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview(Review $review) {
        try {
            $query = "INSERT INTO reviews (rating, comment, product_id) VALUES (:rating, :comment, :product_id)";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':rating', $review->rating);
            $stmt->bindParam(':comment', $review->comment);
            $stmt->bindParam(':product_id', $review->product_id);
            return $stmt->execute();
        } catch (PDOException $e) {
            throw new Exception('Error creating review: ' . $e->getMessage());
        }
    }

    public function getReviews($productId, $limit = 10, $offset = 0) {
        try {
            $query = "SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC LIMIT :limit OFFSET :offset";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':limit', $limit);
            $stmt->bindParam(':offset', $offset);
            return $stmt->execute() ? $stmt->fetchAll(PDO::FETCH_CLASS, 'Review') : array();
        } catch (PDOException $e) {
            throw new Exception('Error fetching reviews: ' . $e->getMessage());
        }
    }

    public function getReview($id) {
        try {
            $query = "SELECT * FROM reviews WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', $id);
            return $stmt->execute() ? $stmt->fetchObject('Review') : null;
        } catch (PDOException $e) {
            throw new Exception('Error fetching review: ' . $e->getMessage());
        }
    }

    public function updateReview(Review $review) {
        try {
            $query = "UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':rating', $review->rating);
            $stmt->bindParam(':comment', $review->comment);
            $stmt->bindParam(':id', $review->id);
            return $stmt->execute();
        } catch (PDOException $e) {
            throw new Exception('Error updating review: ' . $e->getMessage());
        }
    }

    public function deleteReview($id) {
        try {
            $query = "DELETE FROM reviews WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', $id);
            return $stmt->execute();
        } catch (PDOException $e) {
            throw new Exception('Error deleting review: ' . $e->getMessage());
        }
    }
}


class ReviewService {
    private $reviewRepository;

    public function __construct(ReviewRepository $reviewRepository) {
        $this->reviewRepository = $reviewRepository;
    }

    public function createReview($rating, $comment, $productId) {
        $review = new Review(array('rating' => $rating, 'comment' => $comment, 'product_id' => $productId));
        return $this->reviewRepository->createReview($review);
    }

    public function getReviews($productId, $limit = 10, $offset = 0) {
        return $this->reviewRepository->getReviews($productId, $limit, $offset);
    }

    public function getReview($id) {
        return $this->reviewRepository->getReview($id);
    }

    public function updateReview($id, $rating, $comment) {
        $review = new Review(array('rating' => $rating, 'comment' => $comment, 'id' => $id));
        return $this->reviewRepository->updateReview($review);
    }

    public function deleteReview($id) {
        return $this->reviewRepository->deleteReview($id);
    }
}


$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
$reviewRepository = new ReviewRepository($db);
$reviewService = new ReviewService($reviewRepository);

// Create a new review
$rating = 5;
$comment = 'Great product!';
$product_id = 1;
$reviewService->createReview($rating, $comment, $product_id);

// Get all reviews for a product
$productId = 1;
$limit = 10;
$offset = 0;
$reviews = $reviewService->getReviews($productId, $limit, $offset);
foreach ($reviews as $review) {
    echo $review->id . ': ' . $review->rating . '/' . $review->comment . PHP_EOL;
}

// Get a single review
$id = 1;
$review = $reviewService->getReview($id);
echo $review->id . ': ' . $review->rating . '/' . $review->comment . PHP_EOL;

// Update a review
$rating = 4;
$comment = 'Good product!';
$id = 1;
$reviewService->updateReview($id, $rating, $comment);

// Delete a review
$id = 1;
$reviewService->deleteReview($id);


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
  }

  // Create a new review
  public function createReview($user_id, $product_name, $rating, $review_text) {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_name, rating, review_text) VALUES (:user_id, :product_name, :rating, :review_text)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $review_text);
    return $stmt->execute();
  }

  // Get all reviews for a user
  public function getReviewsForUser($user_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE user_id = :user_id");
    $stmt->bindParam(':user_id', $user_id);
    return $stmt->execute() ? $stmt->fetchAll(PDO::FETCH_ASSOC) : array();
  }

  // Get a single review by ID
  public function getReview($review_id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :review_id");
    $stmt->bindParam(':review_id', $review_id);
    return $stmt->execute() ? $stmt->fetch(PDO::FETCH_ASSOC) : array();
  }

  // Update a review
  public function updateReview($review_id, $product_name, $rating, $review_text) {
    $stmt = $this->db->prepare("UPDATE reviews SET product_name = :product_name, rating = :rating, review_text = :review_text WHERE id = :review_id");
    $stmt->bindParam(':review_id', $review_id);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $review_text);
    return $stmt->execute();
  }

  // Delete a review
  public function deleteReview($review_id) {
    $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :review_id");
    $stmt->bindParam(':review_id', $review_id);
    return $stmt->execute();
  }
}


$review = new Review();

// Create a new review
$user_id = 1;
$product_name = 'Product X';
$rating = 5;
$review_text = 'This product is amazing!';
$created = $review->createReview($user_id, $product_name, $rating, $review_text);

if ($created) {
  echo "Review created successfully!";
} else {
  echo "Error creating review.";
}

// Get all reviews for a user
$user_reviews = $review->getReviewsForUser($user_id);
print_r($user_reviews);

// Get a single review by ID
$review->id = 1;
$single_review = $review->getReview(1);
echo json_encode($single_review);

// Update a review
$update_result = $review->updateReview(1, 'Product Y', 4, 'This product is good.');
if ($update_result) {
  echo "Review updated successfully!";
} else {
  echo "Error updating review.";
}

// Delete a review
$delete_result = $review->deleteReview(1);
if ($delete_result) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review.";
}


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$mysqli = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($mysqli->connect_error) {
    die("Connection failed: " . $mysqli->connect_error);
}

function getReviews($product_id) {
  // Retrieve reviews for a specific product
  $query = "SELECT * FROM reviews WHERE product_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $reviews = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  return $reviews;
}

function addReview($data) {
  // Validate and sanitize input data
  if (empty($data['rating']) || !is_numeric($data['rating'])) {
    throw new Exception('Invalid rating');
  }
  if (empty($data['review'])) {
    throw new Exception('Please enter a review');
  }

  // Insert new review into database
  $query = "INSERT INTO reviews (product_id, rating, review, user_id) VALUES (?, ?, ?, ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("iiss", $data['product_id'], $data['rating'], $data['review'], $_SESSION['user_id']);
  $stmt->execute();
}

function getAverageRating($product_id) {
  // Retrieve average rating for a specific product
  $query = "SELECT AVG(rating) as average_rating FROM reviews WHERE product_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  return $stmt->get_result()->fetch_assoc()['average_rating'];
}

function displayReviews() {
  // Retrieve and display all reviews
  $reviews = getReviews(0); // Use product ID of your choice (e.g., 0)
  echo "<h2>Reviews</h2>";
  foreach ($reviews as $review) {
    echo "<p><b>" . $review['rating'] . "/5 stars</b> - " . $review['review'] . "</p>";
  }
}


<?php
  // Assuming we have a logged-in user with an ID of 1
  $_SESSION['user_id'] = 1;

  $data = array(
    'product_id' => 123, // Replace with the actual product ID
    'rating' => 5,
    'review' => 'This is a great product!'
  );

  addReview($data);
?>


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function addReview($userId, $productId, $rating, $review) {
    // Check if the user exists
    $userQuery = "SELECT * FROM users WHERE id = ?";
    $stmt = $this->db->prepare($userQuery);
    $stmt->execute([$userId]);
    $user = $stmt->fetch();
    
    if (!$user) {
      throw new Exception("User not found");
    }

    // Check if the product exists
    $productQuery = "SELECT * FROM products WHERE id = ?";
    $stmt = $this->db->prepare($productQuery);
    $stmt->execute([$productId]);
    $product = $stmt->fetch();
    
    if (!$product) {
      throw new Exception("Product not found");
    }

    // Insert the review
    $reviewQuery = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($reviewQuery);
    $stmt->execute([$userId, $productId, $rating, $review]);

    return $this->db->lastInsertId();
  }

  public function getReviewsForProduct($productId) {
    // Get all reviews for the product
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$productId]);
    
    return $stmt->fetchAll();
  }

  public function getReviewsForUser($userId) {
    // Get all reviews for the user
    $query = "SELECT * FROM reviews WHERE user_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$userId]);
    
    return $stmt->fetchAll();
  }

  public function updateReview($reviewId, $rating, $review) {
    // Update the review
    $query = "UPDATE reviews SET rating = ?, review = ? WHERE id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$rating, $review, $reviewId]);
  }

  public function deleteReview($reviewId) {
    // Delete the review
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$reviewId]);
  }
}


$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

$review = new Review($db);

try {
  $reviewId = $review->addReview(1, 1, 5, "Great product!");
  echo "Review added successfully!";
} catch (Exception $e) {
  echo "Error: " . $e->getMessage();
}

$reviewsForProduct = $review->getReviewsForProduct(1);
echo "Reviews for product 1:
";
print_r($reviewsForProduct);

$reviewsForUser = $review->getReviewsForUser(1);
echo "Reviews for user 1:
";
print_r($reviewsForUser);

$review->updateReview(1, 4, "Not so great after all.");
echo "Review updated successfully!";

$review->deleteReview(1);
echo "Review deleted successfully!";


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Function to get all reviews for a product
  public function getAllReviewsForProduct($productId) {
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Function to get all products with reviews
  public function getAllProductsWithReviews() {
    $query = "SELECT p.id, p.name, COUNT(r.id) AS review_count FROM products p LEFT JOIN reviews r ON p.id = r.product_id GROUP BY p.id";
    $stmt = $this->db->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Function to create a new review
  public function createReview($userId, $productId, $rating, $reviewText) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (:user_id, :product_id, :rating, :review_text)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $reviewText);
    return $stmt->execute();
  }

  // Function to update a review
  public function updateReview($reviewId, $newRating, $newReviewText) {
    $query = "UPDATE reviews SET rating = :new_rating, review_text = :new_review_text WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':new_rating', $newRating);
    $stmt->bindParam(':new_review_text', $newReviewText);
    $stmt->bindParam(':id', $reviewId);
    return $stmt->execute();
  }

  // Function to delete a review
  public function deleteReview($reviewId) {
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $reviewId);
    return $stmt->execute();
  }
}


$db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

$review = new Review($db);

// Get all reviews for a product
$productReviews = $review->getAllReviewsForProduct(1);
print_r($productReviews);

// Create a new review
$newReviewCreated = $review->createReview(1, 1, 4, "Great product!");
echo var_dump($newReviewCreated); // Returns true if the review was created successfully

// Update an existing review
$updatedReview = $review->updateReview(1, 5, "Even better product now!");
echo var_dump($updatedReview); // Returns true if the review was updated successfully

// Delete a review
$deletedReview = $review->deleteReview(2);
echo var_dump($deletedReview); // Returns true if the review was deleted successfully


<?php

// Database connection settings
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "review_system";

// Create a database connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check the connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add review
function add_review() {
    global $conn;

    // Get form data from POST request
    if (isset($_POST['submit'])) {
        $name = $_POST['name'];
        $rating = $_POST['rating'];
        $review = $_POST['review'];
        $product_name = $_POST['product_name'];

        // Insert review into database
        $sql = "INSERT INTO reviews (name, rating, review, product_name) VALUES ('$name', '$rating', '$review', '$product_name')";
        if ($conn->query($sql)) {
            echo "Review added successfully!";
        } else {
            echo "Error adding review: " . $conn->error;
        }
    }
}

// Function to view reviews
function view_reviews() {
    global $conn;

    // Set pagination variables
    $per_page = 5; // Number of reviews per page
    $page = $_GET['page']; // Current page

    if (empty($page)) {
        $page = 1;
    }

    // Get total number of pages and current reviews
    $total_pages = ceil(count_reviews() / $per_page);
    $start_index = ($page - 1) * $per_page;

    // Retrieve reviews for the current page
    $sql = "SELECT id, name, rating, review, product_name FROM reviews ORDER BY id DESC LIMIT $start_index, $per_page";
    $results = $conn->query($sql);

    echo "<h2>Reviews</h2>";

    if ($results->num_rows > 0) {
        while ($row = $results->fetch_assoc()) {
            echo "ID: " . $row['id'] . ", Name: " . $row['name'] . ", Rating: " . $row['rating'] . "/5, Product: " . $row['product_name'];
            echo "<button onclick='window.location.href=\"delete_review.php?id=" . $row['id'] . "\"'>Delete</button>";
            echo "<br><br>";
        }
    } else {
        echo "No reviews available.";
    }

    // Show pagination links
    show_pagination_links($total_pages, $page);
}

// Function to delete review
function delete_review() {
    global $conn;

    // Get ID of the review to be deleted from GET request
    if (isset($_GET['id'])) {
        $review_id = $_GET['id'];

        // Delete review from database
        $sql = "DELETE FROM reviews WHERE id='$review_id'";
        if ($conn->query($sql)) {
            echo "Review deleted successfully!";
        } else {
            echo "Error deleting review: " . $conn->error;
        }
    }
}

// Function to count total number of reviews
function count_reviews() {
    global $conn;

    // Count the number of reviews in the database
    $sql = "SELECT COUNT(*) FROM reviews";
    return $conn->query($sql)->fetch_row()[0];
}

// Function to show pagination links
function show_pagination_links($total_pages, $current_page) {
    echo "<div style='text-align: center;'>";
    for ($i = 1; $i <= $total_pages; $i++) {
        if ($i == $current_page) {
            echo "<span style='font-weight: bold;'>$i</span> | ";
        } else {
            echo "<a href='?page=$i'>$i</a> | ";
        }
    }
    echo "</div>";
}

// Main script
if (isset($_GET['action']) && $_GET['action'] == "delete") {
    delete_review();
} elseif (isset($_POST['submit'])) {
    add_review();
} else {
    view_reviews();
}
?>


// models/Review.php

class Review {
    public $id;
    public $title;
    public $content;
    public $rating;
    public $created_at;

    function __construct($data) {
        $this->id = $data['id'];
        $this->title = $data['title'];
        $this->content = $data['content'];
        $this->rating = $data['rating'];
        $this->created_at = $data['created_at'];
    }
}


// repositories/ReviewRepository.php

class ReviewRepository {
    private $db;

    function __construct($db) {
        $this->db = $db;
    }

    public function getAllReviews() {
        $query = "SELECT * FROM reviews";
        return $this->db->query($query)->fetchAll(PDO::FETCH_CLASS, 'Review');
    }

    public function addReview($review) {
        $query = "INSERT INTO reviews (title, content, rating) VALUES (:title, :content, :rating)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':title', $review->title);
        $stmt->bindParam(':content', $review->content);
        $stmt->bindParam(':rating', $review->rating);
        return $stmt->execute();
    }
}


// controllers/ReviewController.php

class ReviewController {
    private $repo;

    function __construct($repo) {
        $this->repo = $repo;
    }

    public function index() {
        $reviews = $this->repo->getAllReviews();
        return view('reviews/index', ['reviews' => $reviews]);
    }

    public function create() {
        return view('reviews/create');
    }

    public function store(Request $request) {
        $review = new Review($request->all());
        if ($this->repo->addReview($review)) {
            return redirect()->route('reviews.index')->withSuccess('Review added successfully!');
        } else {
            return back()->withErrors(['Error adding review']);
        }
    }
}


// views/reviews/index.blade.php

<h1>Reviews</h1>

@foreach ($reviews as $review)
    <div>
        <h2>{{ $review->title }}</h2>
        <p>{{ $review->content }}</p>
        <p>Rating: {{ $review->rating }}/5</p>
    </div>
@endforeach


// routes/web.php

Route::get('/reviews', 'ReviewController@index');
Route::get('/reviews/create', 'ReviewController@create');
Route::post('/reviews', 'ReviewController@store');


// Review Model
class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function addReview($productId, $userId, $rating, $comment) {
    $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
              VALUES (:product_id, :user_id, :rating, :comment)";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->bindParam(':product_id', $productId);
      $stmt->bindParam(':user_id', $userId);
      $stmt->bindParam(':rating', $rating);
      $stmt->bindParam(':comment', $comment);
      return $stmt->execute();
    } catch (PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
      return false;
    }
  }

  public function getReviews($productId = null, $userId = null) {
    if ($productId !== null && $userId !== null) {
      $query = "SELECT * FROM reviews WHERE product_id = :product_id AND user_id = :user_id";
    } elseif ($productId !== null) {
      $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    } elseif ($userId !== null) {
      $query = "SELECT * FROM reviews WHERE user_id = :user_id";
    } else {
      $query = "SELECT * FROM reviews";
    }
    try {
      $stmt = $this->db->prepare($query);
      if ($productId !== null) {
        $stmt->bindParam(':product_id', $productId);
      }
      if ($userId !== null) {
        $stmt->bindParam(':user_id', $userId);
      }
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error fetching reviews: " . $e->getMessage();
      return array();
    }
  }

  public function updateReview($reviewId, $rating = null, $comment = null) {
    if ($rating !== null || $comment !== null) {
      $query = "UPDATE reviews SET ";
      if ($rating !== null) {
        $query .= "rating = :rating";
      }
      if ($comment !== null) {
        if (strpos($query, "WHERE") === false) {
          $query .= ", ";
        }
        $query .= "comment = :comment";
      }
      $query .= " WHERE id = :id";
    } else {
      echo "Error updating review: no rating or comment provided.";
      return false;
    }
    try {
      $stmt = $this->db->prepare($query);
      if ($rating !== null) {
        $stmt->bindParam(':rating', $rating);
      }
      if ($comment !== null) {
        $stmt->bindParam(':comment', $comment);
      }
      $stmt->bindParam(':id', $reviewId);
      return $stmt->execute();
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
      return false;
    }
  }

  public function deleteReview($reviewId) {
    $query = "DELETE FROM reviews WHERE id = :id";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->bindParam(':id', $reviewId);
      return $stmt->execute();
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');

$reviewModel = new Review($db);

// Add a new review
$product_id = 123;
$user_id = 456;
$rating = 4;
$comment = "Great product!";
$result = $reviewModel->addReview($product_id, $user_id, $rating, $comment);
if ($result) {
    echo "Review added successfully!";
} else {
    echo "Error adding review";
}

// Get reviews for a specific product
$product_id = 123;
$reviews = $reviewModel->getReviews($productId);
foreach ($reviews as $review) {
    echo $review['id'] . ": " . $review['comment'];
}

// Update an existing review
$reviewId = 1;
$rating = 5;
$result = $reviewModel->updateReview($reviewId, null, null, $rating);
if ($result) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review";
}


// db.php: Database connection script ( omitted for brevity )

class ReviewManager {
    private $db;

    public function __construct() {
        $this->db = connect_to_db(); // Assuming a database connection function
    }

    /**
     * Get all reviews for a specific product.
     *
     * @param int $product_id ID of the product being reviewed.
     * @return array Reviews for the given product.
     */
    public function getReviews($product_id) {
        $query = "SELECT r.id, u.username, r.rating, r.review_text
                  FROM reviews r
                  JOIN users u ON r.user_id = u.id
                  WHERE r.product_id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$product_id]);
        return $stmt->fetchAll();
    }

    /**
     * Add a new review for a product.
     *
     * @param int $user_id ID of the user submitting the review.
     * @param int $product_id ID of the product being reviewed.
     * @param int $rating Rating from 1 to 5.
     * @param string $review_text User's review text.
     */
    public function addReview($user_id, $product_id, $rating, $review_text) {
        $query = "INSERT INTO reviews (user_id, product_id, rating, review_text)
                  VALUES (?, ?, ?, ?)";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$user_id, $product_id, $rating, $review_text]);
    }

    /**
     * Calculate the average rating for a product.
     *
     * @param int $product_id ID of the product being reviewed.
     * @return float Average rating for the given product.
     */
    public function getAverageRating($product_id) {
        $query = "SELECT AVG(r.rating) AS avg_rating
                  FROM reviews r
                  WHERE r.product_id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->execute([$product_id]);
        return $stmt->fetch()['avg_rating'] ?? 0;
    }
}


$reviewManager = new ReviewManager();
$product_id = 123; // Replace with the actual product ID

// Get all reviews for a specific product.
$reviews = $reviewManager->getReviews($product_id);
print_r($reviews);

// Add a new review for a product.
$user_id = 456; // Replace with the actual user ID
$rating = 4;
$review_text = "Great product!";
$reviewManager->addReview($user_id, $product_id, $rating, $review_text);

// Calculate the average rating for a product.
$average_rating = $reviewManager->getAverageRating($product_id);
echo "Average Rating: $average_rating";


class Review {
  private $id;
  private $title;
  private $content;
  private $rating;
  private $user_id;

  public function __construct($id = null) {
    if ($id !== null) {
      $this->loadReview($id);
    }
  }

  public function loadReview($id) {
    global $db; // assuming a database connection is established

    $stmt = $db->prepare("SELECT * FROM reviews WHERE id = :id");
    $stmt->bindParam(":id", $id);
    $stmt->execute();

    if ($review = $stmt->fetch()) {
      $this->id = $review['id'];
      $this->title = $review['title'];
      $this->content = $review['content'];
      $this->rating = $review['rating'];
      $this->user_id = $review['user_id'];
    }
  }

  public function submitReview($user_id, $title, $content, $rating) {
    global $db; // assuming a database connection is established

    if ($title && $content && $rating > 0 && $rating <= 5) {
      $stmt = $db->prepare("INSERT INTO reviews (user_id, title, content, rating) VALUES (:user_id, :title, :content, :rating)");
      $stmt->bindParam(":user_id", $user_id);
      $stmt->bindParam(":title", $title);
      $stmt->bindParam(":content", $content);
      $stmt->bindParam(":rating", $rating);
      $stmt->execute();

      return true;
    }

    return false;
  }
}


require_once 'review.php';

// create a new review instance
$review = new Review();

// submit a new review
if ($review->submitReview(1, "Great Product!", "I love this product! It's amazing.", 5)) {
  echo "Review submitted successfully!";
} else {
  echo "Error submitting review.";
}

// load an existing review
$review = new Review(1);
echo $review->title; // outputs: Great Product!


<?php
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


function submit_review($product_id, $rating, $review_text, $user_id) {
    global $conn;

    // Check if product exists
    $query = "SELECT * FROM products WHERE id = '$product_id'";
    $result = $conn->query($query);
    if (!$result->num_rows > 0) {
        return false; // Product not found
    }

    // Insert review into database
    $query = "INSERT INTO reviews (user_id, product_id, rating, review_text)
              VALUES ('$user_id', '$product_id', '$rating', '$review_text')";
    if ($conn->query($query) === TRUE) {
        return true; // Review submitted successfully
    } else {
        echo "Error: " . $conn->error;
        return false; // Error submitting review
    }
}


function get_user_reviews($user_id) {
    global $conn;

    // Retrieve reviews from database
    $query = "SELECT * FROM reviews WHERE user_id = '$user_id'";
    $result = $conn->query($query);
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            // Process review data here
            echo "Review ID: " . $row["id"] . "<br>";
            echo "Product Name: " . get_product_name($row["product_id"]) . "<br>";
            echo "Rating: " . $row["rating"] . "/5<br>";
            echo "Review Text: " . $row["review_text"] . "<br><hr>";
        }
    } else {
        // No reviews found
        echo "No reviews found for this user.";
    }
}

function get_product_name($product_id) {
    global $conn;

    // Retrieve product name from database
    $query = "SELECT name FROM products WHERE id = '$product_id'";
    $result = $conn->query($query);
    if ($result->num_rows > 0) {
        return $result->fetch_assoc()["name"];
    } else {
        return ""; // Product not found
    }
}


// Submit a review for product ID 1 with rating 4 and review text "Great product!"
submit_review(1, 4, "Great product!", 1);

// Get all reviews left by user ID 1
get_user_reviews(1);


// database connection settings
$host = 'localhost';
$dbname = 'review_system';
$username = 'root';
$password = '';

// connect to the database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

class ReviewSystem {

    private $conn;

    function __construct() {
        $this->conn = $conn;
    }

    // create a review
    public function createReview($userId, $productId, $rating, $review) {
        $sql = "INSERT INTO reviews (user_id, product_id, rating, review)
                VALUES ('$userId', '$productId', '$rating', '$review')";
        
        if ($this->conn->query($sql) === TRUE) {
            return true;
        } else {
            return false;
        }
    }

    // get all reviews for a product
    public function getReviewsForProduct($productId) {
        $sql = "SELECT * FROM reviews WHERE product_id = '$productId'";
        
        $result = $this->conn->query($sql);
        
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_assoc()) {
                echo "id: " . $row["id"]. " - User ID: " . $row["user_id"]. " - Rating: " . $row["rating"]. " - Review: " . $row["review"]. "
";
            }
        } else {
            echo "0 results";
        }
    }

    // get all reviews for a user
    public function getReviewsForUser($userId) {
        $sql = "SELECT * FROM reviews WHERE user_id = '$userId'";
        
        $result = $this->conn->query($sql);
        
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_assoc()) {
                echo "id: " . $row["id"]. " - Product ID: " . $row["product_id"]. " - Rating: " . $row["rating"]. " - Review: " . $row["review"]. "
";
            }
        } else {
            echo "0 results";
        }
    }

    // update a review
    public function updateReview($id, $rating, $review) {
        $sql = "UPDATE reviews SET rating = '$rating', review = '$review' WHERE id = '$id'";
        
        if ($this->conn->query($sql) === TRUE) {
            return true;
        } else {
            return false;
        }
    }

    // delete a review
    public function deleteReview($id) {
        $sql = "DELETE FROM reviews WHERE id = '$id'";
        
        if ($this->conn->query($sql) === TRUE) {
            return true;
        } else {
            return false;
        }
    }
}

// usage example:
$reviewSystem = new ReviewSystem();

// create a review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review = "This product is amazing!";
$result = $reviewSystem->createReview($user_id, $product_id, $rating, $review);
if ($result) {
    echo "Review created successfully!
";
} else {
    echo "Failed to create review.
";
}

// get all reviews for a product
$product_id = 1;
$reviewSystem->getReviewsForProduct($product_id);

// get all reviews for a user
$user_id = 1;
$reviewSystem->getReviewsForUser($user_id);

// update a review
$id = 1;
$rating = 4;
$review = "This product is good!";
$result = $reviewSystem->updateReview($id, $rating, $review);
if ($result) {
    echo "Review updated successfully!
";
} else {
    echo "Failed to update review.
";
}

// delete a review
$id = 1;
$result = $reviewSystem->deleteReview($id);
if ($result) {
    echo "Review deleted successfully!
";
} else {
    echo "Failed to delete review.
";
}


// database.php (database connection settings)
<?php
class Database {
    private $host;
    private $db_name;
    private $user;
    private $password;

    public function __construct() {
        // Initialize database connection settings here
        $this->host = 'your_host';
        $this->db_name = 'your_database';
        $this->user = 'your_user';
        $this->password = 'your_password';

        try {
            $conn = new PDO('mysql:host=' . $this->host . ';dbname=' . $this->db_name, $this->user, $this->password);
            return $conn;
        } catch (PDOException $e) {
            echo "Error connecting to database: " . $e->getMessage();
        }
    }
}

// review.php (Review class)
<?php
require_once 'database.php';

class Review {
    private $id;
    private $product_id;
    private $user_id;
    private $rating;
    private $text;

    public function __construct($data = array()) {
        if (!empty($data)) {
            $this->id = isset($data['id']) ? $data['id'] : '';
            $this->product_id = isset($data['product_id']) ? $data['product_id'] : '';
            $this->user_id = isset($data['user_id']) ? $data['user_id'] : '';
            $this->rating = isset($data['rating']) ? $data['rating'] : 0;
            $this->text = isset($data['text']) ? $data['text'] : '';
        }
    }

    public function save() {
        global $db;
        $sql = "INSERT INTO reviews (product_id, user_id, rating, text) VALUES (:product_id, :user_id, :rating, :text)";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':product_id', $this->product_id);
        $stmt->bindParam(':user_id', $this->user_id);
        $stmt->bindParam(':rating', $this->rating);
        $stmt->bindParam(':text', $this->text);

        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error saving review: " . $e->getMessage();
            return false;
        }
    }

    public function delete() {
        global $db;
        $sql = "DELETE FROM reviews WHERE id = :id";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':id', $this->id);

        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error deleting review: " . $e->getMessage();
            return false;
        }
    }

    public function getReviews($product_id) {
        global $db;
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':product_id', $product_id);

        try {
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error fetching reviews: " . $e->getMessage();
            return array();
        }
    }
}

// product.php (Product class)
<?php
require_once 'database.php';

class Product {
    private $id;
    private $name;
    private $description;

    public function __construct($data = array()) {
        if (!empty($data)) {
            $this->id = isset($data['id']) ? $data['id'] : '';
            $this->name = isset($data['name']) ? $data['name'] : '';
            $this->description = isset($data['description']) ? $data['description'] : '';
        }
    }

    public function save() {
        global $db;
        $sql = "INSERT INTO products (name, description) VALUES (:name, :description)";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':name', $this->name);
        $stmt->bindParam(':description', $this->description);

        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error saving product: " . $e->getMessage();
            return false;
        }
    }

    public function delete() {
        global $db;
        $sql = "DELETE FROM products WHERE id = :id";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':id', $this->id);

        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error deleting product: " . $e->getMessage();
            return false;
        }
    }

    public function getProducts() {
        global $db;
        $sql = "SELECT * FROM products";
        try {
            $stmt = $db->query($sql);
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error fetching products: " . $e->getMessage();
            return array();
        }
    }

    public function getProductReviews() {
        global $db;
        $review = new Review();

        try {
            $reviews = $review->getReviews($this->id);
            return $reviews;
        } catch (PDOException $e) {
            echo "Error fetching reviews: " . $e->getMessage();
            return array();
        }
    }

}

// user.php (User class)
<?php
require_once 'database.php';

class User {
    private $id;
    private $username;
    private $email;

    public function __construct($data = array()) {
        if (!empty($data)) {
            $this->id = isset($data['id']) ? $data['id'] : '';
            $this->username = isset($data['username']) ? $data['username'] : '';
            $this->email = isset($data['email']) ? $data['email'] : '';
        }
    }

    public function save() {
        global $db;
        $sql = "INSERT INTO users (username, email) VALUES (:username, :email)";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':username', $this->username);
        $stmt->bindParam(':email', $this->email);

        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error saving user: " . $e->getMessage();
            return false;
        }
    }

    public function delete() {
        global $db;
        $sql = "DELETE FROM users WHERE id = :id";
        $stmt = $db->prepare($sql);
        $stmt->bindParam(':id', $this->id);

        try {
            $stmt->execute();
            return true;
        } catch (PDOException $e) {
            echo "Error deleting user: " . $e->getMessage();
            return false;
        }
    }

    public function getUserReviews() {
        global $db;
        $review = new Review();

        try {
            $reviews = $review->getReviews($this->id);
            return $reviews;
        } catch (PDOException $e) {
            echo "Error fetching reviews: " . $e->getMessage();
            return array();
        }
    }

}


// Save a new product
$product = new Product(array('name' => 'My Product', 'description' => 'This is my product'));
$product->save();

// Get all products
$products = Product::getProducts();

// Create a new user
$user = new User(array('username' => 'john_doe', 'email' => 'john@example.com'));
$user->save();

// Save a new review for the user
$review = new Review();
$review->product_id = $product->id;
$review->user_id = $user->id;
$review->rating = 5;
$review->text = 'I love this product!';
$review->save();

// Get all reviews for the product
$product_reviews = Product::getProductReviews($product->id);

// Delete a review
$review->delete();


<?php

// Connect to the database
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database_name";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to create a review
function createReview($user_id, $product_name, $rating, $review) {
    global $conn;
    
    // Check if the user is logged in
    if (!isset($_SESSION["id"])) {
        echo "Please log in to leave a review.";
        return false;
    }
    
    // Insert the review into the database
    $sql = "INSERT INTO reviews (user_id, product_name, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("isss", $user_id, $product_name, $rating, $review);
    if ($stmt->execute()) {
        echo "Review created successfully!";
        return true;
    } else {
        echo "Error creating review: " . $stmt->error;
        return false;
    }
}

// Function to retrieve all reviews for a product
function getReviews($product_name) {
    global $conn;
    
    // Retrieve the reviews from the database
    $sql = "SELECT * FROM reviews WHERE product_name = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $product_name);
    $stmt->execute();
    $result = $stmt->get_result();
    
    return $result;
}

// Function to get the average rating for a product
function getAverageRating($product_name) {
    global $conn;
    
    // Retrieve the average rating from the database
    $sql = "SELECT AVG(rating) AS average_rating FROM reviews WHERE product_name = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $product_name);
    $stmt->execute();
    $result = $stmt->get_result();
    
    return $result;
}

// Function to update the review
function updateReview($id, $rating, $review) {
    global $conn;
    
    // Update the review in the database
    $sql = "UPDATE reviews SET rating = ?, review = ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iss", $rating, $review, $id);
    if ($stmt->execute()) {
        echo "Review updated successfully!";
        return true;
    } else {
        echo "Error updating review: " . $stmt->error;
        return false;
    }
}

// Function to delete the review
function deleteReview($id) {
    global $conn;
    
    // Delete the review from the database
    $sql = "DELETE FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $id);
    if ($stmt->execute()) {
        echo "Review deleted successfully!";
        return true;
    } else {
        echo "Error deleting review: " . $stmt->error;
        return false;
    }
}

?>


<?php

// Create a new review
$user_id = 1;
$product_name = "Product A";
$rating = 4;
$review = "This product is great!";
createReview($user_id, $product_name, $rating, $review);

// Retrieve all reviews for a product
$product_name = "Product B";
$reviews = getReviews($product_name);
while ($row = $reviews->fetch_assoc()) {
    echo $row["id"] . ": " . $row["user_id"] . ", Rating: " . $row["rating"];
}

// Get the average rating for a product
$product_name = "Product C";
$average_rating = getAverageRating($product_name);
echo "Average rating: " . $average_rating->fetch_assoc()["average_rating"];

// Update a review
$id = 1;
$rating = 5;
$review = "This product is amazing!";
updateReview($id, $rating, $review);

// Delete a review
$id = 2;
deleteReview($id);

?>


class Review {
  private $id;
  private $productId;
  private $userId;
  private $rating;
  private $comment;

  public function __construct($id = null, $productId = null, $userId = null, $rating = null, $comment = null) {
    $this->id = $id;
    $this->productId = $productId;
    $this->userId = $userId;
    $this->rating = $rating;
    $this->comment = $comment;
  }

  // Getters and setters
  public function getId() { return $this->id; }
  public function getProductId() { return $this->productId; }
  public function getUserId() { return $this->userId; }
  public function getRating() { return $this->rating; }
  public function getComment() { return $this->comment; }

  // Static method to retrieve all reviews for a product
  public static function getReviewsForProduct($productId) {
    // Assuming a database connection is established
    $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

    $query = 'SELECT * FROM reviews WHERE product_id = :product_id';
    $stmt = $db->prepare($query);
    $stmt->bindParam(':product_id', $productId);

    $reviews = array();
    while ($row = $stmt->fetch()) {
      $review = new Review(
        $row['id'],
        $row['product_id'],
        $row['user_id'],
        $row['rating'],
        $row['comment']
      );
      $reviews[] = $review;
    }

    return $reviews;
  }
}


// Create a new review
$review = new Review(1, 1, 1, 5, 'Great product!');

// Save the review to database (assuming a saveReview function exists)
saveReview($review);

// Retrieve all reviews for product with id 1
$reviewsForProduct = Review::getReviewsForProduct(1);
foreach ($reviewsForProduct as $review) {
  echo "Rating: {$review->getRating()} - Comment: {$review->getComment()}
";
}


// Review.php

class Review {
    private $id;
    private $name;
    private $rating;
    private $comment;

    public function __construct($name = '', $rating = 0, $comment = '') {
        $this->name = $name;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    // Getters and setters
    public function getId() { return $this->id; }
    public function getName() { return $this->name; }
    public function getRating() { return $this->rating; }
    public function getComment() { return $this->comment; }

    public function setName($name) { $this->name = $name; }
    public function setRating($rating) { $this->rating = $rating; }
    public function setComment($comment) { $this->comment = $comment; }
}

// ReviewManager.php

class ReviewManager {
    private static $_reviews = [];

    public static function createReview(Review $review) {
        self::$_reviews[] = $review;
        return count(self::$_reviews) - 1;
    }

    public static function getReviews() {
        return self::$_reviews;
    }

    public static function updateReview($id, Review $newReview) {
        if ($id < count(self::$_reviews)) {
            self::$_reviews[$id] = $newReview;
        }
    }

    public static function deleteReview($id) {
        if ($id < count(self::$_reviews)) {
            unset(self::$_reviews[$id]);
        }
    }
}

// Example usage:

$review1 = new Review('John Doe', 5, 'Great product!');
$review2 = new Review('Jane Doe', 4, 'Good but not perfect.');

$reviewId1 = ReviewManager::createReview($review1);
$reviewId2 = ReviewManager::createReview($review2);

print_r(ReviewManager::getReviews()); // Array of all reviews

$review1->setComment('Excellent!');
ReviewManager::updateReview($reviewId1, $review1);

print_r(ReviewManager::getReviews()); // Updated review comment


// Review class
class Review {
  private $db;

  public function __construct() {
    // Connect to the database
    $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'username', 'password');
  }

  // Function to create a review
  public function createReview($userId, $productId, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:userId, :productId, :rating, :review)");
      $stmt->bindParam(':userId', $userId);
      $stmt->bindParam(':productId', $productId);
      $stmt->bindParam(':rating', $rating);
      $stmt->bindParam(':review', $review);

      if ($stmt->execute()) {
        return true;
      } else {
        return false;
      }
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  // Function to read reviews for a specific product
  public function getReviews($productId) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :productId");
      $stmt->bindParam(':productId', $productId);
      $stmt->execute();

      return $stmt->fetchAll();
    } catch (PDOException $e) {
      echo "Error reading reviews: " . $e->getMessage();
      return array();
    }
  }

  // Function to update a review
  public function updateReview($reviewId, $newRating, $newReview) {
    try {
      $stmt = $this->db->prepare("UPDATE reviews SET rating = :newRating, review = :newReview WHERE id = :reviewId");
      $stmt->bindParam(':reviewId', $reviewId);
      $stmt->bindParam(':newRating', $newRating);
      $stmt->bindParam(':newReview', $newReview);

      if ($stmt->execute()) {
        return true;
      } else {
        return false;
      }
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
      return false;
    }
  }

  // Function to delete a review
  public function deleteReview($reviewId) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :reviewId");
      $stmt->bindParam(':reviewId', $reviewId);

      if ($stmt->execute()) {
        return true;
      } else {
        return false;
      }
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


// Create a new Review object
$review = new Review();

// Create a new review
if ($review->createReview(1, 1, 5, 'This product is amazing!')) {
  echo "Review created successfully!";
} else {
  echo "Error creating review.";
}

// Read reviews for a specific product
$reviews = $review->getReviews(1);
foreach ($reviews as $review) {
  echo "Rating: " . $review['rating'] . ", Review: " . $review['review'];
}

// Update a review
if ($review->updateReview(1, 4, 'This product is okay.')) {
  echo "Review updated successfully!";
} else {
  echo "Error updating review.";
}

// Delete a review
if ($review->deleteReview(1)) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review.";
}


CREATE TABLE users (
  id INT PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL
);

CREATE TABLE reviews (
  id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT NOT NULL,
  product_id INT NOT NULL,
  rating TINYINT NOT NULL,
  review TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE products (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL
);


<?php
$dsn = 'mysql:host=localhost;dbname=mydatabase';
$username = 'myusername';
$password = 'mypassword';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}
?>


<?php
require_once 'config.php';

function add_review($user_id, $product_id, $rating, $review) {
    try {
        $stmt = $pdo->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)');
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        $stmt->execute();
        return true;
    } catch (PDOException $e) {
        echo 'Error adding review: ' . $e->getMessage();
        return false;
    }
}

function get_reviews($product_id) {
    try {
        $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo 'Error getting reviews: ' . $e->getMessage();
        return array();
    }
}

function get_user_reviews($user_id) {
    try {
        $stmt = $pdo->prepare('SELECT * FROM reviews WHERE user_id = :user_id');
        $stmt->bindParam(':user_id', $user_id);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo 'Error getting user reviews: ' . $e->getMessage();
        return array();
    }
}

// Example usage:
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    if (isset($_POST['submit'])) {
        $user_id = $_SESSION['user_id'];
        $product_id = $_POST['product_id'];
        $rating = $_POST['rating'];
        $review = $_POST['review'];

        add_review($user_id, $product_id, $rating, $review);
    }
}

$reviews = get_reviews($_GET['product_id']);
foreach ($reviews as $review) {
    echo 'Rating: ' . $review['rating'] . ', Review: ' . $review['review'];
}
?>


<?php
require_once 'config.php';

// User authentication logic (e.g. using sessions or a login system)
if (!isset($_SESSION['user_id'])) {
    echo 'You must be logged in to add reviews.';
}

// Get the product ID from the URL query string
$product_id = $_GET['product_id'];

// Display the review form
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
    <label for="rating">Rating:</label>
    <select id="rating" name="rating">
        <?php for ($i = 1; $i <= 5; $i++) { ?>
            <option value="<?php echo $i; ?>"><?php echo $i; ?></option>
        <?php } ?>
    </select>
    <br>
    <label for="review">Review:</label>
    <textarea id="review" name="review"></textarea>
    <br>
    <input type="submit" name="submit" value="Add Review">
</form>

<?php
require_once 'review.php';
?>


// Connect to database
$mysqli = new mysqli("localhost", "username", "password", "database");

function getReviews($product_id) {
  // Get all reviews for a specific product
  $query = "SELECT r.id, u.name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id WHERE product_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $result = $stmt->get_result();

  return $result;
}

function addReview($user_id, $product_id, $rating, $review) {
  // Add a new review to the database
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("iiss", $user_id, $product_id, $rating, $review);
  $stmt->execute();

  return true;
}

function getUserReviewHistory($user_id) {
  // Get all reviews written by a specific user
  $query = "SELECT p.name, r.rating, r.review FROM reviews r JOIN products p ON r.product_id = p.id WHERE r.user_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("i", $user_id);
  $stmt->execute();
  $result = $stmt->get_result();

  return $result;
}

// Example usage
$user_id = 1; // Replace with actual user ID
$product_id = 1; // Replace with actual product ID

$reviews = getReviews($product_id);
foreach ($reviews as $review) {
  echo "User: {$review['name']}, Rating: {$review['rating']}, Review: {$review['review']}
";
}

// Add a new review
addReview($user_id, $product_id, 5, "This product is great!");

// Get user's review history
$user_reviews = getUserReviewHistory($user_id);
foreach ($user_reviews as $review) {
  echo "Product: {$review['name']}, Rating: {$review['rating']}, Review: {$review['review']}
";
}


<?php

class Review {
  private $id;
  private $title;
  private $rating;
  private $content;

  public function __construct($id, $title, $rating, $content) {
    $this->id = $id;
    $this->title = $title;
    $this->rating = $rating;
    $this->content = $content;
  }

  public static function createReview($title, $rating, $content) {
    // Insert review into database (e.g. using PDO)
    $db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
    $stmt = $db->prepare("INSERT INTO reviews (title, rating, content) VALUES (:title, :rating, :content)");
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':content', $content);
    $stmt->execute();
    return new Review($db->lastInsertId(), $title, $rating, $content);
  }

  public static function getReviews() {
    // Retrieve reviews from database (e.g. using PDO)
    $db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
    $stmt = $db->query("SELECT * FROM reviews");
    $reviews = array();
    while ($row = $stmt->fetch()) {
      $review = new Review($row['id'], $row['title'], $row['rating'], $row['content']);
      $reviews[] = $review;
    }
    return $reviews;
  }

  public static function deleteReview($id) {
    // Delete review from database (e.g. using PDO)
    $db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
    $stmt = $db->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $id);
    $stmt->execute();
  }
}

?>


<?php

class ReviewController {
  public function createReview() {
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
      $title = $_POST['title'];
      $rating = $_POST['rating'];
      $content = $_POST['content'];
      $review = Review::createReview($title, $rating, $content);
      header('Location: index.php');
    }
  }

  public function getReviews() {
    $reviews = Review::getReviews();
    require_once 'views/review_list.php';
  }

  public function deleteReview() {
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
      $id = $_POST['id'];
      Review::deleteReview($id);
      header('Location: index.php');
    }
  }
}

?>


<?php

$reviews = $controller->getReviews();

?>

<h1>Reviews</h1>

<ul>
  <?php foreach ($reviews as $review) { ?>
    <li>
      <h2><?php echo $review->title; ?></h2>
      <p><?php echo $review->rating; ?>/5 stars</p>
      <p><?php echo substr($review->content, 0, 200); ?>...</p>
      <a href="#" class="delete" data-id="<?php echo $review->id; ?>">Delete review</a>
    </li>
  <?php } ?>
</ul>

<?php


<?php

require_once 'includes/autoload.php';

$controller = new ReviewController();

?>

<form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
  <input type="text" name="title" placeholder="Review title">
  <input type="number" min="1" max="5" step="0.01" name="rating" placeholder="Rating (out of 5)">
  <textarea name="content" placeholder="Content"></textarea>
  <button type="submit">Create review</button>
</form>

<?php


class Review {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    /**
     * Add a new review.
     *
     * @param int   $productId The ID of the product being reviewed.
     * @param int   $userId    The ID of the user submitting the review.
     * @param string $reviewText
     * @param int   $rating
     *
     * @return bool True if the review was successfully added, false otherwise.
     */
    public function addReview($productId, $userId, $reviewText, $rating) {
        $query = "INSERT INTO reviews (product_id, user_id, review, rating)
                  VALUES (:productId, :userId, :reviewText, :rating)";
        
        $stmt = $this->db->prepare($query);
        return $stmt->execute([
            ':productId' => $productId,
            ':userId'    => $userId,
            ':reviewText' => $reviewText,
            ':rating'     => $rating
        ]);
    }

    /**
     * Retrieve all reviews for a product.
     *
     * @param int $productId The ID of the product to retrieve reviews for.
     *
     * @return array An array of review objects, each containing user and review details.
     */
    public function getReviews($productId) {
        $query = "SELECT r.id, u.name AS username, r.review, r.rating
                  FROM reviews r JOIN users u ON r.user_id = u.id
                  WHERE r.product_id = :productId ORDER BY created_at DESC";
        
        $stmt = $this->db->prepare($query);
        $stmt->execute([':productId' => $productId]);
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * Update an existing review.
     *
     * @param int   $reviewId The ID of the review to update.
     * @param string $newReviewText
     * @param int   $newRating
     *
     * @return bool True if the review was successfully updated, false otherwise.
     */
    public function updateReview($reviewId, $newReviewText, $newRating) {
        $query = "UPDATE reviews SET review = :newReviewText, rating = :newRating
                  WHERE id = :reviewId";
        
        $stmt = $this->db->prepare($query);
        return $stmt->execute([
            ':reviewId'      => $reviewId,
            ':newReviewText' => $newReviewText,
            ':newRating'     => $newRating
        ]);
    }

    /**
     * Delete a review.
     *
     * @param int $reviewId The ID of the review to delete.
     *
     * @return bool True if the review was successfully deleted, false otherwise.
     */
    public function deleteReview($reviewId) {
        $query = "DELETE FROM reviews WHERE id = :reviewId";
        
        $stmt = $this->db->prepare($query);
        return $stmt->execute([':reviewId' => $reviewId]);
    }
}


require_once 'database.php';

$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myusername', 'mypassword');

$review = new Review($db);

// Add a review
if ($review->addReview(1, 1, "Great product!", 5)) {
    echo "Review added successfully.";
} else {
    echo "Failed to add review.";
}

// Retrieve all reviews for a product
$reviews = $review->getReviews(1);
print_r($reviews);

// Update an existing review
if ($review->updateReview(1, "Even better!", 5)) {
    echo "Review updated successfully.";
} else {
    echo "Failed to update review.";
}

// Delete a review
if ($review->deleteReview(1)) {
    echo "Review deleted successfully.";
} else {
    echo "Failed to delete review.";
}


<?php
class Review {
    private $db;

    public function __construct() {
        // Connect to the database
        $this->db = new SQLite3('reviews.db');
    }

    // Function to add a review
    public function addReview($product_id, $username, $rating, $review) {
        $query = "INSERT INTO reviews (product_id, username, rating, review) VALUES ('$product_id', '$username', '$rating', '$review')";
        $this->db->exec($query);
        return true;
    }

    // Function to update a review
    public function updateReview($id, $product_id, $username, $rating, $review) {
        $query = "UPDATE reviews SET product_id='$product_id', username='$username', rating='$rating', review='$review' WHERE id='$id'";
        $this->db->exec($query);
        return true;
    }

    // Function to delete a review
    public function deleteReview($id) {
        $query = "DELETE FROM reviews WHERE id='$id'";
        $this->db->exec($query);
        return true;
    }

    // Function to get all reviews for a product
    public function getAllReviewsForProduct($product_id) {
        $query = "SELECT * FROM reviews WHERE product_id='$product_id' ORDER BY rating DESC";
        $result = $this->db->query($query);
        $reviews = array();
        while ($row = $result->fetchArray(SQLITE3_ASSOC)) {
            $reviews[] = $row;
        }
        return $reviews;
    }

    // Function to get a review by ID
    public function getReviewById($id) {
        $query = "SELECT * FROM reviews WHERE id='$id'";
        $result = $this->db->query($query);
        return $result->fetchArray(SQLITE3_ASSOC);
    }
}

// Example usage:
$reviewSystem = new Review();

// Add a review
$reviewSystem->addReview(1, 'John Doe', 5, 'This product is great!');

// Get all reviews for a product
$reviews = $reviewSystem->getAllReviewsForProduct(1);

// Print the reviews
foreach ($reviews as $review) {
    echo 'Username: ' . $review['username'] . ', Rating: ' . $review['rating'] . ', Review: ' . $review['review'] . '<br>';
}
?>


// Function to retrieve reviews for a specific product
function getReviews($productId) {
    global $db; // assume database connection is stored in a variable called db

    $query = "SELECT r.id, u.name AS username, p.name AS product_name, r.rating, r.review 
              FROM reviews r 
              JOIN users u ON r.user_id = u.id 
              JOIN products p ON r.product_id = p.id 
              WHERE r.product_id = :productId 
              ORDER BY created_at DESC";

    $stmt = $db->prepare($query);
    $stmt->bindParam(':productId', $productId);

    try {
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo "Error retrieving reviews: " . $e->getMessage();
        return array();
    }
}

// Function to add a new review
function addReview($userId, $productId, $rating, $review) {
    global $db; // assume database connection is stored in a variable called db

    try {
        $query = "INSERT INTO reviews (user_id, product_id, rating, review)
                  VALUES (:userId, :productId, :rating, :review)";

        $stmt = $db->prepare($query);
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);

        $stmt->execute();

        return true;
    } catch (PDOException $e) {
        echo "Error adding review: " . $e->getMessage();
        return false;
    }
}

// Function to update an existing review
function updateReview($reviewId, $rating, $review) {
    global $db; // assume database connection is stored in a variable called db

    try {
        $query = "UPDATE reviews 
                  SET rating = :rating, review = :review 
                  WHERE id = :reviewId";

        $stmt = $db->prepare($query);
        $stmt->bindParam(':reviewId', $reviewId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);

        $stmt->execute();

        return true;
    } catch (PDOException $e) {
        echo "Error updating review: " . $e->getMessage();
        return false;
    }
}

// Function to delete a review
function deleteReview($reviewId) {
    global $db; // assume database connection is stored in a variable called db

    try {
        $query = "DELETE FROM reviews 
                  WHERE id = :reviewId";

        $stmt = $db->prepare($query);
        $stmt->bindParam(':reviewId', $reviewId);

        $stmt->execute();

        return true;
    } catch (PDOException $e) {
        echo "Error deleting review: " . $e->getMessage();
        return false;
    }
}


// Retrieve reviews for product with ID 123
$reviews = getReviews(123);
echo json_encode($reviews);

// Add a new review for user with ID 456 and product with ID 123
$newReview = addReview(456, 123, 4, "Great product!");
echo $newReview ? "Review added successfully!" : "Error adding review";

// Update the rating and review of review with ID 789
$updateResult = updateReview(789, 5, "Excellent service!");
echo $updateResult ? "Review updated successfully!" : "Error updating review";

// Delete review with ID 456
$deleteResult = deleteReview(456);
echo $deleteResult ? "Review deleted successfully!" : "Error deleting review";


// db.php - database connection script

class Review {

    private $conn;

    public function __construct() {
        require_once 'db.php';
        $this->conn = new mysqli($GLOBALS['server'], $GLOBALS['username'], $GLOBALS['password'], $GLOBALS['database']);
    }

    // Create a review
    public function createReview($productId, $userId, $rating, $reviewText) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "INSERT INTO reviews (product_id, user_id, rating, review_text)
                VALUES (?, ?, ?, ?)";
        
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("iiss", $productId, $userId, $rating, $reviewText);

        if ($stmt->execute()) {
            return true;
        } else {
            echo "Error: " . $stmt->error;
            return false;
        }
    }

    // Get all reviews for a product
    public function getReviewsForProduct($productId) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "SELECT * FROM reviews WHERE product_id = ?";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("i", $productId);

        if ($stmt->execute()) {
            return $stmt->get_result();
        } else {
            echo "Error: " . $stmt->error;
            return false;
        }
    }

    // Get all reviews for a user
    public function getReviewsForUser($userId) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "SELECT * FROM reviews WHERE user_id = ?";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("i", $userId);

        if ($stmt->execute()) {
            return $stmt->get_result();
        } else {
            echo "Error: " . $stmt->error;
            return false;
        }
    }

    // Update a review
    public function updateReview($reviewId, $rating, $reviewText) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("iis", $rating, $reviewText, $reviewId);

        if ($stmt->execute()) {
            return true;
        } else {
            echo "Error: " . $stmt->error;
            return false;
        }
    }

    // Delete a review
    public function deleteReview($reviewId) {
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
        
        $sql = "DELETE FROM reviews WHERE id = ?";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("i", $reviewId);

        if ($stmt->execute()) {
            return true;
        } else {
            echo "Error: " . $stmt->error;
            return false;
        }
    }

}


require_once 'db.php';
require_once 'review.php';

$review = new Review();

// Create a review
if ($review->createReview(1, 1, 4, "Good product!")) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}

// Get all reviews for a product
$result = $review->getReviewsForProduct(1);
while ($row = $result->fetch_assoc()) {
    echo "ID: " . $row['id'] . "<br>";
    echo "Product ID: " . $row['product_id'] . "<br>";
    echo "User ID: " . $row['user_id'] . "<br>";
    echo "Rating: " . $row['rating'] . "/5<br>";
    echo "Review Text: " . $row['review_text'] . "<br><hr>";
}

// Update a review
if ($review->updateReview(1, 5, "Excellent product!")) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review.";
}

// Delete a review
if ($review->deleteReview(1)) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review.";
}


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_NAME', 'reviews_db');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');

// Function to connect to the database
function db_connect() {
  $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Function to leave a review
function leave_review($product_id, $user_id, $rating, $comment) {
  $conn = db_connect();
  $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
          VALUES (?, ?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("iiss", $product_id, $user_id, $rating, $comment);
  $stmt->execute();
  $review_id = $conn->insert_id;
  $conn->close();
  return $review_id;
}

// Function to get all reviews for a product
function get_reviews($product_id) {
  $conn = db_connect();
  $sql = "SELECT * FROM reviews WHERE product_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $reviews = array();
  while ($row = $stmt->get_result()->fetch_assoc()) {
    $reviews[] = array(
      'id' => $row['id'],
      'rating' => $row['rating'],
      'comment' => $row['comment']
    );
  }
  $conn->close();
  return $reviews;
}

// Function to get average rating for a product
function get_average_rating($product_id) {
  $conn = db_connect();
  $sql = "SELECT AVG(rating) FROM reviews WHERE product_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $result = $stmt->get_result()->fetch_assoc();
  $avg_rating = $result['AVG(rating)'] ?: 0;
  $conn->close();
  return $avg_rating;
}

// Example usage
$product_id = 1;
$user_id = 1;
$rating = 4;
$comment = 'This product is great!';

$review_id = leave_review($product_id, $user_id, $rating, $comment);
print "Review left with ID: $review_id
";

$reviews = get_reviews($product_id);
print_r($reviews);

$avg_rating = get_average_rating($product_id);
print "Average rating for product $product_id is: $avg_rating
";


<?php

// Database connection settings
$dsn = 'mysql:host=localhost;dbname=your_database_name';
$username = 'your_database_username';
$password = 'your_database_password';

try {
  // Connect to database
  $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
  echo 'Connection failed: ' . $e->getMessage();
  exit;
}

// Function to get all reviews
function getAllReviews() {
  global $pdo;
  $stmt = $pdo->prepare('SELECT * FROM reviews ORDER BY created_at DESC');
  $stmt->execute();
  return $stmt->fetchAll();
}

// Function to get a single review by ID
function getReviewById($id) {
  global $pdo;
  $stmt = $pdo->prepare('SELECT * FROM reviews WHERE id = :id');
  $stmt->bindParam(':id', $id);
  $stmt->execute();
  return $stmt->fetch();
}

// Function to add a new review
function addReview($user_id, $title, $content, $rating) {
  global $pdo;
  $stmt = $pdo->prepare('INSERT INTO reviews (user_id, title, content, rating) VALUES (:user_id, :title, :content, :rating)');
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':title', $title);
  $stmt->bindParam(':content', $content);
  $stmt->bindParam(':rating', $rating);
  return $stmt->execute();
}

// Function to update an existing review
function updateReview($id, $title, $content, $rating) {
  global $pdo;
  $stmt = $pdo->prepare('UPDATE reviews SET title = :title, content = :content, rating = :rating WHERE id = :id');
  $stmt->bindParam(':id', $id);
  $stmt->bindParam(':title', $title);
  $stmt->bindParam(':content', $content);
  $stmt->bindParam(':rating', $rating);
  return $stmt->execute();
}

// Function to delete a review
function deleteReview($id) {
  global $pdo;
  $stmt = $pdo->prepare('DELETE FROM reviews WHERE id = :id');
  $stmt->bindParam(':id', $id);
  return $stmt->execute();
}


<?php

// Check if form has been submitted
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // Get user input
  $title = $_POST['title'];
  $content = $_POST['content'];
  $rating = $_POST['rating'];

  // Add review to database
  addReview($_SESSION['user_id'], $title, $content, $rating);

  // Redirect to index page
  header('Location: index.php');
  exit;
}

// If form has not been submitted, display empty form
?>
<!DOCTYPE html>
<html>
<head>
  <title>Add Review</title>
</head>
<body>

  <!-- Display review form -->
  <h1>Add a new review:</h1>
  <form action="add_review.php" method="post">
    <input type="text" name="title" placeholder="Title...">
    <textarea name="content" rows="5" cols="30"></textarea>
    <select name="rating">
      <option value="1">1/5</option>
      <option value="2">2/5</option>
      <option value="3">3/5</option>
      <option value="4">4/5</option>
      <option value="5">5/5</option>
    </select>
    <input type="submit" value="Submit">
  </form>

</body>
</html>


<?php

// Get review ID from URL parameter
$id = $_GET['id'];

// Get review data from database
$review = getReviewById($id);

// Display review content
?>
<!DOCTYPE html>
<html>
<head>
  <title>Review: <?php echo $review['title'] ?></title>
</head>
<body>

  <!-- Display review title -->
  <h1><?php echo $review['title'] ?></h1>

  <!-- Display review rating and content -->
  <p>Rating: <?php echo $review['rating'] ?>/5</p>
  <p><?php echo $review['content'] ?></p>

</body>
</html>


// Define the UserReview class
class UserReview {
  private $reviews;

  public function __construct() {
    $this->reviews = [];
  }

  /**
   * Add a new review
   *
   * @param string $reviewerName
   * @param string $reviewTitle
   * @param string $reviewContent
   */
  public function addReview($reviewerName, $reviewTitle, $reviewContent) {
    $newReview = [
      'reviewer' => $reviewerName,
      'title' => $reviewTitle,
      'content' => $reviewContent,
      'timestamp' => date('Y-m-d H:i:s')
    ];
    array_push($this->reviews, $newReview);
  }

  /**
   * Display all reviews
   *
   * @return string
   */
  public function displayReviews() {
    $output = '';
    foreach ($this->reviews as $review) {
      $output .= '<p><strong>' . $review['title'] . '</strong> by ' . $review['reviewer'] . ' on ' . $review['timestamp'] . '</p>';
      $output .= '<p>' . $review['content'] . '</p>';
    }
    return $output;
  }

  /**
   * Get the number of reviews
   *
   * @return int
   */
  public function getNumReviews() {
    return count($this->reviews);
  }
}


// Create a new UserReview instance
$reviewSystem = new UserReview();

// Add some reviews
$reviewSystem->addReview('John Doe', 'Great product!', 'I love this product!');
$reviewSystem->addReview('Jane Smith', 'Good service', 'The staff were helpful and friendly.');
$reviewSystem->addReview('Bob Johnson', 'Disappointing experience', 'Unfortunately, my order arrived late.');

// Display all reviews
echo $reviewSystem->displayReviews();

// Get the number of reviews
echo 'Number of reviews: ' . $reviewSystem->getNumReviews();


<?php

// Database connection settings
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($mysqli->connect_errno) {
    echo "Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error;
}

function get_reviews($product_id) {
    global $mysqli;

    // Get reviews for a specific product
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $mysqli->query($query);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $reviews[] = array(
                'id' => $row['id'],
                'user_name' => $row['user_name'],
                'review_text' => $row['review_text'],
                'rating' => $row['rating']
            );
        }

        return $reviews;
    } else {
        return false;
    }
}

function submit_review($product_id, $user_name, $review_text, $rating) {
    global $mysqli;

    // Insert new review into database
    $query = "INSERT INTO reviews (product_id, user_name, review_text, rating)
              VALUES ('$product_id', '$user_name', '$review_text', '$rating')";
    $result = $mysqli->query($query);

    if ($result) {
        return true;
    } else {
        echo "Error submitting review: (" . $mysqli->errno . ") " . $mysqli->error;
        return false;
    }
}

// Example usage
$product_id = 1; // ID of the product for which to display reviews

$reviews = get_reviews($product_id);

if ($reviews) {
    foreach ($reviews as $review) {
        echo "User: $review[user_name] | Rating: $review[rating]/5 | Review: $review[review_text]<br>";
    }
} else {
    echo "No reviews found for this product.";
}

?>


<?php

// Include review.php file
include 'review.php';

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $product_id = $_POST['product_id'];
    $user_name = $_POST['user_name'];
    $review_text = $_POST['review_text'];
    $rating = $_POST['rating'];

    // Submit review to database
    if (submit_review($product_id, $user_name, $review_text, $rating)) {
        echo "Review submitted successfully!";
    } else {
        echo "Error submitting review.";
    }
}

?>


// ReviewSystem.php

class ReviewSystem {
    private $db;

    public function __construct() {
        // Connect to database
        $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
    }

    /**
     * Get all reviews for a product.
     *
     * @param int $productId Product ID
     */
    public function getReviews($productId) {
        $stmt = $this->db->prepare('SELECT r.id, u.name, r.rating, r.review FROM Reviews r INNER JOIN Users u ON r.user_id = u.id WHERE r.product_id = ?');
        $stmt->execute([$productId]);
        return $stmt->fetchAll();
    }

    /**
     * Get the average rating of a product.
     *
     * @param int $productId Product ID
     */
    public function getAverageRating($productId) {
        $stmt = $this->db->prepare('SELECT AVG(r.rating) AS avg_rating FROM Reviews r WHERE r.product_id = ?');
        $stmt->execute([$productId]);
        return $stmt->fetchColumn();
    }

    /**
     * Add a new review.
     *
     * @param int $productId Product ID
     * @param string $review Review text
     * @param int $rating Rating (1-5)
     */
    public function addReview($productId, $review, $rating) {
        if ($this->isUserLoggedIn()) {
            // Insert review into database
            $stmt = $this->db->prepare('INSERT INTO Reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)');
            $stmt->execute([$productId, $_SESSION['id'], $rating, $review]);
        } else {
            // User is not logged in
        }
    }

    /**
     * Check if the user is logged in.
     */
    private function isUserLoggedIn() {
        return isset($_SESSION['id']);
    }
}


// index.php

require_once 'ReviewSystem.php';

$reviewSystem = new ReviewSystem();

if (isset($_GET['product_id'])) {
    $productId = $_GET['product_id'];
    $reviews = $reviewSystem->getReviews($productId);
} else {
    // No product ID provided
}

if (isset($_POST['submit'])) {
    $productId = $_POST['product_id'];
    $review = $_POST['review'];
    $rating = $_POST['rating'];

    $reviewSystem->addReview($productId, $review, $rating);

    header('Location: index.php?product_id=' . $productId);
    exit;
}


class UserReview {
    private $id;
    private $reviewText;
    private $rating;

    public function __construct($id = null, $reviewText = '', $rating = 0) {
        $this->id = $id;
        $this->reviewText = $reviewText;
        $this->rating = $rating;
    }

    // Getters
    public function getId() { return $this->id; }
    public function getReviewText() { return $this->reviewText; }
    public function getRating() { return $this->rating; }

    // Setters
    public function setId($id) { $this->id = $id; }
    public function setReviewText($text) {
        if (empty($text)) {
            throw new Exception('Review text cannot be empty.');
        }
        $this->reviewText = $text;
    }
    public function setRating($rating) {
        if (!is_int($rating) || $rating < 0 || $rating > 5) {
            throw new Exception('Invalid rating. Must be an integer between 0 and 5.');
        }
        $this->rating = $rating;
    }

    // Methods
    public static function createReview($reviewText, $rating) {
        return new UserReview(null, $reviewText, $rating);
    }

    public static function getReviews() {
        // Simulate fetching reviews from database (replace with actual implementation)
        return array(
            new UserReview(1, 'Great product!', 5),
            new UserReview(2, 'Average experience.', 3),
        );
    }
}


// Create a new review
$review = UserReview::createReview('Excellent service!', 5);
echo $review->getReviewText() . PHP_EOL; // Excellent service!
echo $review->getRating() . PHP_EOL;     // 5

// Get all reviews
$reviews = UserReview::getReviews();
foreach ($reviews as $r) {
    echo "ID: {$r->getId()} | Review Text: {$r->getReviewText()} | Rating: {$r->getRating()}" . PHP_EOL;
}

// Update a review
$review = new UserReview(1, '', 0);
$review->setReviewText('Even better experience!');
echo $review->getReviewText() . PHP_EOL; // Even better experience!

// Delete a review (not implemented in this example)


/**
 * @class UserReview
 * @brief Represents a user review.
 *
 * @property int $id Review ID (unique identifier)
 * @property string $reviewText Text of the review
 * @property int $rating Rating given by the user (0-5)
 */


<?php

// Include database connection file
require_once 'db.php';

// Function to display review form
function displayReviewForm() {
  echo '<form action="" method="post">';
  echo '<label>Rating:</label>';
  echo '<select name="rating" required>';
  for ($i = 1; $i <= 5; $i++) {
    echo '<option value="' . $i . '">' . $i . '</option>';
  }
  echo '</select><br>';
  echo '<label>Review:</label>';
  echo '<textarea name="review" rows="4" cols="50"></textarea><br>';
  echo '<input type="submit" value="Submit Review">';
  echo '</form>';
}

// Function to add new review
function addReview() {
  if (isset($_POST['rating']) && isset($_POST['review'])) {
    $userId = $_SESSION['user']['id'];
    $productId = $_GET['product_id']; // assume product ID is passed as GET parameter
    $rating = $_POST['rating'];
    $review = $_POST['review'];

    try {
      // Insert review into database
      $stmt = $db->prepare('INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)');
      $stmt->bindParam(':user_id', $userId);
      $stmt->bindParam(':product_id', $productId);
      $stmt->bindParam(':rating', $rating);
      $stmt->bindParam(':review', $review);
      $stmt->execute();

      // Display success message
      echo '<p>Review added successfully!</p>';
    } catch (PDOException $e) {
      echo '<p>Error adding review: ' . $e->getMessage() . '</p>';
    }
  }
}

// Function to display reviews for a product
function displayReviews($productId) {
  try {
    // Get reviews for product from database
    $stmt = $db->prepare('SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC');
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();

    // Display reviews
    echo '<h2>Reviews for Product ' . $productId . '</h2>';
    while ($review = $stmt->fetch()) {
      echo '<p>' . $review['user']['name'] . ': ' . $review['rating'] . '/5 stars</p>';
      echo '<p>' . $review['review'] . '</p>';
      echo '<hr>';
    }
  } catch (PDOException $e) {
    echo '<p>Error getting reviews: ' . $e->getMessage() . '</p>';
  }
}

?>


<?php require_once 'review.php'; displayReviewForm(); ?>


<?php addReview(); ?>


<?php displayReviews($productId); ?>


// db.php: Database connection file

$mysqli = new mysqli('localhost', 'username', 'password', 'database');

if ($mysqli->connect_error) {
    die("Connection failed: " . $mysqli->connect_error);
}


// review_functions.php: Function to interact with reviews table

require_once 'db.php';

function create_review($user_id, $product_id, $rating, $review) {
    // Prepare the query
    $stmt = $mysqli->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
    
    // Bind parameters
    $stmt->bind_param('iiss', $user_id, $product_id, $rating, $review);
    
    // Execute the query
    if (!$stmt->execute()) {
        echo 'Error creating review: ' . $mysqli->error;
    }
    
    return true;
}

function get_reviews($product_id) {
    // Prepare the query
    $stmt = $mysqli->prepare("SELECT r.id, u.name AS user_name, p.name AS product_name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id WHERE r.product_id = ?");
    
    // Bind parameter
    $stmt->bind_param('i', $product_id);
    
    // Execute the query and fetch results
    if (!$stmt->execute()) {
        echo 'Error fetching reviews: ' . $mysqli->error;
    }
    
    $reviews = array();
    $result = $stmt->get_result();
    
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }
    
    return $reviews;
}

function update_review($review_id, $new_rating, $new_review) {
    // Prepare the query
    $stmt = $mysqli->prepare("UPDATE reviews SET rating = ?, review = ? WHERE id = ?");
    
    // Bind parameters
    $stmt->bind_param('iis', $new_rating, $new_review, $review_id);
    
    // Execute the query
    if (!$stmt->execute()) {
        echo 'Error updating review: ' . $mysqli->error;
    }
}

function delete_review($review_id) {
    // Prepare the query
    $stmt = $mysqli->prepare("DELETE FROM reviews WHERE id = ?");
    
    // Bind parameter
    $stmt->bind_param('i', $review_id);
    
    // Execute the query
    if (!$stmt->execute()) {
        echo 'Error deleting review: ' . $mysqli->error;
    }
}


// Create a new review
create_review(1, 2, 5, "Great product!");

// Get all reviews for a specific product
$reviews = get_reviews(2);
print_r($reviews);

// Update an existing review
update_review(1, 4, "Good product, but not great.");

// Delete a review
delete_review(1);


<?php

// Database connection settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

class Review {
    private $id;
    private $username;
    private $rating;
    private $review;

    public function __construct($data = array()) {
        if (isset($data['id'])) {
            $this->id = $data['id'];
        }
        if (isset($data['username'])) {
            $this->username = $data['username'];
        }
        if (isset($data['rating'])) {
            $this->rating = $data['rating'];
        }
        if (isset($data['review'])) {
            $this->review = $data['review'];
        }
    }

    public function save() {
        global $conn;

        // Check if review already exists
        $query = "SELECT * FROM reviews WHERE username = '" . $this->username . "' AND rating = " . $this->rating;
        $result = $conn->query($query);

        if ($result->num_rows > 0) {
            return true; // Review already exists
        }

        // Insert new review into database
        $sql = "INSERT INTO reviews (username, rating, review) VALUES ('" . $this->username . "', '" . $this->rating . "', '" . $this->review . "')";

        if ($conn->query($sql) === TRUE) {
            return true; // Review saved successfully
        } else {
            echo "Error: " . $sql . "<br>" . $conn->error;
        }
    }

    public static function getAll() {
        global $conn;

        // Retrieve all reviews from database
        $query = "SELECT * FROM reviews";
        $result = $conn->query($query);

        if ($result->num_rows > 0) {
            return $result; // Return all reviews as a result set
        } else {
            return null;
        }
    }

    public static function getReviewById($id) {
        global $conn;

        // Retrieve review by ID from database
        $query = "SELECT * FROM reviews WHERE id = '" . $id . "'";
        $result = $conn->query($query);

        if ($result->num_rows > 0) {
            return $result; // Return review as a result set
        } else {
            return null;
        }
    }
}

?>


<?php

require_once 'review.php';

// Create a new review
$review = new Review(array(
    'username' => 'John Doe',
    'rating' => 5,
    'review' => 'This product is amazing!'
));

if ($review->save()) {
    echo "Review saved successfully!";
} else {
    echo "Error saving review.";
}

// Retrieve all reviews
$reviews = Review::getAll();

if ($reviews !== null) {
    foreach ($reviews as $row) {
        echo $row['username'] . ": " . $row['rating'] . "/5 - " . $row['review'];
    }
} else {
    echo "No reviews found.";
}

?>


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function getReviewsForProduct($productId) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
    $stmt->execute([$productId]);
    return $stmt->fetchAll();
  }

  public function createReview($userId, $productId, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
      $stmt->execute([$userId, $productId, $rating, $review]);
      return true;
    } catch (PDOException $e) {
      return false;
    }
  }

  public function getAverageRatingForProduct($productId) {
    $stmt = $this->db->prepare("SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = ?");
    $stmt->execute([$productId]);
    $result = $stmt->fetch();
    return isset($result['average_rating']) ? $result['average_rating'] : 0;
  }
}


function review($db, $userId, $productId, $rating, $review) {
  try {
    if (isset($_POST['submit'])) {
      $reviewClass = new Review($db);
      $result = $reviewClass->createReview($userId, $productId, $rating, $review);
      if ($result) {
        return "Review created successfully!";
      } else {
        return "Error creating review.";
      }
    }
  } catch (PDOException $e) {
    return "Error: " . $e->getMessage();
  }
}


$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
$userId = $_SESSION['user_id'];
$productId = $_POST['product_id'];
$rating = $_POST['rating'];
$review = $_POST['review'];

echo review($db, $userId, $productId, $rating, $review);


// config.php
$database = array(
    'host' => 'localhost',
    'username' => 'your_username',
    'password' => 'your_password',
    'name' => 'your_database'
);

$conn = new mysqli($database['host'], $database['username'], $database['password'], $database['name']);

function createReview($product_id, $rating, $review) {
    global $conn;
    
    // Check if user is logged in
    if (isset($_SESSION['user_id'])) {
        $query = "INSERT INTO reviews (user_id, product_id, rating, review)
                  VALUES (?, ?, ?, ?)";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("iis", $_SESSION['user_id'], $product_id, $rating, $review);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    } else {
        return 'You must be logged in to create a review.';
    }
}

function updateReview($id, $new_rating, $new_review) {
    global $conn;
    
    // Check if user is allowed to update the review
    $query = "SELECT * FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $id);
    $stmt->execute();
    $result = $stmt->get_result();
    
    if ($result && $result->fetch_assoc()['user_id'] == $_SESSION['user_id']) {
        // Update review
        $query = "UPDATE reviews SET rating = ?, review = ?
                  WHERE id = ?";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("iis", $new_rating, $new_review, $id);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    } else {
        return 'You are not allowed to update this review.';
    }
}

function deleteReview($id) {
    global $conn;
    
    // Check if user is allowed to delete the review
    $query = "SELECT * FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $id);
    $stmt->execute();
    $result = $stmt->get_result();
    
    if ($result && $result->fetch_assoc()['user_id'] == $_SESSION['user_id']) {
        // Delete review
        $query = "DELETE FROM reviews WHERE id = ?";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("i", $id);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    } else {
        return 'You are not allowed to delete this review.';
    }
}

function getReviewsForProduct($product_id) {
    global $conn;
    
    // Get reviews for product
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    return $stmt->get_result();
}

// Example usage:
if (isset($_POST['create_review'])) {
    $result = createReview($_POST['product_id'], $_POST['rating'], $_POST['review']);
    echo json_encode($result);
} elseif (isset($_POST['update_review'])) {
    $result = updateReview($_POST['id'], $_POST['new_rating'], $_POST['new_review']);
    echo json_encode($result);
} elseif (isset($_POST['delete_review'])) {
    $result = deleteReview($_POST['id']);
    echo json_encode($result);
}


// database connection settings
$dsn = 'mysql:host=localhost;dbname=database_name';
$username = 'username';
$password = 'password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// user review class
class ReviewSystem {
    private $pdo;

    function __construct() {
        $this->pdo = $GLOBALS['pdo'];
    }

    // create a new review
    public function createReview($user_id, $product_id, $review, $rating) {
        try {
            $stmt = $this->pdo->prepare('INSERT INTO reviews (user_id, product_id, review, rating) VALUES (:user_id, :product_id, :review, :rating)');
            $stmt->execute(array(':user_id' => $user_id, ':product_id' => $product_id, ':review' => $review, ':rating' => $rating));
            return true;
        } catch (PDOException $e) {
            echo 'Error creating review: ' . $e->getMessage();
            return false;
        }
    }

    // get all reviews for a product
    public function getReviews($product_id) {
        try {
            $stmt = $this->pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
            $stmt->execute(array(':product_id' => $product_id));
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo 'Error getting reviews: ' . $e->getMessage();
            return array();
        }
    }

    // get a single review by id
    public function getReview($review_id) {
        try {
            $stmt = $this->pdo->prepare('SELECT * FROM reviews WHERE id = :id');
            $stmt->execute(array(':id' => $review_id));
            return $stmt->fetch();
        } catch (PDOException $e) {
            echo 'Error getting review: ' . $e->getMessage();
            return null;
        }
    }

    // update a review
    public function updateReview($review_id, $review, $rating) {
        try {
            $stmt = $this->pdo->prepare('UPDATE reviews SET review = :review, rating = :rating WHERE id = :id');
            $stmt->execute(array(':id' => $review_id, ':review' => $review, ':rating' => $rating));
            return true;
        } catch (PDOException $e) {
            echo 'Error updating review: ' . $e->getMessage();
            return false;
        }
    }

    // delete a review
    public function deleteReview($review_id) {
        try {
            $stmt = $this->pdo->prepare('DELETE FROM reviews WHERE id = :id');
            $stmt->execute(array(':id' => $review_id));
            return true;
        } catch (PDOException $e) {
            echo 'Error deleting review: ' . $e->getMessage();
            return false;
        }
    }
}


// create a new instance of the ReviewSystem class
$reviewSystem = new ReviewSystem();

// create a new review
$user_id = 1;
$product_id = 1;
$review = 'This product is great!';
$rating = 5;
$created_review = $reviewSystem->createReview($user_id, $product_id, $review, $rating);

// get all reviews for a product
$product_reviews = $reviewSystem->getReviews($product_id);

// update an existing review
$review_id = 1;
$new_review = 'This product is even better!';
$new_rating = 5;
$updated_review = $reviewSystem->updateReview($review_id, $new_review, $new_rating);

// delete a review
$deleted_review = $reviewSystem->deleteReview($review_id);


<?php

// Require database connection file
require_once 'db.php';

function getUserReviews($userId) {
  // Retrieve reviews from database
  $query = "SELECT * FROM reviews WHERE user_id = :user_id ORDER BY created_at DESC";
  $stmt = db()->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function addReview($reviewData) {
  // Insert review into database
  $query = "INSERT INTO reviews (user_id, review_text, rating) VALUES (:user_id, :review_text, :rating)";
  $stmt = db()->prepare($query);
  $stmt->bindParam(':user_id', $reviewData['user_id']);
  $stmt->bindParam(':review_text', $reviewData['review_text']);
  $stmt->bindParam(':rating', $reviewData['rating']);
  return $stmt->execute();
}

function displayReviews() {
  // Retrieve reviews from database and display on page
  $reviews = getUserReviews(getCurrentUserId());
  echo '<h2>Recent Reviews:</h2>';
  foreach ($reviews as $review) {
    echo "<p>$review[review_text] (Rating: $review[rating]/5)</p>";
  }
}

?>


// Add review from user input form (e.g., index.php)
$reviewData = array(
  'user_id' => $_SESSION['user_id'],
  'review_text' => $_POST['review_text'],
  'rating' => $_POST['rating']
);
addReview($reviewData);

// Display reviews on page
displayReviews();


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  public function submitReview($user_id, $product_id, $rating, $review) {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->execute(array(
      ':user_id' => $user_id,
      ':product_id' => $product_id,
      ':rating' => $rating,
      ':review' => $review
    ));
  }

  public function getAllReviews() {
    $stmt = $this->db->query("SELECT r.id, u.name, p.name as product_name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id");
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getReviewsForProduct($product_id) {
    $stmt = $this->db->prepare("SELECT r.id, u.name, r.rating, r.review FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = :product_id");
    $stmt->execute(array(':product_id' => $product_id));
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getReviewsForUser($user_id) {
    $stmt = $this->db->prepare("SELECT r.id, p.name as product_name, r.rating, r.review FROM reviews r JOIN products p ON r.product_id = p.id WHERE r.user_id = :user_id");
    $stmt->execute(array(':user_id' => $user_id));
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }
}


$review = new Review();

// Submit a review
$user_id = 1;
$product_id = 1;
$rating = 5;
$review_text = "I love this product!";
$review->submitReview($user_id, $product_id, $rating, $review_text);

// Get all reviews
$reviews = $review->getAllReviews();
print_r($reviews);

// Get reviews for a specific product
$product_reviews = $review->getReviewsForProduct(1);
print_r($product_reviews);

// Get reviews for a specific user
$user_reviews = $review->getReviewsForUser(1);
print_r($user_reviews);


class Review {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
        $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    }

    // Create a review
    public function createReview($productId, $userId, $rating, $reviewText) {
        try {
            $query = "INSERT INTO reviews (product_id, user_id, rating, review_text)
                      VALUES (:product_id, :user_id, :rating, :review_text)";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':user_id', $userId);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':review_text', $reviewText);
            $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
        }
    }

    // Read all reviews
    public function getReviews() {
        try {
            $query = "SELECT r.id, r.product_id, u.username, p.name, r.rating, r.review_text FROM reviews r
                      JOIN users u ON r.user_id = u.id
                      JOIN products p ON r.product_id = p.id";
            $stmt = $this->db->prepare($query);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
        }
    }

    // Read a single review
    public function getReview($id) {
        try {
            $query = "SELECT r.id, r.product_id, u.username, p.name, r.rating, r.review_text FROM reviews r
                      JOIN users u ON r.user_id = u.id
                      JOIN products p ON r.product_id = p.id WHERE r.id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', $id);
            $stmt->execute();
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
        }
    }

    // Update a review
    public function updateReview($id, $rating, $reviewText) {
        try {
            $query = "UPDATE reviews SET rating = :rating, review_text = :review_text WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', $id);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':review_text', $reviewText);
            $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
        }
    }

    // Delete a review
    public function deleteReview($id) {
        try {
            $query = "DELETE FROM reviews WHERE id = :id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':id', $id);
            $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
        }
    }
}


$review = new Review();

// Create a review
$productId = 1;
$userId = 2;
$rating = 4;
$reviewText = 'This is a great product!';
$review->createReview($productId, $userId, $rating, $reviewText);

// Read all reviews
$reviews = $review->getReviews();
foreach ($reviews as $review) {
    echo "ID: " . $review['id'] . ", Product ID: " . $review['product_id'] . ", Username: " . $review['username'] . ", Rating: " . $review['rating'] . ", Review Text: " . $review['review_text'];
}

// Read a single review
$reviewId = 1;
$singleReview = $review->getReview($reviewId);
echo "ID: " . $singleReview['id'] . ", Product ID: " . $singleReview['product_id'] . ", Username: " . $singleReview['username'] . ", Rating: " . $singleReview['rating'] . ", Review Text: " . $singleReview['review_text'];

// Update a review
$reviewId = 1;
$rating = 5;
$reviewText = 'This is an amazing product!';
$review->updateReview($reviewId, $rating, $reviewText);

// Delete a review
$reviewId = 1;
$review->deleteReview($reviewId);


class Review {
  private $id;
  private $rating;
  private $title;
  private $content;

  public function __construct($id, $rating, $title, $content) {
    $this->id = $id;
    $this->rating = $rating;
    $this->title = $title;
    $this->content = $content;
  }

  public function getId() {
    return $this->id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getTitle() {
    return $this->title;
  }

  public function getContent() {
    return $this->content;
  }
}


class ReviewRepository {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function getAllReviews() {
    $query = "SELECT * FROM reviews";
    $stmt = $this->db->prepare($query);
    $stmt->execute();
    $reviews = array();
    while ($row = $stmt->fetch()) {
      $review = new Review($row['id'], $row['rating'], $row['title'], $row['content']);
      $reviews[] = $review;
    }
    return $reviews;
  }

  public function getReviewById($id) {
    $query = "SELECT * FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    $review = $stmt->fetch();
    return new Review($review['id'], $review['rating'], $review['title'], $review['content']);
  }

  public function addReview($rating, $title, $content) {
    $query = "INSERT INTO reviews (rating, title, content) VALUES (:rating, :title, :content)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->execute();
  }
}


class ReviewController {
  private $repository;

  public function __construct($repository) {
    $this->repository = $repository;
  }

  public function getAllReviews() {
    return $this->repository->getAllReviews();
  }

  public function getReviewById($id) {
    return $this->repository->getReviewById($id);
  }

  public function addReview($rating, $title, $content) {
    $this->repository->addReview($rating, $title, $content);
  }
}


class ReviewService {
  private $controller;

  public function __construct($controller) {
    $this->controller = $controller;
  }

  public function getAllReviews() {
    return $this->controller->getAllReviews();
  }

  public function getReviewById($id) {
    return $this->controller->getReviewById($id);
  }

  public function addReview($rating, $title, $content) {
    $this->controller->addReview($rating, $title, $content);
  }
}


function review() {
  // Create a new instance of the ReviewService class.
  $service = new ReviewService(new ReviewController(new ReviewRepository(DB)));

  // Get all reviews.
  $reviews = $service->getAllReviews();

  // Display all reviews.
  foreach ($reviews as $review) {
    echo "Title: " . $review->getTitle() . "<br>";
    echo "Rating: " . $review->getRating() . "/5<br>";
    echo "Content: " . $review->getContent() . "<br><hr>";
  }

  // Get a review by id.
  $review = $service->getReviewById(1);

  // Display the review.
  if ($review) {
    echo "Title: " . $review->getTitle() . "<br>";
    echo "Rating: " . $review->getRating() . "/5<br>";
    echo "Content: " . $review->getContent() . "<br><hr>";
  }

  // Add a new review.
  $service->addReview(4, 'New Review', 'This is a new review.');
}


// Review class
class Review {
  private $db;

  function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  }

  // Get all reviews for a product
  function getReviews($productId) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :productId");
    $stmt->bindParam(':productId', $productId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Add a new review
  function addReview($product_id, $reviewer, $rating, $comment) {
    $stmt = $this->db->prepare("INSERT INTO reviews (product_id, reviewer, rating, comment) VALUES (:product_id, :reviewer, :rating, :comment)");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':reviewer', $reviewer);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    return $stmt->execute();
  }

  // Get the average rating for a product
  function getAverageRating($productId) {
    $stmt = $this->db->prepare("SELECT AVG(rating) FROM reviews WHERE product_id = :productId");
    $stmt->bindParam(':productId', $productId);
    $stmt->execute();
    return $stmt->fetchColumn();
  }
}

// User review system
class ReviewSystem {
  private $review;

  function __construct() {
    $this->review = new Review();
  }

  // Display a form to add a new review
  function displayAddReviewForm($productId) {
    ?>
    <form action="" method="post">
      <label for="reviewer">Your name:</label>
      <input type="text" id="reviewer" name="reviewer"><br><br>
      <label for="rating">Rating (1-5):</label>
      <select id="rating" name="rating">
        <?php for ($i = 1; $i <= 5; $i++) { ?>
          <option value="<?php echo $i ?>"><?php echo $i ?></option>
        <?php } ?>
      </select><br><br>
      <label for="comment">Comment:</label>
      <textarea id="comment" name="comment"></textarea><br><br>
      <input type="submit" name="add_review" value="Add review">
    </form>
    <?php
  }

  // Process a new review submission
  function processReviewSubmission($productId) {
    if (isset($_POST['add_review'])) {
      $reviewer = $_POST['reviewer'];
      $rating = $_POST['rating'];
      $comment = $_POST['comment'];

      if ($this->review->addReview($productId, $reviewer, $rating, $comment)) {
        echo "Thank you for your review!";
      } else {
        echo "Error adding review.";
      }
    }
  }

  // Display a list of reviews
  function displayReviews($productId) {
    $reviews = $this->review->getReviews($productId);
    ?>
    <h2>Reviews:</h2>
    <?php foreach ($reviews as $review) { ?>
      <p><strong><?php echo $review['reviewer'] ?></strong> gave this product a rating of <?php echo $review['rating'] ?>/5 and wrote: <?php echo $review['comment'] ?></p>
    <?php } ?>
    <?php
  }

  // Display the average rating for a product
  function displayAverageRating($productId) {
    $averageRating = $this->review->getAverageRating($productId);
    ?>
    <h2>Average Rating:</h2>
    <p><?php echo 'The average rating for this product is: ' . $averageRating ?>/5</p>
    <?php
  }
}


$reviewSystem = new ReviewSystem();

// Display a form to add a new review for product #123
$productId = 123;
$reviewSystem->displayAddReviewForm($productId);

// Process a new review submission
if (isset($_POST['add_review'])) {
  $reviewSystem->processReviewSubmission($productId);
}

// Display reviews for product #123
$reviews = $reviewSystem->getReviews($productId);
?>

<h2>Reviews:</h2>
<?php foreach ($reviews as $review) { ?>
  <p><strong><?php echo $review['reviewer'] ?></strong> gave this product a rating of <?php echo $review['rating'] ?>/5 and wrote: <?php echo $review['comment'] ?></p>
<?php } ?>

// Display the average rating for product #123
$averageRating = $reviewSystem->getAverageRating($productId);
?>
<h2>Average Rating:</h2>
<p><?php echo 'The average rating for this product is: ' . $averageRating ?>/5</p>


<?php
class Review {
  private $id;
  private $user_id;
  private $product_id;
  private $rating;
  private $comment;

  public function __construct($user_id, $product_id, $rating, $comment) {
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->comment = $comment;
  }

  public function getId() { return $this->id; }
  public function getUserId() { return $this->user_id; }
  public function getProductId() { return $this->product_id; }
  public function getRating() { return $this->rating; }
  public function getComment() { return $this->comment; }
}
?>


<?php
function create_review($user_id, $product_id, $rating, $comment) {
  // assume that we're using a database to store reviews
  // for simplicity, let's use an array in this example
  global $reviews;
  $new_review = new Review($user_id, $product_id, $rating, $comment);
  $reviews[] = $new_review;
  return $new_review->getId();
}

function get_reviews_for_product($product_id) {
  global $reviews;
  $product_reviews = array_filter($reviews, function($review) use ($product_id) {
    return $review->getProductId() == $product_id;
  });
  usort($product_reviews, function($a, $b) {
    return $b->getRating() - $a->getRating();
  });
  return $product_reviews;
}

function average_rating_for_product($product_id) {
  global $reviews;
  $product_reviews = get_reviews_for_product($product_id);
  if (empty($product_reviews)) {
    return 0;
  }
  $sum = array_sum(array_column($product_reviews, 'rating'));
  return round($sum / count($product_reviews));
}

function display_reviews($product_id) {
  global $reviews;
  $product_reviews = get_reviews_for_product($product_id);
  foreach ($product_reviews as $review) {
    echo "<p>Rating: " . $review->getRating() . ", Comment: " . $review->getComment() . "</p>";
  }
}
?>


<?php
include 'review_functions.php';

// create some reviews
$user1_id = 123;
$user2_id = 456;
$product_id = 789;

create_review($user1_id, $product_id, 5, "Great product!");
create_review($user2_id, $product_id, 4, "Good product, but not perfect.");

// display reviews for a product
display_reviews($product_id);

// average rating for a product
echo "Average rating: " . average_rating_for_product($product_id);
?>


// config.php (database connection settings)
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'database';

// connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// functions.php (review functionality)
function get_reviews($product_name) {
  global $conn;
  $query = "SELECT * FROM reviews WHERE product_name = '$product_name'";
  $result = $conn->query($query);
  return $result;
}

function add_review($user_id, $product_name, $review_text, $rating) {
  global $conn;
  $query = "INSERT INTO reviews (user_id, product_name, review_text, rating)
            VALUES ('$user_id', '$product_name', '$review_text', '$rating')";
  $result = $conn->query($query);
  return $result;
}

function delete_review($id) {
  global $conn;
  $query = "DELETE FROM reviews WHERE id = '$id'";
  $result = $conn->query($query);
  return $result;
}


// index.php (user review form)
<?php include 'functions.php'; ?>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <label for="product_name">Product Name:</label>
  <input type="text" id="product_name" name="product_name"><br><br>
  <label for="review_text">Review Text:</label>
  <textarea id="review_text" name="review_text"></textarea><br><br>
  <label for="rating">Rating (1-5):</label>
  <input type="number" id="rating" name="rating"><br><br>
  <button type="submit">Submit Review</button>
</form>

<?php
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  $product_name = $_POST['product_name'];
  $review_text = $_POST['review_text'];
  $rating = $_POST['rating'];

  if (!empty($product_name) && !empty($review_text) && !empty($rating)) {
    add_review($_SESSION['user_id'], $product_name, $review_text, $rating);
    header('Location: index.php');
  } else {
    echo 'Please fill out all fields.';
  }
}
?>


// database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

function db_connect() {
    global $db_host, $db_username, $db_password, $db_name;
    
    $conn = new mysqli($db_host, $db_username, $db_password, $db_name);
    
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    
    return $conn;
}

function add_review($user_id, $product_id, $rating, $review) {
    global $db_connect;
    
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES (?, ?, ?, ?)";
            
    $stmt = db_connect()->prepare($sql);
    $stmt->bind_param("iiii", $user_id, $product_id, $rating, $review);
    $result = $stmt->execute();
    
    if (!$result) {
        return "Error: " . $stmt->error;
    }
    
    return true;
}

function view_reviews($product_id = null) {
    global $db_connect;
    
    if ($product_id !== null) {
        $sql = "SELECT * FROM reviews WHERE product_id = ?";
        $stmt = db_connect()->prepare($sql);
        $stmt->bind_param("i", $product_id);
        $result = $stmt->execute();
        
        return $stmt->get_result();
    } else {
        $sql = "SELECT * FROM reviews";
        $result = db_connect()->query($sql);
        
        return $result;
    }
}

function update_review($review_id, $rating, $review) {
    global $db_connect;
    
    $sql = "UPDATE reviews SET rating = ?, review = ?
            WHERE id = ?";
            
    $stmt = db_connect()->prepare($sql);
    $stmt->bind_param("iii", $rating, $review, $review_id);
    $result = $stmt->execute();
    
    if (!$result) {
        return "Error: " . $stmt->error;
    }
    
    return true;
}

function delete_review($review_id) {
    global $db_connect;
    
    $sql = "DELETE FROM reviews WHERE id = ?";
            
    $stmt = db_connect()->prepare($sql);
    $stmt->bind_param("i", $review_id);
    $result = $stmt->execute();
    
    if (!$result) {
        return "Error: " . $stmt->error;
    }
    
    return true;
}


// Add a review
$user_id = 1; // user ID
$product_id = 1; // product ID
$rating = 5;
$review = "Great product!";
$result = add_review($user_id, $product_id, $rating, $review);
if ($result !== true) {
    echo "Error adding review: " . $result;
}

// View reviews for a specific product
$product_id = 1; // product ID
$result = view_reviews($product_id);
if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
        echo "Review by " . $row["user_id"] . ": " . $row["review"];
    }
} else {
    echo "No reviews found.";
}

// Update a review
$review_id = 1; // review ID
$rating = 4;
$review = "Good product!";
$result = update_review($review_id, $rating, $review);
if ($result !== true) {
    echo "Error updating review: " . $result;
}

// Delete a review
$review_id = 1; // review ID
$result = delete_review($review_id);
if ($result !== true) {
    echo "Error deleting review: " . $result;
}


// config.php: Database configuration file
<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

$connection = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}
?>

// review_functions.php: Functions for interacting with reviews
<?php

function create_review($user_id, $product_id, $rating, $review) {
    global $connection;
    $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $connection->prepare($query);
    $stmt->bind_param("iis", $user_id, $product_id, $rating, $review);
    $result = $stmt->execute();
    return $result;
}

function get_reviews() {
    global $connection;
    $query = "SELECT * FROM reviews";
    $result = $connection->query($query);
    return $result;
}

function delete_review($id) {
    global $connection;
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $connection->prepare($query);
    $stmt->bind_param("i", $id);
    $result = $stmt->execute();
    return $result;
}

?>


// Create a new review
$user_id = 1; // ID of the user creating the review
$product_id = 1; // ID of the product being reviewed
$rating = 5; // Rating given by the user (out of 5)
$review = "Great product!"; // User's review

$result = create_review($user_id, $product_id, $rating, $review);
if ($result) {
    echo "Review created successfully!";
} else {
    echo "Failed to create review.";
}

// Get all reviews
$result = get_reviews();
while ($row = $result->fetch_assoc()) {
    echo "ID: " . $row['id'] . ", User ID: " . $row['user_id'] . ", Product ID: " . $row['product_id'] . ", Rating: " . $row['rating'] . ", Review: " . $row['review'];
}

// Delete a review
$review_id = 1; // ID of the review to delete

$result = delete_review($review_id);
if ($result) {
    echo "Review deleted successfully!";
} else {
    echo "Failed to delete review.";
}


// database connection info (update with your own)
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'database');

function dbConnect() {
    global $conn;
    try {
        $conn = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USER, DB_PASSWORD);
        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
        die('ERROR: ' . $e->getMessage());
    }
}

function dbDisconnect() {
    global $conn;
    $conn = null;
}

function createReview($user_id, $product_id, $rating, $review_text) {
    try {
        dbConnect();
        $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (:user_id, :product_id, :rating, :review_text)");
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review_text', $review_text);
        return $stmt->execute();
    } catch (PDOException $e) {
        echo "ERROR: " . $e->getMessage();
        return false;
    }
}

function getReviews($product_id) {
    try {
        dbConnect();
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo "ERROR: " . $e->getMessage();
        return false;
    }
}

function getReview($id) {
    try {
        dbConnect();
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE id = :id");
        $stmt->bindParam(':id', $id);
        $stmt->execute();
        return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo "ERROR: " . $e->getMessage();
        return false;
    }
}

function updateReview($id, $rating = null, $review_text = null) {
    try {
        dbConnect();
        if ($rating !== null) {
            $stmt = $conn->prepare("UPDATE reviews SET rating = :rating WHERE id = :id");
            $stmt->bindParam(':rating', $rating);
        } elseif ($review_text !== null) {
            $stmt = $conn->prepare("UPDATE reviews SET review_text = :review_text WHERE id = :id");
            $stmt->bindParam(':review_text', $review_text);
        }
        if (isset($stmt)) {
            $stmt->bindParam(':id', $id);
            return $stmt->execute();
        } else {
            throw new PDOException('No update statement specified');
        }
    } catch (PDOException $e) {
        echo "ERROR: " . $e->getMessage();
        return false;
    }
}

function deleteReview($id) {
    try {
        dbConnect();
        $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
        $stmt->bindParam(':id', $id);
        return $stmt->execute();
    } catch (PDOException $e) {
        echo "ERROR: " . $e->getMessage();
        return false;
    }
}


dbConnect();

$user_id = 1; // user ID for current user
$product_id = 10; // product ID to review

// create new review
$rating = 5;
$review_text = "This is an amazing product!";
$new_review = createReview($user_id, $product_id, $rating, $review_text);

if ($new_review) {
    echo "New review created successfully.";
}

// get all reviews for a product
$product_reviews = getReviews($product_id);
print_r($product_reviews);

// get single review by ID
$single_review = getReview(1); // replace with actual review ID
print_r($single_review);

// update existing review
$review_id = 1; // replace with actual review ID
updateReview($review_id, null, 'Updated review text');

// delete review
deleteReview(2); // replace with actual review ID


<?php

// Include database connection script
require_once 'db_connection.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

function display_reviews($product_id) {
    global $conn;

    // Get all reviews for the product
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    $reviews = $stmt->fetchAll();

    // Display reviews
    foreach ($reviews as $review) {
        echo '<div class="review">';
        echo '<h2>Rating: ' . $review['rating'] . '/5</h2>';
        echo '<p>' . nl2br($review['review_text']) . '</p>';
        echo '<p>Posted by User ID: ' . $review['user_id'] . '</p>';
        echo '</div>';
    }
}

function add_review($product_id, $rating, $review_text) {
    global $conn;

    // Check if user is logged in
    if (!isset($_SESSION['user_id'])) {
        header('Location: login.php');
        exit;
    }

    try {
        // Insert new review into database
        $query = "INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES (:product_id, :user_id, :rating, :review_text)";
        $stmt = $conn->prepare($query);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $_SESSION['user_id']);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review_text', $review_text);
        $stmt->execute();
    } catch (PDOException $e) {
        echo 'Error adding review: ' . $e->getMessage();
    }
}

?>


<div class="product-reviews">
    <?php display_reviews(123); ?>
</div>


<form method="post" action="review.php">
    <input type="hidden" name="product_id" value="123">
    <label>Rating:</label>
    <select name="rating">
        <option value="1">1/5</option>
        <option value="2">2/5</option>
        <!-- ... -->
        <option value="5">5/5</option>
    </select>

    <label>Review Text:</label>
    <textarea name="review_text"></textarea>

    <button type="submit" name="add_review">Add Review</button>
</form>


<?php

// Configuration for database connection
$dsn = 'mysql:host=localhost;dbname=reviews';
$username = 'your_username';
$password = 'your_password';

try {
    // Establish a connection to the database
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// Function to create a new review
function createReview(array $data): int {
    $query = "INSERT INTO reviews (title, content, rating) VALUES (:title, :content, :rating)";
    $stmt = $pdo->prepare($query);
    $stmt->execute($data);
    return $pdo->lastInsertId();
}

// Function to get all reviews
function getReviews(): array {
    $query = "SELECT * FROM reviews ORDER BY created_at DESC";
    $stmt = $pdo->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to get a review by its ID
function getReview(int $id): ?array {
    $query = "SELECT * FROM reviews WHERE id = :id";
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
}

// Function to update a review
function updateReview(int $id, array $data): bool {
    $query = "UPDATE reviews SET title = :title, content = :content, rating = :rating WHERE id = :id";
    $stmt = $pdo->prepare($query);
    return $stmt->execute($data + ['id' => $id]);
}

// Function to delete a review
function deleteReview(int $id): bool {
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $pdo->prepare($query);
    return $stmt->execute(['id' => $id]);
}

// Example usage:
$reviewData = ['title' => 'Example Review', 'content' => 'This is an example review.', 'rating' => 4];
$newReviewId = createReview($reviewData);

echo "New review created with ID: $newReviewId
";

$reviews = getReviews();
print_r($reviews);

$existingReview = getReview(1);
var_dump($existingReview);

$updatedReviewId = updateReview(1, ['title' => 'Updated Review', 'content' => 'This is an updated review.', 'rating' => 5]);
echo "Review updated with ID: $updatedReviewId
";

deleteReview(2);

?>


<?php

class ReviewDB {
    private $db_host;
    private $db_username;
    private $db_password;
    private $db_name;

    public function __construct() {
        $this->db_host = 'your_database_host';
        $this->db_username = 'your_database_username';
        $this->db_password = 'your_database_password';
        $this->db_name = 'your_database_name';

        try {
            $this->conn = new PDO('mysql:host=' . $this->db_host . ';dbname=' . $this->db_name, $this->db_username, $this->db_password);
            $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        } catch (PDOException $e) {
            echo "Connection failed: " . $e->getMessage();
        }
    }

    public function addReview($product_id, $user_id, $rating, $review) {
        try {
            $stmt = $this->conn->prepare('INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)');
            $stmt->bindParam(1, $product_id);
            $stmt->bindParam(2, $user_id);
            $stmt->bindParam(3, $rating);
            $stmt->bindParam(4, $review);
            $stmt->execute();
        } catch (PDOException $e) {
            echo "Error adding review: " . $e->getMessage();
        }
    }

    public function getReviews($product_id = null) {
        try {
            if ($product_id === null) {
                $stmt = $this->conn->prepare('SELECT * FROM reviews');
                $stmt->execute();
            } else {
                $stmt = $this->conn->prepare('SELECT * FROM reviews WHERE product_id = ?');
                $stmt->bindParam(1, $product_id);
                $stmt->execute();
            }

            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo "Error getting reviews: " . $e->getMessage();
        }
    }
}


<?php

require_once 'review_db.php';

$review_db = new ReviewDB();

if (isset($_POST['submit'])) {
    $product_id = $_POST['product_id'];
    $user_id = $_POST['user_id'];
    $rating = $_POST['rating'];
    $review = $_POST['review'];

    try {
        $review_db->addReview($product_id, $user_id, $rating, $review);
        echo "Review submitted successfully!";
    } catch (PDOException $e) {
        echo "Error submitting review: " . $e->getMessage();
    }
}

$reviews = $review_db->getReviews();

?>

<form method="post">
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id"><br><br>

    <label for="user_id">User ID:</label>
    <input type="text" id="user_id" name="user_id"><br><br>

    <label for="rating">Rating:</label>
    <input type="number" id="rating" name="rating"><br><br>

    <label for="review">Review:</label>
    <textarea id="review" name="review"></textarea><br><br>

    <input type="submit" value="Submit Review">
</form>

<h2>Reviews:</h2>

<?php foreach ($reviews as $review): ?>
    <p>User ID: <?= $review['user_id'] ?>, Rating: <?= $review['rating'] ?>/5, Review: <?= $review['review'] ?></p>
<?php endforeach; ?>


// Review model class
class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function createReview($product_id, $user_id, $rating, $title, $content) {
    // Insert review into database
    $query = "INSERT INTO reviews (product_id, user_id, rating, title, content)
              VALUES (?, ?, ?, ?, ?)";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$product_id, $user_id, $rating, $title, $content]);
    return $this->db->lastInsertId();
  }

  public function getReviews($product_id) {
    // Retrieve reviews for a specific product
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$product_id]);
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getAverageRating($product_id) {
    // Retrieve average rating for a specific product
    $query = "SELECT AVG(rating) AS avg_rating FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$product_id]);
    return $stmt->fetchColumn();
  }

  public function getReviewCount($product_id) {
    // Retrieve count of reviews for a specific product
    $query = "SELECT COUNT(*) AS review_count FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$product_id]);
    return $stmt->fetchColumn();
  }
}

// Example usage:
$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
$reviewModel = new Review($db);

$product_id = 123;
$user_id = 456;

$title = "Great product!";
$content = "I love this product!";

$rating = 5;

$reviewId = $reviewModel->createReview($product_id, $user_id, $rating, $title, $content);
echo "Review created with ID: $reviewId
";

$reviews = $reviewModel->getReviews($product_id);
print_r($reviews);

$averageRating = $reviewModel->getAverageRating($product_id);
echo "Average rating: $averageRating
";

$reviewCount = $reviewModel->getReviewCount($product_id);
echo "Number of reviews: $reviewCount
";


// database connection settings
$host = 'localhost';
$dbname = 'review_system';
$username = 'root';
$password = '';

// connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

function createUser($data) {
  global $conn;
  
  // insert user into database
  $query = "INSERT INTO users (name, email) VALUES (:name, :email)";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':name', $data['name']);
  $stmt->bindParam(':email', $data['email']);
  $stmt->execute();
  
  // get the user's ID
  $userId = $conn->lastInsertId();
  
  return $userId;
}

function createReview($data) {
  global $conn;
  
  // insert review into database
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':user_id', $data['user_id']);
  $stmt->bindParam(':product_id', $data['product_id']);
  $stmt->bindParam(':rating', $data['rating']);
  $stmt->bindParam(':review', $data['review']);
  $stmt->execute();
  
  // get the review's ID
  $reviewId = $conn->lastInsertId();
  
  return $reviewId;
}

function getReviews($productId) {
  global $conn;
  
  // fetch reviews from database
  $query = "SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();
  $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
  
  return $reviews;
}

function getReview($reviewId) {
  global $conn;
  
  // fetch review from database
  $query = "SELECT * FROM reviews WHERE id = :id";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':id', $reviewId);
  $stmt->execute();
  $review = $stmt->fetch(PDO::FETCH_ASSOC);
  
  return $review;
}

function updateReview($data) {
  global $conn;
  
  // update review in database
  $query = "UPDATE reviews SET rating = :rating, review = :review WHERE id = :id";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':rating', $data['rating']);
  $stmt->bindParam(':review', $data['review']);
  $stmt->bindParam(':id', $data['id']);
  $stmt->execute();
}

function deleteReview($reviewId) {
  global $conn;
  
  // delete review from database
  $query = "DELETE FROM reviews WHERE id = :id";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':id', $reviewId);
  $stmt->execute();
}


// create a user
$userData = array('name' => 'John Doe', 'email' => 'john@example.com');
$userId = createUser($userData);

// create a review
$productData = array('id' => 1, 'rating' => 5, 'review' => 'Great product!');
$reviewId = createReview(array('user_id' => $userId, 'product_id' => 1, 'rating' => 5, 'review' => 'Great product!'));

// get reviews for a product
$productId = 1;
$reviews = getReviews($productId);
print_r($reviews);

// get a specific review
$reviewId = 1;
$review = getReview($reviewId);
print_r($review);

// update a review
$reviewData = array('id' => $reviewId, 'rating' => 4, 'review' => 'Good product!');
updateReview($reviewData);

// delete a review
$deleteReview($reviewId);


// Review Model
class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
  }

  public function createReview($user_id, $product_id, $rating, $comment) {
    $sql = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:user_id, :product_id, :rating, :comment)";
    $stmt = $this->db->prepare($sql);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    return $stmt->execute();
  }

  public function getReviewsForProduct($product_id) {
    $sql = "SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC";
    $stmt = $this->db->prepare($sql);
    $stmt->bindParam(':product_id', $product_id);
    return $stmt->execute() ? $stmt->fetchAll(PDO::FETCH_ASSOC) : array();
  }

  public function getReviewsForUser($user_id) {
    $sql = "SELECT * FROM reviews WHERE user_id = :user_id ORDER BY created_at DESC";
    $stmt = $this->db->prepare($sql);
    $stmt->bindParam(':user_id', $user_id);
    return $stmt->execute() ? $stmt->fetchAll(PDO::FETCH_ASSOC) : array();
  }
}


// Create a new review
if (isset($_POST['submit'])) {
  $review = new Review();
  $result = $review->createReview($_SESSION['user_id'], $_POST['product_id'], $_POST['rating'], $_POST['comment']);
  if ($result) {
    echo "Review created successfully!";
  } else {
    echo "Error creating review.";
  }
}

// Get reviews for a product
$reviews = new Review();
$product_reviews = $reviews->getReviewsForProduct($_GET['product_id']);

// Get reviews for a user
$user_reviews = $reviews->getReviewsForUser($_SESSION['user_id']);


<!-- Create review form -->
<form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
  <input type="hidden" name="product_id" value="<?php echo $_GET['product_id']; ?>">
  <label for="rating">Rating:</label>
  <select id="rating" name="rating">
    <?php foreach (range(1, 5) as $i) { ?>
      <option value="<?php echo $i; ?>"><?php echo $i; ?>/5</option>
    <?php } ?>
  </select>
  <br><br>
  <label for="comment">Comment:</label>
  <textarea id="comment" name="comment"></textarea>
  <br><br>
  <input type="submit" name="submit" value="Submit Review">
</form>

<!-- Display reviews for a product -->
<h2>Reviews for <?php echo $_GET['product_id']; ?></h2>
<ul>
  <?php foreach ($product_reviews as $review) { ?>
    <li>
      <strong><?php echo $review['rating']; ?>/5 by <?php echo $review['user_name']; ?></strong><br>
      <?php echo $review['comment']; ?><br><br>
    </li>
  <?php } ?>
</ul>

<!-- Display reviews for a user -->
<h2>Reviews by <?php echo $_SESSION['name']; ?></h2>
<ul>
  <?php foreach ($user_reviews as $review) { ?>
    <li>
      <strong><?php echo $review['rating']; ?>/5 on <?php echo $review['product_title']; ?></strong><br>
      <?php echo $review['comment']; ?><br><br>
    </li>
  <?php } ?>
</ul>


// Define a class for the Review model
class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Create a new review
  public function createReview($userId, $productId, $reviewText, $rating) {
    $query = "INSERT INTO reviews (user_id, product_id, review_text, rating)
              VALUES (:user_id, :product_id, :review_text, :rating)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':review_text', $reviewText);
    $stmt->bindParam(':rating', $rating);
    return $stmt->execute();
  }

  // Get all reviews for a product
  public function getReviewsForProduct($productId) {
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Get all reviews for a user
  public function getReviewsForUser($userId) {
    $query = "SELECT * FROM reviews WHERE user_id = :user_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  // Update a review
  public function updateReview($reviewId, $newRating) {
    $query = "UPDATE reviews SET rating = :rating WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':rating', $newRating);
    $stmt->bindParam(':id', $reviewId);
    return $stmt->execute();
  }

  // Delete a review
  public function deleteReview($reviewId) {
    $query = "DELETE FROM reviews WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':id', $reviewId);
    return $stmt->execute();
  }
}


$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

$review = new Review($db);

// Create a new review
$user_id = 1;
$product_id = 1;
$review_text = "This product is amazing!";
$rating = 5;
$result = $review->createReview($user_id, $product_id, $review_text, $rating);
if ($result) {
    echo "Review created successfully!";
} else {
    echo "Error creating review";
}

// Get all reviews for a product
$product_id = 1;
$reviews = $review->getReviewsForProduct($product_id);
foreach ($reviews as $review) {
    echo "User ID: $review[user_id], Rating: $review[rating]";
}

// Update a review
$reviewId = 1;
$newRating = 4;
$result = $review->updateReview($reviewId, $newRating);
if ($result) {
    echo "Review updated successfully!";
} else {
    echo "Error updating review";
}

// Delete a review
$reviewId = 1;
$result = $review->deleteReview($reviewId);
if ($result) {
    echo "Review deleted successfully!";
} else {
    echo "Error deleting review";
}


// review.php

class Review {
  private $id;
  private $title;
  private $content;
  private $rating;
  private $product_id;

  public function __construct($id, $title, $content, $rating, $product_id) {
    $this->id = $id;
    $this->title = $title;
    $this->content = $content;
    $this->rating = $rating;
    $this->product_id = $product_id;
  }

  public function getId() {
    return $this->id;
  }

  public function getTitle() {
    return $this->title;
  }

  public function getContent() {
    return $this->content;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getProductId() {
    return $this->product_id;
  }
}


// review.controller.php

class ReviewController {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function addReview(Review $review) {
    $sql = "INSERT INTO reviews (title, content, rating, product_id) VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($sql);
    $stmt->execute([$review->getTitle(), $review->getContent(), $review->getRating(), $review->getProductId()]);
  }

  public function getReviews($product_id) {
    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->execute([$product_id]);
    return $stmt->fetchAll();
  }

  public function updateReview(Review $review) {
    $sql = "UPDATE reviews SET title = ?, content = ?, rating = ? WHERE id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->execute([$review->getTitle(), $review->getContent(), $review->getRating(), $review->getId()]);
  }

  public function deleteReview($id) {
    $sql = "DELETE FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($sql);
    $stmt->execute([$id]);
  }
}


// review.function.php

function createUserReview(ReviewController $review_controller, Review $review) {
  try {
    $review_controller->addReview($review);
    return true;
  } catch (Exception $e) {
    echo "Error creating review: " . $e->getMessage();
    return false;
  }
}

function getReviewsForProduct(ReviewController $review_controller, $product_id) {
  try {
    $reviews = $review_controller->getReviews($product_id);
    return $reviews;
  } catch (Exception $e) {
    echo "Error fetching reviews: " . $e->getMessage();
    return null;
  }
}

function updateReview(ReviewController $review_controller, Review $review) {
  try {
    $review_controller->updateReview($review);
    return true;
  } catch (Exception $e) {
    echo "Error updating review: " . $e->getMessage();
    return false;
  }
}

function deleteReview(ReviewController $review_controller, $id) {
  try {
    $review_controller->deleteReview($id);
    return true;
  } catch (Exception $e) {
    echo "Error deleting review: " . $e->getMessage();
    return false;
  }
}


$db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');

$review_controller = new ReviewController($db);

$review = new Review(1, 'Great product!', 'I love this product.', 5, 12345);

createUserReview($review_controller, $review);

$reviews = getReviewsForProduct($review_controller, 12345);
print_r($reviews);


// functions.php

function create_review($user_id, $review_text, $rating) {
  // Connect to database
  $conn = new mysqli("localhost", "username", "password", "database_name");

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // Insert review into reviews table
  $sql = "INSERT INTO reviews (user_id, review, rating) VALUES (?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("iis", $user_id, $review_text, $rating);
  $result = $stmt->execute();

  if (!$result) {
    die("Error creating review: " . $conn->error);
  }

  // Get the ID of the newly created review
  $review_id = $conn->insert_id;

  // Close database connection
  $conn->close();

  return $review_id;
}

function get_reviews() {
  // Connect to database
  $conn = new mysqli("localhost", "username", "password", "database_name");

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // Select all reviews from reviews table
  $sql = "SELECT * FROM reviews";
  $result = $conn->query($sql);

  if (!$result) {
    die("Error fetching reviews: " . $conn->error);
  }

  // Fetch and return review data
  $reviews = array();
  while ($row = $result->fetch_assoc()) {
    $reviews[] = array(
      'id' => $row['id'],
      'user_id' => $row['user_id'],
      'review' => $row['review'],
      'rating' => $row['rating']
    );
  }

  // Close database connection
  $conn->close();

  return $reviews;
}

function update_review($review_id, $new_text, $new_rating) {
  // Connect to database
  $conn = new mysqli("localhost", "username", "password", "database_name");

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // Update review in reviews table
  $sql = "UPDATE reviews SET review = ?, rating = ? WHERE id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("sis", $new_text, $new_rating, $review_id);
  $result = $stmt->execute();

  if (!$result) {
    die("Error updating review: " . $conn->error);
  }

  // Close database connection
  $conn->close();
}

function delete_review($review_id) {
  // Connect to database
  $conn = new mysqli("localhost", "username", "password", "database_name");

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // Delete review from reviews table
  $sql = "DELETE FROM reviews WHERE id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $review_id);
  $result = $stmt->execute();

  if (!$result) {
    die("Error deleting review: " . $conn->error);
  }

  // Close database connection
  $conn->close();
}


// Create a new review
$review_id = create_review(1, 'Great product!', 5);

// Get all reviews
$reviews = get_reviews();

// Update an existing review
update_review($review_id, 'Even better product!', 6);

// Delete a review
delete_review($review_id);


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'root';
$password = '';

// Create a database object
try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}

// Function to create a review
function create_review($user_id, $product_name, $rating, $review_text) {
    global $pdo;
    
    // Insert into reviews table
    $stmt = $pdo->prepare("INSERT INTO reviews (user_id, product_name, rating, review_text) VALUES (:user_id, :product_name, :rating, :review_text)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $review_text);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Function to get all reviews
function get_reviews() {
    global $pdo;
    
    // Select from reviews table
    $stmt = $pdo->query("SELECT * FROM reviews");
    
    return $stmt->fetchAll();
}

// Function to get a review by ID
function get_review($id) {
    global $pdo;
    
    // Select from reviews table where id matches
    $stmt = $pdo->prepare("SELECT * FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $id);
    
    return $stmt->fetch();
}

// Function to update a review
function update_review($id, $product_name, $rating, $review_text) {
    global $pdo;
    
    // Update in reviews table where id matches
    $stmt = $pdo->prepare("UPDATE reviews SET product_name = :product_name, rating = :rating, review_text = :review_text WHERE id = :id");
    $stmt->bindParam(':id', $id);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $review_text);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Function to delete a review
function delete_review($id) {
    global $pdo;
    
    // Delete from reviews table where id matches
    $stmt = $pdo->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $id);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Example usage
$user_id = 1;
$product_name = 'Example Product';
$rating = 5;
$review_text = 'This product is great!';

if (create_review($user_id, $product_name, $rating, $review_text)) {
    echo "Review created successfully!";
} else {
    echo "Failed to create review.";
}

$reviews = get_reviews();
foreach ($reviews as $review) {
    echo "ID: " . $review['id'] . ", User ID: " . $review['user_id'] . ", Product Name: " . $review['product_name'] . ", Rating: " . $review['rating'] . ", Review Text: " . $review['review_text'];
}

$review = get_review(1);
echo "Review: " . $review['product_name'] . ", Rating: " . $review['rating'] . ", Review Text: " . $review['review_text'];

if (update_review(1, 'Updated Product', 4, 'This product is okay.')) {
    echo "Review updated successfully!";
} else {
    echo "Failed to update review.";
}

if (delete_review(1)) {
    echo "Review deleted successfully!";
} else {
    echo "Failed to delete review.";
}

?>


// User class
class User {
  private $id;
  private $name;
  private $email;

  public function __construct($id, $name, $email) {
    $this->id = $id;
    $this->name = $name;
    $this->email = $email;
  }

  public static function create($name, $email) {
    // Assume database connection is established
    $db = Database::getConnection();
    $query = "INSERT INTO users (name, email) VALUES (:name, :email)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':name', $name);
    $stmt->bindParam(':email', $email);
    if ($stmt->execute()) {
      return new User($db->lastInsertId(), $name, $email);
    } else {
      throw new Exception('Error creating user');
    }
  }

  public static function getAll() {
    // Assume database connection is established
    $db = Database::getConnection();
    $query = "SELECT * FROM users";
    $stmt = $db->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_CLASS, 'User');
  }
}

// Product class
class Product {
  private $id;
  private $title;
  private $description;

  public function __construct($id, $title, $description) {
    $this->id = $id;
    $this->title = $title;
    $this->description = $description;
  }

  public static function create($title, $description) {
    // Assume database connection is established
    $db = Database::getConnection();
    $query = "INSERT INTO products (title, description) VALUES (:title, :description)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':description', $description);
    if ($stmt->execute()) {
      return new Product($db->lastInsertId(), $title, $description);
    } else {
      throw new Exception('Error creating product');
    }
  }

  public static function getAll() {
    // Assume database connection is established
    $db = Database::getConnection();
    $query = "SELECT * FROM products";
    $stmt = $db->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_CLASS, 'Product');
  }
}

// Review class
class Review {
  private $id;
  private $user_id;
  private $product_id;
  private $rating;
  private $review;

  public function __construct($id, $user_id, $product_id, $rating, $review) {
    $this->id = $id;
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->review = $review;
  }

  public static function create($user_id, $product_id, $rating, $review) {
    // Assume database connection is established
    $db = Database::getConnection();
    $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    if ($stmt->execute()) {
      return new Review($db->lastInsertId(), $user_id, $product_id, $rating, $review);
    } else {
      throw new Exception('Error creating review');
    }
  }

  public static function getReviewsForProduct($product_id) {
    // Assume database connection is established
    $db = Database::getConnection();
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
  }
}


function createUserReview($review_text, $rating, $user_id, $product_id) {
  try {
    // Validate input data (e.g., check for empty strings)
    if (!$review_text || !$rating || !$user_id || !$product_id) {
      throw new Exception('Invalid input');
    }

    // Create a new review
    $new_review = Review::create($user_id, $product_id, $rating, $review_text);

    // Return the newly created review's ID (or other relevant data)
    return $new_review->id;

  } catch (Exception $e) {
    // Handle any exceptions that occur during review creation
    echo "Error creating user review: " . $e->getMessage();
    return null;
  }
}


// Create a new product and user
$product = Product::create("Test Product", "This is a test product");
$user = User::create("John Doe", "john.doe@example.com");

// Create a review for the product using the newly created user
$review_id = createUserReview("I loved this product!", 5, $user->id, $product->id);

if ($review_id) {
  echo "Review created successfully!";
} else {
  echo "Error creating review";
}


class Review {
  private $id;
  private $product_id;
  private $user_id;
  private $rating;
  private $comment;

  public function __construct($data = array()) {
    if (!empty($data)) {
      $this->id = isset($data['id']) ? $data['id'] : null;
      $this->product_id = isset($data['product_id']) ? $data['product_id'] : null;
      $this->user_id = isset($data['user_id']) ? $data['user_id'] : null;
      $this->rating = isset($data['rating']) ? $data['rating'] : null;
      $this->comment = isset($data['comment']) ? $data['comment'] : null;
    }
  }

  public function getId() {
    return $this->id;
  }

  public function getProductID() {
    return $this->product_id;
  }

  public function getUserID() {
    return $this->user_id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }
}


class ReviewController {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function createReview($reviewData) {
    $query = "INSERT INTO reviews (product_id, user_id, rating, comment)
              VALUES (:product_id, :user_id, :rating, :comment)";
    $stmt = $this->db->prepare($query);
    $stmt->execute(array(
      ':product_id' => $reviewData['product_id'],
      ':user_id' => $reviewData['user_id'],
      ':rating' => $reviewData['rating'],
      ':comment' => $reviewData['comment']
    ));
    return true;
  }

  public function getReviewsForProduct($productId) {
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $this->db->prepare($query);
    $stmt->execute(array(':product_id' => $productId));
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getReviewsForUser($userId) {
    $query = "SELECT * FROM reviews WHERE user_id = :user_id";
    $stmt = $this->db->prepare($query);
    $stmt->execute(array(':user_id' => $userId));
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }
}


class ReviewService {
  private $reviewController;

  public function __construct($reviewController) {
    $this->reviewController = $reviewController;
  }

  public function createReview($reviewData) {
    return $this->reviewController->createReview($reviewData);
  }

  public function getReviewsForProduct($productId) {
    return $this->reviewController->getReviewsForProduct($productId);
  }

  public function getReviewsForUser($userId) {
    return $this->reviewController->getReviewsForUser($userId);
  }
}


$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

$reviewService = new ReviewService(new ReviewController($db));

$reviewData = array(
  'product_id' => 1,
  'user_id' => 1,
  'rating' => 5,
  'comment' => 'Great product!'
);

$reviewService->createReview($reviewData);

$reviewsForProduct = $reviewService->getReviewsForProduct(1);
print_r($reviewsForProduct);

$reviewsForUser = $reviewService->getReviewsForUser(1);
print_r($reviewsForUser);


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_database';
$username = 'your_username';
$password = 'your_password';

// Connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

class ReviewSystem {
  public function submit_review($title, $content, $rating) {
    // Insert review into database
    $stmt = $conn->prepare('INSERT INTO reviews (user_id, title, content, rating) VALUES (:user_id, :title, :content, :rating)');
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->bindParam(':title', $title);
    $stmt->bindParam(':content', $content);
    $stmt->bindParam(':rating', $rating);
    $stmt->execute();
  }

  public function get_reviews() {
    // Retrieve reviews from database
    $stmt = $conn->prepare('SELECT * FROM reviews');
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }
}

// Initialize review system
$review_system = new ReviewSystem();

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  $title = $_POST['title'];
  $content = $_POST['content'];
  $rating = $_POST['rating'];

  // Authenticate user (replace with actual authentication logic)
  if (isset($_SESSION['user_id'])) {
    $review_system->submit_review($title, $content, $rating);
  } else {
    echo 'You must be logged in to submit a review.';
  }
}

// Display reviews
$reviews = $review_system->get_reviews();
?>

<!-- Display form -->
<form method="post">
  <label for="title">Title:</label>
  <input type="text" id="title" name="title"><br><br>
  <label for="content">Content:</label>
  <textarea id="content" name="content"></textarea><br><br>
  <label for="rating">Rating (1-5):</label>
  <select id="rating" name="rating">
    <?php for ($i = 1; $i <= 5; $i++) : ?>
      <option value="<?php echo $i; ?>"><?php echo $i; ?></option>
    <?php endfor; ?>
  </select><br><br>
  <input type="submit" value="Submit Review">
</form>

<!-- Display reviews -->
<h2>Reviews:</h2>
<ul>
  <?php foreach ($reviews as $review) : ?>
    <li>
      <strong><?php echo $review['title']; ?></strong>
      <p><?php echo $review['content']; ?></p>
      <p>Rated: <?php echo $review['rating']; ?>/5</p>
      <p>Submitted by: <?php // Retrieve user name from database ?></p>
    </li>
  <?php endforeach; ?>
</ul>


class Review {
  private $pdo;

  public function __construct($pdo) {
    $this->pdo = $pdo;
  }

  // Create review
  public function create($user_id, $product_id, $rating, $review) {
    $stmt = $this->pdo->prepare("INSERT INTO reviews (user_id, product_id, rating, review)
                                  VALUES (:user_id, :product_id, :rating, :review)");
    $stmt->execute([
      ':user_id' => $user_id,
      ':product_id' => $product_id,
      ':rating' => $rating,
      ':review' => $review
    ]);
  }

  // Read review by ID
  public function read($id) {
    $stmt = $this->pdo->prepare("SELECT * FROM reviews WHERE id = :id");
    $stmt->execute([':id' => $id]);
    return $stmt->fetch();
  }

  // Update review
  public function update($id, $user_id, $product_id, $rating, $review) {
    $stmt = $this->pdo->prepare("UPDATE reviews SET user_id = :user_id, product_id = :product_id,
                                 rating = :rating, review = :review WHERE id = :id");
    $stmt->execute([
      ':user_id' => $user_id,
      ':product_id' => $product_id,
      ':rating' => $rating,
      ':review' => $review,
      ':id' => $id
    ]);
  }

  // Delete review by ID
  public function delete($id) {
    $stmt = $this->pdo->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->execute([':id' => $id]);
  }
}


// Connect to database
$pdo = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');

// Create a new review
$review = new Review($pdo);
$review->create(1, 1, 5, "Great product! I love it.");

// Read review by ID
(reviewData = $review->read(1);
echo json_encode($reviewData);

// Update review
$review->update(1, 2, 2, 4, "Okay product. It's fine.");

// Delete review
$review->delete(1);


// Function to add a new review
function addReview($userId, $review, $rating = 0) {
    // Connect to database
    require_once 'database.php';
    connectDB();

    // Query to insert new review into database
    $query = "INSERT INTO reviews (user_id, review, rating) VALUES (?, ?, ?)";
    $stmt = $db->prepare($query);
    $stmt->execute([$userId, $review, $rating]);

    // Close database connection
    closeDB();

    return true;
}

// Function to delete a review by ID
function deleteReview($id) {
    // Connect to database
    require_once 'database.php';
    connectDB();

    // Query to delete review from database
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $db->prepare($query);
    $stmt->execute([$id]);

    // Close database connection
    closeDB();

    return true;
}

// Function to get all reviews
function getReviews() {
    // Connect to database
    require_once 'database.php';
    connectDB();

    // Query to select all reviews from database
    $query = "SELECT r.id, u.username, r.review, r.rating FROM reviews r JOIN users u ON r.user_id = u.id";
    $stmt = $db->prepare($query);
    $stmt->execute();
    $reviews = $stmt->fetchAll();

    // Close database connection
    closeDB();

    return $reviews;
}

// Function to get a single review by ID
function getReview($id) {
    // Connect to database
    require_once 'database.php';
    connectDB();

    // Query to select review from database
    $query = "SELECT r.id, u.username, r.review, r.rating FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.id = ?";
    $stmt = $db->prepare($query);
    $stmt->execute([$id]);
    $review = $stmt->fetch();

    // Close database connection
    closeDB();

    return $review;
}


// Add a new review
addReview(1, "This product is amazing!", 5);

// Delete a review by ID
deleteReview(1);

// Get all reviews
$reviews = getReviews();
print_r($reviews);

// Get a single review by ID
$review = getReview(1);
print_r($review);


// Database connection settings
$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'reviews';

// Create a database connection
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function getAllReviews() {
    global $conn;
    
    // SQL query to get all reviews
    $sql = "SELECT r.id, u.username, p.name, r.comment, r.rating 
            FROM reviews r 
            INNER JOIN users u ON r.user_id = u.id 
            INNER JOIN products p ON r.product_id = p.id";
            
    // Execute the query
    $result = $conn->query($sql);
    
    // Store the result in an array
    $reviews = array();
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }
    
    return $reviews;
}

function getUserReviews($userId) {
    global $conn;
    
    // SQL query to get reviews for a specific user
    $sql = "SELECT r.id, u.username, p.name, r.comment, r.rating 
            FROM reviews r 
            INNER JOIN users u ON r.user_id = u.id 
            INNER JOIN products p ON r.product_id = p.id 
            WHERE r.user_id = '$userId'";
            
    // Execute the query
    $result = $conn->query($sql);
    
    // Store the result in an array
    $reviews = array();
    while ($row = $result->fetch_assoc()) {
        $reviews[] = $row;
    }
    
    return $reviews;
}

function getReviewById($reviewId) {
    global $conn;
    
    // SQL query to get a review by its ID
    $sql = "SELECT r.id, u.username, p.name, r.comment, r.rating 
            FROM reviews r 
            INNER JOIN users u ON r.user_id = u.id 
            INNER JOIN products p ON r.product_id = p.id 
            WHERE r.id = '$reviewId'";
            
    // Execute the query
    $result = $conn->query($sql);
    
    // Fetch the result
    return $result->fetch_assoc();
}

function addReview($userId, $productId, $comment, $rating) {
    global $conn;
    
    // SQL query to insert a new review
    $sql = "INSERT INTO reviews (user_id, product_id, comment, rating) 
            VALUES ('$userId', '$productId', '$comment', '$rating')";
            
    // Execute the query
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

function updateReview($reviewId, $newComment = null, $newRating = null) {
    global $conn;
    
    // SQL query to update a review
    $sql = "UPDATE reviews 
            SET comment = '$newComment', rating = '$newRating' 
            WHERE id = '$reviewId'";
            
    // Execute the query
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

function deleteReview($reviewId) {
    global $conn;
    
    // SQL query to delete a review
    $sql = "DELETE FROM reviews 
            WHERE id = '$reviewId'";
            
    // Execute the query
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }
}

// Example usage:
$reviews = getAllReviews();
foreach ($reviews as $review) {
    echo "User: $review[username], Product: $review[name], Comment: $review[comment], Rating: $review[rating]";
}


// connect to database
$mysqli = new mysqli('localhost', 'username', 'password', 'database_name');

function get_user_reviews($user_id) {
  $query = "SELECT r.id, u.name, p.name AS product_name, r.rating, r.review 
            FROM reviews r 
            JOIN users u ON r.user_id = u.id 
            JOIN products p ON r.product_id = p.id 
            WHERE r.user_id = '$user_id'";
  
  $result = $mysqli->query($query);
  
  $reviews = array();
  while ($row = $result->fetch_assoc()) {
    $reviews[] = array(
      'id' => $row['id'],
      'name' => $row['name'],
      'product_name' => $row['product_name'],
      'rating' => $row['rating'],
      'review' => $row['review']
    );
  }
  
  return $reviews;
}

function add_review($user_id, $product_id, $rating, $review) {
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) 
            VALUES ('$user_id', '$product_id', '$rating', '$review')";
  
  if ($mysqli->query($query)) {
    return true;
  } else {
    return false;
  }
}

function delete_review($review_id) {
  $query = "DELETE FROM reviews WHERE id = '$review_id'";
  
  if ($mysqli->query($query)) {
    return true;
  } else {
    return false;
  }
}


// get user's reviews
$user_id = 1; // replace with actual user ID
$reviews = get_user_reviews($user_id);
print_r($reviews);

// add review
$product_id = 1; // replace with actual product ID
$rating = 5;
$review = "Great product!";
if (add_review($user_id, $product_id, $rating, $review)) {
  echo "Review added successfully";
} else {
  echo "Failed to add review";
}

// delete review
$review_id = 1; // replace with actual review ID
if (delete_review($review_id)) {
  echo "Review deleted successfully";
} else {
  echo "Failed to delete review";
}


// database connection settings
$dsn = 'mysql:host=localhost;dbname=reviews';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

function getReviews() {
    global $pdo;
    $stmt = $pdo->prepare('SELECT r.id, u.name as username, p.title as product_title, r.content, r.rating FROM reviews r INNER JOIN users u ON r.user_id = u.id INNER JOIN products p ON r.product_id = p.id');
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function addReview($reviewData) {
    global $pdo;
    try {
        $stmt = $pdo->prepare('INSERT INTO reviews (user_id, product_id, content, rating) VALUES (:user_id, :product_id, :content, :rating)');
        $stmt->execute([
            ':user_id' => $reviewData['user_id'],
            ':product_id' => $reviewData['product_id'],
            ':content' => $reviewData['content'],
            ':rating' => $reviewData['rating']
        ]);
        return true;
    } catch (PDOException $e) {
        echo 'Error adding review: ' . $e->getMessage();
        return false;
    }
}

function editReview($reviewId, $newReviewData) {
    global $pdo;
    try {
        $stmt = $pdo->prepare('UPDATE reviews SET user_id = :user_id, product_id = :product_id, content = :content, rating = :rating WHERE id = :id');
        $stmt->execute([
            ':user_id' => $newReviewData['user_id'],
            ':product_id' => $newReviewData['product_id'],
            ':content' => $newReviewData['content'],
            ':rating' => $newReviewData['rating'],
            ':id' => $reviewId
        ]);
        return true;
    } catch (PDOException $e) {
        echo 'Error editing review: ' . $e->getMessage();
        return false;
    }
}

function deleteReview($reviewId) {
    global $pdo;
    try {
        $stmt = $pdo->prepare('DELETE FROM reviews WHERE id = :id');
        $stmt->execute([':id' => $reviewId]);
        return true;
    } catch (PDOException $e) {
        echo 'Error deleting review: ' . $e->getMessage();
        return false;
    }
}

// Usage:

$reviews = getReviews();
echo '<pre>';
print_r($reviews);
echo '</pre>';

$newReviewData = [
    'user_id' => 1,
    'product_id' => 1,
    'content' => 'This is a great product!',
    'rating' => 5
];
if (addReview($newReviewData)) {
    echo "Review added successfully!";
}

$editedReviewData = [
    'user_id' => 1,
    'product_id' => 2,
    'content' => 'This is an even better product!',
    'rating' => 6
];
if (editReview(1, $editedReviewData)) {
    echo "Review edited successfully!";
}

if (deleteReview(1)) {
    echo "Review deleted successfully!";
}


<?php

// Connect to database
$conn = new mysqli("localhost", "username", "password", "database");

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function getUserReviews($userId, $productIds = null) {
  global $conn;

  if ($productIds === null) {
    // Get all reviews for user
    $query = "SELECT * FROM reviews WHERE user_id = ?";
  } else {
    // Get reviews for specific products
    $query = "SELECT * FROM reviews WHERE user_id = ? AND product_id IN (" . implode(",", $productIds) . ")";
  }

  $stmt = $conn->prepare($query);
  $stmt->bind_param("i", $userId);

  $stmt->execute();
  $result = $stmt->get_result();

  $reviews = array();
  while ($row = $result->fetch_assoc()) {
    $reviews[] = array(
      'id' => $row['id'],
      'review' => $row['review'],
      'rating' => $row['rating'],
      'created_at' => $row['created_at']
    );
  }

  return $reviews;
}

function submitReview($userId, $productId, $review, $rating) {
  global $conn;

  $query = "INSERT INTO reviews (user_id, product_id, review, rating) VALUES (?, ?, ?, ?)";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("iiss", $userId, $productId, $review, $rating);

  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Example usage:
$userId = 123;
$productIds = array(456, 789); // Optional

$reviews = getUserReviews($userId, $productIds);
foreach ($reviews as $review) {
  echo "Review ID: " . $review['id'] . ", Review: " . $review['review'] . ", Rating: " . $review['rating'];
}

// Submit a new review
$result = submitReview($userId, 456, "This product is great!", 5);
if ($result) {
  echo "Review submitted successfully!";
} else {
  echo "Failed to submit review.";
}
?>


// config.php (database connection settings)
<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'your_database');

// Create a database connection object
$dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME;
$db = new PDO($dsn, DB_USER, DB_PASSWORD);
?>


// review.php (user review creation)
<?php
require_once 'config.php';

if (isset($_POST['submit'])) {
    // Validate user input
    $product_id = $_POST['product_id'];
    $content = trim($_POST['review']);

    if (!$product_id || !$content) {
        echo "Please fill in all fields.";
        exit;
    }

    try {
        // Insert review into database
        $stmt = $db->prepare("INSERT INTO reviews (product_id, user_id, content)
                              VALUES (:product_id, :user_id, :content)");
        $stmt->bindParam(':product_id', $_POST['product_id']);
        $stmt->bindParam(':user_id', $_SESSION['user_id']); // assuming you're using a session
        $stmt->bindParam(':content', $_POST['review']);
        $stmt->execute();

        echo "Review created successfully!";
    } catch (PDOException $e) {
        echo "Error creating review: " . $e->getMessage();
    }
}

// Display product list and allow user to create new reviews
$product_list = array(
    array('id' => 1, 'name' => 'Product A'),
    array('id' => 2, 'name' => 'Product B')
);

?>

<form action="" method="post">
    <?php foreach ($product_list as $product) { ?>
        <input type="radio" name="product_id" value="<?php echo $product['id']; ?>">
        <label><?php echo $product['name']; ?></label>
        <br>
    <?php } ?>
    <textarea name="review"></textarea><br>
    <button type="submit" name="submit">Create Review</button>
</form>


// review_list.php (displaying all reviews for a product)
<?php
require_once 'config.php';

$product_id = $_GET['product_id'];

try {
    // Retrieve reviews from database
    $stmt = $db->prepare("SELECT r.id, r.content, u.username
                          FROM reviews r
                          JOIN users u ON r.user_id = u.id
                          WHERE r.product_id = :product_id");
    $stmt->bindParam(':product_id', $_GET['product_id']);
    $reviews = $stmt->execute()->fetchAll();

} catch (PDOException $e) {
    echo "Error retrieving reviews: " . $e->getMessage();
}

?>

<h2>Reviews for Product <?php echo $_GET['product_id']; ?></h2>

<ul>
    <?php foreach ($reviews as $review) { ?>
        <li><?php echo $review['username']; ?>: <?php echo nl2br($review['content']); ?></li>
    <?php } ?>
</ul>


function addReview($product_id, $rating, $review_text) {
    // Check if the user is logged in
    if (!isset($_SESSION['user_id'])) {
        echo "You must be logged in to leave a review.";
        return;
    }

    // Connect to the database
    $db = connectToDatabase();

    // Insert the new review into the reviews table
    $query = "INSERT INTO reviews (product_id, user_id, rating, review_text) VALUES ('$product_id', '" . $_SESSION['user_id'] . "', '$rating', '$review_text')";
    $result = mysqli_query($db, $query);

    // Check if the review was added successfully
    if (!$result) {
        echo "Error adding review: " . mysqli_error($db);
        return;
    }

    // Close the database connection
    mysqli_close($db);

    // Update the average rating for the product
    updateAverageRating($product_id);

    // Redirect the user to the product page
    header("Location: /products/$product_id");
}


function getReviews($product_id, $limit = 10) {
    // Connect to the database
    $db = connectToDatabase();

    // Select all reviews from the reviews table where product_id matches the given ID
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id' ORDER BY id DESC LIMIT $limit";
    $result = mysqli_query($db, $query);

    // Fetch and store each review in an array
    $reviews = array();
    while ($row = mysqli_fetch_assoc($result)) {
        $reviews[] = array(
            'id' => $row['id'],
            'rating' => $row['rating'],
            'review_text' => $row['review_text']
        );
    }

    // Close the database connection
    mysqli_close($db);

    // Return the list of reviews
    return $reviews;
}


function updateAverageRating($product_id) {
    // Connect to the database
    $db = connectToDatabase();

    // Calculate the sum of all ratings for the product
    $query = "SELECT SUM(rating) as total FROM reviews WHERE product_id = '$product_id'";
    $result = mysqli_query($db, $query);
    $row = mysqli_fetch_assoc($result);
    $total_rating = $row['total'];

    // Calculate the average rating by dividing the sum of ratings by the number of reviews
    $num_reviews = count(getReviews($product_id));
    if ($num_reviews > 0) {
        $average_rating = $total_rating / $num_reviews;
    } else {
        $average_rating = 0;
    }

    // Update the average rating in the products table
    $query = "UPDATE products SET average_rating = '$average_rating' WHERE id = '$product_id'";
    mysqli_query($db, $query);

    // Close the database connection
    mysqli_close($db);
}


// Add a new review for product 123 with rating 5 and review text "This is a great product!"
addReview(123, 5, 'This is a great product!');

// Get all reviews for product 123
$reviews = getReviews(123);

// Update the average rating for product 123
updateAverageRating(123);


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  public function createReview($user_id, $product_name, $review_text, $rating) {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_name, review_text, rating)
      VALUES (:user_id, :product_name, :review_text, :rating)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    $stmt->execute();
  }

  public function getAllReviews() {
    $stmt = $this->db->query("SELECT * FROM reviews ORDER BY created_at DESC");
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getReviewById($id) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }
}


function user_review($user_id, $product_name, $review_text, $rating) {
  require_once 'Review.php'; // Include the Review class

  $review = new Review();
  $review->createReview($user_id, $product_name, $review_text, $rating);
}


$user_id = 1;
$product_name = "Product A";
$review_text = "This product is great!";
$rating = 5;

user_review($user_id, $product_name, $review_text, $rating);


$reviews = Review::getAllReviews();
print_r($reviews); // Output: Array of review data


class Review {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
    }

    // Function to add a review
    public function addReview($productId, $userId, $review, $rating) {
        $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, review, rating) VALUES (?, ?, ?, ?)");
        $stmt->execute([$productId, $userId, $review, $rating]);
    }

    // Function to get all reviews
    public function getAllReviews($productId = null) {
        if ($productId !== null) {
            $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = ?");
            $stmt->execute([$productId]);
            return $stmt->fetchAll();
        } else {
            $stmt = $this->db->query("SELECT * FROM reviews");
            return $stmt->fetchAll();
        }
    }

    // Function to get average rating for a product
    public function getAverageRating($productId) {
        $stmt = $this->db->prepare("SELECT AVG(rating) AS average_rating FROM reviews WHERE product_id = ?");
        $stmt->execute([$productId]);
        return $stmt->fetchColumn();
    }

    // Function to delete a review
    public function deleteReview($reviewId) {
        $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
        $stmt->execute([$reviewId]);
    }
}


$review = new Review();

// Add a review
$review->addReview(1, 1, "This product is amazing!", 5);

// Get all reviews for a specific product (by id)
$reviews = $review->getAllReviews(1);
print_r($reviews);

// Get average rating for a specific product (by id)
$averageRating = $review->getAverageRating(1);
echo "Average Rating: $averageRating";

// Delete a review
$review->deleteReview(1);


<?php

// Configuration variables
$dbHost = 'localhost';
$dbUsername = 'your_username';
$dbPassword = 'your_password';
$dbName = 'your_database';

// Establish database connection
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

function addReview($product_id, $reviewer, $rating, $review) {
    global $conn;

    // Validate input data
    if (empty($product_id) || empty($reviewer) || empty($rating) || empty($review)) {
        return false;
    }

    // Prepare SQL query to insert review into database
    $sql = "INSERT INTO reviews (product_id, reviewer, rating, review)
            VALUES (?, ?, ?, ?)";
    
    // Execute prepared statement with input data
    if ($stmt = mysqli_prepare($conn, $sql)) {
        mysqli_stmt_bind_param($stmt, 'isss', $product_id, $reviewer, $rating, $review);
        
        if (mysqli_stmt_execute($stmt)) {
            return true;
        } else {
            echo "Error: Failed to add review - " . mysqli_error($conn);
            return false;
        }
    }

    // Close prepared statement and connection
    mysqli_stmt_close($stmt);
    mysqli_close($conn);

    return false;
}

function getReviews() {
    global $conn;

    // Prepare SQL query to retrieve reviews from database
    $sql = "SELECT id, product_id, reviewer, rating, review, created_at FROM reviews ORDER BY created_at DESC";

    // Execute prepared statement and fetch results
    if ($result = mysqli_query($conn, $sql)) {
        return $result;
    } else {
        echo "Error: Failed to retrieve reviews - " . mysqli_error($conn);
        return false;
    }
}

function getReviewsForProduct($product_id) {
    global $conn;

    // Prepare SQL query to retrieve reviews for specific product
    $sql = "SELECT id, reviewer, rating, review, created_at FROM reviews WHERE product_id = ? ORDER BY created_at DESC";

    // Execute prepared statement with input data and fetch results
    if ($stmt = mysqli_prepare($conn, $sql)) {
        mysqli_stmt_bind_param($stmt, 'i', $product_id);

        if (mysqli_stmt_execute($stmt) && ($result = mysqli_stmt_get_result($stmt))) {
            return $result;
        } else {
            echo "Error: Failed to retrieve reviews for product - " . mysqli_error($conn);
            return false;
        }
    }

    // Close prepared statement and connection
    mysqli_stmt_close($stmt);
    mysqli_close($conn);

    return false;
}

?>


require_once 'review_function.php';

$product_id = 1; // Product ID to associate with this review
$reviewer = "John Doe";
$rating = 5; // Rating from 1-5
$review = "Great product!";

if (addReview($product_id, $reviewer, $rating, $review)) {
    echo "Review added successfully!";
} else {
    echo "Error: Failed to add review.";
}


$result = getReviews();

if ($result) {
    while ($row = mysqli_fetch_assoc($result)) {
        echo $row['reviewer'] . ": " . $row['rating'] . "/5 - " . $row['review'];
    }
} else {
    echo "No reviews available.";
}


$product_id = 1; // Product ID to associate with these reviews

$result = getReviewsForProduct($product_id);

if ($result) {
    while ($row = mysqli_fetch_assoc($result)) {
        echo $row['reviewer'] . ": " . $row['rating'] . "/5 - " . $row['review'];
    }
} else {
    echo "No reviews available for this product.";
}


function createUserReview($productId, $userId, $rating, $reviewText) {
  // Validate input data
  if (!ctype_digit($productId)) return false;
  if (!ctype_digit($userId)) return false;

  try {
    // Create query to insert new review into database
    $query = "INSERT INTO reviews (product_id, user_id, rating, review_text)
              VALUES (:product_id, :user_id, :rating, :review_text)";

    // Prepare and execute query with prepared statements
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $reviewText);

    // Execute query and return true if successful
    return $stmt->execute();
  } catch (PDOException $e) {
    // Handle database errors
    echo "Error creating review: " . $e->getMessage() . "
";
    return false;
  }
}


function getReviewsForProduct($productId) {
  try {
    // Create query to select all reviews for specified product
    $query = "SELECT * FROM reviews
              WHERE product_id = :product_id";

    // Prepare and execute query with prepared statements
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':product_id', $productId);

    // Execute query and return array of results
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    // Handle database errors
    echo "Error retrieving reviews: " . $e->getMessage() . "
";
    return [];
  }
}


// Assume we have a PDO instance named `$pdo`
$productId = 1;
$userId = 1;
$rating = 5;
$reviewText = 'Great product!';

createUserReview($productId, $userId, $rating, $reviewText);

$productReviews = getReviewsForProduct($productId);
print_r($productReviews);


<?php
class Review {
  private $db;

  function __construct() {
    // Connect to the database
    $this->db = new mysqli('localhost', 'username', 'password', 'database_name');
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }
  }

  function add_review($product_id, $user_name, $rating, $review_text) {
    // Insert the review into the database
    $query = "INSERT INTO reviews (product_id, user_name, rating, review_text) VALUES ('$product_id', '$user_name', '$rating', '$review_text')";
    if ($this->db->query($query)) {
      return true;
    } else {
      echo "Error adding review: " . $this->db->error;
      return false;
    }
  }

  function get_reviews($product_id) {
    // Retrieve reviews for a specific product
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    $result = $this->db->query($query);
    if ($result->num_rows > 0) {
      return $result;
    } else {
      echo "No reviews found";
      return null;
    }
  }

  function calculate_average_rating($product_id) {
    // Calculate the average rating for a specific product
    $query = "SELECT AVG(rating) as average_rating FROM reviews WHERE product_id = '$product_id'";
    $result = $this->db->query($query);
    if ($result->num_rows > 0) {
      return $result->fetch_assoc()['average_rating'];
    } else {
      echo "No ratings found";
      return null;
    }
  }

  function close_connection() {
    // Close the database connection
    $this->db->close();
  }
}
?>


$review = new Review();

// Add a review
$product_id = 1;
$user_name = 'John Doe';
$rating = 4;
$review_text = 'Great product!';
if ($review->add_review($product_id, $user_name, $rating, $review_text)) {
  echo "Review added successfully";
} else {
  echo "Error adding review";
}

// Get reviews for a specific product
$product_id = 1;
$result = $review->get_reviews($product_id);
if ($result) {
  while ($row = $result->fetch_assoc()) {
    echo "User: " . $row['user_name'] . ", Rating: " . $row['rating'] . ", Review: " . $row['review_text'];
  }
} else {
  echo "No reviews found";
}

// Calculate average rating for a specific product
$product_id = 1;
$average_rating = $review->calculate_average_rating($product_id);
echo "Average Rating: " . $average_rating;

// Close database connection
$review->close_connection();
?>


// functions.php

function getReviews($productId = null) {
  global $db;
  
  if ($productId !== null) {
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    return query($query, array($productId));
  } else {
    return query("SELECT * FROM reviews");
  }
}

function createReview($data) {
  global $db;
  
  $query = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)";
  return insert($query, $data);
}

function updateReview($id, $data) {
  global $db;
  
  $query = "UPDATE reviews SET user_id = ?, product_id = ?, rating = ?, review = ? WHERE id = ?";
  return query($query, array_merge(array($id), $data));
}

function deleteReview($id) {
  global $db;
  
  $query = "DELETE FROM reviews WHERE id = ?";
  return query($query, array($id));
}


// index.php

require_once 'functions.php';

if (isset($_POST['submit'])) {
  $data = array(
    $_POST['user_id'],
    $_POST['product_id'],
    $_POST['rating'],
    $_POST['review']
  );
  
  if (createReview($data)) {
    header('Location: index.php');
    exit;
  } else {
    echo 'Error creating review.';
  }
}

?>


// db.php (database connection settings)
define('DB_HOST', 'your_host');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to the database
function connectToDatabase() {
    $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
    
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    
    return $conn;
}

// Disconnect from the database
function disconnectFromDatabase($conn) {
    $conn->close();
}

// Review class
class Review {
    private $id;
    private $userId;
    private $review;
    private $rating;

    public function __construct($id = null, $userId = null, $review = null, $rating = null) {
        if ($id !== null) {
            $this->setId($id);
        }
        
        if ($userId !== null) {
            $this->setUserId($userId);
        }
        
        if ($review !== null) {
            $this->setReview($review);
        }
        
        if ($rating !== null) {
            $this->setRating($rating);
        }
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getReview() {
        return $this->review;
    }

    public function getRating() {
        return $this->rating;
    }

    private function setId($id) {
        $this->id = $id;
    }

    private function setUserId($userId) {
        $this->userId = $userId;
    }

    private function setReview($review) {
        $this->review = $review;
    }

    private function setRating($rating) {
        $this->rating = $rating;
    }
}

// Review functions
function createReview($conn, Review $review) {
    $query = "INSERT INTO reviews (user_id, review, rating) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("isi", $review->getUserId(), $review->getReview(), $review->getRating());
    
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error creating review: " . $stmt->error;
        return false;
    }
}

function getReviews($conn) {
    $query = "SELECT * FROM reviews";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        $reviews = array();
        
        while ($row = $result->fetch_assoc()) {
            $review = new Review($row['id'], $row['user_id'], $row['review'], $row['rating']);
            $reviews[] = $review;
        }
        
        return $reviews;
    } else {
        echo "No reviews found";
        return array();
    }
}

function getReviewById($conn, $id) {
    $query = "SELECT * FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $id);
    
    if ($stmt->execute()) {
        $result = $stmt->get_result();
        
        if ($result->num_rows > 0) {
            $review = new Review();
            
            while ($row = $result->fetch_assoc()) {
                $review->setId($row['id']);
                $review->setUserId($row['user_id']);
                $review->setReview($row['review']);
                $review->setRating($row['rating']);
            }
            
            return $review;
        } else {
            echo "No review found with ID: $id";
            return null;
        }
    } else {
        echo "Error fetching review by ID: " . $stmt->error;
        return null;
    }
}

function updateReview($conn, Review $review) {
    $query = "UPDATE reviews SET user_id = ?, review = ?, rating = ? WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("isii", $review->getUserId(), $review->getReview(), $review->getRating(), $review->getId());
    
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error updating review: " . $stmt->error;
        return false;
    }
}

function deleteReview($conn, $id) {
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $id);
    
    if ($stmt->execute()) {
        return true;
    } else {
        echo "Error deleting review: " . $stmt->error;
        return false;
    }
}


$conn = connectToDatabase();

$review1 = new Review(null, 1, 'This is a great product!', 5);
$review2 = new Review(null, 2, 'Not bad but not great either.', 3);

if (createReview($conn, $review1)) {
    echo "Review created successfully!";
}

if (createReview($conn, $review2)) {
    echo "Review created successfully!";
}

$reviews = getReviews($conn);
foreach ($reviews as $review) {
    echo "ID: " . $review->getId() . ", User ID: " . $review->getUserId() . ", Review: " . $review->getReview() . ", Rating: " . $review->getRating() . "
";
}

$updatedReview = new Review(null, 1, 'This is an updated review!', 5);
if (updateReview($conn, $updatedReview)) {
    echo "Review updated successfully!";
}

if (deleteReview($conn, 2)) {
    echo "Review deleted successfully!";
}

disconnectFromDatabase($conn);


// config.php
<?php
require_once 'db.inc.php';

// database connection settings
define('DB_HOST', 'your_host');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// function to connect to the database
function db_connect() {
    $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}
?>

// review.php (display reviews for a product)
<?php
require_once 'config.php';

// get the product id from the URL or form data
$product_id = $_GET['id'];

// connect to the database
$conn = db_connect();

// get all reviews for the current product
$stmt = $conn->prepare("SELECT * FROM reviews WHERE product_id = ?");
$stmt->bind_param('i', $product_id);
$stmt->execute();
$reviews = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);

// display reviews
echo '<h2>Reviews for ' . $_GET['name'] . '</h2>';
foreach ($reviews as $review) {
    echo '<p>' . $review['comment'] . ' (' . $review['rating'] . '/5)</p>';
}
?>

// submit_review.php (handle form submission)
<?php
require_once 'config.php';

// get the product id and user data from the form
$product_id = $_POST['product_id'];
$user_name = $_POST['user_name'];
$comment = $_POST['comment'];
$rating = $_POST['rating'];

// connect to the database
$conn = db_connect();

// insert review into the reviews table
$stmt = $conn->prepare("INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (?, ?, ?, ?)");
$stmt->bind_param('iiss', $product_id, $_SESSION['user_id'], $rating, $comment);
$stmt->execute();
?>


// review.php

class Review {
  private $db;

  function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
  }

  // Submit a new review
  public function submitReview($userId, $productId, $review, $rating) {
    $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, review, rating) VALUES (:userId, :productId, :review, :rating)");
    $stmt->bindParam(':userId', $userId);
    $stmt->bindParam(':productId', $productId);
    $stmt->bindParam(':review', $review);
    $stmt->bindParam(':rating', $rating);
    return $stmt->execute();
  }

  // Get all reviews for a product
  public function getReviews($productId) {
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :productId");
    $stmt->bindParam(':productId', $productId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }
}


// review-form.php

<?php require_once 'review.php'; ?>

<form action="" method="post">
  <label for="productId">Product ID:</label>
  <input type="text" id="productId" name="productId"><br><br>
  <label for="review">Review:</label>
  <textarea id="review" name="review"></textarea><br><br>
  <label for="rating">Rating (1-5):</label>
  <select id="rating" name="rating">
    <?php for ($i = 1; $i <= 5; $i++) { ?>
      <option value="<?php echo $i; ?>"><?php echo $i; ?></option>
    <?php } ?>
  </select><br><br>
  <input type="submit" name="submit" value="Submit Review">
</form>

<?php if (isset($_POST['submit'])) {
  $review = new Review();
  $userId = $_SESSION['user_id']; // Replace with actual user ID
  $productId = $_POST['productId'];
  $reviewText = $_POST['review'];
  $rating = $_POST['rating'];

  if ($review->submitReview($userId, $productId, $reviewText, $rating)) {
    echo 'Review submitted successfully!';
  } else {
    echo 'Error submitting review. Please try again.';
  }
} ?>


// display-reviews.php

<?php require_once 'review.php'; ?>

<?php $reviews = new Review(); ?>
<?php $productId = $_GET['id']; ?>

<h2>Reviews for Product <?php echo $productId; ?></h2>

<ul>
  <?php foreach ($reviews->getReviews($productId) as $review) { ?>
    <li>
      <strong>User ID:</strong> <?php echo $review['user_id']; ?><br>
      <strong>Review:</strong> <?php echo $review['review']; ?><br>
      <strong>Rating:</strong> <?php echo $review['rating']; ?>/5
    </li>
  <?php } ?>
</ul>


<?php

// assume we have the following classes and functions defined
class Review {
    public $id;
    public $review_text;
    public $rating;
}

class Product {
    public $id;
    public $name;
}

class User {
    public $id;
    public $username;
    public $reviews; // an array of Review objects
}

function create_review($product_id, $user_id, $text, $rating) {
    // database interaction to insert new review into reviews table
    // for simplicity we'll just simulate a database connection here
    $review = new Review();
    $review->id = uniqid(); // unique id for the review
    $review->review_text = $text;
    $review->rating = $rating;

    // update user's reviews array
    return $review;
}

function get_user_reviews($user_id) {
    // database interaction to retrieve user's reviews from reviews table
    // for simplicity we'll just simulate a database connection here
    $reviews = [];

    // loop through all reviews and filter by user id
    foreach (get_all_reviews() as $review) {
        if ($review->user_id == $user_id) {
            $reviews[] = $review;
        }
    }

    return $reviews;
}

function get_all_reviews() {
    // database interaction to retrieve all reviews from reviews table
    // for simplicity we'll just simulate a database connection here
    $reviews = [
        new Review(['id' => 1, 'user_id' => 1, 'product_id' => 1, 'review_text' => 'Great product!', 'rating' => 5]),
        new Review(['id' => 2, 'user_id' => 2, 'product_id' => 2, 'review_text' => 'Good', 'rating' => 4]),
    ];

    return $reviews;
}

function update_product_rating($product_id) {
    // calculate average rating for the product
    $total_rating = 0;
    $num_reviews = 0;

    foreach (get_all_reviews() as $review) {
        if ($review->product_id == $product_id) {
            $total_rating += $review->rating;
            $num_reviews++;
        }
    }

    // calculate average rating
    $average_rating = $num_reviews > 0 ? $total_rating / $num_reviews : 0;

    return $average_rating;
}

function write_review_form($product) {
?>
    <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
        <label for="review_text">Your review:</label>
        <textarea name="review_text" id="review_text"></textarea><br>

        <label for="rating">Rating (1-5):</label>
        <select name="rating" id="rating">
            <?php
                for ($i = 1; $i <= 5; $i++) {
                    echo "<option value=\"$i\">$i stars</option>";
                }
            ?>
        </select><br>

        <input type="hidden" name="product_id" value="<?php echo $product->id; ?>">
        <button type="submit">Submit review!</button>
    </form>
<?php
}

// main function to handle user review submission
function display_review_form() {
    if (isset($_POST['review_text']) && isset($_POST['rating'])) {
        // create new review object and save it to database
        $product_id = $_POST['product_id'];
        $text = $_POST['review_text'];
        $rating = $_POST['rating'];

        // check if user is logged in (for simplicity we'll just assume they are)
        $user_reviews = get_user_reviews(1); // replace 1 with actual user id
        $new_review = create_review($product_id, 1, $text, $rating);
        $user_reviews[] = $new_review;

        // update product rating (calculate average rating for the product)
        $average_rating = update_product_rating($product_id);

        echo "Review submitted! Average rating for this product: $average_rating stars";
    } else {
        // render review form
        $product = new Product(['id' => 1, 'name' => 'Example Product']);
        write_review_form($product);
    }
}

// call display_review_form() to start the process
display_review_form();

?>


<?php

// Database connection settings
$host = 'your_host';
$dbname = 'your_database';
$username = 'your_username';
$password = 'your_password';

try {
    // Connect to database
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    die('Error connecting to database: ' . $e->getMessage());
}

// Function to add a review
function add_review($user_id, $product_id, $review_text, $rating) {
    global $pdo;
    
    // Validate input
    if (!ctype_digit($user_id) || !ctype_digit($product_id)) {
        throw new Exception('Invalid user or product ID');
    }
    
    // Insert review into database
    $stmt = $pdo->prepare('INSERT INTO reviews (user_id, product_id, review_text, rating) VALUES (:user_id, :product_id, :review_text, :rating)');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->bindParam(':rating', $rating);
    
    try {
        $stmt->execute();
        return true;
    } catch (PDOException $e) {
        throw new Exception('Error adding review: ' . $e->getMessage());
    }
}

// Function to get all reviews for a product
function get_reviews($product_id) {
    global $pdo;
    
    // Retrieve reviews from database
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);
    
    try {
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        throw new Exception('Error retrieving reviews: ' . $e->getMessage());
    }
}

?>


// Add a review for product 1 with user ID 123 and rating 4
if (add_review(123, 1, 'This product is great!', 4)) {
    echo "Review added successfully!";
} else {
    echo "Error adding review";
}

// Get all reviews for product 2
$reviews = get_reviews(2);
foreach ($reviews as $review) {
    echo "User: " . $review['user_id'] . ", Rating: " . $review['rating'] . ", Review Text: " . $review['review_text'];
}


<?php

// Review model
class Review {
  public $id;
  public $product_id;
  public $user_id;
  public $rating;
  public $review;

  // Constructor
  public function __construct($data) {
    $this->id = $data['id'];
    $this->product_id = $data['product_id'];
    $this->user_id = $data['user_id'];
    $this->rating = $data['rating'];
    $this->review = $data['review'];
  }
}

// Review controller
class ReviewController {
  public function index() {
    // Retrieve all reviews from the database
    $reviews = Review::all();
    return $reviews;
  }

  public function add($product_id, $user_id, $rating, $review) {
    // Create a new review object
    $new_review = new Review([
      'product_id' => $product_id,
      'user_id' => $user_id,
      'rating' => $rating,
      'review' => $review
    ]);

    // Insert the review into the database
    $result = Review::create($new_review);

    return $result;
  }

  public function edit($id, $product_id, $user_id, $rating, $review) {
    // Retrieve the review from the database
    $existing_review = Review::find($id);

    // Update the review object
    $existing_review->product_id = $product_id;
    $existing_review->user_id = $user_id;
    $existing_review->rating = $rating;
    $existing_review->review = $review;

    // Save the updated review to the database
    Review::update($id, $existing_review);

    return true;
  }

  public function delete($id) {
    // Delete the review from the database
    Review::delete($id);
    return true;
  }
}

// Review model implementation
class Review extends Model {
  protected static $_table = 'reviews';

  public static function all() {
    $query = "SELECT * FROM reviews";
    $results = DB::query($query);
    return array_map(function($row) { return new Review($row); }, $results);
  }

  public static function create($data) {
    $fields = [
      'product_id',
      'user_id',
      'rating',
      'review'
    ];

    $values = array_fill(0, count($fields), '?');
    $query = "INSERT INTO reviews (" . implode(', ', $fields) . ") VALUES (" . implode(', ', $values) . ")";
    DB::query($query, ...$data);

    return true;
  }

  public static function update($id, $data) {
    $fields = [
      'product_id',
      'user_id',
      'rating',
      'review'
    ];

    $values = array_fill(0, count($fields), '?');
    $query = "UPDATE reviews SET " . implode(', ', array_map(function($field, $value) { return "$field = ?"; }, $fields, $data)) . " WHERE id = ?";
    DB::query($query, ...$data);

    return true;
  }

  public static function delete($id) {
    $query = "DELETE FROM reviews WHERE id = ?";
    DB::query($query, $id);
    return true;
  }
}

?>


// Create a new review
$review_controller = new ReviewController();
$new_review_id = $review_controller->add(1, 2, 5, 'This product is great!');

// Retrieve all reviews for a product
$product_reviews = $review_controller->index();

// Edit an existing review
$review_controller->edit($new_review_id, 3, 4, 4, 'I agree with the previous reviewer.');

// Delete a review
$review_controller->delete($new_review_id);


class Review {
    private $id;
    private $rating;
    private $comment;
    private $user_id;
    private $product_id;

    function __construct($id = null, $rating = null, $comment = null, $user_id = null, $product_id = null) {
        $this->id = $id;
        $this->rating = $rating;
        $this->comment = $comment;
        $this->user_id = $user_id;
        $this->product_id = $product_id;
    }

    function save() {
        // Connect to database
        require_once 'connect.php';
        $db = new Database();

        $query = "INSERT INTO reviews (rating, comment, user_id, product_id) VALUES (:rating, :comment, :user_id, :product_id)";
        try {
            $result = $db->prepare($query);
            $result->execute(array(
                ':rating' => $this->rating,
                ':comment' => $this->comment,
                ':user_id' => $this->user_id,
                ':product_id' => $this->product_id
            ));
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }

    function getAllReviews() {
        // Connect to database
        require_once 'connect.php';
        $db = new Database();

        $query = "SELECT * FROM reviews ORDER BY id DESC";
        try {
            $result = $db->prepare($query);
            $result->execute(array());
            return $result->fetchAll();
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }

    function getReviewById($id) {
        // Connect to database
        require_once 'connect.php';
        $db = new Database();

        $query = "SELECT * FROM reviews WHERE id = :id";
        try {
            $result = $db->prepare($query);
            $result->execute(array(':id' => $id));
            return $result->fetch();
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }

    function updateReview() {
        // Connect to database
        require_once 'connect.php';
        $db = new Database();

        $query = "UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id";
        try {
            $result = $db->prepare($query);
            $result->execute(array(
                ':rating' => $this->rating,
                ':comment' => $this->comment,
                ':id' => $this->id
            ));
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }

    function deleteReview() {
        // Connect to database
        require_once 'connect.php';
        $db = new Database();

        $query = "DELETE FROM reviews WHERE id = :id";
        try {
            $result = $db->prepare($query);
            $result->execute(array(':id' => $this->id));
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }
}


class reviewController extends Controller {

    function index() {
        require_once 'reviewModel.php';

        $reviews = new Review();

        if (isset($_POST['submit'])) {
            $reviews->rating = $_POST['rating'];
            $reviews->comment = $_POST['comment'];
            $reviews->user_id = $_SESSION['id'];
            $reviews->save();
        }

        $data['reviews'] = $reviews->getAllReviews();

        $this->loadView('reviewView.php', $data);
    }
}


<?php foreach ($reviews as $key => $value): ?>
    <div class="review">
        <p>Rating: <?php echo $value['rating']; ?></p>
        <p>Comment: <?php echo $value['comment']; ?></p>
    </div>
<?php endforeach; ?>

<form action="" method="post">
    Rating: <input type="number" name="rating"><br><br>
    Comment: <textarea name="comment"></textarea><br><br>
    <input type="submit" name="submit" value="Submit Review">
</form>


<?php

class ReviewManager {
  private $db;

  public function __construct() {
    // Establish a database connection (e.g., using PDO)
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  /**
   * Create a new review
   *
   * @param int $userId The ID of the user submitting the review
   * @param int $productId The ID of the product being reviewed
   * @param float $rating The rating given by the user (0-5)
   * @param string $content The content of the review
   */
  public function createReview($userId, $productId, $rating, $content) {
    // Validate input data
    if (!is_numeric($userId) || !is_numeric($productId)) {
      throw new Exception('Invalid user or product ID');
    }
    if ($rating < 0 || $rating > 5) {
      throw new Exception('Rating must be between 0 and 5');
    }

    // Insert review into database
    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, content) VALUES (:userId, :productId, :rating, :content)');
    $stmt->execute([
      ':userId' => $userId,
      ':productId' => $productId,
      ':rating' => $rating,
      ':content' => $content
    ]);

    // Return the newly created review ID
    return $this->db->lastInsertId();
  }

  /**
   * Update an existing review
   *
   * @param int $reviewId The ID of the review to update
   * @param float $rating The new rating given by the user (0-5)
   * @param string $content The new content of the review
   */
  public function updateReview($reviewId, $rating, $content) {
    // Validate input data
    if (!is_numeric($reviewId)) {
      throw new Exception('Invalid review ID');
    }
    if ($rating < 0 || $rating > 5) {
      throw new Exception('Rating must be between 0 and 5');
    }

    // Update review in database
    $stmt = $this->db->prepare('UPDATE reviews SET rating = :rating, content = :content WHERE id = :reviewId');
    $stmt->execute([
      ':rating' => $rating,
      ':content' => $content,
      ':reviewId' => $reviewId
    ]);
  }

  /**
   * Retrieve all reviews for a product or user
   *
   * @param int $productId The ID of the product to retrieve reviews for (optional)
   * @param int $userId The ID of the user to retrieve reviews from (optional)
   */
  public function getReviews($productId = null, $userId = null) {
    // Build query parameters
    $params = [];
    if ($productId !== null) {
      $params[':productId'] = $productId;
    }
    if ($userId !== null) {
      $params[':userId'] = $userId;
    }

    // Retrieve reviews from database
    $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = :productId OR user_id = :userId');
    $stmt->execute($params);
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }
}

?>


$reviewManager = new ReviewManager();

// Create a new review
$reviewId = $reviewManager->createReview(1, 1, 4.5, 'Great product!');

// Update an existing review
$reviewManager->updateReview($reviewId, 5.0, 'Even better now!');

// Retrieve all reviews for a product or user
$productReviews = $reviewManager->getReviews(1);
$userReviews = $reviewManager->getReviews(null, 1);

print_r($productReviews); // Array of product reviews
print_r($userReviews); // Array of user reviews


// Review class to encapsulate review logic
class Review {
  private $db;

  public function __construct() {
    // Initialize database connection (e.g. using PDO)
    $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
  }

  /**
   * Create a new review for a product
   *
   * @param int $product_id Product ID to leave a review for
   * @param int $user_id User ID leaving the review
   * @param float $rating Rating (0-5)
   * @param string $comment Review comment
   */
  public function createReview($product_id, $user_id, $rating, $comment) {
    // Validate input data
    if (!is_int($product_id) || !is_int($user_id)) {
      throw new Exception('Invalid product/user ID');
    }
    if ($rating < 0 || $rating > 5) {
      throw new Exception('Rating must be between 0 and 5');
    }

    // Insert review into database
    $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, comment)
                                VALUES (:product_id, :user_id, :rating, :comment)");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->execute();
  }

  /**
   * Get all reviews for a product
   *
   * @param int $product_id Product ID to retrieve reviews for
   */
  public function getReviews($product_id) {
    // Retrieve reviews from database
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  /**
   * Get a single review by ID
   *
   * @param int $review_id Review ID to retrieve
   */
  public function getReview($review_id) {
    // Retrieve review from database
    $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = :id");
    $stmt->bindParam(':id', $review_id);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  /**
   * Update a review
   *
   * @param int $review_id Review ID to update
   * @param float $rating New rating (0-5)
   * @param string $comment New comment
   */
  public function updateReview($review_id, $rating, $comment) {
    // Validate input data
    if ($rating < 0 || $rating > 5) {
      throw new Exception('Rating must be between 0 and 5');
    }

    // Update review in database
    $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, comment = :comment WHERE id = :id");
    $stmt->bindParam(':id', $review_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':comment', $comment);
    $stmt->execute();
  }

  /**
   * Delete a review
   *
   * @param int $review_id Review ID to delete
   */
  public function deleteReview($review_id) {
    // Delete review from database
    $this->db->prepare("DELETE FROM reviews WHERE id = :id")->bindParam(':id', $review_id)->execute();
  }
}


// Initialize Review class instance
$review = new Review();

// Create a new review for a product
$review->createReview(123, 456, 4.5, 'Great product!');

// Get all reviews for a product
$reviews = $review->getReviews(123);

// Get a single review by ID
$single_review = $review->getReview(789);

// Update an existing review
$review->updateReview(789, 4.8, 'Excellent service!');

// Delete a review
$review->deleteReview(987);


class Product {
    public $id;
    public $name;
    public $reviews;

    function __construct($id, $name) {
        $this->id = $id;
        $this->name = $name;
        $this->reviews = array();
    }
}

function add_review($product_id, $user_name, $review_text) {
    // Get the product from the array
    foreach (get_products() as $product) {
        if ($product->id == $product_id) {
            // Add review to the product's reviews array
            $product->reviews[] = new Review($user_name, $review_text);
            return true;
        }
    }

    // Product not found
    return false;
}

function get_reviews($product_id) {
    // Get the product from the array
    foreach (get_products() as $product) {
        if ($product->id == $product_id) {
            return $product->reviews;
        }
    }

    // Product not found
    return null;
}

function display_reviews($product_id) {
    $reviews = get_reviews($product_id);
    if ($reviews !== null) {
        foreach ($reviews as $review) {
            echo "User: " . $review->user_name . "
";
            echo "Review: " . $review->text . "

";
        }
    } else {
        echo "No reviews found for this product.
";
    }
}

class Review {
    public $user_name;
    public $text;

    function __construct($user_name, $text) {
        $this->user_name = $user_name;
        $this->text = $text;
    }
}

// Example usage:
$product1 = new Product(1, "Product 1");
$product2 = new Product(2, "Product 2");

add_review(1, "John Doe", "Great product!");
add_review(1, "Jane Doe", "Not so great.");
add_review(2, "Bob Smith", "Best product ever!");

display_reviews(1);


class Review {
    private $id;
    private $reviewer_id;
    private $product_id;
    private $rating;
    private $title;
    private $content;

    public function __construct($id, $reviewer_id, $product_id, $rating, $title, $content) {
        $this->id = $id;
        $this->reviewer_id = $reviewer_id;
        $this->product_id = $product_id;
        $this->rating = $rating;
        $this->title = $title;
        $this->content = $content;
    }

    public function getId() {
        return $this->id;
    }

    public function getReviewerId() {
        return $this->reviewer_id;
    }

    public function getProductID() {
        return $this->product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getContent() {
        return $this->content;
    }
}


class User {
    private $id;
    private $username;
    private $email;

    public function __construct($id, $username, $email) {
        $this->id = $id;
        $this->username = $username;
        $this->email = $email;
    }

    public function getId() {
        return $this->id;
    }

    public function getUsername() {
        return $this->username;
    }

    public function getEmail() {
        return $this->email;
    }
}


class Product {
    private $id;
    private $title;
    private $description;

    public function __construct($id, $title, $description) {
        $this->id = $id;
        $this->title = $title;
        $this->description = $description;
    }

    public function getId() {
        return $this->id;
    }

    public function getTitle() {
        return $this->title;
    }

    public function getDescription() {
        return $this->description;
    }
}


class ReviewController {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview(Review $review, User $user, Product $product) {
        // Insert review into database
        $query = "INSERT INTO reviews (reviewer_id, product_id, rating, title, content) VALUES (:reviewer_id, :product_id, :rating, :title, :content)";
        $stmt = $this->db->prepare($query);
        $stmt->execute([
            ':reviewer_id' => $user->getId(),
            ':product_id' => $product->getId(),
            ':rating' => $review->getRating(),
            ':title' => $review->getTitle(),
            ':content' => $review->getContent()
        ]);
    }

    public function getReviews() {
        // Retrieve reviews from database
        $query = "SELECT * FROM reviews";
        $stmt = $this->db->prepare($query);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
    }
}


class ReviewService {
    private $reviewController;

    public function __construct($reviewController) {
        $this->reviewController = $reviewController;
    }

    public function createReview(Review $review, User $user, Product $product) {
        $this->reviewController->createReview($review, $user, $product);
    }

    public function getReviews() {
        return $this->reviewController->getReviews();
    }
}


use App\Controllers\ReviewController;
use App\Services\ReviewService;

$app->map('/reviews', ['ReviewController', 'getReviews'], function ($request, $response) use ($app) {
    return ReviewService::getInstance($app)->getReviews();
})->via('GET');

$app->post('/reviews', function ($request, $response) use ($app) {
    $review = new Review(0, 1, 1, 5, 'Test review', 'This is a test review.');
    $user = new User(1, 'testuser', 'test@example.com');
    $product = new Product(1, 'Test product', 'This is a test product.');

    ReviewService::getInstance($app)->createReview($review, $user, $product);

    return $response->withJson(['message' => 'Review created successfully.']);
})->via('POST');


// Get all reviews
$response = $client->get('/reviews');
$reviews = json_decode($response->getBody()->getContents(), true);
print_r($reviews);

// Create a new review
$response = $client->post('/reviews', ['json' => [
    'rating' => 5,
    'title' => 'Test review',
    'content' => 'This is a test review.'
]]);
print_r(json_decode($response->getBody()->getContents(), true));


// Review class to encapsulate functionality
class Review {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    // Submit a new review
    public function submitReview($productId, $rating, $comment, $userId) {
        try {
            $stmt = $this->db->prepare("INSERT INTO Reviews (product_id, rating, comment, user_id) VALUES (:product_id, :rating, :comment, :user_id)");
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);
            $stmt->bindParam(':user_id', $userId);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error submitting review: " . $e->getMessage();
            return false;
        }
    }

    // Get all reviews for a product
    public function getReviews($productId) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM Reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error fetching reviews: " . $e->getMessage();
            return array();
        }
    }

    // Get all reviews for a user
    public function getReviewsByUser($userId) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM Reviews WHERE user_id = :user_id");
            $stmt->bindParam(':user_id', $userId);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error fetching reviews: " . $e->getMessage();
            return array();
        }
    }

    // Get average rating for a product
    public function getAverageRating($productId) {
        try {
            $stmt = $this->db->prepare("SELECT AVG(rating) as avg_rating FROM Reviews WHERE product_id = :product_id");
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();
            return $stmt->fetch(PDO::FETCH_ASSOC)['avg_rating'] ?? 0;
        } catch (PDOException $e) {
            echo "Error fetching average rating: " . $e->getMessage();
            return 0;
        }
    }

    // Helper function to get product by id
    public function getProduct($productId) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM Products WHERE id = :product_id");
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error fetching product: " . $e->getMessage();
            return array();
        }
    }
}


$db = new PDO('mysql:host=localhost;dbname=database', 'username', 'password');

$review = new Review($db);

// Submit a review
$user_id = 1;
$product_id = 1;
$rating = 5;
$comment = "Great product!";

if ($review->submitReview($product_id, $rating, $comment, $user_id)) {
    echo "Review submitted successfully!";
} else {
    echo "Error submitting review.";
}

// Get all reviews for a product
$product_id = 1;
$reviews = $review->getReviews($product_id);
echo "Reviews for product ID: " . print_r($reviews, true);

// Get average rating for a product
$product_id = 1;
$average_rating = $review->getAverageRating($product_id);
echo "Average rating for product ID: " . print_r($average_rating, true);

// Helper function to get product by id
$product_id = 1;
$product = $review->getProduct($product_id);
echo "Product details: " . print_r($product, true);


<?php

// Define the Review class
class Review {
  public $id;
  public $reviewer_name;
  public $rating;
  public $review_text;
  public $created_at;

  function __construct($id, $reviewer_name, $rating, $review_text) {
    $this->id = $id;
    $this->reviewer_name = $reviewer_name;
    $this->rating = $rating;
    $this->review_text = $review_text;
    $this->created_at = date('Y-m-d H:i:s');
  }
}

// Define the ReviewModel class
class ReviewModel {
  public function get_reviews($product_id) {
    // Get reviews from database (using PDO or MySQLi)
    $reviews = array();
    // Example query to retrieve reviews
    $query = "SELECT * FROM reviews WHERE product_id = :product_id";
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    while ($row = $stmt->fetch()) {
      $review = new Review($row['id'], $row['reviewer_name'], $row['rating'], $row['review_text']);
      $reviews[] = $review;
    }
    return $reviews;
  }

  public function add_review($product_id, $review_data) {
    // Get product ID and review data from the request
    $query = "INSERT INTO reviews (product_id, reviewer_name, rating, review_text)
              VALUES (:product_id, :reviewer_name, :rating, :review_text)";
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':reviewer_name', $review_data['reviewer_name']);
    $stmt->bindParam(':rating', $review_data['rating']);
    $stmt->bindParam(':review_text', $review_data['review_text']);
    return $stmt->execute();
  }
}

// Define the ReviewController class
class ReviewController {
  public function index($product_id) {
    // Get reviews for a specific product
    $reviews = (new ReviewModel())->get_reviews($product_id);
    echo json_encode($reviews);
  }

  public function add_review() {
    // Handle adding new review
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
      $review_data = $_POST;
      $result = (new ReviewModel())->add_review($_GET['product_id'], $review_data);
      echo json_encode(array('success' => $result));
    }
  }
}

// Example usage:
$review_controller = new ReviewController();

// Get reviews for a specific product
echo $review_controller->index(123);

// Add new review
$_POST = array(
  'reviewer_name' => 'John Doe',
  'rating' => 5,
  'review_text' => 'Great product!'
);
$review_controller->add_review();
?>


// Review Model
class Review {
    private $id;
    private $product_id;
    private $user_id;
    private $rating;
    private $comment;

    public function __construct($id, $product_id, $user_id, $rating, $comment) {
        $this->id = $id;
        $this->product_id = $product_id;
        $this->user_id = $user_id;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public function getId() {
        return $this->id;
    }

    public function getProductID() {
        return $this->product_id;
    }

    public function getUserID() {
        return $this->user_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}

// Review Controller
class ReviewController {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createReview(Review $review) {
        // Check if review already exists for user and product
        $existingReview = $this->getReviewByUserAndProduct($review->getUserID(), $review->getProductID());
        if ($existingReview !== null) {
            return "Review already exists";
        }

        // Insert new review into database
        $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
                VALUES (:product_id, :user_id, :rating, :comment)";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(":product_id", $review->getProductID());
        $stmt->bindParam(":user_id", $review->getUserID());
        $stmt->bindParam(":rating", $review->getRating());
        $stmt->bindParam(":comment", $review->getComment());
        $stmt->execute();

        return "Review created successfully";
    }

    public function getReviewsByProduct($product_id) {
        // Get all reviews for product
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(":product_id", $product_id);
        $stmt->execute();
        $reviews = $stmt->fetchAll();

        return $reviews;
    }

    public function getReviewByUserAndProduct($user_id, $product_id) {
        // Get review for user and product
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id AND user_id = :user_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(":product_id", $product_id);
        $stmt->bindParam(":user_id", $user_id);
        $stmt->execute();
        $review = $stmt->fetch();

        return $review;
    }
}


// Create database connection
$db = new PDO("mysql:host=localhost;dbname=mydatabase", "username", "password");

// Create review controller
$reviewController = new ReviewController($db);

// Create new review
$review = new Review(null, 1, 1, 5, "Great product!");

// Create review
$result = $reviewController->createReview($review);
echo $result; // Output: Review created successfully

// Get all reviews for product
$product_id = 1;
$reviews = $reviewController->getReviewsByProduct($product_id);
foreach ($reviews as $review) {
    echo "Rating: {$review['rating']}, Comment: {$review['comment']}<br>";
}


CREATE TABLE reviews (
  id INT PRIMARY KEY AUTO_INCREMENT,
  product_id INT NOT NULL,
  user_id INT NOT NULL,
  rating TINYINT(1) NOT NULL,
  review TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE products (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL,
  description TEXT NOT NULL
);


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function getAllReviewsForProduct($productId) {
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$productId]);
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function addReview($data) {
    $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($query);
    $stmt->execute([
      $data['product_id'],
      $data['user_id'],
      $data['rating'],
      $data['review']
    ]);
  }

  public function getReviewById($id) {
    $query = "SELECT * FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$id]);
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }
}


function addUserReview($productId, $userId, $rating, $review) {
  $db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  $reviewModel = new Review($db);

  if ($review) {
    $reviewData = [
      'product_id' => $productId,
      'user_id' => $userId,
      'rating' => $rating,
      'review' => $review
    ];

    $reviewModel->addReview($reviewData);
    echo "Review added successfully!";
  } else {
    echo "Please enter a review.";
  }
}


addUserReview(1, 1, 5, 'This product is amazing!');


<?php
class Review {
  private $db;

  public function __construct() {
    // Connect to database (e.g. MySQL)
    $this->db = new mysqli('localhost', 'username', 'password', 'database');
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }
  }

  public function addReview($userId, $productId, $rating, $comment) {
    // Validate input
    if (!$rating || !is_numeric($rating)) {
      throw new Exception('Invalid rating');
    }
    if (empty($comment)) {
      throw new Exception('Comment is required');
    }

    // Insert review into database
    $query = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param('iiii', $userId, $productId, $rating, $comment);
    $result = $stmt->execute();
    if (!$result) {
      throw new Exception('Error adding review');
    }
  }

  public function getReviewsForProduct($productId) {
    // Get reviews for specific product
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param('i', $productId);
    $result = $stmt->execute();
    if ($result) {
      return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
    } else {
      throw new Exception('Error retrieving reviews');
    }
  }

  public function getReviewsForUser($userId) {
    // Get reviews for specific user
    $query = "SELECT * FROM reviews WHERE user_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param('i', $userId);
    $result = $stmt->execute();
    if ($result) {
      return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
    } else {
      throw new Exception('Error retrieving reviews');
    }
  }

  public function deleteReview($reviewId) {
    // Delete review from database
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param('i', $reviewId);
    $result = $stmt->execute();
    if (!$result) {
      throw new Exception('Error deleting review');
    }
  }
}
?>


// Create instance of Review class
$review = new Review();

// Add a review for a product
try {
  $review->addReview(1, 5, 4.5, 'Great product!');
} catch (Exception $e) {
  echo "Error: " . $e->getMessage();
}

// Get reviews for a product
$reviews = $review->getReviewsForProduct(5);
foreach ($reviews as $review) {
  echo $review['comment'] . "
";
}

// Delete a review
try {
  $review->deleteReview(1);
} catch (Exception $e) {
  echo "Error: " . $e->getMessage();
}


// database connection details
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'database';

// connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

function user_review($user_id, $product_id) {
  global $conn;

  // check if review already exists for this product and user
  $sql = "SELECT * FROM reviews WHERE user_id = '$user_id' AND product_id = '$product_id'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    return false; // review already exists, do not allow editing
  }

  // get user rating and review for this product
  $sql = "SELECT rating, review FROM reviews WHERE user_id = '$user_id' AND product_id = '$product_id'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
      return array(
        'rating' => $row['rating'],
        'review' => $row['review']
      );
    }
  }

  // no review found, create new one
  $sql = "INSERT INTO reviews (user_id, product_id, rating, review) VALUES ('$user_id', '$product_id', NULL, '')";
  if ($conn->query($sql) === TRUE) {
    return true;
  } else {
    return false; // error inserting review
  }
}


$user_id = 1;
$product_id = 3;

$result = user_review($user_id, $product_id);

if ($result === true) {
  echo "Review created successfully!";
} elseif ($result === false) {
  echo "Error creating review.";
} else {
  echo "Rating: " . $result['rating'];
  echo "Review: " . $result['review'];
}


<?php

class Review {
  private $id;
  private $product_id;
  private $rating;
  private $review_text;

  public function __construct($data) {
    $this->id = $data['id'];
    $this->product_id = $data['product_id'];
    $this->rating = $data['rating'];
    $this->review_text = $data['review_text'];
  }

  public static function getReviews($productId, $limit = 10) {
    // Retrieve reviews from database
    $reviews = array();
    // Simulate database query for simplicity
    if ($productId == 1) {
      $reviews[] = new Review(array('id' => 1, 'product_id' => 1, 'rating' => 5, 'review_text' => 'Great product!'));
      $reviews[] = new Review(array('id' => 2, 'product_id' => 1, 'rating' => 4, 'review_text' => 'Good product, but expensive.'));
    }
    return $reviews;
  }

  public static function addReview($data) {
    // Validate review data
    if (!isset($data['product_id']) || !isset($data['rating']) || !isset($data['review_text'])) {
      throw new Exception('Invalid review data');
    }
    // Insert review into database
    // Simulate database insertion for simplicity
    $newReview = new Review(array('id' => 3, 'product_id' => $data['product_id'], 'rating' => $data['rating'], 'review_text' => $data['review_text']));
    return $newReview;
  }
}

?>


// Get reviews for a product with ID 1
$reviews = Review::getReviews(1);
foreach ($reviews as $review) {
  echo "Rating: {$review->rating} - Review: {$review->review_text}
";
}

// Add a new review for a product with ID 1
$newReviewData = array('product_id' => 1, 'rating' => 5, 'review_text' => 'Love this product!');
$newReview = Review::addReview($newReviewData);
echo "New review added: {$newReview->id} - Rating: {$newReview->rating} - Review: {$newReview->review_text}
";


CREATE TABLE users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255),
    email VARCHAR(255)
);

CREATE TABLE products (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255),
    description TEXT
);

CREATE TABLE reviews (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    product_id INT,
    rating INT,
    comment TEXT,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);


// Review.php

class Review {
    private $id;
    private $userId;
    private $productId;
    private $rating;
    private $comment;

    public function __construct($id = null, $userId = null, $productId = null, $rating = null, $comment = null) {
        $this->id = $id;
        $this->userId = $userId;
        $this->productId = $productId;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }

    public function getProductId() {
        return $this->productId;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


// ReviewController.php

class ReviewController {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    // Get all reviews for a product
    public function getReviewsForProduct($productId) {
        $sql = "SELECT * FROM reviews WHERE product_id = :product_id";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
    }

    // Create a new review
    public function createReview(Review $review) {
        $sql = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:user_id, :product_id, :rating, :comment)";
        $stmt = $this->db->prepare($sql);
        $stmt->bindParam(':user_id', $review->getUserId());
        $stmt->bindParam(':product_id', $review->getProductId());
        $stmt->bindParam(':rating', $review->getRating());
        $stmt->bindParam(':comment', $review->getComment());
        return $stmt->execute();
    }
}


// index.php

require_once 'config.php';
require_once 'ReviewController.php';

$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');

$reviewController = new ReviewController($db);

// Get all reviews for a product
$reviews = $reviewController->getReviewsForProduct(1);
foreach ($reviews as $review) {
    echo "Review ID: " . $review->getId() . "
";
    echo "User ID: " . $review->getUserId() . "
";
    echo "Product ID: " . $review->getProductId() . "
";
    echo "Rating: " . $review->getRating() . "
";
    echo "Comment: " . $review->getComment() . "

";
}

// Create a new review
$review = new Review(0, 1, 1, 5, "Great product!");
$success = $reviewController->createReview($review);
if ($success) {
    echo "Review created successfully!
";
} else {
    echo "Error creating review.
";
}


<?php

// Connect to database
require_once 'dbconfig.php';
$connection = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

// Check connection
if (!$connection) {
  die("Connection failed: " . mysqli_connect_error());
}

// Function to create a new review
function create_review($user_id, $product_name, $rating, $review_text) {
  global $connection;
  
  $sql = "INSERT INTO reviews (user_id, product_name, rating, review_text)
          VALUES ('$user_id', '$product_name', '$rating', '$review_text')";
  
  if (mysqli_query($connection, $sql)) {
    echo 'Review created successfully!';
  } else {
    echo 'Error creating review: ' . mysqli_error($connection);
  }
}

// Function to view all reviews
function view_reviews() {
  global $connection;
  
  $sql = "SELECT * FROM reviews";
  $result = mysqli_query($connection, $sql);
  
  if (mysqli_num_rows($result) > 0) {
    echo '<table border="1" cellpadding="10">';
    while ($row = mysqli_fetch_assoc($result)) {
      echo '<tr>';
      echo '<td>' . $row['product_name'] . '</td>';
      echo '<td>' . $row['rating'] . '</td>';
      echo '<td>' . $row['review_text'] . '</td>';
      echo '<td><a href="update_review.php?id=' . $row['id'] . '">Update</a></td>';
      echo '<td><a href="delete_review.php?id=' . $row['id'] . '">Delete</a></td>';
      echo '</tr>';
    }
    echo '</table>';
  } else {
    echo 'No reviews found.';
  }
}

// Function to update a review
function update_review($review_id, $product_name, $rating, $review_text) {
  global $connection;
  
  $sql = "UPDATE reviews SET product_name='$product_name', rating='$rating', review_text='$review_text' WHERE id=$review_id";
  
  if (mysqli_query($connection, $sql)) {
    echo 'Review updated successfully!';
  } else {
    echo 'Error updating review: ' . mysqli_error($connection);
  }
}

// Function to delete a review
function delete_review($review_id) {
  global $connection;
  
  $sql = "DELETE FROM reviews WHERE id=$review_id";
  
  if (mysqli_query($connection, $sql)) {
    echo 'Review deleted successfully!';
  } else {
    echo 'Error deleting review: ' . mysqli_error($connection);
  }
}

// Test the functions
if (isset($_GET['action'])) {
  switch ($_GET['action']) {
    case 'create':
      create_review($_POST['user_id'], $_POST['product_name'], $_POST['rating'], $_POST['review_text']);
      break;
    case 'view_reviews':
      view_reviews();
      break;
    case 'update':
      update_review($_POST['id'], $_POST['product_name'], $_POST['rating'], $_POST['review_text']);
      break;
    case 'delete':
      delete_review($_GET['id']);
      break;
  }
} else {
  echo '<form action="reviews.php?action=create" method="post">';
  echo 'Product Name: <input type="text" name="product_name"><br>';
  echo 'Rating: <select name="rating">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
          </select><br>';
  echo 'Review Text: <textarea name="review_text"></textarea><br>';
  echo '<input type="hidden" name="user_id" value="' . $_SESSION['id'] . '">';
  echo '<input type="submit" value="Create Review">';
  echo '</form>';
}

?>


// Connect to database
$db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');

function addReview($productId, $userId, $rating, $review) {
  // Insert review into database
  $stmt = $db->prepare('INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)');
  $stmt->execute([
    ':product_id' => $productId,
    ':user_id' => $userId,
    ':rating' => $rating,
    ':review' => $review
  ]);
}

function getAverageRating($productId) {
  // Retrieve average rating from database
  $stmt = $db->prepare('SELECT AVG(rating) FROM reviews WHERE product_id = :product_id');
  $stmt->execute([':product_id' => $productId]);
  return (int)$stmt->fetchColumn();
}

function getReviewsForProduct($productId, $limit = 10) {
  // Retrieve reviews for a specific product from database
  $stmt = $db->prepare('SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC LIMIT :limit');
  $stmt->execute([':product_id' => $productId, ':limit' => $limit]);
  return $stmt->fetchAll();
}

// Example usage:
addReview(1, 1, 5, 'Great product!');
echo getAverageRating(1); // Output: 5
$reviews = getReviewsForProduct(1);
print_r($reviews); // Output: Array of reviews for product ID 1


<?php

function create_review($product_id, $rating, $comment) {
  // Check if product exists
  if (!exists_product($product_id)) {
    return array("error" => "Product not found");
  }

  // Create new review
  $review = array(
    "product_id" => $product_id,
    "rating" => $rating,
    "comment" => $comment
  );

  // Insert review into database
  try {
    db_connect();
    query("INSERT INTO reviews (product_id, rating, comment) VALUES (:product_id, :rating, :comment)", array(
      ":product_id" => $product_id,
      ":rating" => $rating,
      ":comment" => $comment
    ));
    close_db();
  } catch (PDOException $e) {
    return array("error" => "Failed to create review");
  }

  // Return success message
  return array("success" => "Review created successfully");
}

function get_reviews($product_id) {
  // Check if product exists
  if (!exists_product($product_id)) {
    return array("error" => "Product not found");
  }

  // Get reviews from database
  try {
    db_connect();
    $reviews = query("SELECT * FROM reviews WHERE product_id = :product_id", array(
      ":product_id" => $product_id
    ));
    close_db();

    // Format reviews as JSON
    foreach ($reviews as &$review) {
      $review["rating"] = (int)$review["rating"];
    }
    return json_encode($reviews);
  } catch (PDOException $e) {
    return array("error" => "Failed to retrieve reviews");
  }
}

function exists_product($product_id) {
  // Check if product exists in database
  try {
    db_connect();
    $result = query("SELECT * FROM products WHERE id = :id", array(
      ":id" => $product_id
    ));
    close_db();

    return !empty($result);
  } catch (PDOException $e) {
    return false;
  }
}

?>


$review_data = create_review(1, 4, "Great product!");
print_r($review_data);


$reviews = get_reviews(1);
echo $reviews;


// Include database connection settings
require 'db_connection.php';

// Function to display all reviews
function display_reviews() {
  $sql = "SELECT * FROM reviews ORDER BY created_at DESC";
  $result = mysqli_query($conn, $sql);
  while ($review = mysqli_fetch_assoc($result)) {
    echo '<div class="review">';
    echo '<h2>' . $review['product_name'] . '</h2>';
    echo '<p>Rating: ' . $review['rating'] . '/5</p>';
    echo '<p>' . substr($review['review'], 0, 200) . '...</p>';
    echo '<p>Posted by ' . get_user_name($review['user_id']) . '</p>';
    echo '</div>';
  }
}

// Function to display user reviews
function display_user_reviews($user_id) {
  $sql = "SELECT * FROM reviews WHERE user_id = '$user_id' ORDER BY created_at DESC";
  $result = mysqli_query($conn, $sql);
  while ($review = mysqli_fetch_assoc($result)) {
    echo '<div class="review">';
    echo '<h2>' . $review['product_name'] . '</h2>';
    echo '<p>Rating: ' . $review['rating'] . '/5</p>';
    echo '<p>' . substr($review['review'], 0, 200) . '...</p>';
    echo '<p>Posted by ' . get_user_name($review['user_id']) . '</p>';
    echo '</div>';
  }
}

// Function to add a new review
function add_review($product_name, $rating, $review, $user_id) {
  $sql = "INSERT INTO reviews (product_name, rating, review, user_id) VALUES ('$product_name', '$rating', '$review', '$user_id')";
  if (mysqli_query($conn, $sql)) {
    echo 'Review added successfully!';
  } else {
    echo 'Error adding review: ' . mysqli_error($conn);
  }
}

// Function to get the name of a user
function get_user_name($user_id) {
  $sql = "SELECT username FROM users WHERE id = '$user_id'";
  $result = mysqli_query($conn, $sql);
  return mysqli_fetch_assoc($result)['username'];
}


<?php display_reviews(); ?>


<?php display_user_reviews(1); // Replace 1 with the desired user ID ?>


<?php add_review('Product Name', 4, 'This is a great product!', 2); // Replace values with your own ?>


// models/Review.php

class Review {
  private $id;
  private $userId;
  private $productId;
  private $rating;
  private $comment;

  public function __construct($data) {
    $this->id = (int)$data['id'];
    $this->userId = (int)$data['user_id'];
    $this->productId = (int)$data['product_id'];
    $this->rating = (float)$data['rating'];
    $this->comment = $data['comment'];
  }

  public function getId() {
    return $this->id;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getProductId() {
    return $this->productId;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }
}


// services/ReviewService.php

class ReviewService {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function getAllReviews($productId) {
    $query = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$productId]);
    return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
  }

  public function getReview($id) {
    $query = "SELECT * FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$id]);
    return $stmt->fetchObject('Review');
  }

  public function addReview(Review $review) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$review->getUserId(), $review->getProductId(), $review->getRating(), $review->getComment()]);
  }

  public function updateReview(Review $review) {
    $query = "UPDATE reviews SET rating = ?, comment = ? WHERE id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$review->getRating(), $review->getComment(), $review->getId()]);
  }

  public function deleteReview($id) {
    $query = "DELETE FROM reviews WHERE id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$id]);
  }
}


// controllers/ReviewController.php

class ReviewController {
  private $reviewService;

  public function __construct(ReviewService $reviewService) {
    $this->reviewService = $reviewService;
  }

  public function index() {
    $productId = $_GET['product_id'];
    $reviews = $this->reviewService->getAllReviews($productId);
    return view('reviews.index', ['reviews' => $reviews]);
  }

  public function show($id) {
    $review = $this->reviewService->getReview($id);
    return view('reviews.show', ['review' => $review]);
  }

  public function create() {
    // render create form
  }

  public function store(Request $request) {
    $review = new Review(['user_id' => auth()->id(), 'product_id' => $_GET['product_id'], 'rating' => (float)$request->input('rating'), 'comment' => $request->input('comment')]);
    $this->reviewService->addReview($review);
    return redirect()->back();
  }

  public function edit($id) {
    // render edit form
  }

  public function update(Request $request, $id) {
    $review = new Review(['rating' => (float)$request->input('rating'), 'comment' => $request->input('comment')]);
    $this->reviewService->updateReview($review);
    return redirect()->back();
  }

  public function destroy($id) {
    $this->reviewService->deleteReview($id);
    return redirect()->back();
  }
}


// views/reviews/index.blade.php

@foreach ($reviews as $review)
  {{ $review->getRating() }} stars by {{ $review->getUserId() }}
  {{ $review->getComment() }}
@endforeach


<?php
class Review {
    private $id;
    private $user_id;
    private $product_id;
    private $rating;
    private $comment;

    public function __construct($data = null) {
        if ($data !== null) {
            $this->loadData($data);
        }
    }

    private function loadData($data) {
        $this->id = (int)$data['id'];
        $this->user_id = (int)$data['user_id'];
        $this->product_id = (int)$data['product_id'];
        $this->rating = (float)$data['rating'];
        $this->comment = trim($data['comment']);
    }

    public function getId() {
        return $this->id;
    }

    public function getUserID() {
        return $this->user_id;
    }

    public function getProductID() {
        return $this->product_id;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}

class ReviewManager {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function storeReview(Review $review) {
        $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)');
        return $stmt->execute([$review->getUserID(), $review->getProductID(), $review->getRating(), $review->getComment()]);
    }

    public function getReviews($productID = null) {
        if ($productID === null) {
            $stmt = $this->db->prepare('SELECT * FROM reviews ORDER BY id DESC');
        } else {
            $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = ? ORDER BY id DESC');
            $stmt->execute([$productID]);
        }

        return $stmt->fetchAll(PDO::FETCH_CLASS, 'Review');
    }

    public function calculateAverageRating($productID) {
        $reviews = $this->getReviews($productID);
        if (empty($reviews)) {
            return 0;
        }

        $sum = array_sum(array_column($reviews, 'rating'));
        return round($sum / count($reviews));
    }
}
?>


require_once 'review.php';

// assume we have a PDO instance named `$db` that's connected to our database

$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

$manager = new ReviewManager($db);
$review1 = new Review(['user_id' => 1, 'product_id' => 10, 'rating' => 5.0, 'comment' => 'Great product!']);
$review2 = new Review(['user_id' => 2, 'product_id' => 10, 'rating' => 4.0, 'comment' => 'Good product']);

$manager->storeReview($review1);
$manager->storeReview($review2);

// get all reviews
$reviews = $manager->getReviews();

// get reviews for a specific product
$productID = 10;
$reviewsForProduct = $manager->getReviews($productID);

// calculate average rating for a product
$averageRating = $manager->calculateAverageRating($productID);
echo "Average rating for product $productID is $averageRating stars";


// Review system functions

// Function to display reviews for a given product
function get_reviews($product_id) {
    global $db;
    $query = "SELECT * FROM reviews WHERE product_id = '$product_id'";
    return mysqli_query($db, $query);
}

// Function to add a review for a given product
function create_review($product_id, $rating, $comment) {
    global $db;
    $query = "INSERT INTO reviews (product_id, rating, comment)
               VALUES ('$product_id', '$rating', '$comment')";
    return mysqli_query($db, $query);
}

// Function to display review form for a given product
function get_review_form($product_id) {
    ?>
    <h2>Leave a Review</h2>
    <form action="create_review.php" method="post">
        <label for="rating">Rating:</label>
        <select id="rating" name="rating">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
        </select><br>
        <label for="comment">Comment:</label>
        <textarea id="comment" name="comment"></textarea><br>
        <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
        <button type="submit">Submit Review</button>
    </form>
    <?php
}

// Function to display individual review details
function get_review_details($review_id) {
    global $db;
    $query = "SELECT * FROM reviews WHERE id = '$review_id'";
    return mysqli_fetch_assoc(mysqli_query($db, $query));
}


// Display reviews for a given product
<?php
$product_id = 1;
$reviews = get_reviews($product_id);
foreach ($reviews as $review) {
    echo $review['comment'] . " (" . $review['rating'] . "/5)";
}
?>

// Add a review for a given product
<?php
$product_id = $_POST['product_id'];
$rating = $_POST['rating'];
$comment = $_POST['comment'];

if (create_review($product_id, $rating, $comment)) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}
?>


// Example using PDO and prepared statement
$stmt = $db->prepare("INSERT INTO reviews (product_id, rating, comment)
                     VALUES (:product_id, :rating, :comment)");
$stmt->bindParam(':product_id', $product_id);
$stmt->bindParam(':rating', $rating);
$stmt->bindParam(':comment', $comment);
if ($stmt->execute()) {
    echo "Review created successfully!";
} else {
    echo "Error creating review.";
}


// Database connection settings
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database";

// Create a connection to the database
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function createUserReview($userId, $productId, $rating, $comment) {
    global $conn;

    // Query to create a new review
    $sql = "INSERT INTO reviews (user_id, product_id, rating, comment)
            VALUES ('$userId', '$productId', '$rating', '$comment')";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}

function getUserReviews($userId) {
    global $conn;

    // Query to retrieve all reviews from a user
    $sql = "SELECT * FROM reviews WHERE user_id = '$userId'";

    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        return $result;
    } else {
        echo "No reviews found.";
        return null;
    }
}

function getProductReviews($productId) {
    global $conn;

    // Query to retrieve all reviews for a product
    $sql = "SELECT * FROM reviews WHERE product_id = '$productId'";

    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        return $result;
    } else {
        echo "No reviews found.";
        return null;
    }
}

function updateReviewRating($reviewId, $newRating) {
    global $conn;

    // Query to update a review's rating
    $sql = "UPDATE reviews SET rating = '$newRating' WHERE id = '$reviewId'";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}

function updateReviewComment($reviewId, $newComment) {
    global $conn;

    // Query to update a review's comment
    $sql = "UPDATE reviews SET comment = '$newComment' WHERE id = '$reviewId'";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}

function deleteReview($reviewId) {
    global $conn;

    // Query to delete a review
    $sql = "DELETE FROM reviews WHERE id = '$reviewId'";

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}


// Create a new user review
createUserReview(1, 1, 5, 'This product is great!');

// Retrieve all reviews from a user
$result = getUserReviews(1);
while ($row = $result->fetch_assoc()) {
    echo "Rating: " . $row['rating'] . ", Comment: " . $row['comment'];
}

// Update a review's rating
updateReviewRating(1, 4);

// Retrieve all reviews for a product
$result = getProductReviews(1);
while ($row = $result->fetch_assoc()) {
    echo "Rating: " . $row['rating'] . ", Comment: " . $row['comment'];
}

// Update a review's comment
updateReviewComment(1, 'This product is okay.');

// Delete a review
deleteReview(1);


// configuration file
require 'config.php';

// function to get all reviews for a product
function getReviews($productId) {
    global $db;
    $query = "SELECT * FROM reviews WHERE product_id = '$productId'";
    return $db->query($query)->fetch_all(MYSQLI_ASSOC);
}

// function to add new review
function addReview($data) {
    global $db;
    extract($data);

    // sanitize inputs
    $rating = (int)$rating;
    $review = mysqli_real_escape_string($db, $review);

    // insert into database
    $query = "INSERT INTO reviews (product_id, user_id, rating, review)
              VALUES ('$productId', '$userId', '$rating', '$review')";
    return $db->query($query);
}

// function to display average rating for a product
function getAverageRating($productId) {
    global $db;
    $query = "SELECT AVG(rating) as average FROM reviews WHERE product_id = '$productId'";
    $result = $db->query($query)->fetch_assoc();
    return isset($result['average']) ? (float)$result['average'] : 0;
}

// example usage:
$productId = 1; // replace with actual product ID

// get all reviews for this product
$reviews = getReviews($productId);
echo "Reviews for Product $productId:<br>";

foreach ($reviews as $review) {
    echo "Rating: $review[rating] - Review: $review[review]<br>";
}

// add new review
$data = array(
    'product_id' => 1,
    'user_id' => 1,
    'rating' => 5,
    'review' => 'This is a great product!'
);
addReview($data);

// display average rating for this product
echo "Average Rating: ".getAverageRating(1)."<br>";



<?php

// Database configuration
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'root';
$password = '';

try {
    // Establish a connection to the database
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    die("Connection failed: " . $e->getMessage());
}

function createUser($name)
{
    global $pdo;

    try {
        // Create a prepared statement to insert user data
        $stmt = $pdo->prepare("INSERT INTO users (name) VALUES (:name)");
        $stmt->bindParam(':name', $name);
        $stmt->execute();

        return $pdo->lastInsertId();
    } catch (PDOException $e) {
        die("Error creating user: " . $e->getMessage());
    }
}

function createReview($userId, $productId, $rating, $review)
{
    global $pdo;

    try {
        // Create a prepared statement to insert review data
        $stmt = $pdo->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (:user_id, :product_id, :rating, :review)");
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        $stmt->execute();

        return $pdo->lastInsertId();
    } catch (PDOException $e) {
        die("Error creating review: " . $e->getMessage());
    }
}

function getReview($id)
{
    global $pdo;

    try {
        // Create a prepared statement to select the specified review
        $stmt = $pdo->prepare("SELECT * FROM reviews WHERE id = :id");
        $stmt->bindParam(':id', $id);
        $stmt->execute();

        return $stmt->fetch();
    } catch (PDOException $e) {
        die("Error getting review: " . $e->getMessage());
    }
}

function updateReview($id, $rating = null, $review = null)
{
    global $pdo;

    try {
        // Create a prepared statement to update the specified review
        $stmt = $pdo->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :id");
        if ($rating !== null) {
            $stmt->bindParam(':rating', $rating);
        }
        if ($review !== null) {
            $stmt->bindParam(':review', $review);
        }
        $stmt->bindParam(':id', $id);
        $stmt->execute();

        return true;
    } catch (PDOException $e) {
        die("Error updating review: " . $e->getMessage());
    }
}

function deleteReview($id)
{
    global $pdo;

    try {
        // Create a prepared statement to delete the specified review
        $stmt = $pdo->prepare("DELETE FROM reviews WHERE id = :id");
        $stmt->bindParam(':id', $id);
        $stmt->execute();

        return true;
    } catch (PDOException $e) {
        die("Error deleting review: " . $e->getMessage());
    }
}

// Example usage
$userName = 'John Doe';
$userId = createUser($userName);

$productName = 'Example Product';
$productDescription = 'This is an example product.';
$product = array('name' => $productName, 'description' => $productDescription);

$productId = createProduct($productName, $productDescription); // Note: This function doesn't exist in the original code snippet. You'll need to implement it separately.

$reviewRating = 5;
$reviewText = 'This product is amazing!';

$reviewId = createReview($userId, $productId, $reviewRating, $reviewText);

// Retrieve a review by ID
$review = getReview($reviewId);
print_r($review);

// Update the review
$updateData = array('rating' => 4, 'review' => 'This product is great!');
updateReview($reviewId, $updateData['rating'], $updateData['review']);

// Delete the review
deleteReview($reviewId);


// Connect to database
$dsn = 'mysql:host=localhost;dbname=mydatabase';
$username = 'myusername';
$password = 'mypassword';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// Function to create a review
function create_review($product_id, $user_id, $rating, $review) {
    global $pdo;
    
    $stmt = $pdo->prepare('INSERT INTO reviews SET product_id = :product_id, user_id = :user_id, rating = :rating, review = :review');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review', $review);
    
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

// Function to get all reviews for a product
function get_reviews($product_id) {
    global $pdo;
    
    $stmt = $pdo->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);
    
    if ($stmt->execute()) {
        return $stmt->fetchAll();
    } else {
        return array();
    }
}

// Function to get average rating for a product
function get_average_rating($product_id) {
    global $pdo;
    
    $stmt = $pdo->prepare('SELECT AVG(rating) AS average FROM reviews WHERE product_id = :product_id');
    $stmt->bindParam(':product_id', $product_id);
    
    if ($stmt->execute()) {
        $result = $stmt->fetch();
        return isset($result['average']) ? $result['average'] : 0;
    } else {
        return 0;
    }
}

// Example usage:
$product_id = 1;
$user_id = 1;
$rating = 4;
$review = 'Great product!';

if (create_review($product_id, $user_id, $rating, $review)) {
    echo 'Review created successfully!';
} else {
    echo 'Error creating review.';
}

$reviews = get_reviews($product_id);
echo 'Reviews for product ' . $product_id . ':';
print_r($reviews);

$average_rating = get_average_rating($product_id);
echo 'Average rating: ' . $average_rating;


// config.php
<?php
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'root';
$password = '';

try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
    echo "Connected to the database successfully!";
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}


// Review.php
<?php
class Review {
    private $conn;

    public function __construct($db) {
        $this->conn = $db;
    }

    // Function to add new reviews
    public function add_review($product_id, $user_id, $rating, $comment) {
        try {
            $query = "INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)";
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':user_id', $user_id);
            $stmt->bindParam(':rating', $rating);
            $stmt->bindParam(':comment', $comment);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to view all reviews
    public function view_reviews() {
        try {
            $query = "SELECT * FROM reviews";
            $stmt = $this->conn->prepare($query);
            $stmt->execute();
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to update an existing review
    public function update_review($review_id, $new_comment) {
        try {
            $query = "UPDATE reviews SET comment = :comment WHERE id = :id";
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':id', $review_id);
            $stmt->bindParam(':comment', $new_comment);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to delete a review
    public function delete_review($review_id) {
        try {
            $query = "DELETE FROM reviews WHERE id = :id";
            $stmt = $this->conn->prepare($query);
            $stmt->bindParam(':id', $review_id);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }
}


// user_reviews.php
<?php
require_once 'config.php';
require_once 'Review.php';

class UserReviews {
    private $review;

    public function __construct() {
        $this->review = new Review($conn);
    }

    // Function to add a review for a product
    public function add_review_for_product($product_id, $user_id, $rating, $comment) {
        return $this->review->add_review($product_id, $user_id, $rating, $comment);
    }

    // Function to view all reviews for a user
    public function view_reviews_by_user($user_id) {
        try {
            $query = "SELECT * FROM reviews WHERE user_id = :id";
            $stmt = $conn->prepare($query);
            $stmt->bindParam(':id', $user_id);
            $stmt->execute();
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to view all reviews for a product
    public function view_reviews_by_product($product_id) {
        try {
            $query = "SELECT * FROM reviews WHERE product_id = :id";
            $stmt = $conn->prepare($query);
            $stmt->bindParam(':id', $product_id);
            $stmt->execute();
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo "Error: " . $e->getMessage();
            return false;
        }
    }

    // Function to update an existing review
    public function update_review($review_id, $new_comment) {
        return $this->review->update_review($review_id, $new_comment);
    }

    // Function to delete a review
    public function delete_review($review_id) {
        return $this->review->delete_review($review_id);
    }
}

// Example usage:
$reviews = new UserReviews();

// Add a review for a product
$product_id = 1;
$user_id = 1;
$rating = 5;
$comment = "Excellent product!";
echo var_export($reviews->add_review_for_product($product_id, $user_id, $rating, $comment), true);

// View all reviews by user
$user_id = 1;
echo "<pre>";
print_r($reviews->view_reviews_by_user($user_id));
echo "</pre>";

// Update an existing review
$review_id = 1;
$new_comment = "Best product ever!";
echo var_export($reviews->update_review($review_id, $new_comment), true);

// Delete a review
$review_id = 1;
echo var_export($reviews->delete_review($review_id), true);


<?php

// Database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Create a new database connection
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

// Check the connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function submitReview() {
    global $conn;

    // Get the review text and rating from the form
    $review_text = $_POST['review_text'];
    $rating = $_POST['rating'];

    // Insert a new review into the database
    $sql = "INSERT INTO reviews (user_id, review_text, rating)
            VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param('iss', 1, $review_text, $rating);
    if (!$stmt->execute()) {
        echo "Error submitting review: " . $stmt->error;
    }
}

function getReviews() {
    global $conn;

    // Retrieve all reviews from the database
    $sql = "SELECT r.id, r.review_text, r.rating, u.username
            FROM reviews r JOIN users u ON r.user_id = u.id";
    $result = $conn->query($sql);

    // Display each review in a table row
    echo "<table border='1'>";
    while ($row = $result->fetch_assoc()) {
        echo "<tr>";
        echo "<td>" . $row['review_text'] . "</td>";
        echo "<td>" . $row['rating'] . "/5</td>";
        echo "<td>Submitted by " . $row['username'] . "</td>";
        echo "</tr>";
    }
    echo "</table>";
}

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    submitReview();
}
?>

<form action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" method="post">
    <label for="review_text">Enter your review:</label>
    <br>
    <textarea id="review_text" name="review_text"></textarea>
    <br>
    <label for="rating">Rating (1-5):</label>
    <select id="rating" name="rating">
        <?php
            for ($i = 1; $i <= 5; $i++) {
                echo "<option value='$i'>$i/5</option>";
            }
        ?>
    </select>
    <br>
    <input type="submit" value="Submit Review">
</form>

<h2>Reviews:</h2>
<?php getReviews(); ?>

<?php
// Close the database connection when finished
$conn->close();
?>


<?php
// database connection settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// create a function to connect to the database
function dbConnect() {
    $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// create functions for CRUD operations
function createUserReview($user_id, $product_id, $rating, $review_text) {
    $conn = dbConnect();
    $sql = "INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiss", $user_id, $product_id, $rating, $review_text);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function getReviewsByProduct($product_id) {
    $conn = dbConnect();
    $sql = "SELECT * FROM reviews WHERE product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    return $stmt->get_result();
}

function getUserReview($user_id, $product_id) {
    $conn = dbConnect();
    $sql = "SELECT * FROM reviews WHERE user_id = ? AND product_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ii", $user_id, $product_id);
    $stmt->execute();
    return $stmt->get_result()->fetch_assoc();
}

function updateReview($id, $rating, $review_text) {
    $conn = dbConnect();
    $sql = "UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iis", $rating, $review_text, $id);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function deleteReview($id) {
    $conn = dbConnect();
    $sql = "DELETE FROM reviews WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $id);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}


<?php
$reviews = getReviewsByProduct(123); // replace with your product ID
?>
<ul>
  <?php foreach ($reviews as $review) { ?>
    <li>Rating: <?= $review['rating']; ?> - <?= $review['review_text']; ?></li>
  <?php } ?>
</ul>


<?php
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $user_id = $_POST['user_id'];
    $product_id = $_POST['product_id'];
    $rating = $_POST['rating'];
    $review_text = $_POST['review_text'];

    if (createUserReview($user_id, $product_id, $rating, $review_text)) {
        // review submitted successfully
    } else {
        // error submitting review
    }
}
?>


<?php

// Include database connection settings
require_once 'database.php';

// Function to submit a review
function submit_review($data) {
  global $db;

  try {
    // Insert review into database
    $stmt = $db->prepare("INSERT INTO reviews (user_id, product_id, review, rating) VALUES (:user_id, :product_id, :review, :rating)");
    $stmt->execute([
      'user_id' => $_SESSION['id'],
      'product_id' => $data['product_id'] ?? null,
      'review' => $data['review'],
      'rating' => $data['rating']
    ]);

    return true;

  } catch (PDOException $e) {
    echo "Error submitting review: " . $e->getMessage();
    return false;
  }
}

// Function to view all reviews
function view_reviews() {
  global $db;

  try {
    // Retrieve all reviews from database
    $stmt = $db->prepare("SELECT * FROM reviews JOIN users ON reviews.user_id = users.id");
    $stmt->execute();

    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

    return $reviews;

  } catch (PDOException $e) {
    echo "Error viewing reviews: " . $e->getMessage();
    return false;
  }
}

// Function to view a specific review
function view_review($id) {
  global $db;

  try {
    // Retrieve review from database by ID
    $stmt = $db->prepare("SELECT * FROM reviews JOIN users ON reviews.user_id = users.id WHERE id = :id");
    $stmt->execute(['id' => $id]);

    return $stmt->fetch(PDO::FETCH_ASSOC);

  } catch (PDOException $e) {
    echo "Error viewing review: " . $e->getMessage();
    return false;
  }
}

?>


<?php

// Configuration
$databaseHost = 'localhost';
$databaseName = 'your_database_name';
$databaseUsername = 'your_database_username';
$databasePassword = 'your_database_password';

// Connect to database
$mysqli = new mysqli($databaseHost, $databaseUsername, $databasePassword, $databaseName);

if ($mysqli->connect_errno) {
    echo "Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error;
}

function addReview($userId, $productId, $rating, $comment) {
    global $mysqli;

    // Check if review already exists
    $query = "SELECT * FROM reviews WHERE user_id = '$userId' AND product_id = '$productId'";
    $result = $mysqli->query($query);
    if ($result->num_rows > 0) {
        return array('error' => 'Review already exists');
    }

    // Insert new review
    $sql = "INSERT INTO reviews (user_id, product_id, rating, comment)
            VALUES ('$userId', '$productId', '$rating', '$comment')";
    if (!$mysqli->query($sql)) {
        return array('error' => 'Failed to add review');
    }

    return array('success' => true);
}

function getReview($reviewId) {
    global $mysqli;

    // Retrieve review by ID
    $query = "SELECT * FROM reviews WHERE id = '$reviewId'";
    $result = $mysqli->query($query);
    if ($result->num_rows > 0) {
        return $result->fetch_assoc();
    }

    return array('error' => 'Review not found');
}

function getUserReviews($userId) {
    global $mysqli;

    // Retrieve reviews by user ID
    $query = "SELECT * FROM reviews WHERE user_id = '$userId'";
    $result = $mysqli->query($query);
    if ($result->num_rows > 0) {
        return array_map(function($row) { return (object)array(
            'id' => $row['id'],
            'rating' => $row['rating'],
            'comment' => $row['comment']
        ); }, $result->fetch_all());
    }

    return array();
}

function getAllReviews() {
    global $mysqli;

    // Retrieve all reviews
    $query = "SELECT * FROM reviews";
    $result = $mysqli->query($query);
    if ($result->num_rows > 0) {
        return array_map(function($row) { return (object)array(
            'id' => $row['id'],
            'rating' => $row['rating'],
            'comment' => $row['comment']
        ); }, $result->fetch_all());
    }

    return array();
}

// Close database connection
$mysqli->close();

?>


<?php

require_once 'review.php';

// Add new review
$userId = 1;
$productId = 1;
$rating = 5;
$comment = "Great product!";
$result = addReview($userId, $productId, $rating, $comment);
if ($result['success']) {
    echo "Review added successfully";
} else {
    echo "Error: " . $result['error'];
}

// Get review by ID
$reviewId = 1;
$reviewData = getReview($reviewId);
if (isset($reviewData['id'])) {
    echo "Review found with rating: " . $reviewData['rating'] . " and comment: " . $reviewData['comment'];
} else {
    echo "Error: Review not found";
}

// Get user reviews
$userId = 1;
$userReviews = getUserReviews($userId);
echo "User's reviews:
";
foreach ($userReviews as $review) {
    echo "Rating: " . $review->rating . ", Comment: " . $review->comment . "
";
}

// Get all reviews
$allReviews = getAllReviews();
echo "All reviews:
";
foreach ($allReviews as $review) {
    echo "Rating: " . $review->rating . ", Comment: " . $review->comment . "
";
}

?>


class Review {
    private $db;

    public function __construct($db)
    {
        $this->db = $db;
    }

    /**
     * Create a new review
     *
     * @param int $productId
     * @param int $userId
     * @param float $rating
     * @param string $review
     */
    public function createReview($productId, $userId, $rating, $review)
    {
        $query = "INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:productId, :userId, :rating, :review)";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':userId', $userId);
        $stmt->bindParam(':rating', $rating);
        $stmt->bindParam(':review', $review);
        return $stmt->execute();
    }

    /**
     * Get all reviews for a product
     *
     * @param int $productId
     */
    public function getReviewsForProduct($productId)
    {
        $query = "SELECT * FROM reviews WHERE product_id = :productId";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':productId', $productId);
        return $stmt->execute()->fetchAll();
    }

    /**
     * Get all reviews for a user
     *
     * @param int $userId
     */
    public function getReviewsForUser($userId)
    {
        $query = "SELECT * FROM reviews WHERE user_id = :userId";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':userId', $userId);
        return $stmt->execute()->fetchAll();
    }

    /**
     * Update a review
     *
     * @param int $reviewId
     * @param string $newRating
     * @param string $newReview
     */
    public function updateReview($reviewId, $newRating, $newReview)
    {
        $query = "UPDATE reviews SET rating = :rating, review = :review WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':id', $reviewId);
        $stmt->bindParam(':rating', $newRating);
        $stmt->bindParam(':review', $newReview);
        return $stmt->execute();
    }

    /**
     * Delete a review
     *
     * @param int $reviewId
     */
    public function deleteReview($reviewId)
    {
        $query = "DELETE FROM reviews WHERE id = :id";
        $stmt = $this->db->prepare($query);
        $stmt->bindParam(':id', $reviewId);
        return $stmt->execute();
    }
}


$db = new PDO('mysql:host=localhost;dbname=your_database_name', 'username', 'password');
$review = new Review($db);

// Create a new review
$productId = 1;
$userId = 2;
$rating = 5.0;
$reviewText = "This product is amazing!";
$review->createReview($productId, $userId, $rating, $reviewText);

// Get all reviews for a product
$productReviews = $review->getReviewsForProduct(1);
print_r($productReviews);

// Update a review
$newRating = 4.5;
$newReviewText = "I've updated my review!";
$review->updateReview(1, $newRating, $newReviewText);

// Delete a review
$review->deleteReview(2);


<?php

// Review class to store and retrieve reviews
class Review {
  private $id;
  private $title;
  private $content;
  private $rating;
  private $date;

  public function __construct($id, $title, $content, $rating, $date) {
    $this->id = $id;
    $this->title = $title;
    $this->content = $content;
    $this->rating = $rating;
    $this->date = $date;
  }

  public function getId() { return $this->id; }
  public function getTitle() { return $this->title; }
  public function getContent() { return $this->content; }
  public function getRating() { return $this->rating; }
  public function getDate() { return $this->date; }
}

// ReviewRepository class to manage reviews
class ReviewRepository {
  private $reviews;

  public function __construct() {
    $this->reviews = array();
  }

  public function addReview(Review $review) {
    $this->reviews[] = $review;
  }

  public function getReviews() { return $this->reviews; }
}

// User review function
function createUserReview($title, $content, $rating, $date = null) {
  if (empty($title) || empty($content)) {
    throw new Exception("Both title and content are required");
  }

  if (!is_numeric($rating)) {
    throw new Exception("Rating must be a number");
  }

  if ($rating < 1 || $rating > 5) {
    throw new Exception("Rating must be between 1 and 5");
  }

  if (empty($date)) {
    $date = date('Y-m-d H:i:s');
  }

  $review = new Review(null, $title, $content, $rating, $date);
  $repository = new ReviewRepository();
  $repository->addReview($review);

  return $review;
}

// Example usage
$review = createUserReview("Great product!", "I love this product!", 5);
echo "Title: {$review->getTitle()}
";
echo "Content: {$review->getContent()}
";
echo "Rating: {$review->getRating()}
";
echo "Date: {$review->getDate()}
";

?>


class Review {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function displayReviews() {
    $query = "SELECT r.id, u.name, p.title, r.rating, r.review_text FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id";
    return $this->db->fetchAll($query);
  }

  public function addReview($data) {
    $query = "INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (:user_id, :product_id, :rating, :review_text)";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute(array(
        ":user_id" => $data['user_id'],
        ":product_id" => $data['product_id'],
        ":rating" => $data['rating'],
        ":review_text" => $data['review_text']
      ));
      return true;
    } catch (PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
      return false;
    }
  }

  public function deleteReview($id) {
    $query = "DELETE FROM reviews WHERE id = :id";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute(array(":id" => $id));
      return true;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }

  public function editReview($data) {
    $query = "UPDATE reviews SET rating = :rating, review_text = :review_text WHERE id = :id";
    try {
      $stmt = $this->db->prepare($query);
      $stmt->execute(array(
        ":rating" => $data['rating'],
        ":review_text" => $data['review_text'],
        ":id" => $data['id']
      ));
      return true;
    } catch (PDOException $e) {
      echo "Error editing review: " . $e->getMessage();
      return false;
    }
  }
}


class ReviewController {
  private $review;

  public function __construct($db) {
    $this->review = new Review($db);
  }

  public function displayReviews() {
    return $this->review->displayReviews();
  }

  public function addReview() {
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
      $data = $_POST;
      if ($this->review->addReview($data)) {
        echo "Review added successfully!";
      } else {
        echo "Error adding review.";
      }
    }
  }

  public function deleteReview() {
    if ($_SERVER['REQUEST_METHOD'] == 'GET' && isset($_GET['id'])) {
      $id = $_GET['id'];
      if ($this->review->deleteReview($id)) {
        echo "Review deleted successfully!";
      } else {
        echo "Error deleting review.";
      }
    }
  }

  public function editReview() {
    if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['id'])) {
      $data = $_POST;
      if ($this->review->editReview($data)) {
        echo "Review edited successfully!";
      } else {
        echo "Error editing review.";
      }
    }
  }
}


class ReviewModel {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');
  }

  public function displayReviews() {
    $query = "SELECT r.id, u.name, p.title, r.rating, r.review_text FROM reviews r JOIN users u ON r.user_id = u.id JOIN products p ON r.product_id = p.id";
    return $this->db->fetchAll($query);
  }

  public function addReview($data) {
    // Same code as above
  }

  public function deleteReview($id) {
    // Same code as above
  }

  public function editReview($data) {
    // Same code as above
  }
}


<?php
require_once 'ReviewController.php';
$review = new ReviewController(new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password'));

if (isset($_GET['action']) && $_GET['action'] == 'displayReviews') {
  $reviews = $review->displayReviews();
  echo "<h1>Reviews</h1>";
  echo "<table>";
  foreach ($reviews as $review) {
    echo "<tr>";
    echo "<td>$review[0]</td>";
    echo "<td>$review[1] - $review[2]</td>";
    echo "<td>$review[3]/5 stars</td>";
    echo "<td>$review[4]</td>";
    echo "</tr>";
  }
  echo "</table>";
} elseif (isset($_POST['action']) && $_POST['action'] == 'addReview') {
  $review->addReview();
} elseif (isset($_GET['action']) && $_GET['action'] == 'deleteReview') {
  $review->deleteReview();
} elseif (isset($_POST['action']) && $_POST['action'] == 'editReview') {
  $review->editReview();
}
?>


class Review {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=yourdatabase', 'username', 'password');
    }

    /**
     * Get all reviews for a product
     *
     * @param int $productId ID of the product to get reviews for
     * @return array Reviews for the given product
     */
    public function getAllReviewsForProduct($productId) {
        $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * Get a review by its ID
     *
     * @param int $reviewId ID of the review to get
     * @return array Review with the given ID, or false if not found
     */
    public function getReviewById($reviewId) {
        $stmt = $this->db->prepare('SELECT * FROM reviews WHERE id = :id');
        $stmt->bindParam(':id', $reviewId);
        $stmt->execute();
        return $stmt->fetch(PDO::FETCH_ASSOC) ?: false;
    }

    /**
     * Create a new review
     *
     * @param array $data Review data (product_id, rating, review)
     * @return int ID of the newly created review, or 0 on failure
     */
    public function createReview($data) {
        try {
            $stmt = $this->db->prepare('INSERT INTO reviews SET product_id = :product_id, rating = :rating, review = :review');
            $stmt->bindParam(':product_id', $data['product_id']);
            $stmt->bindParam(':rating', $data['rating']);
            $stmt->bindParam(':review', $data['review']);
            return $this->db->lastInsertId();
        } catch (PDOException $e) {
            echo "Error creating review: " . $e->getMessage();
            return 0;
        }
    }

    /**
     * Update an existing review
     *
     * @param array $data Review data (id, product_id, rating, review)
     * @return int ID of the updated review, or 0 on failure
     */
    public function updateReview($data) {
        try {
            $stmt = $this->db->prepare('UPDATE reviews SET product_id = :product_id, rating = :rating, review = :review WHERE id = :id');
            $stmt->bindParam(':id', $data['id']);
            $stmt->bindParam(':product_id', $data['product_id']);
            $stmt->bindParam(':rating', $data['rating']);
            $stmt->bindParam(':review', $data['review']);
            return $this->db->lastInsertId();
        } catch (PDOException $e) {
            echo "Error updating review: " . $e->getMessage();
            return 0;
        }
    }

    /**
     * Delete a review
     *
     * @param int $reviewId ID of the review to delete
     * @return bool Whether the deletion was successful
     */
    public function deleteReview($reviewId) {
        try {
            $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :id');
            $stmt->bindParam(':id', $reviewId);
            return $stmt->execute();
        } catch (PDOException $e) {
            echo "Error deleting review: " . $e->getMessage();
            return false;
        }
    }
}


class ReviewController extends Controller {
    public function index() {
        // Get all reviews for a product
        $reviews = Review::getAllReviewsForProduct(1);
        return view('review.index', ['reviews' => $reviews]);
    }

    public function create($productId) {
        // Create a new review
        if ($_SERVER['REQUEST_METHOD'] == 'POST') {
            $data = $_POST;
            $reviewId = Review::createReview([
                'product_id' => $productId,
                'rating' => (int)$data['rating'],
                'review' => $data['review']
            ]);
            return redirect('reviews')->with('success', 'Review created successfully!');
        }
    }

    public function update($id) {
        // Update an existing review
        if ($_SERVER['REQUEST_METHOD'] == 'POST') {
            $data = $_POST;
            Review::updateReview([
                'id' => (int)$id,
                'product_id' => 1, // Set product ID to whatever value is desired
                'rating' => (int)$data['rating'],
                'review' => $data['review']
            ]);
            return redirect('reviews')->with('success', 'Review updated successfully!');
        }
    }

    public function delete($id) {
        // Delete a review
        Review::deleteReview((int)$id);
        return redirect('reviews')->with('success', 'Review deleted successfully!');
    }
}


Route::get('/reviews', 'ReviewController@index');
Route::post('/reviews/create/{productId}', 'ReviewController@create');
Route::get('/reviews/update/{id}', 'ReviewController@update');
Route::post('/reviews/update/{id}', 'ReviewController@update');
Route::get('/reviews/delete/{id}', 'ReviewController@delete');


// db.php: database connection settings
$dbHost = 'localhost';
$dbUsername = 'username';
$dbPassword = 'password';
$dbName = 'database_name';

// Connect to the database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function addReview($product_id, $user_id, $rating, $comment) {
    global $conn;

    $sql = "INSERT INTO reviews (product_id, user_id, rating, comment)
            VALUES ('$product_id', '$user_id', '$rating', '$comment')";

    if ($conn->query($sql) === TRUE) {
        echo "New review created successfully";
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
    }
}

function getReviews($product_id) {
    global $conn;

    $sql = "SELECT * FROM reviews WHERE product_id = '$product_id'";

    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        // output data of each row
        while($row = $result->fetch_assoc()) {
            echo "Rating: " . $row["rating"]. "<br>Comment: " . $row["comment"]. "<br><br>";
        }
    } else {
        echo "No reviews found";
    }

}

// Example usage:
addReview(1, 1, 5, 'This product is amazing!');
getReviews(1);


<?php

function getRatingStars($rating) {
    $stars = '';
    for ($i = 0; $i < $rating; $i++) {
        $stars .= '<span class="fa fa-star checked"></span>';
    }
    return $stars;
}

// Example usage:
$rating = 4;
echo getRatingStars($rating);
?>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Review System</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
</head>
<body>

<?php include 'review.php'; ?>

<div class="container">
    <h2>Reviews for Product 1</h2>

    <?php getReviews(1); ?>
</div>

<form action="" method="post">
    <input type="hidden" name="product_id" value="1">
    <label for="rating">Rating:</label>
    <select id="rating" name="rating">
        <option value="1">1 star</option>
        <option value="2">2 stars</option>
        <option value="3">3 stars</option>
        <option value="4">4 stars</option>
        <option value="5">5 stars</option>
    </select><br>

    <label for="comment">Comment:</label>
    <textarea id="comment" name="comment"></textarea><br>

    <input type="submit" value="Submit Review">
</form>

</body>
</html>


// User class
class User {
  private $id;
  private $username;

  public function __construct($id, $username) {
    $this->id = $id;
    $this->username = $username;
  }

  // Getters and setters
  public function getId() {
    return $this->id;
  }

  public function getUsername() {
    return $this->username;
  }
}

// Product class
class Product {
  private $id;
  private $name;

  public function __construct($id, $name) {
    $this->id = $id;
    $this->name = $name;
  }

  // Getters and setters
  public function getId() {
    return $this->id;
  }

  public function getName() {
    return $this->name;
  }
}

// Review class
class Review {
  private $id;
  private $user_id;
  private $product_id;
  private $rating;
  private $review_text;

  public function __construct($id, $user_id, $product_id, $rating, $review_text) {
    $this->id = $id;
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->rating = $rating;
    $this->review_text = $review_text;
  }

  // Getters and setters
  public function getId() {
    return $this->id;
  }

  public function getUserId() {
    return $this->user_id;
  }

  public function getProductId() {
    return $this->product_id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getReviewText() {
    return $this->review_text;
  }
}


// Reviews class
class Reviews {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  // Add review
  public function addReview(User $user, Product $product, $rating, $review_text) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (?, ?, ?, ?)");
      $stmt->bindParam(1, $user->getId());
      $stmt->bindParam(2, $product->getId());
      $stmt->bindParam(3, $rating);
      $stmt->bindParam(4, $review_text);
      return $stmt->execute();
    } catch (PDOException $e) {
      echo "Error adding review: " . $e->getMessage();
      return false;
    }
  }

  // Get all reviews
  public function getAllReviews() {
    try {
      $stmt = $this->db->query("SELECT * FROM reviews");
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo "Error fetching reviews: " . $e->getMessage();
      return array();
    }
  }

  // Get review by id
  public function getReview($id) {
    try {
      $stmt = $this->db->prepare("SELECT * FROM reviews WHERE id = ?");
      $stmt->bindParam(1, $id);
      return $stmt->execute() ? $stmt->fetch(PDO::FETCH_ASSOC) : null;
    } catch (PDOException $e) {
      echo "Error fetching review: " . $e->getMessage();
      return null;
    }
  }

  // Edit review
  public function editReview(Review $review, $new_rating, $new_review_text) {
    try {
      $stmt = $this->db->prepare("UPDATE reviews SET rating = ?, review_text = ? WHERE id = ?");
      $stmt->bindParam(1, $new_rating);
      $stmt->bindParam(2, $new_review_text);
      $stmt->bindParam(3, $review->getId());
      return $stmt->execute();
    } catch (PDOException $e) {
      echo "Error editing review: " . $e->getMessage();
      return false;
    }
  }

  // Delete review
  public function deleteReview($id) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = ?");
      $stmt->bindParam(1, $id);
      return $stmt->execute();
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


// Initialize database connection
$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');

// Create reviews instance
$reviews = new Reviews($db);

// Get user and product instances
$user = new User(1, 'johnDoe');
$product = new Product(1, 'Product A');

// Add review
if ($reviews->addReview($user, $product, 4, 'Great product!')) {
  echo "Review added successfully!";
} else {
  echo "Error adding review.";
}

// Get all reviews
$allReviews = $reviews->getAllReviews();
print_r($allReviews);

// Get review by id
$review = $reviews->getReview(1);
echo $review['rating'] . ' - ' . $review['review_text'];

// Edit review
if ($reviews->editReview($review, 5, 'Excellent product!')) {
  echo "Review edited successfully!";
} else {
  echo "Error editing review.";
}

// Delete review
if ($reviews->deleteReview(1)) {
  echo "Review deleted successfully!";
} else {
  echo "Error deleting review.";
}


function createUserReview($data) {
  try {
    // Check if user is logged in
    if (!isset($_SESSION['user_id'])) {
      throw new Exception('User not logged in');
    }

    // Insert review into database
    $review = array(
      'product_id' => $data['product_id'],
      'rating' => $data['rating'],
      'comment' => $data['comment']
    );
    db_insert('reviews', $review);

    // Return success message
    return array('message' => 'Review created successfully');
  } catch (Exception $e) {
    // Handle errors and return error message
    return array('error' => $e->getMessage());
  }
}

function getReviews($product_id = null, $page = 1, $limit = 10) {
  try {
    // Get reviews from database
    if ($product_id) {
      $reviews = db_select('reviews', 'id', '*', "product_id = '$product_id'", $limit, $page);
    } else {
      $reviews = db_select('reviews', '*', '*', '', $limit, $page);
    }

    // Return reviews as JSON
    return json_encode($reviews);
  } catch (Exception $e) {
    // Handle errors and return error message
    return array('error' => $e->getMessage());
  }
}

function updateReview($review_id, $data) {
  try {
    // Check if user is logged in
    if (!isset($_SESSION['user_id'])) {
      throw new Exception('User not logged in');
    }

    // Update review in database
    db_update('reviews', 'rating = ?', array($data['rating']), "id = '$review_id'");

    // Return success message
    return array('message' => 'Review updated successfully');
  } catch (Exception $e) {
    // Handle errors and return error message
    return array('error' => $e->getMessage());
  }
}

function deleteReview($review_id) {
  try {
    // Check if user is logged in
    if (!isset($_SESSION['user_id'])) {
      throw new Exception('User not logged in');
    }

    // Delete review from database
    db_delete('reviews', "id = '$review_id'");

    // Return success message
    return array('message' => 'Review deleted successfully');
  } catch (Exception $e) {
    // Handle errors and return error message
    return array('error' => $e->getMessage());
  }
}


// Create a new review
$data = array(
  'product_id' => 123,
  'rating' => 5,
  'comment' => 'Great product!'
);
$response = createUserReview($data);
echo json_encode($response);

// Get all reviews for a specific product
$product_id = 123;
$page = 1;
$limit = 10;
$response = getReviews($product_id, $page, $limit);
echo json_encode($response);

// Update an existing review
$review_id = 456;
$data = array(
  'rating' => 4,
  'comment' => 'Good product!'
);
$response = updateReview($review_id, $data);
echo json_encode($response);

// Delete a review
$review_id = 789;
$response = deleteReview($review_id);
echo json_encode($response);


// Review.php

class Review {
    private $id;
    private $reviewer_name;
    private $rating;
    private $comment;

    public function __construct($id, $reviewer_name, $rating, $comment) {
        $this->id = $id;
        $this->reviewer_name = $reviewer_name;
        $this->rating = $rating;
        $this->comment = $comment;
    }

    public function getId() {
        return $this->id;
    }

    public function getReviewerName() {
        return $this->reviewer_name;
    }

    public function getRating() {
        return $this->rating;
    }

    public function getComment() {
        return $this->comment;
    }
}


// ReviewController.php

class ReviewController {
    private $reviews = [];

    public function addReview($reviewer_name, $rating, $comment) {
        $review_id = count($this->reviews) + 1;
        $review = new Review($review_id, $reviewer_name, $rating, $comment);
        array_push($this->reviews, $review);
        return $review;
    }

    public function getReviews() {
        return $this->reviews;
    }
}


// ReviewService.php

class ReviewService {
    private $reviewController;

    public function __construct(ReviewController $reviewController) {
        $this->reviewController = $reviewController;
    }

    public function addReview($reviewer_name, $rating, $comment) {
        return $this->reviewController->addReview($reviewer_name, $rating, $comment);
    }

    public function getReviews() {
        return $this->reviewController->getReviews();
    }
}


// review.php

function display_reviews() {
    $reviewService = new ReviewService(new ReviewController());
    $reviews = $reviewService->getReviews();

    foreach ($reviews as $review) {
        echo "Reviewer: {$review->getReviewerName()}<br>";
        echo "Rating: {$review->getRating()} / 5<br>";
        echo "Comment: {$review->getComment()}<br><br>";
    }
}

function add_review() {
    if (isset($_POST['submit'])) {
        $reviewer_name = $_POST['reviewer_name'];
        $rating = $_POST['rating'];
        $comment = $_POST['comment'];

        $reviewService = new ReviewService(new ReviewController());
        $newReview = $reviewService->addReview($reviewer_name, $rating, $comment);

        echo "Review added successfully!";
    } else {
        // Display review form
        ?>
        <form action="" method="post">
            <label for="reviewer_name">Reviewer Name:</label>
            <input type="text" id="reviewer_name" name="reviewer_name"><br><br>

            <label for="rating">Rating (1-5):</label>
            <input type="number" id="rating" name="rating" min="1" max="5"><br><br>

            <label for="comment">Comment:</label>
            <textarea id="comment" name="comment"></textarea><br><br>

            <input type="submit" name="submit" value="Add Review">
        </form>
    <?php
    }
}


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'reviews_db';
$username = 'root';
$password = '';

try {
  // Create database connection
  $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

} catch (PDOException $e) {
  echo "Connection failed: " . $e->getMessage();
}

// Function to create a review
function create_review($user_id, $product_id, $rating, $comment) {
  global $conn;
  
  // Insert review into database
  $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (:user_id, :product_id, :rating, :comment)");
  $stmt->bindParam(":user_id", $user_id);
  $stmt->bindParam(":product_id", $product_id);
  $stmt->bindParam(":rating", $rating);
  $stmt->bindParam(":comment", $comment);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to read reviews
function get_reviews() {
  global $conn;

  // Retrieve all reviews from database
  $stmt = $conn->query("SELECT * FROM reviews");
  $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);
  
  return $reviews;
}

// Function to update a review
function update_review($id, $new_rating, $new_comment) {
  global $conn;

  // Update review in database
  $stmt = $conn->prepare("UPDATE reviews SET rating=:rating, comment=:comment WHERE id=:id");
  $stmt->bindParam(":rating", $new_rating);
  $stmt->bindParam(":comment", $new_comment);
  $stmt->bindParam(":id", $id);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to delete a review
function delete_review($id) {
  global $conn;

  // Delete review from database
  $stmt = $conn->prepare("DELETE FROM reviews WHERE id=:id");
  $stmt->bindParam(":id", $id);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

?>


// Create a new review
$user_id = 1;
$product_id = 1;
$rating = 5;
$comment = "Great product!";

create_review($user_id, $product_id, $rating, $comment);

// Read all reviews
$reviews = get_reviews();

print_r($reviews);

// Update a review
$id = 1;
$new_rating = 4;
$new_comment = "Good product!";

update_review($id, $new_rating, $new_comment);

// Delete a review
delete_review(2);


// db.php (database connection file)

<?php
$dsn = 'mysql:host=localhost;dbname=reviews';
$username = 'your_username';
$password = 'your_password';

try {
    $conn = new PDO($dsn, $username, $password);
} catch(PDOException $e) {
    echo "Error connecting to database: " . $e->getMessage();
}

function addUserReview($userId, $productId, $rating, $review) {
    global $conn;
    
    try {
        $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review) VALUES (?, ?, ?, ?)");
        $stmt->execute([$userId, $productId, $rating, $review]);
        
        return true;
    } catch(PDOException $e) {
        echo "Error adding review: " . $e->getMessage();
        return false;
    }
}

function getUserReviews($userId) {
    global $conn;
    
    try {
        $stmt = $conn->prepare("SELECT * FROM reviews WHERE user_id = ?");
        $stmt->execute([$userId]);
        
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch(PDOException $e) {
        echo "Error retrieving reviews: " . $e->getMessage();
        return array();
    }
}

function addProductReview($productId, $rating, $review) {
    global $conn;
    
    try {
        $stmt = $conn->prepare("INSERT INTO reviews (product_id, rating, review) VALUES (?, ?, ?)");
        $stmt->execute([$productId, $rating, $review]);
        
        return true;
    } catch(PDOException $e) {
        echo "Error adding product review: " . $e->getMessage();
        return false;
    }
}
?>


// index.php

<?php
require_once 'db.php';

if (isset($_POST['add_review'])) {
    $userId = $_POST['user_id'];
    $productId = $_POST['product_id'];
    $rating = $_POST['rating'];
    $review = $_POST['review'];

    if (addUserReview($userId, $productId, $rating, $review)) {
        echo "Review added successfully!";
    } else {
        echo "Error adding review.";
    }
} elseif (isset($_POST['get_reviews'])) {
    $userId = $_POST['user_id'];
    
    $reviews = getUserReviews($userId);
    foreach ($reviews as $review) {
        echo "Rating: {$review['rating']}, Review: {$review['review']}<br>";
    }
}

?>

<form action="" method="post">
    <label for="user_id">User ID:</label>
    <input type="text" id="user_id" name="user_id"><br><br>
    
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id"><br><br>
    
    <label for="rating">Rating:</label>
    <input type="number" id="rating" name="rating"><br><br>
    
    <label for="review">Review:</label>
    <textarea id="review" name="review"></textarea><br><br>
    
    <input type="submit" name="add_review" value="Add Review">
</form>

<form action="" method="post">
    <label for="user_id">User ID:</label>
    <input type="text" id="user_id" name="user_id"><br><br>
    
    <input type="submit" name="get_reviews" value="Get Reviews">
</form>


// config.php (database connection settings)
<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

$conn = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USER, DB_PASSWORD);
?>

// Review.php (Review class)
<?php
class Review {
  private $id;
  private $user_id;
  private $product_id;
  private $rating;
  private $review_text;

  public function __construct($id = null) {
    if ($id) {
      $stmt = $conn->prepare("SELECT * FROM reviews WHERE id = :id");
      $stmt->bindParam(":id", $id);
      $stmt->execute();
      $row = $stmt->fetch(PDO::FETCH_ASSOC);
      $this->id = $row['id'];
      $this->user_id = $row['user_id'];
      $this->product_id = $row['product_id'];
      $this->rating = $row['rating'];
      $this->review_text = $row['review_text'];
    }
  }

  public function addReview($product_id, $rating, $review_text) {
    $stmt = $conn->prepare("INSERT INTO reviews (user_id, product_id, rating, review_text) VALUES (:user_id, :product_id, :rating, :review_text)");
    $stmt->bindParam(":user_id", $_SESSION['user']['id']);
    $stmt->bindParam(":product_id", $product_id);
    $stmt->bindParam(":rating", $rating);
    $stmt->bindParam(":review_text", $review_text);
    return $stmt->execute();
  }

  public function updateReview($id, $rating, $review_text) {
    $stmt = $conn->prepare("UPDATE reviews SET rating = :rating, review_text = :review_text WHERE id = :id");
    $stmt->bindParam(":id", $id);
    $stmt->bindParam(":rating", $rating);
    $stmt->bindParam(":review_text", $review_text);
    return $stmt->execute();
  }

  public function deleteReview($id) {
    $stmt = $conn->prepare("DELETE FROM reviews WHERE id = :id");
    $stmt->bindParam(":id", $id);
    return $stmt->execute();
  }
}

// ReviewController.php (Review controller class)
<?php
class ReviewController {
  private $review;

  public function __construct() {
    $this->review = new Review();
  }

  public function addReview($product_id, $rating, $review_text) {
    return $this->review->addReview($product_id, $rating, $review_text);
  }

  public function updateReview($id, $rating, $review_text) {
    return $this->review->updateReview($id, $rating, $review_text);
  }

  public function deleteReview($id) {
    return $this->review->deleteReview($id);
  }
}

// ReviewView.php (Review view class)
<?php
class ReviewView {
  private $reviewController;

  public function __construct() {
    $this->reviewController = new ReviewController();
  }

  public function displayReviews() {
    // Retrieve all reviews from database
    $stmt = $conn->prepare("SELECT * FROM reviews");
    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);

    // Display each review in a table
    echo "<table>";
    foreach ($reviews as $review) {
      echo "<tr>";
      echo "<td>" . $review['user_id'] . "</td>";
      echo "<td>" . $review['product_id'] . "</td>";
      echo "<td>" . $review['rating'] . "</td>";
      echo "<td>" . $review['review_text'] . "</td>";
      echo "<td><a href='#' onclick='updateReview($review[id])'>Update</a> | <a href='#' onclick='deleteReview($review[id])'>Delete</a></td>";
      echo "</tr>";
    }
    echo "</table>";
  }

  public function displayAddReviewForm() {
    // Display form to add new review
    echo "<form action '#' method='post'>";
    echo "<label for='product_id'>Product ID:</label>";
    echo "<input type='text' id='product_id' name='product_id'>";
    echo "<br>";
    echo "<label for='rating'>Rating:</label>";
    echo "<select id='rating' name='rating'>";
    echo "<option value='1'>1</option>";
    echo "<option value='2'>2</option>";
    echo "<option value='3'>3</option>";
    echo "<option value='4'>4</option>";
    echo "<option value='5'>5</option>";
    echo "</select>";
    echo "<br>";
    echo "<label for='review_text'>Review:</label>";
    echo "<textarea id='review_text' name='review_text'></textarea>";
    echo "<br>";
    echo "<input type='submit' value='Add Review'>";
    echo "</form>";
  }

  public function addReview($product_id, $rating, $review_text) {
    // Add new review using controller
    return $this->reviewController->addReview($product_id, $rating, $review_text);
  }
}
?>


require_once 'Review.php';
require_once 'ReviewController.php';
require_once 'ReviewView.php';

// Initialize Review view
$view = new ReviewView();

// Display add review form
$view->displayAddReviewForm();

// Add new review (example)
$product_id = 1;
$rating = 4;
$review_text = "Great product!";
if ($view->addReview($product_id, $rating, $review_text)) {
  echo "Review added successfully!";
} else {
  echo "Error adding review.";
}

// Display reviews
$view->displayReviews();


<?php

// Database configuration
$host = 'localhost';
$dbname = 'reviews_database';
$username = 'your_username';
$password = 'your_password';

try {
    // Connect to the database
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Error connecting to database: " . $e->getMessage();
}

?>


<?php

class Review {
    private $pdo;

    function __construct($pdo) {
        $this->pdo = $pdo;
    }

    // Add a new review
    function add_review($title, $content, $rating, $user_id) {
        try {
            $stmt = $this->pdo->prepare('INSERT INTO reviews (title, content, rating, user_id) VALUES (?, ?, ?, ?)');
            $stmt->execute([$title, $content, $rating, $user_id]);
            return true;
        } catch (PDOException $e) {
            echo "Error adding review: " . $e->getMessage();
            return false;
        }
    }

    // Get all reviews
    function get_reviews() {
        try {
            $stmt = $this->pdo->prepare('SELECT * FROM reviews');
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error retrieving reviews: " . $e->getMessage();
            return false;
        }
    }

    // Get a single review by ID
    function get_review($id) {
        try {
            $stmt = $this->pdo->prepare('SELECT * FROM reviews WHERE id = ?');
            $stmt->execute([$id]);
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error retrieving review: " . $e->getMessage();
            return false;
        }
    }

    // Update a review
    function update_review($id, $title, $content, $rating) {
        try {
            $stmt = $this->pdo->prepare('UPDATE reviews SET title = ?, content = ?, rating = ? WHERE id = ?');
            $stmt->execute([$title, $content, $rating, $id]);
            return true;
        } catch (PDOException $e) {
            echo "Error updating review: " . $e->getMessage();
            return false;
        }
    }

    // Delete a review
    function delete_review($id) {
        try {
            $stmt = $this->pdo->prepare('DELETE FROM reviews WHERE id = ?');
            $stmt->execute([$id]);
            return true;
        } catch (PDOException $e) {
            echo "Error deleting review: " . $e->getMessage();
            return false;
        }
    }

}

?>


<?php

require_once 'config.php';
require_once 'review.php';

$pdo = new PDO('mysql:host=localhost;dbname=reviews_database', 'your_username', 'your_password');

$review = new Review($pdo);

// Add a new review
$title = 'Example Review';
$content = 'This is an example review.';
$rating = 5;
$user_id = 1;

if ($review->add_review($title, $content, $rating, $user_id)) {
    echo "Review added successfully.";
} else {
    echo "Error adding review.";
}

// Get all reviews
$reviews = $review->get_reviews();
foreach ($reviews as $review) {
    echo $review['title'] . ' - ' . $review['content'];
}

// Get a single review by ID
$review_id = 1;
$single_review = $review->get_review($review_id);
echo $single_review['title'];

// Update a review
$new_title = 'Updated Review';
$new_content = 'This is an updated review.';
$new_rating = 4;

if ($review->update_review($review_id, $new_title, $new_content, $new_rating)) {
    echo "Review updated successfully.";
} else {
    echo "Error updating review.";
}

// Delete a review
if ($review->delete_review($review_id)) {
    echo "Review deleted successfully.";
} else {
    echo "Error deleting review.";
}

?>


// review.php

class Review {
  private $db;

  public function __construct() {
    // Connect to database
    $this->db = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');
  }

  /**
   * Add a new review
   *
   * @param int $product_id Product ID
   * @param int $user_id User ID
   * @param int $rating Rating (1-5)
   * @param string $comment Comment text
   */
  public function addReview($product_id, $user_id, $rating, $comment) {
    try {
      // Insert review into database
      $stmt = $this->db->prepare('INSERT INTO reviews (product_id, user_id, rating, comment) VALUES (:product_id, :user_id, :rating, :comment)');
      $stmt->execute(array(
        ':product_id' => $product_id,
        ':user_id' => $user_id,
        ':rating' => $rating,
        ':comment' => $comment
      ));
    } catch (PDOException $e) {
      echo 'Error adding review: ' . $e->getMessage();
    }
  }

  /**
   * Get all reviews for a product
   *
   * @param int $product_id Product ID
   */
  public function getReviews($product_id) {
    try {
      // Retrieve reviews from database
      $stmt = $this->db->prepare('SELECT * FROM reviews WHERE product_id = :product_id');
      $stmt->execute(array(':product_id' => $product_id));
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error getting reviews: ' . $e->getMessage();
      return array();
    }
  }

  /**
   * Get review by ID
   *
   * @param int $review_id Review ID
   */
  public function getReview($review_id) {
    try {
      // Retrieve review from database
      $stmt = $this->db->prepare('SELECT * FROM reviews WHERE id = :review_id');
      $stmt->execute(array(':review_id' => $review_id));
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error getting review: ' . $e->getMessage();
      return array();
    }
  }

  /**
   * Delete a review
   *
   * @param int $review_id Review ID
   */
  public function deleteReview($review_id) {
    try {
      // Delete review from database
      $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = :review_id');
      $stmt->execute(array(':review_id' => $review_id));
    } catch (PDOException $e) {
      echo 'Error deleting review: ' . $e->getMessage();
    }
  }
}


// Create an instance of the Review class
$review = new Review();

// Add a new review
$review->addReview(1, 1, 4, "Great product!");

// Get all reviews for a product
$reviews = $review->getReviews(1);
echo '<pre>';
print_r($reviews);
echo '</pre>';

// Delete a review
$review->deleteReview(1);

// Get review by ID
$review = $review->getReview(2);
echo '<pre>';
print_r($review);
echo '</pre>';


class Review {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');
  }

  public function createReview($product_id, $user_id, $rating, $review) {
    try {
      $stmt = $this->db->prepare("INSERT INTO reviews (product_id, user_id, rating, review) VALUES (:product_id, :user_id, :rating, :review)");
      $stmt->execute([
        ':product_id' => $product_id,
        ':user_id' => $user_id,
        ':rating' => $rating,
        ':review' => $review
      ]);
      return true;
    } catch (PDOException $e) {
      echo "Error creating review: " . $e->getMessage();
      return false;
    }
  }

  public function getReviews($product_id = null, $limit = 10, $offset = 0) {
    try {
      if ($product_id) {
        $stmt = $this->db->prepare("SELECT * FROM reviews WHERE product_id = :product_id ORDER BY created_at DESC LIMIT :limit OFFSET :offset");
        $stmt->execute([
          ':product_id' => $product_id,
          ':limit' => $limit,
          ':offset' => $offset
        ]);
      } else {
        $stmt = $this->db->query("SELECT * FROM reviews ORDER BY created_at DESC LIMIT :limit OFFSET :offset");
        $stmt->execute([
          ':limit' => $limit,
          ':offset' => $offset
        ]);
      }
      return $stmt->fetchAll();
    } catch (PDOException $e) {
      echo "Error fetching reviews: " . $e->getMessage();
      return array();
    }
  }

  public function updateReview($review_id, $rating, $review) {
    try {
      $stmt = $this->db->prepare("UPDATE reviews SET rating = :rating, review = :review WHERE id = :review_id");
      $stmt->execute([
        ':review_id' => $review_id,
        ':rating' => $rating,
        ':review' => $review
      ]);
      return true;
    } catch (PDOException $e) {
      echo "Error updating review: " . $e->getMessage();
      return false;
    }
  }

  public function deleteReview($review_id) {
    try {
      $stmt = $this->db->prepare("DELETE FROM reviews WHERE id = :review_id");
      $stmt->execute([
        ':review_id' => $review_id
      ]);
      return true;
    } catch (PDOException $e) {
      echo "Error deleting review: " . $e->getMessage();
      return false;
    }
  }
}


$review = new Review();

// Create a new review
$product_id = 123;
$user_id = 456;
$rating = 5;
$review_text = "This product is amazing!";
$result = $review->createReview($product_id, $user_id, $rating, $review_text);
echo $result ? 'Review created successfully!' : 'Error creating review.';

// Fetch reviews for a specific product
$product_id = 123;
$limit = 10;
$offset = 0;
$reviews = $review->getReviews($product_id, $limit, $offset);
foreach ($reviews as $review) {
  echo "Review ID: {$review['id']}
";
  echo "Rating: {$review['rating']}
";
  echo "Review Text: {$review['review']}

";
}

// Update a review
$review_id = 123;
$new_rating = 4;
$new_review_text = "This product is okay...";
$result = $review->updateReview($review_id, $new_rating, $new_review_text);
echo $result ? 'Review updated successfully!' : 'Error updating review.';

// Delete a review
$review_id = 123;
$result = $review->deleteReview($review_id);
echo $result ? 'Review deleted successfully!' : 'Error deleting review.';


// database.php - Database connection settings
<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

function db_connect() {
    $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// reviews.php - User review functions
<?php

function insert_review($user_id, $product_id, $review_text, $rating) {
    require_once 'database.php';
    $conn = db_connect();
    $sql = "INSERT INTO reviews (user_id, product_id, review_text, rating)
            VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiss", $user_id, $product_id, $review_text, $rating);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function get_all_reviews() {
    require_once 'database.php';
    $conn = db_connect();
    $sql = "SELECT * FROM reviews";
    $result = $conn->query($sql);
    while ($row = $result->fetch_assoc()) {
        echo $row['review_text'] . ' - Rating: ' . $row['rating'] . '<br>';
    }
}

function update_review($id, $new_rating) {
    require_once 'database.php';
    $conn = db_connect();
    $sql = "UPDATE reviews SET rating = ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ii", $new_rating, $id);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}


// Insert a new review for user with id 1 on product with id 2
insert_review(1, 2, 'This is a good product.', 4);

// Get all reviews from the database and print them out
get_all_reviews();

// Update a specific review's rating to 5
update_review(3, 5);


class Review {
  private $db;

  public function __construct() {
    // Connect to the database using PDO (PHP Data Objects)
    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');
    $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  }

  public function createReview($userId, $productId, $reviewText, $rating) {
    // Prepare a SQL query to insert the review
    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, review_text, rating) VALUES (:user_id, :product_id, :review_text, :rating)');
    
    try {
      // Bind parameters and execute the query
      $stmt->bindParam(':user_id', $userId);
      $stmt->bindParam(':product_id', $productId);
      $stmt->bindParam(':review_text', $reviewText);
      $stmt->bindParam(':rating', $rating);
      return $stmt->execute();
    } catch (PDOException $e) {
      // Handle any errors that occur during execution
      echo 'Error creating review: ' . $e->getMessage();
      return false;
    }
  }

  public function listReviews() {
    // Prepare a SQL query to select all reviews
    $stmt = $this->db->prepare('SELECT * FROM reviews');
    
    try {
      // Execute the query and return the results as an array of Review objects
      $stmt->execute();
      $reviews = [];
      while ($row = $stmt->fetch()) {
        $review = new Review($row['id'], $row['user_id'], $row['product_id'], $row['review_text'], $row['rating']);
        $reviews[] = $review;
      }
      return $reviews;
    } catch (PDOException $e) {
      // Handle any errors that occur during execution
      echo 'Error listing reviews: ' . $e->getMessage();
      return [];
    }
  }

  public function displayReview($id) {
    // Prepare a SQL query to select the review with the given ID
    $stmt = $this->db->prepare('SELECT * FROM reviews WHERE id = :id');
    
    try {
      // Bind parameters and execute the query
      $stmt->bindParam(':id', $id);
      $stmt->execute();
      
      // Fetch the result as an array
      return $stmt->fetch();
    } catch (PDOException $e) {
      // Handle any errors that occur during execution
      echo 'Error displaying review: ' . $e->getMessage();
      return [];
    }
  }
}


// Create a new Review object
$review = new Review();

// Set up user credentials (for demonstration purposes)
$userCredentials = [
  'username' => 'john',
  'email' => 'john@example.com',
  'password' => 'password123'
];

// Register the user
// ...

// Create a new review for the registered user
$userId = // User ID obtained from registration or login process
$productID = 1; // Product ID of interest
$reviewText = 'This product is great!';
$rating = 5;
if ($review->createReview($userId, $productID, $reviewText, $rating)) {
  echo 'Review created successfully!';
} else {
  echo 'Error creating review.';
}

// List all reviews for the user
$userReviews = $review->listReviews();
echo '<h2>Reviews by User:</h2>';
foreach ($userReviews as $review) {
  echo '<p>ID: ' . $review['id'] . '</p>';
  echo '<p>User ID: ' . $review['user_id'] . '</p>';
  echo '<p>Product ID: ' . $review['product_id'] . '</p>';
  echo '<p>Review Text: ' . $review['review_text'] . '</p>';
  echo '<p>Rating: ' . $review['rating'] . '/5</p>';
}

// Display a specific review
$reviewID = 1; // ID of the review to display
$singleReview = $review->displayReview($reviewID);
if ($singleReview) {
  echo '<h2>Review:</h2>';
  echo '<p>ID: ' . $singleReview['id'] . '</p>';
  echo '<p>User ID: ' . $singleReview['user_id'] . '</p>';
  echo '<p>Product ID: ' . $singleReview['product_id'] . '</p>';
  echo '<p>Review Text: ' . $singleReview['review_text'] . '</p>';
  echo '<p>Rating: ' . $singleReview['rating'] . '/5</p>';
} else {
  echo 'Error displaying review.';
}


<?php

// Define the Review class
class Review {
  private $id;
  private $rating;
  private $comment;
  private $reviewed_at;

  public function __construct($data) {
    $this->id = isset($data['id']) ? $data['id'] : null;
    $this->rating = isset($data['rating']) ? $data['rating'] : null;
    $this->comment = isset($data['comment']) ? $data['comment'] : null;
    $this->reviewed_at = isset($data['reviewed_at']) ? $data['reviewed_at'] : null;
  }

  public function getId() {
    return $this->id;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getComment() {
    return $this->comment;
  }

  public function getReviewedAt() {
    return $this->reviewed_at;
  }
}

// Define the ReviewManager class
class ReviewManager {
  private $reviews = array();

  public function addReview($data) {
    $review = new Review($data);
    $this->reviews[] = $review;
    return $review;
  }

  public function getReviews() {
    return $this->reviews;
  }

  public function getReviewById($id) {
    foreach ($this->reviews as $review) {
      if ($review->getId() == $id) {
        return $review;
      }
    }
    return null;
  }
}

// Create a new ReviewManager instance
$reviewManager = new ReviewManager();

// Example usage:
$data = array(
  'rating' => 5,
  'comment' => 'Great product!',
  'reviewed_at' => date('Y-m-d H:i:s')
);

$review = $reviewManager->addReview($data);
echo "Review ID: {$review->getId()}<br>";
echo "Rating: {$review->getRating()}<br>";
echo "Comment: {$review->getComment()}<br>";
echo "Reviewed at: {$review->getReviewedAt()}<br>";

$reviews = $reviewManager->getReviews();
foreach ($reviews as $review) {
  echo "Review ID: {$review->getId()} - Rating: {$review->getRating()} - Comment: {$review->getComment()}<br>";
}

// Get a review by ID
$reviewId = 1;
$review = $reviewManager->getReviewById($reviewId);
if ($review) {
  echo "Review found with ID:{$reviewId} - Rating: {$review->getRating()} - Comment: {$review->getComment()}";
} else {
  echo "No review found with ID:{$reviewId}";
}


<?php

// Database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'reviews_database';

// Create a database connection
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function store_review($review_id, $product_id, $user_id, $rating, $comment)
{
    // SQL query to insert review
    $sql = "INSERT INTO reviews (id, product_id, user_id, rating, comment) VALUES (?, ?, ?, ?, ?)";
    
    // Prepare and execute the query
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iisi", $review_id, $product_id, $user_id, $rating, $comment);
    $result = $stmt->execute();
    
    if (!$result) {
        echo "Error storing review: " . $conn->error;
    }
}

?>


<?php

// Database connection settings (same as above)

function display_reviews($product_id)
{
    // SQL query to select reviews for a product
    $sql = "SELECT * FROM reviews WHERE product_id = ? ORDER BY id DESC";
    
    // Prepare and execute the query
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();
    
    if (!$result) {
        echo "Error displaying reviews: " . $conn->error;
    } else {
        // Fetch and display the reviews
        while ($review = $result->fetch_assoc()) {
            echo "Rating: " . $review['rating'] . "/5, Comment: " . $review['comment'] . "<br>";
        }
    }
}

?>


store_review(1, 12345, 67890, 4, 'Great product!');


display_reviews(12345);


// models/Review.php

class Review {
  private $id;
  private $userId;
  private $productName;
  private $rating;
  private $reviewText;

  public function __construct($id = null, $userId = null, $productName = null, $rating = null, $reviewText = null) {
    $this->id = $id;
    $this->userId = $userId;
    $this->productName = $productName;
    $this->rating = $rating;
    $this->reviewText = $reviewText;
  }

  public function getId() {
    return $this->id;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getProductName() {
    return $this->productName;
  }

  public function getRating() {
    return $this->rating;
  }

  public function getReviewText() {
    return $this->reviewText;
  }

  public static function create($user_id, $product_name, $rating, $review_text) {
    // Assume a database connection is established
    $db = new PDO('mysql:host=localhost;dbname=database', 'username', 'password');
    $stmt = $db->prepare("INSERT INTO reviews (user_id, product_name, rating, review_text) VALUES (:user_id, :product_name, :rating, :review_text)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_name', $product_name);
    $stmt->bindParam(':rating', $rating);
    $stmt->bindParam(':review_text', $review_text);
    $stmt->execute();
    return new self($db->lastInsertId(), $user_id, $product_name, $rating, $review_text);
  }

  public static function getAllReviews() {
    // Assume a database connection is established
    $db = new PDO('mysql:host=localhost;dbname=database', 'username', 'password');
    $stmt = $db->prepare("SELECT * FROM reviews");
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_CLASS, self::class);
  }
}


// controllers/UserReview.php

function user_review($product_name, $rating, $review_text) {
  // Authenticate the user (not shown in this example)
  if (!isset($_SESSION['user_id'])) {
    // Handle unauthorized access
  }

  try {
    $review = Review::create(
      $_SESSION['user_id'],
      $product_name,
      $rating,
      $review_text
    );
    echo "Review submitted successfully!";
  } catch (Exception $e) {
    echo "Error submitting review: " . $e->getMessage();
  }
}


// views/user-review.php

<form action="controllers/UserReview.php" method="post">
  <label for="product_name">Product Name:</label>
  <input type="text" id="product_name" name="product_name"><br><br>
  <label for="rating">Rating:</label>
  <select id="rating" name="rating">
    <option value="1">1</option>
    <option value="2">2</option>
    <option value="3">3</option>
    <option value="4">4</option>
    <option value="5">5</option>
  </select><br><br>
  <label for="review_text">Review Text:</label>
  <textarea id="review_text" name="review_text"></textarea><br><br>
  <input type="submit" value="Submit Review">
</form>


<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


<?php include_once 'config.php'; ?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Reviews</title>
</head>
<body>

<h1>Reviews</h1>

<ul>
    <?php
    $query = "SELECT * FROM reviews ORDER BY id DESC";
    $result = $conn->query($query);
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            echo '<li>' . $row['user_name'] . ' - ' . $row['rating'] . '/5: ' . $row['review_text'] . '</li>';
        }
    } else {
        echo "No reviews yet.";
    }
    ?>
</ul>

<form action="add_review.php" method="post">
    <input type="text" name="product_id" placeholder="Enter product ID">
    <input type="text" name="user_name" placeholder="Your Name">
    <textarea name="review_text" placeholder="Review"></textarea>
    <select name="rating">
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
        <option value="5">5</option>
    </select>
    <input type="submit" value="Submit Review">
</form>

<?php $conn->close(); ?>
</body>
</html>


<?php include_once 'config.php'; ?>

<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id = $_POST['product_id'];
    $user_name = $_POST['user_name'];
    $review_text = $_POST['review_text'];
    $rating = $_POST['rating'];

    if (!empty($product_id) && !empty($user_name) && !empty($review_text)) {
        $query = "INSERT INTO reviews (product_id, user_name, review_text, rating)
                  VALUES ('$product_id', '$user_name', '$review_text', '$rating')";
        $result = $conn->query($query);
        if ($result === TRUE) {
            echo "<p>Review submitted successfully!</p>";
        } else {
            echo "Error: " . $query . "<br>" . $conn->error;
        }
    }
}
?>

<?php $conn->close(); ?>


// db.php

<?php
$host = 'localhost';
$username = 'root';
$password = '';
$dbname = 'reviews';

try {
  $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
  echo "Connection failed: " . $e->getMessage();
}

function addReview($data) {
  global $conn;
  
  $query = "INSERT INTO reviews (user_id, product_id, rating, review)
            VALUES (:user_id, :product_id, :rating, :review)";
  
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':user_id', $data['user_id']);
  $stmt->bindParam(':product_id', $data['product_id']);
  $stmt->bindParam(':rating', $data['rating']);
  $stmt->bindParam(':review', $data['review']);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

function getReviews($productId) {
  global $conn;
  
  $query = "SELECT r.id, u.name, p.name AS product_name, r.rating, r.review
            FROM reviews r
            JOIN users u ON r.user_id = u.id
            JOIN products p ON r.product_id = p.id
            WHERE r.product_id = :product_id";
  
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':product_id', $productId);
  
  $stmt->execute();
  
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function editReview($data) {
  global $conn;
  
  $query = "UPDATE reviews
            SET rating = :rating, review = :review
            WHERE id = :id";
  
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':rating', $data['rating']);
  $stmt->bindParam(':review', $data['review']);
  $stmt->bindParam(':id', $data['id']);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

function deleteReview($id) {
  global $conn;
  
  $query = "DELETE FROM reviews
            WHERE id = :id";
  
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':id', $id);
  
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}
?>


// reviews.php

<?php
require_once 'db.php';

if (isset($_POST['submit'])) {
  $data = array(
    'user_id' => $_SESSION['user']['id'],
    'product_id' => $_GET['id'],
    'rating' => $_POST['rating'],
    'review' => $_POST['review']
  );
  
  if (addReview($data)) {
    echo "Review added successfully!";
  } else {
    echo "Failed to add review.";
  }
}

if (isset($_GET['edit'])) {
  $id = $_GET['edit'];
  
  $review = getReviews($id);
  foreach ($review as $row) {
    $rating = $row['rating'];
    $reviewText = $row['review'];
  }
}

if (isset($_POST['update'])) {
  $data = array(
    'id' => $_GET['edit'],
    'rating' => $_POST['rating'],
    'review' => $_POST['review']
  );
  
  if (editReview($data)) {
    echo "Review updated successfully!";
  } else {
    echo "Failed to update review.";
  }
}

if (isset($_GET['delete'])) {
  $id = $_GET['delete'];
  
  if (deleteReview($id)) {
    echo "Review deleted successfully!";
  } else {
    echo "Failed to delete review.";
  }
}
?>


// db.php is a separate file containing the database connection settings

// Include database connection settings
require_once 'db.php';

function createReview($userId, $productId, $reviewText, $rating) {
  // Create query string
  $query = "
    INSERT INTO reviews (user_id, product_id, review, rating)
    VALUES (:userId, :productId, :reviewText, :rating)
  ";

  // Prepare and execute query
  $stmt = $db->prepare($query);
  $stmt->bindParam(':userId', $userId);
  $stmt->bindParam(':productId', $productId);
  $stmt->bindParam(':reviewText', $reviewText);
  $stmt->bindParam(':rating', $rating);

  if ($stmt->execute()) {
    // Get the new review's ID
    $newReviewId = $db->lastInsertId();
    return true;
  } else {
    echo "Error creating review: " . print_r($stmt->errorInfo(), true);
    return false;
  }
}

function getReviews() {
  // Create query string
  $query = "
    SELECT reviews.id, users.username, products.product_name, reviews.review, reviews.rating
    FROM reviews
    INNER JOIN users ON reviews.user_id = users.id
    INNER JOIN products ON reviews.product_id = products.id
    ORDER BY reviews.created_at DESC
  ";

  // Prepare and execute query
  $stmt = $db->prepare($query);
  $stmt->execute();

  return $stmt->fetchAll();
}


// Include review.php for database interactions
require_once 'review.php';

function displayReviews() {
  // Get all reviews from database
  $reviews = getReviews();

  if ($reviews) {
    foreach ($reviews as $review) {
      echo "<div>
        <h2>" . $review['username'] . "</h2>
        <p>" . $review['product_name'] . "</p>
        <p>" . nl2br($review['review']) . "</p>
        <p>Rating: " . $review['rating'] . "/5</p>
      </div>";
    }
  } else {
    echo "No reviews available.";
  }
}

function createReviewForm() {
  echo "
    <form method='post'>
      <label for='username'>Username:</label>
      <input type='text' id='username' name='username' required>

      <label for='product_id'>Product ID:</label>
      <input type='number' id='product_id' name='product_id' required>

      <label for='review_text'>Review:</label>
      <textarea id='review_text' name='review_text'></textarea>

      <label for='rating'>Rating (1-5):</label>
      <input type='number' id='rating' name='rating' min='1' max='5'>

      <button type='submit'>Submit Review</button>
    </form>
  ";
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  // Create review
  $userId = $_SESSION['user_id'];
  $productId = $_POST['product_id'];
  $reviewText = $_POST['review_text'];
  $rating = $_POST['rating'];

  createReview($userId, $productId, $reviewText, $rating);
}


// Include user_review.php for display and form functionality
require_once 'user_review.php';

displayReviews();

createReviewForm();


<?php
// Include database connection settings
require 'db.php';

function createReview($userId, $productId, $rating, $comment) {
  // Check if user and product exist
  $user = getUserById($userId);
  if (!$user) return false;
  
  $product = getProductById($productId);
  if (!$product) return false;

  // Insert review into database
  $query = "INSERT INTO reviews (user_id, product_id, rating, comment)
            VALUES (:user_id, :product_id, :rating, :comment)";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':rating', $rating);
  $stmt->bindParam(':comment', $comment);
  return $stmt->execute();
}

function getReviewsForProduct($productId) {
  // Retrieve reviews for product
  $query = "SELECT r.id, u.username, p.name, r.rating, r.comment, r.created_at 
            FROM reviews r 
            JOIN users u ON r.user_id = u.id 
            JOIN products p ON r.product_id = p.id 
            WHERE r.product_id = :product_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function updateReview($reviewId, $newRating, $newComment) {
  // Check if review exists
  $review = getReviewById($reviewId);
  if (!$review) return false;

  // Update review in database
  $query = "UPDATE reviews SET rating = :rating, comment = :comment 
            WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':id', $reviewId);
  $stmt->bindParam(':rating', $newRating);
  $stmt->bindParam(':comment', $newComment);
  return $stmt->execute();
}

function deleteReview($reviewId) {
  // Check if review exists
  $review = getReviewById($reviewId);
  if (!$review) return false;

  // Delete review from database
  $query = "DELETE FROM reviews WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':id', $reviewId);
  return $stmt->execute();
}

function getUserReviews($userId) {
  // Retrieve reviews for user
  $query = "SELECT r.id, p.name, r.rating, r.comment, r.created_at 
            FROM reviews r 
            JOIN products p ON r.product_id = p.id 
            WHERE r.user_id = :user_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function getReviewById($reviewId) {
  // Retrieve review by ID
  $query = "SELECT * FROM reviews WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':id', $reviewId);
  $stmt->execute();
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

function getProductById($productId) {
  // Retrieve product by ID
  $query = "SELECT * FROM products WHERE id = :product_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

function getUserById($userId) {
  // Retrieve user by ID
  $query = "SELECT * FROM users WHERE id = :user_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->execute();
  return $stmt->fetch(PDO::FETCH_ASSOC);
}


// Create a new review
createReview(1, 2, 5, 'Great product!');

// Get reviews for a specific product
$reviews = getReviewsForProduct(2);
print_r($reviews);

// Update an existing review
updateReview(1, 4, 'Good product, but not great.');

// Delete a review
deleteReview(1);

// Retrieve all reviews for a user
$userReviews = getUserReviews(1);
print_r($userReviews);

