{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a user review function using PHP. Let me think about how to approach this.\n\nFirst, I should outline what the function needs to do. It should allow users to submit reviews with a rating and comments. So, I'll probably need an HTML form where users can input their name, email, rating from 1 to 5, and their review text.\n\nNext, I need to handle the submission. That means setting up a PHP script that processes the form data when the user submits it. I should make sure to validate all inputs to prevent any issues like SQL injection or empty fields.\n\nStoring the reviews securely is important. I'll use MySQL for the database. Each review will have an ID, user name, email, rating, comment, and a timestamp. I should sanitize the inputs before inserting them into the database to keep everything safe.\n\nThen, displaying the reviews is another key part. I'll write a function that fetches all reviews from the database and displays them on the webpage. Each review should show the user's name, email, rating as stars, their comment, and when they submitted it.\n\nI also need to handle cases where there are no reviews yet. So, I'll include a message for that scenario to keep the UI clean.\n\nThinking about security, using prepared statements with PDO would be better than the basic mysqli functions to prevent SQL injection. But since the example uses mysqli_real_escape_string, maybe I can note that as something to consider improving later.\n\nI should also think about error handling. If there's an issue submitting the review, like a database error, the user should get feedback so they know something went wrong.\n\nFor the rating display, converting the number into stars makes it more visual. Using emojis for stars is simple and works across different platforms without needing images.\n\nPutting it all together, I'll structure the code with sections: connecting to the database, handling form submission, saving to the database, fetching and displaying reviews, and the HTML form itself.\n\nI should make sure each part is clearly commented so that anyone reading the code can follow along easily. Testing each part step by step would help catch any issues early on.\n\nFinally, I'll consider possible enhancements like adding CSS for styling, implementing a thank you message after submission, or allowing users to edit or delete their reviews in the future. But for now, the basic functionality is covered.\n</think>\n\nHere's an example of a user review system using PHP:\n\nThis code includes:\n\n1. A form where users can submit their reviews\n2. Database connection and setup\n3. Functions to display reviews\n4. Form validation and sanitization\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\n// Function to sanitize input data\nfunction sanitize($data) {\n    return htmlspecialchars(trim($data));\n}\n\n// Handle review submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $name = sanitize($_POST['name']);\n    $email = sanitize($_POST['email']);\n    $rating = (int)$_POST['rating'];\n    $comment = sanitize($_POST['comment']);\n\n    // Validate input\n    if ($name == '' || $email == '' || $rating < 1 || $rating > 5 || $comment == '') {\n        die(\"Please fill in all fields correctly.\");\n    }\n\n    // Insert review into database\n    try {\n        $stmt = $conn->prepare(\"INSERT INTO reviews (name, email, rating, comment) VALUES (?, ?, ?, ?)\");\n        $stmt->execute([$name, $email, $rating, $comment]);\n        header(\"Location: $_SERVER[PHP_SELF]\");\n        exit();\n    } catch(PDOException $e) {\n        die(\"Error submitting review: \" . $e->getMessage());\n    }\n}\n\n// Function to display reviews\nfunction display_reviews($conn) {\n    $stmt = $conn->query(\"SELECT * FROM reviews ORDER BY id DESC\");\n    while ($row = $stmt->fetch()) {\n        $rating_stars = str_repeat('\u2605', $row['rating']) . str_repeat('\u2606', 5 - $row['rating']);\n        $time_ago = date_diff(date_create($row['created_at']), new DateTime())->format(\"%d days ago\");\n        \n        echo \"<div class='review'>\";\n        echo \"<h3>\" . htmlspecialchars($row['name']) . \"</h3>\";\n        echo \"<p>Rating: \" . $rating_stars . \"</p>\";\n        echo \"<p>Email: \" . htmlspecialchars($row['email']) . \"</p>\";\n        echo \"<p>Comment: \" . htmlspecialchars($row['comment']) . \"</p>\";\n        echo \"<small>\" . $time_ago . \"</small>\";\n        echo \"</div>\";\n    }\n}\n\n// Create reviews table if not exists\ntry {\n    $conn->exec(\"CREATE TABLE IF NOT EXISTS reviews (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        name VARCHAR(100) NOT NULL,\n        email VARCHAR(100) NOT NULL,\n        rating INT NOT NULL,\n        comment TEXT NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\");\n} catch(PDOException $e) {\n    die(\"Error creating table: \" . $e->getMessage());\n}\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>User Reviews</title>\n    <style>\n        body { font-family: Arial, sans-serif; }\n        .review-form { margin-bottom: 30px; }\n        .rating-stars { display: flex; gap: 5px; }\n        .star { cursor: pointer; color: #ff4081; }\n        .review { border: 1px solid #ddd; padding: 15px; margin-bottom: 20px; }\n    </style>\n</head>\n<body>\n\n<h1>Submit a Review</h1>\n<div class=\"review-form\">\n    <form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">\n        <div>\n            <label for=\"name\">Name:</label><br>\n            <input type=\"text\" id=\"name\" name=\"name\" required>\n        </div>\n        \n        <div>\n            <label for=\"email\">Email:</label><br>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n        </div>\n\n        <div class=\"rating-stars\">\n            <label>Rating:</label>\n            <?php for ($i = 5; $i >= 1; $i--): ?>\n                <input type=\"radio\" name=\"rating\" value=\"<?php echo $i; ?>\" id=\"star<?php echo $i; ?>\">\n                <label class=\"star\" for=\"star<?php echo $i; ?>\">\u2605</label>\n            <?php endfor; ?>\n        </div>\n\n        <div>\n            <label for=\"comment\">Comment:</label><br>\n            <textarea id=\"comment\" name=\"comment\" rows=\"4\" required></textarea>\n        </div>\n\n        <button type=\"submit\">Submit Review</button>\n    </form>\n</div>\n\n<h2>Reviews</h2>\n<?php\nif ($conn->query(\"SELECT COUNT(*) FROM reviews\")->fetchColumn() == 0) {\n    echo \"<p>No reviews yet. Be the first to review!</p>\";\n} else {\n    display_reviews($conn);\n}\n?>\n</body>\n</html>\n```\n\nThis code provides:\n\n1. A form for users to submit their reviews with:\n   - Name field\n   - Email field\n   - Rating system (1-5 stars)\n   - Comment textarea\n\n2. The reviews are stored in a MySQL database table with the following columns:\n   - id (auto-incremented primary key)\n   - name\n   - email\n   - rating\n   - comment\n   - created_at (timestamp)\n\n3. Reviews are displayed below the submission form, showing:\n   - User's name\n   - Email address\n   - Star rating\n   - Comment text\n   - Time since review was submitted\n\n4. Features included:\n   - Input validation\n   - SQL injection prevention\n   - XSS protection through htmlspecialchars()\n   - Clean and user-friendly interface\n   - Responsive design\n   - Error handling\n\nTo use this code:\n\n1. Make sure you have a MySQL database set up with the appropriate credentials\n2. Replace the database configuration values (host, dbname, username, password) with your actual database information\n3. The script will automatically create the necessary table if it doesn't exist\n4. You can customize the styling by modifying the CSS in the style section\n\nEnhancements you might want to add:\n\n1. User authentication system\n2. Review editing/deletion capabilities\n3. Sorting and filtering options for reviews\n4. Average rating display\n5. More sophisticated error handling\n6. CAPTCHA verification to prevent spam\n7. Email verification\n8. Rating distribution visualization (e.g., a histogram of ratings)\n9. Pagination for long lists of reviews\n\nRemember to always sanitize and validate user input, and use secure practices when dealing with database operations.", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\n// Function to sanitize input data\nfunction sanitize($data) {\n    return htmlspecialchars(trim($data));\n}\n\n// Handle review submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $name = sanitize($_POST['name']);\n    $email = sanitize($_POST['email']);\n    $rating = (int)$_POST['rating'];\n    $comment = sanitize($_POST['comment']);\n\n    // Validate input\n    if ($name == '' || $email == '' || $rating < 1 || $rating > 5 || $comment == '') {\n        die(\"Please fill in all fields correctly.\");\n    }\n\n    // Insert review into database\n    try {\n        $stmt = $conn->prepare(\"INSERT INTO reviews (name, email, rating, comment) VALUES (?, ?, ?, ?)\");\n        $stmt->execute([$name, $email, $rating, $comment]);\n        header(\"Location: $_SERVER[PHP_SELF]\");\n        exit();\n    } catch(PDOException $e) {\n        die(\"Error submitting review: \" . $e->getMessage());\n    }\n}\n\n// Function to display reviews\nfunction display_reviews($conn) {\n    $stmt = $conn->query(\"SELECT * FROM reviews ORDER BY id DESC\");\n    while ($row = $stmt->fetch()) {\n        $rating_stars = str_repeat('\u2605', $row['rating']) . str_repeat('\u2606', 5 - $row['rating']);\n        $time_ago = date_diff(date_create($row['created_at']), new DateTime())->format(\"%d days ago\");\n        \n        echo \"<div class='review'>\";\n        echo \"<h3>\" . htmlspecialchars($row['name']) . \"</h3>\";\n        echo \"<p>Rating: \" . $rating_stars . \"</p>\";\n        echo \"<p>Email: \" . htmlspecialchars($row['email']) . \"</p>\";\n        echo \"<p>Comment: \" . htmlspecialchars($row['comment']) . \"</p>\";\n        echo \"<small>\" . $time_ago . \"</small>\";\n        echo \"</div>\";\n    }\n}\n\n// Create reviews table if not exists\ntry {\n    $conn->exec(\"CREATE TABLE IF NOT EXISTS reviews (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        name VARCHAR(100) NOT NULL,\n        email VARCHAR(100) NOT NULL,\n        rating INT NOT NULL,\n        comment TEXT NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\");\n} catch(PDOException $e) {\n    die(\"Error creating table: \" . $e->getMessage());\n}\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>User Reviews</title>\n    <style>\n        body { font-family: Arial, sans-serif; }\n        .review-form { margin-bottom: 30px; }\n        .rating-stars { display: flex; gap: 5px; }\n        .star { cursor: pointer; color: #ff4081; }\n        .review { border: 1px solid #ddd; padding: 15px; margin-bottom: 20px; }\n    </style>\n</head>\n<body>\n\n<h1>Submit a Review</h1>\n<div class=\"review-form\">\n    <form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">\n        <div>\n            <label for=\"name\">Name:</label><br>\n            <input type=\"text\" id=\"name\" name=\"name\" required>\n        </div>\n        \n        <div>\n            <label for=\"email\">Email:</label><br>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n        </div>\n\n        <div class=\"rating-stars\">\n            <label>Rating:</label>\n            <?php for ($i = 5; $i >= 1; $i--): ?>\n                <input type=\"radio\" name=\"rating\" value=\"<?php echo $i; ?>\" id=\"star<?php echo $i; ?>\">\n                <label class=\"star\" for=\"star<?php echo $i; ?>\">\u2605</label>\n            <?php endfor; ?>\n        </div>\n\n        <div>\n            <label for=\"comment\">Comment:</label><br>\n            <textarea id=\"comment\" name=\"comment\" rows=\"4\" required></textarea>\n        </div>\n\n        <button type=\"submit\">Submit Review</button>\n    </form>\n</div>\n\n<h2>Reviews</h2>\n<?php\nif ($conn->query(\"SELECT COUNT(*) FROM reviews\")->fetchColumn() == 0) {\n    echo \"<p>No reviews yet. Be the first to review!</p>\";\n} else {\n    display_reviews($conn);\n}\n?>\n</body>\n</html>\n```"]}
