{"prompt": "Create a user review function using php", "llm_output": "<think>\nAlright, I need to help the user create a PHP function for handling user reviews. Let me break down what they might need.\n\nFirst, the function should add a review to the database. So, it needs parameters like review ID, user ID, product ID, rating, and comment. But wait, maybe some parameters can be optional if not provided. For example, the review ID could be generated automatically in the database, so I shouldn't require it here.\n\nNext, I should consider data validation. The rating must be between 1 and 5 to make sense. If someone tries to submit a 0 or 6, that's invalid. Also, user and product IDs should be positive integers to prevent any SQL injection issues. Checking these before inserting into the database is crucial.\n\nSanitizing inputs is another important step. Using htmlspecialchars can help prevent XSS attacks by escaping special characters in the comment. This ensures that any HTML tags or scripts in the comment are displayed as text, not executed.\n\nNow, connecting to the database. I'll use mysqli since it's more secure and efficient than mysql. The connection details like host, username, password, and database name should be placeholders that the user replaces with their actual credentials.\n\nI need to write an SQL query to insert the review into the reviews table. But wait, what if there are errors? Using try-catch blocks can help handle exceptions gracefully. If something goes wrong, we catch the exception and return a failure message along with the error details for debugging.\n\nAfter successfully inserting the review, I should update the product's average rating. This involves calculating the new average based on the existing total ratings and the new rating added. Then, updating both the total_ratings and avg_rating in the products table ensures that other parts of the application can display accurate averages.\n\nTesting is important. The function should return a success message with the review ID if everything goes smoothly. If there's an error, it returns failure with the exception message.\n\nFinally, I'll provide an example usage to show how the function can be called. This helps the user understand how to integrate it into their application.\n\nI also need to remind the user about security practices like using prepared statements or parameterized queries in a production environment. Maybe mention encrypting sensitive data and implementing proper error logging for better maintenance.\n\nPutting it all together, the function should handle database operations safely, validate inputs, and provide clear feedback on success or failure.\n</think>\n\nHere's an example of a user review function in PHP that can add, retrieve, and display reviews:\n\n```php\n<?php\n// Function to add a new review\nfunction addReview($userId, $productId, $rating, $comment) {\n    // Connect to the database\n    $conn = mysqli_connect(\"localhost\", \"username\", \"password\", \"database_name\");\n    \n    // Check connection\n    if (!$conn) {\n        die(\"Connection failed: \" . mysqli_connect_error());\n    }\n    \n    try {\n        // Sanitize inputs\n        $rating = intval($rating);\n        $comment = htmlspecialchars($comment);\n        \n        // Validate input\n        if ($rating < 1 || $rating > 5) {\n            throw new Exception(\"Invalid rating. Rating must be between 1 and 5.\");\n        }\n        \n        if (!is_numeric($userId) || !is_numeric($productId)) {\n            throw new Exception(\"Invalid user or product ID.\");\n        }\n        \n        // Insert review into database\n        $sql = \"INSERT INTO reviews (user_id, product_id, rating, comment)\n                VALUES (?, ?, ?, ?)\";\n                \n        $stmt = mysqli_prepare($conn, $sql);\n        mysqli_stmt_bind_param($stmt, \"iisi\", $userId, $productId, $rating, $comment);\n        \n        if (mysqli_stmt_execute($stmt)) {\n            // Update product's average rating\n            $this->updateProductRating($productId);\n            \n            return array(\n                'status' => 'success',\n                'message' => 'Review added successfully',\n                'review_id' => mysqli_insert_id($conn)\n            );\n        } else {\n            throw new Exception(\"Error adding review: \" . mysqli_error($conn));\n        }\n        \n    } catch (Exception $e) {\n        return array(\n            'status' => 'error',\n            'message' => $e->getMessage()\n        );\n    } finally {\n        // Close database connection\n        mysqli_close($conn);\n    }\n}\n\n// Function to update product average rating after review is added\nfunction updateProductRating($productId) {\n    // Connect to the database\n    $conn = mysqli_connect(\"localhost\", \"username\", \"password\", \"database_name\");\n    \n    try {\n        // Calculate new average rating\n        $sql = \"SELECT COUNT(*) as total_reviews, AVG(rating) as avg_rating \n                FROM reviews \n                WHERE product_id = ?\";\n                \n        $stmt = mysqli_prepare($conn, $sql);\n        mysqli_stmt_bind_param($stmt, \"i\", $productId);\n        mysqli_stmt_execute($stmt);\n        $result = mysqli_stmt_get_result($stmt);\n        $row = mysqli_fetch_assoc($result);\n        \n        $total_reviews = $row['total_reviews'];\n        $avg_rating = $row['avg_rating'];\n        \n        // Update product table\n        $updateSql = \"UPDATE products \n                      SET total_ratings = ?, avg_rating = ?\n                      WHERE id = ?\";\n                      \n        $updateStmt = mysqli_prepare($conn, $updateSql);\n        mysqli_stmt_bind_param($updateStmt, \"idi\", $total_reviews, $avg_rating, $productId);\n        \n        if (!mysqli_stmt_execute($updateStmt)) {\n            throw new Exception(\"Error updating product ratings: \" . mysqli_error($conn));\n        }\n    } catch (Exception $e) {\n        return array(\n            'status' => 'error',\n            'message' => $e->getMessage()\n        );\n    } finally {\n        // Close database connection\n        mysqli_close($conn);\n    }\n}\n\n// Function to get reviews for a product\nfunction getProductReviews($productId) {\n    // Connect to the database\n    $conn = mysqli_connect(\"localhost\", \"username\", \"password\", \"database_name\");\n    \n    try {\n        $sql = \"SELECT r.id, u.username, r.rating, r.comment, DATE_FORMAT(r.created_at, '%Y-%m-%d %H:%i') as created_at \n                FROM reviews r\n                JOIN users u ON r.user_id = u.id\n                WHERE r.product_id = ?\n                ORDER BY r.created_at DESC\";\n                \n        $stmt = mysqli_prepare($conn, $sql);\n        mysqli_stmt_bind_param($stmt, \"i\", $productId);\n        \n        if (mysqli_stmt_execute($stmt)) {\n            $result = mysqli_stmt_get_result($stmt);\n            $reviews = array();\n            \n            while ($row = mysqli_fetch_assoc($result)) {\n                $reviews[] = $row;\n            }\n            \n            return array(\n                'status' => 'success',\n                'data' => $reviews\n            );\n        } else {\n            throw new Exception(\"Error retrieving reviews: \" . mysqli_error($conn));\n        }\n    } catch (Exception $e) {\n        return array(\n            'status' => 'error',\n            'message' => $e->getMessage()\n        );\n    } finally {\n        // Close database connection\n        mysqli_close($conn);\n    }\n}\n\n// Example usage:\n// Add a new review\n$reviewResult = addReview(1, 5, 4, \"Great product, highly recommended!\");\nprint_r($reviewResult);\n\n// Get reviews for product ID 5\n$reviews = getProductReviews(5);\nprint_r($reviews);\n?>\n```\n\nThis code includes three main functions:\n\n1. `addReview()`: Adds a new review to the database.\n2. `updateProductRating()`: Updates the average rating and total ratings for a product after a new review is added.\n3. `getProductReviews()`: Retrieves all reviews for a specific product.\n\nKey features of this implementation:\n\n- Input validation and sanitization\n- Error handling using try-catch blocks\n- Database operations using prepared statements to prevent SQL injection\n- Average rating calculation and updating\n- Clean separation of concerns\n- Responsive error messages\n\nTo use this code:\n\n1. Replace the database connection details (host, username, password, database_name) with your actual database credentials.\n2. Make sure your database has tables for `users`, `products`, and `reviews`.\n3. The reviews table should have columns: id, user_id, product_id, rating, comment, created_at.\n\nNote: This is a basic implementation and might need to be modified based on your specific requirements. Also, consider adding:\n\n- User authentication\n- Rate limiting\n- Review moderation features\n- More comprehensive error logging\n- Input validation for all fields\n- Protection against SQL injection and XSS attacks\n\nMake sure to secure sensitive information (like database credentials) and implement proper security measures in a production environment.", "code_blocks": ["```php\n<?php\n// Function to add a new review\nfunction addReview($userId, $productId, $rating, $comment) {\n    // Connect to the database\n    $conn = mysqli_connect(\"localhost\", \"username\", \"password\", \"database_name\");\n    \n    // Check connection\n    if (!$conn) {\n        die(\"Connection failed: \" . mysqli_connect_error());\n    }\n    \n    try {\n        // Sanitize inputs\n        $rating = intval($rating);\n        $comment = htmlspecialchars($comment);\n        \n        // Validate input\n        if ($rating < 1 || $rating > 5) {\n            throw new Exception(\"Invalid rating. Rating must be between 1 and 5.\");\n        }\n        \n        if (!is_numeric($userId) || !is_numeric($productId)) {\n            throw new Exception(\"Invalid user or product ID.\");\n        }\n        \n        // Insert review into database\n        $sql = \"INSERT INTO reviews (user_id, product_id, rating, comment)\n                VALUES (?, ?, ?, ?)\";\n                \n        $stmt = mysqli_prepare($conn, $sql);\n        mysqli_stmt_bind_param($stmt, \"iisi\", $userId, $productId, $rating, $comment);\n        \n        if (mysqli_stmt_execute($stmt)) {\n            // Update product's average rating\n            $this->updateProductRating($productId);\n            \n            return array(\n                'status' => 'success',\n                'message' => 'Review added successfully',\n                'review_id' => mysqli_insert_id($conn)\n            );\n        } else {\n            throw new Exception(\"Error adding review: \" . mysqli_error($conn));\n        }\n        \n    } catch (Exception $e) {\n        return array(\n            'status' => 'error',\n            'message' => $e->getMessage()\n        );\n    } finally {\n        // Close database connection\n        mysqli_close($conn);\n    }\n}\n\n// Function to update product average rating after review is added\nfunction updateProductRating($productId) {\n    // Connect to the database\n    $conn = mysqli_connect(\"localhost\", \"username\", \"password\", \"database_name\");\n    \n    try {\n        // Calculate new average rating\n        $sql = \"SELECT COUNT(*) as total_reviews, AVG(rating) as avg_rating \n                FROM reviews \n                WHERE product_id = ?\";\n                \n        $stmt = mysqli_prepare($conn, $sql);\n        mysqli_stmt_bind_param($stmt, \"i\", $productId);\n        mysqli_stmt_execute($stmt);\n        $result = mysqli_stmt_get_result($stmt);\n        $row = mysqli_fetch_assoc($result);\n        \n        $total_reviews = $row['total_reviews'];\n        $avg_rating = $row['avg_rating'];\n        \n        // Update product table\n        $updateSql = \"UPDATE products \n                      SET total_ratings = ?, avg_rating = ?\n                      WHERE id = ?\";\n                      \n        $updateStmt = mysqli_prepare($conn, $updateSql);\n        mysqli_stmt_bind_param($updateStmt, \"idi\", $total_reviews, $avg_rating, $productId);\n        \n        if (!mysqli_stmt_execute($updateStmt)) {\n            throw new Exception(\"Error updating product ratings: \" . mysqli_error($conn));\n        }\n    } catch (Exception $e) {\n        return array(\n            'status' => 'error',\n            'message' => $e->getMessage()\n        );\n    } finally {\n        // Close database connection\n        mysqli_close($conn);\n    }\n}\n\n// Function to get reviews for a product\nfunction getProductReviews($productId) {\n    // Connect to the database\n    $conn = mysqli_connect(\"localhost\", \"username\", \"password\", \"database_name\");\n    \n    try {\n        $sql = \"SELECT r.id, u.username, r.rating, r.comment, DATE_FORMAT(r.created_at, '%Y-%m-%d %H:%i') as created_at \n                FROM reviews r\n                JOIN users u ON r.user_id = u.id\n                WHERE r.product_id = ?\n                ORDER BY r.created_at DESC\";\n                \n        $stmt = mysqli_prepare($conn, $sql);\n        mysqli_stmt_bind_param($stmt, \"i\", $productId);\n        \n        if (mysqli_stmt_execute($stmt)) {\n            $result = mysqli_stmt_get_result($stmt);\n            $reviews = array();\n            \n            while ($row = mysqli_fetch_assoc($result)) {\n                $reviews[] = $row;\n            }\n            \n            return array(\n                'status' => 'success',\n                'data' => $reviews\n            );\n        } else {\n            throw new Exception(\"Error retrieving reviews: \" . mysqli_error($conn));\n        }\n    } catch (Exception $e) {\n        return array(\n            'status' => 'error',\n            'message' => $e->getMessage()\n        );\n    } finally {\n        // Close database connection\n        mysqli_close($conn);\n    }\n}\n\n// Example usage:\n// Add a new review\n$reviewResult = addReview(1, 5, 4, \"Great product, highly recommended!\");\nprint_r($reviewResult);\n\n// Get reviews for product ID 5\n$reviews = getProductReviews(5);\nprint_r($reviews);\n?>\n```"]}
