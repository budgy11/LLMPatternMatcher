{"prompt": "Create a user review function using php", "llm_output": "Here is an example of a simple user review system in PHP. This system allows users to add reviews, view their own and others' reviews, edit their own reviews, and delete reviews.\n\n**Database Schema**\n\nBefore we begin with the code, let's assume that our database has two tables: `users` and `reviews`.\n\nThe `users` table:\n\n| Column Name | Data Type | Description |\n| --- | --- | --- |\n| id | int | Unique user ID |\n| name | varchar(255) | User's full name |\n\nThe `reviews` table:\n\n| Column Name | Data Type | Description |\n| --- | --- | --- |\n| id | int | Unique review ID |\n| user_id | int | Foreign key referencing the user who wrote the review |\n| product_name | varchar(255) | Product being reviewed |\n| rating | tinyint | Review's rating (1-5) |\n| content | text | Review's content |\n\n**PHP Code**\n\n```php\n// users.php\n\nclass User {\n    private $id;\n    private $name;\n\n    public function __construct($id, $name) {\n        $this->id = $id;\n        $this->name = $name;\n    }\n\n    // Getters and setters\n    public function getId() { return $this->id; }\n    public function getName() { return $this->name; }\n}\n\n// reviews.php\n\nclass Review {\n    private $id;\n    private $userId;\n    private $productName;\n    private $rating;\n    private $content;\n\n    public function __construct($id, $userId, $productName, $rating, $content) {\n        $this->id = $id;\n        $this->userId = $userId;\n        $this->productName = $productName;\n        $this->rating = $rating;\n        $this->content = $content;\n    }\n\n    // Getters and setters\n    public function getId() { return $this->id; }\n    public function getUserId() { return $this->userId; }\n    public function getProductName() { return $this->productName; }\n    public function getRating() { return $this->rating; }\n    public function getContent() { return $this->content; }\n}\n\n// reviewSystem.php\n\nclass ReviewSystem {\n    private $db;\n\n    public function __construct($dbName) {\n        $this->db = new PDO(\"mysql:host=localhost;dbname=$dbName\", \"username\", \"password\");\n    }\n\n    // Add a review\n    public function addReview(User $user, $productName, $rating, $content) {\n        try {\n            $query = $this->db->prepare(\"INSERT INTO reviews (user_id, product_name, rating, content) VALUES (:userId, :product_name, :rating, :content)\");\n            $query->bindParam(\":userId\", $user->getId());\n            $query->bindParam(\":product_name\", $productName);\n            $query->bindParam(\":rating\", $rating);\n            $query->bindParam(\":content\", $content);\n            $query->execute();\n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get a review\n    public function getReview($id) {\n        try {\n            $query = $this->db->prepare(\"SELECT * FROM reviews WHERE id = :id\");\n            $query->bindParam(\":id\", $id);\n            $query->execute();\n            $reviewData = $query->fetch(PDO::FETCH_ASSOC);\n            if ($reviewData === false) return null;\n            return new Review($reviewData['id'], $reviewData['user_id'], $reviewData['product_name'], $reviewData['rating'], $reviewData['content']);\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return null;\n        }\n    }\n\n    // Get all reviews for a user\n    public function getReviewsForUser($id) {\n        try {\n            $query = $this->db->prepare(\"SELECT * FROM reviews WHERE user_id = :id\");\n            $query->bindParam(\":id\", $id);\n            $query->execute();\n            $reviewData = $query->fetchAll(PDO::FETCH_ASSOC);\n            if ($reviewData === false) return array();\n            $reviews = array();\n            foreach ($reviewData as $data) {\n                $reviews[] = new Review($data['id'], $data['user_id'], $data['product_name'], $data['rating'], $data['content']);\n            }\n            return $reviews;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return array();\n        }\n    }\n\n    // Edit a review\n    public function editReview(Review $review, $newProductName = null, $newRating = null, $newContent = null) {\n        try {\n            if ($newProductName !== null) $query = $this->db->prepare(\"UPDATE reviews SET product_name = :product_name WHERE id = :id\");\n            else if ($newRating !== null) $query = $this->db->prepare(\"UPDATE reviews SET rating = :rating WHERE id = :id\");\n            else if ($newContent !== null) $query = $this->db->prepare(\"UPDATE reviews SET content = :content WHERE id = :id\");\n            else return false;\n            $query->bindParam(\":product_name\", $newProductName);\n            $query->bindParam(\":rating\", $newRating);\n            $query->bindParam(\":content\", $newContent);\n            $query->bindParam(\":id\", $review->getId());\n            $query->execute();\n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Delete a review\n    public function deleteReview(Review $review) {\n        try {\n            $this->db->prepare(\"DELETE FROM reviews WHERE id = :id\")->bindParam(\":id\", $review->getId())->execute();\n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n\n// Usage\n$reviewSystem = new ReviewSystem('your_database_name');\n\n$user = new User(1, 'John Doe');\n$productName = 'Example Product';\n$rating = 5;\n$content = 'This product is great!';\n\nif ($reviewSystem->addReview($user, $productName, $rating, $content)) {\n    echo \"Review added successfully!\";\n} else {\n    echo \"Error adding review.\";\n}\n\n$reviews = $reviewSystem->getReviewsForUser(1);\nforeach ($reviews as $review) {\n    echo \"Product: \" . $review->getProductName() . \", Rating: \" . $review->getRating() . \", Content: \" . $review->getContent();\n}\n```\n\nThis code creates a `ReviewSystem` class that handles all database interactions for the review system. It provides methods to add, get, edit, and delete reviews.\n\nYou will need to replace `'your_database_name'` with your actual database name in the usage example.\n\nNote: This is a basic implementation and does not include any error checking or validation on user input. In a production environment, you would want to add this to prevent SQL injection attacks.", "code_blocks": ["```php\n// users.php\n\nclass User {\n    private $id;\n    private $name;\n\n    public function __construct($id, $name) {\n        $this->id = $id;\n        $this->name = $name;\n    }\n\n    // Getters and setters\n    public function getId() { return $this->id; }\n    public function getName() { return $this->name; }\n}\n\n// reviews.php\n\nclass Review {\n    private $id;\n    private $userId;\n    private $productName;\n    private $rating;\n    private $content;\n\n    public function __construct($id, $userId, $productName, $rating, $content) {\n        $this->id = $id;\n        $this->userId = $userId;\n        $this->productName = $productName;\n        $this->rating = $rating;\n        $this->content = $content;\n    }\n\n    // Getters and setters\n    public function getId() { return $this->id; }\n    public function getUserId() { return $this->userId; }\n    public function getProductName() { return $this->productName; }\n    public function getRating() { return $this->rating; }\n    public function getContent() { return $this->content; }\n}\n\n// reviewSystem.php\n\nclass ReviewSystem {\n    private $db;\n\n    public function __construct($dbName) {\n        $this->db = new PDO(\"mysql:host=localhost;dbname=$dbName\", \"username\", \"password\");\n    }\n\n    // Add a review\n    public function addReview(User $user, $productName, $rating, $content) {\n        try {\n            $query = $this->db->prepare(\"INSERT INTO reviews (user_id, product_name, rating, content) VALUES (:userId, :product_name, :rating, :content)\");\n            $query->bindParam(\":userId\", $user->getId());\n            $query->bindParam(\":product_name\", $productName);\n            $query->bindParam(\":rating\", $rating);\n            $query->bindParam(\":content\", $content);\n            $query->execute();\n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get a review\n    public function getReview($id) {\n        try {\n            $query = $this->db->prepare(\"SELECT * FROM reviews WHERE id = :id\");\n            $query->bindParam(\":id\", $id);\n            $query->execute();\n            $reviewData = $query->fetch(PDO::FETCH_ASSOC);\n            if ($reviewData === false) return null;\n            return new Review($reviewData['id'], $reviewData['user_id'], $reviewData['product_name'], $reviewData['rating'], $reviewData['content']);\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return null;\n        }\n    }\n\n    // Get all reviews for a user\n    public function getReviewsForUser($id) {\n        try {\n            $query = $this->db->prepare(\"SELECT * FROM reviews WHERE user_id = :id\");\n            $query->bindParam(\":id\", $id);\n            $query->execute();\n            $reviewData = $query->fetchAll(PDO::FETCH_ASSOC);\n            if ($reviewData === false) return array();\n            $reviews = array();\n            foreach ($reviewData as $data) {\n                $reviews[] = new Review($data['id'], $data['user_id'], $data['product_name'], $data['rating'], $data['content']);\n            }\n            return $reviews;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return array();\n        }\n    }\n\n    // Edit a review\n    public function editReview(Review $review, $newProductName = null, $newRating = null, $newContent = null) {\n        try {\n            if ($newProductName !== null) $query = $this->db->prepare(\"UPDATE reviews SET product_name = :product_name WHERE id = :id\");\n            else if ($newRating !== null) $query = $this->db->prepare(\"UPDATE reviews SET rating = :rating WHERE id = :id\");\n            else if ($newContent !== null) $query = $this->db->prepare(\"UPDATE reviews SET content = :content WHERE id = :id\");\n            else return false;\n            $query->bindParam(\":product_name\", $newProductName);\n            $query->bindParam(\":rating\", $newRating);\n            $query->bindParam(\":content\", $newContent);\n            $query->bindParam(\":id\", $review->getId());\n            $query->execute();\n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Delete a review\n    public function deleteReview(Review $review) {\n        try {\n            $this->db->prepare(\"DELETE FROM reviews WHERE id = :id\")->bindParam(\":id\", $review->getId())->execute();\n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n\n// Usage\n$reviewSystem = new ReviewSystem('your_database_name');\n\n$user = new User(1, 'John Doe');\n$productName = 'Example Product';\n$rating = 5;\n$content = 'This product is great!';\n\nif ($reviewSystem->addReview($user, $productName, $rating, $content)) {\n    echo \"Review added successfully!\";\n} else {\n    echo \"Error adding review.\";\n}\n\n$reviews = $reviewSystem->getReviewsForUser(1);\nforeach ($reviews as $review) {\n    echo \"Product: \" . $review->getProductName() . \", Rating: \" . $review->getRating() . \", Content: \" . $review->getContent();\n}\n```"]}
