{"prompt": "Create a user review function using php", "llm_output": "Here's an example of a simple user review system using PHP. This example includes basic functionality such as adding reviews, retrieving all reviews, updating and deleting reviews.\n\n### Database Schema\n\nBefore implementing the code, let's define the database schema for our `reviews` table:\n\n```sql\nCREATE TABLE reviews (\n  id INT AUTO_INCREMENT,\n  product_id INT NOT NULL,\n  user_id INT NOT NULL,\n  review TEXT NOT NULL,\n  rating TINYINT(1) NOT NULL CHECK (rating >= 1 AND rating <= 5),\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY (id)\n);\n```\n\n### PHP Code\n\nWe'll use a `Review` class to encapsulate the functionality for adding, retrieving, updating, and deleting reviews.\n\n```php\nclass Review {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    /**\n     * Add a new review.\n     *\n     * @param int   $productId The ID of the product being reviewed.\n     * @param int   $userId    The ID of the user submitting the review.\n     * @param string $reviewText\n     * @param int   $rating\n     *\n     * @return bool True if the review was successfully added, false otherwise.\n     */\n    public function addReview($productId, $userId, $reviewText, $rating) {\n        $query = \"INSERT INTO reviews (product_id, user_id, review, rating)\n                  VALUES (:productId, :userId, :reviewText, :rating)\";\n        \n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([\n            ':productId' => $productId,\n            ':userId'    => $userId,\n            ':reviewText' => $reviewText,\n            ':rating'     => $rating\n        ]);\n    }\n\n    /**\n     * Retrieve all reviews for a product.\n     *\n     * @param int $productId The ID of the product to retrieve reviews for.\n     *\n     * @return array An array of review objects, each containing user and review details.\n     */\n    public function getReviews($productId) {\n        $query = \"SELECT r.id, u.name AS username, r.review, r.rating\n                  FROM reviews r JOIN users u ON r.user_id = u.id\n                  WHERE r.product_id = :productId ORDER BY created_at DESC\";\n        \n        $stmt = $this->db->prepare($query);\n        $stmt->execute([':productId' => $productId]);\n        \n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    }\n\n    /**\n     * Update an existing review.\n     *\n     * @param int   $reviewId The ID of the review to update.\n     * @param string $newReviewText\n     * @param int   $newRating\n     *\n     * @return bool True if the review was successfully updated, false otherwise.\n     */\n    public function updateReview($reviewId, $newReviewText, $newRating) {\n        $query = \"UPDATE reviews SET review = :newReviewText, rating = :newRating\n                  WHERE id = :reviewId\";\n        \n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([\n            ':reviewId'      => $reviewId,\n            ':newReviewText' => $newReviewText,\n            ':newRating'     => $newRating\n        ]);\n    }\n\n    /**\n     * Delete a review.\n     *\n     * @param int $reviewId The ID of the review to delete.\n     *\n     * @return bool True if the review was successfully deleted, false otherwise.\n     */\n    public function deleteReview($reviewId) {\n        $query = \"DELETE FROM reviews WHERE id = :reviewId\";\n        \n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([':reviewId' => $reviewId]);\n    }\n}\n```\n\n### Usage\n\nHere's how you can use the `Review` class in your PHP script:\n\n```php\nrequire_once 'database.php';\n\n$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myusername', 'mypassword');\n\n$review = new Review($db);\n\n// Add a review\nif ($review->addReview(1, 1, \"Great product!\", 5)) {\n    echo \"Review added successfully.\";\n} else {\n    echo \"Failed to add review.\";\n}\n\n// Retrieve all reviews for a product\n$reviews = $review->getReviews(1);\nprint_r($reviews);\n\n// Update an existing review\nif ($review->updateReview(1, \"Even better!\", 5)) {\n    echo \"Review updated successfully.\";\n} else {\n    echo \"Failed to update review.\";\n}\n\n// Delete a review\nif ($review->deleteReview(1)) {\n    echo \"Review deleted successfully.\";\n} else {\n    echo \"Failed to delete review.\";\n}\n```\n\nThis is a basic example, and you may need to adjust the code to fit your specific requirements.", "code_blocks": [null, "```php\nclass Review {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    /**\n     * Add a new review.\n     *\n     * @param int   $productId The ID of the product being reviewed.\n     * @param int   $userId    The ID of the user submitting the review.\n     * @param string $reviewText\n     * @param int   $rating\n     *\n     * @return bool True if the review was successfully added, false otherwise.\n     */\n    public function addReview($productId, $userId, $reviewText, $rating) {\n        $query = \"INSERT INTO reviews (product_id, user_id, review, rating)\n                  VALUES (:productId, :userId, :reviewText, :rating)\";\n        \n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([\n            ':productId' => $productId,\n            ':userId'    => $userId,\n            ':reviewText' => $reviewText,\n            ':rating'     => $rating\n        ]);\n    }\n\n    /**\n     * Retrieve all reviews for a product.\n     *\n     * @param int $productId The ID of the product to retrieve reviews for.\n     *\n     * @return array An array of review objects, each containing user and review details.\n     */\n    public function getReviews($productId) {\n        $query = \"SELECT r.id, u.name AS username, r.review, r.rating\n                  FROM reviews r JOIN users u ON r.user_id = u.id\n                  WHERE r.product_id = :productId ORDER BY created_at DESC\";\n        \n        $stmt = $this->db->prepare($query);\n        $stmt->execute([':productId' => $productId]);\n        \n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    }\n\n    /**\n     * Update an existing review.\n     *\n     * @param int   $reviewId The ID of the review to update.\n     * @param string $newReviewText\n     * @param int   $newRating\n     *\n     * @return bool True if the review was successfully updated, false otherwise.\n     */\n    public function updateReview($reviewId, $newReviewText, $newRating) {\n        $query = \"UPDATE reviews SET review = :newReviewText, rating = :newRating\n                  WHERE id = :reviewId\";\n        \n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([\n            ':reviewId'      => $reviewId,\n            ':newReviewText' => $newReviewText,\n            ':newRating'     => $newRating\n        ]);\n    }\n\n    /**\n     * Delete a review.\n     *\n     * @param int $reviewId The ID of the review to delete.\n     *\n     * @return bool True if the review was successfully deleted, false otherwise.\n     */\n    public function deleteReview($reviewId) {\n        $query = \"DELETE FROM reviews WHERE id = :reviewId\";\n        \n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([':reviewId' => $reviewId]);\n    }\n}\n```", "```php\nrequire_once 'database.php';\n\n$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myusername', 'mypassword');\n\n$review = new Review($db);\n\n// Add a review\nif ($review->addReview(1, 1, \"Great product!\", 5)) {\n    echo \"Review added successfully.\";\n} else {\n    echo \"Failed to add review.\";\n}\n\n// Retrieve all reviews for a product\n$reviews = $review->getReviews(1);\nprint_r($reviews);\n\n// Update an existing review\nif ($review->updateReview(1, \"Even better!\", 5)) {\n    echo \"Review updated successfully.\";\n} else {\n    echo \"Failed to update review.\";\n}\n\n// Delete a review\nif ($review->deleteReview(1)) {\n    echo \"Review deleted successfully.\";\n} else {\n    echo \"Failed to delete review.\";\n}\n```"]}
