{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, the user asked to create a user review function using PHP. I need to figure out what exactly they're looking for. Probably, they want a function that allows users to submit reviews and ratings for something, like a product or service.\n\nFirst, I should outline the basic components. The function needs to handle form submission where users can input their name, email, review text, and select a rating from 1 to 5 stars. Then, it should store this data somewhere\u2014maybe in a database.\n\nI'll start by setting up an HTML form with the necessary fields: name, email, review, and rating. Using POST method makes sense here for submitting the data.\n\nNext, I need a PHP function to process the form submission. This function should handle incoming POST requests, validate the inputs, and then store them in a database. I'll use prepared statements with PDO to prevent SQL injection attacks, which is important for security.\n\nValidation is crucial. The name and review fields shouldn't be empty, and the rating must be an integer between 1 and 5. I'll also include checks for each input field to make sure they're not empty and that the data types are correct.\n\nAfter validation, I'll prepare an SQL statement to insert the user's review into a database table. Using placeholders in the prepared statement helps prevent SQL injection and makes the code cleaner.\n\nI should also handle any potential errors during database operations, like connection issues or query failures. Adding error messages with specific HTTP status codes will help in debugging if something goes wrong.\n\nAdditionally, displaying the reviews on another page is important. I'll write a function to fetch all reviews from the database and display them. Formatting each review with the user's name, rating stars, review text, and submission date makes it user-friendly.\n\nSecurity considerations are essential. Sanitizing inputs, using prepared statements, and ensuring data is stored securely helps protect against common vulnerabilities. I'll also mention these points in the explanation so the user knows why they're important.\n\nFinally, I'll provide a complete example that ties everything together\u2014HTML form, PHP functions for submission and display, and instructions on how to use it with a MySQL database. Including comments in the code makes it easier for the user to understand each part.\n\nI should also mention customization options, like adding validation for email format or using different database configurations. This gives the user flexibility to adapt the function to their specific needs.\n</think>\n\nHere's an example of a user review system using PHP:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$user = 'root';\n$password = '';\n\ntry {\n    // Create database connection\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    die('Connection failed: ' . $e->getMessage());\n}\n\n// Function to create review form\nfunction createReviewForm() {\n    echo '\n        <form action=\"' . $_SERVER['PHP_SELF'] . '\" method=\"POST\">\n            <div>\n                <label for=\"name\">Name:</label><br>\n                <input type=\"text\" id=\"name\" name=\"name\" required>\n            </div>\n            <div>\n                <label for=\"email\">Email:</label><br>\n                <input type=\"email\" id=\"email\" name=\"email\" required>\n            </div>\n            <div>\n                <label for=\"review\">Review:</label><br>\n                <textarea id=\"review\" name=\"review\" rows=\"5\" cols=\"40\" required></textarea>\n            </div>\n            <div>\n                <label for=\"rating\">Rating:</label><br>\n                <select id=\"rating\" name=\"rating\">\n                    <option value=\"1\">1 Star</option>\n                    <option value=\"2\">2 Stars</option>\n                    <option value=\"3\">3 Stars</option>\n                    <option value=\"4\">4 Stars</option>\n                    <option value=\"5\">5 Stars</option>\n                </select>\n            </div>\n            <input type=\"submit\" name=\"submit_review\" value=\"Submit Review\">\n        </form>\n    ';\n}\n\n// Function to submit review\nfunction submitReview() {\n    global $conn;\n    \n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n        // Sanitize inputs\n        $name = htmlspecialchars(trim($_POST['name']));\n        $email = htmlspecialchars(trim($_POST['email']));\n        $review = htmlspecialchars(trim($_POST['review']));\n        $rating = (int)trim($_POST['rating']);\n        \n        // Validate input fields\n        if (empty($name) || empty($email) || empty($review)) {\n            die(\"All fields are required!\");\n        }\n        \n        if ($rating < 1 || $rating > 5) {\n            die(\"Rating must be between 1 and 5 stars!\");\n        }\n\n        // Prepare SQL statement\n        $stmt = $conn->prepare(\"\n            INSERT INTO reviews (name, email, review_text, rating, submission_date)\n            VALUES (:name, :email, :review_text, :rating, NOW())\n        \");\n        \n        try {\n            // Bind parameters and execute query\n            $stmt->execute([\n                ':name' => $name,\n                ':email' => $email,\n                ':review_text' => $review,\n                ':rating' => $rating\n            ]);\n            \n            echo \"Thank you for submitting your review!\";\n        } catch(PDOException $e) {\n            die(\"Error: \" . $e->getMessage());\n        }\n    }\n}\n\n// Function to display reviews\nfunction displayReviews() {\n    global $conn;\n    \n    try {\n        // Get all reviews from database\n        $stmt = $conn->query(\"\n            SELECT name, rating, review_text, submission_date\n            FROM reviews\n            ORDER BY submission_date DESC\n        \");\n        \n        // Display each review\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            echo '\n                <div class=\"review\">\n                    <h3>' . $row['name'] . '</h3>\n                    <p>Rating: ' . str_repeat('\u2605', $row['rating']) . '</p>\n                    <p>' . $row['review_text'] . '</p>\n                    <small>Submitted on: ' . $row['submission_date'] . '</small>\n                </div>\n            ';\n        }\n    } catch(PDOException $e) {\n        die(\"Error displaying reviews: \" . $e->getMessage());\n    }\n}\n\n// Main function\nfunction main() {\n    // Check if review is being submitted\n    if (isset($_POST['submit_review'])) {\n        submitReview();\n    } else {\n        // Display review form and existing reviews\n        createReviewForm();\n        displayReviews();\n    }\n}\n\n// Run the main function\nmain();\n\n// Close database connection\n$conn = null;\n?>\n```\n\nThis code provides:\n\n1. A review submission form with:\n   - Name field\n   - Email field\n   - Review text area\n   - Rating selection (1-5 stars)\n\n2. Database integration using PDO for secure data storage\n\n3. Input validation and sanitization\n\n4. Error handling\n\n5. Display of submitted reviews in a user-friendly format\n\nTo use this code:\n\n1. Create a MySQL database named `reviews_db` with the following table:\n\n```sql\nCREATE TABLE reviews (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    review_text TEXT NOT NULL,\n    rating INT NOT NULL,\n    submission_date DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n2. Update the database credentials in the PHP code\n\n3. Save it as a `.php` file and run it on a web server\n\nFeatures:\n- Users can submit reviews with ratings from 1 to 5 stars\n- Reviews are stored in a database\n- Submissions include timestamps\n- Reviews are displayed below the submission form\n- Input validation is performed\n- SQL injection prevention using PDO prepared statements\n\nYou can customize this further by:\n\n1. Adding CSS styling\n2. Implementing additional validation (e.g., email format check)\n3. Adding user authentication\n4. Including edit/delete functionality for reviews\n5. Adding sorting and filtering options\n6. Implementing pagination for large numbers of reviews", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$user = 'root';\n$password = '';\n\ntry {\n    // Create database connection\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    die('Connection failed: ' . $e->getMessage());\n}\n\n// Function to create review form\nfunction createReviewForm() {\n    echo '\n        <form action=\"' . $_SERVER['PHP_SELF'] . '\" method=\"POST\">\n            <div>\n                <label for=\"name\">Name:</label><br>\n                <input type=\"text\" id=\"name\" name=\"name\" required>\n            </div>\n            <div>\n                <label for=\"email\">Email:</label><br>\n                <input type=\"email\" id=\"email\" name=\"email\" required>\n            </div>\n            <div>\n                <label for=\"review\">Review:</label><br>\n                <textarea id=\"review\" name=\"review\" rows=\"5\" cols=\"40\" required></textarea>\n            </div>\n            <div>\n                <label for=\"rating\">Rating:</label><br>\n                <select id=\"rating\" name=\"rating\">\n                    <option value=\"1\">1 Star</option>\n                    <option value=\"2\">2 Stars</option>\n                    <option value=\"3\">3 Stars</option>\n                    <option value=\"4\">4 Stars</option>\n                    <option value=\"5\">5 Stars</option>\n                </select>\n            </div>\n            <input type=\"submit\" name=\"submit_review\" value=\"Submit Review\">\n        </form>\n    ';\n}\n\n// Function to submit review\nfunction submitReview() {\n    global $conn;\n    \n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n        // Sanitize inputs\n        $name = htmlspecialchars(trim($_POST['name']));\n        $email = htmlspecialchars(trim($_POST['email']));\n        $review = htmlspecialchars(trim($_POST['review']));\n        $rating = (int)trim($_POST['rating']);\n        \n        // Validate input fields\n        if (empty($name) || empty($email) || empty($review)) {\n            die(\"All fields are required!\");\n        }\n        \n        if ($rating < 1 || $rating > 5) {\n            die(\"Rating must be between 1 and 5 stars!\");\n        }\n\n        // Prepare SQL statement\n        $stmt = $conn->prepare(\"\n            INSERT INTO reviews (name, email, review_text, rating, submission_date)\n            VALUES (:name, :email, :review_text, :rating, NOW())\n        \");\n        \n        try {\n            // Bind parameters and execute query\n            $stmt->execute([\n                ':name' => $name,\n                ':email' => $email,\n                ':review_text' => $review,\n                ':rating' => $rating\n            ]);\n            \n            echo \"Thank you for submitting your review!\";\n        } catch(PDOException $e) {\n            die(\"Error: \" . $e->getMessage());\n        }\n    }\n}\n\n// Function to display reviews\nfunction displayReviews() {\n    global $conn;\n    \n    try {\n        // Get all reviews from database\n        $stmt = $conn->query(\"\n            SELECT name, rating, review_text, submission_date\n            FROM reviews\n            ORDER BY submission_date DESC\n        \");\n        \n        // Display each review\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            echo '\n                <div class=\"review\">\n                    <h3>' . $row['name'] . '</h3>\n                    <p>Rating: ' . str_repeat('\u2605', $row['rating']) . '</p>\n                    <p>' . $row['review_text'] . '</p>\n                    <small>Submitted on: ' . $row['submission_date'] . '</small>\n                </div>\n            ';\n        }\n    } catch(PDOException $e) {\n        die(\"Error displaying reviews: \" . $e->getMessage());\n    }\n}\n\n// Main function\nfunction main() {\n    // Check if review is being submitted\n    if (isset($_POST['submit_review'])) {\n        submitReview();\n    } else {\n        // Display review form and existing reviews\n        createReviewForm();\n        displayReviews();\n    }\n}\n\n// Run the main function\nmain();\n\n// Close database connection\n$conn = null;\n?>\n```", null]}
