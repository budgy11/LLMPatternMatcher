{"prompt": "Create a user review function using php", "llm_output": "<think>\nAlright, I need to create a user review function using PHP. Let me think about how to approach this.\n\nFirst, the function needs to allow users to submit reviews and ratings for products or services. So, I should start by setting up a form where users can input their name, email, rating from 1 to 5 stars, and their review text. Using HTML makes sense here because it's standard for forms.\n\nNext, handling the form submission is crucial. When the user submits the form, PHP will process the data. I need to validate each field to ensure nothing is missed. For example, checking that all required fields are filled out and that the email format is correct. Validation helps prevent errors and ensures data integrity.\n\nAfter validation, storing the review in a database seems logical. Using MySQL with PDO is a good choice because it's secure against SQL injection. I'll set up a connection to the database and prepare an insert statement to add the new review into the reviews table.\n\nDisplaying the reviews is another important part. I should fetch all stored reviews from the database, calculate the average rating, count the total reviews, and present them on the page. Using PHP loops will help display each review dynamically. Also, showing stars based on the rating can be done using CSS classes, making it visually appealing.\n\nSecurity considerations are vital. Sanitizing inputs prevents SQL injection and other attacks. Using prepared statements in PDO helps with this. Additionally, displaying user names instead of emails protects privacy.\n\nI should also handle errors gracefully. If there's a problem submitting the review, like database issues, the user should be informed so they can try again or contact support.\n\nPutting it all together, I'll structure the code into sections: form submission handling, validation, database interaction, and display. Using CSS for styling ensures the page looks clean and the stars are displayed properly.\n\nI might have missed something, like checking if the email is unique per user or implementing rate limiting to prevent abuse. But for a basic function, this covers the essentials. Testing each part step by step will help catch any issues early on.\n</think>\n\nHere's an example of a user review system using PHP. This script includes functions to submit reviews, display reviews, and calculate average ratings:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$user = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Handle review submission\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    // Sanitize inputs\n    $name = htmlspecialchars($_POST['name']);\n    $email = filter_var($_POST['email'], FILTER_SANITIZE_EMAIL);\n    $rating = intval($_POST['rating']);\n    $review_text = htmlspecialchars($_POST['review']);\n\n    // Validate inputs\n    if (empty($name) || empty($email) || empty($rating) || empty($review_text)) {\n        die(\"All fields are required!\");\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        die(\"Invalid email format!\");\n    }\n\n    if ($rating < 1 || $rating > 5) {\n        die(\"Rating must be between 1 and 5 stars!\");\n    }\n\n    // Insert review into database\n    try {\n        $stmt = $conn->prepare(\"INSERT INTO reviews (name, email, rating, review_text, created_at) \n                              VALUES (:name, :email, :rating, :review_text, NOW())\");\n        \n        $stmt->bindParam(':name', $name);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':review_text', $review_text);\n\n        $stmt->execute();\n    } catch (PDOException $e) {\n        die(\"Error submitting review: \" . $e->getMessage());\n    }\n}\n\n// Get all reviews\ntry {\n    $stmt = $conn->query(\"SELECT * FROM reviews ORDER BY created_at DESC\");\n    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n} catch (PDOException $e) {\n    die(\"Error fetching reviews: \" . $e->getMessage());\n}\n\n// Calculate average rating\n$averageRating = 0;\n$totalReviews = count($reviews);\n\nif ($totalReviews > 0) {\n    $sumRatings = array_sum(array_column($reviews, 'rating'));\n    $averageRating = $sumRatings / $totalReviews;\n}\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Product Review System</title>\n    <style>\n        .rating-stars {\n            display: inline-block;\n            font-size: 24px;\n        }\n        .star {\n            color: #ddd;\n            text-decoration: none;\n        }\n        .star.active {\n            color: gold;\n        }\n        .review-form {\n            max-width: 600px;\n            margin: 20px auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        .review-list {\n            max-width: 800px;\n            margin: 20px auto;\n            padding: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"review-form\">\n        <h2>Submit Your Review</h2>\n        <form action=\"<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>\" method=\"post\">\n            <input type=\"text\" name=\"name\" placeholder=\"Your Name\" required><br><br>\n            <input type=\"email\" name=\"email\" placeholder=\"Your Email\" required><br><br>\n            \n            <div class=\"rating-stars\">\n                <a href=\"#\" class=\"star\">\u2605</a>\n                <a href=\"#\" class=\"star\">\u2605</a>\n                <a href=\"#\" class=\"star\">\u2605</a>\n                <a href=\"#\" class=\"star\">\u2605</a>\n                <a href=\"#\" class=\"star\">\u2605</a>\n            </div>\n            \n            <select name=\"rating\" required>\n                <option value=\"\">Choose Rating</option>\n                <option value=\"5\">Excellent</option>\n                <option value=\"4\">Very Good</option>\n                <option value=\"3\">Good</option>\n                <option value=\"2\">Fair</option>\n                <option value=\"1\">Poor</option>\n            </select><br><br>\n\n            <textarea name=\"review\" placeholder=\"Write your review here...\" rows=\"5\" required></textarea><br><br>\n            \n            <input type=\"submit\" value=\"Submit Review\">\n        </form>\n    </div>\n\n    <div class=\"review-list\">\n        <h2>Reviews</h2>\n        <?php if ($totalReviews > 0): ?>\n            <p>Average Rating: <?php echo number_format($averageRating, 1); ?> stars out of 5 (<?php echo $totalReviews; ?> reviews)</p>\n            \n            <?php foreach ($reviews as $review): \n                $rating = $review['rating'];\n                $stars = str_repeat(\"\u2605\", $rating) . str_repeat(\"\u2606\", 5 - $rating);\n            ?>\n                <div style=\"border-bottom: 1px solid #ccc; padding-bottom: 10px; margin-bottom: 10px;\">\n                    <h3><?php echo $review['name']; ?></h3>\n                    <p class=\"stars\"><?php echo $stars; ?></p>\n                    <p><?php echo $review['review_text']; ?></p>\n                    <small>Posted on <?php echo date('F j, Y', strtotime($review['created_at'])); ?></small>\n                </div>\n            <?php endforeach; ?>\n        <?php else: ?>\n            <p>No reviews yet. Be the first to review!</p>\n        <?php endif; ?>\n    </div>\n</body>\n</html>\n```\n\nThis code includes:\n\n1. A form for submitting new reviews\n2. Input validation and sanitization\n3. Database connectivity using PDO\n4. Review submission handling\n5. Display of existing reviews with average rating calculation\n6. Star rating display\n7. Timestamps for each review\n\nTo use this script:\n\n1. Create a database named `reviews_db` (or modify the `$dbname` variable)\n2. Create a table in your database with the following columns:\n    ```sql\n    CREATE TABLE reviews (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        name VARCHAR(255) NOT NULL,\n        email VARCHAR(255) NOT NULL,\n        rating TINYINT NOT NULL,\n        review_text TEXT NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    );\n    ```\n3. Update the database connection details ($host, $dbname, $user, $password) to match your environment\n\nFeatures:\n- Users can submit reviews with ratings from 1 to 5 stars\n- Reviews are stored in a MySQL database\n- Display of average rating and total number of reviews\n- Each review shows the author's name, rating, review text, and post date\n- Input validation and sanitization to prevent SQL injection and other attacks\n\nSecurity Notes:\n- Use prepared statements for database operations\n- Sanitize all user inputs\n- Validate email format\n- Check for required fields\n- Limit rating values between 1 and 5\n\nYou can customize the styling by modifying the CSS in the `<style>` section or adding your own external stylesheet.", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$user = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Handle review submission\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    // Sanitize inputs\n    $name = htmlspecialchars($_POST['name']);\n    $email = filter_var($_POST['email'], FILTER_SANITIZE_EMAIL);\n    $rating = intval($_POST['rating']);\n    $review_text = htmlspecialchars($_POST['review']);\n\n    // Validate inputs\n    if (empty($name) || empty($email) || empty($rating) || empty($review_text)) {\n        die(\"All fields are required!\");\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        die(\"Invalid email format!\");\n    }\n\n    if ($rating < 1 || $rating > 5) {\n        die(\"Rating must be between 1 and 5 stars!\");\n    }\n\n    // Insert review into database\n    try {\n        $stmt = $conn->prepare(\"INSERT INTO reviews (name, email, rating, review_text, created_at) \n                              VALUES (:name, :email, :rating, :review_text, NOW())\");\n        \n        $stmt->bindParam(':name', $name);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':review_text', $review_text);\n\n        $stmt->execute();\n    } catch (PDOException $e) {\n        die(\"Error submitting review: \" . $e->getMessage());\n    }\n}\n\n// Get all reviews\ntry {\n    $stmt = $conn->query(\"SELECT * FROM reviews ORDER BY created_at DESC\");\n    $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n} catch (PDOException $e) {\n    die(\"Error fetching reviews: \" . $e->getMessage());\n}\n\n// Calculate average rating\n$averageRating = 0;\n$totalReviews = count($reviews);\n\nif ($totalReviews > 0) {\n    $sumRatings = array_sum(array_column($reviews, 'rating'));\n    $averageRating = $sumRatings / $totalReviews;\n}\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Product Review System</title>\n    <style>\n        .rating-stars {\n            display: inline-block;\n            font-size: 24px;\n        }\n        .star {\n            color: #ddd;\n            text-decoration: none;\n        }\n        .star.active {\n            color: gold;\n        }\n        .review-form {\n            max-width: 600px;\n            margin: 20px auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        .review-list {\n            max-width: 800px;\n            margin: 20px auto;\n            padding: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"review-form\">\n        <h2>Submit Your Review</h2>\n        <form action=\"<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>\" method=\"post\">\n            <input type=\"text\" name=\"name\" placeholder=\"Your Name\" required><br><br>\n            <input type=\"email\" name=\"email\" placeholder=\"Your Email\" required><br><br>\n            \n            <div class=\"rating-stars\">\n                <a href=\"#\" class=\"star\">\u2605</a>\n                <a href=\"#\" class=\"star\">\u2605</a>\n                <a href=\"#\" class=\"star\">\u2605</a>\n                <a href=\"#\" class=\"star\">\u2605</a>\n                <a href=\"#\" class=\"star\">\u2605</a>\n            </div>\n            \n            <select name=\"rating\" required>\n                <option value=\"\">Choose Rating</option>\n                <option value=\"5\">Excellent</option>\n                <option value=\"4\">Very Good</option>\n                <option value=\"3\">Good</option>\n                <option value=\"2\">Fair</option>\n                <option value=\"1\">Poor</option>\n            </select><br><br>\n\n            <textarea name=\"review\" placeholder=\"Write your review here...\" rows=\"5\" required></textarea><br><br>\n            \n            <input type=\"submit\" value=\"Submit Review\">\n        </form>\n    </div>\n\n    <div class=\"review-list\">\n        <h2>Reviews</h2>\n        <?php if ($totalReviews > 0): ?>\n            <p>Average Rating: <?php echo number_format($averageRating, 1); ?> stars out of 5 (<?php echo $totalReviews; ?> reviews)</p>\n            \n            <?php foreach ($reviews as $review): \n                $rating = $review['rating'];\n                $stars = str_repeat(\"\u2605\", $rating) . str_repeat(\"\u2606\", 5 - $rating);\n            ?>\n                <div style=\"border-bottom: 1px solid #ccc; padding-bottom: 10px; margin-bottom: 10px;\">\n                    <h3><?php echo $review['name']; ?></h3>\n                    <p class=\"stars\"><?php echo $stars; ?></p>\n                    <p><?php echo $review['review_text']; ?></p>\n                    <small>Posted on <?php echo date('F j, Y', strtotime($review['created_at'])); ?></small>\n                </div>\n            <?php endforeach; ?>\n        <?php else: ?>\n            <p>No reviews yet. Be the first to review!</p>\n        <?php endif; ?>\n    </div>\n</body>\n</html>\n```"]}
