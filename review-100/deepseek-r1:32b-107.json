{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, so the user wants to create a user review function using PHP. Let me think about how to approach this.\n\nFirst, I need to outline what a review system typically includes. Users should be able to read reviews, write new ones, edit their own, and delete them if needed. Also, each review should display the author's name and the date it was posted or updated.\n\nI'll start by setting up a database table for the reviews. The table should have fields like id, product_id (assuming it's for a product), user_id, content, rating, creation date, and update date. This way, each review is tied to a specific product and user, making it easier to manage.\n\nNext, I'll need functions for each action: displaying reviews, adding a new one, editing an existing review, and deleting a review. Each function will interact with the database, so I'll use PDO for secure database connections to prevent SQL injection.\n\nFor displaying reviews, I'll write a function that fetches all reviews from the database where the product_id matches. Then, I'll loop through each result and output them in an HTML-friendly way, showing the author, content, rating stars, and date.\n\nWhen adding a new review, the function should check if the user is authenticated (has a user_id). It will insert the new review into the database with the current timestamp for creation. If there's an error, it should return false; otherwise, true.\n\nEditing a review is similar to adding but uses an UPDATE statement instead. The function will check if the review belongs to the logged-in user to prevent unauthorized edits. Again, it updates the content and rating and sets the updated date to the current time.\n\nDeleting a review also requires checking ownership. It uses a DELETE statement with the review's id and user_id to ensure only the author can delete their review.\n\nI should make sure all database interactions use prepared statements with placeholders to avoid SQL injection. Also, error handling is important so that any issues during database operations are caught and handled appropriately.\n\nFinally, I'll provide example usage for each function so the user knows how to integrate them into their application. This includes connecting to the database, calling the functions, and displaying any errors or success messages.\n\nI should note that this is a basic implementation and suggest additional security measures like input validation and rate limiting for a production environment. Also, adding CSS would improve the visual presentation of ratings and reviews.\n\nOverall, the goal is to provide a clear, secure, and functional review system that can be easily integrated into a PHP application.\n</think>\n\nHere's an example of a user review function in PHP:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    die(\"Could not connect to the database: \" . $e->getMessage());\n}\n\n// Function to display reviews\nfunction displayReviews($productId) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"\n            SELECT \n                r.id,\n                u.username AS author,\n                r.content,\n                r.rating,\n                r.created_at,\n                r.updated_at\n            FROM reviews r\n            JOIN users u ON r.user_id = u.id\n            WHERE r.product_id = ?\n            ORDER BY r.created_at DESC\n        \");\n        \n        $stmt->execute([$productId]);\n        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n        \n        if (empty($reviews)) {\n            echo \"<p>No reviews yet. Be the first to review this product!</p>\";\n            return;\n        }\n        \n        foreach ($reviews as $review) {\n            $date = $review['updated_at'] ? $review['updated_at'] : $review['created_at'];\n            $displayDate = date('M j, Y', strtotime($date));\n            \n            echo \"<div class='review'>\";\n                echo \"<div class='author'> Reviewed by \" . htmlspecialchars($review['author']) . \"</div>\";\n                echo \"<div class='content'>\" . nl2br(htmlspecialchars($review['content'])) . \"</div>\";\n                echo \"<div class='rating'>\";\n                    for ($i = 1; $i <= 5; $i++) {\n                        if ($i <= $review['rating']) {\n                            echo \"<span class='star'>\u2605</span>\";\n                        } else {\n                            echo \"<span class='star'>\u2606</span>\";\n                        }\n                    }\n                echo \"</div>\";\n                echo \"<div class='date'>\" . $displayDate . \"</div>\";\n            echo \"</div>\";\n        }\n    } catch(PDOException $e) {\n        die(\"Error displaying reviews: \" . $e->getMessage());\n    }\n}\n\n// Function to add a new review\nfunction addReview($productId, $userId, $content, $rating) {\n    global $conn;\n    \n    try {\n        // Check if user has already reviewed this product\n        $checkStmt = $conn->prepare(\"\n            SELECT id FROM reviews \n            WHERE product_id = ? AND user_id = ?\n        \");\n        $checkStmt->execute([$productId, $userId]);\n        \n        if ($checkStmt->rowCount() > 0) {\n            return false; // User already reviewed this product\n        }\n        \n        $stmt = $conn->prepare(\"\n            INSERT INTO reviews \n            SET \n                product_id = ?,\n                user_id = ?,\n                content = ?,\n                rating = ?,\n                created_at = NOW(),\n                updated_at = NOW()\n        \");\n        \n        return $stmt->execute([$productId, $userId, htmlspecialchars($content), $rating]);\n    } catch(PDOException $e) {\n        die(\"Error adding review: \" . $e->getMessage());\n    }\n}\n\n// Function to edit a review\nfunction editReview($reviewId, $content, $rating) {\n    global $conn;\n    \n    try {\n        // Check if the review exists and belongs to the current user\n        $checkStmt = $conn->prepare(\"\n            SELECT id FROM reviews \n            WHERE id = ? AND user_id = ?\n        \");\n        $checkStmt->execute([$reviewId, $_SESSION['user_id']]);\n        \n        if ($checkStmt->rowCount() == 0) {\n            return false; // Review not found or unauthorized\n        }\n        \n        $stmt = $conn->prepare(\"\n            UPDATE reviews \n            SET \n                content = ?,\n                rating = ?,\n                updated_at = NOW()\n            WHERE id = ?\n        \");\n        \n        return $stmt->execute([htmlspecialchars($content), $rating, $reviewId]);\n    } catch(PDOException $e) {\n        die(\"Error editing review: \" . $e->getMessage());\n    }\n}\n\n// Function to delete a review\nfunction deleteReview($reviewId) {\n    global $conn;\n    \n    try {\n        // Check if the review exists and belongs to the current user\n        $checkStmt = $conn->prepare(\"\n            SELECT id FROM reviews \n            WHERE id = ? AND user_id = ?\n        \");\n        $checkStmt->execute([$reviewId, $_SESSION['user_id']]);\n        \n        if ($checkStmt->rowCount() == 0) {\n            return false; // Review not found or unauthorized\n        }\n        \n        $stmt = $conn->prepare(\"\n            DELETE FROM reviews \n            WHERE id = ?\n        \");\n        \n        return $stmt->execute([$reviewId]);\n    } catch(PDOException $e) {\n        die(\"Error deleting review: \" . $e->getMessage());\n    }\n}\n\n?>\n```\n\nThis code provides the following functionality:\n\n1. `displayReviews()`: Displays all reviews for a given product, showing author name, content, rating stars, and date posted.\n\n2. `addReview()`: Adds a new review to the database with validation to ensure users can't submit multiple reviews for the same product.\n\n3. `editReview()`: Allows users to edit their own reviews, updating the content and/or rating.\n\n4. `deleteReview()`: Lets users delete their own reviews.\n\nTo use this code:\n\n1. Set up your database connection details at the top of the file.\n2. Make sure you have a proper user authentication system in place (required for review management functions).\n3. Call these functions as needed from your application:\n   - To display reviews: `displayReviews($productId);`\n   - To add a new review: `addReview($productId, $_SESSION['user_id'], $content, $rating);`\n   - To edit a review: `editReview($reviewId, $newContent, $newRating);`\n   - To delete a review: `deleteReview($reviewId);`\n\nNote that this is a basic implementation and you might want to add additional features such as:\n\n- Review validation (e.g., minimum/maximum content length)\n- Rate limiting\n- Review flagging/reporting system\n- Anti-spam measures\n- More sophisticated error handling\n- Input validation and sanitization\n\nMake sure to:\n- Use proper security practices (e.g., SQL injection prevention, XSS protection)\n- Implement proper user authentication\n- Add CSS styling for better visual presentation of ratings and reviews\n- Handle edge cases (e.g., non-existent products, invalid review IDs)\n\nRemember to replace placeholder values with your actual database credentials and adjust the table/column names according to your schema.", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    die(\"Could not connect to the database: \" . $e->getMessage());\n}\n\n// Function to display reviews\nfunction displayReviews($productId) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"\n            SELECT \n                r.id,\n                u.username AS author,\n                r.content,\n                r.rating,\n                r.created_at,\n                r.updated_at\n            FROM reviews r\n            JOIN users u ON r.user_id = u.id\n            WHERE r.product_id = ?\n            ORDER BY r.created_at DESC\n        \");\n        \n        $stmt->execute([$productId]);\n        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n        \n        if (empty($reviews)) {\n            echo \"<p>No reviews yet. Be the first to review this product!</p>\";\n            return;\n        }\n        \n        foreach ($reviews as $review) {\n            $date = $review['updated_at'] ? $review['updated_at'] : $review['created_at'];\n            $displayDate = date('M j, Y', strtotime($date));\n            \n            echo \"<div class='review'>\";\n                echo \"<div class='author'> Reviewed by \" . htmlspecialchars($review['author']) . \"</div>\";\n                echo \"<div class='content'>\" . nl2br(htmlspecialchars($review['content'])) . \"</div>\";\n                echo \"<div class='rating'>\";\n                    for ($i = 1; $i <= 5; $i++) {\n                        if ($i <= $review['rating']) {\n                            echo \"<span class='star'>\u2605</span>\";\n                        } else {\n                            echo \"<span class='star'>\u2606</span>\";\n                        }\n                    }\n                echo \"</div>\";\n                echo \"<div class='date'>\" . $displayDate . \"</div>\";\n            echo \"</div>\";\n        }\n    } catch(PDOException $e) {\n        die(\"Error displaying reviews: \" . $e->getMessage());\n    }\n}\n\n// Function to add a new review\nfunction addReview($productId, $userId, $content, $rating) {\n    global $conn;\n    \n    try {\n        // Check if user has already reviewed this product\n        $checkStmt = $conn->prepare(\"\n            SELECT id FROM reviews \n            WHERE product_id = ? AND user_id = ?\n        \");\n        $checkStmt->execute([$productId, $userId]);\n        \n        if ($checkStmt->rowCount() > 0) {\n            return false; // User already reviewed this product\n        }\n        \n        $stmt = $conn->prepare(\"\n            INSERT INTO reviews \n            SET \n                product_id = ?,\n                user_id = ?,\n                content = ?,\n                rating = ?,\n                created_at = NOW(),\n                updated_at = NOW()\n        \");\n        \n        return $stmt->execute([$productId, $userId, htmlspecialchars($content), $rating]);\n    } catch(PDOException $e) {\n        die(\"Error adding review: \" . $e->getMessage());\n    }\n}\n\n// Function to edit a review\nfunction editReview($reviewId, $content, $rating) {\n    global $conn;\n    \n    try {\n        // Check if the review exists and belongs to the current user\n        $checkStmt = $conn->prepare(\"\n            SELECT id FROM reviews \n            WHERE id = ? AND user_id = ?\n        \");\n        $checkStmt->execute([$reviewId, $_SESSION['user_id']]);\n        \n        if ($checkStmt->rowCount() == 0) {\n            return false; // Review not found or unauthorized\n        }\n        \n        $stmt = $conn->prepare(\"\n            UPDATE reviews \n            SET \n                content = ?,\n                rating = ?,\n                updated_at = NOW()\n            WHERE id = ?\n        \");\n        \n        return $stmt->execute([htmlspecialchars($content), $rating, $reviewId]);\n    } catch(PDOException $e) {\n        die(\"Error editing review: \" . $e->getMessage());\n    }\n}\n\n// Function to delete a review\nfunction deleteReview($reviewId) {\n    global $conn;\n    \n    try {\n        // Check if the review exists and belongs to the current user\n        $checkStmt = $conn->prepare(\"\n            SELECT id FROM reviews \n            WHERE id = ? AND user_id = ?\n        \");\n        $checkStmt->execute([$reviewId, $_SESSION['user_id']]);\n        \n        if ($checkStmt->rowCount() == 0) {\n            return false; // Review not found or unauthorized\n        }\n        \n        $stmt = $conn->prepare(\"\n            DELETE FROM reviews \n            WHERE id = ?\n        \");\n        \n        return $stmt->execute([$reviewId]);\n    } catch(PDOException $e) {\n        die(\"Error deleting review: \" . $e->getMessage());\n    }\n}\n\n?>\n```"]}
