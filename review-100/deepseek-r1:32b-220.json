{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, the user asked to create a user review function using PHP. I need to figure out what exactly they're looking for. Probably, they want a system where users can leave reviews and ratings for something, maybe products or services.\n\nFirst, I should outline the main components needed. There's the HTML part for the form where users input their reviews. Then, PHP functions to handle saving and displaying these reviews. Also, a database is necessary to store the review data.\n\nI'll start by designing the database table. It should have fields like id, product_id (assuming it's for a product), user_name, review_text, rating, and timestamp. This way, each review is tied to a specific product and includes all necessary details.\n\nNext, I need functions to add reviews. The add_review function will take parameters like product ID, user name, review text, and rating. It should check if the rating is within 1-5 and handle any database errors. Using prepared statements will help prevent SQL injection.\n\nThen, a function to fetch reviews for a specific product. This function will query the database and return an array of reviews, ordered by date so the latest ones show first. Formatting the timestamp into a readable date would be helpful for display.\n\nDisplaying the reviews is another part. The display_reviews function will loop through each review and output HTML elements. It should also calculate the average rating and display it prominently.\n\nI should include an example usage to show how these functions are called together. This helps the user understand how everything fits into their project.\n\nSecurity is important, so I'll mention using prepared statements in the add_review function to prevent SQL injection. Also, input validation for the rating ensures only valid values are stored.\n\nFinally, I'll think about possible extensions or enhancements the user might want, like allowing users to edit or delete reviews, adding more fields, or displaying reviews on different pages based on product IDs. But for now, the basic structure covers the essentials.\n</think>\n\nHere's an example of a PHP function that allows users to submit and display reviews:\n\n```php\n<?php\n// Database connection\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to add a review\nfunction add_review($product_id, $user_name, $review_text, $rating) {\n    global $conn;\n    \n    // Validate rating is between 1 and 5\n    if ($rating < 1 || $rating > 5) {\n        return false;\n    }\n    \n    try {\n        $stmt = $conn->prepare(\"INSERT INTO reviews (product_id, user_name, review_text, rating, review_date) \n                               VALUES (:product_id, :user_name, :review_text, :rating, NOW())\");\n        \n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->bindParam(':user_name', $user_name);\n        $stmt->bindParam(':review_text', $review_text);\n        $stmt->bindParam(':rating', $rating);\n        \n        $stmt->execute();\n        return true;\n    } catch (PDOException $e) {\n        echo \"Error adding review: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to get reviews for a product\nfunction get_reviews($product_id) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT * FROM reviews WHERE product_id = :product_id ORDER BY review_date DESC\");\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->execute();\n        \n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch (PDOException $e) {\n        echo \"Error fetching reviews: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to display reviews\nfunction display_reviews($product_id) {\n    $reviews = get_reviews($product_id);\n    \n    if (!$reviews) {\n        echo \"<p>No reviews yet. Be the first to review this product!</p>\";\n        return;\n    }\n    \n    $total_rating = 0;\n    \n    echo \"<div class='reviews'>\";\n    foreach ($reviews as $review) {\n        $rating = $review['rating'];\n        $user_name = $review['user_name'];\n        $review_text = $review['review_text'];\n        $date = date('M j, Y g:i a', strtotime($review['review_date']));\n        \n        echo \"<div class='review'>\";\n        echo \"<h4>$user_name</h4>\";\n        echo \"<p>Rating: $rating/5</p>\";\n        echo \"<p>$review_text</p>\";\n        echo \"<small>$date</small>\";\n        echo \"</div>\";\n        \n        $total_rating += $rating;\n    }\n    \n    // Calculate average rating\n    $average_rating = $reviews ? round($total_rating / count($reviews), 1) : 0;\n    echo \"<div class='average-rating'>\";\n    echo \"<h3>Average Rating: $average_rating/5</h3>\";\n    echo \"</div>\";\n    echo \"</div>\";\n}\n\n// Example usage:\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product Reviews</title>\n    <style>\n        .review {\n            border: 1px solid #ddd;\n            padding: 10px;\n            margin-bottom: 10px;\n            background-color: #f9f9f9;\n        }\n        .average-rating {\n            margin-top: 20px;\n            padding: 15px;\n            background-color: #e6e6e6;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n\n<?php\n// Display review form and reviews for product ID 1\n$product_id = 1;\n\n// Check if form is submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $user_name = $_POST['user_name'];\n    $review_text = $_POST['review_text'];\n    $rating = $_POST['rating'];\n    \n    if (add_review($product_id, $user_name, $review_text, $rating)) {\n        echo \"<p>Thank you for submitting your review!</p>\";\n    } else {\n        echo \"<p>Error submitting review. Please try again.</p>\";\n    }\n}\n\n// Display review form\n?>\n\n<form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">\n    <h2>Write a Review</h2>\n    <input type=\"text\" name=\"user_name\" placeholder=\"Your Name\" required><br><br>\n    <textarea name=\"review_text\" placeholder=\"Your Review\" required></textarea><br><br>\n    <select name=\"rating\" required>\n        <option value=\"\">Select Rating</option>\n        <option value=\"5\">5 Stars</option>\n        <option value=\"4\">4 Stars</option>\n        <option value=\"3\">3 Stars</option>\n        <option value=\"2\">2 Stars</option>\n        <option value=\"1\">1 Star</option>\n    </select><br><br>\n    <button type=\"submit\" name=\"submit\">Submit Review</button>\n</form>\n\n<!-- Display existing reviews -->\n<h2>Product Reviews</h2>\n<?php display_reviews($product_id); ?>\n\n</body>\n</html>\n```\n\nThis code creates a complete review system with the following features:\n\n1. Users can submit reviews with:\n   - Their name\n   - Review text\n   - Rating (1-5 stars)\n\n2. Reviews are stored in a database\n\n3. The system displays:\n   - All reviews for a product\n   - Average rating\n   - Timestamp of each review\n\n4. Includes basic validation:\n   - Ensures ratings are between 1 and 5\n   - Required fields are marked as required\n\nTo use this code:\n\n1. Create a database named `reviews_db`\n\n2. Create a table in the database with the following structure:\n\n```sql\nCREATE TABLE reviews (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    product_id INT NOT NULL,\n    user_name VARCHAR(255) NOT NULL,\n    review_text TEXT NOT NULL,\n    rating INT NOT NULL,\n    review_date DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n3. Update the database connection details in the code\n\n4. Save it as a PHP file and access it through your web server\n\nThe system includes:\n\n- Frontend form for submitting reviews\n- Backend processing of review submissions\n- Display of all reviews with average rating\n- Basic styling to make it look clean\n\nYou can customize the styling by modifying the CSS in the `<style>` section.\n\nFeatures you might want to add:\n\n1. User authentication\n2. Review editing and deletion\n3. More detailed user profiles\n4. Sorting and filtering options for reviews\n5. Validation on the client-side\n6. Image uploads for reviews\n7. Reporting system for inappropriate reviews\n\nRemember to secure your application by:\n- Sanitizing inputs\n- Using prepared statements (which is already implemented in this code)\n- Validating all user input\n- Implementing proper error handling", "code_blocks": ["```php\n<?php\n// Database connection\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to add a review\nfunction add_review($product_id, $user_name, $review_text, $rating) {\n    global $conn;\n    \n    // Validate rating is between 1 and 5\n    if ($rating < 1 || $rating > 5) {\n        return false;\n    }\n    \n    try {\n        $stmt = $conn->prepare(\"INSERT INTO reviews (product_id, user_name, review_text, rating, review_date) \n                               VALUES (:product_id, :user_name, :review_text, :rating, NOW())\");\n        \n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->bindParam(':user_name', $user_name);\n        $stmt->bindParam(':review_text', $review_text);\n        $stmt->bindParam(':rating', $rating);\n        \n        $stmt->execute();\n        return true;\n    } catch (PDOException $e) {\n        echo \"Error adding review: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to get reviews for a product\nfunction get_reviews($product_id) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT * FROM reviews WHERE product_id = :product_id ORDER BY review_date DESC\");\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->execute();\n        \n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch (PDOException $e) {\n        echo \"Error fetching reviews: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to display reviews\nfunction display_reviews($product_id) {\n    $reviews = get_reviews($product_id);\n    \n    if (!$reviews) {\n        echo \"<p>No reviews yet. Be the first to review this product!</p>\";\n        return;\n    }\n    \n    $total_rating = 0;\n    \n    echo \"<div class='reviews'>\";\n    foreach ($reviews as $review) {\n        $rating = $review['rating'];\n        $user_name = $review['user_name'];\n        $review_text = $review['review_text'];\n        $date = date('M j, Y g:i a', strtotime($review['review_date']));\n        \n        echo \"<div class='review'>\";\n        echo \"<h4>$user_name</h4>\";\n        echo \"<p>Rating: $rating/5</p>\";\n        echo \"<p>$review_text</p>\";\n        echo \"<small>$date</small>\";\n        echo \"</div>\";\n        \n        $total_rating += $rating;\n    }\n    \n    // Calculate average rating\n    $average_rating = $reviews ? round($total_rating / count($reviews), 1) : 0;\n    echo \"<div class='average-rating'>\";\n    echo \"<h3>Average Rating: $average_rating/5</h3>\";\n    echo \"</div>\";\n    echo \"</div>\";\n}\n\n// Example usage:\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product Reviews</title>\n    <style>\n        .review {\n            border: 1px solid #ddd;\n            padding: 10px;\n            margin-bottom: 10px;\n            background-color: #f9f9f9;\n        }\n        .average-rating {\n            margin-top: 20px;\n            padding: 15px;\n            background-color: #e6e6e6;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n\n<?php\n// Display review form and reviews for product ID 1\n$product_id = 1;\n\n// Check if form is submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $user_name = $_POST['user_name'];\n    $review_text = $_POST['review_text'];\n    $rating = $_POST['rating'];\n    \n    if (add_review($product_id, $user_name, $review_text, $rating)) {\n        echo \"<p>Thank you for submitting your review!</p>\";\n    } else {\n        echo \"<p>Error submitting review. Please try again.</p>\";\n    }\n}\n\n// Display review form\n?>\n\n<form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">\n    <h2>Write a Review</h2>\n    <input type=\"text\" name=\"user_name\" placeholder=\"Your Name\" required><br><br>\n    <textarea name=\"review_text\" placeholder=\"Your Review\" required></textarea><br><br>\n    <select name=\"rating\" required>\n        <option value=\"\">Select Rating</option>\n        <option value=\"5\">5 Stars</option>\n        <option value=\"4\">4 Stars</option>\n        <option value=\"3\">3 Stars</option>\n        <option value=\"2\">2 Stars</option>\n        <option value=\"1\">1 Star</option>\n    </select><br><br>\n    <button type=\"submit\" name=\"submit\">Submit Review</button>\n</form>\n\n<!-- Display existing reviews -->\n<h2>Product Reviews</h2>\n<?php display_reviews($product_id); ?>\n\n</body>\n</html>\n```", null]}
