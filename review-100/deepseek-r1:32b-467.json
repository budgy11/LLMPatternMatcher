{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, so the user wants to create a user review function using PHP. Let me think about how to approach this.\n\nFirst, I need to outline what a review system typically includes. It usually involves allowing users to submit reviews and ratings, displaying these reviews, calculating an average rating, and maybe handling the display of stars for visual appeal.\n\nI'll start by considering the database structure. There should be a table for reviews that includes fields like review_id, user_id, product_id (or service_id), rating, comment, and timestamp. This way, each review is tied to a specific user and item.\n\nNext, I need functions for adding a review and retrieving them. For adding, the function should take parameters like user ID, product ID, rating, and comment. It needs to check if the user has already reviewed that product to prevent multiple submissions. Then, it inserts the new review into the database.\n\nFor retrieving reviews, another function will fetch all reviews for a specific product. This involves a SQL query that joins the reviews table with the users table to get user details like name and avatar. The result should include each review's details along with the average rating and total reviews count.\n\nDisplaying the reviews on a webpage is essential. I'll need an HTML structure that loops through each review, showing user info, stars based on their rating, the comment, and timestamp. Using PHP within HTML, I can dynamically generate this content.\n\nCalculating the average rating is another key part. The function should compute the mean rating from all reviews for a product. If there are no reviews, it returns zero to avoid division by zero errors.\n\nFor visual feedback, displaying stars based on ratings makes sense. A helper function can take a numerical rating and output HTML star emojis. Full stars up to the integer part and a half-star if there's a fractional part adds a nice touch.\n\nI should also handle cases where no reviews exist yet, showing a message like \"No reviews available\" instead of an empty list.\n\nTesting each part is important. I'll make sure that adding a review works without duplicates, retrieving them displays correctly with user details and stars, and the average rating is accurate.\n\nFinally, considering security aspects like SQL injection by using prepared statements would be good, but for simplicity, placeholders are used here. In a real-world scenario, prepared statements or ORM would be better to prevent SQL injection.\n\nPutting it all together, I can structure the PHP code with functions for adding and retrieving reviews, calculate averages, and display them dynamically on an HTML page. This should provide a functional review system that users can interact with.\n</think>\n\nHere's an example of a user review function in PHP:\n\n```php\n<?php\n// Connect to database\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to add a review\nfunction addReview($user_id, $product_id, $rating, $comment) {\n    global $conn;\n    \n    // Check if user has already reviewed this product\n    $stmt = $conn->prepare(\"SELECT * FROM reviews WHERE user_id = :user_id AND product_id = :product_id\");\n    $stmt->execute(['user_id' => $user_id, 'product_id' => $product_id]);\n    \n    if ($stmt->rowCount() > 0) {\n        return \"You have already reviewed this product!\";\n    }\n    \n    // Insert new review\n    $sql = \"INSERT INTO reviews (user_id, product_id, rating, comment, review_date)\n            VALUES (:user_id, :product_id, :rating, :comment, NOW())\";\n    $stmt = $conn->prepare($sql);\n    $result = $stmt->execute([\n        'user_id' => $user_id,\n        'product_id' => $product_id,\n        'rating' => $rating,\n        'comment' => $comment\n    ]);\n    \n    if ($result) {\n        return \"Review added successfully!\";\n    } else {\n        return \"Error adding review!\";\n    }\n}\n\n// Function to get reviews for a product\nfunction getProductReviews($product_id) {\n    global $conn;\n    \n    // Get all reviews and user details for the given product\n    $sql = \"SELECT r.*, u.user_name, u.avatar FROM reviews r \n            JOIN users u ON r.user_id = u.user_id \n            WHERE r.product_id = :product_id \n            ORDER BY review_date DESC\";\n    \n    $stmt = $conn->prepare($sql);\n    $stmt->execute(['product_id' => $product_id]);\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\n\n// Function to calculate average rating\nfunction getAverageRating($product_id) {\n    global $conn;\n    \n    $sql = \"SELECT AVG(rating) as average_rating FROM reviews WHERE product_id = :product_id\";\n    $stmt = $conn->prepare($sql);\n    $stmt->execute(['product_id' => $product_id]);\n    $result = $stmt->fetch(PDO::FETCH_ASSOC);\n    \n    return $result['average_rating'] ?: 0;\n}\n\n// Example usage:\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    // Add a new review\n    $review_result = addReview($_POST['user_id'], $_POST['product_id'], $_POST['rating'], $_POST['comment']);\n    echo $review_result;\n}\n\n// Display reviews for a product\n$product_id = 1; // Example product ID\n$reviews = getProductReviews($product_id);\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Product Reviews</title>\n    <style>\n        .review-container {\n            border: 1px solid #ddd;\n            padding: 20px;\n            margin-bottom: 20px;\n        }\n        .user-info {\n            display: flex;\n            align-items: center;\n            margin-bottom: 15px;\n        }\n        .avatar {\n            width: 40px;\n            height: 40px;\n            border-radius: 50%;\n            margin-right: 15px;\n        }\n        .stars {\n            color: #FFD700;\n        }\n    </style>\n</head>\n<body>\n    <?php if (!empty($reviews)): ?>\n        <h2>Product Reviews (<?php echo count($reviews); ?>)</h2>\n        \n        <?php foreach ($reviews as $review): \n            $average_rating = getAverageRating($product_id);\n        ?>\n            <div class=\"review-container\">\n                <div class=\"user-info\">\n                    <img src=\"<?php echo $review['avatar']; ?>\" alt=\"User Avatar\" class=\"avatar\">\n                    <h3><?php echo $review['user_name']; ?></h3>\n                </div>\n                \n                <!-- Display stars -->\n                <?php \n                function displayStars($rating) {\n                    $full_stars = floor($rating);\n                    $has_half_star = ($rating - $full_stars) >= 0.5;\n                    \n                    echo str_repeat('\u2605', $full_stars);\n                    if ($has_half_star) {\n                        echo '\u2be8';\n                    }\n                }\n                \n                displayStars($review['rating']);\n                ?>\n                \n                <p><?php echo $review['comment']; ?></p>\n                <small>Reviewed on: <?php echo date('F j, Y', strtotime($review['review_date'])); ?></small>\n            </div>\n        <?php endforeach; ?>\n    <?php else: ?>\n        <h2>No reviews available</h2>\n    <?php endif; ?>\n\n</body>\n</html>\n```\n\nThis code provides:\n\n1. A review submission function (`addReview()`)\n2. A function to retrieve product reviews (`getProductReviews()`)\n3. A function to calculate average ratings (`getAverageRating()`)\n4. Front-end display of reviews with user information, ratings (displayed as stars), and comments\n5. Basic error handling for duplicate reviews\n\nTo use this code:\n\n1. Replace the database connection details with your own\n2. Create a `users` table in your database with at least these columns: `user_id`, `user_name`, `avatar`\n3. Create a `reviews` table with these columns:\n   - review_id (INT, AUTO_INCREMENT)\n   - user_id (INT)\n   - product_id (INT)\n   - rating (FLOAT)\n   - comment (TEXT)\n   - review_date (DATETIME)\n\nFeatures:\n\n- Prevents users from submitting multiple reviews for the same product\n- Displays user avatar and name with each review\n- Shows star ratings based on numerical scores\n- Orders reviews by submission date (most recent first)\n- Calculates average rating for a product\n\nTo submit a review, you can use a form like this:\n\n```html\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product_id; ?>\">\n    \n    <div class=\"form-group\">\n        <label for=\"rating\">Rating:</label>\n        <select id=\"rating\" name=\"rating\" required>\n            <option value=\"\">Choose a rating</option>\n            <option value=\"5\">\u2605 \u2605 \u2605 \u2605 \u2605 (5)</option>\n            <option value=\"4.5\">\u2605 \u2605 \u2605 \u2605\u2be8 (4.5)</option>\n            <option value=\"4\">\u2605 \u2605 \u2605 \u2605 (4)</option>\n            <option value=\"3.5\">\u2605 \u2605 \u2605\u2be8 (3.5)</option>\n            <option value=\"3\">\u2605 \u2605 \u2605 (3)</option>\n            <option value=\"2.5\">\u2605 \u2605\u2be8 (2.5)</option>\n            <option value=\"2\">\u2605 \u2605 (2)</option>\n            <option value=\"1.5\">\u2605\u2be8 (1.5)</option>\n            <option value=\"1\">\u2605 (1)</option>\n        </select>\n    </div>\n\n    <div class=\"form-group\">\n        <label for=\"comment\">Review:</label>\n        <textarea id=\"comment\" name=\"comment\" required></textarea>\n    </div>\n\n    <button type=\"submit\">Submit Review</button>\n</form>\n```\n\nNote: Make sure to include proper validation and security measures (like CSRF protection) in a production environment.", "code_blocks": ["```php\n<?php\n// Connect to database\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to add a review\nfunction addReview($user_id, $product_id, $rating, $comment) {\n    global $conn;\n    \n    // Check if user has already reviewed this product\n    $stmt = $conn->prepare(\"SELECT * FROM reviews WHERE user_id = :user_id AND product_id = :product_id\");\n    $stmt->execute(['user_id' => $user_id, 'product_id' => $product_id]);\n    \n    if ($stmt->rowCount() > 0) {\n        return \"You have already reviewed this product!\";\n    }\n    \n    // Insert new review\n    $sql = \"INSERT INTO reviews (user_id, product_id, rating, comment, review_date)\n            VALUES (:user_id, :product_id, :rating, :comment, NOW())\";\n    $stmt = $conn->prepare($sql);\n    $result = $stmt->execute([\n        'user_id' => $user_id,\n        'product_id' => $product_id,\n        'rating' => $rating,\n        'comment' => $comment\n    ]);\n    \n    if ($result) {\n        return \"Review added successfully!\";\n    } else {\n        return \"Error adding review!\";\n    }\n}\n\n// Function to get reviews for a product\nfunction getProductReviews($product_id) {\n    global $conn;\n    \n    // Get all reviews and user details for the given product\n    $sql = \"SELECT r.*, u.user_name, u.avatar FROM reviews r \n            JOIN users u ON r.user_id = u.user_id \n            WHERE r.product_id = :product_id \n            ORDER BY review_date DESC\";\n    \n    $stmt = $conn->prepare($sql);\n    $stmt->execute(['product_id' => $product_id]);\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\n\n// Function to calculate average rating\nfunction getAverageRating($product_id) {\n    global $conn;\n    \n    $sql = \"SELECT AVG(rating) as average_rating FROM reviews WHERE product_id = :product_id\";\n    $stmt = $conn->prepare($sql);\n    $stmt->execute(['product_id' => $product_id]);\n    $result = $stmt->fetch(PDO::FETCH_ASSOC);\n    \n    return $result['average_rating'] ?: 0;\n}\n\n// Example usage:\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    // Add a new review\n    $review_result = addReview($_POST['user_id'], $_POST['product_id'], $_POST['rating'], $_POST['comment']);\n    echo $review_result;\n}\n\n// Display reviews for a product\n$product_id = 1; // Example product ID\n$reviews = getProductReviews($product_id);\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Product Reviews</title>\n    <style>\n        .review-container {\n            border: 1px solid #ddd;\n            padding: 20px;\n            margin-bottom: 20px;\n        }\n        .user-info {\n            display: flex;\n            align-items: center;\n            margin-bottom: 15px;\n        }\n        .avatar {\n            width: 40px;\n            height: 40px;\n            border-radius: 50%;\n            margin-right: 15px;\n        }\n        .stars {\n            color: #FFD700;\n        }\n    </style>\n</head>\n<body>\n    <?php if (!empty($reviews)): ?>\n        <h2>Product Reviews (<?php echo count($reviews); ?>)</h2>\n        \n        <?php foreach ($reviews as $review): \n            $average_rating = getAverageRating($product_id);\n        ?>\n            <div class=\"review-container\">\n                <div class=\"user-info\">\n                    <img src=\"<?php echo $review['avatar']; ?>\" alt=\"User Avatar\" class=\"avatar\">\n                    <h3><?php echo $review['user_name']; ?></h3>\n                </div>\n                \n                <!-- Display stars -->\n                <?php \n                function displayStars($rating) {\n                    $full_stars = floor($rating);\n                    $has_half_star = ($rating - $full_stars) >= 0.5;\n                    \n                    echo str_repeat('\u2605', $full_stars);\n                    if ($has_half_star) {\n                        echo '\u2be8';\n                    }\n                }\n                \n                displayStars($review['rating']);\n                ?>\n                \n                <p><?php echo $review['comment']; ?></p>\n                <small>Reviewed on: <?php echo date('F j, Y', strtotime($review['review_date'])); ?></small>\n            </div>\n        <?php endforeach; ?>\n    <?php else: ?>\n        <h2>No reviews available</h2>\n    <?php endif; ?>\n\n</body>\n</html>\n```", null]}
