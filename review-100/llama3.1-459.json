{"prompt": "Create a user review function using php", "llm_output": "Here's an example of how you can create a simple user review system in PHP. This system allows users to submit reviews for products, and also displays the average rating of each product.\n\n**Database Setup**\n\nFirst, let's set up our database with the necessary tables:\n\n```sql\nCREATE TABLE Users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE Products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT\n);\n\nCREATE TABLE Reviews (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    product_id INT,\n    user_id INT,\n    rating TINYINT,\n    review TEXT,\n    FOREIGN KEY (product_id) REFERENCES Products(id),\n    FOREIGN KEY (user_id) REFERENCES Users(id)\n);\n```\n\n**PHP Code**\n\nNext, let's create the PHP code to handle reviews. We'll use a class-based approach for simplicity.\n\n```php\n// ReviewSystem.php\n\nclass ReviewSystem {\n    private $db;\n\n    public function __construct() {\n        // Connect to database\n        $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');\n    }\n\n    /**\n     * Get all reviews for a product.\n     *\n     * @param int $productId Product ID\n     */\n    public function getReviews($productId) {\n        $stmt = $this->db->prepare('SELECT r.id, u.name, r.rating, r.review FROM Reviews r INNER JOIN Users u ON r.user_id = u.id WHERE r.product_id = ?');\n        $stmt->execute([$productId]);\n        return $stmt->fetchAll();\n    }\n\n    /**\n     * Get the average rating of a product.\n     *\n     * @param int $productId Product ID\n     */\n    public function getAverageRating($productId) {\n        $stmt = $this->db->prepare('SELECT AVG(r.rating) AS avg_rating FROM Reviews r WHERE r.product_id = ?');\n        $stmt->execute([$productId]);\n        return $stmt->fetchColumn();\n    }\n\n    /**\n     * Add a new review.\n     *\n     * @param int $productId Product ID\n     * @param string $review Review text\n     * @param int $rating Rating (1-5)\n     */\n    public function addReview($productId, $review, $rating) {\n        if ($this->isUserLoggedIn()) {\n            // Insert review into database\n            $stmt = $this->db->prepare('INSERT INTO Reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)');\n            $stmt->execute([$productId, $_SESSION['id'], $rating, $review]);\n        } else {\n            // User is not logged in\n        }\n    }\n\n    /**\n     * Check if the user is logged in.\n     */\n    private function isUserLoggedIn() {\n        return isset($_SESSION['id']);\n    }\n}\n```\n\n**Example Usage**\n\n```php\n// index.php\n\nrequire_once 'ReviewSystem.php';\n\n$reviewSystem = new ReviewSystem();\n\nif (isset($_GET['product_id'])) {\n    $productId = $_GET['product_id'];\n    $reviews = $reviewSystem->getReviews($productId);\n} else {\n    // No product ID provided\n}\n\nif (isset($_POST['submit'])) {\n    $productId = $_POST['product_id'];\n    $review = $_POST['review'];\n    $rating = $_POST['rating'];\n\n    $reviewSystem->addReview($productId, $review, $rating);\n\n    header('Location: index.php?product_id=' . $productId);\n    exit;\n}\n```\n\nThis is a basic example of how you can create a user review system in PHP. You can customize and extend it as needed to fit your specific requirements.\n\nNote that this example assumes you have the necessary database setup and PHP extensions installed (such as PDO). Also, make sure to replace `'username'`, `'password'` with your actual database credentials.", "code_blocks": [null, "```php\n// ReviewSystem.php\n\nclass ReviewSystem {\n    private $db;\n\n    public function __construct() {\n        // Connect to database\n        $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');\n    }\n\n    /**\n     * Get all reviews for a product.\n     *\n     * @param int $productId Product ID\n     */\n    public function getReviews($productId) {\n        $stmt = $this->db->prepare('SELECT r.id, u.name, r.rating, r.review FROM Reviews r INNER JOIN Users u ON r.user_id = u.id WHERE r.product_id = ?');\n        $stmt->execute([$productId]);\n        return $stmt->fetchAll();\n    }\n\n    /**\n     * Get the average rating of a product.\n     *\n     * @param int $productId Product ID\n     */\n    public function getAverageRating($productId) {\n        $stmt = $this->db->prepare('SELECT AVG(r.rating) AS avg_rating FROM Reviews r WHERE r.product_id = ?');\n        $stmt->execute([$productId]);\n        return $stmt->fetchColumn();\n    }\n\n    /**\n     * Add a new review.\n     *\n     * @param int $productId Product ID\n     * @param string $review Review text\n     * @param int $rating Rating (1-5)\n     */\n    public function addReview($productId, $review, $rating) {\n        if ($this->isUserLoggedIn()) {\n            // Insert review into database\n            $stmt = $this->db->prepare('INSERT INTO Reviews (product_id, user_id, rating, review) VALUES (?, ?, ?, ?)');\n            $stmt->execute([$productId, $_SESSION['id'], $rating, $review]);\n        } else {\n            // User is not logged in\n        }\n    }\n\n    /**\n     * Check if the user is logged in.\n     */\n    private function isUserLoggedIn() {\n        return isset($_SESSION['id']);\n    }\n}\n```", "```php\n// index.php\n\nrequire_once 'ReviewSystem.php';\n\n$reviewSystem = new ReviewSystem();\n\nif (isset($_GET['product_id'])) {\n    $productId = $_GET['product_id'];\n    $reviews = $reviewSystem->getReviews($productId);\n} else {\n    // No product ID provided\n}\n\nif (isset($_POST['submit'])) {\n    $productId = $_POST['product_id'];\n    $review = $_POST['review'];\n    $rating = $_POST['rating'];\n\n    $reviewSystem->addReview($productId, $review, $rating);\n\n    header('Location: index.php?product_id=' . $productId);\n    exit;\n}\n```"]}
