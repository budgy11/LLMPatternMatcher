{"prompt": "Create a user review function using php", "llm_output": "```php\n<?php\n\n/**\n * User Review Function\n *\n * This function allows you to collect and display user reviews.\n * It handles input validation, data storage (simplified for demonstration),\n * and basic output formatting.\n *\n * @param string $productId The ID of the product being reviewed.\n * @param string $reviewerName The name of the reviewer.\n * @param string $reviewText The review text submitted by the reviewer.\n * @param array $rating A numeric rating (e.g., 1-5).\n *\n * @return void  Prints the review to the console (for demonstration).  In a real\n *               application, you would typically store this data in a database.\n */\nfunction createReview(string $productId, string $reviewerName, string $reviewText, array $rating) {\n\n  // Input Validation (Important!)\n  if (empty($productId)) {\n    echo \"Error: Product ID cannot be empty.\\n\";\n    return;\n  }\n  if (empty($reviewerName)) {\n    echo \"Error: Reviewer Name cannot be empty.\\n\";\n    return;\n  }\n  if (empty($reviewText)) {\n    echo \"Error: Review Text cannot be empty.\\n\";\n    return;\n  }\n  if (!is_array($rating) || count($rating) !== 1) {\n    echo \"Error: Rating must be a single numeric value (e.g., 1-5).\\n\";\n    return;\n  }\n  if (!is_numeric($rating[0])) {\n    echo \"Error: Rating must be a numeric value.\\n\";\n    return;\n  }\n  if ($rating[0] < 1 || $rating[0] > 5) {\n    echo \"Error: Rating must be between 1 and 5.\\n\";\n    return;\n  }\n\n  // Data Storage (Simplified - Replace with Database Integration)\n  $review = [\n    'productId' => $productId,\n    'reviewerName' => $reviewerName,\n    'reviewText' => $reviewText,\n    'rating' => $rating[0]\n  ];\n\n  // Output/Display the review (replace with your desired presentation)\n  echo \"Review for Product ID: \" . $productId . \"\\n\";\n  echo \"Reviewer: \" . $reviewerName . \"\\n\";\n  echo \"Rating: \" . $rating[0] . \" / 5\\n\";\n  echo \"Review Text: \" . $reviewText . \"\\n\";\n  echo \"---\\n\";\n}\n\n\n// Example Usage:\ncreateReview(\"P123\", \"John Doe\", \"Great product!  Exactly what I needed.\", [5]);\ncreateReview(\"P456\", \"Jane Smith\", \"Could be better, but decent.\", [3]);\ncreateReview(\"P789\", \"Peter Jones\", \"Amazing!  Highly recommended.\", [5]);\ncreateReview(\"P101\", \"Alice Brown\", \"It's okay.\", [2]);\n\n// Example of invalid input:\ncreateReview(\"\", \"Invalid Name\", \"Review Text\", [4]); // Empty Product ID\ncreateReview(\"P999\", \"\", \"Review Text\", [6]); // Empty Reviewer Name\ncreateReview(\"P111\", \"Test User\", \"Invalid Rating\", [1, 2]); // Invalid rating format\ncreateReview(\"P222\", \"User\", \"Review\", [\"abc\"]); // Invalid rating type\n?>\n```\n\nKey improvements and explanations:\n\n* **Clear Function Definition and Docblock:**  The code starts with a well-defined function `createReview` that clearly specifies its purpose and parameters.  The docblock (`/** ... */`) explains the function's purpose, parameters, and return value.  This makes the code easier to understand and use.\n* **Input Validation:** This is *crucial* for security and data integrity.  The function now performs comprehensive input validation:\n    * **Empty Strings:** Checks if `productId`, `reviewerName`, or `reviewText` are empty strings.\n    * **Rating Format:**  Ensures the `rating` parameter is an array with a single numeric element.\n    * **Numeric Rating:** Checks that the rating is a valid number.\n    * **Rating Range:** Validates that the rating is within the allowed range (1-5).  Without this, a user could enter a rating of 6 or -1, causing problems.\n* **Data Structure:** Uses an associative array (`$review`) to store the review data.  This is more organized and readable than separate variables.\n* **Clear Output Formatting:** The example output is formatted nicely to clearly display the review details.\n* **Example Usage:**  The code includes several example calls to the `createReview` function, demonstrating how to use it and how the output looks. It also demonstrates examples of invalid input to show how the validation works.\n* **Security Considerations (Important):**  While this example is simplified for demonstration purposes, *never* directly insert user input into a database or other system without proper escaping and sanitization. This prevents SQL injection attacks and cross-site scripting (XSS) vulnerabilities. In a real application, use prepared statements or appropriate escaping functions provided by your database library.\n* **Error Handling:** The function prints error messages to the console if the input is invalid.  This provides feedback to the user and helps to debug the application.  In a production environment, you might use a more sophisticated error handling mechanism (e.g., logging errors to a file or database).\n* **Readability and Comments:** The code is well-formatted and commented to improve readability and understanding.\n\nHow to use it in a real web application (conceptual outline):\n\n1. **Form Submission:**  A user submits a form with the product ID, reviewer name, review text, and rating.\n2. **Retrieve Data:** The PHP script receives the form data.\n3. **Call `createReview`:**  The script calls the `createReview` function, passing the retrieved data as arguments.\n4. **Database Integration:**  Instead of the simplified `$review` array, you would:\n   * Use a database connection (e.g., using `mysqli` or a PDO connection).\n   * Prepare an SQL statement to insert the review data into a `reviews` table in your database.\n   * Use prepared statements to prevent SQL injection.\n5. **Display the Review:**  After saving the review to the database, you would retrieve the review data from the database and display it on the page.\n\nThis improved version provides a robust and secure foundation for creating user reviews in a PHP application. Remember to adapt it to your specific application requirements and implement proper security measures.  Always prioritize data validation and sanitization to protect your application from vulnerabilities.\n", "code_blocks": ["```php\n<?php\n\n/**\n * User Review Function\n *\n * This function allows you to collect and display user reviews.\n * It handles input validation, data storage (simplified for demonstration),\n * and basic output formatting.\n *\n * @param string $productId The ID of the product being reviewed.\n * @param string $reviewerName The name of the reviewer.\n * @param string $reviewText The review text submitted by the reviewer.\n * @param array $rating A numeric rating (e.g., 1-5).\n *\n * @return void  Prints the review to the console (for demonstration).  In a real\n *               application, you would typically store this data in a database.\n */\nfunction createReview(string $productId, string $reviewerName, string $reviewText, array $rating) {\n\n  // Input Validation (Important!)\n  if (empty($productId)) {\n    echo \"Error: Product ID cannot be empty.\\n\";\n    return;\n  }\n  if (empty($reviewerName)) {\n    echo \"Error: Reviewer Name cannot be empty.\\n\";\n    return;\n  }\n  if (empty($reviewText)) {\n    echo \"Error: Review Text cannot be empty.\\n\";\n    return;\n  }\n  if (!is_array($rating) || count($rating) !== 1) {\n    echo \"Error: Rating must be a single numeric value (e.g., 1-5).\\n\";\n    return;\n  }\n  if (!is_numeric($rating[0])) {\n    echo \"Error: Rating must be a numeric value.\\n\";\n    return;\n  }\n  if ($rating[0] < 1 || $rating[0] > 5) {\n    echo \"Error: Rating must be between 1 and 5.\\n\";\n    return;\n  }\n\n  // Data Storage (Simplified - Replace with Database Integration)\n  $review = [\n    'productId' => $productId,\n    'reviewerName' => $reviewerName,\n    'reviewText' => $reviewText,\n    'rating' => $rating[0]\n  ];\n\n  // Output/Display the review (replace with your desired presentation)\n  echo \"Review for Product ID: \" . $productId . \"\\n\";\n  echo \"Reviewer: \" . $reviewerName . \"\\n\";\n  echo \"Rating: \" . $rating[0] . \" / 5\\n\";\n  echo \"Review Text: \" . $reviewText . \"\\n\";\n  echo \"---\\n\";\n}\n\n\n// Example Usage:\ncreateReview(\"P123\", \"John Doe\", \"Great product!  Exactly what I needed.\", [5]);\ncreateReview(\"P456\", \"Jane Smith\", \"Could be better, but decent.\", [3]);\ncreateReview(\"P789\", \"Peter Jones\", \"Amazing!  Highly recommended.\", [5]);\ncreateReview(\"P101\", \"Alice Brown\", \"It's okay.\", [2]);\n\n// Example of invalid input:\ncreateReview(\"\", \"Invalid Name\", \"Review Text\", [4]); // Empty Product ID\ncreateReview(\"P999\", \"\", \"Review Text\", [6]); // Empty Reviewer Name\ncreateReview(\"P111\", \"Test User\", \"Invalid Rating\", [1, 2]); // Invalid rating format\ncreateReview(\"P222\", \"User\", \"Review\", [\"abc\"]); // Invalid rating type\n?>\n```"]}
