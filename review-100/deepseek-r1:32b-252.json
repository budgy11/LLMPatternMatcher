{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, so the user wants to create a user review function using PHP. Let me think about how to approach this.\n\nFirst, I need to understand what a review system entails. It usually involves allowing users to submit their reviews and ratings, displaying these reviews on a page, and perhaps calculating an average rating. So, the main components are submission, storage, retrieval, and display.\n\nI should start by setting up a database table to store the reviews. The table needs fields like review ID, user ID, product ID (or service ID), the review text, rating, and timestamp. This way, each review is associated with a specific user and product.\n\nNext, I'll need functions for adding a review. The function should take user input, validate it to ensure all required fields are present and within acceptable ranges (like rating between 1 and 5). Then, insert this data into the database using SQL. Using prepared statements would be good to prevent SQL injection.\n\nThen, displaying the reviews is important. Another function can fetch all reviews for a specific product from the database. It should retrieve the user's name or username along with the review details so that each comment is attributed correctly. This function will return an array of reviews which can then be looped through and displayed on the webpage.\n\nCalculating the average rating is another key part. A separate function can compute this by summing all ratings for a product and dividing by the number of reviews. If there are no reviews, it should handle that case to avoid division by zero errors.\n\nI should also consider displaying the average rating in a user-friendly way, maybe as stars. That would involve creating a helper function to generate HTML elements like spans or divs with star icons based on the rating value.\n\nLooking at security, it's important to validate and sanitize user inputs to prevent SQL injection and XSS attacks. Using prepared statements helps with SQL injection, and functions like htmlspecialchars can escape output to prevent XSS.\n\nAdditionally, handling different scenarios is essential. For example, what if a user tries to post an empty review or an invalid rating? The function should return errors in such cases so the application can inform the user.\n\nTesting each part step by step would be necessary. I'd test adding reviews with valid and invalid data, check if they're stored correctly, retrieve them, display them properly, and ensure the average calculation is accurate.\n\nFinally, integrating all these functions into a complete system where users can submit their reviews and see others' reviews on a product page would be the goal. Maybe also include some HTML templates to structure how the reviews are presented visually.\n</think>\n\nHere's an example of a user review function using PHP. This script includes functions for submitting reviews, displaying reviews, and calculating average ratings:\n\n```php\n<?php\n// Database connection details\n$host = 'localhost';\n$username = 'your_username';\n$password = 'your_password';\n$dbname = 'your_database';\n\n// Connect to database\n$conn = mysqli_connect($host, $username, $password, $dbname);\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// Function to add a new review\nfunction add_review($user_id, $product_id, $review_text, $rating) {\n    global $conn;\n    \n    // Validate input\n    if (empty($review_text) || $rating < 1 || $rating > 5) {\n        return false;\n    }\n    \n    // Sanitize input\n    $review_text = mysqli_real_escape_string($conn, htmlspecialchars($review_text));\n    $rating = intval($rating);\n    \n    // Insert review into database\n    $sql = \"INSERT INTO reviews (user_id, product_id, review_text, rating, review_date) \n            VALUES ('$user_id', '$product_id', '$review_text', '$rating', NOW())\";\n    \n    if (mysqli_query($conn, $sql)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to display reviews for a product\nfunction get_reviews($product_id) {\n    global $conn;\n    \n    $reviews = array();\n    \n    // Get all reviews for the product\n    $sql = \"SELECT r.review_id, u.username, r.review_text, r.rating, r.review_date \n            FROM reviews r \n            JOIN users u ON r.user_id = u.user_id \n            WHERE r.product_id = '$product_id' \n            ORDER BY r.review_date DESC\";\n    \n    $result = mysqli_query($conn, $sql);\n    \n    if ($result) {\n        while ($row = mysqli_fetch_assoc($result)) {\n            $reviews[] = array(\n                'review_id' => $row['review_id'],\n                'username' => $row['username'],\n                'review_text' => htmlspecialchars_decode($row['review_text']),\n                'rating' => $row['rating'],\n                'review_date' => date('F j, Y', strtotime($row['review_date']))\n            );\n        }\n    }\n    \n    return $reviews;\n}\n\n// Function to calculate average rating\nfunction get_average_rating($product_id) {\n    global $conn;\n    \n    // Get total ratings and count of reviews\n    $sql = \"SELECT AVG(rating) as average, COUNT(review_id) as review_count \n            FROM reviews \n            WHERE product_id = '$product_id'\";\n    \n    $result = mysqli_query($conn, $sql);\n    $row = mysqli_fetch_assoc($result);\n    \n    if ($row['review_count'] > 0) {\n        return number_format($row['average'], 1, '.', '');\n    } else {\n        return 'No ratings yet';\n    }\n}\n\n// Example usage:\n\n// Add a new review\nif (isset($_POST['submit_review'])) {\n    $user_id = $_SESSION['user_id']; // Assuming user is logged in\n    $product_id = $_GET['product_id'];\n    $review_text = $_POST['review_text'];\n    $rating = $_POST['rating'];\n    \n    if (add_review($user_id, $product_id, $review_text, $rating)) {\n        echo 'Review submitted successfully!';\n    } else {\n        echo 'Error submitting review. Please try again.';\n    }\n}\n\n// Display reviews\n$product_id = 1; // Example product ID\n$reviews = get_reviews($product_id);\n\necho '<h3>Product Reviews</h3>';\nif (!empty($reviews)) {\n    foreach ($reviews as $review) {\n        echo '<div class=\"review\">';\n        echo '<p><strong>' . $review['username'] . '</strong> - ' . $review['rating'] . '/5 stars</p>';\n        echo '<p>' . $review['review_text'] . '</p>';\n        echo '<p class=\"review-date\">' . $review['review_date'] . '</p>';\n        echo '</div>';\n    }\n} else {\n    echo 'No reviews yet.';\n}\n\n// Display average rating\n$average_rating = get_average_rating($product_id);\necho '<h4>Average Rating: ' . $average_rating . '/5 stars</h4>';\n\n// Close database connection\nmysqli_close($conn);\n?>\n```\n\nThis code includes:\n\n1. A database connection setup\n\n2. `add_review()` function to submit new reviews:\n   - Validates input\n   - Sanitizes data\n   - Inserts review into the database\n\n3. `get_reviews()` function to retrieve and display reviews for a product:\n   - Gets all reviews from database\n   - Joins with users table to get username\n   - Formats dates\n   - Returns array of reviews\n\n4. `get_average_rating()` function to calculate and return average rating:\n   - Calculates average rating from reviews\n   - Returns formatted average or message if no ratings yet\n\n5. Example usage for submitting and displaying reviews\n\nTo use this code:\n\n1. Set up your database with a table named `reviews` containing columns: \n   - review_id (INT, AUTO_INCREMENT)\n   - user_id (INT)\n   - product_id (INT)\n   - review_text (TEXT)\n   - rating (INT)\n   - review_date (DATE)\n\n2. Update the database connection details (host, username, password, dbname)\n\n3. Include this code in your PHP files where you need to handle reviews\n\n4. Use the example usage section to implement review submission and display\n\nRemember to:\n- Add proper error handling\n- Implement user authentication for review submission\n- Sanitize all user inputs\n- Validate data before inserting into database\n- Protect against SQL injection and XSS attacks\n- Style your review display using CSS\n\nYou can customize this code further based on your specific needs, such as adding more fields to the reviews table or implementing a rating system with stars.", "code_blocks": ["```php\n<?php\n// Database connection details\n$host = 'localhost';\n$username = 'your_username';\n$password = 'your_password';\n$dbname = 'your_database';\n\n// Connect to database\n$conn = mysqli_connect($host, $username, $password, $dbname);\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// Function to add a new review\nfunction add_review($user_id, $product_id, $review_text, $rating) {\n    global $conn;\n    \n    // Validate input\n    if (empty($review_text) || $rating < 1 || $rating > 5) {\n        return false;\n    }\n    \n    // Sanitize input\n    $review_text = mysqli_real_escape_string($conn, htmlspecialchars($review_text));\n    $rating = intval($rating);\n    \n    // Insert review into database\n    $sql = \"INSERT INTO reviews (user_id, product_id, review_text, rating, review_date) \n            VALUES ('$user_id', '$product_id', '$review_text', '$rating', NOW())\";\n    \n    if (mysqli_query($conn, $sql)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to display reviews for a product\nfunction get_reviews($product_id) {\n    global $conn;\n    \n    $reviews = array();\n    \n    // Get all reviews for the product\n    $sql = \"SELECT r.review_id, u.username, r.review_text, r.rating, r.review_date \n            FROM reviews r \n            JOIN users u ON r.user_id = u.user_id \n            WHERE r.product_id = '$product_id' \n            ORDER BY r.review_date DESC\";\n    \n    $result = mysqli_query($conn, $sql);\n    \n    if ($result) {\n        while ($row = mysqli_fetch_assoc($result)) {\n            $reviews[] = array(\n                'review_id' => $row['review_id'],\n                'username' => $row['username'],\n                'review_text' => htmlspecialchars_decode($row['review_text']),\n                'rating' => $row['rating'],\n                'review_date' => date('F j, Y', strtotime($row['review_date']))\n            );\n        }\n    }\n    \n    return $reviews;\n}\n\n// Function to calculate average rating\nfunction get_average_rating($product_id) {\n    global $conn;\n    \n    // Get total ratings and count of reviews\n    $sql = \"SELECT AVG(rating) as average, COUNT(review_id) as review_count \n            FROM reviews \n            WHERE product_id = '$product_id'\";\n    \n    $result = mysqli_query($conn, $sql);\n    $row = mysqli_fetch_assoc($result);\n    \n    if ($row['review_count'] > 0) {\n        return number_format($row['average'], 1, '.', '');\n    } else {\n        return 'No ratings yet';\n    }\n}\n\n// Example usage:\n\n// Add a new review\nif (isset($_POST['submit_review'])) {\n    $user_id = $_SESSION['user_id']; // Assuming user is logged in\n    $product_id = $_GET['product_id'];\n    $review_text = $_POST['review_text'];\n    $rating = $_POST['rating'];\n    \n    if (add_review($user_id, $product_id, $review_text, $rating)) {\n        echo 'Review submitted successfully!';\n    } else {\n        echo 'Error submitting review. Please try again.';\n    }\n}\n\n// Display reviews\n$product_id = 1; // Example product ID\n$reviews = get_reviews($product_id);\n\necho '<h3>Product Reviews</h3>';\nif (!empty($reviews)) {\n    foreach ($reviews as $review) {\n        echo '<div class=\"review\">';\n        echo '<p><strong>' . $review['username'] . '</strong> - ' . $review['rating'] . '/5 stars</p>';\n        echo '<p>' . $review['review_text'] . '</p>';\n        echo '<p class=\"review-date\">' . $review['review_date'] . '</p>';\n        echo '</div>';\n    }\n} else {\n    echo 'No reviews yet.';\n}\n\n// Display average rating\n$average_rating = get_average_rating($product_id);\necho '<h4>Average Rating: ' . $average_rating . '/5 stars</h4>';\n\n// Close database connection\nmysqli_close($conn);\n?>\n```"]}
