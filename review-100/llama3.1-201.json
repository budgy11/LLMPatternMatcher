{"prompt": "Create a user review function using php", "llm_output": "**User Review Function in PHP**\n=====================================\n\nBelow is an example of a simple user review system written in PHP. This system includes functions for adding, retrieving, updating, and deleting reviews.\n\n### Database Schema\n\nWe'll assume you have the following table structure in your database:\n\n```sql\nCREATE TABLE reviews (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    product_id INT NOT NULL,\n    user_id INT NOT NULL,\n    rating TINYINT NOT NULL CHECK (rating BETWEEN 1 AND 5),\n    review_text TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(255) NOT NULL,\n    description TEXT\n);\n```\n\n### PHP Code\n\nCreate a new file named `review.php` and add the following code:\n\n```php\nclass Review {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    /**\n     * Add a new review to the database.\n     *\n     * @param int   $product_id  The ID of the product being reviewed.\n     * @param int   $user_id     The ID of the user submitting the review.\n     * @param string $reviewText The text of the review.\n     * @return int|null          The ID of the newly created review, or null on failure.\n     */\n    public function addReview($product_id, $user_id, $rating, $review_text) {\n        try {\n            $stmt = $this->db->prepare(\"INSERT INTO reviews (product_id, user_id, rating, review_text)\n                VALUES (?, ?, ?, ?)\");\n            $stmt->execute([$product_id, $user_id, $rating, $review_text]);\n            return $this->db->lastInsertId();\n        } catch (PDOException $e) {\n            echo \"Error adding review: \" . $e->getMessage();\n            return null;\n        }\n    }\n\n    /**\n     * Retrieve all reviews for a given product.\n     *\n     * @param int $product_id The ID of the product to retrieve reviews for.\n     * @return array          An array of arrays containing review data.\n     */\n    public function getReviews($product_id) {\n        try {\n            $stmt = $this->db->prepare(\"SELECT * FROM reviews WHERE product_id = ?\");\n            $stmt->execute([$product_id]);\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Error retrieving reviews: \" . $e->getMessage();\n            return [];\n        }\n    }\n\n    /**\n     * Update an existing review.\n     *\n     * @param int   $review_id The ID of the review to update.\n     * @param string $newText  The new text for the review.\n     * @return bool          True on success, false on failure.\n     */\n    public function updateReview($review_id, $new_text) {\n        try {\n            $stmt = $this->db->prepare(\"UPDATE reviews SET review_text = ? WHERE id = ?\");\n            return $stmt->execute([$new_text, $review_id]) !== false;\n        } catch (PDOException $e) {\n            echo \"Error updating review: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    /**\n     * Delete a review.\n     *\n     * @param int $review_id The ID of the review to delete.\n     * @return bool          True on success, false on failure.\n     */\n    public function deleteReview($review_id) {\n        try {\n            $stmt = $this->db->prepare(\"DELETE FROM reviews WHERE id = ?\");\n            return $stmt->execute([$review_id]) !== false;\n        } catch (PDOException $e) {\n            echo \"Error deleting review: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n```\n\n### Example Usage\n\n```php\n$db = new PDO(\"mysql:host=localhost;dbname=mydatabase\", \"myuser\", \"mypassword\");\n$reviewSystem = new Review($db);\n\n// Add a new review\n$product_id = 1;\n$user_id = 123;\n$rating = 4;\n$review_text = \"Great product!\";\n$review_id = $reviewSystem->addReview($product_id, $user_id, $rating, $review_text);\necho \"Added review with ID: $review_id\\n\";\n\n// Retrieve all reviews for a product\n$product_reviews = $reviewSystem->getReviews(1);\nprint_r($product_reviews);\n\n// Update an existing review\n$new_text = \"Even better now!\";\n$updated = $reviewSystem->updateReview($review_id, $new_text);\necho \"Updated review: $updated\\n\";\n\n// Delete a review\n$deleted = $reviewSystem->deleteReview($review_id);\necho \"Deleted review: $deleted\\n\";\n```\n\nThis example code demonstrates basic CRUD (Create, Read, Update, Delete) operations for user reviews. The `Review` class encapsulates the database interactions and provides methods for adding, retrieving, updating, and deleting reviews. You can extend this example to suit your specific use case and requirements.", "code_blocks": [null, "```php\nclass Review {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    /**\n     * Add a new review to the database.\n     *\n     * @param int   $product_id  The ID of the product being reviewed.\n     * @param int   $user_id     The ID of the user submitting the review.\n     * @param string $reviewText The text of the review.\n     * @return int|null          The ID of the newly created review, or null on failure.\n     */\n    public function addReview($product_id, $user_id, $rating, $review_text) {\n        try {\n            $stmt = $this->db->prepare(\"INSERT INTO reviews (product_id, user_id, rating, review_text)\n                VALUES (?, ?, ?, ?)\");\n            $stmt->execute([$product_id, $user_id, $rating, $review_text]);\n            return $this->db->lastInsertId();\n        } catch (PDOException $e) {\n            echo \"Error adding review: \" . $e->getMessage();\n            return null;\n        }\n    }\n\n    /**\n     * Retrieve all reviews for a given product.\n     *\n     * @param int $product_id The ID of the product to retrieve reviews for.\n     * @return array          An array of arrays containing review data.\n     */\n    public function getReviews($product_id) {\n        try {\n            $stmt = $this->db->prepare(\"SELECT * FROM reviews WHERE product_id = ?\");\n            $stmt->execute([$product_id]);\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Error retrieving reviews: \" . $e->getMessage();\n            return [];\n        }\n    }\n\n    /**\n     * Update an existing review.\n     *\n     * @param int   $review_id The ID of the review to update.\n     * @param string $newText  The new text for the review.\n     * @return bool          True on success, false on failure.\n     */\n    public function updateReview($review_id, $new_text) {\n        try {\n            $stmt = $this->db->prepare(\"UPDATE reviews SET review_text = ? WHERE id = ?\");\n            return $stmt->execute([$new_text, $review_id]) !== false;\n        } catch (PDOException $e) {\n            echo \"Error updating review: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    /**\n     * Delete a review.\n     *\n     * @param int $review_id The ID of the review to delete.\n     * @return bool          True on success, false on failure.\n     */\n    public function deleteReview($review_id) {\n        try {\n            $stmt = $this->db->prepare(\"DELETE FROM reviews WHERE id = ?\");\n            return $stmt->execute([$review_id]) !== false;\n        } catch (PDOException $e) {\n            echo \"Error deleting review: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n```", "```php\n$db = new PDO(\"mysql:host=localhost;dbname=mydatabase\", \"myuser\", \"mypassword\");\n$reviewSystem = new Review($db);\n\n// Add a new review\n$product_id = 1;\n$user_id = 123;\n$rating = 4;\n$review_text = \"Great product!\";\n$review_id = $reviewSystem->addReview($product_id, $user_id, $rating, $review_text);\necho \"Added review with ID: $review_id\\n\";\n\n// Retrieve all reviews for a product\n$product_reviews = $reviewSystem->getReviews(1);\nprint_r($product_reviews);\n\n// Update an existing review\n$new_text = \"Even better now!\";\n$updated = $reviewSystem->updateReview($review_id, $new_text);\necho \"Updated review: $updated\\n\";\n\n// Delete a review\n$deleted = $reviewSystem->deleteReview($review_id);\necho \"Deleted review: $deleted\\n\";\n```"]}
