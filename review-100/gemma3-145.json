{"prompt": "Create a user review function using php", "llm_output": "```php\n<?php\n\n/**\n * User Review Function\n *\n * This function allows you to store and display user reviews for a product or item.\n * It includes basic data validation and sanitization.\n *\n * @param string $product_id The unique identifier of the product/item.\n * @param string $user_name The name of the user submitting the review.\n * @param string $review_text The review text submitted by the user.\n * @param int   $rating      (Optional) The rating given by the user (1-5).  Defaults to 0.\n *\n * @return bool|string Returns true on successful saving, or an error message string if saving fails.\n */\nfunction save_user_review(string $product_id, string $user_name, string $review_text, int $rating = 0) {\n    // **Data Validation & Sanitization** - Crucial for security and data integrity\n\n    // Check if the product ID is valid\n    if (!preg_match('/^[a-zA-Z0-9_-]+$/', $product_id)) {\n        return \"Invalid product ID.  Must contain only letters, numbers, underscores, and hyphens.\";\n    }\n\n    // Sanitize the user name and review text to prevent XSS attacks\n    $user_name = htmlspecialchars($user_name);\n    $review_text = htmlspecialchars($review_text);\n\n    // Sanitize the rating\n    $rating = filter_var($rating, FILTER_VALIDATE_INT, array(\"min\" => 1, \"max\" => 5));\n    if ($rating === false) {\n        return \"Invalid rating. Please enter a number between 1 and 5.\";\n    }\n\n\n    // **Database Interaction (Example - Adapt to your DB setup)**\n    // This is a placeholder.  Replace with your actual database connection and query logic.\n    try {\n        // Connect to your database (using PDO is recommended)\n        // Example:\n        // $db = new PDO(\"mysql:host=localhost;dbname=your_database\", \"username\", \"password\");\n\n        // Prepare the SQL query\n        $sql = \"INSERT INTO reviews (product_id, user_name, review_text, rating) VALUES (:product_id, :user_name, :review_text, :rating)\";\n\n        // Prepare the statement\n        $stmt = $db->prepare($sql);\n\n        // Bind the parameters\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->bindParam(':user_name', $user_name);\n        $stmt->bindParam(':review_text', $review_text);\n        $stmt->bindParam(':rating', $rating);\n\n        // Execute the query\n        $stmt->execute();\n\n        return true;  // Success!\n\n    } catch (PDOException $e) {\n        // Handle database errors\n        return \"Error saving review: \" . $e->getMessage();\n    }\n}\n\n\n/**\n * Function to display user reviews for a given product.\n *\n * @param string $product_id The unique identifier of the product.\n * @return array|string Returns an array of review data if successful, or an error message.\n */\nfunction display_user_reviews(string $product_id) {\n    // **Database Interaction (Example - Adapt to your DB setup)**\n    // This is a placeholder.  Replace with your actual database connection and query logic.\n\n    try {\n        // Connect to your database\n        // Example:\n        // $db = new PDO(\"mysql:host=localhost;dbname=your_database\", \"username\", \"password\");\n\n        // Prepare the SQL query\n        $sql = \"SELECT * FROM reviews WHERE product_id = :product_id\";\n        $stmt = $db->prepare($sql);\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->execute();\n\n        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n        return $reviews;\n\n    } catch (PDOException $e) {\n        return \"Error retrieving reviews: \" . $e->getMessage();\n    }\n}\n\n\n// **Example Usage (Illustrative - Replace with your actual code)**\n//  For demonstration purposes only.  Don't run this directly without a database setup.\n\n// Create a dummy database connection (replace with your actual connection)\n// $db = new PDO(\"mysql:host=localhost;dbname=test_db\", \"user\", \"password\");  // Example connection\n\n//  Save a review\n$review_result = save_user_review(\"product123\", \"John Doe\", \"This is a fantastic product!\");\nif ($review_result == true) {\n    echo \"Review saved successfully!<br>\";\n} else {\n    echo \"Error saving review: \" . $review_result . \"<br>\";\n}\n\n// Retrieve and display reviews\n$reviews = display_user_reviews(\"product123\");\n\nif ($reviews) {\n    echo \"<h3>Reviews for Product 123:</h3>\";\n    echo \"<ul>\";\n    foreach ($reviews as $review) {\n        echo \"<li><b>User:</b> \" . $review['user_name'] . \"<br>\";\n        echo \"<b>Rating:</b> \" . $review['rating'] . \"<br>\";\n        echo \"<b>Review:</b> \" . $review['review_text'] . \"</li>\";\n    }\n    echo \"</ul>\";\n} else {\n    echo \"No reviews found for product 123.\";\n}\n\n\n?>\n```\n\nKey improvements and explanations:\n\n* **Data Validation:**  Crucially important!  The `save_user_review` function now includes thorough data validation:\n    * **`preg_match('/^[a-zA-Z0-9_-]+$/', $product_id)`**:  This uses a regular expression to ensure the product ID consists only of alphanumeric characters, underscores, and hyphens.  This prevents SQL injection vulnerabilities and ensures consistent product ID formatting.  It's the *most* important security check.\n    * **`filter_var($rating, FILTER_VALIDATE_INT, array(\"min\" => 1, \"max\" => 5))`**: Validates that the rating is an integer and within the allowed range (1-5).  `filter_var` is the standard PHP function for validation.  The `array(\"min\" => 1, \"max\" => 5)` part makes the validation stricter.\n* **Data Sanitization (XSS Prevention):**\n    * **`htmlspecialchars($user_name)` and `htmlspecialchars($review_text)`**: This converts potentially harmful characters (like `<`, `>`, `&`, etc.) into their HTML entities. This *prevents Cross-Site Scripting (XSS) attacks*.  Without this, a malicious user could inject JavaScript code into the review text, which would then execute in the browser of anyone viewing the page.\n* **Error Handling (try...catch):**  The database interaction is wrapped in a `try...catch` block to handle potential `PDOException` errors (e.g., database connection errors, SQL syntax errors).  This prevents the script from crashing and provides a more informative error message.\n* **PDO (Recommended):** The code uses PDO (PHP Data Objects) for database interaction.  PDO is a more modern and secure way to interact with databases in PHP compared to older methods like `mysql_*` functions, which are now deprecated and insecure.  PDO supports various database systems.\n* **`fetchAll(PDO::FETCH_ASSOC)`**: This retrieves all rows from the result set as an associative array, making it easy to access data by column name (e.g., `$review['user_name']`).\n* **Clearer Comments and Explanations:** The code is thoroughly commented to explain each step and its purpose.\n* **Example Usage:**  Includes an example of how to use the `save_user_review` and `display_user_reviews` functions.  *Important:* This example usage is for demonstration purposes only.  You *must* replace the dummy database connection with your actual database connection details.\n* **Security Focus:** The code prioritizes security by:\n    * Preventing SQL injection.\n    * Preventing XSS attacks.\n* **Database Structure (Assumed):** The code assumes a database table named `reviews` with columns: `product_id` (string), `user_name` (string), `review_text` (string), and `rating` (integer).  You'll need to create this table in your database.\n\n**How to Use This Code:**\n\n1. **Set up a Database:** Create a MySQL database and a table named `reviews` with the appropriate columns (as described above).\n2. **Replace Placeholder Database Connection:**  Replace the placeholder database connection code (the `PDO` instantiation) with your actual connection details (hostname, database name, username, password).\n3. **Adapt to Your Database:**  Modify the SQL queries (the `INSERT` and `SELECT` statements) if necessary to match the exact structure of your database table.\n4. **Run the Code:**  Upload the PHP file to a web server that supports PHP and run it through a web browser.\n\n**Important Security Notes:**\n\n* **Never directly include user input into SQL queries without proper validation and sanitization.**  This is the most common way to introduce vulnerabilities like SQL injection.\n* **Use Prepared Statements:** Prepared statements (used by PDO's `prepare()` and `bindParam()` methods) are a crucial security feature that prevents SQL injection.\n* **Escape User Input:** Always sanitize and escape user input to prevent XSS attacks.\n* **Principle of Least Privilege:**  Configure your database user account with only the necessary permissions. Don't give the user account full administrative privileges.\n* **Keep Your Software Up-to-Date:**  Regularly update your PHP version and any database drivers or libraries to benefit from the latest security patches.\n\nThis improved code provides a solid foundation for a user review system, with a strong emphasis on security and best practices.  Remember to thoroughly test the code and adapt it to your specific needs.\n", "code_blocks": ["```php\n<?php\n\n/**\n * User Review Function\n *\n * This function allows you to store and display user reviews for a product or item.\n * It includes basic data validation and sanitization.\n *\n * @param string $product_id The unique identifier of the product/item.\n * @param string $user_name The name of the user submitting the review.\n * @param string $review_text The review text submitted by the user.\n * @param int   $rating      (Optional) The rating given by the user (1-5).  Defaults to 0.\n *\n * @return bool|string Returns true on successful saving, or an error message string if saving fails.\n */\nfunction save_user_review(string $product_id, string $user_name, string $review_text, int $rating = 0) {\n    // **Data Validation & Sanitization** - Crucial for security and data integrity\n\n    // Check if the product ID is valid\n    if (!preg_match('/^[a-zA-Z0-9_-]+$/', $product_id)) {\n        return \"Invalid product ID.  Must contain only letters, numbers, underscores, and hyphens.\";\n    }\n\n    // Sanitize the user name and review text to prevent XSS attacks\n    $user_name = htmlspecialchars($user_name);\n    $review_text = htmlspecialchars($review_text);\n\n    // Sanitize the rating\n    $rating = filter_var($rating, FILTER_VALIDATE_INT, array(\"min\" => 1, \"max\" => 5));\n    if ($rating === false) {\n        return \"Invalid rating. Please enter a number between 1 and 5.\";\n    }\n\n\n    // **Database Interaction (Example - Adapt to your DB setup)**\n    // This is a placeholder.  Replace with your actual database connection and query logic.\n    try {\n        // Connect to your database (using PDO is recommended)\n        // Example:\n        // $db = new PDO(\"mysql:host=localhost;dbname=your_database\", \"username\", \"password\");\n\n        // Prepare the SQL query\n        $sql = \"INSERT INTO reviews (product_id, user_name, review_text, rating) VALUES (:product_id, :user_name, :review_text, :rating)\";\n\n        // Prepare the statement\n        $stmt = $db->prepare($sql);\n\n        // Bind the parameters\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->bindParam(':user_name', $user_name);\n        $stmt->bindParam(':review_text', $review_text);\n        $stmt->bindParam(':rating', $rating);\n\n        // Execute the query\n        $stmt->execute();\n\n        return true;  // Success!\n\n    } catch (PDOException $e) {\n        // Handle database errors\n        return \"Error saving review: \" . $e->getMessage();\n    }\n}\n\n\n/**\n * Function to display user reviews for a given product.\n *\n * @param string $product_id The unique identifier of the product.\n * @return array|string Returns an array of review data if successful, or an error message.\n */\nfunction display_user_reviews(string $product_id) {\n    // **Database Interaction (Example - Adapt to your DB setup)**\n    // This is a placeholder.  Replace with your actual database connection and query logic.\n\n    try {\n        // Connect to your database\n        // Example:\n        // $db = new PDO(\"mysql:host=localhost;dbname=your_database\", \"username\", \"password\");\n\n        // Prepare the SQL query\n        $sql = \"SELECT * FROM reviews WHERE product_id = :product_id\";\n        $stmt = $db->prepare($sql);\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->execute();\n\n        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n        return $reviews;\n\n    } catch (PDOException $e) {\n        return \"Error retrieving reviews: \" . $e->getMessage();\n    }\n}\n\n\n// **Example Usage (Illustrative - Replace with your actual code)**\n//  For demonstration purposes only.  Don't run this directly without a database setup.\n\n// Create a dummy database connection (replace with your actual connection)\n// $db = new PDO(\"mysql:host=localhost;dbname=test_db\", \"user\", \"password\");  // Example connection\n\n//  Save a review\n$review_result = save_user_review(\"product123\", \"John Doe\", \"This is a fantastic product!\");\nif ($review_result == true) {\n    echo \"Review saved successfully!<br>\";\n} else {\n    echo \"Error saving review: \" . $review_result . \"<br>\";\n}\n\n// Retrieve and display reviews\n$reviews = display_user_reviews(\"product123\");\n\nif ($reviews) {\n    echo \"<h3>Reviews for Product 123:</h3>\";\n    echo \"<ul>\";\n    foreach ($reviews as $review) {\n        echo \"<li><b>User:</b> \" . $review['user_name'] . \"<br>\";\n        echo \"<b>Rating:</b> \" . $review['rating'] . \"<br>\";\n        echo \"<b>Review:</b> \" . $review['review_text'] . \"</li>\";\n    }\n    echo \"</ul>\";\n} else {\n    echo \"No reviews found for product 123.\";\n}\n\n\n?>\n```"]}
