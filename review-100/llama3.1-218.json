{"prompt": "Create a user review function using php", "llm_output": "Here's an example of how you can implement a basic user review system in PHP:\n\n**Database Schema:**\n\nFor this example, we'll assume the following database schema:\n```markdown\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  email VARCHAR(255)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY,\n  user_id INT,\n  product_id INT,\n  rating TINYINT,\n  review TEXT,\n  FOREIGN KEY (user_id) REFERENCES users(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n**PHP Code:**\n\nCreate a new PHP file called `review.php` and add the following code:\n```php\n<?php\n\n// Include database connection script\nrequire 'db.php';\n\n// Function to get user reviews for a specific product\nfunction getUserReviews($productId, $userId = null) {\n  global $conn;\n  \n  // Get all reviews for the specified product\n  $query = \"SELECT * FROM reviews WHERE product_id = :product_id\";\n  \n  if ($userId !== null) {\n    // Filter reviews by user ID\n    $query .= \" AND user_id = :user_id\";\n  }\n  \n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':product_id', $productId);\n  $stmt->bindParam(':user_id', $userId);\n  \n  try {\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n  } catch (PDOException $e) {\n    echo \"Error retrieving reviews: \" . $e->getMessage();\n    return array();\n  }\n}\n\n// Function to add a new review\nfunction addReview($userId, $productId, $rating, $review) {\n  global $conn;\n  \n  // Validate user input\n  if (!ctype_digit($rating)) {\n    throw new Exception(\"Invalid rating\");\n  }\n  \n  // Insert new review into database\n  $query = \"INSERT INTO reviews (user_id, product_id, rating, review)\n            VALUES (:user_id, :product_id, :rating, :review)\";\n  \n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':user_id', $userId);\n  $stmt->bindParam(':product_id', $productId);\n  $stmt->bindParam(':rating', $rating);\n  $stmt->bindParam(':review', $review);\n  \n  try {\n    $stmt->execute();\n    return true;\n  } catch (PDOException $e) {\n    echo \"Error adding review: \" . $e->getMessage();\n    return false;\n  }\n}\n\n// Function to update an existing review\nfunction updateReview($reviewId, $newRating, $newReview) {\n  global $conn;\n  \n  // Validate user input\n  if (!ctype_digit($newRating)) {\n    throw new Exception(\"Invalid rating\");\n  }\n  \n  // Update existing review in database\n  $query = \"UPDATE reviews SET rating = :rating, review = :review WHERE id = :id\";\n  \n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':rating', $newRating);\n  $stmt->bindParam(':review', $newReview);\n  $stmt->bindParam(':id', $reviewId);\n  \n  try {\n    $stmt->execute();\n    return true;\n  } catch (PDOException $e) {\n    echo \"Error updating review: \" . $e->getMessage();\n    return false;\n  }\n}\n\n// Function to delete a review\nfunction deleteReview($reviewId) {\n  global $conn;\n  \n  // Delete existing review from database\n  $query = \"DELETE FROM reviews WHERE id = :id\";\n  \n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':id', $reviewId);\n  \n  try {\n    $stmt->execute();\n    return true;\n  } catch (PDOException $e) {\n    echo \"Error deleting review: \" . $e->getMessage();\n    return false;\n  }\n}\n\n?>\n```\n**Example Usage:**\n\n```php\n// Get all reviews for a specific product\n$reviews = getUserReviews(1);\nprint_r($reviews);\n\n// Add a new review\n$result = addReview(1, 1, 5, \"Great product!\");\necho $result ? \"Review added successfully!\" : \"Error adding review.\";\n\n// Update an existing review\n$result = updateReview(1, 4, \"Decent product.\");\necho $result ? \"Review updated successfully!\" : \"Error updating review.\";\n\n// Delete a review\n$result = deleteReview(1);\necho $result ? \"Review deleted successfully!\" : \"Error deleting review.\";\n```\nNote that this is just a basic example and you should adapt it to your specific use case. Additionally, make sure to validate user input and handle errors properly in a production environment.\n\nAlso, please note that the above code uses PDO (PHP Data Objects) for database interactions. You can replace it with other database extensions like MySQLi if needed.", "code_blocks": [null, "```php\n<?php\n\n// Include database connection script\nrequire 'db.php';\n\n// Function to get user reviews for a specific product\nfunction getUserReviews($productId, $userId = null) {\n  global $conn;\n  \n  // Get all reviews for the specified product\n  $query = \"SELECT * FROM reviews WHERE product_id = :product_id\";\n  \n  if ($userId !== null) {\n    // Filter reviews by user ID\n    $query .= \" AND user_id = :user_id\";\n  }\n  \n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':product_id', $productId);\n  $stmt->bindParam(':user_id', $userId);\n  \n  try {\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n  } catch (PDOException $e) {\n    echo \"Error retrieving reviews: \" . $e->getMessage();\n    return array();\n  }\n}\n\n// Function to add a new review\nfunction addReview($userId, $productId, $rating, $review) {\n  global $conn;\n  \n  // Validate user input\n  if (!ctype_digit($rating)) {\n    throw new Exception(\"Invalid rating\");\n  }\n  \n  // Insert new review into database\n  $query = \"INSERT INTO reviews (user_id, product_id, rating, review)\n            VALUES (:user_id, :product_id, :rating, :review)\";\n  \n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':user_id', $userId);\n  $stmt->bindParam(':product_id', $productId);\n  $stmt->bindParam(':rating', $rating);\n  $stmt->bindParam(':review', $review);\n  \n  try {\n    $stmt->execute();\n    return true;\n  } catch (PDOException $e) {\n    echo \"Error adding review: \" . $e->getMessage();\n    return false;\n  }\n}\n\n// Function to update an existing review\nfunction updateReview($reviewId, $newRating, $newReview) {\n  global $conn;\n  \n  // Validate user input\n  if (!ctype_digit($newRating)) {\n    throw new Exception(\"Invalid rating\");\n  }\n  \n  // Update existing review in database\n  $query = \"UPDATE reviews SET rating = :rating, review = :review WHERE id = :id\";\n  \n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':rating', $newRating);\n  $stmt->bindParam(':review', $newReview);\n  $stmt->bindParam(':id', $reviewId);\n  \n  try {\n    $stmt->execute();\n    return true;\n  } catch (PDOException $e) {\n    echo \"Error updating review: \" . $e->getMessage();\n    return false;\n  }\n}\n\n// Function to delete a review\nfunction deleteReview($reviewId) {\n  global $conn;\n  \n  // Delete existing review from database\n  $query = \"DELETE FROM reviews WHERE id = :id\";\n  \n  $stmt = $conn->prepare($query);\n  $stmt->bindParam(':id', $reviewId);\n  \n  try {\n    $stmt->execute();\n    return true;\n  } catch (PDOException $e) {\n    echo \"Error deleting review: \" . $e->getMessage();\n    return false;\n  }\n}\n\n?>\n```", "```php\n// Get all reviews for a specific product\n$reviews = getUserReviews(1);\nprint_r($reviews);\n\n// Add a new review\n$result = addReview(1, 1, 5, \"Great product!\");\necho $result ? \"Review added successfully!\" : \"Error adding review.\";\n\n// Update an existing review\n$result = updateReview(1, 4, \"Decent product.\");\necho $result ? \"Review updated successfully!\" : \"Error updating review.\";\n\n// Delete a review\n$result = deleteReview(1);\necho $result ? \"Review deleted successfully!\" : \"Error deleting review.\";\n```"]}
