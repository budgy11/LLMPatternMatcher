{"prompt": "Create a user review function using php", "llm_output": "**User Review Function in PHP**\n=====================================\n\nThis example demonstrates a simple user review system in PHP. The code includes functions for creating, reading, updating, and deleting (CRUD) reviews.\n\n### Database Schema\n\nAssuming a MySQL database with the following table structure:\n\n```sql\nCREATE TABLE reviews (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT NOT NULL,\n  product_id INT NOT NULL,\n  rating TINYINT(1) NOT NULL DEFAULT 0,\n  comment TEXT,\n  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### PHP Code\n\n**review_functions.php**\n```php\nclass ReviewFunctions {\n  private $db;\n\n  public function __construct() {\n    // Initialize database connection (e.g., using PDO)\n    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n  }\n\n  /**\n   * Create a new review\n   *\n   * @param int $user_id\n   * @param int $product_id\n   * @param int $rating\n   * @param string $comment\n   * @return int ID of the newly created review or false on failure\n   */\n  public function createReview($user_id, $product_id, $rating, $comment) {\n    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)');\n    $result = $stmt->execute([$user_id, $product_id, $rating, $comment]);\n    if ($result) {\n      return $this->db->lastInsertId();\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Get all reviews for a specific product\n   *\n   * @param int $product_id\n   * @return array Reviews as an associative array of arrays (id, user_id, rating, comment)\n   */\n  public function getReviewsByProduct($product_id) {\n    $stmt = $this->db->prepare('SELECT id, user_id, rating, comment FROM reviews WHERE product_id = ?');\n    $stmt->execute([$product_id]);\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n  }\n\n  /**\n   * Update an existing review\n   *\n   * @param int $review_id\n   * @param int $rating\n   * @param string $comment\n   * @return bool True on success, false on failure\n   */\n  public function updateReview($review_id, $rating, $comment) {\n    $stmt = $this->db->prepare('UPDATE reviews SET rating = ?, comment = ? WHERE id = ?');\n    $result = $stmt->execute([$rating, $comment, $review_id]);\n    return $result;\n  }\n\n  /**\n   * Delete a review\n   *\n   * @param int $review_id\n   * @return bool True on success, false on failure\n   */\n  public function deleteReview($review_id) {\n    $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = ?');\n    return $stmt->execute([$review_id]);\n  }\n}\n```\n\n### Example Usage\n\n```php\nrequire_once 'review_functions.php';\n\n$reviewFunctions = new ReviewFunctions();\n\n// Create a new review\n$user_id = 1;\n$product_id = 123;\n$rating = 5;\n$comment = 'Great product!';\n$review_id = $reviewFunctions->createReview($user_id, $product_id, $rating, $comment);\n\n// Get all reviews for a specific product\n$product_id = 123;\n$reviews = $reviewFunctions->getReviewsByProduct($product_id);\nprint_r($reviews);\n\n// Update an existing review\n$review_id = 1;\n$rating = 4;\n$comment = 'Good product!';\n$result = $reviewFunctions->updateReview($review_id, $rating, $comment);\necho $result ? 'Success!' : 'Failure!';\n\n// Delete a review\n$review_id = 1;\n$result = $reviewFunctions->deleteReview($review_id);\necho $result ? 'Success!' : 'Failure!';\n```\n\nThis example demonstrates basic CRUD operations for user reviews. You can modify the code to suit your specific requirements and database schema.", "code_blocks": [null, "```php\nclass ReviewFunctions {\n  private $db;\n\n  public function __construct() {\n    // Initialize database connection (e.g., using PDO)\n    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n  }\n\n  /**\n   * Create a new review\n   *\n   * @param int $user_id\n   * @param int $product_id\n   * @param int $rating\n   * @param string $comment\n   * @return int ID of the newly created review or false on failure\n   */\n  public function createReview($user_id, $product_id, $rating, $comment) {\n    $stmt = $this->db->prepare('INSERT INTO reviews (user_id, product_id, rating, comment) VALUES (?, ?, ?, ?)');\n    $result = $stmt->execute([$user_id, $product_id, $rating, $comment]);\n    if ($result) {\n      return $this->db->lastInsertId();\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Get all reviews for a specific product\n   *\n   * @param int $product_id\n   * @return array Reviews as an associative array of arrays (id, user_id, rating, comment)\n   */\n  public function getReviewsByProduct($product_id) {\n    $stmt = $this->db->prepare('SELECT id, user_id, rating, comment FROM reviews WHERE product_id = ?');\n    $stmt->execute([$product_id]);\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n  }\n\n  /**\n   * Update an existing review\n   *\n   * @param int $review_id\n   * @param int $rating\n   * @param string $comment\n   * @return bool True on success, false on failure\n   */\n  public function updateReview($review_id, $rating, $comment) {\n    $stmt = $this->db->prepare('UPDATE reviews SET rating = ?, comment = ? WHERE id = ?');\n    $result = $stmt->execute([$rating, $comment, $review_id]);\n    return $result;\n  }\n\n  /**\n   * Delete a review\n   *\n   * @param int $review_id\n   * @return bool True on success, false on failure\n   */\n  public function deleteReview($review_id) {\n    $stmt = $this->db->prepare('DELETE FROM reviews WHERE id = ?');\n    return $stmt->execute([$review_id]);\n  }\n}\n```", "```php\nrequire_once 'review_functions.php';\n\n$reviewFunctions = new ReviewFunctions();\n\n// Create a new review\n$user_id = 1;\n$product_id = 123;\n$rating = 5;\n$comment = 'Great product!';\n$review_id = $reviewFunctions->createReview($user_id, $product_id, $rating, $comment);\n\n// Get all reviews for a specific product\n$product_id = 123;\n$reviews = $reviewFunctions->getReviewsByProduct($product_id);\nprint_r($reviews);\n\n// Update an existing review\n$review_id = 1;\n$rating = 4;\n$comment = 'Good product!';\n$result = $reviewFunctions->updateReview($review_id, $rating, $comment);\necho $result ? 'Success!' : 'Failure!';\n\n// Delete a review\n$review_id = 1;\n$result = $reviewFunctions->deleteReview($review_id);\necho $result ? 'Success!' : 'Failure!';\n```"]}
