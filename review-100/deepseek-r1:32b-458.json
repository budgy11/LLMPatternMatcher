{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to help the user create a PHP function for handling user reviews. Let me think about what features are essential for such a system.\n\nFirst, storing reviews is crucial. So, the database should have fields like review ID, user ID, product ID, rating, comment, and timestamp. That makes sense because each review is tied to a specific user and product, with their feedback and when they submitted it.\n\nNext, I should create functions for adding, retrieving, updating, and deleting reviews. These CRUD operations are standard and will cover all necessary actions.\n\nFor adding a review, the function needs to insert into the database. I'll use mysqli prepared statements to prevent SQL injection. That's important for security. The function should return true or false based on success.\n\nRetrieving reviews is next. Users might want all reviews for a product or just one by ID. The function should accept parameters to handle both cases. Fetching all would be useful for displaying on a product page, while getting one could be for editing purposes.\n\nUpdating and deleting are also necessary. Maybe users can edit their reviews, so the update function will change the rating and comment. Delete is straightforward, removing a review by its ID.\n\nDisplaying reviews in a user-friendly way is important. A separate display function can fetch all reviews for a product and format them into HTML. This keeps the presentation logic separated from the data handling.\n\nI should also handle errors gracefully. Checking for query success after each database operation ensures issues are caught early. Additionally, sanitizing inputs where necessary helps prevent attacks.\n\nTesting each function is important. For example, adding a review with sample data, then retrieving it to see if it shows up correctly. Updating and deleting should reflect changes in the database without errors.\n\nSecurity considerations: Using prepared statements prevents SQL injection. Checking for existing reviews before adding ensures users can't submit multiple times, though that might be better handled at the application level or with user sessions.\n\nI think I covered all bases. Now, putting it all together into a coherent PHP script with clear functions and explanations.\n</think>\n\nHere's an example of a user review function using PHP:\n\n```php\n<?php\n// Database connection configuration\n$host = \"localhost\";\n$username = \"root\";\n$password = \"\";\n$database = \"reviews_db\";\n\n// Create database connection\n$conn = new mysqli($host, $username, $password, $database);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add a review\nfunction addReview($userId, $productId, $rating, $comment) {\n    global $conn;\n    \n    // Check if the user has already reviewed this product\n    $checkQuery = \"SELECT * FROM reviews WHERE user_id = ? AND product_id = ?\";\n    $stmt = $conn->prepare($checkQuery);\n    $stmt->bind_param(\"ii\", $userId, $productId);\n    $stmt->execute();\n    \n    if ($stmt->fetch()) {\n        return false; // User already reviewed this product\n    }\n    \n    // Insert the new review into the database\n    $insertQuery = \"INSERT INTO reviews (user_id, product_id, rating, comment, timestamp) \n                   VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)\";\n    $stmt = $conn->prepare($insertQuery);\n    $stmt->bind_param(\"iisi\", $userId, $productId, $rating, $comment);\n    \n    if ($stmt->execute()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to get all reviews for a product\nfunction getProductReviews($productId) {\n    global $conn;\n    \n    $query = \"SELECT r.*, u.username FROM reviews r \n              JOIN users u ON r.user_id = u.id \n              WHERE product_id = ? \n              ORDER BY timestamp DESC\";\n    $stmt = $conn->prepare($query);\n    $stmt->bind_param(\"i\", $productId);\n    $stmt->execute();\n    \n    $result = $stmt->get_result();\n    return $result->fetch_all(MYSQLI_ASSOC);\n}\n\n// Function to update a review\nfunction updateReview($reviewId, $rating, $comment) {\n    global $conn;\n    \n    $updateQuery = \"UPDATE reviews SET rating = ?, comment = ? WHERE id = ?\";\n    $stmt = $conn->prepare($updateQuery);\n    $stmt->bind_param(\"isi\", $rating, $comment, $reviewId);\n    \n    if ($stmt->execute()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to delete a review\nfunction deleteReview($reviewId) {\n    global $conn;\n    \n    $deleteQuery = \"DELETE FROM reviews WHERE id = ?\";\n    $stmt = $conn->prepare($deleteQuery);\n    $stmt->bind_param(\"i\", $reviewId);\n    \n    if ($stmt->execute()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to display reviews\nfunction displayReviews($productId) {\n    $reviews = getProductReviews($productId);\n    \n    if (empty($reviews)) {\n        echo \"<p>No reviews available for this product.</p>\";\n        return;\n    }\n    \n    foreach ($reviews as $review) {\n        echo \"<div class='review'>\";\n        echo \"<h4>By \" . htmlspecialchars($review['username']) . \"</h4>\";\n        echo \"<p>Rating: \" . htmlspecialchars($review['rating']) . \" stars</p>\";\n        echo \"<p>\" . htmlspecialchars($review['comment']) . \"</p>\";\n        echo \"<small>Posted on: \" . date('F j, Y', strtotime($review['timestamp'])) . \"</small>\";\n        echo \"</div><hr>\";\n    }\n}\n\n// Example usage:\nif (isset($_POST['submit_review'])) {\n    $userId = 1; // Get this from user session\n    $productId = $_GET['product_id'];\n    $rating = $_POST['rating'];\n    $comment = $_POST['comment'];\n    \n    if (addReview($userId, $productId, $rating, $comment)) {\n        echo \"Thank you for submitting your review!\";\n    } else {\n        echo \"Error: Review could not be submitted.\";\n    }\n}\n\n// Display all reviews for a product\n$productId = 1; // Example product ID\ndisplayReviews($productId);\n\n$conn->close();\n?>\n```\n\nThis code creates a comprehensive review system with the following features:\n\n1. **Database Connection**: Establishes a connection to your MySQL database.\n\n2. **addReview Function**: \n   - Adds a new review for a specific product.\n   - Checks if the user has already reviewed the product.\n   - Stores the rating, comment, and timestamp.\n\n3. **getProductReviews Function**:\n   - Retrieves all reviews for a specific product.\n   - Joins with the users table to get the username.\n\n4. **updateReview Function**: Updates an existing review's rating and comment.\n\n5. **deleteReview Function**: Deletes a specified review from the database.\n\n6. **displayReviews Function**: \n   - Displays all reviews for a product in a user-friendly format.\n   - Formats the output with HTML structure.\n\n7. **Example Usage**:\n   - Demonstrates how to submit a new review using a POST request.\n   - Shows how to display reviews for a specific product.\n\nTo use this code:\n\n1. Set up your database connection details at the top of the file.\n2. Create the necessary tables in your database:\n   ```sql\n   CREATE TABLE users (\n       id INT PRIMARY KEY AUTO_INCREMENT,\n       username VARCHAR(50) NOT NULL\n   );\n\n   CREATE TABLE reviews (\n       id INT PRIMARY KEY AUTO_INCREMENT,\n       user_id INT NOT NULL,\n       product_id INT NOT NULL,\n       rating INT NOT NULL,\n       comment TEXT NOT NULL,\n       timestamp DATETIME NOT NULL,\n       FOREIGN KEY (user_id) REFERENCES users(id)\n   );\n   ```\n3. Call the functions as needed in your application.\n\nThe system includes security measures like:\n\n- Prepared statements to prevent SQL injection\n- Input sanitization with htmlspecialchars()\n- Checks for duplicate reviews\n- Error handling\n\nYou can customize the display format by modifying the `displayReviews` function or adding CSS styles to match your website's design.", "code_blocks": ["```php\n<?php\n// Database connection configuration\n$host = \"localhost\";\n$username = \"root\";\n$password = \"\";\n$database = \"reviews_db\";\n\n// Create database connection\n$conn = new mysqli($host, $username, $password, $database);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add a review\nfunction addReview($userId, $productId, $rating, $comment) {\n    global $conn;\n    \n    // Check if the user has already reviewed this product\n    $checkQuery = \"SELECT * FROM reviews WHERE user_id = ? AND product_id = ?\";\n    $stmt = $conn->prepare($checkQuery);\n    $stmt->bind_param(\"ii\", $userId, $productId);\n    $stmt->execute();\n    \n    if ($stmt->fetch()) {\n        return false; // User already reviewed this product\n    }\n    \n    // Insert the new review into the database\n    $insertQuery = \"INSERT INTO reviews (user_id, product_id, rating, comment, timestamp) \n                   VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)\";\n    $stmt = $conn->prepare($insertQuery);\n    $stmt->bind_param(\"iisi\", $userId, $productId, $rating, $comment);\n    \n    if ($stmt->execute()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to get all reviews for a product\nfunction getProductReviews($productId) {\n    global $conn;\n    \n    $query = \"SELECT r.*, u.username FROM reviews r \n              JOIN users u ON r.user_id = u.id \n              WHERE product_id = ? \n              ORDER BY timestamp DESC\";\n    $stmt = $conn->prepare($query);\n    $stmt->bind_param(\"i\", $productId);\n    $stmt->execute();\n    \n    $result = $stmt->get_result();\n    return $result->fetch_all(MYSQLI_ASSOC);\n}\n\n// Function to update a review\nfunction updateReview($reviewId, $rating, $comment) {\n    global $conn;\n    \n    $updateQuery = \"UPDATE reviews SET rating = ?, comment = ? WHERE id = ?\";\n    $stmt = $conn->prepare($updateQuery);\n    $stmt->bind_param(\"isi\", $rating, $comment, $reviewId);\n    \n    if ($stmt->execute()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to delete a review\nfunction deleteReview($reviewId) {\n    global $conn;\n    \n    $deleteQuery = \"DELETE FROM reviews WHERE id = ?\";\n    $stmt = $conn->prepare($deleteQuery);\n    $stmt->bind_param(\"i\", $reviewId);\n    \n    if ($stmt->execute()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Function to display reviews\nfunction displayReviews($productId) {\n    $reviews = getProductReviews($productId);\n    \n    if (empty($reviews)) {\n        echo \"<p>No reviews available for this product.</p>\";\n        return;\n    }\n    \n    foreach ($reviews as $review) {\n        echo \"<div class='review'>\";\n        echo \"<h4>By \" . htmlspecialchars($review['username']) . \"</h4>\";\n        echo \"<p>Rating: \" . htmlspecialchars($review['rating']) . \" stars</p>\";\n        echo \"<p>\" . htmlspecialchars($review['comment']) . \"</p>\";\n        echo \"<small>Posted on: \" . date('F j, Y', strtotime($review['timestamp'])) . \"</small>\";\n        echo \"</div><hr>\";\n    }\n}\n\n// Example usage:\nif (isset($_POST['submit_review'])) {\n    $userId = 1; // Get this from user session\n    $productId = $_GET['product_id'];\n    $rating = $_POST['rating'];\n    $comment = $_POST['comment'];\n    \n    if (addReview($userId, $productId, $rating, $comment)) {\n        echo \"Thank you for submitting your review!\";\n    } else {\n        echo \"Error: Review could not be submitted.\";\n    }\n}\n\n// Display all reviews for a product\n$productId = 1; // Example product ID\ndisplayReviews($productId);\n\n$conn->close();\n?>\n```"]}
