{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, so the user asked to create a user review function using PHP. I need to figure out how to approach this.\n\nFirst, I should consider what a review system typically includes. Users can leave reviews with ratings and comments, and others can read them. So, I'll need functions for submitting, displaying, and maybe deleting or editing reviews.\n\nI'll start by outlining the necessary components: a form for submission, database tables to store reviews, user authentication since users should be logged in to review, and display features.\n\nNext, I think about the database structure. Reviews table with id, product_id, user_id, rating, comment, date. Users table has user details. Products table holds product info. So, I'll need to set up these tables first.\n\nThen, for adding a review, I'll create a function that takes product ID and user ID as parameters. It should validate the inputs: check if the user is logged in, ensure rating is between 1-5, etc. Then insert into the database.\n\nDisplaying reviews would involve fetching all reviews for a specific product, joining with users to get names or avatars. I'll calculate the average rating and total reviews. The function should return an array of reviews along with averages and count.\n\nSecurity is important. I'll use prepared statements to prevent SQL injection. Also, sanitize any user inputs before storing them.\n\nUser authentication is a must. So, checking if the user is logged in before allowing submission. That means having a session or cookie check.\n\nNow, putting it all together, I'll write the PHP code with these functions: add_review and display_reviews. I'll include placeholders for database connection details like host, username, password, and database name.\n\nI should also consider handling errors gracefully. If something goes wrong during submission or fetching, the function should return an appropriate message or error code.\n\nTesting is another consideration. After writing the code, testing each part step by step to ensure it works as expected.\n\nFinally, I'll provide instructions on how to set up the database and integrate these functions into a larger application.\n</think>\n\nHere's an example of a user review function using PHP:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'reviews';\n\n// Create a connection to the database\n$conn = new mysqli($host, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add a review\nfunction add_review($product_id, $user_id, $rating, $comment) {\n    global $conn;\n    \n    // Validate inputs\n    if (!isset($product_id) || !is_numeric($product_id)) {\n        return 'Invalid product ID';\n    }\n    if (!isset($user_id) || !is_numeric($user_id)) {\n        return 'Invalid user ID';\n    }\n    if (!isset($rating) || !is_numeric($rating) || $rating < 1 || $rating > 5) {\n        return 'Rating must be between 1 and 5';\n    }\n    if (empty($comment)) {\n        return 'Comment cannot be empty';\n    }\n    \n    // Sanitize inputs\n    $product_id = mysqli_real_escape_string($conn, $product_id);\n    $user_id = mysqli_real_escape_string($conn, $user_id);\n    $rating = mysqli_real_escape_string($conn, $rating);\n    $comment = mysqli_real_escape_string($conn, $comment);\n    \n    // Check if user is logged in\n    if (!isset($_SESSION['user_id'])) {\n        return 'Please log in to post a review';\n    }\n    \n    // Insert review into database\n    $sql = \"INSERT INTO reviews (product_id, user_id, rating, comment, date) \n            VALUES ('$product_id', '$user_id', '$rating', '$comment', NOW())\";\n    \n    if ($conn->query($sql)) {\n        return 'Review added successfully';\n    } else {\n        return 'Error adding review: ' . $conn->error;\n    }\n}\n\n// Function to display reviews for a product\nfunction display_reviews($product_id) {\n    global $conn;\n    \n    // Validate input\n    if (!isset($product_id) || !is_numeric($product_id)) {\n        return 'Invalid product ID';\n    }\n    \n    // Get reviews from database\n    $sql = \"SELECT r.rating, r.comment, r.date, u.username \n            FROM reviews r \n            JOIN users u ON r.user_id = u.id \n            WHERE r.product_id = '$product_id' \n            ORDER BY r.date DESC\";\n    \n    $result = $conn->query($sql);\n    \n    if ($result->num_rows > 0) {\n        $reviews = array();\n        \n        // Calculate average rating\n        $average_rating = 0;\n        $total_reviews = $result->num_rows;\n        \n        while ($row = $result->fetch_assoc()) {\n            $average_rating += $row['rating'];\n            $reviews[] = $row;\n        }\n        \n        $average_rating /= $total_reviews;\n        \n        return array(\n            'reviews' => $reviews,\n            'average_rating' => $average_rating,\n            'total_reviews' => $total_reviews\n        );\n    } else {\n        return 'No reviews found for this product';\n    }\n}\n\n// Example usage:\n// Assuming user is logged in and has a session with user_id set\n\n// Add a review\n$review_result = add_review(1, $_SESSION['user_id'], 4, \"Great product!\");\necho $review_result;\n\n// Display reviews for product ID 1\n$reviews = display_reviews(1);\nif (is_array($reviews)) {\n    echo \"<h3>Average Rating: \" . number_format($reviews['average_rating'], 1) . \"/5</h3>\";\n    echo \"<p>Total Reviews: \" . $reviews['total_reviews'] . \"</p>\";\n    \n    foreach ($reviews['reviews'] as $review) {\n        echo \"<div class='review'>\";\n        echo \"<p><strong>\" . $review['username'] . \"</strong> - \" . $review['rating'] . \"/5</p>\";\n        echo \"<p>\" . $review['comment'] . \"</p>\";\n        echo \"<p>\" . $review['date'] . \"</p>\";\n        echo \"</div>\";\n    }\n} else {\n    echo $reviews;\n}\n\n$conn->close();\n?>\n```\n\nThis code includes:\n\n1. A database connection configuration\n2. Two main functions:\n   - `add_review()`: Handles adding new reviews to the database\n   - `display_reviews()`: Retrieves and displays reviews for a specific product\n3. Input validation and sanitization\n4. Error handling\n5. Session check for user authentication\n\nTo use this code:\n\n1. Set up your database with tables for users, products, and reviews\n2. Replace the database configuration details (host, username, password, dbname)\n3. Make sure you have sessions started in your application\n4. Call the functions as needed in your application\n\nThe review system includes:\n- User authentication (users must be logged in to post reviews)\n- Rating validation (1-5 stars)\n- Comment validation\n- Sanitized input handling\n- Average rating calculation\n- Review display with user information and timestamps\n\nYou can customize the output formatting by modifying the HTML structure in the `display_reviews()` function example usage.\n\nRemember to:\n- Create your database tables before using this code\n- Handle user authentication properly\n- Add error handling as needed for your application\n- Sanitize all user inputs\n- Use proper security measures (e.g., prepared statements, CSRF protection)\n\nThis is a basic implementation and can be extended with features like:\n- Review editing/deletion\n- Sorting reviews by rating or date\n- Pagination for long review lists\n- Reporting system for inappropriate comments\n- Displaying user avatars\n- Adding helpfulness voting for reviews", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'reviews';\n\n// Create a connection to the database\n$conn = new mysqli($host, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add a review\nfunction add_review($product_id, $user_id, $rating, $comment) {\n    global $conn;\n    \n    // Validate inputs\n    if (!isset($product_id) || !is_numeric($product_id)) {\n        return 'Invalid product ID';\n    }\n    if (!isset($user_id) || !is_numeric($user_id)) {\n        return 'Invalid user ID';\n    }\n    if (!isset($rating) || !is_numeric($rating) || $rating < 1 || $rating > 5) {\n        return 'Rating must be between 1 and 5';\n    }\n    if (empty($comment)) {\n        return 'Comment cannot be empty';\n    }\n    \n    // Sanitize inputs\n    $product_id = mysqli_real_escape_string($conn, $product_id);\n    $user_id = mysqli_real_escape_string($conn, $user_id);\n    $rating = mysqli_real_escape_string($conn, $rating);\n    $comment = mysqli_real_escape_string($conn, $comment);\n    \n    // Check if user is logged in\n    if (!isset($_SESSION['user_id'])) {\n        return 'Please log in to post a review';\n    }\n    \n    // Insert review into database\n    $sql = \"INSERT INTO reviews (product_id, user_id, rating, comment, date) \n            VALUES ('$product_id', '$user_id', '$rating', '$comment', NOW())\";\n    \n    if ($conn->query($sql)) {\n        return 'Review added successfully';\n    } else {\n        return 'Error adding review: ' . $conn->error;\n    }\n}\n\n// Function to display reviews for a product\nfunction display_reviews($product_id) {\n    global $conn;\n    \n    // Validate input\n    if (!isset($product_id) || !is_numeric($product_id)) {\n        return 'Invalid product ID';\n    }\n    \n    // Get reviews from database\n    $sql = \"SELECT r.rating, r.comment, r.date, u.username \n            FROM reviews r \n            JOIN users u ON r.user_id = u.id \n            WHERE r.product_id = '$product_id' \n            ORDER BY r.date DESC\";\n    \n    $result = $conn->query($sql);\n    \n    if ($result->num_rows > 0) {\n        $reviews = array();\n        \n        // Calculate average rating\n        $average_rating = 0;\n        $total_reviews = $result->num_rows;\n        \n        while ($row = $result->fetch_assoc()) {\n            $average_rating += $row['rating'];\n            $reviews[] = $row;\n        }\n        \n        $average_rating /= $total_reviews;\n        \n        return array(\n            'reviews' => $reviews,\n            'average_rating' => $average_rating,\n            'total_reviews' => $total_reviews\n        );\n    } else {\n        return 'No reviews found for this product';\n    }\n}\n\n// Example usage:\n// Assuming user is logged in and has a session with user_id set\n\n// Add a review\n$review_result = add_review(1, $_SESSION['user_id'], 4, \"Great product!\");\necho $review_result;\n\n// Display reviews for product ID 1\n$reviews = display_reviews(1);\nif (is_array($reviews)) {\n    echo \"<h3>Average Rating: \" . number_format($reviews['average_rating'], 1) . \"/5</h3>\";\n    echo \"<p>Total Reviews: \" . $reviews['total_reviews'] . \"</p>\";\n    \n    foreach ($reviews['reviews'] as $review) {\n        echo \"<div class='review'>\";\n        echo \"<p><strong>\" . $review['username'] . \"</strong> - \" . $review['rating'] . \"/5</p>\";\n        echo \"<p>\" . $review['comment'] . \"</p>\";\n        echo \"<p>\" . $review['date'] . \"</p>\";\n        echo \"</div>\";\n    }\n} else {\n    echo $reviews;\n}\n\n$conn->close();\n?>\n```"]}
