{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, the user wants to create a user review function using PHP. I need to figure out what that entails.\n\nFirst, I should consider what a review system typically includes. Users can leave reviews with ratings and comments. So, the function needs to handle adding new reviews, displaying existing ones, maybe calculating averages.\n\nI'll start by thinking about the database structure. The reviews would probably be stored in a table with fields like review ID, user ID, product ID, rating, comment, timestamp, and whether it's approved. That makes sense because we need to track each review, associate it with a user and product, store the feedback, when it was made, and if it's been moderated.\n\nNext, I need functions to add a review, display them, get the average rating, and approve/reject reviews. Let me outline each function:\n\n1. **Adding a Review**: This function should take user input for rating and comment, associate it with the current user and product, and insert into the database. It should also handle escaping inputs to prevent SQL injection.\n\n2. **Displaying Reviews**: This would fetch all approved reviews from the database for a specific product, sort them by date, and display each with user info, rating stars, comment, and date.\n\n3. **Getting Average Rating**: Calculate the average rating for a product by querying the database and averaging the ratings column where approved is true.\n\n4. **Approving/Rejecting Reviews**: An admin function to change the approved status of a review, either allowing it to display or hiding it.\n\nI should also think about security. Using prepared statements with mysqli would be better than concatenating queries to prevent SQL injection. But in the example, I used mysqli_real_escape_string for simplicity, which is still better than not escaping at all.\n\nFor displaying stars, I can loop through the rating and show filled stars, then gray ones for the remaining up to 5. That gives a visual representation of each review's rating.\n\nModeration is important too. Reviews shouldn't be visible until approved, so there should be an admin interface to manage that. The function approve_review can toggle the status.\n\nI need to make sure each function connects to the database properly, perhaps using a config file for credentials. Also, handling cases where no reviews exist yet to avoid errors.\n\nTesting is crucial. I should check if all functions work as expected: adding a review, seeing it after approval, calculating averages correctly, and displaying everything neatly.\n\nFinally, I'll structure the answer by providing each function with explanations, include example usage, and mention how to connect them in a web page context.\n</think>\n\nHere's an example of a user review system in PHP. This includes functions for adding reviews, displaying reviews, and rating products:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\n// Function to add a review\nfunction addReview($userId, $productId, $rating, $comment) {\n    global $conn;\n    \n    // Escape special characters\n    $rating = htmlspecialchars(strip_tags($rating));\n    $comment = htmlspecialchars(strip_tags($comment));\n    \n    try {\n        $stmt = $conn->prepare(\"INSERT INTO reviews (user_id, product_id, rating, comment, review_date, approved) \n                              VALUES (:userId, :productId, :rating, :comment, NOW(), 0)\");\n        \n        $stmt->bindParam(':userId', $userId);\n        $stmt->bindParam(':productId', $productId);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':comment', $comment);\n        \n        $stmt->execute();\n        return true;\n    } catch (PDOException $e) {\n        echo \"Error adding review: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to get all reviews for a product\nfunction getReviews($productId) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT r.*, u.username FROM reviews r \n                              JOIN users u ON r.user_id = u.id \n                              WHERE r.product_id = :productId AND r.approved = 1 \n                              ORDER BY r.review_date DESC\");\n        \n        $stmt->bindParam(':productId', $productId);\n        $stmt->execute();\n        \n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch (PDOException $e) {\n        echo \"Error fetching reviews: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to get average rating for a product\nfunction getProductRating($productId) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT AVG(rating) as average_rating FROM reviews \n                              WHERE product_id = :productId AND approved = 1\");\n        \n        $stmt->bindParam(':productId', $productId);\n        $stmt->execute();\n        \n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n        return number_format($result['average_rating'], 1, '.', '');\n    } catch (PDOException $e) {\n        echo \"Error fetching rating: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to approve/reject reviews\nfunction moderateReview($reviewId, $approve = true) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"UPDATE reviews SET approved = :approved WHERE id = :reviewId\");\n        \n        $stmt->bindParam(':reviewId', $reviewId);\n        $stmt->bindParam(':approved', $approve ? 1 : 0);\n        \n        return $stmt->execute();\n    } catch (PDOException $e) {\n        echo \"Error moderating review: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    // Add a new review\n    $userId = 1; // Get from session or authentication\n    $productId = $_POST['product_id'];\n    $rating = $_POST['rating'];\n    $comment = $_POST['comment'];\n    \n    if (addReview($userId, $productId, $rating, $comment)) {\n        echo \"Review added successfully!\";\n    }\n}\n\n// Display reviews for product ID 1\n$reviews = getReviews(1);\nif ($reviews) {\n    foreach ($reviews as $review) {\n        // Display review details\n        echo \"<div class='review'>\";\n        echo \"<h3>By: \" . $review['username'] . \"</h3>\";\n        echo \"<p>Rating: \" . str_repeat(\"\u2605\", $review['rating']) . str_repeat(\"\u2606\", 5 - $review['rating']) . \"</p>\";\n        echo \"<p>\" . $review['comment'] . \"</p>\";\n        echo \"<small>Posted on: \" . $review['review_date'] . \"</small>\";\n        echo \"</div>\";\n    }\n}\n\n// Get and display average rating\n$averageRating = getProductRating(1);\necho \"<h2>Average Rating: $averageRating</h2>\";\n?>\n```\n\nThis code includes:\n\n1. A database connection setup using PDO\n\n2. `addReview()` function:\n   - Adds a new review to the database\n   - Sanitizes input data\n   - Marks reviews as unapproved initially (moderation system)\n\n3. `getReviews()` function:\n   - Retrieves approved reviews for a specific product\n   - Joins with user table to get username\n\n4. `getProductRating()` function:\n   - Calculates and returns the average rating for a product\n\n5. `moderateReview()` function:\n   - Approves or rejects reviews\n\nFeatures:\n\n- Review moderation system (approving/rejecting reviews)\n- Rating display using stars\n- Display of user comments\n- Average rating calculation\n- Secure database interactions using PDO prepared statements\n- Input sanitization to prevent SQL injection and XSS attacks\n\nTo use this code:\n\n1. Set up your database with the appropriate tables:\n   - Create a `reviews` table with columns for: id, user_id, product_id, rating, comment, review_date, approved\n   - Create a `users` table with columns for: id, username, etc.\n\n2. Update the database connection details in the configuration section\n\n3. Use the functions in your application:\n\n- When a user submits a review, use `addReview()`\n- Display reviews using `getReviews()`\n- Show average ratings using `getProductRating()`\n- Moderate reviews using `moderateReview()`\n\nRemember to:\n- Implement user authentication before allowing users to submit reviews\n- Add error handling and validation for all inputs\n- Style the review display with CSS\n- Create an admin interface for moderating reviews\n\nYou can extend this further by adding features like:\n- Sorting reviews (newest, oldest, highest rated)\n- Pagination for long lists of reviews\n- User avatars\n- Reporting system for inappropriate comments\n- Voting or helpfulness ratings for reviews", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\n// Function to add a review\nfunction addReview($userId, $productId, $rating, $comment) {\n    global $conn;\n    \n    // Escape special characters\n    $rating = htmlspecialchars(strip_tags($rating));\n    $comment = htmlspecialchars(strip_tags($comment));\n    \n    try {\n        $stmt = $conn->prepare(\"INSERT INTO reviews (user_id, product_id, rating, comment, review_date, approved) \n                              VALUES (:userId, :productId, :rating, :comment, NOW(), 0)\");\n        \n        $stmt->bindParam(':userId', $userId);\n        $stmt->bindParam(':productId', $productId);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':comment', $comment);\n        \n        $stmt->execute();\n        return true;\n    } catch (PDOException $e) {\n        echo \"Error adding review: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to get all reviews for a product\nfunction getReviews($productId) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT r.*, u.username FROM reviews r \n                              JOIN users u ON r.user_id = u.id \n                              WHERE r.product_id = :productId AND r.approved = 1 \n                              ORDER BY r.review_date DESC\");\n        \n        $stmt->bindParam(':productId', $productId);\n        $stmt->execute();\n        \n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch (PDOException $e) {\n        echo \"Error fetching reviews: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to get average rating for a product\nfunction getProductRating($productId) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"SELECT AVG(rating) as average_rating FROM reviews \n                              WHERE product_id = :productId AND approved = 1\");\n        \n        $stmt->bindParam(':productId', $productId);\n        $stmt->execute();\n        \n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n        return number_format($result['average_rating'], 1, '.', '');\n    } catch (PDOException $e) {\n        echo \"Error fetching rating: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to approve/reject reviews\nfunction moderateReview($reviewId, $approve = true) {\n    global $conn;\n    \n    try {\n        $stmt = $conn->prepare(\"UPDATE reviews SET approved = :approved WHERE id = :reviewId\");\n        \n        $stmt->bindParam(':reviewId', $reviewId);\n        $stmt->bindParam(':approved', $approve ? 1 : 0);\n        \n        return $stmt->execute();\n    } catch (PDOException $e) {\n        echo \"Error moderating review: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    // Add a new review\n    $userId = 1; // Get from session or authentication\n    $productId = $_POST['product_id'];\n    $rating = $_POST['rating'];\n    $comment = $_POST['comment'];\n    \n    if (addReview($userId, $productId, $rating, $comment)) {\n        echo \"Review added successfully!\";\n    }\n}\n\n// Display reviews for product ID 1\n$reviews = getReviews(1);\nif ($reviews) {\n    foreach ($reviews as $review) {\n        // Display review details\n        echo \"<div class='review'>\";\n        echo \"<h3>By: \" . $review['username'] . \"</h3>\";\n        echo \"<p>Rating: \" . str_repeat(\"\u2605\", $review['rating']) . str_repeat(\"\u2606\", 5 - $review['rating']) . \"</p>\";\n        echo \"<p>\" . $review['comment'] . \"</p>\";\n        echo \"<small>Posted on: \" . $review['review_date'] . \"</small>\";\n        echo \"</div>\";\n    }\n}\n\n// Get and display average rating\n$averageRating = getProductRating(1);\necho \"<h2>Average Rating: $averageRating</h2>\";\n?>\n```"]}
