{"prompt": "Create a user review function using php", "llm_output": "```php\n<?php\n\n/**\n * Class UserReview\n *\n * Handles the creation, retrieval, and display of user reviews.\n */\nclass UserReview\n{\n    private $reviews = [];\n\n    /**\n     * Adds a new review to the database.\n     *\n     * @param int $productId The ID of the product the review is for.\n     * @param string $username The username of the reviewer.\n     * @param string $rating The rating given by the user (e.g., 1-5).\n     * @param string $comment The user's review comment.\n     *\n     * @return bool True on success, false on failure (e.g., invalid rating).\n     */\n    public function addReview(int $productId, string $username, string $rating, string $comment): bool\n    {\n        // Validation: Check rating range\n        if (!preg_match('/^[1-5]$/', $rating)) {\n            return false;\n        }\n\n        // Create review object\n        $review = [\n            'productId' => $productId,\n            'username' => $username,\n            'rating' => $rating,\n            'comment' => $comment,\n            'date' => date('Y-m-d H:i:s') // Timestamp for date\n        ];\n\n        $this->reviews[] = $review;\n        return true;\n    }\n\n    /**\n     * Retrieves all reviews for a specific product.\n     *\n     * @param int $productId The ID of the product to retrieve reviews for.\n     *\n     * @return array An array of review objects for the product.  Returns an empty array if no reviews exist.\n     */\n    public function getReviewsByProduct(int $productId): array\n    {\n        $productReviews = [];\n        foreach ($this->reviews as $review) {\n            if ($review['productId'] === $productId) {\n                $productReviews[] = $review;\n            }\n        }\n        return $productReviews;\n    }\n\n    /**\n     * Retrieves a single review by product ID and username.\n     *\n     * @param int $productId The ID of the product.\n     * @param string $username The username of the reviewer.\n     *\n     * @return array|null An array containing the review object, or null if not found.\n     */\n    public function getReviewByProductAndUsername(int $productId, string $username): ?array\n    {\n        foreach ($this->reviews as $review) {\n            if ($review['productId'] === $productId && $review['username'] === $username) {\n                return [$review];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Calculates the average rating for a product.\n     *\n     * @param int $productId The ID of the product.\n     *\n     * @return float|null The average rating, or null if no reviews exist for the product.\n     */\n    public function getAverageRatingForProduct(int $productId): ?float\n    {\n        $reviews = $this->getReviewsByProduct($productId);\n        if (empty($reviews)) {\n            return null;\n        }\n\n        $totalRating = 0;\n        foreach ($reviews as $review) {\n            $totalRating += (float)$review['rating'];\n        }\n\n        return round($totalRating / count($reviews), 2); // Round to 2 decimal places\n    }\n\n\n    /**\n     * Displays a list of reviews for a product (for demonstration purposes).\n     *\n     * @param array $reviews  The reviews to display.\n     */\n    public function displayReviews(array $reviews)\n    {\n        echo \"<h2>Reviews for Product ID: \" . $reviews[0]['productId'] . \"</h2>\";\n        if (empty($reviews)) {\n            echo \"<p>No reviews found.</p>\";\n            return;\n        }\n\n        echo \"<ul>\";\n        foreach ($reviews as $review) {\n            echo \"<li>\";\n            echo \"<strong>Username:</strong> \" . htmlspecialchars($review['username']) . \"<br>\";\n            echo \"<strong>Rating:</strong> \" . $review['rating'] . \" / 5<br>\";\n            echo \"<strong>Comment:</strong> \" . htmlspecialchars($review['comment']) . \"<br>\";\n            echo \"<strong>Date:</strong> \" . $review['date'] . \"<br>\";\n            echo \"</li>\";\n        }\n        echo \"</ul>\";\n    }\n}\n\n// Example Usage:\n$reviewSystem = new UserReview();\n\n// Add some reviews\n$reviewSystem->addReview(123, \"JohnDoe\", \"5\", \"Great product! Highly recommended.\");\n$reviewSystem->addReview(123, \"JaneSmith\", \"4\", \"Good product, but could be better.\");\n$reviewSystem->addReview(456, \"PeterJones\", \"3\", \"It's okay.\");\n\n// Get reviews for product ID 123\n$reviews = $reviewSystem->getReviewsByProduct(123);\n$reviewSystem->displayReviews($reviews);\n\n// Get average rating for product ID 123\n$averageRating = $reviewSystem->getAverageRatingForProduct(123);\necho \"<br>Average Rating: \" . ($averageRating !== null ? $averageRating : \"No reviews found.\") . \"<br>\";\n\n// Get a single review\n$singleReview = $reviewSystem->getReviewByProductAndUsername(123, \"JohnDoe\");\nif ($singleReview) {\n    echo \"<br>Single Review: \";\n    $reviewSystem->displayReviews($singleReview);\n} else {\n    echo \"<p>Review not found.</p>\";\n}\n?>\n```\n\nKey improvements and explanations:\n\n* **Clear Class Structure:**  The code is now encapsulated within a `UserReview` class, promoting better organization and reusability.\n* **Data Storage:**  Uses a private `$reviews` array to store the reviews. This is a simple solution for demonstration.  In a real application, you'd likely use a database.\n* **Validation:** Includes validation in `addReview` to ensure the rating is a number between 1 and 5.  This prevents bad data from entering your system.\n* **`getReviewsByProduct`:**  Efficiently retrieves reviews based on a product ID.\n* **`getReviewByProductAndUsername`:** Retrieves a single review based on both product ID and username.\n* **`getAverageRatingForProduct`:**  Calculates the average rating, handling the case where no reviews exist for a product (returning `null`).  The `round()` function ensures the average is presented with a reasonable number of decimal places.\n* **`displayReviews`:**  Provides a way to display the reviews.  Uses `htmlspecialchars()` to prevent XSS vulnerabilities. This is *crucial* when displaying user-provided data.\n* **Error Handling:** Handles the case where no reviews are found, preventing errors when calculating the average rating.\n* **Type Hinting:** Uses type hinting (e.g., `int $productId`) for improved code readability and to catch potential errors during development.\n* **Documentation (DocBlocks):** Includes docblocks (comments starting with `/**`) to explain the purpose of each function, its parameters, and its return value.\n* **Example Usage:** Includes a clear example of how to use the `UserReview` class.\n* **XSS Protection:**  Critically, uses `htmlspecialchars()` when displaying user-provided content in the `displayReviews` function.  This prevents Cross-Site Scripting (XSS) attacks.  *Always* sanitize user input before displaying it.\n* **Database Integration (Important Note):** This example uses an in-memory array for storing reviews.  For a real application, you *must* use a database (e.g., MySQL, PostgreSQL, SQLite) to persist the reviews.  The code would need to be modified to interact with the database.\n\nHow to extend this:\n\n* **Database Integration:** The most important extension would be to connect to a database and save/load reviews from there.\n* **Authentication:** Add user authentication to ensure that only authorized users can add reviews.\n* **More Review Fields:** Add more fields to the review object (e.g., date added, rating given).\n* **Search:**  Implement search functionality to find reviews based on keywords.\n* **Sorting:** Add sorting options (e.g., by rating, date).\n* **Pagination:** If you have many reviews, implement pagination to display them in smaller chunks.\n* **Testing:**  Write unit tests to ensure the code works correctly.\n* **Rate Limiting:**  Implement rate limiting to prevent abuse (e.g., a user from submitting too many reviews in a short period).\n* **Security:** Thoroughly review and address any remaining security vulnerabilities.\n\nThis improved response provides a much more robust and secure foundation for a user review system.  Remember to adapt this code to your specific requirements and always prioritize security.\n", "code_blocks": ["```php\n<?php\n\n/**\n * Class UserReview\n *\n * Handles the creation, retrieval, and display of user reviews.\n */\nclass UserReview\n{\n    private $reviews = [];\n\n    /**\n     * Adds a new review to the database.\n     *\n     * @param int $productId The ID of the product the review is for.\n     * @param string $username The username of the reviewer.\n     * @param string $rating The rating given by the user (e.g., 1-5).\n     * @param string $comment The user's review comment.\n     *\n     * @return bool True on success, false on failure (e.g., invalid rating).\n     */\n    public function addReview(int $productId, string $username, string $rating, string $comment): bool\n    {\n        // Validation: Check rating range\n        if (!preg_match('/^[1-5]$/', $rating)) {\n            return false;\n        }\n\n        // Create review object\n        $review = [\n            'productId' => $productId,\n            'username' => $username,\n            'rating' => $rating,\n            'comment' => $comment,\n            'date' => date('Y-m-d H:i:s') // Timestamp for date\n        ];\n\n        $this->reviews[] = $review;\n        return true;\n    }\n\n    /**\n     * Retrieves all reviews for a specific product.\n     *\n     * @param int $productId The ID of the product to retrieve reviews for.\n     *\n     * @return array An array of review objects for the product.  Returns an empty array if no reviews exist.\n     */\n    public function getReviewsByProduct(int $productId): array\n    {\n        $productReviews = [];\n        foreach ($this->reviews as $review) {\n            if ($review['productId'] === $productId) {\n                $productReviews[] = $review;\n            }\n        }\n        return $productReviews;\n    }\n\n    /**\n     * Retrieves a single review by product ID and username.\n     *\n     * @param int $productId The ID of the product.\n     * @param string $username The username of the reviewer.\n     *\n     * @return array|null An array containing the review object, or null if not found.\n     */\n    public function getReviewByProductAndUsername(int $productId, string $username): ?array\n    {\n        foreach ($this->reviews as $review) {\n            if ($review['productId'] === $productId && $review['username'] === $username) {\n                return [$review];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Calculates the average rating for a product.\n     *\n     * @param int $productId The ID of the product.\n     *\n     * @return float|null The average rating, or null if no reviews exist for the product.\n     */\n    public function getAverageRatingForProduct(int $productId): ?float\n    {\n        $reviews = $this->getReviewsByProduct($productId);\n        if (empty($reviews)) {\n            return null;\n        }\n\n        $totalRating = 0;\n        foreach ($reviews as $review) {\n            $totalRating += (float)$review['rating'];\n        }\n\n        return round($totalRating / count($reviews), 2); // Round to 2 decimal places\n    }\n\n\n    /**\n     * Displays a list of reviews for a product (for demonstration purposes).\n     *\n     * @param array $reviews  The reviews to display.\n     */\n    public function displayReviews(array $reviews)\n    {\n        echo \"<h2>Reviews for Product ID: \" . $reviews[0]['productId'] . \"</h2>\";\n        if (empty($reviews)) {\n            echo \"<p>No reviews found.</p>\";\n            return;\n        }\n\n        echo \"<ul>\";\n        foreach ($reviews as $review) {\n            echo \"<li>\";\n            echo \"<strong>Username:</strong> \" . htmlspecialchars($review['username']) . \"<br>\";\n            echo \"<strong>Rating:</strong> \" . $review['rating'] . \" / 5<br>\";\n            echo \"<strong>Comment:</strong> \" . htmlspecialchars($review['comment']) . \"<br>\";\n            echo \"<strong>Date:</strong> \" . $review['date'] . \"<br>\";\n            echo \"</li>\";\n        }\n        echo \"</ul>\";\n    }\n}\n\n// Example Usage:\n$reviewSystem = new UserReview();\n\n// Add some reviews\n$reviewSystem->addReview(123, \"JohnDoe\", \"5\", \"Great product! Highly recommended.\");\n$reviewSystem->addReview(123, \"JaneSmith\", \"4\", \"Good product, but could be better.\");\n$reviewSystem->addReview(456, \"PeterJones\", \"3\", \"It's okay.\");\n\n// Get reviews for product ID 123\n$reviews = $reviewSystem->getReviewsByProduct(123);\n$reviewSystem->displayReviews($reviews);\n\n// Get average rating for product ID 123\n$averageRating = $reviewSystem->getAverageRatingForProduct(123);\necho \"<br>Average Rating: \" . ($averageRating !== null ? $averageRating : \"No reviews found.\") . \"<br>\";\n\n// Get a single review\n$singleReview = $reviewSystem->getReviewByProductAndUsername(123, \"JohnDoe\");\nif ($singleReview) {\n    echo \"<br>Single Review: \";\n    $reviewSystem->displayReviews($singleReview);\n} else {\n    echo \"<p>Review not found.</p>\";\n}\n?>\n```"]}
