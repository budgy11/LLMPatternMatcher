{"prompt": "Create a user review function using php", "llm_output": "```php\n<?php\n\n/**\n * User Review Function\n *\n * This function creates a simple user review system.  It allows users to\n * submit reviews, displays them, and provides basic functionality for\n * displaying average rating.\n */\n\nclass ReviewSystem\n{\n    private $reviews = []; // Store reviews - key is ID, value is review data\n\n    /**\n     * Adds a new review.\n     *\n     * @param int    $userId   The ID of the user submitting the review.\n     * @param string $comment  The review comment.\n     * @param int    $rating   The rating (1-5).\n     * @return int|false The ID of the newly created review, or false on failure.\n     */\n    public function addReview(int $userId, string $comment, int $rating)\n    {\n        if ($rating < 1 || $rating > 5) {\n            return false; // Invalid rating\n        }\n\n        $reviewId = count($this->reviews) + 1;\n        $this->reviews[$reviewId] = [\n            'user_id' => $userId,\n            'comment' => $comment,\n            'rating' => $rating,\n            'date' => date('Y-m-d H:i:s') // Store timestamp for sorting/filtering\n        ];\n\n        return $reviewId;\n    }\n\n    /**\n     * Retrieves all reviews.\n     *\n     * @return array An array of review data.\n     */\n    public function getAllReviews()\n    {\n        return $this->reviews;\n    }\n\n    /**\n     * Retrieves a specific review by its ID.\n     *\n     * @param int $reviewId The ID of the review.\n     * @return array|null Review data if found, null otherwise.\n     */\n    public function getReviewById(int $reviewId)\n    {\n        if (isset($this->reviews[$reviewId])) {\n            return $this->reviews[$reviewId];\n        }\n        return null;\n    }\n\n    /**\n     * Calculates the average rating.\n     *\n     * @return float|null The average rating, or null if no reviews exist.\n     */\n    public function getAverageRating()\n    {\n        $totalRating = 0;\n        $reviewCount = count($this->reviews);\n\n        if ($reviewCount > 0) {\n            foreach ($this->reviews as $review) {\n                $totalRating += $review['rating'];\n            }\n            return round($totalRating / $reviewCount, 2); // Round to 2 decimal places\n        }\n        return null;\n    }\n\n    /**\n     * Displays all reviews.\n     */\n    public function displayReviews()\n    {\n        echo \"<h2>All Reviews</h2>\";\n        if (count($this->reviews) == 0) {\n            echo \"<p>No reviews yet.</p>\";\n            return;\n        }\n\n        echo \"<ul>\";\n        foreach ($this->reviews as $review) {\n            echo \"<li>\";\n            echo \"<strong>User ID:</strong> \" . $review['user_id'] . \"<br>\";\n            echo \"<strong>Comment:</strong> \" . htmlspecialchars($review['comment']) . \"<br>\";  // Use htmlspecialchars for security\n            echo \"<strong>Rating:</strong> \" . $review['rating'] . \" / 5<br>\";\n            echo \"<strong>Date:</strong> \" . $review['date'] . \"<br>\";\n            echo \"</li>\";\n        }\n        echo \"</ul>\";\n    }\n}\n\n\n// Example Usage:\n$reviewSystem = new ReviewSystem();\n\n// Add some reviews\n$reviewId1 = $reviewSystem->addReview(123, \"Great product!\", 5);\n$reviewId2 = $reviewSystem->addReview(456, \"Could be better\", 3);\n$reviewId3 = $reviewSystem->addReview(789, \"Amazing!\", 5);\n\n\n// Display all reviews\necho \"<h2>Reviews Displayed:</h2>\";\n$reviewSystem->displayReviews();\n\n// Get average rating\n$averageRating = $reviewSystem->getAverageRating();\necho \"<br><h2>Average Rating:</h2>\";\nif ($averageRating !== null) {\n    echo \"<p>Average Rating: \" . $averageRating . \"</p>\";\n} else {\n    echo \"<p>No reviews to calculate average rating.</p>\";\n}\n\n\n// Get a specific review\n$review = $reviewSystem->getReviewById(2);\nif ($review) {\n    echo \"<br><h2>Specific Review (ID 2):</h2>\";\n    echo \"<p>User ID: \" . $review['user_id'] . \"</p>\";\n    echo \"<p>Comment: \" . htmlspecialchars($review['comment']) . \"</p>\";\n    echo \"<p>Rating: \" . $review['rating'] . \"</p>\";\n} else {\n    echo \"<p>Review not found.</p>\";\n}\n\n?>\n```\n\nKey improvements and explanations:\n\n* **Class Structure:**  The code is now organized into a `ReviewSystem` class for better encapsulation and reusability.\n* **Data Storage:**  Reviews are stored in a private `$reviews` array, making the data structure clear and accessible only through the class's methods.\n* **Error Handling/Validation:**  The `addReview` method now includes validation to ensure that the rating is within the acceptable range (1-5).  It returns `false` on failure.\n* **Timestamp:**  The `addReview` function adds a `date` field with a timestamp, enabling you to sort reviews by date or filter them.\n* **`htmlspecialchars()` for Security:**  Uses `htmlspecialchars()` when displaying the review comment.  This is *crucial* to prevent Cross-Site Scripting (XSS) attacks.  This function escapes HTML entities, ensuring that any potentially malicious code in the comment is rendered as text instead of being executed.\n* **Clearer Display:**  The `displayReviews()` method is improved to format the review information nicely.\n* **`getAverageRating()`:**  Calculates the average rating correctly.  Handles the case where there are no reviews.\n* **`getReviewById()`:** Retrieves a specific review by ID, returning `null` if the review doesn't exist.\n* **Comprehensive Example Usage:** The example usage code demonstrates how to add reviews, display them, calculate the average rating, and retrieve specific reviews.\n* **Return Values:** Methods now return useful values (e.g., the review ID, `null` for errors or missing data) to allow the calling code to handle situations properly.\n* **Comments and Documentation:** Added more comments to explain the purpose of each method and the logic within.\n\nHow to use this code:\n\n1.  **Save the code:** Save the code as a `.php` file (e.g., `review_system.php`).\n2.  **Run it:**  Place the file in your web server's document root and access it through your browser (e.g., `http://localhost/review_system.php`).\n3.  **Customize:** Modify the example usage code to add more reviews, handle errors, and integrate the review system into your application.  You would likely replace this simple example with forms and database interaction in a real application.\n\nThis improved version provides a more robust, secure, and well-structured solution for managing user reviews.  Remember to adapt it to your specific needs.\n", "code_blocks": ["```php\n<?php\n\n/**\n * User Review Function\n *\n * This function creates a simple user review system.  It allows users to\n * submit reviews, displays them, and provides basic functionality for\n * displaying average rating.\n */\n\nclass ReviewSystem\n{\n    private $reviews = []; // Store reviews - key is ID, value is review data\n\n    /**\n     * Adds a new review.\n     *\n     * @param int    $userId   The ID of the user submitting the review.\n     * @param string $comment  The review comment.\n     * @param int    $rating   The rating (1-5).\n     * @return int|false The ID of the newly created review, or false on failure.\n     */\n    public function addReview(int $userId, string $comment, int $rating)\n    {\n        if ($rating < 1 || $rating > 5) {\n            return false; // Invalid rating\n        }\n\n        $reviewId = count($this->reviews) + 1;\n        $this->reviews[$reviewId] = [\n            'user_id' => $userId,\n            'comment' => $comment,\n            'rating' => $rating,\n            'date' => date('Y-m-d H:i:s') // Store timestamp for sorting/filtering\n        ];\n\n        return $reviewId;\n    }\n\n    /**\n     * Retrieves all reviews.\n     *\n     * @return array An array of review data.\n     */\n    public function getAllReviews()\n    {\n        return $this->reviews;\n    }\n\n    /**\n     * Retrieves a specific review by its ID.\n     *\n     * @param int $reviewId The ID of the review.\n     * @return array|null Review data if found, null otherwise.\n     */\n    public function getReviewById(int $reviewId)\n    {\n        if (isset($this->reviews[$reviewId])) {\n            return $this->reviews[$reviewId];\n        }\n        return null;\n    }\n\n    /**\n     * Calculates the average rating.\n     *\n     * @return float|null The average rating, or null if no reviews exist.\n     */\n    public function getAverageRating()\n    {\n        $totalRating = 0;\n        $reviewCount = count($this->reviews);\n\n        if ($reviewCount > 0) {\n            foreach ($this->reviews as $review) {\n                $totalRating += $review['rating'];\n            }\n            return round($totalRating / $reviewCount, 2); // Round to 2 decimal places\n        }\n        return null;\n    }\n\n    /**\n     * Displays all reviews.\n     */\n    public function displayReviews()\n    {\n        echo \"<h2>All Reviews</h2>\";\n        if (count($this->reviews) == 0) {\n            echo \"<p>No reviews yet.</p>\";\n            return;\n        }\n\n        echo \"<ul>\";\n        foreach ($this->reviews as $review) {\n            echo \"<li>\";\n            echo \"<strong>User ID:</strong> \" . $review['user_id'] . \"<br>\";\n            echo \"<strong>Comment:</strong> \" . htmlspecialchars($review['comment']) . \"<br>\";  // Use htmlspecialchars for security\n            echo \"<strong>Rating:</strong> \" . $review['rating'] . \" / 5<br>\";\n            echo \"<strong>Date:</strong> \" . $review['date'] . \"<br>\";\n            echo \"</li>\";\n        }\n        echo \"</ul>\";\n    }\n}\n\n\n// Example Usage:\n$reviewSystem = new ReviewSystem();\n\n// Add some reviews\n$reviewId1 = $reviewSystem->addReview(123, \"Great product!\", 5);\n$reviewId2 = $reviewSystem->addReview(456, \"Could be better\", 3);\n$reviewId3 = $reviewSystem->addReview(789, \"Amazing!\", 5);\n\n\n// Display all reviews\necho \"<h2>Reviews Displayed:</h2>\";\n$reviewSystem->displayReviews();\n\n// Get average rating\n$averageRating = $reviewSystem->getAverageRating();\necho \"<br><h2>Average Rating:</h2>\";\nif ($averageRating !== null) {\n    echo \"<p>Average Rating: \" . $averageRating . \"</p>\";\n} else {\n    echo \"<p>No reviews to calculate average rating.</p>\";\n}\n\n\n// Get a specific review\n$review = $reviewSystem->getReviewById(2);\nif ($review) {\n    echo \"<br><h2>Specific Review (ID 2):</h2>\";\n    echo \"<p>User ID: \" . $review['user_id'] . \"</p>\";\n    echo \"<p>Comment: \" . htmlspecialchars($review['comment']) . \"</p>\";\n    echo \"<p>Rating: \" . $review['rating'] . \"</p>\";\n} else {\n    echo \"<p>Review not found.</p>\";\n}\n\n?>\n```"]}
