{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a user review function using PHP. Let me think about how to approach this.\n\nFirst, I should outline the main components required. The function needs to allow users to submit reviews, display them, and calculate an average rating. So, I'll probably need a form for submission, a way to store the data, and code to retrieve and display it.\n\nI'll start by setting up the database. A table named 'reviews' seems appropriate. It should include fields like review_id, user_name, rating, comment, and timestamp. That makes sense because each review needs to be unique, have the user's name, their rating, their comment, and when they submitted it.\n\nNext, I'll write the PHP function. The function should handle both submitting new reviews and displaying existing ones. Maybe I can use a switch statement or separate functions for each action, but since the user asked for one function, I'll include parameters to determine what to do.\n\nFor security, I need to prevent SQL injection. Using prepared statements with mysqli is the way to go. Also, validating inputs is crucial. I should check that the rating is an integer between 1 and 5, and that the comment isn't too long.\n\nWhen submitting a review, I'll insert the data into the database. Then, for displaying, I'll retrieve all reviews, calculate the average rating, count them, and present everything neatly. Formatting the timestamp to be user-friendly would improve readability.\n\nI should also handle cases where there are no reviews yet, showing a message instead of an empty list. Error handling is important too; if something goes wrong during submission or retrieval, the user should get a meaningful error message.\n\nTesting each part step by step will help catch any issues early. For example, submitting a review and checking if it appears correctly, testing edge cases like minimum and maximum ratings, and ensuring that invalid inputs are rejected.\n\nFinally, I'll provide instructions on how to use the function, including connecting to the database and using the form. This way, someone else can implement it without confusion.\n\nPutting it all together, the function should be robust, secure, and user-friendly. It covers submission, display, average calculation, and proper error handling.\n</think>\n\nHere's an example of a PHP function for creating a user review system:\n\n```php\n<?php\n// Database connection\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n$conn = mysqli_connect($servername, $username, $password, $dbname);\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// Create reviews table if it doesn't exist\n$sql = \"CREATE TABLE IF NOT EXISTS reviews (\n    review_id INT AUTO_INCREMENT PRIMARY KEY,\n    user_name VARCHAR(50),\n    rating INT,\n    comment TEXT,\n    timestamp DATETIME\n)\";\n\nif (mysqli_query($conn, $sql)) {\n    // Table created successfully\n} else {\n    echo \"Error creating table: \" . mysqli_error($conn);\n}\n\nfunction handleReviews($action = 'display', $user_name = '', $rating = 0, $comment = '') {\n    global $conn;\n\n    switch ($action) {\n        case 'submit':\n            // Validate input\n            if (empty($user_name)) {\n                die(\"Please enter your name.\");\n            }\n            if (!is_numeric($rating) || $rating < 1 || $rating > 5) {\n                die(\"Rating must be between 1 and 5.\");\n            }\n            if (strlen($comment) > 500) {\n                die(\"Comment is too long. Maximum length is 500 characters.\");\n            }\n\n            // Sanitize input\n            $user_name = mysqli_real_escape_string($conn, $user_name);\n            $rating = intval($rating);\n            $comment = mysqli_real_escape_string($conn, $comment);\n\n            // Insert review into database\n            $sql = \"INSERT INTO reviews (user_name, rating, comment, timestamp) \n                    VALUES ('$user_name', '$rating', '$comment', NOW())\";\n\n            if (mysqli_query($conn, $sql)) {\n                echo \"<script>alert('Review submitted successfully!');</script>\";\n            } else {\n                echo \"Error submitting review: \" . mysqli_error($conn);\n            }\n            break;\n\n        case 'display':\n            // Get all reviews from database\n            $sql = \"SELECT * FROM reviews ORDER BY timestamp DESC\";\n            $result = mysqli_query($conn, $sql);\n\n            if (mysqli_num_rows($result) > 0) {\n                // Calculate average rating\n                $average_rating = 0;\n                $total_ratings = 0;\n\n                while ($row = mysqli_fetch_assoc($result)) {\n                    $average_rating += $row['rating'];\n                    $total_ratings++;\n                }\n\n                if ($total_ratings > 0) {\n                    $average_rating /= $total_ratings;\n                }\n\n                // Reset result pointer\n                mysqli_data_seek($result, 0);\n\n                // Display reviews\n                echo \"<div class='reviews'>\";\n                echo \"<h2>Reviews (\" . $total_ratings . \")</h2>\";\n                echo \"<p>Average Rating: \" . number_format($average_rating, 1) . \"/5</p>\";\n                \n                while ($row = mysqli_fetch_assoc($result)) {\n                    $date = date('F j, Y g:i a', strtotime($row['timestamp']));\n                    echo \"<div class='review'>\";\n                    echo \"<strong>\" . htmlspecialchars($row['user_name']) . \"</strong> - \" . $date . \"<br>\";\n                    echo \"<span class='rating'>\u2605 \" . $row['rating'] . \"/5</span><br>\";\n                    echo \"<p>\" . nl2br(htmlspecialchars($row['comment'])) . \"</p>\";\n                    echo \"</div>\";\n                }\n                echo \"</div>\";\n            } else {\n                echo \"<p>No reviews yet. Be the first to review!</p>\";\n            }\n            break;\n\n        default:\n            die(\"Invalid action specified.\");\n    }\n}\n\n// Close database connection\nmysqli_close($conn);\n?>\n```\n\nThis code provides:\n\n1. A database table setup for storing reviews\n2. Functions to handle both submitting and displaying reviews\n3. Input validation and sanitization\n4. Error handling\n5. Average rating calculation\n6. Timestamp tracking\n\nTo use this review system, you'll need to:\n\n1. Create an HTML form for submitting reviews:\n```html\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n    <input type=\"text\" name=\"user_name\" placeholder=\"Your Name\" required>\n    <select name=\"rating\" required>\n        <option value=\"\">Choose Rating</option>\n        <option value=\"1\">1 - Poor</option>\n        <option value=\"2\">2 - Fair</option>\n        <option value=\"3\">3 - Good</option>\n        <option value=\"4\">4 - Very Good</option>\n        <option value=\"5\">5 - Excellent</option>\n    </select>\n    <textarea name=\"comment\" placeholder=\"Your Review\" required></textarea>\n    <input type=\"hidden\" name=\"action\" value=\"submit\">\n    <button type=\"submit\">Submit Review</button>\n</form>\n```\n\n2. Display the reviews somewhere on your page:\n```php\n<?php handleReviews('display'); ?>\n```\n\nFeatures of this review system:\n\n1. Users can rate from 1 to 5 stars\n2. Reviews are stored with timestamps\n3. Includes average rating calculation\n4. Basic input validation and sanitization\n5. Error handling for database operations\n6. Display of reviews in chronological order\n\nTo use this code:\n\n1. Replace the database connection details (username, password, dbname)\n2. Include the CSS styles for your review display\n3. Place the form where you want users to submit reviews\n4. Place the display function where you want to show the reviews\n\nRemember to add proper styling to make it look good and customize the error messages as needed.\n\nAlso note that this is a basic implementation - you might want to add features like:\n\n- User authentication\n- Review editing/deletion\n- Report abuse functionality\n- CAPTCHA protection\n- Image attachments\n- Pagination for long review lists\n\nLet me know if you'd like to see any of these additional features implemented!", "code_blocks": ["```php\n<?php\n// Database connection\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n$conn = mysqli_connect($servername, $username, $password, $dbname);\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// Create reviews table if it doesn't exist\n$sql = \"CREATE TABLE IF NOT EXISTS reviews (\n    review_id INT AUTO_INCREMENT PRIMARY KEY,\n    user_name VARCHAR(50),\n    rating INT,\n    comment TEXT,\n    timestamp DATETIME\n)\";\n\nif (mysqli_query($conn, $sql)) {\n    // Table created successfully\n} else {\n    echo \"Error creating table: \" . mysqli_error($conn);\n}\n\nfunction handleReviews($action = 'display', $user_name = '', $rating = 0, $comment = '') {\n    global $conn;\n\n    switch ($action) {\n        case 'submit':\n            // Validate input\n            if (empty($user_name)) {\n                die(\"Please enter your name.\");\n            }\n            if (!is_numeric($rating) || $rating < 1 || $rating > 5) {\n                die(\"Rating must be between 1 and 5.\");\n            }\n            if (strlen($comment) > 500) {\n                die(\"Comment is too long. Maximum length is 500 characters.\");\n            }\n\n            // Sanitize input\n            $user_name = mysqli_real_escape_string($conn, $user_name);\n            $rating = intval($rating);\n            $comment = mysqli_real_escape_string($conn, $comment);\n\n            // Insert review into database\n            $sql = \"INSERT INTO reviews (user_name, rating, comment, timestamp) \n                    VALUES ('$user_name', '$rating', '$comment', NOW())\";\n\n            if (mysqli_query($conn, $sql)) {\n                echo \"<script>alert('Review submitted successfully!');</script>\";\n            } else {\n                echo \"Error submitting review: \" . mysqli_error($conn);\n            }\n            break;\n\n        case 'display':\n            // Get all reviews from database\n            $sql = \"SELECT * FROM reviews ORDER BY timestamp DESC\";\n            $result = mysqli_query($conn, $sql);\n\n            if (mysqli_num_rows($result) > 0) {\n                // Calculate average rating\n                $average_rating = 0;\n                $total_ratings = 0;\n\n                while ($row = mysqli_fetch_assoc($result)) {\n                    $average_rating += $row['rating'];\n                    $total_ratings++;\n                }\n\n                if ($total_ratings > 0) {\n                    $average_rating /= $total_ratings;\n                }\n\n                // Reset result pointer\n                mysqli_data_seek($result, 0);\n\n                // Display reviews\n                echo \"<div class='reviews'>\";\n                echo \"<h2>Reviews (\" . $total_ratings . \")</h2>\";\n                echo \"<p>Average Rating: \" . number_format($average_rating, 1) . \"/5</p>\";\n                \n                while ($row = mysqli_fetch_assoc($result)) {\n                    $date = date('F j, Y g:i a', strtotime($row['timestamp']));\n                    echo \"<div class='review'>\";\n                    echo \"<strong>\" . htmlspecialchars($row['user_name']) . \"</strong> - \" . $date . \"<br>\";\n                    echo \"<span class='rating'>\u2605 \" . $row['rating'] . \"/5</span><br>\";\n                    echo \"<p>\" . nl2br(htmlspecialchars($row['comment'])) . \"</p>\";\n                    echo \"</div>\";\n                }\n                echo \"</div>\";\n            } else {\n                echo \"<p>No reviews yet. Be the first to review!</p>\";\n            }\n            break;\n\n        default:\n            die(\"Invalid action specified.\");\n    }\n}\n\n// Close database connection\nmysqli_close($conn);\n?>\n```", null, "```php\n<?php handleReviews('display'); ?>\n```"]}
