{"prompt": "Create a user review function using php", "llm_output": "Here's an example of how you can create a simple user review system in PHP. This system will have the following features:\n\n* Users can submit reviews\n* Reviews can be rated (1-5 stars)\n* Reviews can include text comments\n* Each review is associated with a specific product or item\n\nWe'll use MySQL as our database to store the data.\n\n**Database Schema**\n```php\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255),\n  email VARCHAR(255)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  product_id INT,\n  user_id INT,\n  rating TINYINT,\n  comment TEXT,\n  FOREIGN KEY (product_id) REFERENCES products(id),\n  FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n\n**PHP Code**\n```php\n<?php\n\n// Configuration file with database connection details\nrequire_once 'config.php';\n\n// Function to add a new review\nfunction addReview($productId, $userId, $rating, $comment) {\n  // Prepare the query to insert the review into the database\n  $query = \"INSERT INTO reviews (product_id, user_id, rating, comment)\n            VALUES (:productId, :userId, :rating, :comment)\";\n\n  try {\n    // Execute the query with prepared statement\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':productId', $productId);\n    $stmt->bindParam(':userId', $userId);\n    $stmt->bindParam(':rating', $rating);\n    $stmt->bindParam(':comment', $comment);\n    $result = $stmt->execute();\n\n    // Return the ID of the newly added review\n    return $db->lastInsertId();\n  } catch (PDOException $e) {\n    echo \"Error adding review: \" . $e->getMessage();\n    return false;\n  }\n}\n\n// Function to get all reviews for a specific product\nfunction getReviews($productId) {\n  // Prepare the query to select all reviews from the database\n  $query = \"SELECT r.id, u.name, r.rating, r.comment, p.name AS productName\n            FROM reviews r\n            JOIN users u ON r.user_id = u.id\n            JOIN products p ON r.product_id = p.id\n            WHERE r.product_id = :productId\";\n\n  try {\n    // Execute the query with prepared statement\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':productId', $productId);\n    $result = $stmt->execute();\n\n    // Return all reviews as an array of associative arrays\n    return $result->fetchAll(PDO::FETCH_ASSOC);\n  } catch (PDOException $e) {\n    echo \"Error getting reviews: \" . $e->getMessage();\n    return false;\n  }\n}\n\n// Function to get a single review by its ID\nfunction getReview($reviewId) {\n  // Prepare the query to select a single review from the database\n  $query = \"SELECT r.id, u.name, r.rating, r.comment, p.name AS productName\n            FROM reviews r\n            JOIN users u ON r.user_id = u.id\n            JOIN products p ON r.product_id = p.id\n            WHERE r.id = :reviewId\";\n\n  try {\n    // Execute the query with prepared statement\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':reviewId', $reviewId);\n    $result = $stmt->execute();\n\n    // Return a single review as an associative array, or false if not found\n    return $result->fetch(PDO::FETCH_ASSOC) ?: false;\n  } catch (PDOException $e) {\n    echo \"Error getting review: \" . $e->getMessage();\n    return false;\n  }\n}\n\n// Example usage:\n$productId = 1; // ID of the product to get reviews for\n$userRating = 5; // User's rating for the product (1-5)\n$userComment = 'Great product!'; // User's comment for the product\n\n$reviewId = addReview($productId, $_SESSION['userId'], $userRating, $userComment);\nif ($reviewId) {\n  echo \"Review added successfully!\";\n} else {\n  echo \"Error adding review.\";\n}\n\n$reviews = getReviews($productId);\nforeach ($reviews as $review) {\n  echo \"Review by {$review['name']} on product {$review['productName']}: {$review['rating']} stars, {$review['comment']}\";\n}\n```\n\nThis code provides the following functions:\n\n* `addReview()`: Adds a new review for a specific product with given rating and comment.\n* `getReviews()`: Retrieves all reviews for a specific product as an array of associative arrays.\n* `getReview()`: Retrieves a single review by its ID.\n\nThe example usage at the bottom demonstrates how to use these functions.", "code_blocks": ["```php\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255),\n  email VARCHAR(255)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255)\n);\n\nCREATE TABLE reviews (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  product_id INT,\n  user_id INT,\n  rating TINYINT,\n  comment TEXT,\n  FOREIGN KEY (product_id) REFERENCES products(id),\n  FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```", "```php\n<?php\n\n// Configuration file with database connection details\nrequire_once 'config.php';\n\n// Function to add a new review\nfunction addReview($productId, $userId, $rating, $comment) {\n  // Prepare the query to insert the review into the database\n  $query = \"INSERT INTO reviews (product_id, user_id, rating, comment)\n            VALUES (:productId, :userId, :rating, :comment)\";\n\n  try {\n    // Execute the query with prepared statement\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':productId', $productId);\n    $stmt->bindParam(':userId', $userId);\n    $stmt->bindParam(':rating', $rating);\n    $stmt->bindParam(':comment', $comment);\n    $result = $stmt->execute();\n\n    // Return the ID of the newly added review\n    return $db->lastInsertId();\n  } catch (PDOException $e) {\n    echo \"Error adding review: \" . $e->getMessage();\n    return false;\n  }\n}\n\n// Function to get all reviews for a specific product\nfunction getReviews($productId) {\n  // Prepare the query to select all reviews from the database\n  $query = \"SELECT r.id, u.name, r.rating, r.comment, p.name AS productName\n            FROM reviews r\n            JOIN users u ON r.user_id = u.id\n            JOIN products p ON r.product_id = p.id\n            WHERE r.product_id = :productId\";\n\n  try {\n    // Execute the query with prepared statement\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':productId', $productId);\n    $result = $stmt->execute();\n\n    // Return all reviews as an array of associative arrays\n    return $result->fetchAll(PDO::FETCH_ASSOC);\n  } catch (PDOException $e) {\n    echo \"Error getting reviews: \" . $e->getMessage();\n    return false;\n  }\n}\n\n// Function to get a single review by its ID\nfunction getReview($reviewId) {\n  // Prepare the query to select a single review from the database\n  $query = \"SELECT r.id, u.name, r.rating, r.comment, p.name AS productName\n            FROM reviews r\n            JOIN users u ON r.user_id = u.id\n            JOIN products p ON r.product_id = p.id\n            WHERE r.id = :reviewId\";\n\n  try {\n    // Execute the query with prepared statement\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':reviewId', $reviewId);\n    $result = $stmt->execute();\n\n    // Return a single review as an associative array, or false if not found\n    return $result->fetch(PDO::FETCH_ASSOC) ?: false;\n  } catch (PDOException $e) {\n    echo \"Error getting review: \" . $e->getMessage();\n    return false;\n  }\n}\n\n// Example usage:\n$productId = 1; // ID of the product to get reviews for\n$userRating = 5; // User's rating for the product (1-5)\n$userComment = 'Great product!'; // User's comment for the product\n\n$reviewId = addReview($productId, $_SESSION['userId'], $userRating, $userComment);\nif ($reviewId) {\n  echo \"Review added successfully!\";\n} else {\n  echo \"Error adding review.\";\n}\n\n$reviews = getReviews($productId);\nforeach ($reviews as $review) {\n  echo \"Review by {$review['name']} on product {$review['productName']}: {$review['rating']} stars, {$review['comment']}\";\n}\n```"]}
