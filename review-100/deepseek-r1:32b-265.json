{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, the user wants to create a user review function using PHP. Let me think about how to approach this.\n\nFirst, I should consider what features are essential for a review system. Users need to leave reviews and ratings, so I'll include fields for both. Displaying all reviews is important too, so others can see them. Also, calculating an average rating would be useful to show the overall sentiment.\n\nI'll start by setting up a database table to store the reviews. The table should have columns like review_id, user_id, product_id (if it's for a specific product), rating, comment, and timestamp. This way, each review is tied to a user and a product, which makes sense in most scenarios.\n\nNext, I'll need functions to add a new review and to retrieve all reviews for display. The add_review function will take user ID, product ID, rating, and comment as parameters. It should insert these into the database after sanitizing the inputs to prevent SQL injection. Using prepared statements with PDO would be secure here.\n\nFor displaying the reviews, the get_reviews function will fetch all entries from the reviews table related to a specific product. It should order them by the most recent first so users see the latest comments right away. Each review will include the user's name if available, the rating as stars, the comment itself, and the date it was posted.\n\nCalculating the average rating is another key part. The get_average_rating function will query the database to find the average of all ratings for a given product. If there are no reviews yet, it should return 0 to avoid division by zero errors or misleading averages.\n\nI'll also need to handle user authentication because only logged-in users should be able to leave reviews. Checking if the user is authenticated before allowing them to submit a review ensures that each review comes from a real user and prevents spam.\n\nDisplaying the average rating involves converting the numeric average into stars, maybe using emojis for simplicity. Each half-star can represent 0.5 increments, which gives a more detailed visual representation of the ratings.\n\nSecurity is important here. I'll make sure to use prepared statements in all database interactions to prevent SQL injection. Also, validating and sanitizing user inputs before storing them helps protect against other types of attacks like XSS.\n\nTesting each function step by step will be crucial. For example, after adding a review, I should check if it appears correctly on the product page. Ensuring that the average rating updates accurately when new reviews are added is also necessary.\n\nI might consider extending this basic setup in the future with features like editing or deleting reviews, handling errors more gracefully, and possibly using AJAX to submit reviews without reloading the page. But for now, focusing on core functionality will keep things manageable.\n\nPutting it all together, I'll structure the code by first setting up the database connection, then defining each function, followed by the authentication check, and finally displaying the reviews with their average rating. This logical flow ensures that everything works seamlessly when a user interacts with the review section.\n</think>\n\nHere's an example of a user review system using PHP:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'review_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to add a review\nfunction addReview($user_id, $product_id, $rating, $comment) {\n    global $conn;\n    \n    try {\n        // Sanitize inputs\n        $user_id = htmlspecialchars(strip_tags(trim($user_id)));\n        $product_id = htmlspecialchars(strip_tags(trim($product_id)));\n        $rating = (int)$rating;\n        $comment = htmlspecialchars(strip_tags(trim($comment)));\n        \n        // Check if rating is between 1 and 5\n        if ($rating < 1 || $rating > 5) {\n            throw new Exception(\"Rating must be between 1 and 5\");\n        }\n        \n        // Prepare SQL statement\n        $stmt = $conn->prepare(\"\n            INSERT INTO reviews (user_id, product_id, rating, comment, review_date)\n            VALUES (:user_id, :product_id, :rating, :comment, NOW())\n        \");\n        \n        $stmt->bindParam(':user_id', $user_id);\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':comment', $comment);\n        \n        if ($stmt->execute()) {\n            return true;\n        } else {\n            throw new Exception(\"Review submission failed\");\n        }\n    } catch(PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to get all reviews for a product\nfunction getReviews($product_id) {\n    global $conn;\n    \n    try {\n        // Sanitize input\n        $product_id = htmlspecialchars(strip_tags(trim($product_id)));\n        \n        // Prepare SQL statement\n        $stmt = $conn->prepare(\"\n            SELECT r.*, u.username \n            FROM reviews r\n            LEFT JOIN users u ON r.user_id = u.id\n            WHERE r.product_id = :product_id\n            ORDER BY r.review_date DESC\n        \");\n        \n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->execute();\n        \n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch(PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to calculate average rating\nfunction getAverageRating($product_id) {\n    global $conn;\n    \n    try {\n        // Sanitize input\n        $product_id = htmlspecialchars(strip_tags(trim($product_id)));\n        \n        // Prepare SQL statement\n        $stmt = $conn->prepare(\"\n            SELECT AVG(rating) as average \n            FROM reviews \n            WHERE product_id = :product_id\n        \");\n        \n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->execute();\n        \n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n        return round($result['average'], 1); // Round to one decimal place\n    } catch(PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage:\n\n// Check if user is logged in (replace with your authentication system)\nsession_start();\nif (!isset($_SESSION['user_id'])) {\n    header(\"Location: login.php\");\n    exit();\n}\n\n$user_id = $_SESSION['user_id'];\n$product_id = 1; // Replace with actual product ID\n\n// Handle review submission\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\" && isset($_POST['submit_review'])) {\n    $rating = $_POST['rating'];\n    $comment = $_POST['comment'];\n    \n    if (addReview($user_id, $product_id, $rating, $comment)) {\n        echo \"Thank you for submitting your review!\";\n    } else {\n        echo \"Error submitting review. Please try again.\";\n    }\n}\n\n// Get reviews\n$reviews = getReviews($product_id);\n\n// Display average rating\n$average_rating = getAverageRating($product_id);\necho \"<h3>Product Rating: $average_rating/5</h3>\";\n\n// Display reviews\nif ($reviews) {\n    foreach ($reviews as $review) {\n        echo \"<div class='review'>\";\n        echo \"<h4>Rating: \" . str_repeat(\"\u2605\", $review['rating']) . \"</h4>\";\n        if (isset($review['username'])) {\n            echo \"<p>By: \" . $review['username'] . \"</p>\";\n        }\n        echo \"<p>\" . $review['comment'] . \"</p>\";\n        echo \"<small>\" . date('M j, Y', strtotime($review['review_date'])) . \"</small>\";\n        echo \"</div>\";\n    }\n} else {\n    echo \"No reviews yet!\";\n}\n?>\n```\n\nThis code includes:\n\n1. Database connection setup\n2. Functions for:\n   - Adding a new review\n   - Getting all reviews for a product\n   - Calculating average rating\n3. Example usage showing how to:\n   - Check if user is authenticated\n   - Submit a new review\n   - Display reviews with ratings and dates\n   - Show the average rating\n\nKey features:\n\n- Security measures (SQL injection prevention, input sanitization)\n- Error handling\n- Rating display using stars\n- Average rating calculation\n- Timestamp for each review\n- User identification (shows username if available)\n\nTo use this code:\n\n1. Create a database table named `reviews` with columns:\n   - review_id (INT AUTO_INCREMENT PRIMARY KEY)\n   - user_id (INT)\n   - product_id (INT)\n   - rating (INT)\n   - comment (TEXT)\n   - review_date (DATETIME)\n\n2. Modify the database configuration variables at the top to match your environment\n\n3. Include this code in a PHP file and ensure it's properly integrated into your application\n\nNote: You'll need to implement your own authentication system or modify the existing code to fit your user management system.\n\nYou can also extend this basic implementation by adding features like:\n- Review editing/deletion\n- Sorting reviews (most helpful, newest, etc.)\n- Pagination for long lists of reviews\n- User avatars\n- Like/Dislike buttons on reviews\n- Reporting system for inappropriate comments", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'review_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to add a review\nfunction addReview($user_id, $product_id, $rating, $comment) {\n    global $conn;\n    \n    try {\n        // Sanitize inputs\n        $user_id = htmlspecialchars(strip_tags(trim($user_id)));\n        $product_id = htmlspecialchars(strip_tags(trim($product_id)));\n        $rating = (int)$rating;\n        $comment = htmlspecialchars(strip_tags(trim($comment)));\n        \n        // Check if rating is between 1 and 5\n        if ($rating < 1 || $rating > 5) {\n            throw new Exception(\"Rating must be between 1 and 5\");\n        }\n        \n        // Prepare SQL statement\n        $stmt = $conn->prepare(\"\n            INSERT INTO reviews (user_id, product_id, rating, comment, review_date)\n            VALUES (:user_id, :product_id, :rating, :comment, NOW())\n        \");\n        \n        $stmt->bindParam(':user_id', $user_id);\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':comment', $comment);\n        \n        if ($stmt->execute()) {\n            return true;\n        } else {\n            throw new Exception(\"Review submission failed\");\n        }\n    } catch(PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to get all reviews for a product\nfunction getReviews($product_id) {\n    global $conn;\n    \n    try {\n        // Sanitize input\n        $product_id = htmlspecialchars(strip_tags(trim($product_id)));\n        \n        // Prepare SQL statement\n        $stmt = $conn->prepare(\"\n            SELECT r.*, u.username \n            FROM reviews r\n            LEFT JOIN users u ON r.user_id = u.id\n            WHERE r.product_id = :product_id\n            ORDER BY r.review_date DESC\n        \");\n        \n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->execute();\n        \n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    } catch(PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to calculate average rating\nfunction getAverageRating($product_id) {\n    global $conn;\n    \n    try {\n        // Sanitize input\n        $product_id = htmlspecialchars(strip_tags(trim($product_id)));\n        \n        // Prepare SQL statement\n        $stmt = $conn->prepare(\"\n            SELECT AVG(rating) as average \n            FROM reviews \n            WHERE product_id = :product_id\n        \");\n        \n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->execute();\n        \n        $result = $stmt->fetch(PDO::FETCH_ASSOC);\n        return round($result['average'], 1); // Round to one decimal place\n    } catch(PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage:\n\n// Check if user is logged in (replace with your authentication system)\nsession_start();\nif (!isset($_SESSION['user_id'])) {\n    header(\"Location: login.php\");\n    exit();\n}\n\n$user_id = $_SESSION['user_id'];\n$product_id = 1; // Replace with actual product ID\n\n// Handle review submission\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\" && isset($_POST['submit_review'])) {\n    $rating = $_POST['rating'];\n    $comment = $_POST['comment'];\n    \n    if (addReview($user_id, $product_id, $rating, $comment)) {\n        echo \"Thank you for submitting your review!\";\n    } else {\n        echo \"Error submitting review. Please try again.\";\n    }\n}\n\n// Get reviews\n$reviews = getReviews($product_id);\n\n// Display average rating\n$average_rating = getAverageRating($product_id);\necho \"<h3>Product Rating: $average_rating/5</h3>\";\n\n// Display reviews\nif ($reviews) {\n    foreach ($reviews as $review) {\n        echo \"<div class='review'>\";\n        echo \"<h4>Rating: \" . str_repeat(\"\u2605\", $review['rating']) . \"</h4>\";\n        if (isset($review['username'])) {\n            echo \"<p>By: \" . $review['username'] . \"</p>\";\n        }\n        echo \"<p>\" . $review['comment'] . \"</p>\";\n        echo \"<small>\" . date('M j, Y', strtotime($review['review_date'])) . \"</small>\";\n        echo \"</div>\";\n    }\n} else {\n    echo \"No reviews yet!\";\n}\n?>\n```"]}
