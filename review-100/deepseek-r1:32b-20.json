{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a user review function using PHP. Let me think about how to approach this.\n\nFirst, the function should allow users to leave reviews and ratings for products or services. So, I'll need fields for the product ID, user name, rating, and comment. \n\nI'll start by setting up an HTML form with these input fields. The form will use POST method to send data to a PHP script.\n\nNext, I need to handle the form submission in PHP. I'll retrieve the posted values using $_POST superglobal. It's important to sanitize these inputs to prevent SQL injection and XSS attacks. Maybe I'll create a function called sanitizeInput for this purpose, which trims whitespace and uses htmlspecialchars.\n\nThen, I should validate the input data. The product ID should be an integer, so I'll check if it's set and is numeric. The user name must not be empty and shouldn't contain special characters. For the rating, it has to be a number between 1 and 5. If any validation fails, I'll display appropriate error messages.\n\nAfter validation, I'll connect to the MySQL database. I'll use mysqli_connect with host, username, password, and database name. It's good practice to check if the connection was successful and handle errors.\n\nOnce connected, I need to insert the review into the reviews table. The SQL query will include placeholders for product_id, user_name, rating, and comment. Using prepared statements with bind_param will help prevent SQL injection.\n\nIf the insertion is successful, I'll display a success message. If not, an error message will inform the user something went wrong.\n\nI should also provide feedback to the user after submission, so they know whether their review was successfully added or if there were any issues. This can be done by checking the return value of mysqli_stmt_execute and displaying corresponding messages using echo statements.\n\nFinally, I'll make sure to close the database connection after processing to free up resources.\n\nPutting it all together, the PHP script will handle form submission, sanitize inputs, validate data, connect to the database, insert the review, and provide feedback. This should create a functional user review system.\n</think>\n\nHere's an example of a user review function in PHP:\n\n```php\n<?php\n// Database configuration\n$host = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$db_name = \"reviews_db\";\n\n// Connect to the database\n$conn = mysqli_connect($host, $username, $password, $db_name);\n\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// Function to sanitize input data\nfunction sanitizeInput($data) {\n    return htmlspecialchars(trim($data));\n}\n\n// Check if form is submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n\n    // Get form values\n    $productId = $_POST['product_id'];\n    $userName = $_POST['user_name'];\n    $rating = $_POST['rating'];\n    $comment = $_POST['comment'];\n\n    // Validate input data\n    if (empty($productId) || empty($userName) || empty($rating) || empty($comment)) {\n        echo \"All fields are required!\";\n    } else {\n\n        // Check if product_id is numeric\n        if (!is_numeric($productId)) {\n            die(\"Product ID must be a number.\");\n        }\n\n        // Sanitize inputs\n        $productId = sanitizeInput($productId);\n        $userName = sanitizeInput($userName);\n        $rating = sanitizeInput($rating);\n        $comment = sanitizeInput($comment);\n\n        // Check if rating is between 1 and 5\n        if ($rating < 1 || $rating > 5) {\n            die(\"Rating must be between 1 and 5.\");\n        }\n\n        // Prepare SQL statement to insert review\n        $stmt = $conn->prepare(\"INSERT INTO reviews (product_id, user_name, rating, comment) VALUES (?, ?, ?, ?)\");\n        \n        if ($stmt === false) {\n            die(\"Prepare failed: \" . mysqli_error($conn));\n        }\n\n        // Bind parameters\n        $stmt->bind_param(\"isdi\", $productId, $userName, $rating, $comment);\n\n        // Execute the statement\n        if ($stmt->execute()) {\n            echo \"Thank you for your review!\";\n        } else {\n            echo \"Error: \" . $stmt->error;\n        }\n\n        // Close the statement\n        $stmt->close();\n    }\n}\n\n// Close database connection\nmysqli_close($conn);\n?>\n```\n\nThis PHP code includes:\n\n1. Database configuration and connection setup\n2. Input sanitization function to prevent XSS attacks\n3. Form data validation:\n   - Checks for empty fields\n   - Verifies product_id is numeric\n   - Ensures rating is between 1 and 5\n4. Prepared SQL statement to insert review data into the database\n5. Error handling and feedback messages\n\nTo use this code:\n\n1. Create a MySQL database named `reviews_db`\n2. Create a table called `reviews` with columns: id, product_id, user_name, rating, comment\n3. Update the database credentials in the configuration section\n4. Use this script to handle form submissions from your review page\n\nThe corresponding HTML form could look like this:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product Review</title>\n</head>\n<body>\n    <h1>Submit Your Review</h1>\n    \n    <form action=\"submit_review.php\" method=\"post\">\n        <div>\n            <label for=\"product_id\">Product ID:</label><br>\n            <input type=\"text\" id=\"product_id\" name=\"product_id\">\n        </div>\n\n        <div>\n            <label for=\"user_name\">Your Name:</label><br>\n            <input type=\"text\" id=\"user_name\" name=\"user_name\">\n        </div>\n\n        <div>\n            <label for=\"rating\">Rating (1-5):</label><br>\n            <input type=\"number\" id=\"rating\" name=\"rating\" min=\"1\" max=\"5\">\n        </div>\n\n        <div>\n            <label for=\"comment\">Comment:</label><br>\n            <textarea id=\"comment\" name=\"comment\" rows=\"4\"></textarea>\n        </div>\n\n        <button type=\"submit\">Submit Review</button>\n    </form>\n</body>\n</html>\n```\n\nThis implementation:\n\n- Protects against SQL injection using prepared statements\n- Sanitizes input data to prevent XSS attacks\n- Validates user input before processing\n- Provides error feedback for users\n- Maintains database integrity with proper data handling\n\nMake sure to adjust the database credentials and table structure according to your needs. Also, you might want to add more validation and error handling based on your specific requirements.", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$db_name = \"reviews_db\";\n\n// Connect to the database\n$conn = mysqli_connect($host, $username, $password, $db_name);\n\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// Function to sanitize input data\nfunction sanitizeInput($data) {\n    return htmlspecialchars(trim($data));\n}\n\n// Check if form is submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n\n    // Get form values\n    $productId = $_POST['product_id'];\n    $userName = $_POST['user_name'];\n    $rating = $_POST['rating'];\n    $comment = $_POST['comment'];\n\n    // Validate input data\n    if (empty($productId) || empty($userName) || empty($rating) || empty($comment)) {\n        echo \"All fields are required!\";\n    } else {\n\n        // Check if product_id is numeric\n        if (!is_numeric($productId)) {\n            die(\"Product ID must be a number.\");\n        }\n\n        // Sanitize inputs\n        $productId = sanitizeInput($productId);\n        $userName = sanitizeInput($userName);\n        $rating = sanitizeInput($rating);\n        $comment = sanitizeInput($comment);\n\n        // Check if rating is between 1 and 5\n        if ($rating < 1 || $rating > 5) {\n            die(\"Rating must be between 1 and 5.\");\n        }\n\n        // Prepare SQL statement to insert review\n        $stmt = $conn->prepare(\"INSERT INTO reviews (product_id, user_name, rating, comment) VALUES (?, ?, ?, ?)\");\n        \n        if ($stmt === false) {\n            die(\"Prepare failed: \" . mysqli_error($conn));\n        }\n\n        // Bind parameters\n        $stmt->bind_param(\"isdi\", $productId, $userName, $rating, $comment);\n\n        // Execute the statement\n        if ($stmt->execute()) {\n            echo \"Thank you for your review!\";\n        } else {\n            echo \"Error: \" . $stmt->error;\n        }\n\n        // Close the statement\n        $stmt->close();\n    }\n}\n\n// Close database connection\nmysqli_close($conn);\n?>\n```", null]}
