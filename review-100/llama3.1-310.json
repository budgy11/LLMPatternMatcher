{"prompt": "Create a user review function using php", "llm_output": "**User Review Function in PHP**\n=====================================\n\nBelow is an example of a user review function in PHP that allows users to submit reviews, display reviews, and calculate ratings.\n\n### Database Schema\n```php\nCREATE TABLE reviews (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT,\n  product_id INT,\n  rating TINYINT(1),\n  title VARCHAR(255),\n  content TEXT,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(100)\n);\n```\n### PHP Function\n```php\n// review.php\n\nclass Review {\n  private $db;\n\n  public function __construct() {\n    // Connect to database\n    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');\n  }\n\n  /**\n   * Submit a new review\n   *\n   * @param int $userId The user's ID\n   * @param int $productId The product's ID\n   * @param string $title The title of the review\n   * @param string $content The content of the review\n   * @param int $rating The rating given to the product (1-5)\n   *\n   * @return bool True if the review was submitted successfully, false otherwise\n   */\n  public function submitReview($userId, $productId, $title, $content, $rating) {\n    try {\n      // Prepare and execute query\n      $query = $this->db->prepare(\"INSERT INTO reviews (user_id, product_id, title, content, rating) VALUES (?, ?, ?, ?, ?)\");\n      $query->execute([$userId, $productId, $title, $content, $rating]);\n      return true;\n    } catch (PDOException $e) {\n      // Log error and rethrow\n      error_log($e->getMessage());\n      throw $e;\n    }\n  }\n\n  /**\n   * Display reviews for a specific product\n   *\n   * @param int $productId The ID of the product\n   *\n   * @return array An array of review objects, or an empty array if no reviews exist\n   */\n  public function getReviews($productId) {\n    try {\n      // Prepare and execute query\n      $query = $this->db->prepare(\"SELECT * FROM reviews WHERE product_id = ?\");\n      $query->execute([$productId]);\n      $reviews = [];\n      while ($row = $query->fetch()) {\n        $review = new stdClass();\n        $review->id = $row['id'];\n        $review->user_id = $row['user_id'];\n        $review->product_id = $row['product_id'];\n        $review->rating = $row['rating'];\n        $review->title = $row['title'];\n        $review->content = $row['content'];\n        $reviews[] = $review;\n      }\n      return $reviews;\n    } catch (PDOException $e) {\n      // Log error and rethrow\n      error_log($e->getMessage());\n      throw $e;\n    }\n  }\n\n  /**\n   * Calculate the average rating for a specific product\n   *\n   * @param int $productId The ID of the product\n   *\n   * @return float|null The average rating, or null if no reviews exist\n   */\n  public function getAverageRating($productId) {\n    try {\n      // Prepare and execute query\n      $query = $this->db->prepare(\"SELECT AVG(rating) AS avg_rating FROM reviews WHERE product_id = ?\");\n      $query->execute([$productId]);\n      $result = $query->fetch();\n      return isset($result['avg_rating']) ? $result['avg_rating'] : null;\n    } catch (PDOException $e) {\n      // Log error and rethrow\n      error_log($e->getMessage());\n      throw $e;\n    }\n  }\n}\n```\n### Example Usage\n```php\n// Include the review class\nrequire 'review.php';\n\n// Create a new instance of the Review class\n$review = new Review();\n\n// Submit a new review\n$userId = 1;\n$productId = 2;\n$title = 'Great product!';\n$content = 'I loved this product!';\n$rating = 5;\n$review->submitReview($userId, $productId, $title, $content, $rating);\n\n// Display reviews for the specified product\n$reviews = $review->getReviews($productId);\nforeach ($reviews as $review) {\n  echo \"Rating: $review->rating, Title: $review->title, Content: $review->content\\n\";\n}\n\n// Calculate and display the average rating for the product\n$averageRating = $review->getAverageRating($productId);\necho \"Average Rating: $averageRating\\n\";\n```\nThis code defines a `Review` class with methods to submit new reviews, retrieve reviews for a specific product, and calculate the average rating for a product. The example usage demonstrates how to use these methods in your application.\n\n**Note:** This is just an example implementation, you may want to modify it according to your needs and database schema. Also, this code doesn't handle any errors or exceptions properly, you should add proper error handling based on your requirements.", "code_blocks": ["```php\nCREATE TABLE reviews (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT,\n  product_id INT,\n  rating TINYINT(1),\n  title VARCHAR(255),\n  content TEXT,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(100)\n);\n```", "```php\n// review.php\n\nclass Review {\n  private $db;\n\n  public function __construct() {\n    // Connect to database\n    $this->db = new PDO('mysql:host=localhost;dbname=reviews', 'username', 'password');\n  }\n\n  /**\n   * Submit a new review\n   *\n   * @param int $userId The user's ID\n   * @param int $productId The product's ID\n   * @param string $title The title of the review\n   * @param string $content The content of the review\n   * @param int $rating The rating given to the product (1-5)\n   *\n   * @return bool True if the review was submitted successfully, false otherwise\n   */\n  public function submitReview($userId, $productId, $title, $content, $rating) {\n    try {\n      // Prepare and execute query\n      $query = $this->db->prepare(\"INSERT INTO reviews (user_id, product_id, title, content, rating) VALUES (?, ?, ?, ?, ?)\");\n      $query->execute([$userId, $productId, $title, $content, $rating]);\n      return true;\n    } catch (PDOException $e) {\n      // Log error and rethrow\n      error_log($e->getMessage());\n      throw $e;\n    }\n  }\n\n  /**\n   * Display reviews for a specific product\n   *\n   * @param int $productId The ID of the product\n   *\n   * @return array An array of review objects, or an empty array if no reviews exist\n   */\n  public function getReviews($productId) {\n    try {\n      // Prepare and execute query\n      $query = $this->db->prepare(\"SELECT * FROM reviews WHERE product_id = ?\");\n      $query->execute([$productId]);\n      $reviews = [];\n      while ($row = $query->fetch()) {\n        $review = new stdClass();\n        $review->id = $row['id'];\n        $review->user_id = $row['user_id'];\n        $review->product_id = $row['product_id'];\n        $review->rating = $row['rating'];\n        $review->title = $row['title'];\n        $review->content = $row['content'];\n        $reviews[] = $review;\n      }\n      return $reviews;\n    } catch (PDOException $e) {\n      // Log error and rethrow\n      error_log($e->getMessage());\n      throw $e;\n    }\n  }\n\n  /**\n   * Calculate the average rating for a specific product\n   *\n   * @param int $productId The ID of the product\n   *\n   * @return float|null The average rating, or null if no reviews exist\n   */\n  public function getAverageRating($productId) {\n    try {\n      // Prepare and execute query\n      $query = $this->db->prepare(\"SELECT AVG(rating) AS avg_rating FROM reviews WHERE product_id = ?\");\n      $query->execute([$productId]);\n      $result = $query->fetch();\n      return isset($result['avg_rating']) ? $result['avg_rating'] : null;\n    } catch (PDOException $e) {\n      // Log error and rethrow\n      error_log($e->getMessage());\n      throw $e;\n    }\n  }\n}\n```", "```php\n// Include the review class\nrequire 'review.php';\n\n// Create a new instance of the Review class\n$review = new Review();\n\n// Submit a new review\n$userId = 1;\n$productId = 2;\n$title = 'Great product!';\n$content = 'I loved this product!';\n$rating = 5;\n$review->submitReview($userId, $productId, $title, $content, $rating);\n\n// Display reviews for the specified product\n$reviews = $review->getReviews($productId);\nforeach ($reviews as $review) {\n  echo \"Rating: $review->rating, Title: $review->title, Content: $review->content\\n\";\n}\n\n// Calculate and display the average rating for the product\n$averageRating = $review->getAverageRating($productId);\necho \"Average Rating: $averageRating\\n\";\n```"]}
