{"prompt": "Create a user review function using php", "llm_output": "<think>\nAlright, the user asked to create a user review function using PHP. I need to figure out what exactly they're looking for. They probably want a script that allows users to leave reviews on a website, maybe for products or services.\n\nFirst, I should outline the basic components needed. The function needs to handle different types of reviews\u2014like product, service, etc.\u2014so including a category parameter makes sense. Each review will have an ID, user ID, and timestamp for tracking.\n\nI'll start by creating an SQL table structure. It should include all necessary fields: id, user_id, category, rating, comment, status, and created_at. This way, the reviews can be stored properly in a database.\n\nNext, I need functions to add and display reviews. The add_review function will take parameters like user ID, category, rating, and comment. It should validate the input to ensure ratings are between 1-5 and comments aren't too long or empty. Then, it inserts into the database using prepared statements for security.\n\nFor displaying reviews, I'll write a display_reviews function that fetches them from the database. It can accept parameters like category, limit, and offset for filtering and pagination. Using placeholders in SQL queries helps prevent injection attacks.\n\nIncluding an example usage is important so the user knows how to integrate these functions into their site. They might want to see how to collect input from a form, add the review, and then display it on another page.\n\nI should also mention additional features they might consider, like pagination or handling user sessions for authentication. These aren't part of the basic function but are useful enhancements.\n\nFinally, I'll remind them about security practices, such as sanitizing inputs and using prepared statements to prevent SQL injection. It's crucial to highlight best practices to ensure their implementation is secure.\n</think>\n\nHere's an example of a user review system in PHP:\n\n```php\n<?php\n// Database connection\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to add a review\nfunction add_review($user_id, $category, $rating, $comment) {\n    global $conn;\n    \n    // Validate input\n    if ($rating < 1 || $rating > 5) {\n        return false;\n    }\n    if (empty($comment)) {\n        return false;\n    }\n    \n    try {\n        // Insert review into database\n        $stmt = $conn->prepare(\"INSERT INTO reviews (user_id, category, rating, comment, status, created_at)\n                              VALUES (:user_id, :category, :rating, :comment, 'active', NOW())\");\n        \n        $stmt->bindParam(':user_id', $user_id);\n        $stmt->bindParam(':category', $category);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':comment', $comment);\n        \n        $stmt->execute();\n        return true;\n    } catch(PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to display reviews\nfunction display_reviews($category = '', $limit = 10, $offset = 0) {\n    global $conn;\n    \n    try {\n        // Build SQL query\n        $sql = \"SELECT * FROM reviews WHERE status = 'active'\";\n        \n        if (!empty($category)) {\n            $sql .= \" AND category = :category\";\n        }\n        \n        $sql .= \" ORDER BY created_at DESC LIMIT :limit OFFSET :offset\";\n        \n        $stmt = $conn->prepare($sql);\n        \n        // Bind parameters\n        if (!empty($category)) {\n            $stmt->bindParam(':category', $category);\n        }\n        $stmt->bindParam(':limit', $limit, PDO::PARAM_INT);\n        $stmt->bindParam(':offset', $offset, PDO::PARAM_INT);\n        \n        $stmt->execute();\n        \n        // Fetch results\n        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n        \n        if (empty($reviews)) {\n            return \"No reviews found\";\n        }\n        \n        // Display reviews\n        foreach ($reviews as $review) {\n            echo \"<div class='review'>\";\n            echo \"<h3>Rating: \" . str_repeat(\"\u2605\", $review['rating']) . \"</h3>\";\n            echo \"<p>\" . htmlspecialchars($review['comment']) . \"</p>\";\n            echo \"<small>Posted on: \" . date('F j, Y', strtotime($review['created_at'])) . \"</small>\";\n            echo \"</div>\";\n        }\n        \n    } catch(PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n}\n\n// Example usage:\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    // Add new review\n    if (isset($_POST['submit_review'])) {\n        $user_id = 1; // Replace with actual user ID\n        $category = $_POST['category'];\n        $rating = intval($_POST['rating']);\n        $comment = htmlspecialchars(trim($_POST['comment']));\n        \n        if (add_review($user_id, $category, $rating, $comment)) {\n            echo \"Review added successfully!\";\n        } else {\n            echo \"Error adding review.\";\n        }\n    }\n}\n\n// Display all reviews\ndisplay_reviews();\n?>\n\n<!-- HTML Form -->\n<form method=\"post\" action=\"\">\n    <input type=\"hidden\" name=\"submit_review\" value=\"1\">\n    <select name=\"category\">\n        <option value=\"product\">Product Review</option>\n        <option value=\"service\">Service Review</option>\n        <option value=\"experience\">Experience Review</option>\n    </select>\n    \n    <div class=\"rating\">\n        <input type=\"radio\" name=\"rating\" value=\"5\" id=\"5\">\n        <label for=\"5\">\u2605</label>\n        <input type=\"radio\" name=\"rating\" value=\"4\" id=\"4\">\n        <label for=\"4\">\u2605</label>\n        <input type=\"radio\" name=\"rating\" value=\"3\" id=\"3\">\n        <label for=\"3\">\u2605</label>\n        <input type=\"radio\" name=\"rating\" value=\"2\" id=\"2\">\n        <label for=\"2\">\u2605</label>\n        <input type=\"radio\" name=\"rating\" value=\"1\" id=\"1\">\n        <label for=\"1\">\u2605</label>\n    </div>\n\n    <textarea name=\"comment\" placeholder=\"Write your review...\" required></textarea>\n    <button type=\"submit\">Submit Review</button>\n</form>\n\n<!-- CSS Styling -->\n<style>\n.review {\n    border: 1px solid #ddd;\n    padding: 15px;\n    margin-bottom: 10px;\n}\n\n.rating {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n}\n</style>\n```\n\nThis code creates a simple user review system with the following features:\n\n1. Users can submit reviews (rating and comment)\n2. Reviews are stored in a database\n3. Reviews can be filtered by category\n4. Reviews include:\n   - Rating display (stars)\n   - Comment text\n   - Posting date\n   - User ID (though not displayed)\n\nKey components:\n\n1. `add_review()` function:\n   - Validates input\n   - Inserts review into database\n   - Returns true/false based on success\n\n2. `display_reviews()` function:\n   - Fetches reviews from database\n   - Can filter by category\n   - Supports pagination with limit and offset\n   - Displays formatted reviews\n\n3. HTML form for submitting reviews\n4. Basic CSS styling\n\nTo use this code:\n\n1. Set up your database connection details\n2. Create a `reviews` table in your database with the following columns:\n   - id (int, auto-increment)\n   - user_id (int)\n   - category (varchar)\n   - rating (int)\n   - comment (text)\n   - status (enum: 'active', 'inactive')\n   - created_at (datetime)\n\n3. Modify the code to match your application's requirements\n\nAdditional features you could add:\n\n1. User authentication\n2. Review editing and deletion\n3. Average rating calculation\n4. Sorting options ( newest, highest rated, etc.)\n5. Pagination for displaying multiple reviews\n6. Like/dislike system for reviews\n7. Reporting system for inappropriate reviews\n8. Review moderation system\n\nRemember to:\n- Always sanitize user input\n- Use prepared statements to prevent SQL injection\n- Validate and handle all possible error cases\n- Implement proper security measures\n- Add your own styling and design", "code_blocks": ["```php\n<?php\n// Database connection\n$host = 'localhost';\n$dbname = 'reviews_db';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Function to add a review\nfunction add_review($user_id, $category, $rating, $comment) {\n    global $conn;\n    \n    // Validate input\n    if ($rating < 1 || $rating > 5) {\n        return false;\n    }\n    if (empty($comment)) {\n        return false;\n    }\n    \n    try {\n        // Insert review into database\n        $stmt = $conn->prepare(\"INSERT INTO reviews (user_id, category, rating, comment, status, created_at)\n                              VALUES (:user_id, :category, :rating, :comment, 'active', NOW())\");\n        \n        $stmt->bindParam(':user_id', $user_id);\n        $stmt->bindParam(':category', $category);\n        $stmt->bindParam(':rating', $rating);\n        $stmt->bindParam(':comment', $comment);\n        \n        $stmt->execute();\n        return true;\n    } catch(PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Function to display reviews\nfunction display_reviews($category = '', $limit = 10, $offset = 0) {\n    global $conn;\n    \n    try {\n        // Build SQL query\n        $sql = \"SELECT * FROM reviews WHERE status = 'active'\";\n        \n        if (!empty($category)) {\n            $sql .= \" AND category = :category\";\n        }\n        \n        $sql .= \" ORDER BY created_at DESC LIMIT :limit OFFSET :offset\";\n        \n        $stmt = $conn->prepare($sql);\n        \n        // Bind parameters\n        if (!empty($category)) {\n            $stmt->bindParam(':category', $category);\n        }\n        $stmt->bindParam(':limit', $limit, PDO::PARAM_INT);\n        $stmt->bindParam(':offset', $offset, PDO::PARAM_INT);\n        \n        $stmt->execute();\n        \n        // Fetch results\n        $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n        \n        if (empty($reviews)) {\n            return \"No reviews found\";\n        }\n        \n        // Display reviews\n        foreach ($reviews as $review) {\n            echo \"<div class='review'>\";\n            echo \"<h3>Rating: \" . str_repeat(\"\u2605\", $review['rating']) . \"</h3>\";\n            echo \"<p>\" . htmlspecialchars($review['comment']) . \"</p>\";\n            echo \"<small>Posted on: \" . date('F j, Y', strtotime($review['created_at'])) . \"</small>\";\n            echo \"</div>\";\n        }\n        \n    } catch(PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n}\n\n// Example usage:\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    // Add new review\n    if (isset($_POST['submit_review'])) {\n        $user_id = 1; // Replace with actual user ID\n        $category = $_POST['category'];\n        $rating = intval($_POST['rating']);\n        $comment = htmlspecialchars(trim($_POST['comment']));\n        \n        if (add_review($user_id, $category, $rating, $comment)) {\n            echo \"Review added successfully!\";\n        } else {\n            echo \"Error adding review.\";\n        }\n    }\n}\n\n// Display all reviews\ndisplay_reviews();\n?>\n\n<!-- HTML Form -->\n<form method=\"post\" action=\"\">\n    <input type=\"hidden\" name=\"submit_review\" value=\"1\">\n    <select name=\"category\">\n        <option value=\"product\">Product Review</option>\n        <option value=\"service\">Service Review</option>\n        <option value=\"experience\">Experience Review</option>\n    </select>\n    \n    <div class=\"rating\">\n        <input type=\"radio\" name=\"rating\" value=\"5\" id=\"5\">\n        <label for=\"5\">\u2605</label>\n        <input type=\"radio\" name=\"rating\" value=\"4\" id=\"4\">\n        <label for=\"4\">\u2605</label>\n        <input type=\"radio\" name=\"rating\" value=\"3\" id=\"3\">\n        <label for=\"3\">\u2605</label>\n        <input type=\"radio\" name=\"rating\" value=\"2\" id=\"2\">\n        <label for=\"2\">\u2605</label>\n        <input type=\"radio\" name=\"rating\" value=\"1\" id=\"1\">\n        <label for=\"1\">\u2605</label>\n    </div>\n\n    <textarea name=\"comment\" placeholder=\"Write your review...\" required></textarea>\n    <button type=\"submit\">Submit Review</button>\n</form>\n\n<!-- CSS Styling -->\n<style>\n.review {\n    border: 1px solid #ddd;\n    padding: 15px;\n    margin-bottom: 10px;\n}\n\n.rating {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n}\n</style>\n```"]}
