{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a user review function using PHP. Let me think about what the user is asking for. They probably want a way for users on their website to leave reviews and ratings for something, like a product or service.\n\nFirst, I should outline the main components. There needs to be a form where users can input their name, email, rating from 1 to 5 stars, and their review text. Then, this data should be submitted to a PHP script that processes it, validates the inputs, and stores them in a database.\n\nSo, I'll start by setting up an HTML form with the necessary fields: name, email, rating as radio buttons, and the review text area. Each input should have proper validation attributes like required and max/min lengths for emails and reviews.\n\nNext, the PHP script will handle the form submission. It needs to check if all required fields are filled out. I'll use isset() to verify each field is present. Then, sanitize the inputs to prevent SQL injection using htmlspecialchars_decode and trim functions.\n\nFor validation, I should ensure that the email is in a valid format. Using filter_var with FILTER_VALIDATE_EMAIL will help with that. The name shouldn't be too short or too long, maybe between 2 and 50 characters. The review text needs to have at least 10 characters to make sure it's meaningful.\n\nAfter validation, I'll connect to the MySQL database. The connection details\u2014host, username, password, and database name\u2014need to be set correctly. Then, prepare an SQL statement to insert the sanitized data into the reviews table. Using prepared statements with bind_param will help prevent SQL injection attacks.\n\nOnce the data is inserted successfully, a success message should be displayed. If there's an error during insertion, display an appropriate message. Also, handle any validation errors by showing specific messages to the user.\n\nFinally, I'll include some example HTML code on how to display these reviews. It should fetch all reviews from the database, calculate the average rating, and present each review with user info and star ratings. Using a while loop will iterate through each result and display them in an ordered list.\n\nI should also consider potential improvements, like adding CSS for styling, pagination for many reviews, or allowing users to edit their reviews. But for now, the basic functionality is covered: submitting, validating, storing, and displaying reviews.\n</think>\n\nHere's an example of a user review function using PHP:\n\nThis script allows users to submit reviews and ratings for a product/service, store them in a database, and display them on a webpage.\n\n```php\n<?php\n// Database connection details\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'reviews';\n\n// Connect to database\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Handle review submission\nif (isset($_POST['submit'])) {\n    // Sanitize inputs\n    $name = htmlspecialchars_decode(trim($_POST['name']));\n    $email = htmlspecialchars_decode(trim($_POST['email']));\n    $rating = intval($_POST['rating']);\n    $review = htmlspecialchars_decode(trim($_POST['review']));\n\n    // Validate input\n    if (empty($name) || empty($email) || empty($rating) || empty($review)) {\n        echo \"All fields are required!\";\n    } else if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo \"Please enter a valid email address!\";\n    } else if (strlen($name) < 2 || strlen($name) > 50) {\n        echo \"Name must be between 2 and 50 characters!\";\n    } else if (strlen($review) < 10) {\n        echo \"Review must be at least 10 characters long!\";\n    } else {\n        // Insert review into database\n        $stmt = $conn->prepare(\"INSERT INTO reviews (name, email, rating, review, created_at) VALUES (?, ?, ?, ?, NOW())\");\n        $stmt->bind_param(\"ssii\", $name, $email, $rating, $review);\n\n        if ($stmt->execute()) {\n            echo \"Thank you for submitting your review!\";\n            // Clear form fields\n            header(\"Refresh:2; url=index.php\");\n        } else {\n            echo \"Error submitting review: \" . $conn->error;\n        }\n\n        $stmt->close();\n    }\n}\n\n// Display reviews from database\nfunction displayReviews() {\n    global $conn;\n    \n    $sql = \"SELECT * FROM reviews ORDER BY created_at DESC\";\n    $result = $conn->query($sql);\n\n    if ($result->num_rows > 0) {\n        echo \"<div class='reviews'>\";\n        while ($row = $result->fetch_assoc()) {\n            $averageRating = calculateAverageRating();\n            $stars = str_repeat(\"\u2605\", $row['rating']) . str_repeat(\"\u2606\", 5 - $row['rating']);\n            \n            echo \"\n                <div class='review'>\n                    <h3>Review by {$row['name']}</h3>\n                    <p>Rating: $stars</p>\n                    <p>{$row['review']}</p>\n                    <small>Posted on \" . date('F j, Y', strtotime($row['created_at'])) . \"</small>\n                </div>\n            \";\n        }\n        echo \"</div>\";\n    } else {\n        echo \"<p>No reviews yet. Be the first to review!</p>\";\n    }\n}\n\n// Calculate average rating\nfunction calculateAverageRating() {\n    global $conn;\n    \n    $sql = \"SELECT AVG(rating) as average FROM reviews\";\n    $result = $conn->query($sql);\n    \n    if ($result->num_rows > 0) {\n        $row = $result->fetch_assoc();\n        return round($row['average'], 1);\n    } else {\n        return 0;\n    }\n}\n\n$conn->close();\n?>\n```\n\nThis script includes:\n\n1. A form for submitting reviews\n2. Input validation and sanitization\n3. Database connection and operations\n4. Functions to:\n   - Display all reviews\n   - Calculate average rating\n\nTo use this script, you'll need to:\n\n1. Create a database named 'reviews'\n2. Create a table named 'reviews' with the following columns:\n   - id (INT, AUTO_INCREMENT)\n   - name (VARCHAR(50))\n   - email (VARCHAR(100))\n   - rating (TINYINT)\n   - review (TEXT)\n   - created_at (DATETIME)\n\nHere's an example of how to create the table:\n\n```sql\nCREATE TABLE reviews (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    rating TINYINT NOT NULL CHECK (rating >= 1 AND rating <= 5),\n    review TEXT NOT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n```\n\nFeatures of this script:\n\n1. User-friendly interface for submitting reviews\n2. Input validation:\n   - Required fields check\n   - Email format validation\n   - Name length validation (2-50 characters)\n   - Review length validation (minimum 10 characters)\n3. Sanitization to prevent SQL injection and XSS attacks\n4. Display of all submitted reviews with user information and ratings\n5. Average rating calculation\n6. Reviews displayed in descending order of submission\n\nTo display the review form on your webpage, use this HTML:\n\n```html\n<form action=\"review.php\" method=\"POST\">\n    <div class=\"form-group\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" required minlength=\"2\" maxlength=\"50\">\n    </div>\n\n    <div class=\"form-group\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n    </div>\n\n    <div class=\"form-group\">\n        <label>Rating:</label>\n        <div class=\"rating\">\n            <input type=\"radio\" id=\"5\" name=\"rating\" value=\"5\">\n            <label for=\"5\">\u2605</label>\n            \n            <input type=\"radio\" id=\"4\" name=\"rating\" value=\"4\">\n            <label for=\"4\">\u2605</label>\n            \n            <input type=\"radio\" id=\"3\" name=\"rating\" value=\"3\">\n            <label for=\"3\">\u2605</label>\n            \n            <input type=\"radio\" id=\"2\" name=\"rating\" value=\"2\">\n            <label for=\"2\">\u2605</label>\n            \n            <input type=\"radio\" id=\"1\" name=\"rating\" value=\"1\" checked>\n            <label for=\"1\">\u2605</label>\n        </div>\n    </div>\n\n    <div class=\"form-group\">\n        <label for=\"review\">Review:</label>\n        <textarea id=\"review\" name=\"review\" rows=\"5\" required minlength=\"10\"></textarea>\n    </div>\n\n    <button type=\"submit\" name=\"submit\">Submit Review</button>\n</form>\n\n<?php\n// Display all reviews below the form\ndisplayReviews();\n?>\n```\n\nYou can customize the styling using CSS to make it look better. This is a basic implementation that you can extend with additional features like:\n\n1. User authentication for review submission\n2. Edit/delete functionality for reviews\n3. Pagination for displaying many reviews\n4. More detailed validation and error handling\n5. Sorting options for reviews\n6. Responsive design\n\nRemember to replace the database connection details (host, username, password, dbname) with your actual database information.", "code_blocks": ["```php\n<?php\n// Database connection details\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'reviews';\n\n// Connect to database\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Handle review submission\nif (isset($_POST['submit'])) {\n    // Sanitize inputs\n    $name = htmlspecialchars_decode(trim($_POST['name']));\n    $email = htmlspecialchars_decode(trim($_POST['email']));\n    $rating = intval($_POST['rating']);\n    $review = htmlspecialchars_decode(trim($_POST['review']));\n\n    // Validate input\n    if (empty($name) || empty($email) || empty($rating) || empty($review)) {\n        echo \"All fields are required!\";\n    } else if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo \"Please enter a valid email address!\";\n    } else if (strlen($name) < 2 || strlen($name) > 50) {\n        echo \"Name must be between 2 and 50 characters!\";\n    } else if (strlen($review) < 10) {\n        echo \"Review must be at least 10 characters long!\";\n    } else {\n        // Insert review into database\n        $stmt = $conn->prepare(\"INSERT INTO reviews (name, email, rating, review, created_at) VALUES (?, ?, ?, ?, NOW())\");\n        $stmt->bind_param(\"ssii\", $name, $email, $rating, $review);\n\n        if ($stmt->execute()) {\n            echo \"Thank you for submitting your review!\";\n            // Clear form fields\n            header(\"Refresh:2; url=index.php\");\n        } else {\n            echo \"Error submitting review: \" . $conn->error;\n        }\n\n        $stmt->close();\n    }\n}\n\n// Display reviews from database\nfunction displayReviews() {\n    global $conn;\n    \n    $sql = \"SELECT * FROM reviews ORDER BY created_at DESC\";\n    $result = $conn->query($sql);\n\n    if ($result->num_rows > 0) {\n        echo \"<div class='reviews'>\";\n        while ($row = $result->fetch_assoc()) {\n            $averageRating = calculateAverageRating();\n            $stars = str_repeat(\"\u2605\", $row['rating']) . str_repeat(\"\u2606\", 5 - $row['rating']);\n            \n            echo \"\n                <div class='review'>\n                    <h3>Review by {$row['name']}</h3>\n                    <p>Rating: $stars</p>\n                    <p>{$row['review']}</p>\n                    <small>Posted on \" . date('F j, Y', strtotime($row['created_at'])) . \"</small>\n                </div>\n            \";\n        }\n        echo \"</div>\";\n    } else {\n        echo \"<p>No reviews yet. Be the first to review!</p>\";\n    }\n}\n\n// Calculate average rating\nfunction calculateAverageRating() {\n    global $conn;\n    \n    $sql = \"SELECT AVG(rating) as average FROM reviews\";\n    $result = $conn->query($sql);\n    \n    if ($result->num_rows > 0) {\n        $row = $result->fetch_assoc();\n        return round($row['average'], 1);\n    } else {\n        return 0;\n    }\n}\n\n$conn->close();\n?>\n```", null, null]}
