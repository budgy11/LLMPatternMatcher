{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a PHP function for a user review system. Let me think about how to approach this.\n\nFirst, the function should handle adding reviews, displaying them, and showing averages. So, I'll probably need multiple functions or methods within a class. Maybe a ReviewSystem class would make sense.\n\nI'll start by setting up the database connection. Using PDO is good for security and flexibility. I'll need to include the DB_HOST, DB_NAME, etc., so I should define those constants at the top.\n\nNext, adding a review. The function needs to take user_id, product_id, rating, and comment. But wait, what if the same user adds multiple reviews? Should I allow that or check for duplicates? Maybe add a check to prevent duplicate reviews from the same user on the same product.\n\nThen, displaying reviews. I should fetch all reviews for a specific product and display them with user info, date, etc. Also, sorting by most recent makes sense. So in the SQL query, I'll order by review_date DESC.\n\nFor the average rating, I can write another function that calculates the average rating for a given product ID. Using AVG() in SQL would be efficient here. But also, if there are no reviews, it should return zero to avoid errors.\n\nWait, but how about displaying the average stars? Maybe create a helper function to generate star HTML based on the average rating. That way, when I output the average, I can show stars visually.\n\nI should also handle cases where there are no reviews yet. So in display_reviews, if no reviews are found, it should show a message like \"No reviews yet.\"\n\nSecurity is important. I need to make sure all inputs are sanitized and prepared statements are used to prevent SQL injection. Also, validating user_id, product_id, rating (should be 1-5), and comment length.\n\nAnother thought: How about displaying the average stars along with the reviews? So in display_reviews, after fetching each review, maybe also show the average at the top or bottom.\n\nWait, but if I have multiple products on a page, I should probably separate concerns. Maybe each product has its own review section, so when displaying, it's for a specific product_id.\n\nTesting edge cases: What if a user tries to add an invalid rating? The function should handle that, maybe defaulting to 0 or throwing an error.\n\nAlso, considering performance, fetching all reviews at once is manageable, but for large datasets, pagination might be needed. But since this is a basic function, I'll keep it simple without pagination.\n\nI think I've covered the main points. Now, structuring the code step by step.\n</think>\n\nHere's an example of a user review system in PHP:\n\n```php\n<?php\n// Database configuration\ndefine('DB_HOST', 'localhost');\ndefine('DB_NAME', 'review_system');\ndefine('DB_USER', 'root');\ndefine('DB_PASS', '');\n\nclass ReviewSystem {\n    private $pdo;\n\n    public function __construct() {\n        try {\n            $this->pdo = new PDO(\"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME, DB_USER, DB_PASS);\n            $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        } catch (PDOException $e) {\n            die(\"Connection failed: \" . $e->getMessage());\n        }\n    }\n\n    // Add a new review\n    public function addReview($user_id, $product_id, $rating, $comment) {\n        try {\n            // Check if the user has already reviewed this product\n            $stmt = $this->pdo->prepare(\"SELECT id FROM reviews WHERE user_id = ? AND product_id = ?\");\n            $stmt->execute([$user_id, $product_id]);\n            \n            if ($stmt->rowCount() > 0) {\n                return false; // User already reviewed this product\n            }\n\n            // Insert the new review\n            $stmt = $this->pdo->prepare(\"INSERT INTO reviews (user_id, product_id, rating, comment, review_date) VALUES (?, ?, ?, ?, NOW())\");\n            $stmt->execute([$user_id, $product_id, $rating, $comment]);\n\n            return true;\n        } catch (PDOException $e) {\n            die(\"Error adding review: \" . $e->getMessage());\n        }\n    }\n\n    // Display reviews for a product\n    public function displayReviews($product_id) {\n        try {\n            $stmt = $this->pdo->prepare(\"SELECT r.id, u.username, r.rating, r.comment, r.review_date FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = ? ORDER BY r.review_date DESC\");\n            $stmt->execute([$product_id]);\n\n            $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n            if (empty($reviews)) {\n                echo \"No reviews yet.\";\n                return;\n            }\n\n            foreach ($reviews as $review) {\n                echo \"<div class='review'>\";\n                echo \"<h3>By \" . htmlspecialchars($review['username']) . \"</h3>\";\n                echo \"<p>Rating: \" . $this->getStars($review['rating']) . \"</p>\";\n                echo \"<p>\" . nl2br(htmlspecialchars($review['comment'])) . \"</p>\";\n                echo \"<small>Posted on: \" . date('jS M Y', strtotime($review['review_date'])) . \"</small>\";\n                echo \"</div><hr>\";\n            }\n        } catch (PDOException $e) {\n            die(\"Error displaying reviews: \" . $e->getMessage());\n        }\n    }\n\n    // Display average rating for a product\n    public function displayAverageRating($product_id) {\n        try {\n            $stmt = $this->pdo->prepare(\"SELECT AVG(rating) as average FROM reviews WHERE product_id = ?\");\n            $stmt->execute([$product_id]);\n\n            $result = $stmt->fetch(PDO::FETCH_ASSOC);\n            $average = round((float)$result['average'], 1);\n\n            if ($average === 0 && $this->getReviewCount($product_id) == 0) {\n                echo \"No ratings yet.\";\n                return;\n            }\n\n            echo \"Average Rating: \" . $average . \"/5 (\" . $this->getStars($average, true) . \")\";\n        } catch (PDOException $e) {\n            die(\"Error displaying average rating: \" . $e->getMessage());\n        }\n    }\n\n    // Helper function to display stars\n    private function getStars($rating, $partial = false) {\n        if ($partial) {\n            return str_repeat('\u2605', (int)$rating) . (($rating - (int)$rating > 0.5) ? '\u00bd' : '');\n        } else {\n            return str_repeat('\u2605', $rating);\n        }\n    }\n\n    // Helper function to get review count\n    private function getReviewCount($product_id) {\n        try {\n            $stmt = $this->pdo->prepare(\"SELECT COUNT(*) as total FROM reviews WHERE product_id = ?\");\n            $stmt->execute([$product_id]);\n            return (int)$stmt->fetch(PDO::FETCH_ASSOC)['total'];\n        } catch (PDOException $e) {\n            die(\"Error getting review count: \" . $e->getMessage());\n        }\n    }\n}\n\n// Usage example:\n$reviewSystem = new ReviewSystem();\n\n// Add a new review\n$user_id = 1; // Replace with actual user ID\n$product_id = 1; // Replace with actual product ID\n$rating = 4;\n$comment = \"Great product!\";\n\nif ($reviewSystem->addReview($user_id, $product_id, $rating, $comment)) {\n    echo \"Review added successfully!\";\n} else {\n    echo \"You have already reviewed this product.\";\n}\n\n// Display reviews for product ID 1\necho \"<h2>Product Reviews:</h2>\";\n$reviewSystem->displayReviews(1);\n\n// Display average rating for product ID 1\necho \"<h3>Average Rating:</h3>\";\n$reviewSystem->displayAverageRating(1);\n?>\n```\n\nThis code creates a `ReviewSystem` class that handles:\n\n1. Connecting to the database\n\n2. Adding new reviews with validation to prevent duplicate reviews from the same user\n\n3. Displaying product reviews with user information and formatted date\n\n4. Calculating and displaying average ratings\n\n5. Helper functions for displaying stars and counting reviews\n\nTo use this code:\n\n1. Set up your database connection details at the top\n\n2. Create a `users` table (id, username, etc.) and a `reviews` table (id, user_id, product_id, rating, comment, review_date)\n\n3. Instantiate the ReviewSystem class\n\n4. Use the methods to add reviews, display reviews, and show average ratings\n\nFeatures:\n\n- Prevents duplicate reviews from the same user for a product\n- Sanitizes inputs using PDO prepared statements\n- Formats dates nicely\n- Displays stars for ratings\n- Handles cases with no reviews yet\n- Calculates and displays average rating\n\nYou can customize the HTML output by modifying the `displayReviews` method to match your design.\n\nRemember to:\n\n- Implement proper user authentication before allowing review submissions\n- Add error handling as needed\n- Sanitize all inputs\n- Secure your database connection", "code_blocks": ["```php\n<?php\n// Database configuration\ndefine('DB_HOST', 'localhost');\ndefine('DB_NAME', 'review_system');\ndefine('DB_USER', 'root');\ndefine('DB_PASS', '');\n\nclass ReviewSystem {\n    private $pdo;\n\n    public function __construct() {\n        try {\n            $this->pdo = new PDO(\"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME, DB_USER, DB_PASS);\n            $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        } catch (PDOException $e) {\n            die(\"Connection failed: \" . $e->getMessage());\n        }\n    }\n\n    // Add a new review\n    public function addReview($user_id, $product_id, $rating, $comment) {\n        try {\n            // Check if the user has already reviewed this product\n            $stmt = $this->pdo->prepare(\"SELECT id FROM reviews WHERE user_id = ? AND product_id = ?\");\n            $stmt->execute([$user_id, $product_id]);\n            \n            if ($stmt->rowCount() > 0) {\n                return false; // User already reviewed this product\n            }\n\n            // Insert the new review\n            $stmt = $this->pdo->prepare(\"INSERT INTO reviews (user_id, product_id, rating, comment, review_date) VALUES (?, ?, ?, ?, NOW())\");\n            $stmt->execute([$user_id, $product_id, $rating, $comment]);\n\n            return true;\n        } catch (PDOException $e) {\n            die(\"Error adding review: \" . $e->getMessage());\n        }\n    }\n\n    // Display reviews for a product\n    public function displayReviews($product_id) {\n        try {\n            $stmt = $this->pdo->prepare(\"SELECT r.id, u.username, r.rating, r.comment, r.review_date FROM reviews r JOIN users u ON r.user_id = u.id WHERE r.product_id = ? ORDER BY r.review_date DESC\");\n            $stmt->execute([$product_id]);\n\n            $reviews = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n            if (empty($reviews)) {\n                echo \"No reviews yet.\";\n                return;\n            }\n\n            foreach ($reviews as $review) {\n                echo \"<div class='review'>\";\n                echo \"<h3>By \" . htmlspecialchars($review['username']) . \"</h3>\";\n                echo \"<p>Rating: \" . $this->getStars($review['rating']) . \"</p>\";\n                echo \"<p>\" . nl2br(htmlspecialchars($review['comment'])) . \"</p>\";\n                echo \"<small>Posted on: \" . date('jS M Y', strtotime($review['review_date'])) . \"</small>\";\n                echo \"</div><hr>\";\n            }\n        } catch (PDOException $e) {\n            die(\"Error displaying reviews: \" . $e->getMessage());\n        }\n    }\n\n    // Display average rating for a product\n    public function displayAverageRating($product_id) {\n        try {\n            $stmt = $this->pdo->prepare(\"SELECT AVG(rating) as average FROM reviews WHERE product_id = ?\");\n            $stmt->execute([$product_id]);\n\n            $result = $stmt->fetch(PDO::FETCH_ASSOC);\n            $average = round((float)$result['average'], 1);\n\n            if ($average === 0 && $this->getReviewCount($product_id) == 0) {\n                echo \"No ratings yet.\";\n                return;\n            }\n\n            echo \"Average Rating: \" . $average . \"/5 (\" . $this->getStars($average, true) . \")\";\n        } catch (PDOException $e) {\n            die(\"Error displaying average rating: \" . $e->getMessage());\n        }\n    }\n\n    // Helper function to display stars\n    private function getStars($rating, $partial = false) {\n        if ($partial) {\n            return str_repeat('\u2605', (int)$rating) . (($rating - (int)$rating > 0.5) ? '\u00bd' : '');\n        } else {\n            return str_repeat('\u2605', $rating);\n        }\n    }\n\n    // Helper function to get review count\n    private function getReviewCount($product_id) {\n        try {\n            $stmt = $this->pdo->prepare(\"SELECT COUNT(*) as total FROM reviews WHERE product_id = ?\");\n            $stmt->execute([$product_id]);\n            return (int)$stmt->fetch(PDO::FETCH_ASSOC)['total'];\n        } catch (PDOException $e) {\n            die(\"Error getting review count: \" . $e->getMessage());\n        }\n    }\n}\n\n// Usage example:\n$reviewSystem = new ReviewSystem();\n\n// Add a new review\n$user_id = 1; // Replace with actual user ID\n$product_id = 1; // Replace with actual product ID\n$rating = 4;\n$comment = \"Great product!\";\n\nif ($reviewSystem->addReview($user_id, $product_id, $rating, $comment)) {\n    echo \"Review added successfully!\";\n} else {\n    echo \"You have already reviewed this product.\";\n}\n\n// Display reviews for product ID 1\necho \"<h2>Product Reviews:</h2>\";\n$reviewSystem->displayReviews(1);\n\n// Display average rating for product ID 1\necho \"<h3>Average Rating:</h3>\";\n$reviewSystem->displayAverageRating(1);\n?>\n```"]}
