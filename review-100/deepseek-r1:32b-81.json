{"prompt": "Create a user review function using php", "llm_output": "<think>\nOkay, I need to create a PHP function for handling user reviews. Let me think about what this function should do.\n\nFirst, the function needs to take in parameters like review ID, user ID, rating, and comment. Those are essential because each review is tied to a specific user and item, has a rating, and possibly a comment.\n\nI should validate these inputs before doing anything else. For example, check that the user exists by querying the users table with the given user_id. If it doesn't exist, return an error message like \"Invalid User ID\".\n\nSimilarly, if there's a review_id provided, I need to ensure that this review belongs to the user. So, I'll query the reviews table where review_id equals the one passed and user_id equals the current user's ID. If not found, return an error about invalid review ID.\n\nNext, handle different actions based on whether it's adding a new review or updating an existing one. The action parameter will determine this. For adding, insert into the reviews table with the given values. For updating, update the specific review using the review_id.\n\nAlso, I need to ensure that the rating is between 1 and 5. If not, return an error about invalid rating.\n\nAfter inserting or updating, calculate the average rating for the item. This involves querying all ratings for that item_id and computing the average. Then, update the items table with this new average.\n\nFinally, handle any database errors gracefully. If something goes wrong during these operations, catch the exceptions and return appropriate error messages.\n\nI should also consider security aspects, like using prepared statements to prevent SQL injection. Make sure all user inputs are properly sanitized or use parameterized queries.\n\nPutting it all together, the function will connect to the database, perform necessary validations, execute the appropriate SQL commands based on the action, update averages, and return success or error messages as needed.\n</think>\n\nHere's an example of a PHP function for handling user reviews:\n\n```php\n<?php\nfunction handleUserReview($db_connection, $user_id, $item_id, $rating, $comment, $review_id = null, $action = 'add') {\n    // Validate inputs\n    if (!is_numeric($user_id) || !is_numeric($item_id) || !is_numeric($rating)) {\n        return array('status' => 'error', 'message' => 'Invalid input data');\n    }\n\n    // Check if the user exists\n    $stmt = $db_connection->prepare(\"SELECT id FROM users WHERE id = ?\");\n    $stmt->execute(array($user_id));\n    $result = $stmt->fetch();\n    if (!$result) {\n        return array('status' => 'error', 'message' => 'Invalid User ID');\n    }\n\n    // Check if the review exists (for update action)\n    if ($action == 'update') {\n        $stmt = $db_connection->prepare(\"SELECT id FROM reviews WHERE id = ? AND user_id = ?\");\n        $stmt->execute(array($review_id, $user_id));\n        $result = $stmt->fetch();\n        if (!$result) {\n            return array('status' => 'error', 'message' => 'Invalid Review ID');\n        }\n    }\n\n    // Validate rating\n    if ($rating < 1 || $rating > 5) {\n        return array('status' => 'error', 'message' => 'Rating must be between 1 and 5');\n    }\n\n    try {\n        if ($action == 'add') {\n            // Add new review\n            $stmt = $db_connection->prepare(\"INSERT INTO reviews (user_id, item_id, rating, comment) VALUES (?, ?, ?, ?)\");\n            $stmt->execute(array($user_id, $item_id, $rating, $comment));\n            \n        } elseif ($action == 'update') {\n            // Update existing review\n            $stmt = $db_connection->prepare(\"UPDATE reviews SET rating = ?, comment = ? WHERE id = ?\");\n            $stmt->execute(array($rating, $comment, $review_id));\n        }\n\n        // Calculate and update average rating for the item\n        $stmt = $db_connection->prepare(\"SELECT AVG(rating) as avg_rating FROM reviews WHERE item_id = ?\");\n        $stmt->execute(array($item_id));\n        $avg_result = $stmt->fetch();\n        \n        $stmt = $db_connection->prepare(\"UPDATE items SET average_rating = ? WHERE id = ?\");\n        $stmt->execute(array($avg_result['avg_rating'], $item_id));\n\n        return array('status' => 'success', 'message' => ($action == 'add') ? 'Review added successfully!' : 'Review updated successfully!');\n\n    } catch(PDOException $e) {\n        // Handle any database errors\n        error_log(\"Database error: \" . $e->getMessage());\n        return array('status' => 'error', 'message' => 'An error occurred while processing your review. Please try again later.');\n    }\n}\n?>\n```\n\nThis function handles both adding and updating reviews for items, with the following features:\n\n1. Input validation:\n   - Checks if required inputs are numeric\n   - Validates user existence\n   - Ensures rating is between 1-5\n\n2. Review Operations:\n   - Adds new reviews when `$action` is 'add'\n   - Updates existing reviews when `$action` is 'update'\n\n3. Calculates and updates the average rating for the item after each review operation.\n\n4. Error handling:\n   - Returns appropriate error messages\n   - Logs database errors\n\nTo use this function:\n\n```php\n// Add a new review\n$result = handleUserReview(\n    $db_connection,\n    123, // User ID\n    456, // Item ID\n    5,   // Rating (1-5)\n    \"Great product!\", // Comment\n    null, // Review ID (not needed for add)\n    'add'\n);\n\n// Update an existing review\n$result = handleUserReview(\n    $db_connection,\n    123, // User ID\n    456, // Item ID\n    4,   // New rating\n    \"Great product but could be better!\", // New comment\n    789, // Review ID\n    'update'\n);\n\n// Check the result\nif ($result['status'] == 'success') {\n    echo $result['message'];\n} else {\n    echo $result['message'];\n}\n```\n\nMake sure to:\n\n1. Replace `$db_connection` with your actual database connection object (PDO)\n\n2. Update table and column names according to your database schema\n\n3. Add any additional validation or business logic as needed for your specific use case\n\nThis function assumes you have two tables:\n\n- `users`: contains user information\n- `reviews`: contains review data (user_id, item_id, rating, comment)\n- `items`: contains item data with an average_rating column", "code_blocks": ["```php\n<?php\nfunction handleUserReview($db_connection, $user_id, $item_id, $rating, $comment, $review_id = null, $action = 'add') {\n    // Validate inputs\n    if (!is_numeric($user_id) || !is_numeric($item_id) || !is_numeric($rating)) {\n        return array('status' => 'error', 'message' => 'Invalid input data');\n    }\n\n    // Check if the user exists\n    $stmt = $db_connection->prepare(\"SELECT id FROM users WHERE id = ?\");\n    $stmt->execute(array($user_id));\n    $result = $stmt->fetch();\n    if (!$result) {\n        return array('status' => 'error', 'message' => 'Invalid User ID');\n    }\n\n    // Check if the review exists (for update action)\n    if ($action == 'update') {\n        $stmt = $db_connection->prepare(\"SELECT id FROM reviews WHERE id = ? AND user_id = ?\");\n        $stmt->execute(array($review_id, $user_id));\n        $result = $stmt->fetch();\n        if (!$result) {\n            return array('status' => 'error', 'message' => 'Invalid Review ID');\n        }\n    }\n\n    // Validate rating\n    if ($rating < 1 || $rating > 5) {\n        return array('status' => 'error', 'message' => 'Rating must be between 1 and 5');\n    }\n\n    try {\n        if ($action == 'add') {\n            // Add new review\n            $stmt = $db_connection->prepare(\"INSERT INTO reviews (user_id, item_id, rating, comment) VALUES (?, ?, ?, ?)\");\n            $stmt->execute(array($user_id, $item_id, $rating, $comment));\n            \n        } elseif ($action == 'update') {\n            // Update existing review\n            $stmt = $db_connection->prepare(\"UPDATE reviews SET rating = ?, comment = ? WHERE id = ?\");\n            $stmt->execute(array($rating, $comment, $review_id));\n        }\n\n        // Calculate and update average rating for the item\n        $stmt = $db_connection->prepare(\"SELECT AVG(rating) as avg_rating FROM reviews WHERE item_id = ?\");\n        $stmt->execute(array($item_id));\n        $avg_result = $stmt->fetch();\n        \n        $stmt = $db_connection->prepare(\"UPDATE items SET average_rating = ? WHERE id = ?\");\n        $stmt->execute(array($avg_result['avg_rating'], $item_id));\n\n        return array('status' => 'success', 'message' => ($action == 'add') ? 'Review added successfully!' : 'Review updated successfully!');\n\n    } catch(PDOException $e) {\n        // Handle any database errors\n        error_log(\"Database error: \" . $e->getMessage());\n        return array('status' => 'error', 'message' => 'An error occurred while processing your review. Please try again later.');\n    }\n}\n?>\n```", "```php\n// Add a new review\n$result = handleUserReview(\n    $db_connection,\n    123, // User ID\n    456, // Item ID\n    5,   // Rating (1-5)\n    \"Great product!\", // Comment\n    null, // Review ID (not needed for add)\n    'add'\n);\n\n// Update an existing review\n$result = handleUserReview(\n    $db_connection,\n    123, // User ID\n    456, // Item ID\n    4,   // New rating\n    \"Great product but could be better!\", // New comment\n    789, // Review ID\n    'update'\n);\n\n// Check the result\nif ($result['status'] == 'success') {\n    echo $result['message'];\n} else {\n    echo $result['message'];\n}\n```"]}
