{"prompt": "Create a file upload function for PDFs using ruby", "llm_output": "Here's an example of how you can create a simple file upload function for PDFs using Ruby. This code will be deployed in a Rails application but can easily be adapted to other frameworks.\n\nFirst, ensure that you have the required gems installed:\n\n```ruby\n# Gemfile (Rails)\ngem 'carrierwave'\n```\n\nThen, run the following command in your terminal:\n\n```bash\nbundle install\n```\n\nCreate a new uploader class called `PdfUploader` and store it in the `app/uploaders` directory.\n\n```ruby\n# app/uploaders/pdf_uploader.rb\n\nclass PdfUploader < CarrierWave::Uploader::Base\n  # Include RMagick ruby gem for image processing (for pdfs as well)\n  include CarrierWave::RMagick\n\n  process :resize_to_fit => [800, 600]\n\n  # Add a white list of extensions which are allowed to be uploaded.\n  # For images you might use something like this:\n  # def extension_whitelist\n  #   %w(jpg jpeg gif png)\n  # end\n\n  # Override the directory where uploaded files will be stored.\n  # This is a sensible default for uploaders that upload files to the /uploads directory,\n  # but mounting the uploader to /some/upload/path would look for files in the /uploads/in/some/upload/path directory\n  def store_dir\n    \"uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}\"\n  end\n\n  # Add a default URL as a placeholder\n  version :thumb do\n    process resize_to_fit: [100, 75]\n  end\n\n  # Define the filename for the original image version\n  def file_name\n    \"document_#{Time.now.to_i}_#{model.id}.pdf\"\n  end\nend\n```\n\nThis uploader will accept PDFs and automatically create a thumbnail. The thumbnail's width and height are set to 100x75 pixels.\n\nNext, you'll need to configure CarrierWave to use the RMagick gem for image processing. You can do this by creating a new initializer file in `config/initializers` directory:\n\n```ruby\n# config/initializers/carrierwave.rb\n\nCarrierWave.configure do |config|\n  config.fog_credentials = {\n    :provider           => 'AWS',\n    :aws_access_key_id  => ENV['AWS_ACCESS_KEY_ID'],\n    :aws_secret_access_key => ENV['AWS_SECRET_ACCESS_KEY']\n  }\n\n  # If you're using the internal cache as an upload directory to store files\n  # on, use this option:\n  config.cache_dir = \"#{Rails.root}/tmp/uploads\"\n\n  # You can set different configurations for specific uploaders.\n  config.aws_credentials = {\n    :access_key_id => ENV['AWS_ACCESS_KEY_ID'],\n    :secret_access_key => ENV['AWS_SECRET_ACCESS_KEY']\n  }\nend\n```\n\nRemember to replace `ENV` values with your actual AWS credentials.\n\nFinally, you'll need to add a mountable uploader in your model:\n\n```ruby\n# app/models/document.rb\n\nclass Document < ApplicationRecord\n  mount_uploader :document, PdfUploader\nend\n```\n\nThis example uses the AWS S3 storage. If you want to use local file system instead, set `config.storage` in CarrierWave configuration.\n\nNote: The code above is based on Ruby on Rails and Carrierwave gem for image upload. Please adjust it according to your specific requirements and setup.\n\nIf you have any issues with the above example or need further clarification, please don't hesitate to ask.", "code_blocks": ["```ruby\n# Gemfile (Rails)\ngem 'carrierwave'\n```", null, "```ruby\n# app/uploaders/pdf_uploader.rb\n\nclass PdfUploader < CarrierWave::Uploader::Base\n  # Include RMagick ruby gem for image processing (for pdfs as well)\n  include CarrierWave::RMagick\n\n  process :resize_to_fit => [800, 600]\n\n  # Add a white list of extensions which are allowed to be uploaded.\n  # For images you might use something like this:\n  # def extension_whitelist\n  #   %w(jpg jpeg gif png)\n  # end\n\n  # Override the directory where uploaded files will be stored.\n  # This is a sensible default for uploaders that upload files to the /uploads directory,\n  # but mounting the uploader to /some/upload/path would look for files in the /uploads/in/some/upload/path directory\n  def store_dir\n    \"uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}\"\n  end\n\n  # Add a default URL as a placeholder\n  version :thumb do\n    process resize_to_fit: [100, 75]\n  end\n\n  # Define the filename for the original image version\n  def file_name\n    \"document_#{Time.now.to_i}_#{model.id}.pdf\"\n  end\nend\n```", "```ruby\n# config/initializers/carrierwave.rb\n\nCarrierWave.configure do |config|\n  config.fog_credentials = {\n    :provider           => 'AWS',\n    :aws_access_key_id  => ENV['AWS_ACCESS_KEY_ID'],\n    :aws_secret_access_key => ENV['AWS_SECRET_ACCESS_KEY']\n  }\n\n  # If you're using the internal cache as an upload directory to store files\n  # on, use this option:\n  config.cache_dir = \"#{Rails.root}/tmp/uploads\"\n\n  # You can set different configurations for specific uploaders.\n  config.aws_credentials = {\n    :access_key_id => ENV['AWS_ACCESS_KEY_ID'],\n    :secret_access_key => ENV['AWS_SECRET_ACCESS_KEY']\n  }\nend\n```", "```ruby\n# app/models/document.rb\n\nclass Document < ApplicationRecord\n  mount_uploader :document, PdfUploader\nend\n```"]}
