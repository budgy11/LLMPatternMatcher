{"prompt": "Create a session cookie using ruby", "llm_output": "**Creating a Session Cookie in Ruby**\n=====================================\n\nIn this example, we will use the `rack` gem to create a simple web application that sets and retrieves a session cookie.\n\n**Step 1: Add dependencies**\n\nAdd the following line to your Gemfile:\n```ruby\ngem 'rack'\n```\nThen run `bundle install`.\n\n**Step 2: Create a Rack app**\n\nCreate a new file called `app.rb` with the following content:\n```ruby\nrequire 'rack'\n\nclass App < Rack::Application\n  def initialize(app)\n    @session = {}\n  end\n\n  def call(env)\n    if env['PATH_INFO'] == '/set_session'\n      session_key = SecureRandom.uuid\n      @session[session_key] = { 'foo' => 'bar' }\n      set_cookie(session_key, @session[session_key])\n      [200, {'Content-Type' => 'text/plain'}, ['Session set']]\n    elsif env['PATH_INFO'] == '/get_session'\n      session_key = get_cookie('session_key')\n      if session_key\n        @session[session_key]\n      else\n        {}\n      end\n    else\n      [404, {}, []]\n    end\n  end\n\n  private\n\n  def set_cookie(key, value)\n    headers = {\n      'Set-Cookie' => [\n        \"session_key=#{key}\",\n        \"Path=/\",\n        \"HttpOnly=true\"\n      ].join('; ')\n    }\n    [200, headers, ['']]\n  end\n\n  def get_cookie(name)\n    env['HTTP_COOKIE'].scan(/#{name}=(.*)/).flat_map { |match| match[1] }\n  end\nend\n```\n**Step 3: Run the app**\n\nCreate a new file called `config.ru` with the following content:\n```ruby\nrequire_relative 'app'\n\nrun App.new(Rack::NullApplication.new)\n```\nThen run `rackup`.\n\n**Example Use Cases**\n\nTo set a session cookie, navigate to `http://localhost:9292/set_session`. To retrieve the session cookie, navigate to `http://localhost:9292/get_session`.\n\nNote: This is a simplified example and in a real-world application you should use a more robust method for storing sessions, such as using a database.", "code_blocks": ["```ruby\ngem 'rack'\n```", "```ruby\nrequire 'rack'\n\nclass App < Rack::Application\n  def initialize(app)\n    @session = {}\n  end\n\n  def call(env)\n    if env['PATH_INFO'] == '/set_session'\n      session_key = SecureRandom.uuid\n      @session[session_key] = { 'foo' => 'bar' }\n      set_cookie(session_key, @session[session_key])\n      [200, {'Content-Type' => 'text/plain'}, ['Session set']]\n    elsif env['PATH_INFO'] == '/get_session'\n      session_key = get_cookie('session_key')\n      if session_key\n        @session[session_key]\n      else\n        {}\n      end\n    else\n      [404, {}, []]\n    end\n  end\n\n  private\n\n  def set_cookie(key, value)\n    headers = {\n      'Set-Cookie' => [\n        \"session_key=#{key}\",\n        \"Path=/\",\n        \"HttpOnly=true\"\n      ].join('; ')\n    }\n    [200, headers, ['']]\n  end\n\n  def get_cookie(name)\n    env['HTTP_COOKIE'].scan(/#{name}=(.*)/).flat_map { |match| match[1] }\n  end\nend\n```", "```ruby\nrequire_relative 'app'\n\nrun App.new(Rack::NullApplication.new)\n```"]}
