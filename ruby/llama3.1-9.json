{"prompt": "Implement a CORS Policy using ruby", "llm_output": "**CORS (Cross-Origin Resource Sharing) Policy in Ruby**\n===========================================================\n\nTo implement a CORS policy in a Ruby application, we'll use the `rack-cors` gem. First, add it to your Gemfile and run `bundle install`.\n\n```ruby\n# In your Gemfile\ngem 'rack-cors'\n```\n\n**Configuring CORS**\n--------------------\n\nCreate a new file named `config/initializers/cors.rb`. This is where we'll configure our CORS policy.\n\n```ruby\n# config/initializers/cors.rb\n\nmodule RackCors\n  class << self\n    def enabled?\n      Rails.application.config.cors_enabled\n    end\n\n    def allowed_origins\n      Rails.application.config.allowed_origins\n    end\n\n    def allowed_methods\n      Rails.application.config.allowed_methods.join(', ')\n    end\n\n    def allowed_headers\n      Rails.application.config.allowed_headers.join(', ')\n    end\n  end\nend\n```\n\nIn your `config/application.rb`, add the following lines to enable CORS:\n\n```ruby\n# config/application.rb\n\nmodule MyApplication\n  class Application < Rails::Application\n    # ...\n\n    config.cors_enabled = true\n    config.allowed_origins = ['http://example.com', 'https://example.com']\n    config.allowed_methods = [:get, :post]\n    config.allowed_headers = [\"Content-Type\", \"Authorization\"]\n  end\nend\n```\n\n**Including CORS Middleware**\n-----------------------------\n\nAdd the following line to your `config/application.rb` to include the CORS middleware in your application:\n\n```ruby\n# config/application.rb\n\nmodule MyApplication\n  class Application < Rails::Application\n    # ...\n\n    config.middleware.insert_before ActionDispatch::Static, RackCors\n  end\nend\n```\n\n**Example Use Case**\n--------------------\n\nTo test our CORS policy, we'll create a simple controller and add an API endpoint that returns JSON data. In your `app/controllers/api/v1/example_controller.rb`, add the following code:\n\n```ruby\n# app/controllers/api/v1/example_controller.rb\n\nclass Api::V1::ExampleController < ApplicationController\n  def index\n    render json: { message: 'Hello, World!' }\n  end\nend\n```\n\n**Testing CORS**\n-----------------\n\nTo test our CORS policy, we can use a tool like `curl` or Postman. We'll send a GET request to the API endpoint from a different origin (in this case, `http://example.com`). The response should include the following headers:\n\n```bash\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\nAccess-Control-Allow-Origin: http://example.com\nAccess-Control-Allow-Methods: GET, POST\nAccess-Control-Allow-Headers: Content-Type, Authorization\n```\n\nThis demonstrates that our CORS policy is correctly configured and enabling cross-origin requests.\n\n**Best Practices**\n-------------------\n\n* Always enable CORS on your API endpoints to prevent issues with clients trying to access resources from a different origin.\n* Configure allowed origins, methods, and headers according to your application's specific requirements.\n* Use the `rack-cors` gem for simplicity and ease of use.", "code_blocks": ["```ruby\n# In your Gemfile\ngem 'rack-cors'\n```", "```ruby\n# config/initializers/cors.rb\n\nmodule RackCors\n  class << self\n    def enabled?\n      Rails.application.config.cors_enabled\n    end\n\n    def allowed_origins\n      Rails.application.config.allowed_origins\n    end\n\n    def allowed_methods\n      Rails.application.config.allowed_methods.join(', ')\n    end\n\n    def allowed_headers\n      Rails.application.config.allowed_headers.join(', ')\n    end\n  end\nend\n```", "```ruby\n# config/application.rb\n\nmodule MyApplication\n  class Application < Rails::Application\n    # ...\n\n    config.cors_enabled = true\n    config.allowed_origins = ['http://example.com', 'https://example.com']\n    config.allowed_methods = [:get, :post]\n    config.allowed_headers = [\"Content-Type\", \"Authorization\"]\n  end\nend\n```", "```ruby\n# config/application.rb\n\nmodule MyApplication\n  class Application < Rails::Application\n    # ...\n\n    config.middleware.insert_before ActionDispatch::Static, RackCors\n  end\nend\n```", "```ruby\n# app/controllers/api/v1/example_controller.rb\n\nclass Api::V1::ExampleController < ApplicationController\n  def index\n    render json: { message: 'Hello, World!' }\n  end\nend\n```", null]}
