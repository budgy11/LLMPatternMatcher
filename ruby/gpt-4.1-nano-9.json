{"prompt": "Implement a CORS Policy using ruby", "llm_output": "Implementing a CORS (Cross-Origin Resource Sharing) policy in a Ruby application typically involves configuring your web server or web framework to include the appropriate headers that specify which origins are allowed to access resources.\n\n### Example: Adding CORS policy in a Ruby Rack application\n\nIf you're using a simple Ruby application or a framework like Sinatra, you can implement a CORS policy by inserting middleware that sets the necessary headers.\n\n---\n\n### 1. Using `rack-cors` Gem (Recommended)\n\nThe easiest and most flexible way is to use the [`rack-cors`](https://github.com/cyu/rack-cors) gem.\n\n#### Steps:\n\n- Add to your Gemfile:\n\n```ruby\ngem 'rack-cors'\n```\n\n- Run bundle install:\n\n```bash\nbundle install\n```\n\n- Configure `rack-cors` in your application (for example, in `config.ru` or your main app file):\n\n```ruby\nuse Rack::Cors do\n  allow do\n    origins 'https://example.com', 'https://trustedpartner.com' # Replace with your allowed origins\n    resource '*',\n      headers: :any,\n      methods: [:get, :post, :options, :put, :delete],\n      credentials: true\n  end\nend\n```\n\n- For Sinatra or Rack-based apps, place this configuration before your application routes.\n\n---\n\n### 2. Example with a Plain Rack app (`config.ru`):\n\n```ruby\nrequire 'rack'\nrequire 'rack/cors'\n\nuse Rack::Cors do\n  allow do\n    origins 'https://example.com'  # Replace with your client domain(s)\n    resource '*',\n      headers: :any,\n      methods: [:get, :post, :options],\n      credentials: true\n  end\nend\n\napp = Proc.new do |env|\n  [200, {'Content-Type' => 'text/plain'}, ['Hello World']]\nend\n\nrun app\n```\n\n---\n\n### 3. Manually adding CORS headers (less flexible)\n\nIf not using `rack-cors`, you can manually add headers in your controllers or middleware:\n\n```ruby\n# In a Sinatra route or controller\nbefore do\n  response.headers['Access-Control-Allow-Origin'] = 'https://example.com'\n  response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'\n  response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'\n  response.headers['Access-Control-Allow-Credentials'] = 'true'\nend\n\n# Handle OPTIONS preflight requests\noptions '*' do\n  200\nend\n```\n\n---\n\n### Summary:\n\n- Use the [`rack-cors`](https://github.com/cyu/rack-cors) gem for a flexible, standard way to configure CORS in Ruby applications.\n- Specify allowed origins, methods, headers, and other options according to your security requirements.\n- Remember to handle preflight OPTIONS requests appropriately.\n\n---\n\nLet me know if you'd like a complete example tailored to your specific Ruby framework!", "code_blocks": ["```ruby\ngem 'rack-cors'\n```", null, "```ruby\nuse Rack::Cors do\n  allow do\n    origins 'https://example.com', 'https://trustedpartner.com' # Replace with your allowed origins\n    resource '*',\n      headers: :any,\n      methods: [:get, :post, :options, :put, :delete],\n      credentials: true\n  end\nend\n```", "```ruby\nrequire 'rack'\nrequire 'rack/cors'\n\nuse Rack::Cors do\n  allow do\n    origins 'https://example.com'  # Replace with your client domain(s)\n    resource '*',\n      headers: :any,\n      methods: [:get, :post, :options],\n      credentials: true\n  end\nend\n\napp = Proc.new do |env|\n  [200, {'Content-Type' => 'text/plain'}, ['Hello World']]\nend\n\nrun app\n```", "```ruby\n# In a Sinatra route or controller\nbefore do\n  response.headers['Access-Control-Allow-Origin'] = 'https://example.com'\n  response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'\n  response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'\n  response.headers['Access-Control-Allow-Credentials'] = 'true'\nend\n\n# Handle OPTIONS preflight requests\noptions '*' do\n  200\nend\n```"]}
