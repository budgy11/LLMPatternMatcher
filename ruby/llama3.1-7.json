{"prompt": "Create a function to allow users to comment using ruby", "llm_output": "**Comment System Function in Ruby**\n=====================================\n\nBelow is an example implementation of a simple comment system in Ruby. This includes a `Comment` class and a `CommentManager` class that handles the creation, deletion, and retrieval of comments.\n\n### Comment Class\n```ruby\nclass Comment\n  attr_accessor :id, :text, :user_id\n\n  def initialize(id:, text:, user_id:)\n    @id = id\n    @text = text\n    @user_id = user_id\n  end\n\n  def to_hash\n    {\n      id: id,\n      text: text,\n      user_id: user_id\n    }\n  end\nend\n```\n### CommentManager Class\n```ruby\nclass CommentManager\n  attr_accessor :comments\n\n  def initialize(comments = [])\n    @comments = comments\n  end\n\n  # Create a new comment\n  def create_comment(id:, text:, user_id:)\n    comment = Comment.new(id: id, text: text, user_id: user_id)\n    @comments << comment\n    return comment.to_hash\n  end\n\n  # Get all comments\n  def get_comments\n    @comments.map(&:to_hash)\n  end\n\n  # Delete a comment by its ID\n  def delete_comment(id:)\n    @comments.delete_if { |comment| comment.id == id }\n  end\n\n  # Check if a user has already commented\n  def check_duplicate_comment(user_id:, text:)\n    @comments.each do |comment|\n      return true if (comment.user_id == user_id && comment.text == text)\n    end\n    false\n  end\nend\n```\n### Usage Example\n```ruby\n# Initialize the CommentManager with an empty array of comments\nmanager = CommentManager.new\n\n# Create a new comment\nnew_comment = manager.create_comment(id: 1, text: \"Hello World!\", user_id: 1)\n\n# Retrieve all comments\ncomments = manager.get_comments\n\nputs comments.inspect # => [{ id: 1, text: \"Hello World!\", user_id: 1 }]\n\n# Check if a user has already commented\nif manager.check_duplicate_comment(user_id: 1, text: \"Hello World!\")\n  puts \"User has already commented!\"\nelse\n  puts \"New comment created!\"\nend\n\n# Delete a comment by its ID\nmanager.delete_comment(id: 1)\n```\nThis implementation provides basic functionality for managing comments. You can extend it as needed to include additional features like user authentication, moderation tools, or commenting on specific content (e.g., blog posts).", "code_blocks": ["```ruby\nclass Comment\n  attr_accessor :id, :text, :user_id\n\n  def initialize(id:, text:, user_id:)\n    @id = id\n    @text = text\n    @user_id = user_id\n  end\n\n  def to_hash\n    {\n      id: id,\n      text: text,\n      user_id: user_id\n    }\n  end\nend\n```", "```ruby\nclass CommentManager\n  attr_accessor :comments\n\n  def initialize(comments = [])\n    @comments = comments\n  end\n\n  # Create a new comment\n  def create_comment(id:, text:, user_id:)\n    comment = Comment.new(id: id, text: text, user_id: user_id)\n    @comments << comment\n    return comment.to_hash\n  end\n\n  # Get all comments\n  def get_comments\n    @comments.map(&:to_hash)\n  end\n\n  # Delete a comment by its ID\n  def delete_comment(id:)\n    @comments.delete_if { |comment| comment.id == id }\n  end\n\n  # Check if a user has already commented\n  def check_duplicate_comment(user_id:, text:)\n    @comments.each do |comment|\n      return true if (comment.user_id == user_id && comment.text == text)\n    end\n    false\n  end\nend\n```", "```ruby\n# Initialize the CommentManager with an empty array of comments\nmanager = CommentManager.new\n\n# Create a new comment\nnew_comment = manager.create_comment(id: 1, text: \"Hello World!\", user_id: 1)\n\n# Retrieve all comments\ncomments = manager.get_comments\n\nputs comments.inspect # => [{ id: 1, text: \"Hello World!\", user_id: 1 }]\n\n# Check if a user has already commented\nif manager.check_duplicate_comment(user_id: 1, text: \"Hello World!\")\n  puts \"User has already commented!\"\nelse\n  puts \"New comment created!\"\nend\n\n# Delete a comment by its ID\nmanager.delete_comment(id: 1)\n```"]}
