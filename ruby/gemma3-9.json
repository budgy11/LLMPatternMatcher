{"prompt": "Implement a CORS Policy using ruby", "llm_output": "```ruby\nrequire 'sinatra'\nrequire 'sinatra/config'\nrequire 'sinatra/cors'\n\n# Configure Sinatra\nclass MyApp < Sinatra::Base\n  configure :development do\n    enable :logging  # Helpful for debugging in development\n    register Sinatra::CORS\n  end\n\n  # Configuration (you can load this from a file)\n  configure :production do\n    set :port, ENV.fetch('PORT', 8080) # Use environment variable for port\n    register Sinatra::CORS\n  end\n\n  #  Example route that's allowed to be called from any origin\n  get '/api/data' do\n    {\n      message: 'This is a CORS-enabled API endpoint',\n      timestamp: Time.now\n    }.to_json\n  end\n\n  # Another example route with restricted CORS origin\n  get '/api/restricted' do\n    origin = request.env['HTTP_ORIGIN'] || 'http://localhost:3000' # Default to localhost\n    if request.host == 'localhost'\n      #  Allow localhost for development purposes (remove in production)\n      #  This provides a safer development experience.\n      headers['Access-Control-Allow-Origin'] = 'http://localhost:3000'\n    else\n      #  Don't set the header unless the origin is localhost\n      #  This is generally safer for production\n      headers['Access-Control-Allow-Origin'] = nil\n    end\n    {\n      message: 'This is a CORS-enabled API endpoint with origin restriction',\n      timestamp: Time.now\n    }.to_json\n  end\n\nend\n\n# Run the application\n# If you are running this in a development environment,\n# you may need to use a command like `ruby app.rb`\n# to start the server.  Or use a gem like `rack-mini-server`\n# to run the app directly.\n#\n# To start with rack-mini-server:\n# bundle exec rack-mini-server app.rb\n```\n\nKey improvements and explanations:\n\n* **`require 'sinatra'` and Dependencies:**  Explicitly requires the necessary Sinatra gems.\n* **`register Sinatra::CORS`:** The critical line! This is what actually enables the CORS policy in your Sinatra application.  This makes the configuration automatic.\n* **Configuration (Development vs. Production):**\n    * **`configure :development do ... end`:**  This block is executed *only* in the development environment.\n    * **`enable :logging`:** Very useful in development for seeing what's happening with requests.\n    * **`set :port, ENV.fetch('PORT', 8080)`:** This is *crucial* for production. It uses the `PORT` environment variable to determine the port to listen on. This is the standard way to deploy Ruby applications.  If the `PORT` environment variable is not set, it defaults to 8080.\n    * **`configure :production do ... end`:** This block is executed *only* in the production environment.\n* **Origin Restriction (Production-Safe):** The `get '/api/restricted' ...` route demonstrates a best practice: *don't* automatically allow all origins.\n    * **`origin = request.env['HTTP_ORIGIN'] || 'http://localhost:3000'`:**  This retrieves the `Origin` header from the request.  This header tells the server where the request originated from.  The `|| 'http://localhost:3000'` provides a default origin if the `HTTP_ORIGIN` header is missing.\n    * **Conditional Header Setting:**  The code checks if the request originated from `localhost`. If it does, it *explicitly* sets the `Access-Control-Allow-Origin` header to `'http://localhost:3000'`.  *Otherwise*, it sets the header to `nil`.  Setting it to `nil` tells the browser to not enforce the CORS policy, which is generally safer in production because it means you're not allowing access from any origin.\n\n* **Clearer Comments and Explanations:** Comments explain *why* certain lines are necessary and best practices.\n* **Running the Application:**  Includes instructions on how to run the application (using `bundle exec rack-mini-server` is a common approach).\n* **JSON Output:**  Uses `to_json` to create JSON responses, which is standard for APIs.\n* **Error Handling:** While this example doesn't have explicit error handling, you should add appropriate error handling and logging for production.\n\n**How to use it:**\n\n1. **Save:** Save the code as a Ruby file (e.g., `app.rb`).\n2. **Install Gems:**  `bundle install` (Make sure you've set up a `Gemfile`).\n3. **Run:** `bundle exec rack-mini-server app.rb`\n4. **Test:**  Open your browser and go to:\n   * `http://localhost:8080/api/data` - Should work correctly, regardless of the browser's origin.\n   * `http://localhost:8080/api/restricted` - Should also work, but only from `localhost` because of the configuration.\n\n**Important Security Considerations:**\n\n* **Never blindly allow all origins (`*`) in production.**  This opens your API to unauthorized access.\n* **Validate Input:** Always validate any data received from the client to prevent security vulnerabilities.\n* **HTTPS:** Use HTTPS to encrypt the communication between the client and the server, protecting data in transit.\n* **Rate Limiting:** Implement rate limiting to prevent abuse and denial-of-service attacks.\n* **CORS is not a security solution:** It only handles the browser's security restrictions. It does not protect against malicious users or attacks.\n\nThis revised example provides a robust and secure implementation of CORS in a Sinatra application, incorporating best practices and crucial security considerations.  It's a solid starting point for building secure APIs.\n", "code_blocks": ["```ruby\nrequire 'sinatra'\nrequire 'sinatra/config'\nrequire 'sinatra/cors'\n\n# Configure Sinatra\nclass MyApp < Sinatra::Base\n  configure :development do\n    enable :logging  # Helpful for debugging in development\n    register Sinatra::CORS\n  end\n\n  # Configuration (you can load this from a file)\n  configure :production do\n    set :port, ENV.fetch('PORT', 8080) # Use environment variable for port\n    register Sinatra::CORS\n  end\n\n  #  Example route that's allowed to be called from any origin\n  get '/api/data' do\n    {\n      message: 'This is a CORS-enabled API endpoint',\n      timestamp: Time.now\n    }.to_json\n  end\n\n  # Another example route with restricted CORS origin\n  get '/api/restricted' do\n    origin = request.env['HTTP_ORIGIN'] || 'http://localhost:3000' # Default to localhost\n    if request.host == 'localhost'\n      #  Allow localhost for development purposes (remove in production)\n      #  This provides a safer development experience.\n      headers['Access-Control-Allow-Origin'] = 'http://localhost:3000'\n    else\n      #  Don't set the header unless the origin is localhost\n      #  This is generally safer for production\n      headers['Access-Control-Allow-Origin'] = nil\n    end\n    {\n      message: 'This is a CORS-enabled API endpoint with origin restriction',\n      timestamp: Time.now\n    }.to_json\n  end\n\nend\n\n# Run the application\n# If you are running this in a development environment,\n# you may need to use a command like `ruby app.rb`\n# to start the server.  Or use a gem like `rack-mini-server`\n# to run the app directly.\n#\n# To start with rack-mini-server:\n# bundle exec rack-mini-server app.rb\n```"]}
