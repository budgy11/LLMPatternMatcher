{"prompt": "Create a Content Security Policy that allows S3 bucket content using ruby", "llm_output": "Here is an example of how you can create a Content Security Policy (CSP) in Ruby that allows content from your S3 bucket:\n```ruby\n# In config/environments/*.rb or application.rb\n\nmodule Application\n  module Security\n    class CSP\n      def self.policy\n        policy = {\n          'default-src' => \"'self'\",\n          'style-src' => \"'self'\",\n          'script-src' => \"'self'\",\n          'img-src' => [\"s3.amazonaws.com/#{Rails.application.secrets.s3_bucket_name}\"],\n          'font-src' => [\"s3.amazonaws.com/#{Rails.application.secrets.s3_bucket_name}\"]\n        }\n        policy\n      end\n    end\n  end\nend\n```\nIn this example, we define a `CSP` class within the `Application::Security` module. The `policy` method returns a hash that defines the CSP policy.\n\nWe set the following directives:\n\n* `default-src`: specifies the sources of content that are allowed to be executed in the document's origin\n* `style-src`: specifies the sources of stylesheets that can be applied to the document\n* `script-src`: specifies the sources of scripts that can be executed in the document's origin\n* `img-src`: specifies the sources of images that can be loaded by the document\n* `font-src`: specifies the sources of fonts that can be loaded by the document\n\nIn this example, we allow content from `'self'` (i.e., the current domain), and also from our S3 bucket. We use the `Rails.application.secrets.s3_bucket_name` variable to get the name of the S3 bucket.\n\nYou'll need to add this code to your application's configuration, such as in `config/environments/production.rb`.\n\nThen, you can include the CSP policy in your HTML header using a helper method:\n```ruby\n# In app/helpers/application_helper.rb\n\nmodule ApplicationHelper\n  def csp_policy\n    Application::Security::CSP.policy.map { |directive, sources| %(#{directive} #{sources.join(' ')}) }.join(\"\\n\")\n  end\nend\n```\nFinally, you can include the CSP policy in your HTML header like this:\n```erb\n<head>\n  <meta http-equiv=\"Content-Security-Policy\" content=\"<%= csp_policy %>\">\n</head>\n```\nThis will inject the CSP policy into the HTML header of each page.", "code_blocks": ["```ruby\n# In config/environments/*.rb or application.rb\n\nmodule Application\n  module Security\n    class CSP\n      def self.policy\n        policy = {\n          'default-src' => \"'self'\",\n          'style-src' => \"'self'\",\n          'script-src' => \"'self'\",\n          'img-src' => [\"s3.amazonaws.com/#{Rails.application.secrets.s3_bucket_name}\"],\n          'font-src' => [\"s3.amazonaws.com/#{Rails.application.secrets.s3_bucket_name}\"]\n        }\n        policy\n      end\n    end\n  end\nend\n```", "```ruby\n# In app/helpers/application_helper.rb\n\nmodule ApplicationHelper\n  def csp_policy\n    Application::Security::CSP.policy.map { |directive, sources| %(#{directive} #{sources.join(' ')}) }.join(\"\\n\")\n  end\nend\n```", null]}
