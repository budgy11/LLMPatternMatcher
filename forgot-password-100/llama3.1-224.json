{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of how to create a \"forgot password\" function in PHP:\n\n**Database Schema**\n\nAssuming you have a MySQL database with the following schema:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) NOT NULL UNIQUE,\n  password_hash CHAR(60) NOT NULL,\n  salt CHAR(8) NOT NULL\n);\n```\n**Forgot Password Function**\n\nCreate a new PHP file called `forgot_password.php` with the following code:\n```php\n<?php\n\nrequire_once 'config.php'; // your database configuration file\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $email = trim($_POST['email']);\n\n  if (empty($email)) {\n    echo json_encode(array('error' => 'Email address is required'));\n    exit;\n  }\n\n  try {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE email = :email\");\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    if ($stmt->rowCount() === 0) {\n      echo json_encode(array('error' => 'Email not found'));\n      exit;\n    }\n\n    $user = $stmt->fetch();\n    $salt = $user['salt'];\n    $password_hash = hash_hmac('sha256', $user['password_hash'], $salt);\n\n    // generate a new password reset token\n    $token = bin2hex(random_bytes(32));\n\n    // update the user's record with the new token\n    $stmt = $pdo->prepare(\"UPDATE users SET password_reset_token = :token WHERE email = :email\");\n    $stmt->bindParam(':token', $token);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    // send a password reset email to the user\n    $subject = 'Reset your password';\n    $message = \"Dear $user[name],\nTo reset your password, click this link: http://yourwebsite.com/reset_password.php?token=$token\";\n    mail($email, $subject, $message);\n\n    echo json_encode(array('success' => 'Email sent with password reset token'));\n  } catch (PDOException $e) {\n    echo json_encode(array('error' => $e->getMessage()));\n  }\n} else {\n  // display the forgot password form\n  ?>\n  <h1>Forgot Password</h1>\n  <form method=\"post\">\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required><br>\n    <button type=\"submit\">Submit</button>\n  </form>\n  <?php\n}\n```\n**Reset Password Function**\n\nCreate a new PHP file called `reset_password.php` with the following code:\n```php\n<?php\n\nrequire_once 'config.php'; // your database configuration file\n\nif ($_SERVER['REQUEST_METHOD'] === 'GET') {\n  $token = $_GET['token'];\n\n  if (empty($token)) {\n    echo json_encode(array('error' => 'Invalid token'));\n    exit;\n  }\n\n  try {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE password_reset_token = :token\");\n    $stmt->bindParam(':token', $token);\n    $stmt->execute();\n\n    if ($stmt->rowCount() === 0) {\n      echo json_encode(array('error' => 'Invalid token'));\n      exit;\n    }\n\n    $user = $stmt->fetch();\n    $salt = $user['salt'];\n\n    // prompt the user to enter a new password\n    ?>\n    <h1>Reset Password</h1>\n    <form method=\"post\">\n      <label for=\"new_password\">New Password:</label>\n      <input type=\"password\" id=\"new_password\" name=\"new_password\"><br>\n      <button type=\"submit\">Submit</button>\n    </form>\n    <?php\n  } catch (PDOException $e) {\n    echo json_encode(array('error' => $e->getMessage()));\n  }\n} else {\n  // process the new password form submission\n  if (!empty($_POST['new_password'])) {\n    $new_password = trim($_POST['new_password']);\n\n    if (strlen($new_password) < 8) {\n      echo json_encode(array('error' => 'Password must be at least 8 characters'));\n      exit;\n    }\n\n    // hash the new password with the user's salt\n    $password_hash = hash_hmac('sha256', $new_password, $_POST['salt']);\n\n    try {\n      // update the user's record with the new password hash\n      $stmt = $pdo->prepare(\"UPDATE users SET password_hash = :hash WHERE email = :email\");\n      $stmt->bindParam(':hash', $password_hash);\n      $stmt->bindParam(':email', $_POST['email']);\n      $stmt->execute();\n\n      // delete the password reset token from the user's record\n      $stmt = $pdo->prepare(\"UPDATE users SET password_reset_token = NULL WHERE email = :email\");\n      $stmt->bindParam(':email', $_POST['email']);\n      $stmt->execute();\n\n      echo json_encode(array('success' => 'Password updated'));\n    } catch (PDOException $e) {\n      echo json_encode(array('error' => $e->getMessage()));\n    }\n  }\n}\n```\n**Usage**\n\nTo use these functions, simply include the `forgot_password.php` file on your website and submit a form with the user's email address. The script will generate a password reset token and send an email to the user with a link to the `reset_password.php` file.\n\nWhen the user clicks the link in their email, they will be prompted to enter a new password. Once they submit the new password, it will be hashed and stored in the database, replacing the old password hash.\n\nNote that this is just an example implementation, and you should modify it to fit your specific use case. Additionally, make sure to follow best practices for password storage and reset, such as using a secure password hashing algorithm (e.g. bcrypt) and storing the salt separately from the hashed password.", "code_blocks": [null, "```php\n<?php\n\nrequire_once 'config.php'; // your database configuration file\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $email = trim($_POST['email']);\n\n  if (empty($email)) {\n    echo json_encode(array('error' => 'Email address is required'));\n    exit;\n  }\n\n  try {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE email = :email\");\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    if ($stmt->rowCount() === 0) {\n      echo json_encode(array('error' => 'Email not found'));\n      exit;\n    }\n\n    $user = $stmt->fetch();\n    $salt = $user['salt'];\n    $password_hash = hash_hmac('sha256', $user['password_hash'], $salt);\n\n    // generate a new password reset token\n    $token = bin2hex(random_bytes(32));\n\n    // update the user's record with the new token\n    $stmt = $pdo->prepare(\"UPDATE users SET password_reset_token = :token WHERE email = :email\");\n    $stmt->bindParam(':token', $token);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    // send a password reset email to the user\n    $subject = 'Reset your password';\n    $message = \"Dear $user[name],\nTo reset your password, click this link: http://yourwebsite.com/reset_password.php?token=$token\";\n    mail($email, $subject, $message);\n\n    echo json_encode(array('success' => 'Email sent with password reset token'));\n  } catch (PDOException $e) {\n    echo json_encode(array('error' => $e->getMessage()));\n  }\n} else {\n  // display the forgot password form\n  ?>\n  <h1>Forgot Password</h1>\n  <form method=\"post\">\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required><br>\n    <button type=\"submit\">Submit</button>\n  </form>\n  <?php\n}\n```", "```php\n<?php\n\nrequire_once 'config.php'; // your database configuration file\n\nif ($_SERVER['REQUEST_METHOD'] === 'GET') {\n  $token = $_GET['token'];\n\n  if (empty($token)) {\n    echo json_encode(array('error' => 'Invalid token'));\n    exit;\n  }\n\n  try {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE password_reset_token = :token\");\n    $stmt->bindParam(':token', $token);\n    $stmt->execute();\n\n    if ($stmt->rowCount() === 0) {\n      echo json_encode(array('error' => 'Invalid token'));\n      exit;\n    }\n\n    $user = $stmt->fetch();\n    $salt = $user['salt'];\n\n    // prompt the user to enter a new password\n    ?>\n    <h1>Reset Password</h1>\n    <form method=\"post\">\n      <label for=\"new_password\">New Password:</label>\n      <input type=\"password\" id=\"new_password\" name=\"new_password\"><br>\n      <button type=\"submit\">Submit</button>\n    </form>\n    <?php\n  } catch (PDOException $e) {\n    echo json_encode(array('error' => $e->getMessage()));\n  }\n} else {\n  // process the new password form submission\n  if (!empty($_POST['new_password'])) {\n    $new_password = trim($_POST['new_password']);\n\n    if (strlen($new_password) < 8) {\n      echo json_encode(array('error' => 'Password must be at least 8 characters'));\n      exit;\n    }\n\n    // hash the new password with the user's salt\n    $password_hash = hash_hmac('sha256', $new_password, $_POST['salt']);\n\n    try {\n      // update the user's record with the new password hash\n      $stmt = $pdo->prepare(\"UPDATE users SET password_hash = :hash WHERE email = :email\");\n      $stmt->bindParam(':hash', $password_hash);\n      $stmt->bindParam(':email', $_POST['email']);\n      $stmt->execute();\n\n      // delete the password reset token from the user's record\n      $stmt = $pdo->prepare(\"UPDATE users SET password_reset_token = NULL WHERE email = :email\");\n      $stmt->bindParam(':email', $_POST['email']);\n      $stmt->execute();\n\n      echo json_encode(array('success' => 'Password updated'));\n    } catch (PDOException $e) {\n      echo json_encode(array('error' => $e->getMessage()));\n    }\n  }\n}\n```"]}
