{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of how you can create a \"forgot password\" function in PHP. This will send the user their login credentials via email.\n\n**Note:** Before implementing this, make sure that your server has email sending capabilities and that you have a database set up to store user information.\n\n```php\n// File: forgot_password.php\n\n<?php\nrequire_once 'config/database.php'; // Your database configuration file\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $email = $_POST['email'];\n\n    // Validate the email address\n    if (filter_var($email, FILTER_VALIDATE_EMAIL) === false) {\n        echo \"Invalid email address.\";\n        exit;\n    }\n\n    try {\n        // Retrieve user data from database\n        $sql = \"SELECT id, password FROM users WHERE email = :email\";\n        $stmt = $db->prepare($sql);\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n        $user_data = $stmt->fetch();\n\n        if ($user_data) {\n            // Generate a random token for the user\n            $token = bin2hex(random_bytes(32));\n\n            // Store the token in the database along with the timestamp\n            $sql = \"UPDATE users SET password_reset_token = :token, password_reset_timestamp = NOW() WHERE id = :id\";\n            $stmt = $db->prepare($sql);\n            $stmt->bindParam(':token', $token);\n            $stmt->bindParam(':id', $user_data['id']);\n            $stmt->execute();\n\n            // Send the email with reset instructions\n            $subject = \"Reset Your Password\";\n            $body = \"\n                Hello,\n\n                You are receiving this email because you have requested to reset your password.\n                Please click on the following link to create a new password:\n                <a href='http://example.com/reset_password.php?email=$email&token=$token'>Reset Password</a>\n                If you did not request to change your password, please ignore this email.\n\n                Best regards,\n                [Your Name]\n            \";\n            $headers = \"From: no-reply@example.com\";\n            mail($email, $subject, $body, $headers);\n\n            echo \"Email sent with reset instructions. Please check your inbox.\";\n        } else {\n            echo \"User not found.\";\n        }\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n} else {\n    // Display the forgot password form\n?>\n\n<form action=\"\" method=\"post\">\n    <input type=\"email\" name=\"email\" placeholder=\"Email Address\">\n    <button type=\"submit\">Send Reset Instructions</button>\n</form>\n\n<?php\n}\n?>\n```\n\n**Reset Password Function:**\n\n```php\n// File: reset_password.php\n\n<?php\nrequire_once 'config/database.php'; // Your database configuration file\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $email = $_GET['email'];\n    $token = $_GET['token'];\n\n    try {\n        // Retrieve user data from database\n        $sql = \"SELECT id, password_reset_token FROM users WHERE email = :email AND password_reset_timestamp > NOW() - INTERVAL 1 HOUR\";\n        $stmt = $db->prepare($sql);\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n        $user_data = $stmt->fetch();\n\n        if ($user_data && $user_data['password_reset_token'] == $token) {\n            // Update the user's password\n            $new_password = $_POST['password'];\n            $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);\n            $sql = \"UPDATE users SET password = :password WHERE id = :id\";\n            $stmt = $db->prepare($sql);\n            $stmt->bindParam(':password', $hashed_password);\n            $stmt->bindParam(':id', $user_data['id']);\n            $stmt->execute();\n\n            echo \"Password updated successfully.\";\n        } else {\n            echo \"Invalid token or expired.\";\n        }\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n} else {\n    // Display the reset password form\n?>\n\n<form action=\"\" method=\"post\">\n    <input type=\"password\" name=\"new_password\" placeholder=\"New Password\">\n    <button type=\"submit\">Update Password</button>\n</form>\n\n<?php\n}\n?>\n```\n\n**Database Configuration (config/database.php):**\n\n```php\n<?php\n$db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');\n?>\n```\n\nThis is a basic example to demonstrate how you can create a \"forgot password\" function in PHP. You should adapt it according to your database schema and security requirements.\n\n**Security Notes:**\n\n*   Make sure to use prepared statements to prevent SQL injection.\n*   Use `password_hash` to store hashed passwords in the database.\n*   Store tokens securely using a secure random number generator (e.g., `random_bytes`).\n*   Validate user input on both sides of the request.\n*   Consider implementing additional security measures like rate limiting and CAPTCHAs.\n\nThis is a basic implementation. In real-world scenarios, consider using more advanced libraries or frameworks that provide built-in support for password hashing and email sending, such as PHPMailer or League\\Crypt. Additionally, make sure to review your application's security regularly to protect against potential vulnerabilities.", "code_blocks": ["```php\n// File: forgot_password.php\n\n<?php\nrequire_once 'config/database.php'; // Your database configuration file\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $email = $_POST['email'];\n\n    // Validate the email address\n    if (filter_var($email, FILTER_VALIDATE_EMAIL) === false) {\n        echo \"Invalid email address.\";\n        exit;\n    }\n\n    try {\n        // Retrieve user data from database\n        $sql = \"SELECT id, password FROM users WHERE email = :email\";\n        $stmt = $db->prepare($sql);\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n        $user_data = $stmt->fetch();\n\n        if ($user_data) {\n            // Generate a random token for the user\n            $token = bin2hex(random_bytes(32));\n\n            // Store the token in the database along with the timestamp\n            $sql = \"UPDATE users SET password_reset_token = :token, password_reset_timestamp = NOW() WHERE id = :id\";\n            $stmt = $db->prepare($sql);\n            $stmt->bindParam(':token', $token);\n            $stmt->bindParam(':id', $user_data['id']);\n            $stmt->execute();\n\n            // Send the email with reset instructions\n            $subject = \"Reset Your Password\";\n            $body = \"\n                Hello,\n\n                You are receiving this email because you have requested to reset your password.\n                Please click on the following link to create a new password:\n                <a href='http://example.com/reset_password.php?email=$email&token=$token'>Reset Password</a>\n                If you did not request to change your password, please ignore this email.\n\n                Best regards,\n                [Your Name]\n            \";\n            $headers = \"From: no-reply@example.com\";\n            mail($email, $subject, $body, $headers);\n\n            echo \"Email sent with reset instructions. Please check your inbox.\";\n        } else {\n            echo \"User not found.\";\n        }\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n} else {\n    // Display the forgot password form\n?>\n\n<form action=\"\" method=\"post\">\n    <input type=\"email\" name=\"email\" placeholder=\"Email Address\">\n    <button type=\"submit\">Send Reset Instructions</button>\n</form>\n\n<?php\n}\n?>\n```", "```php\n// File: reset_password.php\n\n<?php\nrequire_once 'config/database.php'; // Your database configuration file\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $email = $_GET['email'];\n    $token = $_GET['token'];\n\n    try {\n        // Retrieve user data from database\n        $sql = \"SELECT id, password_reset_token FROM users WHERE email = :email AND password_reset_timestamp > NOW() - INTERVAL 1 HOUR\";\n        $stmt = $db->prepare($sql);\n        $stmt->bindParam(':email', $email);\n        $stmt->execute();\n        $user_data = $stmt->fetch();\n\n        if ($user_data && $user_data['password_reset_token'] == $token) {\n            // Update the user's password\n            $new_password = $_POST['password'];\n            $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);\n            $sql = \"UPDATE users SET password = :password WHERE id = :id\";\n            $stmt = $db->prepare($sql);\n            $stmt->bindParam(':password', $hashed_password);\n            $stmt->bindParam(':id', $user_data['id']);\n            $stmt->execute();\n\n            echo \"Password updated successfully.\";\n        } else {\n            echo \"Invalid token or expired.\";\n        }\n    } catch (PDOException $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n} else {\n    // Display the reset password form\n?>\n\n<form action=\"\" method=\"post\">\n    <input type=\"password\" name=\"new_password\" placeholder=\"New Password\">\n    <button type=\"submit\">Update Password</button>\n</form>\n\n<?php\n}\n?>\n```", "```php\n<?php\n$db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');\n?>\n```"]}
