{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of how you can create a \"forgot password\" function in PHP:\n\n**Database Structure:**\n\nFor this example, let's assume we have the following database structure:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) NOT NULL UNIQUE,\n  password_hash VARCHAR(255) NOT NULL,\n  reset_token VARCHAR(255),\n  reset_expires TIMESTAMP DEFAULT CURRENT_TIMESTAMP + INTERVAL 30 MINUTE\n);\n```\n**Forgot Password Function:**\n\nThe function will take the user's email address as input and send a password reset email with a link to reset the password.\n```php\nfunction forgot_password($email) {\n  // Check if email exists in database\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email\");\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  $user = $stmt->fetch();\n\n  // If user doesn't exist, throw an exception\n  if (!$user) {\n    throw new Exception('Email not found');\n  }\n\n  // Generate a random reset token\n  $reset_token = bin2hex(random_bytes(32));\n\n  // Update the user's reset token and expiration time\n  $stmt = $conn->prepare(\"UPDATE users SET reset_token = :token, reset_expires = CURRENT_TIMESTAMP + INTERVAL 30 MINUTE WHERE email = :email\");\n  $stmt->bindParam(':token', $reset_token);\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n\n  // Send password reset email\n  $subject = 'Reset your password';\n  $body = '\n    <p>Hello ' . htmlspecialchars($user['name']) . '</p>\n    <p>To reset your password, click on the following link:</p>\n    <a href=\"' . url('/reset-password', ['token' => $reset_token]) . '\">Reset Password</a>\n  ';\n\n  // Mail library (e.g. PHPMailer)\n  $mail = new PHPMailer();\n  $mail->isSMTP();\n  $mail->Host = 'smtp.example.com';\n  $mail->Port = 587;\n  $mail->SMTPSecure = 'tls';\n  $mail->SMTPAuth = true;\n  $mail->Username = 'your-email@example.com';\n  $mail->Password = 'your-password';\n\n  // Send email\n  $mail->setFrom('your-email@example.com', 'Your Name');\n  $mail->addAddress($email);\n  $mail->Subject = $subject;\n  $mail->Body = $body;\n  if (!$mail->send()) {\n    throw new Exception('Failed to send email');\n  }\n}\n```\n**Reset Password Function:**\n\nThe function will take the reset token as input and allow the user to change their password.\n```php\nfunction reset_password($token) {\n  // Check if token exists in database\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE reset_token = :token AND reset_expires > CURRENT_TIMESTAMP\");\n  $stmt->bindParam(':token', $token);\n  $stmt->execute();\n  $user = $stmt->fetch();\n\n  // If user doesn't exist or token has expired, throw an exception\n  if (!$user) {\n    throw new Exception('Invalid token');\n  }\n\n  // Get the user's current password hash\n  $stmt = $conn->prepare(\"SELECT password_hash FROM users WHERE id = :id\");\n  $stmt->bindParam(':id', $user['id']);\n  $stmt->execute();\n  $current_password_hash = $stmt->fetch();\n\n  // Prompt user to enter new password\n  $new_password = readline('Enter your new password: ');\n  $confirm_new_password = readline('Confirm your new password: ');\n\n  // If passwords don't match, throw an exception\n  if ($new_password !== $confirm_new_password) {\n    throw new Exception('Passwords do not match');\n  }\n\n  // Hash the new password\n  $hashed_new_password = password_hash($new_password, PASSWORD_DEFAULT);\n\n  // Update the user's password hash and reset token\n  $stmt = $conn->prepare(\"UPDATE users SET password_hash = :password_hash, reset_token = NULL WHERE id = :id\");\n  $stmt->bindParam(':password_hash', $hashed_new_password);\n  $stmt->bindParam(':id', $user['id']);\n  $stmt->execute();\n\n  // Log the user in (if desired)\n}\n```\n**Example Use Case:**\n\nTo use this forgot password function, you would call it with a user's email address:\n```php\nforgot_password('example@example.com');\n```\nThis would send an email to the specified address with a link to reset their password.\n\nTo use the reset password function, you would call it with the token from the email:\n```php\nreset_password($token);\n```\nThis would prompt the user to enter a new password and confirm it. If the passwords match, the user's password hash is updated and their old reset token is cleared.", "code_blocks": [null, "```php\nfunction forgot_password($email) {\n  // Check if email exists in database\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email\");\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  $user = $stmt->fetch();\n\n  // If user doesn't exist, throw an exception\n  if (!$user) {\n    throw new Exception('Email not found');\n  }\n\n  // Generate a random reset token\n  $reset_token = bin2hex(random_bytes(32));\n\n  // Update the user's reset token and expiration time\n  $stmt = $conn->prepare(\"UPDATE users SET reset_token = :token, reset_expires = CURRENT_TIMESTAMP + INTERVAL 30 MINUTE WHERE email = :email\");\n  $stmt->bindParam(':token', $reset_token);\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n\n  // Send password reset email\n  $subject = 'Reset your password';\n  $body = '\n    <p>Hello ' . htmlspecialchars($user['name']) . '</p>\n    <p>To reset your password, click on the following link:</p>\n    <a href=\"' . url('/reset-password', ['token' => $reset_token]) . '\">Reset Password</a>\n  ';\n\n  // Mail library (e.g. PHPMailer)\n  $mail = new PHPMailer();\n  $mail->isSMTP();\n  $mail->Host = 'smtp.example.com';\n  $mail->Port = 587;\n  $mail->SMTPSecure = 'tls';\n  $mail->SMTPAuth = true;\n  $mail->Username = 'your-email@example.com';\n  $mail->Password = 'your-password';\n\n  // Send email\n  $mail->setFrom('your-email@example.com', 'Your Name');\n  $mail->addAddress($email);\n  $mail->Subject = $subject;\n  $mail->Body = $body;\n  if (!$mail->send()) {\n    throw new Exception('Failed to send email');\n  }\n}\n```", "```php\nfunction reset_password($token) {\n  // Check if token exists in database\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE reset_token = :token AND reset_expires > CURRENT_TIMESTAMP\");\n  $stmt->bindParam(':token', $token);\n  $stmt->execute();\n  $user = $stmt->fetch();\n\n  // If user doesn't exist or token has expired, throw an exception\n  if (!$user) {\n    throw new Exception('Invalid token');\n  }\n\n  // Get the user's current password hash\n  $stmt = $conn->prepare(\"SELECT password_hash FROM users WHERE id = :id\");\n  $stmt->bindParam(':id', $user['id']);\n  $stmt->execute();\n  $current_password_hash = $stmt->fetch();\n\n  // Prompt user to enter new password\n  $new_password = readline('Enter your new password: ');\n  $confirm_new_password = readline('Confirm your new password: ');\n\n  // If passwords don't match, throw an exception\n  if ($new_password !== $confirm_new_password) {\n    throw new Exception('Passwords do not match');\n  }\n\n  // Hash the new password\n  $hashed_new_password = password_hash($new_password, PASSWORD_DEFAULT);\n\n  // Update the user's password hash and reset token\n  $stmt = $conn->prepare(\"UPDATE users SET password_hash = :password_hash, reset_token = NULL WHERE id = :id\");\n  $stmt->bindParam(':password_hash', $hashed_new_password);\n  $stmt->bindParam(':id', $user['id']);\n  $stmt->execute();\n\n  // Log the user in (if desired)\n}\n```", "```php\nforgot_password('example@example.com');\n```", "```php\nreset_password($token);\n```"]}
