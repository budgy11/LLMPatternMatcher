{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of how you can create a \"Forgot Password\" function using PHP:\n\n**Database Setup**\n\nAssuming you have a `users` table with the following structure:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  email VARCHAR(255) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL\n);\n```\n**PHP Code**\n```php\n// forgot_password.php\n\nrequire_once 'config.php'; // Assuming you have a config file with database credentials\n\nfunction sendResetEmail($email)\n{\n    // Retrieve user data from database\n    $user = getUserByEmail($email);\n\n    if ($user) {\n        // Generate new password and hash it\n        $newPassword = generateRandomPassword();\n        $hashedPassword = hashPassword($newPassword);\n\n        // Update user's password in database\n        updateUserPassword($user['id'], $hashedPassword);\n\n        // Send email with new password\n        sendEmail($email, 'Your new password is: ' . $newPassword);\n    } else {\n        echo \"User not found\";\n    }\n}\n\nfunction generateRandomPassword()\n{\n    $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    $password = '';\n    for ($i = 0; $i < 10; $i++) {\n        $password .= substr($characters, rand(0, strlen($characters) - 1), 1);\n    }\n    return $password;\n}\n\nfunction hashPassword($password)\n{\n    // Use a secure password hashing algorithm like bcrypt\n    $hashedPassword = crypt($password, '$2y$10$');\n    return $hashedPassword;\n}\n\nfunction updateUserPassword($id, $newPassword)\n{\n    // Update user's password in database\n    $query = \"UPDATE users SET password_hash = :new_password WHERE id = :id\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':id', $id);\n    $stmt->bindParam(':new_password', $newPassword);\n    $stmt->execute();\n}\n\nfunction sendEmail($email, $message)\n{\n    // Send email using a library like PHPMailer or SwiftMailer\n    // For simplicity, we'll use the built-in mail function\n    $subject = \"Your new password\";\n    $body = $message;\n    $headers = \"From: Your Email <your_email@example.com>\\r\\n\".\n               \"MIME-Version: 1.0\\r\\n\".\n               \"Content-Type: text/plain; charset=UTF-8\\r\\n\";\n\n    mail($email, $subject, $body, $headers);\n}\n\nfunction getUserByEmail($email)\n{\n    // Retrieve user data from database\n    $query = \"SELECT * FROM users WHERE email = :email\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    return $stmt->fetch(PDO::FETCH_ASSOC);\n}\n\n// Handle forgotten password request\nif (isset($_POST['forgot_password'])) {\n    $email = $_POST['email'];\n    sendResetEmail($email);\n}\n```\n**HTML Form**\n```html\n<form action=\"forgot_password.php\" method=\"post\">\n  <input type=\"text\" name=\"email\" placeholder=\"Enter your email address\">\n  <button type=\"submit\" name=\"forgot_password\">Send Reset Email</button>\n</form>\n```\nThis code assumes you have a `config.php` file with database credentials. It uses PDO (PHP Data Objects) to interact with the database.\n\n**Security Notes**\n\n* Use a secure password hashing algorithm like bcrypt.\n* Store only hashed passwords in the database, never plain text passwords.\n* Use prepared statements to prevent SQL injection attacks.\n* Validate user input using PHP's built-in validation functions or libraries like `filter_var`.\n\nRemember to modify this code to fit your specific requirements and security standards.", "code_blocks": [null, "```php\n// forgot_password.php\n\nrequire_once 'config.php'; // Assuming you have a config file with database credentials\n\nfunction sendResetEmail($email)\n{\n    // Retrieve user data from database\n    $user = getUserByEmail($email);\n\n    if ($user) {\n        // Generate new password and hash it\n        $newPassword = generateRandomPassword();\n        $hashedPassword = hashPassword($newPassword);\n\n        // Update user's password in database\n        updateUserPassword($user['id'], $hashedPassword);\n\n        // Send email with new password\n        sendEmail($email, 'Your new password is: ' . $newPassword);\n    } else {\n        echo \"User not found\";\n    }\n}\n\nfunction generateRandomPassword()\n{\n    $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    $password = '';\n    for ($i = 0; $i < 10; $i++) {\n        $password .= substr($characters, rand(0, strlen($characters) - 1), 1);\n    }\n    return $password;\n}\n\nfunction hashPassword($password)\n{\n    // Use a secure password hashing algorithm like bcrypt\n    $hashedPassword = crypt($password, '$2y$10$');\n    return $hashedPassword;\n}\n\nfunction updateUserPassword($id, $newPassword)\n{\n    // Update user's password in database\n    $query = \"UPDATE users SET password_hash = :new_password WHERE id = :id\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':id', $id);\n    $stmt->bindParam(':new_password', $newPassword);\n    $stmt->execute();\n}\n\nfunction sendEmail($email, $message)\n{\n    // Send email using a library like PHPMailer or SwiftMailer\n    // For simplicity, we'll use the built-in mail function\n    $subject = \"Your new password\";\n    $body = $message;\n    $headers = \"From: Your Email <your_email@example.com>\\r\\n\".\n               \"MIME-Version: 1.0\\r\\n\".\n               \"Content-Type: text/plain; charset=UTF-8\\r\\n\";\n\n    mail($email, $subject, $body, $headers);\n}\n\nfunction getUserByEmail($email)\n{\n    // Retrieve user data from database\n    $query = \"SELECT * FROM users WHERE email = :email\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    return $stmt->fetch(PDO::FETCH_ASSOC);\n}\n\n// Handle forgotten password request\nif (isset($_POST['forgot_password'])) {\n    $email = $_POST['email'];\n    sendResetEmail($email);\n}\n```", null]}
