
<?php

// Database connection details - Replace with your actual credentials
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$dbname = "your_db_name";

// Function to reset password
function forgotPassword($email, $dbname, $host, $username, $password) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2.  Check if user exists
  $conn = new mysqli($host, $username, $password, $dbname);
  if ($conn->connect_error) {
    return "Connection failed: " . $conn->connect_error;
  }

  $sql = "SELECT id, username FROM users WHERE email = '$email'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $userName = $user['username'];

    // 3. Generate a unique token
    $token = bin2hex(random_bytes(32)); // Secure random token
    
    // 4.  Store token in database for user
    $sql = "UPDATE users SET reset_token = '$token' WHERE id = '$userId'";
    if (!$conn->query($sql)) {
      return "Error updating token: " . $conn->error;
    }

    // 5.  Send email with reset link
    $subject = "Password Reset Link";
    $to = $email;
    $headers = "From: your_email@example.com"; // Replace with your email
    $resetLink = "http://localhost/reset_password.php?token=$token"; // Replace with your reset link URL
    $message = "Click on the link above to reset your password.";

    mail($to, $message, $headers);
    return "Password reset email has been sent to $email.";

  } else {
    return "User not found.";
  }

  $conn->close();
}


// Example usage (Handle form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $result = forgotPassword($email, $dbname, $host, $username, $password);
  echo "<p>" . $result . "</p>";
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established and a 'users' table
// with a 'email' column.  Replace these with your actual credentials and table name.

// Database credentials
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$dbname = "your_db_name";

// Security - IMPORTANT:  Never store passwords in plain text.  Use a strong hashing algorithm.
// This is a placeholder for demonstration purposes only.  Implement proper password hashing!
// Ideally, use password_hash() to securely hash the new password before updating the database.

// Function to send an email
function sendPasswordResetEmail($email, $resetToken) {
    // Replace with your email sending code.
    // This is a placeholder.  Use a proper email library like PHPMailer.
    echo "Sending password reset email to: " . $email . " with token: " . $resetToken . "
";
    // Example using a simple placeholder
    // $subject = "Password Reset";
    // $body = "Click this link to reset your password: " . URL . "/reset_password.php?token=" . $resetToken;
    // $headers = "From: your_email@example.com\r
";
    // mail($email, $subject, $body, $headers);
}


// Forgot Password Function
function forgotPassword($email) {
    // Validate email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // Check if the user exists in the database
    $conn = new mysqli($host, $username, $password, $dbname);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $sql = "SELECT id, password, email FROM users WHERE email = '$email'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $user = $result->fetch_assoc();
        $userId = $user['id'];
        $hashedPassword = $user['password'];  //Get the hashed password. DO NOT STORE THIS IN PLAIN TEXT!
        // Generate a unique, time-based token for the reset link
        $resetToken = bin2hex(random_bytes(32));  // 32 bytes (256 bits) for security

        // Store the token in the database associated with the user.
        $sql = "UPDATE users SET reset_token = '$resetToken' WHERE id = '$userId'";
        if ($conn->query($sql) === TRUE) {
            // Send the reset email
            sendPasswordResetEmail($email, $resetToken);

            return "Password reset email sent to your email address. Please check your inbox.";
        } else {
            echo "Error updating reset token: " . $conn->error;
            return "An error occurred while sending the reset email.";
        }
    } else {
        return "User not found.";
    }

    $conn->close();
}


// Example Usage (for testing)
// $emailToReset = "test@example.com"; // Replace with a valid email address for testing.
// $result = forgotPassword($emailToReset);
// echo $result;
?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique token, emails the user a password reset
 * link containing the token, and then deletes the token from the database.
 *
 * @param string $email The user's email address.
 * @param string $baseUrl The base URL of the website. This is important for generating
 *                        the absolute URL of the reset link.
 * @param string $resetPasswordTokenSecret  A secret key used to hash the reset password token.
 *                                      This should be a strong, randomly generated string.
 *
 * @return bool True if the reset email was sent, false otherwise.
 */
function forgotPassword(string $email, string $baseUrl, string $resetPasswordTokenSecret) {
    // Validate email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided."); // Log the error
        return false;
    }

    // Generate a unique token
    $resetPasswordToken = bin2hex(random_bytes(32));

    // Hash the token - Important for security!
    $hashedResetPasswordToken = hash('sha256', $resetPasswordToken);

    // Store the token in the database (replace this with your database logic)
    // This is just an example. Replace with your actual database query.
    // Assuming you have a 'users' table with a 'email' and 'reset_token' column.
    // This is only a placeholder.  Don't use this directly in production.
    $dbResult = database_execute_query("
        INSERT INTO reset_tokens (email, reset_token, created_at)
        VALUES ('" . $email . "', '" . $hashedResetPasswordToken . "', NOW())
    ");

    if (!$dbResult) {
        error_log("Database error: Unable to store reset token."); // Log the error
        return false;
    }

    // Send the password reset email
    $subject = "Password Reset";
    $message = "Please click the link below to reset your password: " . $baseUrl . "/reset-password?token=" . $resetPasswordToken;
    $headers = "From: " .  "your-email@example.com" . "\r
"; // Change this to your sender email

    if (mail($email, $subject, $message, $headers)) {
        // Remove the token from the database after sending the email
        database_execute_query("DELETE FROM reset_tokens WHERE email = '" . $email . "' AND reset_token = '" . $hashedResetPasswordToken . "'");
        return true;
    } else {
        error_log("Failed to send email."); // Log the error
        return false;
    }
}


// Example usage (for demonstration only - adapt to your application)
//  This is *not* the complete code you would use.
//  You'd integrate this into your login/registration flow.

// Important: Replace with your actual configuration
$baseUrl = "https://yourwebsite.com";
$resetPasswordTokenSecret = "your-secret-key"; // Strong, random secret

$email = "testuser@example.com"; // Replace with the user's email

if (forgotPassword($email, $baseUrl, $resetPasswordTokenSecret)) {
    echo "Password reset email sent to " . $email . "
";
} else {
    echo "Failed to send password reset email.
";
}
?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a 'users' table with 'email' and 'password' columns.

// Function to handle password reset requests
function forgotPassword($email, $db) {
  // 1. Validate Email
  $email = trim($email); // Remove leading/trailing whitespace
  if (empty($email)) {
    return "Error: Please enter your email address.";
  }
  
  // Check if the email exists in the database
  $result = $db->query("SELECT id, email FROM users WHERE email = '$email'");
  if ($result->num_rows == 0) {
    return "Error: Email address not found.";
  }

  $user = $result->fetch_assoc(); // Fetch the user data
  $userId = $user['id'];
  $userEmail = $user['email'];

  // 2. Generate a unique, secure token (e.g., using random_v4)
  $token = bin2hex(random_bytes(32));

  // 3.  Store the token in the database, associated with the user.
  $sql = "UPDATE users SET password_reset_token = '$token' WHERE id = $userId";
  if (!$db->query($sql)) {
    return "Error: Failed to generate password reset token.";
  }

  // 4.  Send an email with a link containing the token
  $subject = "Password Reset Request";
  $message = "Click the following link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?token=$token'>" . $_SERVER['PHP_SELF'] . "?token=$token</a>";  // IMPORTANT:  Use the same script name
  $headers = "From: your_email@example.com"; // Replace with your email address

  if (mail($email, $subject, $message, $headers)) {
    return "Password reset email has been sent to $email.";
  } else {
    return "Error: Failed to send password reset email.";
  }
}


// Example Usage (within a form or other context)

// Assuming you have a form that captures the email address
// and calls this function when submitted.

// Get the email from the form (e.g., from $_POST)
// $email = $_POST['email'];  // This is just an example.  Replace with your form input.

// Call the function to generate the reset link
// $result = forgotPassword($email, $db);
// echo $result;


// *** SECURITY NOTES & IMPORTANT CONSIDERATIONS ***

// 1.  CSRF Protection:  You MUST implement CSRF (Cross-Site Request Forgery) protection.
//     This prevents attackers from submitting a malicious form on your behalf.
//     Use a token-based approach (e.g., a hidden input field with a random, unique value)
//     and verify it on the server-side.

// 2.  Password Reset Link Expiration:  Set a short expiration time (e.g., 30 minutes) for the password reset link.  This is crucial for security.
//     You can achieve this by adding a 'expiration_time' column to the 'users' table and updating it when the token is created.
//     When the user clicks the link, check if the token is still valid before allowing them to set a new password.

// 3. Token Generation: Use `random_bytes()` to generate a truly random token.  Don't use predictable algorithms.  The `bin2hex()` function is used to convert the binary data into a hexadecimal string.

// 4.  Database Security:  Protect your database connection credentials.  Don't hardcode them into your script.  Use environment variables or a configuration file.  Sanitize and validate all user input to prevent SQL injection vulnerabilities.

// 5. Logging:  Log all password reset requests (including the email address and the token used) for auditing and security monitoring purposes.

// 6.  The `$_SERVER['PHP_SELF']` is used to create a relative link that will work correctly even if the script is moved. However, be mindful that this relies on the current script's name.

// 7.  Avoid storing passwords in plain text.  Always hash passwords before storing them in the database.  Use a strong hashing algorithm like bcrypt or Argon2.  This example assumes you have an existing secure password hashing mechanism.

?>


<?php

/**
 * Forgets a user's password.  This is a basic implementation and 
 * should be thoroughly reviewed and secured in a production environment.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password the user wants to set.
 * @param string $dbHost  The database hostname.
 * @param string $dbName  The database name.
 * @param string $dbUser  The database username.
 * @param string $dbPassword The database password.
 *
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $newPassword, string $dbHost, string $dbName, string $dbUser, string $dbPassword) {
  // 1. Validate input (basic - expand this!)
  if (empty($email) || empty($newPassword)) {
    return false;
  }

  // 2. Connect to the database (using PDO - recommended)
  try {
    $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPassword);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Error handling
  } catch (PDOException $e) {
    error_log("Database connection failed: " . $e->getMessage());  // Log the error
    return false;
  }

  // 3. Check if the user exists
  $stmt = $pdo->prepare("SELECT id, email FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    return false; // User not found
  }

  // 4. Hash the new password (IMPORTANT - don't store passwords in plain text!)
  $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);

  // 5. Update the user's password in the database
  try {
    $stmt = $pdo->prepare("UPDATE users SET password = ? WHERE id = ?");
    $stmt->execute([$hashedPassword, $user['id']]);
  } catch (PDOException $e) {
    error_log("Database update failed: " . $e->getMessage());
    return false;
  }

  return true;
}


// Example Usage (For testing - DO NOT USE IN PRODUCTION WITHOUT SECURING)
// Ensure you have a "users" table in your database with an "email" and "password" column.
// The "password" column should initially be empty or contain a placeholder value.

// $email = "testuser@example.com";
// $newPassword = "MyNewPassword123";
// $dbHost = "localhost";
// $dbName = "your_database_name";
// $dbUser = "your_database_username";
// $dbPassword = "your_database_password";

// if (forgotPassword($email, $newPassword, $dbHost, $dbName, $dbUser, $dbPassword)) {
//   echo "Password reset successful for " . $email . "
";
// } else {
//   echo "Password reset failed for " . $email . "
";
// }

?>


<?php

// Assuming you have a database connection established
// (e.g., $db is your database connection object)

/**
 * Forgets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset link was generated and sent, false otherwise.
 */
function forgotPassword(string $email)
{
  // Validate the email address (basic validation - more robust validation is recommended)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false; // Invalid email format
  }

  // Check if the user exists in the database
  $user = getUserByEmail($email);  // Assuming you have this function
  if (!$user) {
    return false; // User not found
  }

  // Generate a unique reset token
  $resetToken = generateUniqueToken();

  // Store the token in the database, associated with the user's ID
  $result = storeResetToken($user['id'], $resetToken);

  if (!$result) {
    return false; // Failed to store token
  }

  // Send the password reset email (implement this function based on your email sending mechanism)
  sendResetPasswordEmail($user['email'], $resetToken);

  return true;
}

/**
 * Placeholder function to get a user by email.  Replace with your actual database query.
 *
 * @param string $email The user's email address.
 * @return array|null  An array representing the user data, or null if not found.
 */
function getUserByEmail(string $email)
{
    // Replace this with your actual database query
    // Example:
    // $result = $db->query("SELECT * FROM users WHERE email = '$email'");
    // if ($result->num_rows > 0) {
    //     return $result->fetch_assoc();
    // }
    // return null;
  return null;
}

/**
 * Placeholder function to generate a unique token.
 *
 * @return string A unique token.
 */
function generateUniqueToken()
{
  return bin2hex(random_bytes(32)); // Generate a random 32-byte hex string
}


/**
 * Placeholder function to store the reset token in the database.
 *
 * @param int $userId The ID of the user.
 * @param string $token The reset token.
 * @return bool True if the token was successfully stored, false otherwise.
 */
function storeResetToken(int $userId, string $token)
{
    // Replace this with your actual database query
    // Example:
    // $sql = "INSERT INTO password_resets (user_id, token, created_at) VALUES ($userId, '$token', NOW())";
    // if ($db->query($sql) === TRUE) {
    //     return true;
    // } else {
    //     return false;
    // }
    return false;
}


/**
 * Placeholder function to send the password reset email.
 *
 * @param string $email The user's email address.
 * @param string $token The reset token.
 * @return void
 */
function sendResetPasswordEmail(string $email, string $token)
{
  // Implement your email sending logic here using a library like PHPMailer
  // or your preferred email sending method.  This is just a placeholder.

  // Example using a dummy message (replace with your actual email content)
  $subject = "Password Reset Request";
  $message = "Please click the following link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . "?reset_token=" . $token . "'>Reset Password</a>";  // This is a basic link, improve security
  $headers = "From: your_email@example.com";

  // In a real application, use a library to send the email.
  echo "Email sent (dummy) to: " . $email . "
";
}


// Example usage (for testing - remove in production)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  if (forgotPassword($email)) {
    echo "Password reset email sent to " . $email . ". Check your inbox.";
  } else {
    echo "Failed to generate password reset link. Please try again.";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Request Password Reset</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established as $db
// (e.g., mysqli, PDO)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $newPassword) {
    // 1. Validate Email & Password (Basic - Enhance this in a production environment)
    if (empty($email) || empty($newPassword)) {
        return false; // Missing email or password
    }

    // Example: Validate email format (more robust validation needed in real code)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return false; // Invalid email format
    }


    // 2.  Check if user exists
    $user = getUserByEmail($email);
    if ($user === false) {
        return false; // User doesn't exist
    }


    // 3.  Hash the new password (VERY IMPORTANT!)
    $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

    // 4. Update the user's password in the database
    $result = updateUserPassword($user['id'], $hashedNewPassword);
    if ($result === false) {
        return false; // Update failed
    }


    return true; // Password reset successful
}


/**
 * Helper function to retrieve a user by email.
 *  Replace this with your actual database query.
 *
 * @param string $email The email address to search for.
 * @return array|false An array containing user data on success, false on failure.
 */
function getUserByEmail(string $email) {
    //  Example using mysqli (replace with your actual database connection)
    // Assuming you have a database connection $db

    // Placeholder for demonstration - replace with your database query
    // This example returns a dummy user.
    $user = [
        'id' => 123,
        'email' => $email,
        'name' => 'John Doe'
    ];
    return $user;  //Simulate a successful retrieval
}

/**
 * Helper function to update a user's password in the database.
 * Replace this with your actual database query.
 *
 * @param int $userId The ID of the user to update.
 * @param string $hashedPassword The new hashed password.
 * @return bool True on success, false on failure.
 */
function updateUserPassword(int $userId, string $hashedPassword) {
    // Example using mysqli (replace with your actual database query)

    // Assuming you have a database connection $db

    // Placeholder for demonstration - replace with your actual database query
    // This example returns a success/failure indicator.

    // Simulate a successful update.
    return true;
}



// Example usage:
$email = "testuser@example.com";  // Replace with the user's email
$newPassword = "NewPassword123";

if (forgotPassword($email, $newPassword)) {
    echo "Password reset successfully!  A password reset link has been sent to $email.";
} else {
    echo "Password reset failed. Please try again.";
}


?>


<?php

/**
 * Forgets a user's password and resets it via email.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password for the user.
 * @param string $smtp_host The SMTP host for sending emails.
 * @param string $smtp_username The SMTP username.
 * @param string $smtp_password The SMTP password.
 * @param string $smtp_port The SMTP port.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $newPassword, string $smtp_host, string $smtp_username, string $smtp_password, string $smtp_port) {
    // 1. Verify email exists
    $user = getUserByEmail($email);  // Assuming you have a function to retrieve user by email
    if (!$user) {
        error_log("User with email $email not found.");
        return false;
    }

    // 2. Hash the new password
    $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);

    // 3. Update the user's password in the database
    if (!updateUserPassword($user->id, $hashedPassword)) { // Assuming you have a function to update user password
        error_log("Failed to update user password for email $email");
        return false;
    }

    // 4. Send reset password email
    if (!sendResetPasswordEmail($user->email, $hashedPassword)) {
        error_log("Failed to send reset password email to $email");
        // Optionally, you could attempt to revert the password change in the database
        // if that's a critical requirement.
        return false;
    }

    return true;
}


/**
 * Placeholder functions for retrieving and updating user information.
 * Replace with your actual database queries and logic.
 *
 * @param string $email The user's email address.
 * @return User|null The User object if found, null otherwise.
 */
function getUserByEmail(string $email): ?User {
    // Replace with your database query to retrieve the user by email
    // Example:  (This is just a placeholder)
    // $db = new DatabaseConnection();
    // $query = "SELECT * FROM users WHERE email = ?";
    // $stmt = $db->prepare($query);
    // $stmt->bind_param("s", $email);
    // $stmt->execute();
    // $result = $stmt->get_result();
    // if ($result->num_rows > 0) {
    //     $user = new User();
    //     $user->load($result->fetch_assoc());
    //     return $user;
    // }
    // return null;

    // Placeholder example, assuming you have a User class
    return new User(['email' => $email]);
}


/**
 * Placeholder function to update the user's password in the database.
 *
 * @param int $userId The ID of the user to update.
 * @param string $hashedPassword The new hashed password.
 */
function updateUserPassword(int $userId, string $hashedPassword) {
    // Replace with your database query to update the user's password.
    // Example:
    // $db = new DatabaseConnection();
    // $query = "UPDATE users SET password = ? WHERE id = ?";
    // $stmt = $db->prepare($query);
    // $stmt->bind_param("si", $hashedPassword, $userId);
    // $result = $stmt->execute();
    // return $result;
    return true;  // Replace with actual return value based on success/failure
}


/**
 * Placeholder function to send the reset password email.
 *
 * @param string $email The user's email address.
 * @param string $hashedPassword The hashed password.
 * @return bool True on success, false on failure.
 */
function sendResetPasswordEmail(string $email, string $hashedPassword) {
    // Replace with your email sending logic.
    // Example:
    // $to = $email;
    // $subject = "Password Reset";
    // $message = "Click the link below to reset your password: " . $resetLink;
    // $headers = "From: your_email@example.com\r
";

    // $result = mail($to, $subject, $message, $headers);

    // return ($result === true);

    // Placeholder:  Simulate sending an email (for demonstration purposes)
    error_log("Simulating sending reset password email to $email with password $hashedPassword");
    return true;
}


// Example Usage (Replace with your actual values)
$email = "test@example.com";
$newPassword = "newPassword123";

// Replace with your SMTP configuration
$smtp_host = "smtp.example.com";
$smtp_username = "your_username";
$smtp_password = "your_password";
$smtp_port = 587;  // Or 465 for SSL

if (forgotPassword($email, $newPassword, $smtp_host, $smtp_username, $smtp_password, $smtp_port)) {
    echo "Password reset initiated successfully.  Check your email!";
} else {
    echo "Password reset failed.  Please try again.";
}
?>


<?php

// Assuming you have a database connection established (e.g., $pdo)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password to set.
 * @return bool True if the password was reset successfully, false otherwise.
 */
function resetPassword(string $email, string $newPassword) {
    global $pdo; // Assuming $pdo is your database connection object

    // 1. Check if the email exists
    $stmt = $pdo->prepare("SELECT id FROM users WHERE email = :email");
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    $stmt->execute();

    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        // Email doesn't exist
        return false;
    }

    // 2. Hash the new password
    $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

    // 3. Update the user's password
    $stmt = $pdo->prepare("UPDATE users SET password = :password WHERE id = :id");
    $stmt->bindParam(':password', $hashedNewPassword, PDO::PARAM_STR);
    $stmt->bindParam(':id', $user['id'], PDO::PARAM_INT);
    $stmt->execute();

    if ($stmt->rowCount() === 0) {
        // Update failed
        return false;
    }

    return true;
}



// Example Usage (Demonstration - NOT recommended for production)
// Replace with your actual email and desired password.

//Simulating email input
// $email = $_POST['email'];  // Get email from form submission (DO NOT expose directly)
// $newPassword = $_POST['newPassword']; // Get new password from form submission (DO NOT expose directly)


// Example 1:  Successful reset
// if (isset($email) && isset($newPassword)) {
//     $success = resetPassword($email, $newPassword);
//     if ($success) {
//         echo "Password reset successfully. Please check your email.";
//     } else {
//         echo "Password reset failed. Please try again.";
//     }
// }



// Security Considerations and Best Practices (Important!)

// 1.  **Never display the new password to the user.**  This is a critical security vulnerability.
// 2. **Rate Limiting:** Implement rate limiting to prevent brute-force password reset attempts. This is crucial for security.  Limit the number of reset requests from the same IP address within a certain timeframe.
// 3. **Email Verification:**  Always send a reset link with a unique token to the user's email address. This token should be time-sensitive.  The user clicks the link to a page where they can enter the new password.
// 4. **Token-Based Reset:**  Instead of directly using the email in the `resetPassword` function, generate a unique token (e.g., a UUID) and store it in the database along with the user's email.  This token should be used to verify that the user is actually requesting the password reset and not someone who has stolen the token.
// 5. **Time-Sensitive Tokens:** Use a token that expires after a short period (e.g., 30 minutes).
// 6. **Secure Password Hashing:** Use a strong password hashing algorithm like `PASSWORD_DEFAULT` (which uses bcrypt by default) to securely store passwords in the database.
// 7. **Input Validation:** Validate the `email` and `newPassword` to prevent SQL injection and other security vulnerabilities.  Use proper escaping functions.
// 8. **Logging:** Log all password reset attempts (successful and unsuccessful) for auditing and security monitoring.

?>


<?php

// This script requires a database connection setup (e.g., PDO)
// For simplicity, we'll use a basic array to store user data.
// In a real application, you'd connect to your database.

//  Example user data (replace with your database connection and retrieval)
$users = [
    'john.doe@example.com' => 'password123',
    'jane.smith@example.com' => 'secure_password',
];

// Function to handle the forgot password request
function forgot_password($email)
{
    // 1. Validate the email address
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // 2. Check if the user exists
    if (!isset($users[$email])) {
        return "User not found.";
    }

    // 3. Generate a unique token (for security)
    $token = bin2hex(random_bytes(32)); // Use cryptographically secure random bytes

    // 4. Store the token and expiration date in the database (or in our example array)
    //    This is the key step for a real application
    //    We'll just store it in an array for demonstration
    $users[$email]['reset_token'] = $token;
    $users[$email]['reset_expiry'] = time() + 3600; // Token expires in 1 hour (3600 seconds)
    

    // 5.  Create a reset link
    $reset_link = "https://yourdomain.com/reset_password?token=" . urlencode($token);

    // 6. Send the reset link (in a real application, use email)
    //    For this example, just return the link
    return "Please click on the following link to reset your password: " . $reset_link;
}

// Example usage:
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $reset_message = forgot_password($email);
    echo $reset_message;
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="">
        <label for="email">Email Address:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Configuration (Replace with your actual values)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_username';
$db_password = 'your_database_password';

// Function to reset password
function forgotPassword($email, $new_password) {
  // 1. Connect to the database
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  // Check connection
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // 2. Prepare and execute the SQL query
  $sql = "UPDATE users SET password = ? WHERE email = ?";
  $stmt = $conn->prepare($sql);

  if ($stmt) {
    $stmt->bind_param("ss", $new_password, $email);  // Use 'ss' for string

    if ($stmt->execute()) {
      // Password reset successful
      $stmt->close();
      return true;
    } else {
      // Password reset failed
      $stmt->close();
      return false;
    }
  } else {
    // Prepare statement failed
    $stmt = null; // Ensure $stmt is null to avoid issues
    return false;
  }
}


// Example Usage (For testing - **DO NOT USE THIS IN A PRODUCTION ENVIRONMENT**)
// **Important Security Considerations - See Below**

// Test email and new password (replace with actual values for testing)
$test_email = 'test@example.com';  // Replace with a valid email address for testing
$new_password = 'NewPassword123'; // Replace with a strong password


// Call the function to reset the password
if (forgotPassword($test_email, $new_password)) {
  echo "Password reset successfully for $test_email";
} else {
  echo "Password reset failed for $test_email.  Check the database and email configuration.";
}


// **IMPORTANT SECURITY CONSIDERATIONS AND BEST PRACTICES**

// 1.  Salt and Hashing:
//     *  **NEVER** store passwords in plain text in your database.
//     *  Always hash passwords using a strong hashing algorithm (like bcrypt or Argon2) *before* storing them in the database.
//     *  Use a unique salt for each user.
//     *  Use a library for password hashing (e.g., password_hash() and password_verify() in PHP).
//     *  This example is for demonstration purposes only and does *not* include proper password hashing.

// 2.  Email Verification (Crucial!)
//     *   **ALWAYS** send an email to the user containing a temporary, unique link.  This link should:
//         *  Be a unique token that can be verified.
//         *  Expire after a short period (e.g., 30 minutes).
//         *  Lead to a secure page where the user can set a new, permanent password.
//     *  This prevents attackers from guessing the password and resetting it without user interaction.

// 3.  Rate Limiting:
//     *  Implement rate limiting to prevent brute-force password reset attempts.

// 4.  Input Validation:
//     *   Thoroughly validate the email address and password input.  Check for valid email formats, sanitize input to prevent SQL injection, and limit password length.

// 5.  Security Audits:
//     *  Regularly review your code for security vulnerabilities.
//     *  Consider using a security scanner.

// 6.  Error Handling:
//     *  Implement robust error handling to catch and log any errors that occur during the password reset process.  *Never* display detailed error messages to the user in a production environment.  Log them securely.

// 7.  Temporary Token:
//     * Use a unique, randomly generated token to represent the reset request. This token should be stored in the database along with the email.  This token is used to verify that the user is actually requesting a password reset.

// 8.  HTTPS:
//     *  Always use HTTPS to encrypt communication between the user's browser and your server.


?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and that you have a 'users' table with 'email' and 'password' columns.

/**
 * Forgets a user's password.
 *
 * @param string $email The email address of the user.
 * @return bool True if a reset link was sent, false otherwise.
 */
function forgot_password(string $email) {
  // 1. Validate the email address.
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email format provided: " . $email); // Log for debugging
    return false;
  }

  // 2. Check if the user exists.
  $user = get_user_by_email($email);
  if (!$user) {
    error_log("User with email " . $email . " not found."); // Log for debugging
    return false;
  }

  // 3. Generate a unique reset token.
  $reset_token = generate_unique_token();

  // 4. Store the token in the database, associated with the user.
  //    This is crucial for security.  Don't store the password directly.
  update_reset_token($user['id'], $reset_token);

  // 5. Send the reset email.
  $subject = "Password Reset Request";
  $message = "Click the link below to reset your password:
" .
             "<a href='" . $_SERVER['PHP_SELF'] . "?reset_token=$reset_token'>" .
             "Reset Password" .
             "</a>";

  $headers = "From: your_email@example.com\r
";  // Replace with your actual email address
  $headers .= "Reply-To: your_email@example.com\r
";

  if (send_email($user['email'], $subject, $message, $headers)) {
    return true;
  } else {
    error_log("Failed to send reset email for user " . $email);
    // Optionally, you could delete the token if email sending fails
    delete_reset_token($user['id']);
    return false;
  }
}


/**
 * Placeholder functions - Replace with your actual database logic.
 */

/**
 * Gets a user from the database by email.
 *
 * @param string $email The email address to search for.
 * @return array|null  An array representing the user data, or null if not found.
 */
function get_user_by_email(string $email): ?array {
  //  This is just a placeholder - Replace with your database query
  //  Example (using mysqli):
  //  $result = mysqli_query($db, "SELECT * FROM users WHERE email = '$email'");
  //  if (mysqli_num_rows($result) > 0) {
  //    $row = mysqli_fetch_assoc($result);
  //    return $row;
  //  }
  //  return null;
  // Placeholder example
  $dummy_user = [
      'id' => 123,
      'email' => $email
  ];

  return $dummy_user;
}


/**
 * Generates a unique token.
 *
 * @return string A unique token.
 */
function generate_unique_token(): string {
  return bin2hex(random_bytes(32)); // Use random_bytes for cryptographically secure tokens
}


/**
 * Updates the reset token in the database for a user.
 *
 * @param int $user_id The ID of the user.
 * @param string $reset_token The reset token.
 */
function update_reset_token(int $user_id, string $reset_token) {
  // Replace with your database update query.
  // Example (using mysqli):
  // mysqli_query($db, "UPDATE users SET reset_token = '$reset_token' WHERE id = $user_id");
  // Placeholder
  //echo "Updating token for user $user_id with $reset_token";
}

/**
 * Deletes the reset token from the database.
 *
 * @param int $user_id The ID of the user.
 */
function delete_reset_token(int $user_id) {
  // Replace with your database delete query.
  // Example (using mysqli):
  // mysqli_query($db, "DELETE FROM users WHERE id = $user_id");
  // Placeholder
}


/**
 * Sends an email.
 *
 * @param string $to The recipient email address.
 * @param string $subject The email subject.
 * @param string $message The email body.
 * @param string $headers Email headers.
 * @return bool True on success, false on failure.
 */
function send_email(string $to, string $subject, string $message, string $headers) {
  // Replace this with your email sending logic (e.g., using PHPMailer, SwiftMailer, etc.)
  // This is a placeholder for demonstration purposes.
  // In a real application, you would use a dedicated email library.
  echo "Simulating sending email to: " . $to . " with subject: " . $subject . "
";
  // Example using a mock send_email function.
  return true;  //Simulate success.
}



// Example Usage (This is just for demonstration)
// $email = "test@example.com"; // Replace with a valid email
// if (forgot_password($email)) {
//   echo "Password reset email sent to " . $email;
// } else {
//   echo "Failed to send password reset email.";
// }

?>


<?php

// Database connection details (replace with your actual credentials)
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$database = 'your_database_name';

// Function to reset password
function forgotPassword($email, $newPassword) {
    // Connect to the database
    $conn = new mysqli($host, $username, $password, $database);

    // Check connection
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    // Hash the new password
    $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);

    // SQL query to update the user's password
    $sql = "UPDATE users SET password = '$hashedPassword' WHERE email = '$email'"; 

    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        return false;
    }

    // Close the connection
    $conn->close();
}

// Example usage (This would typically be from a form submission)
// Assuming the email and new password are received from a form
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $newPassword = $_POST["new_password"];

    if (!empty($email) && !empty($newPassword)) {
        if (forgotPassword($email, $newPassword)) {
            echo "Password reset successfully! Please check your email.";
        } else {
            echo "Failed to reset password.  Please try again.";
        }
    } else {
        echo "Please fill in all fields.";
    }
} else {
    // If not a POST request, display a form to initiate password reset.
    echo "<form method='post' action=''>";
    echo "<label for='email'>Email:</label><br>";
    echo "<input type='email' id='email' name='email' required><br><br>";

    echo "<label for='new_password'>New Password:</label><br>";
    echo "<input type='password' id='new_password' name='new_password' required><br><br>";

    echo "<input type='submit' value='Reset Password'>";
    echo "</form>";
}

?>


<?php

// Database configuration (replace with your actual values)
$db_host = "localhost";
$db_user = "your_db_user";
$db_password = "your_db_password";
$db_name = "your_db_name";

// Function to reset password
function forgotPassword($email, $db) {
    // 1. Generate a unique token
    $token = bin2hex(random_bytes(32));  //  Secure token generation

    // 2. Hash the token for security
    $hashed_token = password_hash($token, PASSWORD_DEFAULT);

    // 3. Store the token and user ID in the database
    $query = "INSERT INTO password_resets (user_email, token, hashed_token, created_at)
              VALUES ('$email', '$token', '$hashed_token', NOW())";

    if ($db->query($query) === TRUE) {
        // Email the user with a link to reset their password
        $reset_link = "http://yourdomain.com/reset_password?token=$token&user_id=$email"; // Customizable URL

        // Send the email (replace with your email sending logic)
        $to = $email;
        $subject = 'Password Reset';
        $message = "Click on the following link to reset your password: " . $reset_link;
        $headers = "From: your_email@example.com" . "\r
";

        mail($to, $subject, $message, $headers);

        return true; // Password reset request sent successfully
    } else {
        // Error inserting into the database
        return false;
    }
}

// Example Usage (This is just an example.  Don't directly execute this in a web environment)
// Assuming $db is your database connection object

// Example:  Reset password for user with email 'test@example.com'
// $success = forgotPassword('test@example.com', $db);

// if ($success) {
//     echo "Password reset request sent to test@example.com";
// } else {
//     echo "Error sending password reset request.";
// }

// *******************************************************************************
//  Database Table (Example -  Create this in your database)
// *******************************************************************************
// CREATE TABLE password_resets (
//     id INT AUTO_INCREMENT PRIMARY KEY,
//     user_email VARCHAR(255) NOT NULL,
//     token VARCHAR(255) NOT NULL UNIQUE,
//     hashed_token VARCHAR(255) NOT NULL,
//     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
// );


?>


<?php

// This is a simplified example.  In a real-world application,
// you would want to implement proper security measures 
// such as:
// 1.  Using a more robust password reset mechanism (e.g., token-based)
// 2.  Storing passwords securely (e.g., using bcrypt or Argon2)
// 3.  Implementing rate limiting to prevent brute-force attacks
// 4.  Logging all password reset attempts
// 5.  Adding two-factor authentication

/**
 * Resets a user's password.  This is a simplified example and should
 * be adapted for production use.
 *
 * @param string $email The email address of the user.
 * @param string $newPassword The new password for the user.
 * @param PDO $pdo  The database connection object.
 *
 * @return bool True if the password reset was successful, false otherwise.
 */
function forgotPassword(string $email, string $newPassword, PDO $pdo)
{
    // Validate email and password (basic validation - improve for production)
    if (empty($email) || empty($newPassword)) {
        return false;
    }

    // Check if the user exists
    $stmt = $pdo->prepare("SELECT id, email FROM users WHERE email = :email");
    $stmt->bindParam(':email', $email);
    $stmt->execute();
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        return false; // User not found
    }

    // Hash the new password (important for security!)
    $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

    // Update the user's password
    $stmt = $pdo->prepare("UPDATE users SET password = :password WHERE id = :id");
    $stmt->bindParam(':password', $hashedNewPassword);
    $stmt->bindParam(':id', $user['id']);
    $stmt->execute();

    if ($stmt->rowCount() === 0) {
        return false; // Failed to update password
    }

    return true; // Password reset successful
}


// Example Usage (For testing - DO NOT USE THIS DIRECTLY IN A PUBLIC WEBSITE)
// This example assumes you have a database connection called $pdo

// Create a dummy database connection for demonstration
$host = 'localhost';
$dbname = 'your_database_name';
$user = 'your_db_user';
$password = 'your_db_password';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8", $user, $password);
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// Example User data (replace with your actual database)
$userEmail = 'test@example.com'; // Replace with a valid test email
$newPassword = 'newPassword123';

if (forgotPassword($userEmail, $newPassword, $pdo)) {
    echo "Password reset successful for $userEmail!";
} else {
    echo "Password reset failed for $userEmail.";
}

// Close the database connection (important!)
$pdo = null;


?>


<?php

// Configuration - Replace with your actual database settings
define('DB_HOST', 'localhost');
define('DB_USER', 'your_db_user');
define('DB_PASSWORD', 'your_db_password');
define('DB_NAME', 'your_db_name');

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user.
 * @return bool True if the password was reset successfully, false otherwise.
 */
function forgot_password(string $email)
{
    // 1. Connect to the database
    $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

    if ($conn->connect_error) {
        // Handle connection error
        error_log("Database connection failed: " . $conn->connect_error); // Log the error for debugging
        return false;
    }

    // 2.  Check if the email exists in the 'users' table
    $sql = "SELECT id, email FROM users WHERE email = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $email);  // "s" indicates a string parameter

    if (!$stmt->execute()) {
        // Handle execution error
        error_log("Query execution failed: " . $stmt->error);
        $stmt->close();
        $conn->close();
        return false;
    }

    $result = $stmt->get_result();

    if (!$result) {
        // Handle result error
        error_log("Failed to get result from query");
        $stmt->close();
        $conn->close();
        return false;
    }

    if ($result->num_rows == 0) {
        // Email not found
        $stmt->close();
        $conn->close();
        return false;
    }

    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $resetToken = generate_unique_token(); // Generate a unique token for the reset
    $resetTime = time(); //  Store the timestamp for expiry

    // 3. Generate a unique token (e.g., using a random string)
    function generate_unique_token() {
        return bin2hex(random_bytes(32)); // Generate a 32-byte random string
    }

    // 4. Create a temporary table to store the reset token data
    $sql = "CREATE TEMPORARY TABLE IF NOT EXISTS reset_tokens (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT,
            token VARCHAR(255) NOT NULL,
            expiry_time INT UNSIGNED NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users(id)
    )";

    if (!$conn->query($sql)) {
        // Handle query error
        error_log("Failed to create temporary table: " . $conn->error);
        $stmt->close();
        $conn->close();
        return false;
    }



    // 5. Insert the token data into the temporary table
    $sql = "INSERT INTO reset_tokens (user_id, token, expiry_time) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iii", $userId, $resetToken, $resetTime);

    if (!$stmt->execute()) {
        // Handle execution error
        error_log("Failed to insert into reset_tokens table: " . $stmt->error);
        $stmt->close();
        $conn->close();
        return false;
    }


    // 6.  Email the user with the reset link
    $to = $email;
    $subject = 'Password Reset Link';
    $message = "Please click this link to reset your password: " .  $_SERVER['REQUEST_SCHEME'] . "://". $_SERVER['HTTP_HOST'] . "/reset_password?token=" . $resetToken; //Use the request scheme for secure link
    $headers = "From: your_email@example.com";  // Replace with your email

    if (mail($to, $subject, $message, $headers)) {
        // Email sent successfully
        $stmt->close();
        $conn->close();
        return true;
    } else {
        // Email sending failed
        error_log("Failed to send email");
        $stmt->close();
        $conn->close();
        return false;
    }
}


// Example Usage (For demonstration purposes - handle this carefully in a real application)
// Note:  This is just a placeholder.  You'll need to integrate this with your
//       authentication process and a proper form/validation mechanism.
// This example does *NOT* handle security best practices like preventing CSRF
// or sanitizing input.

// Simulate a request
// if (isset($_GET['email'])) {
//   $email = $_GET['email'];
//   if (forgot_password($email)) {
//       echo "Password reset email sent to " . $email;
//   } else {
//       echo "Error resetting password for " . $email;
//   }
// }


?>


<?php

/**
 * Forgets a user's password by sending a password reset link.
 *
 * @param string $email The user's email address.
 * @param string $password_reset_token A unique token for the reset link.
 * @param string $secret_key The secret key used to generate the token.  This should be kept secret.
 * @param PDO $pdo The database connection object.
 *
 * @return bool True if the reset link was successfully sent, false otherwise.
 */
function forgot_password(string $email, string $password_reset_token, string $secret_key, PDO $pdo): bool
{
    // 1. Generate a random token
    $token = generate_password_reset_token($secret_key, $pdo); // Use helper function for token generation

    // 2. Insert the token into the database for the user.
    $sql = "INSERT INTO password_resets (user_email, password_reset_token, expiry_timestamp)
            VALUES (:email, :token, :expiry)";

    try {
        $stmt = $pdo->prepare($sql);
        $stmt->bindParam(':email', $email);
        $stmt->bindParam(':token', $token);
        $stmt->bindParam(':expiry_timestamp', time() + 3600);  // Token expires in 1 hour (3600 seconds)
        $stmt->execute();
        return true;

    } catch (PDOException $e) {
        // Handle database errors - Log or display a user-friendly message
        error_log("Error creating password reset link: " . $e->getMessage());
        return false;
    }
}


/**
 * Helper function to generate a password reset token.
 *
 * @param string $secret_key The secret key.
 * @param PDO $pdo The database connection object.
 *
 * @return string A unique token.
 */
function generate_password_reset_token(string $secret_key, PDO $pdo): string
{
    $token = bin2hex(random_bytes(32));  // Generate a 32-byte (256-bit) random token
    $sql = "SELECT token FROM password_resets WHERE token = :token";
    try {
        $stmt = $pdo->prepare($sql);
        $stmt->bindParam(':token', $token, PDO::PARAM_STR);
        $stmt->execute();

        if ($stmt->rowCount() > 0) {
            // Token already exists - generate a new one
            return generate_password_reset_token($secret_key, $pdo);
        }
        return $token;

    } catch (PDOException $e) {
        error_log("Error generating password reset token: " . $e->getMessage());
        return ''; // Or throw an exception, depending on your error handling strategy
    }
}


// Example usage (Illustrative -  Replace with your database setup and security practices)
//
// $pdo = new PDO("mysql:host=localhost;dbname=your_database", "your_user", "your_password");
// $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
//
// $email = "test@example.com"; // Replace with the user's email
// $token = generate_password_reset_token("your_super_secret_key", $pdo);
//
// if ($token) {
//     if (forgot_password($email, $token, "your_super_secret_key", $pdo)) {
//         echo "Password reset email sent to " . $email . " with a link expiring in 1 hour.";
//     } else {
//         echo "Failed to create password reset link.";
//     }
// } else {
//     echo "Failed to generate password reset token.";
// }

?>


<?php

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_db_name";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get the email from the form
  $email = trim($_POST["email"]);

  // Validate the email format
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error = "Invalid email format.";
  } else {
    //  *** IMPORTANT SECURITY NOTE: ***
    //  In a production environment, you MUST hash the password before
    //  storing it in the database.  This example uses a simple string for demonstration.
    //  Never store plain text passwords.

    // Simulate password reset process (replace with actual database query)
    $reset_token = generate_unique_token(); // Generates a secure random string
    $sql = "UPDATE users SET reset_token = '$reset_token' WHERE email = '$email'";

    // Execute the query
    $result = mysqli_query($conn, $sql);

    if (mysqli_affected_rows($conn) > 0) {
      // Send an email with a reset link
      $subject = "Password Reset Link";
      $to = $email;
      $link = "http://yourwebsite.com/reset_password.php?token=$reset_token"; // Replace with your website URL
      $message = "Click the link above to reset your password.";
      $headers = "From: your_email@example.com";
      mail($to, $message, $headers);

      $success = "Password reset link has been sent to your email address.";
    } else {
      $error = "An error occurred while processing your request.";
    }
  }
}

// Function to generate a unique token
function generate_unique_token() {
  return bin2hex(random_bytes(32));
}


// Start the HTML page
?>
<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php } ?>


  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email">
    <button type="submit">Reset Password</button>
  </form>

  <p>Don't have an account? <a href="register.php">Sign Up</a></p>  <!-- Link to registration page -->


</body>
</html>


<?php

/**
 * Forgets the password for a user.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password to set for the user.
 * @param PDO $pdo The PDO database connection object.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $newPassword, PDO $pdo) {
  // 1. Sanitize and Validate Inputs (CRITICAL SECURITY STEP)
  $email = trim($email); // Remove leading/trailing whitespace
  $newPassword = trim($newPassword);

  if (empty($email) || empty($newPassword)) {
    return false; // Required fields are missing
  }

  // Hash the new password before storing it
  $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

  // 2. SQL Query
  $sql = "UPDATE users SET password = :password, last_password_reset = NOW() WHERE email = :email";
  $stmt = $pdo->prepare($sql);
  $stmt->bindParam(':password', $hashedNewPassword);
  $stmt->bindParam(':email', $email);

  // 3. Execute the Query
  if ($stmt->execute()) {
    return true; // Password reset successful
  } else {
    // Handle query errors (e.g., user not found)
    error_log("Error resetting password for user: " . $email); // Log the error for debugging
    return false;
  }
}

// Example Usage (Illustrative - Replace with your actual database connection)
//  Important: This is just an example.  You *MUST* adapt it
//  to your specific database structure and connection details.

//  This example assumes you have a 'users' table with columns:
//  - id (int, primary key)
//  - email (string, UNIQUE)
//  - password (string, hashed)
//  - last_password_reset (datetime)


//  Replace this with your actual database connection
$dbHost = 'localhost';
$dbName = 'your_database_name';
$dbUser = 'your_database_user';
$dbPass = 'your_database_password';

try {
  $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName;charset=utf8mb4", $dbUser, $dbPass);
  $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
} catch (PDOException $e) {
  die("Database connection failed: " . $e->getMessage());
}

// Example user details
$userEmail = 'testuser@example.com'; // Replace with the user's email
$newPassword = 'NewSecurePassword123';   // Replace with a new password

// Call the function to reset the password
if (forgotPassword($userEmail, $newPassword, $pdo)) {
  echo "Password reset successfully for user: " . $userEmail . "
";
} else {
  echo "Password reset failed for user: " . $userEmail . "
";
}

// Close the database connection (Good practice)
$pdo = null;
?>


<?php

// Assume you have a database connection established here.
// This is just a placeholder, replace with your actual connection.
// Example:
// $db = new PDO("mysql:host=localhost;dbname=your_database_name", "username", "password");

/**
 * Resets a user's password after a password reset request.
 *
 * @param string $email The user's email address.
 * @return bool True if the password was reset successfully, false otherwise.
 */
function forgotPassword(string $email) {
  // 1. Verify email exists
  $stmt = $db->prepare("SELECT id FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    // User not found
    return false;
  }

  $userId = $user['id'];

  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32)); // Generate a secure random token

  // 3. Store the token in the database associated with the user
  $stmt = $db->prepare("UPDATE users SET password_reset_token = ?, password_reset_token_expiry = ? WHERE email = ?");
  $stmt->execute([$token, time() + 3600, $email]); // Expires in 1 hour.  Adjust as needed.


  // 4.  Send password reset email.  This part is crucial.  The email *must* contain the token.
  $resetLink = "https://yourwebsite.com/reset-password?token=" . $token; // Replace with your actual domain
  // ... (Email sending logic here - see example email code below)


  return true;
}


/**
 *  Example Email Sending Logic (Replace with your actual email sending library)
 */
function sendPasswordResetEmail($to, $token, $resetLink) {
  // This is a placeholder.  Use a proper email library like PHPMailer.
  // Example:  https://github.com/PHPMailer/PHPMailer

  $subject = "Password Reset Request";
  $message = "Please click the link below to reset your password:
" . $resetLink;
  $headers = "From: yourwebsite@example.com
";

  // Example using PHP's mail function (less robust, but simple for demonstration)
  mail($to, $subject, $message, $headers);
}



// Example Usage:
// Assuming you have the $db connection established.

//  To initiate the password reset:
//  $email = "user@example.com";
//  if (forgotPassword($email)) {
//    echo "Password reset email sent to " . $email;
//  } else {
//    echo "User not found or password reset failed.";
//  }



?>


<?php

/**
 * Resets a user's password after a forgotten password request.
 *
 * @param string $email The email address of the user requesting the reset.
 * @param string $password The new password for the user.
 * @param string $new_password_confirmation The confirmation of the new password.
 * @return bool True on success, false on failure.
 */
function resetPassword(string $email, string $password, string $new_password_confirmation) {
  // 1. Input Validation and Sanitization - VERY IMPORTANT
  if (empty($email) || empty($password) || empty($new_password_confirmation)) {
    return false; // Require all fields
  }

  // Basic email validation (you can make this more robust)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false; // Invalid email format
  }

  // Password complexity requirements (Example - Customize as needed)
  if (strlen($password) < 8) {
    return false; // Minimum password length
  }

  if (!preg_match('/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+{}\[\]*?\/<>\.])/', $password)) {
    return false; // Must contain at least one lowercase letter, uppercase letter, number, and special character
  }


  // 2. Database Interaction (Example - Adapt to your database)
  // Assuming you have a 'users' table with 'id', 'email', and 'password' columns

  try {
    // Connect to your database
    // $db = new PDO("mysql:host=localhost;dbname=your_database_name", "username", "password");

    // Prepare the SQL query
    // $stmt = $db->prepare("UPDATE users SET password = :password WHERE email = :email");
    // $stmt->bindParam(':password', $password);
    // $stmt->bindParam(':email', $email);

    // Execute the query
    // $result = $stmt->execute();

    // Check for errors
    // if ($result) {
    //   // Reset password successful
    //   return true;
    // } else {
    //   // Handle database error - logging is crucial here!
    //   error_log("Error resetting password for " . $email . ": " . print_r($db->errorInfo(), true));
    //   return false;
    // }

  } catch (PDOException $e) {
    // Handle database connection or query errors - Logging is crucial here!
    error_log("Database error resetting password for " . $email . ": " . $e->getMessage());
    return false;
  }
}


/**
 * Generates a unique, secure reset token.
 *
 * @return string A unique reset token.
 */
function generateResetToken() {
    return bin2hex(random_bytes(32));
}



/**
 * Example Usage (for testing purposes - not part of the core function)
 */

//  Example usage - NOT recommended for production
//  This is just for demonstration and testing.  Don't use this directly in a web application.

// $email = "test@example.com";
// $newPassword = "MyNewPassword123!";
// $token = generateResetToken();

// if (resetPassword($email, $newPassword, $newPassword)) {
//   echo "Password reset successful for " . $email . "!  Check your email for instructions.";
// } else {
//   echo "Password reset failed for " . $email . ".  Please try again.";
// }
?>


<?php

// Assuming you have a database connection established (e.g., $db)
// And a 'users' table with a 'email' column

// Function to handle password reset requests
function forgotPassword($email) {
  // 1. Validate Email (Important for security!)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if the email exists in the database
  $query = "SELECT id, password_reset_token, expiry_timestamp FROM users WHERE email = ?";
  $stmt = $db->prepare($query); // Assuming $db is your database connection
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    return "Email not found.";
  }

  // 3. Generate a unique password reset token
  $token = bin2hex(random_bytes(32)); // Generate a secure random token

  // 4. Store the token in the database for this user
  $query = "INSERT INTO password_resets (user_id, token, expiry_timestamp) VALUES (?, ?, ?)";
  $stmt = $db->prepare($query);
  $stmt->execute([$user['id'], $token, time() + (60 * 60 * 24)]); // Token valid for 24 hours

  // 5. Send the password reset email (implementation omitted for brevity)
  //  - This would involve sending an email with a link containing the token
  //    (e.g.,  https://yourwebsite.com/reset_password.php?token=$token)
  //  -  Use a library or function for sending emails (e.g., PHPMailer)

  return "Password reset email sent.  Please check your inbox.";

}

// Example usage (for demonstration only - don't expose this in a production environment!)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  $email = $_POST['email'];
  $reset_message = forgotPassword($email);
  echo "<p>" . $reset_message . "</p>";
}
?>

<!-- HTML Form to submit email for reset -->
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
  <label for="email">Email:</label>
  <input type="email" id="email" name="email" required>
  <button type="submit">Reset Password</button>
</form>


<?php

// Database connection details (replace with your actual details)
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_username";
$db_password = "your_password";

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email)
{
    // 1. Check if the email exists
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
        error_log("Database connection failed: " . $conn->connect_error); // Log the error for debugging
        return false;
    }

    $query = "SELECT id, email FROM users WHERE email = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("s", $email); // "s" indicates a string parameter

    if (!$stmt->execute()) {
        error_log("Query execution failed: " . $stmt->error); // Log the error
        $stmt->close();
        $conn->close();
        return false;
    }

    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        error_log("User with email $email not found."); // Log the user not found
        $stmt->close();
        $conn->close();
        return false;
    }

    $user = $result->fetch_assoc();
    $user_id = $user['id'];
    $user_email = $user['email'];

    // 2. Generate a unique token
    $token = bin2hex(random_bytes(32)); // Use a cryptographically secure random string

    // 3. Store the token and user ID in the database (using a temporary table - recommended for security)
    $conn->query("CREATE TEMPORARY TABLE IF NOT EXISTS reset_tokens (user_id INT, token VARCHAR(32))");
    $stmt = $conn->prepare("INSERT INTO reset_tokens (user_id, token) VALUES (?, ?)");
    $stmt->bind_param("is", $user_id, $token);
    if (!$stmt->execute()) {
        error_log("Error inserting into reset_tokens: " . $stmt->error);
        $stmt->close();
        $conn->close();
        return false;
    }
    $stmt->close();


    // 4. Send the password reset email
    $to = $user_email;
    $subject = "Password Reset";
    $message = "Please click the following link to reset your password: " . $_SERVER['REQUEST_SCHEME'] . "://yourdomain.com/reset_password?token=" . $token; // Replace yourdomain.com with your actual domain
    $headers = "From: your_email@example.com";  // Replace with your sender email

    mail($to, $message, $headers); //  Uses PHP's mail function.  Consider using a more robust email sending library.


    // 5. Close the connection
    $conn->close();

    return true;
}

// Example usage (for testing - DON'T use this in production without proper validation!)
// $email = "test@example.com"; // Replace with a valid email address to test.
// if (forgot_password($email)) {
//     echo "Password reset email sent to $email.";
// } else {
//     echo "Password reset failed.";
// }

?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and you have a table 'users' with columns like 'id', 'email', and 'password_hash'

// Function to handle forgotten password requests
function forgot_password($email) {
  // 1. Validate the email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if the user exists
  $stmt = $db->prepare("SELECT id, email FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    return "User with this email does not exist.";
  }

  // 3. Generate a unique token and store it in the database
  $token = bin2hex(random_bytes(32));  // Generate a random token
  $stmt = $db->prepare("INSERT INTO password_resets (user_id, token, created_at) VALUES (?, ?, NOW())");
  $stmt->execute([$user['id'], $token]);

  // 4. Send an email with a link to reset the password
  $reset_link = "https://yourwebsite.com/reset_password?token=" . urlencode($token);
  $subject = "Password Reset Link";
  $message = "Click the link above to reset your password: " . $reset_link;
  $headers = "From: Your Website <noreply@yourwebsite.com>";
  mail($email, $subject, $message, $headers);

  return "Password reset email sent to $email.";
}


// Example usage (This part is just for demonstration)
// In a real application, this would be handled by a form submission
// and would be part of a larger application logic.

//  Assume $email is the email address provided by the user
//  $reset_result = forgot_password($email);
//  echo $reset_result;
?>


<?php

// **Important:**  This is a simplified example for demonstration purposes only.
// In a real-world application, you **MUST** implement robust security measures 
// such as hashing passwords, using secure communication (HTTPS), and preventing brute-force attacks.

// 1. Database Connection (Replace with your actual database credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_username';
$db_password = 'your_password';

// 2.  Helper Function to Generate a Unique Token
function generateUniqueToken() {
    return bin2hex(random_bytes(32));
}

// 3. Forgot Password Function
function forgotPassword($email, $token) {
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // 2. Check if the email exists in the user database
    $query = "SELECT id, username FROM users WHERE email = '$email'";
    $result = mysqli_query($db_host, $query);

    if (mysqli_num_rows($result) == 0) {
        return "User not found.";
    }

    // 3.  Generate a Token and Store it in the Database
    $generated_token = generateUniqueToken();
    $query = "UPDATE users SET reset_token = '$generated_token' WHERE email = '$email'";
    mysqli_query($db_host, $query);

    // 4.  Send an Email (Replace with your email sending logic)
    $to = $email;
    $subject = 'Password Reset';
    $message = "Please use the following link to reset your password: " . '<a href="' . $_SERVER['PHP_SELF'] . '?token=' . $generated_token . '"' . ' >Reset Password</a>';  // Use the same page for link
    $headers = "From: your_email@example.com"; // Replace with your email address

    mail($to, $message, $headers);

    return "Password reset link has been sent to your email.";
}


// **Example Usage (for testing - do NOT expose this in a production environment)**
// Assuming you've got a form to submit email and token.
// You'd typically handle this in a web form.

// Example - Simulate receiving email and token
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $token = $_POST["token"];

    if (empty($email) || empty($token)) {
      echo "Error: Email and Token are required.";
    } else {
        $result = forgotPassword($email, $token);
        echo $result;
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <br><br>
        <input type="submit" value="Reset Password">
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established
// (e.g., using mysqli or PDO)
// and a table named 'users' with 'email' and 'password' columns.

// Function to handle the forgot password process
function forgot_password($email, $new_password, $db_connection) {
    // 1. Check if the email exists in the database
    $query = "SELECT id, email FROM users WHERE email = ?";
    $stmt = $db_connection->prepare($query);
    $stmt->bind_param("s", $email);  // "s" indicates a string parameter
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        // Email exists, proceed to reset password

        // 2. Hash the new password (IMPORTANT: Never store passwords in plain text!)
        $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

        // 3. Update the password in the database
        $query = "UPDATE users SET password = ? WHERE email = ?";
        $stmt = $db_connection->prepare($query);
        $stmt->bind_param("ss", $hashed_password, $email);
        $stmt->execute();

        if ($stmt->affected_rows > 0) {
            // Password updated successfully
            return true;
        } else {
            // Something went wrong while updating the password
            return false;
        }

    } else {
        // Email does not exist
        return false;
    }

    // Always close the statement
    $stmt->close();
}

// --- Example Usage (Illustrative) ---

//  (Remember to replace with your actual database connection details)
//  $db_connection = new mysqli("localhost", "username", "password", "database_name");
//  if ($db_connection->connect_error) {
//     die("Connection failed: " . $db_connection->connect_error);
//  }


// Example 1: Successful password reset
// $email = "test@example.com";
// $new_password = "new_secure_password";
// $success = forgot_password($email, $new_password, $db_connection);
// if ($success) {
//    echo "Password reset successful for " . $email . "
";
// } else {
//    echo "Password reset failed for " . $email . "
";
// }


// Example 2: Email not found
// $email = "nonexistent@example.com";
// $new_password = "some_password";
// $success = forgot_password($email, $new_password, $db_connection);
// if ($success) {
//    echo "Password reset successful for " . $email . "
";
// } else {
//    echo "Password reset failed for " . $email . " (Email not found)
";
// }

// Close the database connection (VERY IMPORTANT!)
// $db_connection->close();

?>


<?php

// Assuming you have a database connection established and named $db

/**
 * Forgets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset email was sent, false otherwise.
 */
function forgotPassword(string $email): bool
{
  // 1. Validate Email (Basic)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email format provided: " . $email); // Log for debugging
    return false;
  }

  // 2. Check if the user exists
  $user = getUserByEmail($email); // Implement this function
  if (!$user) {
    error_log("User not found for email: " . $email);
    return false;
  }

  // 3. Generate a unique token (for security)
  $token = generateUniqueToken(); // Implement this function

  // 4. Store the token and expiration date in the database
  // (This is where you'd typically update the user record)
  updateTokenForUser($user['id'], $token, time() + (24 * 60 * 60)); // Token expires in 24 hours

  // 5. Send the password reset email
  $subject = "Password Reset Request";
  $message = "Click the following link to reset your password: " . $_SERVER['PHP_SELF'] . "?token=$token"; // Use $_SERVER for security (more on this below)
  $headers = "From: your-website@example.com\r
";
  $result = sendEmail($email, $subject, $message, $headers); // Implement this function

  return $result;
}


/**
 *  Helper function to get user by email
 *  @param string $email
 *  @return array|null  User object or null if not found
 */
function getUserByEmail(string $email): ?array {
  // Replace this with your actual database query.
  // This is a placeholder to illustrate the concept.
  // Use prepared statements to prevent SQL injection.

  // Example using MySQLi
  $db = new mysqli("your_db_host", "your_db_user", "your_db_password", "your_db_name");
  if ($db->connect_error) {
    error_log("Database connection error: " . $db->connect_error);
    return null;
  }

  $result = $db->query("SELECT * FROM users WHERE email = '$email'");

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    return $user;
  }
  return null;
}


/**
 * Generates a unique token.
 *
 * @return string A unique token.
 */
function generateUniqueToken(): string
{
  return bin2hex(random_bytes(32)); // Generate a 32-byte random string
}

/**
 * Sends an email.  This is a placeholder - replace with your email sending implementation.
 *
 * @param string $to      The recipient's email address.
 * @param string $subject The email subject.
 * @param string $body    The email body.
 * @param string $headers The email headers.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function sendEmail(string $to, string $subject, string $body, string $headers): bool
{
  // This is a placeholder.  Replace with your actual email sending implementation
  // using a library like PHPMailer or SwiftMailer.

  // Example:  Echo the email for now
  error_log("Sending email to: " . $to . " with subject: " . $subject);
  error_log("Email body: " . $body);

  return true; // Indicate success (in a real implementation, check for errors)
}


/**
 *  Update the user's token in the database.
 *  @param int $userId
 *  @param string $token
 *  @param int $expirationTime
 *
 */
function updateTokenForUser(int $userId, string $token, int $expirationTime): void {
    // This is a placeholder - replace with your actual database update logic.
    // Use prepared statements to prevent SQL injection.
    // Example using MySQLi:
    $db = new mysqli("your_db_host", "your_db_user", "your_db_password", "your_db_name");
    if ($db->connect_error) {
        error_log("Database connection error: " . $db->connect_error);
        return;
    }

    $sql = "UPDATE users SET token = ?, expiration = ? WHERE id = ?";
    if ($db->query($sql, array($token, $expirationTime, $userId)) === false) {
        error_log("Query failed: " . $db->error);
    }
    $db->close();
}

?>


<?php

/**
 * Forgot Password Function
 *
 * This function allows a user to reset their password.
 * It generates a unique token, stores it in the database,
 * and sends an email to the user with a link to reset their password.
 *
 * @param string $email The email address of the user.
 * @return bool True if email sent successfully, false otherwise.
 */
function forgot_password(string $email)
{
  // 1. Generate a unique token
  $token = bin2hex(random_bytes(32));

  // 2.  Create a password reset request
  $password_reset_request = new PasswordResetRequest();
  $password_reset_request->user_id = $userId; //Assuming you have a way to get the user ID based on the email
  $password_reset_request->token = $token;
  $password_reset_request->expiry_timestamp = time() + 3600; // Token expires in 1 hour

  // 3. Save the password reset request to the database
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_db_user', 'your_db_password'); // Replace with your database credentials
  try {
    $stmt = $db->prepare("INSERT INTO password_resets (user_id, token, expiry_timestamp) VALUES (?, ?, ?)");
    $stmt->execute([$userId, $token, $password_reset_request->expiry_timestamp]);
  } catch (PDOException $e) {
    // Handle the exception (e.g., log the error, display a message)
    error_log("Error creating password reset request: " . $e->getMessage());
    return false;
  }

  // 4.  Send an email with the password reset link
  $email_content = $emailContent = '
  <html>
  <body>
  <h1>Password Reset</h1>
  <p>Click on the following link to reset your password:</p>
  <a href="' . $_SERVER['PHP_SELF'] . '?reset=' . urlencode($token) . '" >Reset Password</a>
  <p>This link will expire in 1 hour.</p>
  </body>
  </html>';

  $subject = 'Password Reset';
  $headers = 'From: your_email@example.com' . "\r
";
  mail($email, $email_content, $headers);

  return true;
}


//Example Usage (inside your PHP script)
// $email = 'user@example.com'; // The email address to send the reset link to.
// if (forgot_password($email)) {
//     echo "Password reset email sent to $email.";
// } else {
//     echo "Failed to send password reset email.";
// }

// --------------------
// PasswordResetRequest Class (for better organization and clarity)
class PasswordResetRequest {
    public $user_id;
    public $token;
    public $expiry_timestamp;
}
?>


<?php

/**
 *  Forgot Password Function
 *
 *  This function sends an email with a link to reset the user's password.
 *
 *  @param string $email The email address of the user requesting a password reset.
 *  @param string $baseUrl The base URL of your website or application.
 *  @param string $resetToken  A unique token generated to secure the password reset link.
 *  @param int $expirySeconds The number of seconds the token is valid for.
 *  @return bool True on success, false on failure.
 */
function forgot_password(string $email, string $baseUrl, string $resetToken, int $expirySeconds = 3600) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email format provided: " . $email); // Log for debugging
    return false;
  }

  // 2. Generate a unique token (if you don't have one already)
  //   This is crucial for security.
  if(empty($resetToken)) {
    $resetToken = bin2hex(random_bytes(32)); // Generate a secure random token
  }
  
  // 3.  Create the Password Reset Link
  $resetLink = $baseUrl . "/reset_password?token=" . urlencode($resetToken);

  // 4.  Prepare the Email Content
  $to = $email;
  $subject = 'Password Reset';
  $message = "Click on the following link to reset your password:
" . $resetLink . "

This link will expire in " . $expirySeconds . " seconds.";
  $headers = "From: Your Website <noreply@yourwebsite.com>"; // Replace with your actual noreply email

  // 5.  Send the Email
  if (mail($to, $message, $headers)) {
    return true;
  } else {
    error_log("Failed to send password reset email to: " . $email);  // Log email sending failure
    return false;
  }
}

// Example Usage (Demonstration - Replace with your actual details)
// $email = "test@example.com";
// $baseUrl = "http://yourwebsite.com";
// $resetToken = "some_unique_token"; // Optionally pass a token if you already generated one.
// $expirySeconds = 600;

// if (forgot_password($email, $baseUrl, $resetToken, $expirySeconds)) {
//   echo "Password reset email sent successfully!";
// } else {
//   echo "Failed to send password reset email.";
// }


/**
 *  Reset Password Function (This function would be used to handle the password reset process
 *  after the user clicks the link.)
 *
 *  This is a placeholder function, you'll need to implement the actual password
 *  reset logic (e.g., update the password in the database).
 */

/**
 *  Example Reset Password Function
 *
 *  @param string $token The password reset token.
 *  @param string $newPassword The new password the user wants to set.
 *
 *  @return bool True on success, false on failure.
 */
function reset_password(string $token, string $newPassword) {
    //  Implement your password reset logic here.
    //  This would typically involve:
    //  1.  Verifying the token's validity (ensure it's not expired, etc.).
    //  2.  Updating the password in the database for the user associated with the token.
    //  3.  Deleting the token after successfully resetting the password.

    // Placeholder for demonstration
    return true; // Simulate success
}
?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Handles the forgot password functionality.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset email was sent, false otherwise.
 */
function forgot_password(string $email)
{
    // 1. Validate Email (Important!)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided: " . $email);  // Log for debugging
        return false;
    }

    // 2. Check if the user exists
    $user = getUserByEmail($email); // Implement this function

    if (!$user) {
        error_log("User not found with email: " . $email);
        return false;
    }

    // 3. Generate a unique, secure token
    $token = generate_unique_token(); // Implement this function

    // 4. Store the token and expiry date in the database for this user.
    //   This is crucial for security.
    updateTokenForUser($user->id, $token, time() + (3600 * 24));  // Token expires in 24 hours.

    // 5. Send the password reset email
    $subject = "Password Reset Request";
    $message = "Please click the following link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . "?reset=" . urlencode($token) . "'>Reset Password</a>";
    $headers = "From: Your Website <admin@yourwebsite.com>"; // Replace with your email
    
    if (send_email($email, $subject, $message, $headers)) {
        return true;
    } else {
        error_log("Failed to send password reset email to: " . $email);
        return false;
    }
}

/**
 *  Placeholder function for retrieving user by email.  Implement this
 *  to fetch the user from your database.
 *
 * @param string $email The email address to search for.
 * @return User|null The user object if found, null otherwise.
 */
function getUserByEmail(string $email): ?User {
    // Replace this with your database query logic.
    // This is just a placeholder.  You MUST adapt it.
    // Example (using a hypothetical User class):
    // $db = get_database_connection(); // Assuming you have this
    // $result = $db->query("SELECT * FROM users WHERE email = '$email'");
    // if ($result->num_rows > 0) {
    //     $row = $result->fetch_assoc();
    //     return new User($row['id'], $row['email'], $row['password'], $row['username']);
    // }
    // return null;
    return null; // Placeholder.  Always return null if not found.
}

/**
 *  Placeholder function for generating a unique token.  Implement this
 *  to generate a secure and unique token.
 *
 * @return string The generated token.
 */
function generate_unique_token()
{
    return bin2hex(random_bytes(32)); // Or use a more sophisticated token generation method.
}

/**
 *  Placeholder function for updating the token and expiry for a user.  Implement this
 *  to store the token and expiry in the database.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token.
 * @param int $expiryTimestamp The Unix timestamp for expiry.
 */
function updateTokenForUser(int $userId, string $token, int $expiryTimestamp)
{
    // Replace this with your database update logic.
    // Example:
    // $db = get_database_connection();
    // $sql = "UPDATE users SET token = '$token', expiry = '$expiryTimestamp' WHERE id = $userId";
    // $result = $db->query($sql);
    // if (!$result) {
    //     error_log("Failed to update token for user: " . $userId);
    // }
}

/**
 * Placeholder function to send an email.  Implement this to connect to
 * your mail server and send emails.
 *
 * @param string $to The recipient email address.
 * @param string $subject The email subject.
 * @param string $message The email body.
 * @param string $headers The email headers.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function send_email(string $to, string $subject, string $message, string $headers)
{
    // Replace this with your email sending logic.
    // Example using a hypothetical mail function:
    // return mail($to, $subject, $message, $headers);
    return false; // Placeholder
}


// Example Usage:
$email = "test@example.com"; // Replace with a valid email address
if (forgot_password($email)) {
    echo "Password reset email has been sent to " . $email;
} else {
    echo "Failed to process password reset request for " . $email;
}

?>


<?php

// Replace with your database connection details
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_username";
$db_password = "your_password";

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if the password was reset successfully, false otherwise.
 */
function forgot_password($email) {
  // 1. Validate Input
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email address provided."); // Log for debugging
    return false;
  }

  // 2. Generate a Unique Token
  $token = bin2hex(random_bytes(32)); 

  // 3. Store the Token and User ID in a Temporary Table (For Security)
  //    This prevents users from guessing or guessing tokens.
  $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_password);
  $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

  try {
    $stmt = $pdo->prepare("SELECT id FROM users WHERE email = :email");
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    $stmt->execute();

    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
      error_log("User with email $email not found.");
      return false;
    }

    // Prepare to insert data
    $insert_stmt = $pdo->prepare("INSERT INTO password_resets (user_id, token, expiry_timestamp) VALUES (:user_id, :token, :expiry)");
    $insert_stmt->bindParam(':user_id', $user['id'], PDO::PARAM_INT);
    $insert_stmt->bindParam(':token', $token, PDO::PARAM_STR);
    $insert_stmt->bindParam(':expiry', time() + (24 * 60 * 60), PDO::PARAM_INT); // Token expires in 24 hours
    $insert_stmt->execute();

    // 4. Send the Reset Link
    $reset_link = "http://yourwebsite.com/reset_password?token=$token&user_id=$user['id']"; // Replace with your website URL
    $subject = "Password Reset Link";
    $message = "Click this link to reset your password: " . $reset_link;
    $headers = "From: your_email@example.com\r
";

    if (mail("user@example.com", $message, $headers)) { // Replace with user's email
      return true;
    } else {
      error_log("Failed to send email for password reset.");
      // Optionally, you could delete the temporary record here to avoid unnecessary data
      // $delete_stmt = $pdo->prepare("DELETE FROM password_resets WHERE user_id = :user_id AND token = :token");
      // $delete_stmt->bindParam(':user_id', $user['id'], PDO::PARAM_INT);
      // $delete_stmt->bindParam(':token', $token, PDO::PARAM_STR);
      // $delete_stmt->execute();
      return false;
    }

  } catch (PDOException $e) {
    error_log("PDO Error: " . $e->getMessage()); // Log the error
    return false;
  } finally {
    $pdo = null; // Close the connection
  }
}


// Example Usage (For Testing - Do not use this directly in a public-facing application)
// $email = "test@example.com";
// if (forgot_password($email)) {
//   echo "Password reset email has been sent to $email.";
// } else {
//   echo "Failed to reset password for $email.";
// }


?>


<?php

// This is a simplified example and should be used with caution in a production environment.
// It's highly recommended to use a more robust and secure solution like a dedicated password reset service.

// --- Configuration (IMPORTANT:  Replace with your actual database settings!) ---
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';

// ---  Helper functions (Improve security and readability) ---
function sanitize_input($data) {
  // Basic sanitation - enhance as needed for your application
  $data = trim($data);
  $data = stripslashes($data);
  $data = htmlspecialchars($data);
  return $data;
}

function send_password_reset_email($email, $token) {
    //  Replace this with your actual email sending logic
    //  This example just prints the email to the console.

    // You'll need to implement a proper email sending mechanism here.
    // This often involves using a library or API.

    // Example:
    $subject = 'Password Reset - Your Account';
    $message = "Click this link to reset your password: " . '<a href="?reset_token=' . $token . '" target="_blank">Reset Password</a>';
    $headers = 'From: your_email@example.com' . "\r
";

    // In a real application, you'd use:
    // mail($email, $subject, $message, $headers);

    echo "Simulated email sent to: " . $email . " with token: " . $token . "
";
}



/**
 * Forgot Password Function
 *
 * This function handles the forgot password request.
 *
 * @param string $email The user's email address.
 * @return bool True if the process initiated successfully, false otherwise.
 */
function forgot_password($email) {
    // 1. Validate Email (Basic)
    $email = sanitize_input($email);
    if (empty($email)) {
        return false; // Invalid email
    }

    // 2. Check if user exists
    $query = "SELECT id, password_hash, email FROM users WHERE email = '$email'";
    $result = mysqli_query($GLOBALS['db_host'], $query); // Use mysqli_query and pass the database host.

    if ($result) {
        $row = mysqli_fetch_assoc($result);
        if ($row) {
            // User exists, generate a token and send a reset email
            $reset_token = bin2hex(random_bytes(32)); // Generate a secure, random token
            $query = "UPDATE users SET reset_token = '$reset_token' WHERE email = '$email'";
            $update_result = mysqli_query($GLOBALS['db_host'], $query);

            if ($update_result) {
                send_password_reset_email($email, $reset_token);
                return true; // Process initiated successfully
            } else {
                // Error updating the database. Log this!
                error_log("Error updating user: " . mysqli_error($GLOBALS['db_host']));
                return false;
            }

        } else {
            // User not found
            return false;
        }
    } else {
        // Database query error
        error_log("Database error: " . mysqli_error($GLOBALS['db_host']));
        return false;
    }
}



// --- Example Usage (For testing - DO NOT USE DIRECTLY IN A PRODUCTION APPLICATION) ---
//  Remember to replace with a real email sending mechanism.
if (isset($_POST['forgot_email'])) {
    $email = sanitize_input($_POST['forgot_email']); // Sanitize the input before use.

    if (forgot_password($email)) {
        echo "Password reset email sent to " . $email . ".  Check your inbox!";
    } else {
        echo "An error occurred while processing your request.";
    }
}
?>


<?php

/**
 * Forgot Password Function
 *
 * This function handles the password reset process.  It generates a unique,
 * time-limited token, sends an email to the user with a link to reset their
 * password, and stores the token and expiration date in the database.
 *
 * @param string $email The user's email address.
 * @param string $resetUrl  The base URL for the reset password page.
 * @param string $secretKey  A secret key used for signing the token (important for security).
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email, string $resetUrl, string $secretKey) {
  // 1. Generate a Unique Token
  $token = bin2hex(random_bytes(32));

  // 2.  Set Expiration Time -  Example: 1 hour
  $expirationTime = time() + 3600; // Add 1 hour to the current timestamp

  // 3. Hash the Token with the Secret Key
  $hashedToken = hash_file('sha256', $token); // Use a strong hashing algorithm

  // 4. Store the Token and Expiration Time in the Database
  $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_db_user", "your_db_password"); // Replace with your database credentials.  Ensure PDO is properly configured.
  try {
    $stmt = $db->prepare("INSERT INTO forgot_password_tokens (email, token, hashed_token, expiration_time) VALUES (?, ?, ?, ?)");
    $stmt->execute([$email, $token, $hashedToken, $expirationTime]);
    return true;
  } catch (PDOException $e) {
    // Handle database errors (e.g., email already exists)
    error_log("Error creating forgot password token: " . $e->getMessage()); //Log for debugging
    return false;
  }

  // 5. Send the Password Reset Email (Example -  You'll need to adapt this)
  $subject = "Password Reset Request";
  $message = "Click this link to reset your password: " . $resetUrl . "/reset?token=" . $token;
  $headers = "From: your_email@example.com\r
"; // Replace with your sender email

  mail($email, $subject, $message, $headers); // Uses PHP's built-in mail function.  Consider using a library like PHPMailer.



  return true;
}


// Example Usage (for demonstration - adapt to your application)
//  This is for testing only.  Don't use this directly in production without proper error handling and security measures.
/*
$email = "testuser@example.com";
$resetUrl = "http://localhost/reset_password";
$secretKey = "your_secret_key"; //  Generate a strong, random secret key.  Don't hardcode it in production.

if (forgot_password($email, $resetUrl, $secretKey)) {
  echo "Password reset request sent successfully!";
} else {
  echo "Failed to send password reset request.";
}
*/



//  Important Security Considerations:
//  - **Secret Key:**  Generate a truly random and strong secret key. Store it securely (e.g., environment variables, a secrets management system).  Never commit this to your codebase.
//  - **Token Expiration:** Short expiration times are crucial for security. 1 hour is a good starting point.
//  - **Hashing:**  Always hash the token with a strong hashing algorithm like SHA256.
//  - **Input Validation & Sanitization:**  Validate and sanitize the email address to prevent injection attacks.
//  - **Rate Limiting:**  Implement rate limiting to prevent brute-force attacks.
//  - **HTTPS:**  Always use HTTPS to encrypt the communication between the user and your server.
//  - **Database Security:**  Protect your database from unauthorized access.  Use parameterized queries to prevent SQL injection.

?>


<?php

// Assuming you have a database connection established.
// Replace 'database_config.php' with your actual database configuration file.
require_once 'database_config.php';

// Function to handle the forgot password process
function forgot_password($email) {
  // 1. Validate Email Format (Basic Check)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false; // Invalid email format
  }

  // 2. Generate a Unique Token
  $token = bin2hex(random_bytes(32)); // Generate a secure, random token

  // 3.  Prepare and Execute the Query
  $hashed_token = password_hash($token, PASSWORD_DEFAULT); // Hash the token for security

  $sql = "UPDATE users SET password_reset_token = '$hashed_token' WHERE email = '$email'";

  if ($conn->query($sql) === TRUE) {
    // 4.  Send Password Reset Email (Implementation Below)
    send_password_reset_email($email, $token);
    return true; // Password reset request sent successfully
  } else {
    // Error handling if the query fails
    error_log("Error updating user for password reset: " . $conn->error); // Log the error
    return false; // Failed to update user
  }
}


// --------------------  Helper Functions  --------------------

// -------------------- Password Reset Email Function --------------------
function send_password_reset_email($email, $token) {
  $to = $email;
  $subject = 'Password Reset Request';
  $message = "Click on the following link to reset your password: " . '<a href="' . $_SERVER['PHP_SELF'] . '?reset=' . urlencode($token) . '"' . ' target="_blank">' . $_SERVER['PHP_SELF'] . '?reset=' . urlencode($token) . '</a>';
  $headers = "From: your_email@example.com" . "\r
";
  mail($to, $message, $headers);
}


// -------------------- Example Usage (for demonstration - DON'T USE IN PRODUCTION WITHOUT SANITIZATION!) --------------------
// IMPORTANT: In a real application, you would handle this form submission securely.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  if (isset($email)) {
    if (forgot_password($email)) {
      echo "Password reset email has been sent to $email.";
    } else {
      echo "Failed to initiate password reset.  Please try again.";
    }
  } else {
    echo "Error: Email is missing.";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
    <label for="email">Email:</label>
    <input type="text" id="email" name="email" placeholder="Your Email">
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_pass = 'your_db_password';

// Function to handle the forgot password process
function forgotPassword($email) {
  // 1. Check if the email exists in the database
  $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  $sql = "SELECT id, password, email FROM users WHERE email = '$email'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $hashedPassword = $user['password']; // The hashed password

    // 2. Generate a unique token (for security - important!)
    $token = bin2hex(random_bytes(32));

    // 3.  Store the token associated with the user's email
    $insertTokenSql = "INSERT INTO password_reset_tokens (user_id, token, expiry_timestamp)
                        VALUES ($userId, '$token', NOW() + INTERVAL 24 HOUR)"; // Token valid for 24 hours

    if (!$conn->query($insertTokenSql)) {
      $error = $conn->error;
      // Handle the error (e.g., log it, show an error message)
      error_log("Error inserting token: " . $error);
      return "An error occurred while generating the reset link. Please try again.";
    }

    // 4.  Send the reset link (Email is a separate process - handled here for simplicity)
    $resetLink = "http://yourwebsite.com/reset_password?token=$token&user_id=$userId";

    //  You'd typically send this email using a mail function or a library.
    //  This is a placeholder.  Implement your email sending here.
    //  Example (simulated):
    $resetMessage = "Please click the link below to reset your password:
" . $resetLink;
    //echo $resetMessage; // This will only display in the browser.
    // In a real application, you'd send this as an email.
    
    return "Password reset link sent to your email.  Please check your inbox.";

  } else {
    return "Email not found.";
  }

  $conn->close();
}

// Example Usage (for testing - don't expose this in a live application)
// Assuming you have a form to submit the email address.  This is just an example.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $resetResult = forgotPassword($email);
    echo "<p>" . $resetResult . "</p>";
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="">
        <label for="email">Enter your email address:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Database credentials (replace with your actual values)
$host = 'localhost';
$username = 'your_db_username';
$password = 'your_db_password';
$database = 'your_db_name';

// Function to handle password reset requests
function forgot_password($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if the user exists
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    return "Connection failed: " . $conn->connect_error;
  }

  $query = "SELECT id, email FROM users WHERE email = '$email'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    $user_data = $result->fetch_assoc();
    $userId = $user_data['id'];
    $hashedToken = generate_token(); // Generate a unique token

    // 3. Generate a Password Reset Token (Securely!)
    //  Important:  Never store plain passwords. Use hashing.
    //  A token is a temporary, unique identifier.

    // 4.  Store the Token in the Database (for security!)
    $query = "UPDATE users SET password_reset_token = '$hashedToken' WHERE id = $userId";
    if ($conn->query($query) === TRUE) {
      // 5.  Email the user a link with the token
      $reset_link = "http://yourwebsite.com/reset_password.php?token=" . $hashedToken;
      $subject = "Password Reset Request";
      $message = "Please click the following link to reset your password: " . $reset_link;
      $headers = "From: yourwebsite@example.com"; // Replace with your email address

      mail($email, $message, $headers);

      return "Password reset email sent to $email.";

    } else {
      return "Error updating user data: " . $conn->error;
    }
  } else {
    return "User with email '$email' not found.";
  }

  $conn->close();
}

// Example Usage (This would typically be in a form submission handler)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $resetMessage = forgot_password($email);
  echo $resetMessage;
}
?>

<!-- HTML Form (for submitting the email address) -->
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
  <label for="email">Email Address:</label>
  <input type="email" id="email" name="email" required>
  <button type="submit">Request Password Reset</button>
</form>


<?php

// This is a simplified example and should be used with caution.
// It's crucial to implement proper security measures in a real application.

// Assume you have a database connection established (e.g., $db)
// and user credentials stored in a database table (e.g., 'users')
// with columns like 'id', 'email', 'password_hash', 'salt'

function forgot_password($email, $db) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if the user exists
  $user = $db->query("SELECT id, password_hash, salt FROM users WHERE email = '$email' LIMIT 1");

  if ($user->num_rows === 0) {
    return "User not found.";
  }

  $user_data = $user->fetch_assoc();
  $id = $user_data['id'];
  $password_hash = $user_data['password_hash'];
  $salt = $user_data['salt'];

  // 3. Generate a unique token
  $token = bin2hex(random_bytes(32)); //  Generate a cryptographically secure random token

  // 4.  Store the token in the database, associated with the user
  $db->query("INSERT INTO password_resets (user_id, token, expires_at) VALUES ($id, '$token', NOW() + INTERVAL 24 HOUR)"); // Store for 24 hours

  // 5.  Send an email to the user with the token
  $email_subject = "Password Reset";
  $email_body = "To reset your password, please click on the following link: <a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'</a>"; //  '$_SERVER['PHP_SELF']' ensures correct link generation.
  $email_to = $email;
  $headers = "From: your_website@example.com";

  mail($email_to, $email_body, $headers);

  return "Password reset email sent to $email.";
}



//  Example usage (This part is for testing purposes - NOT for actual user interaction)
//  You'd replace this with your actual user input and database interactions.
//  For demonstration, we're using a hardcoded email.

// Simulate a database connection (replace with your actual database connection)
$db = new mysqli("localhost", "your_username", "your_password", "your_database");
if ($db->connect_error) {
  die("Connection failed: " . $db->connect_error);
}


// Test the function
$result = forgot_password("testuser@example.com", $db);
echo $result;


// Clean up the database connection
$db->close();
?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique, time-based token and sends an email
 * with a link to reset the password.
 *
 * @param string $email The email address of the user.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function forgotPassword(string $email): bool
{
    // 1. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // Secure random bytes for token generation

    // 2. Store Token in Database (Replace with your database connection)
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');  // Adjust connection details
    try {
        $stmt = $db->prepare("INSERT INTO forgot_passwords (email, token, expiry_timestamp) VALUES (:email, :token, :expiry)");
        $stmt->bindParam(':email', $email);
        $stmt->bindParam(':token', $token);
        $stmt->bindParam(':expiry', time() + (3600 * 24 * 7));  // Token expires in 7 days
        $stmt->execute();
    } catch (PDOException $e) {
        error_log("Error creating forgot password token: " . $e->getMessage());
        return false;
    }

    // 3. Send Reset Password Email
    $to = $email;
    $subject = 'Password Reset';
    $message = "Please click on the following link to reset your password: " .
               '<a href="' . $_SERVER['PHP_SELF'] . '?reset=' . $token . '">' .
               "Reset Password" .
               '</a>';
    $headers = "From: your_email@example.com" . "\r
"; // Replace with your email
    mail($to, $message, $headers);

    return true;
}


// Example Usage (For testing - you wouldn't typically call this directly from a web form)
// echo forgotPassword('test@example.com'); // Replace with a valid email address
?>


<?php

// IMPORTANT: This is a basic example and should be adapted to your specific needs.
// Security is critical when dealing with passwords. This example is for educational purposes
// and should NOT be used in a production environment without robust security measures.

// Database connection (replace with your actual database credentials)
$dbHost = 'localhost';
$dbName = 'your_database_name';
$dbUser = 'your_database_user';
$dbPass = 'your_database_password';

// Check if the form is submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get the email from the form
  $email = $_POST["email"];

  // Validate the email (basic validation - improve this)
  if (empty($email)) {
    $error = "Please enter your email address.";
  } else {
    // Check if the email exists in the 'users' table
    $stmt = $db->prepare("SELECT id, password FROM users WHERE email = ?");
    $stmt->bind_param("s", $email);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
      $error = "Email not found.";
    } else {
      // Generate a password reset token (more secure than just a random string)
      $resetToken = bin2hex(random_bytes(32));

      // Prepare the reset token insertion statement
      $stmt = $db->prepare("UPDATE users SET reset_token = ? WHERE email = ?");
      $stmt->bind_param("ss", $resetToken, $email);
      $stmt->execute();

      // Store the reset token in the database for the user
      // For now, just output a link - you would normally send an email with this link

      // Output the reset link.  This should be emailed to the user.
      $resetLink = 'http://yourwebsite.com/reset-password?token=' . $resetToken; // Replace with your website URL
      $error = "<p>Reset password link sent to your email address.</p><p>Click the link to reset your password.</p><p><a href=\"" . $resetLink . "\">Reset Password</a></p>";
    }
  }
}

// Function to reset the password (this should be called after the user clicks the reset link)
function resetPassword($token, $newPassword) {
  // 1. Validate the token.
  $stmt = $db->prepare("SELECT id, email FROM users WHERE reset_token = ?");
  $stmt->bind_param("s", $token);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    return "Invalid reset token.";
  }

  // 2. Hash the new password
  $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);

  // 3. Update the user's password in the database
  $stmt = $db->prepare("UPDATE users SET password = ?, reset_token = NULL WHERE reset_token = ?");
  $stmt->bind_param("ss", $hashedPassword, $token);
  $stmt->execute();

  return "Password reset successfully. Please log in.";
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <?php if (isset($error)): ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php endif; ?>

  <form method="POST" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_database_name";

// 1. Form Handling (GET or POST)

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    // 2. Input Validation
    if (empty($email)) {
        $error = "Email address is required.";
    } else {
        // 3. Query the Database
        $conn = new mysqli($host, $username, $password, $database);

        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        $sql = "SELECT id, password, email FROM users WHERE email = '$email'";
        $result = $conn->query($sql);

        if ($result->num_rows == 0) {
            $error = "Email address not found.";
        } else {
            $user = $result->fetch_assoc();
            $userId = $user['id'];
            $hashedPassword = $user['password'];  // Important: Use the *hashed* password
            $resetLink = generateResetLink($userId);  // Generate a unique reset link

            // 4.  Send Password Reset Email (Implement this)
            $to = $email;
            $subject = "Password Reset";
            $message = "Click on the following link to reset your password: " . "<a href='" . $resetLink . "'>Reset Password</a>";
            $headers = "From: your_email@example.com" . "\r
";
            mail($to, $message, $headers);

            // You can display a success message here:
            $success = "Password reset link has been sent to your email address.";

        }
    }
}

// 5. Generate Reset Link (Important - Generate a unique link)
function generateResetLink($userId) {
    // Use a unique identifier (e.g., a random string) to create a secure reset link.
    // This is crucial for security. Don't use just the user ID.
    return 'https://yourwebsite.com/reset-password.php?id=' . urlencode($userId);  // Replace with your actual URL
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

<h1>Forgot Password</h1>

<?php
// Display any error messages
if (isset($error)) {
    echo "<p style='color: red;'>$error</p>";
}

if (isset($success)) {
    echo "<p style='color: green;'>$success</p>";
}
?>


<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email Address:</label>
    <input type="email" id="email" name="email" placeholder="Enter your email address">
    <button type="submit">Reset Password</button>
</form>

</body>
</html>


<?php

// Assuming you have a database connection established and a 'users' table
// with an 'email' column.

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password.
 * @return bool True if password reset was successful, false otherwise.
 */
function resetPassword(string $email, string $newPassword) {
  // 1. Validate Input (Important for security!)
  if (empty($email) || empty($newPassword)) {
    return false; // Required fields are missing
  }

  // Hash the new password (VERY IMPORTANT for security!)
  $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);


  // 2. Database Query -  Adapt this to your specific database setup
  //  Replace 'your_database_connection' and 'users' with your actual values.
  try {
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password'); // Adjust DSN
    $stmt = $db->prepare("UPDATE users SET password = :password, last_password_reset = NOW() WHERE email = :email"); // Consider adding 'last_password_reset' column to track resets
    $stmt->bindParam(':password', $hashedNewPassword);
    $stmt->bindParam(':email', $email);
    $stmt->execute();

    // 3.  Handle Result
    if ($stmt->rowCount() > 0) {
      return true;
    } else {
      return false; // User not found
    }

  } catch (PDOException $e) {
    // Handle database errors - Log the error for debugging!
    error_log("Database error resetting password: " . $e->getMessage());
    return false; //  Indicate failure (database error)
  }
}



// Example Usage (for demonstration purposes only - DO NOT expose this in a live application)
// In a real application, this would come from a form submission.

// Example: Reset password for user with email 'test@example.com' to 'newPassword123'
$emailToReset = 'test@example.com'; // Replace with the actual email
$newPassword = 'newPassword123';

if (resetPassword($emailToReset, $newPassword)) {
  echo "Password reset successfully for $emailToReset";
} else {
  echo "Failed to reset password for $emailToReset";
}
?>


<?php

// Database connection details (replace with your actual details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if the password was reset successfully, false otherwise.
 */
function forgot_password($email)
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return false;
    }

    // 2. Check if user exists
    $stmt = $GLOBALS['conn']->prepare("SELECT id, email FROM users WHERE email = ?");
    $stmt->bind_param("s", $email);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        return false;
    }

    $user = $result->fetch_assoc();
    $user_id = $user['id'];
    $stmt->close();

    // 3. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // More secure than using a simple number

    // 4. Store Token in Database (Temporary)
    $stmt = $GLOBALS['conn']->prepare("UPDATE users SET password_reset_token = ?, password_reset_expiry = ? WHERE email = ?");
    $stmt->bind_param("ssi", $token, time() + 3600, $email); // Token, expiry time (1 hour)
    $result = $stmt->execute();

    if (!$result) {
        $error = $GLOBALS['conn']->error;
        $stmt->close();
        // Log the error for debugging
        error_log("Password reset token update failed: " . $error);
        return false;
    }

    // 5. Send Password Reset Email
    $to = $email;
    $subject = "Password Reset Request";
    $message = "Please reset your password by clicking on this link: " . $_SERVER['REQUEST_SCHEME'] . "://yourdomain.com/reset_password?token=" . $token;
    $headers = "From: your_email@example.com";

    mail($to, $message, $headers);


    // 6. Return True
    return true;
}



// Example Usage (for testing - this would normally be part of a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    if (forgot_password($email)) {
        echo "<p>Password reset email has been sent to $email.</p>";
    } else {
        echo "<p>Failed to reset password. Please try again.</p>";
    }
}
?>

<!-- HTML Form for Password Reset Request -->
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Request Password Reset</button>
</form>


<?php

/**
 * Resets a user's password.
 *
 * This function generates a unique token and sends an email to the user
 * with a link to reset their password.
 *
 * @param string $email The email address of the user.
 * @param string $token A unique token generated for this password reset request.
 * @param $db mysqli Database connection object.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function forgot_password(string $email, string $token, mysqli $db) {
  // 1. Check if the email exists in the database
  $query = "SELECT id, username FROM users WHERE email = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("s", $email); // 's' indicates a string parameter
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    $stmt->close();
    return false; // Email not found
  }

  $user_id = $result->fetch_assoc()['id'];
  $username = $result->fetch_assoc()['username'];

  // 2. Create a password reset token and store it in the database
  $hashed_token = password_hash($token, PASSWORD_DEFAULT); // Securely hash the token

  $query = "INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, NOW())";
  $stmt = $db->prepare($query);
  $stmt->bind_param("ss", $user_id, $hashed_token);
  $stmt->execute();
  $stmt->close();


  // 3. Send the password reset email
  $reset_link = "http://yourdomain.com/reset_password?token=" . urlencode($token); // Replace yourdomain.com
  $to = $email;
  $subject = "Password Reset Request";
  $message = "Click on the following link to reset your password: " . $reset_link;
  $headers = "From: Your Website <admin@yourdomain.com>"; // Replace with your email

  if (mail($to, $subject, $message, $headers)) {
    return true; // Email sent successfully
  } else {
    // If mail fails, delete the token from the database to prevent abuse
    delete_password_reset_token($user_id, $token, $db);
    return false;
  }
}



/**
 * Deletes a password reset token from the database.
 *
 * @param int $user_id The ID of the user.
 * @param string $token The token to delete.
 * @param mysqli $db Database connection object.
 */
function delete_password_reset_token(int $user_id, string $token, mysqli $db) {
  $query = "DELETE FROM password_resets WHERE user_id = ? AND token = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("ss", $user_id, $token);
  $stmt->execute();
  $stmt->close();
}



// Example Usage (Illustrative - Replace with your database setup)
// Assuming you have a mysqli connection called $db
/*
$email = "testuser@example.com";
$token = "unique_reset_token_123";

if (forgot_password($email, $token, $db)) {
  echo "Password reset email sent to " . $email;
} else {
  echo "Failed to send password reset email.";
}
*/


// IMPORTANT CONSIDERATIONS & BEST PRACTICES:

// 1. Security:
//    - **Hashing:**  Always use a strong password hashing algorithm like `password_hash()` to store the token securely in the database.  Never store the token in plain text.
//    - **Token Expiry:**  Crucially, set an expiration time for the tokens (e.g., 30 minutes, 1 hour).  Use `NOW()` (MySQL) or a similar function to store the `expires_at` column in the `password_resets` table. This prevents attackers from using the token indefinitely.
//    - **Rate Limiting:** Implement rate limiting to prevent brute-force attacks on the password reset endpoint.
//    - **Input Validation & Sanitization:**  Validate and sanitize all user input to prevent SQL injection and other vulnerabilities.
//    - **HTTPS:** Always use HTTPS to encrypt the communication between the user's browser and your server.

// 2. Database Design:
//    - Create a `password_resets` table in your database.  This table should have at least these columns:
//      - `id` (INT, PRIMARY KEY, AUTO_INCREMENT)
//      - `user_id` (INT, FOREIGN KEY referencing `users.id`)
//      - `token` (VARCHAR, to store the unique token)
//      - `expires_at` (TIMESTAMP, to store the token's expiry time)

// 3.  Error Handling:
//    -  Implement robust error handling.  Log errors for debugging and monitoring.
//    -  Return appropriate error codes or messages to the user.

// 4. User Experience:
//    - Provide clear and informative messages to the user about the password reset process.
//    -  Consider providing a link to the user's account page after the password has been reset.

// 5.  Cleanup: When the user successfully resets their password, it's *essential* to delete the corresponding token from the `password_resets` table. This prevents future attempts to reset the password using the old token.


<?php

// Ensure this file is protected to prevent direct access to the database
if (!defined('PH__PROCESS_GUARD')) {
    die('Access denied');
}


/**
 * Forgets a user's password and sends a password reset link.
 *
 * @param string $email The user's email address.
 * @return bool True if a reset link was sent, false otherwise.
 */
function forgot_password(string $email): bool
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log for debugging
        return false;
    }

    // 2. Check if User Exists
    $user = get_user_by_email($email);
    if (!$user) {
        error_log("User with email " . $email . " not found");
        return false;
    }

    // 3. Generate a Unique Token
    $token = generate_unique_token();

    // 4. Store Token in Database (Hash it for security)
    $hashed_token = hash('sha256', $token); // Use SHA256 for stronger hashing
    $result = save_token_to_database($user->id, $hashed_token);
    if (!$result) {
        error_log("Failed to save token to database for user " . $email);
        return false;
    }

    // 5.  Construct the Password Reset Link
    $reset_link = generate_reset_link($user->email, $token);

    // 6. Send the Reset Email
    if (!send_reset_email($user->email, $reset_link)) {
        error_log("Failed to send password reset email to " . $email);
        // Optional:  You could delete the token from the database here,
        // if you want to ensure the reset link isn't usable if the email
        // fails to send.  However, this increases complexity.
        return false;
    }

    return true;
}


/**
 * Placeholder function to retrieve a user by email.  Implement your database query here.
 * @param string $email
 * @return User|null
 */
function get_user_by_email(string $email): ?User {
    // Replace with your actual database query
    // This is just a dummy example.
    // You'd normally fetch the user from your database table.

    // Example:  Assuming you have a User class
    //  $user =  DB::query("SELECT * FROM users WHERE email = ?", $email)->first();
    //  return $user;

    // Dummy User class for demonstration.
    class User {
        public $id;
        public $email;

        public function __construct(int $id, string $email) {
            $this->id = $id;
            $this->email = $email;
        }
    }

    return new User(1, $email); // Placeholder return
}

/**
 * Placeholder function to generate a unique token.
 * @return string
 */
function generate_unique_token(): string
{
    return bin2hex(random_bytes(32)); // Using bin2hex for better security
}

/**
 * Placeholder function to save the token to the database.
 * @param int $user_id
 * @param string $hashed_token
 * @return bool
 */
function save_token_to_database(int $user_id, string $hashed_token): bool
{
    // Replace with your database insert query
    // Example:
    // DB::table('password_resets')->insert([
    //     'user_id' => $user_id,
    //     'token' => $hashed_token,
    //     'created_at' => time(),
    // ]);
    // Return true if the insert was successful, false otherwise.

    return true; // Placeholder return
}


/**
 * Placeholder function to generate the password reset link.
 * @param string $email
 * @param string $token
 * @return string
 */
function generate_reset_link(string $email, string $token): string
{
    return "/reset_password?email=" . urlencode($email) . "&token=" . urlencode($token);
}


/**
 * Placeholder function to send the password reset email.
 * @param string $email
 * @param string $reset_link
 */
function send_reset_email(string $email, string $reset_link): bool
{
    // Replace with your email sending logic (e.g., using PHPMailer)
    // This is a placeholder - you need to implement this using your preferred email library.

    // Example:
    // $mail = new PHPMailer();
    // $mail->addAddress($email);
    // $mail->Subject = "Password Reset";
    // $mail->Body = "Click this link to reset your password: " . $reset_link;
    // $mail->send();

    // Placeholder:  Simulate sending
    echo "Simulated sending email to: " . $email . " with link: " . $reset_link;
    return true;
}

// Example Usage (Illustrative -  Replace with your actual user data)
$email = "test@example.com";
if (forgot_password($email)) {
    echo "Password reset email sent to " . $email . "
";
} else {
    echo "Failed to send password reset email to " . $email . "
";
}

?>


<?php

/**
 * Forgets a user's password.
 *
 * This function sends a password reset link to the user's email address.
 *
 * @param string $email The user's email address.
 * @param string $token A unique, randomly generated token to verify the request.
 * @param string $baseUrl The base URL of your website.  This is crucial for generating the reset link.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $token, string $baseUrl): bool
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format: " . $email); // Log for debugging
        return false;
    }

    // 2. Generate a Password Reset Token (Important:  Make sure this is truly random)
    $resetToken = generateResetToken(); // Use the function defined below
    if (!$resetToken) {
        return false;
    }


    // 3.  Create the Password Reset Link
    $resetLink = $baseUrl . "/reset-password?token=" . urlencode($resetToken);

    // 4.  Send the Email (Using PHPMailer - Install: composer require phpmailer/phpmailer)
    if (!sendResetPasswordEmail($email, $resetLink)) {
        error_log("Failed to send reset password email to: " . $email); // Log for debugging
        return false;
    }


    return true;
}

/**
 * Generates a unique, random token for password reset.
 * @return string|null  A unique token, or null if generation fails.
 */
function generateResetToken() {
    try {
        return bin2hex(random_bytes(32)); // Use random_bytes for better security
    } catch (Exception $e) {
        error_log("Error generating reset token: " . $e->getMessage());
        return null;
    }
}


/**
 * Sends a password reset email to the user.
 *
 * @param string $email The user's email address.
 * @param string $resetLink The password reset link.
 * @return bool True on success, false on failure.
 */
function sendResetPasswordEmail(string $email, string $resetLink) {
    // ---  Replace with your email sending logic ---
    // This is a placeholder.  You'll need to implement your email sending.

    // Example using PHPMailer (install using composer require phpmailer/phpmailer)
    //  Requires SMTP setup (e.g., Gmail, Outlook, etc.)


    //   $mail = new PHPMailer(true);
    //   $mail->isSMTP();
    //   $mail->Host       = 'smtp.gmail.com'; // or your SMTP server
    //   $mail->SMTPAuth   = true;
    //   $mail->Username   = 'your_email@gmail.com'; // Your email address
    //   $mail->Password   = 'your_password';      // Your email password
    //   $mail->Port       = 587;                       // Port for TLS encryption
    //   $mail->SMART_HOST = true;
    //   $mail->Encoding   = PHPMailer::ENCODING_QUOTED;
    //   $mail->CharSet    = 'UTF-8';

    //   $mail->Subject    = 'Password Reset';
    //   $mail->Body       = 'Click this link to reset your password: ' . $resetLink;
    //   $mail->AltBody     = 'Password Reset: ' . $resetLink;
    //   $mail->SetFrom('your_email@gmail.com', 'Your Website Name');
    //   $mail->AddRecipient($email);
    //   $mail->isHTML(true);  // Make sure to set this to true if you're sending HTML emails
    //   $mail->send();

    // Return true if sending was successful.  In a real implementation,
    // you'd add error handling and check the return value from send().
    //For demonstration purposes, always return true.

    return true;
}



// Example Usage (in your controller or route):
// Assuming you have a form to get the email and token.
// $email = $_POST['email'];
// $token = $_POST['token'];
// $baseUrl = 'https://yourwebsite.com'; // Replace with your website's base URL.

// if (forgotPassword($email, $token, $baseUrl)) {
//     echo "Password reset email sent! Please check your inbox.";
// } else {
//     echo "Error sending password reset email.";
// }


?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and that your users table has an 'email' and 'password' field.

// ---  DO NOT HARDCODE USER DATA IN A REAL APPLICATION!  ---
// This is just for demonstration. In a real application,
// you would get the email from the user's request.
// You also should never store passwords in plain text!
// Use a strong hashing algorithm like bcrypt.

function forgot_password($email) {
    // 1. Validate email format (basic check - more robust validation is recommended)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email format.";
    }

    // 2. Check if the user exists
    $result = mysqli_query($db, "SELECT id, email FROM users WHERE email = '$email'");
    if (mysqli_num_rows($result) == 0) {
        return "User not found.";
    }

    // 3. Generate a unique token for the password reset.  This is crucial for security.
    $token = bin2hex(random_bytes(32));

    // 4.  Store the token in the database associated with the user's email.
    mysqli_query($db, "UPDATE users SET reset_token = '$token' WHERE email = '$email'");

    // 5.  Optional: Send an email with the reset link
    //  (This part is omitted for brevity and demonstration, but you should definitely implement this)
    //  -  You'll need a function to send emails.
    //  -  The email should contain a link like:  https://yourdomain.com/reset_password?token=$token

    return "Password reset link sent to your email.  Please check your inbox.";
}



// Example usage (for testing purposes - NEVER USE THIS IN PRODUCTION!)
// $email = "testuser@example.com";
// $result = forgot_password($email);
// echo $result;

// --- IMPORTANT SECURITY NOTES ---

// 1.  Hashing Passwords:  NEVER store passwords in plain text. Use bcrypt, Argon2, or another strong hashing algorithm to securely hash passwords before storing them in the database.

// 2. Token Security:
//    - Generate cryptographically random tokens (using `random_bytes()` or similar).
//    -  Tokens should be long and unpredictable.
//    -  Tokens should expire (e.g., after 30 minutes) to prevent abuse.  Implement a token expiration in your code.
//    -  Store the tokens in the database with the user's email.

// 3.  Rate Limiting:  Implement rate limiting to prevent brute-force attacks.  Limit the number of password reset requests from the same IP address or email address within a certain time period.

// 4. Input Validation:  Always validate user input rigorously to prevent SQL injection and other security vulnerabilities.  Use prepared statements or parameterized queries to prevent SQL injection.  Validate email format, length, and other relevant fields.

// 5.  Email Sending: Use a reliable email sending service (e.g., SendGrid, Mailgun) instead of trying to send emails directly from your PHP script, which can lead to deliverability issues and potential security risks.

// 6. Session Management: Securely manage user sessions and cookies to prevent session hijacking.
// 7. HTTPS: Always use HTTPS to encrypt the communication between the user's browser and your server.
?>


<?php

// Assuming you have a database connection established and a 'users' table
// with a 'email' field.  This is a simplified example and doesn't include
// robust error handling or security best practices.

// Function to handle the forgotten password request
function forgot_password($email) {
    // 1.  Validate Input (Crucial for Security)
    if (empty($email)) {
        return "Error: Email address is required.";
    }

    // You'll want to sanitize and validate the email address.
    //  For example:
    //  $email = filter_var($email, FILTER_SANITIZE_EMAIL);
    //  if (filter_var($email, FILTER_VALIDATE_EMAIL) === false) {
    //      return "Error: Invalid email address.";
    //  }

    // 2.  Check if the user exists
    $user = getUserByEmail($email);

    if ($user === false) {
        return "Error: User not found.";
    }

    // 3. Generate a unique token
    $token = generateUniqueToken();

    // 4. Store the token in the database, associated with the user's email.
    //  This is the critical part:  This function *must* securely store the token.
    storeToken($user['id'], $token);

    // 5.  Send an email to the user with a link to reset their password.
    $reset_url = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . urlencode($token);
    sendResetPasswordEmail($user['email'], $reset_url);

    return "Password reset email sent to $email.";
}

// --- Helper Functions (Implement these based on your database and email setup) ---

// Function to get user by email (replace with your database query)
function getUserByEmail($email) {
    // **IMPORTANT:**  Replace this with your actual database query.
    // This is just a placeholder.
    // Example using PDO:
    // $stmt = $pdo->prepare("SELECT * FROM users WHERE email = :email");
    // $stmt->bindParam(':email', $email);
    // $stmt->execute();
    // $user = $stmt->fetch(PDO::FETCH_ASSOC);
    // return $user;
    // return false; // User not found
    return false;
}

// Function to generate a unique token (using a cryptographically secure method)
function generateUniqueToken() {
    return bin2hex(random_bytes(32)); // Generate a 32-byte random string
}

// Function to store the token in the database
function storeToken($user_id, $token) {
    // **IMPORTANT:** Replace this with your actual database insertion query.
    // Example using PDO:
    // $stmt = $pdo->prepare("INSERT INTO password_tokens (user_id, token, created_at) VALUES (:user_id, :token, NOW()) ON DUPLICATE KEY UPDATE token = :token, updated_at = NOW()");
    // $stmt->bindParam(':user_id', $user_id);
    // $stmt->bindParam(':token', $token);
    // $stmt->execute();
    // return true;
    return true; // Return true on success
}


// Function to send the password reset email (replace with your email sending code)
function sendResetPasswordEmail($to, $reset_url) {
    // This is a placeholder. Replace with your email sending code.
    $subject = 'Password Reset';
    $message = "Click the link below to reset your password: " . $reset_url;
    $headers = ['Content-Type: text/html']; // Important for HTML emails

    //  Use a library like PHPMailer for robust email handling:
    //  https://www.phpmailer.com/

    //  Example (Conceptual):
    //  mail($to, $subject, $message, $headers);
    echo "Email sent (placeholder)";
}

// --- Example Usage (for testing) ---
// This should be in a separate file or a testing section of your application.

// If running this directly in a web environment, you'll need to handle input from
// a form submission.  For example:

// if ($_SERVER["REQUEST_METHOD"] == "POST") {
//     $email = $_POST["email"];
//     $result = forgot_password($email);
//     echo $result;
// }
?>


<?php

// This is a basic example and should be implemented with security in mind.
//  * Never store passwords directly.  Always hash them.
//  * Use strong password reset mechanisms (e.g., email verification, OTP).
//  * This is for demonstration purposes only.

// Configuration (Replace with your database credentials and paths)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_username';
$db_password = 'your_password';

// Function to generate a random token
function generateRandomToken() {
    return bin2hex(random_bytes(32));
}

// Function to reset password (Simplified Example - Use a proper database interaction and security practices)
function forgotPassword($email, $token) {
    // 1. Check if email exists in the database
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $query = "SELECT id, email FROM users WHERE email = '$email'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        $user = $result->fetch_assoc();
        $userId = $user['id'];
        $userEmail = $user['email'];

        // 2. Generate a token for the reset request
        $resetToken = generateRandomToken();

        // 3. Store the token in the database, associated with the user's ID
        $insertQuery = "INSERT INTO password_resets (user_id, token, expires_at) 
                         VALUES ($userId, '$resetToken', NOW() + INTERVAL 24 HOUR)"; // Token expires after 24 hours
        if (!$conn->query($insertQuery)) {
            // Handle the error.  Ideally log the error.
            echo "Error inserting reset token: " . $conn->error;
            return false;
        }

        // 4. Send an email with a link to reset the password
        $resetLink = 'http://yourwebsite.com/reset-password?token=' . $token;  // Replace with your website URL
        //  Implement email sending logic here using a library or your own SMTP setup.
        //  Example (placeholder):
        //  mail($userEmail, "Reset Password", "Click here: " . $resetLink);


        return true; // Success
    } else {
        return false; // User not found
    }

    $conn->close();
}

// Example Usage (Demonstration)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    //  In a real application, you would validate the email format and other inputs here.
    if (!empty($email)) {
        $resetResult = forgotPassword($email, generateRandomToken());

        if ($resetResult) {
            echo "Password reset link sent to your email address.";
        } else {
            echo "An error occurred while generating the reset link.  Please try again.";
        }
    } else {
        echo "Please enter your email address.";
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
        <label for="email">Email Address:</label>
        <input type="email" id="email" name="email" placeholder="Your Email" required>
        <button type="submit">Request Password Reset</button>
    </form>

</body>
</html>


<?php

/**
 * Forgot Password Function
 * 
 * This function generates a unique, time-based token and sends an email to the user
 * with a link to reset their password.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @param string $baseUrl The base URL of your website.  Used to construct the reset link.
 * @return bool True on success, false on failure (e.g., email not sent).
 */
function forgotPassword(string $email, string $baseUrl): bool
{
    // 1. Generate a unique token
    $token = bin2hex(random_bytes(32));

    // 2. Store the token in the database (replace with your actual database code)
    //  -  This is a simplified example; use prepared statements for security.
    //  -  Ensure you have a table to store the token and user ID.
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_db_user', 'your_db_password'); 

    try {
        $stmt = $db->prepare("INSERT INTO password_resets (user_email, token, expires_at) VALUES (:email, :token, :expires_at)");
        $stmt->bindParam(':email', $email);
        $stmt->bindParam(':token', $token);
        $expires_at = time() + 3600; // Token expires in 1 hour
        $stmt->bindParam(':expires_at', $expires_at);
        $stmt->execute();
    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage()); // Log for debugging
        return false;
    }


    // 3. Construct the reset link
    $resetLink = $baseUrl . "/reset_password.php?token=" . $token;

    // 4. Send the email
    $to = $email;
    $subject = 'Password Reset';
    $message = "To reset your password, please click on the following link: " . $resetLink;
    $headers = 'From: your_email@example.com' . "\r
"; // Replace with your email address

    if (mail($to, $subject, $message, $headers)) {
        // Email sent successfully
        return true;
    } else {
        // Email sending failed
        // Handle email sending errors (e.g., SMTP issues)
        error_log("Failed to send email to " . $email);
        return false;
    }
}

// Example Usage (This part is just for demonstration)
// You'll need to integrate this function into your existing application.

/*
$email = 'testuser@example.com';  // Replace with the user's email
$baseUrl = 'http://yourwebsite.com'; // Replace with your website URL

if (forgotPassword($email, $baseUrl)) {
    echo "Password reset email sent to " . $email;
} else {
    echo "Failed to send password reset email.";
}
*/

?>


<?php

// Assuming you have a database connection established
// (e.g., $db_connection = mysqli_connect("localhost", "username", "password", "database_name");)

/**
 * Forgets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset email was sent, false otherwise.
 */
function forgot_password(string $email): bool
{
    // Sanitize and validate the email address
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log for debugging
        return false;
    }

    // Check if the user exists
    $user = getUserByEmail($email);

    if ($user === false) {
        error_log("User with email " . $email . " not found."); // Log for debugging
        return false;
    }

    // Generate a unique token and expiration time
    $token = generate_unique_token();
    $expiration_time = time() + (2 * 60 * 60); // Token expires in 2 hours

    // Store the token and expiration time in the database
    $result = store_token($user['id'], $token, $expiration_time);

    if (!$result) {
        error_log("Failed to store token for user " . $email); // Log for debugging
        return false;
    }

    // Send the password reset email
    if (!send_password_reset_email($user['email'], $token, WEBSITE_URL)) {
        error_log("Failed to send password reset email to " . $email); // Log for debugging
        // Optionally, you might try to delete the token in the database if sending failed
        delete_token($user['id'], $token);
        return false;
    }

    return true;
}


/**
 * Helper function to get user by email.  Replace with your actual database query.
 *
 * @param string $email The email address to search for.
 * @return mysqli_result|false Returns the result of the query or false if no user is found.
 */
function getUserByEmail(string $email): mixed
{
    // Replace this with your actual database query. This is a placeholder.
    // Example using mysqli:
    // $sql = "SELECT * FROM users WHERE email = ?";
    // $stmt = $db_connection->prepare($sql);
    // $stmt->bind_param("s", $email);
    // $stmt->execute();
    // $result = $stmt->get_result();
    //
    // If a row is found:
    // if ($row = $result->fetch_assoc()) {
    //     return $row;
    // } else {
    //   return false;
    // }

    // Dummy data for demonstration
    $dummy_users = [
        ['id' => 1, 'email' => 'test@example.com', 'password' => 'password123'],
        ['id' => 2, 'email' => 'another@example.com', 'password' => 'secure_password']
    ];

    foreach ($dummy_users as $user) {
        if ($user['email'] == $email) {
            return $user;
        }
    }
    return false;
}

/**
 * Helper function to generate a unique token.
 *
 * @return string A unique token.
 */
function generate_unique_token(): string
{
    return bin2hex(random_bytes(32));
}

/**
 * Helper function to store the token and expiration time in the database.
 * Replace with your actual database query.
 *
 * @param int $user_id The ID of the user.
 * @param string $token The token.
 * @param int $expiration_time The expiration time (timestamp).
 * @return bool True if the token was stored successfully, false otherwise.
 */
function store_token(int $user_id, string $token, int $expiration_time): bool
{
    // Replace with your actual database query.  This is a placeholder.
    // Example using mysqli:
    // $sql = "INSERT INTO password_tokens (user_id, token, expiration_time) VALUES (?, ?, ?)";
    // $stmt = $db_connection->prepare($sql);
    // $stmt->bind_param("sss", $user_id, $token, $expiration_time);
    // $result = $stmt->execute();
    // return $result;

    // Dummy data for demonstration.
    $dummy_tokens = [
        ['user_id' => 1, 'token' => 'token123', 'expiration_time' => time() + (2 * 60 * 60)],
        ['user_id' => 2, 'token' => 'token456', 'expiration_time' => time() + (2 * 60 * 60)]
    ];
    
    // Check if token already exists. If so, update it.
    $existing_token =  array_filter($dummy_tokens, function ($key, $value) use ($user_id, $token) {
        return $key == $user_id;
    }, ARRAY_FILTER_USE_KEY);
    
    if (!empty($existing_token)) {
        $dummy_tokens[$existing_token[key($existing_token)]]['token'] = $token;
        $dummy_tokens[$existing_token[key($existing_token)]]['expiration_time'] = $expiration_time;
        
        return true;
    }

    return false;
}


/**
 * Helper function to delete the token from the database.  (Optional)
 * Replace with your actual database query.
 *
 * @param int $user_id The ID of the user.
 * @param string $token The token.
 * @return bool True if the token was deleted successfully, false otherwise.
 */
function delete_token(int $user_id, string $token): bool {
    // Replace with your actual database query. This is a placeholder.
    // Example using mysqli:
    // $sql = "DELETE FROM password_tokens WHERE user_id = ? AND token = ?";
    // $stmt = $db_connection->prepare($sql);
    // $stmt->bind_param("ss", $user_id, $token);
    // $result = $stmt->execute();
    // return $result;

     // Dummy data for demonstration.
     $dummy_tokens = [
         ['user_id' => 1, 'token' => 'token123', 'expiration_time' => time() + (2 * 60 * 60)],
         ['user_id' => 2, 'token' => 'token456', 'expiration_time' => time() + (2 * 60 * 60)]
     ];
     
     foreach ($dummy_tokens as $key => $value) {
        if ($value['token'] == $token && $value['user_id'] == $user_id) {
            unset($dummy_tokens[$key]);
            return true;
        }
     }
     return false;
}



/**
 * Helper function to send the password reset email.
 * Replace with your actual email sending logic.
 *
 * @param string $email The email address.
 * @param string $token The token.
 * @param string $website_url The URL of your website.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function send_password_reset_email(string $email, string $token, string $website_url): bool
{
    // Replace with your actual email sending logic.
    // Example:
    // $subject = "Password Reset";
    // $body = "Click this link to reset your password: " . $website_url . "?token=" . $token;
    // $headers = "From: " . WEBSITE_EMAIL;
    // mail($email, $subject, $body, $headers);
    // return true;

    // Dummy email sending - just returns true for demo purposes
    echo "Sending password reset email to " . $email . " with token " . $token . ".  Website URL: " . $website_url;
    return true;
}
?>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_pass = 'your_db_password';

// Function to send an email (Replace with your email sending logic)
function sendEmail($email, $token) {
  // This is a placeholder.  Replace this with your actual email sending code.
  // Example: using PHPMailer:
  // https://peps.php.net/phpmailer
  // You'll need to install PHPMailer and configure it.

  // Dummy email content for demonstration
  $subject = 'Password Reset Request';
  $message = "Click the following link to reset your password: " . '<a href="' . $_SERVER['REQUEST_URI'] . '?token=' . $token . '" target="_blank">Reset Password</a>';
  $headers = "From: your_email@example.com\r
";
  mail($email, $message, $headers);

  // Or, if you're using a library like SwiftMailer:
  // ... (implementation details for SwiftMailer)

}


// Function to handle password reset request
function forgotPassword($email, $username) {
  // 1. Validate Email and Username
  if (empty($email) || empty($username)) {
    return 'Error: Email and username are required.';
  }

  // 2. Check if the user exists
  $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
  if ($conn->connect_error) {
    return 'Error: Connection failed: ' . $conn->connect_error;
  }

  $result = $conn->query("SELECT id, email, username FROM users WHERE username = '$username'");

  if ($result->num_rows > 0) {
    $user_data = $result->fetch_assoc();
    $user_id = $user_data['id'];
    $user_email = $user_data['email'];

    // 3. Generate a unique token
    $token = bin2hex(random_bytes(32));  // Generates a random token.  Important for security.

    // 4.  Store the token in the database, associated with the user.
    if ($conn->query("UPDATE users SET password_reset_token = '$token' WHERE id = $user_id")) {
      // 5. Send the reset email
      sendEmail($user_email, $token);

      return "Password reset email sent to $user_email. Please check your inbox.";
    } else {
      return 'Error: Failed to update the database.';
    }

  } else {
    return 'Error: User not found.';
  }

  $conn->close();
}


// Example Usage (Simulated form submission - for demonstration only)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $username = $_POST["username"]; // Replace with actual form field name
  $email = $_POST["email"]; // Replace with actual form field name

  $reset_message = forgotPassword($email, $username);
  echo $reset_message;
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Password Reset</title>
</head>
<body>
  <h1>Password Reset</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
    <label for="username">Username:</label>
    <input type="text" id="username" name="username" required><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <button type="submit">Reset Password</button>
  </form>
</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password based on their email address.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset email was sent, false otherwise.
 */
function forgotPassword(string $email): bool
{
    // 1. Check if the email exists in the database
    $user = getUserByEmail($email);

    if (!$user) {
        return false; // User not found
    }

    // 2. Generate a unique, time-based token
    $token = generateUniqueToken();

    // 3. Store the token in the database associated with the user's email
    $result = storeToken($user->id, $token);

    if (!$result) {
        return false; // Failed to store token
    }

    // 4. Send a password reset email
    $resetLink = generateResetLink($token, $user->email);
    if (!sendPasswordResetEmail($user->email, $resetLink)) {
        // Optionally, delete the token if email sending failed
        // deleteToken($user->id, $token);
        return false; // Failed to send email
    }

    return true; // Password reset email sent successfully
}



/**
 * Retrieves a user object by their email address.
 * (Placeholder - Implement your database query here)
 *
 * @param string $email The email address to search for.
 * @return User|null The User object if found, null otherwise.
 */
function getUserByEmail(string $email): ?User
{
    // Replace this with your actual database query
    // Example using a hypothetical User class
    // $query = "SELECT * FROM users WHERE email = '$email'";
    // $result = mysqli_query($db, $query);
    // if (mysqli_num_rows($result) > 0) {
    //    $user = mysqli_fetch_assoc($result);
    //    return new User($user);
    // }
    // return null;

    //Dummy User class for testing
    class User{
        public $id;
        public $email;

        public function __construct(array $data){
            $this->id = $data['id'];
            $this->email = $data['email'];
        }
    }

    return new User(['id' => 1, 'email' => 'test@example.com']);
}



/**
 * Generates a unique, time-based token.
 *
 * @return string A unique token.
 */
function generateUniqueToken(): string
{
    return bin2hex(random_bytes(32));  // Generates a 32-byte random string and converts it to hexadecimal
}

/**
 * Stores the token in the database associated with the user's ID.
 *  (Placeholder - Implement your database insert query here)
 *
 * @param int $userId The ID of the user.
 * @param string $token The token to store.
 * @return bool True if the token was stored successfully, false otherwise.
 */
function storeToken(int $userId, string $token): bool
{
    // Placeholder - Implement your database insert query here
    // Example:
    // $query = "INSERT INTO password_tokens (user_id, token, expiry_date) VALUES ('$userId', '$token', NOW())";
    // $result = mysqli_query($db, $query);

    //Dummy implementation for testing
    return true;
}



/**
 * Generates the password reset link.
 *
 * @param string $token The token.
 * @param string $email The user's email address.
 * @return string The password reset link.
 */
function generateResetLink(string $token, string $email): string
{
    return "https://example.com/reset-password?token=$token&email=$email"; // Replace with your actual domain
}


/**
 * Sends a password reset email.
 * (Placeholder - Implement your email sending logic here)
 *
 * @param string $to Email address to send the email to.
 * @param string $link The password reset link.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function sendPasswordResetEmail(string $to, string $link): bool
{
   // Placeholder - Implement your email sending logic here
   // Example:
   // $subject = "Password Reset";
   // $message = "Click this link to reset your password: $link";
   // $headers = "From: your-email@example.com\r
";
   // $result = mail($to, $message, $headers);

   // Dummy implementation for testing
   return true;
}

// Helper function to delete the token
function deleteToken(int $userId, string $token) {
    //Replace this with your actual database delete query.
    return true;
}
?>


<?php

// Database configuration (replace with your actual credentials)
define('DB_HOST', 'localhost');
define('DB_USER', 'your_db_user');
define('DB_PASSWORD', 'your_db_password');
define('DB_NAME', 'your_db_name');

// Function to reset password
function forgotPassword($email)
{
    // 1.  Database Connection
    $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    // 2.  Generate a unique token
    $token = bin2hex(random_bytes(32));  // Using a strong, random token

    // 3.  Create a token record in the database
    $sql = "INSERT INTO forgot_tokens (email, token, expiry) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ss", $email, $token, time() + 3600); // Expires in 1 hour
    $stmt->execute();

    // 4.  Confirmation message
    if ($stmt->affected_rows === 0) {
        return false; // Email or token already exists
    }

    // 5.  Close the database connection
    $stmt->close();
    $conn->close();

    return true;
}


// Example Usage (This is just for demonstration - don't include this in your actual code!)
// This will generate a token and attempt to insert it into the database.
//  You would typically trigger this when a user clicks a "Forgot Password" link.

// $userEmail = "test@example.com"; // Replace with the user's email

// if (forgotPassword($userEmail)) {
//     echo "Password reset instructions have been sent to $userEmail.";
// } else {
//     echo "An error occurred while generating the password reset link.";
// }
?>


<?php

/**
 * Forgot Password Function
 *
 * This function generates a unique token and sends an email with a link
 * to reset the user's password.
 *
 * @param string $email The email address of the user who forgot their password.
 * @param string $reset_password_url The URL where the reset password form is located.
 * @param string $from_email The email address to send the password reset email from.
 * @param string $from_name The name to display in the email from.
 * @return bool True if email sent successfully, false otherwise.
 */
function forgot_password(string $email, string $reset_password_url, string $from_email, string $from_name): bool
{
    // 1. Generate a unique token
    $token = bin2hex(random_bytes(32));

    // 2. Hash the token (important for security!)
    $hashed_token = password_hash($token, PASSWORD_DEFAULT);

    // 3. Store the token in the database (replace with your actual database logic)
    //    This example uses a simple array for demonstration purposes.
    //    DO NOT use this in production without proper database integration.
    $users = [];  // Replace this with your user data retrieval logic
    if (isset($users[$email])) {
        $users[$email]['token'] = $hashed_token;
    } else {
        $users[$email] = [
            'token' => $hashed_token,
            'reset_url' => $reset_password_url
        ];
    }


    // 4. Construct the reset password URL
    $reset_url = $reset_password_url . '?token=' . urlencode($token);

    // 5. Send the password reset email
    $to = $email;
    $subject = 'Password Reset';
    $message = "Click the link below to reset your password: " . $reset_url;
    $headers = "From: " . $from_name . " <" . $from_email . ">\r
";
    $headers .= "Reply-To: " . $from_email . "\r
";

    if (mail($to, $subject, $message, $headers)) {
        return true;
    } else {
        return false;
    }
}

// Example Usage (FOR TESTING ONLY - DO NOT USE IN PRODUCTION)
// This example assumes you have a simple 'users' array for demonstration.
// In a real application, you'd use a database.

// Sample data (replace with your actual user data)
$users = [
    'test@example.com' => true
];

// Simulate a forgot password request
$email = 'test@example.com';
$reset_password_url = 'http://localhost/reset_password.php';
$from_email = 'your_email@example.com';
$from_name = 'Your Name';

if (forgot_password($email, $reset_password_url, $from_email, $from_name)) {
    echo "Password reset email sent to " . $email . "
";
} else {
    echo "Failed to send password reset email to " . $email . "
";
}


// You will need to implement the 'reset_password.php' file to handle the form and password reset logic.
// This function only generates the email to send to the user.
?>


<?php

// Configuration - Replace with your database credentials and email settings
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_pass = 'your_db_password';
$from_email = 'your_email@example.com';
$from_name = 'Your Website Name';


// Function to reset password
function forgot_password($email, $new_password) {
    // 1. Connect to the database
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    // 2. Sanitize and Validate Inputs
    $email = trim($email); // Remove leading/trailing whitespace
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }
    $new_password = trim($new_password);
    if (empty($new_password)) {
        return "Password cannot be empty.";
    }

    // 3. Hash the new password (Important for Security)
    $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

    // 4. Update the password in the database
    $sql = "UPDATE users SET password = '$hashed_password' WHERE email = '$email'";

    if ($conn->query($sql) === TRUE) {
        return "Password reset successfully.  Please check your email.";
    } else {
        return "Error resetting password. " . $conn->error;
    }

    // 5. Close the connection
    $conn->close();
}


// Example Usage (This is just for testing, integrate this into your form)
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $email = $_POST['email'];
    $new_password = $_POST['new_password'];

    $reset_message = forgot_password($email, $new_password);
    echo $reset_message; // Display the result (e.g., error message or success)
} else {
    // If not a POST request, show a form for the user to enter their email and a new password.
    ?>
    <form method="post" action="">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required><br><br>

        <label for="new_password">New Password:</label>
        <input type="password" id="new_password" name="new_password" required><br><br>

        <button type="submit">Reset Password</button>
    </form>
    <?php
}
?>


<?php

// Assuming you have a database connection established (e.g., $db)
// This is a simplified example and should be adapted to your specific setup.

// Function to handle the forgot password process
function forgot_password($email) {
  // 1. Validate Email (Important!)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email format.";
  }

  // 2. Generate a Unique Token
  $token = bin2hex(random_bytes(32)); // Generates a secure, random token

  // 3. Hash the Token (Security!)
  $hashed_token = password_hash($token, PASSWORD_DEFAULT);

  // 4. Store the Token and Email in the Database (For security, avoid storing plain passwords)
  //    In a real application, you would:
  //    - Create a new record in a 'forgot_password_tokens' table
  //    - The table columns would be:  email, token, created_at

  //  Simulated database insertion for demonstration
  //  Replace this with your actual database query
  $query = "INSERT INTO forgot_password_tokens (email, token, created_at) VALUES ('$email', '$token', NOW())";

  // Assuming you have a database connection object $db
  // $db->query($query); // Replace with your database query function

  // Simulate success.  Replace with your database interaction.
  $success = true;  //  Indicates whether the token was successfully stored

  // 5. Send the Reset Link (Email)
  $subject = "Password Reset Request";
  $message = "Please click on the following link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . "?reset=$token' >Reset Password</a>";
  $headers = "From: your_email@example.com";  // Replace with your email address
  
  if (mail($email, $subject, $message, $headers)) {
    // 6. Return success message
    return "Password reset link has been sent to your email address. Check your inbox.";
  } else {
    // 7. Handle email sending failure
    return "Failed to send password reset email. Please try again.";
  }
}

// Example Usage (Illustrative)
// $email_to_reset = "user@example.com"; // Replace with the user's email
// $reset_message = forgot_password($email_to_reset);
// echo $reset_message;

?>


<?php

// Assuming you have a database connection established in a file called 'db_config.php'
require_once 'db_config.php'; // Ensure this path is correct

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user requesting the reset.
 * @return bool True if a reset link was successfully sent, false otherwise.
 */
function forgot_password($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email format provided: " . $email); // Log the error
    return false;
  }

  // 2. Check if the user exists
  $user = mysqli_query($conn, "SELECT id, username FROM users WHERE email = '$email'");
  if (mysqli_num_rows($user) == 0) {
    error_log("User with email '$email' not found."); // Log the error
    return false;
  }

  // 3. Generate a unique token
  $token = bin2hex(random_bytes(32)); // Use strong random bytes

  // 4. Hash the token (important for security!)
  $hashed_token = password_hash($token, PASSWORD_DEFAULT);

  // 5. Store the token in the database
  $insert_query = "INSERT INTO password_resets (user_id, token, expires_at) VALUES ('" . mysqli_real_escape_string($conn, $user[0]['id']) . "', '$hashed_token', NOW() + INTERVAL 24 HOUR)"; // Store for 24 hours
  if (mysqli_query($conn, $insert_query)) {
    // 6. Send the reset link (implementation depends on your email sending method)
    $reset_link = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $token;
    //  You'd usually use a mail function or an email library here
    //  Example:
    //  mail($email, 'Password Reset Link', $reset_link);

    // Return true to indicate success
    return true;
  } else {
    error_log("Error inserting into password_resets table: " . mysqli_error($conn));
    return false;
  }
}


/**
 *  Example Usage (This is just an example; you'd integrate this into your login or user registration process)
 */

// Simulate a request (don't use this in a live application)
// $email = 'testuser@example.com';  // Replace with a valid email
// if (forgot_password($email)) {
//   echo "A password reset link has been sent to $email.";
// } else {
//   echo "Failed to send password reset link.";
// }


?>


<?php

// Include the database connection file (assuming you have one)
require_once 'db_connection.php'; // Replace with your actual connection file

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a reset link was generated and sent, false otherwise.
 */
function forgot_password(string $email) : bool
{
  // Validate email format (basic check)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false;
  }

  // Hash the password (for security - crucial!)
  $hashed_password = password_hash("default_password", PASSWORD_DEFAULT); // Replace "default_password" with an actual, default password for testing

  // Generate a unique reset token
  $reset_token = bin2hex(random_bytes(32));  // Use a secure random bytes function

  // Store the token and user ID in the database
  $query = "INSERT INTO password_resets (user_id, token, created_at) 
             VALUES (:user_id, :token, NOW())";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':user_id', $email);
  $stmt->bindParam(':token', $reset_token);
  $stmt->execute();

  // Send the reset link email
  $subject = 'Password Reset Link';
  $message = "Please click the following link to reset your password: " .
             '<a href="' . $_SERVER['PHP_SELF'] . '?reset=' . $reset_token . '">' .
             $_SERVER['PHP_SELF'] . '?reset=' . $reset_token . '</a>';
  $headers = 'From: webmaster@example.com' . "\r
"; // Replace with your email address

  if (mail($email, $subject, $message, $headers)) {
    return true;
  } else {
    // Handle email sending failure (log it, etc.)
    error_log("Failed to send password reset email to: " . $email);
    return false;
  }
}


/**
 * Verifies the reset token and updates the user's password.
 *
 * @param string $token The reset token.
 * @param string $new_password The new password.
 * @return bool True if the password was successfully updated, false otherwise.
 */
function verify_reset(string $token, string $new_password) : bool
{
  // Check if the token exists in the database
  $query = "SELECT user_id FROM password_resets WHERE token = ? LIMIT 1";
  $stmt = $db->prepare($query);
  $stmt->bindValue(':token', $token, PDO::PARAM_STR);
  $stmt->execute();
  $result = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$result) {
    return false; // Token not found
  }

  $user_id = $result['user_id'];

  // Hash the new password
  $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

  // Update the user's password in the database
  $query = "UPDATE users SET password = :password WHERE id = :user_id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':password', $hashed_password);
  $stmt->bindParam(':user_id', $user_id);
  $stmt->execute();

  // Delete the reset token from the database
  $query = "DELETE FROM password_resets WHERE token = ? AND user_id = ?";
  $stmt = $db->prepare($query);
  $stmt->bindValue(':token', $token, PDO::PARAM_STR);
  $stmt->bindValue(':user_id', $user_id, PDO::PARAM_INT);
  $stmt->execute();

  return true;
}



// Example Usage (For testing - this would typically be in a form submission)
//  $email = 'test@example.com';
//  if (forgot_password($email)) {
//    echo "Reset link sent to: " . $email;
//  } else {
//    echo "Failed to generate reset link.";
//  }


?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique, time-based token,
 * sends an email with a link to reset the password,
 * and then deletes the token from the database.
 *
 * @param string $email The user's email address.
 * @param string $db_host Your database host.
 * @param string $db_name Your database name.
 * @param string $db_username Your database username.
 * @param string $db_password Your database password.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email, string $db_host, string $db_name, string $db_username, string $db_password) {
    // 1. Generate a unique token
    $token = bin2hex(random_bytes(32)); // Use a secure random number generator

    // 2. Prepare the SQL query
    $sql = "INSERT INTO password_resets (email, token, expires_at) VALUES (?, ?, NOW())";

    // 3. Prepare the statement
    $stmt = db_connect($db_host, $db_name, $db_username, $db_password);

    // 4. Execute the query
    if ($stmt) {
        if ($stmt->execute([$email, $token])) {
            // 5. Send the password reset email (implementation omitted for brevity)
            //    You should replace this with your actual email sending logic.
            //    This is a placeholder to demonstrate the process.
            send_password_reset_email($email, $token); 

            // 6. Clear the statement
            $stmt->close();
            return true;
        } else {
            // Handle database error
            error_log("Error executing password reset query: " . print_last_error());
            $stmt->close();
            return false;
        }
    } else {
        // Handle database connection error
        error_log("Error connecting to database: " . print_last_error());
        return false;
    }
}


/**
 * Placeholder function for sending the password reset email.  
 * You MUST implement your own email sending logic here.
 *
 * @param string $email The user's email address.
 * @param string $token The generated token.
 */
function send_password_reset_email(string $email, string $token) {
    // Replace this with your email sending implementation.
    // This is just a placeholder.
    error_log("Password reset email sent to: " . $email . " with token: " . $token);
}


/**
 *  Placeholder function for connecting to the database.
 *  Replace this with your actual database connection logic.
 *
 * @param string $host
 * @param string $db_name
 * @param string $db_username
 * @param string $db_password
 * @return mysqli|false
 */
function db_connect(string $host, string $db_name, string $db_username, string $db_password) {
  $conn = new mysqli($host, $db_username, $db_password, $db_name);
  return $conn;
}

// Example Usage:
// Replace with your database credentials and user email
$db_host = "localhost";
$db_name = "your_database_name";
$db_username = "your_username";
$db_password = "your_password";

$user_email = "test@example.com";

if (forgot_password($user_email, $db_host, $db_name, $db_username, $db_password)) {
    echo "Password reset email has been sent to $user_email. Check your inbox!";
} else {
    echo "Failed to generate password reset token.";
}

?>


<?php

// Assuming you have a database connection established as $db

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if password reset email sent successfully, false otherwise.
 */
function forgot_password(string $email): bool
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log for debugging
        return false;
    }

    // 2. Check if User Exists
    $user = getUserByEmail($email); // Function to retrieve user by email (see implementation below)

    if ($user === null) {
        error_log("User not found with email: " . $email); // Log for debugging
        return false;
    }

    // 3. Generate a Unique Token
    $token = generate_unique_token();

    // 4. Store Token in Database (with expiration time)
    $token_id = store_token($token, $user->id); // Function to store token (see implementation below)

    if ($token_id === false) {
        error_log("Failed to store token for email: " . $email);
        return false;
    }


    // 5. Send Password Reset Email
    $reset_link = generate_reset_link($token_id); // Function to construct reset link (see implementation below)

    if (!send_password_reset_email($user->email, $reset_link)) {
        error_log("Failed to send password reset email to: " . $user->email);
        //Optionally, you might want to delete the token if the email fails to send.
        //delete_token($token_id);
        return false;
    }


    return true;
}


/**
 * Retrieves a user from the database based on their email.
 *
 * @param string $email The email address to search for.
 * @return User|null The User object if found, null otherwise.
 */
function getUserByEmail(string $email): ?User
{
    // Replace this with your actual database query
    // This is just a placeholder for demonstration.
    // Use prepared statements to prevent SQL injection!
    $db = get_database_connection(); // Assumes you have this function
    $stmt = $db->prepare("SELECT id, email FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $result = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($result) {
        return new User($result['id'], $result['email']);
    }

    return null;
}


/**
 * Generates a unique token.
 *
 * @return string A unique token.
 */
function generate_unique_token(): string
{
    return bin2hex(random_bytes(32)); //More robust than just a random number.
}

/**
 * Stores a token in the database.
 *
 * @param string $token The token to store.
 * @param int $userId The ID of the user associated with the token.
 * @return bool True if token was stored successfully, false otherwise.
 */
function store_token(string $token, int $userId): bool
{
    // Replace this with your actual database query.
    $db = get_database_connection(); // Assumes you have this function
    try {
        $stmt = $db->prepare("INSERT INTO password_tokens (user_id, token, expiry) VALUES (?, ?, ?)");
        $stmt->execute([$userId, $token, time() + (24 * 60 * 60)]); // Expires in 24 hours.  Adjust as needed.
        return true;
    } catch (PDOException $e) {
        error_log("Error storing token: " . $e->getMessage());
        return false;
    }
}


/**
 * Generates a URL for the password reset link.
 *
 * @param int $token_id The ID of the token.
 * @return string The password reset link.
 */
function generate_reset_link(int $token_id): string
{
    // Replace with your actual URL construction.
    return "/reset_password?token=" . urlencode($token_id);
}



/**
 * Sends a password reset email.
 *
 * @param string $email The email address to send the email to.
 * @param string $reset_link The password reset link.
 * @return bool True if email was sent successfully, false otherwise.
 */
function send_password_reset_email(string $email, string $reset_link): bool
{
    //Replace with your actual email sending code.
    // This is just a placeholder.  Implement using a library like PHPMailer or similar.

    //For demonstration purposes:
    error_log("Sending password reset email to: " . $email . " with link: " . $reset_link);

    //Example using PHPMailer (requires installation and configuration)
    //require_once 'vendor/PHPMailer/PHPMailer.php';
    //$mail = new PHPMailer(true);
    //$mail->isSMTP();
    //$mail->Host = 'smtp.example.com';
    //$mail->Port = 587;
    //$mail->SMTPAuth = true;
    //$mail->Username = 'your_username';
    //$mail->Password = 'your_password';
    //$mail->SetFrom('your_email@example.com', 'Your Application');
    //$mail->Subject = 'Password Reset';
    //$mail->Body = '<a href="' . $reset_link . '" >Click here to reset your password</a>';
    //$mail->AltBody = "Password reset link: " . $reset_link;
    //$mail->send();
    //return true;


    return false; // Placeholder -  Replace with actual email sending logic.
}



/**
 *  Example User Class (for demonstration)
 */
class User
{
    private $id;
    private $email;

    public function __construct(int $id, string $email)
    {
        $this->id = $id;
        $this->email = $email;
    }

    public function getId(): int
    {
        return $this->id;
    }

    public function getEmail(): string
    {
        return $this->email;
    }
}
?>


<?php

/**
 * Handles the forgot password process.
 *
 * This function generates a unique token, stores it in a database,
 * sends an email with a password reset link, and sets the token to expired.
 *
 * @param string $email The email address of the user requesting the reset.
 * @return bool True if the process was successful, false otherwise.
 */
function forgotPassword(string $email): bool
{
    // 1. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // Use a strong random bytes generator

    // 2. Store the Token in the Database
    //  Replace this with your actual database connection and table structure
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password'); // Replace with your database credentials

    try {
        $stmt = $db->prepare("INSERT INTO forgot_passwords (email, token, created_at) VALUES (:email, :token, NOW())");
        $stmt->bindParam(':email', $email);
        $stmt->bindParam(':token', $token);
        $stmt->execute();
    } catch (PDOException $e) {
        // Handle database errors gracefully.  Log the error, and return false.
        error_log("Database error: " . $e->getMessage());
        return false;
    }


    // 3. Send the Password Reset Email
    //  Replace this with your email sending logic
    $to = $email;
    $subject = 'Password Reset';
    $message = "Please click on the following link to reset your password: " . $_SERVER['PHP_SELF'] . "?token=" . urlencode($token);
    $headers = "From: your_email@example.com\r
";
    mail($to, $message, $headers);


    // 4. Set the Token to Expired (e.g., after 1 hour)
    // This prevents the token from being used indefinitely.
    //  You'll need to create a separate function to handle this.
    //  This example sets the token to expired after 60 minutes.
    //  Consider more robust expiration mechanisms.

    //  Example using setTimeout - this will only work if your server has setTimeout.
    //  For better scalability, consider using a task queue.

    //  For production, use a robust task queue system.
    //  This simple example is for demonstration purposes.
    //  Consider the security implications of setTimeout in production.

    //  Example: setTimeout (Not recommended for production - security implications)
    //  sleep(3600); // Wait for 1 hour (3600 seconds) - This will block the execution.
    //  // Then, you would need to delete the token from the database.

    return true;
}


// Example usage (for testing - remove this in production)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    if (!empty($email)) {
        if (forgotPassword($email)) {
            echo "Password reset email has been sent to " . $email;
        } else {
            echo "Failed to send password reset email. Please try again.";
        }
    } else {
        echo "Please enter your email address.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// IMPORTANT:  This is a simplified example for demonstration purposes.
// In a production environment, you MUST implement robust security measures
// like using a strong password hashing algorithm (bcrypt, Argon2) and
// sending reset links securely (HTTPS, token expiration, rate limiting).

class User {
    private $username;
    private $password; // In a real app, store *hashed* passwords
    private $email;

    public function __construct($username, $password, $email) {
        $this->username = $username;
        $this->password = $password; // Placeholder for hashing
        $this->email = $email;
    }
}

class PasswordReset {
    private $user;
    private $resetToken;

    public function __construct(User $user, $resetToken) {
        $this->user = $user;
        $this->resetToken = $resetToken;
    }
}

// Example Usage (Simulated)
// 1. User Requests Password Reset
// Assume a form submission sends the username
$username = $_POST['username'];

// 2. Validate User
$users = [
    ['username' => 'john.doe', 'password' => 'hashed_password_here', 'email' => 'john.doe@example.com'],
    ['username' => 'jane.smith', 'password' => 'hashed_password_here', 'email' => 'jane.smith@example.com'],
];

$user = null;
foreach ($users as $u) {
    if ($u['username'] === $username) {
        $user = new User($u['username'], $u['password'], $u['email']);
        break;
    }
}

if ($user === null) {
    echo "User not found.";
    exit;
}


// 3. Generate a Unique Reset Token
$resetToken = bin2hex(random_bytes(32));  // Generate a secure random token
// Store this token in your database associated with the user.
// Example (Simplified - Replace with your database interaction)
//  $db->insert('password_resets', ['user_id' => $user->getId(), 'token' => $resetToken, 'expiry' => time() + 3600]); // Store for 1 hour

// 4. Send Reset Link (Simulated)
$resetLink = "http://example.com/reset-password?token=$resetToken";
echo "A password reset link has been sent to $user->email: $resetLink<br>";

// 5.  (In a real implementation, you would handle the link click,
//      validate the token, and allow the user to set a new password.)


//  Example Reset Link Handling (This is illustrative - adapt for your logic)
if (isset($_GET['token'])) {
    $token = $_GET['token'];

    // 6. Validate Token (Crucial - Don't skip this!)
    // In a production system, you'd check if the token exists in your database,
    // if the token is valid, and if it hasn't expired.
    // Example:
    // $reset = $db->get('password_resets', ['token' => $token]);
    // if ($reset && $reset['expiry'] > time()) {
    //     // Token is valid, proceed with password reset.
    // } else {
    //     echo "Invalid or expired reset token.";
    //     exit;
    // }
}

?>


<?php

// IMPORTANT:  This is a simplified example for demonstration.
// In a production environment, you MUST:
// 1. Use a strong, secure password reset mechanism (e.g., token-based)
// 2. Hash passwords securely
// 3. Implement proper error handling and logging
// 4. Sanitize and validate all input thoroughly
// 5. Protect against brute-force attacks (e.g., rate limiting)


// Simulate a user database (replace with your actual database connection)
$users = [
    'john.doe@example.com' => ['password' => 'secret_password', 'salt' => 'random_salt'],
    'jane.smith@example.com' => ['password' => 'another_secret', 'salt' => 'another_salt']
];


function forgot_password($email) {
  // 1. Check if the email exists
  if (!isset($users[$email])) {
    return "Email not found.";
  }

  // 2. Generate a unique token (for security)
  $token = bin2hex(random_bytes(32)); // Generate a cryptographically secure random token
  // In a production environment, you'd use a more robust token generation method
  // and store the token in the database, associated with the user's email.

  // 3. Prepare reset link (for demonstration - DO NOT USE THIS IN PRODUCTION)
  $reset_url = "https://yourwebsite.com/reset_password?token=$token"; // Replace with your website URL


  // 4. Send an email to the user with the reset link
  $subject = "Password Reset Link";
  $message = "Click the link below to reset your password:
" . $reset_url;
  $headers = "From: yourwebsite@example.com\r
";  // Replace with your sender email
  mail($email, $message, $headers);  // Use mail() - better alternatives exist (see below)

  return "Password reset link sent to your email.  Check your inbox!";
}


// Example usage (for testing)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $result = forgot_password($email);
  echo "<p>" . $result . "</p>";
}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="">
    <label for="email">Enter your email address:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php
require_once 'PHPMailer/src/PHPMailer.php'; // Adjust path if necessary
use PHPMailer\PHPMailer\PHPMailer;

// ... (rest of the code)

// In the forgot_password function:
$mail = new PHPMailer(true); //Partial class instantiation
$mail->isSMTP();                       // Set Development mode which is helpful for debugging.
$mail->Host       = 'smtp.example.com';
$mail->SMTPAuth   = true;
$mail->Username   = 'your_smtp_username';
$mail->Password   = 'your_smtp_password';
$mail->Port = 587;  // Or 465 for SSL
$mail->SMART_HOST = true;
$mail->Encoding = "UTF-8";

$mail->isHTML(false);  // Set this to true if you're sending HTML content
$mail->Subject = "Password Reset Link";
$mail->Body    = "Click the link below to reset your password:
" . $reset_url;
$mail->AltBody = $mail->Body;
$mail->addAddress($email);

if ($mail->send()) {
    return "Password reset link sent to your email!";
} else {
    return "Failed to send password reset email. Error: " . $mail->ErrorInfo;
}


<?php

// Assuming you have a database connection established (e.g., $db)
// And a table named 'users' with columns 'id', 'email', 'password'

// Function to handle password reset request
function forgotPassword($email, $db) {
  // 1. Check if the email exists in the database
  $query = "SELECT id, email FROM users WHERE email = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("s", $email); // "s" indicates a string parameter
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $resetToken = generateUniqueToken(); // Create a unique token
    $resetDate = date('Y-m-d H:i:s'); // Set the expiry date for the token

    // 2. Generate a unique token and store it in the database
    $query = "UPDATE users SET reset_token = ?, reset_date = ?, reset_flag = 1 WHERE id = ?";
    $stmt = $db->prepare($query);
    $stmt->bind_param("sss", $resetToken, $resetDate, $userId);
    $stmt->execute();

    // 3. Send password reset email
    $subject = "Password Reset Request";
    $message = "Please click on the following link to reset your password: " . base_url() . "/reset-password?token=" . $resetToken; 
    $headers = "From: Your Website <noreply@yourwebsite.com>"; 

    $result = mail($email, $subject, $message, $headers);

    if ($result) {
      return true; // Success
    } else {
      return false; // Failure - email sending failed
    }
  } else {
    return false; // Email not found
  }
}


// Helper function to generate a unique token (e.g., using a random string)
function generateUniqueToken() {
  return bin2hex(random_bytes(32)); // Creates a 32-byte (256-bit) random string
}

// Example usage (within a form submission, after the user enters their email)
// $email = $_POST['email'];
// $db = $your_database_connection; //  Replace with your actual database connection

// if (isset($email)) {
//   if (forgotPassword($email, $db)) {
//     echo "Password reset email has been sent to $email.";
//   } else {
//     echo "Error: Could not send password reset email.  Check your email settings or database connection.";
//   }
// }
?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and that you've defined necessary constants like 'DB_HOST', 'DB_USER', etc.

// Function to handle the forgot password process
function forgot_password($email) {
  // 1. Validate the email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return 'Invalid email address.';
  }

  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32));

  // 3. Hash the token (important for security)
  $hashed_token = password_hash($token, PASSWORD_DEFAULT);

  // 4.  Store the token and timestamp in the database
  $query = "INSERT INTO forgot_password_tokens (email, token, hashed_token, created_at) 
            VALUES ('$email', '$token', '$hashed_token', NOW())";

  if (!mysqli_query($db, $query)) {  // Replace 'db' with your database connection
    return 'Error inserting token into database.';
  }

  // 5.  Send the password reset email (you'll need to implement this)
  $to = $email;
  $subject = 'Password Reset Request';
  $message = 'Please click on the following link to reset your password: ' . '<a href="' . $_SERVER['PHP_SELF'] . '?reset=' . $token . '">' . 'Reset Password' . '</a>';
  $headers = 'From: your_email@example.com' . "\r
";

  if (mail($to, $message, $headers)) {
    return 'Password reset email sent to ' . $email;
  } else {
    return 'Failed to send password reset email.';
  }
}


// Example usage (within a form or other script)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $reset_link = forgot_password($email);

  echo "<p>" . $reset_link . "</p>";
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" style="width:300px;">
    <label for="email">Email Address:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Request Password Reset</button>
  </form>

</body>
</html>


$query = "SELECT * FROM forgot_password_tokens WHERE token = '$token' AND hashed_token = '$hashed_token'";
$result = mysqli_query($db, $query);

if ($result) {
    $user_data = mysqli_fetch_assoc($result);
    $expiration_time = strtotime('+1 hour', $user_data['created_at']); // Expire after 1 hour
    $current_time = time();

    if ($current_time > $expiration_time) {
        // Token has expired
        echo "Token has expired. Please request a new password reset.";
        return false;
    }
    // ... (Continue with password reset process)
}


<?php

// Assuming you have a database connection established
// $db = new mysqli($host, $username, $password, $database);
// if ($db->connect_error) {
//     die("Connection failed: " . $db->connect_error);
// }

// Function to handle the forgot password process
function forgotPassword($email, $newPassword, $db) {
    // 1. Validate Email (Optional but recommended)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email format.";
    }

    // 2. Check if the email exists in the database
    $stmt = $db->prepare("SELECT id, email FROM users WHERE email = ?");
    $email_to_check = $email;
    $stmt->bind_param("s", $email_to_check); // 's' indicates a string parameter
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        return "User not found.";
    }

    $user = $result->fetch_assoc();
    $stmt->close();

    // 3. Generate a unique token or use a hashed password reset token
    $token = bin2hex(random_bytes(32)); // Generate a random, secure token.  Consider a more robust method if security is paramount.

    // 4. Hash the token for security
    $hashed_token = password_hash($token, PASSWORD_DEFAULT);

    // 5. Update the user's record with the hashed token
    $stmt = $db->prepare("UPDATE users SET password_reset_token = ? WHERE email = ?");
    $stmt->bind_param("ss", $hashed_token, $email);
    $stmt->execute();

    if (!$stmt->affected_rows > 0) {
        $stmt->close();
        return "Failed to update password reset token.";
    }

    $stmt->close();

    // 6. Send an email with the reset link
    $subject = "Password Reset Link";
    $message = "Please click on the following link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=" . urlencode($token) . "'>Reset Password</a>"; // Include the reset token in the URL
    $headers = "From: your_email@example.com";  // Replace with your email address

    mail($email, $subject, $message, $headers);

    // 7. Return a success message
    return "Password reset link sent to your email.";
}

// Example Usage (Simulated for demonstration)
//  This would typically be handled by a form submission.
//  For demonstration, let's simulate getting email and new password.
//  In a real application, you'd get this data from a form.
$email = "test@example.com"; // Replace with the user's email
$newPassword = "P@sswOrd123";  // Replace with the desired new password

// Simulate the database connection
// For demonstration, we create a mock database object
class MockDB {
    public function prepare($query) {
        // In a real application, this would use a prepared statement
        // For demonstration, we'll just return a dummy result
        return null;
    }

    public function bind_param($type, $value) {
        // Do nothing for demonstration
    }

    public function execute() {
        // Dummy result for demonstration
        return array(
            'num_rows' => 1, // Assume user exists
            'fetch_assoc' => function() {
                return array(
                    'id' => 1,
                    'email' => 'test@example.com'
                );
            }
        );
    }

    public function affected_rows() {
        return 1;
    }

    public function close() {
        // Do nothing for demonstration
    }
}
$db = new MockDB();


$result = forgotPassword($email, $newPassword, $db);
echo $result;

?>


<?php

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user.
 * @return bool True if the password was reset successfully, false otherwise.
 */
function resetPassword(string $email)
{
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email address provided.");
    return false;
  }

  // 2. Check if user exists
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  if ($conn->connect_error) {
    error_log("Connection failed: " . $conn->connect_error);
    return false;
  }

  $sql = "SELECT id, email FROM users WHERE email = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("s", $email);  // 's' indicates a string parameter
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    error_log("User with email $email not found.");
    $stmt->close();
    $conn->close();
    return false;
  }

  $user = $result->fetch_assoc();
  $userId = $user['id'];
  $stmt->close();

  // 3. Generate a unique token for the password reset.  This is *crucial* for security.
  $resetToken = bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator

  // 4.  Store the token in the database
  $sql = "UPDATE users SET reset_token = ? WHERE id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("ss", $resetToken, $userId);
  if ($stmt->execute() === false) {
      error_log("Error updating user with reset token: " . $stmt->error);
      $stmt->close();
      $conn->close();
      return false;
  }

  // 5. Send the reset link to the user's email.  This is separate from the function for better control.
  //    (Implementation omitted for brevity - you'd typically use a mail function or a service like SendGrid).
  //    Example email content:
  //    "Click this link to reset your password: http://yourwebsite.com/reset_password.php?token=$resetToken"

  // 6.  Close the connection
  $conn->close();

  return true;
}


// Example Usage (for testing - should be removed from production code)
//  Don't call this from a public-facing form - this is just for demonstration.
if (isset($_POST['reset_email'])) {
  $email = $_POST['reset_email'];
  if (resetPassword($email)) {
    echo "Password reset link sent to $email";
  } else {
    echo "Failed to reset password.";
  }
}
?>

<!-- HTML Form for triggering the reset (example only) -->
<form method="post" action="">
  <label for="reset_email">Enter Email Address:</label>
  <input type="text" id="reset_email" name="reset_email">
  <button type="submit">Reset Password</button>
</form>


<?php

// Database connection details (replace with your actual details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Function to handle password reset requests
function forgotPassword($email) {
  // 1. Validate Email (Basic Check)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if user exists
  $conn = new mysqli($host, $username, $password, $database);
  if ($conn->connect_error) {
    return "Connection failed: " . $conn->connect_error;
  }

  $sql = "SELECT id, email FROM users WHERE email = '$email'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $hashedToken = generateResetToken($userId); // Generate a unique token
    $resetLink = generateResetLink($userId, $hashedToken); // Create the reset link

    // 3. Store the token in the database
    $sql = "INSERT INTO password_resets (user_id, token, expires_at) VALUES ($userId, '$hashedToken', NOW())";
    if ($conn->query($sql) === TRUE) {
      // 4. Send Password Reset Email
      $to = $email;
      $subject = "Password Reset";
      $message = "Click on the following link to reset your password: " . $resetLink;
      $headers = "From: your_email@example.com" . "\r
";

      if (mail($to, $subject, $message, $headers)) {
        return "Password reset email sent to $email.  Check your inbox.";
      } else {
        return "Password reset email failed to send.  Check your server logs.";
      }

    } else {
      return "Error inserting token into database: " . $conn->error;
    }
  } else {
    return "User with email $email not found.";
  }

  // Close the connection
  $conn->close();
}


// Helper Functions (Implement these)

// Function to generate a unique token (e.g., using UUID)
function generateResetToken() {
  return bin2hex(random_bytes(32)); // Generate a 32-byte random string
}

// Function to generate the reset link
function generateResetLink($userId, $token) {
  return "/reset_password?userId=$userId&token=$token";  // Adjust the URL accordingly
}



// Example Usage (for testing)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $response = forgotPassword($email);
  echo "<p>" . $response . "</p>";
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>
  <h1>Forgot Password</h1>
  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>
</body>
</html>


<?php

// Replace with your database credentials
define('DB_HOST', 'localhost');
define('DB_USER', 'your_db_user');
define('DB_PASSWORD', 'your_db_password');
define('DB_NAME', 'your_db_name');

// Function to reset password
function reset_password($email) {
  // 1. Connect to the database
  $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

  // Check connection
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32));

  // 3. Prepare the SQL query to set the token
  $sql = "UPDATE users SET reset_token = '$token' WHERE email = '$email'";

  // 4. Execute the query
  if ($conn->query($sql) === TRUE) {
    // 5. Send a reset password email (Example - needs to be adapted to your email sending logic)
    $to = $email;
    $subject = 'Password Reset';
    $message = "Click on this link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'>" . $_SERVER['PHP_SELF'] . "?reset=$token</a>";
    $headers = "From: your_email@example.com"; // Replace with your email address

    mail($to, $subject, $message, $headers);

    echo "Password reset link has been sent to $email. Please check your inbox.";
  } else {
    echo "Error resetting password. Query failed: " . $conn->error;
  }

  // 6. Close the connection
  $conn->close();
}

// Example usage (This part is for testing, you'll handle this through your form)
// If you need to test it without a form, you can call it like this:
// reset_password("testuser@example.com"); // Replace with a valid email
?>

<!DOCTYPE html>
<html>
<head>
  <title>Password Reset</title>
</head>
<body>

  <h1>Password Reset</h1>

  <form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

  <?php
    if (isset($_POST['email'])) {
      reset_password($_POST['email']);
    }
  ?>

</body>
</html>


<?php

// Assuming you have a database connection established and defined as $db

// Function to handle forgot password requests
function forgot_password($email) {
  // 1. Validate email format (basic check - improve for production)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if the user exists
  $user = getUserByEmail($email); // Assuming you have a getUserByEmail function

  if (!$user) {
    return "User not found.";
  }

  // 3. Generate a unique token
  $token = generate_unique_token();

  // 4. Store the token and expiry time in the database
  //  - This is crucial for security.  Don't store the actual password!
  //  - Use a hashed token
  store_token($user['id'], $token, time() + 3600); // Store for 1 hour (3600 seconds)

  // 5. Send the password reset email
  $subject = "Password Reset Request";
  $message = "Click on the following link to reset your password: <a href='" . generate_reset_link($user['id'], $token) . "'>Reset Password</a>";
  $headers = "From: your_website@example.com\r
"; // Replace with your email address
  
  mail($email, $subject, $message, $headers);

  return "Password reset email sent.  Please check your inbox.";
}

// -------------------------------------------------------------------
// Helper functions (replace with your actual implementation)
// -------------------------------------------------------------------

// Dummy function to get user by email - REPLACE WITH YOUR DATABASE QUERY
function getUserByEmail($email) {
  // Replace this with your actual database query to fetch user by email
  // Example using a placeholder (replace with your actual database connection)
  $users = [
    ['id' => 1, 'email' => 'user1@example.com', 'password' => 'password123'],
    ['id' => 2, 'email' => 'user2@example.com', 'password' => 'anotherpass']
  ];

  foreach ($users as $user) {
    if ($user['email'] == $email) {
      return $user;
    }
  }
  return null; // User not found
}

// Dummy function to generate a unique token - IMPROVE FOR PRODUCTION!
function generate_unique_token() {
  return bin2hex(random_bytes(32)); // Use a cryptographically secure random source
}

// Dummy function to store the token in the database - REPLACE WITH YOUR DATABASE CODE
function store_token($user_id, $token, $expiry_time) {
  // Replace this with your actual database code to store the token and expiry
  // This is a simplified example - use prepared statements to prevent SQL injection
  // Example (using MySQLi - adapt to your database library)
  // $stmt = $db->prepare("INSERT INTO password_resets (user_id, token, expiry_time) VALUES (?, ?, ?)");
  // $stmt->bind_param("sisi", $user_id, $token, $expiry_time);
  // $result = $stmt->execute();
  // ... handle the result
}

// Dummy function to generate the reset link - REPLACE WITH YOUR DATABASE CODE
function generate_reset_link($user_id) {
  // This should generate a URL to a page where the user can enter the new password.
  // The URL should include the user ID and the token.
  // For example:  /reset_password.php?id=[user_id]&token=[token]
  return "/reset_password.php?id=" . $user_id;
}

// -------------------------------------------------------------------
// Example Usage (for testing)
// -------------------------------------------------------------------

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $response = forgot_password($email);
  echo "<p>" . $response . "</p>";
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>
  <h1>Forgot Password</h1>
  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Request Password Reset</button>
  </form>
</body>
</html>


<?php

// This is a simplified example.  In a production environment,
// you should use a more secure method like sending an email with a
// unique, time-limited token.

/**
 * Forgets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password.
 *
 * @return bool True if the password was reset successfully, false otherwise.
 */
function forgotPassword(string $email, string $newPassword): bool
{
  // 1.  Check if the email exists in the database.
  $user = get_user_by_email($email);

  if (!$user) {
    // User doesn't exist.
    return false;
  }

  // 2.  Hash the new password.  IMPORTANT! Never store passwords in plain text.
  $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);

  // 3.  Update the user's password in the database.
  $result = update_user_password($user->id, $hashedPassword);

  if (!$result) {
    // Failed to update the password.
    return false;
  }

  // 4. Optionally, send a confirmation email (recommended).
  send_reset_password_email($user->email);

  return true;
}


// --- Helper functions (Dummy implementations - replace with your actual database logic) ---

/**
 * Retrieves a user by their email address.
 * @param string $email
 * @return object|null  User object if found, null otherwise.
 */
function get_user_by_email(string $email): ?object
{
  // Replace this with your database query logic.
  // This is just a dummy implementation.
  $users = [
    (object)['id' => 1, 'email' => 'test@example.com', 'name' => 'Test User']
  ];

  foreach ($users as $user) {
    if ($user->email === $email) {
      return $user;
    }
  }
  return null;
}

/**
 * Updates the user's password in the database.
 * @param int $userId
 * @param string $hashedPassword
 * @return bool True if update successful, false otherwise.
 */
function update_user_password(int $userId, string $hashedPassword): bool
{
  // Replace this with your database update logic.
  // This is a placeholder - it just simulates a successful update.
  // In a real implementation, this would interact with your database.

  // Simulate a database update.
  return true;
}

/**
 * Sends a password reset email to the user.
 * @param string $email
 */
function send_reset_password_email(string $email): void
{
  // Replace this with your email sending logic.
  // This is just a placeholder.
  echo "Sending password reset email to: " . $email . "
";
}



// --- Example Usage ---

// Simulate a user requesting a password reset.
$email = 'test@example.com';
$newPassword = 'MyNewPassword123';

if (forgotPassword($email, $newPassword)) {
  echo "Password reset request submitted successfully for: " . $email . "
";
} else {
  echo "Password reset request failed for: " . $email . "
";
}


?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user.
 * @return bool True if a reset link was generated and emailed, false otherwise.
 */
function forgotPassword(string $email)
{
    // 1. Validate Input
    if (empty($email)) {
        error_log("Forgot Password: Empty email provided.");  // Log for debugging
        return false;
    }

    // 2. Retrieve User
    $user = getUserByEmail($email);

    if (!$user) {
        error_log("Forgot Password: User with email '$email' not found."); // Log for debugging
        return false;
    }

    // 3. Generate a Unique Token and Timestamp
    $token = generateUniqueToken();
    $timestamp = time();

    // 4. Store Token and Timestamp in Database
    $reset_token = [
        'token' => $token,
        'user_id' => $user['id'],
        'timestamp' => $timestamp,
        'expiry' => time() + (24 * 60 * 60) // Token expires after 24 hours
    ];

    // Assuming you have a database table named 'password_resets'
    //  and a 'password_resets' table with columns: id, token, user_id, timestamp, expiry
    //  Use your database connection here to insert the $reset_token array into the password_resets table.
    // Example:
    // $db->insert('password_resets', $reset_token);

    // Simulate database insertion (replace with your actual database code)
    // Note: This is for demonstration purposes only and is NOT a safe replacement for real database interactions.
    $db->insert('password_resets', $reset_token);


    // 5. Generate Reset Link
    $reset_link = appUrl() . '/reset-password?token=' . $token;  // Adjust appUrl() to your application's URL

    // 6. Email Reset Link
    $subject = "Password Reset Link";
    $message = "Click the following link to reset your password: " . $reset_link;
    $headers = "From: " . appName() . " <" . appEmail() . ">\r
"; // Adjust appName() and appEmail()
    $sent = sendEmail($email, $subject, $message, $headers);

    if ($sent) {
        return true;
    } else {
        error_log("Forgot Password: Email not sent for user '$email'."); //Log for debugging
        return false;
    }
}

/**
 * Placeholder function for getting user by email.  Implement this to connect to your database.
 *
 * @param string $email The email address to search for.
 * @return array|null  An array containing user data if found, or null if not.
 */
function getUserByEmail(string $email)
{
    // **Replace this with your database query**
    // Example:
    // $result = $db->query("SELECT * FROM users WHERE email = '$email'");
    // if ($result->num_rows > 0) {
    //   $user = $result->fetch_assoc();
    //   return $user;
    // } else {
    //   return null;
    // }

    // Simulate a user
    $users = [
        ['id' => 1, 'email' => 'test@example.com', 'password' => 'hashed_password']
    ];
    foreach ($users as $user) {
        if ($user['email'] == $email) {
            return $user;
        }
    }
    return null;
}


/**
 * Placeholder function for generating a unique token.
 *
 * @return string  A unique token.
 */
function generateUniqueToken()
{
    return bin2hex(random_bytes(32)); // Use a strong random number generator.
}

/**
 * Placeholder for appUrl function.  Implement this to return your application's URL.
 *
 * @return string The base URL of your application.
 */
function appUrl()
{
    return 'http://localhost/my-app/'; // Replace with your application's URL.
}

/**
 * Placeholder for appName function.  Implement this to return your application's name.
 *
 * @return string The name of your application.
 */
function appName()
{
    return 'My Application';
}

/**
 * Placeholder for appEmail function.  Implement this to return your application's email address.
 *
 * @return string The email address for your application.
 */
function appEmail()
{
    return 'admin@example.com';
}


/**
 * Placeholder for sendEmail function.  Implement this to send emails.
 *
 * @param string $to       The email address to send to.
 * @param string $subject  The email subject.
 * @param string $message  The email body.
 * @param string $headers  Email headers.
 *
 * @return bool True on success, false on failure.
 */
function sendEmail(string $to, string $subject, string $message, string $headers)
{
    // **Replace this with your email sending code (e.g., using PHPMailer)**

    //Example using PHPMailer (assuming you have it installed and configured):
    // $mail = new PHPMailer(true);
    // $mail->SetFrom('admin@example.com', 'My Application');
    // $mail->AddAddress($to);
    // $mail->SetSubject($subject);
    // $mail->MsgBody($message, 'text/html'); // or 'text/plain'
    // $mail->AddAttachment('attachment.jpg', 'image.jpg');
    // $mail->AltBody = "Alternative text";
    // if ($mail->send()) {
    //     return true;
    // } else {
    //     return false;
    // }


    // Simulate email sending.
    error_log("Email sent to " . $to);
    return true;
}


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique, time-based token and sends an email
 * containing a link to reset the password.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @param string $baseUrl The base URL of your website or application. This is used to construct the reset link.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $baseUrl): bool
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided.");
        return false;
    }

    // 2. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // Use a strong, random token
    // This creates a 64-character hexadecimal string.

    // 3.  Store the Token (Database or Session - We'll use a database for persistence)
    //  - Create a database table if one doesn't exist (example)
    //  - Add a new row to the table with the user's email and token.

    // This example assumes you have a 'users' table with 'email' and 'password_reset_token' columns
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    try {
        // Check if the email already has a reset token
        $stmt = $db->prepare("SELECT id FROM users WHERE email = ?");
        $stmt->execute([$email]);
        $user_id = $stmt->fetchColumn();

        if ($user_id) {
            // Token already exists, update it
            $stmt = $db->prepare("UPDATE users SET password_reset_token = ? WHERE email = ?");
            $stmt->execute([$token, $email]);

            // Optional:  Set an expiration time for the token (e.g., 1 hour)
            // You'll likely want to add a column 'expiration_time' to your 'users' table
            // and update it here.  For simplicity, we're not doing that in this example.


        } else {
            // Insert a new row if the email doesn't exist
            $stmt = $db->prepare("INSERT INTO users (email, password_reset_token) VALUES (?, ?)");
            $stmt->execute([$email, $token]);
        }

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        return false;
    }



    // 4. Generate the Reset Link
    $resetLink = $baseUrl . "/reset_password?token=" . $token;

    // 5. Send the Email (Replace with your email sending logic)
    //   This is a placeholder.  You'll need to implement your email sending function.
    $subject = "Password Reset Request";
    $message = "Click the link below to reset your password:
" . $resetLink;
    $headers = "From: Your Website <your.email@example.com>\r
";

    // Example email sending (replace with your actual implementation)
    // $success = sendEmail($email, $subject, $message, $headers);

    // Placeholder - return true to indicate success.  You'll need to implement the email sending.
    return true;
}

/**
 * Placeholder for email sending.  Replace with your actual implementation.
 *
 * @param string $to The email address.
 * @param string $subject The email subject.
 * @param string $body The email body.
 * @param array $headers Headers for the email.
 * @return bool True on success, false on failure.
 */
function sendEmail(string $to, string $subject, string $body, array $headers): bool
{
    // This is just a placeholder. Implement your email sending logic here.
    // You'll likely use a library like PHPMailer or SwiftMailer.

    // Example: (Replace this with actual sending code)
    // error_log("Simulating email sending: " . $to);
    return true; //  Always return true for this example.
}


// Example Usage:
$baseUrl = "http://example.com"; // Replace with your website's base URL

$email = "test@example.com";  // Replace with the user's email address

if (forgotPassword($email, $baseUrl)) {
    echo "Password reset email has been sent to " . $email . ".";
} else {
    echo "Failed to generate password reset link.";
}

?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and have the necessary credentials.  This is a simplified example.

/**
 * Forgets a user's password.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @return bool True if a reset email was sent, false otherwise.
 */
function forgotPassword(string $email)
{
    // 1. Validate Email (Important for Security)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log the invalid email
        return false;
    }

    // 2. Check if the user exists
    $user = getUserByEmail($email); // Implement this function (see example below)

    if ($user === false) {
        error_log("User with email " . $email . " not found.");
        return false;
    }

    // 3. Generate a unique reset token
    $resetToken = generateUniqueToken();

    // 4. Store the token and user ID in the database (temporary)
    $result = storeTokenForUser($user['id'], $resetToken); // Implement this function

    if ($result === false) {
        error_log("Failed to store token for user " . $email);
        return false;
    }


    // 5. Send the password reset email
    $subject = "Password Reset Request";
    $message = "Please click the following link to reset your password: " .  base_url() . "/reset_password?token=" . urlencode($resetToken);
    $headers = "From: " . getSenderEmail() . "\r
";
    $sent = sendEmail($email, $subject, $message, $headers);

    if (!$sent) {
        error_log("Failed to send email for user " . $email);
        // Optional:  You might want to delete the token if the email sending fails,
        // to prevent the token from being used indefinitely.
        deleteTokenFromDB($user['id'], $resetToken);
        return false;
    }

    return true;
}


/**
 * Placeholder function to get a user by email.  Replace with your actual DB query.
 *
 * @param string $email The email address to search for.
 * @return array|bool An associative array representing the user data, or false if not found.
 */
function getUserByEmail(string $email)
{
    // **Replace this with your actual database query**
    // This is just an example, adjust to your database schema and driver.
    // For example, using MySQLi:
    // $query = "SELECT id, username, email FROM users WHERE email = ?";
    // $stmt = $db->prepare($query);
    // $stmt->bind_param("s", $email);
    // $stmt->execute();
    // $result = $stmt->get_result()->fetch_assoc();
    // $stmt->close();

    // This is a dummy example:
    $users = [
        ['id' => 1, 'username' => 'testuser', 'email' => 'test@example.com'],
        ['id' => 2, 'username' => 'anotheruser', 'email' => 'another@example.com']
    ];
    foreach ($users as $user) {
        if ($user['email'] === $email) {
            return $user;
        }
    }
    return false;
}



/**
 * Placeholder function to generate a unique token.  Use a robust random string generator.
 *
 * @return string A unique token.
 */
function generateUniqueToken() {
    return bin2hex(random_bytes(32)); // Creates a 32-byte random string
}



/**
 * Placeholder function to store the token in the database.  Replace with your actual DB insertion.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token to store.
 * @return bool True on success, false on failure.
 */
function storeTokenForUser(int $userId, string $token) {
    // **Replace this with your actual DB insertion**
    // For example, using MySQLi:
    // $query = "INSERT INTO password_tokens (user_id, token, expiry_date) VALUES (?, ?, ?)";
    // $stmt = $db->prepare($query);
    // $stmt->bind_param("iii", $userId, $token, date('Y-m-d', time() + 3600)); // Expires in 1 hour
    // $result = $stmt->execute();
    // $stmt->close();

    // Dummy example (doesn't persist data - just for demonstration)
    return true;
}


/**
 * Placeholder function to delete the token from the database.  Important for security.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token to delete.
 * @return bool True on success, false on failure.
 */
function deleteTokenFromDB(int $userId, string $token) {
    // **Replace this with your actual DB query**
    // For example, using MySQLi:
    // $query = "DELETE FROM password_tokens WHERE user_id = ? AND token = ?";
    // $stmt = $db->prepare($query);
    // $stmt->bind_param("is", $userId, $token);
    // $result = $stmt->execute();
    // $stmt->close();
    // Dummy example
    return true;
}


/**
 * Placeholder function to send the password reset email. Replace with your email sending logic.
 *
 * @param string $to       The recipient's email address.
 * @param string $subject  The email subject.
 * @param string $message  The email body.
 * @param string $headers  The email headers.
 * @return bool True on success, false on failure.
 */
function sendEmail(string $to, string $subject, string $message, string $headers) {
    // **Replace this with your actual email sending logic**
    //  This is just a placeholder to simulate success or failure
    //  Use a proper email library (e.g., PHPMailer) for real email sending
    //  Example:
    //  $mail = new PHPMailer(true);
    //  $mail->addAddress($to);
    //  $mail->setFrom("youremail@example.com", "Your Name");
    //  $mail->addReplyTo("youremail@example.com");
    //  $mail->Subject = $subject;
    //  $mail->MsgBody = $message, "UTF-8";
    //  return $mail->send();

    return true;  // Simulating success
}


function getSenderEmail() {
    return "noreply@example.com";
}

// Example Usage (Demonstration)
// In a real application, you would collect the email from a form.
// For this example, we'll hardcode it.
$emailToReset = 'test@example.com';  // Replace with the actual email

if (forgotPassword($emailToReset)) {
    echo "Password reset email sent to " . $emailToReset;
} else {
    echo "Failed to send password reset email to " . $emailToReset;
}

?>


<?php

// Assume you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a reset token was sent, false otherwise.
 */
function forgotPassword(string $email)
{
    // 1. Validate Input (Important!)
    if (empty($email)) {
        error_log("Invalid email address provided for forgot password request.");
        return false;
    }

    // Sanitize the email (add more robust validation if needed)
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);

    if (empty($email)) {
        error_log("Invalid email address provided for forgot password request.");
        return false;
    }

    // 2. Check if User Exists
    $user = getUserByEmail($email); // Assuming you have a function to retrieve a user by email

    if ($user === false) {
        error_log("User not found with email: " . $email);
        return false;
    }


    // 3. Generate a Unique Token
    $token = generateUniqueToken();

    // 4. Store Token in Database (for the user)
    // Store the token associated with the user's ID.
    //  Consider storing expiry time as well.
    saveTokenToDatabase($user['id'], $token); // Assuming you have a function for this

    // 5.  Send Password Reset Email
    $resetLink = generateResetLink($token); // Generate the link with the token.
    sendPasswordResetEmail($user['email'], $resetLink);  // Send the email.

    return true;
}

/**
 *  Example placeholder functions - REPLACE with your actual implementations
 */

/**
 *  Placeholder function to get a user by email.  Replace with your database query.
 *
 * @param string $email
 * @return array|false User data or false if not found.
 */
function getUserByEmail(string $email): array|false
{
    // Replace with your actual database query.
    // Example (Illustrative - adapt to your database):
    // $result = mysqli_query($db, "SELECT id, email FROM users WHERE email = '$email'");
    // if (mysqli_num_rows($result) > 0) {
    //     $row = mysqli_fetch_assoc($result);
    //     return $row;
    // }
    // return false;
    return false;
}



/**
 * Placeholder function for generating a unique token.
 *  This could be a UUID, a random string, etc.
 * @return string
 */
function generateUniqueToken(): string
{
    return bin2hex(random_bytes(32)); // Example:  Generate a 32-byte random hex string
}



/**
 * Placeholder for generating the reset link.  This would typically include the token and a URL.
 * @param string $token
 * @return string
 */
function generateResetLink(string $token): string
{
    return 'https://yourwebsite.com/reset-password?token=' . $token;
}



/**
 * Placeholder for sending the password reset email.
 * @param string $email
 * @param string $resetLink
 */
function sendPasswordResetEmail(string $email, string $resetLink): void
{
    // Implement your email sending logic here.
    // This would involve connecting to an SMTP server and sending the email.
    error_log("Password reset email sent to: " . $email . " with link: " . $resetLink);
}


/**
 * Placeholder for saving the token in the database.
 *  Replace with your actual database insert code.
 * @param int $userId
 * @param string $token
 */
function saveTokenToDatabase(int $userId, string $token): void
{
    // Replace with your database insert code.
    // Example (Illustrative):
    // mysqli_query($db, "INSERT INTO password_tokens (user_id, token, expiry_date) VALUES ('$userId', '$token', NOW())");
    error_log("Token saved to database for user ID: " . $userId);
}



// Example Usage:
$email = "testuser@example.com"; // Replace with the user's email.
if (forgotPassword($email)) {
    echo "Password reset email sent to $email.";
} else {
    echo "Failed to send password reset email.";
}
?>


<?php

// This is a simplified example. In a real-world application,
// you should use a secure method for generating and sending
// passwords, and store the reset token securely.

// 1.  Handle the request:
//  - Check if a 'token' parameter is present in the URL. This is the
//    token that the user will use to reset their password.
//  - Check if a 'email' parameter is present in the URL. This is the
//    user's email address.

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $token = $_POST["token"];

    // Validate email (basic check - customize for your needs)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        echo "Invalid email address.";
        exit;
    }

    // 2.  Retrieve the token from your storage (e.g., database, session)
    //    For this example, we'll simulate a database retrieval.
    //    In reality, you'll need to fetch the token based on the email.
    $token_from_db = 'unique_reset_token_123'; // Simulate a token from the database.  **IMPORTANT: NEVER HARDCODE PASSWORDS OR SENSITIVE DATA IN REAL APPLICATIONS!**

    // 3.  Check if the token is valid.
    if ($token == $token_from_db) {
        // 4.  Generate a new password (using a strong password generator)
        $new_password = generate_strong_password();  // Implement your password generation function

        // 5.  Update the user's password in the database
        //    IMPORTANT: This should be done securely, using prepared statements
        //    to prevent SQL injection.
        //    The following is a placeholder.  Replace with your database update query.
        $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_db_user', 'your_db_password');
        $stmt = $db->prepare("UPDATE users SET password = :password, reset_password_token = NULL WHERE email = :email");  // Set reset_password_token to NULL
        $stmt->execute(['password' => $new_password, 'email' => $email]);


        echo "Password reset successful! Please check your email for instructions.";
    } else {
        echo "Invalid token. Please try again.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <label for="token">Token:</label>
        <input type="text" id="token" name="token" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db connection)

/**
 * Forgets a user's password.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email): bool
{
    // 1. Validate Input
    if (empty($email)) {
        error_log("Forgot Password: Empty email provided."); // Log for debugging
        return false;
    }

    // Sanitize the email address to prevent SQL injection
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);

    if (filter_var($email, FILTER_VALIDATE_EMAIL) === false) {
        error_log("Forgot Password: Invalid email format provided.");
        return false;
    }

    // 2. Check if the user exists
    $user = getUserByEmail($email);  // Implement this function (see below)

    if ($user === false) {
        error_log("Forgot Password: User not found with email: " . $email);
        return false;
    }

    // 3. Generate a unique token
    $token = generateUniqueToken();

    // 4. Store the token in the database associated with the user
    //  (This is the crucial part – adapt to your database schema)
    $result = storeToken($user['id'], $token); // Implement this function (see below)

    if (!$result) {
        error_log("Forgot Password: Failed to store token for user: " . $email);
        return false;
    }


    // 5. Send the password reset email
    //  (Implement this function – sendmail, etc.)
    sendPasswordResetEmail($user['email'], $token);


    return true;
}



/**
 * Helper function to get a user by their email.  This is a placeholder.
 *  You must implement this function based on your database structure.
 *
 * @param string $email The email address of the user.
 * @return bool|array The user object if found, false if not found.
 */
function getUserByEmail(string $email): bool|array
{
    // Replace this with your database query.  This is just a dummy example.
    // Assuming a table named 'users' with columns 'id', 'email', 'password', etc.
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    $stmt = $db->prepare("SELECT * FROM users WHERE email = :email");
    $stmt->bindParam(':email', $email);
    $stmt->execute();

    if ($stmt->rowCount() > 0) {
        $stmt->fetch(PDO::FETCH_ASSOC);  // Get the first row as an associative array
        return $stmt->fetch(PDO::FETCH_ASSOC);
    } else {
        return false;
    }
}


/**
 * Helper function to generate a unique token.
 *  This could use a library or a simple random string generator.
 *
 * @return string A unique token.
 */
function generateUniqueToken(): string
{
    return bin2hex(random_bytes(32)); // Example - generates a 32-byte (256-bit) random string.
}



/**
 * Helper function to store the token in the database.
 *
 * @param int $userId The ID of the user.
 * @param string $token The unique token.
 * @return bool True on success, false on failure.
 */
function storeToken(int $userId, string $token): bool
{
    // Replace with your database code to store the token.
    // Example (using PDO):

    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    $stmt = $db->prepare("INSERT INTO user_tokens (user_id, token, expires_at) VALUES (:user_id, :token, :expires_at)");
    $expires_at = date('Y-m-d H:i:s', time() + 3600); // Token expires in 1 hour
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':token', $token);
    $stmt->bindParam(':expires_at', $expires_at);
    return $stmt->execute();
}



/**
 * Helper function to send the password reset email.
 *
 * @param string $email The email address of the user.
 * @param string $token The unique token.
 * @return void
 */
function sendPasswordResetEmail(string $email, string $token)
{
    //  Replace with your email sending logic (e.g., sendmail, SMTP, etc.)
    $subject = "Password Reset Request";
    $message = "Please click on the following link to reset your password: " . "<a href='" . base_url() . "/reset_password?token=" . $token . "'>Reset Password</a>";

    // Example using mail() - may need to configure your server properly
    mail($email, $subject, $message);
}

// Example Usage (For testing - replace with your actual logic)
// if (isset($_POST['email'])) {
//     $email = $_POST['email'];
//     if (forgotPassword($email)) {
//         echo "Password reset email has been sent to " . $email;
//     } else {
//         echo "Failed to process password reset request.";
//     }
// }

?>


<?php

/**
 * Resets a user's password.
 *
 * This function generates a unique token, emails the user with a reset link,
 * and optionally sets the password in the database.
 *
 * @param string $email The email address of the user requesting the password reset.
 * @param string $newPassword The new password for the user.
 * @param string $token  A unique token generated to verify the reset request.
 * @param PDO $pdo     The database connection object.
 *
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $newPassword, string $token, PDO $pdo)
{
    // 1. Check if the email exists in the database
    $stmt = $pdo->prepare("SELECT id FROM users WHERE email = :email");
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    $stmt->execute();
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        // Email doesn't exist
        return false;
    }

    // 2. Generate a unique token
    $generatedToken = bin2hex(random_bytes(32)); // Generate a cryptographically secure token

    // 3. Update the user's record with the token
    $stmt = $pdo->prepare("UPDATE users SET password = :password, reset_token = :token WHERE id = :user_id");
    $stmt->bindParam(':password', $newPassword, PDO::PARAM_STR);
    $stmt->bindParam(':token', $generatedToken, PDO::PARAM_STR);
    $stmt->bindParam(':user_id', $user['id'], PDO::PARAM_INT);
    $result = $stmt->execute();

    if (!$result) {
        // Error updating the database
        return false;
    }

    // 4.  Send the reset password email (implementation left as exercise - see comments)
    //    This is just a placeholder to show where this part would go.
    sendResetPasswordEmail($email, $generatedToken);

    return true;
}

/**
 * Placeholder function to send a reset password email.
 *  This function would contain the logic to send an email with the reset link.
 *
 * @param string $email        The email address of the user.
 * @param string $resetToken The unique token generated.
 *
 * @return void
 */
function sendResetPasswordEmail(string $email, string $resetToken)
{
    //  Replace this with your actual email sending implementation.
    //  For example, you might use PHPMailer or another email library.
    //  This is just a placeholder.

    error_log("Reset password email sent to: " . $email . " with token: " . $resetToken);
    // Example using PHPMailer (requires installation and configuration)
    // $mail = new PHPMailer\PHPMailer\PHPMailer();
    // $mail->SMTPDebugEnable = true;
    // $mail->isSMTP();
    // $mail->Host = 'smtp.example.com';
    // $mail->Port = 587;
    // $mail->Username = 'your_username';
    // $mail->Password = 'your_password';
    // $mail->SetFrom('your_email', 'Your App Name');
    // $mail->Subject = 'Password Reset';
    // $mail->Body = "Click this link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . '?token=" . $resetToken . "'>Reset Password</a>";
    // $mail->AltBody = "Password reset link: Reset Password Link";
    // $mail->Send();
}


// Example Usage (for demonstration only -  DO NOT USE THIS IN PRODUCTION)
// Assuming you have a PDO connection named $pdo

// $email = 'testuser@example.com';
// $newPassword = 'NewSecurePassword123';
// $token = 'someUniqueTokenString';

// if (forgotPassword($email, $newPassword, $token, $pdo)) {
//     echo "Password reset request sent.  Check your email.";
// } else {
//     echo "Password reset request failed.";
// }


?>


<?php

// This is a simplified example and should be used with caution.
// In a production environment, you *must* implement proper security measures
// like:
//  - Sending reset links via HTTPS
//  - Using a token that expires after a short period
//  - Using a database with password hashing
//  - Validating email addresses
//  - Rate limiting

class UserForgotPassword {

    private $db; // Database connection

    public function __construct($db) {
        $this->db = $db;
    }

    public function resetPassword($email) {
        // 1. Check if the email exists in the database
        $stmt = $this->db->prepare("SELECT id, username FROM users WHERE email = ?");
        $stmt->bind_param("s", $email);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($result->num_rows == 0) {
            $stmt->close();
            return false; // Email not found
        }

        $user = $result->fetch_assoc();
        $stmt->close();

        // 2. Generate a unique token
        $token = bin2hex(random_bytes(32)); // Generate a secure random token

        // 3.  Store the token in the database for the user. This is key!
        $stmt = $this->db->prepare("UPDATE users SET reset_token = ?, reset_token_expiry = ? WHERE email = ?");
        $stmt->bind_param("ss", $token, time() + 3600); // expiry set to 1 hour. Change as needed.
        $result = $stmt->execute();

        if (!$result) {
            // Handle the error
            error_log("Error updating user reset token: " . print_r($stmt->error, true));
            return false;
        }

        // 4.  Create a reset link
        $resetLink = $this->generateResetLink($user['id'], $token);

        // 5.  Send the reset link to the user (implementation omitted for brevity - see below)
        //    This would typically involve sending an email.
        //    This example just logs the link.

        error_log("Reset password link sent to: " . $resetLink);
        return true;
    }


    private function generateResetLink($userId, $token) {
        return "https://yourdomain.com/reset-password?token=$token&userId=$userId";
    }

}



// Example usage (assuming you have a database connection $db)
//
//  $userForgotPassword = new UserForgotPassword($db);
//  $resetResult = $userForgotPassword->resetPassword("user@example.com");
//  if ($resetResult) {
//      echo "Reset link sent to user@example.com";
//  } else {
//      echo "Failed to send reset link.";
//  }

?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a 'users' table with 'email' and 'password' columns.

// Function to handle password reset
function forgotPassword($email, $db) {
  // 1. Check if the email exists in the database
  $result = $db->query("SELECT id, email FROM users WHERE email = '$email'");

  if ($result->num_rows > 0) {
    // 2. Generate a unique, temporary password reset token
    $token = bin2hex(random_bytes(32)); // Generate a secure random token

    // 3.  Store the token in the database, associated with the user's email
    $db->query("UPDATE users SET reset_token = '$token' WHERE email = '$email'");

    // 4.  Send an email with a link to reset the password.
    //     (Replace with your email sending logic)
    $subject = "Password Reset Request";
    $to = $email;
    $from = "your_email@example.com"; // Change this to your email address
    $message = "Click on the following link to reset your password: " . base64_decode("YOUR_BASE64_ENCODED_LINK") . " (This link expires in 1 hour.)"; // Replace with your actual link
    $headers = "From: " . $from . "\r
";
    $headers .= "Reply-To: " . $from . "\r
";
    mail($to, $message, $headers);

    return true; // Indicate success
  } else {
    return false; // Indicate email not found
  }
}


// --- Example Usage (Demonstration) ---

//  Create a dummy database connection (replace with your actual connection)
$db = new mysqli("localhost", "your_username", "your_password", "your_database");
if ($db->connect_error) {
  die("Connection failed: " . $db->connect_error);
}

// Example: Request a password reset for 'test@example.com'
$email = "test@example.com";
if (forgotPassword($email, $db)) {
  echo "Password reset email sent to $email";
} else {
  echo "Email not found or password reset failed.";
}

$db->close(); // Close the database connection when done

?>


<?php

// Database credentials (Replace with your actual credentials)
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if password reset email was sent successfully, false otherwise.
 */
function forgot_password(string $email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email format provided: " . $email); // Log invalid emails for debugging
    return false;
  }

  // 2. Check if user exists
  $pdo = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USER, DB_PASSWORD);
  $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERR_SILENT);

  $stmt = $pdo->prepare("SELECT id, email FROM users WHERE email = :email");
  $stmt->bindParam(':email', $email, PDO::PARAM_STR);
  $stmt->execute();

  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    error_log("User with email " . $email . " not found."); // Log non-existent users
    return false;
  }


  // 3. Generate a unique token
  $token = bin2hex(random_bytes(32)); // Generate a cryptographically secure token

  // 4.  Prepare the token setting statement
  $sql = "UPDATE users SET password_reset_token = :token, password_reset_token_expiry = :expiry
          WHERE email = :email";

  // 5.  Execute the update statement
  $stmt = $pdo->prepare($sql);
  $stmt->bindParam(':token', $token, PDO::PARAM_STR);
  $stmt->bindParam(':expiry', date('Y-m-d H:i:s', time() + (30 * 60)), PDO::PARAM_STR); // Token expires after 30 minutes
  $stmt->bindParam(':email', $user['email'], PDO::PARAM_STR);
  $result = $stmt->execute();

  if (!$result) {
    error_log("Error updating user record: " . print_r($stmt->errorInfo(), true)); // Log SQL errors
    return false;
  }


  // 6. Send Password Reset Email (Implement your email sending logic here)
  $reset_link = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $token;
  send_password_reset_email($user['email'], $reset_link);

  return true;
}


/**
 * Sends a password reset email.  This is a placeholder; replace with your actual email sending implementation.
 *
 * @param string $email The user's email address.
 * @param string $reset_link The link to the password reset page.
 */
function send_password_reset_email(string $email, string $reset_link) {
  // Implement your email sending logic here.  Example:
  $to = $email;
  $subject = 'Password Reset';
  $message = "Please click on the following link to reset your password: " . $reset_link;
  $headers = 'From: your_email@example.com' . "\r
";  // Replace with your email address

  mail($to, $message, $headers);
  error_log("Password reset email sent to " . $email); // Log email sending
}

// Example Usage:
//  $email = 'testuser@example.com'; // Replace with the user's email
//  if (forgot_password($email)) {
//      echo "Password reset email has been sent to " . $email;
//  } else {
//      echo "Failed to reset password for " . $email;
//  }


?>


<?php

// Assuming you have a database connection established (e.g., $db)

// Function to handle password reset
function forgotPassword($email) {
  // 1. Validate Email (important for security)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Generate a Unique Token
  $token = bin2hex(random_bytes(32)); // Generates a cryptographically secure random string

  // 3.  Prepare the Reset Token and expiration time
  $expiration_time = time() + 60*60*24; // Token expires after 24 hours
  
  // 4. Prepare the Reset Request
  $reset_data = array(
    'email' => $email,
    'token' => $token,
    'expiration' => $expiration_time
  );

  // 5. Store the Reset Token in the Database - THIS IS CRUCIAL
  //  Replace with your database query logic.  This is a placeholder.
  //  Important: Use parameterized queries to prevent SQL injection.
  $query = "INSERT INTO password_resets (email, token, expiration) VALUES (?, ?, ?)";
  $stmt = $db->prepare($query);
  $stmt->bind_param("sii", $email, $token, $expiration_time);
  $stmt->execute();
  $reset_id = $db->insert_id; // Get the ID of the newly inserted row
  $stmt->close();


  // 6.  Send the Reset Email
  $subject = "Password Reset Request";
  $message = "Click on the following link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . "?reset_token=" . $token . "'>Reset Password</a>";
  $headers = "From: your_email@example.com"; // Replace with your sender email
  mail($email, $subject, $message, $headers);

  // 7. Return a success message
  return "Password reset link has been sent to your email address.";
}


// --- Example Usage (for demonstration) ---

// Example 1: Successfully sending the reset link
if (isset($_GET['reset_token'])) {
    $token = $_GET['reset_token'];
    $result = forgotPassword($token);
    echo $result;
}

?>


<?php

// Ensure this file is part of a secure application
// and that your database connection is properly configured
// for security and access control.

// Database connection details (replace with your actual values)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Check if the request method is POST
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Get the email address from the form
    $email = $_POST["email"];

    // Validate the email (basic validation - improve this for production)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email address.";
    } else {
        // Prepare the SQL query to select the user
        $query = "SELECT id, password, email FROM users WHERE email = '$email'";

        // Execute the query
        $result = mysqli_query($GLOBALS["database"], $query);

        // Check if the query was successful
        if ($result) {
            // Get the result row
            $row = mysqli_fetch_assoc($result);

            // Check if a user with the email exists
            if ($row) {
                // Generate a unique token (using a more robust method in production)
                $token = bin2hex(random_bytes(32));

                // Prepare the update query
                $update_query = "UPDATE users SET password_reset_token = '$token' WHERE email = '$email'";

                // Execute the update query
                mysqli_query($GLOBALS["database"], $update_query);

                // Send an email to the user with the reset link
                $to = $email;
                $subject = "Password Reset Link";
                $message = "Click the following link to reset your password: " . "<a href='" . $_SERVER["PHP_SELF"] . "?reset=$token'>" . $_SERVER["PHP_SELF"] . "?reset=$token</a>";
                $headers = "From: your_email@example.com"; // Replace with your email

                mail($to, $message, $headers);

                $success = "Password reset email sent to $email.";
            } else {
                $error = "No user found with this email address.";
            }
        } else {
            $error = "Error querying the database.";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <?php
    if (isset($error)) {
        echo "<p style='color: red;'>$error</p>";
    }
    if (isset($success)) {
        echo "<p style='color: green;'>$success</p>";
    }
    ?>

    <form method="post" action="<?php echo $_SERVER["PHP_SELF"]; ?>">
        <label for="email">Email Address:</label>
        <input type="email" id="email" name="email" placeholder="Your email address" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if password reset email sent successfully, false otherwise.
 */
function forgot_password(string $email) {
  // Sanitize the email input (important for security)
  $email = filter_var($email, FILTER_SANITIZE_EMAIL);

  // Validate the email format
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email format provided: " . $email); // Log for debugging
    return false;
  }

  // Check if the user exists
  $user = getUserByEmail($email);

  if (!$user) {
    error_log("User with email " . $email . " not found."); // Log for debugging
    return false;
  }


  // Generate a unique token (important for security - use a strong random string generator)
  $token = generate_unique_token();

  // Store the token and expiration date in the database
  $result = save_token_for_user($user->id, $token, date('Y-m-d H:i:s', strtotime('+30 days'))); // Expires in 30 days

  if (!$result) {
    error_log("Failed to save token for user " . $email); // Log for debugging
    return false;
  }

  // Send the password reset email
  $subject = "Password Reset Request";
  $message = "Please click on the following link to reset your password:
" .
             "<a href='" . $_SERVER['PHP_SELF'] . "?reset=" . urlencode($token) . "'>Reset Password</a>";
  $headers = "From: Your Website <noreply@yourwebsite.com>\r
";  // Replace with your actual email address

  if (mail($email, $subject, $message, $headers)) {
    return true;
  } else {
    error_log("Failed to send email to " . $email); // Log for debugging
    // Optionally, delete the token if the email fails to send (important for security)
    delete_token_for_user($user->id);
    return false;
  }
}


/**
 * Example helper functions (replace with your actual implementations)
 */

// Dummy function to retrieve user by email
function getUserByEmail(string $email) {
  // Replace with your actual database query
  // This is just a placeholder.  You MUST implement this.
  // Example:
  // $db->query("SELECT * FROM users WHERE email = '$email'");
  // $row = $db->fetch_assoc();
  // if ($row) {
  //   return new User($row); // Create a User object
  // } else {
  //   return null;
  // }

  //Placeholder return for testing
  return new User(['id' => 1, 'email' => 'test@example.com']);
}


// Dummy function to generate a unique token.
//  Use a better method in production (e.g., random_bytes, md5 with salt).
function generate_unique_token() {
  return bin2hex(random_bytes(32)); //  Using bin2hex for simplicity here.  Securely generate random strings for production.
}



// Dummy function to save the token and expiration date in the database.
function save_token_for_user(int $userId, string $token, string $expirationDate) {
  // Replace with your actual database query to store the token and expiration date.
  // Example:
  // $db->query("UPDATE users SET reset_token = '$token', reset_date = '$expirationDate' WHERE id = $userId");
  // return $db->affected_rows > 0 ? true : false;

  //Placeholder return for testing
  return true;
}

// Dummy function to delete the token from the database.
function delete_token_for_user(int $userId) {
  // Replace with your actual database query to delete the token.
  // Example:
  // $db->query("DELETE FROM users WHERE id = $userId AND reset_token != ''");
  // return $db->affected_rows > 0 ? true : false;

  //Placeholder return for testing
  return true;
}



//  Example Usage (For testing)
if (isset($_GET['reset'])) {
  $token = $_GET['reset'];
  if (isset($token)) {
    if (forgot_password($token)) {
      echo "Password reset email sent successfully!";
    } else {
      echo "Failed to send password reset email.";
    }
  } else {
    echo "Invalid reset token.";
  }
}

?>


<?php

/**
 * Forgot Password Function
 *
 * This function generates a unique token and sends an email with a link
 * to reset the password.
 *
 * @param string $email The email address to send the reset password link to.
 * @param string $baseUrl The base URL of your application.  This is crucial
 *                     for creating the correct reset link.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $baseUrl) {
    // 1. Generate a unique token
    $token = bin2hex(random_bytes(32)); // Use a cryptographically secure random string.  bin2hex() converts the bytes to a hex string.

    // 2. Create the reset password URL
    $resetUrl = $baseUrl . '/reset-password?token=' . urlencode($token);

    // 3. Prepare the email subject and body
    $subject = 'Password Reset';
    $body = "Please click the link below to reset your password:
" .
            "<a href='" . $resetUrl . "'>Reset Password</a>
" .
            "
This link will expire in 1 hour."; // Adjust expiration time as needed


    // 4.  Send the email (using PHPMailer - you'll need to install it!)
    //  Requires:  https://pecl.php.net/package/pecl-filesystem - to check if you have the filesystem extension.

    if (version_compare($PHP_VERSION, '7.2', '>=')) {
        //PHP 7.2+ - Use alternative approach
        $mail = new PHPMailer\PHPMailer\PHPMailer();
        $mail->isSMTP();
        $mail->Host = 'smtp.example.com'; // Your SMTP server
        $mail->Port = 587;                // Port for SMTP
        $mail->SMTPAuth = true;
        $mail->Username = 'your_email@example.com'; // Your email address
        $mail->Password = 'your_password';      // Your SMTP password
        $mail->SetFrom('your_email@example.com', 'Your Application Name');
        $mail->Subject = $subject;
        $mail->Body = $body;
        $mail->AltBody = strip_tags($body); //For non-HTML email clients
        $mail->CharSet = 'UTF-8'; // Set character encoding
        if ($mail->send()) {
            return true;
        } else {
            error_log("PHPMailer error: " . $mail->ErrorInfo);
            return false;
        }
    } else {
        // PHP < 7.2 - Use older approach
        $to = $email;
        $headers = "From: Your Name <your_email@example.com>\r
";
        $headers .= "MIME-Version: 1.0\r
";
        $headers .= "Content-type: text/html; charset=UTF-8\r
";

        if (mail($to, $body, $headers)) {
            return true;
        } else {
            error_log("Email sending failed!");
            return false;
        }
    }

}


// Example Usage (for testing - DO NOT USE IN PRODUCTION WITHOUT SECURITY MEASURES!)
//  This is just a demonstration.  Never expose your actual email credentials or
//  the random token in the public code!

// Add these lines to your framework's routing or controller code
// To allow this example to run properly, you'll need to have a route like:
//  /reset-password/:token
// And a corresponding controller action.

// Placeholder email address. Replace with a real email address to test.
// Replace 'smtp.example.com' with your SMTP server's hostname.
// Replace 'your_email@example.com' and 'your_password' with your SMTP credentials.

//  IMPORTANT SECURITY NOTE:
//  - Do NOT store passwords directly in your application.
//  - Never expose the random token in your public code.
//  - Implement proper CSRF protection for reset password links.
//  - Consider using a more robust email sending service (e.g., SendGrid, Mailgun)
//    for production environments.


// Example usage:
// $baseUrl = 'http://localhost/my-app'; // Replace with your application's base URL
// $email = 'test@example.com'; // Replace with the user's email

// if (forgotPassword($email, $baseUrl)) {
//     echo "Password reset email sent to " . $email;
// } else {
//     echo "Failed to send password reset email.";
// }


?>


<?php

// This is a simplified example and should be used with caution.
// In a real-world application, you should:
// 1.  Use a strong password hashing algorithm (e.g., bcrypt, Argon2).
// 2.  Implement proper security measures to prevent vulnerabilities like brute-force attacks.
// 3.  Store reset tokens securely and with appropriate expiration times.
// 4.  Sanitize and validate all user inputs.
// 5.  Consider using a session management library for better security.
// 6.  Don't store passwords in plain text.

// Database connection details (replace with your actual values)
$host = 'localhost';
$username = 'your_db_user';
$password = 'your_db_password';
$database = 'your_db_name';

//  Helper function to generate a random token
function generateToken() {
  return bin2hex(random_bytes(32));
}

// Function to handle the forgot password process
function forgotPassword($email) {
  // 1. Check if the email exists in the users table
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  $stmt = $conn->prepare("SELECT id, email FROM users WHERE email = ?");
  $stmt->bind_param("s", $email); // "s" indicates a string
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    $stmt->close();
    $conn->close();
    return "Email not found.";
  }

  $user = $result->fetch_assoc();
  $userId = $user['id'];
  $stmt->close();


  // 2. Generate a reset token
  $resetToken = generateToken();

  // 3. Store the reset token and user ID in the database
  $conn = new mysqli($host, $username, $password, $database);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  $stmt = $conn->prepare("INSERT INTO password_resets (user_id, token, expiry) VALUES (?, ?, ?)");
  $stmt->bind_param("siss", $userId, $resetToken, time() + (24 * 60 * 60)); // Expire in 24 hours
  if ($stmt->execute() === false) {
      // Handle the error - important!
      echo "Error inserting reset token: " . $stmt->error;
      $stmt->close();
      $conn->close();
      return "Error creating reset token.";
  }

  $stmt->close();
  $conn->close();


  // 4. Send the reset link to the user's email
  $resetLink = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $resetToken; //  Customize the URL
  // In a real application, you would use an email sending library
  // or service to send the email.

  return $resetLink;
}

// Example Usage (simulated -  you would process this through a form)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $resetLink = forgotPassword($email);

  if (strpos($resetLink, "Error") !== false) { // Check for error message
    echo $resetLink;
  } else {
    echo "Please check your email for the reset link.";
  }
}

?>

<!--  reset_password.php (example - you'll need to implement the actual logic) -->
<?php
// This is a simplified example.  Implement proper validation and security.

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $token = $_POST["token"];
    $newPassword = $_POST["new_password"];
    $confirmPassword = $_POST["confirm_password"];

    // 1. Check if the token exists in the password_resets table
    $conn = new mysqli($host, $username, $password, $database);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $stmt = $conn->prepare("SELECT user_id, token, expiry FROM password_resets WHERE token = ?");
    $stmt->bind_param("s", $token);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        echo "Invalid reset token.";
    } else {
        $reset = $result->fetch_assoc();
        $userId = $reset['user_id'];
        $expiry = $reset['expiry'];

        // 2. Validate the token and expiry
        if (time() > $expiry) {
            echo "Token expired.";
        } else {
            // 3. Update the user's password in the users table
            $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);  //Use a strong hashing function

            $stmt = $conn->prepare("UPDATE users SET password = ? WHERE id = ?");
            $stmt->bind_param("ss", $hashedPassword, $userId);

            if ($stmt->execute() === false) {
                echo "Error updating password: " . $stmt->error;
            } else {
                // 4. Delete the reset token from the password_resets table
                $stmt = $conn->prepare("DELETE FROM password_resets WHERE user_id = ?");
                $stmt->bind_param("i", $userId);
                $stmt->execute();

                // 5.  Session handling or redirect
                echo "Password reset successfully.  Please log in.";
            }

            $stmt->close();
        }

        $conn->close();
    }
}
?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique, time-based token to verify the password
 * reset request. It sends an email to the user with a link to reset their
 * password.
 *
 * @param string $email The email address of the user.
 * @return bool True if the password reset email was sent successfully, false otherwise.
 */
function forgotPassword(string $email): bool
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log for debugging
        return false;
    }

    // 2. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // Generate a secure, random token

    // 3. Store Token (e.g., in database - this is a simplified example)
    //   Replace this with your actual database interaction.
    //   This is just a placeholder.
    $db_token = $token; //  This would be stored in the database, keyed by email
    // Example:
    // $result = $this->db->insert('password_resets', ['email' => $email, 'token' => $token, 'created_at' => time()]);
    // if (!$result) {
    //   return false;
    // }
    
    // 4. Create the Password Reset Link
    $resetLink = "http://yourdomain.com/reset-password?token=$token"; // Replace with your actual domain

    // 5. Send the Email
    //  Replace with your actual email sending logic.
    //  This is a simplified example.  Use a proper email library.
    
    $subject = "Password Reset Request";
    $message = "Click this link to reset your password: " . $resetLink;
    $headers = "From: your_email@example.com\r
"; // Use a valid sender address
    
    // Send the email (using a library like PHPMailer is recommended)
    // $sent = mail("user_email@example.com", $subject, $message, $headers);

    // Simple echo for demonstration (replace with actual sending)
    echo "Email sent to: " . $email . "
";
    echo "Reset link: " . $resetLink . "
";


    // 6. Return True (indicating success)
    return true;
}


// Example Usage:
//  Uncomment these lines to test:
// $email = "test@example.com";  // Replace with a valid email
// if (forgotPassword($email)) {
//     echo "Password reset email sent successfully.
";
// } else {
//     echo "Failed to send password reset email.
";
// }

?>


<?php

// ... (forgotPassword function code as above) ...

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\SMTP;

// Example usage (replace with actual settings)
$email = "test@example.com";
if (forgotPassword($email)) {
    echo "Password reset email sent successfully.
";
} else {
    echo "Failed to send password reset email.
";
}

?>


<?php

/**
 * Forgot Password Function
 * 
 * This function generates a temporary password and sends it to the user's email.
 * 
 * @param string $email      The email address of the user.
 * @param string $resetLinkPrefix The prefix for the reset link (e.g., "https://example.com/reset-password/")
 * @param string $tokenLifetimeSeconds  The amount of time (in seconds) the reset token is valid.
 * @param string $fromEmail   The email address to send the reset password link from.
 * 
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $resetLinkPrefix, int $tokenLifetimeSeconds, string $fromEmail)
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided: " . $email); // Log the error for debugging
        return false;
    }

    // 2. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // Generate a strong, random token

    // 3. Hash the Token (For Security)
    $hashedToken = password_hash($token, PASSWORD_DEFAULT);

    // 4. Store the Token in the Database (Replace with your database logic)
    // IMPORTANT: This is a placeholder. You MUST implement this logic
    // using your database connection and table structure.
    $user_id = getUserIDFromEmail($email); // Function to get user ID from email - replace with your implementation
    if ($user_id === null) {
        error_log("User not found for email: " . $email);
        return false;
    }

    // Store the token and user ID.  Replace this with your DB query.
    // In a real application, you would likely use prepared statements 
    // to prevent SQL injection vulnerabilities.
    $success = storeToken($user_id, $token);  // Function to store the token - replace with your implementation
    if (!$success) {
        error_log("Failed to store token for user: " . $email);
        return false;
    }

    // 5. Create the Reset Link
    $resetLink = $resetLinkPrefix . "?" . http_build_query(['token' => $token]);

    // 6. Send the Email
    $subject = "Password Reset Request";
    $message = "To reset your password, please click on the following link: " . $resetLink;
    $headers = "From: " . $fromEmail . "\r
";
    $headers .= "Reply-To: " . $fromEmail . "\r
";

    if (mail($email, $subject, $message, $headers)) {
        return true;
    } else {
        error_log("Failed to send email to: " . $email);
        // Consider removing the token if the email fails to send.
        // This prevents it from being used indefinitely if email delivery is unreliable.
        // removeToken($user_id, $token); // Implement this function
        return false;
    }
}

/**
 * Placeholder functions - Replace with your own implementations
 * These are placeholders for database interaction and token removal.
 */

/**
 * Placeholder function to get user ID from email.  Replace with your database query.
 * @param string $email
 * @return int|null
 */
function getUserIDFromEmail(string $email): ?int
{
    // Replace this with your actual database query to get the user ID.
    // Example:
    // $result = mysqli_query($conn, "SELECT id FROM users WHERE email = '$email'");
    // if (mysqli_num_rows($result) > 0) {
    //   return mysqli_fetch_assoc($result)['id'];
    // }
    // return null;
    return null; // Placeholder
}

/**
 * Placeholder function to store the token in the database.
 * Replace with your database query.
 * @param int $userId
 * @param string $token
 */
function storeToken(int $userId, string $token): bool
{
    // Replace this with your actual database query.
    // Example:
    // mysqli_query($conn, "INSERT INTO reset_tokens (user_id, token, expires_at) VALUES ($userId, '$token', NOW() + INTERVAL 3600 SECOND)");  // Expires in 1 hour
    return true; // Placeholder
}


/**
 * Placeholder function to remove the token from the database.
 * Replace with your database query.
 * @param int $userId
 * @param string $token
 */
function removeToken(int $userId, string $token): bool
{
    // Replace this with your actual database query.
    // Example:
    // mysqli_query($conn, "DELETE FROM reset_tokens WHERE user_id = $userId AND token = '$token'");
    return true; // Placeholder
}

// Example Usage (Replace with your actual email, prefix, and from email)
// $email = "test@example.com";
// $resetLinkPrefix = "https://yourwebsite.com/reset-password/";
// $tokenLifetimeSeconds = 7200; // 2 hours
// $fromEmail = "noreply@yourwebsite.com";
//
// if (forgotPassword($email, $resetLinkPrefix, $tokenLifetimeSeconds, $fromEmail)) {
//     echo "Password reset email sent!";
// } else {
//     echo "Password reset failed.";
// }

?>


<?php

// This is a simplified example for demonstration purposes only.
// In a production environment, you *must* implement robust security measures
// to prevent abuse and protect user data.

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password.
 * @param string $dbHost  Database Hostname
 * @param string $dbName  Database Name
 * @param string $dbUser  Database Username
 * @param string $dbPassword Database Password
 *
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $newPassword, string $dbHost, string $dbName, string $dbUser, string $dbPassword)
{
    // 1. Validate Input (Important!)
    if (empty($email) || empty($newPassword)) {
        return false; // Or throw an exception
    }

    // 2. Database Connection (Replace with your actual connection details)
    $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

    if ($conn->connect_error) {
        error_log("Failed to connect to database: " . $conn->connect_error);
        return false;
    }

    // 3.  Check if user exists
    $sql = "SELECT id, email FROM users WHERE email = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $email);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        $conn->close();
        return false; // User not found
    }

    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $stmt->close();



    // 4. Hash the New Password (Critical for Security!)
    $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

    // 5. Update User Password
    $sql = "UPDATE users SET password = ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ss", $hashedNewPassword, $userId);

    if ($stmt->execute()) {
        $stmt->close();
        $conn->close();
        return true;
    } else {
        $stmt->close();
        $conn->close();
        error_log("Failed to update password: " . $stmt->error);
        return false;
    }
}


// Example Usage (Demonstration Only - Don't use directly in a public facing app)
// $email = "testuser@example.com";
// $newPassword = "NewSecurePassword123";
// $dbHost = "localhost";
// $dbName = "your_database_name";
// $dbUser = "your_database_username";
// $dbPassword = "your_database_password";


// if (forgotPassword($email, $newPassword, $dbHost, $dbName, $dbUser, $dbPassword)) {
//     echo "Password reset email sent (simulated).";
// } else {
//     echo "Password reset failed.";
// }

?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Forgets the password for a user.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset email was sent, false otherwise.
 */
function forgotPassword(string $email)
{
    global $db; // Assuming $db is your database connection

    // Sanitize and validate the email
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log the error
        return false;
    }

    // Check if the user exists
    $user = $db->query("SELECT id, username FROM users WHERE email = '$email'");

    if ($user->num_rows === 0) {
        error_log("User with email '$email' not found.");
        return false;
    }

    // Generate a unique token for password reset
    $token = bin2hex(random_bytes(32));

    // Hash the token (very important for security)
    $hashed_token = password_hash($token, PASSWORD_DEFAULT);


    // Store the token in the database, associated with the user
    $result = $db->query("
        INSERT INTO password_resets (user_id, token, expires_at)
        VALUES ($user->fetch_assoc()['id'], '$hashed_token', NOW() + INTERVAL 24 HOUR)
    ");

    if (!$result) {
        error_log("Error inserting password reset token: " . $db->error);
        return false;
    }


    // Send the password reset email
    $to = $email;
    $subject = "Password Reset";
    $message = "To reset your password, please click on the following link: " . $_SERVER['REQUEST_SCHEME'] . "://localhost/reset_password.php?token=" . $token; //Replace localhost with your actual domain
    $headers = "From: noreply@example.com\r
";
    mail($to, $message, $headers);

    return true;
}


// Example Usage (for testing - DON'T include this in a deployed application)
// Replace with your actual database connection details and setup
/*
$email = "test@example.com";

if (forgotPassword($email)) {
    echo "Password reset email sent to $email";
} else {
    echo "Failed to send password reset email.";
}
*/

?>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_database_name";

// Include the database connection file (recommended)
// Or, use the following code to establish the connection directly:
// $conn = new mysqli($host, $username, $password, $database);
// if ($conn->connect_error) {
//     die("Connection failed: " . $conn->connect_error);
// }


// Function to handle password reset request
function forgotPassword($email)
{
    // 1.  Check if the email exists in the user table
    $conn = new mysqli($host, $username, $password, $database);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $query = "SELECT id, email FROM users WHERE email = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("s", $email);  // "s" indicates a string parameter
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        // Email doesn't exist
        $stmt->close();
        $conn->close();
        return false;
    } else {
        // Email exists, generate a unique token and set a password reset link
        $token = bin2hex(random_bytes(32)); // Generate a random, secure token
        $reset_link = "https://yourwebsite.com/reset-password?token=" . $token; // Replace with your website URL

        //  SQL Query to update the user with the token and reset link
        $query = "UPDATE users SET reset_token = ?, reset_link = ? WHERE email = ?";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("sss", $token, $reset_link, $email);
        if ($stmt->execute()) {
            // Password reset link sent to the user's email
            $stmt->close();
            $conn->close();
            return true;
        } else {
            // Error during update
            $stmt->close();
            $conn->close();
            return false;
        }
    }
}


// Example Usage (For testing - not for production)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    if (empty($email)) {
        echo "Error: Email is required.";
    } else {
        if (forgotPassword($email)) {
            echo "Password reset link sent to your email.";
        } else {
            echo "Error: Could not reset password.";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a table called 'users' with a 'email' column.

// Function to handle the forgot password flow
function forgotPassword($email) {
  // 1. Validate email format (basic check - you'll want more robust validation)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return 'Invalid email format.';
  }

  // 2. Check if the user exists
  $user = getUserByEmail($email);  // Implement this function (see below)

  if ($user === null) {
    return 'User not found.';
  }

  // 3. Generate a unique token
  $token = generateUniqueToken(); // Implement this function (see below)

  // 4. Store the token and user ID in a temporary table (for security)
  // This prevents leaking the user's password to an attacker.
  storeToken($user['id'], $token); 

  // 5.  Send the reset link email
  $resetLink = generateResetLink($user['email'], $token);
  sendResetPasswordEmail($user['email'], $resetLink);

  return 'Password reset link sent to your email.';
}


// --------------------- Helper Functions (Implement these!) ---------------------

// 1. getUserByEmail($email) - Retrieves user information based on email.
function getUserByEmail($email) {
  // Replace this with your database query
  // Example (using MySQLi)
  // $stmt = $db->prepare("SELECT id, email FROM users WHERE email = ?");
  // $stmt->bind_param("s", $email);
  // $stmt->execute();
  // $result = $stmt->get_result();

  // if ($result->num_rows > 0) {
  //   return $result->fetch_assoc();
  // } else {
  //   return null;
  // }
  // Return null if user doesn't exist.
  return null; 
}



// 2. generateUniqueToken() - Generates a unique, secure token.
function generateUniqueToken() {
  return bin2hex(random_bytes(32));  // Uses a strong random source.  This is good practice.
}



// 3. storeToken($userId, $token) - Stores the token in a temporary table.
function storeToken($userId, $token) {
  // Replace this with your database insertion query.
  // Example (using MySQLi)
  // $stmt = $db->prepare("INSERT INTO password_tokens (user_id, token, expiry_date) VALUES (?, ?, ?)");
  // $stmt->bind_param("iii", $userId, $token, time() + 3600); // Token expires after 1 hour.
  // $stmt->execute();

  // Dummy implementation for demonstration
  //  echo "Stored token in database (dummy implementation)";
}



// 4. generateResetLink($email, $token) - Constructs the reset link.
function generateResetLink($email, $token) {
  return 'http://yourwebsite.com/reset-password?token=' . urlencode($token); // Replace yourwebsite.com
}



// 5. sendResetPasswordEmail($email, $resetLink) - Sends the email.
function sendResetPasswordEmail($email, $resetLink) {
  // Replace this with your email sending logic.
  // Example (using PHPMailer)
  // require_once 'PHPMailer/PHPMailerAutoload.php';
  // $mail = new PHPMailer();
  // $mail->addAddress($email, 'User');
  // $mail->Subject = 'Password Reset';
  // $mail->Body    = $resetLink;
  // $mail->isSMTP();
  // $mail->Host       = 'smtp.example.com';
  // $mail->Port = 587;
  // $mail->setUsername('your_username');
  // $mail->setPassword('your_password');
  // $mail->setFrom('noreply@example.com', 'Your Website');
  // $mail->CharSet = 'UTF-8';
  // if (!$mail->send()) {
  //   echo "Email failed to send.";
  // }

  // Dummy implementation - just prints the link.
  echo "Email sent with link: " . $resetLink;
}


// --------------------- Example Usage ---------------------

// Get the email from the user (e.g., from a form submission)
$email = $_POST['email'];  // Assuming the email is submitted via a form

// Call the forgotPassword function
$result = forgotPassword($email);

// Display the result
echo $result;

?>


<?php

/**
 * Forgets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password.
 *
 * @return bool True if the password reset was successful, false otherwise.
 */
function forgotPassword(string $email, string $newPassword): bool
{
    // **Security Considerations - IMPORTANT**

    // 1.  NEVER STORE PASSWORDS IN PLAIN TEXT.
    //     This code is for demonstration purposes only.
    //     In a real application, you *must* hash and salt passwords.
    //     Use a strong password hashing algorithm like bcrypt or Argon2.

    // 2.  Rate Limiting: Implement rate limiting to prevent brute-force attacks.
    //     Limit the number of password reset requests from the same IP address.

    // 3.  Email Content:  Ensure your email content is secure and doesn't contain sensitive information.

    // 4.  Session Security:  If using sessions for the reset link, implement proper security measures
    //     to protect the session ID.

    // 5.  Input Validation: Sanitize and validate all input, including the email address,
    //     to prevent vulnerabilities like SQL injection.

    // **Demonstration Logic - Replace with your database interaction**

    // 1.  Check if the email exists in the database.  Replace this with your actual database query.
    $user = getUserByEmail($email); // Assume this function retrieves user data by email.

    if (!$user) {
        return false; // User not found
    }

    // 2.  Reset the password (for demonstration)
    $user = updatePassword($user, $newPassword); // Assume this function updates the user's password.

    if (!$user) {
        return false; // Password update failed
    }

    // 3.  Generate and send a password reset link (example only)
    $resetLink = generateResetLink($user);
    sendResetLinkEmail($user->email, $resetLink);

    return true;
}


/**
 * Placeholder function to retrieve user data by email (replace with your actual database query).
 *
 * @param string $email The user's email address.
 *
 * @return object|null The user object if found, null otherwise.
 */
function getUserByEmail(string $email): ?object
{
    // **Replace this with your database query**
    // Example:
    // $db = new DatabaseConnection();
    // $result = $db->query("SELECT * FROM users WHERE email = '$email'");
    // if ($result->num_rows > 0) {
    //   $user = $result->fetch_object();
    //   return $user;
    // }
    // return null;

    // Dummy user object for demonstration:
    return new stdClass(); // A simple dummy object.  This is to allow the code to run without a database.
    // In a real application, this would fetch the user from your database.
}



/**
 * Placeholder function to update the user's password (replace with your actual database update logic).
 *
 * @param object $user The user object.
 * @param string $newPassword The new password.
 *
 * @return object|null The updated user object if successful, null otherwise.
 */
function updatePassword(object $user, string $newPassword): ?object
{
    // **Replace this with your database update logic**
    // Example:
    // $db = new DatabaseConnection();
    // $sql = "UPDATE users SET password = '$newPassword' WHERE id = '$user->id'";
    // $result = $db->query($sql);

    // $user = $result->fetch_object();  // Fetch the updated user.
    // return $user;

    // Dummy implementation:
    $user->password = $newPassword; // In a real application, this would update the password in your database.
    return $user;
}

/**
 * Placeholder function to generate a password reset link.
 *
 * @param object $user The user object.
 *
 * @return string The generated password reset link.
 */
function generateResetLink(object $user): string
{
    return "https://example.com/reset-password?token=" . generateUniqueToken(); // Replace with your logic.
}

/**
 * Placeholder function to generate a unique token (for security).
 *
 * @return string A unique token.
 */
function generateUniqueToken(): string
{
    return bin2hex(random_bytes(32)); // Generates a 32-byte random string.
}

/**
 * Placeholder function to send the password reset email.
 *
 * @param string $email The user's email address.
 * @param string $resetLink The password reset link.
 */
function sendResetLinkEmail(string $email, string $resetLink): void
{
    // **Replace this with your actual email sending logic**
    // Example:
    // $emailContent = "Click the link below to reset your password: " . $resetLink;
    // $subject = "Password Reset";
    // $to = $email;
    // $headers = "From: your-email@example.com";
    // mail($to, $subject, $emailContent, $headers);

    echo "Password reset email sent to: " . $email . " (Simulated Send)
";
}


// Example usage:
$email = "testuser@example.com";
$newPassword = "MyNewPassword123";

if (forgotPassword($email, $newPassword)) {
    echo "Password reset initiated successfully! Please check your email.
";
} else {
    echo "Password reset failed. Please try again.
";
}
?>


<?php

// IMPORTANT: This is a simplified example for demonstration purposes.
// In a real application, you MUST implement robust security measures
// like hashing passwords, generating unique tokens, and validating them
// against a database.  This example is deliberately basic for clarity.

// Database connection details (replace with your actual credentials)
$host = 'localhost';
$username = 'your_db_user';
$password = 'your_db_password';
$database = 'your_db_name';

// Check if the request is valid (GET request)
if ($_SERVER['REQUEST_METHOD'] !== 'GET') {
    die("Invalid request method.");
}

// Get the email address from the request parameters
$email = $_GET['email'];

// Validate the email address (basic check - improve for production)
if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    echo "<p>Invalid email address.</p>";
    exit;
}

// 1.  Generate a unique token (using a library is highly recommended for security)
// For simplicity, we'll just use a timestamp, but this is VERY insecure.
$token = uniqid(); // Generate a unique ID

// 2.  Store the token and the email in the database (or a temporary table)
// This is where you would typically set the expiration time for the token.
try {
    $pdo = new PDO("mysql:host=$host;dbname=$database", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    $stmt = $pdo->prepare("INSERT INTO forgot_password_tokens (email, token, expiry) VALUES (?, ?, ?)");
    $stmt->execute([$email, $token, time() + 3600]); // Expires in 1 hour (adjust as needed)
    
} catch (PDOException $e) {
    echo "<p>Error connecting to the database: " . $e->getMessage() . "</p>";
    exit;
}


// 3.  Send an email with a link containing the token
//  - Replace 'your_email@example.com' with your email address
//  - Use a proper email sending library (e.g., PHPMailer) for robust email handling
$to = 'your_email@example.com';
$subject = 'Password Reset';
$message = "Click on the following link to reset your password: " . "<a href='" . htmlspecialchars($_SERVER['PHP_SELF']) . "?token=$token'>" . htmlspecialchars($_SERVER['PHP_SELF']) . "?token=$token</a>";
$headers = "From: your_website_name <your_website_email>"; // Replace with your website details

if (mail($to, $subject, $message, $headers)) {
    echo "<p>Password reset email has been sent to $email.</p>";
} else {
    echo "<p>Failed to send password reset email.</p>";
}

?>


<?php

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Check if the reset_password_request parameter is present
if (isset($_POST['reset_password_request'])) {
    // 1. Get the email from the form.  Validate this!
    $email = $_POST['email'];

    // **IMPORTANT:  Sanitize and Validate the Email!**
    // This is a critical security step.  Prevent SQL injection and other attacks.
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);  //Sanitize
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email address.";
    }
    // 2.  Fetch the user from the database
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password); // Create PDO object

    try {
        $stmt = $pdo->prepare("SELECT id, email FROM users WHERE email = :email");
        $stmt->bindParam(':email', $email);
        $stmt->execute();

        $user = $stmt->fetch(PDO::FETCH_ASSOC);

        // 3.  Check if the user exists
        if ($user) {
            // 4.  Generate a unique, secure reset token
            $resetToken = bin2hex(random_bytes(32));  // Use cryptographically secure random bytes

            // 5.  Store the token in the database for the user.  Important to track expiration.
            //    Also, set expiration time (e.g., 1 hour)
            $stmt = $pdo->prepare("INSERT INTO password_resets (user_id, token, expires_at) VALUES (:user_id, :token, NOW() + INTERVAL 1 HOUR)");  //Store in password_resets table
            $stmt->bindParam(':user_id', $user['id']);
            $stmt->bindParam(':token', $resetToken);
            $stmt->execute();


            // 6.  Send the reset email (implementation omitted for brevity)
            $to = $user['email'];
            $subject = "Password Reset Request";
            $message = "Please click the following link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . "?reset_token=$resetToken'>Reset Password</a>"; //  Generate dynamic link
            $headers = "From: your_email@example.com";  //Replace with your email
            mail($to, $subject, $message, $headers);

            // 7.  Success message
            echo "<p>Password reset email has been sent to $email.</p>";
        } else {
            // 8. User not found
            echo "<p>User not found.</p>";
        }
    } catch (PDOException $e) {
        echo "<p>Error: " . $e->getMessage() . "</p>"; // Handle database errors gracefully
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

<h1>Forgot Password</h1>

<form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email">
    <button type="submit" name="reset_password_request">Request Password Reset</button>
</form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email): bool
{
    // 1. Validate email format (Basic check, consider more robust validation)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided.");
        return false;
    }

    // 2. Check if the user exists in the database.
    $user = db_get_user_by_email($email); // Replace with your actual database query
    if (!$user) {
        error_log("User not found with email: " . $email);
        return false;
    }

    // 3. Generate a unique token and store it in the database (associating with the user).
    $token = generate_unique_token();
    $result = db_set_password_reset_token($user['id'], $token); // Replace with your database query
    if (!$result) {
        error_log("Failed to set password reset token for user: " . $email);
        return false;
    }

    // 4.  Send an email with the reset link.
    $reset_link = generate_reset_link($token);
    send_password_reset_email($user['email'], $reset_link);

    return true;
}


/**
 * Generates a unique token.
 *
 * @return string A unique token.
 */
function generate_unique_token(): string
{
    return bin2hex(random_bytes(32));  // Or use a more robust random string generator.
}

/**
 * Generates a reset link (URL) using the token.
 *
 * @param string $token The reset token.
 * @return string The reset link.
 */
function generate_reset_link(string $token): string
{
    return "https://yourdomain.com/reset_password?token=" . urlencode($token);
}


/**
 * Placeholder for the actual email sending function.  Replace with your email sending implementation.
 * @param string $email The recipient's email address.
 * @param string $link The password reset link.
 */
function send_password_reset_email(string $email, string $link): void
{
    // Replace this with your email sending code
    // Example (using a hypothetical function):
    // send_email($email, "Password Reset", $link);
    error_log("Password reset email sent to: " . $email . " with link: " . $link);
}



// ---  Database Helper Functions (Placeholders - Implement your own) ---

/**
 * Retrieves a user's information from the database based on their email address.
 * @param string $email
 * @return array|null An array containing user data, or null if not found.
 */
function db_get_user_by_email(string $email): ?array
{
    // Replace this with your database query to retrieve user by email.
    // This is just a placeholder.
    $users = [
        ['id' => 1, 'email' => 'test@example.com'],
        ['id' => 2, 'email' => 'another@example.com'],
    ];

    foreach ($users as $user) {
        if ($user['email'] === $email) {
            return $user;
        }
    }

    return null;
}


/**
 * Sets a password reset token in the database for a given user.
 * @param int $userId The ID of the user.
 * @param string $token The password reset token.
 * @return bool True on success, false on failure.
 */
function db_set_password_reset_token(int $userId, string $token): bool
{
    // Replace this with your database query to set the password reset token.
    // Example:
    // $sql = "UPDATE users SET password_reset_token = '$token' WHERE id = $userId";
    // $result = mysqli_query($db, $sql);
    // return $result;

    // Placeholder - always returns true for this example.
    return true;
}

// ---  Example Usage (for testing)  ---

// if ($_SERVER['REQUEST_METHOD'] === 'POST') {
//     $email = $_POST['email'];
//     if (isset($email) && !empty($email)) {
//         if (forgot_password($email)) {
//             echo "Password reset email has been sent to " . $email;
//         } else {
//             echo "Failed to reset password. Please try again.";
//         }
//     } else {
//         echo "Please enter your email address.";
//     }
// }
?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password via email.
 *
 * @param string $email The user's email address.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email): bool
{
    // 1. Validate Email (Basic - Enhance as needed)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log for debugging
        return false;
    }


    // 2. Check if User Exists
    $user = db_get_user_by_email($email); // Replace with your database query
    if (!$user) {
        error_log("User with email: " . $email . " not found.");
        return false;
    }

    // 3. Generate a Unique Token
    $token = generate_unique_token();

    // 4. Store Token in Database (Associated with User)
    if (!store_token_in_db($user->id, $token)) {
        error_log("Failed to store token in database for user: " . $email);
        return false;
    }

    // 5. Email the User with Reset Link
    if (!send_reset_password_email($user->email, $token)) {
        // Handle email sending failure - log, retry, or alert admin
        error_log("Failed to send reset password email to: " . $email);
        // You might want to delete the token from the database if email fails.
        delete_token_from_db($user->id);
        return false;
    }

    return true;
}

// ------------------ Helper Functions (Implement these based on your DB and setup) ------------------

/**
 * Retrieves a user from the database based on their email.
 *
 * @param string $email The email address to search for.
 * @return User|null  A User object if found, null otherwise.
 */
function db_get_user_by_email(string $email): ?User {
    // Replace with your actual database query.
    // This is just a placeholder.
    // Example (assuming you have a User class):
    // $query = "SELECT id, email FROM users WHERE email = ?";
    // $stmt = db_query($query, [$email]);
    // if ($stmt->num_rows > 0) {
    //     $user = new User();
    //     $user->id = $stmt->fetch_assoc()['id'];
    //     $user->email = $stmt->fetch_assoc()['email'];
    //     return $user;
    // }
    // return null;

    // Dummy User class for demonstration
    class User {
        public ?int $id = null;
        public string $email = "";
    }
    return null;
}


/**
 * Generates a unique token.  Use a cryptographically secure method.
 * @return string
 */
function generate_unique_token(): string {
    return bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator
}

/**
 * Stores the token in the database.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token to store.
 * @return bool True on success, false on failure.
 */
function store_token_in_db(int $userId, string $token): bool {
    // Replace with your actual database insert query.
    // Example:
    // $query = "INSERT INTO password_tokens (user_id, token, expires_at) VALUES (?, ?, NOW())";
    // $stmt = db_query($query, [$userId, $token]);
    // return $stmt->num_rows > 0;

    // Dummy implementation for demonstration
    if(rand(0, 2) === 0) { // Simulate success 1/3 of the time
        return true;
    }
    return false;
}


/**
 * Deletes the token from the database.
 *
 * @param int $userId The ID of the user.
 * @return bool True on success, false on failure.
 */
function delete_token_from_db(int $userId): bool {
    // Replace with your actual database delete query.
    // Example:
    // $query = "DELETE FROM password_tokens WHERE user_id = ?";
    // $stmt = db_query($query, [$userId]);
    // return $stmt->num_rows > 0;

    // Dummy implementation
    return true;
}


/**
 * Sends the reset password email.
 *
 * @param string $email The email address to send the email to.
 * @param string $token The token to include in the email.
 * @return bool True on success, false on failure.
 */
function send_reset_password_email(string $email, string $token): bool {
    // Implement email sending logic here.
    //  Use a library like PHPMailer for sending emails.

    // This is just a placeholder - in a real implementation, you'd use
    // a mail sending library and properly configure it.

    // Simulate success 1/2 of the time
    if(rand(0, 2) === 0) {
        return true;
    }
    return false;

}



// ------------------ Example Usage (For Testing) ------------------
// $email = "testuser@example.com";  // Replace with an actual email.

// if (forgot_password($email)) {
//     echo "Password reset email sent to " . $email . "
";
// } else {
//     echo "Failed to reset password for " . $email . "
";
// }
?>


<?php

// Assuming you have a database connection established and configured
// This is a basic example and should be adapted to your specific setup.

// Database connection details
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get the email from the form
    $email = $_POST["email"];

    // Validate the email (basic check, improve as needed)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error_message = "Invalid email address.";
    } else {
        // Prepare the SQL query
        $sql = "SELECT id, password, email FROM users WHERE email = '$email'";

        // Execute the query
        $result = mysqli_query($db_connection, $sql);

        if ($result) {
            // Check if a user with the email exists
            if (mysqli_num_rows($result) > 0) {
                $user_data = mysqli_fetch_assoc($result);
                $userId = $user_data['id'];
                $hashedPassword = $user_data['password'];  // Assuming password is stored as a hash

                // Generate a random token for password reset
                $resetToken = bin2hex(random_bytes(32));

                // Prepare the update query to set the token
                $update_sql = "UPDATE users SET reset_token = '$resetToken' WHERE id = '$userId'";

                // Execute the update query
                if (mysqli_query($db_connection, $update_sql)) {
                    // Send an email with the reset link.  (Important: Implement this!)
                    $to = $email;
                    $subject = 'Password Reset Link';
                    $message = "Click this link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset_token=$resetToken'>" . $_SERVER['PHP_SELF'] . "?reset_token=$resetToken</a>";
                    $headers = "From: your_email@example.com";

                    mail($to, $message, $headers);

                    $success_message = "Password reset link has been sent to your email address.";
                } else {
                    $error_message = "Error updating reset token.";
                }
            } else {
                $error_message = "User not found.";
            }
        } else {
            $error_message = "Error querying the database.";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <?php if (isset($error_message)) {
        echo "<p style='color: red;'>$error_message</p>";
    } ?>

    <form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
        <label for="email">Email Address:</label>
        <input type="email" id="email" name="email" placeholder="Your Email" required>
        <button type="submit">Reset Password</button>
    </form>

    <p>Don't have an account? <a href="register.php">Sign Up</a></p>  <!-- Replace with your registration page -->
</body>
</html>


<?php

// Database connection details - Replace with your actual credentials
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$database = 'your_database';

//  Reset Password Function
function reset_password($email, $new_password) {
  // 1. Validate Email
  $email = filter_var($email, FILTER_SANITIZE_EMAIL); // Sanitize email for security
  if (empty($email)) {
    return false; // Invalid email
  }

  // 2. Database Connection
  try {
    $pdo = new PDO("mysql:host=$host;dbname=$database", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERR_EXCEPTION);
  } catch (PDOException $e) {
    error_log("Database connection error: " . $e->getMessage()); // Log error for debugging
    return false;
  }


  // 3.  Check if User Exists
  $stmt = $pdo->prepare("SELECT id, email FROM users WHERE email = :email");
  $stmt->bindParam(':email', $email, PDO::PARAM_STR);
  $stmt->execute();

  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (empty($user)) {
    // User not found
    return false;
  }

  // 4.  Hash the New Password (Important for Security!)
  $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

  // 5. Update the Password
  $stmt = $pdo->prepare("UPDATE users SET password = :password WHERE id = :id");
  $stmt->bindParam(':password', $hashed_password, PDO::PARAM_STR);
  $stmt->bindParam(':id', $user['id'], PDO::PARAM_INT);
  $stmt->execute();

  if ($stmt->rowCount() === 0) {
    // Update failed
    return false;
  }

  return true; // Password reset successful
}



// Example Usage (Demonstration - Don't use directly in production without validation and sanitization)
//  This is for demonstration purposes only - NEVER expose this directly to the user.
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['email']) && isset($_POST['new_password'])) {
  $email = $_POST['email'];
  $new_password = $_POST['new_password'];

  if (reset_password($email, $new_password)) {
    echo "<p style='color: green;'>Password reset successfully! Check your email.</p>";
  } else {
    echo "<p style='color: red;'>Password reset failed. Please try again.</p>";
  }
}

?>

<!-- HTML Form for the Reset Password Request -->
<form method="post" action="">
  <label for="email">Email:</label>
  <input type="email" id="email" name="email" required><br><br>
  <button type="submit">Reset Password</button>
</form>


<?php

// Assuming you have a database connection established (e.g., $db)
// and that you have a table named 'users' with an 'email' column.

function forgot_password($email, $db) {
  // 1. Verify email exists
  $result = $db->query("SELECT id, email FROM users WHERE email = '$email'");

  if ($result->num_rows > 0) {
    $row = $result->fetch_assoc();
    $userId = $row['id'];

    // 2. Generate a unique token
    $token = bin2hex(random_bytes(32)); // Using bin2hex for better security

    // 3.  Hash the token (important for security)
    $hashed_token = password_hash($token, PASSWORD_DEFAULT);  // Use password_hash

    // 4.  Store the token in the database, associated with the user.
    $db->query("UPDATE users SET password_reset_token = '$hashed_token' WHERE id = $userId");

    // 5.  Email the user with a reset link
    $reset_link = "http://yourwebsite.com/reset_password?token=$token"; // Replace with your website URL

    // Email functionality - (This part needs to be implemented with your email sending method)
    $to = $email;
    $subject = 'Password Reset';
    $message = "Please click on the following link to reset your password: $reset_link";
    $headers = "From: yourwebsite@example.com";  // Customize your email sender
    mail($to, $message, $headers);

    return true; // Indicate successful password reset request
  } else {
    return false; // Email not found
  }
}


// --- Example usage (Illustrative - Adapt to your application logic) ---
// $email = "testuser@example.com";
// if (forgot_password($email, $db)) {
//   echo "Password reset email has been sent to $email.";
// } else {
//   echo "Email not found or an error occurred.";
// }

?>


<?php

// This is a basic example and should be adapted for production use.
// It's crucial to implement proper security measures in a real-world application.

// **Important Security Considerations:**
// 1. NEVER store passwords in plain text. Always hash them with a strong hashing algorithm like bcrypt or Argon2.
// 2.  Implement rate limiting to prevent brute-force attacks.
// 3.  Use a token-based authentication system with an expiration time.  This is the preferred method.
// 4.  Send emails securely (HTTPS).
// 5.  Validate all input rigorously.
// 6.  Store session data securely (e.g., using a secure cookie with the `secure` flag set).

class UserAuthentication {

    private $db; // Database connection (replace with your actual database connection)

    public function __construct($db) {
        $this->db = $db;
    }

    public function forgotPassword($email) {
        // 1. Verify that the email exists in the database
        $result = $this->db->query("SELECT id, username FROM users WHERE email = '$email'");

        if ($result->num_rows == 0) {
            return false; // Email not found
        }

        $user = $result->fetch_assoc();
        $userId = $user['id'];
        $username = $user['username'];

        // 2. Generate a unique, random token
        $token = bin2hex(random_bytes(32)); // Generate a strong random token

        // 3. Store the token and user ID in the database (for security, consider a separate table)
        //    This is a simplified example. A dedicated 'reset_tokens' table is recommended.
        $query = "INSERT INTO reset_tokens (user_id, token, expiry_timestamp) 
                  VALUES ($userId, '$token', NOW() + INTERVAL 24 HOUR)"; // Expire after 24 hours
        $this->db->query($query);

        // 4. Send an email with a reset link
        $resetLink = 'http://' . $_SERVER['HTTP_HOST'] . '/reset-password?token=' . $token;
        $to = $email;
        $subject = 'Password Reset';
        $message = "Please click the following link to reset your password: " . $resetLink;
        $headers = "From: your_email@example.com";

        mail($to, $subject, $message, $headers);


        return true; // Reset link sent successfully
    }

    public function verifyToken($token) {
        // 1. Check if the token exists in the database
        $result = $this->db->query("SELECT id FROM reset_tokens WHERE token = '$token' AND expiry_timestamp > NOW()");

        if ($result->num_rows > 0) {
            return true; // Token is valid and not expired
        } else {
            return false; // Token is invalid or expired
        }
    }

    public function deleteToken($token) {
        // Delete the reset token from the database
        $this->db->query("DELETE FROM reset_tokens WHERE token = '$token'");
    }
}


// Example Usage (replace with your actual database connection)

// Assume you have a database connection called $db
// Example database connection (replace with your database credentials)
$db = new mysqli("localhost", "your_username", "your_password", "your_database");

if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

$userAuthentication = new UserAuthentication($db);

// Example: Reset password for user with email 'test@example.com'
$email = 'test@example.com';
if ($userAuthentication->forgotPassword($email)) {
    echo "Reset link sent to $email";
} else {
    echo "Failed to send reset link.";
}

// ... Later, after the user clicks the link and sets a new password ...

// Verify the token
if ($userAuthentication->verifyToken($token)) { // Replace 'token' with the actual token
   // Now you can proceed with updating the user's password in the database.
   echo "Token is valid.";
} else {
   echo "Invalid token.";
}

// Delete the token after successful password reset
$userAuthentication->deleteToken($token);
?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a table named 'users' with columns 'id', 'email', and 'password_hash'
// This is a simplified example; production code should implement more robust security measures.

// Function to handle forgot password requests
function forgot_password($email) {
  // Validate email (Basic check - expand for more rigorous validation)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // Check if the email exists in the user table
  $result = mysqli_query($db, "SELECT id, password_hash FROM users WHERE email = '$email'");

  if (mysqli_num_rows($result) == 0) {
    return "User with this email not found.";
  }

  // Generate a unique, random token for password reset
  $token = bin2hex(random_bytes(32));  // Using binary data for strong randomness

  // Hash the token for security
  $hashed_token = password_hash($token, PASSWORD_DEFAULT);

  // Store the token in the database associated with the user's email
  mysqli_query($db, "UPDATE users SET reset_token = '$hashed_token' WHERE email = '$email'");

  // Prepare an email to send to the user
  $to = $email;
  $subject = "Password Reset Request";
  $message = "To reset your password, please click on the following link: <a href='" . $_SERVER['PHP_SELF'] . "?reset_token=$token'</a>";
  $headers = "From: your_website@example.com"; // Replace with your email

  // Send the email (using a mail function or similar)
  mail($to, $message, $headers);

  return "Password reset email sent to $email.";
}

// Example usage (in a form or other input):
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $reset_token = $_POST["reset_token"]; //  This should ideally be from the link, not directly submitted.

  if (isset($email) && isset($reset_token)) {
    $result = forgot_password($email);
    echo $result; // Display the result (e.g., success or error message)
  } else {
    echo "Please enter your email address.";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Request Password Reset</button>
  </form>

</body>
</html>


<?php

/**
 * Forgets a user's password and sends a password reset link.
 *
 * @param string $email The email address associated with the user account.
 * @param string $reset_token A unique, randomly generated token.  This is crucial for security!
 * @param string $db_connection A connection object to your database.  This is how you'll interact with your database to update the password.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email, string $reset_token, $db_connection): bool
{
    // **IMPORTANT SECURITY NOTES:**

    // 1.  **Token Validation:**  This function *doesn't* fully validate the $reset_token.
    //     YOU MUST add robust token validation on the frontend (e.g., preventing XSS) *and*
    //     on the backend (e.g., checking against a table or database entry).  The example below is a simplified placeholder.
    //     Never trust user input - especially tokens - without thorough validation.
    // 2.  **Password Complexity:**  This example uses a simple password.  In a real application,
    //     you should enforce strong password policies.
    // 3.  **Rate Limiting:** Implement rate limiting to prevent brute-force attacks.
    // 4.  **Secure Token Generation:** Use a cryptographically secure random number generator (e.g., `random_bytes()` or `openssl_random_pseudo_bytes()`) to generate the token.
    // 5.  **Database Security:**  Ensure your database connection is secure and that your database server is properly configured.
    // 6.  **HTTPOnly and Secure Cookies:** Use the `HTTPOnly` and `Secure` flags when setting cookies.

    // 1.  Check if the email exists in the database.
    $stmt = $db_connection->prepare('SELECT id FROM users WHERE email = ?');
    $stmt->execute([$email]);
    $user_id = $stmt->fetchColumn();

    if (!$user_id) {
        // Email doesn't exist, so don't update anything
        return false;
    }

    // 2.  Update the password field with a temporary value and the reset token.
    $password_reset_query = "UPDATE users SET password = ?, reset_token = ? WHERE id = ?";
    $stmt = $db_connection->prepare($password_reset_query);
    $stmt->execute([
        'pending',  // A temporary password (e.g., 'pending') is used.
        $reset_token,
        $user_id
    ]);

    if ($stmt->rowCount() === 0) {
        //  Something went wrong with the update.
        return false;
    }


    return true; // Success!
}


// **Example Usage (Illustrative - adapt to your setup):**

// This is just a sample.  Replace with your actual database connection and token generation code.

// 1. Generate a unique reset token (use a proper, cryptographically secure random number generator!)
// $reset_token = bin2hex(random_bytes(32));  // A more secure example

// 2. Call the function
// $success = forgot_password('user@example.com', $reset_token, $db_connection);

// if ($success) {
//     echo "Password reset email sent to user@example.com.";
// } else {
//     echo "Error resetting password.";
// }
?>


<?php

// Assuming you have a database connection established (e.g., $db)

// Function to handle password reset
function forgot_password($email) {
    // 1. Check if the email exists in the user database
    $query = "SELECT id, email FROM users WHERE email = ?";
    $stmt = $db->prepare($query);
    $stmt->bind_param("s", $email);
    $result = $stmt->execute();

    if ($result === false) {
        // Handle database error
        error_log("Database error: " . $db->error);
        return false;
    }

    $row = $stmt->fetch_assoc();

    if (!$row) {
        // User not found
        $stmt->close();
        return false;
    }

    // 2. Generate a unique, secure token (e.g., UUID)
    $token = uniqid(time(), true); // true for timestamping
    $token = md5($token);  //  Hash the token for security. You could also use a more robust hashing algorithm like bcrypt.

    // 3. Prepare the reset URL
    $reset_url = "http://yourwebsite.com/reset_password?token=" . urlencode($token);  // Replace with your website URL

    // 4. Prepare the reset email content
    $subject = "Password Reset Request";
    $message = "Dear User,

" .
               "You have requested to reset your password for your account.
" .
               "Please click on the following link to reset your password:
" .
               "<a href='" . $reset_url . "'>Reset Password</a>

" .
               "This link will expire in 24 hours.

" .
               "Sincerely,
" .
               "Your Website Team";


    // 5. Send the email
    $headers = "From: Your Website <noreply@yourwebsite.com>

";
    if (mail($email, $subject, $message, $headers)) {
        // Email sent successfully
        $stmt->close();
        return true;
    } else {
        // Email sending failed
        $stmt->close();
        error_log("Failed to send email to: " . $email);
        return false;
    }
}


// Example Usage (assuming $email is the user's email address)
// if (isset($_POST['reset_email'])) {
//     $email = $_POST['reset_email'];
//     if (forgot_password($email)) {
//         echo "Password reset email sent to " . $email . ". Please check your inbox.";
//     } else {
//         echo "Error sending password reset email. Please try again.";
//     }
// }
?>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Function to reset password
function forgotPassword($email, $token, $newPassword, $db) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if Token Exists and is Valid
  $query = "SELECT id, email FROM users WHERE email = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("s", $email);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows > 0) {
    $user_id = $result->fetch_assoc()['id'];
    $query = "SELECT token, expires FROM password_resets WHERE user_id = ? AND token = ?";
    $stmt = $db->prepare($query);
    $stmt->bind_param("is", $user_id, $token);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
      $row = $result->fetch_assoc();

      // 3. Update Password and Expiration
      $query = "UPDATE users SET password = ? WHERE id = ?";
      $stmt = $db->prepare($query);
      $stmt->bind_param("ss", password_hash($newPassword, PASSWORD_DEFAULT), $user_id);
      $stmt->execute();

      // Delete the reset token
      $query = "DELETE FROM password_resets WHERE user_id = ? AND token = ?";
      $stmt = $db->prepare($query);
      $stmt->bind_param("is", $user_id, $token);
      $stmt->execute();
      return "Password reset successfully.  A new password has been set for your account.";

    } else {
      return "Invalid token.  Please request a new password reset link.";
    }
  } else {
    return "User with this email address not found.";
  }

  // Close Statements
  $stmt->close();
  return "Error resetting password. Please try again."; // Generic error message. Better logging is recommended.
}


// Example Usage (Simulating a request)
// Assuming you have a form with email, token, and newPassword

// Example Database connection (Replace with your actual connection)
$db = new mysqli($host, $username, $password, $dbname);

if ($db->connect_error) {
  die("Connection failed: " . $db->connect_error);
}


//  Simulating user data from a form
$email = $_POST['email'];
$token = $_POST['token'];
$newPassword = $_POST['newPassword'];

// Call the forgotPassword function
$result = forgotPassword($email, $token, $newPassword, $db);
echo $result;  // Display the result (e.g., success message or error)


// Close the connection
$db->close();
?>


<?php

/**
 * Forgets a user's password.  This is a simplified example and
 * should be used with caution in a production environment.
 *
 * Important Security Considerations:
 * 1.  Salt and Hash:  This example uses plain passwords, which is extremely insecure.
 *     In a real application, *always* use a strong hashing algorithm
 *     (like bcrypt or Argon2) with a unique salt for each user.
 * 2.  Email Verification:  Always send an email to confirm the password reset.
 * 3.  Rate Limiting: Implement rate limiting to prevent abuse.
 * 4.  Secure Communication:  Ensure the entire process (including email communication)
 *     is done over HTTPS.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @return bool True if a reset link was successfully generated and emailed, false otherwise.
 */
function forgotPassword(string $email): bool
{
    // 1. Validate Email (basic example - improve in production)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided.");  // Log for debugging
        return false;
    }

    // 2. Generate a unique, secure token (e.g., UUID)
    $token = bin2hex(random_bytes(32)); // Generate a 32-byte random token

    // 3. Store the token and user ID in a secure location (e.g., database)
    //    This example uses an in-memory array for demonstration purposes ONLY.
    //    DO NOT USE THIS IN PRODUCTION.
    //    Use a database to store the token and user ID persistently.
    if (!isset($_SESSION['reset_tokens'][$token])) { // Check if token already exists
        $_SESSION['reset_tokens'][$token] = [
            'user_id' => $email, // Store the user ID (email in this example)
            'token' => $token,
            'expiry' => time() + 3600 // Token expires in 1 hour
        ];
    }

    // 4.  Create the reset URL
    $reset_url = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $token;

    // 5.  Send an email with the reset URL
    $subject = 'Password Reset';
    $message = "Click the link below to reset your password:
" . $reset_url . "

This is a test email.  Please ignore if you didn't request a password reset."; // Improve the message
    $headers = 'From: your_email@example.com' . "\r
"; //  Use a real email address!
    if (mail($email, $subject, $message, $headers)) {
        return true;
    } else {
        error_log("Failed to send email for password reset."); // Log the failure
        return false;
    }
}

// Example Usage (for testing - remove/comment out in production)
if (isset($_GET['email'])) {
    $email = $_GET['email'];
    if (forgotPassword($email)) {
        echo "Reset link sent to " . $email . ".  Check your email.";
    } else {
        echo "Failed to generate reset link for " . $email;
    }
}
?>

<!-- HTML for reset_password.php (example) -->
<!--
<!DOCTYPE html>
<html>
<head>
    <title>Reset Password</title>
</head>
<body>
    <h1>Reset Password</h1>
    <p>Enter the new password below:</p>
    <form method="post" action="update_password.php">
        <input type="password" name="new_password" required>
        <input type="hidden" name="token" value="<?php echo htmlspecialchars($_GET['token']); ?>">
        <button type="submit">Update Password</button>
    </form>
</body>
</html>
-->


<?php

// This is a simplified example.  In a production environment,
// you would likely store passwords as hashes and use a more secure
// method for generating and handling reset tokens.

// Database connection (replace with your actual credentials)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_db_name";

// --- Function to reset password ---
function forgot_password($email, $password_reset_token, $expiration_time = 3600) { // Default expiration time is 1 hour
    // 1. Check if the email exists
    $conn = new mysqli($host, $username, $password, $database);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $result = $conn->query("SELECT id, email FROM users WHERE email = '$email'");

    if ($result->num_rows > 0) {
        $user_id = $result->fetch_assoc()['id'];
        $result->free();

        // 2. Generate a unique, time-based token (for security)
        $token = bin2hex(random_bytes(32)); // Use strong random bytes.  More secure than rand()

        // 3.  Store the token in the database, associated with the user.
        //    Important:  Use prepared statements to prevent SQL injection.
        $sql = "UPDATE users SET password_reset_token = '$token', password_reset_expires = NOW() + INTERVAL $expiration_time SECOND WHERE email = '$email'";
        if (!$conn->query($sql)) {
            // Handle errors if the update fails (e.g., log an error)
            echo "Error updating user: " . $conn->error;
            return false;
        }


        // 4.  Send an email with a link to the reset page.
        //    This part is highly dependent on your email setup.
        //    For simplicity, we'll just print a message here.  Replace with
        //    your actual email sending logic.
        echo "A password reset link has been sent to your email address: " . $email . "<br>";
        echo "Please use this link:  http://yourdomain.com/reset_password?token=$token"; //Replace yourdomain.com


        // 5.  Return true to indicate success.
        return true;


    } else {
        // Email not found
        return false;
    }

    $conn->close();
}


// --- Example Usage (for testing/demo purposes) ---

// Simulate a forgotten password request
//  replace "test@example.com" with a valid email
//  this is for testing, do not use this in a real application without proper security.
$email = "test@example.com";  // Replace with a real email (or use a test email)

if (forgot_password($email, "random_token_for_test")) {
    echo "Password reset email sent (test).  Check the email!";
} else {
    echo "Password reset email could not be sent.  User may not exist or there was an error.";
}

?>


<?php

// Assume you have a database connection established and a user table.
// This is a simplified example, adjust based on your actual database setup.

// Database connection details - REPLACE WITH YOUR ACTUAL CREDENTIALS
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_pass = 'your_db_password';

// Function to reset password
function forgotPassword($email, $db) {
    // 1. Check if email exists
    $stmt = $db->prepare("SELECT id, email FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        return false; // Email not found
    }

    // 2. Generate a unique token and store it (use a proper hash function)
    $token = bin2hex(random_bytes(32)); // Generate a random token (32 bytes = 256 bits)
    
    //  Store the token and expiration date in the database
    $stmt = $db->prepare("UPDATE users SET password_reset_token = ?, password_reset_expires = ? WHERE email = ?");
    $stmt->execute([$token, date('Y-m-d H:i:s', time() + 3600), $email]); // Expire after 1 hour


    // 3.  Send a reset link to the user's email
    $resetLink = 'http://yourwebsite.com/reset_password?token=' . $token;  // Adjust URL
    $subject = 'Password Reset Link';
    $message = "Click on the following link to reset your password: " . $resetLink;

    // Implement email sending logic here (using PHPMailer, SwiftMailer, or similar)
    // Example (basic - replace with your email sending code):
    // sendEmail($email, $subject, $message); 

    // 4. Return true to indicate success (reset link sent)
    return true;
}

// Example Usage (for demonstration - this would typically come from a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    // Validate email (basic check - you should use more robust validation)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        echo "Invalid email format.";
    } else {
        if (forgotPassword($email, $db)) {
            echo "Password reset link sent to your email.";
        } else {
            echo "Password reset link could not be generated.";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>
    <h1>Forgot Password</h1>

    <form method="post" action="">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>
</body>
</html>


<?php

// Assuming you have a database connection established and a 'users' table
// with a 'password' column (hashed) and an 'email' column.

//  Important:  Never store passwords in plain text! Always use a strong hashing algorithm
//  like bcrypt or argon2. This example uses a placeholder for demonstration.

function forgot_password($email, $new_password, $hashed_password_from_db) {
    // Validate email format (basic validation - improve in a real application)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email format.";
    }

    // Hash the new password - IMPORTANT!
    $hashed_new_password = password_hash($new_password, PASSWORD_DEFAULT);  // Use password_hash

    // Update the password in the database
    // Replace this with your actual database query.  This is just a placeholder.
    try {
        // Example query (adjust to your database and table)
        $sql = "UPDATE users SET password = :hashed_password WHERE email = :email";
        $stmt = $pdo->prepare($sql); // Assuming you're using PDO
        $stmt->bindParam(':hashed_password', $hashed_new_password);
        $stmt->bindParam(':email', $email);
        $stmt->execute();

        if ($stmt->rowCount() === 0) {
            return "Error: User not found.";
        }

        return "Password reset successful. Check your email.";
    } catch (PDOException $e) {
        return "Database error: " . $e->getMessage();
    }
}


// Example Usage (simulated - replace with your actual form submission handling)

// Assuming you've received the email and new_password from a form submission:
// $email = $_POST['email'];
// $new_password = $_POST['new_password'];

//  **DO NOT USE THIS IN PRODUCTION - THIS IS JUST FOR ILLUSTRATION**
//  This simulates a user submitting a new password. In a real application,
//  you would verify the email and other security measures before allowing password reset.

//  $reset_message = forgot_password($email, $new_password, $hashed_password_from_db);
//  echo $reset_message;


//  **IMPORTANT SECURITY CONSIDERATIONS AND IMPROVEMENTS:**

// 1.  Email Verification:
//     - Before resetting the password, VERIFY that the user exists in the database.
//     - Send an email with a unique, time-sensitive token to the user's email address.
//     - The token should expire after a certain period (e.g., 30 minutes).
//     - After the user clicks the link in the email, verify the token against the database.

// 2.  Rate Limiting:
//     - Implement rate limiting to prevent brute-force attacks.  Limit the number of password reset requests
//       from a single IP address or user account within a specific timeframe.

// 3.  Secure Token Generation:
//     - Use a cryptographically secure random number generator (e.g., `random_bytes()` in PHP) to generate the token.
//     -  Ensure the token is long enough and randomly generated.

// 4.  Input Validation & Sanitization:
//     -  Thoroughly validate and sanitize all user inputs (email, new_password) to prevent SQL injection and other security vulnerabilities.  Use prepared statements.

// 5.  Error Handling:
//      -  Provide informative error messages to the user if something goes wrong.  Don't expose internal error details.

// 6.  Password Complexity:
//     - Enforce password complexity requirements (minimum length, special characters, etc.)

// 7.  HTTPS:
//     - Always use HTTPS to encrypt the communication between the user's browser and your server.

// 8.  Session Management:
//     - If you are using sessions, ensure that session IDs are securely generated and handled.

// 9.  Regular Security Audits:
//     - Regularly review and update your code to address any new security vulnerabilities.

?>


<?php

// Assuming you have a database connection established (e.g., $db connection)

/**
 * Generates a unique token and saves it to the database.
 *
 * @param string $email The email address to reset the password for.
 * @return string|false The unique token if generated successfully, or false if an error occurs.
 */
function generateResetToken() {
  $token = bin2hex(random_bytes(32)); // Generates a secure, random 32-byte token
  return $token;
}

/**
 * Creates a password reset link.
 *
 * @param string $email The email address to reset the password for.
 * @return string|false The generated password reset link if successful, or false if an error occurs.
 */
function createResetLink(string $email) {
    $token = generateResetToken();

    // Example:  You might save the token to the database, along with the email.
    // This is just a placeholder - you'll need to implement your database saving logic.
    // For demonstration, we'll just return the token string.
    //  Don't just return the token, you *must* store it securely!
    return $token;
}


/**
 * Resets the user's password based on the token.
 *
 * @param string $token The password reset token.
 * @param string $newPassword The new password for the user.
 * @param string $email The user's email address.
 * @return bool True if the password was successfully reset, false otherwise.
 */
function resetPassword(string $token, string $newPassword, string $email) {
    // 1. Verify the Token
    $query = "SELECT id, email FROM users WHERE email = ?";
    $stmt = $db->prepare($query); // Use your database connection
    $stmt->bind_param("s", $email);
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows === 0) {
        $stmt->close();
        return false; // User not found
    }

    $user = $result->fetch_assoc();
    $userId = $user['id'];

    // 2. Check if the token exists for this user
    $query = "SELECT id FROM reset_tokens WHERE token = ? AND user_id = ?";
    $stmt = $db->prepare($query);
    $stmt->bind_param("ss", $token, $userId);
    $stmt->execute();

    if ($stmt->error) {
        error_log("Database error: " . $stmt->error); // Log the error for debugging.
        $stmt->close();
        return false;
    }

    if ($stmt->error) {
        $stmt->close();
        return false;
    }

    if ($stmt->affected_rows === 0) {
        $stmt->close();
        return false; // Token not found for this user
    }
    
    // 3. Update the user's password
    $query = "UPDATE users SET password = ? WHERE id = ?";
    $stmt = $db->prepare($query);
    $stmt->bind_param("ss", password_hash($newPassword, PASSWORD_DEFAULT), $userId);
    $stmt->execute();
    $stmt->close();


    // 4. Delete the token from the database after successful password reset.
    $query = "DELETE FROM reset_tokens WHERE token = ? AND user_id = ?";
    $stmt = $db->prepare($query);
    $stmt->bind_param("ss", $token, $userId);
    $stmt->execute();
    $stmt->close();

    return true;
}


// Example Usage (illustrative only - adapt to your application)
/*
$email = "testuser@example.com";
$newPassword = "NewSecurePassword123";


// Generate a reset link
$resetLink = createResetLink($email);
echo "Reset Link: " . $resetLink . "<br>";


// Reset the password (assuming you've received the $resetLink from a form submission)
if (resetPassword($resetLink, $newPassword, $email)) {
    echo "Password reset successfully!";
} else {
    echo "Password reset failed.";
}
*/


?>


<?php

/**
 * Forgot Password Function
 *
 * This function generates a random token and stores it in the database
 * associated with the user's email address. It then sends an email to
 * the user with a link to reset their password.
 *
 * @param string $email The email address to send the reset password link to.
 * @param string $token  A random, unique token to protect the password reset link.
 * @param string $secret_key  The secret key used to encrypt the token.
 * @param string $reset_url The URL where the reset password page is located.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email, string $token, string $secret_key, string $reset_url) {
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided."); // Log for debugging - important!
        return false;
    }

    // 2. Store Token in Database (Example using a simple array - REPLACE with your database logic)
    //  **IMPORTANT:**  This is just an example.  You *must* replace this with your actual
    //  database storage mechanism (e.g., SQL insert).
    $tokens = get_stored_tokens(); // Function to retrieve stored tokens from the database.  Replace with your retrieval logic.
    $tokens[$email] = $token; // Store the token
    set_stored_tokens($tokens); //Function to store the tokens in the database

    // 3. Generate Reset Link
    $reset_link = $reset_url . "?token=" . urlencode($token);

    // 4. Send Password Reset Email
    $to = $email;
    $subject = "Password Reset";
    $message = "To reset your password, please click on the following link: " . $reset_link;
    $headers = "From: Your Website <admin@yourwebsite.com>"; // Replace with your email address

    if (mail($to, $message, $headers)) {
        return true;
    } else {
        error_log("Failed to send password reset email."); // Log failure
        return false;
    }
}

/**
 *  Placeholder functions for database interaction.  **Replace with your actual database code.**
 */

function get_stored_tokens() {
  // Replace this with your code to retrieve tokens from the database
  // Example:
  // return [
  //   'user1@example.com' => 'random_token_1',
  //   'user2@example.com' => 'random_token_2'
  // ];
  return []; // Return an empty array for now
}

function set_stored_tokens($tokens) {
  // Replace this with your code to store tokens in the database.
  // Example:
  //  //  $db = new DatabaseConnection();
  //  //  $sql = "DELETE FROM reset_tokens"; //Clear the table
  //  //  $db->query($sql);

  //  foreach ($tokens as $email => $token) {
  //    $sql = "INSERT INTO reset_tokens (email, token) VALUES ('" . $email . "', '" . $token . "')";
  //    $db->query($sql);
  //  }
}


// Example Usage (FOR TESTING - DO NOT USE IN PRODUCTION WITHOUT SECURITY MEASURES)
//  $email = "testuser@example.com";
//  $token = "random_unique_token_string_123";
//  $secret_key = "YourSecretKeyHere";
//  $reset_url = "http://localhost:8000/reset_password"; //  Adjust to your URL

//  if (forgot_password($email, $token, $secret_key, $reset_url)) {
//      echo "Password reset email sent successfully!";
//  } else {
//      echo "Failed to send password reset email.";
//  }

?>


<?php

// IMPORTANT:  This is a simplified example for demonstration purposes.
// In a production environment, you should:
// 1.  Use a proper database for storing user credentials.
// 2.  Implement robust security measures (e.g., hashing passwords, input validation, CSRF protection).
// 3.  Consider using a dedicated password reset library or service.
// 4.  Store the reset token securely (e.g., in a database or a session).

class UserForgotPassword {

    private $db; // Database connection (replace with your actual connection)
    private $table_name = 'users'; // Name of your user table

    public function __construct($db) {
        $this->db = $db;
    }

    public function resetPassword($email) {
        // 1. Check if the email exists
        $result = $this->db->query("SELECT id, email FROM " . $this->table_name . " WHERE email = '$email'");
        $user = $result->fetch_assoc();

        if (!$user) {
            return false; // Email not found
        }

        // 2. Generate a unique, random reset token
        $token = bin2hex(random_bytes(32));

        // 3. Store the token in the database (associate with the user)
        $this->db->query("UPDATE " . $this->table_name . " SET reset_token = '$token' WHERE email = '$email'");

        // 4. (Optional) Send an email with the reset link
        //  - This part requires you to have an email sending functionality.
        //  - The email should contain a link like:  http://yourwebsite.com/reset-password?token=$token
        //  - You can use a templating engine like Blade to create the email.


        return true;
    }

    public function verifyTokenAndReset($token, $new_password) {
        // 1. Check if the token exists in the database
        $result = $this->db->query("SELECT id FROM " . $this->table_name . " WHERE reset_token = '$token'");
        $user = $result->fetch_assoc();

        if (!$user) {
            return false; // Token not found or invalid
        }

        // 2.  Update the user's password (USE HASHING!)
        //  - IMPORTANT:  Never store passwords in plain text.  Always hash them.
        $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

        $this->db->query("UPDATE " . $this->table_name . " SET password = '$hashed_password', reset_token = '',  status = 'active' WHERE id = '$user['id']'"); // Clear the reset token

        return true;
    }
}



// Example Usage (Illustrative - Adapt to your setup)

//  Assume you have a database connection object $db

//  1.  Reset Password Request
// $userForgotPassword = new UserForgotPassword($db);
// if ($userForgotPassword->resetPassword('user@example.com')) {
//   echo "Reset password link sent to user@example.com";
// } else {
//   echo "Failed to reset password.  User not found or email already in use.";
// }



// 2.  Verify Token and Reset Password
// $userForgotPassword = new UserForgotPassword($db);

// // Example:  User clicks the link, pastes the token and enters a new password
// $token = $_GET['token']; // Get the token from the URL (sanitize this thoroughly!)
// $new_password = $_POST['new_password'];

// if ($userForgotPassword->verifyTokenAndReset($token, $new_password)) {
//   echo "Password successfully reset!";
// } else {
//   echo "Invalid token or reset process failed.";
// }

?>


<?php

// Configuration (Replace with your actual database details)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_username';
$db_password = 'your_database_password';

// Function to reset password
function forgot_password($email, $token, $new_password, $db) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false;
  }

  // 2. Check if token exists
  $query = "SELECT id FROM password_resets WHERE email = '$email' AND token = '$token'";
  $result = $db->query($query);

  if ($result->num_rows > 0) {
    // Token is valid, proceed with password update
    $query = "UPDATE users SET password = '$new_password'";
    $result = $db->query($query);

    if ($result) {
      // 1. Delete the token record (Important - prevent reuse)
      $query = "DELETE FROM password_resets WHERE email = '$email' AND token = '$token'";
      $result = $db->query($query);

      if ($result) {
        return true;
      } else {
        //  Error deleting token - log this!
        error_log("Error deleting password reset token: " . $db->error);
        return false;
      }
    } else {
      // Error updating password - log this!
      error_log("Error updating password: " . $db->error);
      return false;
    }
  } else {
    // Token is invalid - no user with this token
    return false;
  }
}


// Example Usage (Demonstration - Replace with actual form handling)
//  This simulates getting the email, token, and new password from a form.

// Assume you have a form that submits these values.  In a real application,
// you would sanitize and validate these inputs thoroughly before using them.

// Simulate form input
$email = $_POST['email'];
$token = $_POST['token'];
$new_password = $_POST['new_password'];

// *** IMPORTANT SECURITY NOTE: ***
// In a real application, you should NEVER directly use user-provided input
// in database queries.  This is a simplified example for demonstration purposes only.
// You MUST use prepared statements (parameterized queries) to prevent SQL injection vulnerabilities.
// The following is just for demonstration.

// Setup database connection (Replace with your connection details)
$db = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($db->connect_error) {
  die("Connection failed: " . $db->connect_error);
}


// Call the forgot_password function
$reset_success = forgot_password($email, $token, $new_password, $db);

if ($reset_success) {
  echo "Password reset successful!  Please check your email.";
} else {
  echo "Invalid token or email.  Please try again.";
}

$db->close(); // Close the database connection
?>


<?php

/**
 * Forgets a user's password.
 *
 * This function sends a password reset link to the user's email.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function forgotPassword(string $email): bool
{
    // Sanitize and validate the email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided: " . $email); // Log for debugging
        return false;
    }

    // 1. Generate a unique token
    $token = bin2hex(random_bytes(32));

    // 2. Store the token in the database (assuming you have a 'users' table)
    //    Replace this with your actual database interaction
    $userId = getUserIDByEmail($email); // Assuming you have a function to get the user ID by email
    if ($userId === null) {
        error_log("User with email " . $email . " not found.");
        return false; // User not found
    }


    // Prepare the query for inserting the token
    $sql = "UPDATE users SET reset_token = '$token' WHERE id = $userId";

    // Execute the query
    $result = mysqli_query($GLOBALS['db_connection'], $sql); // Replace with your DB interaction
    if (!$result) {
        error_log("Failed to update user token: " . mysqli_error($GLOBALS['db_connection']));
        return false;
    }

    // 3. Generate the reset link
    $resetLink =  "https://yourwebsite.com/reset-password?token=$token";

    // 4. Send the reset link via email
    $to = $email;
    $subject = 'Password Reset';
    $message = "Click on the following link to reset your password: " . $resetLink;
    $headers = "From: yourwebsite@example.com";  // Replace with your email address
    mail($to, $message, $headers);
    // Check for email sending success.  This is difficult to do reliably in PHP.
    // You'd typically use a library or service for this.  The mail() function
    // can be unreliable.  Consider using a dedicated email sending service.

    return true;
}

// -------------------  Helper Functions (Placeholder - Implement these) --------------------

/**
 * Retrieves the user ID from the database based on the email.
 *
 * @param string $email The email address to search for.
 * @return int|null The user ID, or null if the user is not found.
 */
function getUserIDByEmail(string $email): ?int
{
    // Replace this with your actual database query
    // Example using MySQLi:
    // $sql = "SELECT id FROM users WHERE email = '$email'";
    // $result = mysqli_query($GLOBALS['db_connection'], $sql);
    // if (!$result) {
    //     return null;
    // }
    // $row = mysqli_fetch_assoc($result);
    // return $row['id'];

    //Dummy implementation to allow the function to be called
    return 1;
}

// -----------------------  Database Connection (Example) ----------------------------
$GLOBALS['db_connection'] = mysqli_connect("localhost", "username", "password", "database_name");

if (!$GLOBALS['db_connection']) {
    die('Could not connect to database.');
}


// ------------------ Example Usage (for demonstration) ----------------------------
$email = "test@example.com";  // Replace with a valid email
if (forgotPassword($email)) {
    echo "Password reset link sent to $email";
} else {
    echo "Failed to send password reset link.";
}

// Close the database connection (important!)
mysqli_close($GLOBALS['db_connection']);
?>


<?php

/**
 * Forgot Password Function
 *
 * This function generates a unique token, sends a password reset email to the user,
 * and optionally, sets a session variable for the reset link.
 *
 * @param string $email      The email address of the user.
 * @param string $baseUrl   The base URL of your application (e.g., 'http://example.com').
 * @param string $resetTokenPrefix  (Optional) A prefix to prepend to the generated token.  Good for security. Defaults to 'reset_'.
 * @return bool           True if the email was sent successfully, false otherwise.
 */
function forgotPassword(string $email, string $baseUrl, string $resetTokenPrefix = 'reset_') {
    // 1. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator

    // 2. Store the Token (Database) - **IMPORTANT:  Securely store this**
    //   This is a simplified example -  in a production environment,
    //   you should use a secure database and proper sanitization.
    //   This demonstrates the concept.

    // Assuming you have a database connection called $db
    // $db->query("DELETE FROM password_resets WHERE email = '$email'"); // Clear previous resets
    // $db->query("INSERT INTO password_resets (email, token, created_at) VALUES ('$email', '$token', NOW())");


    // 3. Create the Reset Link
    $resetLink = $baseUrl . "/reset-password?token=" . $token;

    // 4. Send the Password Reset Email
    $to = $email;
    $subject = 'Password Reset';
    $message = "To reset your password, please click on the following link: " . $resetLink;
    $headers = "From: " .  "Your Application Name <noreply@" . $baseUrl . ">" . "\r
"; //Replace with your application's no-reply email address

    if (mail($to, $subject, $message, $headers)) {
        return true;
    } else {
        // Handle email sending failure (e.g., log the error)
        error_log("Failed to send password reset email for $email");
        return false;
    }
}



// Example Usage (for demonstration - replace with your actual application logic)
// Assuming you have a function to display a form for forgot password
// $email = $_POST['email']; // Get email from form

// if (isset($email)) {
//     if (empty($email)) {
//         echo "Please enter your email address.";
//     } else {
//         if (forgotPassword($email, 'http://yourwebsite.com')) {
//             echo "Password reset email has been sent.  Check your inbox!";
//         } else {
//             echo "An error occurred while sending the email.";
//         }
//     }
// }

?>


<?php

// IMPORTANT: This is a simplified example for demonstration purposes only.
// In a production environment, you should NEVER store passwords in plain text.
// Use strong hashing algorithms (e.g., bcrypt, Argon2) and salting.

// 1. Database connection (replace with your actual credentials)
$dbHost = "localhost";
$dbName = "your_database_name";
$dbUser = "your_database_username";
$dbPassword = "your_database_password";

try {
    $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName;charset=utf8mb4", $dbUser, $dbPassword);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// 2. Function to handle the forgot password process
function forgotPassword($email) {
    // Validate email (basic check - improve in a real application)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // Check if the user exists
    $stmt = $pdo->prepare("SELECT id, email FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        return "User not found.";
    }

    // Generate a unique token (use a more robust method in production)
    $token = bin2hex(random_bytes(32)); // Generate a cryptographically secure random string

    // Store the token and user ID in the database
    $stmt = $pdo->prepare("UPDATE users SET password_reset_token = ?, password_reset_expires = ? WHERE email = ?");
    $stmt->execute([$token, date('Y-m-d H:i:s', time() + 3600), $email]); // Token expires after 1 hour

    return $token; // Return the token to the user
}

// 3. Example usage (simulated form handling)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    if (isset($email)) {
        $resetToken = forgotPassword($email);
        echo "<p>Please check your email inbox. A password reset link has been sent to you.</p>";
        echo "<p>Reset Token: " . htmlspecialchars($resetToken) . "</p>"; //Display the token (careful with security)
        echo "<p>You can copy and paste this token into the reset password form.</p>";
    } else {
        echo "<p>Error: Email address is required.</p>";
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="">
        <label for="email">Email Address:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

/**
 * Forgets a user's password and sends them a reset link.
 *
 * @param string $email The user's email address.
 * @param string $password The new password.
 * @param string $resetToken The unique token generated for password reset.
 * @param PDO $pdo The database connection.
 * @return bool True if the reset link was successfully sent, false otherwise.
 */
function forgot_password(string $email, string $password, string $resetToken, PDO $pdo) {
    // 1. Validate Input (Basic - Enhance with more robust validation)
    if (empty($email) || empty($password) || empty($resetToken)) {
        error_log("Forgot Password function: Missing required parameters.");
        return false;
    }

    // 2. Find the User
    $stmt = $pdo->prepare("SELECT id, email FROM users WHERE email = :email AND reset_token = :resetToken");
    $stmt->bindParam(':email', $email);
    $stmt->bindParam(':resetToken', $resetToken);
    $stmt->execute();

    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        error_log("Forgot Password function: User not found with email: " . $email . " and reset token: " . $resetToken);
        return false; // User not found
    }


    // 3. Update Password
    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
    $stmt = $pdo->prepare("UPDATE users SET password = :password, reset_token = '', last_reset = NOW() WHERE id = :id"); //reset_token reset and record last reset
    $stmt->bindParam(':password', $hashedPassword);
    $stmt->bindParam(':id', $user['id']);
    $stmt->execute();

    // 4. Send Reset Link (Implementation depends on your email sending method)
    // Example - Replace with your actual email sending logic
    $resetLink = 'http://yourwebsite.com/reset_password?token=' . urlencode($resetToken); // Construct reset link
    send_reset_email($email, $resetLink); //Function to send the email.

    return true;
}

/**
 * Placeholder function to send a reset email.
 * Replace this with your actual email sending logic.
 *
 * @param string $email The user's email address.
 * @param string $resetLink The reset password link.
 */
function send_reset_email(string $email, string $resetLink) {
    // Implement your email sending logic here.
    // This is a placeholder - replace with your email sending code.
    error_log("Sending reset email to: " . $email . " with link: " . $resetLink);

    // Example (you'll need to configure an SMTP connection or use a library)
    // $to = $email;
    // $subject = 'Password Reset';
    // $message = "Click this link to reset your password: " . $resetLink;
    // $headers = "From: yourname@example.com\r
";
    // mail($to, $subject, $message, $headers);
}
?>


function generate_reset_token() {
    return bin2hex(random_bytes(32)); // Generate a 32-byte (256-bit) random string
}

// Usage
$resetToken = generate_reset_token();
echo $resetToken;


<?php

/**
 * Forgot Password Function
 *
 * Generates a temporary password and sends it to the user's email.
 *
 * @param string $email The user's email address.
 * @param string $to  The email address to send the password reset link to.
 * @param string $from The email address of the sender.  Should be a valid email address.
 * @param string $subject The subject of the email.
 * @param string $message The body of the email.
 * @param string $reset_token_life The lifespan of the reset token in seconds (default: 3600 - 1 hour).
 * @return bool True if the email was sent successfully, false otherwise.
 */
function forgot_password(string $email, string $to, string $from, string $subject, string $message, int $reset_token_life = 3600) {
    // Sanitize the email
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);

    if (empty($email)) {
        error_log("Invalid email address provided."); // Log for debugging
        return false;
    }

    // Generate a random reset token
    $reset_token = bin2hex(random_bytes(32)); // More secure than md5/sha1

    // Hash the token (optional, but recommended for security)
    $hashed_token = password_hash($reset_token, PASSWORD_DEFAULT);  //Using password_hash for secure hashing

    // Store the token and user ID in the database (replace with your database interaction)
    // This is a placeholder - you'll need to adapt this to your database structure
    $user_id = get_user_id_by_email($email); //  Assuming you have a function to get user ID from email
    if (!$user_id) {
        error_log("User with email {$email} not found."); // Log if user doesn't exist
        return false;
    }

    // Store the token in the database.  Replace this with your database logic
    // This example uses a simple array (for demonstration only)
    $reset_tokens = get_reset_tokens_by_user_id($user_id);
    $reset_tokens[] = ['token' => $reset_token, 'expiry' => time() + $reset_token_life];
    store_reset_tokens_by_user_id($user_id, $reset_tokens);


    // Construct the reset link
    $reset_url = "http://yourdomain.com/reset_password?token=" . urlencode($reset_token) . "&expiry=" . urlencode(time() + $reset_token_life);


    // Send the email
    if (send_email($to, $subject, $message, $reset_url)) {
        return true;
    } else {
        error_log("Failed to send email to {$to}");  // Log email sending failure
        // Optionally, you could delete the token from the database here if the email sending failed
        //  to avoid a potentially exposed token.  Be very careful when doing this.
        delete_reset_token_by_user_id($user_id, $reset_token);
        return false;
    }
}


/**
 * Placeholder Functions (Replace with your actual implementations)
 */

/**
 * Example function to get the user ID from email.  Replace with your database query.
 *
 * @param string $email The email address.
 * @return int|null The user ID, or null if not found.
 */
function get_user_id_by_email(string $email) {
    // Replace this with your actual database query
    // Example:
    // $db = new PDO(...);
    // $stmt = $db->prepare("SELECT id FROM users WHERE email = ?");
    // $stmt->execute([$email]);
    // $result = $stmt->fetch(PDO::FETCH_ASSOC);
    // return $result['id'] ?? null;

    // Placeholder for demonstration
    if ($email === 'test@example.com') {
        return 123;
    }
    return null;
}

/**
 * Placeholder function to store reset tokens in the database.  Replace with your database logic.
 *
 * @param int $user_id The user ID.
 * @param array $reset_tokens The reset tokens to store.
 */
function store_reset_tokens_by_user_id(int $user_id, array $reset_tokens) {
    // Replace this with your database insertion logic
    // Example:
    // $db = new PDO(...);
    // $sql = "INSERT INTO reset_tokens (user_id, token, expiry) VALUES (:user_id, :token, :expiry)";
    // $stmt = $db->prepare($sql);
    // $stmt->execute([
    //     'user_id' => $user_id,
    //     'token' => $token,
    //     'expiry' => time() + $reset_token_life
    // ]);
}

/**
 * Placeholder function to get reset tokens for a user.
 *
 * @param int $user_id The user ID.
 * @return array The reset tokens.
 */
function get_reset_tokens_by_user_id(int $user_id) {
    // Replace this with your database query
    // Example:
    // $db = new PDO(...);
    // $stmt = $db->prepare("SELECT token, expiry FROM reset_tokens WHERE user_id = ?");
    // $stmt->execute([$user_id]);
    // $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
    // return $result;

    // Placeholder for demonstration
    return [];
}


/**
 * Placeholder function to delete a reset token by user ID and token.
 *
 * @param int $user_id The user ID.
 * @param string $token The token to delete.
 */
function delete_reset_token_by_user_id(int $user_id, string $token) {
    // Replace this with your database deletion logic
    // Example:
    // $db = new PDO(...);
    // $sql = "DELETE FROM reset_tokens WHERE user_id = ? AND token = ?";
    // $stmt = $db->prepare($sql);
    // $stmt->execute([$user_id, $token]);
}



/**
 * Placeholder function to send an email. Replace with your email sending implementation.
 *
 * @param string $to The email address.
 * @param string $subject The email subject.
 * @param string $message The email body.
 * @param string $reset_url The reset password URL.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function send_email(string $to, string $subject, string $message, string $reset_url) {
    // Replace this with your email sending implementation (e.g., using PHPMailer)
    // Example:
    // $mail = new PHPMailer(true);
    // $mail->SetFrom('your_email@example.com', 'Your Website');
    // $mail->AddAddress($to, 'User');
    // $mail->Subject = $subject;
    // $mail->MsgBody = $message;
    // $mail->Body = $message;
    // $mail->AddAttachment("attachment.jpg", "Image");
    // return $mail->Send();

    // Placeholder for demonstration
    error_log("Simulating email sending to {$to} with subject {$subject} and body {$message} and URL {$reset_url}");
    return true;
}



?>


<?php

// This is a simplified example and should be adapted for a real-world application.
// Consider using a proper database and session handling for security.

// IMPORTANT:  Never store passwords in plain text!  This example uses hashing and salting for demonstration only.
// In a production environment, use a strong password hashing algorithm like bcrypt or Argon2.

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password to set.
 * @param array $db  Database connection (or database object)
 *
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $newPassword, array $db) {
    // 1. Validate Email
    if (empty($email)) {
        error_log("Forgot Password: Invalid email address.");  // Log the error for debugging
        return false;
    }

    // 2. Check if User Exists
    $user = getUserByEmail($email, $db);
    if ($user === null) {
        error_log("Forgot Password: User not found for email: " . $email); // Log for debugging
        return false;
    }

    // 3.  Hash the New Password - VERY IMPORTANT for security!
    $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

    // 4. Update User's Password
    $result = updatePassword($user['id'], $hashedNewPassword, $db);

    if ($result === true) {
        // Password update successful
        return true;
    } else {
        // Password update failed. Log the error for debugging.
        error_log("Forgot Password: Failed to update password for user: " . $email);
        return false;
    }
}

/**
 * Helper function to get user by email.
 *
 * @param string $email The email address to search for.
 * @param array $db  Database connection (or database object)
 *
 * @return array|null User data if found, null otherwise.
 */
function getUserByEmail(string $email, array $db) {
    $stmt = $db['query']("SELECT id, username, email FROM users WHERE email = ?", [$email]);

    if ($stmt->rowCount() > 0) {
        return $stmt->fetchArray(PDO::FETCH_ASSOC);
    }
    return null;
}

/**
 * Helper function to update a user's password.
 *
 * @param int $userId The ID of the user to update.
 * @param string $hashedPassword The hashed new password.
 * @param array $db Database connection (or database object)
 *
 * @return bool True on success, false on failure.
 */
function updatePassword(int $userId, string $hashedPassword, array $db) {
    $sql = "UPDATE users SET password = ?, hashed_password = ? WHERE id = ?";
    $stmt = $db['query']($sql, [$hashedPassword, $hashedPassword, $userId]);

    return ($stmt->rowCount() === 1); // Check if exactly one row was affected.
}



// Example Usage (for demonstration only - never put this in your public-facing code)
// This is just to demonstrate how the function is called.  It's not meant to be run directly.
// You would typically call this function through a form submission.

// Mock database connection (replace with your actual database setup)
$db = [
    'query' => function($sql, $params) {
        // Simulate a PDO query - replace with your actual database connection.
        // This is a basic example; a real application should use a robust database connection.
        try {
            $conn = new PDO('mysql:host=localhost;dbname=mydatabase', 'user', 'password');
            $stmt = $conn->prepare($sql);
            $stmt->execute($params);
            return $stmt;
        } catch (PDOException $e) {
            // Handle database errors appropriately (logging, error page, etc.)
            error_log("Database error: " . $e->getMessage());
            return null;
        }
    }
];

// Simulate a form submission
$email = 'test@example.com';
$newPassword = 'MyNewPassword123';


if (forgotPassword($email, $newPassword, $db)) {
    echo "Password reset email sent.  Check your inbox!";
} else {
    echo "Password reset failed.  Please try again.";
}


?>


<?php

// This is a simplified example and should be adapted for production environments.
// Never directly embed passwords in your code or database.  Use secure hashing and salting.

// 1. Database connection (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_username';
$db_password = 'your_password';

// 2. Get user email from the form
if (isset($_POST['email'])) {
    $email = $_POST['email'];

    // **Important: Validation and Sanitization**
    $email = filter_var($email, FILTER_SANITIZE_EMAIL); // Sanitize the email
    if (empty($email)) {
        $message = "Please enter your email address.";
    } else {
        // 3. Check if the user exists in the database
        $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

        if ($conn->connect_error) {
            die('Connection failed: ' . $conn->connect_error);
        }

        $sql = "SELECT id, email FROM users WHERE email = '$email'";
        $result = $conn->query($sql);

        if ($result->num_rows > 0) {
            // User exists, generate a token and send an email
            $token = bin2hex(random_bytes(32)); // Generate a random token

            // Store the token in the database for the user
            $sql_insert = "UPDATE users SET password_token = '$token' WHERE email = '$email'";
            if ($conn->query($sql_insert)) {
                // Email sending (replace with your actual email sending logic)
                $to = $email;
                $subject = 'Password Reset';
                $message = "Click on the following link to reset your password: <a href='reset_password.php?token=$token'>Reset Password</a>";
                $headers = "From: your_email@example.com\r
"; // Replace with your email address

                mail($to, $message, $headers);

                $message = "Password reset email sent to $email.";
            } else {
                $message = "Error updating user with token.";
            }


        } else {
            $message = "User not found.";
        }

    }
}

// 4. Display the message
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

<h1>Forgot Password</h1>

<?php if (isset($message)) {
    echo "<p>$message</p>";
}
?>

<form action="" method="post">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Enter your email address">
    <button type="submit">Reset Password</button>
</form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// This is a simplified example and should be adapted for your specific setup.

// Function to handle the forgot password process
function forgotPassword($email) {
  // 1. Check if the email exists in the database
  $stmt = $db->prepare("SELECT id, email FROM users WHERE email = ?");
  $stmt->bind_param("s", $email); // 's' indicates a string parameter
  $result = $stmt->execute();

  if ($result === false) {
    // Handle database error
    error_log("Error executing query: " . $db->error);
    return "An error occurred while processing your request.";
  }

  $row = $stmt->get_result()->fetch_assoc();

  if ($row === null || empty($row)) {
    return "Email address not found.";
  }

  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32)); // Generates a cryptographically secure random string

  // 3.  Create a password reset token record in the database
  $stmt = $db->prepare("INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, ?)");
  $stmt->bind_param("iii", $row['id'], $token, time() + 60 * 60 * 24); // Expires in 24 hours
  $result = $stmt->execute();

  if ($result === false) {
    // Handle database error
    error_log("Error inserting into password_resets: " . $db->error);
    return "An error occurred while processing your request.";
  }

  // 4.  Send an email to the user with the reset link
  $subject = "Password Reset Link";
  $message = "Click on the following link to reset your password:
";
  $message .= "<a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'>";
  $message .= "<a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'>"; // Use $_SERVER['PHP_SELF'] to redirect correctly
  $message .= "Reset Password</a>";
  $message .= "<br><br>This link will expire in 24 hours.";
  $headers = "From: Your Website <admin@yourwebsite.com>\r
";

  if (mail($email, $subject, $message, $headers)) {
    return "Password reset email sent.  Please check your inbox.";
  } else {
    return "Failed to send password reset email.";
  }
}

// Example usage (assuming you have a form to submit the email)
//  Suppose you have an email form with a field named "email".
//  You would call the function like this:

// if ($_SERVER["REQUEST_METHOD"] == "POST") {
//   $email = $_POST["email"];
//   $reset_message = forgotPassword($email);
//   echo $reset_message;
// }
?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Forgets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset link has been sent, false otherwise.
 */
function forgotPassword(string $email) {
  // 1. Validate Email (Basic) -  Expand this for more robust validation if needed.
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email address provided: " . $email); // Log the invalid email
    return false;
  }

  // 2. Check if the user exists.  This is crucial.
  $user = getUserByEmail($email); // Assume you have a function to fetch the user
  if (!$user) {
    error_log("User with email " . $email . " not found.");
    return false;
  }

  // 3. Generate a Unique Token (Important for security)
  $token = generateUniqueToken();

  // 4. Store the Token and User ID in the Database
  $result = storeTokenForUser($user->id, $token); // Assume you have a function for this
  if (!$result) {
    error_log("Failed to store token for user " . $email);
    return false;
  }

  // 5. Send the Password Reset Email
  $subject = "Password Reset";
  $message = "To reset your password, please click on the following link: " .  base_url() . "/reset-password?token=" . $token;  // Use your base URL
  $headers = "From: " . get_option('admin_email') . "\r
"; //Replace with your email
  $result = sendEmail($email, $subject, $message, $headers);
  if (!$result) {
    error_log("Failed to send email for password reset to " . $email);
    // Optionally, you might try deleting the token if email sending fails.
    // deleteTokenForUser($user->id, $token);
    return false;
  }

  return true;
}


/**
 *  Helper function to get a user by email.  Replace with your actual implementation.
 * @param string $email
 * @return object|null User object or null if not found.
 */
function getUserByEmail(string $email) {
    // Replace this with your database query logic
    // This is a placeholder example.
    $users = [
        ['id' => 1, 'email' => 'test@example.com', 'password' => 'password123'],
        ['id' => 2, 'email' => 'another@example.com', 'password' => 'secret']
    ];

    foreach ($users as $user) {
        if ($user['email'] === $email) {
            return new stdClass(); // Create a new object for the user
        }
    }

    return null;
}


/**
 * Generate a unique token.  Consider using a library for cryptographically secure random strings.
 * @return string
 */
function generateUniqueToken() {
    return bin2hex(random_bytes(32)); // More secure than mt_rand
}

/**
 *  Placeholder function to store the token in the database.
 * @param int $userId
 * @param string $token
 * @return bool
 */
function storeTokenForUser(int $userId, string $token) {
    // Your database logic here.
    // For example:
    // $query = "INSERT INTO password_tokens (user_id, token, expires_at) VALUES ($userId, '$token', NOW() + INTERVAL 7 DAY)";
    // executeQuery($query);
    return true;
}


/**
 *  Placeholder function to send an email.
 * @param string $to
 * @param string $subject
 * @param string $message
 * @param string $headers
 * @return bool
 */
function sendEmail(string $to, string $subject, string $message, string $headers) {
    // Replace this with your email sending logic (e.g., using PHPMailer or similar).
    // This is a placeholder for demonstration purposes.

    // Simulate successful sending
    error_log("Simulated sending email to: " . $to . " with subject: " . $subject);
    return true;
}

/**
 *  Placeholder function to delete the token.
 * @param int $userId
 * @param string $token
 * @return bool
 */
function deleteTokenForUser(int $userId, string $token) {
    //Your database logic here to delete the token record.
    return true;
}

/**
 *  Returns the base url of your website.  Useful for generating reset links.
 * @return string
 */
function base_url() {
    // Replace this with your actual base URL.
    return "http://localhost/your-website";
}


// Example Usage:
$email = "test@example.com";

if (forgotPassword($email)) {
    echo "Password reset email has been sent to " . $email . ".  Check your inbox.";
} else {
    echo "Failed to initiate password reset for " . $email;
}

?>


<?php

// Ensure this file is part of a secure application and is not directly accessible via web browser.
// This is a basic example and should be enhanced for production use.

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_db_user";
$db_pass = "your_db_password";

// Check if the request is a form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get the email from the form
  $email = $_POST["email"];

  // Validate the email (basic validation, enhance for production)
  if (empty($email)) {
    $error = "Please enter your email address.";
  } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error = "Invalid email address.";
  } else {
    // Attempt to reset the password
    if (resetPassword($email)) {
      $message = "Password reset instructions sent to your email address.";
    } else {
      $error = "An error occurred while resetting your password.";
    }
  }
}

// Function to reset the password
function resetPassword($email) {
  global $db_host, $db_name, $db_user, $db_pass;

  // Establish database connection
  $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

  // Check connection
  if ($conn->connect_error) {
    trigger_error("Failed to connect to database: " . $conn->connect_error, E_USER_ERROR);
    return false;
  }

  // Hash the password (VERY IMPORTANT FOR SECURITY)
  $password = password_hash('password', PASSWORD_DEFAULT); // Replace 'password' with a generated random string

  // Prepare and execute the SQL query
  $sql = "UPDATE users SET password = '$password', reset_token = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890' WHERE email = '$email'";  //  Use a token for security.  Don't send the actual password!
  $result = $conn->query($sql);

  if ($result->num_rows == 0) {
    // User not found
    return false;
  }

  // Send password reset email (implementation depends on your email setup)
  // Example (requires a function to send emails):
  // sendResetEmail($email, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'); // Pass the token

  return true;
}

// Function to send reset email (placeholder - implement your email sending logic)
// function sendResetEmail($email, $token) {
//   //  Implement your email sending logic here
//   //  Example:
//   //  $to = $email;
//   //  $subject = "Password Reset Instructions";
//   //  $message = "Click this link to reset your password:  [reset link]";
//   //  $headers = "From: your_email@example.com";
//   //  mail($to, $subject, $message, $headers);
// }


?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h2>Forgot Password</h2>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($message)) { ?>
    <p style="color: green;"><?php echo $message; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email Address:</label>
    <input type="text" id="email" name="email" placeholder="Your Email">
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Database connection (Replace with your actual credentials)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_database_name";

// Function to reset password
function forgotPassword($email, $new_password) {
  // 1. Database connection
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    // Handle connection error
    die("Connection failed: " . $conn->connect_error);
  }

  // 2. Check if the email exists
  $query = "SELECT id FROM users WHERE email = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("s", $email); // 's' for string
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    // Email not found
    $stmt->close();
    $conn->close();
    return false;
  }

  // 3. Hash the new password
  $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

  // 4. Update the password in the database
  $query = "UPDATE users SET password = ? WHERE email = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("ss", $hashed_password, $email);
  $stmt->execute();

  if ($stmt->affected_rows === 0) {
    // Update failed - likely due to a problem with the email or password
    $stmt->close();
    $conn->close();
    return false;
  }
  
  $stmt->close();
  $conn->close();
  return true; // Password reset successful
}


// Example Usage (For demonstration purposes - would typically be in a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $new_password = $_POST["new_password"];

  if (empty($email) || empty($new_password)) {
    echo "Error: Email and new password are required.";
  } else {
    // Call the forgotPassword function
    if (forgotPassword($email, $new_password)) {
      echo "Password reset email sent. Please check your inbox.";
    } else {
      echo "Error: Password reset failed. Please try again.";
    }
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="new_password">New Password:</label>
    <input type="password" id="new_password" name="new_password" required><br><br>

    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// This is a simplified example and should be used with caution.
// In a real-world application, you would:
// 1. Store passwords securely (hashed).
// 2. Implement proper user authentication and security measures.
// 3.  Use a more robust email sending library.

class User {
    private $hashedPassword;
    private $email;

    public function __construct($email, $hashedPassword) {
        $this->email = $email;
        $this->hashedPassword = $hashedPassword;
    }

    public function resetPassword($newPassword) {
        // In a real application, you would hash the new password.
        // This is just for demonstration.
        $newHashedPassword = hash('sha256', $newPassword); 

        // Update the password in the database or other storage
        // This part is crucial for security!
        // Replace this with your actual database update code.
        $this->hashedPassword = $newHashedPassword;
    }
}

/**
 *  Function to handle the forgot password process.
 *
 * @param string $email The email address associated with the user.
 * @param string $baseUrl The base URL for the password reset link.  
 *                        e.g., 'http://example.com/reset-password'
 * @return string The password reset link, or an error message.
 */
function forgotPassword($email, $baseUrl) {
    // 1. Validate Email (Important!)
    if (empty($email)) {
        return "Error: Email address is required.";
    }
    
    // Check if the user exists (replace with your database query)
    // This is a placeholder -  you'll need to connect to your database
    // and verify the user.
    $userExists = checkIfUserExists($email);  // Implement this function

    if (!$userExists) {
        return "Error: User not found.";
    }


    // 2. Generate a Unique Token (Critical for security)
    $resetToken = generateUniqueToken(); // Implement this function

    // 3. Store the Token and User ID in the database
    // (Replace this with your database interaction code)
    storeTokenForUser($email, $resetToken); // Implement this function

    // 4.  Create the Password Reset Link
    $resetLink = $baseUrl . "?token=" . urlencode($resetToken);

    // 5.  Send the Email (Replace with a proper email library)
    $subject = "Password Reset Request";
    $message = "Click the link below to reset your password: " . $resetLink;
    //  In a real application, you would use a library like PHPMailer
    //  to send the email.  Don't hardcode email addresses or passwords.
    //  Example:
    //  sendEmail($email, $subject, $message); 

    return $resetLink;
}


/**
 * Placeholder function to check if a user exists in the database.
 * Replace this with your actual database query.
 *
 * @param string $email The email address to search for.
 * @return bool True if the user exists, false otherwise.
 */
function checkIfUserExists($email) {
    // Replace this with your actual database query
    // Example:
    // $conn = new mysqli("localhost", "username", "password", "database");
    // $result = $conn->query("SELECT * FROM users WHERE email = '$email'");
    // if ($result->num_rows > 0) {
    //   return true;
    // } else {
    //   return false;
    // }

    // For this example, we'll just return true for demonstration.
    return true;
}

/**
 * Placeholder function to generate a unique token.
 *
 * @return string A unique token.
 */
function generateUniqueToken() {
    return bin2hex(random_bytes(32));  // Use a cryptographically secure random number generator
}

/**
 * Placeholder function to store the token in the database.
 * Replace this with your actual database update code.
 *
 * @param string $email The email address.
 * @param string $token The token.
 */
function storeTokenForUser($email, $token) {
    // Replace this with your database update code.
    // Example:
    // $conn = new mysqli("localhost", "username", "password", "database");
    // $sql = "INSERT INTO reset_tokens (user_email, reset_token, expiry_date)
    //         VALUES ('$email', '$token', NOW())";
    // if ($conn->query($sql) === TRUE) {
    //   //print "New record created successfully";
    // } else {
    //   echo "Error: " . $sql . "<br>" . $conn->error;
    // }
}

// Example Usage:
$email = "test@example.com";
$baseUrl = "http://localhost/reset-password";
$resetLink = forgotPassword($email, $baseUrl);

if (strpos($resetLink, "Error:") === 0) {
    echo $resetLink . "<br>";
} else {
    echo "Password reset link: " . $resetLink . "<br>";
}


?>


<?php

// Assuming you have a database connection established and available as $db

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password.
 *
 * @return bool True if the password reset was successful, false otherwise.
 */
function forgotPassword(string $email, string $newPassword)
{
    // Validate email (basic check - adjust as needed for your application)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email);  // Log the error for debugging
        return false;
    }


    // 1. Check if the user exists
    $user = getUserById($email); // Assume this function fetches user by email

    if (!$user) {
        error_log("User not found with email: " . $email);
        return false;
    }


    // 2. Hash the new password (VERY IMPORTANT - never store passwords in plain text!)
    $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);


    // 3. Update the user's password in the database
    $result = updateUserPassword($user->id, $hashedPassword); // Assume this updates password based on user ID

    if (!$result) {
        error_log("Failed to update password for user: " . $email);
        return false;
    }

    return true;
}


/**
 * Placeholder functions (implement these based on your database structure)
 */

/**
 * Fetches a user by their email address.
 *
 * @param string $email The email address of the user.
 *
 * @return User | null User object if found, null otherwise.  (Adjust the User class as needed)
 */
function getUserById(string $email)
{
    // Replace this with your actual database query
    // Example using MySQLi (adapt to your database type)
    $db = getDatabaseConnection(); // Assume this function gets your database connection

    $stmt = $db->prepare("SELECT id, email FROM users WHERE email = ?");
    $stmt->bind_param("s", $email);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        $user = $result->fetch_object();
        return $user;
    }

    return null;
}


/**
 * Updates a user's password in the database.
 *
 * @param int $userId The ID of the user to update.
 * @param string $hashedPassword The newly hashed password.
 *
 * @return bool True if the update was successful, false otherwise.
 */
function updateUserPassword(int $userId, string $hashedPassword)
{
    // Replace this with your actual database query
    // Example using MySQLi (adapt to your database type)
    $db = getDatabaseConnection();

    $stmt = $db->prepare("UPDATE users SET password = ? WHERE id = ?");
    $stmt->bind_param("ss", $hashedPassword, $userId);  // 'ss' indicates two string parameters

    $result = $stmt->execute();

    // Check if the query executed successfully
    if ($result === false) {
        error_log("Error updating password: " . $stmt->error);
        return false;
    }

    return true;
}


// Example usage (for testing - remove or adjust before deploying)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $newPassword = $_POST["newPassword"];

    if (isset($email) && isset($newPassword)) {
        if (forgotPassword($email, $newPassword)) {
            echo "Password reset email has been sent.  Check your inbox.";
        } else {
            echo "Failed to reset password.  Please try again.";
        }
    } else {
        echo "Invalid request. Please provide email and new password.";
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required><br><br>

        <label for="newPassword">New Password:</label>
        <input type="password" id="newPassword" name="newPassword" required><br><br>

        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a reset email was sent, false otherwise.
 */
function forgotPassword(string $email): bool
{
    // 1. Check if the email exists
    $user = getUserByEmail($email);

    if (!$user) {
        return false; // User not found
    }

    // 2. Generate a unique token
    $token = generateUniqueToken();

    // 3. Store the token and user ID in the database
    $result = storeTokenForUser($user['id'], $token);

    if (!$result) {
        return false; // Failed to store token
    }

    // 4. Send the reset email
    $subject = "Password Reset Request";
    $message = "Click on the following link to reset your password: " . base_url() . "/reset-password?token=" . $token;  //  base_url() assumes you have this defined globally or in a config file

    $headers = ["Content-Type: text/html"]; //  Use HTML for better display

    $sent = sendEmail($email, $subject, $message, $headers);

    if (!$sent) {
        // Optionally, you can delete the token if the email fails to send
        deleteTokenForUser($user['id']);
        return false;
    }

    return true;
}


/**
 * Helper function to get user by email.  Replace this with your actual database query.
 *
 * @param string $email The email address to search for.
 * @return array|null  The user object if found, null otherwise.
 */
function getUserByEmail(string $email): ?array
{
    // *** REPLACE THIS WITH YOUR DATABASE QUERY ***
    // This is just a placeholder example.  You MUST adapt this to your database.
    // Example using a dummy database array:
    $users = [
        ['id' => 1, 'email' => 'user1@example.com', 'password' => 'hashed_password'],
        ['id' => 2, 'email' => 'user2@example.com', 'password' => 'hashed_password'],
    ];

    foreach ($users as $user) {
        if ($user['email'] === $email) {
            return $user;
        }
    }
    return null;
}

/**
 * Generates a unique token.
 *
 * @return string A unique token.
 */
function generateUniqueToken(): string
{
    return bin2hex(random_bytes(32)); // Stronger token
}


/**
 * Stores a token for a user.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token to store.
 * @return bool True if the token was stored successfully, false otherwise.
 */
function storeTokenForUser(int $userId, string $token): bool
{
    // *** REPLACE THIS WITH YOUR DATABASE INSERTION ***
    // Example using a dummy database insertion:
    $db = getDatabaseConnection();  //  Assume this function returns a database connection object

    $sql = "INSERT INTO password_tokens (user_id, token, expiry_date) VALUES (?, ?, NOW())";
    $stmt = $db->prepare($sql);
    $stmt->bind_param("ss", $userId, $token);

    return $stmt->execute();
}

/**
 * Deletes a token for a user.
 *
 * @param int $userId The ID of the user.
 * @return bool True if the token was deleted successfully, false otherwise.
 */
function deleteTokenForUser(int $userId): bool
{
    // *** REPLACE THIS WITH YOUR DATABASE DELETE ***
    // Example using a dummy database deletion:
    $db = getDatabaseConnection();

    $sql = "DELETE FROM password_tokens WHERE user_id = ?";
    $stmt = $db->prepare($sql);
    $stmt->bind_param("i", $userId);

    return $stmt->execute();
}


/**
 * Sends an email.  Replace this with your email sending mechanism.
 *
 * @param string $to        The email address to send to.
 * @param string $subject   The email subject.
 * @param string $message   The email body.
 * @param array  $headers   Email headers.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function sendEmail(string $to, string $subject, string $message, array $headers = [])
{
    // *** REPLACE THIS WITH YOUR EMAIL SENDING LOGIC ***
    // Example using a dummy email sending function:
    //  This is just a placeholder. Implement your actual email sending.
    //   You would likely use a library like PHPMailer.
    //echo "Sending email to: " . $to . "
Subject: " . $subject . "
Message: " . $message . "
";
    return true; // Replace with your actual email sending result
}


/**
 * Placeholder function to get a database connection.
 * @return  Database Connection object
 */
function getDatabaseConnection(): object {
  //  Replace this with your database connection code
  //  This is a dummy connection, adapt to your database.
  return new stdClass(); //return a dummy object to avoid errors
}

?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and that you have a 'users' table with a 'email' and 'password' column.

function forgotPassword($email, $db) {
    // 1. Validate email
    if (empty($email)) {
        return "Please enter an email address.";
    }

    // 2. Check if the user exists
    $result = $db->query("SELECT id, email FROM users WHERE email = '$email'");

    if ($result->num_rows > 0) {
        $user = $result->fetch_assoc();
        $userId = $user['id'];

        // 3. Generate a unique token for password reset
        $resetToken = bin2hex(random_bytes(32));

        // 4.  Store the token in the database (associated with the user)
        $db->query("UPDATE users SET reset_token = '$resetToken' WHERE id = $userId");

        // 5.  Send an email with the reset link
        $subject = "Password Reset Link";
        $to = $email;
        $from = 'your_email@example.com'; // Replace with your email address
        $message = "Please click on the following link to reset your password: " . '<a href="' . $_SERVER['PHP_SELF'] . '?email=' . urlencode($email) . '&token=' . urlencode($resetToken) . '" >Reset Password</a>';
        $headers = "From: " . $from . "\r
";
        $headers .= "Reply-To: " . $from . "\r
";
        $headers .= "X-Mailer: PHP/" . phpversion();

        if ($db->query($headers)) { //validate headers
            $db->query("INSERT INTO password_resets (user_id, token, expires_at) VALUES ($userId, '$resetToken', NOW() + INTERVAL 24 HOUR)"); //store the token in password_resets table
            return "Password reset email has been sent.  Please check your inbox.";
        } else {
            return "Failed to send password reset email.  Check your email settings.";
        }


    } else {
        return "User not found.";
    }
}

// Example usage:
// $email = 'testuser@example.com';
// $result = forgotPassword($email);
// echo $result;

?>


<?php

// This is a simplified example and should be used with caution.
// In a real-world scenario, you'd want to implement robust security measures.

// Configuration (Replace with your actual values)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_password = 'your_db_password';

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if the password was reset successfully, false otherwise.
 */
function forgot_password(string $email): bool
{
    // 1. Connect to the database
    try {
        $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERR_SILENT); // Suppress errors for simplicity
    } catch (PDOException $e) {
        error_log("Database connection error: " . $e->getMessage()); // Log for debugging
        return false;
    }

    // 2. Check if the user exists
    try {
        $stmt = $pdo->prepare("SELECT id, email FROM users WHERE email = :email");
        $stmt->bindParam(':email', $email, PDO::PARAM_STR);
        $stmt->execute();

        $user = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$user) {
            return false; // User not found
        }
    } catch (PDOException $e) {
        error_log("Database query error: " . $e->getMessage());
        return false;
    }


    // 3. Generate a unique token (for security)
    $token = bin2hex(random_bytes(32)); // Generate a cryptographically secure random token

    // 4.  Create a reset token record in the database
    try {
        $stmt = $pdo->prepare("INSERT INTO password_resets (user_id, token, expires_at) VALUES (:user_id, :token, :expires_at)");
        $stmt->bindParam(':user_id', $user['id'], PDO::PARAM_INT);
        $stmt->bindParam(':token', $token, PDO::PARAM_STR);
        $stmt->bindParam(':expires_at', date('Y-m-d H:i:s', time() + (2 * 24 * 60 * 60)), PDO::PARAM_STR); // Expires in 2 days
        $stmt->execute();

        return true;
    } catch (PDOException $e) {
        error_log("Database insert error: " . $e->getMessage());
        return false;
    }
}


// Example Usage:
//  (This would normally be triggered from a form submission)

$email = 'test@example.com';  // Replace with the user's email

if (forgot_password($email)) {
    echo "A password reset link has been sent to $email.";
} else {
    echo "Failed to reset password.  Please check the email or contact support.";
}

?>


<?php

// Configuration (replace with your actual settings)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_password = 'your_db_password';

// Function to reset password
function forgot_password($email, $new_password) {
  // 1. Database Connection
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  // Check connection
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // 2. Hash the new password (IMPORTANT for security)
  $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

  // 3. Update the password in the database
  $sql = "UPDATE users SET password = '$hashed_password' WHERE email = '$email'";

  if ($conn->query($sql) === TRUE) {
    return true; // Password reset successful
  } else {
    return false; // Password reset failed
  }

  // Close the connection
  $conn->close();
}


// --- Example Usage (This is just an example, replace with your form submission logic) ---

// Example:  Simulated form submission
if (isset($_POST['email']) && isset($_POST['new_password'])) {
    $email = $_POST['email'];
    $new_password = $_POST['new_password'];

    // Validation - VERY IMPORTANT!  Add more robust validation here.
    if (empty($email) || empty($new_password)) {
        echo "Error: Email and new password are required.";
    } else {
        // Call the forgot_password function
        if (forgot_password($email, $new_password)) {
            echo "Password reset successful! Please check your email for instructions.";
        } else {
            echo "Error: Password reset failed. Please try again.";
        }
    }
}


// ----------------------------------------------------------------------

?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a table named 'users' with a 'email' field.
// This code is a basic example and should be adapted to your specific setup.

function forgot_password($email, $token, $password, $db) {
  // 1. Validate Email
  $email = trim($email); // Remove leading/trailing whitespace
  if (empty($email)) {
    return "Error: Email cannot be empty.";
  }

  // 2. Check if user exists
  $result = $db->query("SELECT id, email FROM users WHERE email = '$email'");
  if ($result->num_rows == 0) {
    return "Error: User not found.";
  }
  $user = $result->fetch_assoc();


  // 3.  Check if token is valid (optional, for security)
  //    This step is crucial for preventing attackers from resetting passwords
  //    if they find an unused token.
  $token_result = $db->query("SELECT id, email, reset_token FROM users WHERE email = '$email' AND reset_token = '$token'");
  if ($token_result->num_rows == 0) {
    return "Error: Invalid token.";
  }
  $token_user = $token_result->fetch_assoc();


  // 4. Update user's password (Secure Hashing is CRITICAL)
  $hashed_password = password_hash($password, PASSWORD_DEFAULT);
  $update_query = "UPDATE users SET password = '$hashed_password', reset_token = '', reset_token_expiry = NULL  WHERE email = '$email'";
  $update_result = $db->query($update_query);

  if ($update_result) {
    return "Password reset successful. Please check your email.";
  } else {
    return "Error: Could not reset password.";
  }
}


// Example Usage (Illustrative - Replace with your actual database connection)
// $db = new mysqli("localhost", "username", "password", "database_name");

// if ($db->connect_error) {
//   die("Connection failed: " . $db->connect_error);
// }

// $email = $_POST['email'];
// $token = $_POST['token'];
// $new_password = $_POST['password'];

// $result = forgot_password($email, $token, $new_password, $db);
// echo $result;


?>


<?php

// Assuming you have a database connection established and a 'users' table
// with a 'password' column.  This is a simplified example - you'll need
// to adapt this to your specific database setup.

function forgot_password($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2.  Retrieve User Data
  $stmt = $conn->prepare("SELECT id, password, salt FROM users WHERE email = ?");
  $stmt->bind_param("s", $email);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    $stmt->close();
    return "User not found.";
  }

  $user = $result->fetch_assoc();
  $stmt->close();

  // 3. Generate a Unique Token (for security)
  $token = bin2hex(random_bytes(32));  // Use a cryptographically secure random number generator

  // 4.  Store the Token and User ID in a temporary table (for security)
  // This is a temporary solution.  Consider more robust session-based or
  // email-based methods for production.  A temporary table is preferred
  // over a session for improved security and reliability.
  $stmt = $conn->prepare("INSERT INTO password_reset_tokens (user_id, token, expiry_time) 
                           VALUES (?, ?, NOW())");
  $stmt->bind_param("sss", $user['id'], $token, $user['id']); // using user id for expiry time
  $stmt->execute();
  $stmt->close();


  // 5.  Send Password Reset Email (Example)
  $to = $email;
  $subject = 'Password Reset';
  $message = "Please click the following link to reset your password: " . 
             $_SERVER['REQUEST_SCHEME'] . "://yourdomain.com/reset_password?token=" . $token;
  $headers = 'From: yourdomain@example.com' . "\r
";

  mail($to, $subject, $message, $headers);

  return "Password reset link sent to your email address.";
}


// Example usage (within a form or other context)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"]; // Assuming you have an email field in your form

  if (isset($email)) {
    $result = forgot_password($email);
    echo $result; // Display the result (e.g., "Password reset link sent...")
  }
}
?>

<!-- HTML Form (Example) -->
<form method="post" action="">
  <label for="email">Email:</label>
  <input type="email" id="email" name="email" required>
  <button type="submit">Reset Password</button>
</form>


<?php

// Database connection details (Replace with your actual values)
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$database = 'your_database_name';

// Function to handle password reset requests
function forgot_password($email) {
    // 1. Validate email format
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // 2. Fetch user data from the database
    $pdo = new PDO("mysql:host=$host;dbname=$database", $username, $password);
    $stmt = $pdo->prepare("SELECT id, password, email FROM users WHERE email = :email");
    $stmt->bindParam(':email', $email);
    $stmt->execute();

    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    // 3. Check if the user exists
    if ($user) {
        // 4. Generate a unique token
        $token = bin2hex(random_bytes(32)); // Generates a cryptographically secure random token
        // 5.  Store the token and user ID in the database
        try {
            $pdo->prepare("UPDATE users SET password_reset_token = :token, password_reset_token_expiry = :expiry WHERE email = :email")
                  ->bindParam(':token', $token)
                  ->bindParam(':expiry', date('Y-m-d H:i:s', time() + 3600)) // Expires after 1 hour
                  ->bindParam(':email', $email)
                  ->execute();
            return $token; // Return the token to the user
        } catch (PDOException $e) {
            // Handle database errors (e.g., duplicate token)
            error_log("Error resetting password: " . $e->getMessage()); // Log the error for debugging
            return "An error occurred while generating the reset token. Please try again.";
        }

    } else {
        return "User not found.";
    }
}


// Example Usage (for demonstration purposes - DON'T use this in a real web application directly)
// $email = 'test@example.com';
// $resetToken = forgot_password($email);

// if ($resetToken == "Invalid email address.") {
//     echo $resetToken; // Display the error message
// } elseif ($resetToken == "User not found.") {
//     echo $resetToken;
// } else {
//     echo "Password reset link sent to: " . $resetToken;
// }
?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a table named 'users' with a 'email' column.

/**
 * Forgets a user's password by sending a password reset link to their email.
 *
 * @param string $email The email address of the user.
 * @return bool True if the reset link was successfully generated and emailed, 
 *              false otherwise (e.g., user not found or email sending failed).
 */
function forgotPassword(string $email)
{
    // 1. Validate the email address
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided."); // Log the error for debugging
        return false;
    }

    // 2. Fetch the user from the database
    $stmt = $db->prepare("SELECT id, username FROM users WHERE email = ?");
    $stmt->bind_param("s", $email); // 's' indicates a string parameter
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        error_log("User with email $email not found."); // Log the error
        return false;
    }

    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $username = $user['username'];

    // 3. Generate a unique, time-based token
    $token = bin2hex(random_bytes(32)); // Create a secure random token
    // Alternative: Use a library like Hashids for human-readable tokens.

    // 4. Hash the token (for security) -  Important!
    $hashedToken = password_hash($token, PASSWORD_DEFAULT);

    // 5. Store the token in the database, associated with the user
    $stmt = $db->prepare("UPDATE users SET reset_token = ?, reset_token_expiry = ? WHERE id = ?");
    $stmt->bind_param("ssi", $hashedToken, time() + 3600, $userId);  // Token expiry after 1 hour
    $result = $stmt->execute();

    if (!$result) {
        error_log("Error updating user's reset token: " . print_r($stmt->error, true)); // Log the error
        return false;
    }

    // 6. Email the user with the reset link
    $subject = "Password Reset Link";
    $message = "Click this link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset_token=$token'>" . $_SERVER['PHP_SELF'] . "?reset_token=$token</a>"; // Construct the link (using PHP_SELF for correct URL)
    $headers = "From: Your Website <yourwebsite@example.com>";

    if (mail($email, $subject, $message, $headers)) {
        // Success!
        return true;
    } else {
        error_log("Failed to send email to $email."); // Log the email sending failure
        // Consider adding an error handling mechanism here, like a form to re-send.
        return false;
    }
}


// Example Usage (for testing - remove in production)
//  This example is for illustration purposes.  Do not expose this directly in a live web application.

// Simulate a database connection (replace with your actual connection)
// For demonstration, we'll use an empty object.

class MockDB {
    public function prepare(string $query) {
        // Return a mock result for demonstration.
        return new MockResult();
    }
    public function execute(string $query) {
        return new MockResult();
    }
}

class MockResult {
    public function get_result() {
        // Mocking a user with email 'test@example.com'
        return new MockUser();
    }
}

class MockUser {
    public function fetch_assoc() {
        return [
            'id' => 1,
            'username' => 'testuser',
            'email' => 'test@example.com'
        ];
    }
}


if (isset($_GET['reset_token'])) {
    $resetToken = $_GET['reset_token'];

    // Reset Password Logic (Illustrative, this is NOT production code)
    // (Replace this with your actual password reset processing)
    if (forgotPassword($resetToken)) {
        echo "Password reset link has been sent to your email.";
    } else {
        echo "Error sending password reset link. Please try again later.";
    }
}
?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a table named 'users' with columns 'id', 'email', and 'password'

// Function to handle the forgot password request
function forgot_password($email) {
  // 1. Validate the email address
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if the user exists
  $stmt = $db->prepare("SELECT id, email FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch();

  if (!$user) {
    return "User not found.";
  }

  // 3. Generate a unique token (e.g., using a UUID)
  $token = bin2hex(random_bytes(32)); // Generate a 32-byte (256-bit) random string

  // 4.  Create a token record in the database
  $stmt = $db->prepare("INSERT INTO password_tokens (user_id, token, expires_at) VALUES (?, ?, ?)");
  $stmt->execute([$user['id'], $token, time() + (24 * 60 * 60)]); // Expires in 24 hours
  $token_id = $db->lastInsertId();

  // 5.  Send an email to the user with a password reset link
  $reset_link = "https://yourwebsite.com/reset_password?token=$token"; // Replace with your domain

  $to = $email;
  $subject = "Password Reset";
  $message = "Click on the following link to reset your password: " . $reset_link;
  $headers = "From: Your Website <noreply@yourwebsite.com>";

  mail($to, $subject, $message, $headers);

  return "Password reset email has been sent to $email.";
}


// Example usage:
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $result = forgot_password($email);
  echo $result;
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

/**
 * Forgot Password Function
 *
 * This function handles the forgot password process:
 * 1.  Checks if the email exists in the database.
 * 2.  Generates a unique token for the password reset request.
 * 3.  Stores the token and user ID in the database.
 * 4.  Sends an email with a link containing the token.
 *
 * @param string $email The email address to reset the password for.
 * @return bool True if the reset email was sent successfully, false otherwise.
 */
function forgot_password(string $email) {
  // 1. Check if the email exists in the database
  $user = getUserById($email); // Assuming you have a function to get user by email
  if (!$user) {
    error_log("User with email $email not found."); // Log the error for debugging
    return false;
  }

  // 2. Generate a unique token
  $token = generate_unique_token();

  // 3. Store the token and user ID in the database
  $result = save_reset_token($user->id, $token);
  if (!$result) {
    error_log("Failed to save reset token for user $email");
    return false;
  }

  // 4. Send the reset email
  $reset_link = generate_reset_link($token);
  send_reset_password_email($user->email, $reset_link);

  return true;
}


/**
 * Dummy functions - Replace with your actual database and email implementation
 */

/**
 * Get user by email.  This is a placeholder - implement your database query.
 *
 * @param string $email The email address to search for.
 * @return object|null The user object if found, null otherwise.
 */
function getUserById(string $email) {
  // Replace this with your actual database query
  // Example using a mock database:
  $users = [
    ['id' => 1, 'email' => 'user1@example.com', 'password' => 'password123'],
    ['id' => 2, 'email' => 'user2@example.com', 'password' => 'anotherpassword'],
  ];
  foreach ($users as $user) {
    if ($user['email'] == $email) {
      return (object) ['id' => $user['id'], 'email' => $user['email']];
    }
  }
  return null;
}


/**
 * Generate a unique token.
 *
 * @return string A unique token.
 */
function generate_unique_token() {
  return bin2hex(random_bytes(32));
}


/**
 * Save the reset token in the database.
 *
 * @param int $userId The ID of the user.
 * @param string $token The reset token.
 * @return bool True if saved successfully, false otherwise.
 */
function save_reset_token(int $userId, string $token) {
  // Replace with your database code to store the token
  // Example (using a mock database):
  $tokens = [
    ['userId' => 1, 'token' => 'xyz123', 'expiry' => time() + 3600] // Token expires in 1 hour
  ];
  // Simulate database insertion
  $result = true; // Replace with your actual database query
  return $result;
}

/**
 * Generate the reset password link.
 *
 * @param string $token The reset token.
 * @return string The reset password link.
 */
function generate_reset_link(string $token) {
    return 'http://yourwebsite.com/reset-password?token=' . urlencode($token);
}


/**
 * Send the reset password email.
 *
 * @param string $email The email address to send the email to.
 * @param string $resetLink The reset password link.
 */
function send_reset_password_email(string $email, string $resetLink) {
  // Replace with your email sending logic
  // Example:
  error_log("Sending reset password email to: " . $email . " with link: " . $resetLink);  // Logging for testing
}


// Example usage (replace with actual input):
// if (isset($_POST['email'])) {
//   $email = $_POST['email'];
//   if (forgot_password($email)) {
//     echo "Reset password email has been sent to $email.";
//   } else {
//     echo "Failed to send reset password email. Please try again.";
//   }
// }
?>


<?php

/**
 *  Forgot Password Function
 *
 *  This function allows users to reset their passwords.
 *  It generates a unique token, sends an email to the user,
 *  and provides a link to reset their password.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @return bool True if the password reset email was sent successfully, false otherwise.
 */
function forgot_password($email)
{
    // Validate email format (basic check)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided."); // Log for debugging
        return false;
    }

    // 1. Generate a unique token
    $token = bin2hex(random_bytes(32)); // Use a secure random number generator

    // 2. Store the token in the database.
    //  -  This example uses a simple array for demonstration.
    //  -  In a real application, you would use a proper database
    //     and store the token in the database along with the user ID.
    global $user_tokens; // Assuming $user_tokens is defined elsewhere (e.g., in a configuration file or global scope)
    if (!isset($user_tokens[$email])) {
        $user_tokens[$email] = ['token' => $token, 'expiry' => time() + (24 * 60 * 60) ]; // Expires in 24 hours
    } else {
        // Token already exists, you might want to clear it or regenerate it.
        // For simplicity, we just regenerate it.
        $user_tokens[$email] = ['token' => $token, 'expiry' => time() + (24 * 60 * 60) ];
    }



    // 3.  Create the reset password link.
    $reset_link =  $_SERVER['REQUEST_SCHEME'] . '://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $token;

    // 4. Send the email.
    $to = $email;
    $subject = 'Password Reset';
    $message = "To reset your password, please click on the following link:
" . $reset_link;
    $headers = "From: your_email@example.com\r
";
    mail($to, $message, $headers);

    // 5.  Logging (Optional, but good practice)
    error_log("Password reset email sent to: " . $email . " with token: " . $token);

    return true;
}


// Example Usage (for testing - don't use this in production)
//  Remove or comment out in a real application.
if (isset($_GET['email'])) {
  $email_to_reset = $_GET['email'];
  if (forgot_password($email_to_reset)) {
    echo "Password reset email sent to " . $email_to_reset;
  } else {
    echo "Failed to send password reset email.";
  }
}
?>


<?php

/**
 * Forgot Password Function
 *
 * Generates a temporary password and sends it to the user's email address.
 *
 * @param string $email The email address of the user.
 * @param string $reset_token A unique token to ensure the user is the one requesting the reset.  This is crucial!
 * @param string $from_email The email address from which the reset email is sent.
 * @param string $from_name The name of the sender.
 * @param string $base_url The base URL of your website.
 *
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email, string $reset_token, string $from_email, string $from_name, string $base_url) {
  // 1. Generate a temporary password.  This should be a random, secure string.
  $password = bin2hex(random_bytes(32));  // Use bin2hex for better security.  random_bytes is more secure.
  // 2. Store the temporary password and token in the database (or storage mechanism)
  //    This is the crucial step.  Replace this with your actual database interaction.

  // Example using a hypothetical database class
  $db = new DatabaseConnection(); // Assuming you have a DatabaseConnection class

  $result = $db->insert_reset_token(
    $email,
    $password,
    $reset_token,
    time() // Expiration time
  );

  if (!$result) {
    // Handle database error - logging would be good here
    error_log("Error inserting reset token: " . $db->last_error());
    return false;
  }

  // 3.  Create the reset email message
  $subject = "Password Reset";
  $message = "To reset your password, please click on the following link:
";
  $message .= "<a href='" . $base_url . "/reset_password.php?token=" . urlencode($reset_token) . "'>Reset Password</a>
";
  $message .= "
Sincerely,
" . $from_name;

  // 4. Send the email
  if (!send_email($message, $email, $subject, $from_email, $from_name)) {
    // Handle email sending failure. Logging would be good here.
    error_log("Error sending email: " .  send_email_error()); // Assuming send_email returns an error string
    return false;
  }

  return true;
}


/**
 *  Dummy email sending function.  Replace this with your actual email sending code.
 *  This is here for demonstration purposes.
 *
 * @param string $message The email body.
 * @param string $to_email The recipient email address.
 * @param string $subject The email subject.
 * @param string $from_email The sender's email address.
 * @param string $from_name The sender's name.
 *
 * @return bool True on success, false on failure.
 */
function send_email(string $message, string $to_email, string $subject, string $from_email, string $from_name) {
  // **Replace this with your actual email sending logic (e.g., using PHPMailer, SwiftMailer, etc.)**
  // This is just a placeholder to simulate sending and return a random value.
  // In a real application, you'd use a reliable email sending library.

  // Simulate successful sending
  error_log("Simulating sending email to: " . $to_email);
  return true; //  Always return true for simulation
}

/**
 *  Dummy send_email_error function.
 *  Used for simulation.  Replace with your actual error handling.
 * @return string An error message or empty string if no error.
 */
function send_email_error() {
    return "Simulated email sending error.";
}


/**
 * Database Connection Class (Example - Replace with your actual database connection)
 */
class DatabaseConnection {
    private $host = 'localhost';
    private $username = 'your_username';
    private $password = 'your_password';
    private $dbname = 'your_database';

    public function __construct() {
        // Create connection
        $conn = new mysqli($this->host, $this->username, $this->password, $this->dbname);

        // Check connection
        if ($conn->connect_error) {
            throw new Exception("Connection failed: " . $conn->connect_error);
        }

        $this->conn = $conn;
    }

    public function last_error() {
        if ($this->conn->connect_error) {
            return $this->conn->connect_error;
        }
        return "";
    }

    public function insert_reset_token(string $email, string $password, string $reset_token, int $expiration) {
        // Example SQL insert statement - replace with your actual table and column names
        $sql = "INSERT INTO reset_tokens (email, password, token, expiration) VALUES (?, ?, ?, ?)";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("sss", $email, $password, $reset_token, $expiration);
        return $stmt->execute();
    }

    //  Add other database methods as needed (e.g., select, update, delete)
}

// Example Usage (Replace with actual email and token)
// $email = 'test@example.com';
// $reset_token = 'abc123xyz456';
// $from_email = 'your_email@example.com';
// $from_name = 'Your Name';
// $base_url = 'http://localhost/your_website/';  // Replace with your base URL

// if (forgot_password($email, $reset_token, $from_email, $from_name, $base_url)) {
//   echo "Reset email sent successfully!";
// } else {
//   echo "Error sending reset email.";
// }

?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Forgets a user's password.
 *
 * @param string $email The email address of the user.
 * @return bool True if a reset token was generated and sent, false otherwise.
 */
function forgotPassword(string $email): bool
{
    // 1. Validate email format
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email);
        return false;
    }

    // 2. Check if user exists
    $user = getUserById($email); // Assuming you have a function to retrieve a user by email.
    if (!$user) {
        error_log("User with email " . $email . " not found.");
        return false;
    }

    // 3. Generate a unique reset token
    $resetToken = generateUniqueToken();

    // 4. Store the token in the database, associated with the user's ID
    $result = storeResetToken($user['id'], $resetToken);
    if (!$result) {
        error_log("Failed to store reset token for user " . $email);
        return false;
    }

    // 5. Send the password reset email (using a separate email sending function)
    if (!sendPasswordResetEmail($user['email'], $resetToken, 'your_website_url')) { // Replace 'your_website_url'
        error_log("Failed to send password reset email to " . $email);
        // Optionally, you might want to delete the token from the database in case of failure.
        // deleteResetToken($user['id'], $resetToken);
        return false;
    }


    return true;
}

/**
 * Placeholder function to retrieve a user by email.  You'll need to implement this.
 * @param string $email
 * @return array|null  The user object if found, null otherwise.
 */
function getUserById(string $email): ?array
{
    // Replace this with your database query to retrieve the user by email
    // Example (using mysqli - adapt to your database):
    // $query = "SELECT * FROM users WHERE email = '" . $email . "'";
    // $result = mysqli_query($db, $query);
    // if (mysqli_num_rows($result) > 0) {
    //     $user = mysqli_fetch_assoc($result);
    //     return $user;
    // } else {
    //     return null;
    // }

    //  Return a dummy user for example purposes:
    return [
        'id' => 123,
        'email' => $email,
        'username' => 'testuser'
    ];
}


/**
 * Placeholder function to generate a unique token.
 *
 * @return string A unique token.
 */
function generateUniqueToken(): string
{
    return bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator.
}


/**
 * Placeholder function to store the reset token in the database.
 *
 * @param int $userId The ID of the user.
 * @param string $token The reset token.
 * @return bool True if the token was stored successfully, false otherwise.
 */
function storeResetToken(int $userId, string $token): bool
{
    // Replace this with your database query to store the token.
    // Example (using mysqli):
    // $query = "INSERT INTO reset_tokens (user_id, token, created_at) VALUES (" . $userId . ", '" . $token . "', NOW())";
    // if (mysqli_query($db, $query)) {
    //     return true;
    // } else {
    //     error_log("Failed to store reset token in database: " . mysqli_error($db));
    //     return false;
    // }

    //Dummy success for example
    return true;
}

/**
 * Placeholder function to send the password reset email.
 *
 * @param string $email The email address of the user.
 * @param string $token The reset token.
 * @param string $websiteUrl The URL of the website.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function sendPasswordResetEmail(string $email, string $token, string $websiteUrl): bool
{
    // Replace this with your email sending logic.
    // Example (using mail() - this is often unreliable):
    // $subject = 'Password Reset Request';
    // $message = "Click this link to reset your password: " . $websiteUrl . "?token=" . $token;
    // return mail($email, $message, $subject);

    //Dummy success for example
    return true;
}


/**
 * Placeholder function to delete a reset token.
 * @param int $userId
 * @param string $token
 * @return bool
 */
function deleteResetToken(int $userId, string $token): bool{
    //Replace with your database query
    return true;
}

?>


<?php

// Assuming you have a database connection established as $db

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user requesting the password reset.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email)
{
    // 1. Validate Email (Basic)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log for debugging
        return false;
    }

    // 2. Check if the user exists
    $user = getUserByEmail($email);

    if ($user === false) {
        error_log("User with email " . $email . " not found."); // Log for debugging
        return false;
    }

    // 3. Generate a unique token
    $token = generateUniqueToken();

    // 4. Store the token and user ID in the database
    $result = saveTokenToDatabase($user['id'], $token);

    if ($result === false) {
        error_log("Failed to save token to database.");
        return false;
    }

    // 5. Send an email with the reset link
    sendResetPasswordEmail($user['email'], $token);

    return true;
}

/**
 * Helper function to get user by email
 * @param string $email
 * @return array|bool User object or false if user not found
 */
function getUserByEmail(string $email): array|bool
{
    // Replace this with your actual database query
    // This is just a placeholder for demonstration
    $users = [
        ['id' => 1, 'email' => 'user1@example.com', 'password' => 'hashed_password1'],
        ['id' => 2, 'email' => 'user2@example.com', 'password' => 'hashed_password2']
    ];

    foreach ($users as $user) {
        if ($user['email'] === $email) {
            return $user;
        }
    }
    return false;
}

/**
 * Helper function to generate a unique token
 * @return string
 */
function generateUniqueToken(): string
{
    return bin2hex(random_bytes(32)); // Use a cryptographically secure random number
}

/**
 * Helper function to save the token to the database
 * @param int $userId
 * @param string $token
 * @return bool
 */
function saveTokenToDatabase(int $userId, string $token): bool
{
    // Replace this with your actual database query
    // This is just a placeholder for demonstration
    // Example using MySQLi (adjust for your database)
    $db = new mysqli('localhost', 'username', 'password', 'database_name');
    if ($db->connect_error) {
        error_log("Failed to connect to database: " . $db->connect_error);
        return false;
    }

    $sql = "INSERT INTO password_resets (user_id, token, created_at) VALUES (?, ?, NOW())";
    $stmt = $db->prepare($sql);
    $stmt->bind_param("is", $userId, $token);
    $result = $stmt->execute();

    $stmt->close();
    $db->close();
    return $result;
}


/**
 * Helper function to send a password reset email
 * @param string $email
 * @param string $token
 */
function sendResetPasswordEmail(string $email, string $token)
{
    // Replace this with your email sending logic (e.g., using PHPMailer)
    // This is just a placeholder for demonstration
    $subject = 'Password Reset Request';
    $message = "Click this link to reset your password: http://yourwebsite.com/reset-password?token=$token"; // Replace with your actual reset link URL

    // Send the email here (using PHPmailer or similar)
    // Example using simple echo for demonstration
    error_log("Email sent to: " . $email . ", Subject: " . $subject . ", Link: " . $message);
}


// Example Usage (for testing - don't use this directly in your application)
//  Be careful, this is just for demo purposes.  Never use this in a production environment.
//  It's important to secure your application properly.
$emailToReset = 'user1@example.com'; // Replace with the actual email you want to test
if (forgotPassword($emailToReset)) {
    echo "Password reset email sent to " . $emailToReset . "<br>";
} else {
    echo "Failed to send password reset email to " . $emailToReset . "<br>";
}

?>


<?php

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_db_user";
$db_password = "your_db_password";

// Function to handle password reset
function forgotPassword($email)
{
    // 1. Check if the email exists
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $sql = "SELECT id, email FROM users WHERE email = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $email); // 's' indicates a string parameter
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        return false; // Email not found
    }

    $user = $result->fetch_assoc();
    $user_id = $user['id'];
    $user_email = $user['email'];

    $stmt->close();

    // 2. Generate a unique token
    $token = bin2hex(random_bytes(32));  // Create a strong, random token

    // 3. Hash the token
    $hashed_token = password_hash($token, PASSWORD_DEFAULT);

    // 4.  Store the token in the database
    $sql = "UPDATE users SET reset_token = ? , reset_token_expiry = NOW() WHERE email = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ss", $hashed_token, $user_email);
    $stmt->execute();

    if (!$stmt->affected_rows > 0) {
        $stmt->close();
        return false; // Failed to store token
    }

    $stmt->close();

    // 5. Send the password reset email (implementation omitted for brevity)
    //  - You'll need to implement the logic to send an email
    //    containing a link with the token.  This typically involves
    //    using a library like PHPMailer or similar.
    //  - Example (placeholder):
    //  $email_content = "Click <a href='reset_password.php?token=$token'>here</a> to reset your password.";
    //  sendEmail($user_email, "Reset Your Password", $email_content);


    return true; // Token generation and storage successful
}



// Example Usage (This is just an example.  Don't use this directly in a production environment)
// $email_to_reset = "testuser@example.com";  // Replace with a valid email
// if (forgotPassword($email_to_reset)) {
//     echo "Password reset email sent to " . $email_to_reset;
// } else {
//     echo "Failed to generate password reset token.";
// }



?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return string "Password reset email sent." or "Invalid email address or user not found."
 */
function forgot_password(string $email): string
{
    // 1. Validate email format (basic check)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // 2.  Check if the user exists in the database.
    $user = getUserByEmail($email); // Function to retrieve user by email

    if ($user === null) {
        return "Invalid email address or user not found.";
    }

    // 3. Generate a unique token for password reset.  Use a cryptographically secure random function
    $token = generate_unique_token();

    // 4. Store the token associated with the user's email in the database (or cache).
    //    This is crucial!  It allows us to verify that the user actually requested the reset.
    save_token_to_database($user->id, $token);

    // 5.  Send the password reset email.  (Implement your email sending logic here).
    $subject = "Password Reset Request";
    $message = "Please click the following link to reset your password: " . $base_url . "/reset_password?token=" . $token;
    $headers = "From: " . $from_email . "\r
";
    // Use a secure method to send email (e.g., PHPMailer or similar)
    // $result = send_email($to_email, $subject, $message, $headers);

    //Simulate email sending for demonstration purposes.
    $result = "Password reset email sent.";

    return $result;
}


/**
 *  Helper function to retrieve a user by email.
 *  Replace this with your actual database query.
 *
 * @param string $email The email address to search for.
 * @return User|null The User object if found, null otherwise.
 */
function getUserByEmail(string $email): ?User
{
    // This is a placeholder.  Adapt to your database.
    // Example using a hypothetical User class:
    $user = new User(); // Create a User object
    // Replace this with your actual database query.  For example:
    // $result = mysqli_query($db, "SELECT * FROM users WHERE email = '$email'");
    // if (mysqli_num_rows($result) > 0) {
    //   $user = new User();
    //   $user->id = mysqli_fetch_assoc($result)['id'];
    //   $user->email = mysqli_fetch_assoc($result)['email'];
    //   //... other user fields...
    // }
    return null;  // User not found
}



/**
 * Generates a unique token.  Use a cryptographically secure random function.
 *
 * @return string A unique token.
 */
function generate_unique_token(): string
{
    return bin2hex(random_bytes(32)); // Use random_bytes for a secure random string.
}

/**
 *  Saves the token associated with the user's ID in the database.
 *  Replace this with your actual database query.
 *
 * @param int $userId The user's ID.
 * @param string $token The token to store.
 */
function save_token_to_database(int $userId, string $token): void
{
    // Replace this with your actual database query.
    // Example using a hypothetical User table:
    // $sql = "UPDATE users SET reset_token = '$token', reset_token_expiry = NOW() WHERE id = $userId";
    // mysqli_query($db, $sql);
}


/**
 *  (Placeholder) Send email function.  Implement with a secure email library.
 */
function send_email(string $to_email, string $subject, string $message, string $headers): string {
    // Replace this with your actual email sending logic.
    // Use a secure library like PHPMailer.
    // Example:
    // $mail = new PHPMailer(true);
    // $mail->SMTPDebugEnable = false;
    // $mail->isSMTP();
    // $mail->Host = 'smtp.example.com';
    // $mail->Port = 587;
    // $mail->Username = 'your_email@example.com';
    // $mail->Password = 'your_password';
    // $mail->SetFrom('your_email@example.com', 'Your Name');
    // $mail->addAddress($to_email);
    // $mail->Subject = $subject;
    // $mail->Body = $message;
    // $mail->AltBody = $message;
    // $mail->CharSet = 'UTF-8';
    // $mail->send();
    return "Password reset email sent.";
}




// Example Usage (simulated)
//  You'd typically get the email from a form submission.
$email = "testuser@example.com";
$result = forgot_password($email);
echo $result . "
";



//  Dummy User class (replace with your actual User class)
class User {
    public ?int $id = null;
    public string $email = '';
}
?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique token, sends an email with a password reset link,
 * and deletes the token from the database.
 *
 * @param string $email The user's email address.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, PDO $pdo) {
  // 1. Generate a unique token
  $token = bin2hex(random_bytes(32));  // Use cryptographically secure random bytes

  // 2.  Prepare and execute the query to insert the token into the database
  $stmt = $pdo->prepare("INSERT INTO password_resets (email, token, expires_at) VALUES (?, ?, NOW())");
  $stmt->execute([$email, $token]);

  // 3. Send the password reset email (replace with your email sending logic)
  $subject = "Password Reset Request";
  $message = "Click <a href='" . $_SERVER['PHP_SELF'] . "?reset=" . urlencode($token) . "'>here</a> to reset your password.";
  $headers = "From: your_email@example.com"; // Replace with your email address

  // Send the email
  if (!mail($email, $subject, $message, $headers)) {
    // Handle email sending failure.  Consider logging or error reporting.
    error_log("Failed to send password reset email to " . $email);
    return false;
  }

  // 4.  Log successful operation (optional, for auditing)
  error_log("Password reset email sent to " . $email . " with token: " . $token);


  return true;
}



// Example Usage (Illustrative - Adapt to your application)

// Connect to your database using a PDO connection
try {
    $host     = 'localhost';
    $dbname  = 'your_database_name';
    $user     = 'your_username';
    $password = 'your_password';

    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8mb4", $user, $password);

    // Enable PDO error mode
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);


    $email = 'user@example.com'; // Replace with the user's email
    if (forgotPassword($email, $pdo)) {
        echo "Password reset email sent to " . $email . ". Check your inbox!";
    } else {
        echo "Error sending password reset email.";
    }

} catch (PDOException $e) {
    echo "Database connection error: " . $e->getMessage();
}


?>


<?php

// Assuming you have a database connection established
// This is a simplified example, adapt to your database structure
// and security practices.

// Configuration (Change these to your actual values)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';

// Function to handle the forgot password process
function forgot_password($email) {
  // 1. Validate email format (basic check)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if the email exists in the user table
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
  if ($conn->connect_error) {
    return "Database connection failed: " . $conn->connect_error;
  }

  $query = "SELECT id, password, email FROM users WHERE email = '$email'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $hashedPassword = $user['password']; //  Important:  Store hashed passwords
    // 3. Generate a unique token
    $token = bin2hex(random_bytes(32)); // Generate a secure random token
    // 4. Update the user record with the token (add to password column or create a separate 'tokens' table)
    $update_query = "UPDATE users SET token = '$token' WHERE id = '$userId'";
    if (!$conn->query($update_query)) {
      return "Error updating user data.";
    }

    // 5. Send the password reset email
    $to = $email;
    $subject = "Password Reset";
    $message = "Click on the following link to reset your password: " . $_SERVER['REQUEST_SCHEME'] . "://yourdomain.com/reset_password.php?token=$token"; // Use HTTPS if possible
    $headers = "From: your_email@example.com";

    mail($to, $message, $headers);

    return "Password reset link sent to your email.  Check your inbox!";
  } else {
    return "User with this email address not found.";
  }

  $conn->close();
}


// Example Usage (for testing -  This will not work directly without a form)
//  This demonstrates how you would call the function.
/*
$email = "test@example.com"; // Replace with the user's email
$resetMessage = forgot_password($email);
echo $resetMessage;
*/


// **IMPORTANT SECURITY NOTES & BEST PRACTICES**

// 1. **Hashing Passwords:**  NEVER store passwords in plain text.  Always hash them using a strong hashing algorithm like bcrypt or Argon2.  The example uses `$user['password']`, which represents the *hashed* password.

// 2. **Token Expiration:** Implement an expiration time for the password reset token.  This prevents attackers from using the token after it has expired. You can store the expiration time in the database (e.g., a 'token_expiry' column).

// 3. **Secure Token Generation:** Use `random_bytes()` to generate cryptographically secure random tokens. `bin2hex()` converts the bytes into a hexadecimal string, making it suitable for URL parameters.

// 4. **HTTPS:** ALWAYS use HTTPS to protect the password reset link and the user's email address.

// 5. **Rate Limiting:** Implement rate limiting to prevent brute-force attacks.

// 6. **Input Validation:** Validate all user inputs (email format, token, etc.).

// 7. **Error Handling:** Provide informative error messages to the user.

// 8. **Security Audits:** Regularly review your code for security vulnerabilities.

// 9. **Separate Tables (Recommended):** For improved security and organization, consider using separate tables for users and tokens. This isolates the tokens, making it harder for attackers to compromise the password reset process.

// 10. **Email Verification:** Send a verification email to the user to confirm they received the reset link.

// 11. **Don't Reveal Sensitive Information in Error Messages:**  Avoid revealing database details or other sensitive information in error messages that might be exposed to users.


<?php

// Include the database connection file
require_once 'config.php'; // Replace 'config.php' with your actual database configuration file.

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user.
 * @return bool True on success, false on failure.
 */
function forgot_password($email)
{
    // Validate email format (basic check - improve as needed for your application)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log the error for debugging
        return false;
    }

    // Check if the user exists
    $user = mysqli_query($conn, "SELECT id, email FROM users WHERE email = '$email'");

    if (mysqli_num_rows($user) == 0) {
        error_log("User with email '$email' not found."); // Log the error
        return false;
    }

    // Generate a unique token
    $token = bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator
    
    // Hash the token for security
    $hashed_token = password_hash($token, PASSWORD_DEFAULT);

    // Update the user's record with the token and timestamp
    $update_query = "UPDATE users SET reset_token = '$hashed_token', reset_timestamp = NOW() WHERE email = '$email'";
    $result = mysqli_query($conn, $update_query);

    if (mysqli_error($conn)) {
        error_log("Error updating user record: " . mysqli_error($conn));
        return false;
    }

    // Send an email with the reset link
    $to = $email;
    $subject = 'Password Reset';
    $message = "Click this link to reset your password: " . $_SERVER['REQUEST_SCHEME'] . "://www.yourwebsite.com/reset_password.php?token=$token"; //  Replace with your actual URL
    $headers = "From: yourname@yourwebsite.com";  //Replace with your actual email address.

    mail($to, $message, $headers);

    return true;
}

// Example Usage (For testing - outside of a request handler)
// $email_to_reset = "test@example.com"; // Replace with a valid email
// if (forgot_password($email_to_reset)) {
//     echo "Password reset email sent to " . $email_to_reset;
// } else {
//     echo "Failed to reset password.";
// }

?>


<?php
// ... (include config.php) ...

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user.
 * @return bool True on success, false on failure.
 */
function forgot_password($email)
{
    // Validate email format
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email);
        return false;
    }

    // Check if the user exists
    $user = mysqli_query($conn, "SELECT id, email FROM users WHERE email = '$email'");

    if (mysqli_num_rows($user) == 0) {
        error_log("User with email '$email' not found.");
        return false;
    }

    // Generate a unique token
    $token = bin2hex(random_bytes(32));

    // Hash the token
    $hashed_token = password_hash($token, PASSWORD_DEFAULT);

    // Update the user's record
    $update_query = "UPDATE users SET reset_token = ? , reset_timestamp = NOW() WHERE email = ?";
    $result = mysqli_query($conn, $update_query, $hashed_token, $email); //Pass parameters to prepared statement

    if ($result === false) {
        error_log("Error updating user record: " . mysqli_error($conn));
        return false;
    }

    // Send an email with the reset link
    $to = $email;
    $subject = 'Password Reset';
    $message = "Click this link to reset your password: " . $_SERVER['REQUEST_SCHEME'] . "://www.yourwebsite.com/reset_password.php?token=$token";
    $headers = "From: yourname@yourwebsite.com";

    mail($to, $message, $headers);

    return true;
}
?>


<?php

// Assuming you have a database connection established (e.g., $pdo)
// and a table with user credentials (e.g., 'users')

function forgotPassword($email, $pdo) {
  // 1. Check if the email exists in the database
  $stmt = $pdo->prepare("SELECT id, email FROM users WHERE email = :email");
  $stmt->bindParam(':email', $email);
  $stmt->execute();

  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    return false; // Email not found
  }

  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32));

  // 3. Store the token in the database associated with the user
  $stmt = $pdo->prepare("UPDATE users SET password_reset_token = :token, password_reset_expires = :expires WHERE email = :email");
  $stmt->bindParam(':token', $token);
  $stmt->bindParam(':expires', time() + 3600); // Token expires in 1 hour (3600 seconds)
  $stmt->bindParam(':email', $email);
  $stmt->execute();

  // 4. Return the token (you'll need to send this to the user)
  return $token;
}


// Example usage:
// (Assume you have a form where a user enters their email)
$email = $_POST['email'];  // Get email from the form

if (isset($email)) {
  $token = forgotPassword($email, $pdo);

  if ($token) {
    // Send an email to the user containing the token and a link
    $subject = "Password Reset Link";
    $to = $email;
    $message = "Please click the following link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=" . urlencode($token) . "'>Reset Password</a>";
    $headers = "From: your_email@example.com" . "\r
";

    mail($to, $message, $headers);

    echo "<p>Password reset link has been sent to your email address.</p>";
    //  IMPORTANT:  You'll likely want to also redirect the user
    //  to a page or display a message that the link is sent.
  } else {
    echo "<p>An error occurred while generating the password reset token.</p>";
  }
} else {
  echo "<p>Please enter your email address.</p>";
}


//  ======================================================================
//  Reset Password Function (for handling the reset link)
//  ======================================================================

function resetPassword($token, $password, $userId, $pdo) {
    // 1. Check if the token exists
    $stmt = $pdo->prepare("SELECT id, email FROM users WHERE password_reset_token = :token");
    $stmt->bindParam(':token', $token);
    $stmt->execute();
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        return false; // Invalid token
    }

    // 2. Hash the new password
    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);

    // 3. Update the user's password
    $stmt = $pdo->prepare("UPDATE users SET password = :password, password_reset_token = NULL, password_reset_expires = NULL WHERE id = :userId AND email = :email");
    $stmt->bindParam(':password', $hashedPassword);
    $stmt->bindParam(':userId', $user['id']);
    $stmt->bindParam(':email', $user['email']);
    $stmt->execute();

    return true;
}



// Example usage to reset the password:

// (Assume you have a form where the user enters the token and the new password)

if (isset($_GET['reset'])) {
    $token = $_GET['reset'];
    $password = $_POST['password']; // Get password from the form

    if (resetPassword($token, $password, $userId, $pdo)) {
      echo "<p>Password reset successfully.</p>";
    } else {
      echo "<p>Invalid token or password.</p>";
    }
}



?>


<?php

// This script assumes you have a database connection established.
// Replace these with your actual database credentials.
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_username';
$db_password = 'your_database_password';

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if the password was reset successfully, false otherwise.
 */
function forgot_password($email)
{
    // Sanitize input - VERY IMPORTANT
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);

    // Validate email format
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return false; // Invalid email format
    }

    //  Check if the user exists
    $stmt = $GLOBALS['conn']->prepare("SELECT id, email FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        return false; // User not found
    }

    // Generate a unique token and store it in the database
    $token = bin2hex(random_bytes(32)); // Generate a random, secure token
    $stmt = $GLOBALS['conn']->prepare("INSERT INTO password_resets (user_id, token, expiry) VALUES (?, ?, NOW())");
    $stmt->execute([$user['id'], $token]);

    // Send the reset email (IMPLEMENT THIS PART)
    // This is just a placeholder - replace with your actual email sending logic
    $reset_link = 'https://yourdomain.com/reset_password?token=' . urlencode($token);  // Or your custom domain
    $subject = 'Password Reset Request';
    $message = "Please click the link below to reset your password: " . $reset_link;
    $headers = 'From: your_email@example.com' . "\r
";

    // IMPORTANT: Replace this with your email sending function!
    // For example:
    // mail($user['email'], $subject, $message, $headers);
    // This is a placeholder -  you'll need to implement actual email sending
    echo "Password reset email sent to: " . $user['email']; // Just for demo purposes

    return true;
}


// Example usage (from a form submission, for example):
// If you get the email from a POST request, you'd do something like:
// $email = $_POST['email'];

// $result = forgot_password($email);
// if ($result) {
//     echo "Password reset link sent to " . $email;
// } else {
//     echo "Failed to reset password. Please check your email address or contact support.";
// }


?>


<?php

// Database connection details (replace with your actual details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Function to reset password
function forgotPassword($email, $newPassword) {
  // 1. Validate email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Connect to the database
  $conn = new mysqli($host, $username, $password, $database);

  // Check connection
  if ($conn->connect_error) {
    return "Connection failed: " . $conn->connect_error;
  }

  // 3. Hash the new password (important for security!)
  $hashed_password = password_hash($newPassword, PASSWORD_DEFAULT);

  // 4. Update the password in the database
  $sql = "UPDATE users SET password = '$hashed_password' WHERE email = '$email'";

  if ($conn->query($sql) === TRUE) {
    return "Password reset successful. Check your email for verification instructions (if applicable).";
  } else {
    return "Error resetting password. " . $conn->error;
  }

  // 5. Close the connection
  $conn->close();
}


//  Example usage (Illustrative - you'd get this from a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $newPassword = $_POST["new_password"];

  $result = forgotPassword($email, $newPassword);
  echo $result;
} else {
  // If this is not a post request, display a form
  echo '<form method="post" action="">
          <label for="email">Email:</label>
          <input type="email" id="email" name="email" required><br><br>
          <label for="new_password">New Password:</label>
          <input type="password" id="new_password" name="new_password" required><br><br>
          <input type="submit" value="Reset Password">
        </form>';
}

?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique, time-based token, sends an email to
 * the user with a link to reset their password, and then deletes the token
 * from the database.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @return bool True if the password reset email was sent successfully, false otherwise.
 */
function forgot_password(string $email, PDO $pdo) {
    // 1. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator

    // 2. Insert Token into Database
    $stmt = $pdo->prepare("INSERT INTO password_resets (email, token, expires_at) VALUES (:email, :token, :expires_at)");
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    $stmt->bindParam(':token', $token, PDO::PARAM_STR);
    $stmt->bindParam(':expires_at', time() + 3600, PDO::PARAM_INT);  // Expires in 1 hour
    $result = $stmt->execute();

    if (!$result) {
        error_log("Error inserting password reset token: " . print_r($stmt->errorInfo(), true));
        return false;
    }

    // 3. Send Password Reset Email
    $reset_link = "https://yourdomain.com/reset-password?token=" . $token; // Replace yourdomain.com
    $subject = "Password Reset Request";
    $message = "Click the link below to reset your password:
" . $reset_link;
    $headers = "From: Your Website <admin@yourdomain.com>\r
";
    $sent = send_email($subject, $message, $headers); // Implement send_email function (see example below)

    if (!$sent) {
        // Attempt to delete the token if email fails
        delete_password_reset_token($token, $pdo);
        return false;
    }

    return true;
}


/**
 * Placeholder for the send_email function.  Replace with your email sending logic.
 *
 * @param string $subject
 * @param string $message
 * @param string $headers
 * @return bool True if the email was sent successfully, false otherwise.
 */
function send_email(string $subject, string $message, string $headers) {
    // Replace this with your email sending logic.  This is just a placeholder.
    // Example:  Use a library like PHPMailer:  https://www.phpmailer.com/

    // This is just for demonstration and *will not* actually send emails.
    error_log("Simulating sending email: Subject: " . $subject . ", Message: " . $message);
    return true; // Simulate success
}


/**
 * Deletes a password reset token from the database.
 *
 * @param string $token The token to delete.
 * @param PDO $pdo The PDO database connection.
 */
function delete_password_reset_token(string $token, PDO $pdo) {
    try {
        $stmt = $pdo->prepare("DELETE FROM password_resets WHERE token = :token");
        $stmt->bindParam(':token', $token, PDO::PARAM_STR);
        $stmt->execute();

        // Check if any rows were affected
        if ($pdo->lastInsertId() === 0) {
            // No rows affected, likely the token was never inserted or already deleted.
        }
    } catch (PDOException $e) {
        error_log("Error deleting password reset token: " . $e->getMessage());
    }
}

// Example Usage (Illustrative - Needs Database Setup)
/*
$pdo = new PDO("mysql:host=localhost;dbname=your_database", "your_username", "your_password");

$email = "user@example.com"; // Replace with the user's email

if (forgot_password($email, $pdo)) {
    echo "Password reset email sent to " . $email;
} else {
    echo "Failed to send password reset email.";
}
*/

?>


<?php

// Assume you have a database connection established (e.g., $conn)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if password reset initiated successfully, false otherwise.
 */
function forgot_password(string $email)
{
  global $conn; // Make the database connection accessible within the function

  // 1. Check if the email exists
  $query = "SELECT id, email FROM users WHERE email = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("s", $email); // "s" indicates a string
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    $stmt->close();
    return false; // User doesn't exist
  }

  $user = $result->fetch_assoc();
  $userId = $user['id'];
  $userEmail = $user['email'];


  // 2. Generate a unique token (e.g., UUID)
  $resetToken = bin2hex(random_bytes(32));

  // 3. Store the token and user ID in the database
  $query = "INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, NOW())";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("siss", $userId, $resetToken, date("Y-m-d H:i:s"));  // 's' for string, 'i' for integer
  if ($stmt->execute()) {
    $stmt->close();
    // 4.  Send an email with a reset link
    $resetLink = $_SERVER['REQUEST_SCHEME'] . "://".$_SERVER['HTTP_HOST']."/reset_password?token=" . $resetToken;
    // Send an email to the user with the reset link.
    //  You'll need to implement your email sending logic here (e.g., using PHPMailer or similar)
    //  Example (Placeholder - replace with your actual email sending code):
    // send_email($userEmail, "Password Reset Link", "Click here to reset your password: " . $resetLink);

    return true; // Password reset initiated successfully
  } else {
    $stmt->close();
    return false; // Error during database insertion
  }
}


// Placeholder function to simulate sending an email. Replace with your actual email sending code.
function send_email($to, $subject, $message) {
    //  This is just a placeholder.  You *must* replace this with actual email sending code.
    //  e.g., using PHPMailer.
    error_log("Simulated email sent to: " . $to . " with subject: " . $subject . " and message: " . $message);
}


// Example Usage (for testing - remove from production code)
// echo forgot_password("testuser@example.com"); // Replace with a real email
?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique, time-based token that can be used
 * to reset a user's password.  It sends an email with a link to the
 * password reset form.
 *
 * @param string $email The email address of the user to reset the password for.
 * @param string $baseUrl The base URL of your website.  This is needed to construct the password reset link.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $baseUrl): bool
{
    // Validate email format (simple check)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return false;
    }

    // Generate a unique, time-based token
    $token = bin2hex(random_bytes(32));

    // Store the token and user ID in the database (replace with your database logic)
    $result = storeToken($token, $_SESSION['userId']); // Replace $_SESSION['userId'] with your user ID retrieval

    if (!$result) {
        return false;
    }

    // Construct the password reset link
    $resetLink = $baseUrl . "/reset_password?token=" . urlencode($token);

    // Send the email
    if (!sendResetEmail($email, $resetLink)) {
        // Handle email sending failure - consider logging it, displaying an error message, etc.
        // For demonstration purposes, we'll just return false.
        return false;
    }

    return true;
}


/**
 *  Placeholder function to store the token and user ID in the database.
 *  Replace this with your actual database logic.
 *
 * @param string $token The token to store.
 * @param int $userId The user ID to associate with the token.
 * @return bool True on success, false on failure.
 */
function storeToken(string $token, int $userId): bool
{
    // Example using a temporary file (replace with database insert)
    $filePath = 'temp_tokens.txt'; // Or use a database table.
    if (!file_exists($filePath)) {
        if (!touch($filePath)) {
            return false; // File creation failed
        }
    }

    if (file_put_contents($filePath, $userId . ',' . $token . "
", FILE_APPEND) !== false) {
        return true;
    } else {
        return false;
    }
}

/**
 * Placeholder function to send the password reset email.
 * Replace this with your actual email sending logic.
 *
 * @param string $email The email address of the user.
 * @param string $resetLink The password reset link.
 * @return bool True on success, false on failure.
 */
function sendResetEmail(string $email, string $resetLink): bool
{
    // Simulate email sending (replace with your actual email sending logic)
    // Example:  Use a real email library like PHPMailer or SwiftMailer

    $subject = 'Password Reset';
    $message = "Click on the link below to reset your password:
" . $resetLink;

    // Simulate sending an email
    $headers = ['MIME-Version: 1.0', 'Content-type: text/html; charset=UTF-8'];
    mail($email, $message, $headers);

    return true; // Assume successful if mail() returns true.
}


// Example usage (demonstration only -  never use directly in production)
// IMPORTANT: This is an example and should *never* be run in a production environment.
//  It's for illustrating the flow.
if (isset($_POST['email'])) {
    $email = $_POST['email'];

    if (isset($_POST['reset'])) { //This is just to simulate clicking the reset button
      if (forgotPassword($email, 'http://localhost/your_website/')) {
          echo "Password reset email sent to " . $email;
      } else {
          echo "Error: Failed to generate password reset token.";
      }
    }
}

?>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Function to handle password reset requests
function forgot_password($email) {
  // 1. Validate the email address
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Fetch user data from the database
  $conn = new mysqli($host, $username, $password, $dbname);

  if ($conn->connect_error) {
    return "Connection failed: " . $conn->connect_error;
  }

  $sql = "SELECT id, username, password_reset_token, created_at FROM users WHERE email = '$email'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $username = $user['username'];
    $password_reset_token = $user['password_reset_token'];
    $createdAt = $user['created_at'];

    // 3. Generate a unique reset token (Important for security)
    $resetToken = bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator

    // 4. Update the user's record with the new token
    $update_sql = "UPDATE users SET password_reset_token = '$resetToken', password_reset_token_expiry = NOW() WHERE id = $userId";
    if ($conn->query($update_sql) === TRUE) {
      // 5.  Send the reset link to the user's email
      $emailLink = base64_encode($resetToken);  // Encode token for URL

      // Construct the link to the reset password page
      $reset_url = "reset_password.php?token=$emailLink";
      
      // Send the email (Implement your email sending logic here)
      $subject = "Password Reset Link";
      $message = "Click on the following link to reset your password: " . "<a href=\"" . $reset_url . "\">Reset Password</a>";
      $headers = "From: your_email@example.com" . "\r
";

      mail($email, $message, $headers);

      return "Password reset link has been sent to your email.  Check your inbox.";
    } else {
      return "Error updating password reset token: " . $conn->error;
    }
  } else {
    return "User with email $email not found.";
  }

  // Close the connection
  $conn->close();
}


// Example usage (This would typically be triggered by a form submission)
// $email = $_POST['email'];  // Get the email from the form
// $result = forgot_password($email);
// echo $result;

?>


<?php

// Assuming you have a database connection established
// Example: $db = new PDO('mysql:host=localhost;dbname=your_database');

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password.
 * @param PDO $db  The database connection.
 *
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $newPassword, PDO $db) {
    // 1. Verify Email Exists
    $stmt = $db->prepare("SELECT id FROM users WHERE email = :email");
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    $stmt->execute();

    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        return false; // User not found
    }

    // 2. Hash the new password
    $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

    // 3. Update the user's password
    $stmt = $db->prepare("UPDATE users SET password = :password WHERE id = :id");
    $stmt->bindParam(':password', $hashedNewPassword, PDO::PARAM_STR);
    $stmt->bindParam(':id', $user['id'], PDO::PARAM_INT);
    $stmt->execute();


    return true; // Password reset successful
}


// Example Usage (Demonstration)
// **IMPORTANT:  This is just a demonstration and should not be used directly in production code.**
//  Properly handle errors, input validation, and security best practices.

//  For a real application, you would get the newPassword from a form submission.

// Example 1: Successful Reset
// $db = new PDO('mysql:host=localhost;dbname=your_database'); // Replace with your credentials
// $email = 'testuser@example.com';
// $newPassword = 'NewPassword123!';

// if (forgotPassword($email, $newPassword, $db)) {
//     echo "Password reset successful for " . $email . "
";
// } else {
//     echo "Password reset failed for " . $email . "
";
// }


// Example 2:  Demonstrating failure (user doesn't exist)
// $db = new PDO('mysql:host=localhost;dbname=your_database');
// $email = 'nonexistentuser@example.com';
// $newPassword = 'SomePassword';

// if (forgotPassword($email, $newPassword, $db)) {
//     echo "Password reset successful for " . $email . "
";
// } else {
//     echo "Password reset failed for " . $email . "
";
// }


?>


<?php

// Assuming you have a database connection established
// and a 'users' table with an 'email' column.

function forgotPassword($email) {
  // 1. Validate Email (Optional but highly recommended)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return 'Invalid email format.';
  }

  // 2. Check if the user exists
  $user = getUserByEmail($email); // Implement this function (see below)

  if (!$user) {
    return 'User not found.';
  }

  // 3. Generate a unique token (Important for security)
  $token = generateUniqueToken(); // Implement this function (see below)

  // 4. Store the token in the database, associated with the user's email.
  $result = storeToken($user['id'], $token); // Implement this function (see below)

  if (!$result) {
    return 'Failed to generate token.';
  }

  // 5. Send an email with a link containing the token.
  $resetLink = generateResetLink($token, $user['email']); // Implement this function (see below)
  sendResetPasswordEmail($user['email'], $resetLink);

  return 'Password reset email sent.';
}


// -------------------------------------------------------------------
// Helper Functions (Implement these based on your database and setup)
// -------------------------------------------------------------------

// Helper function to retrieve user by email (replace with your database query)
function getUserByEmail($email) {
  // Example using a database query (adjust to your database setup)
  //  This is just an example, replace with your actual query.
  $db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  $stmt = $db->prepare("SELECT * FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  // Return null if no user is found
  return $user;
}


// Helper function to generate a unique token
function generateUniqueToken() {
  return bin2hex(random_bytes(32)); // Use a secure random number generator
}



// Helper function to store the token in the database
function storeToken($userId, $token) {
  // Example using a database query (adjust to your database setup)
  $db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  $stmt = $db->prepare("INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, NOW())");
  $stmt->execute([$userId, $token]);
  return $stmt->rowCount() > 0;
}

// Helper function to generate the reset password link
function generateResetLink($token, $email) {
  return 'https://yourwebsite.com/reset-password?token=' . urlencode($token) . '&email=' . urlencode($email);
}


// Helper function to send the password reset email (Implement your email sending logic)
function sendResetPasswordEmail($email, $resetLink) {
  // Implement your email sending code here.  This is just a placeholder.
  // You'll likely use a library like PHPMailer or SwiftMailer.

  $subject = 'Password Reset';
  $body = "Click the following link to reset your password: " . $resetLink;
  // ... send the email using your chosen method ...
  echo "Email sent (placeholder)
"; // Replace with actual email sending code
}



// Example Usage:
$email = 'testuser@example.com';  // Replace with a valid email
$result = forgotPassword($email);
echo $result . "
";

?>


<?php

// Database connection details (Replace with your actual details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Function to handle the forgot password process
function forgotPassword($email) {
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // 2. Check if the user exists
    $conn = new mysqli($host, $username, $password, $dbname);

    if ($conn->connect_error) {
        return "Connection failed: " . $conn->connect_error;
    }

    $sql = "SELECT id, password FROM users WHERE email = '$email'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $user = $result->fetch_assoc();
        $userId = $user['id'];
        $hashedPassword = $user['password']; //Retrieve the hashed password.

        // 3. Generate a unique token
        $token = bin2hex(random_bytes(32)); // Generate a secure random token
        
        // 4. Update the user's record with the token
        $sql = "UPDATE users SET reset_token = '$token' WHERE id = '$userId'";
        if ($conn->query($sql) === TRUE) {
            // 5. Send an email with the token and a link
            $emailTo = $email;
            $subject = "Password Reset Link";
            $message = "Click on the following link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=" . urlencode($token) . "'>Reset Password</a>";
            $headers = "From: your_email@example.com" . "\r
";

            if (mail($emailTo, $subject, $message, $headers)) {
                return "Password reset link sent to your email.  Please check your inbox.";
            } else {
                return "Failed to send password reset email.";
            }
        } else {
            return "Error updating user record.";
        }
    } else {
        return "User not found.";
    }

    $conn->close();
}


// Example usage (this is just for demonstration, don't use this directly in a form)
// $email = $_POST['email']; // Get email from form
// $resetMessage = forgotPassword($email);
// echo $resetMessage;

?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


// Example:  Using password_hash()
$password = $_POST['password'];  // Get the user's new password
$hashedPassword = password_hash($password, PASSWORD_DEFAULT);

// Then, in your query:
$sql = "UPDATE users SET password = '$hashedPassword' WHERE id = '$userId'";


<?php

/**
 * Resets a user's password.  This is a basic example and should be
 * thoroughly secured in a production environment.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password to set.
 * @param PDO $pdo The PDO database connection object.
 * @return bool True if password reset was successful, false otherwise.
 */
function forgotPassword(string $email, string $newPassword, PDO $pdo)
{
    // Input validation - very important!
    if (empty($email) || empty($newPassword)) {
        error_log("Forgot password function: Missing email or password."); // Log for debugging
        return false;
    }

    // Check if the email exists in the user table
    $stmt = $pdo->prepare("SELECT id FROM users WHERE email = :email");
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    $stmt->execute();

    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($user === false) {
        error_log("Forgot password function: User with email $email not found.");
        return false;
    }

    // Hash the new password
    $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

    // Update the user's password
    $stmt = $pdo->prepare("UPDATE users SET password = :password WHERE id = :id");
    $stmt->bindParam(':password', $hashedNewPassword, PDO::PARAM_STR);
    $stmt->bindParam(':id', $user['id'], PDO::PARAM_INT);
    $stmt->execute();

    if ($stmt->rowCount() === 0) {
        error_log("Forgot password function: Failed to update password for user ID $user['id']");
        return false;
    }

    return true;
}

// Example Usage (Illustrative - Replace with your actual database setup)
// -------------------------------------------------------------------
// Assume you have a PDO database connection object called $pdo
// -------------------------------------------------------------------

// Example Database Setup (Replace with your actual database details)
$host = 'localhost';
$dbName = 'your_database_name';
$username = 'your_db_username';
$password = 'your_db_password';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbName;charset=utf8", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}
// -------------------------------------------------------------------


// Example Usage
$email = 'testuser@example.com'; // Replace with a valid user email
$newPassword = 'NewSecurePassword123'; // Replace with the desired new password

if (forgotPassword($email, $newPassword, $pdo)) {
    echo "Password reset successful.  Check your email to confirm (if you've enabled email confirmation)."
} else {
    echo "Password reset failed. Please try again.";
}

?>


<?php

// Database connection details (Replace with your actual values)
$dbHost = 'localhost';
$dbName = 'your_database_name';
$dbUser = 'your_username';
$dbPass = 'your_password';

// Ensure you've created a 'users' table in your database
// with at least a 'email' column.  Example:
// CREATE TABLE users (
//   id INT AUTO_INCREMENT PRIMARY KEY,
//   email VARCHAR(255) NOT NULL UNIQUE,
//   password VARCHAR(255) NOT NULL
// );


/**
 * Resets a user's password using email.
 *
 * @param string $email The user's email address.
 * @return bool True if password reset email was sent, false otherwise.
 */
function forgot_password($email) {
  global $dbHost, $dbName, $dbUser, $dbPass;

  // Validate email (basic check - you can add more robust validation)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false;
  }

  // Connect to the database
  $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

  // Check connection
  if ($conn->connect_error) {
    error_log("Database connection failed: " . $conn->connect_error); // Log the error for debugging
    return false;
  }

  // Prepare and execute the query to find the user
  $stmt = $conn->prepare("SELECT id, name FROM users WHERE email = ?");
  $stmt->bind_param("s", $email);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    $stmt->close();
    $conn->close();
    return false; // User not found
  }

  $user = $result->fetch_assoc();
  $userId = $user['id'];
  $userName = $user['name'];
  $stmt->close();

  // Generate a unique token (e.g., using a cryptographically secure function)
  $resetToken = bin2hex(random_bytes(32)); // Generate a 32-byte (256-bit) random string

  // Prepare the reset token insertion query
  $insertStmt = $conn->prepare("INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, NOW())");
  $insertStmt->bind_param("sss", $userId, $resetToken, $conn->insert_id);

  if (!$insertStmt->execute()) {
    error_log("Password reset token insertion failed: " . $insertStmt->error);
    $insertStmt->close();
    $conn->close();
    return false;
  }


  // Prepare and send the password reset email
  $to = $email;
  $subject = 'Password Reset';
  $message = "Click this link to reset your password: " . $_SERVER['REQUEST_SCHEME'] . "://yourdomain.com/reset_password?token=" . urlencode($resetToken); // Replace yourdomain.com
  $headers = "From: your_email@example.com";

  if (mail($to, $subject, $message, $headers)) {
    // Successfully sent the email
    $conn->close();
    return true;
  } else {
    // Failed to send email
    error_log("Failed to send password reset email.");
    $conn->close();
    return false;
  }
}


// Example usage (from a form submission, for example)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  if (forgot_password($email)) {
    echo "Password reset email has been sent to " . $email;
  } else {
    echo "Failed to send password reset email. Please check your email address.";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>
  <h1>Forgot Password</h1>
  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>
</body>
</html>


<?php

// Database connection details (replace with your actual details)
$host = 'localhost';
$username = 'your_db_username';
$password = 'your_db_password';
$database = 'your_db_name';

// Function to reset password
function forgotPassword($email, $newPassword, $db) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return 'Invalid email format.';
  }

  // 2. Check if user exists
  $stmt = $db->prepare("SELECT id, email FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    return 'User not found.';
  }

  // 3. Hash the new password (IMPORTANT for security)
  $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

  // 4. Update the password in the database
  try {
    $stmt = $db->prepare("UPDATE users SET password = ? WHERE id = ?");
    $stmt->execute([$hashedNewPassword, $user['id']]);
    return 'Password reset email sent. Please check your inbox.';
  } catch (PDOException $e) {
    return 'Error updating password: ' . $e->getMessage();
  }
}


// --- Example Usage (This is for demonstration - don't include this in your actual code) ---

// 1. Database connection (using PDO - recommended)
try {
  $db = new PDO("mysql:host=$host;dbname=$database", $username, $password);
  $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // For error handling
} catch (PDOException $e) {
  echo "Database connection error: " . $e->getMessage() . "<br>";
  die(); // Stop script execution if unable to connect
}

// 2. Get email and new password from form (or wherever you get them)
$email = $_POST['email'];
$newPassword = $_POST['new_password'];


// 3. Call the forgotPassword function
$result = forgotPassword($email, $newPassword, $db);

// 4. Display the result
echo $result;


?>


<?php

// IMPORTANT: This is a simplified example and should be adapted for production use.
// It's crucial to implement security best practices like:
// - Strong password hashing (bcrypt, Argon2)
// - Rate limiting
// - Email verification
// - Anti-spam measures
// - Logging and monitoring

// Assume you have a database connection established
// Example: $db = new mysqli("localhost", "username", "password", "database_name");

// Function to handle password reset
function forgotPassword($email, $newPassword) {
  // 1. Validate Inputs
  if (empty($email) || empty($newPassword)) {
    return "Error: Email and new password are required.";
  }

  // 2. Database Interaction (Simulated)
  // Replace this with your actual database query
  $email = filter_var($email, FILTER_SANITIZE_EMAIL); //Sanitize email for security

  // Check if the email exists in the database
  // $result = $db->query("SELECT id FROM users WHERE email = '$email'");
  // if ($result->num_rows > 0) {
  //    // User exists - proceed to reset password
  // } else {
  //    return "Error: Email address not found.";
  // }


  //  Simulated Database
  $users = [
      ['email' => 'test@example.com', 'id' => 1],
      ['email' => 'another@example.com', 'id' => 2],
  ];
  $user = null;
  foreach ($users as $u) {
    if ($u['email'] == $email) {
      $user = $u;
      break;
    }
  }

  if ($user === null) {
      return "Error: Email address not found.";
  }


  // 3. Generate a Reset Token (IMPORTANT - Use a strong method like UUID)
  $resetToken = bin2hex(random_bytes(32)); // Use a better method than this for production

  // 4. Store the Token in the Database (associate with the user)
  //  Example:
  //  $db->query("UPDATE users SET reset_token = '$resetToken', reset_token_expiry = NOW() + INTERVAL 1 HOUR WHERE email = '$email'");


  //Simulated storage - Replace with your database interaction
  $user['reset_token'] = $resetToken;
  $user['reset_token_expiry'] = date('Y-m-d H:i:s', time() + 3600); // 1 hour expiry

  //5.  Create a link to the reset password page
  $resetLink = "https://yourwebsite.com/reset-password?token=$resetToken&user_id=$user['id']";

  // 6. Send the Reset Email
  $to = $email;
  $subject = "Password Reset Request";
  $message = "Click the link below to reset your password:
" . $resetLink;
  $headers = "From: yourwebsite@example.com\r
";
  mail($to, $subject, $message, $headers);


  return "Password reset link sent to $email.";
}

// Example Usage (Simulated)
// $result = forgotPassword("test@example.com", "NewPassword123");
// echo $result;

?>


<?php

// Assume you have a database connection established and a 'users' table with a 'email' column.
// This is a simplified example for demonstration purposes.  In a real application,
// you'd want to implement proper security measures like password hashing and
// prevent brute-force attacks.

// Function to handle the forgot password flow
function forgot_password($email) {
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email format.";
    }

    // 2. Check if the user exists
    $user = get_user_by_email($email); // Replace with your database query

    if ($user === null) {
        return "User not found.";
    }

    // 3. Generate a unique token (Important for security)
    $token = generate_unique_token();

    // 4. Store the token in the database, associated with the user's email
    store_token_in_db($token, $email);  // Replace with your database update query

    // 5.  Create a link to the reset password page, including the token
    $reset_url = "reset_password.php?token=" . $token; //  'reset_password.php' is an example.
                                                       //  Adjust this to your actual reset password page.


    // 6. Send an email to the user with the reset link
    send_reset_password_email($user['username'], $reset_url); // Replace with your email sending function

    return "Password reset link sent to your email address.";
}


// ------------------  Placeholder Functions - Replace with your actual implementation ------------------

// Placeholder function to retrieve user by email (Replace with your database query)
function get_user_by_email($email) {
    // Example - Replace with your actual database query
    // This is just a placeholder to demonstrate the flow
    $users = [
        ['id' => 1, 'username' => 'john.doe', 'email' => 'john.doe@example.com'],
        ['id' => 2, 'username' => 'jane.smith', 'email' => 'jane.smith@example.com']
    ];
    foreach ($users as $user) {
        if ($user['email'] === $email) {
            return $user;
        }
    }
    return null;
}


// Placeholder function to generate a unique token.  Use a cryptographically secure method!
function generate_unique_token() {
    return bin2hex(random_bytes(32)); //  bin2hex for a strong hash.  random_bytes is generally better.
}


// Placeholder function to store the token in the database.
function store_token_in_db($token, $email) {
    //  Replace with your database update query
    //  Example (conceptual):
    //  $query = "UPDATE users SET reset_token = '$token' WHERE email = '$email'";
    //  execute($query);
}

// Placeholder function to send a password reset email.
function send_reset_password_email($username, $reset_url) {
    // Replace with your email sending implementation.
    echo "Sending reset email to: " . $username . " with link: " . $reset_url . "
";
    //In a real application, you'd send the email.
}


// ------------------ Example Usage ------------------

// Example 1:  Successful Reset Link Generation
$result = forgot_password('john.doe@example.com');
echo $result . "
";

// Example 2:  User Not Found
$result = forgot_password('nonexistent@example.com');
echo $result . "
";

?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a table named 'users' with columns 'id', 'email', and 'password_hash'

function forgot_password($email, $db) {
    // 1. Check if the email exists in the database
    $result = $db->query("SELECT id, email FROM users WHERE email = '$email'");

    if ($result->num_rows > 0) {
        // 2. Generate a unique, time-based token
        $token = bin2hex(random_bytes(32)); // Use bin2hex for a more secure random token
        // Use secure_password_hash if available to hash the password
        //  otherwise use password_hash
        $hashedToken = password_hash($token, PASSWORD_DEFAULT);  // Hash the token

        // 3. Store the token in the database, associated with the user's ID
        $query = "UPDATE users SET password_reset_token = '$hashedToken' WHERE email = '$email'";
        if (!$db->query($query)) {
            // Handle error - perhaps log it or return an error message
            error_log("Error updating password reset token: " . $db->error); // Log for debugging
            return false;
        }

        // 4.  Send an email with the reset link
        $to = $email;
        $subject = "Password Reset Request";
        $message = "Click <a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'</a> to reset your password.";  // Use $_SERVER['PHP_SELF'] to generate the URL
        $headers = "From: your_email@example.com";  // Replace with your email address
        mail($to, $subject, $message, $headers);

        // Return true to indicate success
        return true;
    } else {
        // Email doesn't exist
        return false;
    }
}

// Example Usage:  (This part is for demonstration, not for production)
/*
$db = new mysqli("localhost", "username", "password", "database_name");

if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

$email = "test@example.com";  // Replace with the user's email address

if (forgot_password($email, $db)) {
    echo "Password reset email has been sent to $email.";
} else {
    echo "User with email $email not found.";
}

$db->close();
*/

?>


<?php

// Replace with your database connection details
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_db_user";
$db_pass = "your_db_password";

// Function to reset password
function forgotPassword($email, $new_password, $db) {
  // Validate email format (basic check, consider a more robust solution)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email format.";
  }

  // Hash the new password
  $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

  // Update the user's password in the database
  $sql = "UPDATE users SET password = '$hashed_password' WHERE email = '$email'";

  if ($db->query($sql) === TRUE) {
    return "Password reset email sent successfully.";
  } else {
    return "Error resetting password. " . $db->error;
  }
}

// Example Usage (simulated - you'll need to integrate this with your form)
// Assume $email is the user's email address submitted from the form
// Assume $new_password is the user's new password submitted from the form

// Example Database Connection (replace with your actual connection)
$conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Placeholder for form input (replace with your actual form handling)
$email = $_POST['email'];
$new_password = $_POST['new_password'];


// Call the forgotPassword function
$result = forgotPassword($email, $new_password, $conn);

// Display the result
echo $result;
?>


<?php

/**
 * Resets a user's password.
 *
 * This function generates a unique token, sends an email with a link to
 * reset the password, and sets the token in the database.
 *
 * @param string $email The email address of the user.
 * @param string $new_password The new password for the user.
 * @param PDO $pdo PDO database connection object.
 * @return bool True if the password reset was initiated successfully, false otherwise.
 */
function forgot_password(string $email, string $new_password, PDO $pdo) {
  // 1. Generate a unique token
  $token = bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator
  $expiry = time() + 3600; // Token expires after 1 hour (3600 seconds)

  // 2. Insert the token into the database
  $stmt = $pdo->prepare("INSERT INTO password_resets (email, token, expiry) VALUES (?, ?, ?)");
  $stmt->execute([$email, $token, $expiry]);

  // 3. Send the password reset email
  $subject = "Password Reset";
  $message = "To reset your password, please click on the following link: " .
             "<a href='" . base_url() . "/reset_password?token=" . $token . "'>Reset Password</a>";
  $headers = "From: " . "noreply@" . base_url() . "\r
";
  mail($email, $subject, $message, $headers);

  return true; // Indicate success
}


// Example Usage (Illustrative - Requires a `reset_password` route and a database setup)

// Assuming $pdo is your PDO database connection object
// Assuming $email is the user's email address
// Assuming $new_password is the new password

// $pdo = new PDO('mysql:host=localhost;dbname=your_database', 'your_user', 'your_password');
// $email = "user@example.com";
// $new_password = "new_secure_password";

// if (forgot_password($email, $new_password, $pdo)) {
//   echo "Password reset email has been sent to $email.";
// } else {
//   echo "Failed to initiate password reset.";
// }

?>


<?php

// IMPORTANT: This is a basic example.  For production environments,
// you MUST use a secure method for handling passwords and session management.
// This example is for educational purposes only and is NOT secure enough for real-world use.

// Database connection details - REPLACE WITH YOUR ACTUAL CREDENTIALS
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_username';
$db_pass = 'your_password';

// Function to reset the password
function forgotPassword($email, $new_password) {
  // 1. Connect to the database
  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  } catch (PDOException $e) {
    // Handle database connection error (log the error, display an error message to the user)
    error_log("Database connection error: " . $e->getMessage());
    // Display an error message to the user (e.g., "Unable to connect to the database.")
    return false;
  }

  // 2. Check if the email exists in the 'users' table
  $stmt = $pdo->prepare("SELECT id, email FROM users WHERE email = :email");
  $stmt->bindParam(':email', $email, PDO::PARAM_STR);
  $stmt->execute();

  if ($stmt->rowCount() == 0) {
    // Email doesn't exist
    return false;
  }

  // 3. Hash the new password (VERY IMPORTANT - NEVER store passwords in plain text!)
  $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

  // 4. Update the password for the user
  $stmt = $pdo->prepare("UPDATE users SET password = :password WHERE email = :email");
  $stmt->bindParam(':password', $hashed_password, PDO::PARAM_STR);
  $stmt->bindParam(':email', $email, PDO::PARAM_STR);
  if ($stmt->execute()) {
    return true;
  } else {
    // Handle update error (log the error)
    error_log("Error updating password: " . $stmt->errorInfo()[2]);
    return false;
  }
}

// Example Usage:  (This is for demonstration only - NEVER include this directly in a web form)
// $email = 'user@example.com';
// $new_password = 'NewSecurePassword123';

// if (forgotPassword($email, $new_password)) {
//   echo "Password reset successfully! Check your email.";
// } else {
//   echo "Failed to reset password. Please check your email address and try again.";
// }

?>


<?php

// IMPORTANT:  This is a simplified example and should be adapted for production use.
//  It's crucial to implement robust security measures to prevent vulnerabilities.

// Simulate a user database (replace with your actual database connection)
$users = [
    'john.doe@example.com' => ['password' => 'securePassword123', 'salt' => 'randomSalt'],
    'jane.smith@example.com' => ['password' => 'anotherPassword', 'salt' => 'anotherRandomSalt']
];

/**
 * Forgot Password Function
 *
 * @param string $email The user's email address.
 * @return bool True if a reset link was generated and emailed, false otherwise.
 */
function forgotPassword(string $email): bool
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided.");
        return false;
    }

    // 2. Check if the user exists
    if (!isset($users[$email])) {
        error_log("User with email $email not found.");
        return false;
    }

    // 3. Generate a unique reset token
    $resetToken = bin2hex(random_bytes(32)); // Use a cryptographically secure random token

    // 4. Store the token in the database (or another secure storage)
    //    **IMPORTANT:** Replace this with your database storage logic.
    //    This example just prints to the console.  Don't do this in production!
    //    Example database code (replace with your actual connection and query):
    //    $db = new PDO(...);
    //    $stmt = $db->prepare("INSERT INTO password_resets (user_email, token, expiry) VALUES (?, ?, ?)");
    //    $stmt->execute([$email, $resetToken, time() + 3600]); // Expires in 1 hour

    // 5. Create the reset link
    $resetLink = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $resetToken;

    // 6. Send the reset link to the user's email
    //   **IMPORTANT:** Implement your email sending logic here (e.g., using PHPMailer, SwiftMailer, etc.)
    //    This example just prints to the console. Don't do this in production!
    error_log("Reset link sent to: " . $resetLink);
    // Example:
    // $emailResult = sendEmail($email, "Password Reset Link", $resetLink);
    // if ($emailResult) {
    //     return true;
    // } else {
    //     error_log("Failed to send email.");
    //     return false;
    // }


    return true; // Success (but didn't actually send the email for this simplified example)
}

// Example Usage (for testing - not for production)
$emailToReset = 'john.doe@example.com';

if (forgotPassword($emailToReset)) {
    echo "Reset link generated for " . $emailToReset . ". Check your email.";
} else {
    echo "Failed to generate reset link for " . $emailToReset . ".";
}

?>


<?php

// Replace with your actual database connection details
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_database_username";
$db_password = "your_database_password";

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if the password reset was initiated, false otherwise.
 */
function forgot_password(string $email) {
  // 1. Check if the email exists
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  if ($conn->connect_error) {
    error_log("Database connection failed: " . $conn->connect_error);
    return false;
  }

  $query = "SELECT id, email FROM users WHERE email = ?";
  $stmt = $conn->prepare($query);

  if ($stmt === false) {
    error_log("Prepare statement failed: " . $conn->error);
    return false;
  }

  $email_to_check = $email;  // Pass the email to the prepared statement
  $stmt->bind_param("s", $email_to_check);

  if (!$stmt->execute()) {
    error_log("Execute statement failed: " . $stmt->error);
    return false;
  }

  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    // Email doesn't exist
    $stmt->close();
    return false;
  }

  $user = $result->fetch_assoc();
  $userId = $user['id'];
  $stmt->close();

  // 2. Generate a unique reset token
  $reset_token = bin2hex(random_bytes(32)); // Use a secure random string

  // 3. Store the token in the database
  $conn->query("UPDATE users SET reset_token = ? WHERE id = ?", $reset_token, $userId);

  // 4.  Send the reset link (implementation is omitted for brevity)
  // This would typically involve sending an email with a link containing the token.

  // You would then have a link like:  https://yourwebsite.com/reset_password.php?token=$reset_token

  return true;
}

// Example usage (for testing - remove for production)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];

  if (isset($email) && !empty($email)) {
    $reset_success = forgot_password($email);

    if ($reset_success) {
      echo "<p>Password reset link has been sent to your email address.</p>";
      echo "<p>Please check your inbox.</p>";
    } else {
      echo "<p>An error occurred while attempting to reset your password.</p>";
      echo "<p>Please check your email address and try again.</p>";
    }
  } else {
    echo "<p>Please enter your email address.</p>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established and a 'users' table
// with a 'password' and 'email' column.
// Adjust the database credentials and table/column names to match your setup.

// Database connection details (replace with your actual values)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_database_name";

// Function to reset password
function forgotPassword($email, $host, $username, $password, $database) {
  // 1. Connect to the database
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    // Handle the connection error (e.g., log it, display an error message)
    die("Connection failed: " . $conn->connect_error);
  }

  // 2. Check if the email exists
  $query = "SELECT id, email FROM users WHERE email = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("s", $email);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    $stmt->close();
    $conn->close();
    return "Email not found.";
  }

  $user_data = $result->fetch_assoc();
  $stmt->close();

  // 3. Generate a unique token (e.g., UUID)
  $token = uniqid();

  // 4. Update the user's record with the token
  $query = "UPDATE users SET password_reset_token = ? WHERE id = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("ss", $token, $user_data['id']);
  $stmt->execute();

  if ($stmt->affected_rows === 0) {
    $stmt->close();
    $conn->close();
    return "Failed to generate reset token.  Please try again.";
  }

  $stmt->close();

  // 5. Send an email with a reset link
  $reset_link = "http://yourdomain.com/reset_password?token=$token"; // Replace your domain
  $to = $email;
  $subject = "Password Reset";
  $message = "Click this link to reset your password: " . $reset_link;
  $headers = "From: your_email@example.com\r
";

  if (mail($to, $subject, $message, $headers)) {
    $stmt->close();
    $conn->close();
    return "Password reset email sent to $email.";
  } else {
    $stmt->close();
    $conn->close();
    return "Failed to send password reset email.";
  }
}

// Example Usage (From a form submission - handle form validation here!)
// $email = $_POST['email']; // Get email from the form
// $result = forgotPassword($email, $host, $username, $password, $database);
// echo $result; // Display the result (e.g., success or error message)

?>


<?php

// Assuming you have a database connection established (e.g., $db connection)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if password reset email was sent, false otherwise.
 */
function forgotPassword(string $email)
{
    // Check if the email exists in the database
    $user = getUserByEmail($email);

    if (!$user) {
        return false; // User not found
    }

    // Generate a unique token for the password reset
    $token = generateUniqueToken();

    // Store the token in the database, associated with the user's ID
    // You'll need to modify this based on your database schema.
    // This assumes you have a 'password_reset_tokens' table.
    $result = insertPasswordResetToken($user['id'], $token);

    if (!$result) {
        // Handle database insertion error (e.g., logging)
        error_log("Failed to insert password reset token for user: " . $email);
        return false;
    }

    // Send the password reset email
    $resetLink = generateResetLink($token); // create a URL with the token
    sendPasswordResetEmail($user['email'], $resetLink);

    return true;
}

/**
 * Placeholder function to retrieve a user by email.
 *  Replace with your actual database query.
 * @param string $email
 * @return array|null  Returns an array with user data if found, null otherwise.
 */
function getUserByEmail(string $email)
{
    // Example using a mysqli connection (replace with your actual database method)
    // $query = "SELECT id, email FROM users WHERE email = '$email'";
    // $result = mysqli_query($db, $query);
    // if (mysqli_num_rows($result) > 0) {
    //     $user = mysqli_fetch_assoc($result);
    //     return $user;
    // }
    // return null;
    // Example using a simple object
    $user = [
        'id' => 123, // Replace with actual user ID
        'email' => $email
    ];
    return $user;
}


/**
 * Placeholder function to generate a unique token.
 *  Use a library like RandomString or a more robust approach.
 * @return string
 */
function generateUniqueToken()
{
    return bin2hex(random_bytes(32)); // Example -  use a proper random string generator
}



/**
 * Placeholder function to generate a password reset link.
 * @param string $token
 * @return string
 */
function generateResetLink(string $token)
{
    // Generate a URL with the token (e.g., /reset-password?token=...)
    return '/reset-password?token=' . urlencode($token);
}


/**
 * Placeholder function to send the password reset email.
 *  Replace with your email sending implementation.
 * @param string $email
 * @param string $resetLink
 */
function sendPasswordResetEmail(string $email, string $resetLink)
{
    // Implement your email sending logic here.
    // This is just a placeholder.
    echo "Sending password reset email to: " . $email . " with link: " . $resetLink . "
";
}


/**
 * Placeholder function to insert a password reset token into the database.
 * @param int $userId
 * @param string $token
 * @return bool
 */
function insertPasswordResetToken(int $userId, string $token)
{
    // Example using a mysqli connection. Adapt to your DB
    // $query = "INSERT INTO password_reset_tokens (user_id, token, created_at) VALUES ('$userId', '$token', NOW())";
    // $result = mysqli_query($db, $query);

    //  Return true if query executed successfully
    return true;
}
?>


<?php

// Assuming you have a database connection established (e.g., $db)
// This is just a basic example and should be adapted to your specific setup.

// Function to handle password reset
function forgotPassword($email)
{
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return 'Invalid email address.';
  }

  // 2. Generate a Unique Token (important for security)
  $token = bin2hex(random_bytes(32));

  // 3.  Store Token in Database (or suitable storage)
  //  -  This is where you'd interact with your database to store the token
  //     associated with the user's email.
  //  -  Replace this with your actual database query.
  $query = "INSERT INTO forgot_passwords (email, token, expiry) VALUES ('$email', '$token', NOW() + INTERVAL 24 HOUR)"; // Example query
  // Execute the query (e.g., $db->query($query));

  // 4. Create the Reset Link
  $resetLink = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $token;

  // 5. Send the Reset Email
  $to = $email;
  $subject = 'Password Reset Request';
  $message = "To reset your password, please click on the following link:
$resetLink

This link will expire in 24 hours.";
  $headers = 'From: your_email@example.com' . "\r
";

  mail($to, $message, $headers);

  return 'Password reset link sent to your email.';
}


// Example Usage (within a form submission or similar)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"]; //  Get email from the form

  if ($email) {
    $result = forgotPassword($email);
    echo "<p>" . $result . "</p>";
  } else {
    echo "<p>Please enter your email address.</p>";
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Request Password Reset</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password.
 * @return bool True if password reset was successful, false otherwise.
 */
function forgotPassword(string $email, string $newPassword) {
  // 1. Check if the email exists
  $user = getUserByEmail($email);

  if (!$user) {
    return false; // User not found
  }

  // 2. Hash the new password
  $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);

  // 3. Update the user's password in the database
  $result = updateUserPassword($user->id, $hashedPassword);

  if ($result === false) {
    return false; // Database error
  }

  // 4. (Optional) Send an email notification
  // You'd replace this with your actual email sending logic.
  // This is just a placeholder.
  sendPasswordResetEmail($user->email, $hashedPassword);

  return true; // Password reset successful
}


/**
 * Helper function to get a user by email.  Replace this with your actual database query.
 *
 * @param string $email The email address to search for.
 * @return User|null A User object if found, null otherwise.
 */
function getUserByEmail(string $email): ?User {
  // Replace this with your actual database query (e.g., using PDO or MySQLi)
  // Example using a hypothetical User class:
  // return $db->query("SELECT * FROM users WHERE email = '$email' LIMIT 1")->fetch(PDO::FETCH_CLASS, 'User');

  // Placeholder - Replace with your actual database code
  $users = getAllUsers(); //  Assuming you have a function to get all users

  foreach ($users as $user) {
    if ($user->email === $email) {
      return $user;
    }
  }
  return null;
}



/**
 * Helper function to update a user's password. Replace this with your actual database update query.
 *
 * @param int $userId The ID of the user to update.
 * @param string $hashedPassword The hashed new password.
 * @return bool True if password update was successful, false otherwise.
 */
function updateUserPassword(int $userId, string $hashedPassword): bool {
  // Replace this with your actual database update query
  // Example using PDO:
  // try {
  //   $stmt = $db->prepare("UPDATE users SET password = :password WHERE id = :id");
  //   $stmt->bindParam(':password', $hashedPassword);
  //   $stmt->bindParam(':id', $userId);
  //   return $stmt->execute();
  // } catch (Exception $e) {
  //   // Handle database errors here
  //   return false;
  // }

  // Placeholder
  return true; // Replace with your database update logic
}


/**
 * Placeholder function to send an email notification.  Implement your email sending logic here.
 *
 * @param string $email The recipient's email address.
 * @param string $hashedPassword The hashed password.
 * @return void
 */
function sendPasswordResetEmail(string $email, string $hashedPassword) {
  // This is a placeholder.  Implement your email sending logic here.
  // You'd use a library like PHPMailer to send emails.
  // Example:
  // $subject = 'Password Reset';
  // $body = "Please click the following link to reset your password: " . $resetLink;
  // mail($email, $subject, $body);

  echo "Password reset email sent (placeholder).
";
}

/**
 * Dummy User class for demonstration purposes.  Replace with your actual User class.
 */
class User {
  public string $email;
  public int $id;

  public function __construct(string $email, int $id) {
    $this->email = $email;
    $this->id = $id;
  }
}

/**
 * Dummy function to get all users. Replace this with your actual database retrieval logic.
 */
function getAllUsers(): array {
  // This is just a placeholder. Replace with your actual database retrieval logic.
  $users = [];
  $users[] = new User("test@example.com", 1);
  $users[] = new User("another@example.com", 2);
  return $users;
}



// Example Usage (for testing)
// WARNING: This is just an example. Don't use this directly in a production environment.
$email = "test@example.com"; // Replace with a valid user email.
$newPassword = "NewPassword123";

if (forgotPassword($email, $newPassword)) {
  echo "Password reset successfully for $email.
";
} else {
  echo "Password reset failed for $email.
";
}
?>


<?php

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Generate a random token for password reset
function generate_reset_token() {
  return bin2hex(random_bytes(32));
}

// Function to reset password
function reset_password($email, $token, $new_password) {
  // 1. Validate the token
  $query = "SELECT id FROM users WHERE email = ? AND reset_token = ?";
  $stmt = $GLOBALS['conn']->prepare($query);
  $stmt->bind_param("ss", $email, $token);
  $result = $stmt->execute();

  if ($result) {
    $user = $stmt->fetch_assoc();
    $id = $user['id'];

    // 2. Update the password in the database
    $password_hash = password_hash($new_password, PASSWORD_DEFAULT); // Hash the new password

    $query = "UPDATE users SET password = ?, reset_token = ? WHERE id = ?";
    $stmt = $GLOBALS['conn']->prepare($query);
    $stmt->bind_param("sisi", $password_hash, $token, $id);

    if ($stmt->execute()) {
      return true; // Password reset successful
    } else {
      return false; // Password reset failed
    }
  } else {
    return false; // Token invalid or user not found
  }
}


// Example Usage:

// 1. Generate the token
$reset_token = generate_reset_token();
echo "Reset Token: " . $reset_token . "<br>";

// 2.  Simulate a request from the user's browser (for demonstration)
//  In a real application, you'd receive the email, token, and new password from a form.
$user_email = "test@example.com"; // Replace with the user's email
$new_password = "newPassword123";  // Replace with the new password

// 3.  Call the reset_password function
if (reset_password($user_email, $reset_token, $new_password)) {
  echo "Password reset successful! Please check your email.";
} else {
  echo "Password reset failed.  Check your email address and token.";
}


// ---  Important Considerations & Enhancements ---
// 1.  Database Connection:
//    - Replace  $host, $username, $password, and $database with your actual credentials.
//    - Use a prepared statement to prevent SQL injection vulnerabilities.

// 2.  Token Expiration:
//    - Add an expiration time to the token (e.g., 30 minutes). This prevents attackers from using old tokens.  You can use `DateTime` and `strtotime()` for this.

// 3.  Email Sending:
//    - Use a reliable email sending service (e.g., SendGrid, Mailgun, SMTP) to send the password reset link to the user.  Don't try to implement your own email sending as it's prone to issues and can be blacklisted.

// 4.  Security:
//    - Never store passwords in plain text. Always use a strong hashing algorithm (like PASSWORD_DEFAULT) with a salt.
//    - Validate all user input to prevent XSS and other vulnerabilities.
//    - Rate limiting to prevent brute-force attacks.

// 5.  Error Handling:
//    - Implement more robust error handling and logging.

// 6.  User Interface:
//    - Design a user-friendly interface for the password reset process.  Include clear instructions and feedback.
?>


<?php

/**
 * Forgot Password Function - Secure Password Reset
 *
 * This function securely handles password resets by sending a unique, time-based
 * token to the user's email address.  It also includes important security measures
 * like input sanitization and rate limiting to prevent abuse.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @param string $token   The token generated for the password reset request.  (Should be generated by the function itself)
 * @return bool True if the reset email was sent successfully, false otherwise.
 */
function forgotPassword(string $email, string $token): bool
{
    // 1. Input Validation and Sanitization
    if (empty($email)) {
        error_log("Forgot Password: Empty email provided."); // Log the error for debugging
        return false;
    }

    $email = filter_var($email, FILTER_SANITIZE_EMAIL);
    if (filter_var($email, FILTER_VALIDATE_EMAIL) === false) {
        error_log("Forgot Password: Invalid email format provided.");
        return false;
    }

    // 2. Check if user exists (Optional, but recommended for security)
    $user = getUserById($email); // Implement this function (see example below)

    if ($user === null) {
        error_log("Forgot Password: User with email '$email' not found.");
        return false;
    }

    // 3. Generate Reset Token (IMPORTANT:  Ideally, generate a truly random token)
    $resetToken = generateUniqueToken(); // Implement this function (see example below)


    // 4. Store Token (Securely - NEVER store passwords directly)
    $storedToken = hash('sha256', $resetToken);  // Hash the token for security

    // Store token in database - replace this with your actual database interaction
    storeToken($user['id'], $storedToken); // Implement this function (see example below)


    // 5. Send Reset Email
    $subject = "Password Reset Request";
    $message = "Please click on the following link to reset your password: ";
    $link = site_url() . "/reset_password?token=" . urlencode($resetToken);  // Construct secure URL
    $message .= "<br><a href='" . $link . "'>Reset Password</a>";

    $headers = "From: " . getSenderEmail() . "\r
"; // Replace with your sender email
    $result = mail($email, $subject, $message, $headers);


    if ($result) {
        return true;
    } else {
        error_log("Forgot Password: Failed to send email to '$email'.");
        return false;
    }
}



/**
 * Example implementation for getUserById (Replace with your actual database query)
 * This is just an example; adapt it to your database setup.
 *
 * @param string $email
 * @return null|array  Returns user data as an array on success, null on failure.
 */
function getUserById(string $email): ?array
{
    // Replace this with your database query
    // This is just a dummy example.
    $users = [
        ['id' => 1, 'email' => 'test@example.com', 'password' => 'password123'],
        ['id' => 2, 'email' => 'user2@example.com', 'password' => 'securepass'],
    ];

    foreach ($users as $user) {
        if ($user['email'] === $email) {
            return $user;
        }
    }
    return null;
}



/**
 * Example implementation for generateUniqueToken.
 *  This creates a unique, secure token.
 *  You *must* implement a robust token generation mechanism.
 *
 * @return string
 */
function generateUniqueToken(): string
{
    return bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator.
}



/**
 * Example implementation for storeToken.
 *  Replace this with your database interaction.
 *
 * @param int $userId  The ID of the user.
 * @param string $token The token to store.
 */
function storeToken(int $userId, string $token): void
{
    // Replace this with your actual database interaction
    // Example:
    // $db = new DatabaseConnection();
    // $sql = "INSERT INTO reset_tokens (user_id, token, created_at) VALUES (?, ?, NOW())";
    // $stmt = $db->prepare($sql);
    // $stmt->bind_param("is", $userId, $token);
    // $stmt->execute();
}


/**
 * Placeholder function for getSenderEmail() - Replace with your email configuration
 * @return string
 */
function getSenderEmail(): string
{
    return 'your_email@example.com';
}

/**
 * Placeholder function for site_url() - Replace with your site URL
 * @return string
 */
function site_url(): string
{
    return 'http://localhost/your_website';
}
?>


<?php

// This is a basic example and should be adapted for your specific setup
//  - Database credentials should be stored securely (e.g., environment variables)
//  - This example is not production-ready and lacks proper input validation, security measures,
//    and logging.

// Database configuration (replace with your actual credentials)
$dbHost = 'localhost';
$dbName = 'your_database_name';
$dbUser = 'your_database_user';
$dbPass = 'your_database_password';

// Email settings (replace with your email server details)
$emailFrom = 'your_email@example.com';
$emailTo = '%user_email%'; // Placeholder for user's email (will be replaced dynamically)
$emailSubject = 'Password Reset';

// Function to send the password reset email
function sendPasswordResetEmail($email, $resetToken) {
    //  - Replace this with your email sending logic (e.g., using PHPMailer)
    //  - Make sure you handle email sending errors properly.

    $message = "Please click on the following link to reset your password: <a href='" . base64_decode("{$resetToken}") . "'>Reset Password</a>";
    $headers = "From: " . $emailFrom . "\r
";
    $headers .= "Reply-To: " . $emailFrom . "\r
";

    mail($emailTo, $message, $headers);
}


// Function to handle the forgot password request
function forgotPassword($email) {
    // Validate email format (basic check - improve this for production)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return 'Invalid email address.';
    }

    // 1. Generate a unique, secure token (e.g., using random_bytes)
    $resetToken = bin2hex(random_bytes(32)); // Use bin2hex for security

    // 2.  Generate a token entry in the database
    //    This is a simplified example.  You likely want to store expiration
    //    and potentially other fields.

    //  Important:  Never store passwords directly. Use a hash (e.g., bcrypt)
    //  Instead of storing 'password' in the database, you'd store the hashed password.

    //  This simplified example assumes a table called 'users' with columns 'email' and 'password'
    //  and we're just generating a token.  Adapt to your schema.

    //  For production, use prepared statements to prevent SQL injection.
    $sql = "INSERT INTO users (email, reset_token, created_at) VALUES (?, ?, NOW())"; // Create table if it doesn't exist
    $stmt = $conn->prepare($sql);  // Prepare statement

    if ($stmt->execute([$email, $resetToken])) {
      // 3.  Send the password reset email
      sendPasswordResetEmail($email, $resetToken);
      return 'Password reset email sent. Please check your inbox.';
    } else {
      // Handle database error
      return 'An error occurred while processing your request.';
    }
}



// Example usage (replace with your form handling code)

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    $resetResult = forgotPassword($email);
    echo $resetResult;
} else {
    // Display the forgot password form
    ?>
    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Forgot Password</button>
    </form>
    <?php
}

?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and the user's email is stored in a session variable called $userEmail

// 1. Check if the user is already logged in.  If they are, don't allow a forgot password request.
if (isset($_SESSION['user_id'])) {
    // User is logged in - redirect to login page or homepage.  Don't proceed with forgot password.
    header("Location: /"); // Replace "/" with your login page URL
    exit();
}


// 2. Handle the form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    // Basic email validation (improve this for production)
    if (empty($email)) {
        $error = "Please enter your email address.";
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email address.";
    } else {
        // 3. Generate a unique reset token
        $resetToken = bin2hex(random_bytes(32));

        // 4. Store the token in the database, associated with the user's email
        //  This is a simplified example.  Use prepared statements to prevent SQL injection.
        //  Consider using a more robust hashing mechanism for security.
        $query = "INSERT INTO password_resets (user_email, reset_token, created_at) VALUES (?, ?, NOW())";
        $stmt = $db->prepare($query);
        $stmt->bind_param("s", $email, $resetToken);
        $stmt->execute();
        $stmt->close();

        // 5.  Send an email with the reset token
        $to = $email;
        $subject = "Password Reset Request";
        $message = "Click this link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=" . urlencode($resetToken) . "'>Reset Password</a>";
        $headers = "From: your-website@example.com" . "\r
";

        if (mail($to, $subject, $message, $headers)) {
            echo "Password reset email has been sent.  Please check your inbox.";
        } else {
            echo "Error sending password reset email.  Please try again later.";
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

<h1>Forgot Password</h1>

<?php if (isset($error)): ?>
    <p style="color: red;"><?php echo $error; ?></p>
<?php endif; ?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email Address:</label>
    <input type="email" id="email" name="email" placeholder="Your email">
    <button type="submit">Reset Password</button>
</form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_username';
$db_password = 'your_password';

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if the password was reset successfully, false otherwise.
 */
function forgot_password($email) {
  // 1. Validate the email (basic check - can be enhanced)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false;
  }

  // 2.  Check if the user exists.
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  if ($conn->connect_error) {
    error_log("Database connection failed: " . $conn->connect_error);
    return false;
  }

  // Prepare the SQL query
  $sql = "SELECT id, email FROM users WHERE email = ?";
  $stmt = $conn->prepare($sql);

  if ($stmt === false) {
    error_log("SQL prepare failed: " . $conn->error);
    return false;
  }

  // Bind the parameter
  $stmt->bind_param("s", $email);

  // Execute the query
  if (!$stmt->execute()) {
    error_log("Query failed: " . $stmt->error);
    return false;
  }

  // Get the result
  $result = $stmt->get_result();

  // Check if a user was found
  if ($result->num_rows == 0) {
    $stmt->close();
    $conn->close();
    return false;
  }

  $user = $result->fetch_assoc();
  $userId = $user['id'];
  $stmt->close();
  $conn->close();

  // 3. Generate a unique token and store it in the database
  $token = bin2hex(random_bytes(32)); // Generate a secure random token
  
  // Prepare and execute the SQL query to update the user record
  $sql = "UPDATE users SET password_reset_token = ? WHERE id = ?";
  $stmt = $conn->prepare($sql);

  if ($stmt === false) {
    error_log("SQL prepare failed: " . $conn->error);
    return false;
  }

  $stmt->bind_param("ss", $token, $userId);

  if (!$stmt->execute()) {
    error_log("Query failed: " . $stmt->error);
    return false;
  }

  // 4.  Send an email to the user with a link to reset their password.
  //    This part is not included in this simplified example,
  //    but you would typically use an email library to send the email.

  // Return True to indicate success
  return true;
}

// Example usage (for testing - don't expose this in a production environment)
// $email = "testuser@example.com";  // Replace with a valid email
// if (forgot_password($email)) {
//   echo "Password reset link sent to $email";
// } else {
//   echo "Failed to reset password.";
// }

?>


<?php

// Assume you have a database connection established (e.g., $db)
// and a table called 'users' with 'email' and 'password' columns.

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email) {
  // 1. Validate Input:  Important to prevent security vulnerabilities.
  if (empty($email)) {
    return false;
  }

  // 2. Fetch User Information
  $stmt = $db->prepare("SELECT id, password FROM users WHERE email = ?");
  $stmt->bind_param("s", $email);
  $result = $stmt->execute();

  if ($result === false) {
    // Handle database errors
    error_log("Error executing query: " . $db->error);  // Log for debugging
    return false;
  }

  $user = $stmt->fetch_assoc();

  if ($user === false || empty($user)) {
    // User not found
    return false;
  }

  // 3. Generate a Token (Unique, Time-Based)
  $token = bin2hex(random_bytes(32));  // Using a secure random string.

  // 4. Hash the Token and Store it in the Database (for verification)
  $stmt = $db->prepare("INSERT INTO password_resets (user_id, token, expiry) VALUES (?, ?, ?)");
  $stmt->bind_param("iii", $user['id'], $token, time() + 3600); // Expires in 1 hour

  if ($stmt->execute() === false) {
    // Handle database errors
    error_log("Error inserting password reset data: " . $db->error);
    return false;
  }


  // 5. Send Password Reset Email (Implement this logic)
  $to = $email;
  $subject = "Password Reset";
  $message = "Please use the following link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . "?reset=" . urlencode($token) . "'>Reset Password</a>";
  $headers = "From: your_website@example.com"; // Replace with your email address

  if (mail($to, $subject, $message, $headers)) {
    return true;
  } else {
    // Handle email sending failure
    error_log("Error sending email.");
    //  Consider more robust error handling here - e.g., logging,
    //  retry mechanisms, or informing the user.
    return false;
  }
}



/**
 * Validates the reset token and updates the user's password.
 *  This function is called AFTER the user clicks the reset link.
 *
 * @param string $token The password reset token.
 * @param string $new_password The new password.
 * @return bool True on success, false on failure.
 */
function reset_password(string $token, string $new_password) {
  // 1. Validate Token (check if it exists and is not expired)
  $stmt = $db->prepare("SELECT user_id, expiry FROM password_resets WHERE token = ? AND expiry > NOW()");
  $stmt->bind_param("s", $token);
  $result = $stmt->execute();

  if ($result === false) {
    // Handle database errors
    error_log("Error executing query: " . $db->error);
    return false;
  }

  $reset = $stmt->fetch_assoc();

  if ($reset === false || empty($reset)) {
    // Token invalid or expired
    return false;
  }

  // 2. Hash the New Password
  $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

  // 3. Update User Password in the Database
  $stmt = $db->prepare("UPDATE users SET password = ? WHERE id = ?");
  $stmt->bind_param("ss", $hashed_password, $user['id']);

  if ($stmt->execute() === false) {
    // Handle database errors
    error_log("Error updating user password: " . $db->error);
    return false;
  }

  // 4. Delete the Password Reset Record (Important!)
  $stmt = $db->prepare("DELETE FROM password_resets WHERE token = ?");
  $stmt->bind_param("s", $token);
  $result = $stmt->execute();
  if ($result === false) {
     // Handle database errors
    error_log("Error deleting password reset record: " . $db->error);
  }

  return true;
}



//Example Usage (Conceptual - you'll need to integrate this into your application)
// $email = "test@example.com";
// if (forgot_password($email)) {
//   echo "Password reset email sent to " . $email;
// } else {
//   echo "Failed to send password reset email.";
// }

?>


<?php

// Assuming you have a database connection established (e.g., $db)
//  and a 'users' table with 'email' and 'password' columns.
//  This is a simplified example; in a real-world scenario, you'd
//  add more security measures.

function forgot_password($email, $db) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if user exists
  $result = $db->query("SELECT id, password FROM users WHERE email = '$email'");

  if ($result->num_rows === 0) {
    return "User not found.";
  }

  $user = $result->fetch_assoc();
  $userId = $user['id'];
  $hashedPassword = $user['password']; //This should be hashed in your database!

  // 3. Generate a temporary password
  $tempPassword = generate_temp_password();

  // 4. Update the database with the temporary password
  $db->query("UPDATE users SET password = '$tempPassword' WHERE id = '$userId'");

  // 5.  Store the temporary password in a temporary table or session 
  //     (This is crucial - don't just log it in the user's database).
  //     Example using a temporary table:
  $db->query("INSERT INTO password_resets (user_id, reset_token, expires_at)
            VALUES ($userId, '$tempPassword', NOW() + INTERVAL 1 HOUR)");


  // 6. Return a reset link (email the user with this link)
  return "<a href='reset_password.php?token=$tempPassword'>Click here to reset your password</a>";

  // Or, you can return the token directly if you are handling the reset in the same page.
  //return $tempPassword;
}

//Helper function to generate a temporary password
function generate_temp_password() {
  $length = 12; // Adjust as needed
  $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  $password = '';
  $character_length = strlen($characters);
  for ($i = 0; $i < $length; $i++) {
    $random_number = rand(0, $character_length - 1);
    $password .= substr($characters, $random_number);
  }
  return $password;
}



//Example Usage (Illustrative - needs actual database setup)
// $email = "test@example.com";
// $resetLink = forgot_password($email);
// echo $resetLink;

?>


<?php

// Assume you have a database connection established.
// Replace these with your actual database connection details.
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// ---  Helper Functions (Important for Security) ---

/**
 * Generates a secure, random password string.
 *
 * @param int $length The desired length of the password.  Default is 12.
 * @return string A secure random password.
 */
function generateRandomPassword($length = 12) {
    $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-={}[]|;:\'",<.>?/';
    $password = '';
    $passwordLength = $length;
    $max = strlen($characters) - 1;
    
    for ($i = 0; $i < $passwordLength; $i++) {
        $password .= $characters[rand(0, $max)];
    }
    return $password;
}

/**
 *  Sends an email.
 *
 * @param string $to The email address to send to.
 * @param string $subject The email subject.
 * @param string $message The email body.
 * @return bool True on success, false on failure.
 */
function sendEmail($to, $subject, $message) {
    // Replace with your email sending configuration
    $to = $to;
    $from = "your_email@example.com"; // Your email address
    $headers = "From: " . $from . "\r
";
    $headers .= "Reply-To: " . $from . "\r
";

    mail($to, $subject, $message, $headers);
    return true; //  Assume success, you'll need to handle exceptions in real code
}


/**
 * Checks if an email exists in the database.
 *
 * @param string $email The email address to search for.
 * @return bool True if the email exists, false otherwise.
 */
function emailExists($email) {
    global $servername, $username, $password, $dbname;

    try {
        $conn = new mysqli($servername, $username, $password, $dbname);

        // Check connection
        if ($conn->connect_error) {
            throw new Exception("Connection failed: " . $conn->connect_error);
        }

        $sql = "SELECT email FROM users WHERE email = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("s", $email); // "s" indicates a string parameter
        $stmt->execute();
        $result = $stmt->get_result();

        if ($result->num_rows > 0) {
            return true;
        } else {
            return false;
        }

        $stmt->close();
        $conn->close();

    } catch (Exception $e) {
        error_log("Database error: " . $e->getMessage()); // Log the error
        return false; // Return false in case of error
    }
}



// --- Forgot Password Function ---
function forgotPassword($email) {
    // 1. Check if the email exists.
    if (!emailExists($email)) {
        return "Email not found."; //  Or you could log this
    }

    // 2. Generate a temporary password.
    $tempPassword = generateRandomPassword();

    // 3.  Store the temporary password in the database.  This is a simplified example.
    //     In a production environment, you would likely:
    //      - Send the password to an email (as in this example)
    //      - Set an expiry time for the password
    //      - Store the temporary password securely.

    try {
        global $servername, $username, $password, $dbname;
        $conn = new mysqli($servername, $username, $password, $dbname);

        // Check connection
        if ($conn->connect_error) {
            throw new Exception("Connection failed: " . $conn->connect_error);
        }

        $sql = "UPDATE users SET temp_password = ? WHERE email = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("ss", $tempPassword, $email);  // "ss" indicates two string parameters
        $stmt->execute();

        if ($stmt->affected_rows === 0) {
            throw new Exception("Failed to update temporary password.");
        }

        $stmt->close();
        $conn->close();

    } catch (Exception $e) {
        error_log("Database error: " . $e->getMessage());
        return "Failed to generate temporary password.  Please try again.";
    }

    // 4. Send the temporary password to the user's email address.
    $subject = "Forgot Password";
    $message = "Your temporary password is: " . $tempPassword . "

Please change your password as soon as possible.";
    if (sendEmail($email, $subject, $message)) {
        return "Temporary password has been sent to your email address.  Please change your password immediately.";
    } else {
        return "Failed to send temporary password. Please check your email settings.";
    }
}


// --- Example Usage (Testing) ---
//  This is for demonstration purposes only.  Don't put actual user input directly into this.
/*
$email = "testuser@example.com"; // Replace with a valid email address

$result = forgotPassword($email);
echo $result;
*/


?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if password reset email sent successfully, false otherwise.
 */
function forgotPassword(string $email) {
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided: " . $email); // Log for debugging
        return false;
    }

    // 2. Check if User Exists
    $user = getUserByEmail($email);
    if (!$user) {
        error_log("User with email " . $email . " not found.");
        return false;
    }

    // 3. Generate a Unique Token and Store It
    $token = generateUniqueToken();
    $hashedToken = password_hash($token, PASSWORD_DEFAULT); // Hash the token for security

    // 4. Store Token in Database (Associate with User)
    if (!storeTokenInDatabase($user->id, $hashedToken)) {
        error_log("Failed to store token in database for user " . $email);
        return false;
    }

    // 5.  Send Password Reset Email
    if (!sendPasswordResetEmail($user->email, $token)) {
        // If sending email fails, you might want to rollback the token in the database.
        //  This depends on your application's requirements.  For example:
        //  deleteTokenFromDatabase($user->id);
        error_log("Failed to send password reset email for user " . $email);
        return false;
    }

    return true;
}


/**
 *  Helper function to get user by email
 *  This is a placeholder, replace with your actual database query.
 *
 * @param string $email
 * @return User|null
 */
function getUserByEmail(string $email): ?User {
  // Replace this with your actual database query
  // Example using a hypothetical User model:
  // $query = "SELECT * FROM users WHERE email = ?";
  // $stmt = $db->prepare($query);
  // $stmt->execute([$email]);
  // $user = $stmt->fetch(PDO::FETCH_ASSOC);
  // if ($user) {
  //   return new User($user);
  // }

  // Placeholder return
  return null;
}



/**
 * Generates a unique token.  Consider using a cryptographically secure random number generator.
 *
 * @return string
 */
function generateUniqueToken(): string {
    return bin2hex(random_bytes(32));  // Use bin2hex for a hexadecimal representation
}


/**
 *  Helper function to store the token in the database
 *  Replace with your actual database code
 *
 * @param int $userId
 * @param string $hashedToken
 */
function storeTokenInDatabase(int $userId, string $hashedToken) {
    // Replace this with your database code to store the token for the user.
    // Example (using a hypothetical database table 'password_tokens'):
    // $query = "INSERT INTO password_tokens (user_id, token) VALUES (?, ?)";
    // $stmt = $db->prepare($query);
    // $stmt->execute([$userId, $hashedToken]);
    // return true;

    // Placeholder - always returns true for now
    return true;
}


/**
 *  Helper function to send a password reset email
 *  Replace with your actual email sending logic
 *
 * @param string $email
 * @param string $token
 */
function sendPasswordResetEmail(string $email, string $token) {
    // Replace this with your actual email sending logic.
    // This is just a placeholder.

    $subject = "Password Reset Request";
    $message = "Please click the following link to reset your password: " . $_SERVER['REQUEST_SCHEME'] . "://yourdomain.com/reset_password?token=" . urlencode($token);
    $headers = "From: yourdomain@example.com\r
";

    if (mail($email, $subject, $message, $headers)) {
        return true;
    } else {
        return false;
    }
}

// Example usage (for demonstration only - don't use in production without proper sanitization)
// $email = "test@example.com"; // Replace with the user's email
// if (forgotPassword($email)) {
//     echo "Password reset email sent successfully!";
// } else {
//     echo "Failed to send password reset email.";
// }
?>


<?php

// Configuration (Replace with your actual database credentials)
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_database_username";
$db_pass = "your_database_password";

// Function to handle password reset requests
function forgotPassword($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if User Exists
  $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

  if ($conn->connect_error) {
    return "Database connection failed: " . $conn->connect_error;
  }

  $sql = "SELECT id, email FROM users WHERE email = '$email'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $user_id = $result->fetch_assoc()['id'];
    $user_email = $result->fetch_assoc()['email'];

    // 3. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // Use bin2hex for better security

    // 4. Hash the Token
    $hashed_token = password_hash($token, PASSWORD_DEFAULT);

    // 5. Update User's Record with Token
    $sql_update = "UPDATE users SET reset_token = '$hashed_token' WHERE id = '$user_id'";
    if ($conn->query($sql_update) === TRUE) {
      // 6. Send Password Reset Email
      $to = $email;
      $subject = "Password Reset Request";
      $message = "Click on the following link to reset your password: " . $_SERVER['PHP_SELF'] . "?token=" . $token;
      $headers = "From: your_email@example.com"; // Replace with your email

      mail($to, $subject, $message, $headers);

      return "Password reset email sent to $email.  Check your inbox.";
    } else {
      return "Error updating user record.";
    }
  } else {
    return "User with email '$email' not found.";
  }

  $conn->close();
}

// Example Usage (For testing - Don't expose this in a production environment)
// $reset_message = forgotPassword("test@example.com");
// echo $reset_message;

?>


<?php

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_username';
$db_password = 'your_password';

/**
 * Resets a user's password.
 *
 * @param string $email The email address associated with the account.
 * @return bool True if password reset email sent successfully, false otherwise.
 */
function forgot_password($email)
{
    // Validate email format
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log the error
        return false;
    }

    // Check if the user exists
    $stmt = $GLOBALS['db']->prepare("SELECT id, email FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        error_log("User not found for email: " . $email); // Log the error
        return false;
    }

    // Generate a unique token
    $token = bin2hex(random_bytes(32));

    // Store the token in the database associated with the user
    $stmt = $GLOBALS['db']->prepare("UPDATE users SET password_reset_token = ? WHERE email = ?");
    $stmt->execute([$token, $email]);

    // Send the password reset email (you'll need to implement this)
    $reset_link = 'http://yourwebsite.com/reset_password.php?token=' . $token; // Customize this URL
    send_password_reset_email($email, $reset_link);

    return true;
}

/**
 * Sends a password reset email to the user.
 *
 * @param string $email The email address of the user.
 * @param string $reset_link The link to the password reset page.
 */
function send_password_reset_email($email, $reset_link)
{
    $to = $email;
    $subject = 'Password Reset';
    $message = "To reset your password, please click on the following link: " . $reset_link;

    // Replace with your email sending logic (e.g., using PHPMailer or similar)
    // Example using a placeholder for email sending:
    // echo "Email sent (implementation needed here)"; // Replace with actual email sending code
    error_log("Password reset email sent to: " . $email . " with link: " . $reset_link);  // Log the action
}

// Example Usage:
// Replace 'test@example.com' with the user's email address

// Assuming you have a database connection established:
// $db = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);

// Example call to the function
//if (isset($_POST['reset_email'])) {
//    $email = $_POST['reset_email'];
//    if (forgot_password($email)) {
//        echo "Password reset email has been sent to " . $email;
//    } else {
//        echo "Failed to reset password. Please check your email and try again.";
//    }
//}
?>


<?php

// Include your database connection file
require_once 'db_connect.php'; // Assuming you have a db_connect.php file with your database connection details

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user.
 * @return bool True if a password reset email was sent, false otherwise.
 */
function forgot_password($email)
{
  global $db; // Access the database connection

  // Check if the email exists
  $query = "SELECT id, email FROM users WHERE email = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("s", $email);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows > 0) {
    $user_id = $result->fetch_assoc()['id'];
    $reset_token = generate_unique_token();
    $reset_timestamp = time(); // Store the timestamp when the token was generated

    // Hash the token (important for security!)
    $hashed_token = password_hash($reset_token, PASSWORD_DEFAULT);

    // Store the token in the database
    $query = "INSERT INTO password_resets (user_id, token, reset_timestamp) VALUES (?, ?, ?)";
    $stmt = $db->prepare($query);
    $stmt->bind_param("iii", $user_id, $hashed_token, $reset_timestamp);
    $stmt->execute();

    // Send the password reset email
    $to = $email;
    $subject = 'Password Reset';
    $message = "Please click on the following link to reset your password: <a href='" . base_url . '/reset_password?token=" . urlencode($reset_token) . "'>Reset Password</a>";
    $headers = 'From: ' . get_setting('noreply_email') . "\r
"; // Use a noreply email address.  Replace with your actual setting.
    mail($to, $subject, $message, $headers);

    return true; // Password reset email sent successfully
  } else {
    return false; // User not found
  }
}

/**
 * Generates a unique token for password resets.
 *
 * @return string A unique, randomly generated token.
 */
function generate_unique_token()
{
    return bin2hex(random_bytes(32));  // Use bin2hex for a better representation
}



// Example Usage (Illustrative - You'll integrate this with your form)
// $email = $_POST['email']; // Get email from a form submission
// if (isset($email)) {
//   if (forgot_password($email)) {
//     echo "Password reset email has been sent to " . $email;
//   } else {
//     echo "User not found.";
//   }
// } else {
//   echo "Please enter your email address.";
// }
?>


<?php

// Assume you have a database connection established and accessible as $db

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password to set.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $newPassword) {
  // 1. Validate Input (Crucial for security)
  if (empty($email) || empty($newPassword)) {
    error_log("Forgot Password: Empty email or password provided.");
    return false;
  }

  //  You could add more validation here, like checking for valid email format
  //  using filter_var($email, FILTER_VALIDATE_EMAIL)
  //  And possibly length restrictions for the password.


  // 2.  Retrieve the user by email
  $stmt = $db->prepare("SELECT id, email FROM users WHERE email = ?");
  $stmt->bind_param("s", $email); // 's' indicates a string parameter
  $stmt->execute();

  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    error_log("Forgot Password: User with email '$email' not found.");
    return false;
  }

  $user = $result->fetch_assoc();
  $userId = $user['id'];

  // 3. Hash the new password (VERY IMPORTANT - Never store plain text passwords!)
  $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);


  // 4. Update the user's password
  $stmt = $db->prepare("UPDATE users SET password = ? WHERE id = ?");
  $stmt->bind_param("ss", $hashedNewPassword, $userId); // 's' indicates a string parameter
  $stmt->execute();

  if ($stmt->affected_rows == 0) {
    error_log("Forgot Password: Failed to update password for user '$email'.");
    return false;
  }

  // 5.  Optional:  Send a password reset email
  //    (See example email code below)

  // 6. Reset the statement and close the connection (good practice)
  $stmt->close();
  // $db->close();  // Close the database connection here if you're managing it.

  return true;
}



/**
 * Example Email Function (Replace with your email sending logic)
 *
 * This is a placeholder - you'll need to integrate with your email service.
 */
function sendPasswordResetEmail(string $email, string $resetToken) {
  // Implement your email sending logic here using a library like PHPMailer or similar.
  // This is just a placeholder.
  error_log("Sending password reset email to: $email with token: $resetToken"); // Log the action
  // Example using a very basic placeholder:
  $subject = "Password Reset";
  $message = "To reset your password, please visit: http://example.com/reset-password.php?token=$resetToken";
  $headers = "From: noreply@example.com"; // Replace with your actual sender address

  //  You'd typically use a function to actually send the email
  //  e.g., mail($email, $subject, $message, $headers);
}



//  --- Example Usage (FOR TESTING ONLY -  Don't expose this in production!)---
//  This code is for demonstration purposes.  Don't use this directly in a web application.
//  It's intended to show how to call the functions.

/*
$email = "testuser@example.com"; // Replace with a valid test email
$newPassword = "NewSecurePassword123";

if (forgotPassword($email, $newPassword)) {
  echo "Password reset successfully!";
} else {
  echo "Password reset failed.";
}
*/
?>


<?php

// Ensure this is a secure file and protected from direct access.
// This is a simplified example and should be adapted for a production environment.

// 1. Database Connection (Replace with your actual details)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_username';
$db_password = 'your_password';

// 2.  Reset Password Form Handling (POST request)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = trim($_POST['email']);

    // Validation -  Important!  This is a minimal validation.  Improve as needed.
    if (empty($email)) {
        $error = "Please enter your email address.";
    } else {
        //Sanitize email to prevent injection
        $email = filter_var($email, FILTER_SANITIZE_EMAIL);

        // Check if the email exists in the database.  Case-insensitive is better.
        $stmt = $conn->prepare("SELECT id, email FROM users WHERE email = ?");
        $stmt->bind_param("s", $email);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($result->num_rows == 0) {
            $error = "Email address not found.";
        } else {
            // Create a unique token for the reset link
            $reset_token = bin2hex(random_bytes(32));

            // Store the token in the database, associated with the user's email.
            $stmt = $conn->prepare("UPDATE users SET reset_token = ? WHERE email = ?");
            $stmt->bind_param("ss", $reset_token, $email);
            $stmt->execute();

            // Check if the update was successful (you'll likely have more error handling here)
            if ($stmt->affected_rows == 0) {
                $error = "Failed to generate reset token.";
            }

            if ($error) {
                $reset_token = ''; // Clear the token if there's an error
            }
        }
    }
}

// 3.  Generate Reset Link (If requested)
if (isset($_GET['token'])) {
    $token = trim($_GET['token']);

    // Check if the token exists in the database
    $stmt = $conn->prepare("SELECT id, email FROM users WHERE reset_token = ?");
    $stmt->bind_param("s", $token);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 1) {
        $user = $result->fetch_assoc();
        $userId = $user['id'];
        $email = $user['email'];

        // Generate a reset password link
        $reset_link = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $token;
        echo "<p>Click the link above to reset your password.</p>";
        echo "<p>This link will expire in 30 minutes.</p>";
    } else {
        echo "<p>Invalid reset token.</p>";
    }
}

// 4. Form for requesting a password reset
?>

<!DOCTYPE html>
<html>
<head>
    <title>Reset Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <?php if (isset($error)) { ?>
        <p style="color: red;"><?php echo $error; ?></p>
    <?php } ?>

    <form method="post" action="forgot_password.php">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" placeholder="Your email address">
        <button type="submit">Reset Password</button>
    </form>

    <br>
    <a href="login.php">Back to Login</a>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_database_name";

// Function to handle the forgot password process
function forgotPassword($email) {
  // 1. Validate the email address
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if the user exists in the database
  $pdo = new PDO("mysql:host=$host;dbname=$database", $username, $password);
  $stmt = $pdo->prepare("SELECT id, password FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (empty($user)) {
    return "User with this email does not exist.";
  }

  // 3. Generate a unique, random token for the reset link
  $token = bin2hex(random_bytes(32));

  // 4. Hash the token (important for security)
  $hashed_token = password_hash($token, PASSWORD_DEFAULT);

  // 5. Store the token in the database associated with the user
  $stmt = $pdo->prepare("UPDATE users SET reset_token = ?, reset_token_expiry = ? WHERE email = ?");
  $stmt->execute([$hashed_token, time() + 3600, $email]); // Token expires in 1 hour

  // 6.  Send the reset email (Replace with your email sending logic)
  $to = $email;
  $subject = "Password Reset Request";
  $message = "Click on the following link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=" . urlencode($token) . "'>Reset Password</a>";
  $headers = "From: your_email@example.com";  // Replace with your email address
  mail($to, $message, $headers);


  return "Password reset email sent to $email.  Please check your inbox (and spam folder!).";
}

// Example usage:  (Only for testing - usually handled through a form)
// if (isset($_GET['reset'])) {
//   $resetToken = $_GET['reset'];
//   $resetMessage = forgotPassword($resetToken);
//   echo $resetMessage;
// }
//
//  You'd typically handle this through a form submission with a POST request.
//  For example:
//  <form method="post" action="your_script.php">
//    <input type="hidden" name="email" value="user@example.com">
//    <button type="submit">Request Password Reset</button>
//  </form>
?>


<?php

// Assuming you have a database connection established and stored in $db
// (e.g., $db = mysqli_connect("host", "username", "password", "database_name");)

function forgot_password($email, $new_password, $db) {
    // Validate email format (basic check - more robust validation recommended)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // Hash the new password
    $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

    // SQL query to update the password for the given email
    $sql = "UPDATE users SET password = '$hashed_password' WHERE email = '$email'";

    if ($db->query($sql) === TRUE) {
        return "Password reset email sent.  Check your email.";
    } else {
        return "Error resetting password. " . $db->error;
    }
}


// --- Example Usage (Demonstration -  Do not use directly in a live environment!) ---

// Replace with your actual database connection
$db = mysqli_connect("localhost", "your_username", "your_password", "your_database");

if (!$db) {
    die("Connection failed: " . mysqli_connect_error());
}

// Simulate a forgot password request
$email = "test@example.com";  // Replace with a real user's email
$new_password = "NewSecretPassword123";

$result = forgot_password($email, $new_password, $db);

echo $result;  // Output: Password reset email sent.  Check your email.
// --- End Example Usage ---
?>


<?php

// Assuming you have a database connection established (e.g., $db)
// This is a simplified example and should be adapted to your specific setup.
// Consider security implications and using prepared statements.

function forgotPassword($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32)); // Stronger than md5
  // Store the token and user ID in the database
  // (You'll need to adapt this to your database schema)
  // Example using a hypothetical 'users' table and 'reset_tokens' table:

  // $sql = "INSERT INTO reset_tokens (user_id, token, expires_at) 
  //         VALUES (?, ?, NOW())";
  // $stmt = $db->prepare($sql);
  // $stmt->bind_param("s", $user_id, $token); 
  // $stmt->execute();
  // $stmt->close();


  // 3. Send an email with a reset link
  $to = $email;
  $subject = "Password Reset Request";
  $message = "Please click on the following link to reset your password: " .
             "<a href='" . $_SERVER['PHP_SELF'] . "?reset_token=$token'>Reset Password</a>";
  $headers = "From: yourwebsite@example.com"; // Replace with your email address

  if (mail($to, $subject, $message, $headers)) {
    return true; // Reset link sent successfully
  } else {
    return "Failed to send reset email.";
  }
}



// Example usage (for testing -  DO NOT directly use this in production without proper security)
// $email = "test@example.com";
// $result = forgotPassword($email);
// echo $result; // Output:  "Reset link sent successfully"  or "Failed to send reset email"
?>


<?php

// Database connection details - Replace with your actual values
$host = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Function to handle password reset
function forgotPassword($email) {
    // 1. Generate a unique, secure token
    $token = bin2hex(random_bytes(32));

    // 2. Create a temporary password reset link
    $resetLink = "/reset_password.php?token=" . $token . "&email=" . urlencode($email);

    // 3.  Prepare the SQL query
    $query = "INSERT INTO password_resets (email, token, expires) VALUES ('" . $email . "', '" . $token . "', NOW() + INTERVAL 1 HOUR)"; 

    // 4.  Database connection
    $conn = new mysqli($host, $username, $password, $dbname);

    // 5. Check for connection errors
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    // 6. Execute the query
    if ($conn->query($query) === TRUE) {
        // 7. Send email (Implementation needed - See below for an example)
        sendResetPasswordEmail($email, $resetLink);
        echo "Password reset email sent to " . $email;
    } else {
        echo "Error creating password reset link: " . $conn->error;
    }

    // 8. Close the connection
    $conn->close();
}


// Function to send the password reset email (Placeholder - Replace with your actual email sending logic)
function sendResetPasswordEmail($email, $resetLink) {
    // This is a placeholder.  You'll need to replace this with your email sending code.
    // This example just prints the email link to the console.

    // In a real application, you'd use a library like PHPMailer or SwiftMailer
    // to send the email.  Make sure you configure your email settings correctly.

    echo "<br>Password reset link: <a href='" . $resetLink . "'>Click here to reset your password</a>";
}

// Example usage:  (Call this function with the user's email address)
// You'd typically get the email from a form submission.

// Example - For demonstration purposes ONLY.  Do NOT use this in a production environment!
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    if (!empty($email)) {
        forgotPassword($email);
    } else {
        echo "Please enter your email address.";
    }
}


?>


<?php

// Database connection details (replace with your actual values)
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$database = 'your_database_name';

// Function to reset password
function forgotPassword($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false; // Invalid email format
  }

  // 2.  Check if user exists
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    error_log("Failed to connect to database: " . $conn->connect_error); // Log the error
    return false;
  }

  // Example Query: Get user by email (adapt to your schema)
  $query = "SELECT id, username FROM users WHERE email = '$email'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $username = $user['username'];

    // 3. Generate a Unique Token (for security)
    $token = bin2hex(random_bytes(32)); // Generate a cryptographically secure random string

    // 4. Store Token in Database
    $insertQuery = "INSERT INTO password_resets (user_id, token, expires_at) VALUES ($userId, '$token', NOW() + INTERVAL 7 DAY)"; // Token expires after 7 days
    if (!$conn->query($insertQuery)) {
      error_log("Failed to insert token: " . $conn->error);
      return false;
    }

    // 5.  Send Password Reset Email (See below for email code)
    sendResetEmail($email, $token);

    return true;
  } else {
    return false; // User not found
  }

  $conn->close();
}

// Function to send password reset email
function sendResetEmail($email, $token) {
  //  Replace with your email sending details (e.g., SMTP configuration)
  $to = $email;
  $subject = 'Password Reset';
  $message = "Click on the following link to reset your password: " . '<a href="' . $_SERVER['PHP_SELF'] . '?token=' . $token . '" >Reset Password</a>';
  $headers = 'From: your_email@example.com' . "\r
";

  if (mail($to, $subject, $message, $headers)) {
    return true;
  } else {
    error_log("Failed to send email.");
    return false;
  }
}

// Example Usage (Demonstration - DO NOT USE IN PRODUCTION without proper validation and security)
// $email = 'test@example.com';
// if (forgotPassword($email)) {
//   echo "Password reset email has been sent to $email.";
// } else {
//   echo "Failed to reset password. Please check your email or try again.";
// }

?>


<?php

// Assuming you have a database connection established (e.g., $db)
// This example uses a simplified database for demonstration.  
// In a real application, you'll likely use a proper database library and 
// sanitize and validate user input thoroughly.

// Example database credentials (replace with your actual credentials)
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_username";
$db_password = "your_password";

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return string A message indicating the success or failure of the operation.
 */
function forgotPassword(string $email): string
{
    // 1. Validate Input (Essential for security)
    if (empty($email)) {
        return "Error: Email address is required.";
    }

    // In a real application, you'd likely verify that the email exists in your system.
    // This is a simplified example that assumes the email exists.

    // 2. Generate a Unique Token (for security)
    $token = bin2hex(random_bytes(32)); // Use random_bytes for security

    // 3. Create a Reset Token Record (Simulated Database Operation)
    // In a real implementation, you'd use a database query.
    // This simulates creating a record in a table like 'reset_tokens'.
    // This table should have columns like: id, email, token, expiry_time
    $reset_token = [
        'id' => 1, // Unique ID (generated by your system)
        'email' => $email,
        'token' => $token,
        'expiry_time' => time() + 3600 // Expires in 1 hour
    ];

    // 4. Send an Email with a Reset Link
    $to = $email;
    $subject = "Password Reset Request";
    $message = "Please click the following link to reset your password: " . $_SERVER['REQUEST_SCHEME'] . "://yourdomain.com/reset_password?token=" . $token;
    $headers = "From: your_email@example.com";

    mail($to, $message, $headers); 

    return "Password reset link has been sent to your email address.";
}


// Example Usage:
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];  // Get email from form

    if (filter_input(INPUT_POST, "email", FILTER_SANITIZE_EMAIL)) { //Sanitize input - VERY IMPORTANT!
        $result = forgotPassword($email);
        echo $result;
    } else {
        echo "Invalid email format.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="">
        <label for="email">Email Address:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// This file assumes you have a database connection established and a `users` table
// with a `password` column.  You'll need to adapt this to your specific setup.

// Database credentials -  IMPORTANT: NEVER HARDCODE THIS IN A PRODUCTION ENVIRONMENT
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_pass = 'your_database_password';

/**
 * Forgets a user's password by sending a reset password link.
 *
 * @param string $email The user's email address.
 * @return bool True if a reset link was successfully generated and sent, false otherwise.
 */
function forgotPassword(string $email) {
  // 1. Validate the email address.  This is crucial for security.
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email address provided for password reset: " . $email); // Log for debugging
    return false;
  }

  // 2. Generate a unique, time-based token.  Important for security.
  $token = bin2hex(random_bytes(32)); // Use random_bytes for strong randomness

  // 3. Hash the token (optional but HIGHLY recommended for security).
  $hashed_token = password_hash($token, PASSWORD_DEFAULT);

  // 4.  Store the token and user ID in the database.  Use prepared statements to prevent SQL injection.
  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exceptions for better error handling
  } catch (PDOException $e) {
    error_log("Database connection error: " . $e->getMessage());
    return false;
  }

  $stmt = $pdo->prepare("INSERT INTO password_resets (user_id, token, expires_at) VALUES (:user_id, :token, :expires_at)");
  $stmt->bindParam(':user_id', $user_id); // Replace $user_id with the actual user ID from your system.
  $stmt->bindParam(':token', $token);
  $stmt->bindParam(':expires_at', date('Y-m-d H:i:s', time() + (2 * 24 * 60 * 60))); // Token expires in 2 days

  if ($stmt->execute()) {
    // 5. Send the password reset email
    $to = $email;
    $subject = 'Password Reset';
    $message = "Please click the following link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=" . urlencode($token) . "'>Reset Password</a>";
    $headers = "From: your_email@example.com";

    if (mail($to, $subject, $message, $headers)) {
      return true;
    } else {
      // Email failed to send, delete the entry from the database
      $pdo->prepare("DELETE FROM password_resets WHERE token = :token AND user_id = :user_id")->execute();
      error_log("Email failed to send for token: " . $token);
      return false;
    }
  } else {
    error_log("Error inserting reset token into the database: " . $e->getMessage());
    return false;
  }
}


// Example Usage (This would be called from a form submission)
// Assuming you have a form that collects the email address
/*
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  if (forgotPassword($email)) {
    echo "Password reset email has been sent to $email.";
  } else {
    echo "Failed to generate password reset link.";
  }
}
*/


?>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Function to handle password reset
function forgot_password($email) {
    // 1. Check if the email exists in the user table
    $conn = new mysqli($host, $username, $password, $database);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $sql = "SELECT id, email FROM users WHERE email = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $email); // "s" for string
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        $conn->close();
        return false; // Email not found
    }

    $user = $result->fetch_assoc();
    $user_id = $user['id'];
    $user_email = $user['email'];
    $stmt->close();

    // 2. Generate a unique token
    $token = bin2hex(random_bytes(32)); // Generates a cryptographically secure random string

    // 3. Prepare the reset link
    $reset_link = "http://yourdomain.com/reset_password?token=$token&user_id=$user_id";

    // 4. Store the token and user ID in the database (temporary)
    $sql = "INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, NOW())";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("sss", $user_id, $token, $conn->insert_id); // 's' for string, insert_id for NOW()
    $stmt->execute();
    $stmt->close();

    // 5. Send the reset email
    $to = $email;
    $subject = "Password Reset";
    $message = "Click the link below to reset your password: " . $reset_link;
    $headers = "From: your_email@example.com\r
";

    if (mail($to, $subject, $message, $headers)) {
        return true; // Reset email sent successfully
    } else {
        // Handle email sending failure (e.g., log it)
        return false;
    }
}


// Example Usage (For demonstration purposes -  you'd typically handle this from a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    if (!empty($email)) {
        if (forgot_password($email)) {
            echo "Reset link has been sent to your email address.";
        } else {
            echo "Failed to send reset link. Please try again.";
        }
    } else {
        echo "Please enter your email address.";
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Assume you have a database connection established (e.g., $db)
// and a user table with an 'email' and 'password' column.

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset link was generated and sent, false otherwise.
 */
function forgotPassword(string $email) {
  // 1. Validate Email (Important for security)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email format provided: " . $email);  // Log for debugging
    return false;
  }


  // 2. Check if the user exists
  $user = getUserByEmail($email);  // Assuming you have a function to fetch user data
  if (!$user) {
    error_log("User with email " . $email . " not found."); // Log for debugging
    return false;
  }

  // 3. Generate a unique token (using a secure method)
  $token = generateUniqueToken();

  // 4. Store the token and expiry date in the database
  //  (Important:  Don't store the *password* itself in the database!)
  $result = storeToken($user['id'], $token, time() + (120 * 60)); // Token expiry: 2 hours (120 minutes)

  if (!$result) {
    error_log("Failed to store token for user " . $email);
    return false;
  }



  // 5. Generate the reset link
  $resetLink = generateResetLink($user['email'], $token);

  // 6. Send the reset link (e.g., via email)
  if (!sendEmail($user['email'], "Password Reset", $resetLink)) {
    // Handle email sending failure (e.g., retry, log error)
    error_log("Failed to send password reset email to " . $email);
    // You might want to delete the token if email sending fails.  For example:
    // deleteToken($user['id'], $token);
    return false;
  }


  return true;
}


// --- Helper Functions (Implement these based on your database and email setup) ---

/**
 * Fetches a user's data by email.
 *
 * @param string $email The user's email address.
 * @return array|null An array containing user data, or null if not found.
 */
function getUserByEmail(string $email) {
  // Replace this with your database query
  // This is just a placeholder
  $userData = [
    'id' => 123, // Example user ID
    'email' => $email,
    // Add other user fields here if needed
  ];
  return $userData;
}



/**
 * Generates a unique token.
 * Use a more robust method than a simple timestamp for security.
 *  Consider using a library for generating cryptographically secure random strings.
 *
 * @return string A unique token.
 */
function generateUniqueToken() {
  return bin2hex(random_bytes(32)); // Example:  Use random_bytes for more secure randomness
}


/**
 * Stores the token and expiry date in the database.
 *
 * @param int $userId The user's ID.
 * @param string $token The token.
 * @param int $expiryTime The expiry time (Unix timestamp).
 * @return bool True if the token was stored successfully, false otherwise.
 */
function storeToken(int $userId, string $token, int $expiryTime) {
  // Replace this with your database update query
  // Example:
  $sql = "UPDATE users SET password_reset_token = '$token', password_reset_expiry = '$expiryTime' WHERE id = $userId";
  // Example using mysqli
  // $result = mysqli_query($db, $sql);

  // Or with PDO:
  // $stmt = $db->prepare($sql);
  // $stmt->execute();

  return true; //  Replace with your actual database result check
}

/**
 * Deletes a token from the database.  Useful if email sending fails.
 *
 * @param int $userId The user's ID.
 * @param string $token The token.
 * @return bool True if the token was deleted successfully, false otherwise.
 */
function deleteToken(int $userId, string $token) {
   // Replace this with your database query
  // Example using mysqli
  // $sql = "DELETE FROM users WHERE id = $userId AND password_reset_token = '$token'";
  // $result = mysqli_query($db, $sql);

    // Or with PDO:
   // $stmt = $db->prepare($sql);
   // $stmt->execute();

   return true;  // Replace with your actual database result check
}


/**
 * Generates the password reset link.
 *
 * @param string $email The user's email address.
 * @param string $token The token.
 * @return string The generated reset link.
 */
function generateResetLink(string $email, string $token) {
  return "https://example.com/reset-password?token=" . $token . "&email=" . $email;
}



/**
 * Sends the password reset email.
 *
 * @param string $to The recipient's email address.
 * @param string $subject The email subject.
 * @param string $body The email body.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function sendEmail(string $to, string $subject, string $body) {
  // Replace this with your email sending logic (e.g., using PHPMailer)
  // This is just a placeholder
  // Example using PHPMailer (you'll need to install it: composer require phpmailer/phpmailer)
  // $mail = new PHPMailer(true);
  // $mail->SetFrom('noreply@example.com', 'Example Website');
  // $mail->AddAddress($to);
  // $mail->Subject = $subject;
  // $mail->Body = $body;
  // $mail->IsSMTP();
  // $mail->SMTPDebugEnable(true);
  // $mail->Send();
  // return true;

  // Placeholder:  Return false for now to simulate failure
  return false;
}



// --- Example Usage ---
// $email = 'user@example.com';
// if (forgotPassword($email)) {
//   echo "Password reset email sent to " . $email;
// } else {
//   echo "Failed to generate password reset link.";
// }
?>


<?php

// Assuming you have a database connection established and a 'users' table
// with a 'password' column.  You'll need to adapt this to your setup.

// Database credentials (replace with your actual credentials)
$host = 'localhost';
$username = 'your_db_user';
$password = 'your_db_password';
$database = 'your_db_name';

// Function to reset password
function forgotPassword($email, $password_reset_token, $expiration_time_minutes = 60) {
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return false; // Invalid email format
    }

    // 2. Generate a Token
    $token = bin2hex(random_bytes(32));  // Generate a strong, random token

    // 3.  Hash the Token (Important for security!)
    $hashed_token = password_hash($token, PASSWORD_DEFAULT);

    // 4. Store the Token and Expiration Time in the database.
    //  Replace this with your actual database query
    try {
        // Example using mysqli (adapt for your database library)
        $conn = new mysqli($host, $username, $password, $database);

        if ($conn->connect_error) {
            throw new Exception("Connection failed: " . $conn->connect_error);
        }

        // Prepare the SQL statement
        $sql = "INSERT INTO password_resets (email, token, expiration_time)
                VALUES (?, ?, ?)";

        $stmt = $conn->prepare($sql);
        $stmt->bind_param("sii", $email, $hashed_token, time() + $expiration_time_minutes);
        $stmt->execute();

        $stmt->close();

    } catch (Exception $e) {
        // Handle database errors - log them, display a generic error, etc.
        error_log("Database error: " . $e->getMessage());
        return false; // Indicate failure
    }

    // 5.  Return success (true) and the token for display to the user.
    return ['success' => true, 'token' => $token];
}

// Example Usage (demonstration)
// Assuming you have a form that collects the email address.
// This is a simplified example; in a real application, you'd handle form submission securely.

// Simulate receiving an email address
$email = 'testuser@example.com';

// Call the forgotPassword function
$result = forgotPassword($email);

if ($result['success']) {
    echo "<p>Password reset link sent to " . $email . " successfully.</p>";
    echo "<p>Click the link in the email to set a new password.</p>";
} else {
    echo "<p>Failed to generate password reset token.</p>";
    //  You might log the error here for debugging.
}


// --------------------------------------------------------------------
//  Important Considerations & Next Steps:
// --------------------------------------------------------------------
// 1.  Security:
//    -  Password Hashing:  Never store passwords in plain text.  Always use a strong hashing algorithm like `password_hash()` with a suitable cost factor (PASSWORD_DEFAULT).
//    -  Token Generation: Use `random_bytes()` to generate cryptographically secure random tokens.
//    -  HTTPS:  Always serve your website over HTTPS to encrypt the communication and protect user data during transmission.
//    -  Rate Limiting: Implement rate limiting to prevent brute-force attacks.
//    -  Input Validation and Sanitization:  Thoroughly validate and sanitize all user input to prevent SQL injection and other vulnerabilities.
//
// 2.  Database Integration:  Replace the placeholder database code with your actual database connection and query logic.
// 3.  Email Sending:  You'll need to integrate with an email service (e.g., PHPMailer, SwiftMailer, or a third-party email API) to send the password reset email.  *Don't* use a simple `mail()` function, as it is not reliable and can be easily blocked.
// 4.  Token Validation:  In your `forgot_password_confirm` function (which you'll need to create to handle the user's confirmation), you'll need to:
//    -  Verify that the token exists in the database.
//    -  Check if the token has expired (i.e., the `expiration_time` is in the past).
//    -  Hash the token received from the user and compare it to the hashed token in the database.
//    -  If all checks pass, allow the user to set a new password.
//
// 5.  Error Handling:  Implement robust error handling and logging to identify and address issues.
// 6.  User Experience: Provide clear and helpful instructions to the user.

?>


<?php

/**
 * Forgets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password to set.
 * @param string $dbHost The database host.
 * @param string $dbName The database name.
 * @param string $dbUsername The database username.
 * @param string $dbPassword The database password.
 *
 * @return bool True if the password was reset successfully, false otherwise.
 */
function forgotPassword(string $email, string $newPassword, string $dbHost, string $dbName, string $dbUsername, string $dbPassword) {
    try {
        // Connect to the database
        $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName;charset=utf8", $dbUsername, $dbPassword);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERR_SILENT); // Suppress errors

        // Hash the new password
        $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

        // Update the user's password in the database
        $stmt = $pdo->prepare("UPDATE users SET password = :password WHERE email = :email");
        $stmt->bindParam(':password', $hashedNewPassword);
        $stmt->bindParam(':email', $email);
        $stmt->execute();

        if ($stmt->rowCount() > 0) {
            return true; // Password reset successful
        } else {
            return false; // No user found with that email
        }

    } catch (PDOException $e) {
        // Handle database errors (important for debugging and security)
        error_log("Database error: " . $e->getMessage()); // Log the error
        return false; // Indicate failure
    }
}


// Example Usage (Remember to replace with your actual database details)
//  This is just an example, and should *not* be used in a production environment
//  without proper security measures and validation.
/*
$email = "test@example.com";
$newPassword = "NewPassword123!";

$dbHost = "localhost";
$dbName = "your_database_name";
$dbUsername = "your_username";
$dbPassword = "your_password";

if (forgotPassword($email, $newPassword, $dbHost, $dbName, $dbUsername, $dbPassword)) {
    echo "Password reset email sent successfully.  Check the user's email.";
} else {
    echo "Failed to reset password.  Check the user's email and database connection.";
}
*/

?>


<?php

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Function to reset password
function forgotPassword($email, $newPassword) {
  // 1. Database Connection
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    // Handle connection error
    die("Connection failed: " . $conn->connect_error);
  }

  // 2. Check if email exists
  $query = "SELECT id FROM users WHERE email = '{$email}'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    // Email exists, proceed with password reset
    $userId = $result->fetch_assoc()['id'];

    // 3. Generate a unique token (for security)
    $token = bin2hex(random_bytes(32)); // Generate a 32-byte random binary string and convert it to a hex string.

    // 4. Update the password and add the token to the database
    $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);  // Hash the new password

    $query = "UPDATE users SET password = '{$hashedNewPassword}', reset_token = '{$token}' WHERE id = {$userId}";

    if ($conn->query($query) === TRUE) {
      // Password reset successful
      // Send an email with the token and instructions
      // (Implement email sending logic here - see example below)
      echo "Password reset successful. Please check your email for instructions.";
    } else {
      // Handle error
      echo "Error resetting password. " . $conn->error;
    }
  } else {
    // Email doesn't exist
    echo "Email not found.";
  }

  $conn->close();
}


// Example usage (from a form submission - DO NOT put this directly in your HTML)
// Assume the user entered the email and the new password from a form.

//Check if the form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $newPassword = $_POST["new_password"];

  forgotPassword($email, $newPassword);
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="new_password">New Password:</label>
    <input type="password" id="new_password" name="new_password" required><br><br>

    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_username';
$db_password = 'your_password';

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @return bool True if password reset initiated successfully, false otherwise.
 */
function forgot_password($email)
{
    // Validate email format
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided."); //Log for debugging
        return false;
    }

    // 1. Generate a unique, time-based token.  This is CRUCIAL for security.
    $token = bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator

    // 2. Hash the token.
    $hashed_token = password_hash($token, PASSWORD_DEFAULT);

    // 3. Store the hashed token in the database, associated with the user's email.
    $query = "INSERT INTO password_resets (email, token, created_at) 
              VALUES ('$email', '$hashed_token', NOW())";

    if (!$result = mysqli_query($GLOBALS['db_host'], $query)) {
        error_log("Error inserting password reset token: " . mysqli_error($GLOBALS['db_host']));  //Log error for debugging
        return false;
    }
    
    // 4. Send an email to the user containing a link with the token.
    $to = $email;
    $subject = 'Password Reset Request';
    $message = "Please click the following link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=" . urlencode($token) . "'>Reset Password</a>";
    $headers = "From: your_email@example.com"; // Replace with your sender email

    if (mail($to, $subject, $message, $headers)) {
        return true;
    } else {
        error_log("Error sending email for password reset.");  // Log for debugging
        return false;
    }
}


// Example Usage:
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    if (empty($email)) {
        echo "Error: Please enter your email address.";
    } else {
        if (forgot_password($email)) {
            echo "Password reset link has been sent to your email address.";
        } else {
            echo "Error: Failed to initiate password reset.";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post">
        <label for="email">Enter your email address:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

/**
 * Function to handle password reset requests.
 *
 * This function generates a unique token, emails the user with a reset link,
 * and stores the token in the database.
 *
 * @param string $email The email address of the user.
 * @return bool True if the reset link was generated and sent, false otherwise.
 */
function forgot_password(string $email): bool
{
    // 1. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // Use a strong random byte generator

    // 2. Prepare the Reset Data
    $reset_data = [
        'email' => $email,
        'token' => $token,
        'expiry' => time() + 3600 // Token expires in 1 hour (3600 seconds)
    ];

    // 3. Store the Reset Data in the Database
    // Assuming you have a database connection established as $db
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password"); // Replace with your database details
    try {
        $stmt = $db->prepare("INSERT INTO password_resets (email, token, expiry) VALUES (?, ?, ?)");
        $stmt->execute([$email, $token, $expiry]);
    } catch (PDOException $e) {
        error_log("Error creating password reset entry: " . $e->getMessage());
        // Handle database errors appropriately (e.g., log the error, display a generic error message to the user)
        return false;
    }

    // 4. Send the Reset Email
    $subject = "Password Reset Request";
    $headers = "From: your_email@example.com"; // Replace with your email address
    $message = "Click on the following link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . "?reset=" . $token . "'>Reset Password</a>";

    if (mail($email, $subject, $message, $headers)) {
        return true;
    } else {
        error_log("Failed to send password reset email to " . $email);
        // Handle email sending failures appropriately (e.g., log the error, display a generic error message to the user)
        return false;
    }
}

// Example Usage (for testing - don't put this in your actual application)
// $email = "test@example.com"; // Replace with a valid email address
// if (forgot_password($email)) {
//     echo "Password reset email sent to " . $email . ". Please check their inbox.";
// } else {
//     echo "Failed to generate password reset link.";
// }

?>


<?php

// Assuming you have a database connection established
// For example:
// $db = new mysqli("localhost", "username", "password", "database_name");
// if (!$db) {
//     die("Connection failed.");
// }

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email) {
  // Sanitize the email address (important for security!)
  $email = filter_var($email, FILTER_SANITIZE_EMAIL);

  // Validate email format
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false;
  }

  // 1.  Check if the email exists in the database.
  //     Use a prepared statement to prevent SQL injection!
  $stmt = $db->prepare("SELECT id, password_reset_token FROM users WHERE email = ?");
  $stmt->bind_param("s", $email);
  $stmt->execute();

  // Check if the query was successful
  if ($stmt->errno) {
    error_log("Error executing query: " . $stmt->error);  // Log the error for debugging
    $stmt->close();
    return false;
  }

  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    $stmt->close();
    return false; // Email not found
  }

  $user = $result->fetch_assoc();
  $stmt->close();

  // 2. Generate a unique, secure, and temporary password reset token.
  $resetToken = bin2hex(random_bytes(32));  // Use a cryptographically secure random number generator

  // 3.  Generate a password reset link with the token.
  $resetLink = "http://yourdomain.com/reset-password?token=" . $resetToken;

  // 4.  Update the user's record with the token.
  $stmt = $db->prepare("UPDATE users SET password_reset_token = ? WHERE email = ?");
  $stmt->bind_param("ss", $resetToken, $email);
  $result = $stmt->execute();

  if ($stmt->errno) {
    error_log("Error updating user: " . $stmt->error);
    $stmt->close();
    return false;
  }

  // 5.  Send an email to the user with the reset link.
  //  (Implement email sending logic here - using PHPMailer or similar)
  $subject = "Password Reset Link";
  $message = "Click the following link to reset your password: " . $resetLink;
  $headers = "From: your_email@example.com\r
";
  // sendmail_path($message, $headers); // Using sendmail_path  (ensure sendmail_path is defined and accessible)
  // Alternative email sending using PHPMailer:
  // require_once 'vendor/PHPMailer/PHPMailer.php';
  // $mail = new PHPMailer(true);
  // $mail->isSMTP();
  // $mail->Host = 'smtp.example.com';
  // $mail->Port = 587;
  // $mail->Username = 'your_email@example.com';
  // $mail->Password = 'your_password';
  // $mail->SetFrom('your_email@example.com', 'Your Application');
  // $mail->Subject = $subject;
  // $mail->Body = $message;
  // $mail->AltBody = $message;  // For non-HTML email clients
  // $mail->send();


  return true; // Success!
}

// Example usage:
$email = "test@example.com"; // Replace with the user's email

if (forgotPassword($email)) {
  echo "Password reset email sent to " . $email . ". Please check their inbox.";
} else {
  echo "Failed to generate password reset link for " . $email . ".";
}

?>


<?php

/**
 * Forgot Password Function
 *
 * This function generates a unique token and sends an email with a password reset link.
 *
 * @param string $email The email address to send the password reset link to.
 * @param string $baseUrl The base URL of your website.  This is used to construct the reset link.
 * @return bool True on success, false on failure (e.g., email sending failure)
 */
function forgot_password(string $email, string $baseUrl): bool
{
    // 1. Generate a Unique Token
    $token = bin2hex(random_bytes(32));

    // 2.  Prepare the Reset Link
    $reset_link = $baseUrl . "/reset-password?token=" . urlencode($token);


    // 3.  Store the Token (Using a Database - Example)
    //    This is a simplified example.  In a real application, you'd
    //    use a proper database and consider security best practices.

    // Assume a `users` table with `email` and `password` columns.
    // This is purely illustrative.

    // **IMPORTANT:**  Do *not* store the password in plaintext.
    //  Use password hashing (e.g., bcrypt, Argon2) for secure password storage.

    // Example database connection (replace with your actual connection details)
    // This is just a placeholder.  Error handling is omitted for brevity.
    $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');

    try {
        // Check if the user exists
        $stmt = $db->prepare("SELECT id FROM users WHERE email = ?");
        $stmt->execute([$email]);
        $user = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$user) {
            // User does not exist.  You might log this for debugging.
            return false;
        }


        //  Update the user's record with the token (use prepared statements!)
        $stmt = $db->prepare("UPDATE users SET reset_token = ?, reset_token_expiry = ? WHERE email = ?");
        $stmt->execute([$token, time() + 3600, $email]); // Expire token after 1 hour
    } catch (PDOException $e) {
        // Handle database errors.  Log them for debugging.
        error_log("Database error: " . $e->getMessage());
        return false;
    }



    // 4. Send the Email
    $to = $email;
    $subject = 'Password Reset';
    $message = "Please click the link below to reset your password:
" . $reset_link . "

This link will expire in 1 hour.";
    $headers = "From: your_website@example.com\r
"; // Replace with your actual email address

    if (mail($to, $subject, $message, $headers)) {
        return true;
    } else {
        // Handle email sending failure.  Log it for debugging.
        error_log("Email sending failed for user: " . $email);
        return false;
    }
}



/**
 * Example Usage (Illustrative - you'll need to integrate this with your form)
 */
// Simulate a user's email
$user_email = 'testuser@example.com';

if (forgot_password($user_email, 'http://localhost/your_website')) {
    echo "Password reset email sent to " . $user_email;
} else {
    echo "Failed to send password reset email to " . $user_email;
}

?>


<?php

// This is a simplified example and should be adapted for production use.
// This includes security considerations and more robust error handling.

// Database connection (Replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_pass = 'your_database_password';

// Check if the request is a password reset request
if (isset($_POST['email']) && isset($_POST['reset_token'])) {
    $email = filter_var($_POST['email'], FILTER_SANITIZE_EMAIL); // Sanitize email
    $reset_token = filter_var($_POST['reset_token'], FILTER_SANITIZE_STRING); // Sanitize token

    // 1. Check if the email exists in the database
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $sql = "SELECT id, email FROM users WHERE email = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $email); // 's' indicates a string parameter
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        $conn->close();
        echo json_encode(['success' => false, 'message' => 'Email not found']);
        exit;
    } else {
        // 2. Check if the reset token exists for this email
        $user_id = $result->fetch_assoc()['id'];  // Get user ID from the result

        // You'd typically store the reset token in the database associated with the user record
        // For this example, we'll assume the token is stored in a table called 'reset_tokens'
        // (You'll need to create this table)
        $reset_token_sql = "SELECT id, user_id, token, expiry FROM reset_tokens WHERE user_id = ? AND token = ?";

        $reset_stmt = $conn->prepare($reset_token_sql);
        $reset_stmt->bind_param("is", $user_id, $reset_token);
        $reset_stmt->execute();

        $reset_result = $reset_stmt->get_result();

        if ($reset_result->num_rows == 0) {
            $reset_stmt->close();
            $conn->close();
            echo json_encode(['success' => false, 'message' => 'Invalid reset token']);
            exit;
        } else {
            // 3. Token is valid and email exists - Reset the password

            // In a real application, you would set the password in the user table.
            // Here, we'll just simulate a password reset.
            $result_stmt->close(); // Close the original statement
            $conn->close();

            echo json_encode(['success' => true, 'message' => 'Password reset successful.  Check your email.']);
        }
    }
} else {
    // Invalid request
    echo json_encode(['success' => false, 'message' => 'Invalid request']);
}

?>


<?php

// Database connection (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database_name";

// Set error reporting to display errors
error_reporting(E_ALL);
ini_set('display_errors', 1);

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if password reset email sent, false otherwise.
 */
function forgotPassword($email)
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log invalid emails
        return false;
    }

    // 2. Check if User Exists
    $pdo = new PDO("mysql:host=$host;dbname=$database", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERR_EXCEPTION); // For better error handling

    try {
        $stmt = $pdo->prepare("SELECT id, email FROM users WHERE email = ?");
        $stmt->execute([$email]);
        $user = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$user) {
            error_log("User not found with email: " . $email); // Log user not found
            return false;
        }
    } catch (PDOException $e) {
        error_log("PDO Error: " . $e->getMessage()); // Log PDO errors
        return false;
    }

    // 3. Generate a Unique Token & Store it
    $token = bin2hex(random_bytes(32)); // Use bin2hex for security
    $token_hashed = password_hash($token, PASSWORD_DEFAULT);

    try {
        $stmt = $pdo->prepare("UPDATE users SET reset_token = ?, reset_token_expiry = ? WHERE email = ?");
        $stmt->execute([$token_hashed, time() + 3600, $email]); // Store token, expiry (1 hour)
    } catch (PDOException $e) {
        error_log("PDO Error updating user: " . $e->getMessage()); // Log PDO errors
        return false;
    }


    // 4.  Send Password Reset Email
    $to = $email;
    $subject = "Password Reset Request";
    $message = "Please use the following link to reset your password:
" .
               "<a href='" . $_SERVER['PHP_SELF'] . "?reset=" . urlencode($token) . "'>Reset Password</a>";  // Use $_SERVER['PHP_SELF']
    $headers = "From: your_email@example.com"; // Replace with your email

    if (mail($to, $subject, $message, $headers)) {
        return true;
    } else {
        // Handle email sending failure (log, etc.)
        error_log("Failed to send email for password reset to: " . $email);
        return false;
    }
}

// Example Usage (Simulated - this would come from a form submission)
if (isset($_GET['reset'])) {
    $resetToken = $_GET['reset'];
    $resetResult = forgotPassword($resetToken);

    if ($resetResult) {
        echo "Password reset email sent to " . $resetToken . ". Please check your inbox.";
    } else {
        echo "An error occurred while processing your password reset request. Please try again.";
    }
}
?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique, time-based token and emails a password reset
 * link to the user's email address.
 *
 * @param string $email The user's email address.
 * @param string $baseUrl The base URL of your application.  This is crucial for generating correct reset links.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $baseUrl): bool
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided."); // Log the error for debugging
        return false;
    }

    // 2. Generate a Unique Token (Time-Based)
    $token = bin2hex(random_bytes(32));  // Secure random bytes for token
    $expiry = time() + (2 * 60 * 60);  // Token expires in 2 hours

    // 3. Hash the token and email for security.
    $hashed_token = hash('sha256', $token . $email);


    // 4. Prepare the Reset Link
    $resetLink = $baseUrl . "/reset-password?token=" . urlencode($hashed_token);

    // 5. Store the Token (Temporary - This is critical for security.  Consider a better strategy for long-term storage).
    //    This example uses a simple file, but a database or a more robust temporary storage solution is highly recommended.
    $filename = "reset_tokens_" . date("Ymd") . ".txt"; // Daily file to avoid long-term storage
    $token_data = [
        'token' => $token,
        'expiry' => $expiry,
        'hashed_token' => $hashed_token
    ];

    // Check if the file exists, if not create it.
    if (!file_exists($filename)) {
        if (!file_put_contents($filename, json_encode($token_data))) {
            error_log("Failed to write reset token to file: " . $filename);
            return false;
        }
    } else {
        // If the file exists, add the new token to it
        if (!file_put_contents($filename, json_encode([
            'token' => $token,
            'expiry' => $expiry,
            'hashed_token' => $hashed_token
        ]) . PHP_EOL, FILE_APPEND)) {
            error_log("Failed to append reset token to file: " . $filename);
            return false;
        }
    }


    // 6. Send the Password Reset Email
    $subject = "Password Reset Request";
    $message = "You requested a password reset.  Click the link below to reset your password: " . $resetLink;
    $headers = "From: " . 'YourAppName@example.com' . "\r
"; // Replace with your actual email address
    
    if (mail($email, $subject, $message, $headers)) {
        return true;
    } else {
        error_log("Failed to send password reset email to " . $email);
        // Optionally, delete the token if email fails (Important security measure!)
        // removeToken($token); // Implement this function to remove the token
        return false;
    }
}


/**
 *  Example function to remove the token - IMPORTANT for security.
 *  This should be called if the email fails or if a token is found to be compromised.
 *  Implement this function and use it!
 */
function removeToken(string $token) {
    //  Ideally, this would delete the token from your storage (file, database, etc.)
    //  For this example, we'll just log a message.  This is NOT sufficient in a real application.
    error_log("Removing token: " . $token);
}
?>


<?php

// Assuming you have a database connection established and a 'users' table
// with a 'email' column.

function forgotPassword($email) {
  // 1. Validate Input
  if (empty($email)) {
    return "Please enter your email address.";
  }

  // 2. Check if the email exists in the database.  Crucially, sanitize the input!
  $db = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
  $stmt = $db->prepare("SELECT id, email FROM users WHERE email = :email");
  $stmt->bindParam(':email', $email, PDO::PARAM_STR); // Important: Specify data type
  $stmt->execute();

  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    return "Email not found.";
  }

  // 3. Generate a Unique Token
  $token = bin2hex(random_bytes(32));  // Generates a random 32-byte (256-bit) hex string.
  //  This is much more secure than generating random strings.

  // 4.  Prepare Password Reset Link -  Store the token and user ID in the database.
  //     This is where you'd typically insert a new row into the users table
  //     with a 'reset_token' and 'reset_expiry' column.  For this example,
  //     we'll just print the link (in a real application, you'd use a proper
  //     link generation library).
  $db->prepare("INSERT INTO password_resets (user_id, reset_token, expiry) VALUES (:user_id, :reset_token, :expiry)");
  $db->bindParam(':user_id', $user['id'], PDO::PARAM_INT);
  $db->bindParam(':reset_token', $token, PDO::PARAM_STR);
  $db->bindParam(':expiry', time() + 3600, PDO::PARAM_INT);  // Token expires in 1 hour.
  $db->execute();


  // 5. Build the Password Reset Link
  $resetLink = "http://yourdomain.com/reset_password?token=" . $token;  // Replace yourdomain.com

  // 6. Send the Email (You'll need to implement this)
  $to = $email;
  $subject = "Password Reset";
  $message = "Click the link below to reset your password:
" . $resetLink;
  $headers = "From: your_email@example.com
";
  mail($to, $message, $headers); // This is a simple mail function.  Use a proper library.

  // 7.  Return a confirmation message.
  return "Password reset link has been sent to your email address.  Please check your inbox.";
}



// Example Usage (for testing - remove or comment out in production)
// $email = "testuser@example.com"; // Replace with a valid email
// $result = forgotPassword($email);
// echo $result;
?>


<?php

// Database connection details - Replace with your actual credentials
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database_name";

// Function to reset password
function forgotPassword($email, $newPassword) {
  // 1. Connect to the database
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    return false;
  }

  // 2. Sanitize input (important for security)
  $newPassword = password_hash($newPassword, PASSWORD_DEFAULT); // Hash the password

  // 3. Update the password in the database
  $sql = "UPDATE users SET password = '$newPassword' WHERE email = '$email'";
  if ($conn->query($sql) === TRUE) {
    return true;
  } else {
    return false;
  }

  // 4. Close the connection
  $conn->close();
}


// Example usage (this is for demonstration - you would typically
// handle this via a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $newPassword = $_POST["new_password"];

    if (!empty($email) && !empty($newPassword)) {
        if (forgotPassword($email, $newPassword)) {
            echo "Password reset successfully! Please check your email for instructions.";
        } else {
            echo "Error resetting password. Please try again.";
        }
    } else {
        echo "Please fill in all fields.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="new_password">New Password:</label>
    <input type="password" id="new_password" name="new_password" required><br><br>

    <input type="submit" value="Reset Password">
  </form>

</body>
</html>


<?php

// Assume you have a database connection established and a 'users' table with an 'email' column.

function forgot_password($email, $new_password, $token, $db_connection) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false;
  }

  // 2. Check if user exists
  $stmt = $db_connection->prepare("SELECT id, password FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    return false; // User doesn't exist
  }

  // 3. Hash the new password
  $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

  // 4. Update the user's password
  $stmt = $db_connection->prepare("UPDATE users SET password = ? WHERE email = ?");
  $stmt->execute([$hashed_password, $email]);

  // 5.  Token is typically stored in the database and is invalidated after use.
  //     In a real application, you'd store the token in the database along with the user record.
  //     For simplicity, we're just checking for its existence here.
  // Example (This part would need to be modified based on your token storage)
  $stmt = $db_connection->prepare("SELECT id FROM reset_tokens WHERE user_id = ? AND token = ?");
  $stmt->execute([$user['id'], $token]);
  $reset_token_count = $stmt->rowCount();

  if ($reset_token_count == 0) {
     // Token doesn't exist, likely a bad request.
     return false;
  }
  
  //  If the token is valid, you could invalidate it here.
  //  For example:  
  //  $stmt = $db_connection->prepare("DELETE FROM reset_tokens WHERE user_id = ? AND token = ?");
  //  $stmt->execute([$user['id'], $token]);


  return true;
}


// --- Example Usage (for demonstration purposes) ---

//  **IMPORTANT:**  Replace these placeholders with your actual database connection.
$db_connection = new PDO("mysql:host=localhost;dbname=your_database", "your_username", "your_password");

// Example Email and New Password (FOR TESTING ONLY - NEVER DO THIS IN PRODUCTION)
$email = "test@example.com";
$new_password = "new_secure_password";
$token = "some_unique_token"; // Generate a random token (e.g., using uniqid())

if (forgot_password($email, $new_password, $token, $db_connection)) {
  echo "Password reset successful! Check your email for instructions.";
} else {
  echo "Password reset failed.  Please try again.";
}

// Close the database connection
$db_connection = null;
?>


<?php

// IMPORTANT:  This is a basic example and should be used with caution.
//  In a production environment, you MUST implement robust security measures 
//  to prevent abuse and unauthorized access.  This example is for educational purposes only.

// Database connection (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_pass = 'your_db_password';

// 1.  Form Handling and Validation

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = trim($_POST["email"]);

    // Basic email validation (improve this!)
    if (empty($email)) {
        $error_message = "Please enter your email address.";
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error_message = "Invalid email address format.";
    } else {
        // 2.  Check for Existing User
        $query = "SELECT id, username FROM users WHERE email = '$email'";
        $result = mysqli_query($db_conn, $query);

        if (mysqli_num_rows($result) > 0) {
            // User exists - generate and send reset token
            $reset_token = bin2hex(random_bytes(32)); // Generate a random token
            $query = "UPDATE users SET reset_token = '$reset_token', reset_token_expiry = NOW() WHERE email = '$email'";
            mysqli_query($db_conn, $query);

            // Email the reset link
            $to = $email;
            $subject = 'Password Reset';
            $message = "Please click on the following link to reset your password: " . '<a href="reset_password.php?token=' . $reset_token . '">Reset Password</a>';
            $headers = "From: your_email@example.com";  // Replace with your email
            mail($to, $message, $headers);

            // Display success message
            echo "<p>Password reset email has been sent to $email.  Please check your inbox.</p>";
        } else {
            // User does not exist
            echo "<p>No user found with that email address.</p>";
        }
    }
}


// 3.  Display the Form (if not submitted)
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

<h1>Forgot Password</h1>

<?php if (isset($error_message)) {
    echo "<p style='color: red;'>$error_message</p>";
} ?>

<form action="" method="post">
    <label for="email">Email Address:</label>
    <input type="email" id="email" name="email" placeholder="Enter your email" required>
    <button type="submit">Reset Password</button>
</form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user.
 * @return bool True if password reset email was sent, false otherwise.
 */
function forgotPassword(string $email): bool
{
    // 1. Check if the email exists in the database
    $user = getUserByEmail($email);

    if (!$user) {
        // User doesn't exist
        return false;
    }

    // 2. Generate a unique token
    $token = generateUniqueToken();

    // 3. Store the token and user ID in the database
    $result = saveResetToken($user->id, $token);

    if (!$result) {
        // Failed to save token - likely a database error
        return false;
    }

    // 4. Send the password reset email
    $subject = "Password Reset Request";
    $message = "Please click the following link to reset your password:
" .
               "<a href='" . generateResetLink($token) . "'>Reset Password</a>";
    $headers = "From: your_email@example.com\r
"; // Replace with your email

    if (sendEmail($email, $subject, $message, $headers)) {
        return true;
    } else {
        // Failed to send email - handle this error appropriately
        //  e.g., log the error, display a message to the user.
        //  Consider retrying later, or notifying an administrator.
        return false;
    }
}


/**
 * Helper function to get a user by their email.
 *  (Replace this with your actual database query logic)
 *
 * @param string $email The email address to search for.
 * @return User|null The User object if found, null otherwise.
 */
function getUserByEmail(string $email): ?User
{
    // Replace with your database query to get the user by email
    // Example using a hypothetical User class
    // $stmt = $db->prepare("SELECT * FROM users WHERE email = ?");
    // $stmt->bind_param("s", $email);
    // $stmt->execute();
    // $result = $stmt->get_result();

    // $user = null;
    // if ($result->num_rows > 0) {
    //     $user = new User(...); // Populate the User object from the database result
    // }

    // $stmt->close();
    // return $user;

    // Dummy example, replace with your database connection and query
    $users = [
        ['id' => 1, 'email' => 'test@example.com', 'password' => 'hashed_password'],
    ];
    foreach ($users as $user) {
        if ($user['email'] == $email) {
            return new User($user);
        }
    }
    return null;
}

/**
 * Helper function to generate a unique token.
 * (You can use a library for more robust token generation)
 *
 * @return string A unique token.
 */
function generateUniqueToken(): string
{
    return bin2hex(random_bytes(32)); // Generate a 32-byte random hexadecimal string
}


/**
 * Helper function to create a reset link with the token.
 *
 * @param string $token The token.
 * @return string The reset link.
 */
function generateResetLink(string $token): string
{
    return "https://yourwebsite.com/reset-password?token=" . $token;
}


/**
 * Helper function to send an email.
 * (Replace with your email sending library)
 *
 * @param string $to        The recipient email address.
 * @param string $subject   The email subject.
 * @param string $message   The email body.
 * @param string $headers   Email headers.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function sendEmail(string $to, string $subject, string $message, string $headers): bool
{
    // Replace this with your email sending logic
    // Example using a hypothetical email sending function
    // $result = mail($to, $subject, $message, $headers);
    // return ($result === true); // or check for error codes if appropriate

    // Dummy example - return true always
    return true;
}


/**
 * Helper function to store the reset token.
 *  (Replace with your database query logic)
 *
 * @param int $userId The ID of the user.
 * @param string $token The token.
 * @return bool True if the token was saved successfully, false otherwise.
 */
function saveResetToken(int $userId, string $token): bool
{
    // Replace with your database query to store the token
    // Example using a hypothetical User class
    // $stmt = $db->prepare("INSERT INTO reset_tokens (user_id, token, expires_at) VALUES (?, ?, ?)");
    // $stmt->bind_param("iii", $userId, $token, date('Y-m-d H:i:s', time() + 3600)); // Expires in 1 hour
    // $result = $stmt->execute();

    // $stmt->close();
    // return $result === true;

    // Dummy example
    return true;
}



// Example Usage (Demonstration Only - Integrate with your framework)
// $email = 'test@example.com';
// if (forgotPassword($email)) {
//     echo "Password reset email sent to $email";
// } else {
//     echo "Failed to send password reset email.";
// }

// Note: This is a basic example and needs to be integrated with your application's
// authentication and database logic.  Also, it's crucial to secure your application
// against vulnerabilities like CSRF (Cross-Site Request Forgery) attacks.
?>


<?php

/**
 * Forgets the user's password and initiates a password reset process.
 *
 * @param string $email The user's email address.
 * @return bool True on success, false on failure (e.g., email not found, email not sent).
 */
function forgotPassword(string $email): bool
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log for debugging
        return false;
    }

    // 2. Check if User Exists
    $user = getUserById($email); //  Replace with your method to fetch user by email.

    if (!$user) {
        error_log("User not found for email: " . $email); // Log for debugging
        return false;
    }

    // 3. Generate a Unique Token
    $resetToken = generateUniqueToken(); //  Replace with your token generation method.


    // 4. Store the Token (Database - Example)
    //  IMPORTANT:  This is a simplified example. Adapt to your database schema.
    //  This is where you'd update the user's record with the token.
    $result = saveResetToken($user->id, $resetToken); // Replace with your save function
    if (!$result) {
        error_log("Failed to save reset token for user: " . $email);
        return false;
    }

    // 5. Send Password Reset Email (Email Sending Logic)
    if (!sendResetPasswordEmail($user->email, $resetToken)) {
        error_log("Failed to send password reset email to: " . $user->email);
        // You might want to attempt to delete the token in the database
        // to avoid it being used if the email sending fails.
        deleteResetToken($user->id);
        return false;
    }


    return true;
}


/**
 * Placeholder function for fetching a user by email.  Replace with your actual implementation.
 * @param string $email
 * @return User | null
 */
function getUserById(string $email): ?User
{
    // Replace this with your database query to fetch user by email.
    // This is a placeholder.  Assume you have a User class.

    // Example using a mock User class:
    $user = new User();
    $user->id = 123;
    $user->email = $email;
    return $user;
}


/**
 * Placeholder function for generating a unique token.
 * @return string
 */
function generateUniqueToken(): string
{
    // Use a cryptographically secure random number generator
    return bin2hex(random_bytes(32)); //  Returns a 32-byte hex string
}



/**
 * Placeholder function for saving the reset token to the database.
 * @param int $userId
 * @param string $token
 * @return bool
 */
function saveResetToken(int $userId, string $token): bool
{
    // Replace this with your actual database save logic
    // This is a placeholder. Adapt to your database structure.
    // Example:
    // $db = new DatabaseConnection();
    // $sql = "INSERT INTO reset_tokens (user_id, token, expiry_date) VALUES ($userId, '$token', NOW())";
    // $result = $db->execute($sql);

    // Placeholder: Return true for demonstration only
    return true;
}

/**
 * Placeholder function for deleting the reset token from the database.
 * @param int $userId
 * @return bool
 */
function deleteResetToken(int $userId): bool
{
    // Replace this with your actual database delete logic
    //  Example:
    // $db = new DatabaseConnection();
    // $sql = "DELETE FROM reset_tokens WHERE user_id = $userId";
    // $result = $db->execute($sql);

    // Placeholder: Return true for demonstration only
    return true;
}


/**
 * Placeholder function to send the password reset email.
 * @param string $email
 * @param string $token
 * @return bool
 */
function sendResetPasswordEmail(string $email, string $token): bool
{
    // Replace this with your email sending logic.
    // This is a placeholder.

    // Example:
    // $subject = "Password Reset";
    // $message = "Click this link to reset your password: " .  URL_BASE . "/reset-password?token=" . $token;
    // $headers = ["Content-Type: text/html"];
    // $result = mail($email, $message, $headers);
    // return (bool) $result;

    // Placeholder: Return true for demonstration only
    return true;
}

?>


<?php

// Database connection details (replace with your actual details)
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$database = 'your_database';

// Function to reset password
function forgotPassword($email, $newPassword) {
  // 1. Connect to the database
  $conn = new mysqli($host, $username, $password, $database);

  // Check connection
  if ($conn->connect_error) {
    return "Connection failed: " . $conn->connect_error;
  }

  // 2.  Securely Hash the New Password
  $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);

  // 3. Prepare and Execute the SQL Query
  $sql = "UPDATE users SET password = '$hashedPassword' WHERE email = '$email'";

  if ($conn->query($sql) === TRUE) {
    return "Password reset successful. Please check your email for further instructions.";
  } else {
    return "Error resetting password: " . $conn->error;
  }

  // 4. Close the connection
  $conn->close();
}

// Example Usage (Demonstration - Don't expose this directly in a public-facing application!)
//  This part demonstrates how to call the function.
//  In a real application, you'd get the email and new password from a form submission.

// Simulate getting data from a form (for demonstration only)
$email = 'test@example.com';  // Replace with a valid email address
$newPassword = 'newSecurePassword123';  // Replace with the desired new password

// Call the function
$result = forgotPassword($email, $newPassword);

// Display the result
echo $result;

?>


<?php

// ... (Database connection details - same as before)

// Function to reset password (using prepared statement)
function forgotPassword($email, $newPassword) {
  // 1. Connect to the database
  $conn = new mysqli($host, $username, $password, $database);

  // Check connection
  if ($conn->connect_error) {
    return "Connection failed: " . $conn->connect_error;
  }

  // 2. Prepare the SQL statement
  $sql = "UPDATE users SET password = ? WHERE email = ?";  // Use placeholders instead of direct variable substitution
  $stmt = $conn->prepare($sql);

  // 3. Bind the parameters
  $stmt->bind_param("s", $newPassword, $email);  // 's' indicates a string

  // 4. Execute the statement
  if ($stmt->execute()) {
    return "Password reset successful. Please check your email for further instructions.";
  } else {
    return "Error resetting password: " . $conn->error;
  }

  // 5. Close the connection
  $conn->close();

  // 6. Close the statement
  $stmt->close();
}


<?php

// Assuming you have a database connection established and a 'users' table with a 'email' column.
// Replace these with your actual database connection details and table name.

// Database configuration
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_pass = 'your_database_password';

// Check if the reset_password_request parameter is set in the URL
if (isset($_GET['reset_password_request'])) {
  // 1. Validate the email
  $email = $_GET['reset_password_request'];
  if (empty($email)) {
    die("No email provided.");
  }

  // 2. Generate a unique, random token
  $token = bin2hex(random_bytes(32));

  // 3. Hash the token - important for security!
  $hashed_token = password_hash($token, PASSWORD_DEFAULT);

  // 4. Store the token in the database associated with the user's email.
  //  This is a simplified example.  In a real application, you'd likely 
  //  use a prepared statement to prevent SQL injection.
  try {
    // Using a prepared statement to prevent SQL injection.  This is crucial!
    $stmt = $db->prepare("INSERT INTO password_resets (email, token, expires_at) VALUES (?, ?, NOW())");
    $stmt->bind_param("ss", $email, $token);
    $stmt->execute();
  } catch (Exception $e) {
    // Handle database errors (e.g., email already exists)
    echo "Error inserting reset token: " . $e->getMessage();
    // Optionally, you could log this error for debugging
    exit;
  }

  // 5.  Send the reset password email (implementation omitted for brevity)
  //  This would involve using a mail function (like sendmail or a library) 
  //  to send an email with a link containing the token.
  //  Example link:  https://yourwebsite.com/reset_password.php?reset_password_request=$token

  // 6.  Success message
  echo "<p>A password reset link has been sent to your email address.</p>";
  echo "<p>You should receive an email within a few minutes.</p>";
  echo "<a href='login.php'>Back to Login</a>";

} else {
  // Handle the case where the reset_password_request parameter is not set
  echo "Invalid request.  Please try again.";
}

// Example of how to connect to your database
// (Use this or a similar method to connect to your database)
try {
    $db = new mysqli($db_host, $db_user, $db_pass, $db_name);

    if ($db->connect_error) {
        die("Database connection failed: " . $db->connect_error);
    }
} catch (Exception $e) {
    die("Database connection failed: " . $e->getMessage());
}


?>


<?php

// Assuming you have a database connection established (e.g., $db_connection)
// and that you have a table named 'users' with a 'email' column.

function forgot_password($email, $db_connection) {
  // 1. Validate Input (Crucial for security)
  if (empty($email)) {
    return "Error: Email address cannot be empty.";
  }

  // Validate email format (basic check - more robust validation is recommended)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Error: Invalid email address format.";
  }

  // 2. Check if User Exists
  $stmt = $db_connection->prepare("SELECT id, email FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);  // or MySQLi->fetch_assoc() if using MySQLi

  if (!$user) {
    return "Error: User not found.";
  }

  // 3. Generate a Token & Store it (Securely - consider hashing & salting)
  $token = bin2hex(random_bytes(32));  // Generate a random 32-byte token
  // For better security: hash and salt the token before storing it.
  // Example (using password_hash - best practice):
  // $hashed_token = password_hash($token, PASSWORD_DEFAULT);

  // 4. Prepare Password Reset Link
  $reset_link = "http://yourdomain.com/reset_password?token=" . urlencode($token);

  // 5. Store the Token (Important: Store this securely! Don't just in-memory)
  //  This example demonstrates storing in a database.
  $stmt = $db_connection->prepare("INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, ?)");
  $stmt->execute([$user['id'], $token, time() + 3600]); // Store for 1 hour (adjust as needed)


  // 6. Return the Reset Link
  return $reset_link;
}



// Example Usage (inside a form/controller)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $reset_link = forgot_password($email, $db_connection); // Replace $db_connection with your connection

  if (strpos($reset_link, "Error:") === 0) {
    echo "<p style='color:red;'>" . $reset_link . "</p>";
  } else {
    echo "<p>Please check your email.  We have sent you a password reset link:</p>";
    echo "<a href='" . $reset_link . "'>Reset Password</a>";
  }
}
?>


<?php

// Ensure this is running on the server-side (e.g., a web server)
//  This code is for demonstration purposes and should be adapted for a
//  production environment with proper security measures.

//  Important:  NEVER store passwords directly in your code or database.
//  Always hash passwords using a strong hashing algorithm like bcrypt.

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @return bool True if a password reset email was sent successfully, false otherwise.
 */
function forgotPassword($email) {
  // Validate the email (basic check - improve this for production)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false;
  }

  // 1. Generate a unique, time-based token
  $token = bin2hex(random_bytes(32));

  // 2. Store the token in the database associated with the user's email.
  //    This is the most crucial step - adapt this part to your database schema.
  //    This example assumes a 'users' table with an 'email' and 'password_reset_token' column.
  //    You'll likely need to adjust this based on your application's database structure.
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password'); //Replace placeholders
  $stmt = $db->prepare("SELECT id FROM users WHERE email = :email");
  $stmt->bindParam(':email', $email, PDO::PARAM_STR);
  $stmt->execute();

  if ($stmt->rowCount() > 0) {
    // User exists - proceed to store the token
    $stmt = $db->prepare("UPDATE users SET password_reset_token = :token, password_reset_token_expiry = :expiry WHERE email = :email");
    $expiry = date('Y-m-d H:i:s', time() + 3600); // Expires in 1 hour (adjust as needed)
    $stmt->bindParam(':token', $token, PDO::PARAM_STR);
    $stmt->bindParam(':expiry', $expiry, PDO::PARAM_STR);
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    return $stmt->execute();
  } else {
    // User does not exist -  (You might want to handle this differently, e.g., create a new user)
    return false;
  }

  // 3. Send a password reset email
  $resetLink = 'http://yourwebsite.com/reset-password?token=' . $token; // Replace your website URL
  $subject = "Password Reset Request";
  $message = "Click the link above to reset your password: " . $resetLink;
  $headers = "From: yourwebsite@example.com\r
";
  mail($email, $message, $headers);  // Using PHP's mail() function (simple, but not always reliable)

  // You might want to use a more robust email sending library for production
  // (e.g., SwiftMailer, PHPMailer).

  return true;
}


// Example Usage (for testing - do NOT expose this in a real web application)
// $email = 'test@example.com'; // Replace with a valid email address
// if (forgotPassword($email)) {
//   echo "Password reset email sent to " . $email;
// } else {
//   echo "Failed to send password reset email to " . $email;
// }

?>


<?php

// This code assumes you have a database connection established.
// For demonstration, we'll use a simple in-memory array.
// In a real application, you would use a database connection.

// Example user data (replace with your actual database retrieval)
$users = [
    'john.doe@example.com' => 'password123',
    'jane.smith@example.com' => 'securePass',
];

/**
 * Forgets a user's password by sending a reset link to their email.
 *
 * @param string $email The email address of the user.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function forgotPassword(string $email) {
    // Validate email format (basic check)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return false;
    }

    // Check if the user exists
    if (!isset($users[$email])) {
        return false;
    }

    // Generate a unique reset token
    $resetToken = bin2hex(random_bytes(32)); // Use cryptographically secure random bytes

    // Store the reset token and expiration time in a temporary table or session.
    // This example uses a simple in-memory storage for demonstration only.
    // In a real application, use a database or a more robust session management system.
    //  Example:
    //  $resetTokens[$email] = ['token' => $resetToken, 'expiresAt' => time() + 3600]; // Expires in 1 hour

    // For demonstration purposes, we just return the token.  You'd typically send an email.
    // In a real application, you'd send an email containing the token and a link to reset the password.
    return $resetToken;
}

// Example usage:
$email = 'john.doe@example.com';
$resetToken = forgotPassword($email);

if ($resetToken) {
    echo "Reset link generated for $email:  https://example.com/reset-password?token=$resetToken
"; // Replace with your actual URL.
    // In a real application, send an email with this link.
} else {
    echo "Failed to generate reset link for $email.
";
}


//  -----  Important Considerations and Enhancements  -----

// 1. Security:
//    - **Never** store passwords in plain text.  Always hash them using a strong hashing algorithm like bcrypt or Argon2.
//    - Use a cryptographically secure random number generator (e.g., `random_bytes()`) to generate reset tokens.
//    -  Validate and sanitize all user input.  Prevent XSS and other vulnerabilities.
//    - Consider using a token expiration time.
//    -  Store reset tokens securely (database is generally preferred).

// 2. Database Integration:
//    - **Replace** the `$users` array with a database query to retrieve user information.
//    - Store reset tokens in a database table, along with the user ID and expiration time.
//    - Use parameterized queries to prevent SQL injection.

// 3. Email Sending:
//    -  Use a reliable email sending service (e.g., SendGrid, Mailgun, AWS SES) to send the reset password email.  Do not rely on direct SMTP connections for security reasons.
//    -  Include the reset token, a link to the reset password page, and instructions in the email.

// 4. Session Management:
//   - If using sessions, store the token and expiration time in the session.  Be mindful of session security.

// 5.  User Interface:
//   - Create a reset password page where the user can enter their email address.
//   -  Implement form validation on the reset password page.

?>


<?php

// Assuming you have a database connection established and available as $db

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a reset token was generated and sent, false otherwise.
 */
function forgot_password(string $email)
{
  // 1. Validate Email (basic validation - you can make this more robust)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email address provided: " . $email); // Log for debugging
    return false;
  }

  // 2. Generate a Unique Token
  $token = bin2hex(random_bytes(32)); // Use a cryptographically secure random token

  // 3. Hash the Token (Important for Security!)
  $hashed_token = password_hash($token, PASSWORD_DEFAULT);

  // 4. Store the Token and User ID in the Database
  $query = "INSERT INTO password_resets (user_id, token, expires_at) 
             VALUES (:user_id, :token, :expires_at)";
  $stmt = $db->prepare($query);
  $stmt->bind_param("iii", $email, $token, time() + 3600); // Store for 1 hour
  $result = $stmt->execute();

  if (!$result) {
    error_log("Error inserting token into database: " . $db->error); // Log for debugging
    return false;
  }

  // 5.  Send the Reset Link (Email)
  $to = $email;
  $subject = 'Password Reset Link';
  $message = "Please click the following link to reset your password: " . 
             '<a href="' . $_SERVER['PHP_SELF'] . '?reset=' . urlencode($token) . '">' . 
             '<a href="' . base_url() . '/reset-password?token=' . urlencode($token) . '</a>';
  $headers = "From: your_email@example.com"; // Replace with your email

  if (mail($to, $subject, $message, $headers)) {
    return true;
  } else {
    error_log("Error sending email: " . mail($to, $subject, $message, $headers));
    // In a real application, you'd want to handle this error more gracefully
    //  (e.g., display an error message to the user)
    return false;
  }
}



// Example Usage (in your form submission handling code)
// Assuming you have a form with an 'email' input field
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  if (forgot_password($email)) {
    echo "Password reset email has been sent to " . $email;
  } else {
    echo "Failed to generate password reset link. Please try again.";
  }
}
?>


<?php

// Assuming you have a database connection established
// For example:
// $db = new PDO("mysql:host=localhost;dbname=your_database_name", "username", "password");


/**
 * Forgets a user's password by sending a password reset link to their email.
 *
 * @param string $email The email address of the user.
 * @return bool True if the reset link was generated successfully, false otherwise.
 */
function forgotPassword($email) {
  // Validate email format
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email format provided for password reset."); // Log for debugging
    return false;
  }

  // Check if the user exists
  $stmt = $db->prepare("SELECT id, email FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    error_log("User with email '$email' not found."); // Log for debugging
    return false;
  }

  // Generate a unique token
  $token = bin2hex(random_bytes(32));

  // Hash the token (important for security)
  $hashedToken = password_hash($token, PASSWORD_DEFAULT);

  // Store the token in the database, associated with the user
  $stmt = $db->prepare("UPDATE users SET reset_token = ?, reset_token_expiry = ? WHERE email = ?");
  $stmt->execute([$hashedToken, time() + 3600, $email]); // expiry in 1 hour

  // Send an email with the reset link
  $subject = "Password Reset Link";
  $message = "Click on the following link to reset your password: " . "<a href='" . base_url . "reset_password?token=" . $token . "'>" . base_url . "reset_password?token=" . $token . "</a>";  // Replace base_url with your application's URL
  $headers = "From: Your Website <your_email@example.com>";

  mail($email, $message, $headers);

  return true;
}

// Example Usage (within a controller or function):
// $email = $_POST['email'];
// if (forgotPassword($email)) {
//   echo "Password reset email has been sent to $email";
// } else {
//   echo "Failed to generate password reset link.";
// }

?>


<?php

/**
 * Forgets a user's password.
 *
 * This function sends a password reset link to the user's email address.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @param string $baseUrl The base URL of your application (e.g., 'http://example.com').
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $baseUrl): bool
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format: " . $email); // Log the error (important for debugging)
        return false;
    }

    // 2. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // Use a cryptographically secure random number

    // 3. Store Token & User ID in Database (Simplified - in a real application, this is more secure)
    //    - You should *never* store passwords directly in the database.
    //    - Instead, store a hashed version of the password.
    //    - This simplified example just uses an array for demonstration.
    //    - In a real application, you would use a database query.

    //  Example:
    //  $user = get_user_by_email($email); // Assuming you have this function
    //  if ($user) {
    //      $user_id = $user['id'];
    //      save_token_for_user($user_id, $token);
    //  } else {
    //      return false; // User not found
    //  }

    // Simplified Example - using an array directly:
    $user_data = [
        'email' => $email,
        'token' => $token
    ];

    // 4. Create Password Reset Link
    $resetLink = $baseUrl . "/reset-password?token=" . urlencode($token);

    // 5. Send Password Reset Email
    $to = $email;
    $subject = 'Password Reset';
    $message = "To reset your password, please click on the following link: " . $resetLink;

    // You'll need to configure your email sending mechanism here.
    // This is just a placeholder - you'll need to use a real email library or service.
    // Example using a placeholder function:
    if (sendEmail($to, $subject, $message)) {
        return true;
    } else {
        error_log("Failed to send email for reset: " . $email);  // Log the error
        return false;
    }
}


/**
 * Placeholder function to simulate sending an email.
 * Replace this with your actual email sending logic.
 *
 * @param string $to
 * @param string $subject
 * @param string $message
 * @return bool
 */
function sendEmail(string $to, string $subject, string $message): bool
{
    //  This is just a placeholder.  Replace this with your email sending logic.
    //  For example, you could use PHPMailer or SwiftMailer.
    //  Or, you could use a service like SendGrid or Mailgun.

    // Log the email details for debugging
    error_log("Simulated sending email to: " . $to . " Subject: " . $subject . " Message: " . $message);

    // Simulate success (replace with actual email sending)
    return true;
}


// Example Usage (for testing)
// $email = 'test@example.com'; // Replace with a valid email address
// if (forgotPassword($email, 'http://localhost/my-app')) {
//     echo "Password reset email sent to " . $email . "
";
// } else {
//     echo "Failed to send password reset email.
";
// }


?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 *  Generates a reset token and updates the user's record with it.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email): bool
{
    // 1. Validate Email (Basic)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email);  // Log the error for debugging
        return false;
    }

    // 2. Check if the user exists
    $user = getUserById($email); // Replace with your function to get user by email
    if (!$user) {
        error_log("User with email " . $email . " not found.");
        return false;
    }

    // 3. Generate a unique reset token
    $token = generate_unique_token();

    // 4. Hash the token for security
    $hashed_token = hash('sha256', $token);  // Using SHA256 for stronger hashing

    // 5. Update the user's record with the token
    if (!updateUserToken($user['id'], $hashed_token)) {
        error_log("Failed to update user token: " . $email);
        return false;
    }

    // 6.  Send the password reset email (implementation details are not included here; see below for example)

    // 7. Return true to indicate success
    return true;
}

/**
 * Placeholder function to retrieve a user by email.  Replace with your actual database query.
 *
 * @param string $email The email address of the user to retrieve.
 * @return array|null An associative array representing the user, or null if not found.
 */
function getUserById(string $email): ?array
{
    // Replace this with your actual database query
    // Example:
    // $result = mysqli_query($db, "SELECT * FROM users WHERE email = '$email'");
    // if (mysqli_num_rows($result) > 0) {
    //     return mysqli_fetch_assoc($result);
    // }
    // return null;

    // Mock implementation for demonstration
    $mock_users = [
        ['id' => 1, 'email' => 'test@example.com', 'password' => 'hashed_password'],
        ['id' => 2, 'email' => 'another@example.com', 'password' => 'hashed_password']
    ];
    foreach ($mock_users as $user) {
        if ($user['email'] === $email) {
            return $user;
        }
    }
    return null;
}



/**
 * Placeholder function to generate a unique token.  You should use a more robust method for security.
 *
 * @return string A unique token.
 */
function generate_unique_token(): string
{
    return bin2hex(random_bytes(32)); // Using random_bytes for better randomness
}


/**
 * Placeholder function to update the user's token.  Replace with your actual database query.
 *
 * @param int $userId The ID of the user to update.
 * @param string $hashedToken The hashed token to store.
 * @return bool True on success, false on failure.
 */
function updateUserToken(int $userId, string $hashedToken): bool
{
   // Replace this with your actual database query
   // Example:
   // $sql = "UPDATE users SET token = '$hashedToken' WHERE id = $userId";
   // $result = mysqli_query($db, $sql);
   // return (mysqli_affected_rows($result) > 0);

   // Mock implementation for demonstration
   $user = getUserById($userId);
   if ($user) {
       $user['token'] = $hashedToken;
       return true;
   }
   return false;
}



/**
 * Placeholder function to send a password reset email.
 * This function is just a placeholder, and you will need to implement the actual email sending logic.
 *
 * @param string $email The email address of the user.
 * @param string $resetToken The reset token.
 * @return void
 */
function send_password_reset_email(string $email, string $resetToken): void
{
    // Implement your email sending logic here (e.g., using PHPMailer)
    // Example:
    // $subject = "Password Reset Request";
    // $body = "Click this link to reset your password: " . URL . "/reset-password?token=" . $resetToken;
    // $headers = "From: noreply@example.com" . "\r
";
    // mail($email, $subject, $body, $headers);
    error_log("Password reset email not implemented.  Send password reset email to " . $email . " with token " . $resetToken);
}


// Example Usage (Illustrative Only -  replace with real interaction)
$email_to_reset = "test@example.com"; // Replace with an actual email address.

if (forgot_password($email_to_reset)) {
    echo "Password reset request sent for " . $email_to_reset . ". Check their email!";
    //  Now you need to implement the logic to store the $resetToken in the database
    //  and also trigger sending the email.

} else {
    echo "Failed to initiate password reset for " . $email_to_reset;
}

?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user.
 * @return bool True if a reset link was generated and emailed, false otherwise.
 */
function forgot_password(string $email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email address provided: " . $email); // Log for debugging
    return false;
  }

  // 2. Check if the user exists
  $user = db_get_user_by_email($email); // Replace with your actual database query function
  if (!$user) {
    error_log("User with email " . $email . " not found.");
    return false;
  }

  // 3. Generate a unique token
  $token = generate_unique_token();

  // 4. Store the token and user ID in the database
  $result = db_insert_reset_token($user_id, $token);
  if (!$result) {
    error_log("Failed to insert reset token for user " . $email);
    return false;
  }

  // 5.  Build the reset link
  $reset_link = generate_reset_link($user->email, $token);

  // 6.  Send the reset link via email
  if (send_email(
    $user->email,
    "Password Reset Link",
    $reset_link  // Include the reset link in the email body
  )) {
    return true;
  } else {
    // Handle email sending failure (log it!)
    error_log("Failed to send password reset email to " . $user->email);
    // Optionally, delete the token from the database to prevent abuse.
    db_delete_reset_token($user_id, $token);
    return false;
  }
}

/**
 *  Helper Functions (Example Implementations - Adapt to your database)
 */

/**
 * Generates a unique token.
 *
 * @return string A unique token.
 */
function generate_unique_token() {
  return bin2hex(random_bytes(32)); // Generate a cryptographically secure random string
}

/**
 * Retrieves a user by their email address from the database.
 *
 * @param string $email The email address of the user.
 * @return  User object or false if not found.
 */
function db_get_user_by_email(string $email) {
  // Example using a hypothetical database query - Adapt to your database
  // Replace this with your actual database query
  global $db; // Assuming $db is your database connection
  $query = "SELECT * FROM users WHERE email = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("s", $email); // "s" for string
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    return new User($user);  // Assuming you have a User class to represent a user
  }

  return false;
}


/**
 * Inserts a new reset token into the database.
 *
 * @param int $user_id The ID of the user.
 * @param string $token The reset token.
 * @return int|false The ID of the inserted row, or false on failure.
 */
function db_insert_reset_token(int $user_id, string $token) {
  // Example using a hypothetical database query - Adapt to your database
  global $db; // Assuming $db is your database connection
  $query = "INSERT INTO reset_tokens (user_id, token, expiry) VALUES (?, ?, NOW())";
  $stmt = $db->prepare($query);
  $stmt->bind_param("is", $user_id, $token);
  $result = $stmt->execute();
  return $result ? $stmt->insert_id : false;
}



/**
 * Deletes a reset token from the database.
 *
 * @param int $user_id The ID of the user.
 * @param string $token The reset token.
 * @return bool True if the token was deleted, false otherwise.
 */
function db_delete_reset_token(int $user_id, string $token) {
    // Example using a hypothetical database query - Adapt to your database
    global $db; // Assuming $db is your database connection
    $query = "DELETE FROM reset_tokens WHERE user_id = ? AND token = ?";
    $stmt = $db->prepare($query);
    $stmt->bind_param("is", $user_id, $token);
    $result = $stmt->execute();
    return $result;
}


/**
 * Generates the reset link.  This should include the token.
 *
 * @param string $email The email address of the user.
 * @param string $token The reset token.
 * @return string The reset link.
 */
function generate_reset_link(string $email, string $token) {
  return "http://example.com/reset_password?token=" . urlencode($token) . "&email=" . urlencode($email);
}

/**
 *  Placeholder for sending email - Replace with your email sending library
 */
function send_email(string $to, string $subject, string $body) {
  //  In a real application, use a library like PHPMailer to handle email sending.
  //  For example:
  //  $mail = new PHPMailer\PHPMailer\PHPMailer();
  //  $mail->SetFrom('your@email.com', 'Your Website');
  //  $mail->AddAddress($to);
  //  $mail->Subject = $subject;
  //  $mail->Body = $body;
  //  return $mail->send();
  // This is just a placeholder -  return true for demonstration
  error_log("Simulating email sending to " . $to);
  return true;
}

/**
 * User Class (Example) -  Adapt to your User data structure
 */
class User {
  public $id;
  public $email;
  public $password; // or other user data

  public function __construct($data) {
    $this->id = isset($data['id']) ? $data['id'] : null;
    $this->email = $data['email'];
    $this->password = $data['password'];
  }
}
?>


<?php

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password to set.
 * @param string $dbHost     The database host.
 * @param string $dbName     The database name.
 * @param string $dbUser     The database username.
 * @param string $dbPassword The database password.
 *
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email, string $newPassword, string $dbHost, string $dbName, string $dbUser, string $dbPassword)
{
    // 1. Connect to the database
    $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

    // 2. Check the connection
    if ($conn->connect_error) {
        error_log("Failed to connect to database: " . $conn->connect_error); // Log the error
        return false;
    }

    // 3.  **IMPORTANT:**  Implement a secure password hashing function.
    //   Using a simple password hash like md5 is HIGHLY discouraged.  Use password_hash()
    $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

    // 4.  Update the password for the user
    $sql = "UPDATE users SET password = '$hashedNewPassword' WHERE email = '$email'"; //  Use single quotes for string values
    $result = $conn->query($sql);

    // 5. Check the result
    if (!$result) {
        error_log("Query failed: " . $conn->error); // Log the error
        return false;
    }

    // 6.  Success!  (You might want to send an email notification here)
    return true;
}


// Example Usage (Illustrative - Replace with your actual values)
// DO NOT include this in a production environment without proper input sanitization and validation!

// $email = 'test@example.com';
// $newPassword = 'NewSecurePassword123!';
// $dbHost = 'localhost';
// $dbName = 'your_database_name';
// $dbUser = 'your_username';
// $dbPassword = 'your_password';

// if (forgot_password($email, $newPassword, $dbHost, $dbName, $dbUser, $dbPassword)) {
//     echo "Password reset successful!";
// } else {
//     echo "Password reset failed.";
// }
?>


<?php

/**
 * Forgot Password Function
 *
 * This function allows a user to request a password reset.
 * It generates a unique token and stores it in the database
 * along with the user's email.  A reset link is then emailed
 * to the user.
 *
 * @param string $email The email address of the user.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email)
{
    // 1. Validate Email (Basic validation - you should expand this)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided: " . $email); // Log for debugging
        return false;
    }

    // 2. Generate a Unique Token
    $token = bin2hex(random_bytes(32));

    // 3. Hash the Token (Important for Security)
    $hashed_token = password_hash($token, PASSWORD_DEFAULT);

    // 4. Store Token and Email in Database
    // Assuming you have a database connection called $db
    // and a table named 'users' with columns 'email' and 'reset_token'
    $sql = "INSERT INTO users (email, reset_token) VALUES ('$email', '$hashed_token')";

    if ($db->query($sql) === false) {
        error_log("Database error: " . $db->error);  //Log database errors
        return false;
    }

    // 5. Send Email with Reset Link
    $subject = "Password Reset Link";
    $message = "Click this link to reset your password: " . $_SERVER['REQUEST_SCHEME'] . "://localhost/reset_password.php?token=$token"; // Construct the full URL
    $headers = "From: your_email@example.com"; // Replace with your email
    
    if (mail($email, $subject, $message, $headers)) {
        return true;
    } else {
        error_log("Failed to send email: " . error_get_last()['message']);
        // Handle email sending failure (e.g., check mail settings, SMTP configuration)
        return false;
    }
}

// Example Usage (Simulated Database - Replace with your actual database connection)
// Assume $db is your database connection object

// $email = "test@example.com";
// if (forgot_password($email)) {
//     echo "Password reset email sent to " . $email;
// } else {
//     echo "Failed to send password reset email.";
// }

?>


<?php

// Assuming you have a database connection established
// (e.g., $db = mysqli_connect("localhost", "username", "password", "database_name");)

// Function to reset password
function forgot_password($email) {
    // 1. Generate a unique, secure token
    $token = bin2hex(random_bytes(32));

    // 2. Store the token and expiration time in the database
    //   (Important:  Always expire tokens after a certain duration.)
    //  This example assumes you have a 'users' table with 'email' and 'password' columns
    //  and a 'reset_tokens' table with 'email' and 'token' columns.
    //  You'll need to adapt this part to your specific database schema.

    // Check if the email already has a reset token
    $stmt = $db->prepare("SELECT id FROM reset_tokens WHERE email = ?");
    $stmt->bind_param("s", $email);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        // Token already exists.  Update the existing token
        $stmt = $db->prepare("UPDATE reset_tokens SET token = ?, expiration = NOW() WHERE email = ? AND token = ?");
        $stmt->bind_param("ss", $token, $email, $token); // token is used as a placeholder to update
        $result = $stmt->execute();

        if ($result) {
            // Success:  Send an email (implementation not included - see below)
            //  You would typically use a mail function or an email library.
            echo "Password reset link generated. Check your email for a reset link.";
        } else {
            // Handle error
            error_log("Error updating reset token: " . $db->error);
            echo "Error updating token. Please try again.";
        }
    } else {
        // 1. Insert a new reset token into the database
        $stmt = $db->prepare("INSERT INTO reset_tokens (email, token, expiration) VALUES (?, ?, NOW())");
        $stmt->bind_param("ss", $email, $token);

        if ($stmt->execute()) {
            // 2. Send an email to the user with the reset link
            $reset_url = "https://yourwebsite.com/reset_password?token=" . $token; // Replace with your actual URL

            //  Implementation for sending the email (simplified example - customize!)
            $subject = "Password Reset Request";
            $message = "Click the link below to reset your password: " . $reset_url;
            $headers = "From: yourwebsite@example.com"; // Replace with your email address

            // Use mail() function (may require configuration)
            if (mail($email, $subject, $message, $headers)) {
                echo "Password reset link generated. Check your email for a reset link.";
            } else {
                // Handle error
                error_log("Error sending email: " . mail($email, $subject, $message, $headers));
                echo "Error sending email. Please check your email settings.";
            }

        } else {
            // Handle error
            error_log("Error inserting reset token: " . $db->error);
            echo "Error generating reset token. Please try again.";
        }
    }

    $stmt->close();
    $result->close();
}

// Example usage (This is just a demonstration, don't use it directly in production)
// Replace 'user@example.com' with the actual email address
// forgot_password('user@example.com');


// **Important Security Considerations and Improvements:**

// 1. **Salt and Hash Passwords:**  Never store passwords in plain text. Always hash them using a strong hashing algorithm (e.g., bcrypt, Argon2) before storing them in the database.  This function assumes you're already doing that for the user's password.

// 2. **Token Expiration:**  Tokens *must* expire after a certain period (e.g., 1 hour, 12 hours). This prevents attackers from using old, potentially compromised tokens.  The `expiration = NOW()` sets the expiration time.

// 3. **Token Uniqueness:** Ensure the generated tokens are truly unique. `random_bytes(32)` provides a high degree of uniqueness.

// 4. **Rate Limiting:** Implement rate limiting to prevent brute-force attacks on the password reset endpoint.  Limit the number of reset requests from the same IP address within a given time frame.

// 5. **Input Validation and Sanitization:** Always validate and sanitize user input (email address, etc.) to prevent SQL injection and other security vulnerabilities.

// 6. **HTTPS:**  Always use HTTPS to encrypt the communication between the user's browser and your server.

// 7. **Error Handling:**  Implement robust error handling and logging to help you debug issues and identify potential security breaches.  Don't display detailed error messages to the user in a production environment.

// 8. **Email Sending Implementation:**  The `mail()` function is often unreliable across different servers and configurations. Consider using a dedicated email library or service (e.g., PHPMailer, SwiftMailer, SendGrid, Mailgun) for more reliable email sending.

// 9. **Security Audits:** Regularly conduct security audits to identify and address potential vulnerabilities.

?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if password reset email sent successfully, false otherwise.
 */
function forgot_password(string $email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false; // Invalid email format
  }

  // 2. Check if User Exists
  $user = get_user_by_email($email); // Implement this function (see below)
  if (!$user) {
    return false; // User not found
  }

  // 3. Generate a Unique Token
  $token = generate_unique_token(); // Implement this function (see below)

  // 4. Store Token in Database
  $token_id = save_token_to_db($user->id, $token); // Implement this function (see below)
  if (!$token_id) {
    return false;
  }

  // 5. Send Password Reset Email
  $subject = "Password Reset Request for " . $user->email;
  $message = "Please click on the following link to reset your password: " . $_SERVER['PHP_SELF'] . "?reset_token=" . $token; // Dynamically construct the link
  $headers = "From: Your Website <your.website@example.com>";

  if (mail($email, $subject, $message, $headers)) {
    // Success!
    return true;
  } else {
    // Failure to send email
    // Handle error appropriately (e.g., log it)
    error_log("Failed to send password reset email for " . $email);
    return false;
  }
}

// Helper Functions (Implement these based on your database and system)

/**
 * Retrieves a user from the database based on email.
 *
 * @param string $email The user's email address.
 * @return User|null  A User object on success, null if not found.
 */
function get_user_by_email(string $email): ?User {
    // Replace this with your actual database query
    // Example (assuming you have a User class):
    // $result = $db->query("SELECT * FROM users WHERE email = '$email'");
    // if ($result->num_rows > 0) {
    //     $user = new User($result->fetch_assoc());
    //     return $user;
    // }
    // return null;

    // Dummy user for testing
    $user = new User(['id' => 1, 'email' => 'test@example.com']);
    return $user;
}

/**
 * Generates a unique token.
 *
 * @return string A unique token.
 */
function generate_unique_token() {
  return bin2hex(random_bytes(32)); // Recommended: use a cryptographically secure random number generator
}


/**
 * Saves the token to the database, associated with the user.
 *
 * @param int $user_id The ID of the user.
 * @param string $token The token to save.
 * @return int|false The ID of the token on success, false on failure.
 */
function save_token_to_db(int $user_id, string $token) {
    // Replace this with your actual database query.
    // Example:
    // $result = $db->query("INSERT INTO password_tokens (user_id, token, expiry_date) VALUES ($user_id, '$token', NOW() + INTERVAL 30 DAY)");
    // return $db->insert_id;

    // Dummy save for testing.
    return 1;
}


// Example Usage (for testing/demo -  DO NOT use in production without proper security)
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['email'])) {
  $email = $_POST['email'];
  if (forgot_password($email)) {
    echo "Password reset email sent successfully to " . $email;
  } else {
    echo "Failed to send password reset email.  Please try again.";
  }
}
?>

<form method="post" action="">
  <label for="email">Email:</label>
  <input type="email" id="email" name="email" placeholder="Enter your email">
  <button type="submit">Request Password Reset</button>
</form>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset email was sent, false otherwise.
 */
function forgotPassword(string $email) {
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log invalid emails for debugging
        return false;
    }

    // 2. Check if User Exists
    $user = getUserByEmail($email);

    if (!$user) {
        error_log("User with email '$email' not found.");
        return false;
    }

    // 3. Generate a Unique Token (for security)
    $token = generateUniqueToken();

    // 4. Store Token in Database (temporarily) - associate with the user
    $userId = $user['id']; // or however you retrieve the user's ID
    storeToken($userId, $token);


    // 5. Send Password Reset Email
    $resetLink = generateResetLink($token, $user['email']); // Construct the reset link
    sendEmail(['to' => $user['email'], 'subject' => 'Password Reset', 'body' => $resetLink]);

    return true;
}


/**
 * Helper function to get user data by email.  This should be replaced with your actual database query.
 *
 * @param string $email The email address to search for.
 * @return array|null An array containing user data if found, or null if not found.
 */
function getUserByEmail(string $email): ?array {
    // Replace this with your actual database query
    // Example (assuming you have a database connection $db)
    // $result = $db->query("SELECT * FROM users WHERE email = '$email'");
    // $user = $result->fetch_assoc();
    // return $user;

    //Dummy data for demonstration purposes only
    $users = [
        ['id' => 1, 'email' => 'test@example.com'],
        ['id' => 2, 'email' => 'another@example.com'],
    ];

    foreach ($users as $user) {
        if ($user['email'] === $email) {
            return $user;
        }
    }
    return null;
}


/**
 * Generates a unique token (e.g., using a UUID library).
 * This is crucial for security - ensures tokens are not easily guessable.
 *
 * @return string A unique token.
 */
function generateUniqueToken(): string {
    return bin2hex(random_bytes(32)); // Generates a 32-byte random string and encodes it to hexadecimal.
}



/**
 * Stores the token in the database.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token to store.
 */
function storeToken(int $userId, string $token): void {
    // Replace this with your actual database insert query
    // Example:
    // $db->query("INSERT INTO password_tokens (user_id, token, expiry_date) VALUES ($userId, '$token', NOW() + INTERVAL 24 HOUR)");
}



/**
 * Generates the password reset link.  Includes the token and the user's email
 *
 * @param string $token The token.
 * @param string $email The user's email.
 * @return string The generated link.
 */
function generateResetLink(string $token, string $email): string {
    return "/reset-password?token=" . urlencode($token) . "&email=" . urlencode($email);  //Construct the reset link
}



/**
 *  Sends an email. This function will need to be adapted to your email sending setup (e.g., PHPMailer, SendGrid).
 *
 * @param array $data Array containing 'to', 'subject', and 'body'.
 */
function sendEmail(array $data): void {
    //Replace with your email sending implementation.  This is just a placeholder.
    $to = $data['to'];
    $subject = $data['subject'];
    $body = $data['body'];

    //Dummy email sending
    echo "Sending email to: " . $to . " with subject: " . $subject . "
Body: " . $body . "
";
}



// Example Usage (for testing)
$email = 'test@example.com';

if (forgotPassword($email)) {
    echo "Password reset email sent to $email
";
} else {
    echo "Failed to send password reset email for $email
";
}
?>


<?php

/**
 * Forgets the user's password and initiates a password reset process.
 *
 * @param string $email The user's email address.
 * @return bool True if a reset email was sent, false otherwise (e.g., invalid email).
 */
function forgotPassword(string $email): bool
{
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email address: " . $email); // Log the error for debugging
    return false;
  }

  // 2. Generate a Unique Token
  $token = bin2hex(random_bytes(32)); // Secure random bytes for token

  // 3. Store the Token and User ID in the Database
  //   (Replace this with your actual database interaction code)
  $db_result = database_insert_token($email, $token); // See function definition below

  if ($db_result === false) {
    error_log("Failed to store token in database for email: " . $email);
    return false;
  }


  // 4. Send the Password Reset Email
  $subject = "Password Reset";
  $message = "Please click the following link to reset your password: <a href='" . base_url() . "/reset-password?token=" . urlencode($token) . "'>Reset Password</a>"; // Build URL dynamically
  $headers = "From: " . get_admin_email() . "\r
"; // Replace with your admin email
  $result = mail($email, $subject, $message, $headers);

  if ($result === false) {
    error_log("Failed to send password reset email to: " . $email);
    // Consider retrying the email later or logging more details.
    // In a production environment, use a more robust email sending library
    // or service (e.g., SendGrid, Mailgun)
    return false;
  }

  return true;
}


/**
 * Placeholder function for database insertion.  Replace with your actual
 * database code. This function demonstrates the intended interaction.
 *
 * @param string $email The user's email address.
 * @param string $token The unique token generated.
 * @return bool True on successful insertion, false otherwise.
 */
function database_insert_token(string $email, string $token): bool
{
  // Simulate a database insertion (replace with your actual logic)
  // In a real application, you'd use a database query here.

  // For demonstration purposes, we'll just check if the email exists in a simple array.
  // This is highly insecure for a real application.

  $users = [
    'test@example.com' => '', // Replace with your user data
    'another@example.com' => '',
  ];


  if (isset($users[$email])) {
    // You might want to update an existing record or handle the case where the user
    // already has a token.
    return true;
  } else {
    return false; // Email not found, so insertion failed.
  }
}

/**
 *  Placeholder function to get the admin email.  Replace with your actual logic.
 * @return string
 */
function get_admin_email(): string
{
  return "admin@example.com";
}



// Example Usage (For Testing)
// This is just for testing the function.  Don't include this in your production code.
// Add the form elements and logic to submit the email.
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  $email = $_POST['email'];
  if (isset($email)) {
    if (forgotPassword($email)) {
      echo "Password reset email sent to " . $email;
    } else {
      echo "Failed to send password reset email.";
    }
  } else {
    echo "Invalid email address.";
  }
}
?>

<!-- HTML Form for Email Submission (Include this in your HTML) -->
<form method="post" action="">
  <label for="email">Enter Email Address:</label>
  <input type="email" id="email" name="email" required>
  <button type="submit">Request Password Reset</button>
</form>


<?php

// Configuration (adjust these to your needs)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_username';
$db_password = 'your_password';

// Function to reset password
function forgot_password($email, $new_password) {
    // 1. Connect to the Database
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
        // Handle connection error (e.g., log it, display an error message)
        die("Connection failed: " . $conn->connect_error);
    }

    // 2. Hash the New Password
    $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

    // 3. Update the Password in the Database
    $query = "UPDATE users SET password = '$hashed_password' WHERE email = '$email'";
    if ($conn->query($query) === TRUE) {
        // Password updated successfully
        return true;
    } else {
        // Handle update error (e.g., log it, display an error message)
        echo "Error updating password: " . $conn->error;
        return false;
    }

    // 4. Close the connection
    $conn->close();
}


// Example Usage (This is just for demonstration - you'll need to integrate this into your form)
// In a real application, this would come from a form submission.

// Get email and new password from the user (replace with actual form input)
//$email = $_POST['email'];
//$new_password = $_POST['new_password'];

//if (isset($email) && isset($new_password)) {
//    if (empty($email) || empty($new_password)) {
//        echo "Error: Please fill in all fields.";
//    } else {
//        if (forgot_password($email, $new_password)) {
//            echo "Password reset successful! Please check your email for instructions.";
//        } else {
//            echo "Password reset failed.";
//        }
//    }
//} else {
//    echo "Error: Email and new password are required.";
//}


// Important Considerations and Enhancements:

// 1. Security:
//    - **Input Validation and Sanitization:**  Always validate and sanitize user input *before* using it in your database queries.  This prevents SQL injection attacks. Use prepared statements (see below) for the best protection.
//    - **Rate Limiting:**  Implement rate limiting to prevent brute-force password reset attempts.
//    - **Session Management:** Use secure session management techniques.
//    - **HTTPS:**  Always use HTTPS to encrypt the communication between the user's browser and your server.

// 2.  Prepared Statements (Strongly Recommended):
//   Prepared statements prevent SQL injection attacks by separating the SQL code from the user data.  Here's how to use them:

//   
//   // Assuming $stmt is your prepared statement
//   $stmt->bind_param("s", $new_password); // 's' indicates a string
//   $stmt->execute();
//   

// 3. Email Sending:
//   - This example only updates the password in the database.  You'll need to add code to send an email to the user with instructions on how to reset their password.  Use a reliable email library or service.
//   - The email should contain a link that the user can click to set a new password (using a temporary password and then requiring the user to change it upon first login).

// 4. Temporary Password:
//    - It's generally best practice to set a temporary password for the user upon reset, and then require them to change it upon their first login.  This provides an extra layer of security.

// 5.  Error Handling:
//    -  Improve error handling to provide more informative messages to the user and/or log errors for debugging.

// 6. User Table Structure:
//   -  Ensure your `users` table has columns for `email`, `password`, and potentially a `password_reset_token` column if you are using token-based password reset.

// 7. Password Reset Token (if using):
//     - Implement a token-based password reset system instead of directly hashing the new password.  This is generally more secure.
//     - Generate a unique, random token for each reset request.
//     - Store the token in the database, associated with the user's email.
//     -  When the user clicks the reset link, verify the token before updating the password.
//     -  After the user resets the password, invalidate the token.

?>


<?php

// Assuming you have a database connection established (e.g., $pdo)
// and a table named 'users' with columns 'email', 'id', etc.

function forgotPassword($email, $pdo) {
  // 1. Check if the email exists in the database
  $stmt = $pdo->prepare("SELECT id FROM users WHERE email = :email");
  $stmt->bindParam(':email', $email, PDO::PARAM_STR);
  $stmt->execute();

  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    // Email doesn't exist
    return false;
  }

  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32)); // Generates a strong random token

  // 3. Create a token reset record in the database
  $stmt = $pdo->prepare("INSERT INTO password_resets (user_id, token, expires_at) VALUES (:user_id, :token, :expires_at)");
  $stmt->bindParam(':user_id', $user['id'], PDO::PARAM_INT);
  $stmt->bindParam(':token', $token, PDO::PARAM_STR);
  $expires_at = date('Y-m-d H:i:s', time() + (24 * 60 * 60)); // Token expires after 24 hours
  $stmt->bindParam(':expires_at', $expires_at, PDO::PARAM_STR);
  $stmt->execute();

  // 4. Send the reset email
  $to = $email;
  $subject = 'Password Reset';
  $message = "Please click the following link to reset your password: " .  urlencode("http://yourwebsite.com/reset_password?token=$token") . " This link will expire in 24 hours.";  // Ensure URL encoding for special characters

  $headers = "From: yourwebsite@example.com";  // Replace with your email address

  mail($to, $subject, $message, $headers);

  // 5. Return true to indicate success
  return true;
}

// Example usage:
// $email = $_POST['email'];  // Get email from form submission

// if (isset($email)) {
//   if (forgotPassword($email, $pdo)) {
//     echo "Password reset email has been sent to $email.";
//   } else {
//     echo "Invalid email address or user not found.";
//   }
// }
?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user.
 * @param string $newPassword The new password.
 * @return bool True if password reset was successful, false otherwise.
 */
function forgotPassword(string $email, string $newPassword) {
  // 1. Validate Input (Important Security Step!)
  if (empty($email) || empty($newPassword)) {
    return false; // Required fields must be filled.
  }

  // 2. Check if user exists
  $user = getUserByEmail($email);
  if ($user === false) {
    return false; // User not found.
  }

  // 3. Hash the new password (VERY IMPORTANT!)
  $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT); // Uses PHP's built-in password hashing

  // 4. Update the user's password in the database
  $result = updateUserPassword($user->id, $hashedNewPassword); // Adjust this to your database update query

  if ($result === false) {
    return false; // Database update failed
  }

  return true; // Password reset successful
}


/**
 * Helper function to get a user by their email address.
 * This is a placeholder - replace with your actual database query
 *
 * @param string $email The email address to search for.
 * @return object|false User object if found, false otherwise.
 */
function getUserByEmail(string $email) {
  //  This is a placeholder! Replace with your database query.
  //  Example using MySQLi:
  //  $stmt = $db->prepare("SELECT * FROM users WHERE email = ?");
  //  $stmt->bind_param("s", $email);
  //  $stmt->execute();
  //  $result = $stmt->get_result();
  //  if ($result->num_rows > 0) {
  //    $user = $result->fetch_object();
  //    return $user;
  //  }
  //  return false;


  // Example for demonstration:
  $users = [
    ['id' => 1, 'email' => 'test@example.com', 'name' => 'Test User'],
    ['id' => 2, 'email' => 'another@example.com', 'name' => 'Another User']
  ];
  foreach ($users as $user) {
    if ($user['email'] === $email) {
      return new object(['id' => $user['id'], 'email' => $user['email'], 'name' => $user['name']]);
    }
  }
  return false;
}

/**
 * Helper function to update a user's password in the database.
 * This is a placeholder - replace with your actual database query.
 *
 * @param int $userId The ID of the user to update.
 * @param string $hashedPassword The hashed password.
 * @return bool True if update was successful, false otherwise.
 */
function updateUserPassword(int $userId, string $hashedPassword) {
  //  This is a placeholder! Replace with your actual database query.
  // Example using MySQLi:
  //  $stmt = $db->prepare("UPDATE users SET password = ? WHERE id = ?");
  //  $stmt->bind_param("ss", $hashedPassword, $userId); // 's' for string
  //  $result = $stmt->execute();
  //  return $result;


  // Example for demonstration:
  // In this demo, we simply simulate the database update
  // In a real application, you would update a database row.
  return true;
}



// Example Usage:

// Simulate receiving the email and new password from a form submission
$email = "test@example.com"; // Replace with the user's email
$newPassword = "newSecretPassword";

if (isset($email) && isset($newPassword)) {
  if (forgotPassword($email, $newPassword)) {
    echo "Password reset email sent!  Check your inbox.";
  } else {
    echo "Failed to reset password. Please try again.";
  }
} else {
    echo "Please fill in the email and new password fields.";
}


?>


<?php

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_db_name";

// Function to handle the forgot password process
function forgotPassword($email) {
    // 1. Validate Email (Basic Check)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // 2. Query the database to find the user
    $conn = new mysqli($host, $username, $password, $database);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $sql = "SELECT id, password, email FROM users WHERE email = '$email'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $user = $result->fetch_assoc();
        $userId = $user['id'];
        $hashedPassword = $user['password']; // Store hashed password in the database

        // 3. Generate a unique token (for security - DO NOT store in database)
        $token = bin2hex(random_bytes(32));  // Secure random token

        // 4.  Store the token in a temporary table (or session)
        //  This is necessary so we can later reset the password using the token.
        //  For a production system, consider a more secure temporary storage
        //  (e.g., a Redis cache or a dedicated temporary table with expiry)
        $conn2 = new mysqli($host, $username, $password, $database);
        if ($conn2->connect_error) {
            die("Connection failed: " . $conn2->connect_error);
        }

        $sql2 = "INSERT INTO password_resets (user_id, token, expires_at) VALUES ('$userId', '$token', NOW())"; // Store in a password_resets table
        if ($conn2->query($sql2) === TRUE) {
            // 5. Send the password reset email
            $to = $email;
            $subject = "Password Reset Request";
            $message = "Click this link to reset your password: " . $_SERVER['REQUEST_SCHEME'] . "://localhost/reset_password.php?token=$token";  // IMPORTANT:  Use HTTPS for production!
            $headers = "From: your_email@example.com";  // Replace with your email address

            mail($to, $message, $headers);

            return "Password reset email sent to $email.";
        } else {
            return "Error creating password reset record.";
        }


    } else {
        return "User not found with email $email.";
    }

    $conn2->close();
    $conn->close();
}


// Example Usage (This is just a demonstration - you'll need to integrate this into your form)
// Assuming you've submitted a form with an email address
// $email = $_POST['email'];  // Get the email from the form

// $result = forgotPassword($email);
// echo $result; // Display the result (e.g., "Password reset email sent...")
?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique token and sends an email to the user
 * with a link to reset their password.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @param string $baseUrl The base URL of your website.  This is necessary for generating the reset link.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $baseUrl): bool
{
  // Sanitize input -  VERY IMPORTANT
  $email = filter_var($email, FILTER_SANITIZE_EMAIL);

  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email address provided: " . $email); // Log the error.  Don't just echo.
    return false;
  }


  // 1. Generate a Unique Token
  $token = bin2hex(random_bytes(32)); // Use a strong, random token


  // 2. Store the Token and User ID in the Database (Simplified Example - Replace with your actual database logic)
  // IMPORTANT: NEVER store passwords in plaintext. Always hash them.
  // This example uses an array for simplicity.  In a real application, you'd use a database.
  $user_id = getUserIdByEmail($email); // Assume this function retrieves the user ID from your database

  if ($user_id === false) {
    error_log("User not found with email: " . $email);
    return false;
  }

  $reset_data = [
    'user_id' => $user_id,
    'token' => $token,
    'expiry' => time() + (3600) // Token expires after 1 hour (adjust as needed)
  ];


  // 3.  Save the token and expiry into the database for the user.
  // In a real application, this would be a database insert.
  saveResetToken($reset_data); // Assume this function saves the token and expiry


  // 4.  Create the Reset Link
  $reset_url = $baseUrl . "/reset-password?token=" . urlencode($token);

  // 5.  Send the Email
  $subject = "Password Reset Request";
  $message = "Click the link below to reset your password:
" . $reset_url . "

This link will expire in one hour.";
  $headers = "From: " .  "Your Website <noreply@yourwebsite.com>" . "\r
"; // Replace with your email address

  if (mail($email, $subject, $message, $headers)) {
      return true;
  } else {
      error_log("Failed to send email to " . $email);
      // Optionally, delete the token from the database here if sending the email fails.
      // This prevents the token from being used if the email couldn't be sent.
      // deleteResetToken($user_id, $token); // Add this function if you have it
      return false;
  }
}

// ************************************************************************
// Placeholder functions - Replace these with your actual database logic.
// ************************************************************************

/**
 * Placeholder function to retrieve the user ID from the email.  Replace with your database query.
 *
 * @param string $email The email address.
 * @return int|false The user ID, or false if the user is not found.
 */
function getUserIdByEmail(string $email): int|false
{
  // Replace this with your database query
  // Example (assuming you have a 'users' table with an 'email' column and an 'id' column):
  // return mysqli_query($db, "SELECT id FROM users WHERE email = '$email'") ? mysqli_fetch_assoc($result)['id'] : false;
  // Returning false when no user is found.
  return false;
}

/**
 * Placeholder function to save the reset token and expiry to the database.
 *
 * @param array $reset_data An array containing the user_id, token, and expiry.
 * @return void
 */
function saveResetToken(array $reset_data): void
{
  // Replace this with your database insert logic
  // Example (assuming you have a 'reset_tokens' table):
  // $query = "INSERT INTO reset_tokens (user_id, token, expiry) VALUES ('" . $reset_data['user_id'] . "', '" . $reset_data['token'] . "', '" . $reset_data['expiry'] . "')";
  // mysqli_query($db, $query);
  //  //  // Or, if using prepared statements:
  //  //  // $stmt = mysqli_prepare($db, "INSERT INTO reset_tokens (user_id, token, expiry) VALUES (?, ?, ?)");
  //  //  // mysqli_stmt_bind_param($stmt, int, str, int);
  //  //  // mysqli_stmt_execute($stmt);
}


/**
 * Placeholder function to delete the reset token from the database.
 *
 * @param int $user_id The user ID.
 * @param string $token The token.
 * @return void
 */
function deleteResetToken(int $user_id, string $token): void
{
    // Replace this with your database delete logic.  For example:
    // mysqli_query($db, "DELETE FROM reset_tokens WHERE user_id = '$user_id' AND token = '$token'");
}



// Example Usage (for testing - replace with your actual website URL)
$baseUrl = "http://localhost:8000"; // Replace with your website URL

$email = "test@example.com"; // Replace with a valid email address

if (forgotPassword($email, $baseUrl)) {
  echo "Password reset email sent to " . $email . "
";
} else {
  echo "Failed to send password reset email.
";
}
?>


<?php

// Assume you have a database connection established and available as $db

// Function to handle the forgot password process
function forgot_password($email) {
  // 1. Validate Email (Crucial for security)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if the user exists in the database
  $stmt = $db->prepare("SELECT id, password, email FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    return "User not found. Please ensure you entered the correct email address.";
  }

  // 3. Generate a Unique Token (Important for security)
  $token = bin2hex(random_bytes(32));  // Use a cryptographically secure random source.

  // 4. Update the user's record with the token
  $stmt = $db->prepare("UPDATE users SET password_reset_token = ?, password_reset_expiry = ? WHERE email = ?");
  $stmt->execute([$token, time() + 3600, $email]); // expiry time 1 hour, adjust as needed

  // 5.  Send an Email with the Token & Reset Link
  $to = $email;
  $subject = "Password Reset Link";
  $message = "Click this link to reset your password: " .  $_SERVER['REQUEST_URI'] . "?token=" . $token;
  $headers = "From: your_website@example.com\r
"; //Replace with your email
  mail($to, $message, $headers);

  return "Please check your email to reset your password.";
}


// Example Usage (This would be part of your form handling)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];

  if ($email) {
    $result = forgot_password($email);
    echo "<p>" . $result . "</p>";
  } else {
    echo "<p>Please enter your email address.</p>";
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="">
    <label for="email">Email Address:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established
// For demonstration purposes, we'll use a hardcoded database
$db_host = 'localhost';
$db_name = 'my_database';
$db_user = 'my_user';
$db_password = 'my_password';

// Function to reset the password
function forgotPassword($email, $newPassword) {
  // 1. Validate the email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false; // Invalid email format
  }

  // 2. Connect to the database
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  // Check connection
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // 3. Hash the new password (IMPORTANT for security)
  $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);

  // 4. Update the user's password in the database
  $query = "UPDATE users SET password = '$hashedPassword' WHERE email = '$email'"; // Replace 'users' with your table name
  if ($conn->query($query) === TRUE) {
    return true; // Password reset successful
  } else {
    error_log("Query failed: " . $conn->error); // Log the error for debugging
    return false; // Password reset failed
  }

  // 5. Close the connection
  $conn->close();
}


// Example Usage (Simulated Form Handling - REPLACE with your actual form)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $newPassword = $_POST["new_password"];

  if (empty($email) || empty($new_password)) {
    echo "<p style='color: red;'>Email and new password are required.</p>";
  } else {
    // Call the forgotPassword function
    if (forgotPassword($email, $newPassword)) {
      echo "<p style='color: green;'>Password reset successful!  Check your email.</p>";
      // You might want to send an email notification here
    } else {
      echo "<p style='color: red;'>Password reset failed. Please try again.</p>";
    }
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="new_password">New Password:</label>
    <input type="password" id="new_password" name="new_password" required><br><br>

    <input type="submit" value="Reset Password">
  </form>

</body>
</html>


<?php

// This is a simplified example and should be used with caution.
// In a real-world scenario, you'd want to add:
// - Stronger security measures (e.g., hashing passwords properly)
// - Email validation
// - Input sanitization to prevent vulnerabilities like SQL injection
// - Logging for debugging and security audits
// - Rate limiting to prevent brute-force attacks

// **IMPORTANT:**  Never store passwords in plain text.  Always hash them.
// This example uses a placeholder for hashing, you MUST implement a secure hashing method.

class UserForgotPassword {

    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function resetPassword($email) {
        // 1. Check if the user exists
        $user = $this->db->query("SELECT id, email FROM users WHERE email = ?", [$email]); // Replace 'users' with your table name
        if ($user->rowCount() === 0) {
            return false; // User not found
        }

        // 2. Generate a unique, time-based token
        $token = bin2hex(random_bytes(32)); // Use a strong random number generator

        // 3. Store the token in the database, linked to the user's ID
        $this->db->query("UPDATE users SET reset_token = ? WHERE email = ?", [$token, $email]);


        // 4.  Send an email with a link containing the token.
        $subject = 'Password Reset Link';
        $to = $email;
        $from = 'your_email@example.com'; // Replace with your email
        $message = "Click this link to reset your password: " . $_SERVER['REQUEST_SCHEME'] . "://yourdomain.com/reset-password?token=" . $token; // Replace 'yourdomain.com'
        $headers = "From: " . $from . "\r
";
        $headers .= "Reply-To: " . $from . "\r
";

        mail($to, $message, $headers); // Using PHP's built-in mail function - may require configuration.


        return true;
    }

    public function verifyToken($token) {
        // 1. Check if the token exists in the database
        $user = $this->db->query("SELECT id, email FROM users WHERE reset_token = ?", [$token]);

        if ($user->rowCount() === 0) {
            return false; // Invalid token
        }

        // 2.  If the token exists, delete it from the database to invalidate it.
        $this->db->query("UPDATE users SET reset_token = NULL WHERE reset_token = ?", [$token]);

        return true;
    }

    public function setPasswordForUser($email, $newPassword) {
        // 1.  Securely hash the new password
        $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);

        // 2.  Update the user's password in the database
        $this->db->query("UPDATE users SET password = ? WHERE email = ?", [$hashedPassword, $email]);

        return true;
    }
}



// **Example Usage (illustrative - replace with your actual database connection)**
$db = new PDO("mysql:host=localhost;dbname=your_database", "your_username", "your_password");

// 1. Initiate password reset
$email = "testuser@example.com"; // Replace with the user's email
$reset = new UserForgotPassword($db);
$reset->resetPassword($email);

echo "Password reset link sent to " . $email . "
";


//  Later, when the user clicks the link (in a separate page):
//  1.  Verify the token
//  2.  If the token is valid, set the user's password using the setPasswordForUser method
//  3.  Invalidate the token (delete from the database)
?>


<?php

// Important: Replace 'your_database_file.db' with your actual database file
// and 'your_email' with the email address for notifications.
// This is a VERY basic example and should be adapted for a real-world scenario.

// Database configuration (Adjust these to match your setup)
$db_file = 'your_database_file.db'; // e.g., 'users.db'
$email_notification = 'your_email@example.com';

// Function to reset password
function forgotPassword($email, $db_file, $email_notification) {
  // 1. Validate Input (Crucial for security)
  if (empty($email)) {
    return 'Error: Email address is required.';
  }

  // 2. Fetch User Data
  $users = [];
  if (file_exists($db_file)) {
    $users = json_decode(file_get_contents($db_file), true);
  }


  // 3. Check if user exists
  if (!isset($users[$email])) {
    return 'Error: User not found.';
  }

  // 4. Generate a unique, secure token
  $token = bin2hex(random_bytes(32));  // Creates a 32-byte random string
  // Generate a unique token  (Better than just using a string)

  // 5. Update User Data with Token and Reset Link
  $users[$email]['reset_token'] = $token;
  $users[$email]['reset_link'] = 'https://yourdomain.com/reset_password?token=' . $token; // Replace with your domain

  // 6. Save Updated Data to Database
  if (file_put_contents($db_file, json_encode($users, JSON_PRETTY_PRINT)) === FALSE) {
    return 'Error: Could not save reset token.';
  }

  // 7. Send Password Reset Email
  $subject = 'Password Reset Request';
  $message = "To reset your password, please click on the following link: " . $users[$email]['reset_link'];
  $headers = "From: Your Website <your_email@example.com>"; // Adjust from address

  if (mail($email, $subject, $message, $headers)) {
    return 'Password reset link sent to your email.';
  } else {
    return 'Error: Could not send email.';
  }
}

// Example Usage (for testing)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  $email = $_POST['email'];

  $result = forgotPassword($email, $db_file, $email_notification);
  echo "<p>Result: " . htmlspecialchars($result) . "</p>";
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Request Password Reset</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// This is just a basic example - production code needs more robust security
// and error handling.

// Function to reset the password
function forgotPassword($email) {
    // 1. Check if the email exists in the user table
    $user = getUserByEmail($email);

    if (!$user) {
        return false; // Email not found
    }

    // 2. Generate a unique, temporary password token
    $token = generateUniqueToken();

    // 3. Store the token and user ID in the database (temporary table)
    //    This is for demonstration purposes.  In a real app, you'd likely 
    //    use a separate table for password resets, potentially with a 
    //    time limit.
    $result = saveResetToken($user['id'], $token);
    if (!$result) {
        return false; // Failed to save token
    }

    // 4. Send an email to the user with a password reset link
    $resetLink = generateResetLink($token, $user['email']);
    sendResetPasswordEmail($user['email'], $resetLink);

    return true; // Password reset link sent successfully
}


// Helper functions (implement these based on your database and email setup)

/**
 * Retrieves a user from the database based on their email address.
 *
 * @param string $email The email address to search for.
 * @return array|null  An array containing user data if found, or null if not.
 */
function getUserByEmail($email) {
    // Replace with your database query.  This is a placeholder!
    // Example (MySQL):
    // $query = "SELECT * FROM users WHERE email = '$email'";
    // $result = mysqli_query($db, $query);
    // if (mysqli_num_rows($result) > 0) {
    //     $user = mysqli_fetch_assoc($result);
    //     return $user;
    // }
    // return null;

    // Placeholder:  Simulating a user
    $users = [
        ['id' => 1, 'email' => 'test@example.com']
    ];

    foreach ($users as $user) {
        if ($user['email'] == $email) {
            return $user;
        }
    }
    return null;
}


/**
 * Generates a unique token.  Use a cryptographically secure method for production.
 *
 * @return string A unique token.
 */
function generateUniqueToken() {
    return bin2hex(random_bytes(32)); // Uses random_bytes for better security
}


/**
 * Saves the token and user ID to the database.
 *
 * @param int $userId The user ID.
 * @param string $token The token.
 * @return bool True if successful, false otherwise.
 */
function saveResetToken($userId, $token) {
    // Replace with your database query.
    // Example (MySQL):
    // $query = "INSERT INTO password_resets (user_id, token, created_at) VALUES ('$userId', '$token', NOW())";
    // $result = mysqli_query($db, $query);
    // return $result;

    // Placeholder:  Simulating successful save
    return true;
}



/**
 * Generates a reset link with the token.
 *
 * @param string $token The token.
 * @param string $email The user's email address.
 * @return string The reset link.
 */
function generateResetLink($token, $email) {
    return "/reset_password?token=$token&email=$email"; // Adjust URL accordingly
}


/**
 * Sends an email with the reset link.  Replace with your email sending logic.
 *
 * @param string $to       The recipient's email address.
 * @param string $resetLink The reset link.
 */
function sendResetPasswordEmail($to, $resetLink) {
    // Implement your email sending logic here (e.g., using PHPMailer or similar)
    // This is just a placeholder.
    echo "Sending reset password email to: " . $to . " with link: " . $resetLink;
}



// Example Usage (Demonstration)
// Note:  This part is for testing.  Don't expose this directly in a production environment.
//  Sanitize and validate any user input *before* calling the function.


//  Simulate a password reset request
$email = 'test@example.com';

if (forgotPassword($email)) {
    echo "Password reset link sent to $email. Check your email!";
} else {
    echo "Failed to generate password reset link for $email.";
}


?>


<?php

// Ensure this file is part of a secure application and not directly accessible
// to prevent abuse.  Consider serving this through an API endpoint.

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_username';
$db_password = 'your_password';

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if password reset email was sent successfully, false otherwise.
 */
function forgot_password(string $email)
{
    // Sanitize input - Essential for security
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);

    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return false; // Invalid email format
    }

    // Check if the user exists
    $stmt = $GLOBALS['db']->prepare("SELECT id, email FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        return false; // User not found
    }

    // Generate a unique token
    $token = bin2hex(random_bytes(32));

    // Store the token in the database
    $stmt = $GLOBALS['db']->prepare("UPDATE users SET reset_token = ?, reset_token_expiry = ? WHERE email = ?");
    $stmt->execute([$token, time() + 3600, $email]); // Token expires in 1 hour (adjust as needed)

    // Send a password reset email
    $subject = 'Password Reset Request';
    $headers = 'From: your_email@example.com' . "\r
";
    $message = "Click <a href='" . $_SERVER['PHP_SELF'] . "?reset={$token}' >here</a> to reset your password.";
    $headers .= "MIME-Version: 1.0" . "\r
";
    $headers .= "Content-type: text/html; charset=UTF-8" . "\r
";

    if (mail($email, $subject, $message, $headers)) {
        return true;
    } else {
        // Handle email sending failure (logging recommended)
        error_log("Failed to send password reset email for " . $email);
        return false;
    }
}

// Example usage (using a mock database for demonstration)
// This part would be replaced with your actual database interaction.

// Mock database connection (Replace with your actual PDO connection)
$GLOBALS['db'] = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_password);

// Example usage
$email = 'test@example.com';  // Replace with a real email address
if (forgot_password($email)) {
    echo "Password reset email sent to " . $email . "
";
} else {
    echo "Failed to send password reset email for " . $email . "
";
}

?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and that you have a 'users' table with a 'email' column.

// Function to handle password reset requests
function forgot_password($email) {
  // Validate input - Important for security!
  if (empty($email)) {
    return 'Invalid email address.';
  }

  // Sanitize the email address (prevent SQL injection)
  $email = filter_var($email, FILTER_SANITIZE_EMAIL);

  // Check if the email exists in the database
  $result = mysqli_query($db, "SELECT id, password_reset_token FROM users WHERE email = '$email'");

  if (mysqli_num_rows($result) > 0) {
    // Generate a unique password reset token
    $token = bin2hex(random_bytes(32)); // Use cryptographically secure random bytes

    // Insert the token into the database for this user
    mysqli_query($db, "UPDATE users SET password_reset_token = '$token' WHERE email = '$email'");

    // Store the token in a session or temporary table for later use (more secure than storing in a session)
    //  For this example, we'll use a temporary table
    mysqli_query($db, "CREATE TEMPORARY TABLE IF NOT EXISTS reset_tokens (id INT, email VARCHAR(255), token VARCHAR(255))");
    mysqli_query($db, "INSERT INTO reset_tokens (id, email, token) VALUES (1, '$email', '$token')");


    // Return a success message and instructions
    return 'We have sent a password reset link to your email address.  ' .
           'Please check your inbox and follow the instructions in the email.';

  } else {
    // Email doesn't exist
    return 'Email address not found.';
  }
}


// Example usage (in a form or API endpoint):
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $reset_message = forgot_password($email);
    echo $reset_message; // Display the message
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Database connection details (replace with your actual credentials)
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$dbname = 'your_database_name';

// Function to handle the forgot password process
function forgotPassword($email) {
  // 1. Check if the email exists in the database
  $conn = new mysqli($host, $username, $password, $dbname);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  $stmt = $conn->prepare("SELECT id, email FROM users WHERE email = ?");
  $stmt->bind_param("s", $email); // 's' indicates a string parameter

  if ($stmt->execute() === false) {
    echo "Error executing query: " . $stmt->error;
    $stmt->close();
    $conn->close();
    return false;
  }

  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    $stmt->close();
    $conn->close();
    return false; // Email not found
  }

  $user = $result->fetch_assoc();
  $userId = $user['id'];
  $userEmail = $user['email'];
  $stmt->close();

  // 2. Generate a unique token and store it in the database
  $token = bin2hex(random_bytes(32)); // Generate a secure random token
  $token_stored = false;

  $stmt = $conn->prepare("INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, NOW())");
  $stmt->bind_param("is", $userId, $token);

  if ($stmt->execute() === false) {
    echo "Error inserting token: " . $stmt->error;
    $stmt->close();
    $conn->close();
    return false;
  }

  // 3. Send an email with the reset link
  $to = $email;
  $subject = 'Password Reset';
  $message = "Please click on the following link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . "?reset=" . $token . "'>Reset Password</a>";
  $headers = "From: your_email@example.com" . "\r
"; // Replace with your email address

  mail($to, $subject, $message, $headers);

  // 4. Close the connection
  $conn->close();

  return true; // Password reset link sent successfully
}


// Example usage (this is just a demonstration - typically you'd have a form submission)
if ($_SERVER["REQUEST_METHOD"] == "GET" && isset($_GET['email'])) {
  $email = $_GET['email'];
  if (forgotPassword($email)) {
    echo "Password reset link sent to " . $email;
  } else {
    echo "Error: Could not send reset link.";
  }
}

?>


<?php

/**
 * Function to reset a user's password.
 *
 * @param string $email The email address of the user.
 * @param string $newPassword The new password for the user.
 * @param PDO $pdo The database connection object (PDO object).
 * @param string $table_name The name of the table containing user information (e.g., 'users').
 * @param string $email_column The column name for the email address (e.g., 'email').
 * @param string $password_column The column name for the password (e.g., 'password').
 *
 * @return bool True if the password was reset successfully, false otherwise.
 */
function forgotPassword(string $email, string $newPassword, PDO $pdo, string $table_name = 'users', string $email_column = 'email', string $password_column = 'password')
{
  try {
    // 1. Check if the email exists
    $stmt = $pdo->prepare("SELECT id FROM " . $table_name . " WHERE " . $email_column . "= :email");
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    $stmt->execute();

    if ($stmt->rowCount() == 0) {
      // Email not found
      return false;
    }

    // 2. Hash the new password
    $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

    // 3. Update the password in the database
    $stmt = $pdo->prepare("UPDATE " . $table_name . " SET " . $password_column . " = :hashedPassword WHERE " . $email_column . "= :email");
    $stmt->bindParam(':hashedPassword', $hashedNewPassword, PDO::PARAM_STR);
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    $stmt->execute();

    if ($stmt->rowCount() > 0) {
      // Password updated successfully
      return true;
    } else {
      // Password update failed
      return false;
    }

  } catch (PDOException $e) {
    // Handle database errors
    error_log("Database error: " . $e->getMessage()); // Log the error for debugging
    return false;
  }
}

// Example Usage (Illustrative - requires a database connection)
// IMPORTANT:  This is a demonstration.  Don't directly use this in production
// without proper validation, security measures (CSRF protection, etc.) and logging.

// Dummy database connection (replace with your actual connection)
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
  $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8mb4", $username, $password);
  $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
} catch (PDOException $e) {
  die("Database connection failed: " . $e->getMessage());
}

$emailToReset = 'testuser@example.com'; // Replace with the user's email
$newPassword = 'NewSecurePassword123';

if (forgotPassword($emailToReset, $newPassword, $pdo)) {
  echo "Password reset successful.  Please check your email.";
} else {
  echo "Password reset failed.  Please try again.";
}

//Close the database connection (important to release resources)
$pdo = null;
?>


<?php

// Assume you have a database connection established (e.g., $conn)
// and a table named 'users' with fields 'email' and 'password'

// Function to handle forgotten passwords
function forgotPassword($email, $conn) {
  // 1. Validate Email
  $email = trim($email); // Remove leading/trailing whitespace
  if (empty($email)) {
    return 'Error: Please enter your email address.';
  }

  // Check if the email exists in the database
  $stmt = $conn->prepare("SELECT id, email FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    return 'Error: Email address not found.';
  }

  // 2. Generate a Unique Token
  $token = bin2hex(random_bytes(32));  // Generates a 32-byte random binary string, then converts to hexadecimal

  // 3. Prepare Reset Link
  $reset_link = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $token . '&id=' . $user['id'];

  // 4. Send Password Reset Email (Requires Email Sending Function - example below)
  if (sendPasswordResetEmail($user['email'], 'Password Reset Link', $reset_link) !== true) {
    return 'Error: Could not send password reset email.';
  }

  return 'Password reset email has been sent to ' . $user['email'];
}


// -----------------------------------------------------------------
//  Example Email Sending Function (Replace with your actual email sending method)
// -----------------------------------------------------------------

function sendPasswordResetEmail($to, $subject, $link) {
  // **IMPORTANT:** Replace this with your actual email sending code.
  // This is a placeholder.  You need to use a real email sending library or function.
  //
  // Example using a simple (but insecure) mail function:
  //
  $headers = "From: your_email@example.com" . "\r
" .
            "Reply-To: your_email@example.com" . "\r
" .
            "X-Mailer: PHP";
  $message = "Please click the following link to reset your password: " . $link;
  return mail($to, $message, $headers);


  // **SECURITY WARNING:**  The mail() function is often unreliable and has security issues.
  //  Consider using a more robust email sending library (e.g., PHPMailer, SwiftMailer).
}

// -----------------------------------------------------------------
// Example Usage (for testing)
// -----------------------------------------------------------------

// Simulate a database connection
// (Replace this with your actual database connection)
$conn = new PDO("mysql:host=localhost;dbname=your_database", "username", "password");

// Example email input
$email = 'test@example.com';  // Replace with a valid test email

// Call the forgotPassword function
$result = forgotPassword($email, $conn);

// Display the result
echo $result;

?>


<?php

// IMPORTANT:  This code is for demonstration purposes only. 
// In a production environment, you absolutely MUST:
// 1.  Securely store your database credentials (e.g., using environment variables).
// 2.  Implement robust security measures like email verification, rate limiting,
//     and thorough input validation to prevent unauthorized access and attacks.
// 3.  Consider using a dedicated password reset library or service for enhanced security.

// Database connection details (Replace with your actual credentials!)
$dbHost = 'localhost';
$dbName = 'your_database_name';
$dbUser = 'your_database_user';
$dbPass = 'your_database_password';

// Email configuration (Replace with your email server details)
$emailFrom = 'your_email@example.com';
$emailTo = '%email%';  //  Placeholder for the user's email address
$emailSubject = 'Password Reset';
$emailHeaders = "From: $emailFrom\r
";
$emailBody = "To reset your password, please click on the following link: 
";
$emailBody .= '<a href="reset_password.php?token=' . generateToken() . '" >Reset Password</a>';
//  Note:  This link will expire after a certain time.


/**
 * Generates a unique, secure token for password reset.
 *
 * @return string A unique token.
 */
function generateToken() {
    return bin2hex(random_bytes(32)); //  32 bytes (256 bits) for a strong token
}

/**
 * Checks if a user exists in the database.
 *
 * @param string $email The user's email address.
 * @return bool True if the user exists, false otherwise.
 */
function userExists($email) {
    global $dbHost, $dbName, $dbUser, $dbPass;

    // Use prepared statement to prevent SQL injection.  IMPORTANT!
    $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

    if ($conn->connect_error) {
        die('Connection failed: ' . $conn->connect_error);
    }

    $sql = "SELECT id FROM users WHERE email = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $email); // 's' indicates a string parameter

    if ($stmt->execute() === false) {
        die('Error executing query: ' . $stmt->error);
    }

    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        return true;
    } else {
        return false;
    }

    $stmt->close();
    $conn->close();
}



/**
 * Resets the user's password.  (This is a placeholder; handle securely!)
 *
 * **WARNING: DO NOT directly use user input to set the password.  
 * This is an extremely vulnerable function in a real application!**
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password.
 * @return bool True if the password was reset successfully, false otherwise.
 */
function resetPassword($email, $newPassword) {
    global $dbHost, $dbName, $dbUser, $dbPass;

    // Use prepared statement to prevent SQL injection
    $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

    if ($conn->connect_error) {
        die('Connection failed: ' . $conn->connect_error);
    }

    $sql = "UPDATE users SET password = ? WHERE email = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ss", hash('argon2', $newPassword), $email);  // Using argon2 for hashing
    
    if ($stmt->execute() === false) {
        die('Error executing query: ' . $stmt->error);
    }

    $stmt->close();
    $conn->close();
    return true;
}




// Example usage (Demonstration -  Do not directly use in a live application)
//  This is just for illustrating how the functions would be called.
if (isset($_POST['email']) && isset($_POST['new_password'])) {
    $email = $_POST['email'];
    $newPassword = $_POST['new_password'];

    // IMPORTANT: Input Validation and Sanitization are CRITICAL here!
    //  Validate email format, check password length, etc.

    if (userExists($email)) {
        resetPassword($email, $newPassword);

        echo "Password reset link has been sent to your email address.";
    } else {
        echo "User with this email does not exist.";
    }
}

// Example HTML form for initiating the password reset:
?>
<!DOCTYPE html>
<html>
<head>
    <title>Password Reset</title>
</head>
<body>
    <h1>Password Reset</h1>

    <form method="post" action="reset_password.php">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required><br><br>

        <label for="new_password">New Password:</label>
        <input type="password" id="new_password" name="new_password" required><br><br>

        <input type="submit" value="Reset Password">
    </form>
</body>
</html>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique token, sends an email with a reset link,
 * and flags the user's account as requiring a password reset.
 *
 * @param string $email The user's email address.
 * @param string $token A unique token for security.  This should be generated
 *                      using a cryptographically secure random number generator
 *                      (e.g., `random_bytes` or `random_int`).
 * @param string $reset_link_expiry  The expiry time for the reset link in seconds.
 *                                     Defaults to 3600 seconds (1 hour).
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email, string $token, string $reset_link_expiry = 3600)
{
    // 1. Validate Email (Basic check - expand this for production)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided."); // Log the error (for debugging)
        return false;
    }

    // 2. Check if user exists
    $user = getUserById($email); // Assuming you have a function getUserById()
    if (!$user) {
        error_log("User with email {$email} not found.");
        return false;
    }

    // 3. Generate a Unique Token
    $token = generate_unique_token(); // Assuming you have a function generate_unique_token()

    // 4.  Store the token and expiry in the database.
    //  This is a placeholder - you MUST implement this.  Do *not* just
    //  hardcode this.
    $result = store_token($user->id, $token, $reset_link_expiry);
    if (!$result) {
        error_log("Failed to store token for user {$email}.");
        return false;
    }


    // 5. Create the reset link
    $reset_link = "/reset_password?token={$token}&expiry={$reset_link_expiry}";

    // 6. Send the reset email
    if (!send_reset_password_email($user->email, $reset_link)) {
        error_log("Failed to send reset password email to {$user->email}.");
        // Optionally, you might want to delete the stored token here if email sending fails.
        // delete_token($user->id, $token);
        return false;
    }

    return true;
}


/**
 * Placeholder functions - Implement these based on your specific database setup.
 */

/**
 * Retrieves a user by their email address.
 *
 * @param string $email The user's email address.
 * @return User|null The User object if found, null otherwise.
 */
function getUserById(string $email): ?User {
    // This is a placeholder - implement your database query here.
    //  Example (using a hypothetical User class):
    //  $query = "SELECT * FROM users WHERE email = ?";
    //  $stmt = $db->prepare($query);
    //  $stmt->bind_param("s", $email);
    //  $stmt->execute();
    //  $result = $stmt->get_result();
    //  if ($result->num_rows > 0) {
    //      $row = $result->fetch_assoc();
    //      return new User($row['id'], $row['email'], $row['password'], ...);
    //  }
    //  return null;

    return null; // Placeholder
}


/**
 * Generates a unique, cryptographically secure token.
 *
 * @return string The unique token.
 */
function generate_unique_token(): string
{
    return random_bytes(32); // Generates a 32-byte (256-bit) random string.
    //  Alternatively, you could use random_int(32) if random_bytes is unavailable.
}

/**
 * Stores the token and expiry in the database.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token.
 * @param int $expiry The expiry time in seconds.
 * @return bool True on success, false on failure.
 */
function store_token(int $userId, string $token, int $expiry)
{
    // This is a placeholder - implement your database query here.
    //  Example:
    //  $query = "INSERT INTO password_tokens (user_id, token, expiry) VALUES (?, ?, ?)";
    //  $stmt = $db->prepare($query);
    //  $stmt->bind_param("iii", $userId, $token, $expiry);
    //  $result = $stmt->execute();
    //  return $result;

    return true; // Placeholder
}

/**
 * Deletes the token from the database.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token.
 * @return bool True on success, false on failure.
 */
function delete_token(int $userId, string $token)
{
    // This is a placeholder - implement your database query here.
    //  Example:
    //  $query = "DELETE FROM password_tokens WHERE user_id = ? AND token = ?";
    //  $stmt = $db->prepare($query);
    //  $stmt->bind_param("is", $userId, $token);
    //  $result = $stmt->execute();
    //  return $result;
    return true; // Placeholder
}



/**
 * Sends the reset password email.
 *
 * @param string $to The recipient's email address.
 * @param string $reset_link The reset password link.
 */
function send_reset_password_email(string $to, string $reset_link)
{
    // This is a placeholder - implement your email sending logic here.
    //  Example (using a hypothetical email library):
    //  $subject = "Password Reset";
    //  $message = "Click the link below to reset your password: " . $reset_link;
    //  $headers = "From: your-store@example.com\r
";
    //  $result = mail($to, $message, $headers);
    //  return $result === true;

    return true; // Placeholder
}


// Example usage (for testing - NEVER include this in production code)
// $email = "test@example.com";
// $token = generate_unique_token();
// if (forgot_password($email, $token)) {
//     echo "Reset password link sent to {$email}
";
// } else {
//     echo "Failed to generate reset password link.
";
// }
?>


<?php

/**
 * Forgot Password Function
 *
 * This function handles the forgot password process.  It generates a unique,
 * time-based token for verification and sends an email to the user with a link
 * to reset their password.
 *
 * **Important Security Notes:**
 * - **Use a strong, random token generation method.**
 * - **Protect the token from guessing.**  This implementation uses `random_bytes` for better security.
 * - **Short Token Lifespan:**  The token should expire after a short period (e.g., 30 minutes)
 *   to minimize security risks. This implementation allows you to customize the expiry time.
 * - **HTTPS Only:**  Always use HTTPS to protect the token during transmission.
 * - **Rate Limiting:** Implement rate limiting to prevent brute-force attacks.
 * - **Consider 2FA:**  Enhance security further with two-factor authentication.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @return bool True if the process started successfully, false otherwise (e.g., user not found).
 */
function forgotPassword(string $email): bool
{
    // 1. Validate Email (basic) -  More robust validation is recommended
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided.");  // Log for debugging
        return false;
    }

    // 2. Check if the user exists (replace with your database query)
    // This is a placeholder - Replace with your actual database query
    //  Example:
    //  $user = getUserById($email);
    //  if (!$user) {
    //      return false;
    //  }

    // Simulate user existence (for example purposes only)
    $user = ['id' => 123, 'email' => $email]; // Example user

    // 3. Generate a unique, time-based token
    $token = generateUniqueToken();

    // 4.  Store the token (database) - Replace with your actual database update
    // Replace with your database update query.  This is a placeholder.
    // Example (replace with your actual database connection and query):
    // $result = updateTokenToDatabase($user['id'], $token, $expiryTime);

    // Simulate token database update
    $user['token'] = $token;
    $user['expiry'] = time() + (30 * 60); // Token expiry: 30 minutes
    $user['updated_at'] = time();

    // 5. Build the reset password link
    $resetLink = generateResetLink($token);

    // 6. Send the email
    if (!sendResetPasswordEmail($email, $resetLink)) {
        error_log("Failed to send reset password email."); //Log for debugging
        return false;
    }

    // 7. Return True (Success)
    return true;
}


/**
 * Generates a unique, time-based token
 *
 * This function uses `random_bytes` for a more secure random number generation.
 *
 * @return string A unique token.
 */
function generateUniqueToken(): string
{
    return bin2hex(random_bytes(32)); // 32 bytes = 256 bits
}

/**
 * Generates the reset password link
 *
 * @param string $token The token.
 * @return string The reset password link.
 */
function generateResetLink(string $token): string
{
    return 'https://yourdomain.com/reset-password?token=' . urlencode($token);
}

/**
 * Sends the reset password email
 *
 * This function sends an email to the user with a link to reset their password.
 *
 * @param string $email The email address of the user.
 * @param string $resetLink The reset password link.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function sendResetPasswordEmail(string $email, string $resetLink): bool
{
    //  Replace with your email sending logic
    // Example using PHPMailer (install and configure PHPMailer)
    // $mail = new PHPMailer\PHPMailer\PHPMailer();
    // $mail->isSMTP();
    // $mail->Host = 'smtp.example.com';
    // $mail->Port = 587;
    // $mail->SMTPAuth = true;
    // $mail->Username = 'your_username';
    // $mail->Password = 'your_password';
    // $mail->SetFrom('your_email@example.com', 'Your Application Name');
    // $mail->addAddress($email);
    // $mail->Subject = 'Password Reset';
    // $mail->msgHtml('<html><body><p>Click <a href="' . $resetLink . '" target="_blank">here</a> to reset your password.</p></body></html>');
    // $mail->send();

    // Placeholder -  Simulate success
    return true;
}


// Example Usage (for testing) -  Remove this in your actual application
if (isset($_GET['email'])) {
    $email = $_GET['email'];
    if (isset($_GET['reset'])) {  // Triggered by a button click, etc.
        if (forgotPassword($email)) {
            echo "Password reset request initiated.  Check your email.";
        } else {
            echo "Password reset request failed. Please try again.";
        }
    }
}

?>


<?php

// This is a simplified example and should be used with caution.
// In a real-world scenario, you should implement robust security measures
// like rate limiting, email verification, and using secure password hashing.

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password.
 * @param string $dbHost     The database host.
 * @param string $dbName     The database name.
 * @param string $dbUser     The database username.
 * @param string $dbPassword The database password.
 *
 * @return bool True if password reset email was sent successfully, false otherwise.
 */
function forgotPassword(string $email, string $newPassword, string $dbHost, string $dbName, string $dbUser, string $dbPassword)
{
  // 1. Database Connection
  try {
    $conn = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUser, $dbPassword);
    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  } catch (PDOException $e) {
    error_log("Database connection error: " . $e->getMessage()); // Log the error
    return false;
  }


  // 2. Check if user exists
  try {
    $stmt = $conn->prepare("SELECT id, email FROM users WHERE email = :email");
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    $stmt->execute();
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($user) {
      // 3. Generate a unique token
      $token = bin2hex(random_bytes(32)); // Generate a random token

      // 4. Hash the new password
      $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);

      // 5. Update user's password and add token
      $stmt = $conn->prepare("UPDATE users SET password = :password, reset_token = :token, reset_token_expiry = :expiry  WHERE id = :user_id");
      $stmt->bindParam(':password', $hashedPassword, PDO::PARAM_STR);
      $stmt->bindParam(':token', $token, PDO::PARAM_STR);
      $stmt->bindParam(':expiry', date('Y-m-d H:i:s', time() + 3600), PDO::PARAM_STR); // Token expires in 1 hour
      $stmt->bindParam(':user_id', $user['id'], PDO::PARAM_INT);
      $stmt->execute();

      // 6. Send Password Reset Email (Placeholder - Replace with your email sending logic)
      $resetLink = "http://yourdomain.com/reset-password?token=$token";
      $subject = "Password Reset Request";
      $message = "Please reset your password: " . $resetLink;

      // In a real application, you would use a library or service
      // to send the email.  This is just a placeholder.
      // You might use PHPMailer, SwiftMailer, or integrate with a third-party service.
      // For example:
      // sendEmail($email, $subject, $message);



      return true;  // Password reset email sent
    } else {
      // User not found
      return false;
    }
  } catch (PDOException $e) {
    error_log("Database error during password reset: " . $e->getMessage());
    return false;
  }
}


// Example Usage (for testing -  DO NOT USE IN PRODUCTION WITHOUT SECURITY HARDENING)
// Replace with your database credentials and email sending logic
$email = 'testuser@example.com';
$newPassword = 'NewSecurePassword123';
$dbHost = 'localhost';
$dbName = 'your_database_name';
$dbUser = 'your_db_user';
$dbPassword = 'your_db_password';

if (forgotPassword($email, $newPassword, $dbHost, $dbName, $dbUser, $dbPassword)) {
  echo "Password reset email has been sent. Check your email!";
} else {
  echo "Failed to reset password. Please check your email and try again, or contact support.";
}

?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique token and sends an email to the user
 * with a link to reset their password.
 *
 * @param string $email The email address of the user requesting password reset.
 * @param string $baseUrl The base URL of your application. This is needed to construct the reset link.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function forgotPassword(string $email, string $baseUrl): bool
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log for debugging
        return false;
    }

    // 2. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator

    // 3.  Store the Token (Ideally in a database, but for demonstration, using an array)
    //    Important:  In a production environment, store this token in a database
    //    with a unique index and expiration time.

    // For demonstration purposes, storing in a session variable.
    // **DO NOT DO THIS IN A PRODUCTION ENVIRONMENT**
    $_SESSION['reset_token'] = $token;
    $_SESSION['reset_expiry'] = time() + 3600; // Token expires in 1 hour (3600 seconds)
    // 4. Create Reset Link
    $resetLink = $baseUrl . "/reset_password?token=" . $token;

    // 5. Send Email
    $to = $email;
    $subject = "Password Reset Request";
    $message = "Please click the following link to reset your password: " . $resetLink;
    $headers = "From: " .  "your_email@example.com" . "\r
";
    $headers .= "Reply-To: " . "your_email@example.com" . "\r
";

    if (mail($to, $subject, $message, $headers)) {
        error_log("Password reset email sent to: " . $email); // Log for debugging
        return true;
    } else {
        error_log("Failed to send password reset email to: " . $email); // Log for debugging
        return false;
    }
}


// Example Usage (Illustrative -  This would typically be called from a form submission)
// Assume you have a form that takes the user's email address.
// This example demonstrates the function call.  In a real application, this would
// be triggered by a form submission.
if ($_SERVER["REQUEST_METHOD"] == "GET") {
    // Example: Getting data from a form (simulated)
    $email = isset($_POST["email"]) ? $_POST["email"] : "";

    if ($email) {
        $baseUrl = "https://yourdomain.com"; // Replace with your application's base URL
        if (forgotPassword($email, $baseUrl)) {
            echo "Password reset email has been sent to " . $email . ". Check your inbox.";
        } else {
            echo "Failed to send password reset email.";
        }
    } else {
        echo "Please enter your email address.";
    }
}
?>


<?php

// This is a simplified example.  For production use,
// you'll want to use a more robust solution involving:
// - Storing passwords securely (hashed and salted)
// - Sending emails securely (HTTPS)
// - Input validation and sanitization
// - Preventing brute-force attacks (rate limiting, CAPTCHAs)
// - Logging all password reset attempts

// Configuration (replace with your actual settings)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_password = 'your_db_password';

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if the password reset process started, false otherwise.
 */
function forgot_password($email)
{
  // 1. Validate Input
  if (empty($email)) {
    return false; // Or throw an exception
  }

  // 2. Check if User Exists
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  if ($conn->connect_error) {
    error_log("Database connection failed: " . $conn->connect_error); // Log the error
    return false;
  }

  $query = "SELECT id, email FROM users WHERE email = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("s", $email); // 's' indicates a string parameter

  if (!$stmt->execute()) {
    error_log("Query execution failed: " . $stmt->error); // Log the error
    $stmt->close();
    $conn->close();
    return false;
  }

  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    error_log("User with email '$email' not found."); // Log the not found message
    $stmt->close();
    $conn->close();
    return false;
  }

  $user = $result->fetch_assoc();
  $userId = $user['id'];
  $stmt->close();
  $conn->close();

  // 3. Generate a Unique Token (for security)
  $reset_token = bin2hex(random_bytes(32)); // Generate a random token

  // 4. Store Token in Database
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
  if ($conn->connect_error) {
    error_log("Database connection failed: " . $conn->connect_error);
    return false;
  }

  $query = "INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, NOW())";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("sii", $userId, $reset_token, $conn->insert_id);  //'s' for string, 'i' for int

  if (!$stmt->execute()) {
    error_log("Query execution failed: " . $stmt->error);
    $stmt->close();
    $conn->close();
    return false;
  }
  $stmt->close();
  $conn->close();

  // 5. Send Password Reset Email
  $email_content = "Please click on the following link to reset your password: ";
  $reset_url = "https://yourdomain.com/reset_password?token=$reset_token"; // Replace with your URL
  $email_content .= $reset_url;

  // You'll need to implement your email sending logic here.
  // Example (replace with your actual email sending function):
  // send_email($user['email'], 'Password Reset', $email_content);

  // 6. Return True (success)
  return true;
}


// Example Usage (Replace with actual email sending)
//if (isset($_POST['email'])) {
//  $email = $_POST['email'];
//  if (forgot_password($email)) {
//    echo "Password reset email has been sent to $email.";
//  } else {
//    echo "Password reset failed.";
//  }
//}

// Sample function to simulate sending an email.  Replace with your real email sending logic.
function send_email($to, $subject, $body) {
    // Replace this with actual email sending code
    error_log("Simulating sending email to: " . $to . " with subject: " . $subject . " and body: " . $body);
}

?>


<?php

// This is a simplified example.  **DO NOT USE THIS CODE IN PRODUCTION without significant security enhancements.**
// This example is meant to illustrate the core concepts.

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_pass = 'your_db_password';

// Function to generate a random password
function generateRandomPassword($length = 12) {
    $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+=-`~[]\{}|;\':",./<>?';
    $password = '';
    $passwordLength = strlen($characters);

    for ($i = 0; $i < $length; $i++) {
        $password .= $characters[rand(0, $passwordLength - 1)];
    }

    return $password;
}

// Function to reset password (replace with a proper email sending mechanism)
function resetPassword($email, $password) {
    // **IMPORTANT SECURITY CONSIDERATIONS:**
    // 1.  Password Hashing:  NEVER store passwords in plain text.  Always hash them with a strong algorithm like bcrypt or Argon2.
    // 2.  Email Sending:  Use a reliable email library to send the reset link.  Don't use `mail()` directly, as it's often unreliable and insecure.
    // 3.  Token Expiry:  Implement an expiry time for the password reset token to prevent abuse.
    // 4.  Rate Limiting:  Limit the number of reset requests per user or IP address to prevent brute-force attacks.
    // 5.  Input Validation:  Thoroughly validate all user input to prevent vulnerabilities.

    // In this example, we are NOT hashing the password.  This is a critical error for production code.
    // You *must* hash the password before storing it.  I am using a placeholder.

    // Example of using a placeholder (DO NOT USE IN PRODUCTION)
    // $hashedPassword = password_hash($password, PASSWORD_DEFAULT);

    // Placeholder for sending an email (replace with a real email sending function)
    $subject = 'Password Reset';
    $to = $email;
    $message = "Please use this link to reset your password: <a href='reset_password.php?token=" . generateRandomToken() . "&email=" . urlencode($email) . "'>Reset Password</a>";
    mail($to, $subject, $message);

    return true; // Indicate success
}


// Function to generate a unique random token (for security)
function generateRandomToken() {
    return bin2hex(random_bytes(32));
}

// --- Example Usage (for demonstration only - this is not a complete application) ---

// 1. Form submission handling (simulated)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $password = $_POST["password"];

    // **IMPORTANT:**  Do *not* use this in a real application.  This is purely for demonstration.
    resetPassword($email, $password);
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required><br><br>

        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br><br>

        <input type="submit" value="Reset Password">
    </form>

    <p>If you forgot your password, please contact us for assistance.</p>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a user table with an 'email' column.

// 1. Check if the form is submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // 2. Get the email from the form
  $email = $_POST["email"];

  // 3. Validate the email format (basic validation - improve as needed)
  if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error = "Invalid email address.";
  } else {
    // 4. Check if the email exists in the database
    $result = mysqli_query($db, "SELECT id, email FROM users WHERE email = '$email'");
    if (mysqli_num_rows($result) > 0) {
      // 6. Generate a unique token
      $token = bin2hex(random_bytes(32)); 

      // 7.  Prepare and execute the update query
      $update_query = "UPDATE users SET password_reset_token = '$token', password_reset_token_expiry = NOW() WHERE email = '$email'";
      mysqli_query($db, $update_query);

      // 8.  Send a reset email (Example) -  You'll need to adapt this to your email sending logic
      $to = $email;
      $subject = "Password Reset";
      $message = "Click this link to reset your password: " . $_SERVER["REQUEST_URI"] . "?token=" . $token;
      $headers = "From: your_email@example.com"; // Change this!

      mail($to, $subject, $message, $headers);

      // 9. Redirect to a password reset page (or display success message)
      header("Location: password_reset_page.php?email=$email&token=$token");  //  Change to your reset page
      exit();
    } else {
      $error = "Email not found.";
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h2>Forgot Password</h2>

  <?php
  if (isset($error)) {
    echo "<p style='color: red;'>$error</p>";
  }
  ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["REQUEST_URI"]); ?>">
    <label for="email">Email Address:</label>
    <input type="email" id="email" name="email" placeholder="Your email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


   $stmt = mysqli_prepare($db, "UPDATE users SET password_reset_token = ?, password_reset_token_expiry = NOW() WHERE email = ?");
   mysqli_stmt_bind_param($stmt, "ss", $token, $email);
   mysqli_stmt_execute($stmt);
   mysqli_stmt_close($stmt);
   
   * Use `mysqli_stmt_bind_param()` to securely bind the variables to the query.

2. **Email Sending:**
   * **Use a reliable email sending library or service:**  Don't directly use `mail()` with your own email account.  Email sending can be unreliable and is often flagged as spam.  Consider using:
      * **PHPMailer:**  A popular, easy-to-use PHP library for sending emails.
      * **SwiftMailer:** Another robust email sending library.
      * **SMTP service:**  Services like SendGrid, Mailgun, or Amazon SES are generally the best approach for production.

3. **Password Reset Page (password_reset_page.php):**
   * This file (which you'll create) needs to:
      * Get the token and email from the URL.
      * Verify that the token is valid and hasn't expired.
      * Allow the user to set a new password.
      * Update the user's password in the database.

4. **Rate Limiting:**  Implement rate limiting to prevent brute-force attacks.  Don't allow a user to request a password reset multiple times in a short period.

5. **Logging:**  Log all password reset attempts (successful and unsuccessful) for auditing and security purposes.

6. **Two-Factor Authentication (2FA):**  Consider adding 2FA to the password reset process for an extra layer of security.

7. **Test Thoroughly:**  Test the entire password reset flow thoroughly, including edge cases, to ensure it's secure and reliable.

**Example `password_reset_page.php` (Illustrative - Requires Adaptation):**



<?php

// Assuming you have a database connection established and a 'users' table
// with an 'email' column.  This is a basic example and should be adapted
// to your specific database setup and security needs.

// 1.  Generate a unique token
function generateUniqueToken($length = 32) {
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $randomString = '';
    $characterLength = strlen($characters);
    for ($i = 0; $i < $length; $i++) {
        $index = rand(0, $characterLength - 1);
        $randomString .= $characters[$index];
    }
    return $randomString;
}


// 2.  Reset Password Function
function resetPassword($email, $token, $newPasswordHash) {
    // Replace this with your actual database query
    // This is a simplified example - always sanitize and validate user input
    $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

    try {
        $stmt = $db->prepare("UPDATE users SET password = :password, reset_token = :reset_token WHERE email = :email AND reset_token = :token");
        $stmt->bindParam(':password', $newPasswordHash);
        $stmt->bindParam(':reset_token', $token);
        $stmt->bindParam(':email', $email);
        $stmt->execute();

        return true; // Success
    } catch (PDOException $e) {
        // Handle errors (logging, email notifications, etc.)
        error_log("Error resetting password: " . $e->getMessage());
        return false; // Failure
    }
}



// Example Usage:

// 1. Generate a token
$resetToken = generateUniqueToken();

// 2.  Example Password Reset Form (Simplified for demonstration)
//   Assume this form is submitted with email and a new password.

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $password = $_POST["password"]; // This will be hashed
    $resetToken = $_POST["reset_token"];

    // Validate input (Important for security)
    if (empty($email) || empty($password) || empty($resetToken)) {
        echo "Error: Please fill in all fields.";
        exit;
    }

    // Hash the password (Use a strong hashing algorithm like password_hash())
    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);

    // Reset the password
    $resetResult = resetPassword($email, $resetToken, $hashedPassword);

    if ($resetResult) {
        echo "Password reset successful!  Check your email for instructions.";
    } else {
        echo "Error: Password reset failed.  Please try again.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Password Reset</title>
</head>
<body>

    <h1>Password Reset</h1>

    <form method="post" action="">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>

        <label for="password">New Password:</label>
        <input type="password" id="password" name="password" required>

        <input type="hidden" name="reset_token" value="<?php echo $resetToken; ?>">  <!-- Hidden field to pass token -->

        <button type="submit">Reset Password</button>
    </form>
</body>
</html>


<?php

// Database configuration (replace with your actual values)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if the password reset was successful, false otherwise.
 */
function forgot_password($email)
{
    // 1. Connect to the database
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
        error_log("Database connection failed: " . $conn->connect_error); // Log the error for debugging
        return false;
    }

    // 2. Generate a unique token
    $token = bin2hex(random_bytes(32));

    // 3. Prepare the SQL query to insert the token into the 'password_reset_tokens' table
    $sql = "INSERT INTO password_reset_tokens (user_email, reset_token, expiry_timestamp)
            VALUES (?, ?, ?)";

    // Prepare the statement
    $stmt = $conn->prepare($sql);

    // Bind parameters
    $stmt->bind_param("sii", $email, $token, time() + 3600); // Token, email, expiration timestamp (1 hour)

    // Execute the query
    if (!$stmt->execute()) {
        error_log("Query failed: " . $stmt->error); // Log the error
        return false;
    }

    // 4.  Create a link to the reset password page
    $reset_link = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $token;

    // 5. Return the reset link.
    return $reset_link;
}


/**
 * Example Usage (for testing/development - *DO NOT* include this directly in your website)
 */
// Example of calling the function:
// $reset_link = forgot_password('user@example.com');

// if ($reset_link) {
//     echo "Password reset link: " . $reset_link . "<br>";
// } else {
//     echo "Failed to generate password reset link.";
// }

// Stop the script execution if running as a script to avoid outputting the example
// This is crucial for security - preventing direct access to the example code.
// You would typically only enable this in a development environment.
//  echo "<br>Stop Execution <br>";
// exit;
?>


<?php

// This is a simplified example and should be adapted for a production environment.
// It's crucial to implement security measures like:
// - Proper database escaping
// - Token generation using cryptographically secure methods
// - Rate limiting to prevent brute-force attacks
// - Email sending with secure transport (SSL/TLS)

// Database connection details (Replace with your actual credentials)
$dbHost = "localhost";
$dbUser = "your_username";
$dbPass = "your_password";
$dbName = "your_database_name";


// Function to reset password
function forgotPassword($email, $db) {
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email format.";
    }

    // 2. Generate a unique token
    $token = bin2hex(random_bytes(32)); // Secure random bytes
    
    // 3.  Hash the token for security.  Avoid storing plain tokens.
    $hashed_token = password_hash($token, PASSWORD_DEFAULT);

    // 4.  Store the token in the database
    $query = "INSERT INTO password_resets (email, token, expires_at) VALUES (?, ?, NOW())";
    $stmt = $db->prepare($query);
    $stmt->bind_param("s", $email, $hashed_token);
    $stmt->execute();

    // 5.  Send an email with a reset link
    $resetLink = "http://yourdomain.com/reset-password?token=$token"; // Replace with your domain
    
    // You'll need to implement your email sending functionality here
    // Example (replace with your actual email sending function)
    // sendResetEmail($email, $resetLink);

    return "Password reset link sent to your email.  Please check your inbox.";
}

// Example Usage (for testing) -  **DO NOT USE THIS IN PRODUCTION**
// This section demonstrates how to call the function and handle the response.
// In a real application, this would be part of a web form handling the request.

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    // Example database connection (simplified)
    $db = new mysqli($dbHost, $dbUser, $dbPass, $dbName);
    if ($db->connect_error) {
        die("Connection failed: " . $db->connect_error);
    }

    $result = forgotPassword($email, $db);
    echo $result; // Output the result to the user (e.g., display on the page)
    $db->close();
} else {
    // Display a form for the user to enter their email
    ?>
    <form method="post" action="">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>
    <?php
}
?>


<?php

// Database connection details - Replace with your actual values!
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';

/**
 * Forgets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if password reset email sent successfully, false otherwise.
 */
function forgotPassword($email)
{
  // Sanitize input
  $email = filter_var($email, FILTER_SANITIZE_EMAIL);
  if (empty($email)) {
    return false;
  }

  // Check if the email exists
  $query = "SELECT id, email FROM users WHERE email = '$email'";
  $result = mysqli_query($GLOBALS['db_host'], $query);

  if (!$result) {
    error_log("MySQLi error: " . mysqli_error($GLOBALS['db_host'])); // Log for debugging
    return false;
  }

  $user = mysqli_fetch_assoc($result);

  if (!$user) {
    // User not found
    return false;
  }

  // Generate a unique token for password reset
  $resetToken = bin2hex(random_bytes(32));

  // Hash the token for security
  $hashedToken = password_hash($resetToken, PASSWORD_DEFAULT);

  // Store the token in the database
  $query = "UPDATE users SET reset_token = '$hashedToken' WHERE email = '$email'";
  $result = mysqli_query($GLOBALS['db_host'], $query);

  if (!$result) {
    error_log("MySQLi error: " . mysqli_error($GLOBALS['db_host']));
    return false;
  }

  // Send the reset password email (Implement your email sending logic here)
  $subject = 'Password Reset';
  $message = "Click on the following link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . '?email=$email&token=$resetToken' . "'>Reset Password</a>";

  // In a real application, you'd use a proper email sending library or service.
  //  For this example, we'll just print the email.
  $to = $email;
  $headers = 'From: your_email@example.com' . "\r
";
  mail($to, $message, $headers); //  Use mail() for testing.  Replace with a proper email sending method.

  return true;
}


// Example Usage (for demonstration - replace with your actual logic)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];

  if (!empty($email)) {
    if (forgotPassword($email)) {
      echo "Password reset email has been sent to $email.";
    } else {
      echo "Failed to send password reset email. Please try again.";
    }
  } else {
    echo "Please enter your email address.";
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established and available as $db

/**
 * Forgets a user's password and sends a password reset email.
 *
 * @param string $email The email address of the user.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email): bool
{
    // 1. Verify Email Exists
    $user = get_user_by_email($email); // Assuming this function exists and retrieves user by email

    if (!$user) {
        error_log("User with email '$email' not found."); // Log error for debugging
        return false;
    }

    // 2. Generate a Unique Token and Store it
    $token = generate_unique_token(); //  This function generates a random, unique token
    $hashed_token = password_hash($token, PASSWORD_DEFAULT); // Hash the token for security

    // 3. Store the token in the database (e.g., in the user's record)
    update_user_token($user->id, $hashed_token);  // Assumes this function updates the token in the database

    // 4. Build the reset link
    $reset_url = "/reset-password?token=$token"; //  Or use a properly sanitized URL

    // 5. Send the Password Reset Email
    $subject = "Password Reset Request";
    $body = "Please click on the following link to reset your password: " . $reset_url;
    $headers = "From: Your Website <contact@yourwebsite.com>"; // Replace with your email
    send_email($email, $subject, $body, $headers);

    return true;
}


/**
 * Placeholder functions -  You need to implement these.
 */

/**
 * Retrieves a user by their email address.  This should query your database.
 *
 * @param string $email The email address to search for.
 * @return User object or null if not found.
 */
function get_user_by_email(string $email): ?User {
    // Replace with your database query logic
    // Example (using a hypothetical User class):
    // $result = db_query("SELECT * FROM users WHERE email = '$email'");
    // if ($result->num_rows > 0) {
    //     return new User($result->fetch_assoc());
    // }
    // return null;
    error_log("get_user_by_email called - need to implement this function");
    return null; // Placeholder
}

/**
 * Generates a unique token.  Consider using a library for cryptographically secure random number generation.
 *
 * @return string A unique token.
 */
function generate_unique_token(): string {
  // Use a cryptographically secure random number generator for production.
  return bin2hex(random_bytes(32));
}


/**
 *  Updates the user's token in the database.
 *
 * @param int $userId The ID of the user to update.
 * @param string $hashedToken The hashed token.
 */
function update_user_token(int $userId, string $hashedToken): void {
    // Replace with your database update logic.
    // Example:
    // db_query("UPDATE users SET token = '$hashedToken' WHERE id = $userId");
    error_log("update_user_token called - need to implement this function");
}


/**
 * Sends an email.  This should use a mail function or library.
 *
 * @param string $to The recipient's email address.
 * @param string $subject The email subject.
 * @param string $body The email body.
 * @param string $headers Email headers.
 */
function send_email(string $to, string $subject, string $body, string $headers): void {
    // Replace with your email sending logic.  Use a library like PHPMailer for production.
    error_log("send_email called - need to implement this function");
}



// Example Usage (for testing -  Don't use directly in production)
// To use this function, you'd call it like this:
// $success = forgot_password("testuser@example.com");
// if ($success) {
//   echo "Password reset email sent to testuser@example.com";
// } else {
//   echo "Password reset failed.";
// }


?>


<?php

// IMPORTANT: This is a simplified example for demonstration purposes.
// In a production environment, you MUST implement robust security measures
// to prevent abuse and unauthorized access.  This example is NOT secure
// as-is and should only be used for learning and testing.

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password.
 * @param PDO $pdo The database connection object.
 *
 * @return bool True if the password was reset successfully, false otherwise.
 */
function forgotPassword(string $email, string $newPassword, PDO $pdo)
{
    // 1. Validate inputs (VERY IMPORTANT in a real application)
    if (empty($email) || empty($newPassword)) {
        return false; // Or throw an exception
    }
    // Add more validation here, such as:
    // - Email format validation
    // - Password strength validation (minimum length, special characters, etc.)

    // 2. Check if the user exists
    $stmt = $pdo->prepare("SELECT id, email FROM users WHERE email = :email");
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    $stmt->execute();

    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        return false; // User not found
    }

    // 3. Hash the new password
    $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

    // 4. Update the user's password in the database
    $stmt = $pdo->prepare("UPDATE users SET password = :password WHERE id = :id");
    $stmt->bindParam(':password', $hashedNewPassword, PDO::PARAM_STR);
    $stmt->bindParam(':id', $user['id'], PDO::PARAM_INT);
    $stmt->execute();

    if ($stmt->rowCount() === 0) {
        return false; // Update failed
    }

    return true;
}


// Example Usage (Demonstration - Replace with your actual code)

// Database connection (Replace with your actual credentials)
$host = 'localhost';
$dbname = 'your_database_name';
$user = 'your_database_user';
$password = 'your_database_password';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8", $user, $password);

    // Enable error reporting (for development only - disable in production)
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING);
} catch (PDOException $e) {
    echo "Database connection failed: " . $e->getMessage() . "
";
    exit;
}


// Simulate a forgotten password request
$email = 'testuser@example.com'; // Replace with a valid user email
$newPassword = 'NewSecretPassword123!';

if (forgotPassword($email, $newPassword, $pdo)) {
    echo "Password reset successfully for $email
";
} else {
    echo "Password reset failed for $email
";
}

// Close the database connection (optional, but good practice)
$pdo = null;

?>


<?php

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Function to handle the forgot password process
function forgotPassword($email) {
  // 1. Validate email format (basic check)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2.  Check if the user exists in the database
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    return "Connection failed: " . $conn->connect_error;
  }

  $query = "SELECT id, email FROM users WHERE email = '$email'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    $row = $result->fetch_assoc();
    $userId = $row['id'];
    $userEmail = $row['email'];

    // 3. Generate a unique, secure token
    $token = bin2hex(random_bytes(32)); // Generate a 32-byte random string
    
    // 4.  Store the token in the database -  use a 'temp_password_token' column
    $insertQuery = "UPDATE users SET temp_password_token = '$token' WHERE id = '$userId'";
    if (!$conn->query($insertQuery)) {
      return "Error updating database.  " . $conn->error;
    }

    // 5.  Send an email to the user with the token and a link
    $to = $email;
    $subject = "Password Reset";
    $message = "Please click on the following link to reset your password:
" .
               "<a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'>Reset Password</a>"; // Use $_SERVER['PHP_SELF']
    $headers = "From: your_email@example.com"; // Replace with your email

    if (mail($to, $subject, $message, $headers)) {
      return "Password reset email sent to $email.  Please check your inbox.";
    } else {
      return "Failed to send password reset email. Check your server's mail configuration.";
    }
  } else {
    return "User not found.";
  }
}

// Example usage (from the reset.php page)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $resetToken = $_POST["reset_token"];

  if (empty($email) || empty($reset_token)) {
    echo "Error: Both email and token are required.";
  } else {
    $result = forgotPassword($email, $reset_token);
    echo $result; // Display the result
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="reset.php">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <input type="hidden" name="reset_token" value="">

    <input type="submit" value="Request Password Reset">
  </form>

  <hr>

  <form method="post" action="reset.php">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <input type="hidden" name="reset_token" value="">

    <label for="reset_token">Reset Token:</label>
    <input type="text" id="reset_token" name="reset_token" required><br><br>

    <input type="submit" value="Reset Password">
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established and a user table with an 'email' column.
// Replace these with your actual database connection details and table name.

// Database connection details
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$database = 'your_database_name';

// Table name
$usersTable = 'users';

// Function to reset password
function forgotPassword($email, $host, $username, $password, $database, $usersTable) {
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return 'Invalid email address.';
    }

    // 2. Check if the user exists
    $conn = new mysqli($host, $username, $password, $database);
    if ($conn->connect_error) {
        return "Connection failed: " . $conn->connect_error;
    }

    $sql = "SELECT id, email FROM $usersTable WHERE email = '$email'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $user = $result->fetch_assoc();
        $userId = $user['id'];
        $conn->close();

        // 3. Generate a unique token/code for password reset
        $resetToken = bin2hex(random_bytes(32)); 

        // 4. Store the token in the database
        $sql = "UPDATE $usersTable SET reset_token = '$resetToken' WHERE id = $userId";
        if ($conn = new mysqli($host, $username, $password, $database)) {
            if ($conn->query($sql) === TRUE) {
                $conn->close();
                return $resetToken; // Return the token for the user to use.
            } else {
                $conn->close();
                return "Error updating token: " . $conn->error;
            }
        } else {
            return "Connection failed: " . $conn->connect_error;
        }
    } else {
        return 'User not found.';
    }
}



// Example usage (for demonstration - this would usually be part of a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    if ($email) {
        $resetToken = forgotPassword($email, $host, $username, $password, $database, $usersTable);
        if (strpos($resetToken, "Error") !== false) { // Check for error messages
            echo "<p style='color:red'>" . $resetToken . "</p>";
        } else {
            echo "<p>A password reset link has been sent to your email address.</p>";
            echo "<p>Please check your inbox (and spam folder) for a link to reset your password.</p>";
            echo "<p>The token is: " . $resetToken . "</p>"; //Display token if you want to show it to the user.
        }

    } else {
        echo "<p style='color:red'>Please enter your email address.</p>";
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a table named 'users' with columns 'email' and 'password'

/**
 * Resets a user's password via email.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email, PDO $db) {
    // Sanitize the email input (important for security!)
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);

    // Validate email format
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format: " . $email); // Log for debugging
        return false;
    }

    // Check if the user exists
    $stmt = $db->prepare("SELECT id, email FROM users WHERE email = :email");
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    $stmt->execute();

    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        error_log("User not found for email: " . $email); // Log for debugging
        return false;
    }

    // Generate a unique, secure token (e.g., using a cryptographically secure random number generator)
    $token = bin2hex(random_bytes(32));  // Generates a 32-byte (256-bit) random string
    // Or use:  $token = password_generate(uniqid()); // if you're using password_generate

    // Prepare the token setting statement
    $stmt = $db->prepare("UPDATE users SET reset_token = :token, reset_token_expiry = :expiry WHERE email = :email");
    $stmt->bindParam(':token', $token, PDO::PARAM_STR);
    $stmt->bindParam(':expiry', time() + 3600, PDO::PARAM_INT); // Token expires in 1 hour
    $stmt->bindParam(':email', $user['email'], PDO::PARAM_STR);
    $result = $stmt->execute();


    if ($result) {
        // Send the password reset email
        $subject = "Password Reset Request";
        $to = $user['email'];
        $headers = "From: your_email@example.com"; // Replace with your email
        $message = "Please click the following link to reset your password: " . $_SERVER['REQUEST_SCHEME'] . "://yourdomain.com/reset_password?token=" . $token; // Replace with your domain

        mail($to, $subject, $message, $headers);

        return true;
    } else {
        error_log("Failed to update user with token: " . $email);
        return false;
    }
}

// Example Usage (in your controller or script):
// $email = $_POST['email'];  // Get email from form submission

// if (isset($email)) {
//     if (forgot_password($email, $db)) {
//         echo "Password reset email sent to " . $email;
//     } else {
//         echo "Failed to send password reset email.";
//     }
// }
?>


<?php

// Assuming you have a database connection established and stored in a variable like $db
// and that you have a 'users' table with an 'email' column.

function forgot_password($email, $reset_token, $expiry_time = 3600) { // $expiry_time defaults to 1 hour (3600 seconds)

  // 1. Check if the email exists in the database
  $query = "SELECT id FROM users WHERE email = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("s", $email); // 's' indicates a string parameter
  $stmt->execute();

  $result = $stmt->get_result();

  if ($result->num_rows > 0) {
    // 2. Generate a unique, secure reset token.
    $reset_token = bin2hex(random_bytes(32)); // Use bin2hex for a more secure random token

    // 3.  Store the token in the database, associated with the user's email
    $query = "INSERT INTO password_resets (user_id, token, expiry_time) VALUES (?, ?, ?)";
    $stmt = $db->prepare($query);
    $stmt->bind_param("iii", $result->fetch_assoc()['id'], $reset_token, $expiry_time);
    $stmt->execute();

    // Success!  Return a message to the user.
    return [
      "success" => true,
      "message" => "Password reset email sent.  Check your inbox!"
    ];

  } else {
    // Email not found
    return [
      "success" => false,
      "message" => "Email address not found."
    ];
  }

  //  Important:  Always close the statements
  $stmt->close();
}


// --- Example Usage (Illustrative - Replace with your actual logic) ---

// Assuming $db is your database connection object

// $email = "user@example.com";  // The user's email address
// $reset_token = $_POST['reset_token']; // Get the token from the form
// $expiry_time = 3600; // 1 hour

// $result = forgot_password($email, $reset_token, $expiry_time);

// if ($result['success']) {
//   echo "<p>" . $result['message'] . "</p>";
// } else {
//   echo "<p>Error: " . $result['message'] . "</p>";
// }

?>


<?php

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Function to handle the forgot password process
function forgot_password($email) {
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email format.";
    }

    // 2. Fetch User Data
    $conn = new mysqli($host, $username, $password, $dbname);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $sql = "SELECT id, username FROM users WHERE email = '$email'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $user_data = $result->fetch_assoc();
        $userId = $user_data['id'];
        $username = $user_data['username'];

        // 3. Generate a Unique Token
        $token = bin2hex(random_bytes(32)); // Generate a cryptographically secure random token

        // 4. Store Token in Database (with expiration)
        $conn->query("UPDATE users SET reset_token = '$token', reset_token_expiry = NOW() + INTERVAL 1 HOUR WHERE id = '$userId'");

        // 5. Prepare Email Content
        $to = $email;
        $subject = "Password Reset Request";
        $message = "Click the following link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . "?reset_token=$token'>Reset Password</a>"; // IMPORTANT: Use $_SERVER['PHP_SELF']
        $headers = "From: your_email@example.com"; // Replace with your email address

        // 6. Send Email
        mail($to, $message, $headers);

        return "Password reset email sent to $email.";
    } else {
        return "User not found.";
    }

    $conn->close();
}

// Example Usage (Handle the reset link submission)
if (isset($_GET['reset_token'])) {
    $token = $_GET['reset_token'];

    // 1. Verify Token
    $conn = new mysqli($host, $username, $password, $dbname);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $sql = "SELECT id, username FROM users WHERE reset_token = '$token' AND reset_token_expiry > NOW()";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $user_data = $result->fetch_assoc();
        $userId = $user_data['id'];
        $username = $user_data['username'];

        // 2.  Set a New Password (replace with your password input validation)
        $new_password = $_POST['new_password'];
        $confirm_password = $_POST['confirm_password'];

        if ($new_password == $confirm_password) {
            // Hash the new password
            $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

            // 3. Update User Password
            $conn->query("UPDATE users SET password = '$hashed_password' WHERE id = '$userId'");

            // 4. Delete the Token (important for security)
            $conn->query("DELETE FROM users WHERE id = '$userId' AND reset_token = '$token'");

            // 5. Redirect
            return "Password reset successful. Please log in.";

        } else {
            return "Passwords do not match.";
        }

    } else {
        return "Invalid reset token or token expired.";
    }

    $conn->close();
}
?>


<?php

/**
 * Function to handle the forgot password flow.
 *
 * @param string $email The email address of the user.
 * @return string  Message indicating success or failure.
 */
function forgotPassword(string $email): string
{
    // 1. Check if the email exists in the database.
    $user = getUserByEmail($email);

    if (!$user) {
        return "Email address not found.";
    }

    // 2. Generate a unique, secure token.
    $token = generateUniqueToken();

    // 3. Store the token and the user's ID in the database.
    //    This should be done securely, ideally with hashing.
    //    This example uses a simple string store for demonstration only.
    //    In a real application, use a database with a secure hashing algorithm (bcrypt, argon2, etc.).
    storeTokenForUser($user->id, $token);


    // 4.  Build the password reset email.
    $subject = "Password Reset Request";
    $headers = "From: your_website@example.com"; // Replace with your actual email address
    $message = "<html><body>";
    $message .= "<h1>Password Reset</h1>";
    $message .= "<p>Click the link below to reset your password:</p>";
    $message .= "<a href='" . generateResetLink($user->email, $token) . "'>Reset Password</a>";
    $message .= "</body></html>";

    // 5. Send the email.
    $sent = sendEmail($user->email, $subject, $message, $headers);

    if ($sent) {
        return "Password reset email sent to $email.";
    } else {
        return "Failed to send password reset email.  Check your email settings.";
    }
}


/**
 * Dummy function to retrieve a user by their email.
 *  Replace this with your database query logic.
 *
 * @param string $email The email address to search for.
 * @return User|null  The User object if found, null otherwise.
 */
function getUserByEmail(string $email): ?User
{
    // **Replace this with your actual database query logic.**
    // Example using a dummy User class.

    // This is a very simple example and would need to be replaced with
    // your actual database query using PDO, MySQLi, etc.
    //
    //  $db = new PDO(...);  // Replace with your database connection details
    //  $stmt = $db->prepare("SELECT * FROM users WHERE email = ?");
    //  $stmt->execute([$email]);
    //  $user = $stmt->fetch(PDO::FETCH_ASSOC);
    //
    //  if ($user) {
    //    return new User($user);
    //  }

    // Dummy User class for demonstration.
    class User {
        public string $email;
        public int $id;

        public function __construct(array $data) {
            $this->email = $data['email'];
            $this->id = $data['id'];
        }
    }

    // Example User data for demonstration.  Replace with your data.
    $user_data = [
        'id' => 1,
        'email' => 'test@example.com'
    ];

    return new User($user_data);
}



/**
 * Dummy function to generate a unique token.
 *  In a real application, use a more secure method, like a UUID library.
 *
 * @return string A unique token.
 */
function generateUniqueToken(): string
{
    return bin2hex(random_bytes(32)); // Generate a 32-byte random string
}



/**
 * Dummy function to store the token and user ID in a simple string store.
 *  In a real application, use a database.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token to store.
 */
function storeTokenForUser(int $userId, string $token): void
{
    // **Replace this with your database logic.**
    // Example:
    // $db = new PDO(...);
    // $stmt = $db->prepare("INSERT INTO password_tokens (user_id, token, expires_at) VALUES (?, ?, NOW())");
    // $stmt->execute([$userId, $token]);
    // Or, for simpler cases (not recommended for production):
    global $token_store;  // Assume a global array for simplicity
    $token_store[$userId] = $token;
}


/**
 * Dummy function to generate the password reset link.
 *  Replace this with your own logic to construct the link.
 *
 * @param string $email The user's email address.
 * @param string $token The unique token.
 * @return string The generated password reset link.
 */
function generateResetLink(string $email, string $token): string
{
    return "/reset_password?email=" . urlencode($email) . "&token=" . urlencode($token);
}


/**
 * Dummy function to send an email.
 *  Replace this with your email sending implementation (e.g., PHPMailer, SwiftMailer).
 *
 * @param string $to The recipient's email address.
 * @param string $subject The email subject.
 * @param string $body The email body.
 * @param string $headers The email headers.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function sendEmail(string $to, string $subject, string $body, string $headers): bool
{
    // **Replace this with your email sending implementation.**
    // Example using a placeholder:
    // $mailer = new PHPMailer();
    // $mailer->SetFrom('your_website@example.com', 'Your Website');
    // $mailer->AddAddress($to);
    // $mailer->Subject = $subject;
    // $mailer->MsgBody = $body;
    // $mailer->AddAttachment('attachment.pdf', 'attachment.pdf');
    // $sent = $mailer->send($headers);
    // return $sent;

    // Dummy return for demonstration
    return true; // Replace with actual return value from sendEmail
}
?>


<?php

// This is a simplified example and should be adapted for a production environment.
// It's crucial to implement proper security measures like hashing passwords,
// preventing brute-force attacks, and handling input validation rigorously.

// Assume you have a database connection setup (e.g., $db)

function forgot_password($email) {
  // 1. Check if the email exists
  $result = mysqli_query($db, "SELECT id FROM users WHERE email = '$email'"); // Replace $db with your database connection

  if (mysqli_num_rows($result) == 0) {
    return "Email not found.";
  }

  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32)); // Using bin2hex for a secure random token

  // 3. Store the token and user ID in the database
  mysqli_query($db, "UPDATE users SET reset_token = '$token', reset_token_expiry = NOW() WHERE email = '$email'");

  // 4.  Send an email with the reset link
  $to = $email;
  $subject = "Password Reset Link";
  $message = "Click on the following link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'>" . $_SERVER['PHP_SELF'] . "?reset=$token</a>";
  $headers = "From: your_email@example.com";  // Replace with your email address

  mail($to, $message, $headers);

  return "Password reset email sent to $email.";
}

// Example Usage (This would be part of a form submission handler)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST['email'])) {
    $email = $_POST['email'];
    $reset_message = forgot_password($email);
    echo $reset_message;
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database_name";

// Function to handle password reset
function forgot_password($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32));

  // 3.  Create a temporary password reset record in the database
  $query = "INSERT INTO password_resets (email, token, created_at) VALUES ('$email', '$token', NOW())";

  $mysqli = new mysqli($host, $username, $password, $database);

  if ($mysqli->connect_error) {
    return "Database connection failed: " . $mysqli->connect_error;
  }

  if ($mysqli->query($query) === FALSE) {
    return "Failed to insert password reset record: " . $mysqli->error;
  }

  $mysqli->close();

  // 4. Send an email with a reset link
  $subject = "Password Reset";
  $message = "Click this link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'</a>";
  $headers = "From: your_email@example.com" . "\r
"; // Replace with your email address

  if (mail($email, $subject, $message, $headers)) {
    return "Password reset link sent to your email address.";
  } else {
    // Handle email sending failure - important for debugging
    return "Failed to send password reset email.";
  }
}

// Example usage (from a form submission or other trigger)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $result = forgot_password($email);
  echo $result;
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established and named $db

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user.
 * @return bool True if a reset link was generated and sent, false otherwise.
 */
function forgotPassword($email)
{
    // 1. Sanitize and Validate Input
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);
    if (empty($email)) {
        error_log("Error: Email address is empty."); // Log for debugging.  Don't display to user.
        return false;
    }
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Error: Invalid email format."); // Log for debugging
        return false;
    }

    // 2. Check if user exists
    $user = getUserByEmail($email);  // Assumes you have a getUserByEmail() function

    if (!$user) {
        error_log("Error: User not found with email: $email");  // Log
        return false;
    }


    // 3. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // Generate a secure random token

    // 4.  Store the Token and User ID in a Temporary Table (for security)
    //    This prevents a direct lookup of the user's ID from the database
    //    and protects against brute-force attacks.
    $mysqli = new mysqli($GLOBALS['db_host'], $GLOBALS['db_user'], $GLOBALS['db_pass'], $GLOBALS['db_name']);

    if ($mysqli->connect_errno) {
        error_log("Failed to connect to database: " . $mysqli->connect_error);
        return false;
    }

    $sql = "INSERT INTO password_reset_tokens (user_id, token, expires_at)
            VALUES ($user['id'], '$token', NOW() + INTERVAL 1 HOUR)";  //  Token expires after 1 hour
    if (!$mysqli->query($sql)) {
        error_log("Error creating password reset token: " . $mysqli->error);
        $mysqli->close();
        return false;
    }
    $mysqli->close();

    // 5.  Send the Reset Link (Email)
    $resetLink = $GLOBALS['app_url'] . "/reset-password?token=$token&user_id=$user['id']";  //  Include user_id for security
    $subject = "Password Reset Link";
    $message = "Please click the following link to reset your password: " . $resetLink;
    $headers = "From: " . $GLOBALS['app_email'] . "\r
";
    mail($email, $message, $headers); // Or use a more robust email sending library.



    return true; // Reset link generated and sent
}



/**
 * Example of a function to get a user by their email.
 *  Replace with your actual database query logic.
 *
 * @param string $email The email address of the user.
 * @return array|null An array containing user data if found, or null if not found.
 */
function getUserByEmail($email) {
  // Replace this with your database query.  This is just an example.
  //  Consider using prepared statements for security.
  $result = mysqli_query($GLOBALS['db'], "SELECT * FROM users WHERE email = '$email'");  // Replace with your query
  if (mysqli_num_rows($result) > 0) {
    $user = mysqli_fetch_assoc($result);
    return $user;
  } else {
    return null;
  }
}



// Example Usage (for testing - DON'T USE IN PRODUCTION without proper error handling and security)
// You would normally call this from a form submission.
// $email = $_POST['email'];
// if (isset($email)) {
//   if (forgotPassword($email)) {
//     echo "Password reset email has been sent to $email.";
//   } else {
//     echo "Error: Failed to generate password reset link.";
//   }
// }
?>


<?php

/**
 * Forgotten Password Function
 * 
 * This function handles the logic for resetting a user's password.
 * It includes generating a unique token, storing it in the database,
 * sending an email with a link to reset the password, and validating the token.
 *
 * @param string $email The email address of the user requesting password reset.
 * @return bool True if the password reset process started successfully, false otherwise.
 */
function forgot_password($email)
{
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email address provided: " . $email); // Log for debugging
    return false;
  }

  // 2. Generate a Unique Token
  $token = bin2hex(random_bytes(32));  // Use a strong random token

  // 3. Hash the Token (Important for Security)
  $hashed_token = password_hash($token, PASSWORD_DEFAULT);

  // 4. Store the Token in the Database
  // Assuming you have a 'users' table with 'email' and 'password' columns
  // Replace with your actual database connection and table names.
  $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_db_user", "your_db_password"); 

  $stmt = $db_connection->prepare("
      INSERT INTO forgot_passwords (email, token, hashed_token, created_at)
      VALUES (:email, :token, :hashed_token, NOW())
  ");
  $stmt->bindParam(':email', $email);
  $stmt->bindParam(':token', $token);
  $stmt->bindParam(':hashed_token', $hashed_token);
  $stmt->execute();

  // 5. Send Password Reset Email
  $subject = 'Password Reset Request';
  $message = "Click on the following link to reset your password: " . '<a href="' . $_SERVER['PHP_SELF'] . '?reset=' . $token . '"' . ' target="_blank">' . $_SERVER['PHP_SELF'] . '?reset=' . $token . '</a>'; 

  $headers = "From: your_email@example.com" . "\r
"; //Replace with your email
  mail($email, $subject, $message, $headers);  // Use PHP's mail function

  return true; // Password reset process initiated
}


/**
 * Validates the password reset token
 *
 * @param string $token The password reset token.
 * @return bool True if the token is valid and hasn't expired, false otherwise.
 */
function validate_token($token)
{
    // 1. Retrieve the token from the database.
    $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_db_user", "your_db_password");
    $stmt = $db_connection->prepare("SELECT id, email, token, hashed_token, created_at FROM forgot_passwords WHERE token = :token");
    $stmt->bindParam(':token', $token);
    $stmt->execute();
    $forgot_password = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$forgot_password) {
        return false; // Token not found
    }

    // 2. Check if the token has expired.  (Important!)
    $expiration_time = time() - 3600; // Expires after 1 hour (3600 seconds)
    if ($forgot_password['created_at'] > $expiration_time) {
        return false; // Token has expired
    }

    // 3. Verify the hashed token
    return password_verify($token, $forgot_password['hashed_token']);
}


// Example Usage (Demonstration - Adapt to your app)
// $email = "testuser@example.com"; // Replace with the user's email
// if (forgot_password($email)) {
//     echo "Password reset email has been sent to " . $email . ".";
// } else {
//     echo "Failed to initiate password reset.";
// }


?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a user table with an 'email' column.

/**
 * Resets a user's password via email.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset email was sent, false otherwise.
 */
function forgot_password(string $email)
{
    // 1. Validate Email (Important for security)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log the error
        return false;
    }

    // 2. Check if the user exists
    $user = get_user_by_email($email);

    if ($user === false) {
        error_log("User with email " . $email . " not found.");
        return false; // User doesn't exist
    }

    // 3. Generate a unique token
    $token = generate_unique_token();

    // 4. Hash the token for security
    $hashed_token = hash('sha256', $token);  // Using SHA256 for strong hashing

    // 5. Update the user's record with the token
    if (!update_user_token($user['id'], $hashed_token)) {
        error_log("Failed to update user token for email " . $email);
        return false;
    }

    // 6. Send the password reset email
    if (!send_password_reset_email($user['email'], $token)) {
        error_log("Failed to send password reset email to " . $email);
        // Optionally:  You might want to try updating the token back to 'null'
        // to clear it if the email sending failed.
        //  This is a more robust approach.
        //  remove_user_token($user['id']);
        return false;
    }

    return true;
}



/**
 * Placeholder function to retrieve a user by email.  Replace with your database query.
 *
 * @param string $email The email address to search for.
 * @return array|bool An array representing the user data, or false if not found.
 */
function get_user_by_email(string $email): ?array {
    // Replace this with your actual database query.  This is just a placeholder.
    // Example:
    // $result = mysqli_query($db, "SELECT * FROM users WHERE email = '$email'");
    // if (mysqli_num_rows($result) > 0) {
    //     return mysqli_fetch_assoc($result);
    // }
    // return false;

    // Dummy data for testing purposes
    $users = [
        ['id' => 1, 'email' => 'test@example.com', 'password' => 'password123'],
        ['id' => 2, 'email' => 'another@example.com', 'password' => 'securepass']
    ];

    foreach ($users as $user) {
        if ($user['email'] === $email) {
            return $user;
        }
    }

    return false;
}



/**
 * Placeholder function to generate a unique token.
 *
 * @return string A unique token.
 */
function generate_unique_token(): string {
    return bin2hex(random_bytes(32));  // Use random_bytes for strong randomness
}


/**
 * Placeholder function to hash a token.
 *
 * @param string $token The token to hash.
 * @return string The hashed token.
 */
function hash_token(string $token): string {
    return hash('sha256', $token);
}

/**
 * Placeholder function to update a user's token.  Replace with your database query.
 *
 * @param int $userId The ID of the user to update.
 * @param string $hashedToken The hashed token to store.
 * @return bool True if the update was successful, false otherwise.
 */
function update_user_token(int $userId, string $hashedToken): bool {
    // Replace this with your actual database query. Example:
    // mysqli_query($db, "UPDATE users SET token = '$hashedToken' WHERE id = $userId");
    return true; // Always return true for now - replace with actual success check
}

/**
 * Placeholder function to remove a user's token (for cleanup).
 *
 * @param int $userId The ID of the user to remove the token for.
 * @return bool True if successful, false otherwise.
 */
function remove_user_token(int $userId): bool{
    // Replace this with your database query.
    return true; //  Replace with actual success check
}


/**
 * Placeholder function to send a password reset email.
 *
 * @param string $email The recipient's email address.
 * @param string $token The password reset token.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function send_password_reset_email(string $email, string $token): bool {
    // This is just a placeholder -  replace with your email sending logic.
    //  e.g., using PHPMailer or similar.
    // Example (placeholder):
    //  mail($email, "Password Reset", "Click this link to reset your password:  http://example.com/reset?token=$token");
    // Return true for now - replace with actual success check
    error_log("Password reset email sent to " . $email . " with token " . $token);
    return true;
}


// Example Usage (for testing)
// If you call this function, it will log errors and return true
//  You must replace the placeholder functions with your actual database implementation.
$reset_result = forgot_password('test@example.com');

if ($reset_result) {
    echo "Password reset process initiated successfully.  A reset email has been sent (placeholder - verify email!).
";
} else {
    echo "Password reset process failed. Check error logs.
";
}
?>


<?php

// Database connection details - Replace with your actual values
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_database_username";
$db_password = "your_database_password";

// Function to reset password
function forgot_password($email)
{
    // 1. Check if email exists in the database
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $sql = "SELECT id, email FROM users WHERE email = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $email);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        $user_id = $result->fetch_assoc()['id'];
        $user_email = $result->fetch_assoc()['email'];

        // 2. Generate a unique token for the reset link
        $token = bin2hex(random_bytes(32)); // Generates a secure random string

        // 3. Store the token in the database associated with the user
        $sql = "UPDATE users SET password_reset_token = ? WHERE email = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("ss", $token, $email);

        if ($stmt->execute() === TRUE) {
            // 4.  Send an email with the reset link
            $reset_link = "http://localhost/reset_password.php?token=" . $token; // Replace with your website URL
            $to = $email;
            $subject = "Password Reset";
            $message = "Click on the link below to reset your password: " . $reset_link;
            $headers = "From: your_email@example.com"; // Replace with your email address

            mail($to, $subject, $message, $headers);

            echo "Password reset link sent to $email";
        } else {
            echo "Error updating password reset token: " . $conn->error;
        }

    } else {
        echo "Email not found";
    }

    $stmt->close();
    $conn->close();
}

// Example Usage (Demonstration -  Don't use this directly in a production environment)
//  This is only for testing the function.  Securely validate and sanitize user inputs before using.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    forgot_password($email);
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="">
        <label for="email">Enter your email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established and a 'users' table 
// with a 'email' column.  Replace these placeholders with your actual details.

// Database connection details
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$database = 'your_database_name';

// Function to reset password
function forgot_password($email, $host, $username, $password, $database) {
    // 1. Database Connection
    $conn = new mysqli($host, $username, $password, $database);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    // 2. Check if the user exists
    $stmt = $conn->prepare("SELECT id, email FROM users WHERE email = ?");
    $email = $conn->real_escape_string($email); // Sanitize input
    $stmt->bind_param("s", $email);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        return false; // User not found
    }

    $user = $result->fetch_assoc();
    $stmt->close();

    // 3. Generate a unique token (important for security!)
    $token = bin2hex(random_bytes(32));

    // 4. Store the token in the database, associated with the user.
    $stmt = $conn->prepare("UPDATE users SET password_reset_token = ?, password_reset_token_expiry = ? WHERE email = ?");
    $token = $conn->real_escape_string($token);
    $expiry = date('Y-m-d H:i:s', time() + 3600); // Token expires in 1 hour.  Adjust as needed.
    $token = $conn->real_escape_string($token);

    $stmt->bind_param("sis", $token, $expiry, $email);
    $stmt->execute();

    if (!$stmt->affected_rows > 0) { //Check if the update was successful
        $stmt->close();
        return false;
    }
    $stmt->close();


    // 5. Send the password reset email
    $to = $email;
    $subject = "Password Reset Request";
    $message = "Please reset your password by clicking on this link: " . $_SERVER['REQUEST_SCHEME'] . "://yourdomain.com/reset_password.php?token=" . $token; // Use your domain and the token
    $headers = "From: your_email@example.com";

    mail($to, $message, $headers);

    // 6. Return true to indicate success
    return true;
}



// Example Usage (simulated - for testing)
// In a real application, this would come from the form submission.
// $_POST['email'] = "test@example.com";  // Example email

// if (isset($_POST['reset_email'])) {
//     $email = $_POST['reset_email'];
//     if (forgot_password($email, $host, $username, $password, $database)) {
//         echo "Password reset email sent to " . $email;
//     } else {
//         echo "User not found or error sending email.";
//     }
// }
?>


<?php

// This is a simplified example.  In a production environment,
// you *must* implement more robust security measures.
// This includes:
// 1. Using a secure password reset token system (e.g., UUIDs)
// 2. Validating email addresses
// 3. Rate limiting to prevent abuse
// 4. Logging all reset requests for audit purposes
// 5. Hashing passwords securely (never store plain text passwords)

// Assuming you have a database connection established as $db

/**
 *  Forgot Password Function
 *
 *  This function handles the process of sending a password reset link
 *  to the user's email address.
 *
 *  @param string $email The email address of the user requesting a password reset.
 *
 *  @return bool True if the reset link was generated successfully, false otherwise.
 */
function forgot_password($email)
{
    // 1. Validate Email (Basic - Improve this in a production environment)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log the error for debugging
        return false;
    }

    // 2. Check if user exists
    $user = getUserByEmail($email); // Assume this function exists and returns user data or null
    if (!$user) {
        error_log("User with email " . $email . " not found.");
        return false;
    }

    // 3. Generate a unique reset token
    $reset_token = generate_unique_token();  // Assume this function generates a UUID or similar

    // 4. Store the token in the database associated with the user's ID
    //    (This is a simplified example - use prepared statements to prevent SQL injection!)
    //  Example using prepared statements is below (more secure)
    $query = "UPDATE users SET reset_token = ?, reset_token_expiry = ? WHERE email = ?";
    $stmt = $db->prepare($query);
    $stmt->bind_param("ss", $reset_token, date("Y-m-d H:i:s", time() + 3600), $email); // Token expiry (1 hour)
    $result = $stmt->execute();
    $stmt->close();

    if (!$result) {
        error_log("Error updating user reset token: " . $db->error);
        return false;
    }

    // 5. Send the reset link to the user's email address
    $subject = "Password Reset Link";
    $message = "Please click the following link to reset your password: " .  app_url . "/reset_password?token=" . $reset_token;
    $headers = "From: " . app_name . " <" . app_email . ">\r
";

    if (send_email($email, $subject, $message, $headers)) {
        return true;
    } else {
        error_log("Failed to send password reset email to " . $email);
        // Consider deleting the token from the database if email sending fails
        // This prevents the token from being used indefinitely.
        delete_reset_token($user['id'], $reset_token);
        return false;
    }
}

/**
 *  Helper functions (simplified - adapt to your database and email sending logic)
 */

function getUserByEmail($email) {
  // Replace this with your actual database query to fetch the user
  // based on the email address.  Use prepared statements!

  // Example using a placeholder - adjust for your database structure
  // return $db->query("SELECT * FROM users WHERE email = '$email'")->fetch_assoc();
  return null;
}

function generate_unique_token() {
  // Replace with a robust UUID generation library
  return bin2hex(random_bytes(32)); // Simple example, use a proper UUID library
}

function send_email($to, $subject, $message, $headers) {
  // Implement your email sending logic here.  Use a reliable email library.
  // Example using PHPMailer:
  //  require_once 'PHPMailer/PHPMailerAutoload.php';
  //  $mail = new PHPMailer();
  //  $mail->addAddress($to, $email);
  //  $mail->setFrom($from, $from);
  //  $mail->Subject = $subject;
  //  $mail->Body = $message;
  //  $mail->AltBody = strip_tags($message);
  //  if ($mail->send()) {
  //    return true;
  //  } else {
  //    return false;
  //  }
  return false; // Placeholder
}

//Example usage:
// $email = "test@example.com";
// if (forgot_password($email)) {
//   echo "Password reset email sent to " . $email;
// } else {
//   echo "Failed to generate password reset link.";
// }

?>


<?php

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_username';
$db_password = 'your_password';

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get the email from the form
    $email = trim($_POST["email"]);

    // Validate the email format (basic validation)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error_message = "Invalid email address.";
    } else {
        // Attempt to reset password
        if (reset_password($email)) {
            $success_message = "Password reset email sent to $email";
        } else {
            $error_message = "Could not reset password. Please try again.";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

<h1>Forgot Password</h1>

<?php if (isset($error_message)) { ?>
    <p style="color: red;"><?php echo $error_message; ?></p>
<?php } ?>

<?php if (isset($success_message)) { ?>
    <p style="color: green;"><?php echo $success_message; ?></p>
<?php } ?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email Address:</label>
    <input type="email" id="email" name="email" placeholder="your.email@example.com" required>
    <button type="submit">Reset Password</button>
</form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// and user information stored in a table (e.g., 'users') with columns like 'email' and 'password_hash'

function forgotPassword($email, $db) {
  // 1. Check if the email exists in the database
  $stmt = $db->prepare("SELECT id, password_hash FROM users WHERE email = ?");
  $stmt->bind_param("s", $email); // "s" indicates a string parameter
  $stmt->execute();

  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    // Email not found
    $stmt->close();
    return false;
  }

  $user = $result->fetch_assoc();
  $stmt->close();


  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32)); // Generate a cryptographically secure random token

  // 3. Store the token and user ID in a temporary table
  //  This prevents the token from being reused and helps track password reset attempts
  $stmt = $db->prepare("INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, ?)");
  $stmt->bind_param("iii", $user['id'], $token, time() + 3600); // 'i' indicates integer, time() + 3600 sets expiration to 1 hour
  $stmt->execute();
  $resetId = $db->insert_id; // Get the ID of the inserted row
  $stmt->close();


  // 4. Send the password reset link to the user's email
  $resetLink = "https://yourwebsite.com/reset-password?token=$token"; // Replace with your website's URL
  //  You'll need to implement email sending here.  For example:
  //  mail($user['email'], "Reset Your Password", "Click this link to reset your password: $resetLink");


  // 5. Return success or failure
  return true;  // Indicates the link was successfully generated and sent (implementation of email sending is external)
}



// Example Usage (assuming you have a form to submit the email)
//  This is just a demonstration. Replace with your actual form handling.
//  For example, in a form submission:

//   $email = $_POST['email'];
//   if (isset($email) && !empty($email)) {
//     if (forgotPassword($email, $db)) {
//       echo "A password reset link has been sent to your email address.";
//     } else {
//       echo "Email not found or an error occurred while generating the reset link.";
//     }
//   } else {
//     echo "Please enter your email address.";
//   }


?>


<?php

// Assuming you have a database connection established
// and you have a 'users' table with a 'email' field.

// 1. Check if the request is a password reset request.
if (isset($_POST['reset_password_request'])) {
  // Validate the email address (important for security)
  $email = filter_input(INPUT_POST, 'email', FILTER_SANITIZE_EMAIL);

  if (empty($email)) {
    // Handle empty email case
    echo "<p style='color:red;'>Please enter your email address.</p>";
    exit;
  }

  //  Add more robust validation here, like checking email format and length if needed

  //  Generate a unique token for the password reset request
  $token = bin2hex(random_bytes(32));

  //  Store the token and the user's email in the database
  //  This is just an example; adjust the query based on your database schema.
  $query = "INSERT INTO password_resets (user_email, reset_token, created_at) 
            VALUES ('$email', '$token', NOW())";

  // Assuming you're using MySQLi (adjust accordingly)
  $result = $mysqli->query($query);

  if ($result) {
    //  Send an email to the user with a link to reset their password
    //  Replace 'your_email_address' with your email address for sending
    $to = $email;
    $subject = 'Password Reset';
    $message = "Click on the following link to reset your password: " . 
                '<a href="' . $_SERVER['PHP_SELF'] . '?reset_token=' . $token . '">Reset Password</a>';
    $headers = 'From: your_email_address'; // Replace with your sending email

    if(mail($to, $subject, $message, $headers)){
        echo "<p style='color:green;'>Password reset link has been sent to your email.</p>";
    } else {
        echo "<p style='color:red;'>Error sending password reset email. Please try again later.</p>";
    }

  } else {
    // Handle database error
    echo "<p style='color:red;'>Error: " . $mysqli->error . "</p>";
  }
}

// 2. Handling the Password Reset Token
if (isset($_GET['reset_token'])) {
  $token = filter_input(INPUT_GET, 'reset_token', FILTER_SANITIZE_STRING);

  // Check if the token exists in the database
  $query = "SELECT user_email, password_reset_code FROM password_resets WHERE password_reset_code = '$token'";
  $result = $mysqli->query($query);

  if ($result) {
    $row = $result->fetch_assoc();
    $user_email = $row['user_email'];
    $reset_token = $row['password_reset_code'];

    // 3. Allow the user to set a new password
    //  This part would typically be in a separate form/page
    echo "<h1>Reset Password</h1>";
    echo "<form method='post' action='" . $_SERVER['PHP_SELF'] . "'>";
    echo "<label for='new_password'>New Password:</label><br>";
    echo "<input type='password' id='new_password' name='new_password' required><br><br>";
    echo "<label for='confirm_password'>Confirm Password:</label><br>";
    echo "<input type='password' id='confirm_password' name='confirm_password' required><br><br>";
    echo "<input type='submit' value='Reset Password'>";
    echo "</form>";

  } else {
    // Token not found
    echo "<p style='color:red;'>Invalid reset token. Please request a new one.</p>";
  }
}

// 4. Process the New Password (Form Submission)
if (isset($_POST['new_password']) && isset($_POST['confirm_password'])) {
    $new_password = filter_input(INPUT_POST, 'new_password', FILTER_SANITIZE_STRING);
    $confirm_password = filter_input(INPUT_POST, 'confirm_password', FILTER_SANITIZE_STRING);

    if ($new_password != $confirm_password) {
        echo "<p style='color:red;'>Passwords do not match.</p>";
    } else {
        // Hash the new password before saving it to the database
        $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

        //  Update the user's password in the database
        $query = "UPDATE users SET password = '$hashed_password' WHERE email = '$user_email'"; // Assuming you have a $user_email variable

        // Replace $user_email with the actual email address to update
        if ($mysqli->query($query)) {
            // Delete the reset token from the database
            $query = "DELETE FROM password_resets WHERE password_reset_code = '$token'";
            if ($mysqli->query($query)) {
                echo "<p style='color:green;'>Password reset successfully. Please log in.</p>";
            } else {
                echo "<p style='color:red;'>Error deleting token.</p>";
            }

        } else {
            echo "<p style='color:red;'>Error updating password.</p>";
        }
    }
}

?>


<?php

// Assuming you have a database connection established (e.g., $db connection)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password.
 * @param int $userId The user's ID.
 * @return bool True if password reset email was sent successfully, false otherwise.
 */
function forgotPassword(string $email, string $newPassword, int $userId) {

    // 1. Check if user exists
    $user = getUserById($userId);  // Implement this function to retrieve the user by ID
    if (!$user) {
        error_log("User with ID {$userId} not found."); // Log for debugging
        return false;
    }

    // 2. Hash the new password - Important for security!
    $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);

    // 3. Update the user's password in the database
    $sql = "UPDATE users SET password = '$hashedPassword' WHERE id = {$userId}";  // Adjust 'users' table and column names if needed
    $result = mysqli_query($GLOBALS['db'], $sql); // Assuming you're using MySQLi

    if (!$result) {
        error_log("Error updating password for user ID {$userId}: " . mysqli_error($GLOBALS['db'])); // Log for debugging
        return false;
    }


    // 4. Send password reset email
    $resetLink = generateResetLink($userId); // Implement this function (see example below)
    $subject = "Password Reset Request";
    $body = "To reset your password, please click on the following link: " . $resetLink;
    $headers = "From: your-website@example.com\r
";
    if (sendEmail($email, $subject, $body, $headers)) {
        return true;
    } else {
        error_log("Failed to send password reset email to {$email}");
        return false;
    }
}


/**
 * Example implementation for generateResetLink (you'll need to customize this)
 */
function generateResetLink(int $userId): string {
    // Generate a unique token (e.g., using UUID)
    $token = bin2hex(random_bytes(32));

    // Store the token in the database linked to the user ID
    // (This is a simplified example - proper security requires careful handling of tokens)
    //  In a real application, you'd probably use a more robust mechanism.
    saveToken($userId, $token);

    // Construct the reset link
    return "https://yourwebsite.com/reset-password?token=" . urlencode($token);
}


/**
 * Example implementation for saveToken (customize for your database)
 */
function saveToken(int $userId, string $token): void {
    // This is a placeholder -  adapt this to your database setup
    //  Store the token in the database associated with the user.
    //  For example, you might have a 'tokens' table with columns 'user_id' and 'token'.
    //  Important: Use prepared statements to prevent SQL injection.

    $sql = "INSERT INTO tokens (user_id, token) VALUES (?, ?)";
    $stmt = mysqli_prepare($GLOBALS['db'], $sql); // Assuming MySQLi
    mysqli_stmt_bind_param($stmt, "is", $userId, $token);  // 'i' for integer, 's' for string
    mysqli_stmt_execute($stmt);
    mysqli_stmt_close($stmt);
}



/**
 * Example implementation for sendEmail (you'll need to configure your email server)
 */
function sendEmail(string $to, string $subject, string $body, string $headers) {
    //  Replace with your email sending logic (e.g., using PHPMailer, SwiftMailer, or a direct SMTP connection)
    //  This is a placeholder -  you *must* implement this correctly.

    // Example using a dummy email function:
    error_log("Simulating email sending to {$to} with subject: {$subject}");  //  For debugging
    return true; //  Return true to indicate success (but the email isn't actually sent)
}



/**
 * Placeholder function to get a user by ID
 */
function getUserById(int $userId): ?object {
    //  Implement this function to retrieve the user from your database
    //  Example (adapt to your database schema):
    $sql = "SELECT * FROM users WHERE id = {$userId}";
    $result = mysqli_query($GLOBALS['db'], $sql);

    if ($row = mysqli_fetch_assoc($result)) {
        return $row;
    }

    return null;
}

?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a user table with a 'email' column.

// 1.  Form for resetting password
function displayForgotPasswordForm() {
  ?>
  <form action="reset_password.php" method="post">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>
  <?php
}

// 2. Reset Password Function (reset_password.php - this is called after form submission)
function resetPassword($email) {
  // IMPORTANT:  This is a simplified example.  In a real-world scenario,
  // you would implement more robust security measures such as:
  //  - Sending a temporary, unique, and time-limited token via email.
  //  - Verifying the token against the database.
  //  - Using secure password hashing algorithms (e.g., bcrypt, Argon2).

  // 1.  Check if the email exists in the database
  $query = "SELECT id, username FROM users WHERE email = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("s", $email);  // "s" for string
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $username = $user['username'];

    // 2. Generate a temporary password reset token (for demonstration only!)
    $token = bin2hex(random_bytes(32));

    // 3. Store the token in the database (associate it with the user)
    $query = "UPDATE users SET reset_token = ? WHERE email = ?";
    $stmt = $db->prepare($query);
    $stmt->bind_param("ss", $token, $email);
    $stmt->execute();

    // 4.  Email the user with a link containing the token
    $subject = "Password Reset Request";
    $message = "Click this link to reset your password: " .  $_SERVER['PHP_SELF'] . "?token=" . $token;
    $headers = "From: your_email@example.com" . "\r
";
    mail($email, $subject, $message, $headers);

    echo "Password reset email has been sent to " . $email;

  } else {
    echo "Email not found.";
  }

  $stmt->close();
}



// Example Usage (This would be triggered by a form submission)

// Assuming you received the email from the form
if (isset($_POST['email'])) {
  $email = $_POST['email'];
  resetPassword($email);
}
?>


<?php

// Assuming you have a database connection established (e.g., $pdo)

function forgotPassword($email, $password) {
    // **Important Security Considerations:**

    // 1. Sanitize and Validate Input:  ALWAYS sanitize and validate user input.  This example doesn't fully demonstrate this for brevity, but it's crucial.
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);  // Sanitize email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // 2. Use Strong Hashing: Never store passwords in plain text. Use a strong hashing algorithm like bcrypt or Argon2.
    // This example uses a placeholder - replace with a real hashing function!
    $hashedPassword = hash('argon2', $password, SALT);  // Replace 'SALT' with your actual salt

    // 3.  Rate Limiting:  Implement rate limiting to prevent brute-force attacks.
    // 4.  Email Sending:  Use a reliable email service (e.g., Mailgun, SendGrid) for sending password reset emails.  Don't use `mail()` directly, as it's often unreliable and doesn't handle attachments well.

    try {
        // Example database query (replace with your actual database structure and query)
        $stmt = $pdo->prepare("UPDATE users SET password = :password, reset_token = :reset_token, reset_token_expiry = :expiry WHERE email = :email");
        $stmt->execute([
            'password' => $hashedPassword,
            'reset_token' => generateUniqueToken(),
            'expiry' => date('Y-m-d H:i:s', time() + 3600), // Token expires in 1 hour
            'email' => $email
        ]);

        if ($stmt->rowCount() === 0) {
            return "User not found.";
        }

        // Send password reset email
        $resetLink = "https://yourwebsite.com/reset-password?token=" . $stmt->fetchColumn(); // Replace with your actual website URL

        // You'd normally use an email service here to send the email.
        // This is a placeholder:
        $subject = "Password Reset";
        $message = "Click the link below to reset your password: " . $resetLink;
        $headers = "From: yourwebsite@example.com"; // Replace with your email address
        // mail($email, $subject, $message, $headers);

        return "Password reset email sent. Check your inbox.";

    } catch (PDOException $e) {
        // Handle database errors gracefully
        return "Error: " . $e->getMessage();
    }
}

// Helper function to generate a unique token (replace with a stronger method!)
function generateUniqueToken() {
    return bin2hex(random_bytes(32)); // More secure than simple random numbers
}


// Example Usage (for demonstration only - don't use this directly in a public-facing application)
// $email = "test@example.com";
// $newPassword = "MyNewSecurePassword123";
// $result = forgotPassword($email, $newPassword);
// echo $result;
?>


<?php

// This is a simplified example for demonstration purposes.
// In a real application, you should *never* store passwords in plain text.
// Use a strong hashing algorithm like bcrypt or Argon2id.
// This code is for educational purposes only.

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password.
 * @param string $db_connection A database connection object (must be established).
 *
 * @return bool True if the password reset was successful, false otherwise.
 */
function forgot_password(string $email, string $newPassword, PDO $db_connection) {
  // Validate input (add more validation as needed)
  if (empty($email) || empty($newPassword)) {
    return false;
  }

  try {
    // Check if the email exists
    $stmt = $db_connection->prepare("SELECT id FROM users WHERE email = :email");
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    $stmt->execute();
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
      return false; // User not found
    }

    // Update the user's password
    $stmt = $db_connection->prepare("UPDATE users SET password = :password, last_password_reset = NOW WHERE id = :user_id");
    $stmt->bindParam(':password', $newPassword, PDO::PARAM_STR);
    $stmt->bindParam(':user_id', $user['id'], PDO::PARAM_INT);
    $stmt->execute();

    return true;

  } catch (PDOException $e) {
    // Handle database errors
    error_log("Database error in forgot_password: " . $e->getMessage());
    return false;
  }
}


// Example Usage (Illustrative - Replace with your actual database connection)
// This section is just for demonstration.  Don't run this in a production environment
// without proper validation and security measures.
//
// Assuming you have a PDO database connection object named $pdo

/*
$email = "testuser@example.com";
$newPassword = "NewSecretPassword123";

if (forgot_password($email, $newPassword, $pdo)) {
  echo "Password reset successful.  Please check your email for instructions.";
} else {
  echo "Password reset failed.";
}
*/


//  Important Considerations and Security Best Practices

// 1.  Password Hashing:  **Never** store passwords in plain text. Use a robust hashing algorithm like bcrypt or Argon2id.  These algorithms create a one-way hash, making it computationally infeasible to reverse engineer the original password.

// 2.  Email Sending:  This example doesn't include email sending. You'll need to integrate a library or service to send an email containing a temporary password, a link to reset the password, or instructions. Be extremely careful with security when sending emails, especially if the email contains a temporary password.

// 3.  Temporary Password:  When resetting a password, use a temporary password.  Force the user to change it upon their first login.

// 4.  Session Management: After the user successfully changes their password, you'll need to manage their session and potentially invalidate the old session to prevent unauthorized access.

// 5.  Rate Limiting:  Implement rate limiting to prevent brute-force password reset attempts.

// 6.  Input Validation:  Thoroughly validate all user inputs (email, new password) to prevent SQL injection and other vulnerabilities.

// 7.  Database Security:  Secure your database connection and follow best practices for database security.

// 8.  Logging:  Log all password reset attempts, both successful and unsuccessful, for auditing and security monitoring.

?>


<?php

// This is a simplified example.  In a real-world scenario, you'd
// store passwords securely (hashed) and use more robust security
// practices.

// IMPORTANT:  This example is for demonstration purposes ONLY.
// DO NOT use this in a production environment without proper security measures.

// Configuration (replace with your database credentials)
$db_host = 'localhost';
$db_user = 'your_db_user';
$db_pass = 'your_db_password';
$db_name = 'your_db_name';

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if password reset initiated successfully, false otherwise.
 */
function forgot_password(string $email): bool
{
  // 1. Database Connection
  $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

  if ($conn->connect_error) {
    error_log("Failed to connect to database: " . $conn->connect_error); // Log the error
    return false;
  }

  // 2.  Find the user by email
  $query = "SELECT id, email FROM users WHERE email = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("s", $email); // "s" indicates a string parameter

  if (!$stmt->execute()) {
    error_log("Failed to execute query: " . $stmt->error); // Log the error
    $stmt->close();
    $conn->close();
    return false;
  }

  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    error_log("User not found with email: " . $email); // Log the error
    $stmt->close();
    $conn->close();
    return false;
  }

  $user = $result->fetch_assoc();
  $userID = $user['id'];

  // 3. Generate a unique token (e.g., UUID) -  Important for security
  $token = bin2hex(random_bytes(32));

  // 4.  Create a password reset token record in the database
  $query = "INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, NOW())";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("sss", $userID, $token, $conn->insert_id); // 's' for string, 'i' for integer (for insert_id)

  if (!$stmt->execute()) {
    error_log("Failed to insert password reset token: " . $stmt->error);
    $stmt->close();
    $conn->close();
    return false;
  }

  // 5.  Send an email with a reset link
  $to = $email;
  $subject = 'Password Reset';
  $message = "Please click on the following link to reset your password: " . $_SERVER['REQUEST_SCHEME'] . "://yourdomain.com/reset?token=" . $token;
  $headers = "From: your_email@example.com";

  // You would typically use a mail function or a service like SendGrid/Mailgun
  // to send the email.  This is just a placeholder.
  // Example:  mail($to, $subject, $message, $headers);

  // 6. Success
  $stmt->close();
  $conn->close();
  return true;
}


// Example Usage (replace with actual email)
$email = 'test@example.com'; // Replace with the user's email

if (forgot_password($email)) {
  echo "Password reset email sent to " . $email;
} else {
  echo "Failed to initiate password reset.";
}

?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a random token, stores it in the database 
 * associated with the user's account, and sends an email to the user 
 * containing a link to reset their password.
 *
 * @param string $email The email address of the user.
 * @param string $token A random, unique token.  This should be generated securely.
 * @param string $reset_link_expiry The expiry time for the reset link (e.g., '24 hours').
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email, string $token, string $reset_link_expiry) {
  // 1. Validate Input (Important Security Step)
  if (empty($email)) {
    error_log("Forgot password: Empty email provided.");
    return false;
  }

  if (empty($token)) {
    error_log("Forgot password: Empty token provided.");
    return false;
  }

  // 2. Retrieve User
  $user = get_user_by_email($email); // Implement this function
  if (!$user) {
    error_log("Forgot password: User with email $email not found.");
    return false;
  }

  // 3. Generate Reset Link
  $reset_link = generate_reset_link( $user->id, $token, $reset_link_expiry ); // Implement this function

  // 4. Store Reset Token (in the database)
  if (!store_reset_token( $user->id, $token, $reset_link_expiry )) {
    error_log("Forgot password: Failed to store reset token for user $email.");
    return false;
  }

  // 5. Send Password Reset Email
  if (!send_password_reset_email($user->email, $reset_link)) {
    error_log("Forgot password: Failed to send password reset email to $email.");
    // You might want to consider deleting the token from the database 
    // to prevent abuse if the email fails.  However, deleting it could 
    // be problematic if the email delivery is eventually successful.
    // delete_reset_token( $user->id, $token );
    return false;
  }


  return true;
}



/**
 * Placeholder function to get a user by email. 
 *  **IMPORTANT:** Replace with your actual database query.
 *  This is just an example.
 *
 * @param string $email The email address.
 * @return object|null  A user object if found, null otherwise.
 */
function get_user_by_email(string $email) {
  // Replace this with your actual database query
  // Example using a hypothetical database connection:
  // $db = get_db_connection();
  // $stmt = $db->prepare("SELECT * FROM users WHERE email = ?");
  // $stmt->execute([$email]);
  // $user = $stmt->fetch();

  // Simulate a user object
  $user = new stdClass();
  $user->id = 123;
  $user->email = $email;
  return $user;
}


/**
 * Placeholder function to generate a reset link. 
 * **IMPORTANT:** Implement a secure random token generation.
 *
 * @param int $userId The ID of the user.
 * @param string $token The generated token.
 * @param string $expiry The expiry time for the link.
 * @return string The generated reset link.
 */
function generate_reset_link(int $userId, string $token, string $expiry) {
  // Implement a secure random token generation method here.
  // Example:
  $reset_link = "https://yourdomain.com/reset-password?token=$token&expiry=$expiry";
  return $reset_link;
}


/**
 * Placeholder function to store the reset token in the database.
 * **IMPORTANT:**  Use parameterized queries to prevent SQL injection.
 *
 * @param int $userId The ID of the user.
 * @param string $token The generated token.
 * @param string $expiry The expiry time for the link.
 * @return bool True on success, false on failure.
 */
function store_reset_token(int $userId, string $token, string $expiry) {
  // Replace with your actual database query
  // Example using a hypothetical database connection:
  // $db = get_db_connection();
  // $stmt = $db->prepare("INSERT INTO reset_tokens (user_id, token, expiry) VALUES (?, ?, ?)");
  // $stmt->execute([$userId, $token, $expiry]);
  // return $db->lastInsertId() > 0;

  return true; // Simulate success
}


/**
 * Placeholder function to delete the reset token.
 *  Use this if the email fails and you want to immediately remove the token.
 *  Consider the implications before deleting the token.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token.
 * @return bool True on success, false on failure.
 */
function delete_reset_token(int $userId, string $token) {
  // Replace with your actual database query
  // Example:
  // $db = get_db_connection();
  // $stmt = $db->prepare("DELETE FROM reset_tokens WHERE user_id = ? AND token = ?");
  // $stmt->execute([$userId, $token]);
  // return $stmt->rowCount() > 0;

  return true; // Simulate success
}


/**
 * Placeholder function to send the password reset email.
 * **IMPORTANT:**  Use a reliable email sending service.
 *
 * @param string $email The email address.
 * @param string $reset_link The generated reset link.
 */
function send_password_reset_email(string $email, string $reset_link) {
  // Replace with your actual email sending logic.
  // Use a reliable email sending service (e.g., SendGrid, Mailgun).
  // Example (Simulated):
  // $subject = "Password Reset";
  // $body = "Click this link to reset your password: " . $reset_link;
  // send_email($email, $subject, $body);

  // Simulate success
  return true;
}
?>


<?php

// Database connection details - Replace with your actual credentials
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Function to reset password
function forgot_password($email, $new_password, $database_host, $database_username, $database_password, $database_name) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Connect to the database
  $conn = new mysqli($database_host, $database_username, $database_password, $database_name);

  // Check connection
  if ($conn->connect_error) {
    return "Connection failed: " . $conn->connect_error;
  }

  // 3.  Check if user exists
  $sql = "SELECT id, email FROM users WHERE email = '$email'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $row = $result->fetch_assoc();
    $user_id = $row['id'];
    $user_email = $row['email'];

    // 4.  Hash the new password
    $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

    // 5. Update the password in the database
    $sql = "UPDATE users SET password = '$hashed_password' WHERE id = '$user_id'";
    if ($conn->query($sql) === TRUE) {
      return "Password reset successfully.  Please check your email for login instructions.";
    } else {
      return "Error updating password: " . $conn->error;
    }
  } else {
    return "User not found.";
  }

  // Close the connection
  $conn->close();
}


// Example Usage (This is just for demonstration - you would typically process a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $new_password = $_POST["new_password"];

  $reset_message = forgot_password($email, $new_password, $host, $username, $password, $database);
  echo $reset_message;
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="new_password">New Password:</label>
    <input type="password" id="new_password" name="new_password" required><br><br>

    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Include the database configuration file (e.g., config.php)
// This file should contain your database connection details.
require_once 'config.php';

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset email was sent, false otherwise.
 */
function forgot_password(string $email): bool
{
  // 1. Validate Input (Basic)
  if (empty($email)) {
    error_log("Forgot Password: Empty email provided."); // Log error for debugging
    return false;
  }

  // 2. Check if the user exists
  $stmt = $pdo->prepare("SELECT id, email FROM users WHERE email = :email");
  $stmt->bindParam(':email', $email, PDO::PARAM_STR);
  $stmt->execute();

  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (empty($user)) {
    error_log("Forgot Password: User with email '$email' not found."); // Log error
    return false;
  }


  // 3. Generate a unique token
  $token = bin2hex(random_bytes(32));  // Use a cryptographically secure random number generator

  // 4.  Store the token in the database.  This is crucial.  Otherwise the reset link won't work.
  $stmt = $pdo->prepare("UPDATE users SET reset_token = :token, reset_token_expiry = :expiry  WHERE email = :email");
  $stmt->bindParam(':token', $token, PDO::PARAM_STR);
  $stmt->bindParam(':expiry', date('Y-m-d H:i:s', time() + (3600)), PDO::PARAM_STR); // Token expires after 1 hour
  $stmt->bindParam(':email', $user['email'], PDO::PARAM_STR);
  $stmt->execute();


  // 5.  Send the password reset email
  $reset_link = base_url . "/reset-password?token=" . $token; // Generate the reset link

  $to = $user['email'];
  $subject = 'Password Reset';
  $message = "To reset your password, please click on this link: " . $reset_link;
  $headers = "From: " . get_option('admin_email') . "\r
"; // Use your admin email for the sender address
  mail($to, $subject, $message, $headers);


  return true;
}



// Example Usage (for testing - typically handled through a form submission)
// $email = $_POST['email'];  // Get email from form
// if (isset($email)) {
//     if (forgot_password($email)) {
//         echo "Password reset email has been sent to $email.";
//     } else {
//         echo "Error sending password reset email.";
//     }
// }



//  Helper function to get the base URL -  (This is a simplified example.  In a real application, you'd want to make this more robust,
//  potentially using a routing library or a configuration file to define the base URL.
function get_option(string $option) {
    //For demonstration purposes only.  Replace with your actual logic for retrieving the base URL.
    return 'http://yourwebsite.com/';
}


?>


<?php

// Database connection details (replace with your actual values)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_username';
$db_password = 'your_database_password';

// Function to handle the forgot password process
function forgotPassword($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return 'Invalid email address.';
  }

  // 2.  Check if the user exists
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  if ($conn->connect_error) {
    return 'Database connection failed: ' . $conn->connect_error;
  }

  $sql = "SELECT id, username FROM users WHERE email = '$email'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $user_data = $result->fetch_assoc();
    $userId = $user_data['id'];
    $username = $user_data['username'];

    // 3. Generate a unique token
    $token = bin2hex(random_bytes(32));

    // 4. Store the token in the database
    $sql = "UPDATE users SET password_token = '$token' WHERE email = '$email'";
    if ($conn->query($sql) === TRUE) {
      // 5. Send the reset link (implementation depends on your email sending method)
      //  This part requires a mail function or an email sending library.
      //  Example:
      $resetLink = 'http://yourwebsite.com/reset-password?token=' . $token;
      //  You would need to send an email to the user's email address
      //  with the resetLink in the body.
      
      // Return a success message with the reset link
      return '<a href="' . $resetLink . '" >Click here to reset your password</a>';

    } else {
      return 'Error updating user data.';
    }
  } else {
    return 'User not found.';
  }

  $conn->close();
}

// Example Usage (for testing, you should handle this through a form)
if ($_SERVER["REQUEST_METHOD"] == "GET") {
  // Check if a token is provided. This is how you'd typically get the token
  // from the URL in the reset-password page.
  if (isset($_GET['token'])) {
      $token = $_GET['token'];
      $resetPasswordMessage = forgotPassword($token);
      echo $resetPasswordMessage; // Output the returned message.  Replace with your display logic.
  } else {
     echo "No token provided.";
  }

}
?>


<?php

// Database connection details (replace with your actual credentials)
$host = 'localhost';
$username = 'your_db_username';
$password = 'your_db_password';
$database = 'your_db_name';

// Function to handle password reset
function forgotPassword($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email format.";
  }

  // 2. Check if the email exists in the database
  $pdo = new PDO("mysql:host=$host;dbname=$database", $username, $password);
  $stmt = $pdo->prepare("SELECT id, email FROM users WHERE email = :email");
  $stmt->bindParam(':email', $email);
  $stmt->execute();

  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    return "User with this email does not exist.";
  }

  // 3. Generate a unique token
  $token = bin2hex(random_bytes(32));

  // 4. Store the token in the database
  $pdo = new PDO("mysql:host=$host;dbname=$database", $username, $password);
  $stmt = $pdo->prepare("INSERT INTO password_resets (user_id, token, expires_at) VALUES (:user_id, :token, :expires_at)");
  $stmt->bindParam(':user_id', $user['id']);
  $stmt->bindParam(':token', $token);
  $stmt->bindParam(':expires_at', date('Y-m-d H:i:s', strtotime('+24 hours'))); // Expires in 24 hours
  $stmt->execute();

  // 5. Send the reset email
  $to = $email;
  $subject = 'Password Reset';
  $message = "Click on this link to reset your password: " . $_SERVER['REQUEST_SCHEME'] . "://yourwebsite.com/reset?token=" . $token; // Replace yourwebsite.com
  $headers = "From: yourname@yourwebsite.com";

  mail($to, $message, $headers);

  return "Password reset email sent to $email.";
}


// Example Usage (This part is for testing - you'll need a form to submit the email)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $resetMessage = forgotPassword($email);
  echo "<p>" . $resetMessage . "</p>";
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// and that you have a 'users' table with a 'email' and 'password' column.

function forgot_password($email, $db) {
  // 1. Verify email exists
  $result = $db->query("SELECT id, email FROM users WHERE email = '$email'");

  if ($result->num_rows > 0) {
    // Email exists, generate a reset token
    $reset_token = bin2hex(random_bytes(32)); // Generate a random token
    $db->query("UPDATE users SET reset_token = '$reset_token' WHERE email = '$email'");

    // 2. Send an email with the reset link
    $subject = "Password Reset Link";
    $message = "Click on the following link to reset your password: " .  $_SERVER['PHP_SELF'] . "?reset_token=$reset_token";
    $headers = "From: your_email@example.com" . "\r
"; // Replace with your email address
    mail($email, $subject, $message, $headers);

    return $reset_token; // Return the token for later use
  } else {
    return false; // Email not found
  }
}

// Example usage (assuming you have a form to submit the email)
//  (This is just a placeholder - you'd integrate this into your form handling)

//  Example:  If the user submits the email to reset_form.php
//  $email = $_POST['email'];
//  $token = forgot_password($email, $db);
//
//  if ($token) {
//    echo "Reset link sent to $email.  Please check your email.";
//  } else {
//    echo "Email not found or an error occurred.";
//  }

//  Example HTML form for submitting the email:
/*
<form method="post" action="reset_form.php">
  <label for="email">Email:</label>
  <input type="email" id="email" name="email" required>
  <button type="submit">Reset Password</button>
</form>
*/
?>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Check if the reset password form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get the email from the form
    $email = $_POST["email"];

    // Validate the email format (Basic validation - improve as needed)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email format.";
    } else {
        // Hash the password (Important for security - using password_hash)
        $hashed_password = password_hash($_POST["new_password"], PASSWORD_DEFAULT);

        // SQL Query -  **IMPORTANT:  Use prepared statements to prevent SQL injection!**
        $sql = "UPDATE users SET password = ? WHERE email = ?";
        $stmt = $conn->prepare($sql); // Assuming $conn is your database connection
        $stmt->bind_param("ss", $hashed_password, $email);

        if ($stmt->execute()) {
            $success = "Password reset email sent to $email";
        } else {
            $error = "Error resetting password.  Check database connection or permissions.";
        }
        $stmt->close();
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <?php if (isset($error)) {
        echo "<p style='color: red;'>$error</p>";
    } ?>

    <form action="forgot_password.php" method="post">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" placeholder="Your email" required>
        <br><br>

        <label for="new_password">New Password:</label>
        <input type="password" id="new_password" name="new_password" required>
        <br><br>

        <button type="submit">Reset Password</button>
    </form>

    <br>
    <a href="login.php">Back to Login</a>


</body>
</html>


<?php

// Assume you have a database connection established (e.g., $db)

/**
 * Forgets a user's password and sends a reset link.
 *
 * @param string $email The user's email address.
 * @return bool True if a reset link was sent successfully, false otherwise.
 */
function forgotPassword(string $email) {
    // 1. Validate Email (Important for security)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided.");
        return false;
    }

    // 2. Check if the user exists
    $user = getUserByEmail($email);
    if (!$user) {
        error_log("User with email {$email} not found.");
        return false;
    }

    // 3. Generate a unique reset token
    $resetToken = generateUniqueToken();

    // 4. Store the token in the database, associated with the user
    $result = storeResetToken($user->id, $resetToken);
    if (!$result) {
        error_log("Failed to store reset token for user {$email}.");
        return false;
    }

    // 5. Build the reset link
    $resetLink = generateResetLink($user->email, $resetToken);

    // 6. Send the reset link via email
    if (!sendResetEmail($user->email, $resetLink)) {
        // If sending email fails, you might want to log it for debugging or
        // consider alternative notification methods.
        error_log("Failed to send reset email to {$email}.");
    }


    return true;
}

// Helper functions (implement these based on your database and email setup)

/**
 * Retrieves a user from the database based on their email.
 *
 * @param string $email The email address to search for.
 * @return User|null  A User object if found, null otherwise.
 */
function getUserByEmail(string $email): ?User {
    //  Replace this with your actual database query
    // Example using a fictional User class:
    $db = getDatabaseConnection(); // Get your database connection
    $query = "SELECT * FROM users WHERE email = '{$email}'";
    $result = $db->query($query);

    if ($result->num_rows > 0) {
        $user = new User($result->fetch_assoc());
        return $user;
    }

    return null;
}

/**
 * Generates a unique random token.  Important for security.
 *
 * @return string A unique token.
 */
function generateUniqueToken(): string {
    return bin2hex(random_bytes(32)); // Secure random bytes
}


/**
 * Stores the reset token in the database, associated with the user's ID.
 *
 * @param int $userId The ID of the user.
 * @param string $token The reset token.
 * @return bool True if the token was stored successfully, false otherwise.
 */
function storeResetToken(int $userId, string $token): bool {
    // Replace this with your actual database operation.  Consider using prepared statements.
    // Example using a fictional User class:
    $db = getDatabaseConnection();
    $query = "UPDATE users SET reset_token = '{$token}' WHERE id = {$userId}";
    return $db->query($query) === true;
}



/**
 * Generates the reset link.
 *
 * @param string $email The user's email address.
 * @param string $token The reset token.
 * @return string The reset link.
 */
function generateResetLink(string $email, string $token): string {
    return "https://yourwebsite.com/reset-password?token={$token}&email={$email}"; // Replace with your actual URL
}



/**
 * Sends the reset email.
 *
 * @param string $email The user's email address.
 * @param string $resetLink The reset link.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function sendResetEmail(string $email, string $resetLink): bool {
    // Replace this with your actual email sending logic.
    //  Use a secure email sending service.

    // This is just a placeholder - implement your email sending code here.
    // Example:
    // $subject = "Password Reset Link";
    // $message = "Click the link below to reset your password: " . $resetLink;
    // $headers = "From: yourname@example.com\r
";
    // return mail($email, $message, $headers);

    error_log("Email sending to {$email} with link {$resetLink} is not yet implemented.");
    return false;
}


// ---- Example Usage (for testing) ----
//  This is just for demonstration.  Do not use this in a production environment
//  without proper security considerations.

// $email = "testuser@example.com"; // Replace with a valid email address
// if (forgotPassword($email)) {
//     echo "Reset link sent to {$email}. Check your email!";
// } else {
//     echo "Failed to send reset link.";
// }

?>


<?php

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Function to handle password reset request
function forgotPassword($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email format.";
  }

  // 2. Check if the user exists
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    return "Database connection failed: " . $conn->connect_error;
  }

  $result = $conn->query("SELECT id, username FROM users WHERE email = '$email'");

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $username = $user['username'];

    // 3. Generate a unique token
    $token = bin2hex(random_bytes(32)); 

    // 4. Store the token in the database for the user
    $conn->query("UPDATE users SET reset_token = '$token' WHERE id = '$userId'");

    // 5.  Create a reset link (Email Content)
    $subject = "Password Reset Request";
    $to = $email;
    $message = "Dear " . $username . ",

" .
               "You requested a password reset.
" .
               "Please click the following link to reset your password:
" .
               "<a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'>Reset Password</a>

" .
               "This link expires in 1 hour.

" .
               "Sincerely,
The Password Reset Team";

    // 6. Send the email (using mail() - adjust your server's configuration)
    if (mail($to, $subject, $message)) {
      return "Password reset email sent to $email.";
    } else {
      return "Password reset email failed to send. Check your server's mail configuration.";
    }
  } else {
    return "User not found with email $email.";
  }

  $conn->close();
}

// Example Usage (This is just for demonstration -  implement this in your form)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $resetResult = forgotPassword($email);
  echo "<p>" . $resetResult . "</p>";
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Enter your email address:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

/**
 * Resets a user's password after a forgotten password request.
 *
 * This function generates a unique token, sends an email with a reset link,
 * and stores the token in the database for verification.
 *
 * @param string $email The email address of the user requesting the reset.
 * @return bool True if the reset process was initiated successfully, false otherwise.
 */
function forgot_password(string $email) {
  // 1. Generate a Unique Token
  $token = bin2hex(random_bytes(32)); // Secure random token (32 bytes)

  // 2. Hash the Token (Important for security!)
  $hashed_token = password_hash($token, PASSWORD_DEFAULT);

  // 3. Store the Token in the Database
  //  - Replace this with your actual database connection and query.
  //  - This is a simplified example.
  $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");  // Adjust credentials
  try {
    $stmt = $db_connection->prepare(
      "INSERT INTO password_resets (email, token, created_at) VALUES (:email, :token, NOW())"
    );
    $stmt->bindParam(':email', $email);
    $stmt->bindParam(':token', $hashed_token);
    $stmt->execute();
  } catch (PDOException $e) {
    // Handle database errors - log them, show a user-friendly message, etc.
    error_log("Database error in forgot_password: " . $e->getMessage());
    return false;
  }

  // 4. Send the Reset Email (Implement your email sending logic here)
  $reset_link = "http://yourwebsite.com/reset_password?token=" . $token; // Replace with your domain
  $subject = "Password Reset Request";
  $message = "Click on the link below to reset your password:
" . $reset_link;
  $headers = "From: your_email@example.com\r
";
  // Use a proper email sending function (e.g., PHPMailer) here instead of relying on simple echo
  // This example just prints the message for demonstration.  Do not use this in production.

  //print_r($headers . $message);
  // Example:
  // send_email($email, $subject, $message, $headers);

  return true;
}

// Example Usage (For testing - do not use directly in your application!)
// $user_email = "test@example.com";
// if (forgot_password($user_email)) {
//   echo "Password reset link sent to " . $user_email;
// } else {
//   echo "Failed to initiate password reset.";
// }

// ---  Example Email Sending Function (Replace with a proper implementation) ---
// function send_email($to, $subject, $message, $headers) {
//     //  This is a placeholder. Use a library like PHPMailer for real email sending.
//     //  PHPMailer requires configuration (SMTP server, username, password, etc.)
//     //  Example (using placeholder values - DO NOT USE IN PRODUCTION):
//     //  $smtp = new PHPMailer\PHPMailer\PHPMailer();
//     //  $smtp->SMTPDebugEnable = false; // Set to true for debugging
//     //  $smtp->Host = 'smtp.example.com';
//     //  $smtp->Port = 587;
//     //  $smtp->Username = 'your_email@example.com';
//     //  $smtp->Password = 'your_password';
//     //  $smtp->SetFrom('your_email@example.com', 'Your Name');
//     //  $smtp->AddAddress($to);
//     //  $smtp->Subject = $subject;
//     //  $smtp->Body = $message;
//     //  $smtp->AltBody = "Plain text version of the email";
//     //  if ($smtp->send()) {
//     //      echo "Email sent successfully!
";
//     //  } else {
//     //      echo "Failed to send email.
";
//     //  }
// }

?>


<?php

// Assuming you have a database connection established (e.g., $db connection)

/**
 * Forgets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset email was sent successfully, false otherwise.
 */
function forgot_password(string $email): bool
{
    // Validate email (basic check - you should use a more robust validation method)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided for password reset."); // Log invalid emails
        return false;
    }

    // Check if the user exists
    $user = get_user_by_email($email); // Function to retrieve user by email

    if (!$user) {
        error_log("User with email $email not found.");
        return false;
    }

    // Generate a unique token and timestamp
    $token = generate_unique_token();
    $timestamp = time();

    // Store the token and timestamp in the database (for now, we'll use a simplified approach - consider a more secure method)
    // This is the key part that needs to be adapted to your database schema.
    // Ideally, you'd store the token and timestamp in a table specifically designed for password resets.

    $reset_data = [
        'user_id' => $user['id'],
        'token' => $token,
        'timestamp' => $timestamp,
    ];

    // Store the data (Replace this with your database query)
    // Example:
    // $result = mysqli_query($db, "INSERT INTO password_resets (user_id, token, timestamp) VALUES ('$user_id', '$token', '$timestamp')");
    // if (!$result) {
    //     error_log("Error storing password reset token in database.");
    //     return false;
    // }

    // Send the password reset email
    $subject = "Password Reset Request";
    $message = "To reset your password, please click on the following link: " . get_reset_link($token);
    $headers = "From: your_email@example.com"; // Replace with your email address
    $sent = send_email($email, $subject, $message, $headers);

    if ($sent) {
        // Optionally, you can delete the temporary reset data after sending the email (for security)
        // delete_password_reset_token($token);
        return true;
    } else {
        error_log("Failed to send password reset email to $email.");
        return false;
    }
}


// --- Helper Functions (Implement these according to your database and email setup) ---

/**
 * Retrieves a user by their email address.
 *
 * @param string $email The email address to search for.
 * @return array|null An associative array representing the user, or null if not found.
 */
function get_user_by_email(string $email): ?array
{
    // Replace this with your actual database query
    // Example using a MySQL database:
    // $result = mysqli_query($db, "SELECT * FROM users WHERE email = '$email'");
    // if ($result) {
    //     if (mysqli_num_rows($result) > 0) {
    //         $user = mysqli_fetch_assoc($result);
    //         return $user;
    //     }
    // }
    // return null;
}

/**
 * Generates a unique token.
 *
 * @return string A unique token.
 */
function generate_unique_token(): string
{
    return bin2hex(random_bytes(32));
}

/**
 * Creates a URL for the password reset link.
 *
 * @param string $token The token.
 * @return string The password reset link URL.
 */
function get_reset_link(string $token): string
{
    return "your_website_url/reset_password?token=" . urlencode($token); // Replace your website URL
}

/**
 * Sends an email.  (Implement this using your email sending library)
 *
 * @param string $to The recipient's email address.
 * @param string $subject The email subject.
 * @param string $message The email body.
 * @param string $headers The email headers.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function send_email(string $to, string $subject, string $message, string $headers): bool
{
    //  Replace this with your email sending implementation.  Use a library like PHPMailer:
    //   https://peps.php.net/phpmassmailer
    // Example (placeholder):
    // $mail = new PHPMailer(true);
    // $mail->SetFrom("your_email@example.com", "Your Name");
    // $mail->AddAddress($to, "User Name");
    // $mail->Subject = $subject;
    // $mail->MsgBody = $message);
    // return $mail->Send();
    return true; // Placeholder - replace with actual email sending logic
}


//  Example Usage (for testing - in a real application, this would come from the form submission)
// $email = "test@example.com";
// if (forgot_password($email)) {
//     echo "Password reset email has been sent to $email.";
// } else {
//     echo "Failed to send password reset email.";
// }

?>


<?php

// Assuming you have a database connection established
// (e.g., $db connection object)
// and that you've defined a 'users' table with an 'email' column.

// Function to handle password reset
function forgotPassword($email, $resetToken, $resetHash, $db) {
  // 1. Check if the token exists in the database
  $query = "SELECT id FROM reset_tokens WHERE email = ? AND token = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("ss", $email, $resetToken);
  $stmt->execute();

  if ($stmt->rowCount() == 0) {
    // Token not found
    return false;
  }

  // 2. If the token exists, update the 'used' column to true
  $query = "UPDATE reset_tokens SET used = 1 WHERE email = ? AND token = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("ss", $email, $resetToken);
  $stmt->execute();

  if ($stmt->rowCount() == 0) {
    // Error updating token -  rare, but handle it.
    error_log("Error updating reset token: " . $db->error); // Log for debugging
    return false;
  }

  // 3. Send an email with a reset link (implement this part)
  //   -  Generate a temporary password and email it to the user
  //   -  Include a link to the password reset form with the token
  //   -  Set an expiration time for the token
  
  // Example:  (Replace with your email sending logic)
  $subject = "Password Reset Link";
  $to = $email;
  $body = "Click on this link to reset your password: " . $_SERVER['REQUEST_URI'] . "?token=" . $resetToken;

  //  Use a real email sending function here (e.g., sendmail, PHPMailer)
  //  Example using PHP's built-in mail function (simplest, but often unreliable):
  mail($to, $subject, $body);


  return true; // Token updated successfully
}


// Example Usage (for testing - this doesn't actually send an email)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $resetToken = $_POST["reset_token"];
  $resetHash = $_POST["reset_hash"];  // This would be a hash of a temp password.  Don't store plain text passwords!

  //  Simulate a database connection (replace with your actual connection)
  $db = new mysqli("localhost", "username", "password", "database_name");

  if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
  }

  if (forgotPassword($email, $resetToken, $resetHash, $db)) {
    echo "Password reset request sent.  Check your email.";
  } else {
    echo "Password reset request failed.  Possibly an invalid token.";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Password Reset</title>
</head>
<body>

  <h1>Password Reset</h1>

  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <input type="hidden" name="reset_token" value="<?php echo isset($_GET['token']) ? $_GET['token'] : ''; ?>">

    <input type="submit" value="Reset Password">
  </form>

  <p>If you forgot your password, enter your email address to receive a reset link.</p>

</body>
</html>


<?php

// Assuming you have a database connection established and named $db

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user to reset the password for.
 * @return bool True if password reset email was sent successfully, false otherwise.
 */
function forgotPassword(string $email)
{
    global $db; // Assuming $db is your database connection

    // 1. Check if the email exists in the database
    $stmt = $db->prepare("SELECT id, email FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        // Email doesn't exist
        return false;
    }

    // 2. Generate a unique token (for security)
    $token = bin2hex(random_bytes(32)); // Use a strong random string

    // 3.  Update the user's record with the token.
    $stmt = $db->prepare("UPDATE users SET password_reset_token = ?, password_reset_expiry = ? WHERE email = ?");
    $stmt->execute([$token, time() + 3600, $email]);  //expiry set to 1 hour.  Adjust as needed.

    // 4. Send the password reset email
    $resetLink = "https://yourdomain.com/reset-password?token=" . urlencode($token); // Replace with your actual domain
    $subject = "Password Reset Request";
    $message = "Click the link below to reset your password: " . $resetLink;

    $headers = "From: Your Website <noreply@yourdomain.com>"; // Replace with your email address

    if (mail($email, $subject, $message, $headers)) {
        return true;
    } else {
        // Email sending failed
        return false;
    }
}



// Example Usage (for testing - outside of the main application flow)
// $email = "test@example.com";
// if (forgotPassword($email)) {
//     echo "Password reset email sent to $email";
// } else {
//     echo "Failed to send password reset email to $email";
// }

?>


<?php

// Database configuration (Replace with your actual credentials)
$dbHost = 'localhost';
$dbName = 'your_database_name';
$dbUser = 'your_db_user';
$dbPass = 'your_db_password';

// ------------------ Forgot Password Function ------------------

/**
 * Resets a user's password based on their email.
 *
 * @param string $email The email address of the user.
 * @return bool True if password reset email sent successfully, false otherwise.
 */
function forgotPassword($email)
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return false; // Invalid email format
    }

    // 2. Fetch User Data
    $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName;charset=utf8", $dbUser, $dbPass);
    $stmt = $pdo->prepare("SELECT id, password_reset_token, created_at FROM users WHERE email = :email");
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    $stmt->execute();

    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        return false; // User not found
    }

    // 3. Generate a Unique Token (Important for security - can use a library for better randomness)
    $token = bin2hex(random_bytes(32));  // Create a cryptographically secure random token

    // 4. Update User Data with Token
    $stmt = $pdo->prepare("UPDATE users SET password_reset_token = :token, password_reset_token_created_at = :created_at WHERE id = :id");
    $stmt->bindParam(':id', $user['id'], PDO::PARAM_INT);
    $stmt->bindParam(':token', $token, PDO::PARAM_STR);
    $stmt->bindParam(':created_at', time(), PDO::PARAM_INT);
    $stmt->execute();


    // 5. Send Password Reset Email (Implement your email sending logic here)
    $resetLink = "http://yourdomain.com/reset-password?token=$token&id=$user['id']"; // Build the URL
    sendPasswordResetEmail($email, $resetLink);

    return true;
}


// ------------------ Helper Functions (Implement these) ------------------

/**
 *  Sends a password reset email.  This is where you integrate with your email sending service.
 *
 * @param string $email      The user's email address.
 * @param string $resetLink  The URL for the password reset link.
 */
function sendPasswordResetEmail($email, $resetLink)
{
    // *** Replace this with your actual email sending code ***
    // This is just a placeholder.  Use a library like PHPMailer or SwiftMailer
    // to properly send emails.

    $subject = "Password Reset Request";
    $body = "Please click the following link to reset your password:
" . $resetLink;

    // Example (replace with your email sending implementation)
    // $to = $email;
    // $headers = "From: your_email@example.com\r
";
    // mail($to, $subject, $body, $headers);

    echo "Password reset email sent to: " . $email . "
"; // Simulate sending - replace with actual mail functionality.
}



// ------------------ Example Usage (Testing - Remove in production!) ------------------

// Replace with a valid email address from your database
$emailToReset = "testuser@example.com"; //  Replace with a real email or test email

if (forgotPassword($emailToReset)) {
    echo "Password reset process initiated for " . $emailToReset . "
";
} else {
    echo "Failed to initiate password reset for " . $emailToReset . "
";
}


?>


<?php

// This file should be kept secure and not accessible directly from the web.
// Use it only within your application's logic.

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';

// 1. Get the email from the request (usually POST)
if (isset($_POST['email'])) {
  $email = filter_input(INPUT_POST, 'email', FILTER_SANITIZE_EMAIL); // Sanitize input

  // Check if email is valid
  if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
    // 2. Check if the email exists in the database
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_password);

    try {
      $stmt = $pdo->prepare("SELECT id, password FROM users WHERE email = :email");
      $stmt->bindParam(':email', $email, PDO::PARAM_STR);
      $stmt->execute();

      $user = $stmt->fetch(PDO::FETCH_ASSOC);

      if ($user) {
        // 3. Generate a unique token and store it in the database
        $token = bin2hex(random_bytes(32)); // Generate a cryptographically secure token
        $pdo->prepare("UPDATE users SET password_reset_token = :token, password_reset_token_expiry = :expiry  WHERE email = :email");
        $pdo->bindValue(':token', $token, PDO::PARAM_STR);
        $pdo->bindValue(':expiry', time() + 3600, PDO::PARAM_INT); // Token expires in 1 hour
        $pdo->bindValue(':email', $email, PDO::PARAM_STR);
        $pdo->execute();

        // 4. Send an email with the reset link
        $to = $email;
        $subject = 'Password Reset Link';
        $message = "Please click on the following link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . '?email=$email&token=$token'>Reset Password</a>";
        $headers = "From: your_email@example.com";  // Replace with your email

        mail($to, $message, $headers);


        echo "Password reset email has been sent. Please check your inbox.";

      } else {
        echo "User not found.";
      }

    } catch (PDOException $e) {
      echo "Database error: " . $e->getMessage();
    }
  } else {
    echo "Invalid email format.";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if password reset email sent successfully, false otherwise.
 */
function forgotPassword(string $email): bool
{
    // 1. Check if the email exists
    $user = getUserByEmail($email);

    if (!$user) {
        return false; // User not found
    }

    // 2. Generate a unique token and store it
    $token = generateUniqueToken();
    $hashedToken = password_hash($token, PASSWORD_DEFAULT); // Hash the token for security

    // 3. Store the token in the database (associate it with the user)
    $result = updateUserToken($user, $hashedToken);

    if (!$result) {
        return false; // Failed to update user's token
    }

    // 4. Send the password reset email
    if (!sendResetPasswordEmail($user->email, $token)) {
        // If sending email fails, consider deleting the token to avoid security issues
        deleteUserToken($user, $hashedToken);
        return false;
    }

    return true;
}

/**
 * Helper function to get a user by email.  Replace with your database query.
 *
 * @param string $email The email address to search for.
 * @return User|null  The user object if found, or null if not found.
 */
function getUserByEmail(string $email): ?User
{
    //  This is a placeholder.  Replace with your actual database query.
    //  Example:
    //  $stmt = $db->prepare("SELECT * FROM users WHERE email = ?");
    //  $stmt->execute([$email]);
    //  $user = $stmt->fetch(\PDO::FETCH_ASSOC); // Or whatever fetch method you use
    //  return $user ? new User($user) : null;

    // Dummy user object for testing
    return new User(['id' => 1, 'email' => $email]);
}


/**
 * Generate a unique token.  Use a more robust method in production.
 *
 * @return string  A unique token.
 */
function generateUniqueToken(): string
{
    return bin2hex(random_bytes(32)); // 32 bytes = 256 bits
}


/**
 *  This is a placeholder - implement your database update logic here.
 *
 * @param User $user The user object to update.
 * @param string $hashedToken The hashed token.
 * @return bool True if update was successful, false otherwise.
 */
function updateUserToken(User $user, string $hashedToken): bool
{
    // Replace with your actual database update query
    // Example:
    // $stmt = $db->prepare("UPDATE users SET token = ? WHERE id = ?");
    // $stmt->execute([$hashedToken, $user->id]);
    // return $stmt->rowCount() > 0;

    //Dummy success for testing
    return true;
}

/**
 * Delete the token from the database for a user.
 * @param User $user
 * @param string $hashedToken
 */
function deleteUserToken(User $user, string $hashedToken)
{
    // Replace with your actual database delete query
    // Example:
    // $stmt = $db->prepare("DELETE FROM users WHERE id = ? AND token = ?");
    // $stmt->execute([$user->id, $hashedToken]);
}



/**
 * Send a password reset email.
 *
 * @param string $email The email address to send the email to.
 * @param string $token The unique token.
 * @return bool True if email sent successfully, false otherwise.
 */
function sendResetPasswordEmail(string $email, string $token): bool
{
    // Replace with your email sending logic (e.g., using PHPMailer or similar library)
    // This is a placeholder.  In a real application, you'd send an email.

    // Example (simulated email sending):
    //  $subject = 'Password Reset Request';
    //  $body = "Please use the following token to reset your password: " . $token;
    //  $headers = ['MIME-Version: 1.0', 'Content-type: text/html; charset=UTF-8'];
    //  return mail($email, $body, $headers);

    //Dummy success for testing
    return true;
}



// Example User class - adapt to your actual User model
class User {
    public int $id;
    public string $email;

    public function __construct(array $data)
    {
        $this->id = $data['id'];
        $this->email = $data['email'];
    }
}


// Example Usage (Demonstration - replace with actual input)
$email = 'testuser@example.com';

if (forgotPassword($email)) {
    echo "Password reset email sent successfully to $email";
} else {
    echo "Failed to reset password for $email";
}

?>


<?php

// Assume you have a database connection setup here
// Example: $db = new PDO("mysql:host=localhost;dbname=your_database");

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email): bool
{
    // 1. Check if the email exists in the database
    $stmt = $db->prepare("SELECT id, email FROM users WHERE email = ?");
    $stmt->execute([$email]);

    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        // Email doesn't exist
        return false;
    }

    // 2. Generate a unique token (e.g., using UUID)
    $token = bin2hex(random_bytes(32)); // Securely generate a random token

    // 3. Store the token and user ID in the database
    $stmt = $db->prepare("UPDATE users SET password_reset_token = ?, password_reset_expires = ? WHERE email = ?");
    $stmt->execute([$token, time(), $email]); // Expires after 30 minutes (or your desired time)

    // 4. Send an email to the user with a link containing the token
    //    (This is a placeholder - you'll need to implement your email sending logic)
    // Example:
    $subject = "Password Reset Link";
    $message = "Click on the following link to reset your password: " .  $_SERVER['REQUEST_SCHEME'] . "://localhost/reset_password.php?token=" . $token;  //Replace with your actual URL
    $headers = "From: your_email@example.com" . "\r
";

    // Check if email sending function exists, if not, return false
    if(function_exists('mail')){
        $result = mail("user@example.com", $subject, $message, $headers);
        if ($result === NULL) {
            return true;
        } else {
            // Handle email sending failure - log the error, etc.
            error_log("Error sending email for password reset: " . $result); //Log for debugging
            return false;
        }
    } else {
        error_log("Email sending function not found. Please implement email sending.");
        return false;
    }

    return true; // Token generated and stored successfully (awaiting user action)
}


// Example Usage (assuming you have the $db connection)
// $email = "user@example.com";
// if (forgot_password($email)) {
//     echo "Password reset email sent to $email.";
// } else {
//     echo "Failed to generate password reset token.";
// }

?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a table named 'users' with columns 'id', 'email', and 'password'

// Function to handle password reset requests
function forgotPassword($email, $db) {
  // 1. Validate Email (Crucial for security!)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if the email exists in the database
  $result = $db->query("SELECT id, email FROM users WHERE email = '$email'");

  if ($result->num_rows > 0) {
    // Email exists, generate a unique token and store it in the database
    $token = bin2hex(random_bytes(32)); // Generate a secure random token
    $db->query("UPDATE users SET reset_token = '$token' WHERE email = '$email'");

    // 3. Send an email with a reset link
    $to = $email;
    $subject = 'Password Reset';
    $message = "Click on the following link to reset your password: " . base_url() . "/reset-password?token=$token";  //  base_url() needs to be defined in your config
    $headers = "From: admin@example.com" . "\r
";

    mail($to, $message, $headers);
    return "Password reset email sent to $email.";

  } else {
    return "Email not found in our database.";
  }
}

// Example usage (assuming you have a base_url function defined)
//  This is just for demonstration.  Integrate this into your application logic.
//  Don't directly execute this example code in a deployed environment!
//
// $email = $_POST['email']; // Get email from form submission
// $reset_response = forgotPassword($email, $db);
// echo $reset_response;

?>


<?php

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_username';
$db_password = 'your_password';

// Function to reset the password
function forgotPassword($email, $newPassword) {
  // 1. Database Connection
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // 2. Hash the new password
  $hashed_password = password_hash($newPassword, PASSWORD_DEFAULT);

  // 3. Update the password in the database
  $sql = "UPDATE users SET password = '$hashed_password' WHERE email = '$email'";

  if ($conn->query($sql) === TRUE) {
    return true;  // Password reset successful
  } else {
    return false;  // Password reset failed
  }

  // 4. Close the connection
  $conn->close();
}


// Example Usage (for demonstration purposes - integrate with your form)
//  This is for testing, usually you'd handle the form submission separately.

// Example email: Replace with the actual email address
$email_to = 'test@example.com';
$new_password = 'newSecretPassword123'; // Replace with a secure password

if (forgotPassword($email_to, $new_password)) {
  echo "Password reset successful! Please check your email.";
} else {
  echo "Password reset failed.  Please try again.";
}


//  Important Considerations and Best Practices:

// 1. Security:
//    * Never store passwords in plain text. Always use password hashing.  `password_hash()` with `PASSWORD_DEFAULT` is the recommended approach.
//    * Use prepared statements to prevent SQL injection vulnerabilities.  (While this example doesn't use prepared statements, it's *crucial* for any real-world implementation)
//    * Implement rate limiting to prevent brute-force attacks.  Don't allow users to request password resets too frequently.
//    * Consider using a token-based approach to password resets, where a unique token is generated and sent to the user's email. This token is then used to verify the user's request.

// 2. Error Handling:
//    * Implement comprehensive error handling.  Log errors to a file or database for debugging.  Don't just display generic "failed" messages.
//    * Check if the email address exists in the database before attempting to update the password.

// 3. User Experience:
//    * Provide clear and helpful instructions to the user.
//    * Send a confirmation email to the user after the password reset is successful.
//    *  Consider adding a "forgot password" link on the login page.

// 4.  Email Sending (not included in this example, but essential)
//     * You'll need to use a library or function to send emails.  Popular options include:
//       * PHPMailer
//       * SwiftMailer

// 5.  Password Complexity Requirements:
//    * Enforce password complexity rules (minimum length, required characters, etc.)  You can do this on the client-side (using JavaScript) or server-side (in your PHP code) or ideally both.
?>


<?php

/**
 * Resets a user's password based on their email address.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password to set.
 * @param array $dbConnection A database connection object.
 *
 * @return bool True if password reset initiated successfully, false otherwise.
 */
function forgot_password(string $email, string $newPassword, array $dbConnection) {
  // 1. Validate Input (Important for security!)
  if (empty($email) || empty($newPassword)) {
    return false; // Return immediately if input is invalid
  }

  // 2. Check if user exists
  $user = mysqli_query($dbConnection, "SELECT id, email FROM users WHERE email = '$email'");
  if (mysqli_num_rows($user) == 0) {
    return false; // User not found
  }

  $user_row = mysqli_fetch_assoc($user_row);
  $userId = $user_row->id;

  // 3. Hash the New Password
  $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

  // 4. Update the User's Password
  $result = mysqli_query($dbConnection, "UPDATE users SET password = '$hashedNewPassword' WHERE id = '$userId'");

  if (mysqli_affected_rows($dbConnection) > 0) {
    return true; // Password reset successful
  } else {
    return false; // Password update failed
  }
}


// --- Example Usage (Simulated Database - Replace with your actual database connection) ---

// Simulate a database connection (replace with your real connection)
$dbConnection = mysqli_connect("localhost", "your_username", "your_password", "your_database");

if (mysqli_connect_errno($dbConnection)) {
  echo "Failed to connect to MySQL: " . mysqli_connect_error();
  exit();
}


// Example data
$email = "testuser@example.com"; // Replace with a valid user email
$newPassword = "NewPassword123!"; // Replace with the new password you want to set

// Call the function
$resetResult = forgot_password($email, $newPassword, $dbConnection);

if ($resetResult) {
  echo "Password reset initiated successfully for $email.<br>";
} else {
  echo "Failed to reset password for $email.<br>";
}

// Close the connection (Important!)
mysqli_close($dbConnection);
?>


<?php

/**
 * Forgot Password Function
 *
 * This function allows users to reset their passwords.
 * It generates a unique token, sends an email with a reset link, and
 * allows the user to confirm the password reset.
 *
 * @param string $email The email address of the user.
 * @return bool True if the password reset process was initiated successfully,
 *              false otherwise.
 */
function forgot_password(string $email)
{
    // 1. Generate a unique token
    $token = bin2hex(random_bytes(32)); // Secure random bytes

    // 2.  Store the token and user ID in the database (example - adjust as needed)
    //  This is just an example.  You'll likely use your own database connection
    //  and query logic.

    // Assuming you have a database connection called $db
    // $db->query("DELETE FROM password_resets WHERE email = '$email'");  // Optional - clear old resets
    $user_id = getUserIDbyEmail($email);  // Helper function to get user ID
    if ($user_id === false) {
        return false; // User not found.
    }


    $db->query("INSERT INTO password_resets (user_id, token, expiry) VALUES ($user_id, '$token', NOW() + INTERVAL 1 HOUR)");


    // 3. Generate the reset link
    $reset_link = urlencode($db->query("SELECT token FROM password_resets WHERE user_id = $user_id LIMIT 1")->fetch_assoc()['token']);


    // 4. Send the email
    $subject = "Password Reset Link";
    $headers = "From: your_website@example.com\r
"; // Replace with your email address
    $message = "Click on the following link to reset your password: " . $reset_link;

    $sent = mail($email, $subject, $message, $headers);


    // 5. Return true if the email was sent
    return $sent;
}


/**
 * Helper function to get user ID by email.  Replace with your database logic.
 *
 * @param string $email The email address to search for.
 * @return int|false The user ID if found, false otherwise.
 */
function getUserIDbyEmail(string $email): ?int
{
    //  Replace this with your database query to retrieve the user ID by email.
    // Example using MySQLi:
    // $result = $db->query("SELECT id FROM users WHERE email = '$email'");
    // if ($result->num_rows > 0) {
    //   return $result->fetch_assoc()['id'];
    // } else {
    //   return false;
    // }

    // Placeholder -  Always return false for now
    return false;

}


// Example Usage (Demonstration only - Replace with your actual input)
// $email = "testuser@example.com"; // Replace with a real email

// if (forgot_password($email)) {
//   echo "Password reset email has been sent to $email.";
// } else {
//   echo "Failed to initiate password reset for $email.";
// }

?>


<?php

// Assuming you have a database connection established
// (e.g., using mysqli or PDO)
// $db = new mysqli($host, $username, $password, $database);
// Check connection
// if ($db->connect_error) {
//     die("Connection failed: " . $db->connect_error);
// }


/**
 * Forgets the user's password by sending a password reset link to their email.
 *
 * @param string $email The user's email address.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email): bool
{
    // 1. Validate Email (Important!)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided.");
        return false;
    }

    // 2. Check if the user exists
    $user = getUserByEmail($email); // Assuming you have a getUserByEmail function
    if ($user === false) {
        error_log("User with email '$email' not found.");
        return false;
    }

    // 3. Generate a Unique Reset Token
    $resetToken = generateUniqueToken();

    // 4. Store the Token (Important for Security)
    //  -  This is where you'd typically hash and salt the token.
    //  -  Storing the raw token in a database is generally discouraged due to security risks.
    //  -  Hashing and salting the token is crucial for security.
    //  -  This example keeps it simple, but **DO NOT USE THIS IN PRODUCTION!**
    $isValid = saveResetToken($user->id, $resetToken);
    if (!$isValid) {
        error_log("Failed to save reset token.");
        return false;
    }


    // 5. Create the Reset Link (Email Content)
    $resetLink = createResetLink($user->email, $resetToken);

    // 6. Send the Email
    if (!sendResetEmail($user->email, $resetLink)) {
        error_log("Failed to send reset email.");
        // Optionally, you could delete the token from the database
        // if you want to invalidate it if the email fails to send.
        // deleteResetToken($user->id, $resetToken);
        return false;
    }

    return true;
}

// ---------------------------------------------------------------------
// Placeholder functions - Replace with your actual implementation
// ---------------------------------------------------------------------

/**
 *  Placeholder function to get a user by their email.  Replace with your database query.
 * @param string $email
 * @return mysqli_result|false
 */
function getUserByEmail(string $email): false
{
    // **Replace this with your database query to fetch the user**
    // Example using mysqli:
    // $query = "SELECT * FROM users WHERE email = '$email'";
    // $result = $db->query($query);
    // if ($result->num_rows > 0) {
    //     $user = $result->fetch_assoc();
    //     return $user;
    // }
    // return false;

    // Mock data for testing
    $users = [
        ['id' => 1, 'email' => 'test@example.com', 'password' => 'password123'],
        ['id' => 2, 'email' => 'another@example.com', 'password' => 'anotherpass']
    ];
    foreach ($users as $user) {
        if ($user['email'] === $email) {
            return $user;
        }
    }
    return false;
}


/**
 *  Placeholder function to generate a unique token.
 * @return string
 */
function generateUniqueToken(): string
{
    return bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator
}


/**
 * Placeholder function to save the reset token to the database.
 * @param int $userId
 * @param string $token
 * @return bool
 */
function saveResetToken(int $userId, string $token): bool
{
    // **Replace this with your database query to save the token**
    // Example using mysqli:
    // $query = "INSERT INTO reset_tokens (user_id, token, expiry_date) 
    //           VALUES ($userId, '$token', NOW() + INTERVAL 1 HOUR)";
    // $result = $db->query($query);
    // return $result;

    // Mock implementation for testing - does nothing
    return true;
}


/**
 * Placeholder function to delete the reset token from the database.
 * @param int $userId
 * @param string $token
 * @return bool
 */
function deleteResetToken(int $userId, string $token): bool {
    // **Replace this with your database query to delete the token**
    // Example using mysqli:
    // $query = "DELETE FROM reset_tokens WHERE user_id = $userId AND token = '$token'";
    // $result = $db->query($query);
    // return $result;

    // Mock implementation for testing - does nothing
    return true;
}


/**
 * Placeholder function to create the reset link (email content).
 * @param string $email
 * @param string $token
 * @return string
 */
function createResetLink(string $email, string $token): string
{
    return "<a href='reset_password.php?token=$token'>Reset Password</a>";
}

/**
 * Placeholder function to send the reset email.
 * @param string $email
 * @param string $resetLink
 * @return bool
 */
function sendResetEmail(string $email, string $resetLink): bool
{
    // **Replace this with your email sending logic**
    // Example using PHPMailer:
    // require_once 'PHPMailer/PHPMailerAutoload.php';
    // $mail = new PHPMailer();
    // $mail->SMTPDebugEnable = false; // Set to true for debugging
    // $mail->isSMTP();
    // $mail->Host = 'smtp.example.com';
    // $mail->Port = 587;
    // $mail->Username = 'your_smtp_username';
    // $mail->Password = 'your_smtp_password';
    // $mail->SetFrom('your_email@example.com', 'Your Website Name');
    // $mail->Subject = 'Password Reset';
    // $mail->Body = $resetLink;
    // $mail->AddAddress($email);
    // return $mail->send();

    // Mock implementation for testing - does nothing
    return true;
}

// ---------------------------------------------------------------------
// Example Usage (For Testing)
// ---------------------------------------------------------------------

// To test, you'd call this function from a form submission:
// $email = $_POST['email'];
// $result = forgotPassword($email);
// if ($result) {
//    echo "Password reset link sent to $email.";
// } else {
//    echo "Failed to send password reset link.";
// }

?>


<?php

// Assuming you have a database connection established
// (e.g., $db = new PDO(...) or similar)

// Function to handle the forgot password process
function forgot_password($email) {
    // 1. Validate Email (Important for security!)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // 2. Generate a Unique Token
    $token = bin2hex(random_bytes(32));  // More secure random token

    // 3. Store the Token in the Database (associated with the email)
    // This is where you'd insert a record into your users table
    // with columns like 'email', 'token', and 'token_expiry'
    // This example assumes a 'users' table with 'email' and 'password' columns.
    //  Adjust to your actual database schema.

    // Assuming you have a database connection called $db
    try {
        $stmt = $db->prepare("INSERT INTO users (email, token, token_expiry) VALUES (:email, :token, :expiry)");
        $stmt->bindParam(':email', $email);
        $stmt->bindParam(':token', $token);
        $stmt->bindParam(':expiry', date('Y-m-d H:i:s', strtotime('+30 minutes'))); // Token expires after 30 minutes. Adjust as needed.
        $stmt->execute();
    } catch (PDOException $e) {
        return "Error inserting token into database: " . $e->getMessage();
    }

    // 4. Send an Email with the Reset Link
    $subject = "Password Reset Request";
    $to = $email;
    $headers = "From: your_email@example.com" . "\r
";
    $link = "http://yourwebsite.com/reset_password.php?token=$token"; // Replace with your actual reset password page URL.  **Use HTTPS in production!**

    $message = "Click the link below to reset your password:
" . $link;

    mail($to, $message, $headers);

    return "Password reset link has been sent to your email address. Please check your inbox (and spam folder!).";
}


// Example Usage (This is just for demonstration - not for production)
// $email = "testuser@example.com"; // Replace with the user's email
// $result = forgot_password($email);
// echo $result;
?>


<?php

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Function to handle password reset requests
function forgot_password($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email format.";
  }

  // 2. Check if the email exists in the users table
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    return "Connection failed: " . $conn->connect_error;
  }

  $sql = "SELECT id, password FROM users WHERE email = '$email'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    $id = $user['id'];
    $hashed_password = $user['password']; // Or generate a random token for reset link

    // 3. Generate a unique reset token (for security)
    $reset_token = bin2hex(random_bytes(32)); 

    // 4. Store the reset token with the user's ID
    $reset_sql = "INSERT INTO password_resets (user_id, token, created_at) 
                  VALUES ($id, '$reset_token', NOW())";
    if (!$conn->query($reset_sql)) {
      return "Error storing reset token.  Database error: " . $conn->error;
    }

    // 5.  Send an email with the reset link
    $to = $email;
    $subject = "Password Reset Link";
    $message = "Click this link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=" . urlencode($reset_token) . "'>Reset Password</a>";
    $headers = "From: your_email@example.com" . "\r
";
    mail($to, $message, $headers); 

    return "Password reset link sent to your email.  Check your inbox.";

  } else {
    return "User not found with this email.";
  }
  $conn->close();
}

// --- Example Usage (for testing) ---
// $email_to_reset = "testuser@example.com"; // Replace with a valid email address for testing
// $reset_result = forgot_password($email_to_reset);
// echo $reset_result;

?>


<?php

// Ensure this file is not directly accessible via web browser
if (session_status() !== 'session_started') {
    die('This file should be included within a session.');
}

// Database connection (replace with your actual details)
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$database = 'your_database';

// Function to reset password
function forgot_password($email) {
    // 1. Check if email exists in the database
    $conn = new mysqli($host, $username, $password, $database);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $query = "SELECT id, email FROM users WHERE email = '$email'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        $user_id = $result->fetch_assoc()['id'];
        $user_email = $result->fetch_assoc()['email'];

        // 2. Generate a unique token
        $token = bin2hex(random_bytes(32)); // More secure random token

        // 3.  Store token in database (temporary)
        $conn->query("UPDATE users SET reset_token = '$token' WHERE email = '$email'");

        // 4.  Email the user with a link to reset password
        $to = $email;
        $subject = 'Password Reset Link';
        $message = "Please click on the following link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . '?reset_token=$token' . "'>Reset Password</a>";
        $headers = "From: your_email@example.com"; // Replace with your email

        mail($to, $message, $headers);

        $conn->close();
        return true;

    } else {
        $conn->close();
        return false;
    }
}


// Example Usage (This would typically be triggered from a form submission)
//  Assume a form has an email field and submits a request.

if (isset($_POST['email'])) {
    $email = $_POST['email'];
    if (forgot_password($email)) {
        echo "<p>Password reset link has been sent to your email address.</p>";
    } else {
        echo "<p>An error occurred while processing your request.</p>";
    }
}

?>


<?php

// Assuming you have a database connection established and a 'users' table with an 'email' and 'password' column.
// Replace these placeholders with your actual database details.

// Database credentials
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_pass = 'your_database_password';

// Function to handle the forgot password process
function forgotPassword($email) {
  // 1. Check if the email exists in the database
  $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
  if ($conn->connect_error) {
    // Handle connection error
    die("Connection failed: " . $conn->connect_error);
  }

  $sql = "SELECT id, password FROM users WHERE email = '$email'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $user_id = $result->fetch_assoc()['id'];
    $hashed_password = $result->fetch_assoc()['password']; // Important:  Get the *hashed* password

    // 2. Generate a temporary password and store it in the database
    $temp_password = generateTemporaryPassword();
    $conn->query("UPDATE users SET temporary_password = '$temp_password' WHERE id = '$user_id'");

    // 3. Send the temporary password to the user
    $subject = "Temporary Password for Your Account";
    $message = "Your temporary password is: $temp_password.  Please reset your password as soon as possible.";
    $headers = "From: your_email@example.com";  // Replace with your email

    mail($email, $message, $headers);

    return true;
  } else {
    return false; // Email not found
  }

  $conn->close();
}

// Helper function to generate a temporary password
function generateTemporaryPassword() {
  $length = 12;
  $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';
  $password = '';
  $charactersLength = strlen($characters);
  for ($i = 0; $i < $length; $i++) {
    $random = random_int($charactersLength);
    $password .= $characters[$random];
  }
  return $password;
}


// Example Usage: (This should be handled by a form submission)
if (isset($_POST['email'])) {
  $email = $_POST['email'];

  if (isset($_POST['reset_password'])) {
    if (forgotPassword($email)) {
      echo "<p>A temporary password has been sent to your email address.</p>";
    } else {
      echo "<p>Email not found or an error occurred while sending the password.</p>";
    }
  } else {
     echo "<form method='post' action=''>";
     echo "<label for='email'>Email:</label><input type='email' id='email' name='email' required><br>";
     echo "<button type='submit' name='reset_password'>Reset Password</button>";
     echo "</form>";
  }

} else {
   echo "<form method='post' action=''>";
   echo "<label for='email'>Email:</label><input type='email' id='email' name='email' required><br>";
   echo "<button type='submit' name='reset_password'>Reset Password</button>";
   echo "</form>";
}

?>


<?php

// IMPORTANT:  This is a basic example and should NOT be used in a production environment.
// It's designed for demonstration and educational purposes.  A real-world implementation
// needs robust security measures, rate limiting, email verification, and more.

// 1. Database connection (replace with your actual database details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database_name";

// 2. Create a connection
$conn = new mysqli($host, $username, $password, $database);

// 3. Check the connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True on success, false on failure.
 */
function reset_password(string $email): bool {
    // Sanitize the email address (important for security)
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);

    // Validate the email format
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return false;
    }

    // Get the user's ID based on the email
    $sql = "SELECT id FROM users WHERE email = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $email); // 's' indicates a string parameter
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        return false; // User not found
    }

    $user_id = $result->fetch_assoc()['id'];
    $stmt->close();

    // Generate a unique, random password reset token
    $token = bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator.

    // Hash the token for security
    $hashed_token = password_hash($token, PASSWORD_DEFAULT);

    // Update the user's record with the new token
    $sql = "UPDATE users SET reset_token = ? , reset_token_expiry = ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("sss", $token, time(), $user_id); // "s" for string, time() for expiry
    $stmt->execute();

    if ($stmt->affected_rows > 0) {
        // Send an email with the reset link
        $to = $email;
        $subject = 'Password Reset';
        $message = "Click <a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'</a> to reset your password.";
        $headers = "From: your_email@example.com" . "\r
";  // Replace with your email address

        mail($to, $subject, $message, $headers);

        return true;
    } else {
        return false; // Update failed
    }
}



// Example Usage (for demonstration only - don't use directly in a public-facing application)
if (isset($_GET['reset'])) {
    $token = $_GET['reset'];
    if (reset_password($token)) {
        echo "Password reset email sent. Check your inbox.";
    } else {
        echo "Failed to reset password.";
    }
}

// 4. Close the connection (important for resource management)
$conn->close();

?>


<?php

// Database connection details (Replace with your actual details)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_username';
$db_password = 'your_password';

/**
 * Forgets a user's password by sending a password reset email.
 *
 * @param string $email The email address of the user.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function forgot_password(string $email): bool
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format: " . $email); // Log invalid emails for debugging
        return false;
    }

    // 2. Check if User Exists
    $stmt = $GLOBALS['db']->prepare("SELECT id, username FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        error_log("User with email $email not found."); //Log user not found
        return false;
    }

    // 3. Generate a Unique Token (Use a more robust method in production)
    $token = bin2hex(random_bytes(32)); // More secure than rand()

    // 4. Store the Token in the Database
    $stmt = $GLOBALS['db']->prepare("UPDATE users SET password_reset_token = ?, password_reset_token_expiry = ? WHERE email = ?");
    $stmt->execute([$token, time() + 60*60*24, $email]); // Token expires in 24 hours

    // 5. Send Password Reset Email (Using PHPMailer - Install with Composer: `composer require phpmailer/phpmailer`)
    if (!send_password_reset_email($email, $token);) {
        error_log("Failed to send password reset email for user $email.");
        // You might want to roll back the database update here if sending the email fails, 
        // depending on your requirements.
        return false;
    }

    return true;
}

/**
 * Sends a password reset email to the given email address with the provided token.
 *
 * @param string $email The email address to send the email to.
 * @param string $token The password reset token.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function send_password_reset_email(string $email, string $token): bool
{
    // Configuration for the email
    $to = $email;
    $subject = 'Password Reset';
    $message = "Click on the following link to reset your password: " . '<a href="' . $_SERVER['PHP_SELF'] . '?reset=' . urlencode($token) . '" >Reset Password</a>';
    $headers = 'From: your_email@example.com' . "\r
"; // Replace with your email
    
    // Use PHPMailer to send the email
    $mail = new PHPMailer(true);

    $mail->isSMTP();          // Set to true for SMTP
    $mail->Host           = 'smtp.example.com'; // Replace with your SMTP server
    $mail->SMTPAuth       = true;                     // Enable SMTP authentication
    $mail->Username       = 'your_username';           // SMTP username
    $mail->Password       = 'your_password';           // SMTP password
    $mail->Port           = 587;                       // TCP port to use
    $mail->SetFrom('your_email@example.com', 'Your Application Name'); // Replace with sender email
    $mail->Subject = $subject;
    $mail->Body = $message;
    $mail->IsHTML(true);  // Create HTML email body
    
    if (!$mail->Send()) {
        error_log("Failed to send email for user: " . $email); // Log email sending failure
        return false;
    }

    return true;
}


// --- Example Usage (For Testing) ---
// Replace 'test@example.com' with a valid email address
$email_to_reset = 'test@example.com';

if (forgot_password($email_to_reset)) {
    echo "Password reset email sent to $email_to_reset. Check their inbox!";
} else {
    echo "Failed to send password reset email for $email_to_reset.";
}

?>


<?php

/**
 * Forgot Password Function
 *
 * This function generates a unique, time-based token and sends an email
 * to the user with a link to reset their password.
 *
 * @param string $email The email address of the user to reset the password for.
 * @param string $baseUrl The base URL of your website (required for constructing the reset link).
 * @return bool True if the reset link was successfully sent, false otherwise.
 */
function forgotPassword($email, $baseUrl) {
    // 1. Check if the email exists in the database (Replace with your database connection)
    if (!isValidEmail($email)) {
        return false;
    }

    // 2. Generate a unique token
    $token = bin2hex(random_bytes(32)); // Use a strong random number generator
    
    // 3. Store the token and user ID in the database (Replace with your database interaction)
    //  This should be done securely -  e.g., using prepared statements to prevent SQL injection
    if (!storeResetToken($token, $_SESSION['userId'])) { // Assuming you have a session variable for user ID
        return false;
    }

    // 4. Construct the reset link
    $resetLink = $baseUrl . "/reset-password?token=" . urlencode($token);

    // 5. Send the email
    if (!sendResetPasswordEmail($email, $resetLink)) {
        // Handle email sending failure - log the error, display a message, etc.
        return false;
    }

    return true;
}


/**
 *  Helper function to validate email format
 * @param string $email
 * @return bool
 */
function isValidEmail($email) {
    return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;
}



/**
 * Helper function to store the reset token and user ID in the database.
 *
 * @param string $token The unique token generated.
 * @param int $userId The user ID.
 * @return bool True if the token was successfully stored, false otherwise.
 */
function storeResetToken($token, $userId) {
    // Replace this with your actual database interaction.
    // Example using a hypothetical database connection:
    $db = new PDO("mysql:host=localhost;dbname=your_database_name", "username", "password"); //Replace with your credentials

    try {
        $stmt = $db->prepare("INSERT INTO password_resets (user_id, token, expires_at) VALUES (:user_id, :token, :expires_at)");
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':token', $token);
        $stmt->bindParam(':expires_at', date('Y-m-d H:i:s', time() + 60 * 60 * 24)); // Token expires after 24 hours
        return $stmt->execute();
    } catch (PDOException $e) {
        // Handle database errors - log, display an error, etc.
        error_log("Error storing reset token: " . $e->getMessage());
        return false;
    }
}


/**
 * Helper function to send the reset password email.
 *
 * @param string $email The email address of the user.
 * @param string $resetLink The reset password link.
 * @return bool True if the email was successfully sent, false otherwise.
 */
function sendResetPasswordEmail($email, $resetLink) {
    // Replace with your email sending logic (e.g., using PHPMailer, SwiftMailer, or a similar library)
    // This is a placeholder example:
    $subject = "Password Reset Request";
    $message = "Click on the following link to reset your password: " . $resetLink;
    $headers = "From: your_email@example.com\r
"; // Replace with your email address
    
    if (mail($email, $subject, $message, $headers)) {
        return true;
    } else {
        return false;
    }
}
// Example usage:
$email = "test@example.com"; // Replace with the user's email
$baseUrl = "http://yourwebsite.com"; // Replace with your website's base URL

if (forgotPassword($email, $baseUrl)) {
    echo "Reset link sent to " . $email;
} else {
    echo "Failed to send reset link.";
}


?>


<?php

// Assuming you have a database connection established
// (e.g., $db is your database connection object)
// and a user table with an 'email' column.

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email): bool
{
  // 1. Check if the email exists
  $user = db_query("SELECT id, email FROM users WHERE email = %s", $email);  // Use prepared statement!

  if ($user->num_rows == 0) {
    // Email not found
    return false;
  }

  // 2. Generate a unique token (for security)
  $token = bin2hex(random_bytes(32)); // Generate a strong random token

  // 3. Store the token in the database, associated with the user
  $result = db_query("INSERT INTO password_resets (user_id, token, created_at) 
                       VALUES (%d, %s, NOW())", $user->fetch_assoc()['id'], $token);

  if (!$result) {
    // Error inserting token
    return false;
  }

  // 4.  Send an email to the user with the reset link.
  //  (Implementation of the email sending part depends on your email setup)

  $subject = "Password Reset Request";
  $to = $email;
  $from = "your_app@example.com"; // Replace with your app's email address
  $reset_link = "https://your_app.com/reset-password?token=" . $token;  //  Replace with your app URL

  $message = "Click the link below to reset your password:
" . $reset_link;
  $headers = "From: " . $from . "\r
";
  $headers .= "Reply-To: " . $from . "\r
";
  $headers .= "X-Mailer: PHP/" . phpversion();

  //  Simulate sending the email (replace with your actual email sending function)
  //  mail($to, $subject, $message, $headers);  
  //  Use a proper email sending library like PHPMailer for production.

  return true;
}


// Example Usage:
//  Assume $email is the user's email address
//  $success = forgotPassword($email);

//  if ($success) {
//    echo "Password reset link sent to $email";
//  } else {
//    echo "Failed to generate password reset link.";
//  }



/**
 *  Helper function -  Replace with your actual database query function
 *  This is just an example, adapt to your database system.
 *  It's important that this function uses prepared statements
 *  to prevent SQL injection vulnerabilities.
 *
 * @param string $query The SQL query to execute.
 * @param array $params The parameters to bind to the query.
 * @return mysqli_result The result of the query.
 */
function db_query(string $query, array $params = []) {
    // Replace with your database connection and query execution code.
    // This is a placeholder, adapt it to your database setup.

    // Example using MySQLi (adapt to your database system).
    //  This is for demonstration purposes only and must be adapted to your specific database setup.
    
    // Assuming you have a $db object established.
    
    //  Always use prepared statements to prevent SQL injection!
    $stmt = $db->prepare($query);

    if ($stmt) {
        $stmt->execute($params);
        $result = $stmt->get_result();
        return $result;
    } else {
        // Handle the error
        error_log("Error preparing query: " . $query);
        return false;
    }
}
?>


<?php

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email) {
    // 1. Check if the email exists in the users table
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
        error_log("Failed to connect to database: " . $conn->connect_error); // Log the error for debugging
        return false;
    }

    $query = "SELECT id, email FROM users WHERE email = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("s", $email); // "s" indicates a string parameter
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        $conn->close();
        return false; // Email not found
    }

    $user = $result->fetch_assoc();
    $user_id = $user['id'];
    $user_email = $user['email'];
    $stmt->close();

    // 2. Generate a unique token
    $token = bin2hex(random_bytes(32)); // Secure random token

    // 3. Prepare the password reset query
    $query = "UPDATE users SET password_reset_token = ?, password_reset_token_expiry = ? WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("ssi", $token, time() + 3600, $user_id); // Token, expiry (1 hour), user ID

    if ($stmt->execute()) {
        $stmt->close();
        // 4. Send the password reset link (implementation omitted for brevity - see below)
        // Implement your email sending logic here.
        // Example:  Send an email with a link like:
        //  http://yourwebsite.com/reset_password.php?token=$token&user_id=$user_id
        return true;
    } else {
        $stmt->close();
        error_log("Failed to update user password reset token: " . $conn->error); // Log the error
        return false;
    }
}


// Example Usage (This would be triggered by a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    if (!empty($email)) {
        if (forgot_password($email)) {
            echo "<p>Password reset email has been sent to $email.</p>";
        } else {
            echo "<p>Failed to generate password reset link. Please try again later.</p>";
        }
    } else {
        echo "<p>Please enter your email address.</p>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// **Important:** This is a simplified example for demonstration purposes.
// In a real-world application, you would:
// 1.  Implement robust security measures (e.g., strong password hashing, rate limiting, email verification).
// 2.  Store user data securely (e.g., in a database).
// 3.  Handle errors gracefully.
// 4.  Implement proper logging.

// Assuming you have a form to submit the email address from
// e.g., on the forgot_password.php file

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Get the email address from the form
    $email = $_POST["email"];

    // Validate the email address (basic validation - improve this in a real application)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email address.";
    } else {
        // **Security Warning:** DO NOT store the password directly.
        // This is just a demonstration.  You MUST use strong hashing.
        // In reality, you'd generate a temporary token and send an email
        // with a link containing that token.  This token would be used
        // to reset the password.

        // Dummy password reset logic - **Replace with real password reset process**
        $reset_code = 'TEMP_RESET_CODE_123'; // Or generate a unique, random code

        // Check if the reset code exists in the database (or wherever you store it)
        if ($reset_code) {
            // In a real application, you would:
            // 1.  Update the user's password in the database with a hashed password.
            // 2.  Potentially invalidate the temporary token.

            $success = true;
            $message = "Password reset link sent to your email address.";
        } else {
            $success = false;
            $message = "Error: Unable to generate reset code.";
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

<h1>Forgot Password</h1>

<?php if (isset($error)): ?>
    <p style="color: red;"><?php echo $error; ?></p>
<?php endif; ?>

<?php if (isset($message)): ?>
    <p style="color: green;"><?php echo $message; ?></p>
<?php endif; ?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email Address:</label>
    <input type="email" id="email" name="email" placeholder="Your email address" value="<?php echo isset($email) ? htmlspecialchars($email) : ''; ?>">
    <button type="submit">Reset Password</button>
</form>

</body>
</html>


<?php

// This is a simplified example and should be adapted to your specific environment
// and security needs.  It's crucial to implement robust security measures.

// 1.  Database Connection (Replace with your actual database details)
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_db_user";
$db_pass = "your_db_password";

// 2.  Email Sending Function (Implement your email sending library here)
function send_email($email, $password) {
    // This is a placeholder.  Replace with your email sending logic
    // using a library like PHPMailer or SwiftMailer.
    // Example using a simple echo (DO NOT USE IN PRODUCTION)
    echo "Sending password reset email to: " . $email . "
";
    // In a real implementation, you'd send an email with a link to the
    // password reset form.

    // Example using PHPMailer (requires installation and configuration)
    //  require_once 'PHPMailer/PHPMailerAutoload.php';
    //  $mail = new PHPMailer();
    //  $mail->SMTPDebugEnable = true;  // Enable debugging
    //  $mail->isSMTP();
    //  $mail->Host       = 'smtp.example.com';
    //  $mail->Port = 587;
    //  $mail->SetOption('smtp-timeout', 60);
    //  $mail->Username = 'your_smtp_username';
    //  $mail->Password = 'your_smtp_password';
    //  $mail->SetFrom('youremail@example.com', 'Your Application Name');
    //  $mail->addRecipient($email, 'Your Application Name');
    //  $mail->Subject = 'Password Reset';
    //  $mail->Body = 'Click this link to reset your password: ' . $_SERVER['REQUEST_URI'];
    //  $mail->send();
}


// 3. Forgot Password Function
function forgot_password($email) {
    // Sanitize and Validate Input (Crucial for Security)
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // Check if the email exists in the users table (Replace 'users' with your table name)
    $query = "SELECT id, username FROM users WHERE email = '" . $email . "'";
    $result = mysqli_query($GLOBALS['db_host'], $query);

    if (mysqli_num_rows($result) > 0) {
        // Email exists, proceed with password reset
        $row = mysqli_fetch_assoc($result);
        send_email($email, "reset_token"); //  Pass a token or other identifier
        return "Password reset email sent to " . $email . ". Please check your inbox.";
    } else {
        return "Email address not found.";
    }
}

// 4. Example Usage (For demonstration only - don't expose this in a web app)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $reset_message = forgot_password($email);
    echo $reset_message;
}
?>


<?php

// Assuming you have a database connection established
// (e.g., $db = mysqli_connect("host", "user", "password", "database");)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $new_password The new password.
 * @return bool True if password reset was successful, false otherwise.
 */
function forgot_password(string $email, string $new_password) {
    // 1. Validate input (important for security)
    if (empty($email) || empty($new_password)) {
        return false; // Or throw an exception - better practice for robust applications
    }

    // 2. Check if the user exists
    $stmt = mysqli_prepare($db, "SELECT id FROM users WHERE email = ?");
    mysqli_stmt_bind_param($stmt, "s", $email); // 's' for string
    mysqli_stmt_execute($stmt);
    $result = mysqli_stmt_get_result($stmt);

    if (mysqli_num_rows($result) == 0) {
        mysqli_stmt_close($stmt);
        return false; // User not found
    }

    $user_id = mysqli_fetch_assoc($result)['id'];
    mysqli_stmt_close($stmt);

    // 3. Hash the new password
    $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

    // 4. Update the password in the database
    $stmt = mysqli_prepare($db, "UPDATE users SET password = ? WHERE id = ?");
    mysqli_stmt_bind_param($stmt, "ss", $hashed_password, $user_id);
    if (mysqli_stmt_execute($stmt)) {
        mysqli_stmt_close($stmt);
        return true;
    } else {
        // Handle database error (important!)
        error_log("Error resetting password for user: " . $email); // Log the error for debugging
        return false;
    }
}


// Example Usage (Illustrative - Replace with your actual form processing)
//  (Assuming you have a form with email and new_password fields)

//  $email = $_POST['email'];
//  $new_password = $_POST['new_password'];

//  if (forgot_password($email, $new_password)) {
//      echo "Password reset email sent.  Check your inbox.";
//      // Send email to confirm the password reset
//  } else {
//      echo "Error resetting password. Please try again.";
//  }


?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user requesting password reset.
 * @return string  'Password reset email sent.' or error message.
 */
function forgot_password(string $email)
{
    global $db;  // Ensure the database connection is accessible

    // Sanitize the email input (important for security)
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);

    // Validate the email format
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // Check if the user exists in the database
    $stmt = $db->prepare("SELECT id, username FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        return "User not found.";
    }

    // Generate a unique token and store it in the database
    $token = bin2hex(random_bytes(32));
    $stmt = $db->prepare("INSERT INTO password_resets (user_id, token, expiry) VALUES (?, ?, ?)");
    $stmt->execute([$user['id'], $token, time() + (24 * 60 * 60)]); // Token expires in 24 hours

    // Send the password reset email
    $to = $email;
    $subject = 'Password Reset';
    $message = "Click the link below to reset your password: " . urlencode("http://" . $_SERVER['SERVER_NAME'] . "/reset_password?token=" . $token);
    $headers = "From: yourwebsite@example.com\r
"; // Replace with your email address
    mail($to, $subject, $message, $headers);

    return "Password reset email sent. Please check your inbox.";
}


// Example Usage (Simulated)
//  In a real application, this would be triggered from a form submission.

//  For testing, you could directly call the function:
//  $result = forgot_password('test@example.com');
//  echo $result;

?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a user table with an 'email' column.

// 1.  Check if the 'reset_password_request' parameter is present in the URL.
if (isset($_GET['reset_password_request'])) {
  // 2.  Get the user's email from the URL parameter.
  $email = $_GET['reset_password_request'];

  // 3.  Validate the email address (basic validation - consider more robust validation in production)
  if (empty($email)) {
    // Display an error message
    echo "<p style='color:red;'>Invalid Email Request.</p>";
    exit;
  }

  // 4.  Fetch the user from the database based on the email.
  $stmt = $db->prepare("SELECT id, password, email FROM users WHERE email = ?");
  $stmt->bind_param("s", $email); // 's' indicates a string parameter
  $stmt->execute();

  $result = $stmt->get_result();

  // 5. Check if the user exists.
  if ($result->num_rows == 0) {
    // User not found
    echo "<p style='color:red;'>User not found with this email address.</p>";
    exit;
  }

  $user = $result->fetch_assoc();

  // 6.  Generate a unique, time-based token.  Use a cryptographically secure method for generating the token.
  $token = bin2hex(random_bytes(32)); // Generate a 32-byte random string
  // IMPORTANT:  Store this token in your database associated with the user's ID.
  // This ensures that the token is only valid for the user who requested it.

  // 7.  Prepare the SQL query to update the user's password.
  $stmt = $db->prepare("UPDATE users SET password_reset_token = ?, password_reset_expiry = ? WHERE id = ?");
  $stmt->bind_param("sss", $token, time() + 3600, $user['id']); // expiry after 1 hour
  $stmt->execute();

  // 8.  Send an email to the user with a link to reset their password.  This is the most important part.
  $to = $email;
  $subject = 'Password Reset Request';
  $message = "Please click the following link to reset your password: " . '<a href="' . $_SERVER['PHP_SELF'] . '?reset_password_request=' . urlencode($token) . '"' . ' target="_blank" >Reset Password</a>';
  $headers = "From: your_email@example.com" . "\r
"; // Replace with your email

  mail($to, $subject, $message, $headers);

  // 9.  Display a success message to the user.
  echo "<p style='color:green;'>Password reset link has been sent to your email address.</p>";
  echo "<p>You should receive an email with instructions on how to reset your password.</p>";

} else {
  // If the 'reset_password_request' parameter is not present,
  // likely the user clicked a link that's expired.
  echo "<p style='color:red;'>Invalid or expired password reset link.</p>";
  exit;
}

?>


<?php

// Database connection details (replace with your actual details)
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_username";
$db_password = "your_password";

// Function to reset password
function forgotPassword($email, $new_password, $db) {
  // Check if database connection is established
  if (!$db) {
    return false; // Indicate failure
  }

  // Prepare the SQL query
  $sql = "UPDATE users SET password = ? WHERE email = ?";

  // Prepare the statement
  $stmt = $db->prepare($sql);

  // Bind the parameters
  $stmt->bind_param("ss", $new_password, $email);

  // Execute the query
  $result = $stmt->execute();

  // Check for errors
  if ($result) {
    return true; // Indicate success
  } else {
    // Handle the error
    error_log("Error resetting password for email: " . $email);
    return false;
  }

  // Close the statement
  $stmt->close();
}

// Example usage (Demonstration - NOT Production Ready)
// Assuming you have a login form that takes email and sets a temporary password
// and you are calling this function here, using the email and new_password
// for the user.

//  For a production system, this would be handled on a form submission
//  and you would likely also send an email with a link to reset the password
//  using a token and a timed expiration.

// Example input (for demonstration)
$email = "test@example.com";  // Replace with the actual email to reset
$new_password = "newSecretPassword";  // Replace with the desired new password


// Call the function
$success = forgotPassword($email, $new_password, $db);

if ($success) {
  echo "Password reset successfully! Please log in with your new password.";
} else {
  echo "Password reset failed. Please try again.";
}

?>


<?php

// Assuming you have a database connection established
// and a user table with an 'email' column.

// Function to handle forgotten password requests
function forgotPassword($email) {
  // 1. Validate the email format (optional but recommended)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email format.";
  }

  // 2. Check if the user exists
  $user = getUserByEmail($email); // Assuming you have a getUserByEmail function
  if (!$user) {
    return "User not found.";
  }

  // 3. Generate a unique token (using a library for security - see below)
  $token = generateToken();

  // 4. Store the token and user ID in the database
  // This is a simplified example - you'll likely want to use prepared statements
  // for security.
  //  - 'token' column in your user table to store the token.
  //  - 'reset_token_expiry' column to store the expiration time.
  resetPasswordToken($user['id'], $token, time() + 3600); // Expiry after 1 hour
  // You should use a prepared statement here!

  // 5. Send an email to the user with the reset link
  $subject = "Password Reset Request";
  $message = "Click the link below to reset your password: ";
  $link = base64_decode($token); // Decode the base64 encoded token
  $message .= "<a href='" . $link . "'>Reset Password</a>";

  $headers = "From: your_email@example.com"; // Replace with your email
  mail($email, $message, $headers);

  return "Password reset email sent to $email.";
}


// Dummy functions for demonstration - REPLACE WITH YOUR ACTUAL IMPLEMENTATION

// Function to retrieve a user by email
function getUserByEmail($email) {
  // Placeholder - replace with your database query
  // Example using PDO
  // $stmt = $pdo->prepare("SELECT * FROM users WHERE email = :email");
  // $stmt->bindParam(':email', $email);
  // $stmt->execute();
  // $user = $stmt->fetch(PDO::FETCH_ASSOC);
  // return $user;

  // Example return for demonstration purposes
  return [
    'id' => 1,
    'email' => 'test@example.com'
  ];
}


// Function to generate a unique token (use a cryptographically secure library)
function generateToken() {
  return bin2hex(random_bytes(32)); // Generates a 32-byte random string
}

// Function to store the reset token data in the database
function resetPasswordToken($userId, $token, $expiry) {
  // Replace with your database insertion query.
  // This is a simplified example, you should use prepared statements!
  // Example using PDO
  // $stmt = $pdo->prepare("INSERT INTO password_tokens (user_id, token, expiry) VALUES (:user_id, :token, :expiry)");
  // $stmt->bindParam(':user_id', $userId);
  // $stmt->bindParam(':token', $token);
  // $stmt->bindParam(':expiry', $expiry);
  // $stmt->execute();
}



// Example usage (for testing - NOT for production)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  $email = $_POST['email'];
  $result = forgotPassword($email);
  echo $result;
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a table 'users' with 'email' and 'password' columns.

// Function to handle password reset requests
function forgotPassword($email, $db) {
  // 1. Verify Email Existence
  $result = $db->query("SELECT id, email FROM users WHERE email = '$email'");
  $user = $result->fetch_assoc();

  if (!$user) {
    return "Email not found.";
  }

  // 2. Generate a Unique Token and Store It
  $token = bin2hex(random_bytes(32)); // Generate a secure random token
  $db->query("UPDATE users SET reset_token = '$token' WHERE email = '$email'");

  // 3.  Send a Password Reset Email (Example)
  $to = $email;
  $subject = "Password Reset Request";
  $message = "Click on the following link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset_token=$token'>" . $_SERVER['PHP_SELF'] . "?reset_token=$token</a>";
  $headers = "From: your_email@example.com";

  mail($to, $message, $headers); // Replace your_email@example.com with your email.

  return "Password reset email sent to $email.";
}

// Example Usage (In your form submission handler)

//  $email = $_POST['email'];
//  $reset_token = $_GET['reset_token'];  //  Retrieves token from URL.
//  $result = forgotPassword($email, $db);
//  echo $result;
?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a 'users' table with 'email' and 'password' columns.

/**
 * Forgets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset email was sent, false otherwise.
 */
function forgotPassword(string $email): bool
{
  // 1. Validate Email (Important Security Step)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email format provided: " . $email); // Log invalid emails
    return false; // Or you could return true and continue to the email sending. 
                  //  Logging is crucial for security.
  }

  // 2. Retrieve User Information
  $stmt = $db->prepare("SELECT id, password FROM users WHERE email = ?"); //Use prepared statements for security!
  $stmt->bind_param("s", $email);
  $stmt->execute();

  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    $stmt->close();
    error_log("User with email " . $email . " not found.");
    return false; // User doesn't exist.
  }

  $user = $result->fetch_assoc(); // Fetch the user data
  $stmt->close();


  // 3. Generate a Unique Reset Token (Important for Security)
  $resetToken = bin2hex(random_bytes(32)); // Use a cryptographically secure random string

  // 4. Store the Token in the Database (Linked to the User)
  $stmt = $db->prepare("UPDATE users SET reset_token = ?, reset_token_expiry = ? WHERE email = ?");
  $stmt->bind_param("ss", $resetToken, time() + 3600); // Token expires in 1 hour (3600 seconds)
  $result = $stmt->execute();

  if (!$result) {
    error_log("Error updating user record with reset token: " . print_r($stmt->error, true));
    $stmt->close();
    return false;
  }

  $stmt->close();

  // 5. Send the Password Reset Email
  $subject = "Password Reset Request";
  $message = "Please click the following link to reset your password: " . $_SERVER['PHP_SELF'] . "?reset_token=" . urlencode($resetToken);
  $headers = "From: Your Website <admin@yourwebsite.com>";

  if (mail($email, $subject, $message, $headers)) {
    return true; // Email sent successfully
  } else {
    error_log("Failed to send email to " . $email . " with reset token " . $resetToken);
    //  Consider adding a retry mechanism here to attempt sending the email again
    //  (e.g., after 5-10 minutes).
    return false;
  }
}


// Example Usage (This part would typically be part of a form submission handler)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    if (forgotPassword($email)) {
        echo "Password reset email has been sent to " . $email;
    } else {
        echo "Failed to send password reset email.  Please check your email and try again.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>
    <form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db connection)
// and a 'users' table with 'email' and 'password' columns.

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if password reset initiated successfully, false otherwise.
 */
function forgotPassword(string $email) {
  // 1. Check if the email exists
  $stmt = $db->prepare("SELECT id, email FROM users WHERE email = ?"); // Replace $db with your database connection
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    // Email doesn't exist
    return false;
  }

  // 2. Generate a unique token/code
  $token = bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator

  // 3.  Store the token in the database, associated with the user's ID.
  $stmt = $db->prepare("UPDATE users SET password_reset_token = ?, password_reset_token_expiry = ? WHERE id = ?");
  $stmt->execute([$token, time() + 3600, $user['id']]); // Expire the token after 1 hour.  Adjust as needed.

  // 4. Send the reset link email (this part is *crucial*)
  $resetLink = "http://yourwebsite.com/reset-password?token=$token"; // Replace with your domain
  $to = $user['email'];
  $subject = "Password Reset Request";
  $message = "Please click on the following link to reset your password: " . $resetLink;
  $headers = "From: yourwebsite@example.com";  // Replace with your email address

  mail($to, $subject, $message, $headers);

  return true;
}


// Example Usage (In a form submission or other event):
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];

  if (empty($email)) {
    // Handle empty email input
    echo "Please enter your email address.";
  } else {
    if (forgotPassword($email)) {
      echo "Password reset email has been sent to $email.";
    } else {
      echo "Password reset failed.  Perhaps that email address doesn't exist.";
    }
  }
}


// HTML Form (example - for demonstration purposes only):
?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
  <label for="email">Email Address:</label>
  <input type="email" id="email" name="email" required>
  <button type="submit">Request Password Reset</button>
</form>


<?php
require_once 'PHPMailer/PHPMailerAutoload.php'; // Assuming PHPMailer is in the same directory

// ... other code ...

// Send email with PHPMailer
$mail = new PHPMailer(true);

$mail->isSMTP();
$mail->Host = 'smtp.example.com'; // Replace with your SMTP server
$mail->Port = 587; // Or 465 for SSL
$mail->SMTPAuth = true;
$mail->Username = 'your_smtp_username';
$mail->Password = 'your_smtp_password';
$mail->SetFrom('yourwebsite@example.com', 'Your Website');
$mail->Subject = 'Password Reset Request';
$mail->Body    = $message;
$mail->AltBody = $message; // For non-HTML clients
$mail->AddAttachment('attachment.pdf');  // Optional

if ($mail->send()) {
    // Email sent successfully
} else {
    // Email sending failed
}
?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if the password reset email was sent successfully, false otherwise.
 */
function forgotPassword(string $email)
{
  // Validate the email address
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email address provided."); // Log the error for debugging
    return false;
  }

  // 1. Generate a unique token
  $token = bin2hex(random_bytes(32));

  // 2.  Store the token and the user's ID in the database (for security)
  //   -  This is crucial to prevent unauthorized password resets.
  //   -  Consider using a hash for the token to enhance security.
  //   -  We're using a simple example here; in a real-world application,
  //     you'd probably use a more robust database table and hashing.

  // Assuming a user table with columns 'id', 'email', 'password', and 'reset_token'
  //  and a function to insert a new record
  global $db; // Assuming $db is your database connection object

  $query = "INSERT INTO users (email, reset_token) VALUES ('$email', '$token')";
  if (!$db->query($query)) {
    error_log("Error inserting reset token: " . $db->error);
    return false;
  }


  // 3. Send the password reset email
  $to = $email;
  $subject = 'Password Reset';
  $message = "To reset your password, please click on this link: " .  $_SERVER['REQUEST_SCHEME'] . $_SERVER['HTTP_HOST'] . "/reset_password?token=" . urlencode($token); // Use a unique link
  $headers = "From: noreply@example.com\r
"; // Replace with your actual noreply email
  if (mail($to, $message, $headers)) {
    return true;
  } else {
    error_log("Failed to send password reset email.");
    // Optionally, you could delete the token from the database if the email fails
    // to prevent misuse.
    // $db->query("DELETE FROM users WHERE email = '$email' AND reset_token = '$token'");
    return false;
  }
}


// Example Usage (For testing - DO NOT use this directly in your application!)
//
// $email = "test@example.com";
// if (forgotPassword($email)) {
//   echo "Password reset email sent to " . $email . "
";
// } else {
//   echo "Failed to send password reset email.
";
// }
//

//  Important Considerations and Improvements:

// 1. Security:
//    - **Token Hashing:**  Never store the raw token in the database.  Use a strong hashing algorithm (e.g., bcrypt, Argon2) to hash the token before storing it.  This prevents attackers from easily stealing tokens.
//    - **Token Expiry:** Implement token expiry.  Tokens should only be valid for a limited time (e.g., 30 minutes, 1 hour).  This limits the window of opportunity for an attacker to use a compromised token.
//    - **Rate Limiting:**  Implement rate limiting to prevent brute-force attacks on the password reset endpoint.
//    - **Input Validation:** Thoroughly validate all input, including the email address and the token during password reset.  Sanitize user input to prevent SQL injection vulnerabilities.

// 2. Database Interaction:
//    - Use prepared statements (parameterized queries) to prevent SQL injection.
//    - Use a database connection object for efficient database interaction.
//    - Error handling:  Properly handle database errors.

// 3. Email Sending:
//    - Use a reliable email sending service (e.g., SendGrid, Mailgun, AWS SES) instead of PHP's `mail()` function.  The `mail()` function is often unreliable.
//    - Implement error handling for email sending failures.

// 4.  User Interface:
//     - Provide clear instructions to the user on what to expect after clicking the reset link.
//     -  Implement a confirmation page to show the user that the reset was successful.

// 5.  Testing:
//     - Thoroughly test the password reset functionality, including different email addresses, scenarios where the email fails to send, and scenarios where the token is invalid.

?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and that you have a user table with an 'email' column.

function forgot_password($email, $db) {
  // 1. Check if the email exists in the database
  $stmt = $db->prepare("SELECT id, password FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    return false; // Email not found
  }

  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32)); // Use a strong random token

  // 3. Store the token and user ID in the database (for security)
  $stmt = $db->prepare("UPDATE users SET reset_token = ?, reset_token_expires = ? WHERE email = ?");
  $stmt->execute([$token, time(), $email]); // Expires after a certain time

  // 4.  Create a reset password link
  $reset_link = "http://yourwebsite.com/reset_password?token=" . urlencode($token); //Replace with your actual website URL

  // 5.  Send an email (replace with your email sending logic)
  $to = $email;
  $subject = 'Password Reset';
  $message = "To reset your password, please click on the following link: " . $reset_link;

  //  Example using phpmailer (requires installation: composer require phpmessaging/phpmailer)
  // use PHPMailer\PHPMailer\PHPMailer;
  // use PHPMailer\PHPMailer\SMTP;

  // $mail = new PHPMailer(true); // Alias SMTP as true to use mail()
  // $mail->isSMTP();
  // $mail->Host = 'smtp.example.com';
  // $mail->Username = 'your_email@example.com';
  // $mail->Password = 'your_password';
  // $mail->Port = 587;
  // $mail->SMarthost = 'smtp.example.com';
  // $mail->setFrom($email, $email);
  // $mail->addAddress($email, $email);
  // $mail->isHTML(false);  // Set this to true if you want to send HTML emails
  // $mail->Subject = $subject;
  // $mail->Body = $message;
  // $mail->send();



  return $reset_link;  // Return the link to the user
}

// Example Usage (assuming $db is your PDO database connection)
// $email = $_POST['email']; // Get email from form submission

// if (isset($email)) {
//   $reset_link = forgot_password($email, $db);

//   if ($reset_link) {
//     echo "<p>An email has been sent to " . $email . " with instructions to reset your password.</p>";
//   } else {
//     echo "<p>Invalid email or password not found.</p>";
//   }
// } else {
//   echo "<p>Please enter your email address.</p>";
// }

?>


<?php

// Ensure this is a secure file and not accessible directly via web browser.
// It's best practice to store credentials in a database, not directly in the file.
// This example is for demonstration purposes ONLY.  DO NOT use this in production without proper security measures.

// Database configuration (replace with your actual database details)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_pass = 'your_database_password';

// Function to reset password
function forgot_password($email, $new_password, $db_host, $db_name, $db_user, $db_pass) {
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // 2. Connect to the database
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

    // 3. Check connection
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    // 4. Hash the new password (IMPORTANT for security)
    $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

    // 5. Update the password in the database
    $query = "UPDATE users SET password = '$hashed_password' WHERE email = '$email'";
    if ($conn->query($query) === TRUE) {
        return "Password reset email sent. Please check your email.";
    } else {
        return "Error resetting password. " . $conn->error;
    }

    // 6. Close the connection
    $conn->close();
}


// Example usage (FOR DEMO ONLY - DON'T RUN THIS IN PRODUCTION without proper security)
// This is just an example. It's dangerous to expose this in a real application.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $new_password = $_POST["new_password"];

    $result = forgot_password($email, $new_password, $db_host, $db_name, $db_user, $db_pass);
    echo $result;
} else {
    // Display a form to request password reset
    ?>
    <form method="post" action="">
        Email: <input type="email" name="email">
        <button type="submit">Reset Password</button>
    </form>
    <?php
}
?>


<?php

// IMPORTANT:  This is a simplified example for demonstration purposes only.
// In a production environment, you MUST:
// 1.  Store passwords securely (hashed and salted).
// 2.  Implement robust security measures against brute-force attacks.
// 3.  Use a proper email sending library to avoid spam and ensure delivery.
// 4.  Never log or store email reset tokens.
// 5.  Consider adding CAPTCHA or other verification steps.

// Database connection details (Replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';

/**
 * Resets the user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if the password reset was initiated successfully, false otherwise.
 */
function forgot_password(string $email): bool
{
    // 1. Connect to the database
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    // Check connection
    if ($conn->connect_error) {
        error_log("Failed to connect to database: " . $conn->connect_error);  // Log the error
        return false;
    }

    // 2. Check if the user exists
    $sql = "SELECT id, email FROM users WHERE email = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $email); // "s" indicates a string parameter
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        $conn->close();
        return false; // User not found
    }

    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $stmt->close();


    // 3. Generate a unique reset token
    $resetToken = bin2hex(random_bytes(32)); //  A strong, random token

    // 4. Store the token in the database associated with the user
    $sql = "INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, NOW())";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iis", $userId, $resetToken, $resetToken); // i = integer, s = string
    $stmt->execute();
    $stmt->close();



    // 5. Send the password reset email
    $to = $email;
    $subject = 'Password Reset';
    $message = "Click the following link to reset your password: " .  $_SERVER['PHP_SELF'] . "?reset_token=" . $resetToken; //Use the current script name to generate a direct link.
    $headers = "From: your_email@example.com"; // Replace with your email address

    mail($to, $subject, $message, $headers);

    // 6.  Close the connection
    $conn->close();

    return true;
}


// Example Usage (This would typically be in a form submission handler)
if (isset($_GET['reset_token'])) {
    $resetToken = $_GET['reset_token'];

    if (forgot_password($resetToken)) {
        echo "Password reset email sent to " . $resetToken . ".  Check your inbox.";
    } else {
        echo "Error: Could not reset password.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>
    <h1>Forgot Password</h1>
    <form method="get" action="your_script_name.php"> <!-- Replace with the actual filename -->
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>
</body>
</html>


<?php

// Ensure this file is protected to prevent unauthorized access
// You should also store your database credentials securely,
//  e.g., in environment variables.  This example uses hardcoded credentials
//  for simplicity and demonstration.  NEVER do this in a production environment.

// Database connection details (replace with your actual details)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_pass = 'your_database_password';

// 1. Get the email from the form submission

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = trim($_POST["email"]);

    // Basic email validation (you can add more sophisticated validation)
    if (empty($email)) {
        $error_message = "Please enter your email address.";
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error_message = "Invalid email format.";
    } else {
        // 2. Generate a unique token
        $token = bin2hex(random_bytes(32)); // Generate a random, secure token

        // 3.  Hash the token for security
        $hashed_token = hash('sha256', $token);

        // 4.  Store the token and email in the database
        //  This part assumes you have a table named 'users' with columns:
        //   - email (VARCHAR)
        //   - password_hash (VARCHAR)  // Use password_hash() function to store hashed passwords
        //   - reset_token (VARCHAR)
        try {
            $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
            $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

            // Prepare the SQL statement
            $stmt = $pdo->prepare("SELECT id FROM users WHERE email = ?");
            $stmt->execute([$email]);

            if ($stmt->rowCount() > 0) {
                // User exists, update the user record with the token
                $stmt = $pdo->prepare("UPDATE users SET reset_token = ?, reset_token_expiry = NOW() WHERE email = ? AND reset_token = ''");
                $stmt->execute([$token, $email]);

                if ($stmt->rowCount() > 0) {
                    // Redirect the user to a password reset page with the token
                    header("Location: reset_password.php?email=$email&token=$token");
                    exit(); // Stop further execution
                } else {
                    $error_message = "Error updating the token in the database.";
                }
            } else {
                // User does not exist
                $error_message = "User with this email address not found.";
            }

        } catch (PDOException $e) {
            $error_message = "Database error: " . $e->getMessage();
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
    <style>
        .error-message {
            color: red;
        }
    </style>
</head>
<body>

    <h1>Forgot Password</h1>

    <?php if (!empty($error_message)) { ?>
        <p class="error-message"><?php echo $error_message; ?></p>
    <?php } ?>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="email">Email Address:</label>
        <input type="email" id="email" name="email" placeholder="Your Email Address" value="<?php echo isset($_POST['email']) ? htmlspecialchars($_POST['email']) : ''; ?>">
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// and have a 'users' table with a 'email' column.

// Function to handle password reset requests
function forgot_password($email, $token, $reset_password_link) {
    // 1. Check if the email exists in the database
    $result = mysqli_query($db, "SELECT id, email FROM users WHERE email = '$email'"); // Replace $db with your actual database connection

    if (mysqli_num_rows($result) > 0) {
        // 2. Generate a unique token and store it in the database
        $token_result = mysqli_query($db, "SELECT id FROM users WHERE email = '$email' AND reset_token = '$token'");

        if (mysqli_num_rows($token_result) > 0) {
            // Token already exists, so the user has already requested a reset.
            // You might want to handle this situation (e.g., display a message).
            return "A password reset request has already been made for this email.";
        }

        $new_token = bin2hex(random_bytes(32));  // Generate a random 32-byte token
        $insert_result = mysqli_query($db, "UPDATE users SET reset_token = '$new_token' WHERE email = '$email'");

        if (mysqli_affected_rows($insert_result) > 0) {
            // 3. Generate the password reset link (URL)
            $reset_url = $reset_password_link . "?email=" . $email . "&token=" . $new_token;

            // 4.  Optionally, send an email to the user with the reset link
            // (Implement email sending here - using PHPMailer or similar)
            // Example:
            // send_email($email, "Password Reset Link", $reset_url);

            return $reset_url; // Return the URL to the reset page
        } else {
            return "Error updating user information.";
        }
    } else {
        return "Invalid email address.";
    }
}


// Example Usage (demonstration - not a full implementation)
// $email = "test@example.com";
// $token = "some_random_token";
// $reset_password_link = "https://yourwebsite.com/reset-password";

// $reset_url = forgot_password($email, $token, $reset_password_link);

// if (strpos($reset_url, "Invalid email address") === false &&
//     strpos($reset_url, "Error updating user information") === false) {
//    echo $reset_url;  // Output the URL
// } else {
//    echo $reset_url;
//}
?>


<?php

// Configuration (Important: Replace with your actual settings)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_username';
$db_password = 'your_database_password';

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // Get email from the form
  $email = $_POST["email"];

  // Validate the email (Basic validation - improve this!)
  if (empty($email)) {
    $error = "Please enter your email address.";
  } else {
    //  Sanitize the email to prevent SQL injection
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);

    // Check if the email is valid (more robust validation recommended)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
      $error = "Invalid email address.";
    } else {
      // Hash the password (Strongly recommended)
      $hashed_password = password_hash("default_password", PASSWORD_DEFAULT); // Use a real password here!
      //  Generate a unique token for password reset
      $reset_token = bin2hex(random_bytes(32));

      // Prepare the SQL query
      $sql = "UPDATE users SET reset_token = '$reset_token' WHERE email = '$email'";

      // Execute the query
      $result = mysqli_query($GLOBALS['db_host'], $sql);

      // Check if the query was successful
      if (mysqli_error($GLOBALS['db_host'])) {
        $error = "Error updating reset token. " . mysqli_error($GLOBALS['db_host']);
      } else {
        // Send an email (implementation omitted for brevity - see below)
        // This is where you'd build and send an email with a link to reset the password.
        // The link would include the reset token.
        // Example:  $to = $email;
        //           $subject = "Password Reset";
        //           $message = "Click here to reset your password: <a href='reset_password.php?token=$reset_token'>Reset Password</a>";
        //           $headers = "From: your_email@example.com\r
";
        //           mail($to, $subject, $message, $headers);
      }
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email Address:</label>
    <input type="email" id="email" name="email" placeholder="Your Email">
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established
// This example uses a simplified setup. Adapt it to your actual database configuration.

// Database credentials (replace with your actual values)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_pass = 'your_db_password';

// Function to reset password
function forgot_password($email, $token, $new_password, $db) {
    // **Important Security Considerations:**
    // 1.  Token Validation:  This is crucial!  Always verify that the token 
    //     received from the user actually exists in the database and hasn't been
    //     used before.  This protects against attackers creating fake reset
    //     links.

    // 2.  Password Hashing:  NEVER store passwords in plain text.  Always
    //     hash them with a strong hashing algorithm (e.g., bcrypt, Argon2) before
    //     storing them in the database.  This example uses password_hash() for
    //     this purpose.

    // 3.  Rate Limiting: Implement rate limiting to prevent abuse of the
    //     forgot password functionality (e.g., multiple requests from the same IP
    //     within a short period).

    // 4.  Email Sending:  Use a reliable email library (e.g., PHPMailer) to send
    //     the password reset email.  Never construct email content directly in
    //     PHP; use a library to handle email formatting and attachments.

    // ----------------------------------------------------------
    // Database Query (Simplified)
    // ----------------------------------------------------------

    $sql = "UPDATE users SET password = ? WHERE email = ?";
    $stmt = $db->prepare($sql); // Prepare the statement for security
    $stmt->bind_param("ss", $new_password, $email);

    if ($stmt->execute()) {
        // Password reset successful
        $stmt->close();
        return true;
    } else {
        // Error resetting password
        error_log("Error resetting password for user: " . $email); // Log the error for debugging
        $stmt->close();
        return false;
    }
}


// **Example Usage (in a controller or similar):**

// 1. Generate a unique token (using a secure method like a UUID library)
//    This should be a long, random string.

// 2. Store the token in the database associated with the user's email.
//    This is usually done when the user initiates the forgot password process.
//    This would typically be an INSERT statement to create a new record
//    in a 'reset_tokens' table.

// 3.  Receive the token and new password from the user's request.

// Example (after receiving token and new_password):
// $token = $_POST['token'];
// $new_password = $_POST['password'];

// $db = new mysqli($db_host, $db_user, $db_pass, $db_name);

// if ($db->connect_error) {
//     die("Connection failed: " . $db->connect_error);
// }

// $result = forgot_password($token, $token, $new_password, $db);

// if ($result) {
//     echo "Password reset successful! Please check your email.";
// } else {
//     echo "Error: Invalid token or password reset failed.";
// }

// $db->close();
?>


<?php

// Assuming you have a database connection established
// (e.g., $db is your database connection object)

function forgotPassword($email) {
  // 1. Validate Email (important for security)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Generate a Unique Token
  $token = bin2hex(random_bytes(32)); // Generates a cryptographically secure random token.

  // 3. Hash the Token (Important for security - store the hash, not the token itself)
  $hashedToken = password_hash($token, PASSWORD_DEFAULT); // Use password_hash for secure hashing

  // 4. Prepare the Reset Link Data
  $resetLinkData = [
    'token' => $token,
    'email' => $email,
    'timestamp' => time()  // Add a timestamp for expiration
  ];

  // 5. Store the Token in the Database (or cache)
  //  -- This is the crucial part.  Adapt to your database/cache system
  // Example using a simple array (replace this with your actual database interaction)
  global $resetLinks; // Assuming $resetLinks is a global array to store reset links
  $resetLinks[$email] = $resetLinkData;

  // 6.  Create the Reset Link (URL)
  $resetLink = "/reset_password.php?token=" . urlencode($token);

  // 7.  Return the Reset Link to the User (or display a message)
  return $resetLink;
}


// Example Usage (In your forgot_password.php file):
// Assuming you have a form to collect the email address
// if (isset($_POST['email'])) {
//   $email = $_POST['email'];
//   $resetLink = forgotPassword($email);
//   echo "<p>We've sent a password reset link to: " . htmlspecialchars($email) . "</p>";
//   echo "<a href='" . htmlspecialchars($resetLink) . "'>Reset Password</a>";
// }
//
//  And in your reset_password.php file (to verify the token):
//
//  <?php
//  if (isset($_GET['token'])) {
//      $token = $_GET['token'];
//
//      // 1. Retrieve the reset link data from the database
//      global $resetLinks;
//      $resetLinkData = $resetLinks[$token];
//
//      // 2. Verify the Token
//      if ($resetLinkData['token'] === $token && password_verify($token, $resetLinkData['token'])) { // Using password_verify
//          // 3.  Redirect to the reset password form (with the token)
//          //    You'll need a reset_password_form.php file.
//          //   Pass the token to the form so the user can enter their new password.
//          // Example:
//          // header("Location: reset_password_form.php?token=" . urlencode($token));
//          // exit();
//
//          // 4.  (Optionally) You might want to clear the reset link after verification
//          //    to improve security.
//
//       } else {
//         // Token is invalid or expired
//         echo "<p>Invalid or expired reset link.</p>";
//       }
//    } else {
//      echo "<p>Reset link not provided.</p>";
//    }
//?>
?>


<?php

// Database connection details (Replace with your actual values)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Function to reset password
function forgotPassword($email, $newPassword) {
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // 2. Connect to the database
    $conn = new mysqli($host, $username, $password, $database);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    // 3. Hash the new password (Important for security!)
    $hashed_password = password_hash($newPassword, PASSWORD_DEFAULT);

    // 4. Prepare and execute the SQL query
    $sql = "UPDATE users SET password = '$hashed_password' WHERE email = '$email'";  // Assuming 'users' is your table name and 'email' is the column
    if ($conn->query($sql) === TRUE) {
        return "Password reset successfully.  Check your email for details.";
    } else {
        return "Error resetting password.  " . $conn->error;
    }

    // 5. Close the connection
    $conn->close();
}

// Example usage (Simulated form submission - for demonstration only)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $newPassword = $_POST["new_password"];

    $resetMessage = forgotPassword($email, $newPassword);
    echo $resetMessage; // Output the message (you'd typically display it on a page)
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <br><br>

        <label for="new_password">New Password:</label>
        <input type="password" id="new_password" name="new_password" required>
        <br><br>

        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// This is a simplified example for demonstration purposes.
// In a production environment, you *must* use secure password reset mechanisms
// like generating unique, cryptographically secure tokens and handling them securely.

class PasswordReset
{
    private $db; // Database connection (replace with your database connection)

    public function __construct($db)
    {
        $this->db = $db;
    }

    public function resetPassword($email)
    {
        // 1. Check if the email exists in the database
        $result = $this->db->query("SELECT id, email FROM users WHERE email = '$email'");
        $user = $result->fetch_assoc();

        if (!$user) {
            return false; // Email not found
        }

        // 2. Generate a unique, secure token
        $token = bin2hex(random_bytes(32)); // Generate 32 bytes for a strong token

        // 3.  Store the token and user ID in a temporary table (for security)
        $this->db->query("CREATE TEMPORARY TABLE IF NOT EXISTS reset_tokens (user_id INT, token VARCHAR(64))");
        $this->db->query("INSERT INTO reset_tokens (user_id, token) VALUES ($user['id'], '$token')");

        // 4. Send a password reset email (replace with your email sending logic)
        $subject = "Password Reset Request";
        $message = "Click <a href='" . $this->getPasswordResetLink($user['id']) . "'>here</a> to reset your password.";
        $headers = "From: your_email@example.com"; // Replace with your email address
        $this->sendEmail($subject, $message, $headers, $email);

        // 5.  Cleanup (Remove the temporary table)
        $this->db->query("DROP TEMPORARY TABLE IF EXISTS reset_tokens");

        return true;
    }


    private function getPasswordResetLink($userId)
    {
        return "https://yourwebsite.com/reset-password?token=" . bin2hex($userId);  // Replace your website URL
    }


    private function sendEmail($subject, $message, $headers, $email)
    {
        // Implement your email sending logic here.
        // Use a library like PHPMailer or similar for robust email sending.
        // Example (using a placeholder):
        // mail($email, $subject, $message, $headers);
        echo "Email sending logic (replace with your actual implementation).
";
    }


}


// Example Usage (Replace with your actual database connection)
$db = new mysqli("localhost", "your_username", "your_password", "your_database");

if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}


$passwordReset = new PasswordReset($db);

$email = "user@example.com"; // Replace with the email you want to reset

if ($passwordReset->resetPassword($email)) {
    echo "Password reset email sent to $email.
";
} else {
    echo "Error: Password reset failed.  Check your email address and database connection.
";
}

$db->close();  // Close the database connection
?>


<?php

// **Important Security Considerations:**
// - This is a simplified example for demonstration purposes ONLY.
// - In a production environment, you *absolutely must* implement robust security measures
//   including:
//   - **Strong Password Hashing:** Use bcrypt or Argon2 to hash passwords securely. Never store passwords in plain text.
//   - **Rate Limiting:**  Prevent brute-force attacks by limiting the number of password reset attempts.
//   - **Email Verification:**  Always verify that the email address provided is valid and belongs to the user.
//   - **Session Security:**  Secure your session management to prevent unauthorized access.
//   - **HTTPS:**  Always use HTTPS to encrypt all communication between the user and your server.
// - Consider using a password reset library or framework components for enhanced security.

// Assuming you have a database connection established (e.g., $db)
// and a 'users' table with 'email' and 'password' columns.

function forgot_password($email, $db) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if the email exists in the database
  $result = $db->query("SELECT id, password FROM users WHERE email = '$email'");

  if ($result->num_rows > 0) {
    // 3. Generate a Unique Token (for security)
    $token = bin2hex(random_bytes(32)); // Use a strong random number generator

    // 4.  Create a Reset Token Record in the Database
    $db->query("INSERT INTO password_resets (user_id, token, expires_at) VALUES ($result->id, '$token', NOW() + INTERVAL 24 HOUR)");

    // 5. Send an Email with a Reset Link
    $to = $email;
    $subject = 'Password Reset';
    $message = "Click on this link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'>" . $_SERVER['PHP_SELF'] . "?reset=$token</a>"; // Construct the reset link
    $headers = "From: your_email@example.com";

    mail($to, $message, $headers);

    return "Password reset email sent to $email.";

  } else {
    return "Email not found.";
  }
}

// **Example Usage (within a form or script):**

// Get the email address from the form
// $email = $_POST['email'];

// Call the forgot_password function
// $result = forgot_password($email, $db);

// Display the result (or redirect to a page)
// echo $result;

// **Important:  You'll need to implement the password reset link handling (checking the token and updating the password)
// separately. This is a simplified example only.**
?>


<?php

// Assuming you have a database connection established
// $dbConnection is your database connection object

/**
 * Forgets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset email was sent, false otherwise.
 */
function forgot_password(string $email) {
  // Validate email format (basic check)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false;
  }

  // Check if the user exists
  $user = getUserByEmail($email);  // Assume this function exists and retrieves user data by email

  if (!$user) {
    return false; // User not found
  }

  // Generate a unique token for the password reset
  $reset_token = generate_unique_token();

  // Store the token in the database, associated with the user's email
  // IMPORTANT:  This part needs to be adapted based on your database schema and security practices.
  //   This is a placeholder.
  save_reset_token($user['id'], $reset_token); 

  // Send the password reset email
  $subject = "Password Reset Request";
  $to = $email;
  $message = "Click on the following link to reset your password: <a href='" . create_reset_link($user['id'], $reset_token) . "'>Reset Password</a>";
  $headers = "From: Your Website <noreply@yourwebsite.com>";  // Change to your actual email address
  

  if (send_email($to, $subject, $message, $headers)) {
    return true; // Password reset email sent successfully
  } else {
    // Handle email sending failure (log, error, etc.)
    return false;
  }
}


/**
 * Placeholder functions - Replace with your actual implementation.
 */

// Dummy function to retrieve user data by email
function getUserByEmail(string $email): ?array {
  // Replace with your actual database query
  // This is just a dummy for demonstration
  // Example:
  // $result = mysqli_query($dbConnection, "SELECT * FROM users WHERE email = '$email'");
  // if (mysqli_num_rows($result) > 0) {
  //   return mysqli_fetch_assoc($result);
  // }
  return null; // Or return an empty array if appropriate
}


// Generate a unique token (e.g., using UUID)
function generate_unique_token(): string {
    return bin2hex(random_bytes(32)); // Example using bin2hex
}



// Save the token to the database
function save_reset_token(int $userId, string $token): void {
    // Replace with your actual database insertion code
    // Example:
    // $sql = "INSERT INTO password_resets (user_id, token, created_at) VALUES ('$userId', '$token', NOW())";
    // mysqli_query($dbConnection, $sql);

    // In a real application, you'd likely use prepared statements for security.
}


// Create a reset link with the token
function create_reset_link(int $userId, string $token): string {
  return "/reset_password.php?user_id=" . $userId . "&token=" . $token;  // Or your actual URL
}


// Dummy email sending function (replace with your actual email sending logic)
function send_email(string $to, string $subject, string $message, string $headers): bool {
  // In a real application, you'd use a library like PHPMailer or SwiftMailer
  // or your own SMTP configuration.
  // This is just a dummy function that always returns true.
  echo "Simulating sending email to: " . $to . "
";
  return true;
}


// Example usage:
$email = "test@example.com";  // Replace with the user's email
if (forgot_password($email)) {
  echo "Password reset email sent to " . $email . "
";
} else {
  echo "Failed to send password reset email for " . $email . "
";
}

?>


<?php

/**
 * Forgot Password Function
 *
 * This function generates a unique, secure token and sends an email
 * to the user with a link to reset their password.
 *
 * @param string $email The email address of the user.
 * @param string $reset_token_prefix A prefix for the reset token (e.g., 'reset_').  Helps with organization.
 * @param int $token_lifetime (Optional) -  Time in seconds for the token to be valid. Defaults to 3600 (1 hour).
 *
 * @return bool True if the email was sent successfully, false otherwise.
 */
function forgot_password(string $email, string $reset_token_prefix, int $token_lifetime = 3600) {
  // 1. Generate a unique token
  $token = bin2hex(random_bytes(32)); // Use random_bytes for better security
  $token_data = [
    'token' => $token,
    'expiry' => time() + $token_lifetime
  ];

  // 2. Store the token in the database (or wherever you store user data)
  //    This example assumes you have a database connection and a 'users' table.
  //    Adapt this to your database structure.
  $db_connection = get_db_connection(); // Assuming you have a function to get your database connection
  $query = "INSERT INTO password_resets (email, token, expiry) VALUES ('$email', '$token', '$token_data[expiry]')";
  $result = $db_connection->query($query);
  if (!$result) {
    error_log("Error inserting password reset token: " . $db_connection->error); // Log errors for debugging
    return false;
  }


  // 3.  Send the password reset email
  $subject = 'Password Reset';
  $message = "Please click the following link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=" . urlencode($token) . "'>Reset Password</a>";
  $headers = "From: Your Website <admin@yourwebsite.com>"; // Replace with your actual email address

  if (mail($email, $subject, $message, $headers)) {
    return true;
  } else {
    error_log("Error sending password reset email to " . $email); // Log errors for debugging
    return false;
  }
}


/**
 * Example Usage (Demonstration only - Replace with your actual user authentication/database logic)
 */

// Simulate a user's email
$user_email = 'testuser@example.com';

// Generate the token
$reset_token_prefix = 'reset_';
$token = $reset_token_prefix . bin2hex(random_bytes(32));

// Example usage of the forgot_password function
if (forgot_password($user_email, $reset_token_prefix)) {
  echo "Password reset email sent to $user_email. Check their inbox!";
} else {
  echo "Failed to send password reset email.";
}


?>


<?php

// This is a simplified example for demonstration purposes only.
// For a production environment, you should:
// 1. Use a secure password reset mechanism (e.g., token-based).
// 2. Sanitize and validate all inputs rigorously.
// 3. Implement proper error handling and logging.
// 4. Consider using a dedicated password reset library for added security.


function forgot_password($email, $password_reset_token, $reset_link_base_url, $secret_key) {
    // 1. Validate Email (Basic - consider stricter validation in production)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // 2. Check if a password reset token exists for this email
    $reset_token = md5($email . $reset_token . $secret_key); //  Use a strong hashing algorithm!
    
    $query = "SELECT id FROM password_resets WHERE email = '$email' AND token = '$reset_token'";
    $result = mysqli_query($GLOBALS['db'], $query); // Use a prepared statement for security!
    
    if (mysqli_num_rows($result) == 0) {
        return "Invalid password reset token.";
    }

    // 3.  (In a real application) You'd likely generate a new token and
    //     expire the old one.
    //     This is just a simplified example.

    // 4. (In a real application)  You would redirect to a page where the user
    //     can set a new password, using the token to verify their request.
    //     This is a placeholder for that logic.
    return "Password reset link has been sent to your email address.";
}


// Example Usage (Illustrative - Replace with your actual database and configuration)
//  (Don't use this directly in production - it's just for demonstration)

// Assume you have a database connection established (e.g., $GLOBALS['db'] is your connection)

$email = "test@example.com"; // Replace with a valid email address
$reset_token = "random_token_123";  // Generate a unique, random token
$reset_link_base_url = "http://yourwebsite.com/reset-password";

$result = forgot_password($email, $reset_token, $reset_link_base_url, "your_secret_key");

echo $result;  // Output: Password reset link has been sent to your email address.



// Important Security Notes and Best Practices:

// 1. Token Generation and Security:
//    - Use a cryptographically secure random number generator (CSPRNG) for generating the password reset token.  `random_bytes()` or `openssl_random_pseudo_bytes()` are better than `rand()` or `mt_rand()`
//    - The token should be a long, random string.
//    - Store the token in a database securely.
//    - The token should be time-limited (e.g., expire after 30 minutes).

// 2. Hashing:
//    - **Never** store passwords in plain text. Use a strong password hashing algorithm like `password_hash()` or `bcrypt`.

// 3. Prepared Statements (Critical for Security):
//    - **Always** use prepared statements to prevent SQL injection attacks.  The example uses `mysqli_query()` which can be vulnerable if not properly secured.  Switch to prepared statements (e.g., `mysqli_stmt`) for a robust solution.

// 4. Input Validation:
//    - Thoroughly validate all user inputs to prevent vulnerabilities.  Use `filter_var()` with appropriate filters (e.g., `FILTER_VALIDATE_EMAIL`, `FILTER_SANITIZE_EMAIL`).

// 5. Error Handling and Logging:
//    - Implement proper error handling to gracefully handle unexpected situations.
//    - Log errors and suspicious activity for debugging and security monitoring.

// 6. Session Management:
//    - Use sessions to track user activity and maintain security.

// 7. Rate Limiting:
//     - Implement rate limiting to prevent brute-force attacks.

// 8. HTTPS:
//     - Always use HTTPS to encrypt communication between the user's browser and your server.
?>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database_name";

// Function to send an email (Requires PHP mail function)
function sendPasswordResetEmail($email, $resetToken) {
  // Implement your email sending logic here using a library like PHPMailer
  // For example:
  $to = $email;
  $subject = 'Password Reset';
  $message = "Click on this link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . "?reset_token=$resetToken'>Reset Password</a>";
  $headers = "From: your_email@example.com";

  mail($to, $message, $headers);
}


// Function to handle password reset request
function forgotPassword($email) {
  // 1. Validate Email
  if (empty($email)) {
    return "Error: Email address is required.";
  }

  // 2. Check if email exists in the user table
  $conn = new mysqli($host, $username, $password, $database);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  $sql = "SELECT id, email FROM users WHERE email = '$email'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $user_id = $result->fetch_assoc()['id'];
    $resetToken = generateRandomToken(); // Generate a unique token
    $conn->query("UPDATE users SET reset_token = '$resetToken' WHERE id = '$user_id'");

    // Send password reset email
    sendPasswordResetEmail($email, $resetToken);

    return "Password reset email sent to $email. Please check your inbox.";

  } else {
    return "Error: Email address not found.";
  }

  $conn->close();
}


// Function to generate a random token (for security)
function generateRandomToken() {
  return bin2hex(random_bytes(32)); // Generate 32-byte random data
}

// --- Example Usage (for testing - should be handled by a form in a real application)
// if (isset($_POST['forgot_email'])) {
//   $email = $_POST['forgot_email'];
//   $result = forgotPassword($email);
//   echo $result;
// }

?>


<?php

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_db_user";
$db_password = "your_db_password";

// Function to reset password
function forgotPassword($email)
{
  // 1. Validate Email (Basic)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Generate a Unique Token
  $token = bin2hex(random_bytes(32)); // Use a strong random token

  // 3. Hash the Token - IMPORTANT for security
  $hashed_token = password_hash($token, PASSWORD_DEFAULT); 

  // 4.  Create a Reset Token Record in the Database
  try {
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    $stmt = $pdo->prepare("INSERT INTO password_resets (email, token, reset_code, expires_at) VALUES (?, ?, ?, NOW())");
    $stmt->execute([$email, $hashed_token, time() + (24 * 60 * 60)]); // Token expires after 24 hours.  Adjust as needed.
    $reset_id = $pdo->lastInsertId();

    // 5.  Send the Reset Link (Email) -  This is where you'd integrate with an email library
    // For demonstration purposes, we'll just print the link.  Replace with your email sending code.
    $reset_link = "http://localhost/reset_password.php?id=$reset_id&token=$token"; // Replace with your URL
    echo "A password reset link has been sent to $email.<br>";
    echo "Click the link to reset your password.";
    echo "<br> Reset Link:  " . $reset_link;

  } catch (PDOException $e) {
    return "Error: " . $e->getMessage();
  }
}


// Example Usage (From a form submission, for instance)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $reset_message = forgotPassword($email);
    echo $reset_message;
} else {
    // Display form (for demonstration)
    echo "<form method='post' action=''>";
    echo "<label for='email'>Email:</label><br>";
    echo "<input type='email' id='email' name='email'><br><br>";
    echo "<input type='submit' value='Forgot Password'>";
    echo "</form>";
}

?>


<?php

/**
 * Resets a user's password after a password reset request.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password to set.
 * @param string $secretKey The unique secret key used to verify the reset request.
 * @param PDO $db PDO database object.
 * @return bool True on successful password reset, false otherwise.
 */
function forgotPassword(string $email, string $newPassword, string $secretKey, PDO $db) {
    // 1. Validate Input (Important for security!)
    if (empty($email) || empty($newPassword) || empty($secretKey)) {
        return false; // Invalid input
    }

    // 2. Check if user exists
    $stmt = $db->prepare("SELECT id FROM users WHERE email = :email");
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    $stmt->execute();
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($user === false) {
        return false; // User not found
    }

    // 3.  Verify the Secret Key
    $stmt = $db->prepare("SELECT id FROM password_resets WHERE user_id = :user_id AND secret_key = :secret_key AND expiry_timestamp > :now");
    $stmt->bindParam(':user_id', $user['id'], PDO::PARAM_INT);
    $stmt->bindParam(':secret_key', $secretKey, PDO::PARAM_STR);
    $stmt->bindParam(':now', time(), PDO::PARAM_INT);  // Get the current timestamp
    $stmt->execute();
    $reset = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($reset === false) {
        return false; // Invalid secret key or expired reset link
    }


    // 4. Update the User's Password
    $stmt = $db->prepare("UPDATE users SET password = :password WHERE id = :user_id");
    $stmt->bindParam(':password', password_hash($newPassword, PASSWORD_DEFAULT), PDO::PARAM_STR);
    $stmt->bindParam(':user_id', $user['id'], PDO::PARAM_INT);
    $stmt->execute();

    // 5.  Cleanup the Password Reset Record (Important!)
    $stmt = $db->prepare("DELETE FROM password_resets WHERE user_id = :user_id AND secret_key = :secret_key");
    $stmt->bindParam(':user_id', $user['id'], PDO::PARAM_INT);
    $stmt->bindParam(':secret_key', $secretKey, PDO::PARAM_STR);
    $stmt->execute();

    return true; // Password reset successful
}


// Example Usage (assuming you have a PDO database connection called $db)
// IMPORTANT: This is just an example.  In a real application,
// you should handle errors and display user-friendly messages.


// $email = "test@example.com";
// $newPassword = "NewSecurePassword123";
// $secretKey = "someRandomSecretKey";  // Generate a random, secure key

// if (forgotPassword($email, $newPassword, $secretKey, $db)) {
//     echo "Password reset successful!  Check your email.";
// } else {
//     echo "Password reset failed. Please try again.";
// }
?>


<?php

// This is a simplified example and should be used with caution.
// In a production environment, you need to implement robust security measures
// like:
// - Strong password hashing (e.g., bcrypt or Argon2)
// - Email verification
// - Rate limiting to prevent brute-force attacks
// - Logging and monitoring
// - Using a dedicated email sending service

// Database connection (replace with your actual database details)
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$database = 'your_database';

// Check if the reset password request is valid
if (isset($_POST['email']) && !empty($_POST['email'])) {
  $email = filter_var($_POST['email'], FILTER_SANITIZE_EMAIL); // Sanitize email
  if (filter_var($email, FILTER_VALIDATE_EMAIL)) {

    // 1. Generate a unique token
    $token = bin2hex(random_bytes(32)); // Generate a random binary string

    // 2. Hash the token
    $hashed_token = password_hash($token, PASSWORD_DEFAULT); // Use password_hash for security

    // 3. Prepare the query
    $sql = "INSERT INTO password_resets (email, token, expiry) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql); // Use prepared statements for security
    $stmt->bind_param("s", $email, $hashed_token, time() + 3600); // expiry in 1 hour
    $stmt->execute();

    // 4. Send the reset email (replace with your email sending logic)
    $to = $email;
    $subject = 'Password Reset';
    $message = "Click on this link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . "?reset=true&token=" . $token . "'>Reset Password</a>";
    $headers = 'From: your_email@example.com' . "\r
";
    mail($to, $subject, $message, $headers);

    echo "Password reset email sent to " . $email . ". Check your inbox.";

  } else {
    echo "Invalid email format.";
  }
}

// --- Reset Password Page (reset.php) ---
if (isset($_GET['reset']) && !empty($_GET['token'])) {
  $token = filter_var($_GET['token'], FILTER_SANITIZE_STRING); //Sanitize token

  // 1. Verify Token
  $sql = "SELECT id FROM password_resets WHERE token = ? AND expiry > NOW()";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("s", $token);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows > 0) {
    // 2. Update password (replace with your actual password update logic)
    // For demonstration purposes, we'll just echo the token
    echo "Reset token: " . $token;
    //  In a real application, you would redirect the user to a form to update their password
    //  and then hash and store the new password in the database.

  } else {
    echo "Invalid reset token.";
  }
}

?>

<!-- HTML Form for Requesting Password Reset -->
<form action="" method="post">
  <label for="email">Email:</label>
  <input type="email" id="email" name="email" required>
  <button type="submit">Request Password Reset</button>
</form>

<!-- Reset Password Page (reset.php -  This needs to be in a separate file) -->
<form action="reset.php" method="get">
  <label for="token">Reset Token:</label>
  <input type="text" id="token" name="token" required>
  <button type="submit">Reset Password</button>
</form>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database_name";

// Function to reset password
function forgotPassword($email, $host, $username, $password, $dbname) {
  try {
    // Connect to the database
    $conn = new mysqli($host, $username, $password, $dbname);

    // Check connection
    if ($conn->connect_error) {
      throw new Exception("Connection failed: " . $conn->connect_error);
    }

    // Generate a random token for verification
    $token = bin2hex(random_bytes(32));

    // Store the token and expiration date in the database
    $sql = "INSERT INTO forgot_passwords (email, token, expires) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ss", $email, $token, time() + 3600); // Expire after 1 hour
    $stmt->execute();

    // Send password reset email (Implementation details omitted for brevity)
    $subject = "Password Reset";
    $message = "Click this link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=" . $token . "'>" . $_SERVER['PHP_SELF'] . "?reset=" . $token . "</a>";
    $headers = "From: your_email@example.com";

    mail($email, $subject, $message, $headers); 

    // Success
    return true;

  } catch (Exception $e) {
    // Error handling
    error_log("Forgot Password Error: " . $e->getMessage());
    return false;
  } finally {
    // Close the connection (important!)
    if ($conn) {
      $conn->close();
    }
  }
}


// Example usage (from your form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];

  if (!empty($email)) {
    $reset = forgotPassword($email, $host, $username, $password, $dbname);

    if ($reset) {
      echo "Password reset email sent to " . $email . ".  Check your inbox.";
    } else {
      echo "Failed to send password reset email.  Please try again.";
    }
  } else {
    echo "Please enter your email address.";
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Database connection details (replace with your actual values)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_username';
$db_password = 'your_database_password';

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get email from the form
    $email = $_POST["email"];

    // Validate email format (basic validation, consider more robust methods)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email format.";
    } else {
        // Attempt to reset password (implementation depends on your setup)
        // This is a placeholder -  replace with your actual logic
        $reset_password_key = generate_unique_key(); // Generate a unique key for the reset token
        $expiry_time = time() + (24 * 60 * 60); // Token expires after 24 hours

        //  Create a query to update the user's record with the reset token and expiry time
        $sql = "UPDATE users SET reset_token = ?, reset_token_expiry = ? WHERE email = ?";

        // Prepare the statement
        $stmt = $conn->prepare($sql);

        // Bind the parameters
        $stmt->bind_param("sii", $reset_password_key, $expiry_time, $email);


        // Execute the query
        if ($stmt->execute()) {
            // Send an email with the reset link
            $subject = "Password Reset Link";
            $headers = "From: your_email@example.com" . "\r
";
            $message = "Click this link to reset your password: " . $_SERVER["REQUEST_URI"] . "?reset_token=" . $reset_password_key;
            $headers .= "MIME-Version: 1.0" . "\r
";
            $headers .= "Content-type: text/html; charset=UTF-8" . "\r
";

            mail($email, $subject, $message, $headers);

            $error = "Password reset link has been sent to your email address.";
        } else {
            $error = "Error resetting password. Please try again.";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

<h1>Forgot Password</h1>

<?php if (isset($error)): ?>
    <p style="color: red;"><?php echo $error; ?></p>
<?php endif; ?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["REQUEST_URI"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email" value="<?php echo isset($email) ? htmlspecialchars($email) : ''; ?>">
    <button type="submit">Reset Password</button>
</form>

</body>
</html>


<?php

// This is a simplified example for demonstration purposes.
// In a real-world application, you MUST use a secure method
// for generating and sending passwords.  This example is vulnerable to
// attacks if used without proper security measures.

// Database connection details (Replace with your actual values)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_pass = 'your_database_password';

// Function to reset password
function forgot_password($email, $new_password) {
  // 1. Connect to the database
  $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

  // Check connection
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // 2.  Hash the new password (VERY IMPORTANT - Do NOT store passwords in plain text)
  $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);  // Use password_hash() for secure hashing

  // 3. Update the password in the database
  $query = "UPDATE users SET password = '$hashed_password' WHERE email = '$email'";
  if ($conn->query($query) === TRUE) {
    return true; // Password reset successful
  } else {
    error_log("Query failed: " . $conn->error);  // Log the error for debugging
    return false; // Password reset failed
  }

  // 4. Close the connection
  $conn->close();
}


// Example Usage (This should be handled in a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $new_password = $_POST["new_password"];

  if (empty($email) || empty($new_password)) {
    echo "Error: Email and new password are required.";
  } else {
    if (forgot_password($email, $new_password)) {
      echo "Password reset email sent successfully. Please check your inbox.";
    } else {
      echo "Error: Password reset failed.  Please try again.";
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="new_password">New Password:</label>
    <input type="password" id="new_password" name="new_password" required><br><br>

    <input type="submit" value="Reset Password">
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset email was sent, false otherwise.
 */
function forgot_password(string $email): bool
{
    // Check if the email exists in the database
    $user = getUserById($email); // Assuming you have a getUserById function

    if (!$user) {
        return false; // User not found
    }

    // Generate a unique token for password reset
    $token = generate_unique_token();

    // Store the token and expiration time in the database for this user
    store_reset_token($user->id, $token, time() + 3600); // Store for 1 hour (adjust as needed)

    // Send the password reset email
    $subject = "Password Reset Request";
    $headers = "From: your_email@example.com"; // Replace with your actual email
    $message = "Click the link below to reset your password: " . base_url() . "/reset_password?token=" . $token; // Customize the link

    $result = send_email($email, $subject, $headers, $message);

    if ($result) {
        return true; // Email sent successfully
    } else {
        return false; // Failed to send email
    }
}


/**
 * Placeholder for retrieving user by ID.  Replace with your database query.
 *
 * @param string $email The user's email address.
 * @return User | null The user object if found, null otherwise.
 */
function getUserById(string $email): ?User
{
    //  Replace this with your database query.  This is just a placeholder.
    // Example using a fictional User class:
    // $db->query("SELECT * FROM users WHERE email = '$email'");
    // $result = $db->fetch_assoc();
    // if ($result) {
    //    return new User($result);
    // }
    // return null;

    // Example using a simple return for demonstration only
    return new User(['id' => 1, 'email' => $email]);
}


/**
 * Placeholder for generating a unique token.  Use a secure method.
 *
 * @return string A unique token.
 */
function generate_unique_token(): string
{
    return bin2hex(random_bytes(32)); // Use bin2hex for a secure hash
}


/**
 * Placeholder for storing the reset token and expiration time.
 * Replace this with your database logic.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token.
 * @param int $expirationTime Unix timestamp for expiration.
 */
function store_reset_token(int $userId, string $token, int $expirationTime): void
{
    // Replace this with your database logic to store the token and expiration time.
    // Example (assuming you have a database connection $db):
    // $db->query("INSERT INTO password_resets (user_id, token, expires) VALUES ($userId, '$token', $expirationTime)");
}


/**
 * Placeholder for sending an email.
 * Replace this with your email sending implementation.
 *
 * @param string $to        The recipient's email address.
 * @param string $subject   The email subject.
 * @param string $headers   The email headers.
 * @param string $message   The email body.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function send_email(string $to, string $subject, string $headers, string $message): bool
{
    // Replace this with your email sending implementation
    // Example using a fictional function:
    // return mail($to, $subject, $message, $headers);

    // Simulate success or failure for demonstration purposes
    return true;
}



// Example Usage (this is for demonstration only, in a real application this would
// be handled in a form submission and appropriately protected against CSRF attacks)

//  If you were handling this form submission, you would likely do something like this:
//  $email = $_POST['email'];
//  if (forgot_password($email)) {
//      echo "Password reset email sent. Check your inbox.";
//      //  Handle the success case - potentially redirect to a confirmation page
//  } else {
//      echo "Error: Password reset email could not be sent.  Please try again.";
//  }
?>


<?php

// Assuming you have a database connection established (e.g., $db)
// This is just an example - adjust your database connection details.

function forgot_password($email, $db) {
    // 1. Verify Email Existence
    $result = $db->query("SELECT id, email FROM users WHERE email = '$email'");

    if ($result->num_rows > 0) {
        $user = $result->fetch_assoc();
        $userId = $user['id'];
        $hashedPassword = $user['email']; // In a real application, this would be a securely hashed password

        // 2. Generate a Token
        $token = bin2hex(random_bytes(32)); // Generates a secure random token
        
        // 3. Store Token in Database
        $db->query("UPDATE users SET password_reset_token = '$token' WHERE id = '$userId'");

        // 4. Email the User with Reset Link
        $resetLink = "https://yourdomain.com/reset_password.php?token=$token"; // Replace with your domain

        $to = $email;
        $subject = 'Password Reset';
        $message = "Click on the following link to reset your password: " . $resetLink;
        $headers = "From: your_email@example.com"; // Replace with your email address
        
        mail($to, $message, $headers); 

        return true; // Indicate success
    } else {
        return false; // Indicate email not found
    }
}

// Example Usage (for demonstration - modify to fit your application's flow)

// Assume you've set up a database connection:
// $db = new mysqli("localhost", "username", "password", "database_name");

// if ($db->connect_error) {
//   die("Connection failed: " . $db->connect_error);
// }
//
// $email = "user@example.com"; // Replace with the user's email
//
// if (forgot_password($email, $db)) {
//     echo "Password reset email sent to $email";
// } else {
//     echo "Email not found or password reset link not generated.";
// }

// Close the database connection
// $db->close();

?>


<?php

// Database connection (Replace with your actual database credentials)
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$database = 'your_database';

// Function to generate a random password
function generateRandomPassword(int $length = 12) {
    $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-{}|;:\'",<.>?/';
    $password = '';
    $max_length = strlen($characters);
    for ($i = 0; $i < $length; $i++) {
        $password .= $characters[rand(0, $max_length - 1)];
    }
    return $password;
}


/**
 * Forgets a user's password.
 *
 * @param string $email The email address of the user.
 * @return bool True if a password reset email was sent, false otherwise.
 */
function forgotPassword(string $email)
{
    // 1. Validate Email (Basic check, improve for production)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format: " . $email); // Log the error - important for debugging
        return false;
    }

    // 2. Check if the user exists
    $user = getUserByEmail($email);
    if (!$user) {
        error_log("User not found with email: " . $email); // Log user not found
        return false;
    }

    // 3. Generate a random password
    $password = generateRandomPassword();

    // 4. Hash the password (Important for security - use strong hashing)
    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);

    // 5. Update the user's password in the database
    $result = updateUserPassword($user['id'], $hashedPassword);
    if (!$result) {
        error_log("Failed to update password for user: " . $email);
        return false;
    }

    // 6. Send the password reset email
    if (!sendResetPasswordEmail($user['email'], $password)) {
        // Handle email sending failure - logging is critical here.
        error_log("Failed to send password reset email for user: " . $email);
        // You might want to retry sending the email or take other actions.
        // Consider setting a flag in the database to indicate an error.
        return false;
    }


    return true;
}


/**
 * Helper functions (Replace with your actual database interactions)
 */

function getUserByEmail(string $email)
{
    // Replace this with your database query to fetch the user by email
    // This is just a placeholder.  Adapt to your database schema.
    // Example:
    // $query = "SELECT * FROM users WHERE email = '$email'";
    // $result = mysqli_query($conn, $query); // Or use PDO, etc.
    // $user = mysqli_fetch_assoc($result);
    // return $user;

    // Dummy user for testing
    $users = [
        ['id' => 1, 'email' => 'test@example.com', 'name' => 'Test User'],
        ['id' => 2, 'email' => 'another@example.com', 'name' => 'Another User']
    ];

    foreach ($users as $user) {
        if ($user['email'] == $email) {
            return $user;
        }
    }

    return null; // User not found
}


function updateUserPassword(int $userId, string $hashedPassword) {
    // Replace this with your database query to update the password
    // Example:
    // $query = "UPDATE users SET password = '$hashedPassword' WHERE id = $userId";
    // $result = mysqli_query($conn, $query);

    // Dummy update for testing
    // In a real application, you'd actually update the database.
    //  You'll likely use PDO or a similar database abstraction layer.
    // For demonstration, let's just simulate a success.
    return true;
}



function sendResetPasswordEmail(string $email, string $password)
{
    // Replace this with your email sending logic
    // Example:
    // $to = $email;
    // $subject = 'Password Reset';
    // $message = 'To reset your password, click on this link: ' . '<a href="reset_link">';
    // $headers = 'From: your_email@example.com' . "\r
";
    // $sent = mail($to, $subject, $message, $headers);

    // Simulate email sending for testing.
    // In a real application, you'd use a library or service to send emails.
    //  You'd also need to generate a unique reset token to secure the link.

    // Simulate success for testing
    return true;
}



// Example usage (Demonstration)
$email = 'test@example.com';
if (forgotPassword($email)) {
    echo "Password reset email sent to " . $email . "
";
} else {
    echo "Failed to reset password for " . $email . "
";
}

?>


<?php

// Assuming you have a database connection established and a 'users' table with an 'email' field.
// Replace these placeholders with your actual database credentials and table structure.

// Database connection details
$host = 'localhost';
$username = 'your_db_username';
$password = 'your_db_password';
$database = 'your_db_name';

// Function to handle the forgot password process
function forgot_password($email) {
  // 1. Validate Email (Important for security)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return 'Invalid email address.';
  }

  // 2. Check if the user exists in the database
  $conn = new mysqli($host, $username, $password, $database);
  if ($conn->connect_error) {
    return 'Database connection failed: ' . $conn->connect_error;
  }

  $query = "SELECT * FROM users WHERE email = '{$email}'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    // 3. Generate a unique token and store it for the user
    $token = bin2hex(random_bytes(32));  // Generate a secure random token
    $new_password = generate_random_password();  // See helper function below

    // Hash the new password
    $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

    // Store the token and hashed password in the database.  Create a 'password_resets' table for this.
    $query = "INSERT INTO password_resets (user_id, token, password_hash, created_at) 
                VALUES (
                    {$user['id']}, 
                    '{$token}', 
                    '{$hashed_password}', 
                    NOW()
                )";

    if ($conn->query($query) === TRUE) {
      // 4. Send the password reset link (email) - Implement this part
      $subject = 'Password Reset Link';
      $message = "Please click the following link to reset your password: " . '<a href="' . $_SERVER['PHP_SELF'] . '?token=' . $token . '">' . $_SERVER['PHP_SELF'] . '?token=' . $token . '</a>'; // Construct the link

      //Important:  You'll need to have a sendmail setup for this part. This example assumes you have PHP configured to send email.
      // Implement your email sending code here (e.g., using mail() or a library like PHPMailer).
      //  For example (very basic, replace with your actual implementation):
      mail($email, $subject, $message);


      return 'Password reset link has been sent to your email address.';
    } else {
      return 'Error creating password reset record: ' . $conn->error;
    }
  } else {
    return 'User not found.';
  }

  $conn->close();
}

// Helper function to generate a random password
function generate_random_password($length = 12) {
    $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_-+={}[]|\:;"<>,.?/';
    $password = '';
    $character_count = strlen($characters);

    for ($i = 0; $i < $length; $i++) {
        $index = random_int(0, $character_count - 1);
        $password .= $characters[$index];
    }
    return $password;
}


// Example Usage (for testing - replace with your actual form handling)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $result = forgot_password($email);
  echo $result;
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>
  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// IMPORTANT: This is a simplified example for demonstration purposes.
// In a real-world scenario, you should *never* store passwords in plain text.
// Use a strong hashing algorithm like bcrypt or Argon2.

// Assume you have a database connection established (e.g., $db)
// and a user table with a 'email' column.

function forgot_password($email, $db) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return ['status' => 'error', 'message' => 'Invalid email address.'];
  }

  // 2. Check if the user exists
  $result = $db->query("SELECT id, email FROM users WHERE email = '$email'");

  if ($result->num_rows === 0) {
    return ['status' => 'error', 'message' => 'User not found.'];
  }

  $user = $result->fetch_assoc();

  // 3. Generate a unique, time-based token
  $token = bin2hex(random_bytes(32)); // Generate a secure random token

  // 4. Store the token and user ID in the database
  $db->query("UPDATE users SET password_reset_token = '$token' WHERE email = '$email'");

  // 5. Send an email to the user with a link containing the token
  //    (This is where you would integrate with an email sending service.)
  //    For example:
  //    $subject = 'Password Reset Link';
  //    $message = "Please click the link below to reset your password: " . $base_url . "/reset_password?token=$token";
  //    $headers = 'From: your_email@example.com' . "\r
";
  //    $result = mail($email, $subject, $message, $headers);

  // 6. Return a success response
  return ['status' => 'success', 'message' => 'Password reset link sent to your email.'];
}


// Example Usage (Demonstration - REPLACE with actual database interaction)
//  --  This is just a placeholder to demonstrate the function.
//  --  In a real application, you'll use a database connection.

// Mock Database Connection (For demonstration only)
class MockDatabase {
    public function query($sql) {
        // Simulate query results for testing.  Replace with actual DB interaction.
        if (strpos($sql, "SELECT") === 0) {
            if (strpos($sql, "users WHERE email = 'test@example.com'") === 0) {
                return new \stdClass();
            }
        }
        return new \stdClass();
    }
}


$db = new MockDatabase(); // Using a mock database

$email = 'test@example.com';

$result = forgot_password($email, $db);

if ($result['status'] === 'success') {
  echo "Password reset link sent to $email.
";
} else {
  echo "Error: " . $result['message'] . "
";
}
?>


<?php

/**
 * Forgot Password Function
 *
 * This function allows a user to reset their password by sending an email
 * with a reset link.
 *
 * @param string $email The email address of the user requesting the reset.
 * @param string $reset_token A unique token to generate for the reset link.  Use a library like UUID or generate a random string.
 * @param string $to Email address to send the reset link to.
 * @param string $from Email address to send the reset link from.
 * @param string $website_url URL of your website.
 *
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email, string $reset_token, string $to, string $from, string $website_url): bool
{
    // 1. Sanitize and Validate Email
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format: " . $email); // Log for debugging
        return false;
    }

    // 2. Generate Reset Link
    $reset_link = $website_url . "/reset_password?token=" . $reset_token;

    // 3. Send Email
    $subject = "Password Reset Request";
    $message = "Please click on the following link to reset your password:
" . $reset_link;
    $headers = "From: " . $from . "\r
";
    $headers .= "Reply-To: " . $from . "\r
";
    $headers .= "Content-Type: text/plain; charset=UTF-8\r
";

    if (mail($to, $subject, $message, $headers)) {
        return true;
    } else {
        error_log("Failed to send email to " . $email); // Log email sending failure
        return false;
    }
}

// Example Usage (for testing - REMOVE in production)
if (isset($_POST['email']) && isset($_POST['reset_token'])) {
    $email = $_POST['email'];
    $reset_token = $_POST['reset_token'];
    $to = $email; // Use the posted email or a default
    $from = "your_email@example.com"; // Replace with your email
    $website_url = "https://yourwebsite.com"; // Replace with your website URL

    if (forgot_password($email, $reset_token, $to, $from, $website_url)) {
        echo "Reset link sent to " . $email;
    } else {
        echo "Failed to send reset link.";
    }
}

?>


<?php

/**
 * Forgot Password Function
 *
 * This function handles the process of sending a password reset link
 * to the user's email address.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @param string $baseUrl The base URL of your application (e.g., 'https://example.com').
 * @param string $token A unique, random token to secure the reset link.
 * @param string $expiryHours The number of hours the token should be valid for (e.g., 24).
 *
 * @return bool True if the email was successfully sent, false otherwise.
 */
function forgotPassword(string $email, string $baseUrl, string $token, int $expiryHours) {
    // Validate email format (basic check)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided: " . $email);  // Log for debugging
        return false;
    }

    // Generate the reset link
    $resetLink = $baseUrl . '/reset_password?token=' . urlencode($token) . '&expiry=' . urlencode($expiryHours);

    // Build the email content
    $subject = "Password Reset Request";
    $message = "You requested a password reset for your account.  Click on the following link to reset your password: " . $resetLink;
    $headers = "From: " .  "Your Website Name <noreply@" . $_SERVER['SERVER_NAME'] . ">" . "\r
";
    $headers .= "Reply-To: " . "noreply@" . $_SERVER['SERVER_NAME'] . "\r
";
    $headers .= "Content-Type: text/plain; charset=UTF-8\r
";  // Important for character encoding


    // Send the email
    if (mail($email, $subject, $message, $headers)) {
        return true;
    } else {
        error_log("Failed to send password reset email to " . $email); // Log for debugging
        return false;
    }
}


// Example Usage (for testing -  DO NOT USE IN PRODUCTION WITHOUT APPROPRIATE VALIDATION & SECURITY!)
// NOTE: This example does *not* handle database storage or validation.

// $email = "test@example.com"; // Replace with a real email address
// $baseUrl = "https://yourwebsite.com";
// $token = bin2hex(random_bytes(32)); // Generate a random token
// $expiryHours = 24;

// if (forgotPassword($email, $baseUrl, $token, $expiryHours)) {
//     echo "Password reset email has been sent to " . $email . ".";
// } else {
//     echo "Failed to send password reset email.";
// }

?>


<?php

/**
 * Forgets a user's password and sends them a reset link.
 *
 * @param string $email The email address of the user.
 * @param string $reset_token A unique token to verify the request.
 * @param string $secret_key The secret key used to generate the token.
 * @param string $new_password The new password.
 *
 * @return bool True if the password was reset successfully, false otherwise.
 */
function forgot_password(string $email, string $reset_token, string $secret_key, string $new_password): bool
{
    // 1. Verify the reset token
    $hashed_token = hash('sha256', $reset_token . $secret_key);

    if (!password_verify($hashed_token, $reset_token)) {
        // Token is invalid
        return false;
    }

    // 2.  Update the user's password
    try {
        $user = \App\Models\User::where('email', $email)->first(); // Adjust 'App\Models\User' to your actual user model

        if ($user) {
            $user->password = password_hash($new_password, PASSWORD_DEFAULT);
            $user->save();
            return true;
        } else {
            // User not found
            return false;
        }
    } catch (\Exception $e) {
        // Handle exceptions (e.g., database errors)
        error_log("Error during password reset: " . $e->getMessage());
        return false;
    }
}

// Example Usage (Demonstration)

// In a real application, you'd generate this token and email it to the user.
// This is just for illustration.
$email = 'test@example.com';
$reset_token = 'some_unique_token_123';
$secret_key = 'your_secret_key'; // Keep this secret!
$new_password = 'new_password123';

$reset_successful = forgot_password($email, $reset_token, $secret_key, $new_password);

if ($reset_successful) {
    echo "Password reset successful! Check your email for instructions.";
} else {
    echo "Password reset failed.  Check your email or try again.";
}

?>


<?php

// Include your database connection file (e.g., database.php)
require_once 'database.php';

/**
 * Forgets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email): bool
{
    // 1. Validate Input (Important for security!)
    if (empty($email)) {
        return false;
    }

    // 2. Check if the email exists
    $stmt = $pdo->prepare("SELECT id FROM users WHERE email = :email");
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    $stmt->execute();

    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        return false; // Email not found
    }

    // 3. Generate a Unique Token (for security)
    $token = bin2hex(random_bytes(32)); // Generate a secure, random token

    // 4.  Update the user's record with the token
    $stmt = $pdo->prepare("UPDATE users SET password_reset_token = :token, password_reset_expiry = :expiry, password_reset_requested = 1 WHERE id = :user_id");
    $stmt->bindParam(':token', $token, PDO::PARAM_STR);
    $stmt->bindParam(':expiry', date('Y-m-d H:i:s', time() + 3600), PDO::PARAM_STR); // Token expires in 1 hour
    $stmt->bindParam(':user_id', $user['id'], PDO::PARAM_INT);
    $result = $stmt->execute();

    if (!$result) {
        // Handle database error (e.g., log it)
        error_log("Error updating user with token: " . print_r($stmt->errorInfo(), true));
        return false;
    }

    // 5.  Send an email with the token (Implement your email sending logic here)
    // This is just an example - you'll need to adapt this to your email setup.
    $subject = 'Password Reset Request';
    $message = "Please click the following link to reset your password: " .  $_SERVER['PHP_SELF'] . "?reset_token=" . $token;
    $headers = "From: your_email@example.com" . "\r
";

    mail($email, $message, $headers); // Use mail() function.  Consider using a more robust email library.

    return true;
}


// Example usage (for testing, don't directly include this in a deployed application)
// $email = 'testuser@example.com'; // Replace with a valid email

// if (forgotPassword($email)) {
//     echo "Password reset email sent to " . $email . "
";
// } else {
//     echo "Failed to send password reset email for " . $email . "
";
// }

?>


<?php

// Database configuration (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_username';
$db_password = 'your_database_password';

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user requesting the password reset.
 * @return bool True if a password reset email was sent, false otherwise.
 */
function forgot_password($email)
{
    // 1. Validate Email (Basic)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided."); // Log for debugging
        return false;
    }

    // 2. Check if User Exists
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
    if ($conn->connect_error) {
        error_log("Connection failed: " . $conn->connect_error);
        return false; // Or handle the connection error differently
    }

    $sql = "SELECT id, email FROM users WHERE email = '$email'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $user_id = $result->fetch_assoc()['id'];
        $user_email = $result->fetch_assoc()['email'];

        // 3. Generate a Unique Token/Reset Code
        $reset_code = bin2hex(random_bytes(32)); // More secure than simple random numbers.

        // 4. Store the Token (Temporary - Consider expiration)
        $sql_insert = "INSERT INTO password_resets (user_id, reset_code, expires_at) VALUES ($user_id, '$reset_code', NOW() + INTERVAL 24 HOUR)"; // Expires in 24 hours.  Adjust as needed.
        if (!$conn->query($sql_insert)) {
            error_log("Error inserting reset code: " . $conn->error);
            return false;
        }

        // 5. Send Password Reset Email
        $to = $email;
        $subject = 'Password Reset';
        $message = "Please click the following link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . "?reset=$reset_code'</a>";
        $headers = "From: your_email@example.com" . "\r
";
        if (mail($to, $subject, $message, $headers)) {
            return true;
        } else {
            error_log("Failed to send password reset email.");
            // Optionally, delete the reset code if email sending fails.
            $conn->query("DELETE FROM password_resets WHERE user_id = $user_id AND reset_code = '$reset_code'");
            return false;
        }
    } else {
        return false; // User not found
    }

    // If it gets here, something went wrong (should be caught by the error_log)
    return false;
}


// --- Example Usage (For Testing -  Remove in Production!) ---
// Replace with a real email address for testing.
$email_to_reset = 'testuser@example.com'; // Replace with a test email

if (isset($_GET['reset'])) {
    $reset_code = $_GET['reset'];
    if (forgot_password($reset_code)) {
        echo "Password reset email sent to " . $reset_code . ".  Check your email.";
    } else {
        echo "Error: Password reset failed.";
    }
} else {
    // Display a form to trigger the reset process
    echo '<form action="" method="get">';
    echo '<input type="hidden" name="reset" value="';
    echo bin2hex(random_bytes(32));
    echo '">'; //  Important:  This is just a placeholder.
    echo '<input type="submit" value="Request Password Reset">';
    echo '</form>';
}

?>


<?php

// Database connection details - REPLACE WITH YOUR ACTUAL CREDENTIALS!
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database_name";

// ---------------------  Forgot Password Function ---------------------

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return string  A message indicating success or failure.
 */
function forgot_password(string $email): string {
    // 1. Check if the email exists in the database.
    $conn = new mysqli($host, $username, $password, $database);

    if ($conn->connect_error) {
        return "Failed to connect to the database: " . $conn->connect_error;
    }

    $query = "SELECT id, email FROM users WHERE email = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("s", $email); // "s" indicates a string parameter
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        $conn->close();
        return "Email not found.";
    }

    $user = $result->fetch_assoc();
    $stmt->close();
    $conn->close();

    // 2. Generate a unique token for password reset.
    $reset_token = bin2hex(random_bytes(32));

    // 3.  Store the token in the database.
    $conn = new mysqli($host, $username, $password, $database);

    if ($conn->connect_error) {
        return "Failed to connect to the database: " . $conn->connect_error;
    }

    $query = "UPDATE users SET reset_token = ? WHERE email = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("ss", $reset_token, $email); // "s" indicates a string parameter
    $stmt->execute();
    $stmt->close();
    $conn->close();


    // 4. Send an email with the reset link. (IMPLEMENT THIS PART - See below)
    $subject = "Password Reset Request";
    $message = "Click the link below to reset your password: " . $_SERVER["PHP_SELF"] . "?email=$email&token=$reset_token"; // Using the current page to generate the URL
    $headers = "From: your_email@example.com";  // Replace with your email

    mail($email, $subject, $message, $headers);


    return "Password reset link has been sent to your email address.";
}

// ---------------------  Example Usage (For testing - DO NOT USE IN PRODUCTION) ---------------------
// This code is for testing only.  Never expose your actual database credentials in a production environment.

// Assuming you have a form to submit the email address
// (See example HTML form below)

//  For testing, you can trigger the function directly like this:
//  $result = forgot_password("test@example.com");
//  echo $result;

?>

<!-- Example HTML Form (For testing - replace with your form) -->
<form method="post" action="<?php echo $_SERVER["PHP_SELF"]; ?>" >
  <label for="email">Email:</label>
  <input type="email" id="email" name="email" required>
  <button type="submit">Request Password Reset</button>
</form>


<?php

// Assuming you have a database connection established and stored in a variable like $db

// Function to handle the forgot password process
function forgotPassword($email) {
    // 1. Validate the email format
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email format.";
    }

    // 2. Check if the user exists in the database
    $user = getUserByEmail($email);  //  Assuming you have a function getUserByEmail()

    if (!$user) {
        return "User not found.";
    }

    // 3. Generate a unique token
    $token = generateUniqueToken();

    // 4. Store the token and timestamp in the database for the user
    storeToken($user['id'], $token);

    // 5. Send the reset password email
    $subject = "Password Reset Request";
    $message = "Click this link to reset your password: " . base_url() . "/reset-password?token=" . $token; // Replace base_url() with your actual base URL
    $headers = "From: Your Website <noreply@yourwebsite.com>";

    mail($email, $subject, $message, $headers);

    return "Password reset link has been sent to your email address.";
}

// **Helper Functions (Implement these)**

// 1. Get user by email
function getUserByEmail($email) {
    // Replace this with your actual database query
    // This is just a placeholder.  Adapt to your database system and user table.
    $db = getDatabaseConnection();  // Assuming you have a function to get the DB connection
    $sql = "SELECT * FROM users WHERE email = '$email'";
    $result = $db->query($sql);
    if ($result->num_rows > 0) {
        return $result->fetch_assoc();
    }
    return null;
}



// 2. Generate a unique token (e.g., using random characters)
function generateUniqueToken() {
    return bin2hex(random_bytes(32)); // Generates a 64-character hexadecimal string
}

// 3. Store the token and timestamp in the database
function storeToken($userId, $token) {
  // Replace this with your database update query
  // This is just a placeholder. Adapt to your database system and table structure.
  $db = getDatabaseConnection();
  $sql = "INSERT INTO password_tokens (user_id, token, expiry_timestamp)
          VALUES ($userId, '$token', NOW() + INTERVAL 30 DAY)"; // 30 days expiry
  $result = $db->query($sql);

  if (!$result) {
    error_log("Database error storing token: " . $db->error); // Log the error
    return false;
  }
  return true;
}



// *******  Database Connection & Helper Functions (You need to implement these) *******

// Replace with your actual database connection logic
function getDatabaseConnection() {
    // Implement your database connection here
    // Example (MySQLi):
    $servername = "localhost";
    $username = "your_db_username";
    $password = "your_db_password";
    $dbname = "your_database_name";

    $db = new mysqli($servername, $username, $password, $dbname);

    if ($db->connect_error) {
        die("Connection failed: " . $db->connect_error);
    }
    return $db;
}


// *******  End of Helper Functions *******



// Example Usage (in your form or controller)
// $email = $_POST['email'];  // Get email from form input
// $result = forgotPassword($email);
// echo $result;

?>


<?php

// Database connection details (replace with your actual details)
$host = 'localhost';
$username = 'your_db_username';
$password = 'your_db_password';
$database = 'your_database_name';

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user.
 * @return bool True if password reset email was sent successfully, false otherwise.
 */
function forgotPassword($email) {
  // Validate email format (basic check - you should use a more robust validation)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false;
  }

  // 1. Check if the user exists
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    error_log("Connection failed: " . $conn->connect_error); // Log the error
    return false;
  }

  $sql = "SELECT id, email FROM users WHERE email = '$email'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $user_id = $result->fetch_assoc()['id']; // Get user ID
    $user_email = $result->fetch_assoc()['email']; // Verify email
    $conn->close(); // Close connection after fetching data

    // 2. Generate a unique token/code
    $reset_token = bin2hex(random_bytes(32));  // Securely generate a random token
    // 3.  Create a token table (if it doesn't exist) and insert data
    $reset_token_table_name = "password_reset_tokens"; //  Name of your table

    // Check if the table exists, if not create it
    $table_exists = $conn->query("SHOW TABLES LIKE '$reset_token_table_name'");
    if (!$table_exists->num_rows > 0) {
        $sql_create_table = "CREATE TABLE `$reset_token_table_name` (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT NOT NULL,
            token VARCHAR(32) NOT NULL UNIQUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )";
        if (!$conn->query($sql_create_table)) {
          error_log("Error creating table: " . $conn->error);
          return false;
        }
    }

    $sql_insert_token = "INSERT INTO `$reset_token_table_name` (user_id, token)
                         VALUES ('$user_id', '$reset_token')";

    if (!$conn->query($sql_insert_token)) {
       error_log("Error inserting token: " . $conn->error);
       return false;
    }


    // 4. Send a password reset email
    $to = $email;
    $subject = 'Password Reset';
    $message = "Click on this link to reset your password: " . $_SERVER['REQUEST_SCHEME'] . '://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $reset_token;
    $headers = "From: your_email@example.com";

    if (mail($to, $subject, $message, $headers)) {
      // Success!  Delete token after sending.  Important security measure.
      $sql_delete_token = "DELETE FROM `$reset_token_table_name` WHERE user_id = '$user_id' AND token = '$reset_token'";
      if (!$conn->query($sql_delete_token)) {
        error_log("Error deleting token: " . $conn->error);
        //  Don't return false here - continue processing.  It's critical to
        //  keep the account valid, even if deleting the token failed.
      }
      return true;
    } else {
      error_log("Failed to send email"); // Log the failure
      return false;
    }
  } else {
    return false; // User not found
  }
  $conn->close();
}


// Example Usage (for testing -  DO NOT include this in your public facing code)
//  This is only for demonstration and debugging.  In a real application,
//  you'd handle this through a form submission.
/*
$email = "test@example.com"; // Replace with a valid email
if (forgotPassword($email)) {
  echo "Password reset email sent to $email";
} else {
  echo "Failed to reset password for $email";
}
*/
?>


<?php
// Assuming you have the forgotPassword() function defined above.
$host = 'localhost';
$username = 'your_db_username';
$password = 'your_db_password';
$database = 'your_database_name';

// Get the token from the URL
$token = $_GET['token'];

// Verify the token
$conn = new mysqli($host, $username, $password, $database);
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

$sql = "SELECT u.id, u.email FROM users u
        INNER JOIN password_reset_tokens r ON u.id = r.user_id
        WHERE r.token = '$token'";

$result = $conn->query($sql);

if ($result->num_rows > 0) {
    $user_id = $result->fetch_assoc()['id'];
    $user_email = $result->fetch_assoc()['email'];

    // Update password
    $new_password = $_POST['new_password']; // Get new password from form
    $sql_update = "UPDATE users SET password = '$new_password' WHERE id = '$user_id'";
    if (!$conn->query($sql_update)) {
        error_log("Error updating password: " . $conn->error);
    }

    // Delete token after successful password update
    $sql_delete_token = "DELETE FROM password_reset_tokens WHERE user_id = '$user_id' AND token = '$token'";
    if (!$conn->query($sql_delete_token)) {
        error_log("Error deleting token: " . $conn->error);
    }

    echo "Password reset successful.  Please log in with your new password.";

} else {
    echo "Invalid reset token.";
}

$conn->close();
?>


<?php

// Assuming you have a database connection established and available as $db

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password.
 * @param PDO $db          The database connection object.
 *
 * @return bool True if the password reset was successful, false otherwise.
 */
function forgotPassword(string $email, string $newPassword, PDO $db) {
    // 1. Check if the email exists
    $stmt = $db->prepare("SELECT id FROM users WHERE email = :email");
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    $stmt->execute();

    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        // User not found
        return false;
    }

    // 2. Hash the new password
    $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);

    // 3. Update the user's password in the database
    $stmt = $db->prepare("UPDATE users SET password = :password WHERE id = :id");
    $stmt->bindParam(':password', $hashedPassword, PDO::PARAM_STR);
    $stmt->bindParam(':id', $user['id'], PDO::PARAM_INT);
    $stmt->execute();

    if ($stmt->rowCount() === 0) {
        // Password update failed
        return false;
    }

    return true;
}

// Example Usage (Illustrative - replace with your actual logic)
// This section is for demonstration and should be adjusted to match your application.
/*
// Assuming $db is your established PDO database connection
// Example:
// $db = new PDO("mysql:host=localhost;dbname=your_database", "your_username", "your_password");

$email = 'testuser@example.com';
$newPassword = 'NewPassword123';  // Replace with a secure password

if (forgotPassword($email, $newPassword, $db)) {
    echo "Password reset successful for $email.";
} else {
    echo "Password reset failed for $email.";
}
*/


?>


<?php

// This is a simplified example and should be used with caution.
// In a production environment, you MUST:
// 1.  Store passwords securely (hashed, not plain text).
// 2.  Use a robust session management system.
// 3.  Implement proper rate limiting to prevent brute-force attacks.
// 4.  Validate user input thoroughly.
// 5.  Send emails securely (HTTPS) and handle email delivery failures.


// Example user data (replace with your database connection)
$users = [
    'john.doe@example.com' => 'hashed_password_john',
    'jane.smith@example.com' => 'hashed_password_jane',
];

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email): bool
{
    // 1. Verify the email exists
    if (!isset($users[$email])) {
        return false; // Email doesn't exist
    }

    // 2. Generate a unique token (e.g., using uuid_v4())
    $token = bin2hex(random_bytes(32)); // Stronger random token

    // 3.  Store the token in the database associated with the email.
    //     This example uses a simple array.  In a real application, you'd use a database.
    $users[$email] = $token;  // Update the array to store the token

    // 4.  Send the password reset email (This is just a placeholder)
    $subject = 'Password Reset Request';
    $message = "To reset your password, please click this link: " . $_SERVER['REQUEST_URI']; // Use the URL of the reset form
    $headers = ['Content-Type: text/html']; // Use HTML for the email

    //  In a real application, use a library like PHPMailer to send emails.
    //  For example:
    //  mail($email, $subject, $message, $headers);
    //  Make sure the email is sent over HTTPS.

    // 5. Return true to indicate success
    return true;
}

// Example usage (for testing - NEVER expose this directly to users)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['email'])) {
        $email = filter_var($_POST['email'], FILTER_SANITIZE_EMAIL);
        if (is_email($email)) {
            if (forgot_password($email)) {
                echo "<p>Password reset link sent to $email.</p>";
            } else {
                echo "<p>Error: Could not reset password. Please check your email or try again later.</p>";
            }
        } else {
            echo "<p>Invalid email address.</p>";
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established and named $db

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user.
 * @param string $newPassword The new password.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email, string $newPassword) {
  global $db; // Assuming $db is your database connection

  // 1.  Check if the email exists in the database.  Case-insensitive comparison is important.
  $stmt = $db->prepare("SELECT id FROM users WHERE email = ?");
  $email_lower = strtolower($email);  // Convert to lowercase for comparison
  $stmt->bind_param("s", $email_lower);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    $stmt->close();
    return false; // Email not found
  }

  $user_id = $result->fetch_assoc()['id'];
  $stmt->close();


  // 2.  Hash the new password before updating the database.  **CRITICAL SECURITY STEP**
  $hashed_password = password_hash($newPassword, PASSWORD_DEFAULT);

  // 3.  Update the user's password in the database.
  $stmt = $db->prepare("UPDATE users SET password = ? WHERE id = ?");
  $stmt->bind_param("ss", $hashed_password, $user_id);
  $exec_result = $stmt->execute();

  if (!$exec_result) {
    // Handle database errors.  Important for debugging!
    error_log("Error updating password for user " . $email . ": " . $db->error);
    $stmt->close();
    return false;
  }

  $stmt->close();

  return true; // Password reset successful
}


// Example Usage (Illustrative -  This would be part of your form handling)

//  Assuming you have $email and $new_password from form input.

// $email = $_POST['email'];
// $newPassword = $_POST['new_password'];

// if (isset($email) && isset($newPassword)) {
//   if (forgot_password($email, $newPassword)) {
//     echo "Password reset email sent. Please check your inbox.";
//   } else {
//     echo "Error resetting password. Please try again.";
//   }
// } else {
//   echo "Invalid input. Please enter your email and a new password.";
// }

?>


<?php

// This is a simplified example and should be adapted to your specific environment.
//  Consider using a more robust solution like a dedicated password reset library.

// 1. Database Connection (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_database_user";
$db_pass = "your_database_password";

// 2.  Error Handling and Input Validation
if ($_SERVER["REQUEST_METHOD"] !== "POST") {
    // Not a POST request - likely a direct access attempt
    header("Location: /login.php"); // Redirect to login page or error page
    exit();
}

$email = $_POST["email"];

if (empty($email)) {
    $errors = ["Email is required"];
} else {
    // Validate email format (basic validation)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $errors = ["Invalid email format"];
    }
}


// 3.  Retrieve User Information (Replace with your database query)
$conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

//  Placeholder - Replace with your actual query
$sql = "SELECT id, email FROM users WHERE email = ?";
$stmt = $conn->prepare($sql);
$stmt->bind_param("s", $email); // 's' indicates a string parameter
$stmt->execute();

$result = $stmt->get_result();

$user = null;
if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
}

$stmt->close();



// 4.  Password Reset Process
if ($user) {
    // Generate a unique, secure, and temporary reset token
    $resetToken = bin2hex(random_bytes(32));

    // Store the token in the database associated with the user's ID.
    //  Important: Use prepared statements to prevent SQL injection.
    $sql = "UPDATE users SET reset_token = ? WHERE id = ?";
    if ($conn->prepare($sql)) {
        $conn->bind_param("ss", $resetToken, $user['id']);
        if ($conn->execute()) {
            // Send the reset email (implementation omitted for brevity)
            $to = $user['email'];
            $subject = "Password Reset Request";
            $message = "Click <a href=\"reset_password.php?token=$resetToken\">here</a> to reset your password."; //  URL for the reset page.  IMPORTANT:  sanitize this URL in your reset_password.php to prevent security vulnerabilities.
            $headers = "From: your_email@example.com";  // Replace with your email address

            mail($to, $subject, $message, $headers); // Implement your email sending logic here

            echo "Password reset email sent to $user[email].";
        } else {
            echo "Error sending reset email.";
        }
        $conn->close();
    } else {
        echo "Error preparing SQL statement.";
    }
} else {
    echo "User not found.";
}
?>


<?php

// Assume you have a database connection established and defined as $db

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user.
 * @param string $newPassword The new password to set.
 * @return bool True if password reset successful, false otherwise.
 */
function forgotPassword(string $email, string $newPassword) {
  // 1. Check if the email exists in the database
  $stmt = $db->prepare("SELECT id FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    return false; // Email not found
  }

  // 2.  Hash the new password (Important for security!)
  $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

  // 3. Update the password in the database
  $stmt = $db->prepare("UPDATE users SET password = ? WHERE id = ?");
  $stmt->execute([$hashedNewPassword, $user['id']]);

  // 4. Return true if the update was successful
  return true;
}

// --- Example Usage (Demonstration) ---
// In a real application, this would be triggered by a form submission.
// For demonstration, let's hardcode the email and password.
// WARNING: This is for demonstration ONLY.  Never do this in a production environment!

// Simulate a database connection (replace with your actual connection)
$db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');

// Example 1: Successful password reset
$email = 'testuser@example.com'; // Replace with a valid email
$newPassword = 'NewPassword123!';

if (forgotPassword($email, $newPassword)) {
  echo "Password reset successful for $email
";
} else {
  echo "Password reset failed for $email
";
}

// Example 2: Handling an invalid email
$invalidEmail = 'nonexistent@example.com';
$newPassword = 'AnotherPassword';

if (forgotPassword($invalidEmail, $newPassword)) {
    echo "Password reset successful for $invalidEmail
";
} else {
    echo "Password reset failed for $invalidEmail
";
}
?>


<?php

// Assuming you have a database connection established and stored in a variable like $db

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user.
 * @return bool True if password reset email was sent, false otherwise.
 */
function forgot_password(string $email): bool
{
    // 1. Check if the email exists in the database
    $stmt = $db->prepare("SELECT id, email FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        // Email doesn't exist in the database
        return false;
    }

    // 2. Generate a unique token
    $token = bin2hex(random_bytes(32)); // Use a cryptographically secure random string

    // 3. Hash the token for security
    $hashed_token = password_hash($token, PASSWORD_DEFAULT);

    // 4. Store the token in the database associated with the user
    $stmt = $db->prepare("UPDATE users SET reset_token = ?, reset_token_expires = ? WHERE email = ?");
    $stmt->execute([$hashed_token, time() + 60 * 60 * 24, $email]); //  Token expires after 24 hours. Adjust as needed.

    // 5. Send the password reset email (see example below)
    if (send_password_reset_email($email, $token)) {
        return true;
    } else {
        // Failed to send email -  you might want to log this.
        return false;
    }
}

/**
 * Sends a password reset email to the user.
 *
 * @param string $email The email address of the user.
 * @param string $token The password reset token.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function send_password_reset_email(string $email, string $token): bool
{
    // Replace with your email sending logic
    // This is just a placeholder.  Use a proper email sending library/service.
    // You should *never* embed sensitive information directly in code.

    $subject = "Password Reset Request";
    $message = "To reset your password, please click on the following link: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=" . urlencode($token) . "'>Reset Password</a>";

    $headers = "From: Your Website <yourwebsite@example.com>";  // Replace with your actual email address

    if (mail($email, $subject, $message, $headers)) {
        return true;
    } else {
        return false;
    }
}


// Example usage:
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    if (!empty($email)) {
        $reset_result = forgot_password($email);

        if ($reset_result) {
            echo "<p>Password reset email has been sent to $email.</p>";
        } else {
            echo "<p>An error occurred while attempting to reset your password.</p>";
        }
    } else {
        echo "<p>Please enter your email address.</p>";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established and named $db
// and a table named 'users' with an 'email' column.

function forgotPassword($email, $db) {
    // 1. Check if the email exists in the database
    $stmt = $db->prepare("SELECT id, password FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        return false; // Email not found
    }

    // 2. Generate a unique token and store it in the database
    $token = bin2hex(random_bytes(32)); // Generates a secure random token
    $stmt = $db->prepare("UPDATE users SET password_token = ?, password_token_expiry = datetime('now + 1 hour') WHERE email = ?"); // Use datetime() for expiry
    $stmt->execute([$token, $email]);

    // 3. Send an email with a reset link
    $resetLink = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $token;
    sendResetPasswordEmail($email, $resetLink); // Implement this function (see example below)

    return true; // Password reset process initiated successfully
}

// Example Implementation of sendResetPasswordEmail function:
function sendResetPasswordEmail($email, $resetLink) {
    $to = $email;
    $subject = 'Password Reset';
    $message = "Click the following link to reset your password: " . $resetLink;
    $headers = "From: your_email@example.com";

    mail($to, $message, $headers);
}

// Example Usage (within your route/controller):
// $email = $_POST['email'];
// if (isset($email)) {
//     if (forgotPassword($email, $db)) {
//         echo "Password reset link sent to your email.  Please check your inbox.";
//     } else {
//         echo "Invalid email or password reset link already exists.";
//     }
// }
?>


<?php
session_start(); // Start a session to track the reset process

// Check if the token is present in the URL
if (isset($_GET['token']) && isset($_GET['new_password'])) {
    $token = $_GET['token'];
    $new_password = $_GET['new_password'];

    // 1. Validate Token & Expiry
    $stmt = $db->prepare("SELECT id, password_token, password_token_expiry FROM users WHERE email = ? AND password_token = ?");
    $stmt->execute([$_SESSION['email'], $token]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user || $user['password_token_expiry'] < datetime('now')) {
        echo "Invalid token or token has expired.";
        exit;
    }

    // 2. Hash the new password
    $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

    // 3. Update the user's password
    $stmt = $db->prepare("UPDATE users SET password = ?, password_token = NULL, password_token_expiry = NULL WHERE id = ?");
    $stmt->execute([$hashed_password, $user['id']]);

    // 4. Redirect the user to the login page or a success page.
    echo "Password reset successful! Please log in.";
    header("Location: login.php");
    exit;
} else {
    echo "Invalid request.";
}
?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email): bool
{
    // 1. Check if the email exists
    $user = get_user_by_email($email);

    if (!$user) {
        return false; // User not found
    }

    // 2. Generate a unique token
    $token = generate_unique_token();

    // 3. Store the token and user ID in the database
    $result = save_token_for_user($user->id, $token);

    if (!$result) {
        return false; // Error saving token
    }

    // 4. Send the password reset email
    $subject = 'Password Reset';
    $message = 'Please reset your password by clicking on this link: ' . '<a href="' . generate_reset_link($token) . '" target="_blank">Reset Password</a>';
    $headers = 'From: your_website@example.com' . "\r
"; // Replace with your email address

    //  Use mail() or a more robust email sending library
    if (mail($email, $subject, $message, $headers)) {
        return true; // Reset email sent successfully
    } else {
        // Handle email sending failure (e.g., log the error)
        error_log("Failed to send password reset email to $email");
        return false;
    }
}


/**
 * Placeholder function to retrieve a user by email.  Replace with your actual database query.
 *
 * @param string $email The user's email address.
 * @return User|null  The User object if found, null otherwise.
 */
function get_user_by_email(string $email): ?User
{
    // Replace this with your actual database query.  This is just a placeholder.
    // Example:
    // $query = "SELECT * FROM users WHERE email = '$email'";
    // $result = mysqli_query($db, $query);
    // if (mysqli_num_rows($result) > 0) {
    //   return new User(...mysqli_fetch_assoc($result));
    // }
    // return null;

    // Dummy User class for demonstration
    class User {
        public $id;
        public $email;
        public function __construct(string $id, string $email) {
            $this->id = $id;
            $this->email = $email;
        }
    }

    // Simulate user data
    return new User(1, $email);
}



/**
 * Generates a unique token.  Consider using a more robust random number generator
 * for security.
 *
 * @return string A unique token.
 */
function generate_unique_token(): string
{
    return bin2hex(random_bytes(32)); // More secure than rand()
}



/**
 * Generates a reset link with the token.
 *
 * @param string $token The token.
 * @return string The reset link.
 */
function generate_reset_link(string $token): string
{
    return 'https://yourwebsite.com/reset_password?token=' . $token; // Replace your website URL
}

/**
 * Placeholder function to save the token for a user. Replace with your actual database operation.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token.
 * @return bool True on success, false on failure.
 */
function save_token_for_user(int $userId, string $token): bool
{
    // Replace this with your actual database operation.
    // Example:
    // $query = "UPDATE users SET token = '$token' WHERE id = $userId";
    // return mysqli_query($db, $query);

    // Dummy operation for demonstration
    return true;
}

// --- Example Usage (for demonstration only - should be in a form submission) ---
if (isset($_POST['email'])) {
    $email = $_POST['email'];
    if (forgot_password($email)) {
        echo "Password reset email sent to $email.";
    } else {
        echo "Failed to generate password reset link.  Please try again.";
    }
}

?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique token and sends an email to the user
 * with a link to reset their password.
 *
 * @param string $email The email address of the user.
 * @param string $baseUrl The base URL of the website.  Needed for generating the reset link.
 * @return bool True if an email was sent, false otherwise.
 */
function forgotPassword(string $email, string $baseUrl): bool
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided.");
        return false;
    }

    // 2. Generate a unique token
    $token = bin2hex(random_bytes(32)); // Use a strong random token
    // Store the token in the database.  Replace 'users' and 'password_reset_token' with your actual table and column names.
    // This assumes you have a database connection already established.
    $mysqli = new mysqli("localhost", "your_username", "your_password", "your_database");
    if ($mysqli->connect_errno) {
        error_log("Failed to connect to database.");
        return false;
    }

    $sql = "INSERT INTO password_reset_tokens (user_email, reset_token, expiry_timestamp) VALUES (?, ?, ?)";
    if ($mysqli->query($sql) === false) {
        error_log("Query failed: " . $mysqli->error);
        $mysqli->close();
        return false;
    }

    $id = $mysqli->insert_id;
    $mysqli->close();



    // 3. Generate the reset link
    $resetLink = $baseUrl . "/reset_password.php?token=" . $token;


    // 4. Send the email
    $to = $email;
    $subject = "Password Reset";
    $message = "Click the following link to reset your password: " . $resetLink . "

" .
               "This link will expire in 24 hours.";
    $headers = "From: Your Website <your_email@example.com>"; // Replace with your actual email address

    if (mail($to, $message, $headers)) {
        return true;
    } else {
        // Log the error if the email fails to send
        error_log("Failed to send email to " . $email);
        // Attempt to delete the record if email fails
        $sql_delete = "DELETE FROM password_reset_tokens WHERE user_email = '$email'";
        if ($mysqli->query($sql_delete) === false) {
            error_log("Failed to delete password reset token from database: " . $mysqli->error);
        }
        return false;
    }
}


// Example Usage (Illustrative - Replace with your actual website URL and email)
// $email = "test@example.com";
// $baseUrl = "https://www.yourwebsite.com";
// $success = forgotPassword($email, $baseUrl);
//
// if ($success) {
//     echo "Password reset email sent to " . $email;
// } else {
//     echo "Failed to send password reset email.";
// }
?>


<?php

/**
 * Forgotten Password Function
 *
 * This function handles the process of resetting a user's password.
 * It generates a unique token, sends an email with a password reset link,
 * and optionally allows the user to reset their password using that link.
 *
 * @param string $email The email address of the user who wants to reset their password.
 * @param string $reset_password_link_expiry  The expiry time (in seconds) for the password reset link. Defaults to 3600 (1 hour).
 * @return bool True if the password reset process initiated successfully, false otherwise.
 */
function forgot_password(string $email, string $reset_password_link_expiry = 3600) {

  // 1. Generate a unique token
  $token = bin2hex(random_bytes(32));

  // 2. Store the token and user ID in the database (assuming you have a database connection)
  // Replace this with your actual database interaction code.  This is a placeholder.
  $db_connection = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password'); // Replace with your credentials
  try {
    $stmt = $db_connection->prepare("INSERT INTO password_resets (user_id, token, expires) VALUES (?, ?, ?)");
    $stmt->execute([$email, $token, time() + $reset_password_link_expiry]);
    $reset_id = $db_connection->lastInsertId(); // Get the ID of the newly inserted row.
  } catch (PDOException $e) {
    error_log("Error creating password reset record: " . $e->getMessage()); // Log the error
    return false;
  }

  // 3. Prepare the password reset link
  $reset_link = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $token;

  // 4. Send the email
  $to = $email;
  $subject = 'Password Reset';
  $message = "To reset your password, please click on the following link: " . $reset_link;
  $headers = 'From: your_email@example.com' . "\r
";

  if (mail($to, $subject, $message, $headers)) {
    // Password reset email sent successfully
    return true;
  } else {
    // Failed to send email
    error_log("Failed to send password reset email to " . $email); // Log the error
    return false;
  }
}


// Example Usage (Simulated)
// You'll need to implement the actual email sending and database interaction
//  The following is just to demonstrate how you would call the function
$user_email = 'test@example.com'; // Replace with a valid email
if (forgot_password($user_email)) {
    echo "Password reset email sent to " . $user_email . "
";
} else {
    echo "Failed to initiate password reset for " . $user_email . "
";
}

?>


<?php

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';

// ---  Forgot Password Function ---
function forgotPassword($email) {
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return 'Invalid email address.';
    }

    // 2. Check if User Exists
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
        return 'Connection failed: ' . $conn->connect_error;
    }

    $sql = "SELECT id, password, email FROM users WHERE email = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $email); // 's' indicates a string parameter
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        $conn->close();
        return 'User not found.';
    } else {
        $user = $result->fetch_assoc();
        $stmt->close();
        $conn->close();

        // 3. Generate a Unique Token (for security)
        $token = bin2hex(random_bytes(32));

        // 4.  Store Token in Database
        $sql = "INSERT INTO password_resets (user_id, token, expiry) VALUES (?, ?, ?)";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("iii", $user['id'], $token, time() + 60); // Expiry after 60 minutes
        $stmt->execute();
        $stmt->close();

        // 5. Send Reset Link Email (Implement your email sending logic here)
        //  This is just a placeholder - replace with your actual email sending function
        $reset_link = 'http://yourwebsite.com/reset_password?token=' . $token;
        $subject = 'Password Reset Request';
        $message = 'Click this link to reset your password: ' . $reset_link;
        //  Use a function like sendEmail($to, $subject, $message);
        //  Example (replace with your actual email sending)
        //  sendEmail($user['email'], $subject, $message);
        return $reset_link;

    }
}

// --- Example Usage (for testing) ---
//  **IMPORTANT:**  This is just for demonstration.  Do NOT use this
//  in a production environment without proper security measures and
//  email integration.

// Example:  If you wanted to trigger the function from a form submission,
//  you'd likely use something like this:

// $email = $_POST['email'];
// $reset_link = forgotPassword($email);
// echo $reset_link;

?>


<?php

// Assume you have a database connection established and a table named 'users' 
// with columns 'id', 'email', and 'password'

// Function to reset a password
function forgotPassword($email, $newPassword, $dbConnection) {
  // 1. Validate Input (Important for security)
  if (empty($email) || empty($newPassword)) {
    return 'Invalid email or password.';
  }

  // 2. Check if the email exists in the database
  $stmt = $dbConnection->prepare("SELECT id, email FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    return 'Email not found.';
  }

  // 3. Hash the new password (Very Important for Security!)
  $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

  // 4. Update the password in the database
  $stmt = $dbConnection->prepare("UPDATE users SET password = ? WHERE id = ?");
  $stmt->execute([$hashedNewPassword, $user['id']]);

  if ($stmt->rowCount() === 0) {
    return 'Failed to update password.';
  }

  return 'Password reset successfully. Check your email for further instructions.';
}


// Example Usage (Illustrative - Adapt to your application)

// Assuming $dbConnection is your PDO database connection
// $email = $_POST['email']; // Get email from form
// $newPassword = $_POST['new_password'];

// $result = forgotPassword($email, $newPassword, $dbConnection);
// echo $result;


//  ---------------------  Security Considerations  ---------------------

// 1.  Input Validation:  *Crucially* validate the email format
//     using regex or a library to prevent malicious input.  Also, consider
//     limiting password length, character types, etc., for stronger security.

// 2. Password Hashing: ALWAYS use a strong hashing algorithm (PASSWORD_DEFAULT)
//    to store passwords.  Never store passwords in plain text.

// 3. Email Verification (Highly Recommended):  Instead of just resetting the password,
//    send a verification email with a unique token. The user can then click the
//    link in the email to confirm the new password. This provides an extra layer
//    of security and ensures the user actually initiated the reset.  See below for example.

// 4. Rate Limiting:  Implement rate limiting to prevent brute-force attacks.
//    Limit the number of password reset requests from a single IP address or user.

// 5. Session Management:  Use sessions or tokens to track the password reset process.


// -------------------- Example with Email Verification --------------------
// (This is a more robust and secure approach)

// function forgotPasswordWithVerification($email, $dbConnection) {
//     // ... (Same input validation as before) ...

//     // Generate a unique token
//     $token = bin2hex(random_bytes(32)); // Secure random bytes

//     // Store the token and user ID in a temporary table (or use a session)
//     $stmt = $dbConnection->prepare("INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, NOW())");
//     $stmt->execute([$user['id'], $token]);
//     $resetId = $dbConnection->lastInsertId();


//     // Send an email with a verification link
//     $verificationLink = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $token;
//     $subject = 'Password Reset';
//     $message = "Click the link above to reset your password.";
//     $headers = 'From: your_email@example.com' . "\r
";
//     mail($email, $subject, $message, $headers);


//     return $verificationLink; // Return the link for the user to click
// }


?>


<?php

// Database connection details (replace with your actual credentials)
$dbHost = 'localhost';
$dbName = 'your_database_name';
$dbUsername = 'your_username';
$dbPassword = 'your_password';

// Error reporting (optional, but helpful for debugging)
error_reporting(E_ALL);
ini_set('display_errors', 1);


/**
 * Resets a user's password based on their email.
 *
 * @param string $email The user's email address.
 * @return bool True on success, false on failure.
 */
function forgotPassword($email) {
  // 1. Validate the email address (basic check)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false; // Invalid email format
  }

  // 2. Check if the user exists
  $conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);
  if ($conn->connect_error) {
    error_log("Failed to connect to database: " . $conn->connect_error); // Log the error
    return false;
  }

  $sql = "SELECT id, email FROM users WHERE email = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("s", $email);  // 's' indicates a string parameter
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    $stmt->close();
    $conn->close();
    return false; // User not found
  }

  $user = $result->fetch_assoc();
  $user_id = $user['id'];
  $user_email = $user['email'];
  $stmt->close();

  // 3. Generate a unique token (important for security)
  $token = bin2hex(random_bytes(32)); // Generate a cryptographically secure random token

  // 4.  Create a password reset token record in the database
  $sql_token = "INSERT INTO password_resets (user_id, token, expiry) VALUES (?, ?, NOW())";
  $stmt_token = $conn->prepare($sql_token);
  $stmt_token->bind_param("is", $user_id, $token);
  $stmt_token->execute();
  $stmt_token->close();


  // 5.  Send an email with the reset link
  $to = $email;
  $subject = 'Password Reset';
  $message = "Click this link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=" . $token . "'>" . $_SERVER['PHP_SELF'] . "?reset=" . $token . "</a>";
  $headers = "From: your_email@example.com";  // Replace with your email address

  mail($to, $message, $headers);

  // 6. Close the database connection
  $conn->close();

  return true;
}



//  Example Usage (for testing -  remove or comment out in production)
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  $email = $_POST['email'];
  if (isset($email) && !empty($email)) {
    if (forgotPassword($email)) {
      echo "Password reset email has been sent to " . $email;
    } else {
      echo "Error: Could not reset password.  User not found or email validation failed.";
    }
  } else {
    echo "Error: Please enter your email address.";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a user table with email and password fields.

// Function to handle the forgot password request
function forgotPassword($email) {
  // 1. Validate the email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if the user exists in the database
  $stmt = $db->prepare("SELECT id, password FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    return "User not found.";
  }

  // 3. Generate a unique token
  $token = bin2hex(random_bytes(32));

  // 4.  Prepare the password reset token
  $reset_token = $token . "_" . $timestamp = date("Y-m-d H:i:s", time());


  // 5. Hash the password (Important for security!)
  $hashedPassword = password_hash($user['password'], PASSWORD_DEFAULT);

  // 6.  Store the token in the database associated with the user
  $stmt = $db->prepare("UPDATE users SET password_reset_token = ?, password_reset_token_expiry = ? WHERE email = ?");
  $stmt->execute([$token, date("Y-m-d H:i:s", time() + 60 * 60 * 24), $email]); // Store for 24 hours

  // 7. Send the password reset email (Example - Customize this!)
  $to = $email;
  $subject = 'Password Reset';
  $message = "Click <a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'</a> to reset your password.";
  $headers = "From: your_email@example.com" . "\r
";

  mail($to, $message, $headers);

  return "Password reset email sent. Please check your inbox.";
}

// Example Usage (This would typically be called from a form submission)
// You would validate the form input and then call this function.

// Example Form Handling (Illustrative - Adjust to your form structure)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $reset_token = $_GET["reset"];
    //Security - Sanitize the Reset Token
  $reset_token = filter_var($reset_token, FILTER_SANITIZE_STRING);
    if($reset_token == ""){
      $response = "Invalid Reset Token";
    }else{
      $response = forgotPassword($email);
    }


}else{
  $response = "Please fill in the email field.";
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

  <?php
    if(isset($response)){
      echo "<p>" . htmlspecialchars($response) . "</p>";
    }
  ?>

</body>
</html>


<?php

// IMPORTANT: This is a simplified example for demonstration purposes.
// In a production environment, you MUST implement robust security measures
// such as:
//  - Stronger password hashing algorithms (e.g., bcrypt, Argon2)
//  - Rate limiting to prevent brute-force attacks
//  - Email verification for reset links
//  - Thorough input validation and sanitization
//  - Logging all password reset attempts

class PasswordReset {

  private $db; // Database connection

  public function __construct($db) {
    $this->db = $db;
  }

  public function resetPassword($email) {
    // 1. Check if the email exists in the database
    $stmt = $this->db->prepare("SELECT id, email FROM users WHERE email = ?");
    $stmt->bind_param("s", $email); // 's' for string
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
      $stmt->close();
      return false; // Email not found
    }

    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $stmt->close();

    // 2. Generate a unique reset token
    $resetToken = bin2hex(random_bytes(32));  // Generates a secure random token

    // 3. Store the token in the database, associated with the user
    $stmt = $this->db->prepare("UPDATE users SET reset_token = ? WHERE id = ?");
    $stmt->bind_param("ss", $resetToken, $userId);
    $stmt->execute();
    $stmt->close();

    // 4.  Send an email with the reset link.  (This is outside the core function for clarity)
    //  -  You'll need to have a function to send emails.
    //  -  The email should contain a link like:  `https://yourwebsite.com/reset-password?token=$resetToken`

    return $resetToken; // Return the token to the user
  }

  public function verifyResetToken($token) {
    // 1. Check if the token exists in the database
    $stmt = $this->db->prepare("SELECT id FROM users WHERE reset_token = ?");
    $stmt->bind_param("s", $token);
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
      $stmt->close();
      return false; // Token not found
    }

    $userId = $result->fetch_assoc()['id'];
    $stmt->close();

    // 2.  Check if the token is still valid.  (Implement an expiration time for the token)
    //  -  This example doesn't include an expiration time for simplicity,
    //     but you should *always* add one.

    return true;  // Token is valid (for this simplified example)
  }

  public function deleteResetToken($token) {
    // 1. Check if the token exists in the database
    $stmt = $this->db->prepare("SELECT id FROM users WHERE reset_token = ?");
    $stmt->bind_param("s", $token);
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
      $stmt->close();
      return false; // Token not found
    }

    $userId = $result->fetch_assoc()['id'];
    $stmt->close();

    // 2. Delete the token from the database
    $stmt = $this->db->prepare("DELETE FROM users WHERE reset_token = ? AND id = ?");
    $stmt->bind_param("ss", $token, $userId);
    $stmt->execute();
    $stmt->close();

    return true;
  }
}


// Example Usage (Illustrative - Replace with your actual database setup)
//  -  This demonstrates how the class is used. It doesn't create a full application.
/*
$db = new mysqli("localhost", "username", "password", "database_name");
if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

$reset = new PasswordReset($db);

// Reset password for user with email 'test@example.com'
$resetToken = $reset->resetPassword('test@example.com');

if ($resetToken) {
  echo "Reset token generated: " . $resetToken . "<br>";
  // Send email with reset link.
} else {
  echo "Failed to generate reset token.";
}

// Verify the token (only to demonstrate - in a real app, you'd verify
// through the reset link)
if ($reset->verifyResetToken($resetToken)) {
    echo "<br>Token is valid.";
} else {
    echo "<br>Token is invalid.";
}

// Delete the token (after the user has reset their password)
$reset->deleteResetToken($resetToken);
*/
?>


<?php

// Assuming you have a database connection established and a 'users' table
// with a 'password' column and an 'email' column.

// Function to handle the forgot password request
function forgotPassword($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if user exists
  $user = getUserByEmail($email);
  if (!$user) {
    return "User not found.";
  }

  // 3. Generate a unique token
  $token = generateToken();

  // 4. Store the token and user ID in the database (temporary)
  // You'll want to consider secure storage and expiration times here.
  storeToken($user['id'], $token);

  // 5. Send the password reset link
  $resetLink = generateResetLink($user['email'], $token);
  
  //  Example:  Send email (replace with your email sending logic)
  sendResetPasswordEmail($user['email'], $resetLink);

  return "Password reset link sent to your email. Please check your inbox.";
}


// -------------------- Helper Functions (Implement these) --------------------

// Helper function to get user by email (replace with your database query)
function getUserByEmail($email) {
  // Replace with your database query
  // Example:
  // $db = new PDO('mysql:host=localhost;dbname=your_database');
  // $stmt = $db->prepare("SELECT * FROM users WHERE email = ?");
  // $stmt->execute([$email]);
  // $user = $stmt->fetch(PDO::FETCH_ASSOC);
  // return $user;
  //  For this example, let's just return a dummy user
  return ['id' => 1, 'email' => 'test@example.com'];
}

// Helper function to generate a unique token (e.g., using a random string)
function generateToken() {
    return bin2hex(random_bytes(32)); // More secure than a simple string
}

// Helper function to generate the reset password link
function generateResetLink($email, $token) {
    return "/reset_password?email=" . urlencode($email) . "&token=" . urlencode($token);
}


// Helper function to store the token in the database.
// This should use a secure method (e.g., hashing the token).
function storeToken($userId, $token) {
    // This is a placeholder. You'll need to implement a secure
    // method to store the token in the database.  Do NOT store plain text!
    // Example (using hashing -  DO NOT use this directly without proper salt and hashing):
    // $hashedToken = password_hash($token, PASSWORD_DEFAULT);
    //  Then you would update your database with the userId and $hashedToken.
    echo "Token stored (simulated)...  Remember to implement secure storage!";
}

// Helper function to send the reset password email (replace with your email sending logic)
function sendResetPasswordEmail($email, $resetLink) {
    // Implement your email sending logic here using a library like PHPMailer
    // or similar.  For example:
    // $subject = "Password Reset Link";
    // $body = "Click on this link to reset your password: " . $resetLink;
    // $headers = "From: your_email@example.com\r
";
    // mail($email, $subject, $body, $headers);
    echo "Email sent (simulated)...  Remember to implement actual email sending!";
}

// -------------------- Example Usage --------------------

// Example call:
$email = "test@example.com";
$result = forgotPassword($email);
echo $result . "
";

?>


<?php

// Database credentials - Replace with your actual credentials
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user requesting the reset.
 * @return bool True if a reset email was sent successfully, false otherwise.
 */
function forgotPassword($email)
{
    // 1. Validate Input (Important for security!)
    if (empty($email)) {
        error_log("Error: Email address cannot be empty."); //Log the error for debugging
        return false;
    }

    // Sanitize the email (to prevent SQL injection)
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);

    // 2. Check if the user exists
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERR_EXCEPTION); // Throw exceptions on errors

    try {
        $stmt = $pdo->prepare("SELECT id, email FROM users WHERE email = :email");
        $stmt->bindParam(':email', $email, PDO::PARAM_STR);
        $stmt->execute();

        $user = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$user) {
            error_log("User with email $email not found."); //Log the error for debugging
            return false;
        }
    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage()); // Log database errors
        return false;
    } finally {
        $pdo = null; // Close the database connection
    }

    // 3. Generate a Unique Token and Store it
    $token = binrandom_bytes(32); // Generate a secure random token (32 bytes)
    $token_string = bin2hex($token);

    try {
        // Prepare the update statement
        $stmt = $pdo->prepare("UPDATE users SET password_reset_token = :token, password_reset_token_expiry = :expiry  WHERE email = :email");
        $stmt->bindParam(':token', $token_string, PDO::PARAM_STR);
        $stmt->bindParam(':expiry', date('Y-m-d H:i:s', time() + 3600), PDO::PARAM_STR); // Token expires in 1 hour
        $stmt->bindParam(':email', $user['email'], PDO::PARAM_STR);

        $stmt->execute();

        // 4. Send the Password Reset Email (Implement this part)
        $resetLink = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $token_string;
        sendResetPasswordEmail($user['email'], $resetLink);

        return true;

    } catch (PDOException $e) {
        error_log("Database error during token creation/update: " . $e->getMessage()); // Log database errors
        return false;
    }
}



/**
 * Sends a password reset email to the specified email address.
 *
 * @param string $email The email address to send the email to.
 * @param string $resetLink The URL for the password reset page.
 */
function sendResetPasswordEmail($email, $resetLink)
{
    // Replace with your email sending logic (e.g., using PHPMailer or similar)
    $to = $email;
    $subject = 'Password Reset';
    $message = "To reset your password, please click on the following link: " . $resetLink;

    // Example using mail() -  This may not work reliably on all servers
    mail($to, $message, "From: your_email@example.com");

    // Consider using a more robust email library like PHPMailer.
}


// Example Usage (for testing - remove this from your production code)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $email = $_POST['email'];
    if (isset($email)) {
        if (forgotPassword($email)) {
            echo "Reset email sent to $email";
        } else {
            echo "Error: Could not send reset email.";
        }
    } else {
        echo "Error: Email not provided.";
    }
}
?>

<!-- HTML form for submission (reset_password.php or similar) -->
<form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Request Password Reset</button>
</form>


<?php

/**
 *  Forgot Password Function
 *
 *  This function allows a user to reset their password by sending a password reset link
 *  to their registered email address.
 */

/**
 * Forgot password function.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @param string $baseUrl The base URL for the reset link.  Typically your domain.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function forgot_password($email, $baseUrl) {
    // Validate email format
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format: " . $email); // Log the error
        return false;
    }

    // Get the reset token
    $reset_token = generate_reset_token();

    // Hash the token
    $hashed_token = hash('sha256', $reset_token); // Use a strong hashing algorithm

    // Prepare the data for the email
    $to = $email;
    $subject = 'Password Reset';
    $message = "Please click on the following link to reset your password:
" .
               "<a href='" . $baseUrl . "/reset?token=" . urlencode($reset_token) . "'>Reset Password</a>";
    $headers = "From: " . get_sender_email() . "\r
"; // Replace with your sender email

    // Send the email
    if (send_email($to, $subject, $message, $headers)) {
        // Store the token in the database (or whatever storage you use)
        store_reset_token($email, $hashed_token);
        return true;
    } else {
        error_log("Failed to send password reset email for " . $email); // Log the failure
        return false;
    }
}

/**
 * Generate a unique reset token.  This should be a random string.
 *
 * @return string The generated token.
 */
function generate_reset_token() {
    return bin2hex(random_bytes(32)); // Generates a 32-byte random string
}


/**
 * Store the reset token in the database (replace with your database logic)
 *
 * @param string $email The email address of the user.
 * @param string $hashed_token The hashed reset token.
 */
function store_reset_token($email, $hashed_token) {
    // This is a placeholder. Replace with your actual database logic.
    // Example:
    // $db = new DatabaseConnection(); // Assuming you have a DatabaseConnection class
    // $query = "INSERT INTO password_resets (email, hashed_token, created_at) VALUES ('" . $email . "', '" . $hashed_token . "', NOW())";
    // $db->query($query);
    //  You'd likely also include a timestamp to expire the token.
}


/**
 * Send an email.  This is a placeholder. Replace with your email sending logic.
 *
 * @param string $to The recipient's email address.
 * @param string $subject The email subject.
 * @param string $message The email body.
 * @param string $headers The email headers.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function send_email($to, $subject, $message, $headers) {
    // This is a placeholder.  Replace with your email sending implementation.
    // Example (using PHPMailer - you'll need to install and configure it):
    // require_once 'phpmailer/PHPMailerAutoload.php'; // Adjust path if necessary

    // $mail = new PHPMailer();
    // $mail->Mailer = "smtp";
    // $mail->SMTPDebug = 0; // Set to 1 to enable debugging
    // $mail->Host = get_smtp_host(); // Replace with your SMTP host
    // $mail->Port = get_smtp_port();    // Replace with your SMTP port
    // $mail->Username = get_smtp_username();
    // $mail->Password = get_smtp_password();
    // $mail->SetFrom(get_sender_email(), get_sender_email());
    // $mail->AddAddress($to, "");
    // $mail->Subject = $subject;
    // $mail->Body = $message;
    // $mail->AltBody = $message;

    // $result = $mail->send();

    //  Simplified placeholder return value
    return true;
}


/**
 * Get Sender Email (Replace with your actual sender email configuration)
 *
 * @return string The sender email address.
 */
function get_sender_email() {
  return "your_sender_email@example.com"; // Replace with your sender email
}

/**
 * Get SMTP Host (Replace with your SMTP server address)
 *
 * @return string The SMTP host address.
 */
function get_smtp_host() {
  return "smtp.example.com"; // Replace with your SMTP host
}

/**
 * Get SMTP Port (Replace with your SMTP port)
 *
 * @return int The SMTP port.
 */
function get_smtp_port() {
    return 587; // Common SMTP port for TLS
}

/**
 * Get SMTP Username (Replace with your SMTP username)
 *
 * @return string The SMTP username.
 */
function get_smtp_username() {
    return "your_smtp_username";
}

/**
 * Get SMTP Password (Replace with your SMTP password)
 *
 * @return string The SMTP password.
 */
function get_smtp_password() {
    return "your_smtp_password";
}


// --- Example Usage ---
// $email = "testuser@example.com";
// if (forgot_password($email, "yourdomain.com")) {
//     echo "Password reset email sent to " . $email . ". Please check their inbox.";
// } else {
//     echo "Failed to send password reset email.";
// }

?>


<?php

// **Important Security Notes:**
// * This is a basic example for demonstration purposes ONLY.
// * **DO NOT** use this directly in a production environment without implementing robust security measures.
// * Always use strong password hashing algorithms (like bcrypt or Argon2) and proper input validation and sanitization.
// * Consider implementing multi-factor authentication for enhanced security.
// * This example relies on storing usernames and (optionally) a 'reset token' in a database. You'll need a database setup and a way to manage user accounts.

// **Configuration (Adjust these as needed)**
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_password = 'your_db_password';

// --- Functions ---

/**
 * Resets a user's password.
 *
 * @param string $username The username of the user requesting a password reset.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $username) {
  // 1. Validate Username (Important!)
  if (empty($username)) {
    error_log("Error: Username cannot be empty.");
    return false;
  }


  // 2. Check if user exists
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  if ($conn->connect_error) {
    error_log("Database connection failed: " . $conn->connect_error);
    return false;
  }

  $query = "SELECT id, email FROM users WHERE username = '$username'"; // Adjusted for username
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    $user_id = $user['id'];
    $email = $user['email'];

    // 3. Generate a Unique Reset Token
    $reset_token = bin2hex(random_bytes(32)); // Secure random token generation

    // 4. Store Token in Database (associate it with the user)
    $insert_query = "INSERT INTO password_resets (user_id, token, expires_at) VALUES ($user_id, '$reset_token', NOW() + INTERVAL 1 HOUR)";
    if (!$conn->query($insert_query)) {
      error_log("Error inserting reset token: " . $conn->error);
      return false;
    }

    // 5. Send Password Reset Email (You'll need to implement this)
    // Example (replace with your email sending logic)
    $subject = "Password Reset Request";
    $message = "Click this link to reset your password: " . $_SERVER['REQUEST_SCHEME'] . "://yourdomain.com/reset_password?token=" . $reset_token;
    $headers = "From: your_email@example.com\r
";

    //In a real application, use a library or function to send the email
    //Example: mail($email, $subject, $message, $headers);


    // 6. Return True (Success)
    return true;

  } else {
    // User not found
    return false;
  }

  // Close connection
  $conn->close();
}



/**
 *  Example usage (for testing or demonstration)
 */
// Example: Reset password for user "testuser"
$result = forgot_password("testuser");

if ($result) {
  echo "Password reset request sent for testuser. Check their email!";
} else {
  echo "Password reset failed for testuser.  User may not exist or there was an error.";
}

?>


<?php

/**
 * Forgot Password Function
 *
 * This function generates a temporary password and sends an email to the user
 * with a link to reset their password.
 *
 * @param string $email The email address of the user.
 * @param string $reset_token A unique token to track the reset request.
 * @param string $website_url The URL of your website.
 * @param string $reset_password_expiration_hours The number of hours the password reset link should be valid for.  Defaults to 24.
 *
 * @return bool True if the email was sent successfully, false otherwise.
 */
function forgot_password(string $email, string $reset_token, string $website_url, int $reset_password_expiration_hours = 24) {
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided."); // Log for debugging
        return false;
    }

    // 2. Generate a temporary password (you'll want a better method in production)
    $temp_password = generate_temporary_password(8); //  Generates an 8-character random password.
    
    // 3. Create the reset password URL
    $reset_url = $website_url . "/reset_password.php?token=" . urlencode($reset_token);
    
    // 4.  Prepare the email message
    $subject = "Password Reset Request";
    $message = "You have requested to reset your password.

Please click the following link to reset your password:
" . $reset_url . "

This link will expire in " . $reset_password_expiration_hours . " hours." . "

Thank you!";
    
    // 5.  Send the email (using PHPMailer or similar)
    if (send_email($email, $subject, $message)) {
        // 6.  (Optional) Store the reset token and expiration date in your database
        //  (This step is crucial for security and preventing token reuse)
        //  Example:
        //  $db = new DatabaseConnection();
        //  $query = "INSERT INTO password_resets (email, token, expiration_date) VALUES ('$email', '$reset_token', NOW() + INTERVAL $reset_password_expiration_hours HOUR)";
        //  $db->query($query);
        
        return true;
    } else {
        error_log("Failed to send email for password reset."); // Log the error
        return false;
    }
}


/**
 * Generates a temporary password.
 *  This is a simplified example. Use a cryptographically secure random number generator
 *  in a production environment.
 *
 * @param int $length The length of the password.
 * @return string The generated password.
 */
function generate_temporary_password(int $length = 8) {
    $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    $password = '';
    $char_length = strlen($characters);
    for ($i = 0; $i < $length; $i++) {
        $char = $characters[rand(0, $char_length - 1)];
        $password .= $char;
    }
    return $password;
}

/**
 * Placeholder for sending emails. Replace with your email sending function.
 *
 * @param string $to
 * @param string $subject
 * @param string $body
 * @return bool
 */
function send_email(string $to, string $subject, string $body) {
    //  Replace this with your actual email sending logic (e.g., PHPMailer, SwiftMailer)
    // Example:
    //  $mail = new PHPMailer(true);
    //  $mail->addAddress($to);
    //  $mail->setSubject($subject);
    //  $mail->msgBody($body);
    //  $mail->send();
    
    // For demonstration purposes, we'll simulate success
    //  but you MUST implement your real email sending code.
    
    // Example:
    // if (true) { // Replace with actual email sending logic
    //     return true;
    // } else {
    //     return false;
    // }

    return true; // Placeholder for testing
}

// Example Usage (for testing - replace with actual user data and website URL)
// $user_email = "test@example.com";
// $reset_token = "xyz123";
// $website_url = "http://www.example.com";

// if (forgot_password($user_email, $reset_token, $website_url)) {
//     echo "Password reset email sent successfully!";
// } else {
//     echo "Failed to send password reset email.";
// }

?>


<?php

/**
 * Forgets a user's password.
 *
 * This function sends a password reset link to the user's registered email.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function forgot_password(string $email): bool
{
  // 1. Validate email format
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email address provided: " . $email); // Log the error
    return false;
  }

  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32));

  // 3. Store the token in the database (replace with your database connection)
  //   This is a simplified example - you'll want to use prepared statements
  //   to prevent SQL injection.
  $db_connection = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password'); // Replace with your credentials
  try {
    $stmt = $db_connection->prepare("INSERT INTO password_resets (user_email, reset_token, created_at) VALUES (?, ?, NOW())");
    $stmt->execute([$email, $token]);
  } catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    return false;
  }


  // 4.  Send the password reset email
  $reset_link = "http://yourdomain.com/reset_password?token=" . $token; // Replace with your domain

  $to = $email;
  $subject = 'Password Reset';
  $message = "Please click the following link to reset your password: " . $reset_link;
  $headers = "From: your_email@example.com" . "\r
";

  if (mail($to, $subject, $message, $headers)) {
    return true;
  } else {
    error_log("Failed to send email."); // Log the failure
    return false;
  }
}


// Example usage (demonstration only - don't use in production without proper validation and sanitization)
// In a real application, this would come from a user form submission.
$email = 'test@example.com';

if (forgot_password($email)) {
  echo "Password reset email sent to " . $email . "
";
} else {
  echo "Failed to send password reset email.
";
}

?>


<?php

// Database connection details (Replace with your actual credentials)
$dbHost = 'localhost';
$dbName = 'your_database_name';
$dbUser = 'your_db_user';
$dbPassword = 'your_db_password';

// Function to handle forgot password request
function forgotPassword($email)
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email format.";
    }

    // 2. Generate a unique token
    $token = bin2hex(random_bytes(32)); // Creates a secure random string

    // 3.  Store token and expiration in database.  Important for security!
    try {
        // Prepare the SQL query
        $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName;charset=utf8", $dbUser, $dbPassword);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

        // SQL Query to insert the token and email into the database
        $sql = "INSERT INTO forgot_password_tokens (email, token, expiry_timestamp)
                 VALUES (:email, :token, :expiry_timestamp)";

        $stmt = $pdo->prepare($sql);
        $stmt->bindParam(':email', $email);
        $stmt->bindParam(':token', $token);
        $stmt->bindParam(':expiry_timestamp', time() + 3600);  // Token expires in 1 hour (adjust as needed)
        $stmt->execute();
    } catch (PDOException $e) {
        // Handle database errors
        return "Error generating token. Please try again.";
    }


    // 4.  Send Email (Replace with your email sending logic)
    $subject = "Password Reset Request";
    $message = "Click this link to reset your password: " . $_SERVER['REQUEST_URI'] . "?token=" . $token; // Construct the reset link
    $headers = "From: your_email@example.com"; // Replace with your email address

    // This is a placeholder.  You'll need to implement your email sending code here.
    // Example (using a simple email function - replace with a proper email library)
    // sendEmail($email, $subject, $message, $headers);

    return "Password reset link sent to your email. Please check your inbox.";
}

// Example Usage (for testing - remove this section in a real application)
// You'd typically receive this email address from a form submission.
$emailAddress = "test@example.com"; //  Replace with an actual email address to test
$result = forgotPassword($emailAddress);
echo $result;


// ----------------------------------------------------------------------------
//  Database Table (forgot_password_tokens) - Create this table in your database
// ----------------------------------------------------------------------------
// CREATE TABLE forgot_password_tokens (
//     id INT AUTO_INCREMENT PRIMARY KEY,
//     email VARCHAR(255) NOT NULL,
//     token VARCHAR(255) NOT NULL,
//     expiry_timestamp INT UNSIGNED NOT NULL  -- Timestamp when token expires
// );
//
//  You'll also likely want to add an index on the email column for faster lookups
//  CREATE INDEX idx_email ON forgot_password_tokens (email);

?>


<?php

// IMPORTANT:  This is a simplified example for demonstration purposes.
// In a real-world application, you should:
// 1. Store passwords securely (hashed, not plain text).
// 2. Use a robust session management system.
// 3. Implement proper error handling and validation.
// 4. Consider using a dedicated password reset library.

// Database connection details (replace with your actual details)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_pass = 'your_database_password';

// Email setup (replace with your email server details)
$email_to = 'user@example.com'; // Recipient email
$email_from = 'noreply@example.com'; // Sender email
$email_subject = 'Password Reset';

// Function to send email
function sendEmail($to, $from, $subject, $message) {
    // Placeholder - replace with your actual email sending logic
    // This example simply prints the email content.

    // In a real application, use a library like PHPMailer or SwiftMailer
    // to handle email sending securely and reliably.
    echo "Sending email to: " . $to . "
";
    echo "Subject: " . $subject . "
";
    echo "Message: " . $message . "
";
}

// Function to handle password reset request
function forgotPassword($username) {
    // 1. Retrieve user data from database
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $result = $conn->query("SELECT id, email FROM users WHERE username = '$username'");

    if ($result->num_rows > 0) {
        $user = $result->fetch_assoc();
        $userId = $user['id'];
        $userEmail = $user['email'];

        // 2. Generate a unique, time-based token
        $token = bin2hex(random_bytes(32));  // More secure token generation

        // 3. Store the token and user ID in the database
        $conn->query("UPDATE users SET reset_token = '$token' WHERE username = '$username'");

        // 4. Build the email content
        $message = "Click on the following link to reset your password: ";
        $resetLink = "http://yourwebsite.com/reset_password.php?token=$token"; // Replace with your URL
        $message .= "<br><a href='$resetLink'>" . $resetLink . "</a>";

        // 5. Send the email
        sendEmail($userEmail, $email_from, $email_subject, $message);

        // 6.  Success! (Optional: Redirect to a confirmation page)
        return true;
    } else {
        // User not found
        return false;
    }

    $conn->close();
}



// --- Example Usage (This part would be part of your form) ---

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $username = $_POST["username"];

    if (!empty($username)) {
        if (forgotPassword($username)) {
            echo "Password reset link has been sent to your email.";
        } else {
            echo "User not found or error occurred during password reset.";
        }
    } else {
        echo "Please enter your username.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// This is a simplified example and should be used with caution.
// In a production environment, you MUST implement proper security measures
// like rate limiting, CAPTCHAs, and storing password reset tokens securely.

// Database connection details - Replace with your actual credentials
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_password = 'your_db_password';

// Function to reset password
function forgotPassword($email, $token, $new_password) {
  // 1. Verify the Token (Very Important - Security!)
  //   - This is a placeholder.  You MUST replace this with a robust verification
  //     mechanism.  Storing tokens in a database and checking against them is the
//     best practice.
  //   - For this example, we're just checking for a simple 'valid' string.  **DO NOT DO THIS IN PRODUCTION!**

  if ($token !== 'valid_token') {
    return 'Invalid token.';
  }


  // 2.  Database interaction - Update the user's password
  try {
    // Connect to the database
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable error handling

    // Prepare the SQL query
    $sql = "UPDATE users SET password = :password, password_reset_token = NULL WHERE email = :email";

    // Prepare the statement
    $stmt = $pdo->prepare($sql);

    // Bind parameters
    $stmt->bindParam(':password', $new_password);
    $stmt->bindParam(':email', $email);

    // Execute the query
    $stmt->execute();

    // Success!
    return 'Password reset successful.  Check your email to verify.';

  } catch (PDOException $e) {
    // Handle database errors
    return 'Error resetting password: ' . $e->getMessage();
  } finally {
    // Close the database connection (good practice)
    $pdo = null;
  }
}


// Example Usage: (This would be part of your form submission handling)

// 1. Get Email and New Password from the form
$email = $_POST['email'];
$new_password = $_POST['new_password'];

// 2. Generate a Token (Ideally, use a secure random string generator)
$token = bin2hex(random_bytes(32)); // Generates a 64-character hex string.  Better than a simple counter.

// 3.  Call the forgotPassword function
$result = forgotPassword($email, $token, $new_password);

// 4.  Display the result
echo "<p>" . $result . "</p>";

?>


<?php

// Database connection details (replace with your actual details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// Function to handle password reset
function forgot_password($email)
{
    // 1. Check if the email exists in the database
    $conn = new mysqli($host, $username, $password, $dbname);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $sql = "SELECT id, email FROM users WHERE email = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $email); // "s" indicates a string
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        $conn->close();
        return false; // Email not found
    }

    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $userEmail = $user['email'];
    $stmt->close();

    // 2. Generate a unique token
    $token = bin2hex(random_bytes(32));

    // 3. Store the token and user ID in the database
    $sql = "UPDATE users SET reset_token = ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ss", $token, $userId);
    $stmt->execute();

    if (!$stmt->affected_rows > 0) {
        $stmt->close();
        $conn->close();
        return false; // Failed to store the token
    }

    // 4.  Send an email with the reset link
    $to = $email;
    $subject = "Password Reset Link";
    $message = "Click this link to reset your password: " . "<a href='" . $_SERVER["PHP_SELF"] . "?reset=" . urlencode($token) . "'>Reset Password</a>";
    $headers = "From: your_email@example.com"; // Replace with your email address

    mail($to, $subject, $message, $headers);

    // 5. Close the connection
    $conn->close();

    return true; // Password reset link sent successfully
}


// Example Usage (This should be in a separate file or part of a form)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    if (empty($email)) {
        echo "Error: Please enter your email address.";
    } else {
        if (forgot_password($email)) {
            echo "Password reset link has been sent to your email address.";
        } else {
            echo "Error: Failed to send password reset link. Please try again.";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h2>Forgot Password</h2>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established and a user table
// with an 'email' field.  This is a simplified example.
// In a real application, you'd use prepared statements to prevent SQL injection.

function forgot_password($email, $token) {
  // 1. Validate Email and Token
  if (empty($email) || empty($token)) {
    return "Invalid email or token.";
  }

  // 2. Check if the user exists and has a valid password reset token
  //    (Consider database query here, e.g., using mysqli or PDO)

  // Dummy user data for demonstration purposes
  $users = [
    ['id' => 1, 'email' => 'test@example.com', 'password' => 'hashed_password'],
    ['id' => 2, 'email' => 'another@example.com', 'password' => 'another_hashed_password']
  ];

  $user = null;
  foreach ($users as $u) {
    if ($u['email'] === $email) {
      $user = $u;
      break;
    }
  }

  if ($user === null) {
    return "User not found.";
  }

  // 3. Verify the token (Important security step - replace with your token validation logic)
  // In a real application, you'd compare the token against a hashed value
  // stored in the database, NOT against a plain text token.
  if ($token !== 'YOUR_SECRET_TOKEN') { //  Replace with your actual token
    return "Invalid token.";
  }

  // 4.  Reset the password (In a real app, this would also hash the new password)
  //    For this example, we'll just return a message indicating the password has been reset.
  return "Password reset link sent to $email";

  // In a real application, you'd update the database to store a 'reset_token'
  // and an expiration timestamp.  You'd also hash the new password.
}



// Example Usage (to demonstrate the function)
//  Important:  Don't use this example directly in a production environment!

// This simulates a user requesting a password reset.
$email = 'test@example.com';
$token = 'YOUR_SECRET_TOKEN';  // Replace with a generated or secure token
$reset_message = forgot_password($email, $token);

echo $reset_message . "<br>";

?>


<?php

// Assuming you've established a PDO connection called $pdo

function forgot_password($email, $token) {
  $stmt = $pdo->prepare("SELECT * FROM users WHERE email = :email");
  $stmt->bindParam(':email', $email, PDO::PARAM_STR);
  $stmt->execute();

  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if ($user === null) {
    return "User not found.";
  }

  // ... (Rest of the forgot_password function as before) ...
}


<?php

/**
 * Function to handle password reset requests.
 *
 * This function generates a unique token, sends an email with a reset link,
 * and updates the user's password if the token is valid.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @param string $secret_key  A random secret key to prevent abuse.  Ideally this should be unique per user.
 * @return bool True if the password reset was initiated successfully, false otherwise.
 */
function forgot_password(string $email, string $secret_key) {
    // 1. Check if the email exists
    $user = get_user_by_email($email);  // Implement this function (see example below)

    if (!$user) {
        return false; // User not found
    }

    // 2. Generate a unique token and store it
    $token = generate_unique_token(); // Implement this function (see example below)

    // Store the token in the database for the user.
    //  Use a secure method to store the token –  e.g., using hashing.
    //  This example assumes a simple string storage for clarity.
    //  **Important:** In a production environment, *always* hash the token
    //   before storing it in the database.
    // Example:
    // $user->reset_token = password_hash($token, PASSWORD_DEFAULT);
    // $user->save();


    // 3.  Create the reset link
    $reset_link = '/reset-password?token=' . urlencode($token);

    // 4. Send the reset email
    if (!send_password_reset_email($email, $reset_link)) {
        return false; // Email sending failed
    }

    return true; // Password reset initiated successfully
}


/**
 * Placeholder function to get a user by their email.
 * Replace this with your actual database query.
 *
 * @param string $email The email address of the user.
 * @return object|null The user object if found, null otherwise.
 */
function get_user_by_email(string $email): ?object {
    // **Replace this with your database query.**
    // This is just a placeholder.

    // Example using a dummy database (in a real application, use PDO or your preferred database library)
    $users = [
        (object)['id' => 1, 'email' => 'test@example.com', 'password' => 'hashed_password'],
        (object)['id' => 2, 'email' => 'another@example.com', 'password' => 'hashed_password2']
    ];

    foreach ($users as $user) {
        if ($user->email === $email) {
            return $user;
        }
    }
    return null;
}


/**
 * Placeholder function to generate a unique token.
 *  Use a cryptographically secure random number generator.
 *
 * @return string A unique token.
 */
function generate_unique_token(): string {
    return bin2hex(random_bytes(32)); //  Use random_bytes for security
}


/**
 * Placeholder function to send a password reset email.
 *
 * @param string $email The email address of the user.
 * @param string $reset_link The password reset link.
 */
function send_password_reset_email(string $email, string $reset_link): bool {
    //  Implement your email sending logic here.
    //  This is just a placeholder.

    // Example:
    //  $subject = "Password Reset";
    //  $body = "Click this link to reset your password: " . $reset_link;
    //  mail($email, $subject, $body);

    //  **Important:**  In a real application, use a reliable email sending service
    //   (e.g., SendGrid, Mailgun, Amazon SES) to ensure deliverability.

    return true; // Assume email sending was successful (replace with actual check)
}



// Example Usage (Simulated)
$email = 'test@example.com';
$secret_key = generate_unique_token(); // Generate a random secret key.
$success = forgot_password($email, $secret_key);

if ($success) {
    echo "Password reset email sent to $email.  Check your inbox!";
} else {
    echo "Failed to initiate password reset.";
}


?>


<?php

// Assuming you have a database connection established and a 'users' table
// with a 'email' column.  This is a basic example and should be
// adapted to your specific database setup and security best practices.

// Function to handle password reset requests
function forgot_password($email) {
    // 1. Check if the email exists
    $user = getUserByEmail($email); //  Call a function to retrieve the user object

    if (!$user) {
        return "Email not found.";
    }

    // 2. Generate a unique token (for security)
    $token = generateUniqueToken();

    // 3. Store the token in the database associated with the user's email.
    // IMPORTANT:  Hash the token *before* storing it in the database.
    storeToken($user->id, $token);


    // 4.  Send an email with a link containing the token
    $subject = "Password Reset Request";
    $to = $email;
    $headers = "From: your_email@example.com" . "\r
" .
              "Reply-To: your_email@example.com";
    $message = "Click on the following link to reset your password: " . $_SERVER['REQUEST_SCHEME'] . "://yourwebsite.com/reset_password?token=" . urlencode($token);  // Use urlencode
    mail($to, $subject, $message, $headers);


    return "Password reset email has been sent. Check your inbox.";
}

// Dummy functions - Replace with your actual database queries
// Example database interaction

class User {
    public $id;
    public $email;

    public function __construct($id, $email) {
        $this->id = $id;
        $this->email = $email;
    }
}


function getUserByEmail($email) {
    // Replace this with your actual database query
    // Example using a dummy array (replace with your DB query)
    $users = [
        ['id' => 1, 'email' => 'test@example.com'],
        ['id' => 2, 'email' => 'another@example.com'],
    ];

    foreach ($users as $user) {
        if ($user['email'] === $email) {
            return new User($user['id'], $user['email']);
        }
    }
    return null;
}


function storeToken($userId, $token) {
    // Replace this with your actual database query to store the token
    // Example using a dummy database - replace with your actual DB interaction
    // This is just a placeholder. You'll need to adapt this.

    // In a real application, you'd insert this into a 'tokens' table.
    // The 'tokens' table would likely have columns like:
    // - user_id (foreign key referencing the 'users' table)
    // - token
    // - expiry_date (to ensure the token expires)
    // You would probably also include a column for 'created_at'
    // and 'updated_at' for tracking.

    // This is for demonstration only.
    echo "Token stored in database (simulated)." . PHP_EOL;
}

function generateUniqueToken() {
    return bin2hex(random_bytes(32));  // Generate a cryptographically secure token
}


// Example Usage
//  Simulate a password reset request
$email = 'test@example.com'; // Replace with the user's email

$result = forgot_password($email);
echo $result . PHP_EOL;

?>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database_name";

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get the email from the form
  $email = $_POST["email"];

  // Validate the email format (basic validation - you might want to add more robust validation)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error = "Invalid email address.";
  } else {
    // Check if the user exists in the database
    $sql = "SELECT id, password, email FROM users WHERE email = '$email'";
    $result = mysqli_query($host, $sql);

    if ($result) {
      if (mysqli_num_rows($result) == 1) {
        // User found, generate a password reset token
        $resetToken = bin2hex(random_bytes(32)); // Generate a random token

        // Store the token in the database for the user
        $sql = "UPDATE users SET reset_token = '$resetToken' WHERE email = '$email'";
        mysqli_query($host, $sql);

        // Send the password reset email (Implementation of email sending is outside of this example)
        $to = $email;
        $subject = "Password Reset Request";
        $message = "Click on the following link to reset your password: " . $_SERVER["PHP_SELF"] . "?reset_token=$resetToken";
        $headers = "From: your_email@example.com"; // Replace with your email address

        mail($to, $message, $headers);

        $error = "Password reset email sent to $email";
      } else {
        $error = "User not found.";
      }
    } else {
      $error = "Error querying the database.";
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h2>Forgot Password</h2>

  <?php if (isset($error)) {
    echo "<p style='color: red;'>$error</p>";
  }
  ?>

  <form method="post" action="<?php echo $_SERVER["PHP_SELF"]; ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email Address" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

/**
 * Forgot Password Function
 *
 * This function generates a random token and sends a password reset email
 * to the user's email address.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @param string $baseUrl The base URL of your application (e.g., 'https://example.com').  Crucial for generating the reset link.
 * @param string $fromEmail The email address to send the reset email from.
 * @param string $resetLinkExpiryHours The number of hours the reset link will be valid for (default: 1).
 *
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $baseUrl, string $fromEmail, string $resetLinkExpiryHours = 1)
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided: " . $email); // Log for debugging
        return false;
    }

    // 2. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // More secure than simple random_int
    $expiry = time() + ($resetLinkExpiryHours * 3600);  // Token expires after specified hours

    // 3.  Store Token and User ID in Database (Replace with your actual database logic)
    // In a real application, you'd insert this into a database table.
    // This example uses a simple array for demonstration purposes only.
    $user = get_user_by_email($email); // Replace with your user retrieval function
    if (!$user) {
        error_log("User not found for email: " . $email);
        return false;
    }

    //  Example: Save to a database table called 'password_resets'
    //  CREATE TABLE password_resets (
    //      id INT AUTO_INCREMENT PRIMARY KEY,
    //      user_id INT NOT NULL,
    //      token VARCHAR(255) NOT NULL UNIQUE,
    //      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    //  );

    //  In a real application, you'd insert the $token, $user_id, and $expiry into the database.

    // 4.  Build the Reset Link
    $resetLink = $baseUrl . "/reset_password?token=" . urlencode($token) . "&expiry=" . urlencode($expiry);

    // 5. Send the Password Reset Email
    $subject = "Password Reset";
    $message = "To reset your password, please click the following link: " . $resetLink;
    $headers = "From: " . $fromEmail . "\r
";
    $headers .= "Reply-To: " . $fromEmail . "\r
";

    if (mail($email, $subject, $message, $headers)) {
        // 6.  Success!
        return true;
    } else {
        // 7.  Error Sending Email
        error_log("Failed to send password reset email to " . $email);
        return false;
    }
}


// -------------------  Example Usage (Illustrative - Adapt to your application) -------------------

// IMPORTANT:  Replace these placeholders with your actual settings.
$baseUrl = 'https://example.com/reset_password';
$fromEmail = 'admin@example.com';

// Example: Attempt to reset password for user with email 'testuser@example.com'
$email = 'testuser@example.com';
$success = forgotPassword($email, $baseUrl, $fromEmail);

if ($success) {
    echo "Password reset email has been sent to " . $email;
} else {
    echo "Failed to generate password reset link.";
}


// -------------------  Helper Function (Placeholder - Implement your User Retrieval) -------------------
/**
 * Placeholder function to retrieve a user by email.
 * Replace this with your actual user retrieval logic.
 *
 * @param string $email The email address of the user.
 * @return array|null  The user data as an array, or null if the user is not found.
 */
function get_user_by_email(string $email): ?array {
    // Replace this with your actual database query.
    // This is just a placeholder for demonstration.

    // Example:
    // $user = [];
    // if ($email == 'testuser@example.com') {
    //     $user = ['id' => 1, 'email' => 'testuser@example.com'];
    // }
    return null;  // Or return an empty array if that's what your application expects
}


?>


<?php

// Important:  This is a basic example for demonstration.
//  In a real-world application, you should NEVER directly expose
//  your database credentials or sensitive information like passwords.
//  Use environment variables and proper security measures.

// 1. Database Connection (Example - Replace with your actual database details)
$host = 'localhost';
$username = 'your_db_username';
$password = 'your_db_password';
$database = 'your_db_name';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$database", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable error handling
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}

// 2. Function to Reset Password
function forgotPassword($email, $newPassword) {
    global $pdo; // Access the PDO connection

    // Hash the new password (IMPORTANT for security!)
    $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);

    // Prepare the SQL query
    $stmt = $pdo->prepare("UPDATE users SET password = :password WHERE email = :email");

    // Bind parameters (prevent SQL injection)
    $stmt->bindParam(':password', $hashedPassword);
    $stmt->bindParam(':email', $email);

    // Execute the query
    if ($stmt->execute()) {
        return true; // Password reset successful
    } else {
        return false; // Password reset failed
    }
}


// 3. Example Usage (Simulated Form Handling - Adapt to your form)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $newPassword = $_POST["new_password"];

    // Validate email format (basic check - enhance for production)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        echo "Invalid email address.";
    } else {
        if (forgotPassword($email, $newPassword)) {
            echo "Password reset email sent. Please check your email.";
        } else {
            echo "Failed to reset password. Please try again.";
        }
    }
}

?>


<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required><br><br>

        <label for="new_password">New Password:</label>
        <input type="password" id="new_password" name="new_password" required><br><br>

        <input type="submit" value="Reset Password">
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established and a user table
// with an 'email' field.  This is a basic example, adjust for your setup.

// --- Configuration ---
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_password = 'your_db_password';
$table_name = 'users';  // Replace with your user table name

// --- Function: forgot_password() ---
function forgot_password($email)
{
  // 1. Check if the email exists
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  if ($conn->connect_error) {
    // Handle connection error (e.g., log it, display an error message to the user)
    error_log("Database connection failed: " . $conn->connect_error);
    return "Error connecting to the database.";
  }

  $sql = "SELECT id, password, email FROM $table_name WHERE email = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("s", $email); // 's' indicates a string parameter
  $stmt->execute();

  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    $stmt->close();
    $conn->close();
    return "Email address not found.";
  } else {
    $user = $result->fetch_assoc();
    $id = $user['id'];
    $hashed_password = $user['password']; //  Store password as hashed in your database
    $new_password = generate_random_password(); // Function to generate a random password
    $conn->query("UPDATE $table_name SET password = ? WHERE id = ?", $new_password, $id);
    $stmt->close();
    $conn->close();

    // Send password reset email (implement this part)
    send_password_reset_email($user['email'], $new_password);

    return "Password reset email sent to $email";
  }
}

// --- Helper Functions (Implement these) ---

// 1. generate_random_password()
function generate_random_password() {
  // Implement a function here to generate a secure random password.
  // This is a VERY basic example - DON'T USE THIS IN PRODUCTION.
  return 'password123'; // Placeholder - REPLACE WITH A REAL RANDOM PASSWORD GENERATOR
}

// 2. send_password_reset_email($email, $new_password)
function send_password_reset_email($email, $new_password)
{
    // Implement your email sending logic here.
    // This is a placeholder - replace with your email sending functionality.
    // Use a library like PHPMailer for proper email sending.

    // Example (replace with actual email sending code):
    $to = $email;
    $subject = 'Password Reset';
    $message = "To reset your password, please click on this link: " . base64_encode("https://yourwebsite.com/reset_password.php?token=YOUR_TOKEN") . "

Regards, Your Website";
    $headers = "From: yourwebsite@example.com";

    mail($to, $message, $headers);

    echo "Password reset email sent to $email"; // For testing
}

// --- Example Usage (for testing) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $result = forgot_password($email);
  echo "<p>" . $result . "</p>";
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Database connection details (replace with your actual values)
$dbHost = "localhost";
$dbName = "your_database_name";
$dbUser = "your_username";
$dbPass = "your_password";

// Function to handle the forgot password flow
function forgotPassword($email) {
    // 1. Check if the email exists in the database
    $conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $sql = "SELECT id, email FROM users WHERE email = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $email); // "s" indicates a string parameter
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        // Email not found
        $stmt->close();
        $conn->close();
        return false;
    } else {
        // Email found, generate a token and send an email
        $token = bin2hex(random_bytes(32)); // Generate a random token
        $user_id = $result->fetch_assoc()['id'];

        // Store the token in the database
        $sql_insert = "INSERT INTO password_tokens (user_id, token, expires_at) VALUES (?, ?, NOW())";
        $stmt_insert = $conn->prepare($sql_insert);
        $stmt_insert->bind_param("is", $user_id, $token);
        $stmt_insert->execute();

        $stmt_insert->close();

        // Send the password reset email
        $to = $email;
        $subject = 'Password Reset';
        $message = "Please click the following link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'>" . $_SERVER['PHP_SELF'] . "?reset=$token</a>"; // VERY IMPORTANT - use $_SERVER['PHP_SELF']
        $headers = "From: your_email@example.com"; // Replace with your email address

        mail($to, $message, $headers);

        // Close the database connection
        $stmt->close();
        $conn->close();

        return true;
    }
}

// Example Usage (This would likely come from a form submission)
// $email = $_POST['email'];  // Get email from a form
// if (isset($email) && !empty($email)) {
//    if (forgotPassword($email)) {
//        echo "Password reset email sent to " . $email;
//    } else {
//        echo "Email not found or password reset failed.";
//    }
// }

?>


<?php

// This is a simplified example and should be adapted for production environments.
// It's crucial to implement proper security measures like rate limiting,
// hashing passwords, and using secure communication channels (HTTPS).

// 1. Database Connection (Replace with your actual credentials)
$dbHost = 'localhost';
$dbName = 'your_database_name';
$dbUser = 'your_username';
$dbPassword = 'your_password';

// 2. Function to Reset Password
function forgotPassword($email, $newPassword) {
    // 1. Check if the email exists
    $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $stmt = $conn->prepare("SELECT id FROM users WHERE email = ?");
    $stmt->bind_param("s", $email);  // "s" indicates a string parameter
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        return false; // Email not found
    }

    // 2. Hash the new password (VERY IMPORTANT)
    $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

    // 3. Update the user's password
    $stmt = $conn->prepare("UPDATE users SET password = ? WHERE email = ?");
    $stmt->bind_param("ss", $hashedNewPassword, $email);  // "ss" indicates two string parameters

    if ($stmt->execute()) {
        $stmt->close();
        return true; // Password reset successful
    } else {
        $error = $stmt->error;
        $stmt->close();
        return false; // Password reset failed
    }
}


// 3. Example Usage (FOR DEMONSTRATION ONLY - DON'T USE IN PRODUCTION)
//  This demonstrates how you would call the function.
//  In a real application, this would come from a form submission.

// Simulate a request (Replace with actual form data)
$emailToReset = "testuser@example.com";  // Replace with the email to reset
$newPassword = "NewSecurePassword123";  // Replace with the new password

// Call the function
if (forgotPassword($emailToReset, $newPassword)) {
    echo "Password reset successful.  Please check your email.";
} else {
    echo "Password reset failed.  Please try again or contact support.";
}

// 4.  Important Security Considerations and Production Best Practices:

// * **HTTPS:** ALWAYS use HTTPS to encrypt communication between the user's browser and your server,
//   protecting the password during transmission.
// * **Password Hashing:** NEVER store passwords in plain text.  Use a strong password hashing algorithm
//   like `password_hash()` with `PASSWORD_DEFAULT`.  This generates a one-way hash, making it impossible
//   to recover the original password even if the database is compromised.
// * **Rate Limiting:** Implement rate limiting to prevent brute-force attacks.  Limit the number of password reset requests
//   from a single IP address or user account within a specific timeframe.
// * **Email Verification:**  Send an email to the user containing a unique, time-limited reset link.  This link should
//   be cryptographically signed to ensure its authenticity.  The user should then be prompted to enter the
//   new password on the secure reset page.  This prevents attackers from simply changing the password
//   after receiving the reset link.
// * **Error Handling and Logging:**  Implement robust error handling and logging to track password reset attempts
//   and identify potential security issues.
// * **Two-Factor Authentication (2FA):**  Consider implementing 2FA for added security.
// * **Input Validation and Sanitization:** Validate and sanitize all user input to prevent SQL injection attacks.
// * **Session Management:** Use secure session management to prevent session hijacking.
// * **Regular Security Audits:** Conduct regular security audits and penetration testing to identify and address vulnerabilities.

?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique, time-based token to allow users to reset
 * their password. It sends an email to the user containing a link with
 * this token, which they can use to set a new password.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @param string $baseUrl The base URL of your website (e.g., 'http://example.com').
 *                         This is needed to generate the reset link.
 *
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $baseUrl) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email format provided.");  // Log for debugging
    return false;
  }

  // 2. Generate a Unique Token
  $token = bin2hex(random_bytes(32)); // Generate a secure random token

  // 3. Store Token in Database (Replace with your database connection)
  // This is a placeholder - you must adapt to your database schema
  //  For demonstration, we'll use an array.  **DO NOT USE THIS IN PRODUCTION.**

  // In a real application, you'd use a database query to insert the token
  // associated with the user's email.
  $tokens = $_SESSION['reset_tokens'] ?? []; //Use session for demo
  $tokens[$email] = $token; //Store in session.  **FOR DEMO ONLY - NOT PRODUCTION READY**
  $_SESSION['reset_tokens'] = $tokens;



  // 4. Construct Reset Link
  $resetLink = $baseUrl . "/reset-password?token=" . urlencode($token);

  // 5. Send Email (Replace with your email sending logic)
  $to = $email;
  $subject = 'Password Reset';
  $message = "Please click the following link to reset your password: " . $resetLink;
  $headers = "From: " . "Your Website <noreply@yourwebsite.com>";

  //  Send the email (Replace with your email sending function)
  if (mail($to, $message, $headers)) {
    return true;
  } else {
    error_log("Failed to send password reset email.");  // Log for debugging
    return false;
  }
}


// Example Usage (For demonstration - this part is not part of the function)
// This is illustrative only and should not be executed directly
// in a production environment as it relies on session data
// that is not persistent.

// $baseUrl = 'http://localhost/your-website/'; // Replace with your website URL
// $email = 'testuser@example.com';

// if (forgotPassword($email, $baseUrl)) {
//   echo "Password reset email sent to " . $email . ". Check their inbox.";
// } else {
//   echo "Failed to send password reset email.";
// }


?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique, time-based token and sends an email
 * containing a link to reset the password.
 *
 * @param string $email The email address of the user to reset the password for.
 * @param string $token A unique token to verify the request. (Optional, used for security)
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email, string $token = '') {
  // 1. Check if the email exists in the database
  $user = get_user_by_email($email);  // Implement this function - See Example Below
  if (!$user) {
    return false; // User does not exist
  }

  // 2. Generate a unique token
  $token = generate_unique_token(); // Implement this function - See Example Below

  // 3. Store the token in the database, associated with the user's email
  save_token_to_database($token, $email); // Implement this function - See Example Below


  // 4. Build the password reset link
  $reset_link = "/reset_password?token=" . urlencode($token) . "&email=" . urlencode($email);

  // 5. Send the password reset email
  $subject = "Password Reset Request";
  $message = "Please click the following link to reset your password: " . $reset_link;

  $headers = "From: Your Website <noreply@yourwebsite.com>";  // Replace with your actual email address

  $result = send_email($email, $subject, $message, $headers); // Implement this function - See Example Below
  if ($result === true) { // Assuming send_email returns true on success
    return true;
  } else {
    // Handle email sending failure (log, display error, etc.)
    error_log("Failed to send password reset email for " . $email);
    return false;
  }
}


// ------------------------------------------------------------------
//  Placeholder functions - You *MUST* implement these!
// ------------------------------------------------------------------

/**
 * Retrieves a user from the database based on their email address.
 *
 * @param string $email The email address to search for.
 * @return object|null User object if found, null otherwise.
 */
function get_user_by_email(string $email): ?object {
  // **IMPORTANT:** Replace this with your actual database query.
  // This is just a placeholder.
  // Example using mysqli:
  // $conn = mysqli_connect("your_db_host", "your_db_user", "your_db_password", "your_db_name");
  // if (!$conn) {
  //   die("Connection failed: " . mysqli_connect_error());
  // }

  // $sql = "SELECT * FROM users WHERE email = '$email'";
  // $result = mysqli_query($conn, $sql);

  // if (mysqli_num_rows($result) > 0) {
  //   $row = mysqli_fetch_assoc($result);
  //   return $row;
  // } else {
  //   return null;
  // }

  // **Dummy User Object** - Remove this when integrating with your database
  $user = (object) [
    'id' => 1,
    'email' => 'test@example.com',
    'password' => 'hashed_password'
  ];
  return $user;
}


/**
 * Generates a unique, time-based token.
 *
 * @return string A unique token.
 */
function generate_unique_token(): string {
  return bin2hex(random_bytes(32)); // More secure than generating a random string
}


/**
 * Saves the token to the database, associated with the user's email.
 *
 * @param string $token The token to save.
 * @param string $email The email address to associate with the token.
 * @return void
 */
function save_token_to_database(string $token, string $email) {
  // **IMPORTANT:** Implement your database logic here.
  // Example using mysqli:
  // $conn = mysqli_connect("your_db_host", "your_db_user", "your_db_password", "your_db_name");
  // if (!$conn) {
  //   die("Connection failed: " . mysqli_connect_error());
  // }

  // $sql = "INSERT INTO tokens (email, token, expiry_date) VALUES ('$email', '$token', NOW())";
  // if (mysqli_query($conn, $sql)) {
  //   //  Success
  // } else {
  //   // Handle error
  // }

  // **Dummy Database Logic** - Remove this when integrating with your database
  //  This just stores the token in a variable to demonstrate functionality
  $_SESSION['reset_token'] = $token;
  $_SESSION['reset_expiry'] = date('Y-m-d H:i:s', time() + 3600); // Expires in 1 hour
}



/**
 * Sends an email.
 *
 * @param string $to       The recipient's email address.
 * @param string $subject  The email subject.
 * @param string $body     The email body.
 * @param string $headers  Email headers.
 * @return bool True on success, false on failure.
 */
function send_email(string $to, string $subject, string $body, string $headers) {
  // **IMPORTANT:**  Replace this with your actual email sending code.
  // This is just a placeholder.  Use a library like PHPMailer.

  // Example using PHPMailer (requires installation and configuration)
  // require_once 'PHPMailer/PHPMailerAutoload.php';
  // $mail = new PHPMailer();
  // $mail->Mailer = 'PHPMailer';
  // $mail->SMTPDebugEnable = false; // Set to true for debugging
  // $mail->isSMTP();                       // Set to true for SMTP
  // $mail->Host       = 'smtp.example.com';
  // $mail->SMTPAuth   = true;                    // Enable SMTP authentication
  // $mail->Username   = 'your_smtp_username';
  // $mail->Password   = 'your_smtp_password';
  // $mail->Port = 587;                         // Port for submission
  // $mail->SetFrom('your_website@example.com', 'Your Website');
  // $mail->Subject = $subject;
  // $mail->Body = $body;
  // $mail->AltBody = $body;
  // $mail->AddAttachment('attachment.php', 'Attachment name');  // Add attachments
  // $result = $mail->send($to, $headers);

  // **Dummy Email Sending** - Remove this when integrating with your email provider
  // For demonstration purposes, just return true.
  return true;
}
?>


<?php

/**
 * Forgot Password Function
 *
 * This function generates a unique token and sends an email to the user with a
 * link to reset their password.  It also stores the token in the database
 * for verification.
 *
 * @param string $email The email address of the user.
 * @param string $baseUrl The base URL of your website.  This is used to
 *                         construct the reset link.  e.g., 'https://example.com'
 * @return bool True if the email was sent successfully, false otherwise.
 */
function forgot_password(string $email, string $baseUrl) {
    // 1. Validate Email (Basic check - improve as needed)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided: " . $email);
        return false;
    }

    // 2. Generate a Unique Token
    $token = bin2hex(random_bytes(32));  // Use a cryptographically secure random number generator

    // 3. Prepare the Reset Link
    $reset_url = $baseUrl . "/reset_password?token=" . urlencode($token);

    // 4. Prepare the Email Message
    $subject = "Password Reset Request";
    $message = "Hello,

" .
               "Please click on the following link to reset your password:
" .
               "<a href=\"" . $reset_url . "\">Reset Password</a>

" .
               "If you did not request this password reset, please ignore this email.

" .
               "Sincerely,
" .
               "The " . basename(__FILE__) . " Team";

    // 5. Send the Email (Using PHPMailer -  Install with Composer: composer require phpmailer/phpmailer)
    if (validate_php_extensions('mail')) { // Check if mail extension is available
      if (mail($email, $subject, $message)) {
          return true;
      } else {
          error_log("Failed to send email to " . $email);
          return false;
      }
    } else {
      error_log("PHP mail extension is not enabled.  Please enable it to send emails.");
      return false;
    }
}



// Example Usage (replace with your database and email sending code)
//
// $email = "test@example.com";
// $baseUrl = "https://yourwebsite.com";
//
// if (forgot_password($email, $baseUrl)) {
//   echo "Password reset email sent to " . $email;
// } else {
//   echo "Failed to send password reset email.";
// }

?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a user table with an 'email' and 'password' column.

function forgotPassword($email, $db) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return 'Invalid email address.';
  }

  // 2. Check if user exists
  $result = $db->query("SELECT id, email FROM users WHERE email = '$email'");

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $userEmail = $user['email'];

    // 3. Generate a Unique Token (e.g., using uuid_v4)
    $token = bin2hex(random_bytes(32));  // Generate a cryptographically secure random token

    // 4. Hash the Password (Important for Security)
    $hashedPassword = password_hash($user['password'], PASSWORD_DEFAULT); // Using PHP's password_hash function

    // 5. Store the Token & User ID in the Database
    $db->query("UPDATE users SET reset_token = '$token', reset_token_expiry = NOW() WHERE id = '$userId'");

    // 6. Prepare a Password Reset Email
    $to = $email;
    $subject = 'Password Reset Request';
    $message = "Please click on the following link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . "?reset_token=$token'>Reset Password</a>";
    $headers = "From: your_email@example.com"; // Replace with your email

    mail($to, $message, $headers);


    return 'Password reset email sent to ' . $email;

  } else {
    return 'User not found.';
  }
}


// Example Usage (This is just for demonstration and should be integrated with a form)
// You'd typically call this function from a form after a user enters their email.
// The following code demonstrates the usage, but it's not a complete form.

// $email = $_POST['email']; // Get email from form input

// if (isset($email)) {
//   $result = forgotPassword($email);
//   echo $result;
// } else {
//   echo "Please enter your email address.";
// }



// ---------------------  IMPORTANT SECURITY CONSIDERATIONS ---------------------

// 1.  **Never store plain text passwords.** Always hash passwords using a strong hashing algorithm like `password_hash()` with `PASSWORD_DEFAULT`.

// 2. **Token Expiry:**  The `reset_token_expiry` column in the database sets an expiration time for the token. This is crucial for security.  When the user clicks the reset link, the token will expire, preventing unauthorized access.

// 3. **Token Uniqueness:** `bin2hex(random_bytes(32))` generates a cryptographically secure random token, ensuring uniqueness.

// 4.  **Rate Limiting:** Implement rate limiting to prevent brute-force attacks where attackers try to reset passwords repeatedly.

// 5. **Input Validation:** Thoroughly validate all user input (email address, token, etc.) to prevent vulnerabilities. Use `filter_var()` and other validation functions.

// 6. **HTTPS:**  Always use HTTPS to encrypt communication between the user's browser and your server, protecting the token during transmission.

// 7. **Logging:** Implement logging to track password reset attempts, which can help detect suspicious activity.
?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and you have a 'users' table with a 'email' column.

function forgotPassword($email, $db) {
    // Validate email format (optional, but recommended)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email format.";
    }

    // Check if the email exists in the database
    $result = $db->query("SELECT id, password, salt FROM users WHERE email = '$email'");

    if ($result->num_rows > 0) {
        $user = $result->fetch_assoc();
        $userId = $user['id'];
        $hashedPassword = $user['password'];
        $salt = $user['salt'];

        // Generate a unique token (for security)
        $token = bin2hex(random_bytes(32));

        // Hash the token with the salt
        $hashedToken = password_hash($token, PASSWORD_DEFAULT);

        // Store the token in the database (associate it with the user's email)
        $db->query("UPDATE users SET password_reset_token = '$hashedToken' WHERE email = '$email'");

        // Send an email with a link to reset the password
        $subject = "Password Reset Link";
        $to = $email;
        $message = "Click on this link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'>" . $_SERVER['PHP_SELF'] . "?reset=$token</a>";
        $headers = "From: your_email@example.com" . "\r
";

        if(mail($to, $subject, $message, $headers)) {
          return "Password reset email sent. Please check your inbox.";
        } else {
          return "Password reset email could not be sent.  Check your mail server configuration.";
        }

    } else {
        return "User not found.";
    }
}

// Example Usage (in your form/script):
// $email = $_POST['email'];  // Get email from form
// $resetMessage = forgotPassword($email, $db);
// echo $resetMessage;

?>


<?php

// This script demonstrates a basic forgot password functionality.
// **IMPORTANT:  This is a simplified example and should be adapted for a production environment.**
//  - Security considerations are crucial and need thorough implementation.
//  -  Use a real email sending service instead of `mail()` for reliability and deliverability.
//  -  Implement rate limiting to prevent abuse.
//  -  Store passwords securely (hashed and salted) - NEVER store passwords in plain text.

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_password = 'your_db_password';

//  Generate a unique token for the password reset request
function generateUniqueToken() {
    return bin2hex(random_bytes(32)); // Generate a 32-byte random string
}

// Function to reset password
function resetPassword($email, $token) {
    // 1. Validate the token (ensure it's valid and hasn't expired)
    //    - Check if the token exists in the database for the given email
    //    - Implement an expiration time for the token (e.g., 30 minutes)

    // Example (Simplified Token Validation) - Replace with proper validation
    $query = "SELECT id FROM users WHERE email = '$email' AND token = '$token'";
    $result = mysqli_query($GLOBALS['conn'], $query);

    if (mysqli_num_rows($result) > 0) {
        // Token is valid - proceed to generate and email the reset link
        return true;  // Indicate success
    } else {
        return false;  // Token is invalid
    }
}

// Function to send the reset password email
function sendResetPasswordEmail($email, $resetLink) {
    // Replace with your email sending service/library
    // This is a placeholder using `mail()` - NOT recommended for production
    $to = $email;
    $subject = 'Password Reset';
    $message = "Click on the following link to reset your password: " . $resetLink;
    $headers = 'From: your_email@example.com' . "\r
"; // Replace with your email address

    if (mail($to, $message, $headers)) {
        return true;
    } else {
        return false;
    }
}



// Handle the forgot password request (Example - This is just the route part)
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $email = filter_input(INPUT_POST, 'email', FILTER_SANITIZE_EMAIL);

    if (empty($email)) {
        $error = "Please enter your email address.";
    } else {
        // 1. Generate a unique token
        $token = generateUniqueToken();

        // 2. Store the token in the database, associated with the email
        $query = "INSERT INTO password_resets (email, token, created_at) VALUES ('$email', '$token', NOW())";
        mysqli_query($GLOBALS['conn'], $query);

        // 3.  Generate the reset password link
        $resetLink = '?token=' . $token; //  Adjust URL structure as needed.  Consider using a session-based token.

        // 4. Send the email
        $success = sendResetPasswordEmail($email, $resetLink);

        if ($success) {
            $message = "Password reset email sent to $email.";
        } else {
            $error = "Failed to send password reset email.";
        }
    }
}

//Database Connection (Important - Only for this example)
$conn = mysqli_connect($db_host, $db_user, $db_password, $db_name);
if (mysqli_connect_errno()) {
    die("Connection failed: " . mysqli_connect_error());
}


?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

<h1>Forgot Password</h1>

<?php if (isset($error)) {
    echo "<p style='color: red;'>$error</p>";
} ?>

<?php if (isset($message)) {
    echo "<p style='color: green;'>$message</p>";
} ?>


<form method="post">
    <label for="email">Email Address:</label>
    <input type="email" id="email" name="email" placeholder="Your email" value="<?php echo isset($email) ? esc_html($email) : ''; ?>">
    <button type="submit">Reset Password</button>
</form>

</body>
</html>


<?php

// Assuming you have a database connection established and a 'users' table
// with a 'email' column.  Adjust this to match your actual database setup.

// Function to reset password
function forgot_password($email, $new_password, $token, $db_connection) {
    // 1. Check if the email exists in the database
    $stmt = $db_connection->prepare("SELECT id FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        return false; // Email not found
    }

    // 2. Generate a secure token (Important for security)
    $token = bin2hex(random_bytes(32)); // Generate a secure, random token
    // Use a strong random number generator for better security.


    // 3. Hash the new password
    $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

    // 4. Update the user's password in the database
    $stmt = $db_connection->prepare("UPDATE users SET password = ?, reset_token = ?, reset_token_expiry = ? WHERE id = ?");
    $stmt->execute([$hashed_password, $token, time(), $user['id']]);

    // 5. Store the token and expiry time in the database
    //   - Reset token to hold the token generated above.
    //   - Reset token expiry to the current time (for token expiration)

    // 6.  Send an email to the user with instructions and a link.  (Not implemented here)
    //  You'll need to implement an email sending function or use a library
    //  to send the password reset link.  Include the token in the link.


    return true; // Password reset successful
}


// Example Usage (Illustrative - adapt to your application)
//
//  1. Get input from the form
// $email = $_POST['email'];
// $new_password = $_POST['new_password'];
// $token = $_POST['token'];
//
//  2.  Establish DB connection.
//  $db_connection = new PDO("mysql:host=localhost;dbname=your_database_name", "username", "password");
//
//  3.  Call the function
// if (forgot_password($email, $new_password, $token, $db_connection)) {
//     echo "Password reset email has been sent.  Please check your inbox.";
// } else {
//     echo "Invalid email or token.";
// }

?>


<?php

// Assuming you have a database connection established and a 'users' table 
// with a 'email' and 'password' column.

// Function to handle password reset requests
function forgotPassword($email, $newPassword, $dbConnection) {
    // 1. Validate Email
    $email = filter_var($email, FILTER_SANITIZE_EMAIL); // Sanitize email
    if (empty($email)) {
        return "Invalid email address.";
    }

    // 2. Check if the user exists
    $stmt = $dbConnection->prepare("SELECT id, email FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (empty($user)) {
        return "User not found.";
    }

    // 3. Hash the new password
    $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

    // 4. Update the user's password
    try {
        $stmt = $dbConnection->prepare("UPDATE users SET password = ? WHERE id = ?");
        $stmt->execute([$hashedNewPassword, $user['id']]);
        return "Password reset successful. Please check your email for instructions.";

    } catch (PDOException $e) {
        return "Error resetting password: " . $e->getMessage(); // Handle errors
    }
}


// Example usage (assuming $dbConnection is already established)
// echo forgotPassword("user@example.com", "newpassword123", $dbConnection);


//  Important Considerations & Security Best Practices:

// 1.  Database Connection:  Replace `$dbConnection` with your actual database connection object. This example uses PDO for database interaction.

// 2.  Password Hashing:
//   - Use `password_hash()` to securely hash the new password *before* storing it in the database. This is crucial for security.
//   - `PASSWORD_DEFAULT` is a good default algorithm.  Consider using a more modern algorithm if your database supports it.

// 3.  Email Sending:
//    -  This code *does not* include email sending.  You'll need to add code to send an email with a password reset link.  The link should contain a token or unique identifier to verify the user's request.  Use a library or service like PHPMailer to handle email sending.
//    -  **Important:**  The reset link should expire after a certain period (e.g., 30 minutes, 1 hour) to prevent unauthorized access.

// 4. Token-Based Reset Links (Recommended):
//   -  Instead of simply sending the password to the email, generate a unique token (e.g., a UUID) and include it in the reset link.
//   -  When the user clicks the link, the token is verified on the server.
//   -  This ensures that only the user who requested the reset can actually reset their password.

// 5.  Input Validation:
//    -  Sanitize and validate all user inputs (email, newPassword) thoroughly to prevent SQL injection and other security vulnerabilities.  `filter_var()` is a good starting point, but consider using a more robust input validation library.

// 6. Error Handling:
//    -  Use `try...catch` blocks to handle potential errors during database operations.

// 7. CSRF Protection:
//    -  Implement CSRF (Cross-Site Request Forgery) protection to prevent malicious websites from triggering password reset requests on your site.

// 8. Logging:
//    - Log all password reset attempts (successful or failed) for auditing and security monitoring.

// 9.  Rate Limiting:
//     - Limit the number of password reset requests a user can make within a certain time period to prevent brute-force attacks.

?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique token, sends an email with a reset link,
 * and stores the token in the database.  It's a basic implementation and
 * should be enhanced with security best practices (e.g., rate limiting,
 * more robust token generation, input sanitization) for production use.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @return bool True on success, false on failure (e.g., email not found).
 */
function forgot_password(string $email)
{
    // 1. Validate Email (Basic - Enhance for production)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format: " . $email); // Log invalid emails
        return false;
    }

    // 2. Check if user exists
    $user = getUserById($email); // Assume a function getUserById exists
    if (!$user) {
        error_log("User not found for email: " . $email);
        return false;
    }

    // 3. Generate a Unique Token
    $token = generate_unique_token();

    // 4. Store Token in Database
    $result = store_token_in_database($user->id, $token); // Assume a function store_token_in_database exists
    if (!$result) {
        error_log("Failed to store token in database for user: " . $email);
        return false;
    }

    // 5. Send Password Reset Email
    if (!send_password_reset_email($user->email, $token)) {
        // If email sending fails, you might want to log it and consider
        // forcing a manual password reset process, or alerting an admin.
        error_log("Failed to send password reset email for user: " . $email);
        // Consider deleting the token from the database if email sending fails
        // delete_token_from_database($user->id, $token);
    }

    return true;
}


/**
 * Placeholder functions - Implement your own database interactions and email sending
 */

/**
 *  Placeholder function to get user by email.
 *
 *  Replace this with your database query to retrieve user information based on email.
 *
 *  @param string $email  The email address.
 *  @return  User object, or null if not found.
 */
function getUserById(string $email)
{
    // Replace with your actual database query
    // This is just a placeholder example
    // Example using mysqli
    // $conn = mysqli_connect("localhost", "username", "password", "database");
    // if (!$conn) {
    //   die("Connection failed");
    // }
    // $sql = "SELECT * FROM users WHERE email = '$email'";
    // $result = mysqli_query($conn, $sql);
    // if ($result) {
    //   $user = mysqli_fetch_assoc($result);
    //   return new User($user); // Create a User object
    //   mysqli_free_result($result);
    // }
    // mysqli_close($conn);
    // return null;

    //Example of a dummy User object
    return new User(['id' => 1, 'email' => $email]);
}


/**
 * Placeholder for generating a unique token.  Use a more robust method in production.
 *
 * @return string A unique token.
 */
function generate_unique_token()
{
    return bin2hex(random_bytes(32)); // A 32-byte random string
}

/**
 * Placeholder function to store the token in the database.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token to store.
 * @return bool True on success, false on failure.
 */
function store_token_in_database(int $userId, string $token)
{
    // Replace with your database insert query
    // Example using mysqli
    // $conn = mysqli_connect("localhost", "username", "password", "database");
    // if (!$conn) {
    //   die("Connection failed");
    // }
    // $sql = "INSERT INTO password_tokens (user_id, token, expiry_timestamp) VALUES ('$userId', '$token', NOW() + INTERVAL 1 HOUR)"; // Store with expiry
    // $result = mysqli_query($conn, $sql);
    // if ($result) {
    //   mysqli_close($conn);
    //   return true;
    // }
    // mysqli_close($conn);
    // return false;

    //Dummy implementation
    return true;
}

/**
 * Placeholder function to send the password reset email.
 *
 * @param string $email The email address.
 * @param string $token The reset token.
 * @return bool True on success, false on failure.
 */
function send_password_reset_email(string $email, string $token)
{
    // Replace with your email sending logic
    // Example: Use a library like PHPMailer or SwiftMailer
    // You'd need to configure SMTP settings.

    // Dummy email sending (replace with actual implementation)
    //  $subject = "Password Reset Request";
    //  $body = "Click this link to reset your password: " .  base_url() . "/reset-password?token=" . $token;
    //  $headers = "From: your_email@example.com";

    //  mail($email, $subject, $body, $headers);

    // Dummy implementation
    return true;
}

/**
 * Placeholder function to delete the token from the database.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token to delete.
 * @return bool True on success, false on failure.
 */
function delete_token_from_database(int $userId, string $token)
{
    // Replace with your database delete query
    // Example:
    // $conn = mysqli_connect("localhost", "username", "password", "database");
    // if (!$conn) {
    //   die("Connection failed");
    // }
    // $sql = "DELETE FROM password_tokens WHERE user_id = '$userId' AND token = '$token'";
    // $result = mysqli_query($conn, $sql);
    // if ($result) {
    //   mysqli_close($conn);
    //   return true;
    // }
    // mysqli_close($conn);
    // return false;

    return true;
}
?>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Function to reset password
function forgotPassword($email, $new_password, $db) {
  // Connect to the database
  $conn = new mysqli($host, $username, $password, $database);

  // Check connection
  if ($conn->connect_error) {
    return false;
  }

  // Hash the new password
  $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

  // SQL query to update the password for the given email
  $query = "UPDATE users SET password = '$hashed_password' WHERE email = '$email'";

  // Execute the query
  if ($conn->query($query) === TRUE) {
    return true;
  } else {
    return false;
  }
}


// Example Usage (Demonstration -  Don't use this directly in a web app without proper form validation and security)
// In a real application, this would be triggered by a user submitting a "forgot password" form.

// Simulate a password reset request.  This is just for testing.
// Replace 'user@example.com' with the actual email address
$email = "user@example.com";
$new_password = "new_secure_password";

// Call the forgotPassword function
if (forgotPassword($email, $new_password, $conn)) {
  echo "Password reset email sent successfully (simulated).";
} else {
  echo "Password reset failed. Check database connection and email address.";
}

// Close the connection (important!)
$conn->close();


//  ---  Important Considerations and Security Best Practices  ---

// 1.  Input Validation and Sanitization:
//     * **Form Validation:**  In a real application, *always* validate the email address format and the new password before sending it to the database. Use HTML5 validation on the front-end and server-side validation.
//     * **Sanitize Input:**  Sanitize the input to prevent SQL injection vulnerabilities.  Use prepared statements (recommended) or proper escaping functions.  The example provided is vulnerable if not using prepared statements.
//     * **Password Complexity:** Enforce password complexity requirements (minimum length, special characters, etc.) to improve security.

// 2.  Email Sending:
//     * **Use a reliable email sending service:** Do *not* directly embed your email credentials into the PHP code.  Use a reputable email sending service (e.g., SendGrid, Mailgun, AWS SES) to handle email delivery.
//     * **Token-Based Reset:** Implement a token-based password reset system, where a unique token is generated and sent to the user's email address.  This token should expire after a certain period. This prevents unauthorized password resets.  The user clicks the link in the email to set a new password.

// 3.  Security:
//     * **HTTPS:** Always use HTTPS to encrypt the communication between the user's browser and your server.
//     * **Rate Limiting:** Implement rate limiting to prevent brute-force attacks on the password reset endpoint.
//     * **Logging:** Log all password reset requests for auditing and security monitoring.

// 4.  Prepared Statements (Highly Recommended):
//    Prepared statements are the *best* way to prevent SQL injection vulnerabilities. They ensure that user input is treated as data, not as part of the SQL query.

//  Example using prepared statements (using mysqli):

/*
$stmt = $conn->prepare("UPDATE users SET password = ? WHERE email = ?");
$stmt->bind_param("ss", $new_password, $email);
$stmt->execute();
$stmt->close();
*/
?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset link was generated and emailed, false otherwise.
 */
function forgot_password(string $email) {
    // 1. Check if the email exists in the database.
    $user = db_get_user_by_email($email); // Replace with your database query function

    if (!$user) {
        return false; // Email not found
    }

    // 2. Generate a unique, time-based token. This is crucial for security.
    $token = generate_unique_token(); 

    // 3. Store the token and user ID in the database.
    $result = db_store_reset_token($user['id'], $token);

    if (!$result) {
        // Error storing token - handle appropriately, e.g., log an error.
        return false;
    }

    // 4. Send the password reset email.
    $reset_url = generate_password_reset_url($token); // Generate the URL with the token
    $subject = "Password Reset Request";
    $message = "Click <a href='" . $reset_url . "'>here</a> to reset your password.";
    $headers = "From: your_email@example.com\r
"; // Replace with your sender email.
    
    if (send_email($email, $subject, $message, $headers)) {
        return true;
    } else {
        // Error sending email - handle appropriately, e.g., log an error.
        // You might want to delete the token if email fails.
        db_delete_reset_token($user['id']);
        return false;
    }
}


/**
 * Placeholder function for getting a user by email.  Replace with your database query.
 * @param string $email
 * @return array|null  An associative array containing user data, or null if not found.
 */
function db_get_user_by_email(string $email): ?array {
    // Example database query - replace with your actual logic
    $query = "SELECT * FROM users WHERE email = '{$email}'";
    // ... (Your database query here using PDO, MySQLi, etc.)
    // Assuming a successful query returns an array:
    $result = [
        'id' => 123,  // Replace with the actual user ID
        'email' => $email,
        // ... other user data
    ];

    return $result;
}


/**
 * Placeholder function for generating a unique token.
 * @return string
 */
function generate_unique_token(): string {
    return bin2hex(random_bytes(32)); // Secure random bytes and convert to hex
}


/**
 * Placeholder function for generating the password reset URL.
 * @param string $token
 * @return string
 */
function generate_password_reset_url(string $token): string {
    return "http://yourwebsite.com/reset_password?token=" . $token; // Replace with your actual URL
}


/**
 * Placeholder function for sending an email.
 * @param string $to
 * @param string $subject
 * @param string $message
 * @param string $headers
 * @return bool
 */
function send_email(string $to, string $subject, string $message, string $headers): bool {
    //  Implement your email sending logic here.  Use a library like PHPMailer.
    // Example:
    // $mail = new PHPMailer(true);
    // $mail->SetFrom('your_email@example.com', 'Your Name');
    // $mail->AddAddress($to);
    // $mail->Subject = $subject;
    // $mail->MsgBody = $message, 'html');
    // $mail->AltBody = $message;

    // $mail->Send();
    // return true;

    // For now, return true to simulate success
    return true;
}



/**
 * Placeholder function for deleting a reset token.
 * @param int $userId
 * @return bool
 */
function db_delete_reset_token(int $userId): bool {
    // Replace with your database query to delete the token.
    // Example:
    // $query = "DELETE FROM reset_tokens WHERE user_id = {$userId}";
    // ... (Your database query here)
    return true;
}



/**
 * Placeholder function to store the reset token in the database.
 * @param int $userId
 * @param string $token
 * @return bool
 */
function db_store_reset_token(int $userId, string $token): bool {
  // Replace with your database query to store the token.
  // Example:
  // $query = "INSERT INTO reset_tokens (user_id, token) VALUES (?, ?)";
  // $stmt = $conn->prepare($query);
  // $stmt->bind_param("si", $userId, $token);
  // $stmt->execute();

  // For now, return true to simulate success
  return true;
}
?>


<?php

// This file requires a database connection.  Replace with your actual database credentials.
// This is a simplified example for demonstration purposes.  In a real application,
// you should implement more robust security measures.

// Database credentials - REPLACE WITH YOUR ACTUAL CREDENTIALS!
$db_host = 'localhost';
$db_user = 'your_db_user';
$db_password = 'your_db_password';
$db_name = 'your_db_name';

//  Email configuration
$from_email = 'your_email@example.com';  // Sender email address
$email_charset = 'UTF-8';

// Function to send an email
function send_email($to, $subject, $message, $from_email, $email_charset) {
    // Simple example - replace with a proper email library/service
    $headers = "From: " . $from_email . "\r
";
    $headers .= "Reply-To: " . $from_email . "\r
";
    $headers .= "Content-Type: text/html; charset=$email_charset\r
";

    mail($to, $subject, $message, $headers);
}


// Forgot Password Function
function forgot_password($username, $db) {
    // 1. Validate input (Basic - improve for production)
    if (empty($username)) {
        return 'Invalid username.';
    }

    // 2. Check if the user exists
    $result = $db->query("SELECT id, email FROM users WHERE username = '$username'");

    if ($result->num_rows > 0) {
        $user_data = $result->fetch_assoc();
        $user_id = $user_data['id'];
        $email = $user_data['email'];

        // 3. Generate a unique token
        $token = bin2hex(random_bytes(32)); // Use strong random bytes

        // 4. Hash the token (Important for security)
        $hashed_token = password_hash($token, PASSWORD_DEFAULT);

        // 5. Update the user's record with the token
        if ($db->query("UPDATE users SET reset_token = '$hashed_token', reset_token_expiry = NOW() WHERE username = '$username'") !== false) {

            // 6. Send an email with a reset link
            $subject = 'Password Reset';
            $message = 'Click on the following link to reset your password: <a href="' . $_SERVER['PHP_SELF'] . '?reset=' . $token . '">' . urlencode('Reset Password') . '</a>';  // Build the link
            send_email($email, $subject, $message, $from_email, $email_charset);

            return 'Password reset link has been sent to your email.';
        } else {
            return 'Error updating password reset token.';
        }
    } else {
        return 'User not found.';
    }
}


// Example usage (This part would normally be in a form submission handler)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $username = $_POST["username"];

    // This is just an example.  In a real application, you'd have your database connection here.
    //  This example uses a placeholder database connection (replace with your actual connection)
    $db = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($db->connect_error) {
        die('Connection failed: ' . $db->connect_error);
    }

    $reset_message = forgot_password($username, $db);
    echo $reset_message; // Display the result
    $db->close();

}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>
    <h1>Forgot Password</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required>
        <button type="submit">Reset Password</button>
    </form>
</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Forgets a user's password and sends a password reset link.
 *
 * @param string $email The email address of the user.
 * @return bool True if a reset link was successfully generated and sent, false otherwise.
 */
function forgotPassword(string $email): bool
{
    // Validate email format (basic check, use a proper validation library in production)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log for debugging
        return false;
    }

    // 1. Generate a unique, secure token (using a cryptographically secure random function)
    $token = bin2hex(random_bytes(32));

    // 2. Hash the token (for security)
    $hashedToken = password_hash($token, PASSWORD_DEFAULT);  // Using password_hash for security.

    // 3. Store the token and user ID in the database
    $query = "INSERT INTO password_resets (user_id, token, expires_at)
              VALUES (:user_id, :token, :expires_at)";

    $stmt = $db->prepare($query); // Assuming $db is your database connection
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':token', $hashedToken);
    $stmt->bindParam(':expires_at', time() + (2 * 60 * 60)); // Token expires in 2 hours (example)
    $result = $stmt->execute();

    if (!$result) {
        error_log("Error inserting reset token into database: " . print_r($stmt->errorInfo(), true)); // Log the error
        return false;
    }

    // 4.  Send the password reset link (email)
    $to = $email;
    $subject = "Password Reset Link";
    $message = "Click this link to reset your password: " . $_SERVER['HTTPS'] . "://" . $_SERVER['HTTP_HOST'] . "/reset_password?token=" . $token;
    $headers = "From: Your Website <noreply@yourwebsite.com>"; // Replace with your actual sender email

    if (mail($to, $subject, $message, $headers)) {
        return true;
    } else {
        error_log("Failed to send password reset email to " . $email);
        // Optionally, delete the reset token from the database if the email fails.
        // This is crucial to prevent abuse.
        deleteResetToken($userId, $token);
        return false;
    }
}


/**
 * Deletes a password reset token from the database.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token to delete.
 */
function deleteResetToken(int $userId, string $token): void
{
    $query = "DELETE FROM password_resets WHERE user_id = :user_id AND token = :token";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':token', $token);
    $stmt->execute();
}


// Example Usage (in your web form handling logic)

//  ... (form submission handling) ...

//  $email = $_POST['email']; // Get the email from the form

//  if (forgotPassword($email)) {
//      echo "Password reset email sent. Check your inbox.";
//  } else {
//      echo "An error occurred while sending the password reset email.";
//  }

?>


<?php

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database_name";

// Function to send an email
function sendPasswordResetEmail($email, $token) {
  // Replace with your email sending logic (e.g., using PHPMailer)
  // This is just a placeholder
  $subject = "Password Reset Request";
  $message = "Click this link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'>" . $_SERVER['PHP_SELF'] . "?reset=$token</a>";
  $headers = "From: your_email@example.com" . "\r
";

  mail($email, $message, $headers);
}

// Function to generate a unique token
function generateToken() {
  return bin2hex(random_bytes(32)); // Generates a 32-byte random string, hex encoded
}

// Function to check if an email exists
function emailExists($email) {
  //  This is a simplified example.  In a real application,
  //  you should use a proper database query with WHERE clause.
  return true; //  Replace with your database query to check for existing email
}

// Forgot Password Function
function forgotPassword($email) {
  // 1. Validate email
  if (!emailExists($email)) {
    return "Invalid email address.";
  }

  // 2. Generate a unique token
  $token = generateToken();

  // 3.  Store the token in the database (e.g., in a 'reset_tokens' table)
  //     You'll need to create a table to store these tokens.
  //     Example table structure:
  //     CREATE TABLE reset_tokens (
  //       id INT AUTO_INCREMENT PRIMARY KEY,
  //       email VARCHAR(255) NOT NULL,
  //       token VARCHAR(255) NOT NULL,
  //       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  //     );

  // Assuming you have a database connection established (e.g., $conn)

  // Example database insertion (replace with your actual query)
  //$query = "INSERT INTO reset_tokens (email, token) VALUES ('$email', '$token')";
  //if (!mysqli_query($conn, $query)) {
  //  return "Error inserting token into database.";
  //}

  // 4. Send the password reset email
  sendPasswordResetEmail($email, $token);

  return "Password reset link has been sent to your email address.";
}


//  Example Usage (for testing - you would handle this through a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $resetResult = forgotPassword($email);
  echo $resetResult;
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Request Password Reset</button>
  </form>

</body>
</html>


<?php

// This is a simplified example.  In a production environment, 
// you MUST use secure methods to handle password resets,
// including:
//  - Generating strong, random tokens
//  - Storing tokens securely (e.g., bcrypt)
//  - Sending emails over HTTPS
//  - Implementing rate limiting to prevent abuse.
//  - Logging all reset attempts.

// **WARNING:** This code is for demonstration purposes only and is NOT suitable for production use
// without significant security enhancements.

// Database connection (Replace with your database credentials)
$host = 'localhost';
$username = 'your_db_user';
$password = 'your_db_password';
$database = 'your_db_name';

// Function to handle the forgot password request
function forgotPassword($email) {
    // 1. Check if the email exists in the database
    $conn = new mysqli($host, $username, $password, $database);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $sql = "SELECT id, username FROM users WHERE email = '$email'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        $user_id = $result->fetch_assoc()['id'];
        $username = $result->fetch_assoc()['username'];

        // 2. Generate a unique, random token
        $token = bin2hex(random_bytes(32));

        // 3. Store the token in the database, linked to the user
        $sql = "INSERT INTO password_resets (user_id, token, expires_at) VALUES ($user_id, '$token', NOW() + INTERVAL 1 HOUR)";
        if (!$conn->query($sql)) {
            error_log("Error inserting token: " . $conn->error); // Log the error
            return false;
        }

        // 4. Send an email to the user with a reset link
        $reset_link = "http://yourwebsite.com/reset-password?token=$token&user_id=$user_id"; // Replace with your website URL
        $to = $email;
        $subject = 'Password Reset';
        $message = "Click the link below to reset your password: " . $reset_link;
        $headers = "From: Your Website <noreply@yourwebsite.com>";

        if (mail($to, $subject, $message, $headers)) {
            return true;
        } else {
            error_log("Error sending email: " . mail($to, $subject, $message, $headers)); // Log the error
            return false;
        }
    } else {
        return false; // Email not found
    }
}

// Example Usage (This would typically be handled by a form submission)
if (isset($_POST['email'])) {
    $email = $_POST['email'];
    if (forgotPassword($email)) {
        echo "Password reset email has been sent to $email";
    } else {
        echo "Error: Password reset email could not be sent.  Please check your email or contact support.";
    }
}

?>

<!-- HTML Form to Submit Email Address -->
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
    <label for="email">Email Address:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
</form>


<?php

/**
 *  Forgot Password Function
 *
 *  This function handles the forgot password flow.
 *  It generates a unique token, stores it in the database with the user's email,
 *  sends an email to the user with a link to reset their password, and
 *  marks the token as used.
 *
 * @param string $email The email address of the user requesting the password reset.
 * @param string $reset_token A generated token (optional, defaults to a random string).
 * @return bool True if the reset process started successfully, false otherwise.
 */
function forgot_password(string $email, string $reset_token = '') {

  // 1. Generate a unique token if one wasn't provided
  if (empty($reset_token)) {
    $reset_token = generate_unique_token(); // Call a function to generate a unique token
  }

  // 2.  Store the token in the database
  $db_result = database_insert_token($email, $reset_token);

  if (!$db_result) {
    return false; // Token insertion failed
  }

  // 3. Send the password reset email
  if (!send_password_reset_email($email, $reset_token)) {
    //  Handle email sending failure - perhaps log it, retry, or return false.
    //  Important: Don't just silently fail.
    database_delete_token($email, $reset_token); // Clean up if email fails
    return false;
  }

  // 4. Mark the token as used (important for security)
  if (!mark_token_used($email, $reset_token)) {
    // Handle marking token as used failure.  Again, important to handle this.
    database_delete_token($email, $reset_token); // Clean up
    return false;
  }

  return true; // Password reset process started successfully
}


/**
 * Helper function to generate a unique token.
 * This is a simple example, you might use a more robust method.
 *
 * @return string A unique token.
 */
function generate_unique_token() {
  return bin2hex(random_bytes(32)); // Generates a 32-byte random string
}


/**
 * Placeholder function for database insertion of the token.
 *  This is a simplified example.  You'll need to adjust this to
 *  your database setup (e.g., using PDO or MySQLi).
 *
 * @param string $email The user's email address.
 * @param string $token The token to store.
 * @return bool True if the insertion was successful, false otherwise.
 */
function database_insert_token(string $email, string $token) {
  // Replace with your actual database connection and query logic
  // Example using a placeholder:
  $db_connection = get_database_connection(); // Get a connection (implementation depends on your setup)
  $query = "INSERT INTO user_tokens (email, token, used) VALUES ('$email', '$token', FALSE)";

  try {
    $result = $db_connection->query($query);
    return $result;
  } catch (Exception $e) {
    // Handle database errors appropriately
    error_log("Database error: " . $e->getMessage()); // Log the error
    return false;
  }
}



/**
 * Placeholder function to send the password reset email.
 * Replace with your email sending logic.
 *
 * @param string $email The user's email address.
 * @param string $token The password reset token.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function send_password_reset_email(string $email, string $token) {
  // Replace with your email sending logic (e.g., using PHPMailer or similar).
  // This is a placeholder - don't just return true
  // You *must* handle email sending failures!

  // Example Placeholder:
  error_log("Simulating password reset email sent to: " . $email . " with token: " . $token);  // Simulate sending
  return true; // In a real implementation, this should return true *only* if the email was successfully sent.
}


/**
 * Placeholder function to mark the token as used.
 * This prevents the token from being used again.
 *
 * @param string $email The user's email address.
 * @param string $token The token to mark as used.
 * @return bool True if the token was marked as used, false otherwise.
 */
function mark_token_used(string $email, string $token) {
  // Replace with your database update logic
  $db_connection = get_database_connection(); // Get a connection (implementation depends on your setup)
  $query = "UPDATE user_tokens SET used = TRUE WHERE email = '$email' AND token = '$token'";

  try {
    $result = $db_connection->query($query);
    return $result;
  } catch (Exception $e) {
    // Handle database errors
    error_log("Database error: " . $e->getMessage());
    return false;
  }
}

/**
 * Helper function to get a database connection.  Replace with your connection logic
 *
 * @return PDO|MySQLi|null Returns a database connection object, or null if connection fails.
 */
function get_database_connection() {
    // Placeholder - replace with your actual database connection logic
    // Example using PDO:
    try {
        return new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    } catch (PDOException $e) {
        // Handle the exception appropriately, maybe log it and return null.
        error_log("Database connection error: " . $e->getMessage());
        return null;
    }
}


/**
 *  Helper function to delete a token from the database.
 *  This is important to prevent abuse.
 *
 * @param string $email The user's email address.
 * @param string $token The token to delete.
 * @return bool True if the token was deleted, false otherwise.
 */
function database_delete_token(string $email, string $token) {
    // Replace with your actual database update logic
    $db_connection = get_database_connection();

    $query = "DELETE FROM user_tokens WHERE email = '$email' AND token = '$token'";

    try {
        $result = $db_connection->query($query);
        return $result;
    } catch (Exception $e) {
        error_log("Database error: " . $e->getMessage());
        return false;
    }
}
?>


<?php

// Database connection details (replace with your actual details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database_name";

// Function to reset password
function forgotPassword($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2.  Generate a Unique Token
  $token = bin2hex(random_bytes(32)); // Generates a strong, random hexadecimal token

  // 3.  Store Token and User ID in Database
  //    (This should ideally be done in a dedicated "forgot_password" table)
  //    For simplicity, we'll store it in the users table.  
  //    **IMPORTANT:** In a real application, consider a separate table 
  //    for forgotten password tokens and expire them after a certain time.
  $query = "UPDATE users SET forgot_token = '$token', forgot_token_expiry = NOW() + INTERVAL 7 DAY WHERE email = '$email'"; // Expires after 7 days
  $result = mysqli_query($GLOBALS['host'], $query); 

  if (mysqli_error($GLOBALS['host'])) {
    return "Error generating reset link: " . mysqli_error($GLOBALS['host']);
  }

  // 4.  Send Password Reset Email
  $to = $email;
  $subject = "Password Reset";
  $message = "Please click the link below to reset your password:
" .
             "<a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'>Reset Password</a>"; // Using $_SERVER['PHP_SELF']
  $headers = "From: your_email@example.com\r
";
  mail($to, $message, $headers);

  return "Password reset link sent to your email address.";
}


// Example Usage (This would typically be handled by a form submission)
//  Assuming you have a form that submits the email address.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $reset_message = forgotPassword($email);
    echo $reset_message;
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
    <label for="email">Email Address:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @return string  A message indicating success or failure.
 */
function forgotPassword(string $email): string
{
    global $db;  // Assuming $db is your database connection object

    // 1. Check if the email exists
    $stmt = $db->prepare("SELECT id FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        return "Email not found.";
    }

    // 2. Generate a unique token
    $token = bin2hex(random_bytes(32));

    // 3. Create a password reset token record
    $stmt = $db->prepare("INSERT INTO password_resets (user_id, token, created_at) VALUES (?, ?, ?)");
    $stmt->execute([$user['id'], $token, time()]);

    // 4. Send a password reset email (you'll need to implement this)
    $resetLink = "http://yourdomain.com/reset-password?token=" . $token; // Replace with your actual domain
    sendResetPasswordEmail($email, $resetLink);  //  Implement this function
   

    return "Password reset link has been sent to your email address.";
}


/**
 * Sends an email with a password reset link.  This is a placeholder - IMPLEMENT THIS!
 *
 * @param string $email        The email address of the user.
 * @param string $resetLink    The URL to the password reset page.
 */
function sendResetPasswordEmail(string $email, string $resetLink): void
{
    //  Implement your email sending logic here.  
    // This is just a placeholder.  Use a library like PHPMailer or similar.
    // Example (commented out because you need to install and configure it):
    /*
    require_once 'PHPMailer/PHPMailerAutoload.php'; //Make sure you have PHPMailer installed.

    $mail = new PHPMailer();
    $mail->Mailer = "smtp";

    $mail->SMTPDebugEnable = true; // Set to true for debugging

    $mail->isSMTP(); // Enable SMTP
    $mail->Host       = "smtp.example.com"; // Replace with your SMTP server
    $mail->Port       = 587;                     // Replace with your SMTP port (usually 587 or 465)
    $mail->Username   = "your_email@example.com"; // Replace with your email address
    $mail->Password   = "your_password";           // Replace with your password
    $mail->SetFrom("your_email@example.com", "Your Application Name");
    $mail->Subject    = "Password Reset";
    $mail->Body       = "To reset your password, please click on the following link: " . $resetLink;
    $mail->AltBody = "To reset your password, please click on the following link: " . $resetLink;
    $mail->AddAddress($email);
    if ($mail->send()) {
        echo "Email sent successfully.
";
    } else {
        echo "Failed to send email.
";
    }
    */

    echo "Password reset email has been sent (implementation placeholder).
";
}


// Example usage:
$email = "test@example.com"; // Replace with the user's email
$result = forgotPassword($email);
echo $result . "
";

?>


<?php

// Assuming you have a database connection established and named 'conn'

// Function to handle password reset requests
function forgot_password($email) {
  // 1. Validate Email
  $email = filter_var($email, FILTER_SANITIZE_EMAIL); // Sanitize email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if the email exists in the database
  $query = "SELECT id, user_id FROM users WHERE email = '$email'";
  $result = mysqli_query($conn, $query);

  if ($result) {
    $row = mysqli_fetch_assoc($result);
    if ($row) {
      // 3. Generate a unique token
      $token = bin2hex(random_bytes(32)); // Use bin2hex for better security

      // 4. Hash the token for security
      $hashed_token = password_hash($token, PASSWORD_DEFAULT);

      // 5. Store the token in the database for the user
      $query = "UPDATE users SET reset_token = '$hashed_token' WHERE email = '$email'";
      if (mysqli_query($conn, $query)) {
        return "Password reset email sent.  Please check your inbox.";
      } else {
        return "Error updating token in database.";
      }
    } else {
      return "User not found.";
    }
  } else {
    return "Database error.";
  }
}

// Example Usage (Illustrative - Integrate into your application's logic)
// $email = $_POST['email']; // Get email from form submission
// $reset_message = forgot_password($email);
// echo $reset_message;

?>


<?php
session_start(); // Start the session

// Get the token from the URL
$token = $_GET['token'];

// Check if the token is valid (validate it against the database)
if (isset($token)) {
  // Retrieve the user ID from the token (this is just an example; you might
  // store the user ID in the token itself)

  // Validate the token
  $query = "SELECT id, user_id FROM users WHERE reset_token = '$token'";
  $result = mysqli_query($conn, $query);

  if ($result) {
    $row = mysqli_fetch_assoc($result);

    if ($row) {
      // Set a flag to indicate that the user is resetting their password
      $_SESSION['reset_token'] = $token;

      // Display the form for the user to enter a new password
      echo "<h1>Reset Password</h1>";
      echo "<form method='post' action='set_new_password.php'>";
      echo "<label for='new_password'>New Password:</label><br>";
      echo "<input type='password' id='new_password' name='new_password'><br><br>";
      echo "<input type='submit' value='Change Password'>";
      echo "</form>";
    } else {
      echo "Invalid token.";
    }
  } else {
    echo "Database error.";
  }
} else {
  echo "Invalid request.";
}
?>


<?php

// Database connection details (Replace with your actual credentials)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database_name";

// Function to handle password reset
function forgot_password($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Fetch User Information
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  $result = $conn->query("SELECT id, email FROM users WHERE email = '$email'");

  if ($result->num_rows > 0) {
    $user_data = $result->fetch_assoc();
    $user_id = $user_data['id'];
    $user_email = $user_data['email'];

    // 3. Generate a Unique Token
    $token = bin2hex(random_bytes(32));

    // 4.  Store Token in Database (For security - do not store passwords!)
    $conn->query("UPDATE users SET reset_token = '$token' WHERE email = '$email'");

    // 5.  Send Password Reset Email (See Email Sending Section Below)
    $reset_link = "http://yourwebsite.com/reset_password.php?token=$token&user_id=$user_id"; // Replace with your website URL
    $subject = "Password Reset Request";
    $message = "Click the link below to reset your password:
" . $reset_link;
    $headers = "From: yourname@yourdomain.com\r
";

    // Send Email (See Email Sending Section Below)
    //  $result = send_email($user_email, $subject, $message, $headers); // Uncomment if you have a send_email function

    return "Password reset link sent to your email address.";

  } else {
    return "User not found.";
  }

  $conn->close();
}



//-----------------------------------------------------------------------------------
//  Email Sending Function (Replace with your email sending logic)
//-----------------------------------------------------------------------------------

function send_email($to, $subject, $message, $headers) {
    // Implement your email sending code here.  This is a placeholder.

    // Example using PHPMailer (You'll need to install it: composer require phpmailer/phpmailer)
    // require_once 'vendor/phpmailer/phpmailer.php';

    // $mail = new PHPMailer(true);
    // $mail->isSMTP();
    // $mail->Host   = 'smtp.gmail.com'; // or your SMTP server
    // $mail->Port = 587;
    // $mail->Username = 'your_gmail_username'; // Replace with your gmail username
    // $mail->Password = 'your_gmail_password'; // Replace with your gmail password
    // $mail->SetFrom('yourname@yourdomain.com', 'Your Name');
    // $mail->AddAddress($to, 'User Name');
    // $mail->Subject = $subject;
    // $mail->Body    = $message;
    // $mail->IsHTML(true);
    // $mail->Send();

    // return true; // or false if sending failed
}

//-----------------------------------------------------------------------------------
// Example Usage (For Testing)
//-----------------------------------------------------------------------------------

// Example:  Reset password for user with email 'test@example.com'
$result = forgot_password('test@example.com');
echo $result;

?>


<?php

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';

// Check if the form has been submitted
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // Get the email from the form
  $email = trim($_POST['email']);

  // Validate the email format (basic check - can be enhanced)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error = "Invalid email format.";
  } else {
    // Attempt to reset password using a token
    $token = generate_unique_token(); // Function to generate a unique token
    $reset_hash = hash('sha256', $token); // Hash the token for security

    // Prepare the SQL query
    $sql = "UPDATE users SET reset_token = '$reset_hash' WHERE email = '$email'";

    // Execute the query
    $result = mysqli_query($GLOBALS['conn'], $sql);

    if (mysqli_affected_rows($GLOBALS['conn']) > 0) {
      // Send an email with the reset link
      $subject = 'Password Reset Link';
      $headers = 'From: your_email@example.com' . "\r
";
      $message = "Click the following link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=" . $token . "'>Reset Password</a>";

      mail($email, $message, $headers);

      $success = "Password reset email has been sent to $email.";
    } else {
      $error = "No user found with this email address.";
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <?php
  // Display any error or success messages
  if (isset($error)) {
    echo "<p style='color: red;'>$error</p>";
  }
  if (isset($success)) {
    echo "<p style='color: green;'>$success</p>";
  }
  ?>

  <form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your email address" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Replace this with your database connection details
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_username';
$db_password = 'your_database_password';

// Check if the reset password request is valid
if (isset($_POST['email']) && isset($_POST['reset_token'])) {
    // 1. Validate Email
    $email = trim($_POST['email']);
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        echo "Invalid email address.";
        exit;
    }

    // 2. Retrieve Token and User from Database
    $stmt = $conn->prepare("SELECT user_id, password_reset_token FROM users WHERE email = ?");
    $stmt->bind_param("s", $email); // 's' indicates a string
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        $user_data = $result->fetch_assoc();
        $user_id = $user_data['user_id'];
        $reset_token = $user_data['password_reset_token'];

        // 3. Verify Token
        if (verify_token($reset_token, $reset_token)) { //  use the verify_token function (defined below)

            // 4. Generate a New Password (or force user to set one)
            //  In a real application, you'd likely:
            //    a)  Provide a form for the user to set a new password.
            //    b)  Hash the new password securely.
            //    c)  Update the password in the database.

            //  For this example, we'll just output a message and a link to set a new password.

            echo "<p>Reset password link is valid.  Please set a new password.</p>";
            echo "<a href='reset_password.php?user_id=$user_id&reset_token=$reset_token'>Set New Password</a>";

        } else {
            echo "<p>Reset token is invalid.</p>";
        }

    } else {
        echo "<p>User not found with this email address.</p>";
    }

} else {
    echo "Invalid request.";
}


// --------------------------------------------------------------------
// Helper function to verify the token.
//  This is a placeholder.  You should implement a secure token verification.
//  This simple example just compares the token with itself which is insecure!
// --------------------------------------------------------------------
function verify_token($token, $stored_token) {
    return $token === $stored_token;
}


?>


<?php

// Assuming you have a database connection established (e.g., $db)

// Function to handle password reset requests
function forgot_password(string $email): bool
{
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email format provided."); // Log the error for debugging
    return false;
  }

  // 2. Check if User Exists
  $user = db_get_user_by_email($email);  // Replace with your actual database query
  if (!$user) {
    error_log("User with email $email not found.");
    return false;
  }

  // 3. Generate a Unique Token
  $token = generate_unique_token();

  // 4. Store Token in Database (Associate with User)
  store_token_for_user($user->id, $token);  // Replace with your actual database logic

  // 5. Send Password Reset Email
  $subject = "Password Reset Request";
  $message = "Please click the following link to reset your password:
" .
             "<a href='" .  base_url() . "/reset_password?token=$token'>" . base_url() . "/reset_password</a>"; // Replace base_url()
  $headers = "From: " . get_site_email_address() . "\r
";
  mail($email, $message, $headers);

  return true;
}

// --------------------- Helper Functions (Implement these) ---------------------

// Placeholder for generating a unique token (e.g., using UUID)
function generate_unique_token(): string
{
    return bin2hex(random_bytes(32)); // A simple, but not cryptographically secure, example.
}

// Placeholder for getting user by email (replace with your DB query)
function db_get_user_by_email(string $email): ?User // Use ?User to return null if no user is found
{
  // Replace this with your actual database query to get user by email
  // Example:
  // $sql = "SELECT * FROM users WHERE email = '$email'";
  // $result = mysqli_query($db, $sql);
  // if (mysqli_num_rows($result) > 0) {
  //   $user = mysqli_fetch_assoc($result);
  //   return new User($user); // Assuming you have a User class
  // }
  // return null;
  return null;
}

// Placeholder for storing token in database (replace with your DB logic)
function store_token_for_user(int $userId, string $token): void
{
  // Replace this with your actual database logic to store the token
  //  Example:
  //  $sql = "INSERT INTO password_tokens (user_id, token, expiry_date) VALUES ($userId, '$token', NOW() + INTERVAL 24 HOUR)";
  //  mysqli_query($db, $sql);
}

// Placeholder for getting site email address
function get_site_email_address(): string
{
  // Return your site's email address.
  return 'your_site_email@example.com';
}

// Placeholder for base_url()
function base_url(): string {
  // Return your base URL.
  return 'http://localhost/your_project/';
}



// --------------------- Example Usage (For Testing - Remove in Production) ---------------------

// If you were to call this from a form:

// $email = $_POST['email']; // Get email from the form
// if (isset($email)) {
//     if (forgot_password($email)) {
//       echo "Password reset email sent to $email.";
//     } else {
//       echo "Failed to send password reset email.";
//     }
// } else {
//   echo "Email address is required.";
// }


// --------------------- Important Considerations ---------------------

// 1. Security:
//    - **Never** store passwords directly in the database.  Use hashing (bcrypt, argon2, etc.)
//    - Use a strong, cryptographically secure token generation method.
//    - Implement proper rate limiting to prevent brute-force attacks.
//    -  Always validate and sanitize user input.

// 2. Error Handling:
//    - Log errors for debugging purposes (using error_log()).
//    - Handle edge cases (e.g., invalid email format).

// 3. Token Expiry:
//    -  Set an expiry date for the token (e.g., 24 hours).  This is crucial for security.  After the expiry date, the token becomes useless.

// 4. Database Interaction:
//    -  Replace the placeholder database functions (`db_get_user_by_email`, `store_token_for_user`) with your actual database queries and logic.

// 5.  Email Sending:
//    -  Use a reliable email sending service (e.g., SendGrid, Mailgun, AWS SES) instead of relying on PHP's `mail()` function, which can be unreliable.

// 6. User Class:
//    - Create a `User` class to represent your user data (this is just an example).

?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique, time-based token to be sent to the user's email.
 * The user can then use this token to reset their password.
 *
 * @param string $email The email address of the user.
 * @param string $token A unique, time-based token.  This is generated internally.
 * @param string $reset_url The URL to redirect the user to after they use the reset token.
 * @return bool True if the token was successfully sent, false otherwise.
 */
function forgot_password(string $email, string $token, string $reset_url): bool
{
    // 1. Validate Input (Basic - Add more robust validation as needed)
    if (empty($email)) {
        error_log("Forgot password: Empty email provided");
        return false;
    }
    if (empty($token)) {
        error_log("Forgot password: Empty token provided");
        return false;
    }

    // 2.  Store the token in the database (Replace with your actual database logic)
    // This is a simplified example - use prepared statements to prevent SQL injection!
    $db_connection = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');  // Replace with your credentials
    try {
        $stmt = $db_connection->prepare("INSERT INTO forgot_passwords (email, token, expiry) VALUES (?, ?, NOW())");
        $stmt->execute([$email, $token]);
    } catch (PDOException $e) {
        error_log("Forgot password: Database error: " . $e->getMessage());
        return false;
    }

    // 3. Send the reset email
    $subject = "Password Reset";
    $message = "Please click on the following link to reset your password: " . $reset_url;
    $headers = "From: your_email@example.com";  // Replace with your email

    if (mail($email, $subject, $message, $headers)) {
        error_log("Forgot password: Email sent to " . $email);
        return true;
    } else {
        error_log("Forgot password: Failed to send email to " . $email);
        return false;
    }
}


// Example usage (for testing - NEVER put sensitive data directly in your code)
// Replace these with actual values
$email = "testuser@example.com";  // Replace with a valid email
$token = "abcdef1234567890";
$reset_url = "https://yourwebsite.com/reset-password?token=" . urlencode($token); // Encode the token for the URL

if (forgot_password($email, $token, $reset_url)) {
    echo "Password reset email sent to " . $email;
} else {
    echo "Failed to send password reset email.";
}

?>


<?php

// Database credentials (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_password = 'your_db_password';

// Function to reset password
function forgotPassword($email, $newPassword) {
  // 1. Database Connection
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  // Check connection
  if ($conn->connect_error) {
    // Handle the connection error.  This is important for debugging.
    die("Connection failed: " . $conn->connect_error);
  }

  // 2. Hash the new password for security
  $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);

  // 3. SQL Query
  $sql = "UPDATE users SET password = '$hashedPassword' WHERE email = '$email'";

  // 4. Execute the Query
  if ($conn->query($sql) === TRUE) {
    // Password updated successfully
    echo "Password reset successfully.  Please check your email for details.";
  } else {
    // Handle query error
    echo "Error updating password: " . $conn->error;
  }

  // 5. Close the connection
  $conn->close();
}


// Example Usage (this part is just for demonstration.  It will NOT be part of the actual password reset process.)
// It's used to show how the function would be called.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $newPassword = $_POST["newPassword"];

  // *** IMPORTANT:  In a real application, you would NOT directly use user input
  //  like this for password resetting.
  //  You'd implement proper input validation, sanitization, and error handling.
  //  This example is for demonstration purposes only.

  forgotPassword($email, $newPassword);
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="newPassword">New Password:</label>
    <input type="password" id="newPassword" name="newPassword" required><br><br>

    <input type="submit" value="Reset Password">
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db connection)

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user requesting the password reset.
 * @return bool True if password reset email was sent successfully, false otherwise.
 */
function forgotPassword(string $email)
{
    // 1. Validate Email (basic check - customize as needed)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided."); // Log for debugging
        return false;
    }

    // 2. Check if the user exists
    $user = getUserByEmail($email);  // Implement this function (see below)

    if ($user === false) { // getUserByEmail should return false if user not found.
        error_log("User with email '$email' not found.");
        return false;
    }

    // 3. Generate a unique token and store it (using a hash)
    $token = generateUniqueToken();

    // 4.  Store the token in the database associated with the user
    $token_id = storeToken($user->id, $token);

    if ($token_id === false) {
        error_log("Failed to store token for user '$email'.");
        return false;
    }


    // 5.  Build the reset link
    $reset_link = "/reset_password.php?token=" . urlencode($token);

    // 6.  Send the reset email (implement this)
    if (!sendResetEmail($user->email, $reset_link)) {
        error_log("Failed to send reset email to '$email'.");
        //  Optionally, you might delete the token from the database if the email
        //  fails to send.  This prevents someone from stealing the token.
        deleteToken($token_id);
        return false;
    }


    return true;
}


/**
 *  Helper functions (you need to implement these)
 */

/**
 * Retrieves a user from the database based on email.  Replace with your actual database query.
 *
 * @param string $email The email address of the user to retrieve.
 * @return User|false The User object if found, or false if not found.
 */
function getUserByEmail(string $email)
{
    // **IMPORTANT:** Replace this with your actual database query to fetch user data
    // based on the email. This is just a placeholder.
    // Example (using a MySQL database):
    // $stmt = $db->prepare("SELECT * FROM users WHERE email = ?");
    // $stmt->bind_param("s", $email);
    // $stmt->execute();
    // $result = $stmt->get_result();

    // If the user is found:
    // if ($result->num_rows > 0) {
    //     $user = new User();
    //     $user->load($result->fetch_assoc());
    //     $stmt->close();
    //     return $user;
    // } else {
    //   $stmt->close();
    //   return false;
    // }

    // For demonstration purposes, return a fake user object if email is 'test@example.com'
    if ($email === 'test@example.com') {
      $user = new User();
      $user->id = 1;
      $user->email = $email;
      return $user;
    }

    return false;
}


/**
 * Generates a unique token.
 *  This should use a strong random string generator for security.
 *
 * @return string A unique token.
 */
function generateUniqueToken()
{
    return bin2hex(random_bytes(32)); // Generates a 32-byte random string
}


/**
 * Stores the token in the database for the given user ID.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token to store.
 * @return int|false The ID of the token if stored successfully, or false if there was an error.
 */
function storeToken(int $userId, string $token)
{
    // **IMPORTANT:** Replace this with your actual database query to store the token.
    // Example (using a MySQL database):
    // $stmt = $db->prepare("INSERT INTO tokens (user_id, token, expiry_date) VALUES (?, ?, ?)");
    // $stmt->bind_param("iii", $userId, $token, date('Y-m-d H:i:s', time() + 3600)); // expiry in 1 hour
    // $result = $stmt->execute();

    // if ($result === false) {
    //     error_log("Error storing token: " . error_get_last()['message']);
    //     return false;
    // }

    // Get the last inserted ID (assuming auto-increment)
    // $last_id = $db->insert_id;
    // $stmt->close();
    // return $last_id;

    // Placeholder - returning a dummy token ID
    return mt_rand(1, 100000); // Just a dummy for demonstration
}


/**
 * Deletes a token from the database based on its ID.
 *
 * @param int $token_id The ID of the token to delete.
 * @return bool True if the token was deleted successfully, false otherwise.
 */
function deleteToken(int $token_id)
{
    // **IMPORTANT:** Replace this with your actual database query to delete the token.
    // Example (using a MySQL database):
    // $stmt = $db->prepare("DELETE FROM tokens WHERE id = ?");
    // $stmt->bind_param("i", $token_id);
    // $result = $stmt->execute();

    // if ($result === false) {
    //     error_log("Error deleting token: " . error_get_last()['message']);
    //     return false;
    // }
    // $stmt->close();
    // return true;

    // Placeholder - returning true
    return true;
}

/**
 * Sends a password reset email to the specified email address.
 *
 * @param string $email The email address to send the email to.
 * @param string $reset_link The password reset link.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function sendResetEmail(string $email, string $reset_link)
{
    // **IMPORTANT:** Implement your email sending logic here.
    // This is just a placeholder.

    //Example using a fake email sending
    error_log("Sending reset email to: " . $email . " with link: " . $reset_link);

    return true;  // Always returns true for demonstration purposes
}

//  --------------------- User Class (example) ---------------------
class User {
  public $id;
  public $email;

  public function load($data) {
    $this->id = $data['id'];
    $this->email = $data['email'];
  }
}
?>


<?php

// This is a simplified example and should be used with caution.
// In a production environment, implement robust security measures.

class PasswordReset {

    private $db; // Database connection

    public function __construct($db) {
        $this->db = $db;
    }

    public function resetPassword($email) {
        // 1. Check if the user exists
        $user = $this->getUserByEmail($email);

        if (!$user) {
            return false; // User not found
        }

        // 2. Generate a unique token
        $token = bin2hex(random_bytes(32)); // Secure random token

        // 3. Store the token and expiration date in the database
        $this->saveToken($user->id, $token, time() + (24 * 60 * 60)); // Expires in 24 hours

        // 4. Email the user with the reset link
        $resetLink = $this->generateResetLink($user->email, $token);
        $subject = 'Password Reset';
        $message = 'Please click the link below to reset your password: ' . $resetLink;
        $headers = 'From: your_email@example.com' . "\r
"; // Replace with your email

        $result = mail($email, $subject, $message, $headers);

        if ($result === false) {
            // Mail failed, handle the error (log, etc.)
            return false;
        }

        return true;
    }


    private function getUserByEmail($email) {
        // Replace this with your actual database query
        // This is a placeholder. Adapt it to your database structure.
        // Example:
        // $stmt = $this->db->prepare("SELECT * FROM users WHERE email = ?");
        // $stmt->bind_param("s", $email);
        // $stmt->execute();
        // $result = $stmt->get_result();

        // Mock User Class (replace with your actual User class)
        class User {
            public $id;
            public $email;

            public function __construct($id, $email) {
                $this->id = $id;
                $this->email = $email;
            }
        }

        // Example User
        $user = new User(1, 'test@example.com');
        return $user;
    }

    private function saveToken($userId, $token, $expiry) {
        // Replace this with your actual database query
        // Example:
        // $stmt = $this->db->prepare("INSERT INTO password_resets (user_id, token, expiry) VALUES (?, ?, ?)");
        // $stmt->bind_param("iii", $userId, $token, $expiry);
        // $stmt->execute();
    }


    private function generateResetLink($email, $token) {
        return 'http://yourwebsite.com/reset-password?token=' . $token; // Replace with your reset link URL
    }
}

// Example Usage (replace with your actual database connection)
// IMPORTANT: This is just an example.  Do not use this directly in production!

// Mock Database Connection (Replace with your actual database connection)
$db = new mysqli('localhost', 'username', 'password', 'database');
if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

// Create an instance of the PasswordReset class
$passwordReset = new PasswordReset($db);

// Reset password for a user (replace with a real email)
$email = 'test@example.com'; // Replace with the user's email
if ($passwordReset->resetPassword($email)) {
    echo "Password reset link sent to " . $email;
} else {
    echo "Failed to send password reset link.";
}

$db->close(); // Close the database connection
?>


<?php

// Assuming you have a database connection established 
// and you have a 'users' table with an 'email' and 'password' column.

// 1. Function to Reset Password
function forgotPassword($email, $new_password) {
  // **Security Considerations:**
  // - Input validation is absolutely crucial.  Never trust user input!
  // - Use prepared statements with parameterized queries to prevent SQL injection.
  // - Hash the new password before storing it in the database.

  // **Input Validation (CRITICAL)**
  if (empty($email)) {
    return "Invalid email address.";
  }

  if (empty($new_password)) {
    return "Password cannot be empty.";
  }

  // **Password Hashing (IMPORTANT)**
  $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);  // Use a strong hashing algorithm.

  // **Database Query (Prepared Statement - SQL Injection Prevention)**
  try {
    $pdo = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERR_EXCEPTION);

    $stmt = $pdo->prepare("UPDATE users SET password = :password WHERE email = :email");
    $stmt->bindParam(':password', $hashed_password);
    $stmt->bindParam(':email', $email);
    $stmt->execute();

    if ($stmt->rowCount() > 0) {
      return "Password reset successfully.  Please check your email for verification (if you set up email verification).";
    } else {
      return "User not found with this email address.";
    }
  } catch (PDOException $e) {
    return "An error occurred while resetting your password: " . $e->getMessage();
  }
}

// 2. Example Usage (Illustrative - Not a full form)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $new_password = $_POST["new_password"];

  $reset_message = forgotPassword($email, $new_password);
  echo $reset_message;
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="new_password">New Password:</label>
    <input type="password" id="new_password" name="new_password" required><br><br>

    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique, random token and sends an email to the user
 * with instructions on how to reset their password.
 *
 * @param string $email The user's email address.
 * @param string $baseUrl The base URL of your website (e.g., 'https://www.example.com').
 * @return bool True if an email was sent, false otherwise.
 */
function forgot_password(string $email, string $baseUrl): bool
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format: " . $email); // Log for debugging
        return false;
    }

    // 2. Generate a Unique Token
    $token = bin2hex(random_bytes(32));

    // 3. Store the Token and User ID (IN A SECURE WAY!)
    //  IMPORTANT:  Never store passwords directly.  Store the *hashed* password,
    //  and this token provides a mechanism to let the user reset it.
    $userId = get_user_id_by_email($email); // Assumed function - implement this
    if ($userId === null) {
        error_log("User not found for email: " . $email); // Log for debugging
        return false;
    }


    // 4. Prepare the Reset URL
    $resetUrl = $baseUrl . "/reset-password?token=" . urlencode($token);

    // 5. Prepare the Email Message
    $subject = "Password Reset Request";
    $message = "Dear User,

" .
               "You have requested to reset your password.

" .
               "Please click on the following link to reset your password:
" .
               $resetUrl . "

" .
               "If you did not request this password reset, please ignore this email.";

    // 6. Send the Email
    $headers = "From: " . "noreply@" . getenv('DOMAIN') . "\r
"; // Use your domain
    $result = mail($email, $subject, $message, $headers);


    // 7. Return True if Email Sent, False Otherwise
    return $result === true;
}


/**
 *  Placeholder function - Replace with your actual implementation.
 *  This function should retrieve the user ID associated with the email.
 *
 * @param string $email The user's email address.
 * @return int|null The user ID, or null if not found.
 */
function get_user_id_by_email(string $email): ?int
{
    //  Replace this with your database query or whatever mechanism you use
    //  to get the user ID based on the email.  This is just a placeholder.
    //  Example:
    //  $db = new PDO(...);
    //  $stmt = $db->prepare("SELECT id FROM users WHERE email = ?");
    //  $stmt->execute([$email]);
    //  $row = $stmt->fetch(PDO::FETCH_ASSOC);
    //  return $row['id'] ?? null;


    // Example placeholder (returns a dummy value for demonstration)
    return 123;
}


// Example Usage (Replace with your actual email address and website URL)
$email = "testuser@example.com";
$baseUrl = "https://www.example.com";

if (forgot_password($email, $baseUrl)) {
    echo "Password reset email sent to " . $email . "
";
} else {
    echo "Failed to send password reset email.
";
}
?>


<?php

// Assuming you have a database connection established and a 'users' table
// with a 'email' column.

// 1.  Check if the form is submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // 2. Get the email from the form
  $email = $_POST["email"];

  // 3. Validate the email format (basic validation - enhance this!)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $error = "Invalid email format.";
  } else {
    // 4.  Check if the email exists in the database
    $stmt = $conn->prepare("SELECT id, password FROM users WHERE email = ?"); // Use prepared statement
    $stmt->bind_param("s", $email); // 's' indicates a string
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
      $error = "User with this email does not exist.";
    } else {
      // 5. Generate a temporary password (you can use a more secure method)
      $temporary_password = "temp_password_" . md5($email); // For demonstration, using MD5 - NOT recommended for production.

      // 6. Prepare the update statement
      $update_stmt = $conn->prepare("UPDATE users SET password = ? WHERE email = ?");
      $update_stmt->bind_param("ss", $temporary_password, $email);  // 's' indicates a string

      // 7. Execute the update
      if ($update_stmt->execute()) {
        $success = "Password reset email has been sent to your email address.";
        //  Send an email with the temporary password.  (See below for email sending)
      } else {
        $error = "Error resetting password.  Please try again.";
      }

      // 8. Close the statements
      $stmt->close();
      $update_stmt->close();
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <?php if (isset($error)) { ?>
    <p style="color: red;"><?php echo $error; ?></p>
  <?php } ?>

  <?php if (isset($success)) { ?>
    <p style="color: green;"><?php echo $success; ?></p>
  <?php } ?>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Your Email" value="<?php echo isset($email) ? htmlspecialchars($email) : ''; ?>">
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// ... (Database connection and setup - as before) ...

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // ... (Email validation - as before) ...

  if (!empty($result)) {
    $email = $result->email;
    $hashed_password = $result->password; // get the hashed password

    // Generate a new temporary password using password_hash
    $temporary_password = password_hash('temp_password_' . md5($email), PASSWORD_DEFAULT);

    // Update the password
    $update_stmt = $conn->prepare("UPDATE users SET password = ? WHERE email = ?");
    $update_stmt->bind_param("ss", $temporary_password, $email);

    if ($update_stmt->execute()) {
      $success = "Password reset email has been sent to your email address.";
    } else {
      $error = "Error resetting password.  Please try again.";
    }
  }
}

?>


<?php
// ... (view logic)
if ($hashed_password && isset($hashed_password)) {
  // Verify the temporary password
  if (password_verify('temp_password_' . md5($email), $hashed_password)) {
    // ...
  }
}
?>


<?php

// Database connection (Replace with your actual credentials)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_database_name";

// Function to handle password reset
function forgot_password($email)
{
  // 1. Check if the email exists in the database
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    // Handle the connection error. Log it or display a user-friendly message.
    error_log("Failed to connect to database: " . $conn->connect_error);
    return false; 
  }

  $query = "SELECT id, email FROM users WHERE email = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("s", $email);  // "s" indicates a string parameter
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    // Email doesn't exist
    $stmt->close();
    $conn->close();
    return false;
  }

  $user = $result->fetch_assoc();
  $userId = $user['id'];
  $stmt->close();

  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32));

  // 3. Store the token in the database
  $query = "UPDATE users SET reset_token = ? WHERE id = ?";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("ss", $token, $userId);
  $stmt->execute();

  if (!$stmt->affected_rows > 0) {
    // Error setting token.  Handle appropriately (logging, error display).
    $stmt->close();
    $conn->close();
    return false;
  }

  // 4.  Send an email to the user with the reset link
  $to = $email;
  $subject = "Password Reset";
  $message = "Click the link below to reset your password: " . $_SERVER['PHP_SELF'] . "?reset_token=" . $token;
  $headers = "From: your_email@example.com"; // Replace with your email address

  mail($to, $subject, $message, $headers);

  // 5. Close the connection
  $conn->close();

  return true;
}

// Example usage (for testing - this would typically be a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  if (empty($email)) {
    echo "Please enter your email address.";
  } else {
    if (forgot_password($email)) {
      echo "Password reset link sent to your email address.";
    } else {
      echo "An error occurred while sending the password reset link.";
    }
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo $_SERVER["PHP_SELF"]; ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Request Password Reset</button>
  </form>

</body>
</html>


<?php

/**
 * Forgot Password Function
 *
 * This function generates a secure, unique password reset token and sends it to
 * the user's email address.
 *
 * @param string $email The email address of the user.
 * @param string $tokenPrefix A prefix for the token to ensure uniqueness.
 * @param string $fromEmail The email address from which the reset email will be sent.
 * @param string $resetLinkBaseUrl The base URL where the reset link will be generated (e.g., 'https://example.com/reset-password').
 * @return bool True on success, false on failure (e.g., email sending issue).
 */
function forgotPassword(string $email, string $tokenPrefix = 'reset_', string $fromEmail = 'noreply@example.com', string $resetLinkBaseUrl = 'https://example.com/reset-password'): bool
{
    // 1. Generate a unique token
    $token = $tokenPrefix . bin2hex(random_bytes(32)); // Use bin2hex for proper hex encoding

    // 2. Store the token in the database (using a secure method - this is simplified for demonstration)
    // Replace this with your actual database interaction
    $isValid = saveTokenToDatabase($email, $token);

    if (!$isValid) {
        return false;
    }

    // 3. Create the reset link
    $resetLink = $resetLinkBaseUrl . '?token=' . urlencode($token); // urlencode for safe URL formatting

    // 4. Send the reset email
    $subject = 'Password Reset Request';
    $message = "Please click on the following link to reset your password: " . $resetLink;
    $headers = "From: " . $fromEmail . "\r
";
    $headers .= "Reply-To: " . $fromEmail . "\r
";
    $headers .= "Content-Type: text/html; charset=UTF-8\r
"; // Crucial for HTML emails

    if (mail($email, $subject, $message, $headers)) {
        return true;
    } else {
        // Handle email sending failure (e.g., log an error)
        error_log("Failed to send password reset email to " . $email);
        return false;
    }
}


/**
 * Placeholder function to simulate saving the token in the database.
 * Replace this with your actual database interaction.
 *
 * @param string $email The email address.
 * @param string $token The generated token.
 * @return bool True if the token was saved, false otherwise.
 */
function saveTokenToDatabase(string $email, string $token): bool
{
    // Simulate saving to a database (replace with your actual database code)
    // This is a very simple example and should be replaced with robust database interaction.

    // For demonstration:
    $tokens = ['john.doe@example.com' => $token, 'jane.doe@example.com' => $token];

    if (isset($tokens[$email])) {
        return true;
    } else {
        return false;
    }
}


// Example Usage:
$userEmail = 'john.doe@example.com';

if (forgotPassword($userEmail)) {
    echo "Password reset email sent to " . $userEmail . "
";
} else {
    echo "Failed to send password reset email to " . $userEmail . "
";
}


// Important Considerations & Security Best Practices:

// 1. Token Expiration:
//   - Always implement token expiration.  Set a reasonable expiration time (e.g., 1 hour) and invalidate the token after use.

// 2. Database Security:
//   - Use a strong password for your database.
//   - Employ prepared statements or parameterized queries to prevent SQL injection vulnerabilities.
//   - Consider using an ORM (Object-Relational Mapper) to simplify database interactions and enhance security.

// 3.  Secure Token Generation:
//    - Use `random_bytes()` for generating truly random tokens.  Avoid predictable or sequential token generation.
//    -  `bin2hex()` is important for proper hexadecimal encoding of the random bytes.

// 4.  URL Encoding:
//    - Always URL-encode the token in the reset link to prevent potential security issues. `urlencode()` handles this.

// 5.  Email Sending Security:
//   - Use a reliable email sending service or library to ensure deliverability and prevent spam issues.
//   - Avoid sending emails directly from your web server, as it can be a security risk.

// 6.  Logging and Monitoring:
//    - Log all password reset requests, including the email address, token, and timestamp.  Monitor these logs for suspicious activity.

// 7.  Rate Limiting:
//     - Implement rate limiting to prevent brute-force attacks on the password reset functionality.

// 8.  Sanitization and Validation:
//    - Sanitize and validate all user input to prevent cross-site scripting (XSS) and other vulnerabilities.


<?php

/**
 * Forgets a user's password.  This is a simplified example and
 * should be adapted to a real-world application with robust security measures.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password.  **IMPORTANT:  This example
 *                              doesn't securely hash the password.
 *                              You MUST use password_hash() in a production environment.**
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $newPassword)
{
    // 1. Validate Email and Password (Basic - Expand this for real use)
    if (empty($email) || empty($newPassword)) {
        return false;
    }

    // 2. Check if User Exists (Ideally use database query)
    // In a real app, you would query your database to confirm the email exists.
    // This is a placeholder for demonstration purposes.

    $user_exists = false; // Simulate user existing

    if($user_exists){
        // 3. Generate a Unique Token (IMPORTANT!)
        $token = bin2hex(random_bytes(32));

        // 4. Store the Token and User ID (In a real app, use a database)
        //  You'd typically store this in a table or a separate file.
        $userId = 123; // Placeholder user ID (replace with actual user ID)

        // 5. Create the Reset Token Data (Store this securely)
        $resetData = [
            'user_id' => $userId,
            'token' => $token,
            'expiry' => time() + 3600  // Token expires in 1 hour
        ];

        // 6.  Store the Reset Token Data - For Example, to a file.
        //  In a real app, use a database.  This is just a placeholder.
        file_put_contents('reset_tokens.txt', json_encode($resetData));  

        // 7. Send the Password Reset Email (Implement this)
        $subject = 'Password Reset';
        $message = "Click <a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'</a> to reset your password."; // Ensure proper URL encoding
        $headers = "From: your_email@example.com" . "\r
";

        mail($email, $message, $headers);

        return true; // Password reset link sent successfully
    } else {
        return false; // User not found
    }
}

// **Example Usage (for testing)**
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $newPassword = $_POST["newPassword"];

    if (forgotPassword($email, $newPassword)) {
        echo "Password reset link sent to your email.";
    } else {
        echo "Invalid email or password.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

<h1>Forgot Password</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
    <label for="email">Email:</label>
    <input type="text" id="email" name="email" required><br><br>

    <label for="newPassword">New Password:</label>
    <input type="password" id="newPassword" name="newPassword" required><br><br>

    <button type="submit">Reset Password</button>
</form>

</body>
</html>


<?php

/**
 * Forgets a user's password.
 *
 * This function sends a password reset link to the user's email address.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @param string $reset_token A unique token to be generated and stored.
 * @param $pdo PDO object to interact with the database.  This is crucial.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email, string $reset_token, PDO $pdo) {
    // 1. Sanitize and Validate Input
    $email = filter_var($email, FILTER_SANITIZE_EMAIL); // Sanitize input
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format: " . $email); // Log for debugging
        return false;
    }

    // 2. Generate a Unique Token
    $reset_token = bin2hex(random_bytes(32)); // Generate a strong, random token (important for security)


    // 3. Store Token in Database
    try {
        $stmt = $pdo->prepare("INSERT INTO password_resets (user_email, reset_token, created_at) VALUES (:email, :token, NOW())");
        $stmt->bindParam(':email', $email);
        $stmt->bindParam(':token', $reset_token);
        $stmt->execute();
        $reset_id = $pdo->lastInsertId();

        // 4. Send Password Reset Email (Example)
        $subject = "Password Reset Link";
        $headers = "From: your_email@example.com" . "\r
" .
                   "Reply-To: your_email@example.com";
        $message = "Click this link to reset your password: " . $_SERVER['PHP_SELF'] . "?reset=" . urlencode($reset_token);

        mail($email, $subject, $message, $headers);

        return true; // Indicate success

    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());  // Log database errors for debugging
        return false;
    }
}

// Example Usage (Illustrative - Adapt to Your Application)
//  This is NOT the entire application. This is just a demonstration.

// Assuming you have a PDO connection named $pdo
//  and you have a 'password_resets' table with columns:
//   - user_email (VARCHAR)
//   - reset_token (VARCHAR)
//   - created_at (TIMESTAMP)

//  Check if the email exists, but DON'T store the password yet.
//  You'll store the token, not the hashed password.

/*
$email = "testuser@example.com"; // Example email
$reset_token = generate_reset_token(); // Function to generate a random token
if (forgot_password($email, $reset_token, $pdo)) {
    echo "Password reset link has been sent to " . $email . ".";
} else {
    echo "Failed to send password reset link.";
}
*/
?>


<?php

/**
 *  Forgot Password Function
 *
 *  This function generates a unique token, sends an email with a reset link,
 *  and updates the user's password reset status in the database.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password for the user.
 * @param string $token  A unique token generated for the reset link. (Generated internally)
 * @param PDO $pdo      The PDO database connection object.
 *
 * @return bool True if the password reset process was initiated successfully,
 *              false otherwise (e.g., email sending failure, invalid email).
 */
function forgotPassword(string $email, string $newPassword, PDO $pdo)
{
    // 1. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // Use a cryptographically secure random function
    //  'bin2hex' converts the byte array from random_bytes() into a hexadecimal string.
    //  This is a standard way to create a unique token.


    // 2.  Prepare the SQL Query
    $sql = "UPDATE users SET password = :password, password_reset_token = :token, password_reset_token_expiry = :expiry, password_reset_status = 'valid' WHERE email = :email";

    // 3. Prepare the statement
    $stmt = $pdo->prepare($sql);


    // 4. Bind Parameters
    $stmt->bindParam(':password', $newPassword);
    $stmt->bindParam(':token', $token);
    $stmt->bindParam(':expiry', date('Y-m-d H:i:s', time() + (60 * 60 * 24))); // Expire after 24 hours
    $stmt->bindParam(':email', $email);


    // 5. Execute the Query
    if ($stmt->execute()) {
        // 6. Generate the Reset Link (Email Content)
        $resetLink = "https://yourwebsite.com/reset-password?token=" . $token;  // Replace yourwebsite.com

        // 7.  Send the Email (Implement your email sending logic here)
        $to = $email;
        $subject = 'Password Reset';
        $message = "Click the link below to reset your password:
" . $resetLink;
        $headers = 'From: yourwebsite@example.com' . "\r
";

        if (mail($to, $subject, $message, $headers)) {
            // Email sent successfully.
            return true;
        } else {
            // Email sending failed
            // Optionally log the error here.  Crucial for debugging.
            error_log("Error sending password reset email for " . $email);
            return false;
        }
    } else {
        // Query failed - likely an invalid email or other database issue
        error_log("Error updating password for " . $email);
        return false;
    }
}


// Example Usage (Replace with your actual database connection)
//  Important:  This is just an example.  You MUST adapt this to your specific setup.

// Dummy database connection (replace with your actual connection)
$host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$db_name;charset=utf8", $db_user, $db_password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}


$email = 'testuser@example.com';  // Replace with the user's email
$newPassword = 'newSecurePassword123';  // Replace with the new password

if (forgotPassword($email, $newPassword, $pdo)) {
    echo "Password reset email sent successfully!";
} else {
    echo "Failed to initiate password reset.";
}

?>


<?php

// Assuming you have a database connection established (e.g., $pdo)

function forgot_password($email, $token, $reset_password_link) {
  // 1. Validate Email and Token
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email format.";
  }

  if (empty($token)) {
    return "Invalid or missing token.";
  }

  // 2. Check if the token exists in the database for the given email
  $stmt = $pdo->prepare("SELECT id FROM users WHERE email = :email AND token = :token");
  $stmt->bindParam(':email', $email);
  $stmt->bindParam(':token', $token);
  $stmt->execute();

  if ($stmt->rowCount() == 0) {
    return "Invalid token or token does not exist.";
  }

  // 3.  Set token expiration (optional, but highly recommended)
  //  This prevents tokens from being used indefinitely
  $expiry_time = time() + (3600 * 24 * 7);  // Token expires in 7 days
  //  You would likely store the expiry_time in the database along with the token
  //  so you can check it when validating the token.  For this example, we'll
  //  assume the expiry is handled on the application side.


  // 4. Create a reset password link (generate a new token)
  $new_token = bin2hex(random_bytes(32));  // Generate a strong, random token
  $stmt = $pdo->prepare("UPDATE users SET token = :new_token, token_expiry = :expiry_time WHERE email = :email");
  $stmt->bindParam(':email', $email);
  $stmt->bindParam(':new_token', $new_token);
  $stmt->bindParam(':expiry_time', $expiry_time);
  $stmt->execute();

  // 5.  Return the reset password link.
  //  You'll need to format this link for display on your website.
  $reset_url = $reset_password_link . "?token=" . $new_token;

  return $reset_url;
}


// Example Usage (Illustrative - replace with your actual logic)
// Assuming you have a database connection $pdo
// $email = $_POST['email']; // Get email from form
// $token = $_POST['token'];  // Get token from form (e.g., from a POST request)

// if (isset($email) && isset($token)) {
//   $reset_url = forgot_password($email, $token, $reset_password_link);
//   echo $reset_url; // Display the reset password link
// } else {
//   echo "Please provide email and token.";
// }



?>


<?php

// Assuming you have a database connection established and a user table named 'users'
// with columns 'id', 'email', 'password', etc.

// Function to handle the forgot password process
function forgot_password($email) {
    // 1. Verify the email exists
    $user = get_user_by_email($email);  // Implement this function (see example below)

    if (!$user) {
        return "Email not found.";
    }

    // 2. Generate a unique token
    $token = generate_unique_token();

    // 3. Store the token and expiry time in the database
    store_token($user['id'], $token, time() + (24 * 60 * 60)); // Token expires in 24 hours

    // 4. Send an email with the reset link
    $reset_link = generate_reset_link($token);
    send_password_reset_email($user['email'], $reset_link);

    return "Password reset email has been sent to your email address.";
}

// Example function to retrieve a user by email (Implement this)
function get_user_by_email($email) {
    // Replace this with your actual database query
    // This is just a placeholder for demonstration.
    // In a real application, you'd fetch the user from your database.
    $users = [
        ['id' => 1, 'email' => 'user1@example.com', 'password' => 'password123'],
        ['id' => 2, 'email' => 'user2@example.com', 'password' => 'secure_password']
    ];

    foreach ($users as $user) {
        if ($user['email'] == $email) {
            return $user;
        }
    }
    return false;
}

// Example function to generate a unique token (Implement this)
function generate_unique_token() {
    return bin2hex(random_bytes(32)); // Generates a 32-byte random string
}

// Example function to generate a reset link (Implement this)
function generate_reset_link($token) {
    return 'https://yourdomain.com/reset-password?token=' . $token;
}

// Example function to store the token and expiry time in the database
function store_token($user_id, $token, $expiry_time) {
    // Implement your database code here.  For example:
    // Assuming you have a database connection $conn
    // You would use a query like:
    // INSERT INTO password_resets (user_id, token, expiry_time)
    // VALUES ($user_id, $token, $expiry_time);
}

// Example function to send a password reset email (Implement this)
function send_password_reset_email($email, $reset_link) {
    // Implement your email sending logic here
    // Use a library like PHPMailer or SwiftMailer to send emails.

    // Placeholder for demonstration
    echo "Sending password reset email to: " . $email . "
";
    echo "Reset Link: " . $reset_link . "
";
}


// Example Usage:
$email_to_reset = 'user1@example.com'; // Replace with the user's email

$result = forgot_password($email_to_reset);
echo $result . "
";

?>


<?php

// **Important Security Note:**  This is a simplified example for educational purposes.
// In a production environment, you **MUST** implement much stronger security measures 
// to prevent abuse and account compromise.  Consider using a dedicated password reset library,
// and employ robust rate limiting, email verification, and other security best practices.

// Database connection details (replace with your actual credentials)
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_db_user";
$db_pass = "your_db_password";

// 1.  Retrieve User Information
function forgotPassword($email) {
  global $db_host, $db_name, $db_user, $db_pass;

  // Connect to the database
  $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

  if ($conn->connect_error) {
    return false; // Handle database connection error
  }

  // Prepare and execute the query to find the user
  $stmt = $conn->prepare("SELECT id, username, password_reset_token, email FROM users WHERE email = ?");
  $stmt->bind_param("s", $email); // "s" indicates a string parameter
  $stmt->execute();

  $result = $stmt->get_result();

  // Check if the user exists
  if ($result->num_rows == 0) {
    $stmt->close();
    $conn->close();
    return false; // User not found
  }

  $user = $result->fetch_assoc();
  $stmt->close();

  // 2. Generate a Unique Password Reset Token
  $token = bin2hex(random_bytes(32)); // Generate a cryptographically secure random token

  // 3.  Update the User Record with the Token
  $update_stmt = $conn->prepare("UPDATE users SET password_reset_token = ?, expiration = NOW() + INTERVAL 24 HOUR WHERE email = ?"); //Expiration after 24 hours
  $update_stmt = $conn->prepare("UPDATE users SET password_reset_token = ?, expiration = NOW() + INTERVAL 24 HOUR WHERE email = ?");
  $update_stmt->bind_param("ss", $token, $user['id']); //'ss' for two string parameters
  $update_stmt->execute();
  if (!$update_stmt->affected_rows > 0) {
    return false; // Update failed
  }


  // 4.  Send the Password Reset Link (Email)
  $to = $user['email'];
  $subject = 'Password Reset Link';
  $message = "Click this link to reset your password: " . $_SERVER['PHP_SELF'] . "?reset_token=" . urlencode($token);
  $headers = "From: your_email@example.com"; // Replace with your email address

  mail($to, $subject, $message, $headers);

  // Return true to indicate success
  return true;
}


// Example Usage (This would typically be handled via a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];

  if (empty($email)) {
    echo "Error: Email cannot be empty.";
  } else {
    if (forgotPassword($email)) {
      echo "Password reset email has been sent to $email.";
    } else {
      echo "Failed to reset password. Please try again.";
    }
  }
}


// HTML Form for Sending the Request (for testing)
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>
  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>
</body>
</html>


<?php

/**
 * Forgot Password Function
 *
 * Generates a unique token and an email link for password reset.
 *
 * @param string $email The email address of the user.
 * @param string $baseUrl The base URL of your website (e.g., 'https://example.com').
 * @return bool True if an email was sent successfully, false otherwise.
 */
function forgot_password(string $email, string $baseUrl) {
    // 1. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // Use random_bytes for better randomness

    // 2. Create the Reset Link
    $reset_link = $baseUrl . '/reset_password?token=' . urlencode($token);

    // 3. Prepare the Reset Email Content
    $subject = "Password Reset Request";
    $message = "Dear User,

" .
               "You requested a password reset.
" .
               "Please click on the following link to reset your password:
" .
               "<a href='" . $reset_link . "'>Reset Password</a>

" .
               "This link expires in 24 hours.

" .
               "Sincerely,
" .
               "The Example App Team";

    // 4. Send the Email (using PHPMailer - install via composer require phpmailer/phpmailer)
    if (send_email($email, $subject, $message)) {
        return true;
    } else {
        return false;
    }
}


/**
 *  Helper function to send an email using PHPMailer
 * @param string $to
 * @param string $subject
 * @param string $message
 * @return bool
 */
function send_email(string $to, string $subject, string $message) {
    require_once 'vendor/phpmailer/phpmailer/src/PHPMailer.php'; // Adjust path if necessary
    require_once 'vendor/phpmailer/phpmailer/src/Exception.php';

    $mail = new PHPMailer(true);

    // SMTP
    $mail->isSMTP();
    $mail->Host       = 'smtp.example.com'; // Replace with your SMTP server
    $mail->SMTPAuth   = true;
    $mail->Username   = 'your_smtp_username'; // Replace with your SMTP username
    $mail->Password   = 'your_smtp_password';   // Replace with your SMTP password
    $mail->Port       = 587; // Or your SMTP port (e.g., 465 for SSL)
    $mail->SMART_HOST = true;

    // Set From
    $mail->setFrom('your_email@example.com', 'Example App'); // Replace with your email

    // Add CC, BCC if needed
    // $mail->addCC('cc@example.com');
    // $mail->addBCC('bcc@example.com');

    // Headers
    $mail->addHeader('Subject', $subject);

    // Body
    $mail->msgBody($message);

    // Send the Email
    if ($mail->send()) {
        return true;
    } else {
        // Handle errors - log them or display to the user.
        error_log($mail->ErrorInfo); // Log for debugging
        return false;
    }
}



// --- Example Usage ---

// Replace with actual email address
$email = 'testuser@example.com';

// Replace with your website's base URL
$baseUrl = 'https://yourwebsite.com'; // Or http://

if (forgot_password($email, $baseUrl)) {
    echo "Password reset email sent to " . $email . " successfully.";
} else {
    echo "Failed to send password reset email to " . $email . ".";
}

?>


<?php

/**
 * Forgets a user's password and initiates a password reset process.
 *
 * @param string $email The user's email address.
 * @param string $reset_token A unique token generated for the password reset request.
 * @param string $db_connection A valid database connection object.
 *
 * @return bool True if the password reset token is found and the password is reset, 
 *             false otherwise.
 */
function forgot_password(string $email, string $reset_token, $db_connection) {
    // 1. Verify the token exists
    $sql = "SELECT id, email FROM users WHERE email = ? AND reset_token = ?";
    $stmt = $db_connection->prepare($sql);
    $stmt->bind_param("ss", $email, $reset_token);
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        $user = $result->fetch_assoc();
        $userId = $user['id'];
        $userEmail = $user['email'];

        // 2.  Reset the password (Here you would typically change the password)
        //  This is just a placeholder.  In a real application, you would
        //  generate a random password, store it securely, and notify the user.

        // Example: Reset to a temporary password
        $newPassword = "temporarypassword123"; //  Replace with a secure password generation
        $sql = "UPDATE users SET password = ?, reset_token = '', last_password_reset = NOW() WHERE id = ?";
        $stmt = $db_connection->prepare($sql);
        $stmt->bind_param("ssi", $newPassword, $userId, $userEmail);
        $stmt->execute();

        if ($stmt->affected_rows > 0) {
            // 3. Send a password reset email (Include the new password)
            $to = $userEmail;
            $subject = 'Password Reset';
            $message = "Please use the following password to log in: $newPassword";
            $headers = "From: your-website@example.com\r
";
            mail($to, $subject, $message, $headers);

            return true; // Password reset successful
        } else {
            return false; // Failed to reset password
        }

    } else {
        return false; // Token not found
    }
}

// Example Usage (Illustrative - Requires a database connection)
// $db_connection = new mysqli("localhost", "username", "password", "database_name");
// if ($db_connection->connect_error) {
//     die("Connection failed: " . $db_connection->connect_error);
// }

// $email = "test@example.com"; // Replace with a valid email address
// $reset_token = "xyz123"; // Generate a unique token (e.g., using a library or random string)

// if (forgot_password($email, $reset_token, $db_connection)) {
//     echo "Password reset initiated.  Check your email for instructions.";
// } else {
//     echo "Password reset failed. Please check the email address and token.";
// }

// Close the database connection (Important!)
// $db_connection->close();

?>


<?php

// Database connection details - REPLACE WITH YOUR ACTUAL DETAILS
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_database_username";
$db_pass = "your_database_password";

// Function to reset password
function forgot_password($email, $new_password, $db_host, $db_name, $db_user, $db_pass) {
    // Validate email format (basic check)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // Connect to the database
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

    // Check connection
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    // Hash the new password
    $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

    // Prepare the SQL query
    $sql = "UPDATE users SET password = '$hashed_password' WHERE email = '$email'";

    // Execute the query
    if ($conn->query($sql) === TRUE) {
        return "Password reset email sent successfully.";
    } else {
        return "Error resetting password. " . $conn->error;
    }

    $conn->close();
}


// Example Usage (for demonstration - this would be handled by a form submission)
// $email = $_POST['email'];
// $new_password = $_POST['new_password'];

// if (isset($email) && isset($new_password)) {
//     $result = forgot_password($email, $new_password, $db_host, $db_name, $db_user, $db_pass);
//     echo $result;
// } else {
//     echo "Please fill in the email and new password fields.";
// }


//  ---  IMPORTANT:  Replace this with your actual form handling code  ---
//  This example shows the basic structure. You'll need to add HTML form elements
//  to capture the email and new password.  Make sure to sanitize and validate
//  all user input to prevent security vulnerabilities.
//
//  Example HTML Form:
//
//  <form method="post" action="">
//      <label for="email">Email:</label>
//      <input type="email" id="email" name="email" required><br><br>
//
//      <label for="new_password">New Password:</label>
//      <input type="password" id="new_password" name="new_password" required><br><br>
//
//      <button type="submit">Reset Password</button>
//  </form>
?>


<?php

// ... (database connection code as before) ...

// Function to reset password with prepared statements
function forgot_password($email, $new_password, $db_host, $db_name, $db_user, $db_pass) {
    // Validate email format (basic check)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // Connect to the database
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

    // Check connection
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    // Hash the new password
    $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

    // Prepare the SQL query using a prepared statement
    $sql = "UPDATE users SET password = ? WHERE email = ?";

    // Prepare the statement
    $stmt = $conn->prepare($sql);

    // Bind the parameters
    $stmt->bind_param("s", $hashed_password, $email); // "s" indicates a string parameter

    // Execute the query
    if ($stmt->execute() === TRUE) {
        return "Password reset email sent successfully.";
    } else {
        return "Error resetting password. " . $conn->error;
    }

    $stmt->close();
    $conn->close();
}

// ... (rest of the code) ...
?>


<?php

// This is a simplified example and should be adapted for your specific security needs.
// It's crucial to implement robust security measures, especially for production environments.

// Database connection (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_password = 'your_db_password';

// Function to send an email (replace with your email sending logic)
function send_reset_email($email, $token) {
  //  This is a placeholder.  Implement your email sending code here.
  //  Use a reliable email service (e.g., PHPMailer, SwiftMailer)
  //  to ensure proper email delivery.

  $subject = 'Password Reset';
  $message = "Please click the link below to reset your password:
" .
             '<a href="?reset_token=' . $token . '">Reset Password</a>';
  $headers = 'From: your_email@example.com' . "\r
";

  //  For testing, you can echo the email content
  //  echo $message . "

";
  //  In a real application, you would send this email using the $message and $headers.

  // Placeholder:  For demonstration only.  Do not use this in production!
  error_log("Reset email sent to: " . $email . " with token: " . $token);
}


function forgot_password($email) {
  // 1. Check if the email exists in the user table
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  $stmt = $conn->prepare("SELECT id, username FROM users WHERE email = ?");
  $stmt->bind_param("s", $email);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    $stmt->close();
    $conn->close();
    return false; // Email not found
  }

  $user_id = $result->fetch_assoc()['id'];
  $username = $result->fetch_assoc()['username'];

  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32)); // Generate a strong, random token

  // 3. Store the token in the database associated with the user
  $stmt = $conn->prepare("UPDATE users SET reset_token = ? WHERE email = ?");
  $stmt->bind_param("ss", $token, $email);
  $stmt->execute();

  if ($stmt->affected_rows == 0) {
    $stmt->close();
    $conn->close();
    return false; // Token not stored - likely a database error
  }

  // 4. Send the reset email
  send_reset_email($email, $token);

  // 5. Close connections
  $stmt->close();
  $conn->close();

  return true; // Success
}


// Example usage (for demonstration - this would be in your form handling)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];

  if (empty($email)) {
    echo "Please enter your email address.";
  } else {
    if (forgot_password($email)) {
      echo "Password reset email has been sent to your email address.  Please check your inbox.";
    } else {
      echo "An error occurred while processing your request.";
    }
  }
}
?>

<!-- HTML Form to Trigger the Password Reset -->
<form method="post" action="">
  <label for="email">Email:</label>
  <input type="email" id="email" name="email" required>
  <button type="submit">Reset Password</button>
</form>


<?php

/**
 * Forgot Password Function
 *
 * This function allows a user to reset their password.
 *
 * **Important Security Considerations:**
 * - **Never store passwords in plain text.** Always use a strong hashing algorithm (e.g., bcrypt, Argon2id) with a salt.
 * - **Rate Limiting:** Implement rate limiting to prevent brute-force attacks.
 * - **Email Verification:** Strongly consider adding email verification to the reset link to ensure it's actually going to the intended user.
 * - **Session Management:**  Use secure and proper session management.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @return bool True on success, false on failure.  Prints error messages to the browser if needed.
 */
function forgot_password($email)
{
    // Sanitize the email address to prevent injection vulnerabilities
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);

    // Validate the email format
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        echo "<p style='color:red;'>Invalid email address.</p>";
        return false;
    }

    // Check if the user exists in the database
    $user = get_user_by_email($email); // Replace with your database query

    if ($user === null) {
        echo "<p style='color:red;'>User not found.</p>";
        return false;
    }

    // Generate a unique token
    $token = generate_unique_token();  // Replace with your token generation function

    // Store the token associated with the user's email.  (Use a database or session)
    // Example using a database:
    // $result = mysqli_query($conn, "INSERT INTO password_resets (user_id, token, expires_at) VALUES ($user_id, '$token', NOW() + INTERVAL 1 HOUR)");

    // Example using sessions (less secure for long-term storage):
    $_SESSION['reset_token'] = $token;
    $_SESSION['reset_user_id'] = $user['id']; // Store user ID for security
    $_SESSION['reset_expiry'] = date('Y-m-d H:i:s', time() + 3600); // 1 hour expiry

    // Send an email with the reset link
    $subject = 'Password Reset';
    $to = $email;
    $reset_link = generate_reset_link($token); // Generate the reset link
    $message = "Click this link to reset your password: " . $reset_link;
    $headers = 'From: your_website@example.com' . "\r
";

    if (mail($to, $subject, $message, $headers)) {
        echo "<p style='color:green;'>Password reset email sent to $email.</p>";
        return true;
    } else {
        echo "<p style='color:red;'>Failed to send password reset email.</p>";
        return false;
    }
}


/**
 * Placeholder functions - Replace with your actual implementations.
 */

/**
 * Placeholder to get a user by their email.
 *
 * @param string $email The email address.
 * @return array|null An array containing user data, or null if not found.
 */
function get_user_by_email($email)
{
    // Replace this with your database query to retrieve the user.
    // Example using mysqli:
    // $result = mysqli_query($conn, "SELECT * FROM users WHERE email = '$email'");
    // If the query returns a row, you'll typically fetch it using mysqli_fetch_assoc() or similar.
    // If no row is found, mysqli_fetch_assoc() returns false.

    // For demonstration, returning a dummy user:
    $dummy_user = [
        'id' => 123,
        'email' => 'test@example.com',
        'password' => 'hashed_password'  // Remember to hash passwords!
    ];
    return $dummy_user;
}


/**
 * Placeholder to generate a unique token.
 *
 * @return string A unique token.
 */
function generate_unique_token()
{
    return bin2hex(random_bytes(32));  // Use a cryptographically secure random number generator
}


/**
 * Placeholder to generate a reset link.
 *
 * @param string $token The token.
 * @return string The reset link.
 */
function generate_reset_link($token)
{
    return 'http://yourwebsite.com/reset-password?token=' . $token;
}

?>


<?php

// Ensure this file is part of a secure application
// and handle credentials securely in a real-world scenario.
// This example is for demonstration purposes only.

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_password = 'your_db_password';

// Function to handle the forgot password process
function forgot_password($email)
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // 2. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator

    // 3.  Store the token in the database for the given email
    //  Important:  Use prepared statements to prevent SQL injection.
    try {
        $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_password);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling

        $stmt = $pdo->prepare("INSERT INTO forgot_passwords (email, token, created_at) VALUES (?, ?, NOW())");
        $stmt->execute([$email, $token]);
    } catch (PDOException $e) {
        // Handle database errors appropriately - logging is important!
        error_log("Database error: " . $e->getMessage());
        return "An error occurred while generating the token.  Please try again.";
    }

    // 4.  Send an email with the reset link
    $subject = "Password Reset Link";
    $to = $email;
    $from = 'your_app_email@example.com'; // Replace with your app's email address
    $reset_link = "http://yourwebsite.com/reset_password?token=$token"; // Replace with your website URL

    $headers = [
        'From' => $from,
        'Reply-To' => $from,
        'X-Mailer' => 'PHPmailer 5.2.0'
    ];

    // Example using PHPMailer (you'll need to install it: composer require phpmailer/phpmailer)
    //  You'll need to configure the SMTP settings (host, port, username, password) 
    //  for your email server.
    //  If you don't use PHPMailer, you'll need a different email sending library or service.
    //  For simplicity, this example doesn't include error handling for the email sending part.

    if (mail($to, $subject, $reset_link, $headers)) {
        return "Password reset instructions have been sent to your email address.";
    } else {
        //Handle email sending errors
        error_log("Failed to send email. Check your server's email configuration.");
        return "Password reset instructions could not be sent. Please check your email and try again.";
    }
}



// Example Usage (for testing - handle this safely in your application)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $result = forgot_password($email);
    echo "<p>" . $result . "</p>";
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>
    <h1>Forgot Password</h1>
    <form method="post" action="">
        <label for="email">Enter your email address:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>
</body>
</html>


<?php

// Assuming you have a database connection established, let's call it $db

// Function to handle the forgot password flow
function forgotPassword($email) {
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email format.";
    }

    // 2. Check if the email exists in the users table
    $stmt = $db->prepare("SELECT id, password_reset_token FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        return "User not found.";
    }

    // 3. Generate a unique token
    $token = bin2hex(random_bytes(32)); // Secure random token

    // 4.  Update user's record with the token
    $stmt = $db->prepare("UPDATE users SET password_reset_token = ? WHERE email = ?");
    $stmt->execute([$token, $email]);

    // 5.  Send an email with the reset link
    $subject = "Password Reset Link";
    $to = $email;
    $from = "your_email@example.com"; // Replace with your actual email address
    $resetLink = "http://yourwebsite.com/reset_password?token=$token"; // Replace with your website URL

    $headers = "From: " . $from . "\r
";
    $headers .= "Reply-To: " . $from . "\r
";
    $headers .= "Content-Type: text/html; charset=UTF-8\r
";

    $message = "<html><body>";
    $message .= "<h1>Password Reset</h1>";
    $message .= "<p>Click on the link below to reset your password:</p>";
    $message .= "<a href='" . $resetLink . "'>Reset Password</a>";
    $message .= "<p>This link will expire in 24 hours.</p>";
    $message .= "</body></html>";

    if (mail($to, $subject, $message, $headers)) {
        return "Password reset email sent to $email. Please check your inbox.";
    } else {
        return "Failed to send password reset email.";
    }
}

// Example Usage (Assuming you have a form to submit the email)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $result = forgotPassword($email);
    echo "<p>" . $result . "</p>";
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// **Important Security Notes:**
// * This code is a basic example and should NOT be used in a production environment without significant security enhancements.
// * NEVER store passwords directly in the database.  Always hash them using a strong hashing algorithm like bcrypt or Argon2.
// * This example uses a simple email verification. For a real application, you'd want to use a more robust system.
// * Consider using a dedicated password reset service for better security and user experience.
// * Implement rate limiting and anti-abuse measures to prevent brute-force attacks.

// Configuration
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';
$from_email = 'your_email@example.com'; // Sender email address
$website_url = 'https://yourwebsite.com'; // Website URL

// Function to reset the password
function forgot_password($email, $website_url) {
  // 1. Database Connection (Replace with your actual database connection)
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32)); // Generate a cryptographically secure token

  // 3. Store the token in the database (associate with the email)
  $sql = "INSERT INTO forgot_password_tokens (email, token, expiry_timestamp)
          VALUES ('$email', '$token', NOW() + INTERVAL 24 HOUR)"; // Expires after 24 hours

  if ($conn->query($sql) === FALSE) {
    echo "Error inserting token: " . $conn->error;
    return false;
  }

  // 4.  Create and send the password reset email
  $subject = 'Password Reset Request';
  $message = "Hello,

" .
             "You have requested a password reset for your account.

" .
             "Please click on the following link to reset your password:
" .
             "<a href='" . $website_url . "/reset_password.php?token=$token'>Reset Password</a>

" .
             "If you did not request this password reset, please ignore this email.

" .
             "Sincerely,
" .
             $website_url;

  $headers = "From: " . $from_email . "\r
";
  $headers .= "Reply-To: " . $from_email . "\r
";

  if (!mail($email, $subject, $message, $headers)) {
    echo "Error sending email.
";
    // Attempt to delete the token in case email sending failed.  This is crucial.
    $delete_sql = "DELETE FROM forgot_password_tokens WHERE email = '$email'";
    if ($conn->query($delete_sql) === FALSE) {
        echo "Error deleting token: " . $conn->error;
    }
    return false;
  }

  return true;
}

// Example Usage (Simulated Form Submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = filter_input(INPUT_POST, 'email', FILTER_SANITIZE_EMAIL); // Sanitize email

  if (empty($email)) {
    echo "Please enter your email address.";
  } else {
    if (forgot_password($email, $website_url)) {
      echo "Password reset email sent to " . $email;
    } else {
      echo "Password reset failed.";
    }
  }
}

?>


<?php

// Assuming you have a database connection established and available as $db

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password to set.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email, string $newPassword) {
  // 1. Validate input (very important!)
  if (empty($email) || empty($newPassword)) {
    return false; // Return false if either email or password is empty
  }

  // 2. Check if the email exists in the database
  $stmt = $db->prepare("SELECT id FROM users WHERE email = ?");
  $stmt->bind_param("s", $email); // 's' indicates a string
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    $stmt->close();
    return false; // Email not found
  }

  // 3. Hash the new password (VERY IMPORTANT for security)
  $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

  // 4. Update the user's password in the database
  $stmt = $db->prepare("UPDATE users SET password = ? WHERE email = ?");
  $stmt->bind_param("ss", $hashedNewPassword, $email); // 's' indicates a string
  $exec_result = $stmt->execute();

  if ($exec_result) {
    $stmt->close();
    return true; // Password reset successful
  } else {
    // Handle errors:  Print the error message for debugging
    error_log("Error resetting password for user: " . $email . " - " . $db->error);  // Log the error
    return false;
  }
}

// Example Usage (For demonstration purposes - DO NOT USE THIS IN PRODUCTION)
// $emailToReset = "testuser@example.com";
// $newPass = "NewPassword123";

// if (forgot_password($emailToReset, $newPass)) {
//   echo "Password reset successful! Please check your email.";
// } else {
//   echo "Password reset failed.";
// }


?>


<?php

// Ensure this file is protected (only accessible via HTTP GET or POST requests)
if (!isset($_SERVER['REQUEST_METHOD']) || $_SERVER['REQUEST_METHOD'] !== 'POST') {
  header("Location: /"); // Redirect to the homepage or appropriate login page
  exit;
}

// Include database connection (replace with your actual database connection)
require_once 'config.php'; // Assuming you have a config.php file

// Get the email from the request
$email = $_POST['email'];

// Validate the email format (basic validation - consider more robust validation)
if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
  echo "Invalid email format.";
  exit;
}

// Check if the email already exists in the database
$stmt = $conn->prepare("SELECT id, email FROM users WHERE email = ?");
$stmt->bind_param("s", $email);
$stmt->execute();
$result = $stmt->get_result();

if ($result->num_rows > 0) {
  // Email exists, generate a token and send a password reset email
  $token = bin2hex(random_bytes(32)); // Generate a random token for security
  $reset_link = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $token;

  // Prepare the email message
  $subject = 'Password Reset';
  $message = "Click on the following link to reset your password: " . $reset_link;
  $headers = 'From: ' . $from_email;

  // Send the email (replace with your email sending function/library)
  if (send_email($email, $subject, $message, $headers)) {
    // Password reset link sent successfully
    echo "Password reset email sent to your email address.";
  } else {
    // Failed to send email
    echo "Failed to send password reset email. Please try again.";
  }
} else {
  // Email doesn't exist
  echo "Email address not found.";
}

// Clean up the database connection
$stmt->close();

?>


<?php

// Database connection (Replace with your actual database details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Function to reset password
function forgotPassword($email, $newPassword) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false; // Invalid email format
  }

  // 2. Connect to Database
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    // Handle connection error (Log it, display an error message, etc.)
    error_log("Database connection failed: " . $conn->connect_error);
    return false;
  }

  // 3. Hash the new password (VERY IMPORTANT for security)
  $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT);

  // 4. SQL Query - Update the password
  $sql = "UPDATE users SET password = '$hashedNewPassword' WHERE email = '$email'"; 

  if ($conn->query($sql) === TRUE) {
    return true; // Password updated successfully
  } else {
    // Handle query error (Log it, display an error message, etc.)
    error_log("Query failed: " . $conn->error);
    return false;
  }

  // 5. Close the connection
  $conn->close();
}


// Example Usage (This is just for testing - NEVER expose this in a public-facing application!)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $newPassword = $_POST["newPassword"];

  if (empty($email) || empty($newPassword)) {
    echo "<p>Email and new password are required.</p>";
  } else {
    // Call the function to reset the password
    $resetResult = forgotPassword($email, $newPassword);

    if ($resetResult) {
      echo "<p>Password reset successful. Please check your email.</p>";
    } else {
      echo "<p>Password reset failed. Please try again.</p>";
    }
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h2>Forgot Password</h2>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="newPassword">New Password:</label>
    <input type="password" id="newPassword" name="newPassword" required><br><br>

    <input type="submit" value="Reset Password">
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established and a 'users' table
// with a 'email' column.  This is a simplified example and 
// should be adapted to your specific database structure and security needs.

// **IMPORTANT SECURITY NOTES:**
// * **NEVER store passwords directly in the database.**  Always use a secure hashing algorithm like bcrypt or Argon2.
// * **Rate Limiting:**  Implement rate limiting on password reset requests to prevent brute-force attacks.
// * **Email Verification:**  Always verify the reset link via email to ensure the user is actually requesting a reset and not a malicious actor.
// * **Secure Session Handling:** Properly handle sessions to prevent session hijacking.
// * **Sanitize and Validate Input:**  Validate all user input rigorously.
// * **Error Handling:** Implement robust error handling to catch and log any issues.


// Function to reset password
function reset_password($email, $token) {
    // 1. Database Query - Retrieve user information based on email and token
    $conn = // your database connection here
    $sql = "SELECT * FROM users WHERE email = ? AND reset_token = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ss", $email, $token);
    $stmt->execute();

    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        // User not found or token invalid
        return false;
    }

    $user = $result->fetch_assoc();


    // 2. Generate a new, unique token (Important for security)
    $new_token = bin2hex(random_bytes(32)); // Generate a cryptographically secure random token

    // 3. Update the user's record with the new token
    $update_sql = "UPDATE users SET reset_token = ? WHERE email = ?";
    $update_stmt = $conn->prepare($update_sql);
    $update_stmt->bind_param("ss", $new_token, $email);
    $update_stmt->execute();


    // 4.  Create the reset link/email
    $reset_link = "https://yourdomain.com/reset-password?token=" . $new_token; // Replace yourdomain.com

    // 5. Send the reset email (using a proper email sending library)
    // Example using PHPMailer (you need to install it: composer require phpmailer/phpmailer)
    //  (This part is simplified for demonstration purposes)
    // Requires Composer to be installed
    // composer require phpmailer/phpmailer
    //
    // $mail = new PHPMailer(true);
    // $mail->isSMTP();
    // $mail->Host = 'smtp.example.com';
    // $mail->Port = 587;
    // $mail->SMTPAuth = true;
    // $mail->Username = 'your_email@example.com';
    // $mail->Password = 'your_password';
    // $mail->SetFrom('your_email@example.com', 'Your Website Name');
    // $mail->Subject = 'Password Reset';
    // $mail->Body = "Click the following link to reset your password: " . $reset_link;
    // $mail->send();


    return true; // Password reset link generated successfully

}



// Example Usage (in a web form or API endpoint)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $token = $_POST["token"];

    if (reset_password($email, $token)) {
        echo "Password reset link has been generated.  Check your email.";
    } else {
        echo "Invalid email or token.";
    }
}
?>


<?php

// Assuming you have a database connection established (e.g., $db)

// Function to handle password reset
function forgot_password($email) {
  // 1. Check if the email exists in the user table
  $stmt = $db->prepare("SELECT id, email FROM users WHERE email = ?");
  $stmt->bind_param("s", $email);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    // Email not found
    $stmt->close();
    return false;
  }

  $user = $result->fetch_assoc();
  $stmt->close();

  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32));  // Use a cryptographically secure random number generator
  // 3. Store the token in the database for the user.
  $stmt = $db->prepare("UPDATE users SET reset_token = ? WHERE email = ?");
  $stmt->bind_param("ss", $token, $email);
  $result = $stmt->execute();

  if ($result === false) {
    // Handle database error
    error_log("Error updating reset token: " . error_get_last()['message']); // Log the error
    return false;
  }

  // 4. Send the reset password link via email
  $subject = "Password Reset Link";
  $message = "Click the link below to reset your password:
" .
             "<a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'>Reset Password</a>";
  $headers = "From: your_email@example.com\r
";
  mail($email, $message, $headers);

  // 5.  Return true to indicate success
  return true;
}


// Example Usage (In a form submission or similar)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];

  if (!empty($email)) {
    if (forgot_password($email)) {
      echo "<p>Password reset link sent to your email address.</p>";
    } else {
      echo "<p>Failed to send password reset link. Please try again.</p>";
    }
  } else {
    echo "<p>Please enter your email address.</p>";
  }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password to set.
 * @param string $salt  (Optional) A salt for added security.  Defaults to a random string.
 * @return bool True if the password was successfully reset, false otherwise.
 */
function forgotPassword(string $email, string $newPassword, string $salt = "") {
  // 1. Validate Input (Crucial for security!)
  if (empty($email) || empty($newPassword)) {
    return false; // Invalid input
  }

  // 2. Retrieve User Data
  $user = getUserByEmail($email); // Implement this function!
  if (!$user) {
    return false; // User not found
  }

  // 3. Hash the New Password
  $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT, ['salt' => $salt]);

  // 4. Update the User's Password
  if (updateUserPassword($user, $hashedPassword)) {
    return true;
  } else {
    return false;
  }
}

/**
 * Dummy function to simulate retrieving a user by email.  Replace with your actual database query.
 *
 * @param string $email
 * @return array|null User data as an associative array, or null if not found.
 */
function getUserByEmail(string $email): ?array {
  // Replace this with your database query
  // Example (using a hypothetical database connection):
  // $db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  // $stmt = $db->prepare("SELECT * FROM users WHERE email = :email");
  // $stmt->bindParam(':email', $email);
  // $stmt->execute();
  // $user = $stmt->fetch(PDO::FETCH_ASSOC);
  // return $user;

  // Dummy data for demonstration:
  $dummy_users = [
    ['id' => 1, 'email' => 'test@example.com', 'password' => 'oldpassword'],
    ['id' => 2, 'email' => 'another@example.com', 'password' => 'anotherpassword']
  ];

  foreach ($dummy_users as $user) {
    if ($user['email'] === $email) {
      return $user;
    }
  }
  return null;
}

/**
 * Dummy function to simulate updating a user's password. Replace with your actual database update query.
 *
 * @param array $user  User data (associative array).
 * @param string $hashedPassword The new hashed password.
 * @return bool True if the update was successful, false otherwise.
 */
function updateUserPassword(array $user, string $hashedPassword): bool {
  // Replace this with your database update query
  // Example:
  // $db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  // $stmt = $db->prepare("UPDATE users SET password = :password WHERE id = :id");
  // $stmt->bindParam(':password', $hashedPassword);
  // $stmt->bindParam(':id', $user['id']);
  // $result = $stmt->execute();
  // return $result;

  // Dummy update for demonstration:
  $user['password'] = $hashedPassword;  // Simulate the password update
  return true;
}


// **Example Usage:**

// Simulate a forgot password request
$email = 'test@example.com';
$newPassword = 'newSecretPassword123';

if (forgotPassword($email, $newPassword)) {
  echo "Password reset successfully for $email.  Check your email for details (this is just a demo!).
";
} else {
  echo "Password reset failed for $email.
";
}


?>


<?php

// Assuming you have a database connection established (e.g., $pdo)
// and a table named 'users' with a 'email' column.

/**
 * Resets a user's password via email.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function forgot_password(string $email): bool
{
    // Validate email format (basic validation - consider more robust validation)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format: " . $email); // Log for debugging
        return false;
    }

    // Generate a unique, secure token (e.g., using a random string)
    $token = bin2hex(random_bytes(32));  // Best practice: use bin2hex for security.

    // Hash the token - very important for security.
    $hashed_token = password_hash($token, PASSWORD_DEFAULT);  // Use password_hash

    //  Prepare the SQL query
    $pdo = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password"); // Replace with your details
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    try {
        // Prepare and execute the query to update the user's record
        $stmt = $pdo->prepare("UPDATE users SET reset_token = :token, reset_token_expiry = :expiry, reset_sent = 1 WHERE email = :email");

        // Bind the parameters
        $stmt->bindParam(':token', $hashed_token);
        $stmt->bindParam(':expiry', time() + 3600);  // Token expires after 1 hour (adjust as needed)
        $stmt->bindParam(':email', $email);

        $result = $stmt->execute();

        if ($result) {
            // Send the password reset email
            $subject = "Password Reset Request";
            $message = "Please click the following link to reset your password: " . $_SERVER['REQUEST_SCHEME'] . "://yourdomain.com/reset_password?token=" . $token;
            $headers = "From: your_email@example.com" . "\r
";

            if (mail($email, $subject, $message, $headers)) {
                return true;
            } else {
                // Log the email sending failure
                error_log("Failed to send email to " . $email);
                return false;
            }
        } else {
            // Log the query failure
            error_log("Query failed to update user: " . $email);
            return false;
        }
    } catch (PDOException $e) {
        // Log the database error
        error_log("Database error: " . $e->getMessage());
        return false;
    }
}


// Example Usage (This is just for demonstration - use this within your form handling)
/*
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    if (forgot_password($email)) {
        echo "Password reset email has been sent to " . $email;
    } else {
        echo "Failed to send password reset email.";
    }
}
*/

?>


<?php

// Assuming you have a database connection established and named $db

function forgotPassword($email) {
  // 1. Validate the email format (basic check)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return 'Invalid email address.';
  }

  // 2. Check if the user exists in the database.
  $stmt = $db->prepare("SELECT id, password_reset_token FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if ($user) {
    // 3. Generate a unique, random, and secure password reset token
    $token = bin2hex(random_bytes(32)); // Use bin2hex for secure representation

    // 4. Update the user's record with the token
    $stmt = $db->prepare("UPDATE users SET password_reset_token = ? WHERE email = ?");
    $stmt->execute([$token, $email]);

    // 5.  Send an email to the user with the reset link.  (This is a placeholder)
    $subject = "Password Reset Request";
    $message = "Please click on the following link to reset your password: " . $_SERVER['PHP_SELF'] . "?reset_token=" . $token; // Use PHP_SELF for direct linking
    $headers = "From: your-email@example.com"; // Replace with your email address

    mail($email, $subject, $message, $headers);  //  Implement proper email sending (see notes)

    return 'Password reset email sent to ' . $email . '. Please check your inbox.';
  } else {
    return 'User not found.';
  }
}



// Example Usage (within your form processing logic)
// Assuming you have a form element with name "email"
$email = $_POST['email'];  // Get the email from the form

if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['reset_password_button'])) {
    $result = forgotPassword($email);
    echo $result;
}
?>


<?php

// Database credentials (replace with your actual values)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database";

// Function to reset password
function forgot_password($email) {
  // 1. Check if the email exists in the users table
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  $query = "SELECT id, email FROM users WHERE email = '$email'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    $user_data = $result->fetch_assoc();
    $userId = $user_data['id'];
    $userEmail = $user_data['email'];

    // 2. Generate a unique token for the password reset
    $token = bin2hex(random_bytes(32)); // Generate a strong, random token

    // 3. Store the token and user ID in the database (temporarily)
    $insert_query = "INSERT INTO password_resets (user_id, token, expires_at) VALUES ('$userId', '$token', NOW())";

    if ($conn->query($insert_query) === TRUE) {
      // 4. Send an email with a link to reset the password
      $to = $userEmail;
      $subject = "Password Reset";
      $message = "Click on the following link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'>" . $_SERVER['PHP_SELF'] . "?reset=$token</a>";
      $headers = "From: your_email@example.com" . "\r
";
      mail($to, $message, $headers);

      echo "Password reset email sent to $userEmail.  Check your inbox!";

    } else {
      echo "Error inserting token into password_resets table.  Please contact support.";
    }
  } else {
    echo "Email not found.";
  }

  $conn->close();
}

// Handle the password reset request (if called from a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $token = $_POST["token"];

  //  Validate the token (very important security step!)
  //  You should compare this token with the one stored in the database.
  //  This simple example doesn't validate, but you MUST do it in a production environment.
  //  To properly validate, you'll need a query like:
  //  SELECT id, email FROM password_resets WHERE token = '$token' AND expires_at > NOW()
  //  and then check if the query returns any results.  If it does, it means the token is valid and the user can reset their password.

  // Example validation -  This is HIGHLY simplified and vulnerable in production!
  // In a real application,  YOU MUST perform a proper database query to verify the token!
  if (trim($token)) {
    //  This is just for demonstration purposes and is extremely insecure.
    //  DO NOT use this in a real application.

    //  **IMPORTANT:** You MUST perform a database query to validate the token and check its expiration time.
    //  This example doesn't validate properly and is for illustration only.


    // 1. Find the user ID associated with the token
    // 2.  Check if the token is still valid (expires_at > NOW())
    // 3.  If valid, you can proceed with updating the user's password.

    echo "Token Received.  Please complete proper validation and password reset steps in a production environment.";

  } else {
    echo "Invalid token.";
  }
}


?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Enter your email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// This is a simplified example and should be used in a production environment
// with proper security measures.

// Database connection (replace with your actual credentials)
$host = 'localhost';
$username = 'your_db_user';
$password = 'your_db_password';
$database = 'your_database_name';

// Reset token generation function (should use a strong, random function)
function generateRandomString($length = 32) {
    $characters = '0123456789abcdefghijklmnopqrstuvwxyz';
    $randomString = '';
    $charactersLength = strlen($characters);
    for ($i = 0; $i < $length; $i++) {
        $randomString .= $characters[rand(0, $charactersLength - 1)];
    }
    return $randomString;
}


// Reset password function
function forgotPassword($email, $host, $username, $password, $database) {
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return 'Invalid email address.';
    }

    // 2. Check if user exists
    $stmt = $conn->prepare("SELECT id, email FROM users WHERE email = ?");
    $stmt->bind_param("s", $email);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        return 'User not found.';
    }

    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $stmt->close();



    // 3. Generate a unique token
    $resetToken = generateRandomString();

    // 4.  Create a reset token record in the database
    $stmt = $conn->prepare("INSERT INTO password_resets (user_id, token, expiry) VALUES (?, ?, ?)");
    $stmt->bind_param("iii", $userId, $resetToken, time() + 60); // Expires in 60 minutes
    $result = $stmt->execute();

    if ($result === false) {
        // Handle database errors here (e.g., try again, log error)
        error_log("Error creating password reset record: " . error_get_last()['message']);
        return 'Failed to generate reset token.';
    }

    $resetId = $conn->insert_id; // Get the ID of the inserted row.  Important for later retrieval.
    $stmt->close();


    // 5.  Send reset email
    $subject = 'Password Reset';
    $message = "Click on this link to reset your password: " . '<a href="' . $_SERVER['PHP_SELF'] . '?reset=' . $resetToken . '" >Reset Password</a>';
    $headers = "From: your_email@example.com" . "\r
";

    if(mail($email, $subject, $message, $headers)) {
        return 'Password reset email has been sent.';
    } else {
        return 'Failed to send password reset email.';
    }
}


// Example Usage (Simulated - replace with your form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    // Replace this with your actual database connection
    $conn = new mysqli($host, $username, $password, $database);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }


    $result = forgotPassword($email, $host, $username, $password, $database);
    echo $result;
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Forgot Password</button>
    </form>

</body>
</html>


<?php

// Ensure this file is in a secure location and not directly accessible via web browser.
// This is just an example for demonstration purposes.
// In a production environment, you should use a proper database and secure authentication practices.

// Database credentials (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_password = 'your_db_password';


function forgot_password($email) {
  // 1. Check if the email exists in the user table
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

  if ($conn->connect_error) {
    // Handle connection error appropriately (e.g., log it, display an error message)
    die("Connection failed: " . $conn->connect_error);
  }

  $sql = "SELECT id, email FROM users WHERE email = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("s", $email); // "s" indicates a string parameter
  $stmt->execute();

  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    $stmt->close();
    $conn->close();
    return false; // Email not found
  }

  $user_id = $result->fetch_assoc()['id']; //get the id
  $stmt->close();
  $conn->close();


  // 2. Generate a unique token for the password reset
  $token = bin2hex(random_bytes(32)); // Generate a random string (32 bytes = 256 bits)

  // 3. Store the token and user ID in the database
  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  $sql = "INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, NOW())";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("ss", $user_id, $token);
  $stmt->execute();

  $stmt->close();
  $conn->close();


  // 4. Send an email with the token and a link to reset the password
  $email_body = "Hello,

" .
                "Please use the following link to reset your password:
" .
                "http://yourwebsite.com/reset_password?token=" . $token . "

" .
                "This link will expire in 24 hours.";  // Adjust expiration time as needed

  //  Replace with your email sending logic (e.g., using PHPMailer, SMTP, etc.)
  //  Example (placeholder):
  //  send_email($email, "Password Reset", $email_body);

  return true; // Password reset request initiated successfully
}


// Example Usage (for demonstration - replace with your form submission handling)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    if (isset($email)) {
      if (forgot_password($email)) {
        echo "Password reset email sent to " . $email;
      } else {
        echo "Email not found or an error occurred during the password reset process.";
      }
    } else {
      echo "Email not provided.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>
  <h1>Forgot Password</h1>

  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Request Password Reset</button>
  </form>
</body>
</html>


<?php

// This is a simplified example.  In a production environment,
// you *absolutely* should implement proper security measures:
// - Use strong passwords
// - Generate and verify unique tokens
// - Handle email sending securely (using SMTP or a trusted service)
// - Implement rate limiting to prevent brute-force attacks
// - Store passwords securely (hashed and salted)


// Simulate a user database (replace with your actual database connection)
$users = [
  'john.doe@example.com' => ['password' => 'securePassword123', 'salt' => 'someSalt'],
  'jane.smith@example.com' => ['password' => 'anotherPassword', 'salt' => 'anotherSalt'],
];

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email): bool
{
    // 1. Check if the email exists in the user database.
    if (!isset($users[$email])) {
        return false; // User not found
    }

    // 2. Generate a unique token (for security, don't use a simple counter)
    $token = bin2hex(random_bytes(32)); // Generate a strong random token

    // 3. Store the token and expiration time in the database
    //    (This is just a placeholder - you'd use a proper database query)
    //  In a real application, you'd update the 'token' and 'expires_at' fields in the database.
    //  For this example, we'll just add it to the $users array.
    $users[$email]['token'] = $token;
    $users[$email]['expires_at'] = time() + 3600; // Token expires in 1 hour


    // 4. Send an email with a reset link
    //  -  Include the token and a link to the reset password page
    $subject = 'Password Reset Request';
    $message = "Please click on the following link to reset your password: " .
               '<a href="' . $_SERVER['PHP_SELF'] . '?token=' . $token . '&email=' . $email . '" >Reset Password</a>'; //  Use absolute URL
    $headers = 'From: admin@example.com' . "\r
";
    mail($email, $message, $headers);

    return true;
}


// Example usage (for testing - this is NOT a front-end form)
if (isset($_GET['token']) && isset($_GET['email'])) {
  $token = $_GET['token'];
  $email = $_GET['email'];

  if (isset($users[$email]['token']) && $users[$email]['token'] == $token) {
    //  Password reset logic would go here.  You'd actually redirect
    //  to a page where the user can enter a new password.
    echo "Token is valid.  Redirection to reset password page would occur here.";
  } else {
    echo "Invalid token or email.";
  }
}

?>


<?php

// Assume you have a database connection established and a user table named 'users'
// with a 'password' column.  This is a simplified example and you'll need 
// to adapt it to your specific database setup.

function forgot_password($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return 'Invalid email address.';
  }

  // 2. Check if user exists
  $user = getUserByEmail($email); // Function to retrieve user by email
  if (!$user) {
    return 'User not found.';
  }

  // 3. Generate a Unique Token
  $token = generate_unique_token();

  // 4. Store Token and User ID in a temporary table (or session)
  store_token_for_user($user['id'], $token);  // Function to store the token

  // 5.  Create a reset link
  $reset_link = generate_reset_link($token, $user['email']);

  // 6. Return the reset link to the user
  return $reset_link;
}

// ------------------------------------------------------------------
// Placeholder Functions (Implement these according to your setup)
// ------------------------------------------------------------------

// Function to retrieve user by email (replace with your database query)
function getUserByEmail($email) {
  // Example (using a dummy database - REPLACE with your actual query)
  // This is just a placeholder;  implement your actual database query here.
  $users = [
    ['id' => 1, 'email' => 'test@example.com', 'password' => 'hashed_password'],
    ['id' => 2, 'email' => 'another@example.com', 'password' => 'another_hashed_password']
  ];

  foreach ($users as $user) {
    if ($user['email'] === $email) {
      return $user;
    }
  }
  return null;
}


// Function to generate a unique token (UUID is generally a good choice)
function generate_unique_token() {
  return bin2hex(random_bytes(32)); // Generate a 32-byte UUID
}


// Function to store the token in a temporary table (or session)
function store_token_for_user($user_id, $token) {
  // In a real application, you would insert a record into a temporary table
  // with columns 'user_id' and 'token'.  This is just a placeholder.
  //  Example (using a dummy temporary table):
  //  $sql = "INSERT INTO reset_tokens (user_id, token) VALUES ($user_id, '$token')";
  //  // Execute the query here
  //  return true;

  //  For simplicity in this example, we'll just simulate it:
  echo "Simulating token storage for user ID: " . $user_id . " with token: " . $token . "
";
}


// Function to generate the reset link (including token and email)
function generate_reset_link($token, $email) {
  return "http://yourdomain.com/reset_password?token=" . urlencode($token) . "&email=" . urlencode($email);
}

// ------------------------------------------------------------------
// Example Usage
// ------------------------------------------------------------------

$email_to_reset = 'test@example.com';

$reset_link = forgot_password($email_to_reset);

if ($reset_link === 'Invalid email address.') {
  echo $reset_link . "
";
} elseif ($reset_link === 'User not found.') {
  echo $reset_link . "
";
} else {
  echo "Reset link: " . $reset_link . "
";
  //  Send the reset_link to the user via email or other means
}
?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique token, sends an email with a link to reset the password,
 * and stores the token in the database.
 *
 * @param string $email The email address of the user.
 * @param string $baseUrl The base URL of your website.  Used for the reset link.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function forgotPassword(string $email, string $baseUrl): bool
{
  // 1. Generate a Unique Token
  $token = bin2hex(random_bytes(32));

  // 2. Prepare the Reset Link
  $resetLink = $baseUrl . '/reset-password?token=' . $token;

  // 3. Prepare the Email Message
  $subject = "Password Reset Request";
  $message = "Click the following link to reset your password: " . $resetLink;
  $headers = "From: " .  $baseUrl . "\r
";
  $headers .= "Reply-To: " . $email . "\r
";

  // 4. Send the Email (using PHPMailer -  Install via Composer: `composer require phpmailer/phpmailer`)
  if (sendEmail($email, $subject, $message, $headers)) {
    // 5. Store the Token in the Database
    saveToken($email, $token);
    return true;
  } else {
    // Handle email sending failure -  Log it or show an error message
    error_log("Failed to send password reset email for " . $email);
    return false;
  }
}


/**
 * Placeholder for sending email (Replace with your actual email sending logic).
 *  This is a placeholder function.  You *must* implement this using a real email library.
 *  Example using PHPMailer:
 *  $mail = new PHPMailer\PHPMailer\PHPMailer();
 *  $mail->SMTPDebugEnable = true;
 *  // Configure SMTP settings (replace with your details)
 *  $mail->isSMTP();
 *  $mail->Host       = 'smtp.gmail.com';
 *  $mail->SMTPAuth   = true;
 *  $mail->Username   = 'your_email@gmail.com';
 *  $mail->Password   = 'your_password';
 *  $mail->Port = 587;
 *  $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;
 *
 *  $mail->setFrom($email, $email);
 *  $mail->addAddress('user@example.com'); // Change to user's email
 *  $mail->Subject = $subject;
 *  $mail->Body    = $message;
 *
 *  if(!$mail->send()){
 *     return false;
 *  }
 *  return true;
 *
 * @param string $email       The email address.
 * @param string $subject     The email subject.
 * @param string $message     The email body.
 * @param string $headers     Email headers.
 * @return bool True on success, false on failure.
 */
function sendEmail(string $email, string $subject, string $message, string $headers): bool
{
  // Replace this with your actual email sending logic
  // For testing, you can simply echo the email details.
  error_log("Sending email: To: " . $email . "
Subject: " . $subject . "
Message: " . $message . "
Headers: " . $headers);
  return true; // Placeholder - Always return true for testing.  Implement real sending here.
}


/**
 * Placeholder for saving the token in the database.  Replace with your database logic.
 *
 * @param string $email       The user's email address.
 * @param string $token       The generated token.
 */
function saveToken(string $email, string $token): void
{
  // Placeholder - Replace with your database saving logic
  // Example (using a simple array - **NOT RECOMMENDED FOR PRODUCTION**):
  // $_SESSION['reset_token'] = $token;
  // This is just a demo - for a real application, use a database.

  // Example using database (using PDO):
  // $db = new PDO("mysql:host=localhost;dbname=your_database", "username", "password");
  // $stmt = $db->prepare("INSERT INTO password_resets (email, token, created_at) VALUES (?, ?, NOW())");
  // $stmt->execute([$email, $token]);
}

// Example Usage (for testing - do not use this in your application directly)
// In a real application, you'd get the email from a form submission.
// For this example, we're hardcoding the email.
$baseUrl = 'http://localhost/your-website';  // Replace with your website's base URL

// Simulate a user requesting a password reset
if (isset($_GET['email'])) {
    $email = $_GET['email'];
    if (forgotPassword($email, $baseUrl)) {
        echo "Password reset email has been sent to " . $email;
    } else {
        echo "Failed to send password reset email.";
    }
}
?>


<?php

// Ensure this file is protected (e.g., .htaccess or server configuration)
// to prevent direct access to the password reset file.

// Database connection details (replace with your actual credentials)
$host = 'localhost';
$username = 'your_db_username';
$password = 'your_db_password';
$database = 'your_db_name';

// Email configuration (replace with your email settings)
$from_email = 'your_email@example.com';
$to_email = '%user_email%'; // Use placeholder for user's email
$subject = 'Password Reset Request';
$headers = "From: $from_email\r
";
$headers .= "Reply-To: $from_email\r
";

// Generate a unique, secure token
function generate_token() {
    return bin2hex(random_bytes(32));
}

// Check if the request is valid
if (isset($_POST['email']) && isset($_POST['token'])) {
    $email = filter_var($_POST['email'], FILTER_SANITIZE_EMAIL); // Sanitize email input
    $token = filter_var($_POST['token'], FILTER_SANITIZE_STRING); // Sanitize token input

    // Validate email format
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        echo "Invalid email format.";
        exit;
    }

    // Check if the token exists in the database (important security step)
    $result = mysqli_query($GLOBALS['database'], "SELECT id, email FROM users WHERE email = '$email' AND token = '$token'");

    if (mysqli_num_rows($result) > 0) {
        // Token exists, proceed with password reset
        $user_id = mysqli_fetch_assoc($result)['id'];
        $user_email = mysqli_fetch_assoc($result)['email'];

        //  Create a temporary password (strong password)
        $temp_password = 'P@$$wOrd'; // Example -  Use a stronger password generation method in a real app.
        //  Generate a unique token for the reset process
        $reset_token = generate_token();

        // Update the user's record with the temporary password and the new reset token
        mysqli_query($GLOBALS['database'], "UPDATE users SET password = '$temp_password', token = '$reset_token', password_reset_expiry = NOW() WHERE id = '$user_id'");

        // Send the password reset email
        $message = "Please use the following link to reset your password:
" .
                   '<a href="' . $_SERVER['REQUEST_URI'] . '?token=' . $reset_token . '">Reset Password</a>';  // Use the same URL for the reset link
        mail($to_email, $subject, $message, $headers);

        echo "Password reset link sent to your email.  Check your inbox.";

    } else {
        echo "Invalid token or user not found.";
    }
} else {
    echo "Invalid request.";
}

// Example usage (for testing - usually handled through a form)
//  This is just an example -  integrate this with a form to collect the email.
//  Implement proper error handling and security best practices.
?>


   function hash_password($password) {
       return password_hash($password, PASSWORD_DEFAULT);
   }
   
   Then, when the user creates an account, hash the password before storing it in the database.  When the user tries to log in, verify the entered password against the hashed value in the database.

3. **Database Abstraction Layer:**  For larger applications, using a database abstraction layer (like PDO or a specific database library) is *highly* recommended.  It provides a more secure and portable way to interact with the database.

4. **Rate Limiting:**  Implement rate limiting to prevent brute-force attacks.  Limit the number of password reset requests from a single IP address within a certain timeframe.

5. **CSRF Protection:** Implement CSRF (Cross-Site Request Forgery) protection to prevent attackers from forging requests to reset passwords.

6. **HTTPS:**  Always use HTTPS to encrypt the communication between the user's browser and the server, protecting the user's credentials during transmission.

7. **Error Logging:**  Implement error logging to track any errors or suspicious activity.

8. **Testing:**  Thoroughly test the password reset functionality to ensure it works as expected and is secure.

9. **Regular Security Audits:** Conduct regular security audits to identify and address any vulnerabilities.

10. **Session Management:** Implement proper session management to ensure user sessions are secure.

This improved code provides a more secure and robust password reset functionality. However, remember that security is an ongoing process. Implement the best practices mentioned above and stay up-to-date with the latest security threats.


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset email was sent successfully, false otherwise.
 */
function forgotPassword(string $email) {
    // Sanitize input - crucial for security
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);

    // Validate email format
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided.");
        return false;
    }


    // 1. Check if the user exists
    $user = getUserById($email); // Implement this function (see below)

    if (!$user) {
        error_log("User with email {$email} not found.");
        return false;
    }

    // 2. Generate a unique token
    $token = generateUniqueToken(); // Implement this function (see below)

    // 3. Store the token and expiry in the database (for the user)
    //    This is the key step.  You *must* secure this.
    updateUserToken($user['id'], $token, time() + (3600 * 24)); // Token valid for 24 hours

    // 4.  Send a password reset email
    $resetLink = generateResetLink($token); // Implement this function (see below)
    sendPasswordResetEmail($user['email'], $resetLink);

    return true;
}

/**
 * Placeholder function to get user by email.  Replace with your database query.
 *
 * @param string $email The user's email address.
 * @return array|null The user object or null if not found.
 */
function getUserById(string $email): ?array {
    // **IMPORTANT:  Replace this with your actual database query.**
    // This is just a placeholder to demonstrate the flow.
    // You'll use a query like:
    // $stmt = $db->prepare("SELECT * FROM users WHERE email = ?");
    // $stmt->execute([$email]);
    // $user = $stmt->fetch(PDO::FETCH_ASSOC);
    // return $user;

    // Example return for demonstration:
    return [
        'id' => 1,
        'email' => 'test@example.com',
        'password' => 'hashed_password' // This should be properly hashed
    ];
}


/**
 * Placeholder function to generate a unique token.
 *  Consider using a library for cryptographically secure random number generation.
 *
 * @return string A unique token.
 */
function generateUniqueToken(): string {
    return bin2hex(random_bytes(32)); // Use bin2hex for a hexadecimal representation
}


/**
 * Placeholder function to generate the password reset link.
 *
 * @param string $token The token.
 * @return string The password reset link.
 */
function generateResetLink(string $token): string {
    return 'https://yourwebsite.com/reset-password?token=' . urlencode($token); // Replace with your URL
}


/**
 * Placeholder function to send a password reset email.
 *
 * @param string $email The recipient's email address.
 * @param string $resetLink The password reset link.
 */
function sendPasswordResetEmail(string $email, string $resetLink): void {
    // Implement your email sending logic here.
    // This is just a placeholder.
    echo "Sending password reset email to: " . $email . " with link: " . $resetLink . "
";
    // Example using PHPMailer (you'll need to install it: composer require phpmailer/phpmailer)
    //  require_once 'PHPMailer/PHPMailerAutoload.php';
    //  $mail = new PHPMailer(true);
    //  $mail->isSMTP();
    //  $mail->Host       = 'smtp.example.com';
    //  $mail->SMTPAuth   = true;
    //  $mail->Username   = 'your_email@example.com';
    //  $mail->Password   = 'your_password';
    //  $mail->Port = 587;
    //  $mail->SetFrom('your_email@example.com', 'Your Website Name');
    //  $mail->Subject = 'Password Reset';
    //  $mail->Body    = 'Click this link to reset your password: ' . $resetLink;
    //  $mail->AltBody = $mail->Body;
    //  if ($mail->send()) {
    //      // Email sent successfully
    //  } else {
    //      error_log("Failed to send email.");
    //  }
}


/**
 * Placeholder function to update the user's token in the database.
 *  **IMPORTANT:**  This is where you'd insert or update the 'token' and 'expiry' columns
 *  in your user table.
 *
 * @param int $userId The user's ID.
 * @param string $token The token.
 * @param int $expiry Timestamp when the token expires.
 */
function updateUserToken(int $userId, string $token, int $expiry): void {
    // **IMPORTANT: Replace this with your actual database update query.**
    // Example (using PDO):
    // $stmt = $db->prepare("UPDATE users SET token = ?, expiry = ? WHERE id = ?");
    // $stmt->execute([$token, $expiry, $userId]);
}


// Example usage (call this function to initiate the process)
// $email = "test@example.com";
// if (forgotPassword($email)) {
//   echo "Password reset email sent to {$email}
";
// } else {
//   echo "Failed to send password reset email.
";
// }


?>


<?php

// Database connection details (replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_username';
$db_password = 'your_password';

// Function to reset password
function forgot_password($email, $new_password, $db) {
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email format.";
    }

    // 2. Check if user exists
    $stmt = $db->prepare("SELECT id FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        return "User with this email does not exist.";
    }

    // 3. Hash the new password (Important for security!)
    $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

    // 4. Update the password in the database
    $stmt = $db->prepare("UPDATE users SET password = ? WHERE id = ?");
    $stmt->execute([$hashed_password, $user['id']]);

    return "Password reset email sent. Check your inbox!";
}


// --- Example Usage (Demonstration - NOT for direct use in a production environment)
// IMPORTANT:  This example shows how to use the function.  It's a simplified demonstration.
//   In a real application, you would typically have a form to collect the email and new password.

// Create a PDO database connection
try {
    $db = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_password);
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
} catch (PDOException $e) {
    echo "Database connection failed: " . $e->getMessage();
    exit;
}


// Example Usage (Replace with actual user input from a form)
$email = $_POST['email']; // Get email from form
$new_password = $_POST['new_password'];

// Call the forgot_password function
$result = forgot_password($email, $new_password, $db);

// Display the result
echo $result;

// Close the database connection (important!)
$db = null;

?>


<?php

// Assuming you have a database connection established and a 'users' table
// with a 'email' column and potentially a 'password' column.

function forgot_password($email, $reset_token, $expiry_time = 3600) { //default expiry of 1 hour

  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if a reset token already exists for this email
  $query = "SELECT id, token, created_at FROM reset_tokens WHERE email = ? AND token = ? AND expiry_time > NOW()";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("ss", $email, $reset_token);
  $stmt->execute();

  if ($stmt->num_rows > 0) {
    // Token exists, proceed with password reset
    //  Ideally, you'd update the token's expiry time here 
    //  to force a new reset link to be generated.  For simplicity, we'll just
    //  return the token.
    $result = $stmt->fetch_assoc();
    return $result['token']; // Or return the entire result array if needed
  } else {
    // Token does not exist
    return "Invalid reset token.  Please request a new one.";
  }
}



// Example Usage (assuming $conn is your database connection)
//  This is just for testing; in a real application, you would
//  handle the form submission and user interaction.

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $reset_token = $_POST["reset_token"];

  $new_reset_token = forgot_password($email, $reset_token);

  if ($new_reset_token == "Invalid reset token.  Please request a new one.") {
    echo "<p style='color: red;'>$new_reset_token</p>";
  } else {
      echo "<p style='color: green;'>Reset token: $new_reset_token.  Please use this in the password reset form.</p>";
      // In a real application, you would send an email with this token.
  }

}
?>


<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <!--  In a real application, you would generate a random token
         and store it in the database.  For this example, we'll
         just have the user enter a token. -->
    <label for="reset_token">Reset Token:</label>
    <input type="text" id="reset_token" name="reset_token" required><br><br>

    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

/**
 * Forgot Password Function
 *
 * This function handles the forgot password process.  It:
 * 1. Generates a unique, time-based token.
 * 2. Sends an email to the user with a link containing the token.
 * 3. Stores the token in the database associated with the user's ID.
 * 4.  Returns a success message or an error message.
 *
 * @param string $email        The user's email address.
 * @param string $site_url    The URL of your website.
 * @param string $reset_token_prefix  (Optional) Prefix for the reset token.  Good for security.
 *
 * @return string  A success or error message.
 */
function forgot_password(string $email, string $site_url, string $reset_token_prefix = 'reset') {

    // 1. Generate a unique, time-based token
    $token = $reset_token_prefix . md5(time());

    // 2.  Check if the email exists in the database.  You'll need a database connection here!
    // Assuming you have a database connection variable called $db
    // $user = $db->query("SELECT id, email FROM users WHERE email = '$email' LIMIT 1")->fetch_assoc();

    // This is a placeholder.  Replace with your actual database query.
    // This example assumes you have a `users` table with `id` and `email` columns.
    $user = $db->query("SELECT id, email FROM users WHERE email = '$email' LIMIT 1")->fetch_assoc();
    
    if (!$user) {
        return "Email not found.";
    }

    // 3.  Store the token in the database
    $result = $db->query("UPDATE users SET reset_token = '$token', reset_token_expiry = NOW() + INTERVAL 1 HOUR WHERE id = $user['id']");

    if (!$result) {
        return "Error updating user information.";
    }

    // 4.  Create the reset password link
    $reset_link = $site_url . "/reset_password.php?token=$token";  // Example URL
    

    // 5.  Send the password reset email.  You'll need to implement this.
    // This is a placeholder - you'll need to replace this with your email sending logic.
    $subject = "Password Reset";
    $message = "Click on the following link to reset your password: " . $reset_link;
    
    // In a real application, you'd use a function like:
    // send_email($user['email'], $subject, $message); 

    return "Password reset email sent to $email";
}


// Example Usage (replace with your actual database connection and settings)
//  This is just an example, it doesn't actually connect to a database
// and won't work as is.

// Assume $db is your database connection object (e.g., mysqli_connect)
//$db = mysqli_connect("localhost", "username", "password", "database_name");

//if (!$db) {
//    die("Database connection failed");
// }


// $email = "test@example.com";
// $reset_message = forgot_password($email, "https://example.com");
// echo $reset_message;


?>


<?php

// Assuming you have a database connection established and a 'users' table with a 'email' column.

//  This is a basic example and should be adapted to your specific setup.
//  For production, you should always sanitize inputs, use prepared statements,
//  and implement proper security measures.

function forgot_password($email) {
  // 1. Check if the email exists in the database.
  $query = "SELECT id, password FROM users WHERE email = ?";
  $stmt = $conn->prepare($query); // Assuming $conn is your database connection object.
  $stmt->bind_param("s", $email);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows == 0) {
    // Email not found
    $stmt->close();
    return false;
  }

  $user = $result->fetch_assoc();
  $stmt->close();

  // 2. Generate a unique, secure token.  Important for security!
  $token = bin2hex(random_bytes(32)); // More secure than simple rand()

  // 3.  Create a password reset link.
  $reset_link = "http://yourdomain.com/reset_password?token=" . $token . "&user_id=" . $user['id'];  // Replace with your domain.
                                   //  This URL should be safe and not expose sensitive data.

  // 4.  Store the token and user ID in the database.
  $query = "INSERT INTO password_resets (user_id, token, expiry) VALUES (?, ?, ?)";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("sss", $user['id'], $token, date("Y-m-d H:i:s", time() + 3600)); // Expire after 1 hour.  Adjust as needed.
  $result = $stmt->execute();

  if (!$result) {
      // Handle errors - log them, display a message, etc.  Don't just silently fail.
      error_log("Error creating password reset entry: " . error_get_last()['message']);
      return false;
  }


  // 5.  Send an email to the user with the reset link.
  $to = $email;
  $subject = "Password Reset";
  $message = "Click on the link below to reset your password:
" . $reset_link;
  $headers = "From: your_email@example.com\r
";
  mail($to, $subject, $message, $headers);  // Use a robust mailer library instead of mail() for production.


  return true;
}


// Example usage (after a user submits the forgot password form)
// $email = $_POST['email'];  // Get email from the form.
// if (forgot_password($email)) {
//   echo "Password reset email has been sent to " . $email;
// } else {
//   echo "Failed to generate password reset link.";
// }


?>


<?php

// Assuming you have a database connection established (e.g., $db)
// and have a 'users' table with a 'email' field.

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if password reset email sent successfully, false otherwise.
 */
function forgot_password(string $email): bool
{
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email format provided.");
    return false;
  }

  // 2. Check if the user exists
  $user = get_user_by_email($email); // Assuming this function exists - defined below

  if ($user === null) {
    error_log("User with email $email not found.");
    return false;
  }

  // 3. Generate a unique token
  $token = generate_unique_token();

  // 4. Store the token in the database associated with the user
  $result = store_token_for_user($user['id'], $token);

  if (!$result) {
    error_log("Failed to store token for user $email.");
    return false;
  }

  // 5. Send the password reset email
  $subject = "Password Reset Request";
  $message = "Click on this link to reset your password: " .  $_SERVER['PHP_SELF'] . "?token=" . urlencode($token); //  IMPORTANT: Security Considerations below!
  $headers = "From: your_email@example.com\r
";

  if (send_email($email, $subject, $message, $headers) ) {
    return true;
  } else {
    error_log("Failed to send password reset email to $email.");
    // Consider deleting the token if email sending fails.
    delete_token_for_user($user['id']); // Rollback
    return false;
  }
}


//  Dummy functions for demonstration - Replace with your actual implementations

/**
 * Retrieves a user from the database based on their email.
 *
 * @param string $email The user's email address.
 * @return null|array  An associative array representing the user, or null if not found.
 */
function get_user_by_email(string $email): ?array
{
  // Replace this with your actual database query
  // This is a placeholder - use your database connection
  $users = [
    ['id' => 1, 'email' => 'test@example.com'],
    ['id' => 2, 'email' => 'another@example.com']
  ];

  foreach ($users as $user) {
    if ($user['email'] === $email) {
      return $user;
    }
  }
  return null;
}


/**
 * Generates a unique token for password reset.
 *
 * @return string A unique token.
 */
function generate_unique_token(): string
{
    return bin2hex(random_bytes(32)); // Recommended for security
}


/**
 * Stores a token for a user in the database.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token to store.
 * @return bool True if the token was successfully stored, false otherwise.
 */
function store_token_for_user(int $userId, string $token): bool
{
  // Replace this with your actual database insertion logic
  // Example:
  // $query = "INSERT INTO password_tokens (user_id, token, expires_at) VALUES ($userId, '$token', NOW() + INTERVAL 30 MINUTE)";
  // Execute the query and check the result.

  // Placeholder:
  return true;
}


/**
 * Deletes a token for a user from the database.
 *
 * @param int $userId The ID of the user.
 * @return bool True if the token was successfully deleted, false otherwise.
 */
function delete_token_for_user(int $userId): bool
{
  // Replace this with your actual database query
  // Example:
  // $query = "DELETE FROM password_tokens WHERE user_id = $userId";
  // Execute the query and check the result.

  // Placeholder:
  return true;
}


/**
 * Sends an email.
 *
 * @param string $to The recipient's email address.
 * @param string $subject The email subject.
 * @param string $body The email body.
 * @param string $headers Email headers.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function send_email(string $to, string $subject, string $body, string $headers): bool
{
    // Replace this with your actual email sending implementation
    // (e.g., using PHP's mail() function or a library like PHPMailer)

    // Example (using the mail() function - be aware of limitations and security):
    // return mail($to, $subject, $body, $headers);

    // Placeholder - always return true to prevent errors during testing
    return true;
}


// Example Usage (demonstration)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  $email = $_POST['email'];
  if (isset($email) && forgot_password($email)) {
    echo "Password reset email sent to " . $email;
  } else {
    echo "Failed to reset password.";
  }
}
?>

<!-- HTML Form for the Password Reset Request -->
<form method="post" action="<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>">
  <label for="email">Email:</label>
  <input type="email" id="email" name="email" required>
  <button type="submit">Request Password Reset</button>
</form>


<?php

// Ensure this file is protected to prevent direct access to the database.
// You should also use a more secure method for generating and sending
// the reset token (e.g., using a library for cryptographically secure random numbers).

// Database connection details (Replace with your actual credentials)
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_db_user";
$db_password = "your_db_password";

// Function to generate a unique token
function generateUniqueToken() {
    return bin2hex(random_bytes(32)); // Generates a 32-byte (256-bit) random binary string
}

// Function to send the reset password email (Requires an email setup)
function sendResetPasswordEmail($email, $token) {
    // Implement your email sending logic here.
    // This is just a placeholder.  You'll need to use a library or
    // your email server to actually send the email.

    // Example (replace with your email sending code):
    $subject = "Password Reset";
    $message = "Click on the following link to reset your password: " . "<a href='" . $_SERVER["PHP_SELF"] . "?reset=true&token=" . $token . "'>Reset Password</a>";

    // In a real application, you'd use a library like PHPMailer or SwiftMailer.
    // Example using PHPMailer (requires installation):
    // $mail = new PHPMailer(true);
    // $mail->isSMTP();
    // $mail->Host = 'smtp.example.com';
    // $mail->Port = 587;
    // $mail->Username = 'your_email@example.com';
    // $mail->Password = 'your_password';
    // $mail->SetFrom('your_email@example.com', 'Your Application Name');
    // $mail->Subject = $subject;
    // $mail->Body = $message;
    // $mail->AltBody = $message;  // For email clients that don't support HTML
    // $mail->Send();

    echo "Reset email sent to $email.  Check your inbox!"; // Placeholder
}


// Function to reset the password
function resetPassword($email, $token) {
    // 1. Verify the token
    $query = "SELECT * FROM users WHERE email = '$email' AND token = '$token'";
    $result = mysqli_query($GLOBALS['db_conn'], $query);

    if (mysqli_num_rows($result) > 0) {
        // Token is valid, proceed with password reset

        // 2.  Generate a new, strong password (example)
        $new_password = generateStrongPassword(); // Replace with your password generation function
        $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

        // 3.  Update the user's password in the database
        $update_query = "UPDATE users SET password = '$hashed_password', token = '', last_reset = NOW() WHERE email = '$email'";
        mysqli_query($GLOBALS['db_conn'], $update_query);

        echo "Password reset successful! Please check your email for instructions.";

    } else {
        echo "Invalid token or user not found.";
    }
}


//  ------------------  Example Usage (Simplified for demonstration)  ------------------

// Check if the reset link is clicked
if (isset($_GET['reset']) && isset($_GET['token'])) {
    $email = $_GET['email']; // Potentially add validation here
    $token = $_GET['token'];

    // Validate email (simple example - improve this!)
    if (empty($email) || empty($token)) {
        echo "Error: Email and token are required.";
    } else {
        resetPassword($email, $token);
    }
}

//  ------------------  Database Connection  ------------------
$GLOBALS['db_conn'] = mysqli_connect($db_host, $db_user, $db_password, $db_name);

if (mysqli_connect_error()) {
    die("Connection failed: " . mysqli_connect_error());
}

// Add other necessary database setup/validation here, such as checking if the user exists

?>


<?php

// Assuming you have a database connection established and a 'users' table with an 'email' field
// and a 'password' field.  This example uses a simple username/password approach,
// but in a real application, you'd likely use hashing and salting for security.

// Database connection details - Replace with your actual values
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_username';
$db_password = 'your_password';

/**
 * Resets a user's password using email.
 *
 * @param string $email The email address of the user.
 * @return string  A message indicating success or failure.
 */
function forgot_password($email) {
    // Validate email format (basic check - improve for production)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email address.";
    }

    // Check if the user exists
    $stmt = $GLOBALS['conn']->prepare("SELECT id, username FROM users WHERE email = ?");
    $stmt->bind_param("s", $email);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        $stmt->close();
        return "User not found.";
    }

    $user = $result->fetch_assoc();
    $stmt->close();

    // Generate a temporary password (for demo purposes - use a cryptographically secure method in production)
    $temp_password = 'TempPassword123';  // Replace with a more robust method

    // Send the password reset email (This is a placeholder - implement your email sending logic here)
    $to = $email;
    $subject = 'Password Reset';
    $message = "To reset your password, please click on this link: " .  $_SERVER['PHP_SELF'] . "?reset=" . urlencode($temp_password);
    $headers = "From: your_email@example.com" . "\r
";

    if (mail($to, $subject, $message, $headers)) {
        return "Password reset link sent to your email address.  Check your inbox.";
    } else {
        return "Failed to send password reset email. Please try again.";
    }
}

// Example Usage (this part would typically be from a form submission)
if ($_SERVER["REQUEST_METHOD"] == "GET") {
    // Get the email from the URL parameter (for testing purposes)
    $email = $_GET["email"];

    // Call the forgot_password function
    $result = forgot_password($email);

    // Display the result
    echo "<p>" . $result . "</p>";
} else {
    // Handle POST request (if the form is submitted)
    $email = $_POST["email"];
    $result = forgot_password($email);
    echo "<p>" . $result . "</p>";
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Database connection details (Replace with your actual details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$database = "your_database_name";

// Function to reset password
function forgot_password($email, $password_reset_token, $expiration_time_seconds = 60*60*24) { // Default 24 hours
  // 1. Database connection
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // 2. Prepare the SQL query
  $sql = "UPDATE users SET password = ? , password_reset_token = ? WHERE email = ?";

  // 3. Prepare the statement
  $stmt = $conn->prepare($sql);

  if ($stmt === false) {
    die("Error preparing statement: " . $conn->error);
  }

  // 4. Bind the parameters
  $new_password = "NewSecurePassword123!"; // A placeholder -  Never directly insert a user-provided password.
  $reset_token = $password_reset_token;
  $email = $email;

  $stmt->bind_param("ssi", $new_password, $reset_token, $email);

  // 5. Execute the query
  if (!$stmt->execute()) {
    die("Error executing query: " . $stmt->error);
  }

  // 6. Close the statement and connection
  $stmt->close();
  $conn->close();

  // 7.  Consider sending an email with the link to reset the password
  //     (This part is not included in this basic function but is *essential*
  //     for a real-world implementation)
  return true; // Indicate success
}


// Example Usage (for demonstration - NOT recommended for production)
// IMPORTANT:  This is just an example.  You should *never* directly
//  use user-provided data in a real application without proper sanitization and validation.
//  In a real application, you would generate a unique and secure token.
//  Also, you would send an email to the user with a link containing the token.

// $user_email = "test@example.com"; // Replace with a valid email address
// $reset_token = "unique_token_123";  // Generate a unique token -  Crucial for security
//
// if (forgot_password($user_email, $reset_token)) {
//   echo "Password reset link sent to " . $user_email;
// } else {
//   echo "Failed to reset password.";
// }


?>


<?php

// This is a simplified example for demonstration purposes.
// In a production environment, you should:
// 1.  Securely store passwords (e.g., hash them with bcrypt or Argon2).
// 2.  Implement rate limiting to prevent brute-force attacks.
// 3.  Use email libraries to send actual emails instead of just printing to the screen.
// 4.  Handle errors gracefully and securely.


// Configuration (replace with your database details)
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_db_user";
$db_password = "your_db_password";

// Function to reset password
function forgot_password($email, $new_password, $db) {
  // 1. Validate Email (Basic)
  if (empty($email)) {
    return "Invalid email address.";
  }

  // 2.  Check if user exists (Simple check - improve with more robust validation)
  $result = $db->query("SELECT id, email FROM users WHERE email = '$email'");
  if ($result->num_rows == 0) {
    return "User not found.";
  }

  $user_data = $result->fetch_assoc();
  $user_id = $user_data['id'];
  $user_email = $user_data['email'];

  // 3. Hash the New Password (Crucial for Security!)
  $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

  // 4. Update the Password in the Database
  $sql = "UPDATE users SET password = '$hashed_password' WHERE id = '$user_id'";
  if (!$db->query($sql)) {
    return "Error updating password. " . $db->error;
  }

  return "Password reset email sent. Check your inbox.";
}


// Example Usage (Simulate a form submission)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $new_password = $_POST["new_password"];

  // Database Connection (replace with your connection logic)
  $db = new mysqli($db_host, $db_user, $db_password, $db_name);

  if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
  }

  $result = forgot_password($email, $new_password, $db);
  echo $result; // Output the result to the user
} else {
  // Display the form (for demonstration)
  ?>
  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <label for="new_password">New Password:</label>
    <input type="password" id="new_password" name="new_password" required><br><br>

    <button type="submit">Reset Password</button>
  </form>
  <?php
}
?>


<?php

// Replace with your database connection details
$db_host = "localhost";
$db_name = "your_database_name";
$db_user = "your_username";
$db_password = "your_password";

// Check if the request method is POST
if ($_SERVER["REQUEST_METHOD"] == "POST") {

  // Get the email address from the form
  $email = $_POST["email"];

  // Validate the email address (basic validation - you should improve this)
  if (empty($email)) {
    $message = "Email address is required.";
  } else {
    // Hash the password (important for security)
    $hashed_password = password_hash("default_password", PASSWORD_DEFAULT);  // You'll need a default password for this example

    // Prepare the SQL query
    $sql = "SELECT id, email FROM users WHERE email = '$email'";

    // Execute the query
    $result = mysqli_query($db_connection, $sql);

    // Check if the query was successful
    if ($result) {
      // Check if any user was found
      if (mysqli_num_rows($result) > 0) {
        // Set the password reset token (a unique, random string)
        $reset_token = bin2hex(random_bytes(32));

        // Prepare the update query
        $update_query = "UPDATE users SET reset_token = '$reset_token' WHERE email = '$email'";

        // Execute the update query
        mysqli_query($db_connection, $update_query);

        // Send an email to the user with the reset link
        $to = $email;
        $subject = "Password Reset";
        $message = "Click on the following link to reset your password: " . "<a href='reset_password.php?token=$reset_token'>Reset Password</a>";
        $headers = "From: your_email@example.com";  // Change this to your email

        mail($to, $message, $headers);


        $message = "Password reset link has been sent to your email address.";
      } else {
        $message = "No user found with this email address.";
      }
    } else {
      $message = "Error querying the database.";
    }
  }
}

// Start the session
session_start();

// Display any error messages
if (isset($message)) {
  echo "<p style='color: red;'>$message</p>";
}

?>

<!-- HTML Form -->
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
  <label for="email">Email Address:</label>
  <input type="email" id="email" name="email" placeholder="Your Email" required>
  <button type="submit">Reset Password</button>
</form>


<?php

// Assuming you have a database connection established (e.g., $db connection)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if password reset initiated successfully, false otherwise.
 */
function forgot_password(string $email): bool
{
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email format provided: " . $email);  // Log the invalid email for debugging
    return false;
  }

  // 2. Check if User Exists
  $user = get_user_by_email($email); // Implement this function (see example below)

  if ($user === null) {
    error_log("User with email " . $email . " not found."); // Log the user not found
    return false;
  }


  // 3. Generate a Unique Token (Important for security!)
  $token = generate_unique_token(); // Implement this function (see example below)


  // 4. Store Token and User ID in Database (Temporary)
  //    This is a temporary link - don't store sensitive information directly.
  $result = store_token_for_user($user['id'], $token);

  if (!$result) {
      error_log("Failed to store token for user " . $email);
      return false;
  }


  // 5. Send Password Reset Email
  $subject = "Password Reset Request";
  $message = "Click this link to reset your password: " .  $_SERVER['REQUEST_SCHEME'] . "://" . $_SERVER['HTTP_HOST'] . "/reset_password?token=" . $token;
  $headers = "From: your_website@example.com\r
";
  $sent = send_email($email, $subject, $message, $headers);

  if (!$sent) {
      error_log("Failed to send password reset email to " . $email);
      // Optionally, you could delete the token from the database if email sending fails.
      // delete_token_for_user($user['id']);
      return false;
  }


  return true;
}



/**
 * Helper function to get user by email (Placeholder - Implement your database logic here)
 *
 * @param string $email The email address to search for.
 * @return array|null An array containing user data if found, or null if not.
 */
function get_user_by_email(string $email): ?array {
    // **Replace this with your actual database query**
    // Example:
    // $query = "SELECT * FROM users WHERE email = '$email'";
    // $result = mysqli_query($db, $query); // Or use PDO or your database driver
    // if (mysqli_num_rows($result) > 0) {
    //   $user = mysqli_fetch_assoc($result);
    //   return $user;
    // } else {
    //   return null;
    // }

  // Placeholder for demonstration:
  $users = [
    ['id' => 1, 'email' => 'test@example.com']
  ];
  foreach($users as $user){
    if($user['email'] == $email){
      return $user;
    }
  }
  return null;
}



/**
 * Helper function to generate a unique token.
 * This should be a cryptographically secure random string.
 *
 * @return string A unique token.
 */
function generate_unique_token(): string {
    return bin2hex(random_bytes(32)); // More secure than rand()
}

/**
 * Helper function to store the token for a user (implementation depends on your database)
 *
 * @param int $userId The ID of the user.
 * @param string $token The token to store.
 * @return bool True if token stored successfully, false otherwise.
 */
function store_token_for_user(int $userId, string $token): bool {
    // **Replace this with your actual database logic**
    // Example using mysqli:
    // $query = "INSERT INTO password_tokens (user_id, token, expiry_date) VALUES ($userId, '$token', NOW() + INTERVAL 30 DAY)";
    // if (mysqli_query($db, $query) === false) {
    //   return false;
    // }
    return true;
}



/**
 * Helper function to delete the token from the database.
 * (Optional - For added security.  Consider if the token is short-lived)
 * @param int $userId
 * @return bool
 */
function delete_token_for_user(int $userId): bool {
    // Implement your database logic to delete the token.
    // Example:
    // $query = "DELETE FROM password_tokens WHERE user_id = $userId";
    // if (mysqli_query($db, $query) === false) {
    //   return false;
    // }
    return true;
}



/**
 * Placeholder function to send an email.
 * You'll need to integrate with your email sending service here.
 * @param string $to
 * @param string $subject
 * @param string $message
 * @param string $headers
 * @return bool
 */
function send_email(string $to, string $subject, string $message, string $headers): bool {
    // **Replace this with your actual email sending logic**
    // Example using a basic SMTP implementation (not recommended for production):
    // $smtp = new PHPMailer();
    // $smtp->SMTPDebugEnable = false;
    // $smtp->Host = 'smtp.example.com';
    // $smtp->Port = 587;
    // $smtp->Username = 'your_username';
    // $smtp->Password = 'your_password';
    // $smtp->SetFrom('your_website@example.com', 'Your Website');
    // $smtp->AddAddress($to);
    // $smtp->Subject = $subject;
    // $smtp->MsgBody = $message, 'html';
    // $smtp->IsHTML(true);
    // $smtp->Send();

    return true; // Placeholder - always returns true
}


<?php

// Database connection details (Replace with your actual credentials)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_username';
$db_password = 'your_database_password';

//  ---  Function to reset password  ---
function forgot_password($email, $new_password, $db) {
    global $db_host, $db_name, $db_user, $db_password;

    // 1. Verify Email Exists
    $stmt = $db->prepare("SELECT id FROM users WHERE email = ?");
    $stmt->bind_param("s", $email);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows == 0) {
        return "Email not found.";
    }

    $user_id = $result->fetch_assoc()['id'];

    // 2.  Hash the New Password
    $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);


    // 3. Update Password in Database
    $stmt = $db->prepare("UPDATE users SET password = ? WHERE id = ?");
    $stmt->bind_param("ss", $hashed_password, $user_id);

    if ($stmt->execute() === false) {
        return "Failed to update password. Database error: " . $stmt->error;
    }
    
    $stmt->close();

    return "Password reset email sent.";

}


// Example Usage (Illustrative - Replace with your actual form handling)
// This is just for demonstration; you should implement proper form handling
// for security (CSRF protection, input validation, etc.)

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    $new_password = $_POST["new_password"];

    //  Database Connection (Establish Connection - crucial for any database operations)
    global $db_host, $db_name, $db_user, $db_password;

    $db = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($db->connect_error) {
        die("Connection failed: " . $db->connect_error);
    }


    $result = forgot_password($email, $new_password, $db);
    echo $result; // Output:  "Password reset email sent." or an error message
    $db->close();
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required><br><br>

        <label for="new_password">New Password:</label>
        <input type="password" id="new_password" name="new_password" required><br><br>

        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db connection)

/**
 * Resets a user's password based on their email address.
 *
 * @param string $email The user's email address.
 * @return bool True if a reset link was sent, false otherwise.
 */
function forgot_password(string $email)
{
    // 1. Validate Email (Important!)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided: " . $email); // Log for debugging
        return false;
    }

    // 2. Check if the user exists
    $user = get_user_by_email($email);  //  Implement this function (see example below)
    if (!$user) {
        error_log("User with email " . $email . " not found.");
        return false;
    }

    // 3. Generate a Unique Token and Store it in the Database
    $token = generate_unique_token();
    $result = $db->query("UPDATE users SET reset_token = '$token' WHERE email = '$email'");

    if ($result === false) {
        error_log("Error updating user's reset token: " . $db->error);
        return false;
    }

    // 4. Send the Password Reset Email
    $subject = "Password Reset Request";
    $message = "Please click on the following link to reset your password: <a href='" . $_SERVER['PHP_SELF'] . "?reset_token=$token'>Reset Password</a>";
    $headers = "From: your_email@example.com";  // Replace with your email
    $sent = send_email($email, $subject, $message, $headers);


    if (!$sent) {
        // Handle email sending failure (e.g., log the error, try again later)
        error_log("Failed to send password reset email to " . $email);
        //Optionally, you could try to manually trigger a retry.
        return false;
    }

    return true;
}


/**
 * Example function to retrieve user data by email (Replace with your actual database query)
 * This is a placeholder and needs to be adapted to your database schema.
 *
 * @param string $email The email address to search for.
 * @return array|null An associative array representing the user data, or null if not found.
 */
function get_user_by_email(string $email): ?array
{
    $query = "SELECT * FROM users WHERE email = '$email'";
    $result = $db->query($query);

    if ($result->num_rows > 0) {
        return $result->fetch_assoc();
    }

    return null;
}


/**
 * Generates a unique token for password resets.  Should be cryptographically secure.
 *
 * @return string A unique token.
 */
function generate_unique_token(): string
{
    return bin2hex(random_bytes(32)); // Uses a cryptographically secure random number generator.
}



// Example Usage (Demonstration - Don't use in production without proper validation)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];
    if (forgot_password($email)) {
        echo "Password reset email has been sent to " . $email;
    } else {
        echo "Failed to send password reset email.";
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <form method="post" action="">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Database configuration (Replace with your actual values)
$db_host = 'localhost';
$db_user = 'your_username';
$db_pass = 'your_password';
$db_name = 'your_database_name';

// Function to handle the forgot password process
function forgot_password($email) {
  // 1. Validate Email
  $email = filter_var($email, FILTER_SANITIZE_EMAIL);  // Sanitize input
  if(empty($email)){
    return "Invalid email address.";
  }


  // 2.  Check if User Exists
  $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
  if ($conn->connect_error) {
    return "Connection failed: " . $conn->connect_error;
  }

  $sql = "SELECT id, email FROM users WHERE email = '$email'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $user_id = $result->fetch_assoc()['id'];
    $user_email = $result->fetch_assoc()['email'];

    // 3. Generate a Unique Token
    $token = bin2hex(random_bytes(32)); // Generate a cryptographically secure token

    // 4.  Store the Token in the Database (Temporary)
    $sql = "INSERT INTO password_resets (user_id, token, expires_at) VALUES ($user_id, '$token', NOW() + INTERVAL 24 HOUR)"; // Expires after 24 hours

    if ($conn->query($sql) === TRUE) {
      // 5.  Send the Reset Link (Email) -  Implement this part
      $to = $email;
      $subject = 'Password Reset Link';
      $message = "Click on the following link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset=$token'>" . $_SERVER['PHP_SELF'] . "?reset=$token</a>";  // Use PHP_SELF to ensure correct link
      $headers = "From: your_email@example.com"; // Replace with your email
      mail($to, $message, $headers);

      return "Password reset link sent to your email. Please check your inbox.";
    } else {
      return "Error inserting token into database: " . $conn->error;
    }
  } else {
    return "User not found with email: $email";
  }

  $conn->close();
}

// Example Usage (for testing - typically handled through a form)
if ($_SERVER["REQUEST_METHOD"] == "GET") {
  if (isset($_GET['reset'])) {
    $reset_token = $_GET['reset'];
    $result = forgot_password($reset_token);
    echo $result;
  } else {
     echo "Enter email to reset your password.";
  }
}
?>


// Delete the token after reset is confirmed
$sql = "DELETE FROM password_resets WHERE token = '$token' AND user_id = $user_id";
if ($conn->query($sql) === TRUE) {
    // Token deleted successfully
}


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique, secure token, sends an email with a
 * reset link, and updates the user's password in the database.
 *
 * @param string $email The user's email address.
 * @param PDO $pdo  The PDO database connection object.
 * @return bool True if the password reset process started successfully,
 *             false otherwise (e.g., email not sent).
 */
function forgot_password(string $email, PDO $pdo) {
    // 1. Generate a secure, unique token.  Use a strong random string.
    $token = bin2hex(random_bytes(32));

    // 2. Prepare the reset token and user ID for the database.
    $sql = "SELECT id FROM users WHERE email = :email";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':email', $email, PDO::PARAM_STR);
    $stmt->execute();

    $user_id = null;
    if ($stmt->fetch(PDO::FETCH_ASSOC)) {
        $user_id = $stmt->fetch(PDO::FETCH_ASSOC)['id'];
    }

    if (!$user_id) {
        return false; // User not found
    }

    // 3.  Store the token in the database, linked to the user.
    $sql = "INSERT INTO password_resets (user_id, token, expires_at)
            VALUES (:user_id, :token, :expires_at)";
    $stmt = $pdo->prepare($sql);
    $stmt->bindParam(':user_id', $user_id, PDO::PARAM_INT);
    $stmt->bindParam(':token', $token, PDO::PARAM_STR);
    $expires_at = time() + (2 * 60 * 60); // Expires in 2 hours
    $stmt->bindParam(':expires_at', $expires_at, PDO::PARAM_INT);
    $stmt->execute();



    // 4.  Send the password reset email.
    $to = $email;
    $subject = 'Password Reset';
    $message = "Click this link to reset your password: " . '<a href="' . $_SERVER['PHP_SELF'] . '?reset=' . $token . '"' . ' >Reset Password</a>';
    $headers = 'From: your_email@example.com' . "\r
";

    if (mail($to, $subject, $message, $headers)) {
        return true;
    } else {
        // Log an error if the email fails to send
        error_log("Failed to send email for password reset: " . $email);
        return false;
    }
}


// Example Usage (Illustrative -  Don't include this directly in your main application code!)
// To use this, you'd typically have it called from a form submission handler.
// This example shows how you *would* call it, but this is just for demonstration.

//  This is just an example. Replace with your actual database connection.
/*
$pdo = new PDO("mysql:host=localhost;dbname=your_database_name", "your_username", "your_password");

if (isset($_POST['email'])) {
    $email = $_POST['email'];
    if (forgot_password($email, $pdo)) {
        echo "Password reset email has been sent to $email.";
    } else {
        echo "Failed to initiate password reset.";
    }
}
*/
?>


<?php

/**
 *  Forgot Password Function
 *
 *  This function sends an email with a password reset link to the user's registered email address.
 *
 *  @param string $email The email address of the user.
 *  @return bool True if the email was sent successfully, false otherwise.
 */
function forgot_password(string $email): bool
{
    // 1. Validate Email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided: " . $email); // Log invalid email
        return false;
    }

    // 2. Check if the user exists
    $user = get_user_by_email($email);  // Assumes you have this function
    if (!$user) {
        error_log("User with email " . $email . " not found.");
        return false;
    }

    // 3. Generate a unique token and expiration time
    $token = generate_unique_token();
    $expiration_time = time() + (2 * 60 * 60); // Token valid for 2 hours. Adjust as needed.
    
    // 4. Store token and expiration time in the database
    if (!store_token_in_database($user->id, $token, $expiration_time)) {
      error_log("Failed to store token in database for user " . $email);
      return false;
    }
    
    // 5. Build the reset link
    $reset_link = app_url() . "/reset_password?token=" . urlencode($token); // Use app_url() or your base URL

    // 6. Send the reset email
    if (!send_reset_password_email($email, $reset_link)) {
        error_log("Failed to send reset password email to " . $email);
        // You might want to handle this failure differently (e.g., display an error message)
        return false;
    }

    return true;
}


/**
 * Placeholder functions - Replace with your actual implementations.
 */
function get_user_by_email(string $email): ?User // Assuming User is your user model
{
    // Replace with your database query to retrieve the user by email
    // Example:
    // $result = mysqli_query($conn, "SELECT * FROM users WHERE email = '$email'");
    // if (mysqli_num_rows($result) > 0) {
    //    $user = new User();
    //    $user->load($result->fetch_assoc());
    //    return $user;
    // }
    // return null;

    // Dummy User class
    class User {
        public $id;
        public $email;
        public function load($data) {
            $this->id = $data['id'];
            $this->email = $data['email'];
        }
    }

    return null;
}

function generate_unique_token(): string
{
    return bin2hex(random_bytes(32)); // Generate a cryptographically secure random token
}

function store_token_in_database(int $user_id, string $token, int $expiration_time): bool
{
  // Replace with your database query to store the token and expiration time
  // Example:
  // $result = mysqli_query($conn, "INSERT INTO password_tokens (user_id, token, expiration_time) VALUES ($user_id, '$token', $expiration_time)");
  // return mysqli_affected_rows($conn) > 0;

  return true; //Dummy implementation
}

function urlencode($string) {
  // Use built-in urlencode function for portability
  return urlencode($string);
}

function send_reset_password_email(string $email, string $reset_link): bool
{
    // Replace with your email sending logic
    // Example:
    // $subject = "Password Reset";
    // $body = "Click the following link to reset your password: " . $reset_link;
    // $headers = "From: your_email@example.com\r
";
    // return mail($email, $subject, $body, $headers);
    return true; //Dummy implementation
}

function app_url() {
    // Return your application's base URL
    return "http://localhost/your_app/";
}
?>


<?php

// Assuming you have a database connection established
// $db = new PDO(...);  // Replace with your database connection

// **Important: Replace these with your actual values**
$table_name = 'users'; // Table name where user accounts are stored
$email_column = 'email';
$password_column = 'password';
$reset_token_column = 'reset_token';
$expiry_time = 60 * 60 * 24; // Expire reset token after 24 hours (seconds)
$secret_key = 'your_secret_key_here'; // A strong, random secret key

/**
 * Generates a unique reset token.
 *
 * @return string Unique reset token.
 */
function generateUniqueToken() {
  return bin2hex(random_bytes(32));
}


/**
 * Creates a reset token for a user.
 *
 * @param PDO $db  Database connection.
 * @param string $email  User's email.
 * @return bool True on success, false on failure.
 */
function createResetToken(PDO $db, string $email) {
  $token = generateUniqueToken();

  $stmt = $db->prepare("SELECT id FROM {$table_name} WHERE {$email_column} = :email");
  $stmt->bindParam(':email', $email, PDO::PARAM_STR);
  $stmt->execute();

  $user_id = $stmt->fetch(PDO::FETCH_ASSOC);

  if ($user_id) {
    $stmt = $db->prepare("UPDATE {$table_name} SET {$reset_token_column} = :token, expiry_time = :expiry_time WHERE id = :user_id");
    $stmt->bindParam(':user_id', $user_id['id'], PDO::PARAM_INT);
    $stmt->bindParam(':token', $token, PDO::PARAM_STR);
    $stmt->bindParam(':expiry_time', $expiry_time, PDO::PARAM_INT);
    return $stmt->execute();
  } else {
    return false; // User not found
  }
}


/**
 * Resets the password for a given email and token.
 *
 * @param PDO $db Database connection.
 * @param string $email User's email.
 * @param string $token Token.
 * @return bool True on success, false on failure.
 */
function resetPassword(PDO $db, string $email, string $token) {
  $stmt = $db->prepare("SELECT id FROM {$table_name} WHERE {$email_column} = :email AND {$reset_token_column} = :token");
  $stmt->bindParam(':email', $email, PDO::PARAM_STR);
  $stmt->bindParam(':token', $token, PDO::PARAM_STR);
  $stmt->execute();

  $user_id = $stmt->fetch(PDO::FETCH_ASSOC);

  if ($user_id) {
    // Generate a new password (for demonstration - use a proper password generation method in production)
    $new_password = 'password123';  // **IMPORTANT:  This is just an example!  Never use this in production.**

    $stmt = $db->prepare("UPDATE {$table_name} SET {$password_column} = :password, {$reset_token_column} = '', expiry_time = '' WHERE id = :user_id");
    $stmt->bindParam(':password', $new_password, PDO::PARAM_STR);
    $stmt->bindParam(':user_id', $user_id['id'], PDO::PARAM_INT);
    return $stmt->execute();
  } else {
    return false; // Token or user not found
  }
}


/**
 * Example Usage (For demonstration purposes only - handle this in a real application)
 */
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $reset_token = $_POST["reset_token"];

  // Create a reset token if one doesn't exist. This is the trigger to start the process.
  if (!createResetToken($db, $email)) {
    echo "<p>Failed to generate reset token.</p>";
  } else {
    //Reset Password
    if (resetPassword($db, $email, $reset_token)) {
      echo "<p>Password reset successful!  Please check your email.</p>";
    } else {
      echo "<p>Invalid reset token or user not found.</p>";
    }
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit" name="reset_button">Reset Password</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db)
// and a 'users' table with 'email' and 'password' columns.

function forgotPassword($email) {
  // 1. Check if the email exists in the database
  $stmt = $db->prepare("SELECT id FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    return false; // Email not found
  }

  // 2. Generate a unique, time-based token
  $token = bin2hex(random_bytes(32));  // Secure random bytes

  // 3. Store the token and user ID in the database
  $stmt = $db->prepare("INSERT INTO password_resets (user_id, token, expires_at) 
                         VALUES (?, ?, NOW())");
  $stmt->execute([$user['id'], $token]);

  // 4. Send the password reset email (implementation details depend on your email setup)
  $resetLink = "https://yourwebsite.com/reset-password?token=" . $token; // Replace with your actual website URL
  sendResetPasswordEmail($email, $resetLink);  //  See helper function below for details

  return true; // Password reset request submitted successfully
}


//Helper function to send the password reset email.  Replace with your email sending logic.
function sendResetPasswordEmail($email, $resetLink) {
    //  Implement your email sending logic here.  This is just a placeholder.

    // Example using a simple email copy/paste:
    $to = $email;
    $subject = "Password Reset Request";
    $message = "Please click the following link to reset your password:
" . $resetLink;
    $headers = "From: yourname@example.com\r
";

    mail($to, $message, $headers);
    // Alternatively, use a more robust email library (e.g., PHPMailer) for better control and handling.
}



// Example Usage (Illustrative):
// $email = $_POST['email']; // Get email from form submission
// if (isset($email)) {
//   if (forgotPassword($email)) {
//     echo "Password reset email sent to " . $email;
//   } else {
//     echo "Invalid email or email already exists.";
//   }
// }

?>


<?php

/**
 * Forgets a user's password.
 *
 * This function generates a unique, time-based token to be emailed to the user.
 * After the user confirms the password reset link, the token is invalidated.
 *
 * @param string $email The user's email address.
 * @return bool True if an email was sent successfully, false otherwise.
 */
function forgotPassword(string $email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email address provided: " . $email); // Log for debugging
    return false;
  }

  // 2. Generate a Unique Token
  $token = bin2hex(random_bytes(32)); // Generate a cryptographically secure random token

  // 3. Store Token and User ID in Database (Example - Adapt to your database structure)
  $db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password'); // Replace with your database credentials

  try {
    $stmt = $db->prepare("INSERT INTO password_resets (user_id, token, expires_at) VALUES (:user_id, :token, :expires_at)");
    $stmt->bindParam(':user_id', (int)$email);  // Use (int) to ensure integer type
    $stmt->bindParam(':token', $token);
    $stmt->bindParam(':expires_at', time() + (60 * 60 * 24)); // Expire in 24 hours
    $stmt->execute();

    // 4. Send Reset Email
    $resetLink = 'http://' . $_SERVER['HTTP_HOST'] . '/reset_password?token=' . $token; // Build the reset link
    $subject = 'Password Reset';
    $message = "Click the link below to reset your password:
" . $resetLink;
    $headers = "From: Your Website <admin@yourwebsite.com>\r
";

    if (mail($email, $subject, $message, $headers)) {
      return true;
    } else {
      // Log the email sending failure
      error_log("Failed to send email to " . $email);
      return false;
    }
  } catch (PDOException $e) {
    // Log the database error
    error_log("Database error: " . $e->getMessage());
    return false;
  }
}

// Example Usage:
// $email = 'user@example.com';
// if (forgotPassword($email)) {
//   echo "Password reset email sent to " . $email;
// } else {
//   echo "Failed to send password reset email.";
// }

?>


<?php

// Assuming you have a database connection established
// (e.g., $db = mysqli_connect('host', 'username', 'password', 'database'));

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user.
 * @return string  A message indicating success or failure.
 */
function forgotPassword(string $email): string
{
    // 1. Validate Input (Important!)
    if (empty($email)) {
        return "Error: Email address is required.";
    }

    // 2. Check if the user exists in the database
    $stmt = $db->prepare("SELECT id, email FROM users WHERE email = ?");
    $stmt->bind_param("s", $email);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        $user = $result->fetch_assoc();
        $userId = $user['id'];
        $stmt->close(); // Close the query

        // 3. Generate a unique reset token
        $resetToken = bin2hex(random_bytes(32)); // Generate a cryptographically secure token
        $stmt = $db->prepare("INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, ?)");
        $stmt->bind_param("iii", $userId, $resetToken, time() + 3600); // Expires in 1 hour.  Adjust as needed.
        $stmt->execute();
        $stmt->close();

        // 4. Send the reset password link (Implementation depends on your email setup)
        $resetLink = "https://yourwebsite.com/reset_password?token=$resetToken"; // Replace with your actual domain
        // You'll likely need to implement code here to send an email
        // with this link. Example:
        // sendEmail( $email, "Reset Password", "Click this link to reset your password: $resetLink");


        return "Password reset link sent to your email address. Please check your inbox.";

    } else {
        return "User not found.";
    }
}


// Example Usage (Illustrative - Replace with your actual logic)
// $email = "testuser@example.com";
// $result = forgotPassword($email);
// echo $result;


// Placeholder for sendEmail function (You'll need to implement this)
/**
 * Sends an email.
 * @param string $to
 * @param string $subject
 * @param string $message
 */
function sendEmail(string $to, string $subject, string $message) {
  // TODO: Implement your email sending logic here (using PHPMailer, etc.)
  // Example:
  // $mail = new PHPMailer(true);
  // $mail->SetFrom("your_email@example.com", "Your Website");
  // $mail->AddAddress($to, "User Name");  // Get user name from database
  // $mail->Subject = $subject;
  // $mail->MsgBody = $message, 'html'); // or 'text'
  // $mail->send();
}

?>


<?php

// This is a simplified example and should be used with caution in a production environment.
// Security is paramount!  This example lacks robust security measures and should be adapted 
// to your specific needs and a production-ready setup.

// Database connection (replace with your actual connection details)
$dbHost = "localhost";
$dbName = "your_database_name";
$dbUser = "your_database_user";
$dbPass = "your_database_password";

// 1. Reset Password Request Form Handling
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = trim($_POST["email"]);

    // Basic email validation (improve this!)
    if (empty($email)) {
        $error = "Please enter your email address.";
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email address.";
    } else {
        //  IMPORTANT:  This is a simplified example.  In a real application,
        //  you would:
        //  1.  Check if the user exists in the database.
        //  2.  Generate a unique, time-based token.
        //  3.  Store the token in the database, linked to the user's email.
        //  4.  Send an email containing a link with the token.
        //  5.  Implement password reset logic on the link click.
        //  This example skips those steps for brevity.

        // Simulate a reset link generation (DO NOT USE IN PRODUCTION!)
        $resetToken = bin2hex(random_bytes(32));  // Generate a secure random token

        //  Store the token in the database
        //  (Replace with your actual database insert query)
        //  Example:
        //  $sql = "INSERT INTO password_resets (email, token, expiry) VALUES ('$email', '$resetToken', NOW() + INTERVAL 1 HOUR)";
        //  mysqli_query($conn, $sql);


        // Display a message indicating the reset link has been generated.
        echo "<p>An email has been sent to $email with instructions to reset your password.</p>";
        echo "<p>You can view the email in your inbox or spam folder.</p>";

    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

<h1>Forgot Password</h1>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email Address:</label>
    <input type="email" id="email" name="email" placeholder="your.email@example.com" value="<?php echo isset($_POST['email']) ? htmlspecialchars($_POST['email']) : ''; ?>">
    <?php if (isset($error)) { ?>
        <p class="error"><?php echo $error; ?></p>
    <?php } ?>
    <button type="submit">Request Password Reset</button>
</form>

</body>
</html>


<?php

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password.
 * @param string $secretKey (Optional) A secret key for verification.  Highly recommended.
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $newPassword, string $secretKey = "") {
    // 1. Validate Input
    if (empty($email) || empty($newPassword)) {
        return false; // Required fields must be provided
    }

    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return false; // Invalid email format
    }

    if (strlen($newPassword) < 8) { //  Example minimum password length
        return false; //  Minimum length requirement
    }

    // 2.  Check if a user exists
    $user = getUserById($email); //  Assuming you have a function to fetch user by email

    if (!$user) {
        return false; // User not found
    }

    // 3. Verify Secret Key (Important for security)
    if ($secretKey && !verifySecretKey($user->id, $secretKey)) {
        return false; // Invalid secret key
    }

    // 4.  Reset Password
    $hashedNewPassword = password_hash($newPassword, PASSWORD_DEFAULT); // Hash the new password

    // 5.  Update User's Password
    $result = updateUserPassword($user->id, $hashedNewPassword);

    if (!$result) {
        return false; // Failed to update password
    }

    // 6. Generate and Send Password Reset Email (Optional, but highly recommended)
    // Send an email containing a link to reset the password
    sendPasswordResetEmail($email, $hashedNewPassword); // Assuming you have this function

    return true; // Password reset successful
}


/**
 * Dummy Functions - Replace with your actual implementations
 */
function getUserById(string $email) {
    // Replace this with your database query to fetch the user by email.
    // This is a placeholder.
    $users = [
        ['id' => 1, 'email' => 'test@example.com'],
        ['id' => 2, 'email' => 'another@example.com'],
    ];

    foreach ($users as $user) {
        if ($user['email'] === $email) {
            return $user;
        }
    }
    return null;
}


function verifySecretKey(int $userId, string $secretKey) {
    // In a real implementation, compare the provided secret key
    // to a hash stored for the user.
    // This is just a placeholder.
    // You would typically store the hashed secret key in the database
    // alongside the user's ID.
    // For this example, we'll just return true if the secret key is "secret123".
    return $secretKey === "secret123";
}

function updateUserPassword(int $userId, string $hashedPassword) {
    // Replace this with your database update query to set the password.
    // This is a placeholder.
    // Example:  UPDATE users SET password = '$hashedPassword' WHERE id = $userId;
    echo "Updating password for user ID: " . $userId . " with hashed password: " . $hashedPassword . PHP_EOL;
    return true;
}

function sendPasswordResetEmail(string $email, string $hashedPassword) {
    //  Replace this with your email sending implementation
    //  Example:  Use PHPMailer, SwiftMailer, or another email library
    echo "Sending password reset email to: " . $email . PHP_EOL;
    echo "Hashed password: " . $hashedPassword . PHP_EOL;
}



// --- Example Usage ---
$email = 'test@example.com';
$newPassword = 'MyNewPassword123';
$secretKey = "secret123"; // Include this for verification

if (forgotPassword($email, $newPassword, $secretKey)) {
    echo "Password reset successful for $email" . PHP_EOL;
} else {
    echo "Password reset failed for $email" . PHP_EOL;
}


?>


<?php

/**
 * Forgets a user's password.
 *
 * This function sends an email to the user's registered email address
 * containing a temporary password.  It also logs the reset attempt.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @param string $baseUrl The base URL for the password reset link.  
 *                         Should include the domain and path (e.g., 'https://example.com/reset_password').
 * @param string $salt The salt used for hashing the password.  Important for security.
 *
 * @return bool True on success, false on failure (e.g., email not sent).
 */
function forgotPassword(string $email, string $baseUrl, string $salt)
{
    // Validate email format (basic check - improve this for production)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log the error
        return false;
    }

    // Generate a temporary password
    $temporaryPassword = generateTemporaryPassword(6); // Adjust length as needed

    // Hash the temporary password
    $hashedTemporaryPassword = password_hash($temporaryPassword, PASSWORD_DEFAULT, ['salt' => $salt]);

    // Store the temporary password and user ID in the database
    $userId = getUserIDByEmail($email); //  Assume you have a function to get the user ID
    if (!$userId) {
        error_log("User with email " . $email . " not found.");
        return false;
    }

    // Store the temporary password and timestamp in the database.  Consider using a dedicated
    // table for reset tokens to avoid collisions.
    $resetToken = password_hash($temporaryPassword . '_' . $userId, PASSWORD_DEFAULT, ['salt' => $salt]); // Add userId to token
    
    // Store data in database (replace with your actual database interaction)
    // Example:
    // $sql = "INSERT INTO password_resets (user_id, token, created_at) VALUES ($userId, '$resetToken', NOW())";
    // mysqli_query($connection, $sql);  // Replace $connection with your database connection

    // Send the password reset email
    if (!sendResetPasswordEmail($email, $temporaryPassword, $baseUrl)) {
        error_log("Failed to send password reset email to " . $email);
        // Consider handling this differently depending on your requirements.
        // You might try sending the email again later, or return an error.
        return false;
    }

    return true;
}

/**
 * Generates a random temporary password.
 * 
 * @param int $length The desired length of the password.
 * @return string The generated temporary password.
 */
function generateTemporaryPassword(int $length = 6) {
    $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-={}[]|\'":<>?/';
    $password = '';
    $passwordLength = strlen($characters);

    for ($i = 0; $i < $length; $i++) {
        $char = $characters[rand(0, $charLength)];
        $password .= $char;
    }
    return $password;
}


/**
 * Placeholder function for sending the password reset email.
 * 
 * @param string $email The email address of the user.
 * @param string $temporaryPassword The temporary password.
 * @param string $baseUrl The base URL for the password reset link.
 * @return bool True on success, false on failure.
 */
function sendResetPasswordEmail(string $email, string $temporaryPassword, string $baseUrl) {
    // Implement your email sending logic here using a library like PHPMailer.
    // This is a placeholder.

    $subject = "Password Reset Link";
    $message = "Please click the following link to reset your password: " . $baseUrl . "/reset_password?token=" . urlencode($temporaryPassword); 

    //  In a real implementation, you would use a mail library
    //  to send the email.  For example:
    //  $mail = new PHPMailer\PHPMailer\PHPMailer();
    //  $mail->SetSMTPDebugEnable(true);
    //  $mail->addAddress($email, 'User');
    //  $mail->Subject = $subject;
    //  $mail->Body = $message;
    //  $mail->send();

    return true; // Assume success for this example
}


/**
 * Placeholder function for getting the user ID by email.
 * 
 * @param string $email The email address of the user.
 * @return int|null The user ID if found, null otherwise.
 */
function getUserIDByEmail(string $email) {
  // Implement your logic to retrieve the user ID from the database
  // based on the email address. This is a placeholder.
  // Example:
  // $result = mysqli_query($connection, "SELECT id FROM users WHERE email = '$email'");
  // if ($result) {
  //   $row = mysqli_fetch_assoc($result);
  //   return $row['id'];
  // } else {
  //   return null;
  // }
    return null; // Placeholder
}

?>


<?php

// Assuming you have a database connection established (e.g., $db)

// 1. Input Validation: Check if the email is valid.
if (empty($_POST['email'])) {
    $error = "Please enter your email address.";
} else {
    $email = filter_var($_POST['email'], FILTER_SANITIZE_EMAIL); // Sanitize the email
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email address.";
    }
}

// 2.  Password Reset Token Generation (Important for Security)
function generateResetToken() {
    return bin2hex(random_bytes(32)); // Generate a cryptographically secure random token
}

// 3.  Database Query (Replace with your actual database structure)
// In a real application, you'd likely have a user table with an 'email' and 'password' column
// For this example, we'll assume a simplified table structure.

// Example Table Structure:
// Users Table:
//   - id (INT, PRIMARY KEY)
//   - email (VARCHAR)
//   - password (VARCHAR)
//   - reset_token (VARCHAR, UNIQUE)

function resetPassword($email, $resetToken) {
    // Example Database Query (Replace with your actual query)
    $sql = "UPDATE users SET reset_token = NULL WHERE email = '$email' AND reset_token = '$resetToken'";
    $result = mysqli_query($GLOBALS['db'], $sql); //Use your database connection here.
    return $result;
}


// 4.  Handle the Reset Request (POST Request)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Check if the token is provided
    if (isset($_POST['reset_token'])) {
        $resetToken = filter_var($_POST['reset_token'], FILTER_SANITIZE_STRING);

        // Reset the password (This would typically be a link to a page with a form)
        $resetResult = resetPassword($email, $resetToken);

        if ($resetResult) {
            // Password reset successful - Redirect to a page for the user to set a new password.
            echo "<p>Password reset link sent to your email.  Please set a new password.</p>";
            //  Implement code to redirect the user to a page with a form to enter the new password.
        } else {
            // Handle the error
            echo "<p>Error resetting password.  Please try again.</p>";
            // Log the error for debugging.
        }
    } else {
        echo "<p>Invalid or missing reset token.</p>";
    }
}


?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h1>Forgot Password</h1>

    <?php if (isset($error)): ?>
        <p style="color: red;"><?php echo $error; ?></p>
    <?php endif; ?>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="email">Email Address:</label>
        <input type="email" id="email" name="email" placeholder="Your email" value="<?php echo isset($email) ? htmlspecialchars($email) : ''; ?>">
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Assuming you have a database connection established and named $db

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user requesting password reset.
 * @return string A message indicating success or failure.
 */
function forgot_password(string $email) {
    // 1. Validate Input (Important for Security)
    if (empty($email)) {
        return "Error: Email address is required.";
    }

    // Sanitize the email address to prevent potential vulnerabilities
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);
    if (filter_var($email, FILTER_VALIDATE_EMAIL) === false) {
        return "Error: Invalid email address format.";
    }

    // 2. Check if User Exists
    $user = getUserByEmail($email); // Assuming you have a function to retrieve user by email
    if ($user === null) {
        return "Error: User not found.";
    }

    // 3. Generate a Unique Token and Store it
    $token = generate_unique_token();  // Assuming you have a function to generate a unique token
    $expiry_time = time() + (3600 * 24); // Token expires in 24 hours (adjust as needed)

    // Store the token and expiry time in the database, linked to the user.
    // This is a crucial step.  The example below is illustrative;
    // your actual implementation will vary based on your database schema.
    store_token($user->id, $token, $expiry_time);

    // 4. Send the Password Reset Email
    $subject = "Password Reset Request";
    $headers = "From: your_email@example.com" . "\r
"; // Replace with your email
    $message = "Click on this link to reset your password: " . base_url . "reset_password?token=" . urlencode($token);
    $result = send_email($email, $subject, $headers, $message);

    if ($result) {
        return "Password reset link has been sent to your email.";
    } else {
        return "Error: Failed to send email.";
    }
}


/**
 * Placeholder functions (You'll need to implement these based on your application)
 */
// Example: Get user by email (Replace with your actual database query)
function getUserByEmail(string $email): ?User {
    // Example database query - Replace with your actual query
    // Assuming you have a User class/model
    // This is just a placeholder - replace with your logic
    //  $db = get_database_connection();  // Get database connection
    //  $query = "SELECT * FROM users WHERE email = ?";
    //  $stmt = $db->prepare($query);
    //  $stmt->execute([$email]);
    //  $user = $stmt->fetch(PDO::FETCH_ASSOC);
    //  if ($user) {
    //      return new User($user); // Create a User object
    //  }
    //  return null;

    // Placeholder for demo - returns a dummy user object
    return new User(['id' => 1, 'email' => 'test@example.com']);
}

// Example: Generate a unique token (You'll need to implement this)
function generate_unique_token(): string {
    return bin2hex(random_bytes(32)); // A secure random string
}

// Example: Store the token and expiry time in the database (Implement this)
function store_token(int $userId, string $token, int $expiry_time): void {
  // Implement the logic to store the token and expiry time in your database
  //  e.g., using a database query to update the user's record.
  // Example:
  // $db = get_database_connection();
  // $query = "UPDATE users SET token = ?, expiry_time = ? WHERE id = ?";
  // $stmt = $db->prepare($query);
  // $stmt->execute([$token, $expiry_time, $userId]);
}

// Example: Send an email (You'll need to implement this, likely using a library)
function send_email(string $to, string $subject, string $headers, string $message): bool {
    //  Implement the email sending logic using a library like PHPMailer
    //  This is a placeholder -  replace with your actual email sending code.
    //  For demonstration, simply return true.
    //  e.g.,
    //  $mailer = new PHPMailer(true);
    //  $mailer->addAddress($to, $to);
    //  $mailer->setFrom('your_email@example.com', 'Your Name');
    //  $mailer->Subject = $subject;
    //  $mailer->Body = $message;
    //  return $mailer->send();

    // Placeholder
    return true;
}



// Example User Class (Customize as needed)
class User {
    public int $id;
    public string $email;

    public function __construct(array $data) {
        $this->id = $data['id'];
        $this->email = $data['email'];
    }
}



// Example Usage:
$email = "test@example.com"; // Replace with a user's email
$result = forgot_password($email);
echo $result . "
";

?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Forgets a user's password and sends a password reset link.
 *
 * @param string $email The user's email address.
 * @return bool True if an email was sent, false otherwise.
 */
function forgotPassword(string $email): bool
{
    // 1. Validate Email (Important Security Step!)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided: " . $email); // Log for debugging
        return false;
    }

    // 2. Check if the user exists
    $user = getUserByEmail($email);

    if (!$user) {
        error_log("User with email: " . $email . " not found."); // Log for debugging
        return false;
    }

    // 3. Generate a Unique Token and Timestamp
    $token = generateUniqueToken();
    $timestamp = time();

    // 4. Create the Reset Token Record (Store this in your database)
    //   *  Email
    //   *  Token
    //   *  Expiration Time
    resetTokenRecord = [
        'email' => $email,
        'token' => $token,
        'expiry' => $timestamp + (60 * 60 * 24) // Expires in 24 hours
    ];

    // Save the record to the database.  Replace this with your actual database query
    if (!saveResetToken($resetTokenRecord)) {
        error_log("Failed to save reset token record for " . $email);
        return false;
    }


    // 5.  Send the Password Reset Email (Implement your email sending logic here)
    $subject = "Password Reset Request";
    $message = "Click the following link to reset your password: " . base_url() . "/reset-password?token=" . $token; // Replace base_url()

    $headers = "From: " . get_sender_email(); //Replace with your sender email address
    if (!sendEmail($subject, $message, $headers)) {
        error_log("Failed to send password reset email for " . $email);
        //Optionally, you could delete the token from the database if email sending fails
        deleteResetToken($email, $token);
        return false;
    }

    return true;
}

/**
 *  Dummy function to simulate getting user data from database.  Replace with your actual query.
 *  @param string $email
 *  @return array|null User data, or null if not found.
 */
function getUserByEmail(string $email): ?array {
    // Example using a dummy user. Replace with your database query
    $users = [
        ['id' => 1, 'email' => 'test@example.com', 'password' => 'hashed_password'],
    ];

    foreach ($users as $user) {
        if ($user['email'] === $email) {
            return $user;
        }
    }
    return null;
}


/**
 * Dummy function to generate a unique token.
 * @return string
 */
function generateUniqueToken(): string {
    return bin2hex(random_bytes(32)); //Generate a 32-byte (256-bit) random string.
}

/**
 * Dummy function to save the reset token record to the database. Replace with your actual database query.
 * @param array $resetTokenRecord
 * @return bool
 */
function saveResetToken(array $resetTokenRecord): bool {
    //Replace with your actual database insert query.  For demonstration, we just return true.
    //Example:
    // $sql = "INSERT INTO reset_tokens (email, token, expiry) VALUES (?, ?, ?)";
    // $stmt = $db->prepare($sql);
    // $stmt->execute([$resetTokenRecord['email'], $resetTokenRecord['token'], $resetTokenRecord['expiry']]);
    return true;
}


/**
 * Dummy function to delete the reset token record. Replace with your actual database query.
 * @param string $email
 * @param string $token
 * @return bool
 */
function deleteResetToken(string $email, string $token): bool {
    //Replace with your actual database delete query.
    //Example:
    //$sql = "DELETE FROM reset_tokens WHERE email = ? AND token = ?";
    //$stmt = $db->prepare($sql);
    //$stmt->execute([$email, $token]);
    return true;
}

/**
 * Dummy function for sending emails.  Replace with your actual email sending logic.
 * @param string $subject
 * @param string $message
 * @param string $headers
 * @return bool
 */
function sendEmail(string $subject, string $message, string $headers): bool {
    // Simulate email sending.  Replace with your actual email sending logic.
    // You'll likely use a library like PHPMailer or SwiftMailer for actual sending.
    error_log("Simulating sending email: Subject: " . $subject . ", Message: " . $message);
    return true;
}

/**
 * Dummy function to get the base URL.  Replace with your actual base URL.
 * @return string
 */
function base_url(): string {
    // Replace with your application's base URL
    return "http://localhost/my_app/";
}

/**
 * Dummy function to get the sender email.  Replace with your actual sender email.
 * @return string
 */
function get_sender_email(): string {
    // Replace with your actual sender email address
    return "noreply@example.com";
}

// Example Usage:
$email = "test@example.com"; // Replace with the user's email
if (forgotPassword($email)) {
    echo "Password reset email has been sent to " . $email;
} else {
    echo "Failed to send password reset email for " . $email;
}

?>


<?php

// This is a simplified example for demonstration purposes only.
// In a production environment, you MUST implement robust security measures.

// Database connection (replace with your actual credentials)
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$database = 'your_database';

// Function to handle password reset
function forgot_password($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return 'Invalid email address.';
  }

  // 2. Check if the email exists in the user table
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  $sql = "SELECT id, password_reset_token FROM users WHERE email = '$email'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    $id = $user['id'];
    $token = $user['password_reset_token'];

    // 3. Generate a new, unique token (important for security)
    $new_token = bin2hex(random_bytes(32)); 

    // 4. Update the password_reset_token with the new token
    $update_sql = "UPDATE users SET password_reset_token = '$new_token' WHERE id = '$id'";
    if ($conn->query($update_sql) === TRUE) {
      // 5. Send an email with the reset link
      $to = $email;
      $subject = 'Password Reset Link';
      $message = "Please click this link to reset your password: " . $_SERVER['PHP_SELF'] . "?reset=" . $new_token;  // Use PHP_SELF to ensure the correct script is called.
      $headers = "From: your_email@example.com" . "\r
";
      mail($to, $message, $headers);

      return 'Password reset email sent to ' . $email . '. Please check your inbox.';
    } else {
      return 'Error updating password reset token.';
    }
  } else {
    return 'User not found.';
  }

  $conn->close();
}

// Example Usage (Handle form submission - NOT FOR PRODUCTION)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $reset_message = forgot_password($email);
  echo $reset_message;
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Assume you have a database connection established (e.g., $db)
// This is a simplified example - replace with your actual database connection
// For demonstration purposes, we'll use a hardcoded user and password.

// Example user data (replace with your database)
$users = [
    'john.doe@example.com' => 'password123',
    'jane.smith@example.com' => 'securePass456'
];

/**
 * Forgets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if password reset email sent successfully, false otherwise.
 */
function forgotPassword(string $email)
{
    // Validate email format (basic)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return false;
    }

    // Check if the user exists
    if (isset($users[$email])) {
        // Generate a unique token for password reset
        $token = bin2hex(random_bytes(32)); // Secure random token

        // Store the token and expiry time in the database for the user
        // (Replace this with your database logic)
        // Example:
        // $db->query("INSERT INTO password_resets (email, token, expiry) VALUES ('$email', '$token', NOW() + INTERVAL 24 HOUR)");

        // For demonstration, we'll just log the token (replace with actual email sending)
        error_log("Password reset token generated for: " . $email . " - Token: " . $token);

        //  Here you would send an email containing a link with the token.
        //  Example (this is just a placeholder):
        //  $subject = "Password Reset Link";
        //  $headers = "From: noreply@example.com\r
";
        //  $body = "Click this link to reset your password: http://example.com/reset?token=$token";
        //  mail($email, $subject, $body, $headers);

        return true;
    } else {
        return false;
    }
}

// Example usage:
$emailToReset = 'john.doe@example.com';

if (forgotPassword($emailToReset)) {
    echo "Password reset email sent to " . $emailToReset . " successfully." . PHP_EOL;
} else {
    echo "User not found or password reset email could not be sent." . PHP_EOL;
}

$emailToReset = 'nonexistent@example.com'; // Test with an invalid email

if (forgotPassword($emailToReset)) {
    echo "Password reset email sent to " . $emailToReset . " successfully." . PHP_EOL;
} else {
    echo "User not found or password reset email could not be sent." . PHP_EOL;
}

?>


<?php

/**
 * Forgot Password Function
 *
 * This function allows users to reset their password.
 * It generates a unique, secure token and sends an email with a link to 
 * a password reset page.
 *
 * @param string $email The email address of the user.
 * @param string $token  A unique token to associate with the password reset request.
 * @param string $baseUrl The base URL of the password reset page.
 * @return bool True if the email was sent successfully, false otherwise.
 */
function forgotPassword(string $email, string $token, string $baseUrl)
{
    // Validate email and token (important for security)
    if (empty($email) || empty($token)) {
        error_log("Forgot Password: Missing email or token."); // Log for debugging
        return false;
    }

    // Build the reset link
    $resetLink = $baseUrl . "?token=" . urlencode($token);

    // Email setup
    $to = $email;
    $subject = 'Password Reset';
    $message = "Please click the following link to reset your password: " . $resetLink;
    $headers = "From: Your Website <admin@yourwebsite.com>"; // Replace with your email address

    // Send the email (using PHP's built-in mail function -  Consider alternatives for production)
    if (mail($to, $subject, $message, $headers)) {
        error_log("Forgot Password: Email sent to " . $email);
        return true;
    } else {
        error_log("Forgot Password: Failed to send email to " . $email);
        return false;
    }
}

// Example Usage (For testing purposes - Remove or adjust for your application)
// $email = "testuser@example.com";
// $token = "abcdef1234567890";
// $baseUrl = "http://localhost/reset_password/";  // Replace with your password reset URL

// if (forgotPassword($email, $token, $baseUrl)) {
//     echo "Password reset email sent to " . $email;
// } else {
//     echo "Failed to send password reset email.";
// }

?>


<?php

// Assuming you have a database connection established (e.g., $pdo)

/**
 * Resets the user's password.
 *
 * @param string $email The user's email address.
 * @param string $newPassword The new password.
 * @return bool True if the password reset was successful, false otherwise.
 */
function forgotPassword(string $email, string $newPassword) {
  // 1. Validate Inputs (Important for security!)
  if (empty($email) || empty($newPassword)) {
    return false; // Or throw an exception: throw new InvalidArgumentException("Email and password are required.");
  }

  // 2. Check if the email exists in the database.
  $stmt = $pdo->prepare("SELECT id FROM users WHERE email = :email");
  $stmt->bindParam(':email', $email, PDO::PARAM_STR);
  $stmt->execute();

  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if ($user === false) {
    return false; // Email not found
  }

  // 3.  Hash the new password
  $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);

  // 4. Update the user's password in the database
  $stmt = $pdo->prepare("UPDATE users SET password = :password WHERE id = :id");
  $stmt->bindParam(':password', $hashedPassword, PDO::PARAM_STR);
  $stmt->bindParam(':id', $user['id'], PDO::PARAM_INT);
  $stmt->execute();


  return true; // Password reset successful
}

// Example Usage:
// In your form, after the user submits the form...
/*
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $newPassword = $_POST["newPassword"];

  if (forgotPassword($email, $newPassword)) {
    echo "Password reset email sent.  Check your inbox!";
  } else {
    echo "Error: Password reset failed. Please try again.";
  }
}
*/


// Example:  Illustrative only -  DO NOT put the actual password generation code in your app!
// In a real application, you would send an email with a link to a password reset form.
// This example shows how to generate a temporary password for testing.
function generateTemporaryPassword() {
  return bin2hex(random_bytes(16)); // Creates a strong random string
}
?>


<?php

// Assuming you have a database connection established and named $db

// Function to reset a user's password
function forgot_password($email, $new_password, $db) {
    // 1. Check if the email exists in the database
    $query = "SELECT id FROM users WHERE email = ?";
    $stmt = $db->prepare($query);
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        // Email doesn't exist
        return false;
    }

    // 2. Hash the new password
    $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

    // 3. Update the user's password in the database
    $query = "UPDATE users SET password = ? WHERE id = ?";
    $stmt = $db->prepare($query);
    $stmt->execute([$hashed_password, $user['id']]);

    if ($stmt->rowCount() === 0) {
        // Update failed
        return false;
    }

    // 4. (Optional) Send an email notification (recommended)
    // This would involve sending an email to the user with a link to reset their password.
    // See the commented-out example below.

    return true;
}


// Example Usage (Illustrative - Replace with your actual email and password)
//
// $email = "testuser@example.com";
// $new_password = "new_secure_password";
//
// if (forgot_password($email, $new_password, $db)) {
//     echo "Password reset successful!  Check your email for instructions.";
// } else {
//     echo "Password reset failed.  Please try again.";
// }

// Example of sending an email (Requires configuration - SMTP/Email Setup)
/*
// Send email notification
function send_password_reset_email($email, $reset_link) {
  $to = $email;
  $subject = 'Password Reset';
  $message = "Please click on the following link to reset your password: " . $reset_link;
  $headers = "From: your_email@example.com" . "\r
" .
            "Reply-To: your_email@example.com";

  mail($to, $message, $headers);
}

// Example of generating the reset link (In a real application, you would use a token-based approach for security)
// $reset_link = "https://yourwebsite.com/reset_password?token=" . md5($email . time());
// send_password_reset_email($email, $reset_link);
*/

?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a reset token was generated and sent, false otherwise.
 */
function forgot_password(string $email): bool
{
    // 1. Check if the email exists in the database
    $user = getUserByEmail($email);

    if (!$user) {
        // User not found
        return false;
    }

    // 2. Generate a unique reset token
    $token = generate_unique_token(); // Implement this function (see below)

    // 3. Store the token in the database, associated with the user's email.
    //    This is crucial for security.  Don't just store a plain token.
    //    Ideally, you'd hash the token and store the hash.  Storing the raw
    //    token directly is vulnerable to attacks.
    store_reset_token($user->id, $token);  //Implement this function (see below)

    // 4. Send the reset email.
    $subject = 'Password Reset';
    $body = "Please click the following link to reset your password: " .  base_url() . "/reset_password?token=" . $token; // Replace with your base URL
    $headers = "From: " . get_admin_email() . "\r
"; // Replace with your admin email
    $result = send_email($email, $subject, $body, $headers);


    if ($result) {
        return true;
    } else {
        // Email sending failed.  Consider logging this error for debugging.
        return false;
    }
}


/**
 *  Dummy functions - Implement these based on your setup.
 */

/**
 * Gets a user by email.  Implement this to connect to your database.
 * @param string $email
 * @return User | null
 */
function getUserByEmail(string $email): ?User {
    // *** IMPLEMENT THIS FUNCTION ***
    // This is a placeholder. Replace with your database query.
    // Example (using a hypothetical User class):
    // $result = mysqli_query($db, "SELECT * FROM users WHERE email = '$email'");
    // if (mysqli_num_rows($result) > 0) {
    //   $row = mysqli_fetch_assoc($result);
    //   return new User($row);
    // }
    // return null;
}



/**
 * Generates a unique token.  Use a cryptographically secure random number generator.
 * @return string
 */
function generate_unique_token(): string
{
    return bin2hex(random_bytes(32)); // A 32-byte (256-bit) random number.
}



/**
 * Stores the reset token in the database.  HASH the token for security.
 * @param int $userId
 * @param string $token
 * @return void
 */
function store_reset_token(int $userId, string $token): void
{
    // *** IMPLEMENT THIS FUNCTION ***
    // Example (using a hypothetical database table called 'reset_tokens'):
    // mysqli_query($db, "INSERT INTO reset_tokens (user_id, token, created_at) VALUES ('$userId', '$token', NOW())");
    // OR using an ORM:
    // $this->db->insert('reset_tokens', ['user_id' => $userId, 'token' => $token, 'created_at' => date('Y-m-d H:i:s')]);
}


/**
 * Sends an email.  Replace this with your email sending implementation.
 * @param string $to
 * @param string $subject
 * @param string $body
 * @param string $headers
 * @return bool
 */
function send_email(string $to, string $subject, string $body, string $headers): bool
{
    // *** IMPLEMENT THIS FUNCTION ***
    // Example (using a placeholder):
    // error_log("Sending email to: " . $to . " Subject: " . $subject); //Log for debugging
    // return true; //Replace with your actual email sending code.

    //Real Email sending example - using PHPMailer (install via Composer)
    require_once 'vendor/phpmailer/phpmailer/src/Exception.php';
    require_once 'vendor/phpmailer/phpmailer/src/Exception.php';

    $mail = new \PHPMailer\PHPMailer\PHPMailer();
    $mail->isSMTP();
    $mail->Host = 'smtp.example.com';
    $mail->SMTPAuth = true;
    $mail->Username = 'your_smtp_username';
    $mail->Password = 'your_smtp_password';
    $mail->Port = 587;
    $mail->SMART_HOST = true;
    $mail->setFrom('your_email@example.com', 'Your Website Name');
    $mail->addAddress($to, 'User Name');
    $mail->Subject = $subject;
    $mail->Body = $body;
    $mail->isHTML(false); // Set to true if you're sending HTML emails
    if ($mail->send()) {
        return true;
    } else {
        error_log("Error sending email: " . print_r($mail->getSMTPError(), true));
        return false;
    }

}


/**
 * Returns the base URL of your website.  This is how the reset URL will be constructed.
 * @return string
 */
function base_url(): string
{
    // Replace with your actual base URL.
    return 'http://localhost/your_website'; //Example.
}


/**
 * Returns the admin email address.
 * @return string
 */
function get_admin_email(): string {
    return 'admin@your_website.com';
}


?>


<?php

// Database connection details (replace with your actual credentials)
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_db_name";

// --- Function to reset password ---
function resetPassword($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if user exists
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    return "Connection failed: " . $conn->connect_error;
  }

  $sql = "SELECT id, username FROM users WHERE email = '$email'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $row = $result->fetch_assoc();
    $userId = $row['id'];
    $username = $row['username'];

    // 3. Generate a unique token (important for security)
    $token = bin2hex(random_bytes(32));

    // 4.  Store the token and expiration time in the database
    $sql = "INSERT INTO password_resets (user_id, token, expires_at) VALUES ($userId, '$token', NOW() + INTERVAL 7 DAY)"; // Expires in 7 days
    if (!$conn->query($sql)) {
      return "Error inserting reset token: " . $conn->error;
    }


    // 5. Email the user with the reset link
    $subject = "Password Reset Link";
    $message = "Click this link to reset your password: <a href='" . $_SERVER["PHP_SELF"] . "?reset=$token'</a>";
    $headers = "From: your_email@example.com";  // Replace with your email

    if (mail($email, $subject, $message, $headers)) {
      return "Password reset email sent to $email.";
    } else {
      return "Failed to send password reset email.";
    }
  } else {
    return "User with email $email not found.";
  }

  $conn->close();
}



// --- Example Usage (for testing - DO NOT include this in a production environment) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $resetMessage = resetPassword($email);
  echo "<br>" . $resetMessage;
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established and a user table
// with an 'email' field.

// This is a simplified example - replace with your actual database connection
// and database query logic.

function forgot_password($email) {
  // 1. Validate the email format (basic check)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return 'Invalid email format.';
  }

  // 2. Check if the user exists in the database
  // (Replace with your actual database query)
  $user = get_user_by_email($email); // Function to retrieve user by email

  if ($user === null) {
    return 'User not found.';
  }


  // 3. Generate a unique, temporary password
  $temp_password = generate_unique_password(8); // Generates an 8-character password

  // 4. Store the temporary password for the user (in a secure way - e.g., hashed)
  //  This is a placeholder.  DO NOT store plain-text passwords!
  store_temporary_password($user['id'], $temp_password);

  // 5.  Send an email to the user with the temporary password
  $subject = 'Forgot Password - Your Temporary Password';
  $message = "Your temporary password is: " . $temp_password . "

Please change your password as soon as possible.";
  $headers = 'From: your_website@example.com' . "\r
" .
            'Reply-To: your_website@example.com' . "\r
" .
            'Content-Type: text/plain; charset=UTF-8';

  mail($email, $message, $headers);

  return 'Password reset email sent to ' . $email . '.';

}


// --- Helper Functions (Implement these based on your database and security needs) ---

// Placeholder - Replace with your database query logic
function get_user_by_email($email) {
  // Example (replace with your actual query)
  // This is just a placeholder, assuming you have a user table with an 'id' and 'email' column.
  //  A real implementation would use a database query to find the user by email.
  //  For demonstration purposes, we'll just return a dummy user.
  return array(
    'id' => 123,
    'email' => $email
  );
}



function generate_unique_password($length = 8) {
    $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    $password = '';
    $char_length = strlen($characters);

    for ($i = 0; $i < $length; $i++) {
        $random = mt_rand(0, $char_length - 1);
        $password .= $characters[$random];
    }

    return $password;
}


function store_temporary_password($user_id, $password) {
  //  IMPORTANT:  DO NOT STORE PASSWORDS IN PLAIN TEXT!

  //  This is a placeholder.  You *MUST* hash the password before storing it.

  //  Example (using password_hash - you'll need to adapt it to your database)
  $hashed_password = password_hash($password, PASSWORD_DEFAULT);

  //  Update the database table with the hashed password
  //  (Replace this with your actual database update query)
  //  Example:
  //  $sql = "UPDATE users SET temp_password = '$hashed_password' WHERE id = $user_id";
  //  mysqli_query($conn, $sql);
}



// --- Example Usage ---
// $email = 'test@example.com';  // Replace with the user's email

// $result = forgot_password($email);
// echo $result;
?>


<?php

// Database connection details (replace with your actual details)
$host = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

// 1. Get the email from the form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    // 2. Validate the email
    if (empty($email)) {
        $error = "Please enter your email address.";
    } else {
        // 3.  Check if the email exists in the database
        $conn = new mysqli($host, $username, $password, $dbname);

        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        $sql = "SELECT id, email FROM users WHERE email = '$email'";
        $result = $conn->query($sql);

        if ($result->num_rows > 0) {
            // Email exists, generate a unique token and send a reset password email
            $token = bin2hex(random_bytes(32)); // Generate a random token
            $reset_link = "http://yourwebsite.com/reset_password.php?token=" . $token; // Replace with your website URL

            // Prepare the reset password email
            $to = $email;
            $subject = "Password Reset";
            $message = "Click on the link below to reset your password:
" . $reset_link;
            $headers = "From: your_email@example.com\r
";
            mail($to, $subject, $message, $headers);

            // Store the token in the database (for later retrieval) -  This is crucial!
            $conn->query("UPDATE users SET token = '$token' WHERE email = '$email'");

            $success = "Password reset email sent to $email.  Check your inbox.";
        } else {
            $error = "Email address not found.";
        }
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Forgot Password</title>
</head>
<body>

    <h2>Forgot Password</h2>

    <?php if (isset($error)) { ?>
        <p style="color: red;"><?php echo $error; ?></p>
    <?php } ?>

    <?php if (isset($success)) { ?>
        <p style="color: green;"><?php echo $success; ?></p>
    <?php } ?>

    <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
        <label for="email">Email Address:</label>
        <input type="email" id="email" name="email" placeholder="Your Email" required>
        <button type="submit">Reset Password</button>
    </form>

</body>
</html>


<?php

// Replace with your database credentials and table names
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_db_user';
$db_password = 'your_db_password';

// Function to reset password
function forgot_password($email, $new_password, $db) {
  // Check if the email exists in the database
  $stmt = $db->prepare("SELECT id FROM users WHERE email = ?");
  $stmt->execute([$email]);
  $user = $stmt->fetch(PDO::FETCH_ASSOC);

  if (!$user) {
    return false; // Email not found
  }

  // Hash the new password
  $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

  // Update the user's password in the database
  $stmt = $db->prepare("UPDATE users SET password = ? WHERE id = ?");
  $stmt->execute([$hashed_password, $user['id']]);

  return true; // Password reset successful
}


// Example Usage (Demonstration - DO NOT USE IN PRODUCTION WITHOUT SECURE HANDLING)
// This is just for demonstration, it's not a complete and secure form!
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $new_password = $_POST["new_password"];

  // Validate input (important for security - this is basic)
  if (empty($email) || empty($new_password)) {
    echo "Error: Email and password are required.";
  } else {
    // Call the forgot_password function
    $success = forgot_password($email, $new_password, $db);

    if ($success) {
      echo "Password reset email sent successfully!";
    } else {
      echo "Error: Could not reset password.  Please check your email or contact support.";
    }
  }
}

// Database connection (using PDO - recommended)
try {
  $db = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_password);
  $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); // Enable exception handling
} catch(PDOException $e) {
  echo "Connection failed: " . $e->getMessage();
  exit;
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required><br><br>

    <input type="password" id="new_password" name="new_password" required><br><br>

    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established
// (e.g., using mysqli or PDO)
// For simplicity, let's assume $db is a mysqli connection object

// Function to handle the forgot password process
function forgotPassword($email) {
  // 1. Validate Email (Important for security)
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Check if the user exists
  $result = mysqli_query($db, "SELECT id, username FROM users WHERE email = '$email'");
  if (mysqli_num_rows($result) == 0) {
    return "User not found.";
  }

  // 3. Generate a Unique Token
  $token = bin2hex(random_bytes(32));

  // 4. Update the User's Record with the Token
  mysqli_query($db, "UPDATE users SET password_reset_token = '$token', password_reset_token_expiry = NOW() + INTERVAL 1 HOUR WHERE email = '$email'");

  // 5. Send the Password Reset Email
  $to = $email;
  $subject = "Password Reset Request";
  $message = "Please use the following link to reset your password: " . $_SERVER['REQUEST_URI'] . 
              "<br><br>This link will expire in 1 hour.";
  $headers = "From: your_website@example.com"; // Replace with your actual email address

  mail($to, $message, $headers);

  return "Password reset email sent. Please check your inbox.";
}


// Example Usage (Illustrative -  This would be part of your form processing)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $email = $_POST["email"];
  $reset_result = forgotPassword($email);
  echo $reset_result;
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Forgot Password</title>
</head>
<body>

  <h1>Forgot Password</h1>

  <form method="post" action="<?php echo htmlspecialchars($_SERVER["REQUEST_URI"]); ?>">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <button type="submit">Reset Password</button>
  </form>

</body>
</html>


<?php

// Assuming you have a database connection established (e.g., $db_connection)
// This is just a basic example, adapt to your database setup

function forgotPassword($email) {
    // 1. Check if the email exists in the database
    $stmt = $db_connection->prepare("SELECT id, email FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$user) {
        // Email not found
        return false;
    }

    // 2. Generate a unique token
    $token = bin2hex(random_bytes(32));  // Using random_bytes for better security

    // 3. Hash the token (for security) - This is CRUCIAL!
    $hashed_token = password_hash($token, PASSWORD_DEFAULT);

    // 4. Store the token in the database for the user
    $stmt = $db_connection->prepare("UPDATE users SET reset_token = ?, reset_token_expiry = ? WHERE email = ?");
    $stmt->execute([$hashed_token, time() + 3600, $email]); // Store expiry 1 hour from now

    // 5.  Email the user with a reset link
    $reset_link = "http://yourwebsite.com/reset-password?token=$token"; // Replace with your website URL

    // Email the user
    $to = $email;
    $subject = "Password Reset Request";
    $message = "Please click on the following link to reset your password: " . $reset_link;
    $headers = "From: yourwebsite@example.com"; // Replace with your email address

    mail($to, $subject, $message, $headers);

    return true;
}


// Example usage (assuming you've called forgotPassword() with an email)
// $email_to_reset = "testuser@example.com"; // Replace with the user's email
// $result = forgotPassword($email_to_reset);

// if ($result) {
//     echo "Password reset email has been sent.";
// } else {
//     echo "User not found or email reset link could not be generated.";
// }


//Important Security Notes & Enhancements:

// 1.  Database Connection:  Replace `$db_connection` with your actual database connection object.  This example assumes you're using PDO.

// 2.  Error Handling:  Add more robust error handling.  Check the return values of your database queries.  Log errors.

// 3.  Password Hashing:  The `password_hash()` function is critical.  Never store passwords in plain text.

// 4.  Token Uniqueness and Randomness:  `random_bytes()` is used to generate the token.  This is the most secure method for generating random data.  Using `mt_rand()` or `rand()` is generally not recommended for security-sensitive operations.

// 5.  Token Expiry:  The `reset_token_expiry` field and `time() + 3600` (one hour) are added to prevent tokens from being used indefinitely. Adjust the expiry time as needed.  Consider logging expiry events.

// 6.  Rate Limiting: Implement rate limiting on password reset requests to prevent brute-force attacks.  Store the number of reset attempts per user and block access if the limit is exceeded.

// 7.  Secure URL:  The `reset_link` URL should be generated securely.  Don't include the token directly in the URL string in a production environment.  Use URL encoding or a more secure method.

// 8.  Input Validation:  Validate the email address to prevent malicious input.

// 9.  Security Audits: Regularly perform security audits of your code to identify and address vulnerabilities.

// 10. CSRF Protection: Implement CSRF (Cross-Site Request Forgery) protection, especially if you are generating the reset link on a form submission.

// 11. Logging:  Log password reset requests, including the user's email, the token generated, and the timestamp. This is important for debugging and security monitoring.
?>


<?php

/**
 * Resets a user's password via email.
 *
 * @param string $email The email address of the user.
 * @param string $newPassword The new password to set.
 * @param string $websiteUrl The URL of your website. (Optional, for link in email)
 * @return bool True on success, false on failure.
 */
function forgotPassword(string $email, string $newPassword, string $websiteUrl = '') {
  // **Security Note:**  This is a simplified example for demonstration.
  // In a production environment, you *MUST* implement robust security measures,
  // including:
  // 1.  Hashing the password before storing it in the database.
  // 2.  Validating email format.
  // 3.  Rate limiting to prevent brute-force attacks.
  // 4.  Using a dedicated email sending service (e.g., SendGrid, Mailgun)
  //     for better deliverability and security.

  // Check if email exists in the database (replace with your actual database logic)
  $user = getUserByEmail($email);

  if (!$user) {
    return false; // User not found
  }

  // Update the user's password in the database (replace with your actual database logic)
  if (!updateUserPassword($user, $newPassword)) {
    return false; // Password update failed
  }


  // Send password reset email
  $subject = 'Password Reset';
  $body = "Please use the following link to reset your password:
" .
          "<a href='" . $websiteUrl . "/reset_password?token=" . generateResetToken($user->id) . "'>Reset Password</a>";
  $headers = "From: " . 'Your Website Name <noreply@yourwebsite.com>' . "\r
";
  // Use mail() for simplicity, but consider a dedicated email sending service.
  if (mail($email, $subject, $body, $headers)) {
    return true;
  } else {
    // Email sending failed - you should log this error.
    return false;
  }
}


/**
 * Placeholder function to retrieve a user by email.  Replace with your database query.
 *
 * @param string $email The email address to search for.
 * @return object|null User object if found, null otherwise.
 */
function getUserByEmail(string $email) {
  // Replace this with your actual database query.
  // Example (assuming you have a 'users' table with an 'email' column)
  // $db = new PDO(/* your database connection details */);
  // $stmt = $db->prepare("SELECT * FROM users WHERE email = ?");
  // $stmt->execute([$email]);
  // $user = $stmt->fetch(PDO::FETCH_OBJ);
  // return $user;

  // Mock user object for demonstration
  $user = new stdClass();
  $user->id = 123; // Example user ID
  return $user;
}


/**
 * Placeholder function to update a user's password in the database.
 * Replace with your actual database query.
 *
 * @param object $user The user object to update.
 * @param string $newPassword The new password to set.
 * @return bool True on success, false on failure.
 */
function updateUserPassword(object $user, string $newPassword) {
  // Replace this with your actual database query.
  // Example:
  // $db = new PDO(/* your database connection details */);
  // $stmt = $db->prepare("UPDATE users SET password = ? WHERE id = ?");
  // $stmt->execute([password_hash($newPassword, PASSWORD_DEFAULT), $user->id]);
  // return true;

  // Mock success for demonstration
  return true;
}

/**
 * Generates a unique reset token.
 *
 * @param int $userId The ID of the user.
 * @return string  A unique token.
 */
function generateResetToken() {
  return bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator
}



// --- Example Usage ---
// You would call this function from your form submission code:

// $email = $_POST['email'];
// $newPassword = $_POST['newPassword'];

// if (isset($email) && isset($newPassword)) {
//   if (forgotPassword($email, $newPassword)) {
//     echo "Password reset email has been sent.  Check your inbox!";
//   } else {
//     echo "Error resetting password. Please try again.";
//   }
// } else {
//   echo "Please enter your email and a new password.";
// }


// --- Note:  This is a VERY simplified example. ---
// In a real application, you would:
// 1.  Validate the email and password input thoroughly.
// 2.  Use a dedicated email sending service for better reliability and security.
// 3.  Implement robust security measures to protect against attacks.
// 4.  Handle errors gracefully.


<?php

// Assuming you have a database connection established (e.g., $db connection)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if the password was reset successfully, false otherwise.
 */
function forgotPassword(string $email)
{
    // 1. Validate Email (Important!)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email format provided."); // Log the error for debugging
        return false;
    }

    // 2. Check if User Exists
    $user = getUserByEmail($email); //  Assumed function to get user by email
    if (!$user) {
        error_log("User with email '$email' not found."); //Log the error
        return false;
    }

    // 3. Generate a Unique Token (for security)
    $token = generateUniqueToken(); //  Assumed function to generate a unique token

    // 4. Store Token and User ID in a Temporary Table
    //    (This is important for security -  don't store tokens directly in the main user table)
    $query = "INSERT INTO password_reset_tokens (user_id, token, expires_at)
              VALUES ($user->id, '$token', NOW() + INTERVAL 24 HOUR)";
    mysqli_query($GLOBALS['db'], $query); // Use mysqli_query or PDO for better security.

    // 5.  Send Password Reset Email (Email Logic - Not Implemented Here)
    //   This is where you would send an email with a link containing the token.
    //   The email link should lead to a page where the user can enter a new password.
    //   Example:
    //   $subject = "Password Reset";
    //   $to = $user->email;
    //   $headers = "From: your-email@example.com";
    //   $link = "/reset-password?token=$token";
    //   mail($to, $subject, $link, $headers);
    //   echo "Password reset email sent to $email. Check your inbox.";


    return true; // Indicate successful token generation and storage.
}


/**
 * Assumed function to get user by email.  Implement this based on your database.
 * @param string $email
 * @return mysqli_result|null
 */
function getUserByEmail(string $email) {
    // Replace with your database query
    // This is just a placeholder.  Adjust to your database and setup.
    // Example using mysqli:
    // $query = "SELECT * FROM users WHERE email = '$email'";
    // $result = mysqli_query($GLOBALS['db'], $query);
    // if (mysqli_num_rows($result) > 0) {
    //   return mysqli_fetch_assoc($result);
    // } else {
    //   return null;
    // }
    //  A placeholder returning a dummy user object
    return new \stdClass(); // Returns a new empty object.
}


/**
 * Assumed function to generate a unique token.
 * @return string
 */
function generateUniqueToken()
{
    return bin2hex(random_bytes(32)); // Generates a 32-byte random hex string
}



// Example Usage (Illustrative - Not part of the forgotPassword function)
// You would typically trigger this through a form submission.
// $email = $_POST['email'];
// if (isset($email)) {
//     if (forgotPassword($email)) {
//         echo "Password reset email sent to $email.";
//     } else {
//         echo "Failed to generate password reset token.";
//     }
// }


?>


<?php

// Database credentials (Replace with your actual credentials)
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$database = 'your_database';

// Function to reset password
function forgot_password($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email format.";
  }

  // 2. Check if user exists
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  $sql = "SELECT id, username FROM users WHERE email = '$email'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $user_id = $result->fetch_assoc()['id'];
    $username = $result->fetch_assoc()['username'];

    // 3. Generate a unique token
    $token = bin2hex(random_bytes(32));

    // 4.  Store Token and User ID in a temporary table (for security)
    $conn->query("CREATE TEMPORARY TABLE IF NOT EXISTS reset_tokens (user_id INT, token VARCHAR(32))");
    $conn->query("INSERT INTO reset_tokens (user_id, token) VALUES ($user_id, '$token')");


    // 5.  Prepare the reset email
    $to = $email;
    $subject = 'Password Reset Request';
    $message = "Click this link to reset your password: " . '<a href="' . $_SERVER['PHP_SELF'] . '?reset=true&token=' . $token . '"' . ' >Reset Password</a>';
    $headers = "From: your_email@example.com"; // Replace with your email

    mail($to, $subject, $message, $headers);

    // 6. Clean up temporary table
    $conn->query("DROP TEMPORARY TABLE IF EXISTS reset_tokens");


    return "Password reset email sent to $email.";

  } else {
    return "User not found.";
  }

  $conn->close();
}

// ---  Example Usage (For testing - remove this section when integrating into your application) ---
//  This is just for demonstrating the function.  In a real application, you'd
//  likely handle this via a form submission.

if (isset($_GET['reset']) && isset($_GET['token'])) {
  $token = $_GET['token'];

  //  This is where you would check if the token exists in your database.
  //  This example doesn't include the check for simplicity, but it's crucial
  //  for security in a production environment.

  $reset_result = forgot_password($token); // Using the token as the email (for demonstration)
  echo $reset_result; // This should be the output from the forgot_password function
}

?>


<?php

// Configuration (Important - Replace with your actual values)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_username';
$db_password = 'your_database_password';

// Function to reset password
function forgot_password($email, $new_password) {
    // 1. Connect to the database
    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    // 2. Hash the new password -  IMPORTANT for security!
    $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

    // 3. Update the password in the database
    $sql = "UPDATE users SET password = '$hashed_password' WHERE email = '$email'";

    if ($conn->query($sql) === TRUE) {
        echo "New password set successfully! Please check your email for login instructions.";
    } else {
        echo "Error updating password: " . $conn->error;
    }

    $conn->close();
}


// Example usage (This is just for demonstration - you'll need a form to submit this)
// In a real application, you would handle the form submission here.
// This example shows how the function would be called.
// For a real application, you'll need to implement a form with an email field.

// Example: Let's say the user's email is 'test@example.com' and the new password is 'newPassword123'
//forgot_password('test@example.com', 'newPassword123');
?>


<?php

/**
 * Forgot Password Function
 *
 * This function handles the forgot password process, generating a temporary
 * password and sending it to the user's email.
 *
 * @param string $email The user's email address.
 * @param string $resetLinkBase URL where the reset links will be generated.  
 *                              Should be a URL that doesn't require authentication.
 * @return bool True if the reset email was sent successfully, false otherwise.
 */
function forgotPassword(string $email, string $resetLinkBase) {
  // 1. Sanitize and Validate Email
  $email = filter_var($email, FILTER_SANITIZE_EMAIL);
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    error_log("Invalid email address provided: " . $email); // Log for debugging
    return false;
  }

  // 2. Generate a Temporary Password (e.g., random string)
  $resetPassword = generateRandomString(8); //  Adjust length as needed
  
  // 3. Store the Reset Token in the Database
  $token = hash('sha256', $resetPassword . time());  // Use a more secure hashing algorithm
  
  // IMPORTANT: In a real-world application, you would store this data in a database.
  // For demonstration purposes, we'll use a simple array.
  $resetData = [
    'email' => $email,
    'token' => $token,
    'expiry' => time() + 3600  // Expire after 1 hour
  ];
  
  // 4.  Simulate Database Storage (Replace with your database logic)
  // In a real app, you'd use something like:
  // $db->insert('forgot_passwords', $resetData); 
  
  // 5. Generate the Reset Link
  $resetLink = $resetLinkBase . '?token=' . urlencode($token);

  // 6. Send the Reset Email
  $to = $email;
  $subject = 'Password Reset';
  $message = "To reset your password, please click on the following link: " . $resetLink;
  $headers = "From: YourWebsite <noreply@yourwebsite.com>"; // Customize the sender address
  
  if (mail($to, $subject, $message, $headers)) {
    return true;
  } else {
    error_log("Failed to send reset email to: " . $email); // Log email sending failure
    return false;
  }
}

/**
 * Generates a random string of the specified length.
 *
 * @param int $length The desired length of the random string.
 * @return string The generated random string.
 */
function generateRandomString(int $length) {
  $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  $randomString = '';
  $length = $length;
  for ($i = 0; $i < $length; $i++) {
    $char = $characters[rand(0, strlen($characters) - 1)];
    $randomString .= $char;
  }
  return $randomString;
}

// --- Example Usage ---
// Replace with your actual email address
$email = "testuser@example.com";
$resetLinkBase = "https://yourwebsite.com/reset-password";  // Change this to your website's base URL

if (forgotPassword($email, $resetLinkBase)) {
  echo "Reset email sent successfully! Check your inbox.";
} else {
  echo "Failed to send reset email. Please check your email settings and try again.";
}

?>


<?php

// Assuming you have a database connection established and stored in a variable like $db

/**
 * Forgets the password for a user.
 *
 * @param string $email The email address of the user.
 * @return bool True on success, false on failure.
 */
function forgot_password(string $email): bool
{
    // 1. Validate Input (Crucial for Security)
    if (empty($email)) {
        error_log("Forgot Password: Empty email provided."); // Log the error
        return false;
    }

    // 2.  Check if the user exists
    $user = get_user_by_email($email); // Implement this function (see below)
    if (!$user) {
        error_log("Forgot Password: User with email {$email} not found.");
        return false;
    }

    // 3. Generate a Unique Token (Securely)
    $token = generate_unique_token(); // Implement this function (see below)

    // 4.  Store Token in Database (Associating with User)
    //    This is where you'd update the 'token' column in your user table.
    update_user_token($user['id'], $token); // Implement this function (see below)

    // 5.  Send Password Reset Email
    //    You'll need to format and send an email with a link to the reset page
    //    The email link should include the token.
    send_password_reset_email($user['email'], $token); // Implement this function (see below)

    return true;
}



/**
 *  Helper functions (Implement these based on your database schema)
 */

/**
 *  Retrieves a user's data by email.  This is just an example.
 *  Replace with your actual database query.
 *
 *  @param string $email
 *  @return array|null An associative array containing user data if found, null otherwise.
 */
function get_user_by_email(string $email): ?array
{
    // Replace this with your database query to get user data by email
    // Example (using MySQLi) -  Adapt to your database system
    $conn = new mysqli("localhost", "username", "password", "database");

    if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
    }

    $sql = "SELECT id, email FROM users WHERE email = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $email);
    $stmt->execute();

    $result = $stmt->get_result();

    if ($row = $result->fetch_assoc()) {
        $stmt->close();
        return $row;
    } else {
        $stmt->close();
        return null;
    }
}



/**
 * Generates a unique token. Use a cryptographically secure random number generator.
 *
 * @return string A unique token.
 */
function generate_unique_token(): string
{
    return bin2hex(random_bytes(32));  // More secure than rand()
}



/**
 * Updates the 'token' column in the user's record with the given token.
 *
 * @param int $userId The ID of the user.
 * @param string $token The token to store.
 */
function update_user_token(int $userId, string $token): void
{
    // Replace this with your database query to update the 'token' column.
    // Example (using MySQLi)
    $conn = new mysqli("localhost", "username", "password", "database");

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $sql = "UPDATE users SET token = ? WHERE id = ?";
    if ($stmt = $conn->prepare($sql)) {
        $stmt->bind_param("ss", $token, $userId);
        if ($stmt->execute()) {
            $stmt->close();
        } else {
            error_log("Error updating token for user ID {$userId}: " . $conn->error);
        }
    } else {
        error_log("Error preparing update statement: " . $conn->error);
    }

    $conn->close();
}



/**
 * Sends an email with a password reset link.
 *
 * @param string $email The email address of the user.
 * @param string $token The token associated with the password reset request.
 */
function send_password_reset_email(string $email, string $token): void
{
    // Implement the logic to send the email. This is a placeholder.
    // Use a reliable email sending service (e.g., SendGrid, Mailgun, AWS SES)
    // or configure your own SMTP server.

    //Example of what the email content might look like:
    $subject = 'Password Reset';
    $message = "Click on the following link to reset your password: " . "<a href='" . $_SERVER['PHP_SELF'] . "?reset_token=" . urlencode($token) . "'>Reset Password</a>";
    //  Replace this with your actual email sending function
    //  For example:
    //  mail($email, $subject, $message);

    error_log("Password reset email sent to {$email} with token {$token}");
}


// Example Usage (IMPORTANT:  Use this only in testing.  Never in production!)
//  To test, you'd call this from a form submission (e.g., using POST)
//  and the reset_token would be passed from the form to the server.
//  Uncomment the code below for testing ONLY.
/*
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = $_POST["email"];

    if (forgot_password($email)) {
        echo "Password reset email sent to {$email}.";
    } else {
        echo "Failed to initiate password reset.";
    }
}
*/

?>


<?php

// Assuming you have a database connection established
// Replace 'your_db_connection' with your actual connection details
$db = new mysqli('localhost', 'username', 'password', 'database_name');

// Check connection
if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

/**
 * Forgets a user's password and sends a password reset email.
 *
 * @param string $email The user's email address.
 * @return bool True if email was sent, false otherwise.
 */
function forgot_password($email) {
  // Sanitize the email to prevent potential security issues
  $email = filter_var($email, FILTER_SANITIZE_EMAIL);

  // Validate email format
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return false; // Invalid email format
  }

  // Check if the user exists
  $result = $db->query("SELECT id, username FROM users WHERE email = '$email'");

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    $userId = $user['id'];
    $username = $user['username'];

    // Generate a unique, random password reset token
    $reset_token = bin2hex(random_bytes(32));

    // Store the token in the database for the user
    $db->query("UPDATE users SET reset_token = '$reset_token' WHERE id = $userId");

    // Prepare a password reset email
    $to = $email;
    $subject = 'Password Reset';
    $message = "Click this link to reset your password: " . '<a href="' . $_SERVER['PHP_SELF'] . '?reset=' . urlencode($reset_token) . '"' . ' target="_blank">' . '<a href="' . $_SERVER['PHP_SELF'] . '?reset=' . urlencode($reset_token) . '"' . ' target="_blank">' . $_SERVER['PHP_SELF'] . '?reset=' . urlencode($reset_token) . '</a>';
    $headers = "From: your_email@example.com" . "\r
";
    mail($to, $message, $headers);

    return true; // Email sent successfully
  } else {
    return false; // User not found
  }
}


// Example Usage (This is for demonstration - you'll need to handle form submission and validation)
if ($_SERVER["REQUEST_METHOD"] == "GET") {
    // Get the email from the form (assuming a form submitted)
    $email = $_POST['email']; // Get the email from the form
    if (forgot_password($email)) {
        echo "Password reset email has been sent to " . $email;
    } else {
        echo "Email not found or an error occurred.";
    }
}

// Prevent direct access to this script
if ($_SERVER["REQUEST_METHOD"] != "GET") {
  header("Location: index.php"); // Redirect to a welcome page or login form.
}


?>


<?php

// Configuration (Change these to your specific setup)
$db_host = 'localhost';
$db_name = 'your_database_name';
$db_user = 'your_database_user';
$db_password = 'your_database_password';

// Function to handle password reset
function forgot_password($email) {
  // 1. Validate Email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32)); // Secure random token

  // 3. Prepare the query
  $mysqli = new mysqli($db_host, $db_user, $db_password, $db_name);

  if ($mysqli->connect_errno) {
    return "Failed to connect to database: " . $mysqli->connect_error;
  }

  $sql = "INSERT INTO password_resets (email, token, created_at) VALUES (?, ?, NOW())";
  $stmt = $mysqli->prepare($sql);

  if (!$stmt) {
    return "Failed to prepare statement.";
  }

  $stmt->bind_param("s", $email, $token);

  if (!$stmt->execute()) {
    return "Failed to insert data: " . $stmt->error;
  }

  $stmt->close();
  $mysqli->close();

  // 4.  Send the reset email (Implementation details depend on your email sending method)
  //     This is a placeholder.  Replace with your actual email sending code.
  send_reset_email($email, $token);  // Call the function to send the email.

  return "Password reset email sent to $email.";
}


// Placeholder function for sending reset email.  REPLACE THIS with your actual email sending code.
function send_reset_email($email, $token) {
  //  This is just a demo.  In a real application, you'd use a library like PHPMailer or
  //  a service like SendGrid or Mailgun.

  $subject = 'Password Reset - Your Account';
  $message = "Click the following link to reset your password:  http://yourwebsite.com/reset_password.php?token=" . $token;
  $headers = 'From: your_email@example.com' . "\r
";

  // In a real application, you'd use mail() or a library to send the email.
  // Example using mail():
  // mail($email, $subject, $message, $headers);

  echo "Simulating sending email to $email with token $token"; // For demonstration purposes.
}

// Example Usage (For testing)
// You'll likely want to call this from a form, not directly like this.

// Example 1: Successful reset
$result = forgot_password("testuser@example.com");
echo $result . "<br><br>";

// Example 2: Invalid email
$result = forgot_password("invalid-email");
echo $result . "<br><br>";
?>


<?php

// Include the database connection file (assuming it's named database.php)
require_once 'database.php';

/**
 * Forgets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a password reset email was sent, false otherwise.
 */
function forgot_password(string $email): bool
{
  // Sanitize the email address to prevent SQL injection
  $email = mysqli_real_escape_string($connection, $email);

  // Check if the email exists in the users table
  $result = mysqli_query($connection, "SELECT id, username FROM users WHERE email = '$email'");

  if (mysqli_num_rows($result) > 0) {
    // Email exists, generate a unique token and store it
    $token = bin2hex(random_bytes(32));  // Generate a random token
    $hashed_token = password_hash($token, PASSWORD_DEFAULT); // Hash the token for security

    // Store the token in the database (associated with the user)
    $sql = "UPDATE users SET reset_token = '$hashed_token' WHERE email = '$email'";

    if (mysqli_query($connection, $sql)) {
      // Send a password reset email (implementation depends on your email sending system)
      // This is just a placeholder - replace with your email sending code
      send_password_reset_email($email, $token);

      return true;
    } else {
      // Error sending the email or updating the database
      error_log("Error updating user with token: " . mysqli_error($connection));
      return false;
    }
  } else {
    // Email does not exist
    return false;
  }
}

/**
 * Placeholder function for sending the password reset email.
 *
 * @param string $email The user's email address.
 * @param string $token The generated reset token.
 */
function send_password_reset_email(string $email, string $token): void
{
  // Replace with your email sending logic here.
  // This is a placeholder - it does not actually send an email.
  error_log("Password reset email sent to: " . $email . " with token: " . $token);
  // Example using a basic email sending function (you'd need to configure this)
  /*
  $to = $email;
  $subject = 'Password Reset';
  $message = 'Click this link to reset your password: ' . 'http://yourwebsite.com/reset_password.php?token=' . $token;
  $headers = 'From: yourwebsite@example.com' . "\r
";

  mail($to, $message, $headers);
  */
}


// Example Usage (for testing - DO NOT use this directly in a deployed application)
//  This is just an example for demonstration and should not be directly used in a production environment.

/*
$user_email = "testuser@example.com"; // Replace with a valid email address
if (forgot_password($user_email)) {
    echo "Password reset email sent to $user_email";
} else {
    echo "Failed to generate password reset token.";
}
*/

?>


<?php

// Replace with your database connection details
$host = "localhost";
$username = "your_db_username";
$password = "your_db_password";
$database = "your_database_name";

// Check if the reset token is present in the query string
if (isset($_GET['token'])) {
  $token = $_GET['token'];

  // 1. Validate the token
  if (!isValidToken($token)) {
    echo "Invalid reset token.";
    exit;
  }

  // 2. Retrieve the user's email from the database based on the token
  $user = getUserByToken($token);

  if ($user) {
    // 3. Generate a new, unique reset token and send an email with a link
    $newToken = generateUniqueToken();
    $email = $user['email'];

    //  --  Email Sending Logic --
    //  Replace with your email sending library/function
    $subject = "Password Reset - Your Account";
    $message = "Click on this link to reset your password: " . base_url() . "/reset-password?token=" . $newToken;
    $headers = "From: your_email@example.com" . "\r
"; // Replace with your email address
    mail($email, $message, $headers);

    // 4.  Update the user's record with the new token (optional, but good practice)
    updateUserToken($user['id'], $newToken);

    echo "Reset link has been sent to your email.";
  } else {
    echo "User not found with that token.";
  }
} else {
  echo "Please provide a reset token.";
}


// --- Helper Functions ---

// 1. Validate the token
function isValidToken($token) {
    // Implement your token validation logic here. 
    // This could involve checking against a database table 
    // that stores used tokens and their expiration times.

    // Example: (Replace with your actual validation)
    return true; //  Placeholder -  Replace with your actual validation
}


// 2. Retrieve the user by token
function getUserByToken($token) {
  global $host, $username, $password, $database;

  // Database connection
  $conn = new mysqli($host, $username, $password, $database);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  // SQL Query
  $sql = "SELECT * FROM users WHERE reset_token = '$token'"; // Assuming 'reset_token' column in your users table

  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    $user = $result->fetch_assoc();
    return $user;
  } else {
    return null;
  }

  $conn->close();
}



// 3. Generate a unique token
function generateUniqueToken() {
  return bin2hex(random_bytes(32)); // Returns a 32-byte random string.
}


// 4. Update the user's token (optional, but recommended)
function updateUserToken($userId, $newToken) {
    global $host, $username, $password, $database;

    $conn = new mysqli($host, $username, $password, $database);

    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }

    $sql = "UPDATE users SET reset_token = '$newToken' WHERE id = $userId";
    if ($conn->query($sql) === TRUE) {
        //echo "User token updated successfully";
    } else {
        echo "Error updating token: " . $conn->error;
    }

    $conn->close();
}


// Example base_url function (requires you to define it)
//  This assumes you are using URL rewriting.
function base_url() {
    // Adjust this based on your application setup.
    return "http://localhost/your_project_name/";
}

?>


<?php

// Assuming you have a database connection established (e.g., $db)

/**
 * Resets a user's password.
 *
 * @param string $email The user's email address.
 * @return bool True if a reset link was generated and sent, false otherwise.
 */
function forgotPassword(string $email)
{
    // 1. Check if the email exists in the database
    $user = db_get_user_by_email($email); // Replace with your DB query
    if (!$user) {
        error_log("User with email {$email} not found.");  // Log for debugging
        return false;
    }


    // 2. Generate a unique reset token
    $resetToken = generateUniqueToken();

    // 3. Store the token and user ID in the database
    $result = db_create_reset_token($user->id, $resetToken);

    if (!$result) {
        error_log("Failed to create reset token for user {$email}.");
        return false;
    }

    // 4. Generate the reset link
    $resetLink = generateResetLink($resetToken);

    // 5. Send the reset link via email
    if (!sendEmailWithResetLink($user->email, $resetLink) ) {
      //Handle email sending failure - log, display message, etc.
        error_log("Failed to send reset email to {$user->email}");
        //Optionally:  Delete the reset token from the database to prevent abuse.
        db_delete_reset_token($resetToken, $user->id);
        return false;
    }


    // 6. Return true, indicating success
    return true;
}



/**
 * Placeholder function to retrieve a user by email (replace with your DB query)
 * @param string $email
 * @return User|null  A User object or null if not found
 */
function db_get_user_by_email(string $email): ?User {
    // Example using a fictional User class
    // Replace this with your actual database query
    // This is a simplified example.  Don't use this directly in production.

    //Example using a fictional User Class
    //Replace with your database query
    //This is a simplified example.  Don't use this directly in production.

    // Assume User class:
    // class User {
    //     public $id;
    //     public $email;
    //     // ... other user attributes
    // }

    $user = new User();
    $user->email = $email;  // Simulate fetching from the database
    return $user;
}


/**
 * Placeholder function to generate a unique token.
 * In a real application, use a robust library for generating cryptographically secure tokens.
 * @return string
 */
function generateUniqueToken(): string
{
    return bin2hex(random_bytes(32));  // Generate a random 32-byte (256-bit) hex string
}


/**
 * Placeholder function to generate the reset link.
 * @param string $token
 * @return string
 */
function generateResetLink(string $token): string
{
    return "http://example.com/reset-password?token=" . urlencode($token);
}


/**
 * Placeholder function to send the email with the reset link.
 * Replace with your email sending logic.
 * @param string $email
 * @param string $resetLink
 */
function sendEmailWithResetLink(string $email, string $resetLink): bool
{
    //  Replace this with your actual email sending implementation.
    //  Use a library like PHPMailer or Swift Mailer for robust email sending.

    // Simulate sending an email (for testing)
    error_log("Simulating sending reset email to {$email} with link: {$resetLink}");
    return true;
}


/**
 * Placeholder function to delete a reset token from the database.
 * @param string $token
 * @param int $userId
 */
function db_delete_reset_token(string $token, int $userId): bool {
  // Replace with your database deletion logic
  // Example:
  // $result = db_query("DELETE FROM reset_tokens WHERE token = '$token' AND user_id = $userId");
  // return $result->rowCount > 0;

  error_log("Simulating deleting reset token for user {$userId} with token: {$token}");
  return true;
}




// Example Usage (Testing)
if (isset($_POST['email'])) {
    $email = $_POST['email'];
    if (forgotPassword($email)) {
        echo "Reset link sent to {$email}. Check your email.";
    } else {
        echo "Failed to generate reset link. Please try again.";
    }
}

?>


<?php

// Assuming you have a database connection established
// (e.g., using mysqli or PDO)
// For this example, we'll assume a simple $db connection is already set up

// Function to handle password reset requests
function forgot_password($email) {
  // 1. Validate the email
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return "Invalid email address.";
  }

  // 2. Generate a unique token
  $token = bin2hex(random_bytes(32)); //  More secure than older methods
  // Consider storing the token in a database table (e.g., 'reset_tokens')

  // 3.  Set up the token expiry (optional, but recommended)
  //   -  This prevents tokens from being used indefinitely.
  $expiry = time() + 3600; // Token expires in 1 hour (3600 seconds)


  // 4.  Simulate database insertion (replace with your actual database logic)
  //   This part simulates inserting the token into a database table.
  //   In a real application, this would use a database query to insert
  //   the email and token into the 'reset_tokens' table.

  $reset_token_data = [
    'email' => $email,
    'token' => $token,
    'expiry' => $expiry,
    'created_at' => time() // Record the creation timestamp
  ];

  //  Example:  Storing in an array for demonstration.
  //  In a real application, this would be a database insertion.
  //  $db->insert('reset_tokens', $reset_token_data);


  // 5.  Send the reset link (e.g., via email)
  //   -  Build the reset link URL
  $reset_link = "http://yourdomain.com/reset_password?token=" . $token . "&expiry=" . $expiry;

  //   -  Send the email. You can use a library like PHPMailer.
  //   -  Example using a simple echo to demonstrate the link.
  //   echo "<p>Please click the following link to reset your password:</p><a href='" . $reset_link . "' >Reset Password</a>";


  // 6.  Return a success message (or any relevant information)
  return "A password reset link has been sent to your email address.  Please check your inbox.";
}


// Example usage:
$email_to_reset = "testuser@example.com"; // Replace with the user's email
$reset_message = forgot_password($email_to_reset);
echo $reset_message;
?>


<?php

// Assuming you have a database connection established and available as $db

/**
 * Resets a user's password.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @return bool True if a password reset email was sent, false otherwise.
 */
function forgot_password(string $email): bool
{
    // 1. Validate Email (important for security)
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("Invalid email address provided."); // Log for debugging
        return false;
    }

    // 2. Check if User Exists
    $user = getUserByEmail($email); // Assumes you have a function to fetch user by email
    if ($user === null) {
        error_log("User with email $email not found."); // Log for debugging
        return false;
    }

    // 3. Generate a Unique Token
    $reset_token = generate_unique_token();

    // 4. Store Token in Database (Temporary - Expire after some time)
    //    - Key: User ID
    //    - Value: Token
    save_reset_token($user['id'], $reset_token);

    // 5. Send Password Reset Email
    $subject = "Password Reset Request";
    $headers = "From: your_email@example.com"; // Replace with your email
    $message = "Click <a href='" . $_SERVER['PHP_SELF'] . "?reset=" . urlencode($reset_token) . "'>here</a> to reset your password.";

    if (send_email($user['email'], $subject, $headers, $message)) {
        return true;
    } else {
        error_log("Failed to send password reset email.");  // Log for debugging
        return false;
    }
}


/**
 * Dummy functions for illustration purposes.
 * Replace these with your actual implementation.
 */

function getUserByEmail(string $email): ?array
{
    // Replace this with your actual database query to fetch the user.
    // Example:
    // $query = "SELECT * FROM users WHERE email = ?";
    // $stmt = $db->prepare($query);
    // $stmt->execute([$email]);
    // $user = $stmt->fetch(PDO::FETCH_ASSOC);
    // return $user ?: null;

    // Dummy data for testing
    $dummy_users = [
        ['id' => 1, 'email' => 'test@example.com', 'password' => 'password123'],
        ['id' => 2, 'email' => 'another@example.com', 'password' => 'securepass']
    ];
    foreach($dummy_users as $user) {
        if ($user['email'] === $email) {
            return $user;
        }
    }
    return null;
}

function generate_unique_token(): string
{
    return bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator
}

function save_reset_token(int $userId, string $token): void
{
    // Implement your database logic here to save the token
    // Example:
    // $query = "INSERT INTO password_resets (user_id, token, expiry_date) VALUES (?, ?, ?)";
    // $stmt = $db->prepare($query);
    // $stmt->execute([$userId, $token, time() + 3600]); // Token expires in 1 hour
}

function send_email(string $to, string $subject, string $headers, string $message): bool
{
    // Implement your email sending logic here.
    // Use a library like PHPMailer: https://github.com/PHPMailer/PHPMailer
    // For example:
    // $mail = new PHPMailer(true);
    // $mail->SetFrom('your_email@example.com', 'Your Name');
    // $mail->AddAddress($to);
    // $mail->SetSubject($subject);
    // $mail->MsgBody($message, 'html');
    // return $mail->send();

    // Dummy implementation - just return true for testing
    echo "Sending email to $to with subject $subject
";
    return true;
}



// Example Usage (for testing)
// You would typically call this function from a form submission.
// For testing, you can call it directly
// $email = "test@example.com";
// if (forgot_password($email)) {
//     echo "Password reset email sent to $email.
";
// } else {
//     echo "Failed to send password reset email.
";
// }
?>

