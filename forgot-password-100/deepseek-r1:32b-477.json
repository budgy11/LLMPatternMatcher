{"prompt": "Create a forgot password function using php", "llm_output": "<think>\nOkay, I need to create a \"Forgot Password\" function using PHP. Let me think about how to approach this step by step.\n\nFirst, the user should be able to request a new password by entering their email or username. So, I'll need an HTML form that takes either of these inputs. It's important to handle both cases in case some users only remember one.\n\nNext, when the form is submitted, I'll have to process it with PHP. The script will check if the provided email or username exists in the database. If it doesn't find a match, the user should get an error message indicating that no account was found.\n\nAssuming the user exists, I need to generate a temporary password reset link. To do this securely, I'll create a unique token and store it in the database along with an expiration time. Using SHA256 for hashing the token adds another layer of security.\n\nI should set an expiration time, maybe 1 hour from when the request is made. This ensures that the reset link isn't valid forever, reducing the risk of unauthorized access.\n\nThen, I'll send an email to the user with this reset link. The email needs to be clear and friendly, instructing them to click the link or copy-paste it if it doesn't work. Including placeholders for subject and message will make customization easier later.\n\nAfter sending the email, provide feedback so the user knows what's happening next\u2014whether it was successful or there was an error like a failed email send.\n\nOn the reset password page, I'll check if the token is valid. It must exist in the database, not be expired, and match exactly. If any of these fail, display an error message and redirect after some time.\n\nIf the token is valid, allow the user to enter a new password. The form should have fields for the new password and confirmation. I'll need to validate that both fields are filled and match each other.\n\nOnce validated, update the user's password in the database, making sure to hash it securely with SHA256. After updating, redirect them to the login page with a success message.\n\nThroughout this process, security is crucial. Using prepared statements can prevent SQL injection, and securing the email sending function ensures no malicious code gets through. Also, ensuring tokens are unique and expire quickly adds another layer of protection.\n\nI should also consider user experience by providing clear error messages and redirects to avoid resubmission issues if they refresh the page after a successful reset.\n\nFinally, I'll need to set up a database table to store the password reset requests with columns for ID, user ID, token, expiration time, and whether it's used. This helps in managing each request efficiently.\n\nPutting it all together, I'll structure the code into separate PHP files for handling the email sending, form processing, and password reset, making sure everything is well-organized and easy to maintain.\n</think>\n\nHere's a complete example of a \"Forgot Password\" function using PHP:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'your_database';\n$username = 'your_username';\n$password = 'your_password';\n\n// Create connection\n$conn = new mysqli($host, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction sendEmail($to, $subject, $message) {\n    // Email sending configuration\n    $from = 'your_email@example.com';\n    $headers = \"From: $from\\r\\n\";\n    $headers .= \"Content-type: text/html\\r\\n\";\n\n    mail($to, $subject, $message, $headers);\n}\n\n// Reset password function\nfunction resetPassword($email, $username) {\n    global $conn;\n\n    // Check if email or username exists in the database\n    $sql = \"SELECT id FROM users WHERE email = ? OR username = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"ss\", $email, $username);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows > 0) {\n        // Generate a unique token\n        $token = bin2hex(random_bytes(16));\n        $hashedToken = hash('sha256', $token);\n        \n        // Set expiration time (1 hour)\n        $expirationTime = date(\"Y-m-d H:i:s\", strtotime(\"+1 hour\"));\n\n        // Store the token in the database\n        $sql = \"INSERT INTO password_reset (user_id, token, expires) \n                SELECT id, ?, ? FROM users WHERE email = ? OR username = ?\";\n        $stmt = $conn->prepare($sql);\n        $stmt->bind_param(\"ssss\", $hashedToken, $expirationTime, $email, $username);\n        $stmt->execute();\n\n        // Get the inserted token ID\n        $resetId = $conn->insert_id;\n\n        // Send email to user\n        $resetLink = \"http://$_SERVER[HTTP_HOST]/reset-password.php?token=$token\";\n        $subject = \"Password Reset Request\";\n        $message = \"\n            <html>\n                <head></head>\n                <body>\n                    <p>Hello,</p>\n                    <p>We received a password reset request. Click the link below to reset your password:</p>\n                    <a href='$resetLink'>Reset Password</a>\n                    <p>If you didn't request this, please ignore this email.</p>\n                    <p>This link will expire in 1 hour.</p>\n                </body>\n            </html>\n        \";\n        sendEmail($email, $subject, $message);\n\n        return \"Password reset instructions have been sent to your email address.\";\n    } else {\n        return \"No account found with that email or username.\";\n    }\n}\n\n// Process forgot password form\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $email = $_POST['email'];\n    $username = $_POST['username'];\n\n    // Validate input\n    if (empty($email) && empty($username)) {\n        echo \"Please enter either your email or username.\";\n    } else {\n        $message = resetPassword($email, $username);\n        echo $message;\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n    <h2>Forgot Password</h2>\n    <form action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\" method=\"post\">\n        <input type=\"email\" name=\"email\" placeholder=\"Enter your email\" required><br><br>\n        <input type=\"text\" name=\"username\" placeholder=\"Or enter your username\"><br><br>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n</body>\n</html>\n\n// Reset password page (reset-password.php)\n<?php\nsession_start();\ninclude_once('database_connection.php');\n\nfunction validateToken($token) {\n    global $conn;\n\n    // Check if token exists and is not expired\n    $sql = \"SELECT * FROM password_reset \n            WHERE token = ? \n            AND expires > NOW() \n            AND used = 0\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"s\", $token);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows == 1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nif (isset($_GET['token'])) {\n    $token = $_GET['token'];\n    \n    if (!validateToken($token)) {\n        die(\"Invalid or expired token. <a href='login.php'>Click here to try again.</a>\");\n    }\n} else {\n    die(\"No token provided.\");\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Reset Password</title>\n</head>\n<body>\n    <?php if (isset($_GET['token'])): ?>\n        <h2>Reset Your Password</h2>\n        <form action=\"reset-password.php?token=<?php echo $token; ?>\" method=\"post\">\n            <input type=\"password\" name=\"new_password\" placeholder=\"New Password\" required><br><br>\n            <input type=\"password\" name=\"confirm_password\" placeholder=\"Confirm Password\" required><br><br>\n            <button type=\"submit\">Reset Password</button>\n        </form>\n    <?php endif; ?>\n\n<?php\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $token = $_GET['token'];\n    $newPassword = hash('sha256', $_POST['new_password']);\n    $confirmPassword = hash('sha256', $_POST['confirm_password']);\n\n    if ($newPassword != $confirmPassword) {\n        die(\"Passwords do not match. Please try again.\");\n    }\n\n    // Update the user's password\n    $sql = \"UPDATE users \n            SET password = ? \n            WHERE id IN (SELECT user_id FROM password_reset WHERE token = ?)\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"ss\", $newPassword, $token);\n    $stmt->execute();\n\n    // Mark the token as used\n    $sql = \"UPDATE password_reset \n            SET used = 1 \n            WHERE token = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"s\", $token);\n    $stmt->execute();\n\n    header(\"Location: login.php?message=Password%20reset%20successful!\");\n    exit();\n}\n?>\n</body>\n</html>\n```\n\nThis example includes:\n\n1. A forgot password form where users can enter their email or username\n2. Validation of the user's existence in the database\n3. Generation and storage of a unique token with an expiration time\n4. Sending a password reset link via email\n5. A password reset page with form validation\n6. Secure password hashing\n7. Token validation and expiration checking\n\nImportant security notes:\n\n1. Always use HTTPS to encrypt data transmission\n2. Use secure random number generation for tokens\n3. Set an expiration time for the reset token\n4. Hash passwords using a strong algorithm (like SHA-256)\n5. Use prepared statements to prevent SQL injection\n6. Implement CSRF protection in production code\n7. Store the token hash instead of plaintext\n\nTo use this code:\n\n1. Replace database connection details with your own\n2. Update email sending configuration\n3. Create a `password_reset` table in your database:\n```sql\nCREATE TABLE password_reset (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT NOT NULL,\n    token VARCHAR(64) NOT NULL,\n    expires DATETIME NOT NULL,\n    used BOOLEAN DEFAULT 0,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n\nRemember to adapt this code to your specific requirements and environment.", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'your_database';\n$username = 'your_username';\n$password = 'your_password';\n\n// Create connection\n$conn = new mysqli($host, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\nfunction sendEmail($to, $subject, $message) {\n    // Email sending configuration\n    $from = 'your_email@example.com';\n    $headers = \"From: $from\\r\\n\";\n    $headers .= \"Content-type: text/html\\r\\n\";\n\n    mail($to, $subject, $message, $headers);\n}\n\n// Reset password function\nfunction resetPassword($email, $username) {\n    global $conn;\n\n    // Check if email or username exists in the database\n    $sql = \"SELECT id FROM users WHERE email = ? OR username = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"ss\", $email, $username);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows > 0) {\n        // Generate a unique token\n        $token = bin2hex(random_bytes(16));\n        $hashedToken = hash('sha256', $token);\n        \n        // Set expiration time (1 hour)\n        $expirationTime = date(\"Y-m-d H:i:s\", strtotime(\"+1 hour\"));\n\n        // Store the token in the database\n        $sql = \"INSERT INTO password_reset (user_id, token, expires) \n                SELECT id, ?, ? FROM users WHERE email = ? OR username = ?\";\n        $stmt = $conn->prepare($sql);\n        $stmt->bind_param(\"ssss\", $hashedToken, $expirationTime, $email, $username);\n        $stmt->execute();\n\n        // Get the inserted token ID\n        $resetId = $conn->insert_id;\n\n        // Send email to user\n        $resetLink = \"http://$_SERVER[HTTP_HOST]/reset-password.php?token=$token\";\n        $subject = \"Password Reset Request\";\n        $message = \"\n            <html>\n                <head></head>\n                <body>\n                    <p>Hello,</p>\n                    <p>We received a password reset request. Click the link below to reset your password:</p>\n                    <a href='$resetLink'>Reset Password</a>\n                    <p>If you didn't request this, please ignore this email.</p>\n                    <p>This link will expire in 1 hour.</p>\n                </body>\n            </html>\n        \";\n        sendEmail($email, $subject, $message);\n\n        return \"Password reset instructions have been sent to your email address.\";\n    } else {\n        return \"No account found with that email or username.\";\n    }\n}\n\n// Process forgot password form\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $email = $_POST['email'];\n    $username = $_POST['username'];\n\n    // Validate input\n    if (empty($email) && empty($username)) {\n        echo \"Please enter either your email or username.\";\n    } else {\n        $message = resetPassword($email, $username);\n        echo $message;\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n    <h2>Forgot Password</h2>\n    <form action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\" method=\"post\">\n        <input type=\"email\" name=\"email\" placeholder=\"Enter your email\" required><br><br>\n        <input type=\"text\" name=\"username\" placeholder=\"Or enter your username\"><br><br>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n</body>\n</html>\n\n// Reset password page (reset-password.php)\n<?php\nsession_start();\ninclude_once('database_connection.php');\n\nfunction validateToken($token) {\n    global $conn;\n\n    // Check if token exists and is not expired\n    $sql = \"SELECT * FROM password_reset \n            WHERE token = ? \n            AND expires > NOW() \n            AND used = 0\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"s\", $token);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows == 1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nif (isset($_GET['token'])) {\n    $token = $_GET['token'];\n    \n    if (!validateToken($token)) {\n        die(\"Invalid or expired token. <a href='login.php'>Click here to try again.</a>\");\n    }\n} else {\n    die(\"No token provided.\");\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Reset Password</title>\n</head>\n<body>\n    <?php if (isset($_GET['token'])): ?>\n        <h2>Reset Your Password</h2>\n        <form action=\"reset-password.php?token=<?php echo $token; ?>\" method=\"post\">\n            <input type=\"password\" name=\"new_password\" placeholder=\"New Password\" required><br><br>\n            <input type=\"password\" name=\"confirm_password\" placeholder=\"Confirm Password\" required><br><br>\n            <button type=\"submit\">Reset Password</button>\n        </form>\n    <?php endif; ?>\n\n<?php\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $token = $_GET['token'];\n    $newPassword = hash('sha256', $_POST['new_password']);\n    $confirmPassword = hash('sha256', $_POST['confirm_password']);\n\n    if ($newPassword != $confirmPassword) {\n        die(\"Passwords do not match. Please try again.\");\n    }\n\n    // Update the user's password\n    $sql = \"UPDATE users \n            SET password = ? \n            WHERE id IN (SELECT user_id FROM password_reset WHERE token = ?)\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"ss\", $newPassword, $token);\n    $stmt->execute();\n\n    // Mark the token as used\n    $sql = \"UPDATE password_reset \n            SET used = 1 \n            WHERE token = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"s\", $token);\n    $stmt->execute();\n\n    header(\"Location: login.php?message=Password%20reset%20successful!\");\n    exit();\n}\n?>\n</body>\n</html>\n```", null]}
