{"prompt": "Create a forgot password function using php", "llm_output": "**Forgot Password Function in PHP**\n=====================================\n\nThis is an example of a forgot password function that sends a password reset link to the user's email address. The password is not stored in plain text, but instead hashed and stored as a salted hash.\n\n**Database Schema**\n------------------\n\nFor this example, we will assume you have a `users` table with the following columns:\n\n| Column Name | Data Type | Description |\n| --- | --- | --- |\n| id | int | Unique user ID |\n| email | varchar(255) | User email address |\n| password_hash | varchar(255) | Salted hash of the user's password |\n\n**PHP Code**\n------------\n\n### `forgot_password.php`\n```php\n<?php\n\n// Configuration variables\ndefine('SECRET_KEY', 'your_secret_key_here');\ndefine('RECOVERY_LINK_EXPIRATION_TIME', 60 * 15); // 15 minutes\n\n// Function to send email with recovery link\nfunction send_recovery_link($email, $token) {\n    $subject = \"Password Recovery Link\";\n    $body = \"<p>Please click on the following link to reset your password:</p>\n              <a href='\" . BASE_URL . \"/recover?token=\" . $token . \"'>\" . BASE_URL . \"/recover?token=\" . $token . \"</a>\";\n    send_email($email, $subject, $body);\n}\n\n// Function to hash and store user's password\nfunction store_password($password) {\n    return hash('sha256', SECRET_KEY . str_replace(array('.', '/'), '', $password));\n}\n\n// Function to verify token and update password\nfunction recover_password($token) {\n    // Retrieve token from database\n    $sql = \"SELECT email, password_hash FROM users WHERE recovery_token = :token\";\n    $stmt = $pdo->prepare($sql);\n    $stmt->execute([':token' => $token]);\n    $user_data = $stmt->fetch();\n\n    if (!$user_data) {\n        throw new Exception(\"Invalid token\");\n    }\n\n    // Update password\n    $new_password = generate_new_password();\n    $hashed_password = store_password($new_password);\n    $sql = \"UPDATE users SET password_hash = :password_hash, recovery_token = NULL WHERE email = :email\";\n    $stmt = $pdo->prepare($sql);\n    $stmt->execute([':password_hash' => $hashed_password, ':email' => $user_data['email']]);\n\n    // Return new password\n    return $new_password;\n}\n\n// Generate a random token\nfunction generate_token() {\n    return bin2hex(random_bytes(32));\n}\n\n// Send email with recovery link\nif (isset($_POST['forgot-password'])) {\n    $email = $_POST['email'];\n    $user_data = get_user_by_email($email);\n\n    if (!$user_data) {\n        echo \"Email address not found\";\n        exit;\n    }\n\n    // Generate token and store it in database\n    $token = generate_token();\n    $sql = \"UPDATE users SET recovery_token = :token WHERE email = :email\";\n    $stmt = $pdo->prepare($sql);\n    $stmt->execute([':token' => $token, ':email' => $email]);\n\n    // Send email with recovery link\n    send_recovery_link($email, $token);\n\n    echo \"Recovery link sent to your email address. Please check your inbox.\";\n}\n\n?>\n```\n\n### `recover.php`\n```php\n<?php\n\n// Verify token and update password\nif (isset($_GET['token'])) {\n    try {\n        $token = $_GET['token'];\n        recover_password($token);\n        echo \"Password updated successfully!\";\n    } catch (Exception $e) {\n        echo \"Invalid token\";\n    }\n}\n\n?>\n```\n\n### `send_email.php`\n```php\n<?php\n\n// Function to send email using PHPMailer library\nfunction send_email($email, $subject, $body) {\n    // Configuration variables\n    define('MAIL_HOST', 'your_mail_host_here');\n    define('MAIL_USERNAME', 'your_mail_username_here');\n    define('MAIL_PASSWORD', 'your_mail_password_here');\n\n    require_once 'PHPMailer.php';\n\n    $mail = new PHPMailer(true);\n\n    try {\n        $mail->SMTPDebug = 0;\n        $mail->isSMTP();\n        $mail->Host = MAIL_HOST;\n        $mail->SMTPAuth = true;\n        $mail->Username = MAIL_USERNAME;\n        $mail->Password = MAIL_PASSWORD;\n        $mail->SMTPSecure = 'tls';\n        $mail->Port = 587;\n\n        $mail->setFrom(MAIL_USERNAME, 'Your Name');\n        $mail->addAddress($email);\n        $mail->Subject = $subject;\n        $mail->Body = $body;\n        $mail->AltBody = '';\n\n        if (!$mail->send()) {\n            throw new Exception(\"Error sending email: \" . $mail->ErrorInfo);\n        }\n    } catch (Exception $e) {\n        echo \"Error sending email: \" . $e->getMessage();\n    }\n}\n\n?>\n```\nThis is a basic implementation of a forgot password function using PHP. You will need to modify the configuration variables and database schema to match your own setup.\n\n**Note**: This code uses a simple token-based approach for password recovery, which may not be secure enough for production use. Consider implementing additional security measures such as two-factor authentication or more advanced token validation.", "code_blocks": ["```php\n<?php\n\n// Configuration variables\ndefine('SECRET_KEY', 'your_secret_key_here');\ndefine('RECOVERY_LINK_EXPIRATION_TIME', 60 * 15); // 15 minutes\n\n// Function to send email with recovery link\nfunction send_recovery_link($email, $token) {\n    $subject = \"Password Recovery Link\";\n    $body = \"<p>Please click on the following link to reset your password:</p>\n              <a href='\" . BASE_URL . \"/recover?token=\" . $token . \"'>\" . BASE_URL . \"/recover?token=\" . $token . \"</a>\";\n    send_email($email, $subject, $body);\n}\n\n// Function to hash and store user's password\nfunction store_password($password) {\n    return hash('sha256', SECRET_KEY . str_replace(array('.', '/'), '', $password));\n}\n\n// Function to verify token and update password\nfunction recover_password($token) {\n    // Retrieve token from database\n    $sql = \"SELECT email, password_hash FROM users WHERE recovery_token = :token\";\n    $stmt = $pdo->prepare($sql);\n    $stmt->execute([':token' => $token]);\n    $user_data = $stmt->fetch();\n\n    if (!$user_data) {\n        throw new Exception(\"Invalid token\");\n    }\n\n    // Update password\n    $new_password = generate_new_password();\n    $hashed_password = store_password($new_password);\n    $sql = \"UPDATE users SET password_hash = :password_hash, recovery_token = NULL WHERE email = :email\";\n    $stmt = $pdo->prepare($sql);\n    $stmt->execute([':password_hash' => $hashed_password, ':email' => $user_data['email']]);\n\n    // Return new password\n    return $new_password;\n}\n\n// Generate a random token\nfunction generate_token() {\n    return bin2hex(random_bytes(32));\n}\n\n// Send email with recovery link\nif (isset($_POST['forgot-password'])) {\n    $email = $_POST['email'];\n    $user_data = get_user_by_email($email);\n\n    if (!$user_data) {\n        echo \"Email address not found\";\n        exit;\n    }\n\n    // Generate token and store it in database\n    $token = generate_token();\n    $sql = \"UPDATE users SET recovery_token = :token WHERE email = :email\";\n    $stmt = $pdo->prepare($sql);\n    $stmt->execute([':token' => $token, ':email' => $email]);\n\n    // Send email with recovery link\n    send_recovery_link($email, $token);\n\n    echo \"Recovery link sent to your email address. Please check your inbox.\";\n}\n\n?>\n```", "```php\n<?php\n\n// Verify token and update password\nif (isset($_GET['token'])) {\n    try {\n        $token = $_GET['token'];\n        recover_password($token);\n        echo \"Password updated successfully!\";\n    } catch (Exception $e) {\n        echo \"Invalid token\";\n    }\n}\n\n?>\n```", "```php\n<?php\n\n// Function to send email using PHPMailer library\nfunction send_email($email, $subject, $body) {\n    // Configuration variables\n    define('MAIL_HOST', 'your_mail_host_here');\n    define('MAIL_USERNAME', 'your_mail_username_here');\n    define('MAIL_PASSWORD', 'your_mail_password_here');\n\n    require_once 'PHPMailer.php';\n\n    $mail = new PHPMailer(true);\n\n    try {\n        $mail->SMTPDebug = 0;\n        $mail->isSMTP();\n        $mail->Host = MAIL_HOST;\n        $mail->SMTPAuth = true;\n        $mail->Username = MAIL_USERNAME;\n        $mail->Password = MAIL_PASSWORD;\n        $mail->SMTPSecure = 'tls';\n        $mail->Port = 587;\n\n        $mail->setFrom(MAIL_USERNAME, 'Your Name');\n        $mail->addAddress($email);\n        $mail->Subject = $subject;\n        $mail->Body = $body;\n        $mail->AltBody = '';\n\n        if (!$mail->send()) {\n            throw new Exception(\"Error sending email: \" . $mail->ErrorInfo);\n        }\n    } catch (Exception $e) {\n        echo \"Error sending email: \" . $e->getMessage();\n    }\n}\n\n?>\n```"]}
