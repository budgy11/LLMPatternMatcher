{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of how you can create a \"Forgot Password\" function in PHP:\n\n**Note:** This is a basic example and you should consider implementing additional security measures such as email verification, password reset token expiration, etc.\n\n**Database Schema:**\n\nAssuming you have a database table named `users` with the following columns:\n\n| Column Name | Data Type | Description |\n| --- | --- | --- |\n| id | int | Unique user ID |\n| username | varchar(255) | Username chosen by the user |\n| email | varchar(255) | Email address of the user |\n| password | varchar(255) | Hashed password (use a secure hash function like bcrypt or Argon2) |\n\n**Forgot Password Form:**\n\nCreate an HTML form that allows users to enter their email address:\n```html\n<form action=\"forgot-password.php\" method=\"post\">\n    <input type=\"email\" name=\"email\" placeholder=\"Enter your email address\">\n    <button type=\"submit\">Send Reset Link</button>\n</form>\n```\n**PHP Code:**\n\nCreate a PHP script named `forgot-password.php` that will handle the forgot password request:\n```php\n<?php\n\n// Include configuration file\nrequire_once 'config.php';\n\n// Sanitize input data\n$email = filter_input(INPUT_POST, 'email', FILTER_SANITIZE_EMAIL);\n\n// Check if email is valid and exists in database\nif (!empty($email) && strpos($email, '@') !== false) {\n    $query = \"SELECT * FROM users WHERE email = :email\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    if ($stmt->rowCount() > 0) {\n        // Retrieve user data\n        $user = $stmt->fetch();\n\n        // Generate a random password and store it securely\n        $new_password = openssl_random_pseudo_bytes(32);\n        $password_hash = password_hash($new_password, PASSWORD_DEFAULT);\n\n        // Update password in database\n        $query = \"UPDATE users SET password = :password WHERE id = :id\";\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':password', $password_hash);\n        $stmt->bindParam(':id', $user['id']);\n        $stmt->execute();\n\n        // Send password reset email\n        $subject = 'Password Reset Link';\n        $body = \"Dear $user[username],\\n\\nYour new password is: $new_password\";\n        $headers = 'From: your-email@example.com' . \"\\r\\n\" .\n            'Reply-To: your-email@example.com' . \"\\r\\n\" .\n            'X-Mailer: PHP/' . phpversion();\n\n        mail($user['email'], $subject, $body, $headers);\n\n        echo \"A password reset link has been sent to your email address.\";\n    } else {\n        echo \"Email not found in our records.\";\n    }\n} else {\n    echo \"Invalid email address.\";\n}\n\n?>\n```\n**Security Considerations:**\n\n1. Use a secure hash function like bcrypt or Argon2 for storing passwords.\n2. Implement email verification to prevent password reset tokens from being used by unauthorized parties.\n3. Set a time limit for the password reset token to expire after a certain period (e.g., 24 hours).\n4. Use HTTPS protocol to encrypt communication between the user's browser and your server.\n\nNote that this is just a basic example, and you should adapt it to fit your specific use case and security requirements.", "code_blocks": [null, "```php\n<?php\n\n// Include configuration file\nrequire_once 'config.php';\n\n// Sanitize input data\n$email = filter_input(INPUT_POST, 'email', FILTER_SANITIZE_EMAIL);\n\n// Check if email is valid and exists in database\nif (!empty($email) && strpos($email, '@') !== false) {\n    $query = \"SELECT * FROM users WHERE email = :email\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    if ($stmt->rowCount() > 0) {\n        // Retrieve user data\n        $user = $stmt->fetch();\n\n        // Generate a random password and store it securely\n        $new_password = openssl_random_pseudo_bytes(32);\n        $password_hash = password_hash($new_password, PASSWORD_DEFAULT);\n\n        // Update password in database\n        $query = \"UPDATE users SET password = :password WHERE id = :id\";\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':password', $password_hash);\n        $stmt->bindParam(':id', $user['id']);\n        $stmt->execute();\n\n        // Send password reset email\n        $subject = 'Password Reset Link';\n        $body = \"Dear $user[username],\\n\\nYour new password is: $new_password\";\n        $headers = 'From: your-email@example.com' . \"\\r\\n\" .\n            'Reply-To: your-email@example.com' . \"\\r\\n\" .\n            'X-Mailer: PHP/' . phpversion();\n\n        mail($user['email'], $subject, $body, $headers);\n\n        echo \"A password reset link has been sent to your email address.\";\n    } else {\n        echo \"Email not found in our records.\";\n    }\n} else {\n    echo \"Invalid email address.\";\n}\n\n?>\n```"]}
