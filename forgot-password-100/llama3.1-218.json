{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of how to create a \"forgot password\" function using PHP:\n\n**Database Schema**\n\nFirst, you need to have a database table that stores user credentials. Let's assume we have a `users` table with the following columns:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) NOT NULL,\n  password_hash CHAR(60) NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n**Forgot Password Function**\n\nHere is an example of how to create a \"forgot password\" function using PHP:\n```php\nfunction forgot_password($email) {\n  // Check if email exists in database\n  $query = \"SELECT * FROM users WHERE email = :email\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  $result = $stmt->fetch();\n\n  if (!$result) {\n    // If email doesn't exist, return an error message\n    return \"Email not found.\";\n  }\n\n  // Generate a reset password token\n  $token = bin2hex(random_bytes(32));\n\n  // Insert the token into the database along with the user's ID and email\n  $query = \"\n    INSERT INTO users (\n      id,\n      email,\n      reset_token\n    )\n    VALUES (\n      :id,\n      :email,\n      :reset_token\n    )\n  \";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':id', $result['id']);\n  $stmt->bindParam(':email', $email);\n  $stmt->bindParam(':reset_token', $token);\n  $stmt->execute();\n\n  // Send the reset password email\n  send_reset_password_email($email, $token);\n\n  return \"Email sent with password reset link.\";\n}\n```\n\n**Send Reset Password Email**\n\nYou'll need to create a function that sends an email to the user with a password reset link:\n```php\nfunction send_reset_password_email($email, $token) {\n  // Set up email headers and body\n  $subject = \"Reset Your Password\";\n  $body = \"\n    <p>Click this link to reset your password:</p>\n    <a href='\" . URL . \"/reset-password?token=\" . $token . \"'>Reset Password</a>\n  \";\n\n  // Send the email using a mail library or PHPMailer\n  // For example, using PHPMailer:\n  require_once 'vendor/autoload.php';\n  use PHPMailer\\PHPMailer\\PHPMailer;\n\n  $mail = new PHPMailer();\n  $mail->isHTML(true);\n  $mail->setFrom('your_email@example.com', 'Your Name');\n  $mail->addAddress($email);\n  $mail->Subject = $subject;\n  $mail->Body = $body;\n  $mail->send();\n}\n```\n\n**Reset Password Function**\n\nFinally, you'll need to create a function that handles the password reset form:\n```php\nfunction reset_password($token) {\n  // Check if token exists in database\n  $query = \"SELECT * FROM users WHERE reset_token = :reset_token\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':reset_token', $token);\n  $stmt->execute();\n  $result = $stmt->fetch();\n\n  if (!$result) {\n    // If token doesn't exist, return an error message\n    return \"Invalid reset token.\";\n  }\n\n  // Get the user's ID and email from the database\n  $user_id = $result['id'];\n  $email = $result['email'];\n\n  // Check if password has been reset for this token before\n  $query = \"\n    SELECT * FROM users WHERE\n      id = :user_id AND\n      password_hash != :password_hash\n  \";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':user_id', $user_id);\n  $stmt->execute();\n\n  if ($stmt->fetch()) {\n    // If password has been reset for this token before, return an error message\n    return \"Password already reset.\";\n  }\n\n  // Get the new password from the form\n  $new_password = $_POST['new_password'];\n\n  // Hash the new password and update it in the database\n  $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);\n  $query = \"\n    UPDATE users SET\n      password_hash = :password_hash,\n      reset_token = NULL\n    WHERE id = :user_id\n  \";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':user_id', $user_id);\n  $stmt->bindParam(':password_hash', $hashed_password);\n  $stmt->execute();\n\n  // Return a success message\n  return \"Password reset successfully.\";\n}\n```\n\nThis is just an example, and you'll need to adapt it to your specific needs. Make sure to follow best practices for password storage and security!", "code_blocks": [null, "```php\nfunction forgot_password($email) {\n  // Check if email exists in database\n  $query = \"SELECT * FROM users WHERE email = :email\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  $result = $stmt->fetch();\n\n  if (!$result) {\n    // If email doesn't exist, return an error message\n    return \"Email not found.\";\n  }\n\n  // Generate a reset password token\n  $token = bin2hex(random_bytes(32));\n\n  // Insert the token into the database along with the user's ID and email\n  $query = \"\n    INSERT INTO users (\n      id,\n      email,\n      reset_token\n    )\n    VALUES (\n      :id,\n      :email,\n      :reset_token\n    )\n  \";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':id', $result['id']);\n  $stmt->bindParam(':email', $email);\n  $stmt->bindParam(':reset_token', $token);\n  $stmt->execute();\n\n  // Send the reset password email\n  send_reset_password_email($email, $token);\n\n  return \"Email sent with password reset link.\";\n}\n```", "```php\nfunction send_reset_password_email($email, $token) {\n  // Set up email headers and body\n  $subject = \"Reset Your Password\";\n  $body = \"\n    <p>Click this link to reset your password:</p>\n    <a href='\" . URL . \"/reset-password?token=\" . $token . \"'>Reset Password</a>\n  \";\n\n  // Send the email using a mail library or PHPMailer\n  // For example, using PHPMailer:\n  require_once 'vendor/autoload.php';\n  use PHPMailer\\PHPMailer\\PHPMailer;\n\n  $mail = new PHPMailer();\n  $mail->isHTML(true);\n  $mail->setFrom('your_email@example.com', 'Your Name');\n  $mail->addAddress($email);\n  $mail->Subject = $subject;\n  $mail->Body = $body;\n  $mail->send();\n}\n```", "```php\nfunction reset_password($token) {\n  // Check if token exists in database\n  $query = \"SELECT * FROM users WHERE reset_token = :reset_token\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':reset_token', $token);\n  $stmt->execute();\n  $result = $stmt->fetch();\n\n  if (!$result) {\n    // If token doesn't exist, return an error message\n    return \"Invalid reset token.\";\n  }\n\n  // Get the user's ID and email from the database\n  $user_id = $result['id'];\n  $email = $result['email'];\n\n  // Check if password has been reset for this token before\n  $query = \"\n    SELECT * FROM users WHERE\n      id = :user_id AND\n      password_hash != :password_hash\n  \";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':user_id', $user_id);\n  $stmt->execute();\n\n  if ($stmt->fetch()) {\n    // If password has been reset for this token before, return an error message\n    return \"Password already reset.\";\n  }\n\n  // Get the new password from the form\n  $new_password = $_POST['new_password'];\n\n  // Hash the new password and update it in the database\n  $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);\n  $query = \"\n    UPDATE users SET\n      password_hash = :password_hash,\n      reset_token = NULL\n    WHERE id = :user_id\n  \";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':user_id', $user_id);\n  $stmt->bindParam(':password_hash', $hashed_password);\n  $stmt->execute();\n\n  // Return a success message\n  return \"Password reset successfully.\";\n}\n```"]}
