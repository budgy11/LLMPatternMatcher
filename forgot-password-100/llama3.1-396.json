{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of a basic \"Forgot Password\" functionality in PHP:\n\n**Note:** This is a simplified example and you should consider implementing additional security measures, such as hashing passwords and verifying user input.\n\n**Database Schema:**\n\nLet's assume we have a database table called `users` with the following columns:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  email VARCHAR(255) NOT NULL,\n  password_hash VARCHAR(255),\n  reset_token VARCHAR(255)\n);\n```\n**Forgot Password Functionality:**\n\nWe'll create a PHP function that will handle the forgot password request. This function will send an email to the user with a link to reset their password.\n\n**forgot_password.php**\n```php\nrequire_once 'db.php'; // assume you have a db.php file for database connection\n\nfunction forgotPassword($email) {\n  $query = \"SELECT * FROM users WHERE email = :email\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  $user = $stmt->fetch();\n\n  if ($user && !$user['reset_token']) {\n    // generate a random reset token\n    $token = bin2hex(random_bytes(32));\n    $query = \"UPDATE users SET reset_token = :token WHERE id = :id\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':token', $token);\n    $stmt->bindParam(':id', $user['id']);\n    $stmt->execute();\n\n    // send email with password reset link\n    $subject = \"Reset Password Link\";\n    $body = \"\n      Click this link to reset your password: <a href=\\\"https://yourdomain.com/reset-password?token=$token\\\">Reset Password</a>\n    \";\n    mail($user['email'], $subject, $body);\n\n    return true;\n  }\n\n  return false;\n}\n```\n**reset_password.php**\n\nThis script will handle the password reset request. It will verify the reset token and allow the user to change their password.\n\n```php\nrequire_once 'db.php'; // assume you have a db.php file for database connection\n\nfunction resetPassword($token) {\n  $query = \"SELECT * FROM users WHERE reset_token = :token\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':token', $token);\n  $stmt->execute();\n  $user = $stmt->fetch();\n\n  if ($user && $token === $user['reset_token']) {\n    // allow user to change password\n    echo \"Enter new password: <input type='password' name='new_password'><br>\";\n    echo \"Confirm new password: <input type='password' name='confirm_new_password'><br>\";\n\n    if (isset($_POST['new_password'])) {\n      $newPassword = $_POST['new_password'];\n      $confirmNewPassword = $_POST['confirm_new_password'];\n\n      if ($newPassword === $confirmNewPassword) {\n        // hash and update password\n        $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);\n        $query = \"UPDATE users SET password_hash = :password WHERE id = :id\";\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->bindParam(':id', $user['id']);\n        $stmt->execute();\n\n        // reset token\n        $query = \"UPDATE users SET reset_token = NULL WHERE id = :id\";\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':id', $user['id']);\n        $stmt->execute();\n\n        return true;\n      } else {\n        echo \"Passwords do not match.\";\n      }\n    }\n\n    return false;\n  }\n\n  return false;\n}\n```\n**Example Use Case:**\n\nTo test the forgot password functionality, you can create a simple form that calls the `forgotPassword` function when submitted.\n\n```php\n<form action=\"forgot_password.php\" method=\"post\">\n  <input type=\"email\" name=\"email\" placeholder=\"Enter email address\">\n  <button type=\"submit\">Send Reset Link</button>\n</form>\n```\nWhen the user submits the form, the `forgotPassword` function will be called with their email address. If a reset token is generated successfully, an email will be sent to the user with a link to reset their password.\n\nThe reset password link should point to a script that calls the `resetPassword` function and allows the user to change their password.\n\n```php\n<a href=\"https://yourdomain.com/reset-password?token=$token\">Reset Password</a>\n```\nThis is just a basic example, and you should consider implementing additional security measures such as:\n\n* Hashing passwords using a library like `password_hash` in PHP.\n* Verifying user input on the reset password form.\n* Implementing rate limiting to prevent brute-force attacks.\n* Using HTTPS to encrypt communication between the client and server.", "code_blocks": [null, "```php\nrequire_once 'db.php'; // assume you have a db.php file for database connection\n\nfunction forgotPassword($email) {\n  $query = \"SELECT * FROM users WHERE email = :email\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  $user = $stmt->fetch();\n\n  if ($user && !$user['reset_token']) {\n    // generate a random reset token\n    $token = bin2hex(random_bytes(32));\n    $query = \"UPDATE users SET reset_token = :token WHERE id = :id\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':token', $token);\n    $stmt->bindParam(':id', $user['id']);\n    $stmt->execute();\n\n    // send email with password reset link\n    $subject = \"Reset Password Link\";\n    $body = \"\n      Click this link to reset your password: <a href=\\\"https://yourdomain.com/reset-password?token=$token\\\">Reset Password</a>\n    \";\n    mail($user['email'], $subject, $body);\n\n    return true;\n  }\n\n  return false;\n}\n```", "```php\nrequire_once 'db.php'; // assume you have a db.php file for database connection\n\nfunction resetPassword($token) {\n  $query = \"SELECT * FROM users WHERE reset_token = :token\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':token', $token);\n  $stmt->execute();\n  $user = $stmt->fetch();\n\n  if ($user && $token === $user['reset_token']) {\n    // allow user to change password\n    echo \"Enter new password: <input type='password' name='new_password'><br>\";\n    echo \"Confirm new password: <input type='password' name='confirm_new_password'><br>\";\n\n    if (isset($_POST['new_password'])) {\n      $newPassword = $_POST['new_password'];\n      $confirmNewPassword = $_POST['confirm_new_password'];\n\n      if ($newPassword === $confirmNewPassword) {\n        // hash and update password\n        $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);\n        $query = \"UPDATE users SET password_hash = :password WHERE id = :id\";\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->bindParam(':id', $user['id']);\n        $stmt->execute();\n\n        // reset token\n        $query = \"UPDATE users SET reset_token = NULL WHERE id = :id\";\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':id', $user['id']);\n        $stmt->execute();\n\n        return true;\n      } else {\n        echo \"Passwords do not match.\";\n      }\n    }\n\n    return false;\n  }\n\n  return false;\n}\n```", "```php\n<form action=\"forgot_password.php\" method=\"post\">\n  <input type=\"email\" name=\"email\" placeholder=\"Enter email address\">\n  <button type=\"submit\">Send Reset Link</button>\n</form>\n```", "```php\n<a href=\"https://yourdomain.com/reset-password?token=$token\">Reset Password</a>\n```"]}
