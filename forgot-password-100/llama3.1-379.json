{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how you can create a forgot password function in PHP. This will send a reset link to the user's email address.\n\n**Database Schema:**\n\nWe'll need to have two tables, `users` and `password_resets`. The `users` table is assumed to be already created with columns like `id`, `username`, `email`, etc.\n\n```sql\nCREATE TABLE password_resets (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT NOT NULL,\n  token VARCHAR(255) NOT NULL,\n  expires_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n);\n```\n\n**Forgot Password Function:**\n\nThis will be a PHP function that will handle the forgot password functionality. The function will query the `users` table to verify if the user exists and then generate a reset token.\n\n```php\n<?php\n\nfunction sendResetLink($email, $username) {\n  global $pdo; // Assuming PDO connection already established\n\n  try {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE email = :email\");\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    if ($row = $stmt->fetch()) {\n      $token = bin2hex(random_bytes(32));\n      $expiresAt = date('Y-m-d H:i:s', strtotime('+1 hour'));\n\n      $stmt = $pdo->prepare(\"INSERT INTO password_resets (user_id, token, expires_at) VALUES (:user_id, :token, :expires_at)\");\n      $stmt->bindParam(':user_id', $row['id']);\n      $stmt->bindParam(':token', $token);\n      $stmt->bindParam(':expires_at', $expiresAt);\n      $stmt->execute();\n\n      $resetLink = \"http://yourdomain.com/reset-password?token=\" . $token;\n      sendEmail($email, 'Reset Password Link', \"Dear $username,\\n\\nClick the following link to reset your password: $resetLink\\n\\nBest Regards,\\n[Your Name]\");\n    } else {\n      throw new Exception('User not found');\n    }\n  } catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n  }\n}\n\nfunction sendEmail($email, $subject, $body) {\n  // Implement your email sending logic here\n  // You can use PHPMailer or any other library to send emails\n}\n\n// Example usage:\nsendResetLink(\"user@example.com\", \"John Doe\");\n\n?>\n```\n\n**Reset Password Function:**\n\nThis will be another PHP function that will handle the actual password reset functionality. It will validate the token and then update the user's password.\n\n```php\nfunction resetPassword($token, $password) {\n  global $pdo;\n\n  try {\n    $stmt = $pdo->prepare(\"SELECT * FROM password_resets WHERE token = :token AND expires_at > NOW()\");\n    $stmt->bindParam(':token', $token);\n    $stmt->execute();\n\n    if ($row = $stmt->fetch()) {\n      $userStmt = $pdo->prepare(\"UPDATE users SET password = :password WHERE id = :id\");\n      $userStmt->bindParam(':password', $password);\n      $userStmt->bindParam(':id', $row['user_id']);\n      $userStmt->execute();\n\n      $resetStmt = $pdo->prepare(\"DELETE FROM password_resets WHERE token = :token\");\n      $resetStmt->bindParam(':token', $token);\n      $resetStmt->execute();\n    } else {\n      throw new Exception('Invalid or expired token');\n    }\n  } catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n  }\n}\n\n// Example usage:\nresetPassword(\"your_token\", \"new_password\");\n?>\n```\n\nThis is a basic example of how you can implement forgot password functionality in PHP using PDO for database interactions and assuming an email sending function (`sendEmail`) already exists. You should adapt this to fit your specific needs and requirements.\n\n**Important Security Considerations:**\n\n1. **Token Generation:** The `bin2hex(random_bytes(32))` method is used to generate the token, which is a secure way to create a cryptographically strong random number.\n2. **Email Verification:** Verify the email address before sending the reset link by checking if it matches the user's registered email.\n3. **Token Validation:** Validate the token on every request to prevent unauthorized access and ensure the user has requested a password reset.\n4. **Password Hashing:** Always hash passwords using strong hashing algorithms like `password_hash()` before storing them in the database.\n\nPlease remember that this is a simplified example and should be adapted according to your specific needs, especially regarding security measures.", "code_blocks": [null, "```php\n<?php\n\nfunction sendResetLink($email, $username) {\n  global $pdo; // Assuming PDO connection already established\n\n  try {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE email = :email\");\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    if ($row = $stmt->fetch()) {\n      $token = bin2hex(random_bytes(32));\n      $expiresAt = date('Y-m-d H:i:s', strtotime('+1 hour'));\n\n      $stmt = $pdo->prepare(\"INSERT INTO password_resets (user_id, token, expires_at) VALUES (:user_id, :token, :expires_at)\");\n      $stmt->bindParam(':user_id', $row['id']);\n      $stmt->bindParam(':token', $token);\n      $stmt->bindParam(':expires_at', $expiresAt);\n      $stmt->execute();\n\n      $resetLink = \"http://yourdomain.com/reset-password?token=\" . $token;\n      sendEmail($email, 'Reset Password Link', \"Dear $username,\\n\\nClick the following link to reset your password: $resetLink\\n\\nBest Regards,\\n[Your Name]\");\n    } else {\n      throw new Exception('User not found');\n    }\n  } catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n  }\n}\n\nfunction sendEmail($email, $subject, $body) {\n  // Implement your email sending logic here\n  // You can use PHPMailer or any other library to send emails\n}\n\n// Example usage:\nsendResetLink(\"user@example.com\", \"John Doe\");\n\n?>\n```", "```php\nfunction resetPassword($token, $password) {\n  global $pdo;\n\n  try {\n    $stmt = $pdo->prepare(\"SELECT * FROM password_resets WHERE token = :token AND expires_at > NOW()\");\n    $stmt->bindParam(':token', $token);\n    $stmt->execute();\n\n    if ($row = $stmt->fetch()) {\n      $userStmt = $pdo->prepare(\"UPDATE users SET password = :password WHERE id = :id\");\n      $userStmt->bindParam(':password', $password);\n      $userStmt->bindParam(':id', $row['user_id']);\n      $userStmt->execute();\n\n      $resetStmt = $pdo->prepare(\"DELETE FROM password_resets WHERE token = :token\");\n      $resetStmt->bindParam(':token', $token);\n      $resetStmt->execute();\n    } else {\n      throw new Exception('Invalid or expired token');\n    }\n  } catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n  }\n}\n\n// Example usage:\nresetPassword(\"your_token\", \"new_password\");\n?>\n```"]}
