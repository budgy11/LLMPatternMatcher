{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how to create a forgotten password function in PHP. This function will send a reset link to the user's email address associated with their account.\n\n**Note:** For this example, we'll be using the following:\n\n* A MySQL database to store usernames and passwords.\n* The `password_hash` function (PHP 5.5+) to hash passwords securely.\n* The `mail()` function to send emails.\n\n### Database Setup\n\nFirst, you need to set up your database with a table for storing user credentials. Let's call it `users`.\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(255),\n    email VARCHAR(255) UNIQUE,\n    password_hash VARCHAR(255)\n);\n```\n\n### PHP Code\n\nCreate a new PHP file, e.g., `forgot_password.php`. This will be the script that handles forgotten passwords.\n\n```php\n<?php\n// Configuration\ndefine('EMAIL_SUBJECT', 'Reset Password');\ndefine('PASSWORD_RESET_LINK', 'https://your-website.com/reset-password');\n\n// Database connection settings\n$host = 'localhost';\n$dbname = 'your-database-name';\n$username = 'your-username';\n$password = 'your-password';\n\ntry {\n    // Connect to database\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    die('Could not connect to database: ' . $e->getMessage());\n}\n\n// Handle form submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Get user input\n    $email = trim($_POST['email']);\n\n    // Validate email address\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo \"Invalid email address.\";\n        return;\n    }\n\n    // Find user by email address\n    $stmt = $conn->prepare('SELECT * FROM users WHERE email = :email');\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    if ($user = $stmt->fetch()) {\n        // Generate reset token\n        $resetToken = bin2hex(random_bytes(32));\n\n        // Update user record with reset token\n        $updateStmt = $conn->prepare('UPDATE users SET password_reset_token = :token WHERE email = :email');\n        $updateStmt->bindParam(':token', $resetToken);\n        $updateStmt->bindParam(':email', $email);\n        $updateStmt->execute();\n\n        // Send reset link via email\n        mail($email, EMAIL_SUBJECT,\n            'Click the following link to reset your password: <a href=\"' . PASSWORD_RESET_LINK . '?token=' . $resetToken . '\">Reset Password</a>',\n            \"From: your-email@example.com\\r\\nContent-Type: text/html; charset=UTF-8\");\n\n        echo \"Password reset email sent. Check your inbox and follow the link to reset your password.\";\n    } else {\n        echo \"Email address not found in our database.\";\n    }\n}\n?>\n```\n\n### HTML Form\n\nYou'll need an HTML form on a page that allows users to input their forgotten password request:\n\n```html\n<form action=\"forgot_password.php\" method=\"post\">\n    <label for=\"email\">Email:</label>\n    <input type=\"text\" name=\"email\" required><br><br>\n    <button type=\"submit\">Send Password Reset Email</button>\n</form>\n```\n\n### Notes\n\n1.  **Security:** This example uses a simple password reset link, which might not be secure enough for production use. For better security, you can consider using more robust methods like one-time passwords or multi-factor authentication.\n2.  **Email Configuration:** The email sending functionality in this example is very basic and may require additional configuration on your server for it to work correctly.\n3.  **Error Handling:** This code does not include extensive error handling or validation, which you should add according to your specific needs.\n\nThis basic forgotten password function will help users recover their accounts by providing a reset link via email. Always prioritize security in production environments and adapt this example to suit your project's requirements.", "code_blocks": [null, "```php\n<?php\n// Configuration\ndefine('EMAIL_SUBJECT', 'Reset Password');\ndefine('PASSWORD_RESET_LINK', 'https://your-website.com/reset-password');\n\n// Database connection settings\n$host = 'localhost';\n$dbname = 'your-database-name';\n$username = 'your-username';\n$password = 'your-password';\n\ntry {\n    // Connect to database\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    die('Could not connect to database: ' . $e->getMessage());\n}\n\n// Handle form submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Get user input\n    $email = trim($_POST['email']);\n\n    // Validate email address\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo \"Invalid email address.\";\n        return;\n    }\n\n    // Find user by email address\n    $stmt = $conn->prepare('SELECT * FROM users WHERE email = :email');\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    if ($user = $stmt->fetch()) {\n        // Generate reset token\n        $resetToken = bin2hex(random_bytes(32));\n\n        // Update user record with reset token\n        $updateStmt = $conn->prepare('UPDATE users SET password_reset_token = :token WHERE email = :email');\n        $updateStmt->bindParam(':token', $resetToken);\n        $updateStmt->bindParam(':email', $email);\n        $updateStmt->execute();\n\n        // Send reset link via email\n        mail($email, EMAIL_SUBJECT,\n            'Click the following link to reset your password: <a href=\"' . PASSWORD_RESET_LINK . '?token=' . $resetToken . '\">Reset Password</a>',\n            \"From: your-email@example.com\\r\\nContent-Type: text/html; charset=UTF-8\");\n\n        echo \"Password reset email sent. Check your inbox and follow the link to reset your password.\";\n    } else {\n        echo \"Email address not found in our database.\";\n    }\n}\n?>\n```", null]}
