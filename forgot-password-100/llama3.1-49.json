{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how you can create a \"forgot password\" function in PHP:\n\n**Database Schema**\n\nAssuming you have a `users` table with the following columns:\n\n| Column Name | Data Type |\n| --- | --- |\n| id | int (primary key) |\n| email | varchar(255) |\n| password | varchar(255) |\n\n**Forgot Password Function**\n\nCreate a new PHP file, e.g., `forgot_password.php`, and add the following code:\n```php\n<?php\n\n// Include configuration file\nrequire_once 'config.php';\n\n// Check if form has been submitted\nif (isset($_POST['submit'])) {\n  // Get input values\n  $email = $_POST['email'];\n\n  // Validate email address\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo \"Invalid email address.\";\n    exit;\n  }\n\n  // Retrieve user data from database\n  $sql = \"SELECT * FROM users WHERE email = ?\";\n  $stmt = $pdo->prepare($sql);\n  $stmt->execute([$email]);\n  $user = $stmt->fetch();\n\n  if (!$user) {\n    echo \"No account found with that email address.\";\n    exit;\n  }\n\n  // Generate reset token\n  $resetToken = bin2hex(random_bytes(32));\n  $expiresAt = time() + (60 * 60 * 24); // 1 day from now\n\n  // Update user data in database\n  $sql = \"UPDATE users SET reset_token = ?, expires_at = ? WHERE id = ?\";\n  $stmt = $pdo->prepare($sql);\n  $stmt->execute([$resetToken, $expiresAt, $user['id']]);\n\n  // Send password reset email\n  sendPasswordResetEmail($email, $resetToken);\n\n  echo \"A password reset link has been sent to your email address.\";\n} else {\n  // Display forgot password form\n  ?>\n  <form action=\"\" method=\"post\">\n    <label for=\"email\">Enter your email address:</label>\n    <input type=\"text\" id=\"email\" name=\"email\">\n    <button type=\"submit\" name=\"submit\">Send Reset Link</button>\n  </form>\n  <?php\n}\n\n// Function to send password reset email\nfunction sendPasswordResetEmail($email, $resetToken) {\n  // Configuration variables (replace with your own)\n  $fromEmail = 'your-email@example.com';\n  $fromName = 'Your Website';\n\n  // Email template\n  $subject = 'Password Reset Link';\n  $body = \"\n    Dear user,\n\n    You have requested to reset your password. To do so, click on the following link:\n\n    <a href='http://example.com/reset-password?token=<?php echo $resetToken; ?>'>Reset Password</a>\n\n    If you did not request a password reset, please ignore this email.\n\n    Best regards,\n    \" . $fromName;\n\n  // Send email using PHPMailer or mail() function\n  // ...\n}\n```\n**Explanation**\n\nThis code uses the following steps:\n\n1. Checks if the form has been submitted.\n2. Retrieves the user data from the database based on the provided email address.\n3. Generates a reset token and updates the user data in the database with the new token and expiration time (1 day from now).\n4. Sends an email to the user with a password reset link using the `sendPasswordResetEmail()` function.\n\nNote that you'll need to replace the placeholders (`your-email@example.com`, `Your Website`) with your actual email configuration variables. Additionally, this code uses PDO for database interactions and assumes a MySQL database schema; modify as needed based on your own setup.\n\n**Security Considerations**\n\n* Use secure password hashing (e.g., bcrypt) for storing passwords.\n* Use a one-way hash function (e.g., SHA-256) to store the reset token.\n* Set a reasonable expiration time for the reset token (e.g., 1 day).\n* Implement email verification or other measures to prevent brute-force attacks.", "code_blocks": ["```php\n<?php\n\n// Include configuration file\nrequire_once 'config.php';\n\n// Check if form has been submitted\nif (isset($_POST['submit'])) {\n  // Get input values\n  $email = $_POST['email'];\n\n  // Validate email address\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo \"Invalid email address.\";\n    exit;\n  }\n\n  // Retrieve user data from database\n  $sql = \"SELECT * FROM users WHERE email = ?\";\n  $stmt = $pdo->prepare($sql);\n  $stmt->execute([$email]);\n  $user = $stmt->fetch();\n\n  if (!$user) {\n    echo \"No account found with that email address.\";\n    exit;\n  }\n\n  // Generate reset token\n  $resetToken = bin2hex(random_bytes(32));\n  $expiresAt = time() + (60 * 60 * 24); // 1 day from now\n\n  // Update user data in database\n  $sql = \"UPDATE users SET reset_token = ?, expires_at = ? WHERE id = ?\";\n  $stmt = $pdo->prepare($sql);\n  $stmt->execute([$resetToken, $expiresAt, $user['id']]);\n\n  // Send password reset email\n  sendPasswordResetEmail($email, $resetToken);\n\n  echo \"A password reset link has been sent to your email address.\";\n} else {\n  // Display forgot password form\n  ?>\n  <form action=\"\" method=\"post\">\n    <label for=\"email\">Enter your email address:</label>\n    <input type=\"text\" id=\"email\" name=\"email\">\n    <button type=\"submit\" name=\"submit\">Send Reset Link</button>\n  </form>\n  <?php\n}\n\n// Function to send password reset email\nfunction sendPasswordResetEmail($email, $resetToken) {\n  // Configuration variables (replace with your own)\n  $fromEmail = 'your-email@example.com';\n  $fromName = 'Your Website';\n\n  // Email template\n  $subject = 'Password Reset Link';\n  $body = \"\n    Dear user,\n\n    You have requested to reset your password. To do so, click on the following link:\n\n    <a href='http://example.com/reset-password?token=<?php echo $resetToken; ?>'>Reset Password</a>\n\n    If you did not request a password reset, please ignore this email.\n\n    Best regards,\n    \" . $fromName;\n\n  // Send email using PHPMailer or mail() function\n  // ...\n}\n```"]}
