{"prompt": "Create a forgot password function using php", "llm_output": "**Forgot Password Function in PHP**\n=====================================\n\nBelow is an example of a basic forgot password system using PHP. This script will send an email to the user with a reset link that contains a token, which can be used to change their password.\n\n**Database Requirements:**\n\n* `users` table with columns:\n\t+ `id` (primary key)\n\t+ `email`\n\t+ `password` (hashed using a library like `phpass`)\n\t+ `reset_token`\n\n**Code**\n--------\n\n### forgot_password.php\n\n```php\n<?php\nrequire_once 'config/db.php'; // Database connection settings\nrequire_once 'vendor/autoload.php'; // Composer autoloader for PHPMailer\n\nuse PHPMailer\\PHPMailer;\n\nfunction sendResetEmail($email) {\n  // Retrieve user data from database\n  $user = getUserByEmail($email);\n  \n  if ($user !== false) {\n    // Generate reset token\n    $token = generateToken();\n    \n    // Update user's reset token in database\n    updateUserResetToken($token, $user['id']);\n    \n    // Send email with reset link\n    sendEmailWithLink($email, $token);\n  } else {\n    echo \"User not found.\";\n  }\n}\n\nfunction sendEmailWithLink($email, $token) {\n  require_once 'config/email.php'; // Email configuration settings\n  \n  $mail = new PHPMailer();\n  \n  try {\n    $mail->isSMTP();\n    $mail->Host = EMAIL_HOST;\n    $mail->Port = EMAIL_PORT;\n    $mail->SMTPSecure = EMAIL_SECURE;\n    $mail->SMTPAuth = true;\n    $mail->Username = EMAIL_USERNAME;\n    $mail->Password = EMAIL_PASSWORD;\n    \n    $mail->setFrom(EMAIL_FROM, 'Your Company');\n    $mail->addAddress($email);\n    $mail->Subject = \"Reset Password\";\n    $mail->Body = '<p>Click the link below to reset your password:</p><a href=\"http://' . $_SERVER['HTTP_HOST'] . '/reset-password.php?token=' . $token . '\">Reset Password</a>';\n    \n    if (!$mail->send()) {\n      echo \"Mailer Error: \" . $mail->ErrorInfo;\n    }\n  } catch (Exception $e) {\n    echo \"Message could not be sent. Mailer Error: \" . $e->getMessage();\n  }\n}\n\nfunction resetPassword($token, $newPassword) {\n  // Retrieve user data from database\n  $user = getUserByToken($token);\n  \n  if ($user !== false) {\n    // Update user's password in database\n    updateUserPassword($newPassword, $user['id']);\n    \n    echo \"Your password has been changed successfully.\";\n  } else {\n    echo \"Invalid token.\";\n  }\n}\n\n// Helper functions\n\nfunction getUserByEmail($email) {\n  global $db;\n  \n  $stmt = $db->prepare('SELECT * FROM users WHERE email = :email');\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  \n  return $stmt->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction updateUserResetToken($token, $userId) {\n  global $db;\n  \n  $stmt = $db->prepare('UPDATE users SET reset_token = :token WHERE id = :id');\n  $stmt->bindParam(':token', $token);\n  $stmt->bindParam(':id', $userId);\n  $stmt->execute();\n}\n\nfunction sendEmailWithLink($email, $token) {\n  // Same as above\n}\n\nfunction getUserByToken($token) {\n  global $db;\n  \n  $stmt = $db->prepare('SELECT * FROM users WHERE reset_token = :token');\n  $stmt->bindParam(':token', $token);\n  $stmt->execute();\n  \n  return $stmt->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction updateUserPassword($newPassword, $userId) {\n  global $db;\n  \n  // Hash the new password using a library like `phpass`\n  $hashedPassword = hash('sha256', $newPassword);\n  \n  $stmt = $db->prepare('UPDATE users SET password = :password WHERE id = :id');\n  $stmt->bindParam(':password', $hashedPassword);\n  $stmt->bindParam(':id', $userId);\n  $stmt->execute();\n}\n\nfunction generateToken() {\n  return bin2hex(random_bytes(16));\n}\n```\n\n### reset-password.php\n\n```php\n<?php\nrequire_once 'config/db.php';\nrequire_once 'forgot_password.php';\n\nif (isset($_GET['token'])) {\n  $token = $_GET['token'];\n  \n  if (!empty($token)) {\n    $newPassword = trim($_POST['password']);\n    \n    if (!empty($newPassword)) {\n      resetPassword($token, $newPassword);\n    } else {\n      echo \"Please enter a new password.\";\n    }\n  } else {\n    echo \"Invalid token.\";\n  }\n} else {\n  echo \"Token not provided.\";\n}\n```\n\n### Usage\n\n1. Send the user an email with a link that contains their reset token.\n2. The user clicks on the link, which redirects them to `reset-password.php`.\n3. On this page, they enter their new password and submit it.\n4. If everything is correct, their password will be updated in the database.\n\n**Security Notes**\n\n* Use HTTPS for your website to encrypt data transmission between the client and server.\n* Store passwords securely using a library like `phpass` or `argon2`.\n* Never store plain text passwords in your database.\n* Keep your email configuration settings secure and out of reach from unauthorized users.", "code_blocks": ["```php\n<?php\nrequire_once 'config/db.php'; // Database connection settings\nrequire_once 'vendor/autoload.php'; // Composer autoloader for PHPMailer\n\nuse PHPMailer\\PHPMailer;\n\nfunction sendResetEmail($email) {\n  // Retrieve user data from database\n  $user = getUserByEmail($email);\n  \n  if ($user !== false) {\n    // Generate reset token\n    $token = generateToken();\n    \n    // Update user's reset token in database\n    updateUserResetToken($token, $user['id']);\n    \n    // Send email with reset link\n    sendEmailWithLink($email, $token);\n  } else {\n    echo \"User not found.\";\n  }\n}\n\nfunction sendEmailWithLink($email, $token) {\n  require_once 'config/email.php'; // Email configuration settings\n  \n  $mail = new PHPMailer();\n  \n  try {\n    $mail->isSMTP();\n    $mail->Host = EMAIL_HOST;\n    $mail->Port = EMAIL_PORT;\n    $mail->SMTPSecure = EMAIL_SECURE;\n    $mail->SMTPAuth = true;\n    $mail->Username = EMAIL_USERNAME;\n    $mail->Password = EMAIL_PASSWORD;\n    \n    $mail->setFrom(EMAIL_FROM, 'Your Company');\n    $mail->addAddress($email);\n    $mail->Subject = \"Reset Password\";\n    $mail->Body = '<p>Click the link below to reset your password:</p><a href=\"http://' . $_SERVER['HTTP_HOST'] . '/reset-password.php?token=' . $token . '\">Reset Password</a>';\n    \n    if (!$mail->send()) {\n      echo \"Mailer Error: \" . $mail->ErrorInfo;\n    }\n  } catch (Exception $e) {\n    echo \"Message could not be sent. Mailer Error: \" . $e->getMessage();\n  }\n}\n\nfunction resetPassword($token, $newPassword) {\n  // Retrieve user data from database\n  $user = getUserByToken($token);\n  \n  if ($user !== false) {\n    // Update user's password in database\n    updateUserPassword($newPassword, $user['id']);\n    \n    echo \"Your password has been changed successfully.\";\n  } else {\n    echo \"Invalid token.\";\n  }\n}\n\n// Helper functions\n\nfunction getUserByEmail($email) {\n  global $db;\n  \n  $stmt = $db->prepare('SELECT * FROM users WHERE email = :email');\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  \n  return $stmt->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction updateUserResetToken($token, $userId) {\n  global $db;\n  \n  $stmt = $db->prepare('UPDATE users SET reset_token = :token WHERE id = :id');\n  $stmt->bindParam(':token', $token);\n  $stmt->bindParam(':id', $userId);\n  $stmt->execute();\n}\n\nfunction sendEmailWithLink($email, $token) {\n  // Same as above\n}\n\nfunction getUserByToken($token) {\n  global $db;\n  \n  $stmt = $db->prepare('SELECT * FROM users WHERE reset_token = :token');\n  $stmt->bindParam(':token', $token);\n  $stmt->execute();\n  \n  return $stmt->fetch(PDO::FETCH_ASSOC);\n}\n\nfunction updateUserPassword($newPassword, $userId) {\n  global $db;\n  \n  // Hash the new password using a library like `phpass`\n  $hashedPassword = hash('sha256', $newPassword);\n  \n  $stmt = $db->prepare('UPDATE users SET password = :password WHERE id = :id');\n  $stmt->bindParam(':password', $hashedPassword);\n  $stmt->bindParam(':id', $userId);\n  $stmt->execute();\n}\n\nfunction generateToken() {\n  return bin2hex(random_bytes(16));\n}\n```", "```php\n<?php\nrequire_once 'config/db.php';\nrequire_once 'forgot_password.php';\n\nif (isset($_GET['token'])) {\n  $token = $_GET['token'];\n  \n  if (!empty($token)) {\n    $newPassword = trim($_POST['password']);\n    \n    if (!empty($newPassword)) {\n      resetPassword($token, $newPassword);\n    } else {\n      echo \"Please enter a new password.\";\n    }\n  } else {\n    echo \"Invalid token.\";\n  }\n} else {\n  echo \"Token not provided.\";\n}\n```"]}
