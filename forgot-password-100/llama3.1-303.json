{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how you can create a \"Forgot Password\" functionality using PHP:\n\n**Note:** This is just an example and you should adapt it to your needs. You should also consider implementing proper security measures, such as hashing passwords and salting.\n\n### Database Schema\n\nFirst, let's assume that we have a table called `users` with the following structure:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  email VARCHAR(255) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL\n);\n```\n**User Table Structure**\n\n| Column Name | Data Type | Description |\n| --- | --- | --- |\n| `id` | `INT` | Unique identifier for the user. |\n| `email` | `VARCHAR(255)` | Email address of the user. |\n| `password_hash` | `VARCHAR(255)` | Hashed password for the user.\n\n### PHP Code\n\nCreate a new PHP file called `forgot_password.php`. This will handle the forgot password functionality.\n```php\n<?php\n  // Configuration variables\n  $db_host = 'your_database_host';\n  $db_username = 'your_database_username';\n  $db_password = 'your_database_password';\n  $db_name = 'your_database_name';\n\n  // Connect to the database\n  try {\n    $conn = new PDO(\"mysql:host=$db_host;dbname=$db_name\", $db_username, $db_password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  } catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n    exit;\n  }\n\n  // Get the user's email\n  $email = $_POST['email'];\n\n  // Check if the email exists in the database\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = ?\");\n  $stmt->execute([$email]);\n  $user_data = $stmt->fetch();\n\n  // If the email doesn't exist, throw an exception\n  if (!$user_data) {\n    throw new Exception('Email not found');\n  }\n\n  // Generate a password reset token\n  $token = bin2hex(random_bytes(32));\n  $email_token = hash('sha256', $token . 'secret_key');\n\n  // Store the email and token in the database (for temporary use)\n  $stmt = $conn->prepare(\"INSERT INTO password_reset_tokens (email, token) VALUES (?, ?)\");\n  $stmt->execute([$email, $token]);\n\n  // Send a reset password email to the user\n  send_password_reset_email($user_data['email'], $token);\n\n  echo \"A password reset email has been sent to your email address. Please check your inbox.\";\n\n  // Disconnect from the database\n  $conn = null;\n}\n\n// Function to send a password reset email\nfunction send_password_reset_email($email, $token) {\n  // Replace with your actual mail service settings\n  $mail = new PHPMailer();\n  $mail->isSMTP();\n  $mail->Host = 'your_smtp_host';\n  $mail->SMTPAuth = true;\n  $mail->Username = 'your_smtp_username';\n  $mail->Password = 'your_smtp_password';\n  $mail->Port = 587;\n\n  $mail->setFrom('no-reply@example.com', 'Example');\n  $mail->addAddress($email);\n  $mail->Subject = 'Reset Your Password';\n  $mail->Body = \"Click on the link below to reset your password: <a href='http://your_website.com/reset-password?token=\" . $token . \"'>Reset Password</a>\";\n\n  if (!$mail->send()) {\n    echo 'Mailer Error: ' . $mail->ErrorInfo;\n  }\n}\n?>\n```\n**Note:** Replace the placeholders (`$db_host`, `$db_username`, etc.) with your actual database credentials. Also, make sure to replace `http://your_website.com/reset-password?token=` with your website's URL.\n\n### Reset Password Process\n\nOnce the user clicks on the password reset link in their email, they will be redirected to a new page called `reset-password.php`.\n\n```php\n<?php\n  // Configuration variables\n  $db_host = 'your_database_host';\n  $db_username = 'your_database_username';\n  $db_password = 'your_database_password';\n  $db_name = 'your_database_name';\n\n  // Connect to the database\n  try {\n    $conn = new PDO(\"mysql:host=$db_host;dbname=$db_name\", $db_username, $db_password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  } catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n    exit;\n  }\n\n  // Get the token from the URL\n  $token = $_GET['token'];\n\n  // Check if the token exists in the database\n  $stmt = $conn->prepare(\"SELECT * FROM password_reset_tokens WHERE token = ?\");\n  $stmt->execute([$token]);\n  $user_data = $stmt->fetch();\n\n  // If the token doesn't exist, throw an exception\n  if (!$user_data) {\n    throw new Exception('Invalid token');\n  }\n\n  // Allow the user to set a new password\n  echo \"Enter your new password: <input type='password' id='new_password'><br>\";\n  echo \"<button id='submit-new-password'>Submit New Password</button>\";\n\n  $js_code = \"\n    <script>\n      document.getElementById('submit-new-password').addEventListener('click', function() {\n        var newPassword = document.getElementById('new_password').value;\n        // Insert the new password into the database\n        var xhr = new XMLHttpRequest();\n        xhr.open('POST', 'reset-password-insert.php', true);\n        xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n        xhr.send('token=\" . $token . \"&new_password=' + encodeURIComponent(newPassword));\n      });\n    </script>\n  \";\n\n  echo $js_code;\n\n  // Disconnect from the database\n  $conn = null;\n}\n\n// Page to insert the new password into the database\n?>\n```\n\nThis is a basic example of how you can implement a \"Forgot Password\" functionality using PHP. Make sure to adapt it to your needs and consider implementing proper security measures, such as hashing passwords and salting.\n\n### Example Use Case:\n\n1. The user goes to the website's login page and clicks on the \"Forgot Password\" link.\n2. They enter their email address in the form provided.\n3. The PHP script sends a password reset email to their email address with a link that contains a temporary token.\n4. The user clicks on the link and is redirected to a new page where they can set a new password.\n5. Once they enter a new password, it is inserted into the database.\n\nPlease note that this example uses the `hash` function for generating tokens. In real-world scenarios, you should use more secure methods such as token-based authentication services (e.g., Authy) or HMAC with secret key for maximum security and robustness.", "code_blocks": [null, "```php\n<?php\n  // Configuration variables\n  $db_host = 'your_database_host';\n  $db_username = 'your_database_username';\n  $db_password = 'your_database_password';\n  $db_name = 'your_database_name';\n\n  // Connect to the database\n  try {\n    $conn = new PDO(\"mysql:host=$db_host;dbname=$db_name\", $db_username, $db_password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  } catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n    exit;\n  }\n\n  // Get the user's email\n  $email = $_POST['email'];\n\n  // Check if the email exists in the database\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = ?\");\n  $stmt->execute([$email]);\n  $user_data = $stmt->fetch();\n\n  // If the email doesn't exist, throw an exception\n  if (!$user_data) {\n    throw new Exception('Email not found');\n  }\n\n  // Generate a password reset token\n  $token = bin2hex(random_bytes(32));\n  $email_token = hash('sha256', $token . 'secret_key');\n\n  // Store the email and token in the database (for temporary use)\n  $stmt = $conn->prepare(\"INSERT INTO password_reset_tokens (email, token) VALUES (?, ?)\");\n  $stmt->execute([$email, $token]);\n\n  // Send a reset password email to the user\n  send_password_reset_email($user_data['email'], $token);\n\n  echo \"A password reset email has been sent to your email address. Please check your inbox.\";\n\n  // Disconnect from the database\n  $conn = null;\n}\n\n// Function to send a password reset email\nfunction send_password_reset_email($email, $token) {\n  // Replace with your actual mail service settings\n  $mail = new PHPMailer();\n  $mail->isSMTP();\n  $mail->Host = 'your_smtp_host';\n  $mail->SMTPAuth = true;\n  $mail->Username = 'your_smtp_username';\n  $mail->Password = 'your_smtp_password';\n  $mail->Port = 587;\n\n  $mail->setFrom('no-reply@example.com', 'Example');\n  $mail->addAddress($email);\n  $mail->Subject = 'Reset Your Password';\n  $mail->Body = \"Click on the link below to reset your password: <a href='http://your_website.com/reset-password?token=\" . $token . \"'>Reset Password</a>\";\n\n  if (!$mail->send()) {\n    echo 'Mailer Error: ' . $mail->ErrorInfo;\n  }\n}\n?>\n```", "```php\n<?php\n  // Configuration variables\n  $db_host = 'your_database_host';\n  $db_username = 'your_database_username';\n  $db_password = 'your_database_password';\n  $db_name = 'your_database_name';\n\n  // Connect to the database\n  try {\n    $conn = new PDO(\"mysql:host=$db_host;dbname=$db_name\", $db_username, $db_password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  } catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n    exit;\n  }\n\n  // Get the token from the URL\n  $token = $_GET['token'];\n\n  // Check if the token exists in the database\n  $stmt = $conn->prepare(\"SELECT * FROM password_reset_tokens WHERE token = ?\");\n  $stmt->execute([$token]);\n  $user_data = $stmt->fetch();\n\n  // If the token doesn't exist, throw an exception\n  if (!$user_data) {\n    throw new Exception('Invalid token');\n  }\n\n  // Allow the user to set a new password\n  echo \"Enter your new password: <input type='password' id='new_password'><br>\";\n  echo \"<button id='submit-new-password'>Submit New Password</button>\";\n\n  $js_code = \"\n    <script>\n      document.getElementById('submit-new-password').addEventListener('click', function() {\n        var newPassword = document.getElementById('new_password').value;\n        // Insert the new password into the database\n        var xhr = new XMLHttpRequest();\n        xhr.open('POST', 'reset-password-insert.php', true);\n        xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n        xhr.send('token=\" . $token . \"&new_password=' + encodeURIComponent(newPassword));\n      });\n    </script>\n  \";\n\n  echo $js_code;\n\n  // Disconnect from the database\n  $conn = null;\n}\n\n// Page to insert the new password into the database\n?>\n```"]}
