{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of a forgot password function in PHP:\n\n**Database Table:**\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) NOT NULL UNIQUE,\n  password_hash VARCHAR(255) NOT NULL,\n  reset_token VARCHAR(255),\n  reset_token_expires TIMESTAMP DEFAULT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n);\n```\n**Forgot Password Function:**\n```php\nfunction forgot_password($email) {\n  // Check if user exists\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email\");\n  $stmt->execute(array(':email' => $email));\n  $user = $stmt->fetch();\n\n  if (!$user) {\n    throw new Exception('Email not found');\n  }\n\n  // Generate reset token\n  $token = bin2hex(random_bytes(32));\n\n  // Update user's reset token and expires timestamp\n  $stmt = $conn->prepare(\"UPDATE users SET reset_token = :token, reset_token_expires = NOW() + INTERVAL 1 HOUR WHERE email = :email\");\n  $stmt->execute(array(':token' => $token, ':email' => $email));\n\n  // Send password reset email\n  send_password_reset_email($user['id'], $token);\n\n  return true;\n}\n```\n**Password Reset Email Function:**\n```php\nfunction send_password_reset_email($user_id, $reset_token) {\n  $subject = 'Reset your password';\n  $body = '<p>To reset your password, click the link below:</p>\n          <p><a href=\"http://example.com/reset-password/'.$user_id.'/'.$reset_token.'\">Reset Password</a></p>';\n  $headers = array(\n    'From' => 'your-email@example.com',\n    'Reply-To' => $email\n  );\n\n  mail($email, $subject, $body, implode(\"\\r\\n\", $headers));\n}\n```\n**Password Reset Page:**\n```php\nfunction reset_password() {\n  if (isset($_POST['reset_token'])) {\n    $user_id = $_POST['reset_token'];\n    $token = $_POST['reset_token'];\n\n    // Check if token is valid and has not expired\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE id = :id AND reset_token = :token AND reset_token_expires > NOW()\");\n    $stmt->execute(array(':id' => $user_id, ':token' => $token));\n    $user = $stmt->fetch();\n\n    if (!$user) {\n      throw new Exception('Invalid token or has expired');\n    }\n\n    // Update user's password\n    $password_hash = hash_password($_POST['new_password']);\n\n    $stmt = $conn->prepare(\"UPDATE users SET password_hash = :hash WHERE id = :id\");\n    $stmt->execute(array(':hash' => $password_hash, ':id' => $user_id));\n\n    // Clear user's reset token\n    $stmt = $conn->prepare(\"UPDATE users SET reset_token = NULL WHERE id = :id\");\n    $stmt->execute(array(':id' => $user_id));\n  }\n}\n```\n**Hash Password Function:**\n```php\nfunction hash_password($password) {\n  return password_hash($password, PASSWORD_DEFAULT);\n}\n```\nNote:\n\n* The `forgot_password` function generates a reset token and updates the user's record in the database.\n* The `send_password_reset_email` function sends an email to the user with a link to the password reset page.\n* The `reset_password` function checks if the provided token is valid, has not expired, and updates the user's password.\n* The `hash_password` function hashes the new password using the `password_hash` function.\n\nThis code assumes that you are using PHP 7.x and have installed the `PDO` extension for database interactions. You will need to modify it to fit your specific use case and configuration.", "code_blocks": [null, "```php\nfunction forgot_password($email) {\n  // Check if user exists\n  $stmt = $conn->prepare(\"SELECT * FROM users WHERE email = :email\");\n  $stmt->execute(array(':email' => $email));\n  $user = $stmt->fetch();\n\n  if (!$user) {\n    throw new Exception('Email not found');\n  }\n\n  // Generate reset token\n  $token = bin2hex(random_bytes(32));\n\n  // Update user's reset token and expires timestamp\n  $stmt = $conn->prepare(\"UPDATE users SET reset_token = :token, reset_token_expires = NOW() + INTERVAL 1 HOUR WHERE email = :email\");\n  $stmt->execute(array(':token' => $token, ':email' => $email));\n\n  // Send password reset email\n  send_password_reset_email($user['id'], $token);\n\n  return true;\n}\n```", "```php\nfunction send_password_reset_email($user_id, $reset_token) {\n  $subject = 'Reset your password';\n  $body = '<p>To reset your password, click the link below:</p>\n          <p><a href=\"http://example.com/reset-password/'.$user_id.'/'.$reset_token.'\">Reset Password</a></p>';\n  $headers = array(\n    'From' => 'your-email@example.com',\n    'Reply-To' => $email\n  );\n\n  mail($email, $subject, $body, implode(\"\\r\\n\", $headers));\n}\n```", "```php\nfunction reset_password() {\n  if (isset($_POST['reset_token'])) {\n    $user_id = $_POST['reset_token'];\n    $token = $_POST['reset_token'];\n\n    // Check if token is valid and has not expired\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE id = :id AND reset_token = :token AND reset_token_expires > NOW()\");\n    $stmt->execute(array(':id' => $user_id, ':token' => $token));\n    $user = $stmt->fetch();\n\n    if (!$user) {\n      throw new Exception('Invalid token or has expired');\n    }\n\n    // Update user's password\n    $password_hash = hash_password($_POST['new_password']);\n\n    $stmt = $conn->prepare(\"UPDATE users SET password_hash = :hash WHERE id = :id\");\n    $stmt->execute(array(':hash' => $password_hash, ':id' => $user_id));\n\n    // Clear user's reset token\n    $stmt = $conn->prepare(\"UPDATE users SET reset_token = NULL WHERE id = :id\");\n    $stmt->execute(array(':id' => $user_id));\n  }\n}\n```", "```php\nfunction hash_password($password) {\n  return password_hash($password, PASSWORD_DEFAULT);\n}\n```"]}
