{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of a basic \"Forgot Password\" function in PHP:\n\n**ForgotPassword.php**\n```php\n<?php\n\n// Configuration settings\n$secret_key = 'your_secret_key_here'; // Change this to a secure secret key\n\nfunction sendPasswordResetEmail($email) {\n  $subject = 'Reset your password';\n  $body = '<p>Please click the following link to reset your password:</p><a href=\"' . $_SERVER['HTTP_HOST'] . '/reset-password?token=' . base64_encode(encrypt_password_reset_token($email)) . '\">Reset Password</a>';\n  sendEmail($email, $subject, $body);\n}\n\nfunction encrypt_password_reset_token($email) {\n  return hash_hmac('sha256', $email, $secret_key);\n}\n\nfunction validate_password_reset_token($token) {\n  try {\n    $decodedToken = base64_decode($token);\n    if (hash_equals($decodedToken, encrypt_password_reset_token($_POST['email']))) {\n      // Token is valid\n      return true;\n    } else {\n      throw new Exception('Invalid token');\n    }\n  } catch (Exception $e) {\n    // If there's an error decoding the token or comparing it to the hash, we'll assume it's invalid.\n    return false;\n  }\n}\n\nfunction resetPassword($token) {\n  // Retrieve user data from database using the token\n  $user = getUserDataFromDatabaseByToken($token);\n  \n  if ($user === null) {\n    throw new Exception('Invalid token');\n  }\n  \n  // Prompt user to enter a new password and confirm it\n  echo '<form action=\"' . $_SERVER['PHP_SELF'] . '\" method=\"post\">';\n  echo '<input type=\"password\" name=\"new_password\">';\n  echo '<input type=\"password\" name=\"confirm_new_password\">';\n  echo '<button type=\"submit\">Reset Password</button>';\n  echo '</form>';\n  \n  if ($_POST['new_password'] === $_POST['confirm_new_password']) {\n    // Update password in database\n    updatePasswordInDatabase($user, $_POST['new_password']);\n    \n    echo 'Your password has been updated successfully!';\n  } else {\n    throw new Exception('Passwords do not match');\n  }\n}\n\n// Helper function to send an email using PHPMailer or similar library (not included here)\nfunction sendEmail($to, $subject, $body) {\n  // Implementation omitted for brevity\n}\n\n?>\n```\nThis example includes the following functions:\n\n1. `sendPasswordResetEmail`: Sends a password reset email with a link containing a token that can be used to update the user's password.\n2. `encrypt_password_reset_token`: Encrypts an email address using HMAC (Keyed-Hashing for Message Authentication) to generate a token that can be sent via email and validated later.\n3. `validate_password_reset_token`: Verifies whether a given token is valid by comparing it with the encrypted version of the user's email address stored in the database.\n4. `resetPassword`: Updates the user's password if they provide a new password that matches their confirmation.\n\n**Example usage**\n\n1. The user requests to reset their password, and you generate an email with a link containing a token (e.g., `http://example.com/reset-password?token=abc123`).\n2. When the user clicks on this link, they're redirected to your server, which verifies that the token is valid using the `validate_password_reset_token` function.\n3. If the token is valid, you prompt the user to enter a new password and confirm it.\n\n**Important notes**\n\n* This example uses a simple hash-based approach for encrypting passwords, but in production environments, consider using more robust methods like bcrypt or Argon2.\n* Remember to replace `your_secret_key_here` with a secure secret key that's not stored anywhere in your code or database.\n* You'll need to implement additional security measures (e.g., rate limiting, IP blocking) to prevent brute-force attacks on the password reset feature.\n\nRemember to adapt this example to your specific use case and consider implementing more advanced security features as needed.", "code_blocks": ["```php\n<?php\n\n// Configuration settings\n$secret_key = 'your_secret_key_here'; // Change this to a secure secret key\n\nfunction sendPasswordResetEmail($email) {\n  $subject = 'Reset your password';\n  $body = '<p>Please click the following link to reset your password:</p><a href=\"' . $_SERVER['HTTP_HOST'] . '/reset-password?token=' . base64_encode(encrypt_password_reset_token($email)) . '\">Reset Password</a>';\n  sendEmail($email, $subject, $body);\n}\n\nfunction encrypt_password_reset_token($email) {\n  return hash_hmac('sha256', $email, $secret_key);\n}\n\nfunction validate_password_reset_token($token) {\n  try {\n    $decodedToken = base64_decode($token);\n    if (hash_equals($decodedToken, encrypt_password_reset_token($_POST['email']))) {\n      // Token is valid\n      return true;\n    } else {\n      throw new Exception('Invalid token');\n    }\n  } catch (Exception $e) {\n    // If there's an error decoding the token or comparing it to the hash, we'll assume it's invalid.\n    return false;\n  }\n}\n\nfunction resetPassword($token) {\n  // Retrieve user data from database using the token\n  $user = getUserDataFromDatabaseByToken($token);\n  \n  if ($user === null) {\n    throw new Exception('Invalid token');\n  }\n  \n  // Prompt user to enter a new password and confirm it\n  echo '<form action=\"' . $_SERVER['PHP_SELF'] . '\" method=\"post\">';\n  echo '<input type=\"password\" name=\"new_password\">';\n  echo '<input type=\"password\" name=\"confirm_new_password\">';\n  echo '<button type=\"submit\">Reset Password</button>';\n  echo '</form>';\n  \n  if ($_POST['new_password'] === $_POST['confirm_new_password']) {\n    // Update password in database\n    updatePasswordInDatabase($user, $_POST['new_password']);\n    \n    echo 'Your password has been updated successfully!';\n  } else {\n    throw new Exception('Passwords do not match');\n  }\n}\n\n// Helper function to send an email using PHPMailer or similar library (not included here)\nfunction sendEmail($to, $subject, $body) {\n  // Implementation omitted for brevity\n}\n\n?>\n```"]}
