{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of a forgotten password function in PHP, which includes the following:\n\n1. User submits email to reset password\n2. Send email with link to reset password\n3. User clicks on link and enters new password\n4. Update user's password in database\n\n**Database Schema**\n\nWe'll assume we have a `users` table with the following columns:\n\n| Column Name | Data Type | Description |\n| --- | --- | --- |\n| id | int | Unique ID of each user |\n| email | varchar(255) | Email address of each user |\n| password | varchar(255) | Password of each user |\n\n**PHP Code**\n\n```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'username');\ndefine('DB_PASSWORD', 'password');\ndefine('DB_NAME', 'database');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to send reset password email\nfunction sendResetEmail($email) {\n    // Generate random token for password reset\n    $token = bin2hex(random_bytes(32));\n    \n    // Insert new record into tokens table (assuming we have one)\n    $insertTokenQuery = \"INSERT INTO tokens (user_email, token) VALUES (?, ?)\";\n    $stmt = $conn->prepare($insertTokenQuery);\n    $stmt->bind_param(\"ss\", $email, $token);\n    $stmt->execute();\n    \n    // Send email with link to reset password\n    $to = $email;\n    $subject = \"Reset your password\";\n    $body = \"\n        Click on the following link to reset your password:\n        http://example.com/reset-password?token=\" . urlencode($token)\n        \n    \";\n    mail($to, $subject, $body);\n}\n\n// Function to update user's password\nfunction updatePassword($email, $newPassword) {\n    // Update user's password in database\n    $updatePasswordQuery = \"UPDATE users SET password = ? WHERE email = ?\";\n    $stmt = $conn->prepare($updatePasswordQuery);\n    $stmt->bind_param(\"ss\", $newPassword, $email);\n    $stmt->execute();\n}\n\n// Function to handle forgotten password form submission\nfunction forgotPassword() {\n    if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n        // Get email from form input\n        $email = $_POST['email'];\n        \n        // Check if user exists in database\n        $getUserQuery = \"SELECT * FROM users WHERE email = ?\";\n        $stmt = $conn->prepare($getUserQuery);\n        $stmt->bind_param(\"s\", $email);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        \n        if ($result->num_rows > 0) {\n            // Send reset password email\n            sendResetEmail($email);\n            echo \"An email has been sent to your registered email address with a link to reset your password.\";\n        } else {\n            echo \"No user found with this email address.\";\n        }\n    }\n}\n\n// Function to handle password reset form submission\nfunction resetPassword() {\n    if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n        // Get token and new password from form input\n        $token = $_POST['token'];\n        $newPassword = $_POST['password'];\n        \n        // Check if token is valid (we'll assume it's stored in a separate table)\n        $getTokenQuery = \"SELECT * FROM tokens WHERE token = ?\";\n        $stmt = $conn->prepare($getTokenQuery);\n        $stmt->bind_param(\"s\", $token);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        \n        if ($result->num_rows > 0) {\n            // Update user's password\n            updatePassword($_POST['email'], $newPassword);\n            echo \"Your password has been updated successfully.\";\n        } else {\n            echo \"Invalid token. Please try again.\";\n        }\n    }\n}\n\n// Call functions to handle form submissions\nforgotPassword();\nif (isset($_GET['token'])) {\n    resetPassword();\n}\n?>\n```\n\n**HTML Code**\n\n```html\n<!-- Forgotten Password Form -->\n<form action=\"\" method=\"post\">\n    <label for=\"email\">Email:</label>\n    <input type=\"text\" id=\"email\" name=\"email\"><br><br>\n    <button type=\"submit\">Send Reset Email</button>\n</form>\n\n<!-- Password Reset Form (sent via email) -->\n<form action=\"\" method=\"post\">\n    <label for=\"token\">Token:</label>\n    <input type=\"text\" id=\"token\" name=\"token\"><br><br>\n    <label for=\"password\">New Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n    <button type=\"submit\">Reset Password</button>\n</form>\n```\n\nNote: This is a basic example and should not be used as-is in production. You may want to add additional security measures, such as hashing passwords or using a more secure password reset method (e.g., using a temporary password). Additionally, make sure to configure your email server properly to send emails from your script.", "code_blocks": ["```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'username');\ndefine('DB_PASSWORD', 'password');\ndefine('DB_NAME', 'database');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to send reset password email\nfunction sendResetEmail($email) {\n    // Generate random token for password reset\n    $token = bin2hex(random_bytes(32));\n    \n    // Insert new record into tokens table (assuming we have one)\n    $insertTokenQuery = \"INSERT INTO tokens (user_email, token) VALUES (?, ?)\";\n    $stmt = $conn->prepare($insertTokenQuery);\n    $stmt->bind_param(\"ss\", $email, $token);\n    $stmt->execute();\n    \n    // Send email with link to reset password\n    $to = $email;\n    $subject = \"Reset your password\";\n    $body = \"\n        Click on the following link to reset your password:\n        http://example.com/reset-password?token=\" . urlencode($token)\n        \n    \";\n    mail($to, $subject, $body);\n}\n\n// Function to update user's password\nfunction updatePassword($email, $newPassword) {\n    // Update user's password in database\n    $updatePasswordQuery = \"UPDATE users SET password = ? WHERE email = ?\";\n    $stmt = $conn->prepare($updatePasswordQuery);\n    $stmt->bind_param(\"ss\", $newPassword, $email);\n    $stmt->execute();\n}\n\n// Function to handle forgotten password form submission\nfunction forgotPassword() {\n    if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n        // Get email from form input\n        $email = $_POST['email'];\n        \n        // Check if user exists in database\n        $getUserQuery = \"SELECT * FROM users WHERE email = ?\";\n        $stmt = $conn->prepare($getUserQuery);\n        $stmt->bind_param(\"s\", $email);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        \n        if ($result->num_rows > 0) {\n            // Send reset password email\n            sendResetEmail($email);\n            echo \"An email has been sent to your registered email address with a link to reset your password.\";\n        } else {\n            echo \"No user found with this email address.\";\n        }\n    }\n}\n\n// Function to handle password reset form submission\nfunction resetPassword() {\n    if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n        // Get token and new password from form input\n        $token = $_POST['token'];\n        $newPassword = $_POST['password'];\n        \n        // Check if token is valid (we'll assume it's stored in a separate table)\n        $getTokenQuery = \"SELECT * FROM tokens WHERE token = ?\";\n        $stmt = $conn->prepare($getTokenQuery);\n        $stmt->bind_param(\"s\", $token);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        \n        if ($result->num_rows > 0) {\n            // Update user's password\n            updatePassword($_POST['email'], $newPassword);\n            echo \"Your password has been updated successfully.\";\n        } else {\n            echo \"Invalid token. Please try again.\";\n        }\n    }\n}\n\n// Call functions to handle form submissions\nforgotPassword();\nif (isset($_GET['token'])) {\n    resetPassword();\n}\n?>\n```", null]}
