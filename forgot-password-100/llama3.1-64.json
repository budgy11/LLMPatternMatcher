{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of a basic \"forgot password\" function in PHP:\n\n**Note:** This example assumes you have the following setup:\n\n* A MySQL database with a `users` table containing columns for `username`, `email`, and `password_hash`.\n* You are using PHP 7.x or later.\n* You have installed a hash library like `password_hash()` (built-in to PHP) and `hash()`.\n\n**`forgot_password.php`:**\n```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Process form submission (forgot password)\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n\n    // Get user input\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n\n    // Validate user input\n    if (!isset($username) || !isset($email)) {\n        echo \"Error: Username and email are required.\";\n        exit;\n    }\n\n    // Query database to retrieve user data\n    $query = \"SELECT * FROM users WHERE username = '$username' AND email = '$email'\";\n    $result = $conn->query($query);\n\n    if ($result->num_rows > 0) {\n\n        // Retrieve user data from result set\n        $row = $result->fetch_assoc();\n\n        // Generate a random password reset token\n        $token = bin2hex(random_bytes(32));\n        $expires_in = time() + (60 * 60 * 24); // expires in 1 day\n\n        // Insert token into database (for security, store token separately from user data)\n        $query = \"INSERT INTO password_reset_tokens (username, token, expires_at) VALUES ('$username', '$token', '$expires_in')\";\n        $conn->query($query);\n\n        // Send email with password reset link\n        sendPasswordResetEmail($row['email'], $token);\n    } else {\n        echo \"Error: Username or email not found.\";\n    }\n}\n\n// Close database connection\n$conn->close();\n\n// Helper function to send password reset email\nfunction sendPasswordResetEmail($email, $token) {\n    // Your email sending logic goes here (e.g., using PHPMailer)\n    // For demonstration purposes, we'll use a simple echo statement\n    echo \"Sending email to $email with password reset token: $token\\n\";\n}\n\n?>\n```\n**How it works:**\n\n1. The script first checks if the form has been submitted via POST.\n2. It retrieves the `username` and `email` from the form submission.\n3. The script validates that both fields are set, then queries the database to retrieve user data.\n4. If the user exists in the database, it generates a random password reset token using PHP's `random_bytes()` function.\n5. It inserts the token into a separate table (`password_reset_tokens`) for security reasons (storing tokens separately from user data).\n6. The script then sends an email with a password reset link to the user's email address.\n\n**Security considerations:**\n\n* This example uses a simple token-based system, but you should consider implementing more robust security measures, such as:\n\t+ Using a secure password hash library (e.g., `password_hash()`).\n\t+ Implementing rate limiting or IP blocking to prevent brute-force attacks.\n\t+ Validating user input and sanitizing data before inserting it into the database.\n\n**Example usage:**\n\nCreate a simple HTML form for users to submit their username and email:\n```html\n<form action=\"forgot_password.php\" method=\"post\">\n    <label for=\"username\">Username:</label>\n    <input type=\"text\" name=\"username\" required>\n    <br>\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" name=\"email\" required>\n    <br>\n    <button type=\"submit\">Reset Password</button>\n</form>\n```\nThis is a basic example to get you started. You'll need to adapt and improve it according to your specific needs and security requirements.\n\n**Note:** This code does not include email sending logic; you will need to implement this using an email library like PHPMailer or a third-party service (e.g., Mailgun, Sendgrid).", "code_blocks": ["```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Process form submission (forgot password)\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n\n    // Get user input\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n\n    // Validate user input\n    if (!isset($username) || !isset($email)) {\n        echo \"Error: Username and email are required.\";\n        exit;\n    }\n\n    // Query database to retrieve user data\n    $query = \"SELECT * FROM users WHERE username = '$username' AND email = '$email'\";\n    $result = $conn->query($query);\n\n    if ($result->num_rows > 0) {\n\n        // Retrieve user data from result set\n        $row = $result->fetch_assoc();\n\n        // Generate a random password reset token\n        $token = bin2hex(random_bytes(32));\n        $expires_in = time() + (60 * 60 * 24); // expires in 1 day\n\n        // Insert token into database (for security, store token separately from user data)\n        $query = \"INSERT INTO password_reset_tokens (username, token, expires_at) VALUES ('$username', '$token', '$expires_in')\";\n        $conn->query($query);\n\n        // Send email with password reset link\n        sendPasswordResetEmail($row['email'], $token);\n    } else {\n        echo \"Error: Username or email not found.\";\n    }\n}\n\n// Close database connection\n$conn->close();\n\n// Helper function to send password reset email\nfunction sendPasswordResetEmail($email, $token) {\n    // Your email sending logic goes here (e.g., using PHPMailer)\n    // For demonstration purposes, we'll use a simple echo statement\n    echo \"Sending email to $email with password reset token: $token\\n\";\n}\n\n?>\n```", null]}
