{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// Database connection details (Replace with your actual credentials)\n$dbHost = 'localhost';\n$dbName = 'your_database_name';\n$dbUser = 'your_db_user';\n$dbPassword = 'your_db_password';\n\n// Function to handle forgot password request\nfunction forgotPassword($email)\n{\n    // 1. Validate Email\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return \"Invalid email format.\";\n    }\n\n    // 2. Generate a unique token\n    $token = bin2hex(random_bytes(32)); // Creates a secure random string\n\n    // 3.  Store token and expiration in database.  Important for security!\n    try {\n        // Prepare the SQL query\n        $pdo = new PDO(\"mysql:host=$dbHost;dbname=$dbName;charset=utf8\", $dbUser, $dbPassword);\n        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // SQL Query to insert the token and email into the database\n        $sql = \"INSERT INTO forgot_password_tokens (email, token, expiry_timestamp)\n                 VALUES (:email, :token, :expiry_timestamp)\";\n\n        $stmt = $pdo->prepare($sql);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':token', $token);\n        $stmt->bindParam(':expiry_timestamp', time() + 3600);  // Token expires in 1 hour (adjust as needed)\n        $stmt->execute();\n    } catch (PDOException $e) {\n        // Handle database errors\n        return \"Error generating token. Please try again.\";\n    }\n\n\n    // 4.  Send Email (Replace with your email sending logic)\n    $subject = \"Password Reset Request\";\n    $message = \"Click this link to reset your password: \" . $_SERVER['REQUEST_URI'] . \"?token=\" . $token; // Construct the reset link\n    $headers = \"From: your_email@example.com\"; // Replace with your email address\n\n    // This is a placeholder.  You'll need to implement your email sending code here.\n    // Example (using a simple email function - replace with a proper email library)\n    // sendEmail($email, $subject, $message, $headers);\n\n    return \"Password reset link sent to your email. Please check your inbox.\";\n}\n\n// Example Usage (for testing - remove this section in a real application)\n// You'd typically receive this email address from a form submission.\n$emailAddress = \"test@example.com\"; //  Replace with an actual email address to test\n$result = forgotPassword($emailAddress);\necho $result;\n\n\n// ----------------------------------------------------------------------------\n//  Database Table (forgot_password_tokens) - Create this table in your database\n// ----------------------------------------------------------------------------\n// CREATE TABLE forgot_password_tokens (\n//     id INT AUTO_INCREMENT PRIMARY KEY,\n//     email VARCHAR(255) NOT NULL,\n//     token VARCHAR(255) NOT NULL,\n//     expiry_timestamp INT UNSIGNED NOT NULL  -- Timestamp when token expires\n// );\n//\n//  You'll also likely want to add an index on the email column for faster lookups\n//  CREATE INDEX idx_email ON forgot_password_tokens (email);\n\n?>\n```\n\nKey improvements and explanations:\n\n* **Security:**\n    * **`bin2hex(random_bytes(32))`**:  Generates a cryptographically secure random token.  This is *crucial* for security.  Using a weak random string is a major security vulnerability.\n    * **Token Expiry:** The `expiry_timestamp` column stores the time when the token will expire. This prevents attackers from using the token indefinitely.  The token expires after one hour in this example; adjust as needed for your application.\n    * **Prepared Statements:**  Uses prepared statements (`$pdo->prepare()`) to prevent SQL injection.  This is *essential* for any web application that handles user input.\n* **Error Handling:**\n    * **`try...catch` block:**  Handles potential database errors (e.g., connection issues, table not found).  This prevents the script from crashing and provides a more informative error message to the user.\n* **Email Sending Placeholder:** Includes a clear placeholder for the email sending functionality.  **You *must* implement your own email sending code.**  I've added a commented-out example.  *Do not* use simple `mail()` function as it's generally insecure and unreliable.\n* **Clearer Variable Names:**  Uses more descriptive variable names (e.g., `$dbHost`, `$dbName`, `$token`).\n* **Database Table Creation:**  Includes the SQL `CREATE TABLE` statement for the `forgot_password_tokens` table.  This makes it easy for you to create the necessary database table.  Also includes an index on the `email` column for faster token lookups.\n* **Comments and Explanations:**  The code is thoroughly commented to explain each step.\n* **Example Usage:** Provides an example of how to call the `forgotPassword()` function and display the result.\n* **`$_SERVER['REQUEST_URI']`:** Uses `$_SERVER['REQUEST_URI']` to dynamically generate the reset link. This makes the link portable and works regardless of the base URL of the application.\n* **Validation:** Validates the email format using `filter_var()`.\n* **Database Connection:**  Uses `PDO` for database connectivity, which is more modern and flexible than older methods.  Set `charset=utf8` for correct handling of international characters.\n* **Return Values:**  The function returns a meaningful message to the user (either success or an error message).\n\nHow to Use:\n\n1. **Database Setup:** Create the `forgot_password_tokens` table in your database.\n2. **Implement Email Sending:** Replace the placeholder email sending code with your actual email sending logic.  Use a reliable email library (e.g., PHPMailer, SwiftMailer) instead of the `mail()` function.\n3. **Handle Reset Link:**  When a user clicks the reset link, your application should:\n   * Extract the `token` from the URL.\n   * Look up the token in the `forgot_password_tokens` table.\n   * If the token is valid and hasn't expired,  allow the user to set a new password.\n   * After the password is reset, delete the token from the database to remove it and further enhance security.\n\nImportant Security Considerations:\n\n* **Never store passwords in plain text.**\n* **Always use strong, unique tokens.**\n* **Set appropriate token expiry times.**\n* **Implement proper input validation and sanitization.**\n* **Use HTTPS to encrypt the communication between the client and the server.**\n* **Regularly review and update your security practices.**\n* **Monitor for suspicious activity.**\n\nThis revised answer provides a more complete, secure, and robust solution for the forgot password functionality.  Remember to adapt the code to your specific application and security requirements.  And, again, *always* prioritize security when dealing with user credentials.\n", "code_blocks": ["```php\n<?php\n\n// Database connection details (Replace with your actual credentials)\n$dbHost = 'localhost';\n$dbName = 'your_database_name';\n$dbUser = 'your_db_user';\n$dbPassword = 'your_db_password';\n\n// Function to handle forgot password request\nfunction forgotPassword($email)\n{\n    // 1. Validate Email\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return \"Invalid email format.\";\n    }\n\n    // 2. Generate a unique token\n    $token = bin2hex(random_bytes(32)); // Creates a secure random string\n\n    // 3.  Store token and expiration in database.  Important for security!\n    try {\n        // Prepare the SQL query\n        $pdo = new PDO(\"mysql:host=$dbHost;dbname=$dbName;charset=utf8\", $dbUser, $dbPassword);\n        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // SQL Query to insert the token and email into the database\n        $sql = \"INSERT INTO forgot_password_tokens (email, token, expiry_timestamp)\n                 VALUES (:email, :token, :expiry_timestamp)\";\n\n        $stmt = $pdo->prepare($sql);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':token', $token);\n        $stmt->bindParam(':expiry_timestamp', time() + 3600);  // Token expires in 1 hour (adjust as needed)\n        $stmt->execute();\n    } catch (PDOException $e) {\n        // Handle database errors\n        return \"Error generating token. Please try again.\";\n    }\n\n\n    // 4.  Send Email (Replace with your email sending logic)\n    $subject = \"Password Reset Request\";\n    $message = \"Click this link to reset your password: \" . $_SERVER['REQUEST_URI'] . \"?token=\" . $token; // Construct the reset link\n    $headers = \"From: your_email@example.com\"; // Replace with your email address\n\n    // This is a placeholder.  You'll need to implement your email sending code here.\n    // Example (using a simple email function - replace with a proper email library)\n    // sendEmail($email, $subject, $message, $headers);\n\n    return \"Password reset link sent to your email. Please check your inbox.\";\n}\n\n// Example Usage (for testing - remove this section in a real application)\n// You'd typically receive this email address from a form submission.\n$emailAddress = \"test@example.com\"; //  Replace with an actual email address to test\n$result = forgotPassword($emailAddress);\necho $result;\n\n\n// ----------------------------------------------------------------------------\n//  Database Table (forgot_password_tokens) - Create this table in your database\n// ----------------------------------------------------------------------------\n// CREATE TABLE forgot_password_tokens (\n//     id INT AUTO_INCREMENT PRIMARY KEY,\n//     email VARCHAR(255) NOT NULL,\n//     token VARCHAR(255) NOT NULL,\n//     expiry_timestamp INT UNSIGNED NOT NULL  -- Timestamp when token expires\n// );\n//\n//  You'll also likely want to add an index on the email column for faster lookups\n//  CREATE INDEX idx_email ON forgot_password_tokens (email);\n\n?>\n```"]}
