{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// Database connection details (Replace with your actual credentials)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$database = \"your_database\";\n\n// Function to handle password reset\nfunction forgot_password($email) {\n    // 1. Check if the email exists in the user table\n    $conn = new mysqli($host, $username, $password, $database);\n\n    if ($conn->connect_error) {\n        die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    $sql = \"SELECT id, email FROM users WHERE email = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"s\", $email); // \"s\" for string\n    $stmt->execute();\n\n    $result = $stmt->get_result();\n\n    if ($result->num_rows == 0) {\n        $stmt->close();\n        $conn->close();\n        return false; // Email not found\n    }\n\n    $user = $result->fetch_assoc();\n    $user_id = $user['id'];\n    $user_email = $user['email'];\n    $stmt->close();\n\n    // 2. Generate a unique token\n    $token = bin2hex(random_bytes(32)); // Generates a cryptographically secure random string\n\n    // 3. Prepare the reset link\n    $reset_link = \"http://yourdomain.com/reset_password?token=$token&user_id=$user_id\";\n\n    // 4. Store the token and user ID in the database (temporary)\n    $sql = \"INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, NOW())\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"sss\", $user_id, $token, $conn->insert_id); // 's' for string, insert_id for NOW()\n    $stmt->execute();\n    $stmt->close();\n\n    // 5. Send the reset email\n    $to = $email;\n    $subject = \"Password Reset\";\n    $message = \"Click the link below to reset your password: \" . $reset_link;\n    $headers = \"From: your_email@example.com\\r\\n\";\n\n    if (mail($to, $subject, $message, $headers)) {\n        return true; // Reset email sent successfully\n    } else {\n        // Handle email sending failure (e.g., log it)\n        return false;\n    }\n}\n\n\n// Example Usage (For demonstration purposes -  you'd typically handle this from a form submission)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $email = $_POST[\"email\"];\n\n    if (!empty($email)) {\n        if (forgot_password($email)) {\n            echo \"Reset link has been sent to your email address.\";\n        } else {\n            echo \"Failed to send reset link. Please try again.\";\n        }\n    } else {\n        echo \"Please enter your email address.\";\n    }\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n\n    <h1>Forgot Password</h1>\n\n    <form method=\"post\" action=\"\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Database Connection:** Uses `mysqli` for a robust connection, and includes error handling for the connection.  **IMPORTANT:** Replace the placeholder credentials with your actual database information.\n* **Prepared Statements:** Uses prepared statements (`$stmt`) to prevent SQL injection vulnerabilities. This is *critical* for security.  The `bind_param` function is used to safely pass the email and token to the database.\n* **Unique Tokens:** Generates a cryptographically secure random token using `random_bytes(32)`. This ensures that each token is unique and difficult to guess.  Using `bin2hex` converts the binary data to a hexadecimal string for easy use in the URL.\n* **Token Storage:** Stores the token and user ID in a `password_resets` table. This table should have columns:\n    * `id` (primary key, auto-incrementing)\n    * `user_id` (foreign key referencing the `users` table)\n    * `token` (the generated unique token)\n    * `expires_at` (timestamp indicating when the token expires - recommended)\n* **Token Expiration (Recommended):**  The code includes `expires_at` to ensure tokens expire after a certain period.  This is a crucial security measure.  Consider setting an appropriate expiration time (e.g., 1 hour, 1 day) depending on your requirements.  The `NOW()` function is used to set the expiration time.\n* **Error Handling:**  Includes basic error handling for the database connection and email sending. In a production environment, you should implement more robust error logging and reporting.\n* **Clearer Structure and Comments:** The code is structured for better readability, with comments explaining each step.\n* **Example Usage (Form Integration):**  Provides a simple HTML form to demonstrate how to use the `forgot_password` function.  This code is suitable for a web form.\n* **Security Considerations:**\n    * **HTTPS:** Always use HTTPS to protect the email link and any data transmitted between the user and your server.\n    * **Password Reset Link Expiration:**  Set a reasonable expiration time for the reset link to prevent abuse.\n    * **Rate Limiting:** Implement rate limiting on the password reset endpoint to prevent attackers from repeatedly attempting resets.\n    * **User Input Validation:**  Validate the user's email address in the form to prevent malicious input.\n* **Table Structure (Important):**  The `password_resets` table should be created like this (adjust data types as needed):\n\n   ```sql\n   CREATE TABLE password_resets (\n       id INT AUTO_INCREMENT PRIMARY KEY,\n       user_id INT NOT NULL,\n       token VARCHAR(32) NOT NULL,\n       expires_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n       UNIQUE KEY `user_id_token` (`user_id`, `token`)\n   );\n   ```\n   The `UNIQUE KEY` constraint prevents duplicate tokens for the same user, which is very important.\n* **Email Sending:** Uses PHP's built-in `mail()` function for sending emails. For more robust email sending, consider using a dedicated email library like PHPMailer.  **Note:**  The `mail()` function's reliability can vary depending on your server's configuration.\n\nHow to use:\n\n1.  **Create the `password_resets` Table:** Execute the SQL statement to create the `password_resets` table in your database.\n2.  **Replace Placeholders:** Update the database connection details (`$host`, `$username`, `$password`, `$database`) with your actual values.\n3.  **Integrate with Your Form:** Modify the HTML form and PHP code to handle the form submission and call the `forgot_password` function.\n4.  **Test Thoroughly:** Test the password reset functionality thoroughly to ensure it works as expected and that the reset links are secure.\n\nThis revised answer provides a more secure, robust, and well-structured solution for password reset functionality.  Remember to prioritize security best practices throughout the development process.\n", "code_blocks": ["```php\n<?php\n\n// Database connection details (Replace with your actual credentials)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$database = \"your_database\";\n\n// Function to handle password reset\nfunction forgot_password($email) {\n    // 1. Check if the email exists in the user table\n    $conn = new mysqli($host, $username, $password, $database);\n\n    if ($conn->connect_error) {\n        die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    $sql = \"SELECT id, email FROM users WHERE email = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"s\", $email); // \"s\" for string\n    $stmt->execute();\n\n    $result = $stmt->get_result();\n\n    if ($result->num_rows == 0) {\n        $stmt->close();\n        $conn->close();\n        return false; // Email not found\n    }\n\n    $user = $result->fetch_assoc();\n    $user_id = $user['id'];\n    $user_email = $user['email'];\n    $stmt->close();\n\n    // 2. Generate a unique token\n    $token = bin2hex(random_bytes(32)); // Generates a cryptographically secure random string\n\n    // 3. Prepare the reset link\n    $reset_link = \"http://yourdomain.com/reset_password?token=$token&user_id=$user_id\";\n\n    // 4. Store the token and user ID in the database (temporary)\n    $sql = \"INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, NOW())\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"sss\", $user_id, $token, $conn->insert_id); // 's' for string, insert_id for NOW()\n    $stmt->execute();\n    $stmt->close();\n\n    // 5. Send the reset email\n    $to = $email;\n    $subject = \"Password Reset\";\n    $message = \"Click the link below to reset your password: \" . $reset_link;\n    $headers = \"From: your_email@example.com\\r\\n\";\n\n    if (mail($to, $subject, $message, $headers)) {\n        return true; // Reset email sent successfully\n    } else {\n        // Handle email sending failure (e.g., log it)\n        return false;\n    }\n}\n\n\n// Example Usage (For demonstration purposes -  you'd typically handle this from a form submission)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $email = $_POST[\"email\"];\n\n    if (!empty($email)) {\n        if (forgot_password($email)) {\n            echo \"Reset link has been sent to your email address.\";\n        } else {\n            echo \"Failed to send reset link. Please try again.\";\n        }\n    } else {\n        echo \"Please enter your email address.\";\n    }\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n\n    <h1>Forgot Password</h1>\n\n    <form method=\"post\" action=\"\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n\n</body>\n</html>\n```"]}
