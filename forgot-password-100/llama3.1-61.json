{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how you can create a \"Forgot Password\" function in PHP. This will send an email to the user with a link that allows them to reset their password.\n\n**Note:** This is a basic implementation and should not be used in production without proper security measures (e.g., validating user input, hashing passwords, etc.).\n\n### Database Schema\n\nFirst, let's create a database schema for our example. We'll use MySQL, but the principles apply to other databases as well.\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE reset_passwords (\n  token VARCHAR(255) PRIMARY KEY,\n  user_id INT NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### PHP Code\n\n**`forgot-password.php`**\n\n```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'your_host');\ndefine('DB_USER', 'your_user');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\nrequire_once 'db-connection.php'; // Establishes database connection\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $email = trim($_POST['email']);\n\n  if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    http_response_code(400);\n    echo json_encode(['error' => 'Invalid email address']);\n    exit;\n  }\n\n  // Retrieve user ID from database\n  $query = \"SELECT id FROM users WHERE email = ?\";\n  $stmt = $mysqli->prepare($query);\n  $stmt->bind_param('s', $email);\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  if ($result->num_rows === 0) {\n    http_response_code(400);\n    echo json_encode(['error' => 'Email address not found']);\n    exit;\n  }\n\n  // Generate password reset token\n  $token = bin2hex(random_bytes(32));\n  $query = \"INSERT INTO reset_passwords (token, user_id) VALUES (?, ?)\";\n  $stmt = $mysqli->prepare($query);\n  $stmt->bind_param('si', $token, $user_id);\n  $stmt->execute();\n\n  // Send email with password reset link\n  $to = $email;\n  $subject = 'Password Reset Request';\n  $body = \"Please click the following link to reset your password:\\n\\n\";\n  $body .= '<a href=\"http://your-site.com/reset-password.php?token=' . $token . '\">Reset Password</a>';\n\n  mail($to, $subject, $body);\n\n  echo json_encode(['message' => 'Password reset email sent']);\n}\n?>\n```\n\n**`reset-password.php`**\n\n```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'your_host');\ndefine('DB_USER', 'your_user');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\nrequire_once 'db-connection.php'; // Establishes database connection\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $token = trim($_POST['token']);\n\n  if (empty($token)) {\n    http_response_code(400);\n    echo json_encode(['error' => 'Invalid token']);\n    exit;\n  }\n\n  // Retrieve user ID from reset_passwords table\n  $query = \"SELECT user_id FROM reset_passwords WHERE token = ?\";\n  $stmt = $mysqli->prepare($query);\n  $stmt->bind_param('s', $token);\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  if ($result->num_rows === 0) {\n    http_response_code(400);\n    echo json_encode(['error' => 'Invalid token']);\n    exit;\n  }\n\n  // Get user ID\n  $user_id = $result->fetch_assoc()['user_id'];\n\n  // Update password (for demonstration purposes only)\n  $new_password = 'new-password';\n  $query = \"UPDATE users SET password_hash = ? WHERE id = ?\";\n  $stmt = $mysqli->prepare($query);\n  $stmt->bind_param('si', sha256($new_password), $user_id);\n  $stmt->execute();\n\n  echo json_encode(['message' => 'Password updated successfully']);\n}\n?>\n```\n\n### Security Considerations\n\n1.  **Hashing passwords**: In the example above, we use `sha256` for hashing passwords. However, this is not a recommended approach in production environments. Consider using more secure libraries like `argon2i`.\n2.  **Token validation**: The code assumes that tokens are valid upon receipt. Implement token verification to prevent tampering attacks.\n3.  **Input sanitization**: Validate user input (e.g., email addresses, tokens) to prevent SQL injection and cross-site scripting (XSS) attacks.\n\nThis example should give you a basic understanding of how to implement a password reset functionality in PHP. Remember to adapt it according to your specific needs and follow security best practices.", "code_blocks": [null, "```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'your_host');\ndefine('DB_USER', 'your_user');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\nrequire_once 'db-connection.php'; // Establishes database connection\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $email = trim($_POST['email']);\n\n  if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    http_response_code(400);\n    echo json_encode(['error' => 'Invalid email address']);\n    exit;\n  }\n\n  // Retrieve user ID from database\n  $query = \"SELECT id FROM users WHERE email = ?\";\n  $stmt = $mysqli->prepare($query);\n  $stmt->bind_param('s', $email);\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  if ($result->num_rows === 0) {\n    http_response_code(400);\n    echo json_encode(['error' => 'Email address not found']);\n    exit;\n  }\n\n  // Generate password reset token\n  $token = bin2hex(random_bytes(32));\n  $query = \"INSERT INTO reset_passwords (token, user_id) VALUES (?, ?)\";\n  $stmt = $mysqli->prepare($query);\n  $stmt->bind_param('si', $token, $user_id);\n  $stmt->execute();\n\n  // Send email with password reset link\n  $to = $email;\n  $subject = 'Password Reset Request';\n  $body = \"Please click the following link to reset your password:\\n\\n\";\n  $body .= '<a href=\"http://your-site.com/reset-password.php?token=' . $token . '\">Reset Password</a>';\n\n  mail($to, $subject, $body);\n\n  echo json_encode(['message' => 'Password reset email sent']);\n}\n?>\n```", "```php\n<?php\n\n// Configuration\ndefine('DB_HOST', 'your_host');\ndefine('DB_USER', 'your_user');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\nrequire_once 'db-connection.php'; // Establishes database connection\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $token = trim($_POST['token']);\n\n  if (empty($token)) {\n    http_response_code(400);\n    echo json_encode(['error' => 'Invalid token']);\n    exit;\n  }\n\n  // Retrieve user ID from reset_passwords table\n  $query = \"SELECT user_id FROM reset_passwords WHERE token = ?\";\n  $stmt = $mysqli->prepare($query);\n  $stmt->bind_param('s', $token);\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  if ($result->num_rows === 0) {\n    http_response_code(400);\n    echo json_encode(['error' => 'Invalid token']);\n    exit;\n  }\n\n  // Get user ID\n  $user_id = $result->fetch_assoc()['user_id'];\n\n  // Update password (for demonstration purposes only)\n  $new_password = 'new-password';\n  $query = \"UPDATE users SET password_hash = ? WHERE id = ?\";\n  $stmt = $mysqli->prepare($query);\n  $stmt->bind_param('si', sha256($new_password), $user_id);\n  $stmt->execute();\n\n  echo json_encode(['message' => 'Password updated successfully']);\n}\n?>\n```"]}
