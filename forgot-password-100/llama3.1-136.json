{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how to create a \"Forgot Password\" function in PHP:\n\n**Database Schema**\n\nLet's assume we have a `users` table with the following columns:\n\n* `id`: primary key\n* `email`: unique email address\n* `password`: hashed password (we'll use bcrypt for security)\n\n**Code**\n\nCreate a new file called `forgot_password.php`:\n```php\n<?php\n\nrequire_once 'config/database.php'; // your database config file\n\n// validate request data\nif (!isset($_POST['email'])) {\n    header('Location: login.php');\n    exit;\n}\n\n$email = trim($_POST['email']);\n\n// check if email is valid and exists in database\n$stmt = $db->prepare(\"SELECT * FROM users WHERE email = ?\");\n$stmt->execute([$email]);\n$user = $stmt->fetch();\n\nif (!$user) {\n    echo 'Email not found';\n    exit;\n}\n\n// generate a password reset token\n$token = bin2hex(random_bytes(32));\n$token_expiration = time() + 3600; // expires in 1 hour\n\n// update user data with new token\n$stmt = $db->prepare(\"UPDATE users SET password_reset_token = ?, password_reset_expires = ? WHERE email = ?\");\n$stmt->execute([$token, $token_expiration, $email]);\n\n// send reset password email\nsend_password_reset_email($user['email'], $token);\n\nheader('Location: reset_password.php?token=' . $token);\nexit;\n\nfunction send_password_reset_email($to_email, $token) {\n    // set up mail headers\n    $headers = 'From: your-email@example.com' . \"\\r\\n\";\n    $headers .= 'Content-Type: text/html; charset=UTF-8' . \"\\r\\n\";\n\n    // generate email body\n    $body = '\n        <h1>Reset Your Password</h1>\n        <p>Please click on the link below to reset your password:</p>\n        <a href=\"reset_password.php?token=' . $token . '\">Reset Password</a>\n    ';\n\n    // send mail\n    mail($to_email, 'Password Reset', $body, $headers);\n}\n\n?>\n```\n**Explanation**\n\n1. The script checks if the `email` field is set in the request data.\n2. It queries the database to check if the provided email exists and is valid.\n3. If the email exists, it generates a password reset token using PHP's random bytes function.\n4. The script updates the user's data with the new token and expiration time (set to 1 hour).\n5. It sends an email with a link to the reset password page, including the token.\n\n**Reset Password Page**\n\nCreate a new file called `reset_password.php`:\n```php\n<?php\n\nrequire_once 'config/database.php'; // your database config file\n\nif (!isset($_GET['token'])) {\n    header('Location: login.php');\n    exit;\n}\n\n$token = $_GET['token'];\n\n// validate token and expiration time\n$stmt = $db->prepare(\"SELECT * FROM users WHERE password_reset_token = ? AND password_reset_expires > ?\");\n$stmt->execute([$token, time()]);\n$user = $stmt->fetch();\n\nif (!$user) {\n    echo 'Invalid or expired token';\n    exit;\n}\n\n// generate a new password\n$new_password = bin2hex(random_bytes(32));\n\n// update user data with new password\n$stmt = $db->prepare(\"UPDATE users SET password = ?, password_reset_token = NULL WHERE id = ?\");\n$stmt->execute([password_hash($new_password, PASSWORD_BCRYPT), $user['id']]);\n\necho 'Your password has been reset to: ' . $new_password;\nexit;\n\n?>\n```\n**Explanation**\n\n1. The script checks if the `token` parameter is set in the URL.\n2. It validates the token and expiration time by querying the database.\n3. If the token is valid, it generates a new random password using PHP's random bytes function.\n4. It updates the user's data with the new password (hashed using bcrypt).\n5. The script displays a message indicating that the password has been reset.\n\nNote: This is just an example code and you should adapt it to your specific needs and security requirements. Additionally, make sure to test this code thoroughly before deploying it in production.", "code_blocks": ["```php\n<?php\n\nrequire_once 'config/database.php'; // your database config file\n\n// validate request data\nif (!isset($_POST['email'])) {\n    header('Location: login.php');\n    exit;\n}\n\n$email = trim($_POST['email']);\n\n// check if email is valid and exists in database\n$stmt = $db->prepare(\"SELECT * FROM users WHERE email = ?\");\n$stmt->execute([$email]);\n$user = $stmt->fetch();\n\nif (!$user) {\n    echo 'Email not found';\n    exit;\n}\n\n// generate a password reset token\n$token = bin2hex(random_bytes(32));\n$token_expiration = time() + 3600; // expires in 1 hour\n\n// update user data with new token\n$stmt = $db->prepare(\"UPDATE users SET password_reset_token = ?, password_reset_expires = ? WHERE email = ?\");\n$stmt->execute([$token, $token_expiration, $email]);\n\n// send reset password email\nsend_password_reset_email($user['email'], $token);\n\nheader('Location: reset_password.php?token=' . $token);\nexit;\n\nfunction send_password_reset_email($to_email, $token) {\n    // set up mail headers\n    $headers = 'From: your-email@example.com' . \"\\r\\n\";\n    $headers .= 'Content-Type: text/html; charset=UTF-8' . \"\\r\\n\";\n\n    // generate email body\n    $body = '\n        <h1>Reset Your Password</h1>\n        <p>Please click on the link below to reset your password:</p>\n        <a href=\"reset_password.php?token=' . $token . '\">Reset Password</a>\n    ';\n\n    // send mail\n    mail($to_email, 'Password Reset', $body, $headers);\n}\n\n?>\n```", "```php\n<?php\n\nrequire_once 'config/database.php'; // your database config file\n\nif (!isset($_GET['token'])) {\n    header('Location: login.php');\n    exit;\n}\n\n$token = $_GET['token'];\n\n// validate token and expiration time\n$stmt = $db->prepare(\"SELECT * FROM users WHERE password_reset_token = ? AND password_reset_expires > ?\");\n$stmt->execute([$token, time()]);\n$user = $stmt->fetch();\n\nif (!$user) {\n    echo 'Invalid or expired token';\n    exit;\n}\n\n// generate a new password\n$new_password = bin2hex(random_bytes(32));\n\n// update user data with new password\n$stmt = $db->prepare(\"UPDATE users SET password = ?, password_reset_token = NULL WHERE id = ?\");\n$stmt->execute([password_hash($new_password, PASSWORD_BCRYPT), $user['id']]);\n\necho 'Your password has been reset to: ' . $new_password;\nexit;\n\n?>\n```"]}
