{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of how you can create a \"Forgot Password\" function using PHP:\n\n**Database Structure:**\n\nAssuming your database has the following structure:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) NOT NULL UNIQUE,\n  password VARCHAR(255) NOT NULL,\n  reset_token VARCHAR(255),\n  reset_expires TIMESTAMP\n);\n```\n**PHP Code:**\n```php\n<?php\n\n// Configuration\ndefine('RESET_TOKEN_EXPIRE', 60 * 15); // 15 minutes\ndefine('RESET_PASSWORD_LINK_LENGTH', 30);\n\n// Function to send password reset email\nfunction sendPasswordResetEmail($email, $resetToken) {\n  $subject = 'Reset Your Password';\n  $message = '\n    <p>Dear user,</p>\n    <p>You are receiving this email because you requested a password reset for your account.</p>\n    <p>To reset your password, click on the following link:</p>\n    <a href=\"' . site_url('reset-password/' . $resetToken) . '\">' . site_url('reset-password/' . $resetToken) . '</a>\n  ';\n  mail($email, $subject, $message);\n}\n\n// Function to generate reset token\nfunction generateResetToken() {\n  return bin2hex(random_bytes(16));\n}\n\n// Function to verify password reset link\nfunction verifyPasswordResetLink($token) {\n  global $wpdb;\n  $result = $wpdb->get_row(\"SELECT * FROM users WHERE reset_token = '$token'\");\n  if ($result && time() <= strtotime($result->reset_expires)) {\n    return true;\n  }\n  return false;\n}\n\n// Function to update user password\nfunction updatePassword($userId, $newPassword) {\n  global $wpdb;\n  $wpdb->update('users', array(\n    'password' => hash('sha256', $newPassword)\n  ), array(\n    'id' => $userId\n  ));\n}\n\n// Forgot Password function\nfunction forgotPassword($email) {\n  global $wpdb, $resetToken;\n  \n  // Check if user exists\n  $user = $wpdb->get_row(\"SELECT * FROM users WHERE email = '$email'\");\n  if (!$user) {\n    return array('success' => false, 'message' => 'User not found');\n  }\n  \n  // Generate reset token and set expiration time\n  $resetToken = generateResetToken();\n  $expiresAt = date('Y-m-d H:i:s', strtotime('+15 minutes'));\n  \n  // Update user with new reset token and expiration time\n  $wpdb->update('users', array(\n    'reset_token' => $resetToken,\n    'reset_expires' => $expiresAt\n  ), array(\n    'id' => $user->id\n  ));\n  \n  // Send password reset email\n  sendPasswordResetEmail($email, $resetToken);\n  \n  return array('success' => true, 'message' => 'A password reset link has been sent to your email');\n}\n\n?>\n```\n**Explanation:**\n\n1. The `sendPasswordResetEmail` function sends an email with a password reset link to the user's email address.\n2. The `generateResetToken` function generates a random 32-character string that will be used as the reset token.\n3. The `verifyPasswordResetLink` function checks if the provided reset token is valid and not expired.\n4. The `updatePassword` function updates the user's password in the database.\n5. The `forgotPassword` function takes an email address as input, generates a reset token, sends a password reset email to the user, and returns a success message.\n\n**Example Use Case:**\n\nTo use this code, you would call the `forgotPassword` function with the user's email address as an argument:\n```php\n$email = 'user@example.com';\n$result = forgotPassword($email);\necho json_encode($result); // Output: {\"success\":true,\"message\":\"A password reset link has been sent to your email\"}\n```\nThis would send a password reset email to the specified email address with a link that can be used to reset the user's password.\n\nNote that this is just an example code and you should modify it according to your specific needs. Additionally, you may want to add additional security measures such as rate limiting for password reset requests or using a more secure method of generating reset tokens.", "code_blocks": [null, "```php\n<?php\n\n// Configuration\ndefine('RESET_TOKEN_EXPIRE', 60 * 15); // 15 minutes\ndefine('RESET_PASSWORD_LINK_LENGTH', 30);\n\n// Function to send password reset email\nfunction sendPasswordResetEmail($email, $resetToken) {\n  $subject = 'Reset Your Password';\n  $message = '\n    <p>Dear user,</p>\n    <p>You are receiving this email because you requested a password reset for your account.</p>\n    <p>To reset your password, click on the following link:</p>\n    <a href=\"' . site_url('reset-password/' . $resetToken) . '\">' . site_url('reset-password/' . $resetToken) . '</a>\n  ';\n  mail($email, $subject, $message);\n}\n\n// Function to generate reset token\nfunction generateResetToken() {\n  return bin2hex(random_bytes(16));\n}\n\n// Function to verify password reset link\nfunction verifyPasswordResetLink($token) {\n  global $wpdb;\n  $result = $wpdb->get_row(\"SELECT * FROM users WHERE reset_token = '$token'\");\n  if ($result && time() <= strtotime($result->reset_expires)) {\n    return true;\n  }\n  return false;\n}\n\n// Function to update user password\nfunction updatePassword($userId, $newPassword) {\n  global $wpdb;\n  $wpdb->update('users', array(\n    'password' => hash('sha256', $newPassword)\n  ), array(\n    'id' => $userId\n  ));\n}\n\n// Forgot Password function\nfunction forgotPassword($email) {\n  global $wpdb, $resetToken;\n  \n  // Check if user exists\n  $user = $wpdb->get_row(\"SELECT * FROM users WHERE email = '$email'\");\n  if (!$user) {\n    return array('success' => false, 'message' => 'User not found');\n  }\n  \n  // Generate reset token and set expiration time\n  $resetToken = generateResetToken();\n  $expiresAt = date('Y-m-d H:i:s', strtotime('+15 minutes'));\n  \n  // Update user with new reset token and expiration time\n  $wpdb->update('users', array(\n    'reset_token' => $resetToken,\n    'reset_expires' => $expiresAt\n  ), array(\n    'id' => $user->id\n  ));\n  \n  // Send password reset email\n  sendPasswordResetEmail($email, $resetToken);\n  \n  return array('success' => true, 'message' => 'A password reset link has been sent to your email');\n}\n\n?>\n```", "```php\n$email = 'user@example.com';\n$result = forgotPassword($email);\necho json_encode($result); // Output: {\"success\":true,\"message\":\"A password reset link has been sent to your email\"}\n```"]}
