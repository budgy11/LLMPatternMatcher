{"prompt": "Create a forgot password function using php", "llm_output": "**Forgot Password Function in PHP**\n=====================================\n\nThis example demonstrates a basic forgot password function that sends an email to the user with a link to reset their password.\n\n**Database Requirements**\n\nFor this example, we assume you have a database table named `users` with columns for `id`, `email`, and `password`.\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) NOT NULL,\n  password VARCHAR(255) NOT NULL\n);\n```\n\n**PHP Code**\n\nCreate a new PHP file (e.g., `forgot_password.php`) with the following code:\n\n```php\n<?php\n\n// Configuration settings\ndefine('EMAIL_ADDRESS', 'your_email@example.com');\ndefine('PASSWORD_RESET_LINK_EXPIRE_TIME', 3600); // 1 hour in seconds\n\nrequire_once 'db_config.php'; // Load database connection configuration\n\nfunction sendEmail($to, $subject, $body) {\n    $headers = 'From: '.EMAIL_ADDRESS.'\\r\\n';\n    mail($to, $subject, $body, $headers);\n}\n\n// Handle form submission\nif (isset($_POST['submit'])) {\n\n    $email = $_POST['email'];\n\n    // Validate email address\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        die('Invalid email address.');\n    }\n\n    try {\n        // Retrieve user ID from database\n        $stmt = $pdo->prepare(\"SELECT id FROM users WHERE email = :email\");\n        $stmt->execute([':email' => $email]);\n        $user_id = $stmt->fetchColumn();\n\n        if ($user_id === false) {\n            die('User not found.');\n        }\n\n        // Generate password reset link\n        $token = bin2hex(random_bytes(32));\n        $password_reset_link = 'http://example.com/reset_password.php?email='.urlencode($email).'&token='.$token;\n\n        // Store password reset token in database\n        $stmt = $pdo->prepare(\"UPDATE users SET password_reset_token = :token, password_reset_expires_at = NOW() + INTERVAL :expires AT SECOND WHERE id = :id\");\n        $stmt->execute([':token' => $token, ':expires' => PASSWORD_RESET_LINK_EXPIRE_TIME, ':id' => $user_id]);\n\n        // Send email with password reset link\n        sendEmail($email, 'Reset Password', \"Click the following link to reset your password:\\n\\n\".$password_reset_link);\n\n    } catch (PDOException $e) {\n        die('Database error: '.$e->getMessage());\n    }\n}\n\n?>\n\n<form action=\"\" method=\"post\">\n    <input type=\"email\" name=\"email\" placeholder=\"Enter email address\" required>\n    <button type=\"submit\" name=\"submit\">Reset Password</button>\n</form>\n```\n\n**Explanation**\n\n1. The `sendEmail` function sends an email to the specified recipient using the PHP `mail()` function.\n2. When the form is submitted, we validate the user's email address and retrieve their ID from the database if it exists.\n3. We generate a random password reset token and store it in the database along with the expiration time (1 hour).\n4. We send an email to the user with a link to reset their password using the generated token.\n\n**Reset Password Page**\n\nCreate a new PHP file (`reset_password.php`) for handling the password reset process:\n\n```php\n<?php\n\nrequire_once 'db_config.php'; // Load database connection configuration\n\nfunction validateToken($token, $email) {\n    try {\n        // Retrieve user ID from database\n        $stmt = $pdo->prepare(\"SELECT id FROM users WHERE email = :email AND password_reset_token = :token\");\n        $stmt->execute([':email' => $email, ':token' => $token]);\n        return $stmt->fetchColumn();\n\n    } catch (PDOException $e) {\n        die('Database error: '.$e->getMessage());\n    }\n}\n\n// Handle form submission\nif (isset($_POST['submit'])) {\n\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n    $confirm_password = $_POST['confirm_password'];\n\n    // Validate email address and token\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        die('Invalid email address.');\n    }\n    $user_id = validateToken($_GET['token'], $email);\n\n    if ($user_id === false) {\n        die('Invalid password reset link.');\n    }\n\n    // Update user password in database\n    try {\n        $stmt = $pdo->prepare(\"UPDATE users SET password = :password, password_reset_token = NULL, password_reset_expires_at = NULL WHERE id = :id\");\n        $stmt->execute([':password' => password_hash($password, PASSWORD_DEFAULT), ':id' => $user_id]);\n\n        // Redirect to login page\n        header('Location: http://example.com/login.php');\n        exit;\n\n    } catch (PDOException $e) {\n        die('Database error: '.$e->getMessage());\n    }\n}\n\n?>\n\n<form action=\"\" method=\"post\">\n    <input type=\"password\" name=\"password\" placeholder=\"Enter new password\" required>\n    <input type=\"password\" name=\"confirm_password\" placeholder=\"Confirm new password\" required>\n    <button type=\"submit\" name=\"submit\">Reset Password</button>\n</form>\n```\n\n**Explanation**\n\n1. The `validateToken` function verifies the user's email address and password reset token from the database.\n2. When the form is submitted, we update the user's password in the database using a prepared statement.\n\nNote that this example uses a very basic implementation of password hashing (using `password_hash()`). In a real-world application, consider using a more secure library like PHP-Hashid or Argon2.", "code_blocks": [null, "```php\n<?php\n\n// Configuration settings\ndefine('EMAIL_ADDRESS', 'your_email@example.com');\ndefine('PASSWORD_RESET_LINK_EXPIRE_TIME', 3600); // 1 hour in seconds\n\nrequire_once 'db_config.php'; // Load database connection configuration\n\nfunction sendEmail($to, $subject, $body) {\n    $headers = 'From: '.EMAIL_ADDRESS.'\\r\\n';\n    mail($to, $subject, $body, $headers);\n}\n\n// Handle form submission\nif (isset($_POST['submit'])) {\n\n    $email = $_POST['email'];\n\n    // Validate email address\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        die('Invalid email address.');\n    }\n\n    try {\n        // Retrieve user ID from database\n        $stmt = $pdo->prepare(\"SELECT id FROM users WHERE email = :email\");\n        $stmt->execute([':email' => $email]);\n        $user_id = $stmt->fetchColumn();\n\n        if ($user_id === false) {\n            die('User not found.');\n        }\n\n        // Generate password reset link\n        $token = bin2hex(random_bytes(32));\n        $password_reset_link = 'http://example.com/reset_password.php?email='.urlencode($email).'&token='.$token;\n\n        // Store password reset token in database\n        $stmt = $pdo->prepare(\"UPDATE users SET password_reset_token = :token, password_reset_expires_at = NOW() + INTERVAL :expires AT SECOND WHERE id = :id\");\n        $stmt->execute([':token' => $token, ':expires' => PASSWORD_RESET_LINK_EXPIRE_TIME, ':id' => $user_id]);\n\n        // Send email with password reset link\n        sendEmail($email, 'Reset Password', \"Click the following link to reset your password:\\n\\n\".$password_reset_link);\n\n    } catch (PDOException $e) {\n        die('Database error: '.$e->getMessage());\n    }\n}\n\n?>\n\n<form action=\"\" method=\"post\">\n    <input type=\"email\" name=\"email\" placeholder=\"Enter email address\" required>\n    <button type=\"submit\" name=\"submit\">Reset Password</button>\n</form>\n```", "```php\n<?php\n\nrequire_once 'db_config.php'; // Load database connection configuration\n\nfunction validateToken($token, $email) {\n    try {\n        // Retrieve user ID from database\n        $stmt = $pdo->prepare(\"SELECT id FROM users WHERE email = :email AND password_reset_token = :token\");\n        $stmt->execute([':email' => $email, ':token' => $token]);\n        return $stmt->fetchColumn();\n\n    } catch (PDOException $e) {\n        die('Database error: '.$e->getMessage());\n    }\n}\n\n// Handle form submission\nif (isset($_POST['submit'])) {\n\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n    $confirm_password = $_POST['confirm_password'];\n\n    // Validate email address and token\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        die('Invalid email address.');\n    }\n    $user_id = validateToken($_GET['token'], $email);\n\n    if ($user_id === false) {\n        die('Invalid password reset link.');\n    }\n\n    // Update user password in database\n    try {\n        $stmt = $pdo->prepare(\"UPDATE users SET password = :password, password_reset_token = NULL, password_reset_expires_at = NULL WHERE id = :id\");\n        $stmt->execute([':password' => password_hash($password, PASSWORD_DEFAULT), ':id' => $user_id]);\n\n        // Redirect to login page\n        header('Location: http://example.com/login.php');\n        exit;\n\n    } catch (PDOException $e) {\n        die('Database error: '.$e->getMessage());\n    }\n}\n\n?>\n\n<form action=\"\" method=\"post\">\n    <input type=\"password\" name=\"password\" placeholder=\"Enter new password\" required>\n    <input type=\"password\" name=\"confirm_password\" placeholder=\"Confirm new password\" required>\n    <button type=\"submit\" name=\"submit\">Reset Password</button>\n</form>\n```"]}
