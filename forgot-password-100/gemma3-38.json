{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// IMPORTANT:  This is a simplified example for demonstration purposes only.\n// In a production environment, you MUST:\n// 1.  Store passwords securely (hashed and salted).\n// 2.  Implement robust security measures against brute-force attacks.\n// 3.  Use a proper email sending library to avoid spam and ensure delivery.\n// 4.  Never log or store email reset tokens.\n// 5.  Consider adding CAPTCHA or other verification steps.\n\n// Database connection details (Replace with your actual credentials)\n$db_host = 'localhost';\n$db_name = 'your_database_name';\n$db_user = 'your_database_user';\n$db_password = 'your_database_password';\n\n/**\n * Resets the user's password.\n *\n * @param string $email The user's email address.\n * @return bool True if the password reset was initiated successfully, false otherwise.\n */\nfunction forgot_password(string $email): bool\n{\n    // 1. Connect to the database\n    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n    // Check connection\n    if ($conn->connect_error) {\n        error_log(\"Failed to connect to database: \" . $conn->connect_error);  // Log the error\n        return false;\n    }\n\n    // 2. Check if the user exists\n    $sql = \"SELECT id, email FROM users WHERE email = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"s\", $email); // \"s\" indicates a string parameter\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows == 0) {\n        $stmt->close();\n        $conn->close();\n        return false; // User not found\n    }\n\n    $user = $result->fetch_assoc();\n    $userId = $user['id'];\n    $stmt->close();\n\n\n    // 3. Generate a unique reset token\n    $resetToken = bin2hex(random_bytes(32)); //  A strong, random token\n\n    // 4. Store the token in the database associated with the user\n    $sql = \"INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, NOW())\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"iis\", $userId, $resetToken, $resetToken); // i = integer, s = string\n    $stmt->execute();\n    $stmt->close();\n\n\n\n    // 5. Send the password reset email\n    $to = $email;\n    $subject = 'Password Reset';\n    $message = \"Click the following link to reset your password: \" .  $_SERVER['PHP_SELF'] . \"?reset_token=\" . $resetToken; //Use the current script name to generate a direct link.\n    $headers = \"From: your_email@example.com\"; // Replace with your email address\n\n    mail($to, $subject, $message, $headers);\n\n    // 6.  Close the connection\n    $conn->close();\n\n    return true;\n}\n\n\n// Example Usage (This would typically be in a form submission handler)\nif (isset($_GET['reset_token'])) {\n    $resetToken = $_GET['reset_token'];\n\n    if (forgot_password($resetToken)) {\n        echo \"Password reset email sent to \" . $resetToken . \".  Check your inbox.\";\n    } else {\n        echo \"Error: Could not reset password.\";\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n    <h1>Forgot Password</h1>\n    <form method=\"get\" action=\"your_script_name.php\"> <!-- Replace with the actual filename -->\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Security:**\n    * **`bin2hex(random_bytes(32))`**:  Uses `random_bytes` to generate cryptographically secure random tokens.  This is *far* superior to `rand()` or `mt_rand()` for generating tokens.  `bin2hex` converts the bytes into a hexadecimal string, which is more typical for tokens.\n    * **Prepared Statements:**  Critically uses prepared statements (`$conn->prepare()`) to prevent SQL injection vulnerabilities.  This is *essential* for any real-world application.  `$stmt->bind_param` is used to safely bind variables to the query.\n    * **No Password Storage:** This example does *not* store the actual password in the database. It only stores a token.  This is the correct approach.\n* **Error Handling:**\n    * **Database Connection Error:** Includes a basic check for database connection errors and logs them using `error_log()`.  You should use a more robust logging system in a production environment.\n    * **User Not Found:** Handles the case where the user doesn't exist.\n* **Token Expiration (Important for Security):**  This example includes a `NOW()` function to store the current timestamp as the expiration date for the token.  *Crucially*,  you MUST implement token expiration in a real application.  Without expiration, a malicious user could indefinitely reset your password.\n* **Clearer Code and Comments:**  Improved code formatting and comments to explain each step.\n* **Correct Link Generation:** Constructs the password reset link using `$_SERVER['PHP_SELF']` so the link is generated from the current script's location and includes the reset token.  This is generally more reliable than hardcoding a URL.\n* **No Reliance on External Libraries (for simplicity):** This example uses built-in PHP functions, making it easier to understand and deploy without external dependencies (though in a production environment, using a robust email sending library is highly recommended).\n* **Database Table Structure (Important - you need to create this):**\n\n```sql\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password VARCHAR(255) NOT NULL  --  Store a HASHED password, NEVER the plain text password\n);\n\nCREATE TABLE password_resets (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT NOT NULL,\n    token VARCHAR(255) NOT NULL,\n    expires_at DATETIME NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n* **Hashing Passwords:** You *must* hash passwords before storing them in the database. Use a strong hashing algorithm like bcrypt or Argon2.  The example above only illustrates the password reset process, *not* the password storage.\n\n**Important Considerations for Production:**\n\n* **Email Sending:** Use a reliable email sending library or service (e.g., PHPMailer, SwiftMailer, SendGrid, Mailgun) instead of `mail()`.  `mail()` is notoriously unreliable across different servers and operating systems.\n* **Rate Limiting:**  Implement rate limiting to prevent brute-force attacks on the password reset endpoint.\n* **CAPTCHA:**  Add a CAPTCHA or other verification step to the form to prevent automated submissions.\n* **Logging:**  Log all password reset attempts (successful and unsuccessful) for auditing purposes.\n* **Token Expiration:**  Set a reasonable token expiration time (e.g., 30 minutes to 1 hour).\n* **Security Audits:**  Regularly conduct security audits of your code and infrastructure.\n* **HTTPS:**  Always use HTTPS to protect user data in transit.\n* **Password Complexity Rules:** Enforce password complexity rules (minimum length, character types, etc.).\n\nThis revised response provides a much more secure and robust starting point for implementing a forgot password functionality in PHP.  Remember to adapt the code to your specific database schema and security requirements.  **Prioritize security and always follow best practices.**  Also, never store actual passwords; only store the token and a mechanism to verify the token.  Use a secure hashing algorithm for password storage.\n", "code_blocks": ["```php\n<?php\n\n// IMPORTANT:  This is a simplified example for demonstration purposes only.\n// In a production environment, you MUST:\n// 1.  Store passwords securely (hashed and salted).\n// 2.  Implement robust security measures against brute-force attacks.\n// 3.  Use a proper email sending library to avoid spam and ensure delivery.\n// 4.  Never log or store email reset tokens.\n// 5.  Consider adding CAPTCHA or other verification steps.\n\n// Database connection details (Replace with your actual credentials)\n$db_host = 'localhost';\n$db_name = 'your_database_name';\n$db_user = 'your_database_user';\n$db_password = 'your_database_password';\n\n/**\n * Resets the user's password.\n *\n * @param string $email The user's email address.\n * @return bool True if the password reset was initiated successfully, false otherwise.\n */\nfunction forgot_password(string $email): bool\n{\n    // 1. Connect to the database\n    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n    // Check connection\n    if ($conn->connect_error) {\n        error_log(\"Failed to connect to database: \" . $conn->connect_error);  // Log the error\n        return false;\n    }\n\n    // 2. Check if the user exists\n    $sql = \"SELECT id, email FROM users WHERE email = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"s\", $email); // \"s\" indicates a string parameter\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows == 0) {\n        $stmt->close();\n        $conn->close();\n        return false; // User not found\n    }\n\n    $user = $result->fetch_assoc();\n    $userId = $user['id'];\n    $stmt->close();\n\n\n    // 3. Generate a unique reset token\n    $resetToken = bin2hex(random_bytes(32)); //  A strong, random token\n\n    // 4. Store the token in the database associated with the user\n    $sql = \"INSERT INTO password_resets (user_id, token, expires_at) VALUES (?, ?, NOW())\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"iis\", $userId, $resetToken, $resetToken); // i = integer, s = string\n    $stmt->execute();\n    $stmt->close();\n\n\n\n    // 5. Send the password reset email\n    $to = $email;\n    $subject = 'Password Reset';\n    $message = \"Click the following link to reset your password: \" .  $_SERVER['PHP_SELF'] . \"?reset_token=\" . $resetToken; //Use the current script name to generate a direct link.\n    $headers = \"From: your_email@example.com\"; // Replace with your email address\n\n    mail($to, $subject, $message, $headers);\n\n    // 6.  Close the connection\n    $conn->close();\n\n    return true;\n}\n\n\n// Example Usage (This would typically be in a form submission handler)\nif (isset($_GET['reset_token'])) {\n    $resetToken = $_GET['reset_token'];\n\n    if (forgot_password($resetToken)) {\n        echo \"Password reset email sent to \" . $resetToken . \".  Check your inbox.\";\n    } else {\n        echo \"Error: Could not reset password.\";\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n    <h1>Forgot Password</h1>\n    <form method=\"get\" action=\"your_script_name.php\"> <!-- Replace with the actual filename -->\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n</body>\n</html>\n```", null]}
