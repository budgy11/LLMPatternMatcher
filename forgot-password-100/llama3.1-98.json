{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of a \"Forgot Password\" function in PHP that uses email verification to reset the user's password:\n\n**Note:** This example assumes you have already set up a database with a table for users (e.g. `users`) and are using a framework like PDO or MySQLi for database interactions.\n\n**Database Schema**\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL,\n  reset_token VARCHAR(255),\n  reset_expires TIMESTAMP DEFAULT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n);\n```\n**PHP Code**\n\nCreate a file called `forgot_password.php` with the following code:\n```php\n<?php\n\n// Include your database connection script or use PDO\nrequire_once 'db.php';\n\nif (isset($_POST['submit'])) {\n    // Get the user's email address from the form submission\n    $email = $_POST['email'];\n\n    // Check if the email address exists in the database\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE email = :email\");\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    // If the email is found, generate a reset token and update the user's record\n    if ($user = $stmt->fetch()) {\n        // Generate a random reset token (e.g. a UUID)\n        $reset_token = bin2hex(random_bytes(32));\n\n        // Update the user's record with the new reset token\n        $update_stmt = $pdo->prepare(\"UPDATE users SET reset_token = :token WHERE id = :id\");\n        $update_stmt->bindParam(':token', $reset_token);\n        $update_stmt->bindParam(':id', $user['id']);\n        $update_stmt->execute();\n\n        // Send an email to the user with a password reset link\n        $subject = \"Reset Password\";\n        $body = \"Click here to reset your password: <a href='https://yourwebsite.com/reset_password.php?token=$reset_token'>Reset Password</a>\";\n        mail($email, $subject, $body);\n\n        echo \"Password reset email sent to $email. Please check your inbox and follow the link to reset your password.\";\n    } else {\n        echo \"Email address not found.\";\n    }\n}\n\n// Display the forgot password form\n?>\n<form method=\"post\" action=\"\">\n  <label for=\"email\">Email Address:</label>\n  <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n  <button type=\"submit\" name=\"submit\">Send Password Reset Email</button>\n</form>\n\n<?php\n```\n**Reset Password Code**\n\nCreate a new file called `reset_password.php` with the following code:\n```php\n<?php\n\n// Include your database connection script or use PDO\nrequire_once 'db.php';\n\nif (isset($_GET['token'])) {\n    // Get the reset token from the URL parameter\n    $reset_token = $_GET['token'];\n\n    // Check if the reset token is valid and not expired\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE reset_token = :token AND reset_expires > NOW()\");\n    $stmt->bindParam(':token', $reset_token);\n    $stmt->execute();\n\n    // If the token is valid, display a password change form\n    if ($user = $stmt->fetch()) {\n        ?>\n        <form method=\"post\" action=\"\">\n          <label for=\"password\">New Password:</label>\n          <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n          <label for=\"confirm_password\">Confirm New Password:</label>\n          <input type=\"password\" id=\"confirm_password\" name=\"confirm_password\"><br><br>\n          <button type=\"submit\" name=\"submit\">Change Password</button>\n        </form>\n\n        <?php\n    } else {\n        echo \"Invalid or expired reset token.\";\n    }\n}\n\n// Update the user's password if the form is submitted\nif (isset($_POST['submit'])) {\n    // Get the new password from the form submission\n    $new_password = $_POST['password'];\n\n    // Check if the passwords match\n    if ($_POST['password'] == $_POST['confirm_password']) {\n        // Update the user's record with the new password\n        $update_stmt = $pdo->prepare(\"UPDATE users SET password_hash = :hash WHERE id = :id\");\n        $update_stmt->bindParam(':hash', password_hash($new_password, PASSWORD_DEFAULT));\n        $update_stmt->bindParam(':id', $user['id']);\n        $update_stmt->execute();\n\n        echo \"Password changed successfully!\";\n    } else {\n        echo \"Passwords do not match.\";\n    }\n}\n\n// Display the reset password form\n?>\n```\n**How it works**\n\n1. The user submits their email address to the `forgot_password.php` script.\n2. If the email address is found in the database, a random reset token is generated and sent to the user's email address via an email with a password reset link.\n3. When the user clicks on the password reset link, they are taken to the `reset_password.php` script.\n4. The `reset_password.php` script checks if the reset token is valid and not expired.\n5. If the token is valid, it displays a password change form to the user.\n6. When the user submits their new password, the script updates the user's record with the new password.\n\nNote that this example uses email verification for security purposes. You can modify the code to use other methods (e.g. SMS verification) if you prefer.", "code_blocks": [null, "```php\n<?php\n\n// Include your database connection script or use PDO\nrequire_once 'db.php';\n\nif (isset($_POST['submit'])) {\n    // Get the user's email address from the form submission\n    $email = $_POST['email'];\n\n    // Check if the email address exists in the database\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE email = :email\");\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    // If the email is found, generate a reset token and update the user's record\n    if ($user = $stmt->fetch()) {\n        // Generate a random reset token (e.g. a UUID)\n        $reset_token = bin2hex(random_bytes(32));\n\n        // Update the user's record with the new reset token\n        $update_stmt = $pdo->prepare(\"UPDATE users SET reset_token = :token WHERE id = :id\");\n        $update_stmt->bindParam(':token', $reset_token);\n        $update_stmt->bindParam(':id', $user['id']);\n        $update_stmt->execute();\n\n        // Send an email to the user with a password reset link\n        $subject = \"Reset Password\";\n        $body = \"Click here to reset your password: <a href='https://yourwebsite.com/reset_password.php?token=$reset_token'>Reset Password</a>\";\n        mail($email, $subject, $body);\n\n        echo \"Password reset email sent to $email. Please check your inbox and follow the link to reset your password.\";\n    } else {\n        echo \"Email address not found.\";\n    }\n}\n\n// Display the forgot password form\n?>\n<form method=\"post\" action=\"\">\n  <label for=\"email\">Email Address:</label>\n  <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n  <button type=\"submit\" name=\"submit\">Send Password Reset Email</button>\n</form>\n\n<?php\n```", "```php\n<?php\n\n// Include your database connection script or use PDO\nrequire_once 'db.php';\n\nif (isset($_GET['token'])) {\n    // Get the reset token from the URL parameter\n    $reset_token = $_GET['token'];\n\n    // Check if the reset token is valid and not expired\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE reset_token = :token AND reset_expires > NOW()\");\n    $stmt->bindParam(':token', $reset_token);\n    $stmt->execute();\n\n    // If the token is valid, display a password change form\n    if ($user = $stmt->fetch()) {\n        ?>\n        <form method=\"post\" action=\"\">\n          <label for=\"password\">New Password:</label>\n          <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n          <label for=\"confirm_password\">Confirm New Password:</label>\n          <input type=\"password\" id=\"confirm_password\" name=\"confirm_password\"><br><br>\n          <button type=\"submit\" name=\"submit\">Change Password</button>\n        </form>\n\n        <?php\n    } else {\n        echo \"Invalid or expired reset token.\";\n    }\n}\n\n// Update the user's password if the form is submitted\nif (isset($_POST['submit'])) {\n    // Get the new password from the form submission\n    $new_password = $_POST['password'];\n\n    // Check if the passwords match\n    if ($_POST['password'] == $_POST['confirm_password']) {\n        // Update the user's record with the new password\n        $update_stmt = $pdo->prepare(\"UPDATE users SET password_hash = :hash WHERE id = :id\");\n        $update_stmt->bindParam(':hash', password_hash($new_password, PASSWORD_DEFAULT));\n        $update_stmt->bindParam(':id', $user['id']);\n        $update_stmt->execute();\n\n        echo \"Password changed successfully!\";\n    } else {\n        echo \"Passwords do not match.\";\n    }\n}\n\n// Display the reset password form\n?>\n```"]}
