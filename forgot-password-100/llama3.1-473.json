{"prompt": "Create a forgot password function using php", "llm_output": "Creating a \"Forgot Password\" functionality typically involves sending a reset password link to the user's email address associated with their account. This process consists of two main steps: \n\n1. **Sending an Email**: When the user clicks on the \"Forgot Password\" button, your system generates a random reset code (token) and sends it via email to the user's registered email.\n\n2. **Resetting the Password**: The user uses the link in the email to access a password reset page where they can enter a new password twice for confirmation.\n\nBelow is a simplified example using PHP, with both steps implemented:\n\n### Database Setup\n\nFirst, ensure your database has a table named `users` or something similar with columns for `email`, `password`, and ideally a `reset_token` column to store temporary reset tokens.\n\n```sql\nCREATE TABLE users (\n  id INT AUTO_INCREMENT,\n  email VARCHAR(255) UNIQUE NOT NULL,\n  password VARCHAR(255),\n  reset_token VARCHAR(255)\n);\n```\n\n### PHP Script\n\nHere's how you might implement the functionality with PHP. This script assumes you are using MySQL for database operations.\n\n```php\n<?php\n// Configuration Settings\nrequire_once 'config.php';\n\nfunction sendResetEmail($email, $token) {\n    // Email headers and message setup\n    $to = $email;\n    $subject = \"Reset Password\";\n    $message = \"\n    Click on the link below to reset your password:\n    <a href='http://yourdomain.com/reset-password.php?resetToken=$token'>$token</a>\n    \";\n    \n    // Mail configuration\n    $headers = 'From: no-reply@yourdomain.com' . \"\\r\\n\" .\n        'Content-Type: text/html; charset=UTF-8' . \"\\r\\n\" .\n        'X-Mailer: PHP/' . phpversion() . \"\\r\\n\";\n\n    mail($to, $subject, $message, $headers);\n}\n\nfunction resetPassword($token) {\n    if (!empty($_POST['new_password']) && !empty($_POST['confirm_password'])) {\n        if ($_POST['new_password'] == $_POST['confirm_password']) {\n            // Reset logic here\n            try {\n                $conn = new PDO(\"mysql:host=$db_host;dbname=$db_name\", $db_username, $db_password);\n                $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n                $sql = \"UPDATE users SET password=:password WHERE reset_token=:token\";\n                $stmt = $conn->prepare($sql);\n                $stmt->bindParam(':password', hash('sha256', $_POST['new_password']));\n                $stmt->bindParam(':token', $token);\n                if ($stmt->execute()) {\n                    echo 'Password changed successfully.';\n                } else {\n                    throw new Exception(\"Error changing password\");\n                }\n            } catch (PDOException $e) {\n                // Handle database error\n            }\n\n        } else {\n            echo \"Passwords don't match!\";\n        }\n    }\n}\n\n// Reset Token generation and Email sending\nif (isset($_POST['submit'])) {\n    if (!empty($_POST['email'])) {\n        try {\n            $conn = new PDO(\"mysql:host=$db_host;dbname=$db_name\", $db_username, $db_password);\n            $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n            $sql = \"SELECT * FROM users WHERE email=:email\";\n            $stmt = $conn->prepare($sql);\n            $stmt->bindParam(':email', $_POST['email']);\n            if ($stmt->execute()) {\n                $result = $stmt->fetchAll();\n                // If user exists, generate a random reset token\n                if (count($result) > 0) {\n                    $token = uniqid('', true); // Generate unique ID\n                    $sql = \"UPDATE users SET reset_token=:token WHERE email=:email\";\n                    $stmt = $conn->prepare($sql);\n                    $stmt->bindParam(':token', $token);\n                    $stmt->bindParam(':email', $_POST['email']);\n                    if ($stmt->execute()) {\n                        sendResetEmail($_POST['email'], $token); // Send the reset token via email\n                        echo 'A password reset link has been sent to your email.';\n                    } else {\n                        throw new Exception(\"Error sending reset email\");\n                    }\n                } else {\n                    echo \"User not found!\";\n                }\n            } else {\n                throw new Exception(\"Error retrieving user data\");\n            }\n\n        } catch (PDOException $e) {\n            // Handle database error\n        }\n    } else {\n        echo \"Please enter your email.\";\n    }\n}\n\n// Password reset page\nif (isset($_GET['resetToken'])) {\n    $token = $_GET['resetToken'];\n    if (!empty($token)) {\n        try {\n            $conn = new PDO(\"mysql:host=$db_host;dbname=$db_name\", $db_username, $db_password);\n            $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n            $sql = \"SELECT * FROM users WHERE reset_token=:token\";\n            $stmt = $conn->prepare($sql);\n            $stmt->bindParam(':token', $token);\n            if ($stmt->execute()) {\n                $result = $stmt->fetchAll();\n                // If a valid token is found, allow user to set new password\n                if (count($result) > 0) {\n                    resetPassword($token); // Handle form submission here\n                } else {\n                    echo \"Invalid or expired token!\";\n                }\n            } else {\n                throw new Exception(\"Error retrieving user data\");\n            }\n\n        } catch (PDOException $e) {\n            // Handle database error\n        }\n    } else {\n        header('Location: index.php');\n        exit;\n    }\n}\n?>\n```\n\nPlease note that this example is a simplified representation and you should adapt it to your actual application. Also, remember to store the reset token securely to prevent unauthorized access.\n\nTo use this script:\n\n1. Create a form for users to input their email.\n2. Handle the form submission (usually with a POST request) in the script above.\n3. When sending the password reset link via email, make sure to replace `http://yourdomain.com` with your actual website URL or domain name.\n\nThis example covers basic functionality but does not include detailed error handling and security measures you should implement in a production environment, such as hashing passwords properly, validating user input, and protecting against SQL injection attacks.", "code_blocks": [null, "```php\n<?php\n// Configuration Settings\nrequire_once 'config.php';\n\nfunction sendResetEmail($email, $token) {\n    // Email headers and message setup\n    $to = $email;\n    $subject = \"Reset Password\";\n    $message = \"\n    Click on the link below to reset your password:\n    <a href='http://yourdomain.com/reset-password.php?resetToken=$token'>$token</a>\n    \";\n    \n    // Mail configuration\n    $headers = 'From: no-reply@yourdomain.com' . \"\\r\\n\" .\n        'Content-Type: text/html; charset=UTF-8' . \"\\r\\n\" .\n        'X-Mailer: PHP/' . phpversion() . \"\\r\\n\";\n\n    mail($to, $subject, $message, $headers);\n}\n\nfunction resetPassword($token) {\n    if (!empty($_POST['new_password']) && !empty($_POST['confirm_password'])) {\n        if ($_POST['new_password'] == $_POST['confirm_password']) {\n            // Reset logic here\n            try {\n                $conn = new PDO(\"mysql:host=$db_host;dbname=$db_name\", $db_username, $db_password);\n                $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n                $sql = \"UPDATE users SET password=:password WHERE reset_token=:token\";\n                $stmt = $conn->prepare($sql);\n                $stmt->bindParam(':password', hash('sha256', $_POST['new_password']));\n                $stmt->bindParam(':token', $token);\n                if ($stmt->execute()) {\n                    echo 'Password changed successfully.';\n                } else {\n                    throw new Exception(\"Error changing password\");\n                }\n            } catch (PDOException $e) {\n                // Handle database error\n            }\n\n        } else {\n            echo \"Passwords don't match!\";\n        }\n    }\n}\n\n// Reset Token generation and Email sending\nif (isset($_POST['submit'])) {\n    if (!empty($_POST['email'])) {\n        try {\n            $conn = new PDO(\"mysql:host=$db_host;dbname=$db_name\", $db_username, $db_password);\n            $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n            $sql = \"SELECT * FROM users WHERE email=:email\";\n            $stmt = $conn->prepare($sql);\n            $stmt->bindParam(':email', $_POST['email']);\n            if ($stmt->execute()) {\n                $result = $stmt->fetchAll();\n                // If user exists, generate a random reset token\n                if (count($result) > 0) {\n                    $token = uniqid('', true); // Generate unique ID\n                    $sql = \"UPDATE users SET reset_token=:token WHERE email=:email\";\n                    $stmt = $conn->prepare($sql);\n                    $stmt->bindParam(':token', $token);\n                    $stmt->bindParam(':email', $_POST['email']);\n                    if ($stmt->execute()) {\n                        sendResetEmail($_POST['email'], $token); // Send the reset token via email\n                        echo 'A password reset link has been sent to your email.';\n                    } else {\n                        throw new Exception(\"Error sending reset email\");\n                    }\n                } else {\n                    echo \"User not found!\";\n                }\n            } else {\n                throw new Exception(\"Error retrieving user data\");\n            }\n\n        } catch (PDOException $e) {\n            // Handle database error\n        }\n    } else {\n        echo \"Please enter your email.\";\n    }\n}\n\n// Password reset page\nif (isset($_GET['resetToken'])) {\n    $token = $_GET['resetToken'];\n    if (!empty($token)) {\n        try {\n            $conn = new PDO(\"mysql:host=$db_host;dbname=$db_name\", $db_username, $db_password);\n            $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n            $sql = \"SELECT * FROM users WHERE reset_token=:token\";\n            $stmt = $conn->prepare($sql);\n            $stmt->bindParam(':token', $token);\n            if ($stmt->execute()) {\n                $result = $stmt->fetchAll();\n                // If a valid token is found, allow user to set new password\n                if (count($result) > 0) {\n                    resetPassword($token); // Handle form submission here\n                } else {\n                    echo \"Invalid or expired token!\";\n                }\n            } else {\n                throw new Exception(\"Error retrieving user data\");\n            }\n\n        } catch (PDOException $e) {\n            // Handle database error\n        }\n    } else {\n        header('Location: index.php');\n        exit;\n    }\n}\n?>\n```"]}
