{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how to create a \"Forgot Password\" functionality in PHP:\n\n**Database Table:**\n\nWe'll assume that you have a database table `users` with the following structure:\n```php\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  email VARCHAR(255) NOT NULL,\n  password_hash CHAR(60) NOT NULL,\n  reset_token VARCHAR(100) NOT NULL,\n  reset_expires TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n);\n```\n**Forgot Password Form:**\n\nCreate an HTML form to collect the user's email address:\n```html\n<form action=\"forgot_password.php\" method=\"post\">\n  <label for=\"email\">Email:</label>\n  <input type=\"text\" id=\"email\" name=\"email\"><br><br>\n  <input type of=\"submit\" value=\"Submit\">\n</form>\n```\n**Forgot Password PHP Script:**\n\nCreate a PHP script `forgot_password.php` to handle the form submission:\n```php\n<?php\n\n// Configuration\n$secret_key = 'your-secret-key';\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $email = $_POST['email'];\n\n  // Validate email address\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo \"Invalid email address.\";\n    exit;\n  }\n\n  // Query database for user with matching email address\n  $db = new mysqli('your-host', 'your-username', 'your-password', 'your-database');\n  if ($db->connect_error) {\n    die(\"Connection failed: \" . $db->connect_error);\n  }\n  $query = \"SELECT * FROM users WHERE email = '$email'\";\n  $result = $db->query($query);\n\n  // Check if user exists\n  if ($result->num_rows > 0) {\n    $user_data = $result->fetch_assoc();\n\n    // Generate a random reset token\n    $reset_token = bin2hex(random_bytes(16));\n\n    // Update database with new reset token\n    $update_query = \"UPDATE users SET reset_token = '$reset_token' WHERE email = '$email'\";\n    $db->query($update_query);\n\n    // Send password reset email (optional)\n    $to_email = $user_data['email'];\n    $subject = 'Password Reset';\n    $message = \"Click here to reset your password: <a href='\" . $_SERVER['HTTP_HOST'] . \"/reset_password.php?token=\" . $reset_token . \"'>Reset Password</a>\";\n    mail($to_email, $subject, $message);\n\n    echo \"A password reset email has been sent to your email address.\";\n  } else {\n    echo \"Email address not found.\";\n  }\n\n  // Close database connection\n  $db->close();\n}\n\n?>\n```\n**Password Reset Form:**\n\nCreate an HTML form to collect the user's new password and confirmation:\n```html\n<form action=\"reset_password.php\" method=\"post\">\n  <label for=\"new_password\">New Password:</label>\n  <input type=\"password\" id=\"new_password\" name=\"new_password\"><br><br>\n  <label for=\"confirm_password\">Confirm New Password:</label>\n  <input type=\"password\" id=\"confirm_password\" name=\"confirm_password\"><br><br>\n  <input type of=\"submit\" value=\"Submit\">\n</form>\n```\n**Password Reset PHP Script:**\n\nCreate a PHP script `reset_password.php` to handle the form submission:\n```php\n<?php\n\n// Configuration\n$secret_key = 'your-secret-key';\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $token = $_GET['token'];\n  $new_password = $_POST['new_password'];\n  $confirm_password = $_POST['confirm_password'];\n\n  // Validate password and confirmation\n  if ($new_password !== $confirm_password) {\n    echo \"Passwords do not match.\";\n    exit;\n  }\n\n  // Query database for user with matching reset token\n  $db = new mysqli('your-host', 'your-username', 'your-password', 'your-database');\n  if ($db->connect_error) {\n    die(\"Connection failed: \" . $db->connect_error);\n  }\n  $query = \"SELECT * FROM users WHERE reset_token = '$token'\";\n  $result = $db->query($query);\n\n  // Check if user exists\n  if ($result->num_rows > 0) {\n    $user_data = $result->fetch_assoc();\n\n    // Update database with new password hash\n    $update_query = \"UPDATE users SET password_hash = '\" . password_hash($new_password, PASSWORD_DEFAULT) . \"' WHERE email = '$user_data[email]'\";\n    $db->query($update_query);\n\n    // Delete reset token from database\n    $delete_query = \"DELETE FROM users WHERE reset_token = '$token'\";\n    $db->query($delete_query);\n\n    echo \"Password has been successfully updated.\";\n  } else {\n    echo \"Invalid reset token.\";\n  }\n\n  // Close database connection\n  $db->close();\n}\n\n?>\n```\nNote that this is a basic example and you should consider implementing additional security measures, such as:\n\n* Using a secure password hashing algorithm (e.g. Argon2)\n* Implementing rate limiting for password reset requests\n* Storing passwords securely using a library like BCrypt or PBKDF2\n* Validating user input on the client-side using JavaScript\n\nAlso, make sure to replace `your-host`, `your-username`, `your-password`, and `your-database` with your actual database credentials.", "code_blocks": ["```php\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  email VARCHAR(255) NOT NULL,\n  password_hash CHAR(60) NOT NULL,\n  reset_token VARCHAR(100) NOT NULL,\n  reset_expires TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n);\n```", null, "```php\n<?php\n\n// Configuration\n$secret_key = 'your-secret-key';\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $email = $_POST['email'];\n\n  // Validate email address\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo \"Invalid email address.\";\n    exit;\n  }\n\n  // Query database for user with matching email address\n  $db = new mysqli('your-host', 'your-username', 'your-password', 'your-database');\n  if ($db->connect_error) {\n    die(\"Connection failed: \" . $db->connect_error);\n  }\n  $query = \"SELECT * FROM users WHERE email = '$email'\";\n  $result = $db->query($query);\n\n  // Check if user exists\n  if ($result->num_rows > 0) {\n    $user_data = $result->fetch_assoc();\n\n    // Generate a random reset token\n    $reset_token = bin2hex(random_bytes(16));\n\n    // Update database with new reset token\n    $update_query = \"UPDATE users SET reset_token = '$reset_token' WHERE email = '$email'\";\n    $db->query($update_query);\n\n    // Send password reset email (optional)\n    $to_email = $user_data['email'];\n    $subject = 'Password Reset';\n    $message = \"Click here to reset your password: <a href='\" . $_SERVER['HTTP_HOST'] . \"/reset_password.php?token=\" . $reset_token . \"'>Reset Password</a>\";\n    mail($to_email, $subject, $message);\n\n    echo \"A password reset email has been sent to your email address.\";\n  } else {\n    echo \"Email address not found.\";\n  }\n\n  // Close database connection\n  $db->close();\n}\n\n?>\n```", null, "```php\n<?php\n\n// Configuration\n$secret_key = 'your-secret-key';\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $token = $_GET['token'];\n  $new_password = $_POST['new_password'];\n  $confirm_password = $_POST['confirm_password'];\n\n  // Validate password and confirmation\n  if ($new_password !== $confirm_password) {\n    echo \"Passwords do not match.\";\n    exit;\n  }\n\n  // Query database for user with matching reset token\n  $db = new mysqli('your-host', 'your-username', 'your-password', 'your-database');\n  if ($db->connect_error) {\n    die(\"Connection failed: \" . $db->connect_error);\n  }\n  $query = \"SELECT * FROM users WHERE reset_token = '$token'\";\n  $result = $db->query($query);\n\n  // Check if user exists\n  if ($result->num_rows > 0) {\n    $user_data = $result->fetch_assoc();\n\n    // Update database with new password hash\n    $update_query = \"UPDATE users SET password_hash = '\" . password_hash($new_password, PASSWORD_DEFAULT) . \"' WHERE email = '$user_data[email]'\";\n    $db->query($update_query);\n\n    // Delete reset token from database\n    $delete_query = \"DELETE FROM users WHERE reset_token = '$token'\";\n    $db->query($delete_query);\n\n    echo \"Password has been successfully updated.\";\n  } else {\n    echo \"Invalid reset token.\";\n  }\n\n  // Close database connection\n  $db->close();\n}\n\n?>\n```"]}
