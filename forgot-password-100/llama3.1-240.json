{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of a forgotten password function in PHP, along with the necessary SQL queries to store and retrieve user credentials:\n### Step 1: Database Setup\n\nFirst, let's create a table to store user credentials. We'll use MySQL as our database management system.\n\n```sql\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    password_hash VARCHAR(255) NOT NULL\n);\n```\n\n### Step 2: PHP Code\n\nNext, let's create a PHP function to handle the forgotten password process. This code will be stored in a file called `password_reset.php`.\n\n```php\n<?php\n\n// Configuration\nrequire 'config.php';\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Get user input\n    $email = trim(filter_var($_POST['email'], FILTER_SANITIZE_EMAIL));\n\n    // Query database to retrieve user data\n    $query = \"SELECT * FROM users WHERE email = :email\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    // Check if user exists\n    if ($stmt->rowCount() === 1) {\n        // Get user data\n        $user_data = $stmt->fetch();\n\n        // Generate reset token and hash it\n        $reset_token = bin2hex(random_bytes(32));\n        $hashed_reset_token = password_hash($reset_token, PASSWORD_DEFAULT);\n\n        // Update user data with reset token\n        $query = \"UPDATE users SET reset_token = :hashed_reset_token WHERE id = :id\";\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':id', $user_data['id']);\n        $stmt->bindParam(':hashed_reset_token', $hashed_reset_token);\n        $stmt->execute();\n\n        // Send password reset email\n        send_password_reset_email($email, $reset_token);\n\n        echo \"Password reset link sent to your email.\";\n    } else {\n        echo \"No account found with that email.\";\n    }\n}\n\n// Function to send password reset email\nfunction send_password_reset_email($email, $reset_token) {\n    // Email configuration (change these values)\n    $from = 'your-email@gmail.com';\n    $to = $email;\n    $subject = 'Password Reset Request';\n\n    // Create email body\n    $message = \"\n        <p>Dear User,</p>\n        <p>You are receiving this email because we received a password reset request for your account.</p>\n        <p>To reset your password, please click on the following link:</p>\n        <p><a href='https://your-website.com/reset-password?token=$reset_token'>$reset_token</a></p>\n    \";\n\n    // Send email\n    $headers = 'From: ' . $from;\n    mail($to, $subject, $message, $headers);\n\n    echo \"Email sent.\";\n}\n\n?>\n```\n\n### Step 3: Password Reset Email\n\nNow that we have the forgotten password function set up, let's create a page to handle the password reset process. We'll call this file `reset-password.php`.\n\n```php\n<?php\n\n// Configuration\nrequire 'config.php';\n\n// Check if token is valid\nif (isset($_GET['token'])) {\n    // Get user input\n    $email = trim(filter_var($_POST['email'], FILTER_SANITIZE_EMAIL));\n    $new_password = trim(filter_var($_POST['new_password'], FILTER_SANITIZE_STRING));\n\n    // Query database to retrieve user data\n    $query = \"SELECT * FROM users WHERE email = :email AND reset_token = :reset_token\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':reset_token', $_GET['token']);\n    $stmt->execute();\n\n    // Check if user exists\n    if ($stmt->rowCount() === 1) {\n        // Get user data\n        $user_data = $stmt->fetch();\n\n        // Update password and reset token\n        $query = \"UPDATE users SET password_hash = :password_hash, reset_token = NULL WHERE id = :id\";\n        $stmt = $pdo->prepare($query);\n        $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);\n        $stmt->bindParam(':id', $user_data['id']);\n        $stmt->bindParam(':password_hash', $hashed_password);\n        $stmt->execute();\n\n        echo \"Password updated successfully.\";\n    } else {\n        echo \"Invalid token or email.\";\n    }\n}\n\n// Display password reset form\n?>\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n    <input type=\"email\" name=\"email\" placeholder=\"Email Address\">\n    <input type=\"password\" name=\"new_password\" placeholder=\"New Password\">\n    <button type=\"submit\">Reset Password</button>\n</form>\n```\n\n### Step 4: Configuration\n\nFinally, we need to configure our PHP script to connect to the database. Create a file called `config.php` with the following code:\n\n```php\n<?php\n$pdo = new PDO('mysql:host=localhost;dbname=your-database', 'your-username', 'your-password');\n?>\n```\n\nReplace `'your-database'`, `'your-username'`, and `'your-password'` with your actual database credentials.\n\nThis is a basic example of how to implement a forgotten password function using PHP. You should adapt it to fit your specific needs and consider implementing additional security measures, such as:\n\n* Using a secure token generation library (e.g., `random_bytes`)\n* Hashing the reset token\n* Implementing rate limiting for password reset attempts\n* Displaying a success message after updating the password\n\nRemember to keep your database credentials secure!", "code_blocks": [null, "```php\n<?php\n\n// Configuration\nrequire 'config.php';\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Get user input\n    $email = trim(filter_var($_POST['email'], FILTER_SANITIZE_EMAIL));\n\n    // Query database to retrieve user data\n    $query = \"SELECT * FROM users WHERE email = :email\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n\n    // Check if user exists\n    if ($stmt->rowCount() === 1) {\n        // Get user data\n        $user_data = $stmt->fetch();\n\n        // Generate reset token and hash it\n        $reset_token = bin2hex(random_bytes(32));\n        $hashed_reset_token = password_hash($reset_token, PASSWORD_DEFAULT);\n\n        // Update user data with reset token\n        $query = \"UPDATE users SET reset_token = :hashed_reset_token WHERE id = :id\";\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':id', $user_data['id']);\n        $stmt->bindParam(':hashed_reset_token', $hashed_reset_token);\n        $stmt->execute();\n\n        // Send password reset email\n        send_password_reset_email($email, $reset_token);\n\n        echo \"Password reset link sent to your email.\";\n    } else {\n        echo \"No account found with that email.\";\n    }\n}\n\n// Function to send password reset email\nfunction send_password_reset_email($email, $reset_token) {\n    // Email configuration (change these values)\n    $from = 'your-email@gmail.com';\n    $to = $email;\n    $subject = 'Password Reset Request';\n\n    // Create email body\n    $message = \"\n        <p>Dear User,</p>\n        <p>You are receiving this email because we received a password reset request for your account.</p>\n        <p>To reset your password, please click on the following link:</p>\n        <p><a href='https://your-website.com/reset-password?token=$reset_token'>$reset_token</a></p>\n    \";\n\n    // Send email\n    $headers = 'From: ' . $from;\n    mail($to, $subject, $message, $headers);\n\n    echo \"Email sent.\";\n}\n\n?>\n```", "```php\n<?php\n\n// Configuration\nrequire 'config.php';\n\n// Check if token is valid\nif (isset($_GET['token'])) {\n    // Get user input\n    $email = trim(filter_var($_POST['email'], FILTER_SANITIZE_EMAIL));\n    $new_password = trim(filter_var($_POST['new_password'], FILTER_SANITIZE_STRING));\n\n    // Query database to retrieve user data\n    $query = \"SELECT * FROM users WHERE email = :email AND reset_token = :reset_token\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':reset_token', $_GET['token']);\n    $stmt->execute();\n\n    // Check if user exists\n    if ($stmt->rowCount() === 1) {\n        // Get user data\n        $user_data = $stmt->fetch();\n\n        // Update password and reset token\n        $query = \"UPDATE users SET password_hash = :password_hash, reset_token = NULL WHERE id = :id\";\n        $stmt = $pdo->prepare($query);\n        $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);\n        $stmt->bindParam(':id', $user_data['id']);\n        $stmt->bindParam(':password_hash', $hashed_password);\n        $stmt->execute();\n\n        echo \"Password updated successfully.\";\n    } else {\n        echo \"Invalid token or email.\";\n    }\n}\n\n// Display password reset form\n?>\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n    <input type=\"email\" name=\"email\" placeholder=\"Email Address\">\n    <input type=\"password\" name=\"new_password\" placeholder=\"New Password\">\n    <button type=\"submit\">Reset Password</button>\n</form>\n```", "```php\n<?php\n$pdo = new PDO('mysql:host=localhost;dbname=your-database', 'your-username', 'your-password');\n?>\n```"]}
