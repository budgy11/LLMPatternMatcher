{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of how you can create a \"Forgot Password\" function in PHP:\n\n**Database Schema**\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  email VARCHAR(255) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL,\n  reset_token VARCHAR(255),\n  reset_expires_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n);\n```\n**PHP Code**\n\nCreate a new PHP file called `forgot_password.php` and add the following code:\n```php\n<?php\n\n// Configuration\ndefine('PASSWORD_SALT', 'your_password_salt_here');\ndefine('RESET_TOKEN_EXPIRE_HOURS', 1);\n\n// Function to generate reset token\nfunction generateResetToken() {\n  return bin2hex(random_bytes(32));\n}\n\n// Function to send password reset email\nfunction sendPasswordResetEmail($email, $reset_token) {\n  // Use a library like SwiftMailer or PHPMailer to send the email\n  // For this example, we'll use a simple email sending function\n  $subject = 'Password Reset Request';\n  $message = \"Dear user,\\n\\nYou have requested a password reset. Please click on the following link to reset your password:\\n\";\n  $message .= \"<a href='http://yourwebsite.com/reset-password?token=$reset_token'>Reset Password</a>\";\n  mail($email, $subject, $message);\n}\n\n// Handle forgot password request\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  // Get the user's email address\n  $email = $_POST['email'];\n  \n  // Check if the email is valid\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    header('Location: /forgot-password?error=Invalid+email+address');\n    exit;\n  }\n  \n  // Find the user in the database\n  $stmt = $pdo->prepare(\"SELECT * FROM users WHERE email = :email\");\n  $stmt->execute(['email' => $email]);\n  $user = $stmt->fetch();\n  \n  if ($user) {\n    // Generate a new reset token\n    $reset_token = generateResetToken();\n    \n    // Store the reset token in the user's record\n    $pdo->exec(\"UPDATE users SET reset_token = '$reset_token', reset_expires_at = CURRENT_TIMESTAMP + INTERVAL \" . RESET_TOKEN_EXPIRE_HOURS . \" HOUR WHERE id = :id\", ['id' => $user['id']]);\n    \n    // Send a password reset email to the user\n    sendPasswordResetEmail($email, $reset_token);\n    \n    header('Location: /forgot-password?success=Password+reset+email+sent');\n  } else {\n    header('Location: /forgot-password?error=User+not+found');\n  }\n} else {\n  // Display the forgot password form\n  ?>\n  <h1>Forgot Password</h1>\n  <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n    <label for=\"email\">Email:</label>\n    <input type=\"text\" name=\"email\" id=\"email\"><br><br>\n    <button type=\"submit\">Send Reset Email</button>\n  </form>\n  <?php\n}\n\n?>\n```\n**Explanation**\n\nThis code uses a PDO (PHP Data Objects) connection to interact with the database. It defines two functions: `generateResetToken` generates a random reset token, and `sendPasswordResetEmail` sends an email to the user's registered email address.\n\nWhen the form is submitted, it checks if the email is valid using a filter. If it's not valid, it redirects the user back to the forgot password page with an error message. Otherwise, it finds the user in the database and generates a new reset token. It stores this token in the user's record along with an expiration time (1 hour from now). Finally, it sends a password reset email to the user.\n\nNote that you should replace `your_password_salt_here` with your actual password salt, and `http://yourwebsite.com/reset-password?token=$reset_token` with the actual URL for resetting passwords on your website.\n\n**Security Considerations**\n\nThis code stores reset tokens in plain text in the database. While this is acceptable for development purposes or small-scale applications, it's not recommended for production environments. Instead, consider using a secure token store like Redis or Memcached to store reset tokens.\n\nAdditionally, this code uses a simple email sending function. In a real-world application, you should use a reputable library like SwiftMailer or PHPMailer to handle email sending securely.\n\n**Example Use Cases**\n\n1. A user forgets their password and clicks on the \"Forgot Password\" link.\n2. The forgot password form is displayed, asking for the user's email address.\n3. The user enters their email address and submits the form.\n4. If the email is valid, a new reset token is generated and stored in the database along with an expiration time (1 hour from now).\n5. A password reset email is sent to the user's registered email address with a link to reset their password.\n\nNote that this code assumes you have already set up a PDO connection to your database and have configured any necessary environment variables or constants.", "code_blocks": [null, "```php\n<?php\n\n// Configuration\ndefine('PASSWORD_SALT', 'your_password_salt_here');\ndefine('RESET_TOKEN_EXPIRE_HOURS', 1);\n\n// Function to generate reset token\nfunction generateResetToken() {\n  return bin2hex(random_bytes(32));\n}\n\n// Function to send password reset email\nfunction sendPasswordResetEmail($email, $reset_token) {\n  // Use a library like SwiftMailer or PHPMailer to send the email\n  // For this example, we'll use a simple email sending function\n  $subject = 'Password Reset Request';\n  $message = \"Dear user,\\n\\nYou have requested a password reset. Please click on the following link to reset your password:\\n\";\n  $message .= \"<a href='http://yourwebsite.com/reset-password?token=$reset_token'>Reset Password</a>\";\n  mail($email, $subject, $message);\n}\n\n// Handle forgot password request\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  // Get the user's email address\n  $email = $_POST['email'];\n  \n  // Check if the email is valid\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    header('Location: /forgot-password?error=Invalid+email+address');\n    exit;\n  }\n  \n  // Find the user in the database\n  $stmt = $pdo->prepare(\"SELECT * FROM users WHERE email = :email\");\n  $stmt->execute(['email' => $email]);\n  $user = $stmt->fetch();\n  \n  if ($user) {\n    // Generate a new reset token\n    $reset_token = generateResetToken();\n    \n    // Store the reset token in the user's record\n    $pdo->exec(\"UPDATE users SET reset_token = '$reset_token', reset_expires_at = CURRENT_TIMESTAMP + INTERVAL \" . RESET_TOKEN_EXPIRE_HOURS . \" HOUR WHERE id = :id\", ['id' => $user['id']]);\n    \n    // Send a password reset email to the user\n    sendPasswordResetEmail($email, $reset_token);\n    \n    header('Location: /forgot-password?success=Password+reset+email+sent');\n  } else {\n    header('Location: /forgot-password?error=User+not+found');\n  }\n} else {\n  // Display the forgot password form\n  ?>\n  <h1>Forgot Password</h1>\n  <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n    <label for=\"email\">Email:</label>\n    <input type=\"text\" name=\"email\" id=\"email\"><br><br>\n    <button type=\"submit\">Send Reset Email</button>\n  </form>\n  <?php\n}\n\n?>\n```"]}
