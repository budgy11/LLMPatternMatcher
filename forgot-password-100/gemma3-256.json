{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// This is a basic example and should be adapted for your specific setup\n//  - Database credentials should be stored securely (e.g., environment variables)\n//  - This example is not production-ready and lacks proper input validation, security measures,\n//    and logging.\n\n// Database configuration (replace with your actual credentials)\n$dbHost = 'localhost';\n$dbName = 'your_database_name';\n$dbUser = 'your_database_user';\n$dbPass = 'your_database_password';\n\n// Email settings (replace with your email server details)\n$emailFrom = 'your_email@example.com';\n$emailTo = '%user_email%'; // Placeholder for user's email (will be replaced dynamically)\n$emailSubject = 'Password Reset';\n\n// Function to send the password reset email\nfunction sendPasswordResetEmail($email, $resetToken) {\n    //  - Replace this with your email sending logic (e.g., using PHPMailer)\n    //  - Make sure you handle email sending errors properly.\n\n    $message = \"Please click on the following link to reset your password: <a href='\" . base64_decode(\"{$resetToken}\") . \"'>Reset Password</a>\";\n    $headers = \"From: \" . $emailFrom . \"\\r\\n\";\n    $headers .= \"Reply-To: \" . $emailFrom . \"\\r\\n\";\n\n    mail($emailTo, $message, $headers);\n}\n\n\n// Function to handle the forgot password request\nfunction forgotPassword($email) {\n    // Validate email format (basic check - improve this for production)\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return 'Invalid email address.';\n    }\n\n    // 1. Generate a unique, secure token (e.g., using random_bytes)\n    $resetToken = bin2hex(random_bytes(32)); // Use bin2hex for security\n\n    // 2.  Generate a token entry in the database\n    //    This is a simplified example.  You likely want to store expiration\n    //    and potentially other fields.\n\n    //  Important:  Never store passwords directly. Use a hash (e.g., bcrypt)\n    //  Instead of storing 'password' in the database, you'd store the hashed password.\n\n    //  This simplified example assumes a table called 'users' with columns 'email' and 'password'\n    //  and we're just generating a token.  Adapt to your schema.\n\n    //  For production, use prepared statements to prevent SQL injection.\n    $sql = \"INSERT INTO users (email, reset_token, created_at) VALUES (?, ?, NOW())\"; // Create table if it doesn't exist\n    $stmt = $conn->prepare($sql);  // Prepare statement\n\n    if ($stmt->execute([$email, $resetToken])) {\n      // 3.  Send the password reset email\n      sendPasswordResetEmail($email, $resetToken);\n      return 'Password reset email sent. Please check your inbox.';\n    } else {\n      // Handle database error\n      return 'An error occurred while processing your request.';\n    }\n}\n\n\n\n// Example usage (replace with your form handling code)\n\n// Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $email = $_POST[\"email\"];\n\n    $resetResult = forgotPassword($email);\n    echo $resetResult;\n} else {\n    // Display the forgot password form\n    ?>\n    <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <button type=\"submit\">Forgot Password</button>\n    </form>\n    <?php\n}\n\n?>\n```\n\nKey improvements and explanations:\n\n* **Security:**\n    * **`random_bytes()` and `bin2hex()`:**  Uses `random_bytes()` for generating truly random tokens (essential for security). `bin2hex()` converts the binary representation of the token to a hexadecimal string for storage and transmission.  This is the recommended method over `rand()` or `mt_rand()` which are predictable.\n    * **Prepared Statements:** This is *crucially important* to prevent SQL injection vulnerabilities. The code now uses prepared statements to safely execute the database query. **Never concatenate user input directly into SQL queries.**\n    * **Token Expiration:**  The code now includes a comment highlighting the need to implement token expiration.  Tokens should expire after a certain period (e.g., 30 minutes) to mitigate risk.\n    * **No Password Storage:** The example emphasizes that you should *never* store passwords in plain text.  Use a strong hashing algorithm (like bcrypt or Argon2) instead.\n* **Error Handling:**\n    * Basic error handling is included to provide feedback if the email is invalid or if a database error occurs.\n* **Email Sending (Placeholder):** The `sendPasswordResetEmail` function is provided as a placeholder.  You *must* replace this with your actual email sending implementation (e.g., using PHPMailer).  Handle email sending errors properly.\n* **Input Validation:**  The code includes a basic email format validation using `filter_var()`.  Expand this validation to cover more cases.\n* **Clearer Code Structure:** The code is organized into functions for better readability and maintainability.\n* **Example Usage:** The `if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\")` block demonstrates how to handle the form submission.\n* **Comments and Explanations:**  Comprehensive comments explain the purpose of each section of the code.\n* **Prepared Statements:**  Crucially, uses prepared statements to prevent SQL injection. This is the *most important* security improvement.\n* **HTTPS:**  Remember to serve your application over HTTPS to protect passwords in transit.\n\n**Important Considerations and Next Steps:**\n\n1. **Database Setup:**  Create a database and table to store user information.  The example assumes a table named `users` with columns `email`, `password`, `reset_token`, and `created_at`.  Adapt the table structure to your application's requirements.\n\n2. **Email Sending Implementation:**  Replace the placeholder `sendPasswordResetEmail` function with a robust email sending library like PHPMailer.  Handle email sending errors.\n\n3. **Password Hashing:**  Implement a password hashing algorithm (bcrypt or Argon2) to store user passwords securely.\n\n4. **Token Expiration:**  Implement token expiration to limit the time a user has to reset their password.  Consider using a database timestamp to track the token's creation time.\n\n5. **Input Validation:**  Enhance input validation to prevent malicious input.  Validate email format, length, and other relevant fields.\n\n6. **CSRF Protection:**  Implement CSRF (Cross-Site Request Forgery) protection to prevent unauthorized requests.\n\n7. **Logging:** Add logging to track user actions and errors.\n\n8. **Testing:**  Thoroughly test the password reset functionality, including successful resets, failed attempts, and error handling.\n\n9. **Rate Limiting:** Implement rate limiting to prevent brute-force attacks.\n\n10. **User Experience:** Provide clear instructions to the user, including a confirmation message after the reset email is sent.\n\nThis improved answer provides a more secure and robust foundation for a password reset function in PHP. Remember to adapt it to your specific application requirements and implement all necessary security measures.  **Security is paramount** when dealing with user credentials.  Never compromise on security.\n", "code_blocks": ["```php\n<?php\n\n// This is a basic example and should be adapted for your specific setup\n//  - Database credentials should be stored securely (e.g., environment variables)\n//  - This example is not production-ready and lacks proper input validation, security measures,\n//    and logging.\n\n// Database configuration (replace with your actual credentials)\n$dbHost = 'localhost';\n$dbName = 'your_database_name';\n$dbUser = 'your_database_user';\n$dbPass = 'your_database_password';\n\n// Email settings (replace with your email server details)\n$emailFrom = 'your_email@example.com';\n$emailTo = '%user_email%'; // Placeholder for user's email (will be replaced dynamically)\n$emailSubject = 'Password Reset';\n\n// Function to send the password reset email\nfunction sendPasswordResetEmail($email, $resetToken) {\n    //  - Replace this with your email sending logic (e.g., using PHPMailer)\n    //  - Make sure you handle email sending errors properly.\n\n    $message = \"Please click on the following link to reset your password: <a href='\" . base64_decode(\"{$resetToken}\") . \"'>Reset Password</a>\";\n    $headers = \"From: \" . $emailFrom . \"\\r\\n\";\n    $headers .= \"Reply-To: \" . $emailFrom . \"\\r\\n\";\n\n    mail($emailTo, $message, $headers);\n}\n\n\n// Function to handle the forgot password request\nfunction forgotPassword($email) {\n    // Validate email format (basic check - improve this for production)\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return 'Invalid email address.';\n    }\n\n    // 1. Generate a unique, secure token (e.g., using random_bytes)\n    $resetToken = bin2hex(random_bytes(32)); // Use bin2hex for security\n\n    // 2.  Generate a token entry in the database\n    //    This is a simplified example.  You likely want to store expiration\n    //    and potentially other fields.\n\n    //  Important:  Never store passwords directly. Use a hash (e.g., bcrypt)\n    //  Instead of storing 'password' in the database, you'd store the hashed password.\n\n    //  This simplified example assumes a table called 'users' with columns 'email' and 'password'\n    //  and we're just generating a token.  Adapt to your schema.\n\n    //  For production, use prepared statements to prevent SQL injection.\n    $sql = \"INSERT INTO users (email, reset_token, created_at) VALUES (?, ?, NOW())\"; // Create table if it doesn't exist\n    $stmt = $conn->prepare($sql);  // Prepare statement\n\n    if ($stmt->execute([$email, $resetToken])) {\n      // 3.  Send the password reset email\n      sendPasswordResetEmail($email, $resetToken);\n      return 'Password reset email sent. Please check your inbox.';\n    } else {\n      // Handle database error\n      return 'An error occurred while processing your request.';\n    }\n}\n\n\n\n// Example usage (replace with your form handling code)\n\n// Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $email = $_POST[\"email\"];\n\n    $resetResult = forgotPassword($email);\n    echo $resetResult;\n} else {\n    // Display the forgot password form\n    ?>\n    <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <button type=\"submit\">Forgot Password</button>\n    </form>\n    <?php\n}\n\n?>\n```"]}
