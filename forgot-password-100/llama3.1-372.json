{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of how to create a forgot password function using PHP:\n\n**Database Schema**\n\nFirst, we need to create a database schema with the following tables:\n\n`users`\n\n| Field Name | Data Type |\n| --- | --- |\n| `id` | `int(11)` (primary key) |\n| `email` | `varchar(255)` |\n| `password` | `varchar(255)` |\n| `reset_token` | `varchar(255)` |\n\n**PHP Code**\n\n```php\n// Configuration file (config.php)\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'root');\ndefine('DB_PASSWORD', '');\ndefine('DB_NAME', 'mydatabase');\n\n// Connect to the database\n$dsn = \"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME;\n$dbh = new PDO($dsn, DB_USER, DB_PASSWORD);\n\n// Forgot password function\nfunction forgot_password($email) {\n  global $dbh;\n\n  // Check if email exists in the database\n  $stmt = $dbh->prepare(\"SELECT * FROM users WHERE email = ?\");\n  $stmt->execute([$email]);\n  $user = $stmt->fetch();\n\n  if (!$user) {\n    return array('error' => 'Email not found');\n  }\n\n  // Generate a random reset token\n  $reset_token = bin2hex(random_bytes(32));\n\n  // Update the user's reset token in the database\n  $stmt = $dbh->prepare(\"UPDATE users SET reset_token = ? WHERE email = ?\");\n  $stmt->execute([$reset_token, $email]);\n\n  // Send a password reset email to the user\n  send_reset_email($email, $reset_token);\n\n  return array('success' => 'Password reset link sent to your email');\n}\n\n// Function to send password reset email\nfunction send_reset_email($email, $reset_token) {\n  // Email configuration (e.g. Gmail)\n  define('EMAIL_HOST', 'smtp.gmail.com');\n  define('EMAIL_PORT', 587);\n  define('EMAIL_USERNAME', 'your-email@gmail.com');\n  define('EMAIL_PASSWORD', 'your-password');\n\n  // Send email using PHPMailer\n  require_once 'PHPMailer.php';\n  $mail = new PHPMailer();\n  $mail->isSMTP();\n  $mail->Host = EMAIL_HOST;\n  $mail->Port = EMAIL_PORT;\n  $mail->Username = EMAIL_USERNAME;\n  $mail->Password = EMAIL_PASSWORD;\n  $mail->setFrom(EMAIL_USERNAME, 'Your Name');\n  $mail->addAddress($email);\n  $mail->Subject = 'Reset your password';\n  $mail->Body = \"Click on this link to reset your password: <a href='http://example.com/reset-password?token=\" . $reset_token . \"'>Reset Password</a>\";\n  $mail->send();\n\n  return true;\n}\n\n// Handle forgot password request\nif (isset($_POST['email'])) {\n  $email = $_POST['email'];\n  $result = forgot_password($email);\n\n  if ($result['success']) {\n    echo 'Password reset link sent to your email';\n  } else {\n    echo json_encode($result);\n  }\n}\n```\n\n**Explanation**\n\n1. The `forgot_password` function takes an email address as input and checks if it exists in the database.\n2. If the email is found, a random reset token is generated and stored in the user's record in the database.\n3. A password reset email is sent to the user with a link to reset their password.\n4. The `send_reset_email` function uses PHPMailer to send an email with the password reset link.\n\n**Security Notes**\n\n1. Make sure to store the reset token securely in the database and use it only once to prevent unauthorized access.\n2. Use a secure password hashing algorithm like bcrypt or PBKDF2 to hash passwords stored in the database.\n3. Limit the number of attempts to send a password reset email per IP address.\n\nThis is just a basic example, and you should adapt it to your specific requirements and security standards. Additionally, make sure to test this code thoroughly before deploying it to production.", "code_blocks": ["```php\n// Configuration file (config.php)\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'root');\ndefine('DB_PASSWORD', '');\ndefine('DB_NAME', 'mydatabase');\n\n// Connect to the database\n$dsn = \"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME;\n$dbh = new PDO($dsn, DB_USER, DB_PASSWORD);\n\n// Forgot password function\nfunction forgot_password($email) {\n  global $dbh;\n\n  // Check if email exists in the database\n  $stmt = $dbh->prepare(\"SELECT * FROM users WHERE email = ?\");\n  $stmt->execute([$email]);\n  $user = $stmt->fetch();\n\n  if (!$user) {\n    return array('error' => 'Email not found');\n  }\n\n  // Generate a random reset token\n  $reset_token = bin2hex(random_bytes(32));\n\n  // Update the user's reset token in the database\n  $stmt = $dbh->prepare(\"UPDATE users SET reset_token = ? WHERE email = ?\");\n  $stmt->execute([$reset_token, $email]);\n\n  // Send a password reset email to the user\n  send_reset_email($email, $reset_token);\n\n  return array('success' => 'Password reset link sent to your email');\n}\n\n// Function to send password reset email\nfunction send_reset_email($email, $reset_token) {\n  // Email configuration (e.g. Gmail)\n  define('EMAIL_HOST', 'smtp.gmail.com');\n  define('EMAIL_PORT', 587);\n  define('EMAIL_USERNAME', 'your-email@gmail.com');\n  define('EMAIL_PASSWORD', 'your-password');\n\n  // Send email using PHPMailer\n  require_once 'PHPMailer.php';\n  $mail = new PHPMailer();\n  $mail->isSMTP();\n  $mail->Host = EMAIL_HOST;\n  $mail->Port = EMAIL_PORT;\n  $mail->Username = EMAIL_USERNAME;\n  $mail->Password = EMAIL_PASSWORD;\n  $mail->setFrom(EMAIL_USERNAME, 'Your Name');\n  $mail->addAddress($email);\n  $mail->Subject = 'Reset your password';\n  $mail->Body = \"Click on this link to reset your password: <a href='http://example.com/reset-password?token=\" . $reset_token . \"'>Reset Password</a>\";\n  $mail->send();\n\n  return true;\n}\n\n// Handle forgot password request\nif (isset($_POST['email'])) {\n  $email = $_POST['email'];\n  $result = forgot_password($email);\n\n  if ($result['success']) {\n    echo 'Password reset link sent to your email';\n  } else {\n    echo json_encode($result);\n  }\n}\n```"]}
