{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of a forgotten password functionality in PHP:\n\n**Database Schema**\n\nWe'll assume you have a table `users` with the following columns:\n```php\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  email VARCHAR(255),\n  password_hash VARCHAR(255)\n);\n```\n**Forgot Password Functionality**\n\nCreate a new PHP file, e.g., `forgot_password.php`, and add the following code:\n```php\n<?php\n\n// Configuration settings\ndefine('EMAIL_RECIPIENT', 'your_email@example.com'); // Email address to send reset link\ndefine('RESET_LINK_EXPIRY', 3600); // Reset link expiry time in seconds (1 hour)\n\n// Function to generate a random password\nfunction generate_password($length = 12) {\n  $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  $password = '';\n  for ($i = 0; $i < $length; $i++) {\n    $password .= substr($characters, rand(0, strlen($characters) - 1), 1);\n  }\n  return $password;\n}\n\n// Function to send reset link via email\nfunction send_reset_link($email, $token) {\n  $subject = 'Reset your password';\n  $body = '\n    Hello!\n\n    You have requested a password reset for your account. To reset your password, click on the following link:\n    \n    <a href=\"' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $token . '\">Reset Password</a>\n    \n    If you did not request this email, please ignore it.\n\n    Best regards,\n  Your Site Name';\n  mail(EMAIL_RECIPIENT, $subject, $body);\n}\n\n// Forgot password form handling\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  $email = $_POST['email'];\n  \n  // Check if user exists in database\n  $stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email');\n  $stmt->execute([':email' => $email]);\n  $user = $stmt->fetch();\n  \n  if ($user) {\n    // Generate random password and token\n    $new_password = generate_password();\n    $token = hash('sha256', $new_password);\n    \n    // Update user's password in database\n    $stmt = $pdo->prepare('UPDATE users SET password_hash = :password_hash, token = :token WHERE email = :email');\n    $stmt->execute([':password_hash' => password_hash($new_password, PASSWORD_DEFAULT), ':token' => $token, ':email' => $email]);\n    \n    // Send reset link via email\n    send_reset_link($email, $token);\n    \n    echo 'A reset link has been sent to your email address. Please click on the link to reset your password.';\n  } else {\n    echo 'Email not found.';\n  }\n}\n\n?>\n```\n**reset_password.php**\n\nCreate a new PHP file, e.g., `reset_password.php`, and add the following code:\n```php\n<?php\n\n// Check if token is valid\nif (isset($_GET['token'])) {\n  $stmt = $pdo->prepare('SELECT * FROM users WHERE token = :token');\n  $stmt->execute([':token' => $_GET['token']]);\n  $user = $stmt->fetch();\n  \n  if ($user) {\n    // Hash and verify new password\n    if (isset($_POST['new_password']) && isset($_POST['confirm_password'])) {\n      if ($_POST['new_password'] == $_POST['confirm_password']) {\n        $new_password = $_POST['new_password'];\n        $hash = password_hash($new_password, PASSWORD_DEFAULT);\n        \n        // Update user's password in database\n        $stmt = $pdo->prepare('UPDATE users SET password_hash = :password_hash WHERE token = :token');\n        $stmt->execute([':password_hash' => $hash, ':token' => $_GET['token']]);\n        \n        echo 'Password updated successfully.';\n      } else {\n        echo 'Passwords do not match.';\n      }\n    }\n  } else {\n    echo 'Invalid token.';\n  }\n}\n\n?>\n```\n**Usage**\n\n1. When a user clicks the \"Forgot Password\" link, they are taken to `forgot_password.php`.\n2. The form is submitted with the user's email address.\n3. If the email address exists in the database, a random password and token are generated, and an email is sent to the user with a reset link.\n4. When the user clicks on the reset link, they are taken to `reset_password.php`.\n5. The form is submitted with the new password and confirm password fields.\n6. If the passwords match, the new password is hashed and stored in the database.\n\nNote: This is just an example implementation, and you should adapt it to your specific use case and security requirements.", "code_blocks": ["```php\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  email VARCHAR(255),\n  password_hash VARCHAR(255)\n);\n```", "```php\n<?php\n\n// Configuration settings\ndefine('EMAIL_RECIPIENT', 'your_email@example.com'); // Email address to send reset link\ndefine('RESET_LINK_EXPIRY', 3600); // Reset link expiry time in seconds (1 hour)\n\n// Function to generate a random password\nfunction generate_password($length = 12) {\n  $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  $password = '';\n  for ($i = 0; $i < $length; $i++) {\n    $password .= substr($characters, rand(0, strlen($characters) - 1), 1);\n  }\n  return $password;\n}\n\n// Function to send reset link via email\nfunction send_reset_link($email, $token) {\n  $subject = 'Reset your password';\n  $body = '\n    Hello!\n\n    You have requested a password reset for your account. To reset your password, click on the following link:\n    \n    <a href=\"' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $token . '\">Reset Password</a>\n    \n    If you did not request this email, please ignore it.\n\n    Best regards,\n  Your Site Name';\n  mail(EMAIL_RECIPIENT, $subject, $body);\n}\n\n// Forgot password form handling\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  $email = $_POST['email'];\n  \n  // Check if user exists in database\n  $stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email');\n  $stmt->execute([':email' => $email]);\n  $user = $stmt->fetch();\n  \n  if ($user) {\n    // Generate random password and token\n    $new_password = generate_password();\n    $token = hash('sha256', $new_password);\n    \n    // Update user's password in database\n    $stmt = $pdo->prepare('UPDATE users SET password_hash = :password_hash, token = :token WHERE email = :email');\n    $stmt->execute([':password_hash' => password_hash($new_password, PASSWORD_DEFAULT), ':token' => $token, ':email' => $email]);\n    \n    // Send reset link via email\n    send_reset_link($email, $token);\n    \n    echo 'A reset link has been sent to your email address. Please click on the link to reset your password.';\n  } else {\n    echo 'Email not found.';\n  }\n}\n\n?>\n```", "```php\n<?php\n\n// Check if token is valid\nif (isset($_GET['token'])) {\n  $stmt = $pdo->prepare('SELECT * FROM users WHERE token = :token');\n  $stmt->execute([':token' => $_GET['token']]);\n  $user = $stmt->fetch();\n  \n  if ($user) {\n    // Hash and verify new password\n    if (isset($_POST['new_password']) && isset($_POST['confirm_password'])) {\n      if ($_POST['new_password'] == $_POST['confirm_password']) {\n        $new_password = $_POST['new_password'];\n        $hash = password_hash($new_password, PASSWORD_DEFAULT);\n        \n        // Update user's password in database\n        $stmt = $pdo->prepare('UPDATE users SET password_hash = :password_hash WHERE token = :token');\n        $stmt->execute([':password_hash' => $hash, ':token' => $_GET['token']]);\n        \n        echo 'Password updated successfully.';\n      } else {\n        echo 'Passwords do not match.';\n      }\n    }\n  } else {\n    echo 'Invalid token.';\n  }\n}\n\n?>\n```"]}
