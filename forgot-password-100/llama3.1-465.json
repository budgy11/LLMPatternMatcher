{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of how to create a forgot password function in PHP:\n\n**Database Setup**\n\nFirst, you'll need to set up your database with the following table:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255) NOT NULL,\n  email VARCHAR(255) NOT NULL,\n  password VARCHAR(255) NOT NULL,\n  forgot_token VARCHAR(255),\n  forgot_timestamp TIMESTAMP\n);\n```\n**Forgot Password Form**\n\nCreate a new PHP file (e.g. `forgot_password.php`) and add the following code:\n```php\n<?php\nrequire_once 'config.php'; // database connection settings\n\n// validate user input\nif (isset($_POST['username']) && isset($_POST['email'])) {\n  $username = trim($_POST['username']);\n  $email = trim($_POST['email']);\n\n  // check if username and email match a user in the database\n  $stmt = $pdo->prepare('SELECT * FROM users WHERE username = :username AND email = :email');\n  $stmt->execute([':username' => $username, ':email' => $email]);\n  $user = $stmt->fetch();\n\n  if ($user) {\n    // generate a forgot password token\n    $token = bin2hex(random_bytes(32));\n    $pdo->exec('UPDATE users SET forgot_token = :token WHERE id = :id', ['token' => $token, 'id' => $user['id']]);\n\n    // send email with reset link\n    $reset_link = \"http://example.com/reset_password.php?token=\" . urlencode($token);\n    $subject = 'Reset Password';\n    $body = 'Click this link to reset your password: ' . $reset_link;\n    mail($email, $subject, $body);\n\n    echo 'A password reset email has been sent to you.';\n  } else {\n    echo 'Username and/or email do not match our records.';\n  }\n}\n\n// display form\n?>\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n  <label>Username:</label>\n  <input type=\"text\" name=\"username\" required>\n\n  <br><br>\n\n  <label>Email:</label>\n  <input type=\"email\" name=\"email\" required>\n\n  <button type=\"submit\">Send Reset Link</button>\n</form>\n```\n**Reset Password Page**\n\nCreate a new PHP file (e.g. `reset_password.php`) and add the following code:\n```php\n<?php\nrequire_once 'config.php'; // database connection settings\n\n// validate token input\nif (isset($_GET['token'])) {\n  $token = $_GET['token'];\n\n  // check if token is valid and not expired\n  $stmt = $pdo->prepare('SELECT * FROM users WHERE forgot_token = :token AND forgot_timestamp > NOW() - INTERVAL 1 HOUR');\n  $stmt->execute([':token' => $token]);\n  $user = $stmt->fetch();\n\n  if ($user) {\n    // display reset password form\n?>\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n  <label>New Password:</label>\n  <input type=\"password\" name=\"new_password\" required>\n\n  <br><br>\n\n  <button type=\"submit\">Reset Password</button>\n</form>\n\n<?php\n    // validate new password input\n    if (isset($_POST['new_password'])) {\n      $new_password = trim($_POST['new_password']);\n\n      // check if new password is strong enough\n      if (strlen($new_password) < 8) {\n        echo 'Password must be at least 8 characters long.';\n      } else {\n        // update user's password\n        $pdo->exec('UPDATE users SET password = :password WHERE id = :id', ['password' => password_hash($new_password, PASSWORD_DEFAULT), 'id' => $user['id']]);\n\n        echo 'Password has been successfully reset.';\n      }\n    }\n\n  } else {\n    echo 'Invalid or expired token.';\n  }\n}\n?>\n```\n**Security Notes**\n\n* Make sure to store the forgot token securely in a database and set an expiration time for it (e.g. 1 hour).\n* Use HTTPS to encrypt data transmitted between the client and server.\n* Validate user input on both forms to prevent SQL injection attacks.\n* Hash passwords using a strong algorithm like `password_hash()`.\n\nNote that this is just a basic example and you should adapt it to your specific use case and security requirements.", "code_blocks": [null, "```php\n<?php\nrequire_once 'config.php'; // database connection settings\n\n// validate user input\nif (isset($_POST['username']) && isset($_POST['email'])) {\n  $username = trim($_POST['username']);\n  $email = trim($_POST['email']);\n\n  // check if username and email match a user in the database\n  $stmt = $pdo->prepare('SELECT * FROM users WHERE username = :username AND email = :email');\n  $stmt->execute([':username' => $username, ':email' => $email]);\n  $user = $stmt->fetch();\n\n  if ($user) {\n    // generate a forgot password token\n    $token = bin2hex(random_bytes(32));\n    $pdo->exec('UPDATE users SET forgot_token = :token WHERE id = :id', ['token' => $token, 'id' => $user['id']]);\n\n    // send email with reset link\n    $reset_link = \"http://example.com/reset_password.php?token=\" . urlencode($token);\n    $subject = 'Reset Password';\n    $body = 'Click this link to reset your password: ' . $reset_link;\n    mail($email, $subject, $body);\n\n    echo 'A password reset email has been sent to you.';\n  } else {\n    echo 'Username and/or email do not match our records.';\n  }\n}\n\n// display form\n?>\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n  <label>Username:</label>\n  <input type=\"text\" name=\"username\" required>\n\n  <br><br>\n\n  <label>Email:</label>\n  <input type=\"email\" name=\"email\" required>\n\n  <button type=\"submit\">Send Reset Link</button>\n</form>\n```", "```php\n<?php\nrequire_once 'config.php'; // database connection settings\n\n// validate token input\nif (isset($_GET['token'])) {\n  $token = $_GET['token'];\n\n  // check if token is valid and not expired\n  $stmt = $pdo->prepare('SELECT * FROM users WHERE forgot_token = :token AND forgot_timestamp > NOW() - INTERVAL 1 HOUR');\n  $stmt->execute([':token' => $token]);\n  $user = $stmt->fetch();\n\n  if ($user) {\n    // display reset password form\n?>\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n  <label>New Password:</label>\n  <input type=\"password\" name=\"new_password\" required>\n\n  <br><br>\n\n  <button type=\"submit\">Reset Password</button>\n</form>\n\n<?php\n    // validate new password input\n    if (isset($_POST['new_password'])) {\n      $new_password = trim($_POST['new_password']);\n\n      // check if new password is strong enough\n      if (strlen($new_password) < 8) {\n        echo 'Password must be at least 8 characters long.';\n      } else {\n        // update user's password\n        $pdo->exec('UPDATE users SET password = :password WHERE id = :id', ['password' => password_hash($new_password, PASSWORD_DEFAULT), 'id' => $user['id']]);\n\n        echo 'Password has been successfully reset.';\n      }\n    }\n\n  } else {\n    echo 'Invalid or expired token.';\n  }\n}\n?>\n```"]}
