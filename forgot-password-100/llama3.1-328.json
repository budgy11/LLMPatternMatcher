{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how to create a \"Forgot Password\" functionality in PHP:\n\n**Database Setup:**\n\nWe'll need a `users` table with the following columns:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) UNIQUE NOT NULL,\n  password_hash VARCHAR(255) NOT NULL,\n  reset_token VARCHAR(255),\n  reset_expires TIMESTAMP DEFAULT CURRENT_TIMESTAMP + INTERVAL 30 MINUTE\n);\n```\n\n**PHP Code:**\n\nCreate a new file called `forgot_password.php` and add the following code:\n```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Get email from form\n    $email = $_POST['email'];\n\n    // Validate email\n    if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo \"Invalid email address\";\n        exit;\n    }\n\n    // Query database for user with matching email\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE email = :email\");\n    $stmt->execute([':email' => $email]);\n\n    if ($user = $stmt->fetch()) {\n        // Generate random reset token and expiration time\n        $resetToken = bin2hex(random_bytes(32));\n        $expires = date('Y-m-d H:i:s', strtotime('+30 minutes'));\n\n        // Update user with new reset token and expiration time\n        $stmt = $pdo->prepare(\"UPDATE users SET reset_token = :token, reset_expires = :expires WHERE email = :email\");\n        $stmt->execute([':token' => $resetToken, ':expires' => $expires, ':email' => $email]);\n\n        // Send password reset link via email\n        $subject = 'Password Reset Link';\n        $message = \"Click here to reset your password: <a href='\" . $_SERVER['HTTP_HOST'] . \"/reset-password.php?token=$resetToken'>Reset Password</a>\";\n        mail($user['email'], $subject, $message);\n\n        echo \"Email with password reset link sent\";\n    } else {\n        echo \"User not found\";\n    }\n} else {\n    // Display form\n    ?>\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <button type=\"submit\">Send Reset Link</button>\n    </form>\n    <?php\n}\n?>\n```\n\n**Reset Password Functionality:**\n\nCreate a new file called `reset-password.php` and add the following code:\n```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\n// Check if token is valid\n$token = $_GET['token'];\nif (empty($token)) {\n    echo \"Invalid token\";\n    exit;\n}\n\n// Query database for user with matching reset token\n$stmt = $pdo->prepare(\"SELECT * FROM users WHERE reset_token = :token AND reset_expires > NOW()\");\n$stmt->execute([':token' => $token]);\n\nif ($user = $stmt->fetch()) {\n    // Display password reset form\n    ?>\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        <label for=\"new_password\">New Password:</label>\n        <input type=\"password\" id=\"new_password\" name=\"new_password\" required>\n        <button type=\"submit\">Reset Password</button>\n        <input type=\"hidden\" name=\"token\" value=\"<?php echo $token; ?>\">\n    </form>\n    <?php\n} else {\n    // Token has expired or is invalid\n    echo \"Invalid token\";\n}\n\n// Handle password reset form submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Get new password from form\n    $newPassword = $_POST['new_password'];\n\n    // Validate new password\n    if (empty($newPassword) || strlen($newPassword) < 8) {\n        echo \"Invalid password\";\n        exit;\n    }\n\n    // Hash new password and update user in database\n    $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);\n    $stmt = $pdo->prepare(\"UPDATE users SET password_hash = :password WHERE reset_token = :token\");\n    $stmt->execute([':password' => $hashedPassword, ':token' => $token]);\n\n    echo \"Password updated successfully\";\n}\n?>\n```\n\n**Notes:**\n\n* Make sure to replace `config.php` with your actual database connection file.\n* This example uses a simple password reset functionality. In a production environment, you should use a more secure approach, such as using a token-based system or a dedicated library like PHP-Password-Hasher.\n* This is just an example and should be adapted to fit your specific needs.\n\nI hope this helps! Let me know if you have any questions or need further clarification.", "code_blocks": [null, "```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Get email from form\n    $email = $_POST['email'];\n\n    // Validate email\n    if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo \"Invalid email address\";\n        exit;\n    }\n\n    // Query database for user with matching email\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE email = :email\");\n    $stmt->execute([':email' => $email]);\n\n    if ($user = $stmt->fetch()) {\n        // Generate random reset token and expiration time\n        $resetToken = bin2hex(random_bytes(32));\n        $expires = date('Y-m-d H:i:s', strtotime('+30 minutes'));\n\n        // Update user with new reset token and expiration time\n        $stmt = $pdo->prepare(\"UPDATE users SET reset_token = :token, reset_expires = :expires WHERE email = :email\");\n        $stmt->execute([':token' => $resetToken, ':expires' => $expires, ':email' => $email]);\n\n        // Send password reset link via email\n        $subject = 'Password Reset Link';\n        $message = \"Click here to reset your password: <a href='\" . $_SERVER['HTTP_HOST'] . \"/reset-password.php?token=$resetToken'>Reset Password</a>\";\n        mail($user['email'], $subject, $message);\n\n        echo \"Email with password reset link sent\";\n    } else {\n        echo \"User not found\";\n    }\n} else {\n    // Display form\n    ?>\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <button type=\"submit\">Send Reset Link</button>\n    </form>\n    <?php\n}\n?>\n```", "```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\n// Check if token is valid\n$token = $_GET['token'];\nif (empty($token)) {\n    echo \"Invalid token\";\n    exit;\n}\n\n// Query database for user with matching reset token\n$stmt = $pdo->prepare(\"SELECT * FROM users WHERE reset_token = :token AND reset_expires > NOW()\");\n$stmt->execute([':token' => $token]);\n\nif ($user = $stmt->fetch()) {\n    // Display password reset form\n    ?>\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        <label for=\"new_password\">New Password:</label>\n        <input type=\"password\" id=\"new_password\" name=\"new_password\" required>\n        <button type=\"submit\">Reset Password</button>\n        <input type=\"hidden\" name=\"token\" value=\"<?php echo $token; ?>\">\n    </form>\n    <?php\n} else {\n    // Token has expired or is invalid\n    echo \"Invalid token\";\n}\n\n// Handle password reset form submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    // Get new password from form\n    $newPassword = $_POST['new_password'];\n\n    // Validate new password\n    if (empty($newPassword) || strlen($newPassword) < 8) {\n        echo \"Invalid password\";\n        exit;\n    }\n\n    // Hash new password and update user in database\n    $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);\n    $stmt = $pdo->prepare(\"UPDATE users SET password_hash = :password WHERE reset_token = :token\");\n    $stmt->execute([':password' => $hashedPassword, ':token' => $token]);\n\n    echo \"Password updated successfully\";\n}\n?>\n```"]}
