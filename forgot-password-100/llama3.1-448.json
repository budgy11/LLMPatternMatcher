{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of a \"forgot password\" function in PHP:\n\n**Note:** This is a basic example and you should consider implementing additional security measures, such as hashing and salting passwords.\n\n**Database Schema:**\n\nAssuming we have a `users` table with the following columns:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) NOT NULL UNIQUE,\n  password_hash VARCHAR(255) NOT NULL,\n  reset_token VARCHAR(255)\n);\n```\n**PHP Code:**\n```php\n// forgot_password.php\n\n// Configuration variables\ndefine('SECRET_KEY', 'your_secret_key_here'); // Secret key for generating reset tokens\n\nfunction sendResetEmail($email) {\n  $subject = \"Reset your password\";\n  $message = \"Click the link below to reset your password:\n  <a href='\" . generateResetLink($email) . \"'>Reset Password</a>\";\n  mail($email, $subject, $message);\n}\n\nfunction generateResetLink($email) {\n  // Generate a random token\n  $token = bin2hex(random_bytes(32));\n\n  // Store the token in the database\n  $conn = new mysqli(\"your_host\", \"username\", \"password\", \"database_name\");\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  $query = \"UPDATE users SET reset_token='\" . $token . \"' WHERE email='\" . $email . \"'\";\n  if (!$conn->query($query)) {\n    echo \"Error updating database\";\n  }\n\n  // Return the link with the token\n  return \"http://yourwebsite.com/reset-password?token=\" . $token;\n}\n\nfunction checkResetLink($token) {\n  // Verify the token\n  $conn = new mysqli(\"your_host\", \"username\", \"password\", \"database_name\");\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  $query = \"SELECT * FROM users WHERE reset_token='\" . $token . \"'\";\n  if (!$result = $conn->query($query)) {\n    echo \"Error querying database\";\n  }\n  $row = $result->fetch_assoc();\n  return $row;\n}\n\n// Forgot password form handler\nif (isset($_POST['email'])) {\n  $email = $_POST['email'];\n  // Validate email address\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo \"Invalid email address\";\n    exit;\n  }\n\n  // Send reset link to the user's email\n  sendResetEmail($email);\n  echo \"An email has been sent with a password reset link. Please check your inbox.\";\n}\n```\n**How it works:**\n\n1. The `sendResetEmail` function generates a random token and sends an email with a reset link to the user.\n2. The `generateResetLink` function generates a random token, stores it in the database, and returns the reset link with the token.\n3. When the user clicks on the reset link, the `checkResetLink` function verifies the token and retrieves the corresponding user data from the database.\n\n**Security Considerations:**\n\n1. Use a secure secret key for generating tokens.\n2. Store tokens securely in the database (e.g., use AES encryption).\n3. Implement rate limiting to prevent brute-force attacks on reset links.\n4. Consider using HTTPS for the reset link to prevent eavesdropping attacks.\n\nPlease note that this is a simplified example, and you should consider implementing additional security measures, such as:\n\n* Hashing and salting passwords\n* Implementing CAPTCHA or other anti-spam measures\n* Using a more secure token generation mechanism (e.g., JSON Web Tokens)\n* Validating the user's password reset request using a one-time code sent via email\n\nRemember to adapt this example to your specific use case, and always follow best practices for web development security.", "code_blocks": [null, "```php\n// forgot_password.php\n\n// Configuration variables\ndefine('SECRET_KEY', 'your_secret_key_here'); // Secret key for generating reset tokens\n\nfunction sendResetEmail($email) {\n  $subject = \"Reset your password\";\n  $message = \"Click the link below to reset your password:\n  <a href='\" . generateResetLink($email) . \"'>Reset Password</a>\";\n  mail($email, $subject, $message);\n}\n\nfunction generateResetLink($email) {\n  // Generate a random token\n  $token = bin2hex(random_bytes(32));\n\n  // Store the token in the database\n  $conn = new mysqli(\"your_host\", \"username\", \"password\", \"database_name\");\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  $query = \"UPDATE users SET reset_token='\" . $token . \"' WHERE email='\" . $email . \"'\";\n  if (!$conn->query($query)) {\n    echo \"Error updating database\";\n  }\n\n  // Return the link with the token\n  return \"http://yourwebsite.com/reset-password?token=\" . $token;\n}\n\nfunction checkResetLink($token) {\n  // Verify the token\n  $conn = new mysqli(\"your_host\", \"username\", \"password\", \"database_name\");\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  $query = \"SELECT * FROM users WHERE reset_token='\" . $token . \"'\";\n  if (!$result = $conn->query($query)) {\n    echo \"Error querying database\";\n  }\n  $row = $result->fetch_assoc();\n  return $row;\n}\n\n// Forgot password form handler\nif (isset($_POST['email'])) {\n  $email = $_POST['email'];\n  // Validate email address\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo \"Invalid email address\";\n    exit;\n  }\n\n  // Send reset link to the user's email\n  sendResetEmail($email);\n  echo \"An email has been sent with a password reset link. Please check your inbox.\";\n}\n```"]}
