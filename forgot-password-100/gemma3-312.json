{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// Ensure this file is part of a secure application and not directly accessible\n// to prevent abuse.  Consider serving this through an API endpoint.\n\n// Database connection details (replace with your actual credentials)\n$db_host = 'localhost';\n$db_name = 'your_database_name';\n$db_user = 'your_username';\n$db_password = 'your_password';\n\n/**\n * Resets a user's password.\n *\n * @param string $email The user's email address.\n * @return bool True if password reset email was sent successfully, false otherwise.\n */\nfunction forgot_password(string $email)\n{\n    // Sanitize input - Essential for security\n    $email = filter_var($email, FILTER_SANITIZE_EMAIL);\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return false; // Invalid email format\n    }\n\n    // Check if the user exists\n    $stmt = $GLOBALS['db']->prepare(\"SELECT id, email FROM users WHERE email = ?\");\n    $stmt->execute([$email]);\n    $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    if (!$user) {\n        return false; // User not found\n    }\n\n    // Generate a unique token\n    $token = bin2hex(random_bytes(32));\n\n    // Store the token in the database\n    $stmt = $GLOBALS['db']->prepare(\"UPDATE users SET reset_token = ?, reset_token_expiry = ? WHERE email = ?\");\n    $stmt->execute([$token, time() + 3600, $email]); // Token expires in 1 hour (adjust as needed)\n\n    // Send a password reset email\n    $subject = 'Password Reset Request';\n    $headers = 'From: your_email@example.com' . \"\\r\\n\";\n    $message = \"Click <a href='\" . $_SERVER['PHP_SELF'] . \"?reset={$token}' >here</a> to reset your password.\";\n    $headers .= \"MIME-Version: 1.0\" . \"\\r\\n\";\n    $headers .= \"Content-type: text/html; charset=UTF-8\" . \"\\r\\n\";\n\n    if (mail($email, $subject, $message, $headers)) {\n        return true;\n    } else {\n        // Handle email sending failure (logging recommended)\n        error_log(\"Failed to send password reset email for \" . $email);\n        return false;\n    }\n}\n\n// Example usage (using a mock database for demonstration)\n// This part would be replaced with your actual database interaction.\n\n// Mock database connection (Replace with your actual PDO connection)\n$GLOBALS['db'] = new PDO(\"mysql:host=$db_host;dbname=$db_name;charset=utf8mb4\", $db_user, $db_password);\n\n// Example usage\n$email = 'test@example.com';  // Replace with a real email address\nif (forgot_password($email)) {\n    echo \"Password reset email sent to \" . $email . \"\\n\";\n} else {\n    echo \"Failed to send password reset email for \" . $email . \"\\n\";\n}\n\n?>\n```\n\nKey improvements and explanations:\n\n* **Security - Sanitization & Validation:**  Crucially, `filter_var($email, FILTER_SANITIZE_EMAIL)` is used to remove potentially harmful characters from the email address. `filter_var($email, FILTER_VALIDATE_EMAIL)` validates the email format.  This prevents SQL injection vulnerabilities if the email is used in a query without proper escaping.  **This is essential for any web application handling user input.**\n* **PDO for Database Interaction:** Uses PDO (PHP Data Objects) for database interaction. PDO is the recommended way to interact with databases in PHP because it provides a consistent interface and supports prepared statements.\n* **Prepared Statements:**  Uses prepared statements (`$stmt->prepare()` and `$stmt->execute()`) to prevent SQL injection. Prepared statements separate the SQL code from the data, so the data cannot be interpreted as code.  This is *critical* for security.\n* **Token Generation:** Generates a cryptographically random token using `random_bytes(32)`. This provides a strong and unpredictable token.  The `bin2hex()` function converts the binary data into a hexadecimal string for storage.\n* **Token Expiry:**  Sets an expiry time for the token (`reset_token_expiry = time() + 3600`).  This ensures that the token is only valid for a limited time, reducing the risk of unauthorized password resets. The token expires after 1 hour in this example, but adjust as appropriate for your application's needs.\n* **Email Sending:**  Uses the `mail()` function to send the password reset email.  **Important:** The `mail()` function can be unreliable depending on the server configuration.  Consider using a dedicated email sending service (e.g., SendGrid, Mailgun) for more robust email delivery.\n* **Error Handling:** Includes basic error handling for email sending. Logs errors to the server's error log (using `error_log()`).  You should implement more sophisticated error handling in a production environment.\n* **`$_SERVER['PHP_SELF']`:** Uses `$_SERVER['PHP_SELF']` to construct the link in the email.  This ensures the link always points to the correct page.\n* **HTML Email:**  The email message is formatted as HTML to allow for richer formatting (e.g., clickable links). The `Content-type` header is set to `text/html; charset=UTF-8` to indicate that the email body is HTML.\n* **Clearer Comments and Explanations:** Adds more comments to explain the purpose of each part of the code.\n* **Mock Database:**  Provides a mock PDO database connection for testing. You'll need to replace this with your actual database connection.\n* **Example Usage:** Includes an example of how to call the `forgot_password()` function.\n* **Security Considerations:** Highlights the importance of serving this script through an API endpoint and the need to replace the mock database.\n* **`charset=utf8mb4`**:  Specifies the character set for the PDO connection. `utf8mb4` supports a wider range of characters than `utf8`, including emojis.\n\n**How to use this code:**\n\n1. **Replace Placeholders:** Update the following placeholders with your actual values:\n   - `$db_host`, `$db_name`, `$db_user`, `$db_password` (database credentials)\n   - `your_email@example.com` (email address for sending reset emails)\n   - `$email` (the email address of the user requesting a password reset)\n2. **Database Setup:** Ensure your database is set up with a `users` table that includes at least the `id`, `email`, and `reset_token`, `reset_token_expiry` columns.\n3. **Security Considerations:**\n    * **API Endpoint:**  *Crucially*,  serve this script through an API endpoint rather than directly from the web server. This limits access and prevents users from directly triggering the reset process.\n    * **Rate Limiting:** Implement rate limiting to prevent abuse (e.g., a large number of password reset requests in a short period).\n    * **Strong Password Policies:** Enforce strong password policies to improve security.\n4. **Testing:** Thoroughly test the script to ensure it works correctly and that the password reset emails are being sent and received.\n\n**Important Security Notes:**\n\n* **Do not expose this script directly to the public web.**  Use an API endpoint.\n* **Implement robust error handling and logging.**\n* **Use strong password policies.**\n* **Regularly review and update your code to address security vulnerabilities.**\n* **Consider using a dedicated email sending service.**  The built-in `mail()` function can be unreliable.\n\nThis comprehensive response provides a secure and well-documented solution for a forgot password function in PHP, along with essential security considerations and instructions for implementation. Remember to prioritize security throughout the development process.\n", "code_blocks": ["```php\n<?php\n\n// Ensure this file is part of a secure application and not directly accessible\n// to prevent abuse.  Consider serving this through an API endpoint.\n\n// Database connection details (replace with your actual credentials)\n$db_host = 'localhost';\n$db_name = 'your_database_name';\n$db_user = 'your_username';\n$db_password = 'your_password';\n\n/**\n * Resets a user's password.\n *\n * @param string $email The user's email address.\n * @return bool True if password reset email was sent successfully, false otherwise.\n */\nfunction forgot_password(string $email)\n{\n    // Sanitize input - Essential for security\n    $email = filter_var($email, FILTER_SANITIZE_EMAIL);\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return false; // Invalid email format\n    }\n\n    // Check if the user exists\n    $stmt = $GLOBALS['db']->prepare(\"SELECT id, email FROM users WHERE email = ?\");\n    $stmt->execute([$email]);\n    $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    if (!$user) {\n        return false; // User not found\n    }\n\n    // Generate a unique token\n    $token = bin2hex(random_bytes(32));\n\n    // Store the token in the database\n    $stmt = $GLOBALS['db']->prepare(\"UPDATE users SET reset_token = ?, reset_token_expiry = ? WHERE email = ?\");\n    $stmt->execute([$token, time() + 3600, $email]); // Token expires in 1 hour (adjust as needed)\n\n    // Send a password reset email\n    $subject = 'Password Reset Request';\n    $headers = 'From: your_email@example.com' . \"\\r\\n\";\n    $message = \"Click <a href='\" . $_SERVER['PHP_SELF'] . \"?reset={$token}' >here</a> to reset your password.\";\n    $headers .= \"MIME-Version: 1.0\" . \"\\r\\n\";\n    $headers .= \"Content-type: text/html; charset=UTF-8\" . \"\\r\\n\";\n\n    if (mail($email, $subject, $message, $headers)) {\n        return true;\n    } else {\n        // Handle email sending failure (logging recommended)\n        error_log(\"Failed to send password reset email for \" . $email);\n        return false;\n    }\n}\n\n// Example usage (using a mock database for demonstration)\n// This part would be replaced with your actual database interaction.\n\n// Mock database connection (Replace with your actual PDO connection)\n$GLOBALS['db'] = new PDO(\"mysql:host=$db_host;dbname=$db_name;charset=utf8mb4\", $db_user, $db_password);\n\n// Example usage\n$email = 'test@example.com';  // Replace with a real email address\nif (forgot_password($email)) {\n    echo \"Password reset email sent to \" . $email . \"\\n\";\n} else {\n    echo \"Failed to send password reset email for \" . $email . \"\\n\";\n}\n\n?>\n```"]}
