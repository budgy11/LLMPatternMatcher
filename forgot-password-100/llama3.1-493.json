{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how to create a \"forgot password\" functionality using PHP:\n\n**Note:** This is just an example, and you should adjust it according to your specific requirements.\n\n**Database Table Structure**\n\nAssuming you have a `users` table with the following structure:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL,\n  reset_token VARCHAR(255) DEFAULT NULL\n);\n```\n**PHP Code**\n\nCreate a new file called `forgot_password.php` and add the following code:\n```php\n<?php\n\n// Configuration\ndefine('RECOVERY_TOKEN_EXPIRY', 3600); // 1 hour in seconds\ndefine('MAX_RECOVERY_ATTEMPTS', 5);\n\n// Function to send password recovery email\nfunction send_recovery_email($email, $token) {\n  $subject = 'Reset your password';\n  $message = 'Click on the link below to reset your password: <a href=\"' . BASE_URL . '/reset_password.php?token=' . $token . '\">Reset Password</a>';\n  mail($email, $subject, $message);\n}\n\n// Function to generate recovery token\nfunction generate_recovery_token() {\n  return bin2hex(random_bytes(32));\n}\n\n// Handle forgot password form submission\nif (isset($_POST['forgot_password'])) {\n  $email = trim($_POST['email']);\n\n  // Validate email address\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo 'Invalid email address.';\n    exit;\n  }\n\n  // Check if user exists\n  $user = db_query(\"SELECT * FROM users WHERE email = ?\", array($email));\n  if (!$user) {\n    echo 'No account found with that email address.';\n    exit;\n  }\n\n  // Generate recovery token\n  $token = generate_recovery_token();\n\n  // Update user's reset token\n  db_update('users', array('reset_token' => $token), array('id' => $user->id));\n\n  // Send password recovery email\n  send_recovery_email($email, $token);\n\n  echo 'A password recovery email has been sent to your registered email address.';\n}\n```\n**HTML Form**\n\nCreate a new file called `forgot_password.html` and add the following code:\n```html\n<form action=\"forgot_password.php\" method=\"post\">\n  <label for=\"email\">Email:</label>\n  <input type=\"text\" id=\"email\" name=\"email\">\n  <button type=\"submit\" name=\"forgot_password\">Send Recovery Email</button>\n</form>\n```\n**Database Functions**\n\nCreate a new file called `db_functions.php` and add the following code:\n```php\n<?php\n\n// Function to query database\nfunction db_query($query, $params) {\n  global $db;\n  try {\n    $stmt = $db->prepare($query);\n    $stmt->execute($params);\n    return $stmt->fetch();\n  } catch (PDOException $e) {\n    echo 'Database error: ' . $e->getMessage();\n    exit;\n  }\n}\n\n// Function to update database\nfunction db_update($table, $data, $conditions) {\n  global $db;\n  try {\n    $query = \"UPDATE $table SET \";\n    foreach ($data as $field => $value) {\n      $query .= \"$field = :$field, \";\n    }\n    $query .= \"WHERE id = :id\";\n    $stmt = $db->prepare($query);\n    $stmt->execute(array_merge($conditions, array_intersect_key($data, function($k) { return !in_array($k, ['id']); })));\n  } catch (PDOException $e) {\n    echo 'Database error: ' . $e->getMessage();\n    exit;\n  }\n}\n```\n**Usage**\n\n1. Create a new file called `config.php` and add the following code:\n```php\n<?php\n\n// Database configuration\ndefine('DB_HOST', 'your_host');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Base URL\ndefine('BASE_URL', 'http://example.com');\n```\n2. Replace the placeholders with your actual database credentials and base URL.\n3. Open a web browser and navigate to `http://example.com/forgot_password.php`.\n4. Fill in your email address and submit the form.\n5. Check your registered email address for the password recovery email.\n\n**Security Notes**\n\n* Make sure to hash and salt the user's password using a strong algorithm like bcrypt.\n* Use HTTPS (SSL/TLS) to encrypt communication between the client and server.\n* Implement rate limiting on the forgot password functionality to prevent brute-force attacks.", "code_blocks": [null, "```php\n<?php\n\n// Configuration\ndefine('RECOVERY_TOKEN_EXPIRY', 3600); // 1 hour in seconds\ndefine('MAX_RECOVERY_ATTEMPTS', 5);\n\n// Function to send password recovery email\nfunction send_recovery_email($email, $token) {\n  $subject = 'Reset your password';\n  $message = 'Click on the link below to reset your password: <a href=\"' . BASE_URL . '/reset_password.php?token=' . $token . '\">Reset Password</a>';\n  mail($email, $subject, $message);\n}\n\n// Function to generate recovery token\nfunction generate_recovery_token() {\n  return bin2hex(random_bytes(32));\n}\n\n// Handle forgot password form submission\nif (isset($_POST['forgot_password'])) {\n  $email = trim($_POST['email']);\n\n  // Validate email address\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo 'Invalid email address.';\n    exit;\n  }\n\n  // Check if user exists\n  $user = db_query(\"SELECT * FROM users WHERE email = ?\", array($email));\n  if (!$user) {\n    echo 'No account found with that email address.';\n    exit;\n  }\n\n  // Generate recovery token\n  $token = generate_recovery_token();\n\n  // Update user's reset token\n  db_update('users', array('reset_token' => $token), array('id' => $user->id));\n\n  // Send password recovery email\n  send_recovery_email($email, $token);\n\n  echo 'A password recovery email has been sent to your registered email address.';\n}\n```", null, "```php\n<?php\n\n// Function to query database\nfunction db_query($query, $params) {\n  global $db;\n  try {\n    $stmt = $db->prepare($query);\n    $stmt->execute($params);\n    return $stmt->fetch();\n  } catch (PDOException $e) {\n    echo 'Database error: ' . $e->getMessage();\n    exit;\n  }\n}\n\n// Function to update database\nfunction db_update($table, $data, $conditions) {\n  global $db;\n  try {\n    $query = \"UPDATE $table SET \";\n    foreach ($data as $field => $value) {\n      $query .= \"$field = :$field, \";\n    }\n    $query .= \"WHERE id = :id\";\n    $stmt = $db->prepare($query);\n    $stmt->execute(array_merge($conditions, array_intersect_key($data, function($k) { return !in_array($k, ['id']); })));\n  } catch (PDOException $e) {\n    echo 'Database error: ' . $e->getMessage();\n    exit;\n  }\n}\n```", "```php\n<?php\n\n// Database configuration\ndefine('DB_HOST', 'your_host');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Base URL\ndefine('BASE_URL', 'http://example.com');\n```"]}
