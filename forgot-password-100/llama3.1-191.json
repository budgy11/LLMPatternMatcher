{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how you can create a \"forgot password\" function in PHP. This script will send an email to the user with a link that they can use to reset their password.\n\n**Note:** Before running this code, make sure you have a database set up and configured for your PHP application. You'll also need to replace `your_database_connection_info` with your actual database connection information.\n\n### Database Setup\n\nFirst, let's assume we're using a MySQL database. We'll create two tables: `users` and `password_resets`.\n\n```sql\nCREATE TABLE users (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  email VARCHAR(255) NOT NULL UNIQUE,\n  password_hash CHAR(60) NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n\nCREATE TABLE password_resets (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  user_id INT,\n  reset_token VARCHAR(32),\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n\n### PHP Code\n\nNow, let's create the \"forgot password\" function in PHP.\n\n```php\n<?php\n\n// Configuration variables\ndefine('DB_HOST', 'your_database_host');\ndefine('DB_USER', 'your_database_username');\ndefine('DB_PASSWORD', 'your_database_password');\ndefine('DB_NAME', 'your_database_name');\n\n// Database connection\nfunction connectToDatabase() {\n  global $dbConnection;\n  try {\n    $dbConnection = new PDO(\"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME, DB_USER, DB_PASSWORD);\n    $dbConnection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  } catch (PDOException $e) {\n    echo \"Error connecting to database: \" . $e->getMessage();\n    exit;\n  }\n}\n\n// Forgot password function\nfunction forgotPassword($email) {\n  global $dbConnection;\n\n  // Check if user exists\n  $stmt = $dbConnection->prepare(\"SELECT * FROM users WHERE email = ?\");\n  $stmt->execute([$email]);\n  $user = $stmt->fetch();\n\n  if (!$user) {\n    echo \"User not found.\";\n    return false;\n  }\n\n  // Generate random reset token\n  $resetToken = substr(bin2hex(random_bytes(32)), 0, 32);\n  $token = md5($resetToken);\n\n  try {\n    // Insert reset token into database\n    $stmt = $dbConnection->prepare(\"INSERT INTO password_resets (user_id, reset_token) VALUES (?, ?)\");\n    $stmt->execute([$user['id'], $token]);\n\n    // Send email with reset link\n    sendResetEmail($email, $resetToken);\n  } catch (PDOException $e) {\n    echo \"Error generating reset token: \" . $e->getMessage();\n    return false;\n  }\n\n  return true;\n}\n\n// Function to send password reset email\nfunction sendResetEmail($email, $token) {\n  // Email configuration variables\n  define('EMAIL_HOST', 'your_email_host');\n  define('EMAIL_PORT', 587);\n  define('EMAIL_USERNAME', 'your_email_username');\n  define('EMAIL_PASSWORD', 'your_email_password');\n\n  // Prepare email message\n  $subject = \"Reset Password\";\n  $message = \"Hello, click this link to reset your password: http://your-website.com/reset-password?token=\" . urlencode($token);\n\n  try {\n    // Send email using SMTP\n    $smtp = mail(EMAIL_HOST, EMAIL_PORT);\n    $smtp->setAuthMode('login');\n    $smtp->setUsername(EMAIL_USERNAME);\n    $smtp->setPassword(EMAIL_PASSWORD);\n    $smtp->send($email, $subject, $message);\n  } catch (Exception $e) {\n    echo \"Error sending email: \" . $e->getMessage();\n  }\n}\n\n// Usage\nconnectToDatabase();\nforgotPassword('example@example.com');\n\n?>\n```\n\nThis code assumes you have a `reset-password` page set up on your website to handle the password reset form. When the user submits the form, they'll be redirected to this page with their unique reset token as a query parameter.\n\nOn the `reset-password` page, you can verify the token and update the user's password using the following code:\n\n```php\n<?php\n\n// Verify reset token\n$token = $_GET['token'];\n$stmt = $dbConnection->prepare(\"SELECT * FROM password_resets WHERE reset_token = ?\");\n$stmt->execute([$token]);\n$reset = $stmt->fetch();\n\nif (!$reset) {\n  echo \"Invalid or expired token.\";\n  return;\n}\n\n// Update user's password\n$newPassword = 'newpassword';\n$passwordHash = password_hash($newPassword, PASSWORD_DEFAULT);\n\n$stmt = $dbConnection->prepare(\"UPDATE users SET password_hash = ? WHERE id = ?\");\n$stmt->execute([$passwordHash, $reset['user_id']]);\n\necho \"Password updated successfully.\";\n?>\n```\n\nRemember to replace the placeholders with your actual configuration variables and database connection information.", "code_blocks": [null, "```php\n<?php\n\n// Configuration variables\ndefine('DB_HOST', 'your_database_host');\ndefine('DB_USER', 'your_database_username');\ndefine('DB_PASSWORD', 'your_database_password');\ndefine('DB_NAME', 'your_database_name');\n\n// Database connection\nfunction connectToDatabase() {\n  global $dbConnection;\n  try {\n    $dbConnection = new PDO(\"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME, DB_USER, DB_PASSWORD);\n    $dbConnection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  } catch (PDOException $e) {\n    echo \"Error connecting to database: \" . $e->getMessage();\n    exit;\n  }\n}\n\n// Forgot password function\nfunction forgotPassword($email) {\n  global $dbConnection;\n\n  // Check if user exists\n  $stmt = $dbConnection->prepare(\"SELECT * FROM users WHERE email = ?\");\n  $stmt->execute([$email]);\n  $user = $stmt->fetch();\n\n  if (!$user) {\n    echo \"User not found.\";\n    return false;\n  }\n\n  // Generate random reset token\n  $resetToken = substr(bin2hex(random_bytes(32)), 0, 32);\n  $token = md5($resetToken);\n\n  try {\n    // Insert reset token into database\n    $stmt = $dbConnection->prepare(\"INSERT INTO password_resets (user_id, reset_token) VALUES (?, ?)\");\n    $stmt->execute([$user['id'], $token]);\n\n    // Send email with reset link\n    sendResetEmail($email, $resetToken);\n  } catch (PDOException $e) {\n    echo \"Error generating reset token: \" . $e->getMessage();\n    return false;\n  }\n\n  return true;\n}\n\n// Function to send password reset email\nfunction sendResetEmail($email, $token) {\n  // Email configuration variables\n  define('EMAIL_HOST', 'your_email_host');\n  define('EMAIL_PORT', 587);\n  define('EMAIL_USERNAME', 'your_email_username');\n  define('EMAIL_PASSWORD', 'your_email_password');\n\n  // Prepare email message\n  $subject = \"Reset Password\";\n  $message = \"Hello, click this link to reset your password: http://your-website.com/reset-password?token=\" . urlencode($token);\n\n  try {\n    // Send email using SMTP\n    $smtp = mail(EMAIL_HOST, EMAIL_PORT);\n    $smtp->setAuthMode('login');\n    $smtp->setUsername(EMAIL_USERNAME);\n    $smtp->setPassword(EMAIL_PASSWORD);\n    $smtp->send($email, $subject, $message);\n  } catch (Exception $e) {\n    echo \"Error sending email: \" . $e->getMessage();\n  }\n}\n\n// Usage\nconnectToDatabase();\nforgotPassword('example@example.com');\n\n?>\n```", "```php\n<?php\n\n// Verify reset token\n$token = $_GET['token'];\n$stmt = $dbConnection->prepare(\"SELECT * FROM password_resets WHERE reset_token = ?\");\n$stmt->execute([$token]);\n$reset = $stmt->fetch();\n\nif (!$reset) {\n  echo \"Invalid or expired token.\";\n  return;\n}\n\n// Update user's password\n$newPassword = 'newpassword';\n$passwordHash = password_hash($newPassword, PASSWORD_DEFAULT);\n\n$stmt = $dbConnection->prepare(\"UPDATE users SET password_hash = ? WHERE id = ?\");\n$stmt->execute([$passwordHash, $reset['user_id']]);\n\necho \"Password updated successfully.\";\n?>\n```"]}
