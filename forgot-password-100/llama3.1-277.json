{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of how you can create a \"forgot password\" function in PHP:\n\n**Database Schema**\n\nLet's assume we have a table called `users` with the following columns:\n\n| Column Name | Data Type |\n| --- | --- |\n| id | int (primary key) |\n| email | varchar(255) |\n| password | varchar(255) |\n\n**PHP Code**\n```php\n// forgot_password.php\n\n<?php\n\nrequire 'config.php'; // include your database configuration file\n\n// Check if the form has been submitted\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $email = $_POST['email'];\n    $token = bin2hex(random_bytes(16));\n\n    // Query to retrieve user's email and insert password reset token into a new table\n    $query = \"INSERT INTO password_reset_tokens (user_id, token) VALUES ((SELECT id FROM users WHERE email = ?), ?)\";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([$email, $token]);\n\n    // Send the password reset email to the user\n    $to = $email;\n    $subject = \"Reset your password\";\n    $body = \"\n        <p>Hello $name,</p>\n        <p>Click on the following link to reset your password: \n            <a href='http://example.com/reset-password.php?token=$token'>Reset Password</a>\n        </p>\n    \";\n\n    // Use a library like PHPMailer or sendmail to send the email\n    mail($to, $subject, $body);\n\n    echo \"Email sent successfully!\";\n} else {\n    // Display the forgot password form\n    ?>\n    <h1>Forgot Password?</h1>\n    <form action=\"\" method=\"post\">\n        <label for=\"email\">Email:</label>\n        <input type=\"text\" name=\"email\" id=\"email\"><br><br>\n        <input type=\"submit\" value=\"Submit\">\n    </form>\n    <?php\n}\n?>\n```\n**Reset Password Page**\n\nCreate another PHP file called `reset-password.php` that will contain the password reset form and logic:\n```php\n// reset-password.php\n\n<?php\n\nrequire 'config.php'; // include your database configuration file\n\n// Check if the token is valid\nif (isset($_GET['token'])) {\n    $token = $_GET['token'];\n    $query = \"SELECT * FROM password_reset_tokens WHERE token = ?\";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([$token]);\n\n    // Get the user's ID from the token\n    $user_id = $stmt->fetchColumn();\n\n    if ($user_id) {\n        // Display the reset password form\n        ?>\n        <h1>Reset Password</h1>\n        <form action=\"\" method=\"post\">\n            <label for=\"password\">New Password:</label>\n            <input type=\"text\" name=\"password\" id=\"password\"><br><br>\n            <label for=\"confirm_password\">Confirm New Password:</label>\n            <input type=\"text\" name=\"confirm_password\" id=\"confirm_password\"><br><br>\n            <input type=\"submit\" value=\"Submit\">\n        </form>\n\n        <?php\n    } else {\n        echo \"Invalid token!\";\n    }\n} else {\n    // Display an error message if the token is missing\n    echo \"Token not provided!\";\n}\n?>\n```\n**Reset Password Logic**\n\nWhen the user submits the reset password form, we need to update the `users` table with the new password. We'll use the same PHP code as above:\n```php\n// reset-password.php\n\n<?php\n\nrequire 'config.php'; // include your database configuration file\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $password = $_POST['password'];\n    $confirm_password = $_POST['confirm_password'];\n\n    if ($password === $confirm_password) {\n        // Update the user's password in the `users` table\n        $query = \"UPDATE users SET password = ? WHERE id = ?\";\n        $stmt = $pdo->prepare($query);\n        $stmt->execute([$password, $user_id]);\n\n        // Remove the password reset token from the database\n        $query = \"DELETE FROM password_reset_tokens WHERE user_id = ?\";\n        $stmt->execute([$user_id]);\n    } else {\n        echo \"Passwords do not match!\";\n    }\n}\n?>\n```\n**Security Notes**\n\n* Make sure to store the password reset tokens securely in a separate table.\n* Use secure password hashing and verification functions like `password_hash()` and `password_verify()`.\n* Validate user input on both the forgot password form and the reset password form.\n* Implement rate limiting or other security measures to prevent brute-force attacks.\n\nThis is a basic example, and you should adapt it to your specific use case. Additionally, consider implementing additional security features like email verification, CAPTCHA, or two-factor authentication.", "code_blocks": ["```php\n// forgot_password.php\n\n<?php\n\nrequire 'config.php'; // include your database configuration file\n\n// Check if the form has been submitted\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $email = $_POST['email'];\n    $token = bin2hex(random_bytes(16));\n\n    // Query to retrieve user's email and insert password reset token into a new table\n    $query = \"INSERT INTO password_reset_tokens (user_id, token) VALUES ((SELECT id FROM users WHERE email = ?), ?)\";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([$email, $token]);\n\n    // Send the password reset email to the user\n    $to = $email;\n    $subject = \"Reset your password\";\n    $body = \"\n        <p>Hello $name,</p>\n        <p>Click on the following link to reset your password: \n            <a href='http://example.com/reset-password.php?token=$token'>Reset Password</a>\n        </p>\n    \";\n\n    // Use a library like PHPMailer or sendmail to send the email\n    mail($to, $subject, $body);\n\n    echo \"Email sent successfully!\";\n} else {\n    // Display the forgot password form\n    ?>\n    <h1>Forgot Password?</h1>\n    <form action=\"\" method=\"post\">\n        <label for=\"email\">Email:</label>\n        <input type=\"text\" name=\"email\" id=\"email\"><br><br>\n        <input type=\"submit\" value=\"Submit\">\n    </form>\n    <?php\n}\n?>\n```", "```php\n// reset-password.php\n\n<?php\n\nrequire 'config.php'; // include your database configuration file\n\n// Check if the token is valid\nif (isset($_GET['token'])) {\n    $token = $_GET['token'];\n    $query = \"SELECT * FROM password_reset_tokens WHERE token = ?\";\n    $stmt = $pdo->prepare($query);\n    $stmt->execute([$token]);\n\n    // Get the user's ID from the token\n    $user_id = $stmt->fetchColumn();\n\n    if ($user_id) {\n        // Display the reset password form\n        ?>\n        <h1>Reset Password</h1>\n        <form action=\"\" method=\"post\">\n            <label for=\"password\">New Password:</label>\n            <input type=\"text\" name=\"password\" id=\"password\"><br><br>\n            <label for=\"confirm_password\">Confirm New Password:</label>\n            <input type=\"text\" name=\"confirm_password\" id=\"confirm_password\"><br><br>\n            <input type=\"submit\" value=\"Submit\">\n        </form>\n\n        <?php\n    } else {\n        echo \"Invalid token!\";\n    }\n} else {\n    // Display an error message if the token is missing\n    echo \"Token not provided!\";\n}\n?>\n```", "```php\n// reset-password.php\n\n<?php\n\nrequire 'config.php'; // include your database configuration file\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $password = $_POST['password'];\n    $confirm_password = $_POST['confirm_password'];\n\n    if ($password === $confirm_password) {\n        // Update the user's password in the `users` table\n        $query = \"UPDATE users SET password = ? WHERE id = ?\";\n        $stmt = $pdo->prepare($query);\n        $stmt->execute([$password, $user_id]);\n\n        // Remove the password reset token from the database\n        $query = \"DELETE FROM password_reset_tokens WHERE user_id = ?\";\n        $stmt->execute([$user_id]);\n    } else {\n        echo \"Passwords do not match!\";\n    }\n}\n?>\n```"]}
