{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// Database connection details (replace with your actual details)\n$host = 'localhost';\n$username = 'your_db_username';\n$password = 'your_db_password';\n$database = 'your_database_name';\n\n/**\n * Resets a user's password.\n *\n * @param string $email The email address of the user.\n * @return bool True if password reset email was sent successfully, false otherwise.\n */\nfunction forgotPassword($email) {\n  // Validate email format (basic check - you should use a more robust validation)\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    return false;\n  }\n\n  // 1. Check if the user exists\n  $conn = new mysqli($host, $username, $password, $database);\n\n  if ($conn->connect_error) {\n    error_log(\"Connection failed: \" . $conn->connect_error); // Log the error\n    return false;\n  }\n\n  $sql = \"SELECT id, email FROM users WHERE email = '$email'\";\n  $result = $conn->query($sql);\n\n  if ($result->num_rows > 0) {\n    $user_id = $result->fetch_assoc()['id']; // Get user ID\n    $user_email = $result->fetch_assoc()['email']; // Verify email\n    $conn->close(); // Close connection after fetching data\n\n    // 2. Generate a unique token/code\n    $reset_token = bin2hex(random_bytes(32));  // Securely generate a random token\n    // 3.  Create a token table (if it doesn't exist) and insert data\n    $reset_token_table_name = \"password_reset_tokens\"; //  Name of your table\n\n    // Check if the table exists, if not create it\n    $table_exists = $conn->query(\"SHOW TABLES LIKE '$reset_token_table_name'\");\n    if (!$table_exists->num_rows > 0) {\n        $sql_create_table = \"CREATE TABLE `$reset_token_table_name` (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            user_id INT NOT NULL,\n            token VARCHAR(32) NOT NULL UNIQUE,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        )\";\n        if (!$conn->query($sql_create_table)) {\n          error_log(\"Error creating table: \" . $conn->error);\n          return false;\n        }\n    }\n\n    $sql_insert_token = \"INSERT INTO `$reset_token_table_name` (user_id, token)\n                         VALUES ('$user_id', '$reset_token')\";\n\n    if (!$conn->query($sql_insert_token)) {\n       error_log(\"Error inserting token: \" . $conn->error);\n       return false;\n    }\n\n\n    // 4. Send a password reset email\n    $to = $email;\n    $subject = 'Password Reset';\n    $message = \"Click on this link to reset your password: \" . $_SERVER['REQUEST_SCHEME'] . '://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $reset_token;\n    $headers = \"From: your_email@example.com\";\n\n    if (mail($to, $subject, $message, $headers)) {\n      // Success!  Delete token after sending.  Important security measure.\n      $sql_delete_token = \"DELETE FROM `$reset_token_table_name` WHERE user_id = '$user_id' AND token = '$reset_token'\";\n      if (!$conn->query($sql_delete_token)) {\n        error_log(\"Error deleting token: \" . $conn->error);\n        //  Don't return false here - continue processing.  It's critical to\n        //  keep the account valid, even if deleting the token failed.\n      }\n      return true;\n    } else {\n      error_log(\"Failed to send email\"); // Log the failure\n      return false;\n    }\n  } else {\n    return false; // User not found\n  }\n  $conn->close();\n}\n\n\n// Example Usage (for testing -  DO NOT include this in your public facing code)\n//  This is only for demonstration and debugging.  In a real application,\n//  you'd handle this through a form submission.\n/*\n$email = \"test@example.com\"; // Replace with a valid email\nif (forgotPassword($email)) {\n  echo \"Password reset email sent to $email\";\n} else {\n  echo \"Failed to reset password for $email\";\n}\n*/\n?>\n```\n\nKey improvements and explanations:\n\n* **Security - Unique Tokens:**  This is *crucial*.  Using a unique token (generated using `random_bytes()` and `bin2hex()`) is the industry-standard way to handle password resets.  It prevents attackers from guessing valid tokens.  Using timestamps is *not* sufficient as an attacker could simply wait and retry.\n* **Token Table:**  The code now includes a `password_reset_tokens` table.  This table stores the relationship between the user and the reset token.  This is essential for security and proper implementation.  The table structure is:\n    * `id`: Auto-incrementing primary key.\n    * `user_id`: Foreign key linking to the `users` table.\n    * `token`: The unique token.\n    * `created_at`: Timestamp of when the token was created.\n* **Token Uniqueness:**  The `token` column in the `password_reset_tokens` table has a `UNIQUE` constraint, further protecting against duplicate tokens.\n* **Database Integration:**  The code demonstrates a proper connection to the database, handles connection errors, and closes the connection (`$conn->close()`).\n* **Error Logging:** Includes `error_log()` to log errors, making debugging much easier.  *Never* display raw error messages to the user in a production environment.\n* **Secure Token Generation:** Uses `random_bytes()` to generate a cryptographically secure random token, then `bin2hex()` to convert it to a string representation suitable for storage.\n* **Email Sending:**  Uses `mail()` to send the password reset email.  This is a common approach, but consider using a more robust email sending library (like PHPMailer) for better control and reliability.\n* **Email Content:** Provides a clear link to the `reset_password.php` script, including the token in the URL.\n* **Email Uniqueness Verification:**  The code checks to ensure the `email` is in the database.\n* **Token Deletion:**  *Critical*.  After the email has been sent, the code *deletes the token from the `password_reset_tokens` table*.  This is absolutely essential to prevent attackers from using a leaked token in the future.\n* **Clean Code and Comments:**  The code is well-formatted and includes comments explaining each step.\n* **Example Usage (Commented Out):**  The example usage is commented out to prevent accidental execution in a public-facing application. This is for demonstration and testing *only*.  You would normally handle this through a form submission.\n* **Proper HTTP Scheme**: The email content uses the correct HTTP scheme based on the request (`$_SERVER['REQUEST_SCHEME']`) for correct URL generation.\n* **No Session State:** This function does *not* rely on session state. It relies on the unique token for security.\n\n**Important Considerations and Next Steps:**\n\n1. **`reset_password.php` Script:** You'll need to create a `reset_password.php` script to handle the password reset process.  This script will:\n   * Verify the token in the URL.\n   * Update the user's password in the `users` table.\n   * Optionally, invalidate the token after a successful password reset.\n\n2. **Form Validation and Sanitization:**  You *must* validate and sanitize all user input on the client-side (JavaScript) and server-side (PHP) to prevent vulnerabilities like SQL injection.\n\n3. **Password Complexity:**  Enforce strong password policies in your application.\n\n4. **Email Sending Library (PHPMailer):**  For production environments, consider using a dedicated email sending library like PHPMailer, which provides more control over email sending, error handling, and attachment management.  PHPMailer is highly recommended.\n\n5. **Rate Limiting:** Implement rate limiting to prevent abuse of the password reset functionality.\n\n6. **User Experience:**  Make the password reset process as user-friendly as possible, with clear instructions and feedback.\n\n7. **Testing:** Thoroughly test the password reset functionality in a development environment before deploying it to production.\n\n8. **Security Audits:** Conduct regular security audits of your code to identify and address potential vulnerabilities.\n\n**Example `reset_password.php` Script (very basic - needs significant improvements for a real application):**\n\n```php\n<?php\n// Assuming you have the forgotPassword() function defined above.\n$host = 'localhost';\n$username = 'your_db_username';\n$password = 'your_db_password';\n$database = 'your_database_name';\n\n// Get the token from the URL\n$token = $_GET['token'];\n\n// Verify the token\n$conn = new mysqli($host, $username, $password, $database);\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n$sql = \"SELECT u.id, u.email FROM users u\n        INNER JOIN password_reset_tokens r ON u.id = r.user_id\n        WHERE r.token = '$token'\";\n\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    $user_id = $result->fetch_assoc()['id'];\n    $user_email = $result->fetch_assoc()['email'];\n\n    // Update password\n    $new_password = $_POST['new_password']; // Get new password from form\n    $sql_update = \"UPDATE users SET password = '$new_password' WHERE id = '$user_id'\";\n    if (!$conn->query($sql_update)) {\n        error_log(\"Error updating password: \" . $conn->error);\n    }\n\n    // Delete token after successful password update\n    $sql_delete_token = \"DELETE FROM password_reset_tokens WHERE user_id = '$user_id' AND token = '$token'\";\n    if (!$conn->query($sql_delete_token)) {\n        error_log(\"Error deleting token: \" . $conn->error);\n    }\n\n    echo \"Password reset successful.  Please log in with your new password.\";\n\n} else {\n    echo \"Invalid reset token.\";\n}\n\n$conn->close();\n?>\n```\n\n**Remember to replace the placeholder values (host, username, password, database) with your actual database credentials.**  And, as emphasized repeatedly,  *thoroughly test* this code in a development environment before deploying it to production.  The security considerations and best practices described above are absolutely critical for protecting your users' accounts.\n", "code_blocks": ["```php\n<?php\n\n// Database connection details (replace with your actual details)\n$host = 'localhost';\n$username = 'your_db_username';\n$password = 'your_db_password';\n$database = 'your_database_name';\n\n/**\n * Resets a user's password.\n *\n * @param string $email The email address of the user.\n * @return bool True if password reset email was sent successfully, false otherwise.\n */\nfunction forgotPassword($email) {\n  // Validate email format (basic check - you should use a more robust validation)\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    return false;\n  }\n\n  // 1. Check if the user exists\n  $conn = new mysqli($host, $username, $password, $database);\n\n  if ($conn->connect_error) {\n    error_log(\"Connection failed: \" . $conn->connect_error); // Log the error\n    return false;\n  }\n\n  $sql = \"SELECT id, email FROM users WHERE email = '$email'\";\n  $result = $conn->query($sql);\n\n  if ($result->num_rows > 0) {\n    $user_id = $result->fetch_assoc()['id']; // Get user ID\n    $user_email = $result->fetch_assoc()['email']; // Verify email\n    $conn->close(); // Close connection after fetching data\n\n    // 2. Generate a unique token/code\n    $reset_token = bin2hex(random_bytes(32));  // Securely generate a random token\n    // 3.  Create a token table (if it doesn't exist) and insert data\n    $reset_token_table_name = \"password_reset_tokens\"; //  Name of your table\n\n    // Check if the table exists, if not create it\n    $table_exists = $conn->query(\"SHOW TABLES LIKE '$reset_token_table_name'\");\n    if (!$table_exists->num_rows > 0) {\n        $sql_create_table = \"CREATE TABLE `$reset_token_table_name` (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            user_id INT NOT NULL,\n            token VARCHAR(32) NOT NULL UNIQUE,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        )\";\n        if (!$conn->query($sql_create_table)) {\n          error_log(\"Error creating table: \" . $conn->error);\n          return false;\n        }\n    }\n\n    $sql_insert_token = \"INSERT INTO `$reset_token_table_name` (user_id, token)\n                         VALUES ('$user_id', '$reset_token')\";\n\n    if (!$conn->query($sql_insert_token)) {\n       error_log(\"Error inserting token: \" . $conn->error);\n       return false;\n    }\n\n\n    // 4. Send a password reset email\n    $to = $email;\n    $subject = 'Password Reset';\n    $message = \"Click on this link to reset your password: \" . $_SERVER['REQUEST_SCHEME'] . '://' . $_SERVER['HTTP_HOST'] . '/reset_password.php?token=' . $reset_token;\n    $headers = \"From: your_email@example.com\";\n\n    if (mail($to, $subject, $message, $headers)) {\n      // Success!  Delete token after sending.  Important security measure.\n      $sql_delete_token = \"DELETE FROM `$reset_token_table_name` WHERE user_id = '$user_id' AND token = '$reset_token'\";\n      if (!$conn->query($sql_delete_token)) {\n        error_log(\"Error deleting token: \" . $conn->error);\n        //  Don't return false here - continue processing.  It's critical to\n        //  keep the account valid, even if deleting the token failed.\n      }\n      return true;\n    } else {\n      error_log(\"Failed to send email\"); // Log the failure\n      return false;\n    }\n  } else {\n    return false; // User not found\n  }\n  $conn->close();\n}\n\n\n// Example Usage (for testing -  DO NOT include this in your public facing code)\n//  This is only for demonstration and debugging.  In a real application,\n//  you'd handle this through a form submission.\n/*\n$email = \"test@example.com\"; // Replace with a valid email\nif (forgotPassword($email)) {\n  echo \"Password reset email sent to $email\";\n} else {\n  echo \"Failed to reset password for $email\";\n}\n*/\n?>\n```", "```php\n<?php\n// Assuming you have the forgotPassword() function defined above.\n$host = 'localhost';\n$username = 'your_db_username';\n$password = 'your_db_password';\n$database = 'your_database_name';\n\n// Get the token from the URL\n$token = $_GET['token'];\n\n// Verify the token\n$conn = new mysqli($host, $username, $password, $database);\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n$sql = \"SELECT u.id, u.email FROM users u\n        INNER JOIN password_reset_tokens r ON u.id = r.user_id\n        WHERE r.token = '$token'\";\n\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    $user_id = $result->fetch_assoc()['id'];\n    $user_email = $result->fetch_assoc()['email'];\n\n    // Update password\n    $new_password = $_POST['new_password']; // Get new password from form\n    $sql_update = \"UPDATE users SET password = '$new_password' WHERE id = '$user_id'\";\n    if (!$conn->query($sql_update)) {\n        error_log(\"Error updating password: \" . $conn->error);\n    }\n\n    // Delete token after successful password update\n    $sql_delete_token = \"DELETE FROM password_reset_tokens WHERE user_id = '$user_id' AND token = '$token'\";\n    if (!$conn->query($sql_delete_token)) {\n        error_log(\"Error deleting token: \" . $conn->error);\n    }\n\n    echo \"Password reset successful.  Please log in with your new password.\";\n\n} else {\n    echo \"Invalid reset token.\";\n}\n\n$conn->close();\n?>\n```"]}
