{"prompt": "Create a forgot password function using php", "llm_output": "Here's an example of how to create a \"Forgot Password\" functionality in PHP:\n\n**Database Schema**\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) UNIQUE NOT NULL,\n  password_hash VARCHAR(255) NOT NULL\n);\n```\n**PHP Code**\n\nCreate a new PHP file called `forgot_password.php` and add the following code:\n```php\n<?php\n\n// Configuration\ndefine('SECRET_KEY', 'your_secret_key_here');\ndefine('EMAIL_TEMPLATE', 'path/to/email/template.txt');\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  // Get email from form\n  $email = $_POST['email'];\n\n  // Validate email\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo 'Invalid email address';\n    exit;\n  }\n\n  // Find user by email\n  $user = findUserByEmail($email);\n\n  // If no user found, display error message\n  if (!$user) {\n    echo 'No account found with that email address';\n    exit;\n  }\n\n  // Generate reset token\n  $resetToken = generateResetToken();\n\n  // Store reset token in database\n  storeResetToken($user['id'], $resetToken);\n\n  // Send password reset email\n  sendPasswordResetEmail($email, $resetToken);\n}\n\n// Functions\n\nfunction findUserByEmail($email) {\n  global $conn;\n  $sql = 'SELECT * FROM users WHERE email = ?';\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param('s', $email);\n  $stmt->execute();\n  return $stmt->get_result()->fetch_assoc();\n}\n\nfunction generateResetToken() {\n  return bin2hex(random_bytes(32));\n}\n\nfunction storeResetToken($userId, $resetToken) {\n  global $conn;\n  $sql = 'INSERT INTO reset_tokens (user_id, token) VALUES (?, ?)';\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param('is', $userId, $resetToken);\n  $stmt->execute();\n}\n\nfunction sendPasswordResetEmail($email, $resetToken) {\n  global $emailTemplate;\n  $subject = 'Reset your password';\n  $body = str_replace('{{ reset_token }}', $resetToken, file_get_contents(EMAIL_TEMPLATE));\n  mail($email, $subject, $body);\n}\n```\n**Explanation**\n\nThis code assumes you have a `users` table in your database with columns for `id`, `email`, and `password_hash`. The `forgot_password.php` script will be responsible for generating a password reset token when the user submits their email address.\n\nHere's how it works:\n\n1. When the form is submitted, we check if the email address is valid using PHP's built-in filter.\n2. We find the user by their email address in the database using the `findUserByEmail` function.\n3. If no user is found, we display an error message and exit.\n4. We generate a password reset token using the `generateResetToken` function.\n5. We store the reset token in the database for the corresponding user ID using the `storeResetToken` function.\n6. Finally, we send a password reset email to the user with the reset token.\n\n**Example Use Case**\n\nWhen a user clicks on the \"Forgot Password\" link on your website, they will be taken to a form where they can enter their email address. Once submitted, the script will:\n\n1. Validate the email address\n2. Find the corresponding user in the database\n3. Generate and store a password reset token\n4. Send a password reset email with the reset token\n\nThe user can then use this reset token to reset their password by visiting a separate page where they will enter the reset token and new password.\n\n**Note**: This is just an example implementation, you should adapt it to your specific needs and database schema. Additionally, you may want to add additional security measures such as IP blocking or CAPTCHA verification to prevent abuse of the password reset feature.", "code_blocks": [null, "```php\n<?php\n\n// Configuration\ndefine('SECRET_KEY', 'your_secret_key_here');\ndefine('EMAIL_TEMPLATE', 'path/to/email/template.txt');\n\n// Check if form has been submitted\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  // Get email from form\n  $email = $_POST['email'];\n\n  // Validate email\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo 'Invalid email address';\n    exit;\n  }\n\n  // Find user by email\n  $user = findUserByEmail($email);\n\n  // If no user found, display error message\n  if (!$user) {\n    echo 'No account found with that email address';\n    exit;\n  }\n\n  // Generate reset token\n  $resetToken = generateResetToken();\n\n  // Store reset token in database\n  storeResetToken($user['id'], $resetToken);\n\n  // Send password reset email\n  sendPasswordResetEmail($email, $resetToken);\n}\n\n// Functions\n\nfunction findUserByEmail($email) {\n  global $conn;\n  $sql = 'SELECT * FROM users WHERE email = ?';\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param('s', $email);\n  $stmt->execute();\n  return $stmt->get_result()->fetch_assoc();\n}\n\nfunction generateResetToken() {\n  return bin2hex(random_bytes(32));\n}\n\nfunction storeResetToken($userId, $resetToken) {\n  global $conn;\n  $sql = 'INSERT INTO reset_tokens (user_id, token) VALUES (?, ?)';\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param('is', $userId, $resetToken);\n  $stmt->execute();\n}\n\nfunction sendPasswordResetEmail($email, $resetToken) {\n  global $emailTemplate;\n  $subject = 'Reset your password';\n  $body = str_replace('{{ reset_token }}', $resetToken, file_get_contents(EMAIL_TEMPLATE));\n  mail($email, $subject, $body);\n}\n```"]}
