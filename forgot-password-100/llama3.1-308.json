{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of how you can create a \"Forgot Password\" functionality in PHP:\n\n**Step 1: Database Schema**\n\nFirst, let's assume that we have the following database schema:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL\n);\n```\n**Step 2: PHP Code**\n\nCreate a new file called `forgot_password.php` and add the following code:\n```php\n<?php\n\n// Configuration\ndefine('PASSWORD_RESET_TOKEN_EXPIRATION', 3600); // 1 hour in seconds\ndefine('PASSWORD_RESET_TOKEN_SECRET', 'your_secret_key_here');\n\n// Function to generate password reset token\nfunction generate_reset_token($email) {\n  $token = bin2hex(random_bytes(32));\n  return array(\n    'token' => $token,\n    'expiration_time' => time() + PASSWORD_RESET_TOKEN_EXPIRATION\n  );\n}\n\n// Function to send email with reset link\nfunction send_password_reset_email($email, $reset_token) {\n  // Load email template (e.g. using Twig or Mustache)\n  $template = '\n  <p>Hello {{ name }},</p>\n  <p>Click the link below to reset your password:</p>\n  <a href=\"{{ link }}\">{{ link }}</a>\n  ';\n\n  // Replace placeholders\n  $template = str_replace('{{ name }}', 'John Doe', $template);\n  $template = str_replace('{{ link }}', 'http://example.com/reset-password?token=' . $reset_token, $template);\n\n  // Send email using your preferred library (e.g. PHPMailer)\n  // ...\n}\n\n// Handle forgot password request\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $email = $_POST['email'];\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo json_encode(array('error' => 'Invalid email'));\n    exit;\n  }\n\n  // Check if user exists\n  $user = db_query(\"SELECT * FROM users WHERE email = '$email'\");\n  if ($user->num_rows === 0) {\n    echo json_encode(array('error' => 'User not found'));\n    exit;\n  }\n\n  // Generate reset token\n  $reset_token_data = generate_reset_token($email);\n  $token = $reset_token_data['token'];\n  $expiration_time = $reset_token_data['expiration_time'];\n\n  // Save reset token in database (e.g. create a new table for tokens)\n  db_query(\"INSERT INTO password_reset_tokens (user_id, token, expiration_time) VALUES ('\" . $user->id . \"', '$token', '\" . $expiration_time . \"')\");\n\n  // Send email with reset link\n  send_password_reset_email($email, $token);\n\n  echo json_encode(array('success' => 'Email sent'));\n} else {\n  echo json_encode(array('error' => 'Invalid request method'));\n}\n```\n**Step 3: Frontend HTML**\n\nCreate an HTML form to collect the user's email address:\n```html\n<form action=\"forgot_password.php\" method=\"post\">\n  <input type=\"email\" name=\"email\" placeholder=\"Enter your email address\">\n  <button type=\"submit\">Send password reset link</button>\n</form>\n```\n**How it works:**\n\n1. When the user submits the form, the `forgot_password.php` script is executed.\n2. The script checks if the request method is POST and if the `email` field is valid.\n3. If the email is valid, the script checks if the user exists in the database.\n4. If the user exists, a password reset token is generated using the `generate_reset_token` function.\n5. The reset token is saved in the database along with the user's ID and expiration time.\n6. An email is sent to the user with a link to reset their password (using a template).\n7. The script returns a JSON response indicating success or an error message.\n\nNote that this example assumes you have a `db_query` function for interacting with your database, which should be replaced with your preferred database library (e.g., PDO). Additionally, the email template and sending logic are simplified for brevity; you may want to use a more robust email library like PHPMailer.", "code_blocks": [null, "```php\n<?php\n\n// Configuration\ndefine('PASSWORD_RESET_TOKEN_EXPIRATION', 3600); // 1 hour in seconds\ndefine('PASSWORD_RESET_TOKEN_SECRET', 'your_secret_key_here');\n\n// Function to generate password reset token\nfunction generate_reset_token($email) {\n  $token = bin2hex(random_bytes(32));\n  return array(\n    'token' => $token,\n    'expiration_time' => time() + PASSWORD_RESET_TOKEN_EXPIRATION\n  );\n}\n\n// Function to send email with reset link\nfunction send_password_reset_email($email, $reset_token) {\n  // Load email template (e.g. using Twig or Mustache)\n  $template = '\n  <p>Hello {{ name }},</p>\n  <p>Click the link below to reset your password:</p>\n  <a href=\"{{ link }}\">{{ link }}</a>\n  ';\n\n  // Replace placeholders\n  $template = str_replace('{{ name }}', 'John Doe', $template);\n  $template = str_replace('{{ link }}', 'http://example.com/reset-password?token=' . $reset_token, $template);\n\n  // Send email using your preferred library (e.g. PHPMailer)\n  // ...\n}\n\n// Handle forgot password request\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $email = $_POST['email'];\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo json_encode(array('error' => 'Invalid email'));\n    exit;\n  }\n\n  // Check if user exists\n  $user = db_query(\"SELECT * FROM users WHERE email = '$email'\");\n  if ($user->num_rows === 0) {\n    echo json_encode(array('error' => 'User not found'));\n    exit;\n  }\n\n  // Generate reset token\n  $reset_token_data = generate_reset_token($email);\n  $token = $reset_token_data['token'];\n  $expiration_time = $reset_token_data['expiration_time'];\n\n  // Save reset token in database (e.g. create a new table for tokens)\n  db_query(\"INSERT INTO password_reset_tokens (user_id, token, expiration_time) VALUES ('\" . $user->id . \"', '$token', '\" . $expiration_time . \"')\");\n\n  // Send email with reset link\n  send_password_reset_email($email, $token);\n\n  echo json_encode(array('success' => 'Email sent'));\n} else {\n  echo json_encode(array('error' => 'Invalid request method'));\n}\n```", null]}
