{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of how you can create a \"forgot password\" function using PHP. This example uses email to send the new password and assumes that users have provided their email addresses when they signed up.\n\n**Database Schema**\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255),\n  email VARCHAR(255) UNIQUE NOT NULL,\n  password_hash VARCHAR(255)\n);\n```\n**Forgot Password PHP Script (forgot_password.php)**\n```php\n<?php\n\n// Configuration settings\ndefine('EMAIL_ADDRESS', 'admin@example.com'); // Email address to send emails from\ndefine('SITE_NAME', 'Your Website Name'); // Website name\n\n// Check if the form has been submitted\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  $email = $_POST['email'];\n  \n  // Validate email address\n  if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo \"Invalid email address.\";\n    exit;\n  }\n  \n  // Get user details from database\n  $db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n  $stmt = $db->prepare(\"SELECT * FROM users WHERE email = :email\");\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  \n  // If user exists\n  if ($user = $stmt->fetch()) {\n    // Generate a new password and store it in the database\n    $new_password = generatePassword();\n    $hashed_new_password = password_hash($new_password, PASSWORD_DEFAULT);\n    \n    // Update user's password in database\n    $update_stmt = $db->prepare(\"UPDATE users SET password_hash = :password WHERE email = :email\");\n    $update_stmt->bindParam(':password', $hashed_new_password);\n    $update_stmt->bindParam(':email', $email);\n    $update_stmt->execute();\n    \n    // Send the new password to user via email\n    sendEmail($user['username'], $new_password, $email);\n  } else {\n    echo \"User does not exist.\";\n  }\n}\n\nfunction generatePassword() {\n  // Function to generate a strong password\n  $length = 12;\n  $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  $password = '';\n  for ($i = 0; $i < $length; $i++) {\n    $password .= substr($chars, rand(0, strlen($chars) - 1), 1);\n  }\n  return $password;\n}\n\nfunction sendEmail($username, $new_password, $email) {\n  // Function to send email\n  $subject = \"New Password for Your Account\";\n  $message = \"Hello $username,\\n\\nYour new password is: $new_password\\n\\nBest regards,\\n$SITE_NAME\";\n  \n  $headers = \"From: \" . EMAIL_ADDRESS . \"\\r\\n\";\n  $headers .= \"Content-type: text/html\\r\\n\";\n  \n  mail($email, $subject, $message, $headers);\n}\n\n?>\n```\n**Example Use Case**\n\n1. User clicks on the \"Forgot Password\" link.\n2. The user enters their email address in the form and submits it.\n3. If the email exists in the database, a new password is generated and sent to the user's email address via email.\n\nNote: This example uses the `password_hash` function to store passwords securely in the database. It also uses an external function (`generatePassword`) to generate strong, random passwords for users.", "code_blocks": [null, "```php\n<?php\n\n// Configuration settings\ndefine('EMAIL_ADDRESS', 'admin@example.com'); // Email address to send emails from\ndefine('SITE_NAME', 'Your Website Name'); // Website name\n\n// Check if the form has been submitted\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  $email = $_POST['email'];\n  \n  // Validate email address\n  if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo \"Invalid email address.\";\n    exit;\n  }\n  \n  // Get user details from database\n  $db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n  $stmt = $db->prepare(\"SELECT * FROM users WHERE email = :email\");\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  \n  // If user exists\n  if ($user = $stmt->fetch()) {\n    // Generate a new password and store it in the database\n    $new_password = generatePassword();\n    $hashed_new_password = password_hash($new_password, PASSWORD_DEFAULT);\n    \n    // Update user's password in database\n    $update_stmt = $db->prepare(\"UPDATE users SET password_hash = :password WHERE email = :email\");\n    $update_stmt->bindParam(':password', $hashed_new_password);\n    $update_stmt->bindParam(':email', $email);\n    $update_stmt->execute();\n    \n    // Send the new password to user via email\n    sendEmail($user['username'], $new_password, $email);\n  } else {\n    echo \"User does not exist.\";\n  }\n}\n\nfunction generatePassword() {\n  // Function to generate a strong password\n  $length = 12;\n  $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  $password = '';\n  for ($i = 0; $i < $length; $i++) {\n    $password .= substr($chars, rand(0, strlen($chars) - 1), 1);\n  }\n  return $password;\n}\n\nfunction sendEmail($username, $new_password, $email) {\n  // Function to send email\n  $subject = \"New Password for Your Account\";\n  $message = \"Hello $username,\\n\\nYour new password is: $new_password\\n\\nBest regards,\\n$SITE_NAME\";\n  \n  $headers = \"From: \" . EMAIL_ADDRESS . \"\\r\\n\";\n  $headers .= \"Content-type: text/html\\r\\n\";\n  \n  mail($email, $subject, $message, $headers);\n}\n\n?>\n```"]}
