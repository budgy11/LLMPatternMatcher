{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// Assuming you have a database connection established, let's call it $db\n\n// Function to handle the forgot password flow\nfunction forgotPassword($email) {\n    // 1. Validate Email\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return \"Invalid email format.\";\n    }\n\n    // 2. Check if the email exists in the users table\n    $stmt = $db->prepare(\"SELECT id, password_reset_token FROM users WHERE email = ?\");\n    $stmt->execute([$email]);\n    $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    if (!$user) {\n        return \"User not found.\";\n    }\n\n    // 3. Generate a unique token\n    $token = bin2hex(random_bytes(32)); // Secure random token\n\n    // 4.  Update user's record with the token\n    $stmt = $db->prepare(\"UPDATE users SET password_reset_token = ? WHERE email = ?\");\n    $stmt->execute([$token, $email]);\n\n    // 5.  Send an email with the reset link\n    $subject = \"Password Reset Link\";\n    $to = $email;\n    $from = \"your_email@example.com\"; // Replace with your actual email address\n    $resetLink = \"http://yourwebsite.com/reset_password?token=$token\"; // Replace with your website URL\n\n    $headers = \"From: \" . $from . \"\\r\\n\";\n    $headers .= \"Reply-To: \" . $from . \"\\r\\n\";\n    $headers .= \"Content-Type: text/html; charset=UTF-8\\r\\n\";\n\n    $message = \"<html><body>\";\n    $message .= \"<h1>Password Reset</h1>\";\n    $message .= \"<p>Click on the link below to reset your password:</p>\";\n    $message .= \"<a href='\" . $resetLink . \"'>Reset Password</a>\";\n    $message .= \"<p>This link will expire in 24 hours.</p>\";\n    $message .= \"</body></html>\";\n\n    if (mail($to, $subject, $message, $headers)) {\n        return \"Password reset email sent to $email. Please check your inbox.\";\n    } else {\n        return \"Failed to send password reset email.\";\n    }\n}\n\n// Example Usage (Assuming you have a form to submit the email)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $email = $_POST[\"email\"];\n    $result = forgotPassword($email);\n    echo \"<p>\" . $result . \"</p>\";\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n\n    <h1>Forgot Password</h1>\n\n    <form method=\"post\" action=\"\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Security:**\n    * **`bin2hex(random_bytes(32))`:**  Uses `random_bytes()` to generate cryptographically secure random tokens. This is *crucial* for security.  Don't use `rand()` or similar functions for token generation.  `bin2hex()` converts the random bytes to a hexadecimal string, providing a much more secure token.\n    * **SQL Prepared Statements:**  Using `$db->prepare()` and `$stmt->execute()` is *essential* to prevent SQL injection vulnerabilities.  Never directly include user input in your SQL queries.\n    * **Token Expiration:** The reset link will expire after 24 hours, enhancing security.  You need to implement logic in the `reset_password` page to verify and invalidate the token after it expires.\n\n* **Error Handling:**\n   * Checks for invalid email format using `filter_var()` with `FILTER_VALIDATE_EMAIL`.\n   * Returns informative messages if the user is not found or if there's an error sending the email.\n\n* **Email Sending:**\n    * Uses `mail()` function to send the password reset email.  *Note:* `mail()` can be unreliable across different servers. Consider using a dedicated email sending library or service (e.g., PHPMailer, SwiftMailer) for more robust and configurable email sending.\n    * Includes HTML formatting in the email message for a better user experience.  The `Content-Type` header is set to `text/html` to ensure proper rendering of HTML tags.\n    * Sets `From`, `Reply-To`, and `Content-Type` headers for the email.\n\n* **Clearer Code Structure:**\n    * The code is well-commented and easier to understand.\n    * The function encapsulates the entire password reset logic.\n\n* **Example Usage:**\n   * Includes a basic HTML form to submit the email address.\n\n* **Important Considerations and Next Steps (Beyond this code):**\n\n   1. **`reset_password` Page:**  You *must* create a separate page (`reset_password.php`) to handle the user's password reset. This page will:\n      * Verify the token from the URL.\n      * Allow the user to enter a new password.\n      * Update the user's password in the database.\n      * *Invalidate* the token after the user successfully updates their password (this prevents the token from being used again).\n\n   2. **Email Sending Library (Recommended):**  Using `mail()` directly can be unreliable. A dedicated email library is *highly* recommended:\n      * **PHPMailer:**  A popular, easy-to-use library: `https://pepsite.org/peps/PHPMailer/`\n      * **SwiftMailer:**  More complex, but very powerful: `https://swiftmailer.org/`\n\n   3. **Token Expiration Implementation:**  The most important security aspect.  In the `reset_password.php` page:\n      * Check if the token is valid (exists in the database).\n      * Check if the token has expired (e.g., check the timestamp associated with the token).\n      * After successful password reset, *delete* or *invalidate* the token from the database to prevent reuse.  The safest approach is to delete the `password_reset_token` column from the `users` table.\n\n   4. **Logging:** Add logging to track password reset requests, errors, and successes for debugging and security monitoring.\n\n   5. **Rate Limiting:**  Implement rate limiting to prevent brute-force attacks on the password reset functionality.\n\n   6. **User Experience:**  Provide clear instructions and feedback to the user throughout the password reset process.\n\nHow to Use:\n\n1.  **Save the Code:** Save the first code snippet as `forgot_password.php`.\n2.  **Create the HTML Form:** Create the HTML form (the second code snippet) and save it as `forgot_password.html` (or something similar).\n3.  **Place Files:** Put the HTML form file in the same directory as the `forgot_password.php` file.\n4.  **Link the Form:** Link the HTML form to the `forgot_password.php` file (e.g., `<img src=\"forgot_password.php\" ...>` \u2013 you'll need to adapt the `src` attribute for your web server setup).\n\nThis revised response provides a much more secure and robust starting point for implementing a forgotten password functionality in your PHP application.  Remember to address the \"Next Steps\" considerations for a production-ready solution.\n", "code_blocks": ["```php\n<?php\n\n// Assuming you have a database connection established, let's call it $db\n\n// Function to handle the forgot password flow\nfunction forgotPassword($email) {\n    // 1. Validate Email\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return \"Invalid email format.\";\n    }\n\n    // 2. Check if the email exists in the users table\n    $stmt = $db->prepare(\"SELECT id, password_reset_token FROM users WHERE email = ?\");\n    $stmt->execute([$email]);\n    $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    if (!$user) {\n        return \"User not found.\";\n    }\n\n    // 3. Generate a unique token\n    $token = bin2hex(random_bytes(32)); // Secure random token\n\n    // 4.  Update user's record with the token\n    $stmt = $db->prepare(\"UPDATE users SET password_reset_token = ? WHERE email = ?\");\n    $stmt->execute([$token, $email]);\n\n    // 5.  Send an email with the reset link\n    $subject = \"Password Reset Link\";\n    $to = $email;\n    $from = \"your_email@example.com\"; // Replace with your actual email address\n    $resetLink = \"http://yourwebsite.com/reset_password?token=$token\"; // Replace with your website URL\n\n    $headers = \"From: \" . $from . \"\\r\\n\";\n    $headers .= \"Reply-To: \" . $from . \"\\r\\n\";\n    $headers .= \"Content-Type: text/html; charset=UTF-8\\r\\n\";\n\n    $message = \"<html><body>\";\n    $message .= \"<h1>Password Reset</h1>\";\n    $message .= \"<p>Click on the link below to reset your password:</p>\";\n    $message .= \"<a href='\" . $resetLink . \"'>Reset Password</a>\";\n    $message .= \"<p>This link will expire in 24 hours.</p>\";\n    $message .= \"</body></html>\";\n\n    if (mail($to, $subject, $message, $headers)) {\n        return \"Password reset email sent to $email. Please check your inbox.\";\n    } else {\n        return \"Failed to send password reset email.\";\n    }\n}\n\n// Example Usage (Assuming you have a form to submit the email)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $email = $_POST[\"email\"];\n    $result = forgotPassword($email);\n    echo \"<p>\" . $result . \"</p>\";\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n\n    <h1>Forgot Password</h1>\n\n    <form method=\"post\" action=\"\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n\n</body>\n</html>\n```"]}
