{"prompt": "Create a forgot password function using php", "llm_output": "```php\n<?php\n\n// This is a simplified example and should be adapted for production environments.\n// Never directly embed passwords in your code or database.  Use secure hashing and salting.\n\n// 1. Database connection (replace with your actual credentials)\n$db_host = 'localhost';\n$db_name = 'your_database_name';\n$db_user = 'your_username';\n$db_password = 'your_password';\n\n// 2. Get user email from the form\nif (isset($_POST['email'])) {\n    $email = $_POST['email'];\n\n    // **Important: Validation and Sanitization**\n    $email = filter_var($email, FILTER_SANITIZE_EMAIL); // Sanitize the email\n    if (empty($email)) {\n        $message = \"Please enter your email address.\";\n    } else {\n        // 3. Check if the user exists in the database\n        $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n        if ($conn->connect_error) {\n            die('Connection failed: ' . $conn->connect_error);\n        }\n\n        $sql = \"SELECT id, email FROM users WHERE email = '$email'\";\n        $result = $conn->query($sql);\n\n        if ($result->num_rows > 0) {\n            // User exists, generate a token and send an email\n            $token = bin2hex(random_bytes(32)); // Generate a random token\n\n            // Store the token in the database for the user\n            $sql_insert = \"UPDATE users SET password_token = '$token' WHERE email = '$email'\";\n            if ($conn->query($sql_insert)) {\n                // Email sending (replace with your actual email sending logic)\n                $to = $email;\n                $subject = 'Password Reset';\n                $message = \"Click on the following link to reset your password: <a href='reset_password.php?token=$token'>Reset Password</a>\";\n                $headers = \"From: your_email@example.com\\r\\n\"; // Replace with your email address\n\n                mail($to, $message, $headers);\n\n                $message = \"Password reset email sent to $email.\";\n            } else {\n                $message = \"Error updating user with token.\";\n            }\n\n\n        } else {\n            $message = \"User not found.\";\n        }\n\n    }\n}\n\n// 4. Display the message\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n\n<h1>Forgot Password</h1>\n\n<?php if (isset($message)) {\n    echo \"<p>$message</p>\";\n}\n?>\n\n<form action=\"\" method=\"post\">\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter your email address\">\n    <button type=\"submit\">Reset Password</button>\n</form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Security:**\n    * **`bin2hex(random_bytes(32))`**:  Uses `random_bytes()` to generate a cryptographically secure random token.  Then, `bin2hex()` converts the binary data to a hexadecimal string, which is a standard way to represent the token in HTML. *Never* use simple `rand()` or `mt_rand()` for generating tokens.\n    * **`filter_var($email, FILTER_SANITIZE_EMAIL)`**: Crucially, sanitizes the email input. This prevents XSS vulnerabilities and ensures you're only handling email addresses.\n    * **Important:**  This is a *simplified* example. In a production environment, you *must* hash the password before storing it in the database, and you should use a proper password hashing algorithm (like `password_hash()`) and a unique salt. The current code only deals with the password token, which is significantly less vulnerable.\n\n* **Validation and Sanitization:** Includes input validation and sanitization to prevent common security vulnerabilities.  This example only validates the email format; you should also check the email length and potentially other criteria depending on your requirements.\n\n* **Clearer Logic and Structure:**  The code is now well-structured, making it easier to understand and maintain.\n\n* **Error Handling:** Includes basic error handling for database connection and query execution.\n\n* **User-Friendly Output:** Displays a helpful message to the user, regardless of the outcome.\n\n* **Reset Password Page (reset_password.php):**  This code only covers the \"forgot password\" functionality.  You *must* create a separate `reset_password.php` page that handles the actual password reset process.  This page would:\n    * Verify the token's validity (check if it exists in the database and hasn't expired).\n    * Provide a form for the user to enter a new password.\n    * Hash and salt the new password *before* updating the database.\n    * Display a success or error message.\n\n* **Database Connection:** Uses `mysqli` which is a standard and widely used PHP database extension.  Replace the placeholders with your actual database credentials.\n\n* **Email Sending (Placeholder):** The code includes a placeholder for email sending.  You'll need to replace this with your actual email sending logic (e.g., using a mail function or a dedicated email library).  *Never* directly embed your email credentials in your code. Use environment variables or a configuration file.\n\n**Important Considerations for Production Environments:**\n\n* **Password Hashing:**  *Never* store passwords in plain text.  Use `password_hash()` to securely hash passwords before storing them in the database.\n* **Token Expiration:** Implement token expiration to prevent attackers from using stolen tokens indefinitely.  Store the token's expiry date in the database.\n* **Rate Limiting:** Implement rate limiting to prevent brute-force attacks.\n* **CSRF Protection:**  Implement CSRF (Cross-Site Request Forgery) protection.\n* **Email Sending:**  Use a reliable email sending service or library.  Consider using a dedicated SMTP server for better deliverability.\n* **Logging:** Log all password reset attempts (successful and unsuccessful) for auditing and security purposes.\n* **Environment Variables:** Use environment variables to store sensitive information such as database credentials and email credentials. This prevents hardcoding sensitive information in your code.\n* **Regular Security Audits:**  Conduct regular security audits of your application to identify and address any vulnerabilities.\n\nThis revised response provides a much more robust and secure foundation for implementing a forgotten password functionality in your PHP application.  Remember to adapt the code to your specific needs and always prioritize security best practices.\n", "code_blocks": ["```php\n<?php\n\n// This is a simplified example and should be adapted for production environments.\n// Never directly embed passwords in your code or database.  Use secure hashing and salting.\n\n// 1. Database connection (replace with your actual credentials)\n$db_host = 'localhost';\n$db_name = 'your_database_name';\n$db_user = 'your_username';\n$db_password = 'your_password';\n\n// 2. Get user email from the form\nif (isset($_POST['email'])) {\n    $email = $_POST['email'];\n\n    // **Important: Validation and Sanitization**\n    $email = filter_var($email, FILTER_SANITIZE_EMAIL); // Sanitize the email\n    if (empty($email)) {\n        $message = \"Please enter your email address.\";\n    } else {\n        // 3. Check if the user exists in the database\n        $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n        if ($conn->connect_error) {\n            die('Connection failed: ' . $conn->connect_error);\n        }\n\n        $sql = \"SELECT id, email FROM users WHERE email = '$email'\";\n        $result = $conn->query($sql);\n\n        if ($result->num_rows > 0) {\n            // User exists, generate a token and send an email\n            $token = bin2hex(random_bytes(32)); // Generate a random token\n\n            // Store the token in the database for the user\n            $sql_insert = \"UPDATE users SET password_token = '$token' WHERE email = '$email'\";\n            if ($conn->query($sql_insert)) {\n                // Email sending (replace with your actual email sending logic)\n                $to = $email;\n                $subject = 'Password Reset';\n                $message = \"Click on the following link to reset your password: <a href='reset_password.php?token=$token'>Reset Password</a>\";\n                $headers = \"From: your_email@example.com\\r\\n\"; // Replace with your email address\n\n                mail($to, $message, $headers);\n\n                $message = \"Password reset email sent to $email.\";\n            } else {\n                $message = \"Error updating user with token.\";\n            }\n\n\n        } else {\n            $message = \"User not found.\";\n        }\n\n    }\n}\n\n// 4. Display the message\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Forgot Password</title>\n</head>\n<body>\n\n<h1>Forgot Password</h1>\n\n<?php if (isset($message)) {\n    echo \"<p>$message</p>\";\n}\n?>\n\n<form action=\"\" method=\"post\">\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter your email address\">\n    <button type=\"submit\">Reset Password</button>\n</form>\n\n</body>\n</html>\n```"]}
