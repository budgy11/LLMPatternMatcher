{"prompt": "Create a forgot password function using php", "llm_output": "Here is an example of how to create a \"forgot password\" function using PHP:\n\n**Database Structure:**\n\nAssuming you have a database table named `users` with the following structure:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  email VARCHAR(255) UNIQUE NOT NULL,\n  password_hash VARCHAR(255) NOT NULL\n);\n```\n**PHP Code:**\n```php\n// File: forgot_password.php\n\nrequire_once 'database.php'; // assume you have a database connection script\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $email = $_POST['email'];\n    \n    // Validate email input\n    if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo json_encode(array('error' => 'Invalid email address'));\n        exit;\n    }\n    \n    // Retrieve user data from database\n    $stmt = $db->prepare(\"SELECT * FROM users WHERE email = :email\");\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    \n    if ($stmt->rowCount() == 0) {\n        echo json_encode(array('error' => 'Email address not found'));\n        exit;\n    }\n    \n    // Generate new password and send reset link via email\n    $new_password = substr(md5(rand(0, 99999)), 0, 8); // generate a random password\n    $reset_link = \"http://example.com/reset-password.php?email=\" . urlencode($email) . \"&token=\" . md5($email);\n    \n    // Update user data in database with new password and reset token\n    $stmt = $db->prepare(\"UPDATE users SET password_hash = :new_password, reset_token = :reset_token WHERE email = :email\");\n    $stmt->bindParam(':new_password', $new_password);\n    $stmt->bindParam(':reset_token', md5($email));\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    \n    // Send email with reset link\n    $to = $email;\n    $subject = \"Reset your password\";\n    $body = \"Click the following link to reset your password: $reset_link\";\n    mail($to, $subject, $body);\n    \n    echo json_encode(array('success' => 'Email sent with reset link'));\n} else {\n    // Handle GET request (display form)\n    ?>\n    <h1>Forgot Password</h1>\n    <form method=\"post\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n        <button type=\"submit\">Send Reset Link</button>\n    </form>\n    <?php\n}\n```\n**Explanation:**\n\n1. The script first checks if the request is a POST, which means the user has submitted the forgot password form.\n2. It validates the email input to ensure it's not empty and in the correct format using PHP's `filter_var()` function.\n3. If the email address is valid, it retrieves the user data from the database using a prepared statement with the `email` parameter.\n4. If no user data is found for the provided email address, an error message is returned.\n5. A new random password is generated using MD5 and PHP's `rand()` function.\n6. The script then updates the user data in the database with the new password and a reset token (generated using MD5).\n7. Finally, it sends an email to the user with a link to reset their password.\n\n**Reset Password Page:**\n```php\n// File: reset-password.php\n\nrequire_once 'database.php';\n\nif ($_SERVER['REQUEST_METHOD'] == 'GET') {\n    $email = $_GET['email'];\n    $token = $_GET['token'];\n    \n    // Validate email and token inputs\n    if (empty($email) || empty($token)) {\n        echo json_encode(array('error' => 'Invalid request'));\n        exit;\n    }\n    \n    // Retrieve user data from database using reset token\n    $stmt = $db->prepare(\"SELECT * FROM users WHERE reset_token = :reset_token AND email = :email\");\n    $stmt->bindParam(':reset_token', $token);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    \n    if ($stmt->rowCount() == 0) {\n        echo json_encode(array('error' => 'Invalid reset token'));\n        exit;\n    }\n    \n    // Update user data in database with new password\n    $new_password = $_POST['new_password'];\n    \n    // Validate new password input\n    if (empty($new_password)) {\n        echo json_encode(array('error' => 'New password required'));\n        exit;\n    }\n    \n    // Hash new password using PHP's `password_hash()` function\n    $new_password_hash = password_hash($new_password, PASSWORD_DEFAULT);\n    \n    // Update user data in database with new password hash\n    $stmt = $db->prepare(\"UPDATE users SET password_hash = :new_password_hash WHERE email = :email\");\n    $stmt->bindParam(':new_password_hash', $new_password_hash);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    \n    echo json_encode(array('success' => 'Password updated successfully'));\n} else {\n    // Handle POST request (display form)\n    ?>\n    <h1>Reset Password</h1>\n    <form method=\"post\">\n        <label for=\"new_password\">New Password:</label>\n        <input type=\"password\" id=\"new_password\" name=\"new_password\"><br><br>\n        <button type=\"submit\">Update Password</button>\n    </form>\n    <?php\n}\n```\n**Explanation:**\n\n1. The script first checks if the request is a GET, which means the user has clicked on the reset link sent via email.\n2. It validates the `email` and `token` inputs to ensure they're not empty.\n3. If the inputs are valid, it retrieves the user data from the database using the reset token.\n4. If no user data is found for the provided email address and token, an error message is returned.\n5. A new password is input by the user in the form.\n6. The script updates the user data in the database with the new password hash using PHP's `password_hash()` function.\n\nNote: This is a basic example to illustrate how to create a forgot password feature using PHP. You should consider implementing additional security measures, such as:\n\n* Hashing and salting passwords\n* Validating user input (e.g., checking for SQL injection vulnerabilities)\n* Using HTTPS encryption for the entire application\n* Limiting login attempts and tracking suspicious activity\n* Storing reset tokens securely (e.g., using a secure token service)\n\nRemember to adjust this code according to your specific use case and database structure.", "code_blocks": [null, "```php\n// File: forgot_password.php\n\nrequire_once 'database.php'; // assume you have a database connection script\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $email = $_POST['email'];\n    \n    // Validate email input\n    if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo json_encode(array('error' => 'Invalid email address'));\n        exit;\n    }\n    \n    // Retrieve user data from database\n    $stmt = $db->prepare(\"SELECT * FROM users WHERE email = :email\");\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    \n    if ($stmt->rowCount() == 0) {\n        echo json_encode(array('error' => 'Email address not found'));\n        exit;\n    }\n    \n    // Generate new password and send reset link via email\n    $new_password = substr(md5(rand(0, 99999)), 0, 8); // generate a random password\n    $reset_link = \"http://example.com/reset-password.php?email=\" . urlencode($email) . \"&token=\" . md5($email);\n    \n    // Update user data in database with new password and reset token\n    $stmt = $db->prepare(\"UPDATE users SET password_hash = :new_password, reset_token = :reset_token WHERE email = :email\");\n    $stmt->bindParam(':new_password', $new_password);\n    $stmt->bindParam(':reset_token', md5($email));\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    \n    // Send email with reset link\n    $to = $email;\n    $subject = \"Reset your password\";\n    $body = \"Click the following link to reset your password: $reset_link\";\n    mail($to, $subject, $body);\n    \n    echo json_encode(array('success' => 'Email sent with reset link'));\n} else {\n    // Handle GET request (display form)\n    ?>\n    <h1>Forgot Password</h1>\n    <form method=\"post\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n        <button type=\"submit\">Send Reset Link</button>\n    </form>\n    <?php\n}\n```", "```php\n// File: reset-password.php\n\nrequire_once 'database.php';\n\nif ($_SERVER['REQUEST_METHOD'] == 'GET') {\n    $email = $_GET['email'];\n    $token = $_GET['token'];\n    \n    // Validate email and token inputs\n    if (empty($email) || empty($token)) {\n        echo json_encode(array('error' => 'Invalid request'));\n        exit;\n    }\n    \n    // Retrieve user data from database using reset token\n    $stmt = $db->prepare(\"SELECT * FROM users WHERE reset_token = :reset_token AND email = :email\");\n    $stmt->bindParam(':reset_token', $token);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    \n    if ($stmt->rowCount() == 0) {\n        echo json_encode(array('error' => 'Invalid reset token'));\n        exit;\n    }\n    \n    // Update user data in database with new password\n    $new_password = $_POST['new_password'];\n    \n    // Validate new password input\n    if (empty($new_password)) {\n        echo json_encode(array('error' => 'New password required'));\n        exit;\n    }\n    \n    // Hash new password using PHP's `password_hash()` function\n    $new_password_hash = password_hash($new_password, PASSWORD_DEFAULT);\n    \n    // Update user data in database with new password hash\n    $stmt = $db->prepare(\"UPDATE users SET password_hash = :new_password_hash WHERE email = :email\");\n    $stmt->bindParam(':new_password_hash', $new_password_hash);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    \n    echo json_encode(array('success' => 'Password updated successfully'));\n} else {\n    // Handle POST request (display form)\n    ?>\n    <h1>Reset Password</h1>\n    <form method=\"post\">\n        <label for=\"new_password\">New Password:</label>\n        <input type=\"password\" id=\"new_password\" name=\"new_password\"><br><br>\n        <button type=\"submit\">Update Password</button>\n    </form>\n    <?php\n}\n```"]}
