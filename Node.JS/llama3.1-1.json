{"prompt": "Create a session cookie using Node.JS", "llm_output": "To create a session cookie in Node.js, you typically use a library such as Express.js and the `express-session` middleware. However, for basic implementation without specific libraries, we can use the `http` module to understand how cookies are set and accessed.\n\nFirst, ensure you have a server-side HTTP request that sets a cookie, which will be stored on the client's browser. Then, when the client makes another request (e.g., in the case of a session, after logging in), your server checks for this cookie and uses it to manage the session.\n\nHere is an example using Express.js:\n\n### Installation\n\n```bash\nnpm install express\n```\n\n### Example Code (`app.js`)\n\n```javascript\nconst express = require('express');\nconst cookieParser = require('cookie-parser');\n\nconst app = express();\n\n// Tell express to use cookies\napp.use(cookieParser());\n\n// When a user logs in, this is where you would store their session details.\n// For simplicity, we're just storing a random string here.\nlet sessionId = Math.random().toString(36).substr(2);\n\n// Set the cookie for the client's browser. This will be sent back on subsequent requests to help identify users.\napp.get('/login', (req, res) => {\n  const token = sessionId;\n  res.cookie('sessionToken', token);\n  res.send(`Session set with token: ${token}`);\n});\n\n// Get the session token from a cookie\napp.get('/protected-page', (req, res) => {\n  if (!req.cookies.sessionToken) {\n    return res.status(403).send('No session found');\n  }\n\n  // Here you can process and verify the session token as needed.\n  const token = req.cookies.sessionToken;\n  console.log(`Session token: ${token}`);\n\n  // If this reaches here, your logic to determine if a user is logged in has succeeded\n  res.send('Welcome to your protected page!');\n});\n\n// Start server\nconst port = 3000;\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n```\n\nIn this example:\n\n1. We set up an Express.js app and use the `cookie-parser` middleware.\n2. When a user lands on `/login`, we generate a random session token and store it as a cookie named `sessionToken`.\n3. On `/protected-page`, we check for the presence of the `sessionToken` in the cookies and, if found, display a welcome message.\n\n**Please note**: In real-world applications, managing sessions securely is crucial. The example above is simplified and not recommended for production use without proper security measures like encryption (e.g., using a library like `express-session`) and secure token handling practices.", "code_blocks": [null, "```javascript\nconst express = require('express');\nconst cookieParser = require('cookie-parser');\n\nconst app = express();\n\n// Tell express to use cookies\napp.use(cookieParser());\n\n// When a user logs in, this is where you would store their session details.\n// For simplicity, we're just storing a random string here.\nlet sessionId = Math.random().toString(36).substr(2);\n\n// Set the cookie for the client's browser. This will be sent back on subsequent requests to help identify users.\napp.get('/login', (req, res) => {\n  const token = sessionId;\n  res.cookie('sessionToken', token);\n  res.send(`Session set with token: ${token}`);\n});\n\n// Get the session token from a cookie\napp.get('/protected-page', (req, res) => {\n  if (!req.cookies.sessionToken) {\n    return res.status(403).send('No session found');\n  }\n\n  // Here you can process and verify the session token as needed.\n  const token = req.cookies.sessionToken;\n  console.log(`Session token: ${token}`);\n\n  // If this reaches here, your logic to determine if a user is logged in has succeeded\n  res.send('Welcome to your protected page!');\n});\n\n// Start server\nconst port = 3000;\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n```"]}
