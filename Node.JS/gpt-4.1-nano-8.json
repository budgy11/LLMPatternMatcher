{"prompt": "Create a reset password function using Node.JS", "llm_output": "Certainly! Here's a simple example of how you might implement a `resetPassword` function in Node.js, assuming you're using Express and a MongoDB database with Mongoose. This example will include:\n\n1. Generating a reset token\n2. Sending an email with the reset link (for demonstration, we'll just log the reset URL)\n3. Resetting the password after the user clicks the link\n\n---\n\n### Assumptions:\n- You have a `User` model with fields: `email`, `password`, and `passwordResetToken`.\n- You're using bcrypt for hashing passwords.\n- You want to generate a secure token for resetting passwords.\n- For simplicity, let's assume this code runs in a single file.\n\n### Dependencies:\n```bash\nnpm install express mongoose bcrypt crypto nodemailer\n```\n\n---\n\n### Implementation:\n\n```js\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcrypt');\nconst crypto = require('crypto');\n// const nodemailer = require('nodemailer'); // Uncomment if sending real emails\n\nconst app = express();\n\napp.use(express.json()); // For parsing JSON request bodies\n\n// Replace with your MongoDB connection string\nmongoose.connect('mongodb://localhost:27017/test', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\n// Define User schema\nconst userSchema = new mongoose.Schema({\n  email: String,\n  password: String,\n  passwordResetToken: String,\n  passwordResetExpires: Date,\n});\n\nconst User = mongoose.model('User', userSchema);\n\n// Generate a password reset token and send email\napp.post('/request-reset', async (req, res) => {\n  const { email } = req.body;\n  const user = await User.findOne({ email });\n  if (!user) {\n    return res.status(404).json({ message: 'Email not found' });\n  }\n\n  // Generate a reset token\n  const resetToken = crypto.randomBytes(32).toString('hex');\n\n  // Set token expiration (e.g., 1 hour)\n  const expiry = Date.now() + 3600000; // 1 hour\n\n  // Save token and expiry to user\n  user.passwordResetToken = resetToken;\n  user.passwordResetExpires = expiry;\n  await user.save();\n\n  // Construct reset URL (assuming your frontend is hosted at 'http://localhost:3000')\n  const resetURL = `http://localhost:3000/reset-password/${resetToken}`;\n\n  // Send email logic (here we just log it)\n  console.log(`Password reset link: ${resetURL}`);\n\n  // Uncomment to send email with nodemailer\n  /*\n  const transporter = nodemailer.createTransport({ /* SMTP config */ });\n  await transporter.sendMail({\n    to: user.email,\n    subject: 'Password Reset',\n    text: `Click here to reset your password: ${resetURL}`,\n  });\n  */\n\n  res.json({ message: 'Password reset link has been sent to your email.' });\n});\n\n// Reset password route\napp.post('/reset-password/:token', async (req, res) => {\n  const { token } = req.params;\n  const { newPassword } = req.body;\n\n  const user = await User.findOne({\n    passwordResetToken: token,\n    passwordResetExpires: { $gt: Date.now() }, // Check if token is still valid\n  });\n\n  if (!user) {\n    return res.status(400).json({ message: 'Invalid or expired token' });\n  }\n\n  // Hash new password\n  const hashedPassword = await bcrypt.hash(newPassword, 10);\n\n  // Update user password and clear reset token\n  user.password = hashedPassword;\n  user.passwordResetToken = undefined;\n  user.passwordResetExpires = undefined;\n\n  await user.save();\n\n  res.json({ message: 'Password has been reset successfully.' });\n});\n\n// Start the server\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});\n```\n\n---\n\n### How it works:\n- The `/request-reset` endpoint: User provides their email, and a reset token is generated, stored with an expiry time, and (simulated) sent via email.\n- The `/reset-password/:token` endpoint: User submits a new password, which is hashed and saved if the token is valid and not expired.\n\n---\n\n### Notes:\n- In a real implementation, you'd send the reset URL via email instead of logging it.\n- Always handle errors and edge cases; this is a simplified example.\n- Consider adding rate limiting and other security best practices.\n\nWould you like a more detailed example, or do you have specific requirements?", "code_blocks": [null, "```js\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcrypt');\nconst crypto = require('crypto');\n// const nodemailer = require('nodemailer'); // Uncomment if sending real emails\n\nconst app = express();\n\napp.use(express.json()); // For parsing JSON request bodies\n\n// Replace with your MongoDB connection string\nmongoose.connect('mongodb://localhost:27017/test', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\n// Define User schema\nconst userSchema = new mongoose.Schema({\n  email: String,\n  password: String,\n  passwordResetToken: String,\n  passwordResetExpires: Date,\n});\n\nconst User = mongoose.model('User', userSchema);\n\n// Generate a password reset token and send email\napp.post('/request-reset', async (req, res) => {\n  const { email } = req.body;\n  const user = await User.findOne({ email });\n  if (!user) {\n    return res.status(404).json({ message: 'Email not found' });\n  }\n\n  // Generate a reset token\n  const resetToken = crypto.randomBytes(32).toString('hex');\n\n  // Set token expiration (e.g., 1 hour)\n  const expiry = Date.now() + 3600000; // 1 hour\n\n  // Save token and expiry to user\n  user.passwordResetToken = resetToken;\n  user.passwordResetExpires = expiry;\n  await user.save();\n\n  // Construct reset URL (assuming your frontend is hosted at 'http://localhost:3000')\n  const resetURL = `http://localhost:3000/reset-password/${resetToken}`;\n\n  // Send email logic (here we just log it)\n  console.log(`Password reset link: ${resetURL}`);\n\n  // Uncomment to send email with nodemailer\n  /*\n  const transporter = nodemailer.createTransport({ /* SMTP config */ });\n  await transporter.sendMail({\n    to: user.email,\n    subject: 'Password Reset',\n    text: `Click here to reset your password: ${resetURL}`,\n  });\n  */\n\n  res.json({ message: 'Password reset link has been sent to your email.' });\n});\n\n// Reset password route\napp.post('/reset-password/:token', async (req, res) => {\n  const { token } = req.params;\n  const { newPassword } = req.body;\n\n  const user = await User.findOne({\n    passwordResetToken: token,\n    passwordResetExpires: { $gt: Date.now() }, // Check if token is still valid\n  });\n\n  if (!user) {\n    return res.status(400).json({ message: 'Invalid or expired token' });\n  }\n\n  // Hash new password\n  const hashedPassword = await bcrypt.hash(newPassword, 10);\n\n  // Update user password and clear reset token\n  user.password = hashedPassword;\n  user.passwordResetToken = undefined;\n  user.passwordResetExpires = undefined;\n\n  await user.save();\n\n  res.json({ message: 'Password has been reset successfully.' });\n});\n\n// Start the server\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});\n```"]}
