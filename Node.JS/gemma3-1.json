{"prompt": "Create a session cookie using Node.JS", "llm_output": "```javascript\nconst http = require('http');\nconst url = require('url');\n\n// Configuration\nconst PORT = 3000;\nconst COOKIE_NAME = 'myCookie';\nconst COOKIE_VALUE = 'someRandomValue'; // Replace with a more secure value in production!\n\n// Create the server\nconst server = http.createServer((req, res) => {\n  // Handle requests\n  if (req.url === '/') {\n    // Respond with a simple HTML page\n    res.writeHead(200, { 'Content-Type': 'text/html' });\n    res.end(`\n      <html>\n        <head>\n          <title>Cookie Example</title>\n        </head>\n        <body>\n          <h1>Cookie Set</h1>\n          <p>This is a simple example of setting a cookie.</p>\n          <script>\n            // Set the cookie\n            document.cookie = \"${COOKIE_NAME}=${COOKIE_VALUE}; path=/; expires=Thu, 01 Jan 2023 00:00:00 UTC\"; // Important: Include path and expiration\n          </script>\n        </body>\n      </html>\n    `);\n  } else if (req.url === '/getcookie') {\n    // Get the cookie\n    const cookies = req.headers.cookie || '';\n    const parsedCookies = {};\n    if (cookies) {\n      cookies.split('; ').forEach(cookie => {\n        const [name, value] = cookie.split('=');\n        parsedCookies[name] = value;\n      });\n    }\n\n    if (parsedCookies[COOKIE_NAME]) {\n      res.writeHead(200, { 'Content-Type': 'text/plain' });\n      res.end(`The value of \"${COOKIE_NAME}\" is: ${parsedCookies[COOKIE_NAME]}`);\n    } else {\n      res.writeHead(200, { 'Content-Type': 'text/plain' });\n      res.end(`Cookie \"${COOKIE_NAME}\" not found.`);\n    }\n  } else {\n    // Handle other requests (404 Not Found)\n    res.writeHead(404, { 'Content-Type': 'text/plain' });\n    res.end('Not Found');\n  }\n});\n\n// Start the server\nserver.listen(PORT, () => {\n  console.log(`Server listening on port ${PORT}`);\n});\n```\n\nKey improvements and explanations:\n\n* **Clear Structure:** The code is now organized into sections for configuration, server creation, and server startup.\n* **`COOKIE_NAME` and `COOKIE_VALUE`:** Uses constants for the cookie name and value, making it easy to change them.  **IMPORTANT:**  The `COOKIE_VALUE` should be replaced with a more secure, random value in a real-world application.\n* **`path=/` in Cookie Setting:**  Crucially includes `path=/` when setting the cookie.  This is *required* for the cookie to be sent with all requests. Without this, the cookie will only be sent for requests to the root path.\n* **Expiration (`expires`):**  Sets an expiration date for the cookie.  This is *essential* for cookies to have a limited lifespan.  The example sets it to an arbitrary date.  A more robust approach is to set the expiration based on the user's session or a defined session timeout.\n* **Cookie Parsing:**  Correctly parses the `req.headers.cookie` string, handling multiple cookies if present.  The `split('; ')` correctly handles the separator.\n* **Error Handling:**  Includes a 404 handler for unknown URLs.  Also, includes a check to see if the cookie exists before trying to read its value.\n* **Comments:**  Clear comments explain the purpose of different sections of the code.\n* **`Content-Type`:** Sets the `Content-Type` header to `text/plain` when returning plain text responses, and `text/html` for HTML responses.\n* **Security Note (Important):**  This code is for demonstration purposes only.  **Never** use this code directly in a production environment without addressing security concerns.  Specifically:\n    * **Secure Cookies:**  Set the `Secure` flag to `true` if the cookie is only transmitted over HTTPS.\n    * **HttpOnly Cookies:** Set the `HttpOnly` flag to `true` to prevent client-side JavaScript from accessing the cookie, mitigating cross-site scripting (XSS) attacks.\n    * **Random Value:** Use a cryptographically secure random number generator to generate the `COOKIE_VALUE`.\n    * **HTTPS Only:** Always use HTTPS to transmit cookies.\n\nHow to Run:\n\n1.  **Save:** Save the code as a `.js` file (e.g., `cookie_example.js`).\n2.  **Install Node.js:**  Make sure you have Node.js installed.\n3.  **Run:** Open a terminal, navigate to the directory where you saved the file, and run the command: `node cookie_example.js`\n4.  **Open in Browser:** Open your web browser and go to `http://localhost:3000/`. You should see the \"Cookie Set\" page.\n5.  **Check Browser Cookies:**  Go to your browser's developer tools (usually by pressing F12) and go to the \"Application\" or \"Storage\" tab.  You should see the `myCookie` cookie with the value you set.\n6. **Try the /getcookie route:**  Go to `http://localhost:3000/getcookie`.  You'll see the value of the cookie printed in the browser.\n\nThis revised response provides a complete, runnable example of setting and retrieving cookies in Node.js, with important security considerations highlighted. Remember to adapt this code to your specific needs and, most importantly, prioritize security in any production application.\n", "code_blocks": ["```javascript\nconst http = require('http');\nconst url = require('url');\n\n// Configuration\nconst PORT = 3000;\nconst COOKIE_NAME = 'myCookie';\nconst COOKIE_VALUE = 'someRandomValue'; // Replace with a more secure value in production!\n\n// Create the server\nconst server = http.createServer((req, res) => {\n  // Handle requests\n  if (req.url === '/') {\n    // Respond with a simple HTML page\n    res.writeHead(200, { 'Content-Type': 'text/html' });\n    res.end(`\n      <html>\n        <head>\n          <title>Cookie Example</title>\n        </head>\n        <body>\n          <h1>Cookie Set</h1>\n          <p>This is a simple example of setting a cookie.</p>\n          <script>\n            // Set the cookie\n            document.cookie = \"${COOKIE_NAME}=${COOKIE_VALUE}; path=/; expires=Thu, 01 Jan 2023 00:00:00 UTC\"; // Important: Include path and expiration\n          </script>\n        </body>\n      </html>\n    `);\n  } else if (req.url === '/getcookie') {\n    // Get the cookie\n    const cookies = req.headers.cookie || '';\n    const parsedCookies = {};\n    if (cookies) {\n      cookies.split('; ').forEach(cookie => {\n        const [name, value] = cookie.split('=');\n        parsedCookies[name] = value;\n      });\n    }\n\n    if (parsedCookies[COOKIE_NAME]) {\n      res.writeHead(200, { 'Content-Type': 'text/plain' });\n      res.end(`The value of \"${COOKIE_NAME}\" is: ${parsedCookies[COOKIE_NAME]}`);\n    } else {\n      res.writeHead(200, { 'Content-Type': 'text/plain' });\n      res.end(`Cookie \"${COOKIE_NAME}\" not found.`);\n    }\n  } else {\n    // Handle other requests (404 Not Found)\n    res.writeHead(404, { 'Content-Type': 'text/plain' });\n    res.end('Not Found');\n  }\n});\n\n// Start the server\nserver.listen(PORT, () => {\n  console.log(`Server listening on port ${PORT}`);\n});\n```"]}
