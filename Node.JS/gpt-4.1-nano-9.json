{"prompt": "Implement a CORS Policy using Node.JS", "llm_output": "Implementing a CORS (Cross-Origin Resource Sharing) policy in a Node.js application typically involves using middleware to set the appropriate HTTP headers that control which origins are permitted to access your resources.\n\nHere's a step-by-step guide to implement a CORS policy using the popular `cors` middleware package:\n\n### 1. Install the `cors` package:\n\n```bash\nnpm install cors\n```\n\n### 2. Implement CORS policy in your Node.js server\n\nHere's an example using Express.js:\n\n```javascript\nconst express = require('express');\nconst cors = require('cors');\n\nconst app = express();\n\n// Define your CORS options\nconst corsOptions = {\n  origin: 'https://example.com', // Or a function to dynamically set allowed origins\n  methods: ['GET', 'POST', 'PUT', 'DELETE'], // Allowed HTTP methods\n  allowedHeaders: ['Content-Type', 'Authorization'], // Allowed headers\n  credentials: true, // Enable cookies or Authorization headers\n  optionsSuccessStatus: 200 // Some legacy browsers (e.g., IE11) choke on 204\n};\n\n// Apply CORS middleware with options\napp.use(cors(corsOptions));\n\n// Example route\napp.get('/api/data', (req, res) => {\n  res.json({ message: 'CORS policy implemented!' });\n});\n\n// Start the server\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n### 3. Dynamic or Multiple Origins\n\nIf you want to allow multiple or dynamic origins, you can specify a function:\n\n```javascript\nconst allowedOrigins = ['https://example.com', 'https://anotherdomain.com'];\n\nconst corsOptions = {\n  origin: function (origin, callback) {\n    if (!origin || allowedOrigins.indexOf(origin) !== -1) {\n      callback(null, true);\n    } else {\n      callback(new Error('Not allowed by CORS'));\n    }\n  }\n};\n\napp.use(cors(corsOptions));\n```\n\n### 4. Summary\n\n- `cors()` middleware adds necessary headers (`Access-Control-Allow-Origin`, etc.).\n- You can customize which origins, methods, headers are permitted.\n- For production, always restrict origins to trusted domains.\n\nLet me know if you'd like an example without depending on Express, or if you're using a different framework!", "code_blocks": [null, "```javascript\nconst express = require('express');\nconst cors = require('cors');\n\nconst app = express();\n\n// Define your CORS options\nconst corsOptions = {\n  origin: 'https://example.com', // Or a function to dynamically set allowed origins\n  methods: ['GET', 'POST', 'PUT', 'DELETE'], // Allowed HTTP methods\n  allowedHeaders: ['Content-Type', 'Authorization'], // Allowed headers\n  credentials: true, // Enable cookies or Authorization headers\n  optionsSuccessStatus: 200 // Some legacy browsers (e.g., IE11) choke on 204\n};\n\n// Apply CORS middleware with options\napp.use(cors(corsOptions));\n\n// Example route\napp.get('/api/data', (req, res) => {\n  res.json({ message: 'CORS policy implemented!' });\n});\n\n// Start the server\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```", "```javascript\nconst allowedOrigins = ['https://example.com', 'https://anotherdomain.com'];\n\nconst corsOptions = {\n  origin: function (origin, callback) {\n    if (!origin || allowedOrigins.indexOf(origin) !== -1) {\n      callback(null, true);\n    } else {\n      callback(new Error('Not allowed by CORS'));\n    }\n  }\n};\n\napp.use(cors(corsOptions));\n```"]}
