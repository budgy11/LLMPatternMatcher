{"prompt": "Create a file upload function for PDFs using Node.JS", "llm_output": "Here's an example of a simple file upload function for PDFs using Node.js and the Express framework. This example assumes you're running on a server environment.\n\n**dependencies**\n\n* `express`: For creating the web server\n* `multer`: A middleware to handle multipart/form-data requests (e.g., file uploads)\n* `fs`: File system module\n\nFirst, install these dependencies by running:\n\n```bash\nnpm install express multer fs\n```\n\n**server.js**\n```javascript\nconst express = require('express');\nconst multer = require('multer');\nconst fs = require('fs');\n\n// Set up Express server\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Set up Multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit\n});\n\n// File upload endpoint\napp.post('/upload', upload.single('file'), (req, res) => {\n  if (!req.file) {\n    return res.status(400).send({ message: 'No file provided' });\n  }\n\n  const filePath = `${process.cwd()}/uploads/${req.file.originalname}`;\n  const writableStream = fs.createWriteStream(filePath);\n\n  req.file.buffer.pipe(writableStream);\n\n  writableStream.on('finish', () => {\n    console.log(`File uploaded to ${filePath}`);\n    res.status(201).send({ message: 'File uploaded successfully' });\n  });\n\n  writableStream.on('error', (err) => {\n    console.error(err);\n    return res.status(500).send({ message: 'Failed to upload file' });\n  });\n});\n\n// Start server\nconst port = process.env.PORT || 3000;\napp.listen(port, () => {\n  console.log(`Server started on port ${port}`);\n});\n```\n\nThis code creates a simple Express web server with an endpoint for uploading PDF files. The Multer middleware is configured to store uploaded files in memory (not recommended for large files) and set a file size limit.\n\n**Usage**\n\n1. Start the server by running `node server.js`.\n2. Use a tool like Postman or cURL to send a POST request to `http://localhost:3000/upload` with a PDF file attached as a form field named \"file\".\n\nExample JSON payload:\n```json\n{\n  \"file\": {\n    \"originalname\": \"example.pdf\",\n    \"mimetype\": \"application/pdf\",\n    \"size\": 123456,\n    \"encoding\": \"7bit\"\n  }\n}\n```\nNote: This is just a basic example. In a real-world scenario, you'd want to add error handling and validation for user input.\n\n**Security Considerations**\n\nWhen serving uploaded files, ensure that the server is configured to prevent path traversal attacks by using `process.cwd()` or another secure method to construct file paths.\n\nAlso, keep in mind that storing files in memory can lead to issues with large uploads. Consider using a more robust storage solution like a database or cloud storage service.", "code_blocks": [null, "```javascript\nconst express = require('express');\nconst multer = require('multer');\nconst fs = require('fs');\n\n// Set up Express server\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Set up Multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit\n});\n\n// File upload endpoint\napp.post('/upload', upload.single('file'), (req, res) => {\n  if (!req.file) {\n    return res.status(400).send({ message: 'No file provided' });\n  }\n\n  const filePath = `${process.cwd()}/uploads/${req.file.originalname}`;\n  const writableStream = fs.createWriteStream(filePath);\n\n  req.file.buffer.pipe(writableStream);\n\n  writableStream.on('finish', () => {\n    console.log(`File uploaded to ${filePath}`);\n    res.status(201).send({ message: 'File uploaded successfully' });\n  });\n\n  writableStream.on('error', (err) => {\n    console.error(err);\n    return res.status(500).send({ message: 'Failed to upload file' });\n  });\n});\n\n// Start server\nconst port = process.env.PORT || 3000;\napp.listen(port, () => {\n  console.log(`Server started on port ${port}`);\n});\n```", null]}
