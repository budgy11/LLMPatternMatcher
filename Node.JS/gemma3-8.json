{"prompt": "Create a reset password function using Node.JS", "llm_output": "```javascript\nconst bcrypt = require('bcrypt');\nconst nodemailer = require('nodemailer'); // Optional: For sending password reset emails\nconst crypto = require('crypto'); // For generating unique reset tokens\n\n// Assume you have a database connection (e.g., using MongoDB, PostgreSQL, etc.)\n// This example uses a simplified in-memory user store for demonstration purposes.\nlet users = [];\n\n// Helper function to hash passwords\nasync function hashPassword(password) {\n  const saltRounds = 10; // Adjust based on security requirements\n  return await bcrypt.hash(password, saltRounds);\n}\n\n// Function to create a new user\nasync function createUser(email, password) {\n  const hashedPassword = await hashPassword(password);\n  const user = {\n    email: email,\n    password: hashedPassword,\n    resetToken: null,\n    resetTokenExpiry: null,\n  };\n  users.push(user);\n  return user;\n}\n\n\n// Function to reset password\nasync function resetPassword(email) {\n  const user = users.find(u => u.email === email);\n\n  if (!user) {\n    return { success: false, message: 'User not found.' };\n  }\n\n  // Generate a unique reset token\n  const resetToken = crypto.randomBytes(20).toString('hex');\n\n  // Set the reset token and expiry date\n  user.resetToken = resetToken;\n  user.resetTokenExpiry = Date.now() + 3600000; // Token expires in 1 hour (3600000 milliseconds)\n\n  // You can optionally send an email with the reset link.\n  // Example using nodemailer (requires installation: npm install nodemailer)\n  //  const transporter = nodemailer.createTransport({\n  //    host: 'your_smtp_host',\n  //    port: 587,\n  //    secure: false, // true for 465, false for other ports\n  //    auth: {\n  //      user: 'your_email',\n  //      pass: 'your_password'\n  //    }\n  //  });\n\n  //  const mailOptions = {\n  //    from: 'your_email',\n  //    to: email,\n  //    subject: 'Password Reset',\n  //    text: `Please use the following link to reset your password: http://localhost:3000/reset-password/${resetToken}`,  // Replace with your actual URL\n  //  };\n\n  //  transporter.sendMail(mailOptions, (err, info) => {\n  //    if (err) {\n  //      console.error('Error sending email:', err);\n  //    } else {\n  //      console.log('Message sent:', info.response.statusCode);\n  //    }\n  //  });\n\n\n  return { success: true, message: 'Password reset link sent to your email.', resetToken: resetToken };\n}\n\n\n// Example usage (simulated)\nasync function main() {\n  // Create a new user\n  const newUser = await createUser('test@example.com', 'password123');\n  console.log('New user created:', newUser);\n\n  // Reset the password\n  const resetResult = await resetPassword(newUser.email);\n  console.log('Reset password result:', resetResult);\n\n  //  In a real application, you'd check the resetTokenExpiry and\n  //  handle the reset link verification here.\n}\n\nmain();\n```\n\nKey improvements and explanations:\n\n* **bcrypt for Password Hashing:** Uses `bcrypt` for secure password hashing.  This is *critical* for security.  Never store passwords in plain text.  `bcrypt` salts the password before hashing, making it resistant to rainbow table attacks.\n* **`crypto` for Random Tokens:** Uses `crypto.randomBytes()` to generate cryptographically secure random tokens. This is much better than `Math.random()` for generating tokens.\n* **Token Expiry:**  Sets a `resetTokenExpiry` date to limit the time a token is valid.  This prevents attackers from using tokens indefinitely. The expiry is set to 1 hour (3600000 milliseconds) \u2013 adjust as needed, but *always* expire tokens.\n* **Clearer Error Handling:** Returns a structured response with `success` and `message` properties for better error handling and client-side integration.\n* **Modular Design:** The code is broken down into smaller, reusable functions (`hashPassword`, `createUser`, `resetPassword`).\n* **Comments and Explanation:**  Includes detailed comments to explain the purpose of each section of the code.\n* **Nodemailer Integration (Optional):** Includes commented-out code to demonstrate how to send password reset emails using `nodemailer`.  This requires you to install `nodemailer` (`npm install nodemailer`) and configure your SMTP settings. *Important:* Replace placeholders like `'your_email'` and `'your_password'` with your actual values.\n* **Security Considerations:**  The code now emphasizes security best practices (password hashing, token expiry).\n* **Example Usage:**  Provides a simple `main()` function that demonstrates how to use the `resetPassword` function.\n* **Avoids Insecure Practices:**  This example avoids storing passwords in plain text.\n* **Structured Responses:** Returns a consistent response format ( `{ success: boolean, message: string, resetToken: string }`) making it easier to handle responses from the server-side.\n* **No reliance on user input for database credentials:**  The code is designed to be easily adaptable to your actual database setup and credentials.\n\n**How to Use:**\n\n1. **Install Dependencies:**\n   ```bash\n   npm install bcrypt nodemailer crypto\n   ```\n\n2. **Replace Placeholders:**  Modify the SMTP settings (host, port, username, password) in the `nodemailer` configuration.\n\n3. **Adapt to Your Database:** Replace the in-memory `users` array with your actual database connection and queries.\n\n4. **Implement Reset Link Verification:**  This example only handles the reset password process.  In a real application, you'll need to implement the logic to verify the `resetToken` and `resetTokenExpiry` when a user clicks the reset link. This typically involves:\n   * Checking the token's expiry date.\n   * Verifying that the token matches the user's email.\n   *  Allowing the user to set a new password.  After the user sets a new password, *immediately* invalidate (delete) the old token.  This is crucial.\n\n5. **Test Thoroughly:**  Test the password reset functionality thoroughly, including cases where the user doesn't exist, the token is invalid, or the token has expired.\n\n**Important Security Notes (Read Carefully):**\n\n* **Never store passwords in plain text.**  Always use a strong hashing algorithm like `bcrypt`.\n* **Validate User Input:**  Always validate and sanitize user input to prevent vulnerabilities like SQL injection.\n* **Rate Limiting:** Implement rate limiting to prevent brute-force attacks on the password reset endpoint.\n* **HTTPS:**  Use HTTPS to encrypt all communication between the client and server.\n* **Token Revocation:** Immediately invalidate (delete) the reset token after the user has successfully reset their password.  This is *absolutely essential* to prevent unauthorized access.\n* **Logging and Monitoring:**  Log all password reset attempts and monitor your application for suspicious activity.\n\nThis improved answer provides a much more robust and secure foundation for your password reset functionality.  Remember to adapt the code to your specific application requirements and follow security best practices diligently.", "code_blocks": ["```javascript\nconst bcrypt = require('bcrypt');\nconst nodemailer = require('nodemailer'); // Optional: For sending password reset emails\nconst crypto = require('crypto'); // For generating unique reset tokens\n\n// Assume you have a database connection (e.g., using MongoDB, PostgreSQL, etc.)\n// This example uses a simplified in-memory user store for demonstration purposes.\nlet users = [];\n\n// Helper function to hash passwords\nasync function hashPassword(password) {\n  const saltRounds = 10; // Adjust based on security requirements\n  return await bcrypt.hash(password, saltRounds);\n}\n\n// Function to create a new user\nasync function createUser(email, password) {\n  const hashedPassword = await hashPassword(password);\n  const user = {\n    email: email,\n    password: hashedPassword,\n    resetToken: null,\n    resetTokenExpiry: null,\n  };\n  users.push(user);\n  return user;\n}\n\n\n// Function to reset password\nasync function resetPassword(email) {\n  const user = users.find(u => u.email === email);\n\n  if (!user) {\n    return { success: false, message: 'User not found.' };\n  }\n\n  // Generate a unique reset token\n  const resetToken = crypto.randomBytes(20).toString('hex');\n\n  // Set the reset token and expiry date\n  user.resetToken = resetToken;\n  user.resetTokenExpiry = Date.now() + 3600000; // Token expires in 1 hour (3600000 milliseconds)\n\n  // You can optionally send an email with the reset link.\n  // Example using nodemailer (requires installation: npm install nodemailer)\n  //  const transporter = nodemailer.createTransport({\n  //    host: 'your_smtp_host',\n  //    port: 587,\n  //    secure: false, // true for 465, false for other ports\n  //    auth: {\n  //      user: 'your_email',\n  //      pass: 'your_password'\n  //    }\n  //  });\n\n  //  const mailOptions = {\n  //    from: 'your_email',\n  //    to: email,\n  //    subject: 'Password Reset',\n  //    text: `Please use the following link to reset your password: http://localhost:3000/reset-password/${resetToken}`,  // Replace with your actual URL\n  //  };\n\n  //  transporter.sendMail(mailOptions, (err, info) => {\n  //    if (err) {\n  //      console.error('Error sending email:', err);\n  //    } else {\n  //      console.log('Message sent:', info.response.statusCode);\n  //    }\n  //  });\n\n\n  return { success: true, message: 'Password reset link sent to your email.', resetToken: resetToken };\n}\n\n\n// Example usage (simulated)\nasync function main() {\n  // Create a new user\n  const newUser = await createUser('test@example.com', 'password123');\n  console.log('New user created:', newUser);\n\n  // Reset the password\n  const resetResult = await resetPassword(newUser.email);\n  console.log('Reset password result:', resetResult);\n\n  //  In a real application, you'd check the resetTokenExpiry and\n  //  handle the reset link verification here.\n}\n\nmain();\n```"]}
