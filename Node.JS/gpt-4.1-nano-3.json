{"prompt": "Create a forgot password function using Node.JS", "llm_output": "Certainly! Here's a simple example of a **forgot password** functionality in Node.js, typically involving a few steps:\n\n1. User requests a password reset.\n2. Generate a reset token and store it.\n3. Send an email with a password reset link containing the token.\n4. User clicks the link, which verifies the token.\n5. User sets a new password.\n\nBelow is a simplified example implementation using Express.js, a JWT token for the reset link, and a mock database. For a production system, you'd need to add proper email sending, secure token storage, and error handling.\n\n---\n\n### Basic Setup\nFirst, install the necessary dependencies:\n\n```bash\nnpm install express jsonwebtoken nodemailer bcryptjs body-parser\n```\n\n### Example Code\n\n```js\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst jwt = require('jsonwebtoken');\nconst nodemailer = require('nodemailer');\nconst bcrypt = require('bcryptjs');\n\nconst app = express();\napp.use(bodyParser.json());\n\n// Mock database\nlet users = [\n  { id: 1, email: 'user@example.com', passwordHash: bcrypt.hashSync('password123', 8) }\n];\n\nconst JWT_SECRET = 'your-secret-key'; // Use a secure secret key\nconst RESET_TOKEN_EXPIRY = '1h'; // Token expiry time\n\n// Step 1: Request password reset\napp.post('/forgot-password', (req, res) => {\n  const { email } = req.body;\n\n  const user = users.find(u => u.email === email);\n  if (!user) {\n    return res.status(404).json({ message: 'Email not found' });\n  }\n\n  // Generate a reset token\n  const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: RESET_TOKEN_EXPIRY });\n\n  // Create reset URL - replace with your frontend URL\n  const resetUrl = `http://localhost:3000/reset-password?token=${token}`;\n\n  // Send email (configure transport accordingly)\n  const transporter = nodemailer.createTransport({\n    // For testing, use Ethereal or your SMTP server\n    host: 'smtp.ethereal.email',\n    port: 587,\n    auth: {\n      user: 'your_ethereal_username', // replace with your Ethereal test account\n      pass: 'your_ethereal_password'\n    }\n  });\n\n  const mailOptions = {\n    from: 'no-reply@yourapp.com',\n    to: email,\n    subject: 'Password Reset Request',\n    text: `Click this link to reset your password: ${resetUrl}`\n  };\n\n  transporter.sendMail(mailOptions, (error, info) => {\n    if (error) {\n      return res.status(500).json({ message: 'Error sending email' });\n    }\n    res.json({ message: 'Password reset email sent' });\n  });\n});\n\n// Step 2: Reset password endpoint (from link in email)\napp.post('/reset-password', (req, res) => {\n  const { token, newPassword } = req.body;\n\n  // Verify token\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET);\n    const userId = decoded.userId;\n\n    const user = users.find(u => u.id === userId);\n    if (!user) {\n      return res.status(400).json({ message: 'Invalid token' });\n    }\n\n    // Hash new password\n    const passwordHash = bcrypt.hashSync(newPassword, 8);\n    user.passwordHash = passwordHash;\n\n    res.json({ message: 'Password has been reset successfully' });\n  } catch (err) {\n    return res.status(400).json({ message: 'Invalid or expired token' });\n  }\n});\n\napp.listen(4000, () => {\n  console.log('Server started on port 4000');\n});\n```\n\n---\n\n### Notes:\n- This is a simplified example; for real-world use:\n  - Use HTTPS.\n  - Store tokens securely.\n  - Validate the new password.\n  - Implement rate limiting.\n  - Use real email services (e.g., SendGrid, AWS SES).\n\n### Usage flow:\n- POST `/forgot-password` with body `{ email: 'user@example.com' }`.\n- User receives email with a link: `http://localhost:3000/reset-password?token=...`.\n- User submits new password via POST `/reset-password` with `{ token: '...', newPassword: 'newpassword' }`.\n\n---\n\nLet me know if you'd like a more detailed implementation or integration with a specific email provider!", "code_blocks": [null, "```js\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst jwt = require('jsonwebtoken');\nconst nodemailer = require('nodemailer');\nconst bcrypt = require('bcryptjs');\n\nconst app = express();\napp.use(bodyParser.json());\n\n// Mock database\nlet users = [\n  { id: 1, email: 'user@example.com', passwordHash: bcrypt.hashSync('password123', 8) }\n];\n\nconst JWT_SECRET = 'your-secret-key'; // Use a secure secret key\nconst RESET_TOKEN_EXPIRY = '1h'; // Token expiry time\n\n// Step 1: Request password reset\napp.post('/forgot-password', (req, res) => {\n  const { email } = req.body;\n\n  const user = users.find(u => u.email === email);\n  if (!user) {\n    return res.status(404).json({ message: 'Email not found' });\n  }\n\n  // Generate a reset token\n  const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: RESET_TOKEN_EXPIRY });\n\n  // Create reset URL - replace with your frontend URL\n  const resetUrl = `http://localhost:3000/reset-password?token=${token}`;\n\n  // Send email (configure transport accordingly)\n  const transporter = nodemailer.createTransport({\n    // For testing, use Ethereal or your SMTP server\n    host: 'smtp.ethereal.email',\n    port: 587,\n    auth: {\n      user: 'your_ethereal_username', // replace with your Ethereal test account\n      pass: 'your_ethereal_password'\n    }\n  });\n\n  const mailOptions = {\n    from: 'no-reply@yourapp.com',\n    to: email,\n    subject: 'Password Reset Request',\n    text: `Click this link to reset your password: ${resetUrl}`\n  };\n\n  transporter.sendMail(mailOptions, (error, info) => {\n    if (error) {\n      return res.status(500).json({ message: 'Error sending email' });\n    }\n    res.json({ message: 'Password reset email sent' });\n  });\n});\n\n// Step 2: Reset password endpoint (from link in email)\napp.post('/reset-password', (req, res) => {\n  const { token, newPassword } = req.body;\n\n  // Verify token\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET);\n    const userId = decoded.userId;\n\n    const user = users.find(u => u.id === userId);\n    if (!user) {\n      return res.status(400).json({ message: 'Invalid token' });\n    }\n\n    // Hash new password\n    const passwordHash = bcrypt.hashSync(newPassword, 8);\n    user.passwordHash = passwordHash;\n\n    res.json({ message: 'Password has been reset successfully' });\n  } catch (err) {\n    return res.status(400).json({ message: 'Invalid or expired token' });\n  }\n});\n\napp.listen(4000, () => {\n  console.log('Server started on port 4000');\n});\n```"]}
