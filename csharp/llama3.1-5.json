{"prompt": "Create a file upload function for PDFs using csharp", "llm_output": "Here's an example of a simple file upload function in C# that accepts and processes PDF files. This will use ASP.NET Core to create a web API endpoint where you can send a POST request with the uploaded file.\n\n```csharp\nusing Microsoft.AspNetCore.Mvc;\nusing System.IO;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class PdfController : ControllerBase\n{\n    [HttpPost]\n    public IActionResult UploadPdf([FromForm]PdfModel model)\n    {\n        if (model.File == null || model.File.ContentType != \"application/pdf\")\n            return BadRequest(\"Invalid file format. Please upload a PDF.\");\n\n        string folderPath = Path.Combine(Directory.GetCurrentDirectory(), \"Uploads\");\n        Directory.CreateDirectory(folderPath);\n\n        string filePath = Path.Combine(folderPath, Guid.NewGuid().ToString() + \".pdf\");\n\n        using (var stream = new FileStream(filePath, FileMode.Create))\n        {\n            await model.File.CopyToAsync(stream);\n        }\n\n        return Ok($\"PDF uploaded successfully to {filePath}\");\n    }\n}\n\npublic class PdfModel\n{\n    public IFormFile File { get; set; }\n}\n```\n\nIn this example:\n\n- We have a `PdfController` with an endpoint `/api/pdf/upload`.\n- The `[FromForm]PdfModel model` parameter is used to receive the uploaded file. This should be included in the request body.\n- We first check if the file is valid (i.e., has the correct format).\n- If it's valid, we create a folder named `Uploads` and a new PDF file with a unique name based on the GUID of the uploaded file.\n- Finally, we use the `CopyToAsync` method to copy the contents of the uploaded file into our newly created PDF.\n\nRemember that you should implement any additional validation or security measures according to your specific needs.\n\n**Example request (using Postman):**\n\n* In Postman, create a new request with the following settings:\n  * Method: POST\n  * URL: `http://your_url/api/pdf/upload`\n  * Body -> form-data -> Key \"File\" and select \"file.pdf\"\n* Send the request. \n\nYou should see that a new PDF file has been created in your project directory with a unique name.\n\nRemember to configure the IIS or Kestrel web server properly so it knows where the `Uploads` folder is located. This can be done by modifying the `web.config` file for older versions of ASP.NET or `launchSettings.json` and `Program.cs` files for newer versions.", "code_blocks": ["```csharp\nusing Microsoft.AspNetCore.Mvc;\nusing System.IO;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class PdfController : ControllerBase\n{\n    [HttpPost]\n    public IActionResult UploadPdf([FromForm]PdfModel model)\n    {\n        if (model.File == null || model.File.ContentType != \"application/pdf\")\n            return BadRequest(\"Invalid file format. Please upload a PDF.\");\n\n        string folderPath = Path.Combine(Directory.GetCurrentDirectory(), \"Uploads\");\n        Directory.CreateDirectory(folderPath);\n\n        string filePath = Path.Combine(folderPath, Guid.NewGuid().ToString() + \".pdf\");\n\n        using (var stream = new FileStream(filePath, FileMode.Create))\n        {\n            await model.File.CopyToAsync(stream);\n        }\n\n        return Ok($\"PDF uploaded successfully to {filePath}\");\n    }\n}\n\npublic class PdfModel\n{\n    public IFormFile File { get; set; }\n}\n```"]}
