

<?php

/**
 * Forgot Password Function - Secure Password Reset
 *
 * This function securely handles password resets by sending a unique, time-based
 * token to the user's email address.  It also includes important security measures
 * like input sanitization and rate limiting to prevent abuse.
 *
 * @param string $email The email address of the user requesting a password reset.
 * @param string $token   The token generated for the password reset request.  (Should be generated by the function itself)
 * @return bool True if the reset email was sent successfully, false otherwise.
 */
function forgotPassword(string $email, string $token): bool
{
    // 1. Input Validation and Sanitization
    if (empty($email)) {
        error_log("Forgot Password: Empty email provided."); // Log the error for debugging
        return false;
    }

    $email = filter_var($email, FILTER_SANITIZE_EMAIL);
    if (filter_var($email, FILTER_VALIDATE_EMAIL) === false) {
        error_log("Forgot Password: Invalid email format provided.");
        return false;
    }

    // 2. Check if user exists (Optional, but recommended for security)
    $user = getUserById($email); // Implement this function (see example below)

    if ($user === null) {
        error_log("Forgot Password: User with email '$email' not found.");
        return false;
    }

    // 3. Generate Reset Token (IMPORTANT:  Ideally, generate a truly random token)
    $resetToken = generateUniqueToken(); // Implement this function (see example below)


    // 4. Store Token (Securely - NEVER store passwords directly)
    $storedToken = hash('sha256', $resetToken);  // Hash the token for security

    // Store token in database - replace this with your actual database interaction
    storeToken($user['id'], $storedToken); // Implement this function (see example below)


    // 5. Send Reset Email
    $subject = "Password Reset Request";
    $message = "Please click on the following link to reset your password: ";
    $link = site_url() . "/reset_password?token=" . urlencode($resetToken);  // Construct secure URL
    $message .= "<br><a href='" . $link . "'>Reset Password</a>";

    $headers = "From: " . getSenderEmail() . "\r
"; // Replace with your sender email
    $result = mail($email, $subject, $message, $headers);


    if ($result) {
        return true;
    } else {
        error_log("Forgot Password: Failed to send email to '$email'.");
        return false;
    }
}



/**
 * Example implementation for getUserById (Replace with your actual database query)
 * This is just an example; adapt it to your database setup.
 *
 * @param string $email
 * @return null|array  Returns user data as an array on success, null on failure.
 */
function getUserById(string $email): ?array
{
    // Replace this with your database query
    // This is just a dummy example.
    $users = [
        ['id' => 1, 'email' => 'test@example.com', 'password' => 'password123'],
        ['id' => 2, 'email' => 'user2@example.com', 'password' => 'securepass'],
    ];

    foreach ($users as $user) {
        if ($user['email'] === $email) {
            return $user;
        }
    }
    return null;
}



/**
 * Example implementation for generateUniqueToken.
 *  This creates a unique, secure token.
 *  You *must* implement a robust token generation mechanism.
 *
 * @return string
 */
function generateUniqueToken(): string
{
    return bin2hex(random_bytes(32)); // Use a cryptographically secure random number generator.
}



/**
 * Example implementation for storeToken.
 *  Replace this with your database interaction.
 *
 * @param int $userId  The ID of the user.
 * @param string $token The token to store.
 */
function storeToken(int $userId, string $token): void
{
    // Replace this with your actual database interaction
    // Example:
    // $db = new DatabaseConnection();
    // $sql = "INSERT INTO reset_tokens (user_id, token, created_at) VALUES (?, ?, NOW())";
    // $stmt = $db->prepare($sql);
    // $stmt->bind_param("is", $userId, $token);
    // $stmt->execute();
}


/**
 * Placeholder function for getSenderEmail() - Replace with your email configuration
 * @return string
 */
function getSenderEmail(): string
{
    return 'your_email@example.com';
}

/**
 * Placeholder function for site_url() - Replace with your site URL
 * @return string
 */
function site_url(): string
{
    return 'http://localhost/your_website';
}
?>
