{"prompt": "Create a forgot password function using Ruby on Rails", "llm_output": "Here's an example of how to implement a forgot password functionality in Ruby on Rails.\n\n**Model**\n```ruby\n# app/models/user.rb\n\nclass User < ApplicationRecord\n  # existing code...\n\n  def send_password_reset\n    if self.persisted?\n      self.generate_reset_token!\n      PasswordResetMailer.password_reset(self).deliver_now\n    end\n  end\n\n  private\n\n  def generate_reset_token!\n    self.reset_token = SecureRandom.uuid\n    save!\n  end\nend\n```\n**Controller**\n```ruby\n# app/controllers/password_resets_controller.rb\n\nclass PasswordResetsController < ApplicationController\n  skip_before_action :authenticate_user!\n\n  def new; end\n\n  def create\n    user = User.find_by(email: params[:email])\n    if user && !user.password_reset_token.nil?\n      user.send_password_reset\n      flash[:success] = \"Password reset instructions have been sent to your email.\"\n    else\n      flash[:danger] = \"No user found with that email or password reset token has already been used.\"\n    end\n  end\n\n  def edit\n    @user = User.find_by(password_reset_token: params[:token])\n    unless @user\n      flash[:error] = \"Invalid or expired password reset token\"\n      redirect_to(root_url)\n    end\n  end\n\n  def update\n    user = User.find_by(password_reset_token: params[:token])\n    if user.update(password_params)\n      user.generate_reset_token!\n      user.save!\n      flash[:success] = \"Password has been updated successfully.\"\n      redirect_to(sign_in_path, notice: 'Logged in')\n    else\n      render :edit\n    end\n  end\n\n  private\n\n  def password_params\n    params.require(:user).permit(:password, :password_confirmation)\n  end\nend\n```\n**Mailer**\n```ruby\n# app/mailers/password_reset_mailer.rb\n\nclass PasswordResetMailer < ApplicationMailer\n  default from: 'your-email@example.com'\n\n  def password_reset(user)\n    @reset_token = user.reset_token\n    mail to: user.email, subject: \"Password Reset Instructions\"\n  end\nend\n```\n**View**\n```erb\n# app/views/password_resets/new.html.erb\n\n<h1>Password Reset</h1>\n\n<p>Enter your email address below and we'll send you a password reset link:</p>\n\n<%= form_for(:password_reset, url: password_resets_path) do |form| %>\n  <%= form.text_field :email, placeholder: 'your-email@example.com' %>\n  <%= submit_tag \"Send Password Reset Link\" %>\n<% end %>\n```\n\n```erb\n# app/views/password_resets/edit.html.erb\n\n<h1>Reset Your Password</h1>\n\n<p>Enter your new password below:</p>\n\n<%= form_for(:user, url: update_password_reset_path) do |form| %>\n  <%= hidden_field :password_reset_token, value: @user.password_reset_token %>\n  <%= form.password_field :password, placeholder: 'New Password' %>\n  <%= form.password_field :password_confirmation, placeholder: 'Confirm New Password' %>\n  <%= submit_tag \"Update Password\" %>\n<% end %>\n```\n**Routes**\n```ruby\n# config/routes.rb\n\nRails.application.routes.draw do\n  resources :password_resets, only: [:new, :create]\nend\n```\n\nThis implementation uses the `SecureRandom` gem to generate a random reset token when the user requests a password reset. The `PasswordResetMailer` class is responsible for sending an email with a link to reset the password.\n\nThe forgot password functionality is accessible at `/password_resets/new`, where the user can enter their email address and submit it to send a password reset link. When the user clicks on the link, they are taken to `/password_resets/edit`, where they can enter their new password and confirm it before submitting it to update their password.\n\nNote that you will need to configure your email service (e.g., Sendgrid or Mandrill) in order for this functionality to work.", "code_blocks": ["```ruby\n# app/models/user.rb\n\nclass User < ApplicationRecord\n  # existing code...\n\n  def send_password_reset\n    if self.persisted?\n      self.generate_reset_token!\n      PasswordResetMailer.password_reset(self).deliver_now\n    end\n  end\n\n  private\n\n  def generate_reset_token!\n    self.reset_token = SecureRandom.uuid\n    save!\n  end\nend\n```", "```ruby\n# app/controllers/password_resets_controller.rb\n\nclass PasswordResetsController < ApplicationController\n  skip_before_action :authenticate_user!\n\n  def new; end\n\n  def create\n    user = User.find_by(email: params[:email])\n    if user && !user.password_reset_token.nil?\n      user.send_password_reset\n      flash[:success] = \"Password reset instructions have been sent to your email.\"\n    else\n      flash[:danger] = \"No user found with that email or password reset token has already been used.\"\n    end\n  end\n\n  def edit\n    @user = User.find_by(password_reset_token: params[:token])\n    unless @user\n      flash[:error] = \"Invalid or expired password reset token\"\n      redirect_to(root_url)\n    end\n  end\n\n  def update\n    user = User.find_by(password_reset_token: params[:token])\n    if user.update(password_params)\n      user.generate_reset_token!\n      user.save!\n      flash[:success] = \"Password has been updated successfully.\"\n      redirect_to(sign_in_path, notice: 'Logged in')\n    else\n      render :edit\n    end\n  end\n\n  private\n\n  def password_params\n    params.require(:user).permit(:password, :password_confirmation)\n  end\nend\n```", "```ruby\n# app/mailers/password_reset_mailer.rb\n\nclass PasswordResetMailer < ApplicationMailer\n  default from: 'your-email@example.com'\n\n  def password_reset(user)\n    @reset_token = user.reset_token\n    mail to: user.email, subject: \"Password Reset Instructions\"\n  end\nend\n```", null, null, "```ruby\n# config/routes.rb\n\nRails.application.routes.draw do\n  resources :password_resets, only: [:new, :create]\nend\n```"]}
