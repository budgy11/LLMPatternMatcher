{"prompt": "Create a search function using Ruby on Rails", "llm_output": "```ruby\n# app/models/product.rb\nclass Product < ApplicationRecord\n  # You can add more attributes and associations here\nend\n\n# app/controllers/products_controller.rb\nclass ProductsController < ApplicationController\n\n  def index\n    @products = Product.all\n  end\n\n  def search\n    query = params[:q]\n    if query.present?\n      @products = Product.where(\"name LIKE ? OR description LIKE ?\", \"%#{query}%\", \"%#{query}%\")\n      # OR you can use a more complex query:\n      # @products = Product.where(\n      #   \"name LIKE ? OR description LIKE ?\",\n      #   \"%#{query}%\", \"%#{query}%\"\n      # )\n    else\n      @products = Product.all\n    end\n  end\n\n  # Helper method for building the search form (optional, but recommended)\n  def search_form\n    @form = Product::SearchForm.new\n  end\nend\n\n# app/views/products/index.html.erb\n<h1>Products</h1>\n<%= render @products %>\n\n# app/views/products/search.html.erb\n<h1>Search Products</h1>\n\n<%= form_with(url: products_path, method: :get) do |form| %>\n  <%= form.label :q, \"Search:\" %>\n  <%= form.text_field :q %>\n  <%= form.submit \"Search\" %>\n<% end %>\n\n<br>\n<%= link_to \"Back to Product List\", products_path %>\n\n# app/controllers/application.rb\nclass ApplicationController < ActionController::Base\n  # Add any common controller logic here\nend\n\n# config/routes.rb\nRails.application.routes.draw do\n  resources :products\n  get 'search', to: 'products#search' #  This is how you define the search route\nend\n```\n\n**Explanation and Best Practices:**\n\n1. **Model (Product):**\n   - This example assumes a `Product` model with at least a `name` and `description` attribute.\n   - You can adjust this to your actual product schema.\n\n2. **Controller (ProductsController):**\n   - `index` Action:  This is the standard action to display all products.\n   - `search` Action:\n     - `query = params[:q]`: Retrieves the search query from the `q` parameter in the URL.\n     - `Product.where(\"name LIKE ? OR description LIKE ?\", \"%#{query}%\", \"%#{query}%\")`:  This is the core of the search functionality.\n       - `Product.where(...)`:  Finds products based on the specified criteria.\n       - `LIKE`:  The `LIKE` operator is used for pattern matching in SQL.\n       - `?`: A placeholder for the value to be inserted into the query (prevents SQL injection).\n       - `\"%#{query}%\"`:  The search pattern.  The `%` wildcard character matches zero or more characters, making it a flexible pattern matcher.  It searches for products where the `name` or `description` contains the search term.\n     - `else @products = Product.all`: If the query is empty, it displays all products.\n\n3. **View (search.html.erb):**\n   - This creates a simple search form using `form_with` which helps with form handling.\n   - `form.label :q`:  Adds a label to the input field.\n   - `form.text_field :q`:  Creates a text field where the user can enter the search query.\n   - `form.submit \"Search\"`: Creates a submit button.\n   - `link_to \"Back to Product List\", products_path`: Provides a link to return to the main product list.\n\n4. **Routing (config/routes.rb):**\n   - `get 'search', to: 'products#search'`: Defines the route that triggers the `search` action in the `ProductsController`.  This means that when a user goes to `/products/search`, the `search` action will be executed.\n\n**Important Considerations & Enhancements:**\n\n* **SQL Injection Prevention:**  The `?` placeholder in the `Product.where()` method is crucial. *Never* directly insert user input into an SQL query without using placeholders.\n* **Case-Insensitive Search:**  For case-insensitive searches, you can use `ILIKE` instead of `LIKE` (if your database supports it) or use `lower()` in your SQL query:\n\n   ```ruby\n   @products = Product.where(\"LOWER(name) LIKE ? OR LOWER(description) LIKE ?\", \"%#{query.downcase}%\", \"%#{query.downcase}%\")\n   ```\n\n* **Full-Text Search:** If you need more sophisticated search capabilities (e.g., stemming, ranking results), consider using a full-text search engine like:\n    * **PostgreSQL's Full Text Search:**  PostgreSQL has built-in full-text search capabilities.  This is generally the best option for PostgreSQL.\n    * **Algolia:** A hosted search service.\n    * **Elasticsearch:** A popular open-source search engine.\n\n* **Form Validation:** Add validation to your form to ensure the user enters a valid search query (e.g., not empty).\n* **Error Handling:**  Handle the case where the `q` parameter is not present (e.g., display a message saying \"Please enter a search term\").\n* **Indexing:**  Make sure your `name` and `description` columns are indexed in your database.  This will significantly speed up search queries. (Index the `name` and `description` columns in your database).\n* **Pagination:** If you have a large number of products, implement pagination to avoid performance issues.\n\nThis comprehensive example provides a solid foundation for building a search function in your Rails application. Remember to adapt it to your specific requirements and database schema.\n", "code_blocks": ["```ruby\n# app/models/product.rb\nclass Product < ApplicationRecord\n  # You can add more attributes and associations here\nend\n\n# app/controllers/products_controller.rb\nclass ProductsController < ApplicationController\n\n  def index\n    @products = Product.all\n  end\n\n  def search\n    query = params[:q]\n    if query.present?\n      @products = Product.where(\"name LIKE ? OR description LIKE ?\", \"%#{query}%\", \"%#{query}%\")\n      # OR you can use a more complex query:\n      # @products = Product.where(\n      #   \"name LIKE ? OR description LIKE ?\",\n      #   \"%#{query}%\", \"%#{query}%\"\n      # )\n    else\n      @products = Product.all\n    end\n  end\n\n  # Helper method for building the search form (optional, but recommended)\n  def search_form\n    @form = Product::SearchForm.new\n  end\nend\n\n# app/views/products/index.html.erb\n<h1>Products</h1>\n<%= render @products %>\n\n# app/views/products/search.html.erb\n<h1>Search Products</h1>\n\n<%= form_with(url: products_path, method: :get) do |form| %>\n  <%= form.label :q, \"Search:\" %>\n  <%= form.text_field :q %>\n  <%= form.submit \"Search\" %>\n<% end %>\n\n<br>\n<%= link_to \"Back to Product List\", products_path %>\n\n# app/controllers/application.rb\nclass ApplicationController < ActionController::Base\n  # Add any common controller logic here\nend\n\n# config/routes.rb\nRails.application.routes.draw do\n  resources :products\n  get 'search', to: 'products#search' #  This is how you define the search route\nend\n```"]}
