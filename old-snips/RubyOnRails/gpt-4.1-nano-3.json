{"prompt": "Create a forgot password function using Ruby on Rails", "llm_output": "Certainly! Implementing a \"Forgot Password\" feature in Ruby on Rails typically involves several steps:\n\n1. User submits their email to request password reset.\n2. Generate a unique reset token, store it in the database with an expiration time.\n3. Send an email to the user with a link containing the reset token.\n4. User clicks the link, which leads to a password reset form.\n5. User submits a new password, which is then updated in the database.\n\nHere's a step-by-step guide with code snippets illustrating the process:\n\n---\n\n### 1. Add Password Reset Fields to User Model\n\nGenerate migration to add `reset_password_token` and `reset_password_sent_at` fields:\n\n```bash\nrails generate migration AddResetPasswordToUsers reset_password_token:string reset_password_sent_at:datetime\nrails db:migrate\n```\n\n### 2. Update the User Model (`app/models/user.rb`)\n\nInclude methods to generate tokens and set expiration:\n\n```ruby\nclass User < ApplicationRecord\n  # Generates a unique reset token and saves its digest and timestamp\n  def create_reset_digest\n    self.reset_password_token = SecureRandom.urlsafe_base64\n    self.reset_password_sent_at = Time.current\n    save!(validate: false)\n  end\n\n  # Checks if the reset token has expired (e.g., after 2 hours)\n  def reset_token_expired?\n    reset_password_sent_at < 2.hours.ago\n  end\nend\n```\n\n### 3. Users Controller Actions\n\nAdd actions for requesting password reset and updating password.\n\n```ruby\nclass UsersController < ApplicationController\n  # Show form to input email for reset\n  def new_password_reset\n  end\n\n  # Handle form submission, send email with reset link\n  def create_password_reset\n    @user = User.find_by(email: params[:email].downcase)\n    if @user\n      @user.create_reset_digest\n      UserMailer.password_reset(@user).deliver_now\n      flash[:info] = \"Password reset email sent\"\n      redirect_to root_url\n    else\n      flash.now[:alert] = \"Email address not found\"\n      render :new_password_reset\n    end\n  end\n\n  # Show form to reset password (when user clicks email link)\n  def edit_password_reset\n    @user = User.find_by(reset_password_token: params[:id])\n    unless @user && !@user.reset_token_expired?\n      redirect_to new_password_reset_path, alert: \"Password reset link is invalid or has expired\"\n    end\n  end\n\n  # Update password\n  def update_password_reset\n    @user = User.find_by(reset_password_token: params[:id])\n    if @user && !@user.reset_token_expired?\n      if params[:user][:password].blank?\n        @user.errors.add(:password, \"can't be blank\")\n        render :edit_password_reset\n      elsif @user.update(user_params)\n        @user.update(reset_password_token: nil, reset_password_sent_at: nil)\n        flash[:success] = \"Password has been reset.\"\n        redirect_to login_path\n      else\n        render :edit_password_reset\n      end\n    else\n      redirect_to new_password_reset_path, alert: \"Password reset link is invalid or has expired\"\n    end\n  end\n\n  private\n\n  def user_params\n    params.require(:user).permit(:password, :password_confirmation)\n  end\nend\n```\n\n---\n\n### 4. Routes (`config/routes.rb`)\n\nAdd necessary routes:\n\n```ruby\nRails.application.routes.draw do\n  # Password reset routes\n  get 'password_resets/new', to: 'users#new_password_reset', as: 'new_password_reset'\n  post 'password_resets', to: 'users#create_password_reset', as: 'password_resets'\n  get 'password_resets/:id/edit', to: 'users#edit_password_reset', as: 'edit_password_reset'\n  patch 'password_resets/:id', to: 'users#update_password_reset'\n  # Your other routes...\nend\n```\n\n---\n\n### 5. Mailer (`app/mailers/user_mailer.rb`)\n\nCreate a mailer to send reset email:\n\n```ruby\nclass UserMailer < ApplicationMailer\n  def password_reset(user)\n    @user = user\n    @token = user.reset_password_token\n    mail to: @user.email, subject: \"Password Reset Instructions\"\n  end\nend\n```\n\n### 6. Email View (`app/views/user_mailer/password_reset.html.erb`)\n\n```erb\n<p>To reset your password, click the link below:</p>\n<p>\n  <%= link_to 'Reset password', edit_password_reset_url(@token) %>\n</p>\n<p>This link will expire in 2 hours.</p>\n```\n\n---\n\n### 7. Views for Forms\n\n- **New Password Reset Form (`app/views/users/new_password_reset.html.erb`)**\n\n```erb\n<h1>Forgot Password</h1>\n<%= form_with url: password_resets_path, local: true do |form| %>\n  <div>\n    <%= form.label :email %>\n    <%= form.email_field :email, required: true %>\n  </div>\n  <div>\n    <%= form.submit 'Send Reset Instructions' %>\n  </div>\n<% end %>\n```\n\n- **Edit Password Reset Form (`app/views/users/edit_password_reset.html.erb`)**\n\n```erb\n<h1>Reset Your Password</h1>\n<%= form_with model: @user, url: password_reset_path(@user.reset_password_token), local: true do |form| %>\n  <div>\n    <%= form.label :password %>\n    <%= form.password_field :password, required: true %>\n  </div>\n  <div>\n    <%= form.label :password_confirmation %>\n    <%= form.password_field :password_confirmation, required: true %>\n  </div>\n  <div>\n    <%= form.submit 'Update Password' %>\n  </div>\n<% end %>\n```\n\n---\n\n### Summary\nThis setup ensures:\n\n- Users can request a password reset.\n- The system generates a secure token, stores it with an expiration.\n- Emails are sent with a secure link.\n- Users can reset their password through that link within the valid time window.\n\n---\n\nLet me know if you'd like a more complete code example or additional features!", "code_blocks": [null, "```ruby\nclass User < ApplicationRecord\n  # Generates a unique reset token and saves its digest and timestamp\n  def create_reset_digest\n    self.reset_password_token = SecureRandom.urlsafe_base64\n    self.reset_password_sent_at = Time.current\n    save!(validate: false)\n  end\n\n  # Checks if the reset token has expired (e.g., after 2 hours)\n  def reset_token_expired?\n    reset_password_sent_at < 2.hours.ago\n  end\nend\n```", "```ruby\nclass UsersController < ApplicationController\n  # Show form to input email for reset\n  def new_password_reset\n  end\n\n  # Handle form submission, send email with reset link\n  def create_password_reset\n    @user = User.find_by(email: params[:email].downcase)\n    if @user\n      @user.create_reset_digest\n      UserMailer.password_reset(@user).deliver_now\n      flash[:info] = \"Password reset email sent\"\n      redirect_to root_url\n    else\n      flash.now[:alert] = \"Email address not found\"\n      render :new_password_reset\n    end\n  end\n\n  # Show form to reset password (when user clicks email link)\n  def edit_password_reset\n    @user = User.find_by(reset_password_token: params[:id])\n    unless @user && !@user.reset_token_expired?\n      redirect_to new_password_reset_path, alert: \"Password reset link is invalid or has expired\"\n    end\n  end\n\n  # Update password\n  def update_password_reset\n    @user = User.find_by(reset_password_token: params[:id])\n    if @user && !@user.reset_token_expired?\n      if params[:user][:password].blank?\n        @user.errors.add(:password, \"can't be blank\")\n        render :edit_password_reset\n      elsif @user.update(user_params)\n        @user.update(reset_password_token: nil, reset_password_sent_at: nil)\n        flash[:success] = \"Password has been reset.\"\n        redirect_to login_path\n      else\n        render :edit_password_reset\n      end\n    else\n      redirect_to new_password_reset_path, alert: \"Password reset link is invalid or has expired\"\n    end\n  end\n\n  private\n\n  def user_params\n    params.require(:user).permit(:password, :password_confirmation)\n  end\nend\n```", "```ruby\nRails.application.routes.draw do\n  # Password reset routes\n  get 'password_resets/new', to: 'users#new_password_reset', as: 'new_password_reset'\n  post 'password_resets', to: 'users#create_password_reset', as: 'password_resets'\n  get 'password_resets/:id/edit', to: 'users#edit_password_reset', as: 'edit_password_reset'\n  patch 'password_resets/:id', to: 'users#update_password_reset'\n  # Your other routes...\nend\n```", "```ruby\nclass UserMailer < ApplicationMailer\n  def password_reset(user)\n    @user = user\n    @token = user.reset_password_token\n    mail to: @user.email, subject: \"Password Reset Instructions\"\n  end\nend\n```", null, null, null]}
