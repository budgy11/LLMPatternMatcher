{"prompt": "Create a search function using Ruby on Rails", "llm_output": "Certainly! I'll guide you through creating a simple search function in a Ruby on Rails application. Let's assume you have a typical model, for example, `Product`, and you want to search for products based on their name or description.\n\n### Step 1: Generate your model (if not already created)\n```bash\nrails generate model Product name:string description:text\nrails db:migrate\n```\n\n### Step 2: Add some sample data\nYou can seed the database with some products:\n```ruby\n# db/seeds.rb\nProduct.create(name: \"Apple\", description: \"Fresh red apple\")\nProduct.create(name: \"Banana\", description: \"Sweet yellow banana\")\nProduct.create(name: \"Orange\", description: \"Juicy orange\")\n```\nRun:\n```bash\nrails db:seed\n```\n\n### Step 3: Add a search method in your model\nOpen `app/models/product.rb` and add a search scope:\n```ruby\nclass Product < ApplicationRecord\n  scope :search, ->(query) {\n    where(\"name ILIKE ? OR description ILIKE ?\", \"%#{query}%\", \"%#{query}%\") if query.present?\n  }\nend\n```\n*Note:* `ILIKE` is used for case-insensitive search in PostgreSQL. Use `LIKE` for MySQL.\n\n### Step 4: Update the controller to handle search\nIn your controller (`app/controllers/products_controller.rb`):\n\n```ruby\nclass ProductsController < ApplicationController\n  def index\n    if params[:search].present?\n      @products = Product.search(params[:search])\n    else\n      @products = Product.all\n    end\n  end\nend\n```\n\n### Step 5: Update the view to include a search form\nIn your `app/views/products/index.html.erb`:\n\n```erb\n<%= form_with url: products_path, method: :get, local: true do %>\n  <%= label_tag :search, \"Search Products:\" %>\n  <%= text_field_tag :search, params[:search] %>\n  <%= submit_tag \"Search\" %>\n<% end %>\n\n<h2>Products</h2>\n<% @products.each do |product| %>\n  <p>\n    <strong>Name:</strong> <%= product.name %><br>\n    <strong>Description:</strong> <%= product.description %>\n  </p>\n<% end %>\n```\n\n### Step 6: Test the search\nStart your Rails server:\n```bash\nrails server\n```\nNavigate to `http://localhost:3000/products` and try searching.\n\n---\n\n**Summary:**  \n- A scope is added for searching in the model.  \n- The controller modifies the index action to filter based on search params.  \n- The view includes a form to input search queries.\n\nLet me know if you want a more advanced example, like paginating results or searching across multiple models!", "code_blocks": [null, "```ruby\n# db/seeds.rb\nProduct.create(name: \"Apple\", description: \"Fresh red apple\")\nProduct.create(name: \"Banana\", description: \"Sweet yellow banana\")\nProduct.create(name: \"Orange\", description: \"Juicy orange\")\n```", null, "```ruby\nclass Product < ApplicationRecord\n  scope :search, ->(query) {\n    where(\"name ILIKE ? OR description ILIKE ?\", \"%#{query}%\", \"%#{query}%\") if query.present?\n  }\nend\n```", "```ruby\nclass ProductsController < ApplicationController\n  def index\n    if params[:search].present?\n      @products = Product.search(params[:search])\n    else\n      @products = Product.all\n    end\n  end\nend\n```", null, null]}
