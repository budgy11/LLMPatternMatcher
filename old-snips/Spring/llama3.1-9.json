{"prompt": "Implement a CORS Policy using Spring", "llm_output": "CORS (Cross-Origin Resource Sharing) is a security feature implemented in web browsers to prevent web pages from making requests to a different domain than the one the web page was loaded from. To implement CORS policy using Spring, you can use a combination of annotations and configuration.\n\n**Using Annotations**\n\nYou can enable CORS for all URLs handled by your Spring application by adding the `@CrossOrigin` annotation at the controller level or globally for all controllers.\n\n```java\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@CrossOrigin(origins = \"*\") // allow requests from any domain\npublic class MyController {\n    @GetMapping(\"/myendpoint\")\n    public String myEndpoint() {\n        return \"Hello, World!\";\n    }\n}\n```\n\nIn the above code, `@CrossOrigin` annotation is applied at the controller level. The `origins` attribute specifies the allowed domains.\n\n**Using Configuration**\n\nAlternatively, you can configure CORS globally for all controllers using a configuration class.\n\n```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\") // allow CORS for all URLs\n                .allowedOrigins(\"*\") // allow requests from any domain\n                .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\")\n                .maxAge(3600); // maximum age of the CORS configuration in seconds\n    }\n}\n```\n\nIn this example, we've created a `CorsConfig` class that implements the `WebMvcConfigurer` interface. The `addCorsMappings` method is used to configure CORS for all URLs handled by the application.\n\n**Using WebFlux**\n\nIf you are using Spring WebFlux, you can use the `@CrossOrigin` annotation or a similar configuration as above.\n\n```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.server.config.WebFilterConfigurer;\nimport org.springframework.web.server.handler.CorsMapping;\n\n@Configuration\npublic class CorsConfig implements WebFilterConfigurer {\n\n    @Override\n    public void addWebFilters(FilterRegistration.Dynamic registration) {\n        registration.addFilter(new CorsMapping())\n                .addMappingForPath(\"/**\")\n                .allowedOrigins(\"*\")\n                .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\")\n                .maxAge(3600);\n    }\n}\n```\n\nRemember to adjust the configuration according to your application's requirements.", "code_blocks": ["```java\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@CrossOrigin(origins = \"*\") // allow requests from any domain\npublic class MyController {\n    @GetMapping(\"/myendpoint\")\n    public String myEndpoint() {\n        return \"Hello, World!\";\n    }\n}\n```", "```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\") // allow CORS for all URLs\n                .allowedOrigins(\"*\") // allow requests from any domain\n                .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\")\n                .maxAge(3600); // maximum age of the CORS configuration in seconds\n    }\n}\n```", "```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.server.config.WebFilterConfigurer;\nimport org.springframework.web.server.handler.CorsMapping;\n\n@Configuration\npublic class CorsConfig implements WebFilterConfigurer {\n\n    @Override\n    public void addWebFilters(FilterRegistration.Dynamic registration) {\n        registration.addFilter(new CorsMapping())\n                .addMappingForPath(\"/**\")\n                .allowedOrigins(\"*\")\n                .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\")\n                .maxAge(3600);\n    }\n}\n```"]}
