{"prompt": "Implement a CORS Policy using Spring", "llm_output": "To implement a CORS (Cross-Origin Resource Sharing) policy in a Spring Boot application, you have several options. The most common approach is to configure CORS globally for your application or on a per-controller basis.\n\n### 1. Global CORS Configuration\n\nYou can configure CORS globally by creating a `WebMvcConfigurer` bean:\n\n```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class WebConfig {\n\n    @Bean\n    public WebMvcConfigurer corsConfigurer() {\n        return new WebMvcConfigurer() {\n            @Override\n            public void addCorsMappings(CorsRegistry registry) {\n                // Allow CORS requests to all endpoints\n                registry.addMapping(\"/**\")\n                        .allowedOrigins(\"http://allowed-origin.com\") // specify your allowed origins\n                        .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\") // allowed HTTP methods\n                        .allowedHeaders(\"*\") // allowed headers\n                        .allowCredentials(true); // if credentials are needed\n            }\n        };\n    }\n}\n```\n\n**Notes:**\n- Replace `\"http://allowed-origin.com\"` with your actual client application's origin.\n- You can specify multiple origins: `.allowedOrigins(\"http://origin1.com\", \"http://origin2.com\")`.\n\n---\n\n### 2. Per-Controller or Per-Method CORS Configuration\n\nYou can also annotate specific controllers or methods with `@CrossOrigin`:\n\n```java\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@CrossOrigin(origins = \"http://allowed-origin.com\", methods = {RequestMethod.GET, RequestMethod.POST})\npublic class MyController {\n\n    // Endpoint mappings\n}\n```\n\nThis restricts CORS rules to specific controllers or endpoints.\n\n---\n\n### 3. Additional Tips\n\n- For more advanced CORS configurations, you can customize the headers, exposed headers, maximum age, etc.\n- Ensure your server is configured to handle OPTIONS preflight requests if needed.\n- If you're using Spring Security, you also need to enable CORS there, typically in your security configuration:\n\n```java\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.cors(); // Enable CORS\n        // other security configurations\n    }\n}\n```\n\nAnd you'd define a `CorsConfigurationSource` bean if needed:\n\n```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.cors.CorsConfigurationSource;\n\n@Bean\npublic CorsConfigurationSource corsConfigurationSource() {\n    CorsConfiguration configuration = new CorsConfiguration();\n    configuration.setAllowedOrigins(Arrays.asList(\"http://allowed-origin.com\"));\n    configuration.setAllowedMethods(Arrays.asList(\"GET\",\"POST\", \"PUT\", \"DELETE\"));\n    configuration.setAllowedHeaders(Arrays.asList(\"*\"));\n    configuration.setAllowCredentials(true);\n    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n    source.registerCorsConfiguration(\"/**\", configuration);\n    return source;\n}\n```\n\n---\n\n### Summary\n\n- For simple, global CORS policy: use `WebMvcConfigurer` with `addCorsMappings`.\n- For per-controller CORS rules: annotate with `@CrossOrigin`.\n- If using Spring Security, remember to enable CORS there as well.\n\nLet me know if you need a more specific example tailored to your setup!", "code_blocks": ["```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class WebConfig {\n\n    @Bean\n    public WebMvcConfigurer corsConfigurer() {\n        return new WebMvcConfigurer() {\n            @Override\n            public void addCorsMappings(CorsRegistry registry) {\n                // Allow CORS requests to all endpoints\n                registry.addMapping(\"/**\")\n                        .allowedOrigins(\"http://allowed-origin.com\") // specify your allowed origins\n                        .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\") // allowed HTTP methods\n                        .allowedHeaders(\"*\") // allowed headers\n                        .allowCredentials(true); // if credentials are needed\n            }\n        };\n    }\n}\n```", "```java\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@CrossOrigin(origins = \"http://allowed-origin.com\", methods = {RequestMethod.GET, RequestMethod.POST})\npublic class MyController {\n\n    // Endpoint mappings\n}\n```", "```java\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.cors(); // Enable CORS\n        // other security configurations\n    }\n}\n```", "```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.cors.CorsConfigurationSource;\n\n@Bean\npublic CorsConfigurationSource corsConfigurationSource() {\n    CorsConfiguration configuration = new CorsConfiguration();\n    configuration.setAllowedOrigins(Arrays.asList(\"http://allowed-origin.com\"));\n    configuration.setAllowedMethods(Arrays.asList(\"GET\",\"POST\", \"PUT\", \"DELETE\"));\n    configuration.setAllowedHeaders(Arrays.asList(\"*\"));\n    configuration.setAllowCredentials(true);\n    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n    source.registerCorsConfiguration(\"/**\", configuration);\n    return source;\n}\n```"]}
