{"prompt": "Create a login using Spring", "llm_output": "Here is an example of a simple login system using Spring Boot. This example includes user registration, authentication, and authorization.\n\n**pom.xml (if you're using Maven)**\n```xml\n<dependencies>\n    <!-- Spring Boot Starter Web -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\n    <!-- Spring Security -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-security</artifactId>\n    </dependency>\n\n    <!-- H2 Database (in-memory database) for development purposes -->\n    <dependency>\n        <groupId>com.h2database</groupId>\n        <artifactId>h2</artifactId>\n        <scope>runtime</scope>\n    </dependency>\n</dependencies>\n```\n\n**application.properties**\n```properties\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.username=sa\nspring.datasource.password=\nspring.jpa.hibernate.ddl-auto=update\n\n# Security Configuration\nsecurity.user.name=admin\nsecurity.user.password=password\n```\n\n**User Entity**\n```java\n@Entity\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(unique = true)\n    private String username;\n\n    private String password;\n\n    // Getters and Setters\n}\n```\n\n**Security Configuration (WebSecurityConfigurerAdapter)**\n```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                .antMatchers(\"/register\").permitAll()\n                .anyRequest().authenticated()\n                .and()\n            .formLogin();\n    }\n}\n```\n\n**UserDetailsService**\n```java\n@Service\npublic class CustomUserDetailsService implements UserDetailsService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = userRepository.findByUsername(username);\n        if (user == null) {\n            throw new UsernameNotFoundException(\"User not found\");\n        }\n        return new User(user.getUsername(), user.getPassword(), getAuthorities());\n    }\n\n    private List<GrantedAuthority> getAuthorities() {\n        // Authority can be changed to any role or authority\n        GrantedAuthority grantedAuthority = new SimpleGrantedAuthority(\"USER\");\n        return Collections.singletonList(grantedAuthority);\n    }\n}\n```\n\n**Controller**\n```java\n@RestController\n@RequestMapping(\"/api\")\npublic class LoginController {\n\n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    @PostMapping(\"/login\")\n    public AuthenticationResponse login(@RequestBody LoginRequest request) {\n        try {\n            // Authenticate user\n            UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(request.getUsername(), request.getPassword());\n            Authentication authentication = authenticationManager.authenticate(token);\n\n            // Return JWT Token\n            return new AuthenticationResponse(token.getAuthorities().toString());\n        } catch (BadCredentialsException e) {\n            return new AuthenticationResponse(\"Invalid credentials\");\n        }\n    }\n\n    @PostMapping(\"/register\")\n    public RegistrationResponse register(@RequestBody RegistrationRequest request) {\n        User user = userRepository.save(new User(request.getUsername(), request.getPassword()));\n        return new RegistrationResponse(user.getId().toString());\n    }\n}\n```\n\nThis example demonstrates a basic login system using Spring Security. It includes:\n\n*   **User Entity**: A simple entity representing a user with username and password.\n*   **Security Configuration (WebSecurityConfigurerAdapter)**: Configures the security settings, including the UserDetailsService and PasswordEncoder.\n*   **UserDetailsService**: Loads users from the database based on their usernames.\n*   **Controller**: Handles login and registration requests.\n\nNote that this is a simplified example for demonstration purposes. You should consider implementing additional features such as:\n\n*   Password hashing using BCrypt or another secure algorithm\n*   Token-based authentication (e.g., JWT) for added security\n*   Authentication failure handling and rate limiting", "code_blocks": [null, null, "```java\n@Entity\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(unique = true)\n    private String username;\n\n    private String password;\n\n    // Getters and Setters\n}\n```", "```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                .antMatchers(\"/register\").permitAll()\n                .anyRequest().authenticated()\n                .and()\n            .formLogin();\n    }\n}\n```", "```java\n@Service\npublic class CustomUserDetailsService implements UserDetailsService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = userRepository.findByUsername(username);\n        if (user == null) {\n            throw new UsernameNotFoundException(\"User not found\");\n        }\n        return new User(user.getUsername(), user.getPassword(), getAuthorities());\n    }\n\n    private List<GrantedAuthority> getAuthorities() {\n        // Authority can be changed to any role or authority\n        GrantedAuthority grantedAuthority = new SimpleGrantedAuthority(\"USER\");\n        return Collections.singletonList(grantedAuthority);\n    }\n}\n```", "```java\n@RestController\n@RequestMapping(\"/api\")\npublic class LoginController {\n\n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    @PostMapping(\"/login\")\n    public AuthenticationResponse login(@RequestBody LoginRequest request) {\n        try {\n            // Authenticate user\n            UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(request.getUsername(), request.getPassword());\n            Authentication authentication = authenticationManager.authenticate(token);\n\n            // Return JWT Token\n            return new AuthenticationResponse(token.getAuthorities().toString());\n        } catch (BadCredentialsException e) {\n            return new AuthenticationResponse(\"Invalid credentials\");\n        }\n    }\n\n    @PostMapping(\"/register\")\n    public RegistrationResponse register(@RequestBody RegistrationRequest request) {\n        User user = userRepository.save(new User(request.getUsername(), request.getPassword()));\n        return new RegistrationResponse(user.getId().toString());\n    }\n}\n```"]}
