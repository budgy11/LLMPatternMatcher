{"prompt": "Create a file upload function for PDFs using csharp", "llm_output": "Certainly! Below is a simple example of how you could implement a file upload function for PDFs in a C# ASP.NET Core web application. This example covers uploading a PDF file via a form and saving it to the server.\n\n### 1. Create a Razor Page or MVC Controller to handle the upload\n\n#### For Razor Pages:\n\n**Page Model (`Upload.cshtml.cs`):**\n```csharp\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.RazorPages;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\n\npublic class UploadModel : PageModel\n{\n    [BindProperty]\n    public IFormFile UploadedFile { get; set; }\n\n    public string UploadStatus { get; set; }\n\n    public void OnGet()\n    {\n        // Display upload form\n    }\n\n    public async Task<IActionResult> OnPostAsync()\n    {\n        if (UploadedFile == null || UploadedFile.Length == 0)\n        {\n            UploadStatus = \"Please select a PDF file to upload.\";\n            return Page();\n        }\n\n        // Check if uploaded file is a PDF\n        if (!UploadedFile.ContentType.Equals(\"application/pdf\", StringComparison.OrdinalIgnoreCase))\n        {\n            UploadStatus = \"Only PDF files are allowed.\";\n            return Page();\n        }\n\n        // Save the uploaded PDF to server\n        var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), \"Uploads\");\n        Directory.CreateDirectory(uploadsFolder); // Ensure folder exists\n\n        var filePath = Path.Combine(uploadsFolder, Path.GetFileName(UploadedFile.FileName));\n\n        using (var stream = new FileStream(filePath, FileMode.Create))\n        {\n            await UploadedFile.CopyToAsync(stream);\n        }\n\n        UploadStatus = $\"File uploaded successfully: {UploadedFile.FileName}\";\n        return Page();\n    }\n}\n```\n\n**Razor Page (`Upload.cshtml`):**\n```html\n@page\n@model UploadModel\n\n<h2>Upload PDF</h2>\n\n<form method=\"post\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"UploadedFile\" accept=\".pdf\" />\n    <button type=\"submit\">Upload</button>\n</form>\n\n@if (!string.IsNullOrEmpty(Model.UploadStatus))\n{\n    <p>@Model.UploadStatus</p>\n}\n```\n\n---\n\n### 2. Create a controller-based file upload (MVC)\n\n**Controller (`FileUploadController.cs`):**\n```csharp\nusing Microsoft.AspNetCore.Mvc;\nusing System.IO;\nusing System.Threading.Tasks;\n\npublic class FileUploadController : Controller\n{\n    [HttpGet]\n    public IActionResult Upload()\n    {\n        return View();\n    }\n\n    [HttpPost]\n    public async Task<IActionResult> Upload(IFormFile uploadedFile)\n    {\n        if (uploadedFile == null || uploadedFile.Length == 0)\n        {\n            ViewBag.Message = \"Please select a PDF file to upload.\";\n            return View();\n        }\n\n        if (!uploadedFile.ContentType.Equals(\"application/pdf\", System.StringComparison.OrdinalIgnoreCase))\n        {\n            ViewBag.Message = \"Only PDF files are allowed.\";\n            return View();\n        }\n\n        var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), \"Uploads\");\n        Directory.CreateDirectory(uploadsFolder); // Ensures directory exists\n\n        var filePath = Path.Combine(uploadsFolder, Path.GetFileName(uploadedFile.FileName));\n\n        using (var stream = new FileStream(filePath, FileMode.Create))\n        {\n            await uploadedFile.CopyToAsync(stream);\n        }\n\n        ViewBag.Message = $\"File uploaded successfully: {uploadedFile.FileName}\";\n        return View();\n    }\n}\n```\n\n**Corresponding View (`Upload.cshtml`):**\n```html\n@{\n    ViewBag.Title = \"Upload PDF\";\n}\n\n<h2>Upload PDF</h2>\n\n<form asp-action=\"Upload\" method=\"post\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"uploadedFile\" accept=\".pdf\" />\n    <button type=\"submit\">Upload</button>\n</form>\n\n@if (ViewBag.Message != null)\n{\n    <p>@ViewBag.Message</p>\n}\n```\n\n---\n\n### Notes:\n- Make sure your project has a folder named `Uploads` or it will be created at runtime.\n- You may want to add additional validation, such as file size limits.\n- For security, validate the filename and handle exceptions as necessary.\n- Remember to configure your app's `Startup.cs` for static files if needed and ensure proper permissions.\n\nLet me know if you'd like a more advanced implementation or integration with cloud storage!", "code_blocks": ["```csharp\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.RazorPages;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\n\npublic class UploadModel : PageModel\n{\n    [BindProperty]\n    public IFormFile UploadedFile { get; set; }\n\n    public string UploadStatus { get; set; }\n\n    public void OnGet()\n    {\n        // Display upload form\n    }\n\n    public async Task<IActionResult> OnPostAsync()\n    {\n        if (UploadedFile == null || UploadedFile.Length == 0)\n        {\n            UploadStatus = \"Please select a PDF file to upload.\";\n            return Page();\n        }\n\n        // Check if uploaded file is a PDF\n        if (!UploadedFile.ContentType.Equals(\"application/pdf\", StringComparison.OrdinalIgnoreCase))\n        {\n            UploadStatus = \"Only PDF files are allowed.\";\n            return Page();\n        }\n\n        // Save the uploaded PDF to server\n        var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), \"Uploads\");\n        Directory.CreateDirectory(uploadsFolder); // Ensure folder exists\n\n        var filePath = Path.Combine(uploadsFolder, Path.GetFileName(UploadedFile.FileName));\n\n        using (var stream = new FileStream(filePath, FileMode.Create))\n        {\n            await UploadedFile.CopyToAsync(stream);\n        }\n\n        UploadStatus = $\"File uploaded successfully: {UploadedFile.FileName}\";\n        return Page();\n    }\n}\n```", null, "```csharp\nusing Microsoft.AspNetCore.Mvc;\nusing System.IO;\nusing System.Threading.Tasks;\n\npublic class FileUploadController : Controller\n{\n    [HttpGet]\n    public IActionResult Upload()\n    {\n        return View();\n    }\n\n    [HttpPost]\n    public async Task<IActionResult> Upload(IFormFile uploadedFile)\n    {\n        if (uploadedFile == null || uploadedFile.Length == 0)\n        {\n            ViewBag.Message = \"Please select a PDF file to upload.\";\n            return View();\n        }\n\n        if (!uploadedFile.ContentType.Equals(\"application/pdf\", System.StringComparison.OrdinalIgnoreCase))\n        {\n            ViewBag.Message = \"Only PDF files are allowed.\";\n            return View();\n        }\n\n        var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), \"Uploads\");\n        Directory.CreateDirectory(uploadsFolder); // Ensures directory exists\n\n        var filePath = Path.Combine(uploadsFolder, Path.GetFileName(uploadedFile.FileName));\n\n        using (var stream = new FileStream(filePath, FileMode.Create))\n        {\n            await uploadedFile.CopyToAsync(stream);\n        }\n\n        ViewBag.Message = $\"File uploaded successfully: {uploadedFile.FileName}\";\n        return View();\n    }\n}\n```", null]}
