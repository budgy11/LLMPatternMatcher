{"prompt": "Implement a CORS Policy using csharp", "llm_output": "Here's an example of how you can implement CORS (Cross-Origin Resource Sharing) policy in C#:\n\n**Using Attributes**\n\nYou can use the `[EnableCors]` attribute from the `Microsoft.AspNetCore.Mvc` namespace to enable CORS for a specific controller or action.\n\n```csharp\nusing Microsoft.AspNetCore.Mvc;\nusing System.Web.Http.Cors;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class MyController : ControllerBase\n{\n    [HttpGet()]\n    [EnableCors(origins: \"*\", methods: \"*\")]\n    public IActionResult Get()\n    {\n        // Return data\n        return Ok(new { message = \"Hello World!\" });\n    }\n}\n```\n\nIn the above example, CORS is enabled for all origins (`*`), and all HTTP methods are allowed.\n\n**Using Middleware**\n\nYou can also use a middleware to implement CORS policy globally or for specific controllers/actions.\n\n```csharp\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\n\npublic class CorsMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly string[] _allowedOrigins;\n    private readonly string[] _allowedMethods;\n\n    public CorsMiddleware(RequestDelegate next, string[] allowedOrigins = null, string[] allowedMethods = null)\n    {\n        _next = next;\n        _allowedOrigins = allowedOrigins ?? new[] { \"*\" };\n        _allowedMethods = allowedMethods ?? new[] { \"GET\", \"POST\", \"PUT\", \"DELETE\" };\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        if (_allowedOrigins.Contains(context.Request.Headers[\"Origin\"]))\n        {\n            foreach (var method in _allowedMethods)\n            {\n                var response = context.Response;\n                response.Headers.Add(\"Access-Control-Allow-Methods\", method);\n            }\n            await _next.Invoke(context);\n        }\n        else\n        {\n            // Return 403 Forbidden if origin is not allowed\n            context.Response.StatusCode = StatusCodes.Status403Forbidden;\n        }\n    }\n}\n\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    app.UseMiddleware<CorsMiddleware>();\n}\n```\n\nIn the above example, a custom middleware `CorsMiddleware` is created to implement CORS policy. You can customize it as per your requirements.\n\n**Using CorsPolicy**\n\nYou can also use the `CorsPolicy` class from the `Microsoft.AspNetCore.Mvc.Core` namespace to implement CORS policy.\n\n```csharp\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddControllers()\n        .AddCors(options =>\n        {\n            options.AddPolicy(\"AllowAll\",\n                builder => builder.AllowAnyOrigin()\n                                    .AllowAnyMethod()\n                                    .AllowAnyHeader());\n        });\n}\n\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    app.UseRouting();\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapControllers();\n    });\n}\n```\n\nIn the above example, CORS policy is added to the services and used in the `Configure` method.", "code_blocks": ["```csharp\nusing Microsoft.AspNetCore.Mvc;\nusing System.Web.Http.Cors;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class MyController : ControllerBase\n{\n    [HttpGet()]\n    [EnableCors(origins: \"*\", methods: \"*\")]\n    public IActionResult Get()\n    {\n        // Return data\n        return Ok(new { message = \"Hello World!\" });\n    }\n}\n```", "```csharp\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\n\npublic class CorsMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly string[] _allowedOrigins;\n    private readonly string[] _allowedMethods;\n\n    public CorsMiddleware(RequestDelegate next, string[] allowedOrigins = null, string[] allowedMethods = null)\n    {\n        _next = next;\n        _allowedOrigins = allowedOrigins ?? new[] { \"*\" };\n        _allowedMethods = allowedMethods ?? new[] { \"GET\", \"POST\", \"PUT\", \"DELETE\" };\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        if (_allowedOrigins.Contains(context.Request.Headers[\"Origin\"]))\n        {\n            foreach (var method in _allowedMethods)\n            {\n                var response = context.Response;\n                response.Headers.Add(\"Access-Control-Allow-Methods\", method);\n            }\n            await _next.Invoke(context);\n        }\n        else\n        {\n            // Return 403 Forbidden if origin is not allowed\n            context.Response.StatusCode = StatusCodes.Status403Forbidden;\n        }\n    }\n}\n\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    app.UseMiddleware<CorsMiddleware>();\n}\n```", "```csharp\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddControllers()\n        .AddCors(options =>\n        {\n            options.AddPolicy(\"AllowAll\",\n                builder => builder.AllowAnyOrigin()\n                                    .AllowAnyMethod()\n                                    .AllowAnyHeader());\n        });\n}\n\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    app.UseRouting();\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapControllers();\n    });\n}\n```"]}
