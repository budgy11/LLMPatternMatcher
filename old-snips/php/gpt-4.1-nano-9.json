{"prompt": "Implement a CORS Policy using php", "llm_output": "Implementing a CORS (Cross-Origin Resource Sharing) policy in PHP involves setting appropriate HTTP headers in your server responses to specify which origins are allowed to access your resources.\n\nHere's a simple example of how you might implement a basic CORS policy in PHP:\n\n```php\n<?php\n// List of allowed origins\n$allowed_origins = [\n    'https://example.com',\n    'https://subdomain.example.com'\n];\n\n// Get the Origin header from the request\nif (isset($_SERVER['HTTP_ORIGIN'])) {\n    $origin = $_SERVER['HTTP_ORIGIN'];\n    \n    // Check if the origin is in the allowed list\n    if (in_array($origin, $allowed_origins)) {\n        header(\"Access-Control-Allow-Origin: \" . $origin);\n        header('Access-Control-Allow-Methods: GET, POST, OPTIONS');\n        header('Access-Control-Allow-Headers: Content-Type, Authorization');\n        header('Access-Control-Allow-Credentials: true');\n    }\n}\n\n// Handle preflight OPTIONS request\nif ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {\n    // Response for preflight request\n    exit(0);\n}\n\n// Your regular PHP code here...\n?>\n```\n\n### Explanation:\n- `$allowed_origins`: Array of origins that you permit to access your server.\n- `$_SERVER['HTTP_ORIGIN']`: Contains the origin of the request sent by the browser.\n- When an origin is present and matches an allowed origin, setting `Access-Control-Allow-Origin` accordingly.\n- For preflight `OPTIONS` requests, respond immediately and exit.\n\n### Notes:\n- Always validate and sanitize the content of the origin headers for security.\n- Adjust headers like `Access-Control-Allow-Methods`, `Access-Control-Allow-Headers`, and others as necessary for your application.\n- If you want to allow credentials (cookies, HTTP authentication), set `Access-Control-Allow-Credentials: true` and ensure the `Access-Control-Allow-Origin` is not `*`.\n\n### Example: Allow all origins (not recommended for production)\n```php\nheader(\"Access-Control-Allow-Origin: *\");\n```\n\nHowever, for security, it's better to restrict origins as shown in the example.\n\n---\n\nWould you like a more advanced implementation or help with specific requirements?", "code_blocks": ["```php\n<?php\n// List of allowed origins\n$allowed_origins = [\n    'https://example.com',\n    'https://subdomain.example.com'\n];\n\n// Get the Origin header from the request\nif (isset($_SERVER['HTTP_ORIGIN'])) {\n    $origin = $_SERVER['HTTP_ORIGIN'];\n    \n    // Check if the origin is in the allowed list\n    if (in_array($origin, $allowed_origins)) {\n        header(\"Access-Control-Allow-Origin: \" . $origin);\n        header('Access-Control-Allow-Methods: GET, POST, OPTIONS');\n        header('Access-Control-Allow-Headers: Content-Type, Authorization');\n        header('Access-Control-Allow-Credentials: true');\n    }\n}\n\n// Handle preflight OPTIONS request\nif ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {\n    // Response for preflight request\n    exit(0);\n}\n\n// Your regular PHP code here...\n?>\n```", "```php\nheader(\"Access-Control-Allow-Origin: *\");\n```"]}
