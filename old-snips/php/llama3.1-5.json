{"prompt": "Create a file upload function for PDFs using php", "llm_output": "**File Upload Function for PDFs using PHP**\n====================================================\n\nBelow is an example of a file upload function for PDFs using PHP. This function checks if the uploaded file is a valid PDF, handles errors, and saves the file to a specified directory.\n\n### Code\n```php\n<?php\n\n// Configuration variables\n$uploadDir = 'uploads/';\n$maxFileSize = 10 * 1024 * 1024; // 10MB\n$allowedFileTypes = array('pdf');\n\nfunction uploadPdf($file) {\n    if (!is_uploaded_file($file['tmp_name'])) {\n        throw new Exception('Invalid file');\n    }\n\n    $fileName = basename($file['name']);\n    $fileExt = pathinfo($fileName, PATHINFO_EXTENSION);\n\n    // Check file type\n    if (!in_array(strtolower($fileExt), $allowedFileTypes)) {\n        throw new Exception('Only PDF files are allowed');\n    }\n\n    // Check file size\n    if ($file['size'] > $maxFileSize) {\n        throw new Exception('File exceeds the maximum size of 10MB');\n    }\n\n    try {\n        move_uploaded_file($file['tmp_name'], $uploadDir . $fileName);\n        return array(\n            'success' => true,\n            'message' => 'PDF uploaded successfully',\n            'filePath' => $uploadDir . $fileName\n        );\n    } catch (Exception $e) {\n        throw new Exception('Error uploading file: ' . $e->getMessage());\n    }\n}\n\n// Example usage:\n$file = $_FILES['file'];\ntry {\n    $result = uploadPdf($file);\n    echo json_encode($result);\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode(array(\n        'success' => false,\n        'message' => $e->getMessage()\n    ));\n}\n\n?>\n```\n### Explanation\n\n*   The `uploadDir` variable specifies the directory where uploaded files will be saved.\n*   The `$maxFileSize` variable defines the maximum allowed file size for uploads (10MB in this example).\n*   The `$allowedFileTypes` array lists the allowed file types (only PDFs in this case).\n*   The `uploadPdf` function takes a single argument, `$file`, which represents the uploaded file.\n*   It checks if the uploaded file is valid using `is_uploaded_file`.\n*   It verifies the file type by checking the extension against the list of allowed types.\n*   It ensures the file size does not exceed the maximum limit.\n*   If all checks pass, it saves the file to the specified directory and returns a success message with the file path.\n\n### Example Usage\n\nTo test this function, create an HTML form that allows users to upload PDF files. When submitting the form, the PHP script will be called to handle the file upload:\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>PDF Upload</title>\n</head>\n<body>\n\n<form action=\"upload.php\" method=\"post\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"file\" accept=\".pdf\">\n    <button type=\"submit\">Upload PDF</button>\n</form>\n\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n<script>\n    $(document).ready(function() {\n        $('form').on('submit', function(e) {\n            e.preventDefault();\n            var formData = new FormData(this);\n            $.ajax({\n                type: 'POST',\n                url: $(this).attr('action'),\n                data: formData,\n                processData: false,\n                contentType: false,\n                success: function(data) {\n                    console.log(data);\n                    alert(data.message);\n                },\n                error: function(xhr, status, error) {\n                    console.error(error);\n                    alert('Error uploading file');\n                }\n            });\n        });\n    });\n</script>\n\n</body>\n</html>\n```\nIn this example, the HTML form sends a POST request to `upload.php` when submitted. The PHP script handles the file upload and returns a JSON response with a success message or an error message in case of failure.", "code_blocks": ["```php\n<?php\n\n// Configuration variables\n$uploadDir = 'uploads/';\n$maxFileSize = 10 * 1024 * 1024; // 10MB\n$allowedFileTypes = array('pdf');\n\nfunction uploadPdf($file) {\n    if (!is_uploaded_file($file['tmp_name'])) {\n        throw new Exception('Invalid file');\n    }\n\n    $fileName = basename($file['name']);\n    $fileExt = pathinfo($fileName, PATHINFO_EXTENSION);\n\n    // Check file type\n    if (!in_array(strtolower($fileExt), $allowedFileTypes)) {\n        throw new Exception('Only PDF files are allowed');\n    }\n\n    // Check file size\n    if ($file['size'] > $maxFileSize) {\n        throw new Exception('File exceeds the maximum size of 10MB');\n    }\n\n    try {\n        move_uploaded_file($file['tmp_name'], $uploadDir . $fileName);\n        return array(\n            'success' => true,\n            'message' => 'PDF uploaded successfully',\n            'filePath' => $uploadDir . $fileName\n        );\n    } catch (Exception $e) {\n        throw new Exception('Error uploading file: ' . $e->getMessage());\n    }\n}\n\n// Example usage:\n$file = $_FILES['file'];\ntry {\n    $result = uploadPdf($file);\n    echo json_encode($result);\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode(array(\n        'success' => false,\n        'message' => $e->getMessage()\n    ));\n}\n\n?>\n```", null]}
