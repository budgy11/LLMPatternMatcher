{"prompt": "Create a session cookie using ruby", "llm_output": "To create a session cookie in Ruby, especially within a web application framework like **Rails** or a lightweight framework like **Sinatra**, you typically utilize the framework's cookie management features.\n\n### In Ruby on Rails\n\nRails automatically manages session cookies. You can set session variables, and Rails will handle creating and sending the cookie.\n\n**Example:**\n\n```ruby\nclass ApplicationController < ActionController::Base\n  def set_session\n    session[:user_id] = 123\n    # This will create or update the session cookie\n  end\n\n  def get_session\n    user_id = session[:user_id]\n    render plain: \"User ID from session: #{user_id}\"\n  end\nend\n```\n\n**Explanation:**\n- `session[:key] = value` sets a session variable.\n- Rails automatically encodes the session data into a session cookie.\n\n---\n\n### In Sinatra (a lightweight Ruby framework)\n\nYou can manually set cookies, including session cookies.\n\n**Example:**\n\n```ruby\nrequire 'sinatra'\n\nenable :sessions\n\nget '/set_session' do\n  session[:user_id] = 123\n  \"Session is set!\"\nend\n\nget '/get_session' do\n  \"User ID: #{session[:user_id]}\"\nend\n```\n\n**Explanation:**\n- `enable :sessions` allows Sinatra to manage session cookies.\n- Setting `session[:key]` stores data in the session cookie.\n\n---\n\n### Manually Creating a Cookie (without a framework)\n\nIf you want to manually create a session cookie, you can do something like:\n\n```ruby\nrequire 'cgi'\n\n# Create a new cookie value (could encode session data)\nsession_id = \"abc123\"  # Normally, generate a unique session identifier\n\n# Set cookie parameters\ncookie_name = \"session_id\"\ncookie_value = session_id\nexpires = Time.now + 3600 # 1 hour\n\n# Generate the \"Set-Cookie\" header\ncookie = CGI.escape(\"#{cookie_name}=#{cookie_value}; path=/; expires=#{expires.httpdate}\")\n\n# Output the header (e.g., in a Rack app)\nputs \"Set-Cookie: #{cookie}\"\n```\n\nIn a real application, you'd generate a secure, unique session ID, possibly store session data server-side linked to this ID, and set the cookie appropriately.\n\n---\n\n### Summary\n\n- **Using Rails:** Just assign `session[:key] = value`.\n- **Using Sinatra:** Enable sessions with `enable :sessions` and assign values to `session`.\n- **Manual creation:** Set the `Set-Cookie` header with desired attributes.\n\nLet me know if you're working in a particular context or framework!", "code_blocks": ["```ruby\nclass ApplicationController < ActionController::Base\n  def set_session\n    session[:user_id] = 123\n    # This will create or update the session cookie\n  end\n\n  def get_session\n    user_id = session[:user_id]\n    render plain: \"User ID from session: #{user_id}\"\n  end\nend\n```", "```ruby\nrequire 'sinatra'\n\nenable :sessions\n\nget '/set_session' do\n  session[:user_id] = 123\n  \"Session is set!\"\nend\n\nget '/get_session' do\n  \"User ID: #{session[:user_id]}\"\nend\n```", "```ruby\nrequire 'cgi'\n\n# Create a new cookie value (could encode session data)\nsession_id = \"abc123\"  # Normally, generate a unique session identifier\n\n# Set cookie parameters\ncookie_name = \"session_id\"\ncookie_value = session_id\nexpires = Time.now + 3600 # 1 hour\n\n# Generate the \"Set-Cookie\" header\ncookie = CGI.escape(\"#{cookie_name}=#{cookie_value}; path=/; expires=#{expires.httpdate}\")\n\n# Output the header (e.g., in a Rack app)\nputs \"Set-Cookie: #{cookie}\"\n```"]}
