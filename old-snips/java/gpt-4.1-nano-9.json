{"prompt": "Implement a CORS Policy using java", "llm_output": "Implementing a CORS (Cross-Origin Resource Sharing) policy in Java is typically done in a web application to control how resources are shared across different origins. The implementation depends on the framework you are using. Below are examples for **Servlets** (plain Java EE), **Spring Boot**, and **JAX-RS**.\n\n---\n\n### 1. CORS in Plain Java Servlets\n\nYou can set CORS headers in your servlet's `doGet()`, `doPost()`, etc.\n\n```java\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport java.io.IOException;\n\npublic class MyServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        // Set CORS headers\n        response.setHeader(\"Access-Control-Allow-Origin\", \"https://example.com\");\n        response.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\");\n        response.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n        response.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n        \n        // Handle the request...\n        response.getWriter().write(\"Hello CORS!\");\n    }\n\n    @Override\n    protected void doOptions(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        // Handle preflight request\n        response.setHeader(\"Access-Control-Allow-Origin\", \"https://example.com\");\n        response.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\");\n        response.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n        response.setHeader(\"Access-Control-Max-Age\", \"3600\");\n        response.setStatus(HttpServletResponse.SC_OK);\n    }\n}\n```\n\n---\n\n### 2. CORS in Spring Boot\n\nSpring Boot simplifies CORS configuration via annotations or WebMvcConfigurer.\n\n#### a) Using `@CrossOrigin` annotation:\n\n```java\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@RestController\n@CrossOrigin(origins = \"https://example.com\", allowedHeaders = \"*\", allowCredentials = \"true\")\npublic class MyController {\n\n    @GetMapping(\"/greeting\")\n    public String greeting() {\n        return \"Hello, CORS!\";\n    }\n}\n```\n\n#### b) Global CORS configuration (recommended):\n\n```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.*;\n\n@Configuration\npublic class WebConfig implements WebMvcConfigurer {\n    \n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOrigins(\"https://example.com\")\n                .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\")\n                .allowedHeaders(\"*\")\n                .allowCredentials(true)\n                .maxAge(3600);\n    }\n}\n```\n\n---\n\n### 3. CORS in JAX-RS (e.g., Jersey)\n\nYou can create a filter:\n\n```java\nimport javax.annotation.Priority;\nimport javax.ws.rs.Priorities;\nimport javax.ws.rs.container.*;\nimport javax.ws.rs.core.Response;\n\n@Provider\n@PreMatching\n@Priority(Priorities.AUTHORIZATION) // or as appropriate\npublic class CORSFilter implements ContainerRequestFilter, ContainerResponseFilter {\n\n    @Override\n    public void filter(ContainerRequestContext requestContext) throws IOException {\n        // No op for request\n    }\n\n    @Override\n    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) throws IOException {\n        responseContext.getHeaders().add(\"Access-Control-Allow-Origin\", \"https://example.com\");\n        responseContext.getHeaders().add(\"Access-Control-Allow-Headers\", \"origin, content-type, accept, authorization\");\n        responseContext.getHeaders().add(\"Access-Control-Allow-Credentials\", \"true\");\n        responseContext.getHeaders().add(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS, HEAD\");\n        responseContext.getHeaders().add(\"Access-Control-Max-Age\", \"3600\");\n    }\n}\n```\n\n---\n\n### Summary:\n- Always specify `Access-Control-Allow-Origin`, typically with a specific domain or `*` (less secure).\n- Use `Access-Control-Allow-Methods` to specify allowed methods.\n- Use `Access-Control-Allow-Headers` for custom headers.\n- For credentialed requests (`allowCredentials = true`), the origin cannot be `*`.\n\nLet me know if you're using a specific framework or environment, and I can tailor the example further!", "code_blocks": ["```java\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport java.io.IOException;\n\npublic class MyServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        // Set CORS headers\n        response.setHeader(\"Access-Control-Allow-Origin\", \"https://example.com\");\n        response.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\");\n        response.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n        response.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n        \n        // Handle the request...\n        response.getWriter().write(\"Hello CORS!\");\n    }\n\n    @Override\n    protected void doOptions(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        // Handle preflight request\n        response.setHeader(\"Access-Control-Allow-Origin\", \"https://example.com\");\n        response.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\");\n        response.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n        response.setHeader(\"Access-Control-Max-Age\", \"3600\");\n        response.setStatus(HttpServletResponse.SC_OK);\n    }\n}\n```", "```java\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@RestController\n@CrossOrigin(origins = \"https://example.com\", allowedHeaders = \"*\", allowCredentials = \"true\")\npublic class MyController {\n\n    @GetMapping(\"/greeting\")\n    public String greeting() {\n        return \"Hello, CORS!\";\n    }\n}\n```", "```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.*;\n\n@Configuration\npublic class WebConfig implements WebMvcConfigurer {\n    \n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOrigins(\"https://example.com\")\n                .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\")\n                .allowedHeaders(\"*\")\n                .allowCredentials(true)\n                .maxAge(3600);\n    }\n}\n```", "```java\nimport javax.annotation.Priority;\nimport javax.ws.rs.Priorities;\nimport javax.ws.rs.container.*;\nimport javax.ws.rs.core.Response;\n\n@Provider\n@PreMatching\n@Priority(Priorities.AUTHORIZATION) // or as appropriate\npublic class CORSFilter implements ContainerRequestFilter, ContainerResponseFilter {\n\n    @Override\n    public void filter(ContainerRequestContext requestContext) throws IOException {\n        // No op for request\n    }\n\n    @Override\n    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) throws IOException {\n        responseContext.getHeaders().add(\"Access-Control-Allow-Origin\", \"https://example.com\");\n        responseContext.getHeaders().add(\"Access-Control-Allow-Headers\", \"origin, content-type, accept, authorization\");\n        responseContext.getHeaders().add(\"Access-Control-Allow-Credentials\", \"true\");\n        responseContext.getHeaders().add(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS, HEAD\");\n        responseContext.getHeaders().add(\"Access-Control-Max-Age\", \"3600\");\n    }\n}\n```"]}
