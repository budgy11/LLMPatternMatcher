{"prompt": "Create a reset password function using java", "llm_output": "\n\nTo create a function that resets a password by generating a random string, shuffling it, and sending it via email, follow these steps:\n\n1. **Generate a Random Password**: Create a 12-character string with uppercase letters, lowercase letters, and digits.\n\n2. **Shuffle the Characters**: Use the Fisher-Yates shuffle algorithm to randomly rearrange the characters in the password.\n\n3. **Send the Password via Email**: Compose an email message containing the shuffled password and send it to the provided email address.\n\nHere's a Java implementation of the above steps:\n\n```java\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.mail.*;\nimport javax.mail-compositions.*;\n\npublic class PasswordResetFunction {\n    private static final String DEFAULT_EMAIL = \"password_reset@example.com\";\n    \n    public static void resetPassword(String currentPassword, String email) throws IllegalArgumentException {\n        // Step 1: Generate a random password\n        StringBuilder passwordBuilder = new StringBuilder();\n        for (int i = 0; i < 12; i++) {\n            char c = Character.toUpperCase((char) ('A' + Math.random() * 26));\n            if (i % 2 == 1) { // Add a digit randomly\n                int d = Math.random() * 10;\n                c = (char) ('0' + d);\n            }\n            passwordBuilder.append(c);\n        }\n\n        String randomPassword = passwordBuilder.toString();\n\n        // Step 2: Shuffle the password\n        char[] chars = randomPassword.toCharArray();\n        List<Character> characters = new ArrayList<>();\n        for (Character c : chars) {\n            characters.add(c);\n        }\n        Collections.shuffle(characters);\n\n        StringBuilder shuffledPasswordBuilder = new StringBuilder();\n        for (Character c : characters) {\n            shuffledPasswordBuilder.append(c);\n        }\n\n        String password = shuffledPasswordBuilder.toString();\n\n        // Step 3: Send the password via email\n        if (!isEmailValid(email)) {\n            throw new IllegalArgumentException(\"Invalid email address\");\n        }\n\n        try {\n            // Compose the email message\n            Letter letter = Letters.get();\n            letter.setSubject(\"Reset Your Password\");\n            \n            String body = \"Dear \" + email + \",\\n\\nYour password has been reset:\\n\" + password;\n\n            MimeMessage emailMessage = MimeMessage.getLetters();\n            emailMessage.addLetter(letter);\n            emailMessage.getBody(body);\n\n            // Send the email\n            SendEmailContext context = new SendEmailContext(getDefaultSMTP());\n            context.send(fromEmail, email, emailMessage);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to send reset password: \" + e.getMessage(), e);\n        }\n    }\n\n    private static boolean isEmailValid(String email) {\n        try {\n            // Basic validation for an email\n            if (!email.matches(\"[a-zA-Z0-9.-]+@[a-zA-Z0-9].*\\\\.[a-zA-Z]{2,4}$\")) {\n                throw new IllegalArgumentException();\n            }\n            return true;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Invalid email format: \" + email);\n        }\n    }\n\n    private static final String getDefaultSMTP() {\n        // Default SMTP settings for sending emails\n        return SendEmailContext.getURLProperty(\"server\", null, \"smtp.example.com\");\n    }\n}\n```\n\n**Note:** \n\n- **Email Validation**: The `isEmailValid` method provides a basic email format check. For production use, consider integrating a more robust email validation mechanism.\n  \n- **SMTP Configuration**: The default SMTP server might need to be adjusted or replaced with your own configured SMTP server.\n\n- **Composing Emails**: Using JavaxMail's `Letters` and `MimeMessage` classes is deprecated as of Java 9. It is recommended to switch to SLAM libraries (like SL4J) for more modern and reliable email handling, especially when using newer Java versions or Java 8+.\n\n**Modifications for Modern Java**:\n\n1. Replace JavaxMail imports with SLAM.\n2. Use `Message` instead of `MimeMessage`.\n3. Utilize `Composer` to build the email message.\n4. Implement a proper SMTP configuration, possibly through an `Envelope`.\n\nFor production use, it's advisable to refactor this code using SLAM libraries for better reliability and support.\n\n**Testing**:\n\n1. **Email Validation**: Ensure that valid emails pass validation and invalid ones fail.\n2. **Password Shuffling**: Verify that the shuffled password is different from the original random one generated each time.\n3. **Error Handling**: Check if exceptions are caught and propagated correctly when sending fails or when email addresses are invalid.\n\nThis implementation provides a basic structure for resetting passwords via email, ensuring security through random string generation, shuffling, and secure email transmission.", "code_blocks": ["```java\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.mail.*;\nimport javax.mail-compositions.*;\n\npublic class PasswordResetFunction {\n    private static final String DEFAULT_EMAIL = \"password_reset@example.com\";\n    \n    public static void resetPassword(String currentPassword, String email) throws IllegalArgumentException {\n        // Step 1: Generate a random password\n        StringBuilder passwordBuilder = new StringBuilder();\n        for (int i = 0; i < 12; i++) {\n            char c = Character.toUpperCase((char) ('A' + Math.random() * 26));\n            if (i % 2 == 1) { // Add a digit randomly\n                int d = Math.random() * 10;\n                c = (char) ('0' + d);\n            }\n            passwordBuilder.append(c);\n        }\n\n        String randomPassword = passwordBuilder.toString();\n\n        // Step 2: Shuffle the password\n        char[] chars = randomPassword.toCharArray();\n        List<Character> characters = new ArrayList<>();\n        for (Character c : chars) {\n            characters.add(c);\n        }\n        Collections.shuffle(characters);\n\n        StringBuilder shuffledPasswordBuilder = new StringBuilder();\n        for (Character c : characters) {\n            shuffledPasswordBuilder.append(c);\n        }\n\n        String password = shuffledPasswordBuilder.toString();\n\n        // Step 3: Send the password via email\n        if (!isEmailValid(email)) {\n            throw new IllegalArgumentException(\"Invalid email address\");\n        }\n\n        try {\n            // Compose the email message\n            Letter letter = Letters.get();\n            letter.setSubject(\"Reset Your Password\");\n            \n            String body = \"Dear \" + email + \",\\n\\nYour password has been reset:\\n\" + password;\n\n            MimeMessage emailMessage = MimeMessage.getLetters();\n            emailMessage.addLetter(letter);\n            emailMessage.getBody(body);\n\n            // Send the email\n            SendEmailContext context = new SendEmailContext(getDefaultSMTP());\n            context.send(fromEmail, email, emailMessage);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Failed to send reset password: \" + e.getMessage(), e);\n        }\n    }\n\n    private static boolean isEmailValid(String email) {\n        try {\n            // Basic validation for an email\n            if (!email.matches(\"[a-zA-Z0-9.-]+@[a-zA-Z0-9].*\\\\.[a-zA-Z]{2,4}$\")) {\n                throw new IllegalArgumentException();\n            }\n            return true;\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Invalid email format: \" + email);\n        }\n    }\n\n    private static final String getDefaultSMTP() {\n        // Default SMTP settings for sending emails\n        return SendEmailContext.getURLProperty(\"server\", null, \"smtp.example.com\");\n    }\n}\n```"]}
