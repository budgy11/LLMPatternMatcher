{"prompt": "Create a search function using ASP.NET", "llm_output": "Here's an example of a basic search function in ASP.NET Core 3.1 using Entity Framework Core and Razor Pages.\n\n**Model**\n\nFirst, let's define the `Book` model:\n```csharp\npublic class Book\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Author { get; set; }\n}\n```\n**DbContext**\n\nNext, create a `DbContext` that will be used to interact with the database:\n```csharp\npublic class MyDbContext : DbContext\n{\n    public DbSet<Book> Books { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlServer(@\"Data Source=(localdb)\\mssqllocaldb;Initial Catalog=MyDatabase;Integrated Security=True\");\n    }\n}\n```\n**Search Function**\n\nNow, let's create a search function that will be used to find books based on user input:\n```csharp\npublic class SearchModel : PageModel\n{\n    [BindProperty]\n    public string SearchQuery { get; set; }\n\n    private readonly MyDbContext _context;\n\n    public SearchModel(MyDbContext context)\n    {\n        _context = context;\n    }\n\n    public IActionResult OnGet()\n    {\n        return Page();\n    }\n\n    public async Task<IActionResult> OnPostSearchAsync()\n    {\n        var books = await _context.Books\n            .Where(b => b.Title.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||\n                       b.Author.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))\n            .ToListAsync();\n\n        return Page();\n    }\n}\n```\nIn this example, we're using the `Contains` method to search for books based on both title and author. We're also using the `StringComparison.OrdinalIgnoreCase` overload to perform a case-insensitive search.\n\n**Razor Page**\n\nFinally, let's create a Razor page that will display the search form and results:\n```csharp\n@page\n@model SearchModel\n\n<h1>Search</h1>\n\n<form method=\"post\">\n    <input type=\"text\" asp-for=\"@Model.SearchQuery\" placeholder=\"Search for books...\" />\n    <button type=\"submit\">Search</button>\n</form>\n\n@if (Model.Books.Any())\n{\n    <ul>\n        @foreach (var book in Model.Books)\n        {\n            <li>@book.Title by @book.Author</li>\n        }\n    </ul>\n}\nelse\n{\n    <p>No results found.</p>\n}\n```\nIn this example, we're using the `asp-for` attribute to bind the search query input field to the `SearchQuery` property of our model. We're also using a `foreach` loop to display the search results.\n\n**Conclusion**\n\nThis is a basic example of how you can create a search function in ASP.NET Core 3.1 using Entity Framework Core and Razor Pages. You can customize this code to fit your specific needs, such as adding more fields to search on or implementing pagination.", "code_blocks": ["```csharp\npublic class Book\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Author { get; set; }\n}\n```", "```csharp\npublic class MyDbContext : DbContext\n{\n    public DbSet<Book> Books { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseSqlServer(@\"Data Source=(localdb)\\mssqllocaldb;Initial Catalog=MyDatabase;Integrated Security=True\");\n    }\n}\n```", "```csharp\npublic class SearchModel : PageModel\n{\n    [BindProperty]\n    public string SearchQuery { get; set; }\n\n    private readonly MyDbContext _context;\n\n    public SearchModel(MyDbContext context)\n    {\n        _context = context;\n    }\n\n    public IActionResult OnGet()\n    {\n        return Page();\n    }\n\n    public async Task<IActionResult> OnPostSearchAsync()\n    {\n        var books = await _context.Books\n            .Where(b => b.Title.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||\n                       b.Author.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))\n            .ToListAsync();\n\n        return Page();\n    }\n}\n```", "```csharp\n@page\n@model SearchModel\n\n<h1>Search</h1>\n\n<form method=\"post\">\n    <input type=\"text\" asp-for=\"@Model.SearchQuery\" placeholder=\"Search for books...\" />\n    <button type=\"submit\">Search</button>\n</form>\n\n@if (Model.Books.Any())\n{\n    <ul>\n        @foreach (var book in Model.Books)\n        {\n            <li>@book.Title by @book.Author</li>\n        }\n    </ul>\n}\nelse\n{\n    <p>No results found.</p>\n}\n```"]}
