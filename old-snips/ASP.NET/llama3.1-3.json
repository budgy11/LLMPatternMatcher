{"prompt": "Create a forgot password function using ASP.NET", "llm_output": "Here is an example of how to create a \"Forgot Password\" functionality in ASP.NET:\n\n**Database Schema**\n\nAssuming you have a database table called `Users` with the following columns:\n\n| Column Name | Data Type |\n| --- | --- |\n| `UserId` | int (primary key) |\n| `Email` | varchar(255) |\n| `PasswordHash` | varchar(255) |\n\n**ASP.NET Code**\n\nCreate a new ASP.NET MVC project and add a new controller called `AccountController`. In the `AccountController`, add a new action method called `ForgotPassword`.\n\n```csharp\npublic class AccountController : Controller\n{\n    private readonly IUserService _userService;\n\n    public AccountController(IUserService userService)\n    {\n        _userService = userService;\n    }\n\n    [HttpGet]\n    public ActionResult ForgotPassword()\n    {\n        return View();\n    }\n\n    [HttpPost]\n    public ActionResult ForgotPassword(string email)\n    {\n        if (ModelState.IsValid)\n        {\n            var user = _userService.GetUserByEmail(email);\n            if (user != null)\n            {\n                // Generate a reset password token and send it to the user's email\n                var token = Guid.NewGuid().ToString();\n                _userService.UpdateUserToken(user.UserId, token);\n\n                // Send an email with the reset password link\n                var emailBody = $\"Click this link to reset your password: <a href=\\\"http://example.com/resetpassword?token={token}\\\">Reset Password</a>\";\n                _userService.SendEmail(user.Email, \"Reset Password\", emailBody);\n            }\n        }\n\n        return View();\n    }\n}\n```\n\nIn the above code:\n\n*   We have an `IUserService` interface that provides methods to interact with the database.\n*   The `ForgotPassword` action method is called when the user clicks on the \"Forgot Password\" link.\n*   If the email address is valid, we generate a reset password token and update it in the database.\n*   Finally, we send an email to the user's email address with a reset password link.\n\n**Reset Password Page**\n\nCreate a new view called `ResetPassword.cshtml` that will be displayed when the user clicks on the reset password link:\n\n```csharp\n@model ResetPasswordModel\n\n<div class=\"container\">\n    <h2>Reset Your Password</h2>\n    @using (Html.BeginForm(\"ResetPassword\", \"Account\"))\n    {\n        @Html.AntiForgeryToken()\n\n        <div class=\"form-group\">\n            @Html.LabelFor(m => m.Email)\n            @Html.TextBoxFor(m => m.Email, new { @class = \"form-control\" })\n            @Html.ValidationMessageFor(m => m.Email)\n        </div>\n\n        <button type=\"submit\" class=\"btn btn-primary\">Reset Password</button>\n    }\n</div>\n```\n\nIn the above code:\n\n*   We create a view model called `ResetPasswordModel` that contains an email property.\n*   The view displays a form with an input field for the email address.\n\n**Update Password**\n\nCreate a new action method in the `AccountController` to update the user's password:\n\n```csharp\n[HttpPost]\npublic ActionResult ResetPassword(string token, string newPassword)\n{\n    var userId = _userService.GetUserByToken(token);\n    if (userId != null)\n    {\n        // Update the user's password hash\n        var user = _userService.GetUser(userId);\n        user.PasswordHash = _userService.GeneratePasswordHash(newPassword);\n        _userService.UpdateUser(user);\n\n        return RedirectToAction(\"Login\");\n    }\n\n    ModelState.AddModelError(\"\", \"Invalid token or email address.\");\n    return View();\n}\n```\n\nIn the above code:\n\n*   We retrieve the user ID from the database using the reset password token.\n*   If the token is valid, we update the user's password hash.\n\n**Password Hashing**\n\nCreate a new class called `PasswordHasher` that provides methods to generate and verify password hashes:\n\n```csharp\npublic class PasswordHasher : IPasswordHasher\n{\n    public string GeneratePasswordHash(string password)\n    {\n        var salt = Guid.NewGuid().ToString();\n        var hashedPassword = BCrypt.HashPassword(password, salt);\n        return $\"{salt}:{hashedPassword}\";\n    }\n\n    public bool VerifyPasswordHash(string password, string hash)\n    {\n        var parts = hash.Split(':');\n        var salt = parts[0];\n        var hashedPassword = parts[1];\n\n        return BCrypt.Verify(password, salt, hashedPassword);\n    }\n}\n```\n\nIn the above code:\n\n*   We use the `BCrypt` library to generate and verify password hashes.\n*   The `GeneratePasswordHash` method generates a random salt and hashes the password using the salt.\n\nThat's it! You now have a \"Forgot Password\" functionality in your ASP.NET application. When a user clicks on the \"Forgot Password\" link, they will be sent an email with a reset password link that allows them to update their password.", "code_blocks": ["```csharp\npublic class AccountController : Controller\n{\n    private readonly IUserService _userService;\n\n    public AccountController(IUserService userService)\n    {\n        _userService = userService;\n    }\n\n    [HttpGet]\n    public ActionResult ForgotPassword()\n    {\n        return View();\n    }\n\n    [HttpPost]\n    public ActionResult ForgotPassword(string email)\n    {\n        if (ModelState.IsValid)\n        {\n            var user = _userService.GetUserByEmail(email);\n            if (user != null)\n            {\n                // Generate a reset password token and send it to the user's email\n                var token = Guid.NewGuid().ToString();\n                _userService.UpdateUserToken(user.UserId, token);\n\n                // Send an email with the reset password link\n                var emailBody = $\"Click this link to reset your password: <a href=\\\"http://example.com/resetpassword?token={token}\\\">Reset Password</a>\";\n                _userService.SendEmail(user.Email, \"Reset Password\", emailBody);\n            }\n        }\n\n        return View();\n    }\n}\n```", "```csharp\n@model ResetPasswordModel\n\n<div class=\"container\">\n    <h2>Reset Your Password</h2>\n    @using (Html.BeginForm(\"ResetPassword\", \"Account\"))\n    {\n        @Html.AntiForgeryToken()\n\n        <div class=\"form-group\">\n            @Html.LabelFor(m => m.Email)\n            @Html.TextBoxFor(m => m.Email, new { @class = \"form-control\" })\n            @Html.ValidationMessageFor(m => m.Email)\n        </div>\n\n        <button type=\"submit\" class=\"btn btn-primary\">Reset Password</button>\n    }\n</div>\n```", "```csharp\n[HttpPost]\npublic ActionResult ResetPassword(string token, string newPassword)\n{\n    var userId = _userService.GetUserByToken(token);\n    if (userId != null)\n    {\n        // Update the user's password hash\n        var user = _userService.GetUser(userId);\n        user.PasswordHash = _userService.GeneratePasswordHash(newPassword);\n        _userService.UpdateUser(user);\n\n        return RedirectToAction(\"Login\");\n    }\n\n    ModelState.AddModelError(\"\", \"Invalid token or email address.\");\n    return View();\n}\n```", "```csharp\npublic class PasswordHasher : IPasswordHasher\n{\n    public string GeneratePasswordHash(string password)\n    {\n        var salt = Guid.NewGuid().ToString();\n        var hashedPassword = BCrypt.HashPassword(password, salt);\n        return $\"{salt}:{hashedPassword}\";\n    }\n\n    public bool VerifyPasswordHash(string password, string hash)\n    {\n        var parts = hash.Split(':');\n        var salt = parts[0];\n        var hashedPassword = parts[1];\n\n        return BCrypt.Verify(password, salt, hashedPassword);\n    }\n}\n```"]}
