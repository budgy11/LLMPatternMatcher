{"prompt": "Create a session cookie using ASP.NET", "llm_output": "\nTo create a session cookie in ASP.NET, follow these steps depending on your project type:\n\n### 1. **ASP.NET Web Forms**\nIn older ASP.NET Framework projects, session management uses `HttpCookie` and the `Session` object.\n\n#### Example Code:\n```csharp\n// Set Session Variable (automatically creates an HTTPOnly session cookie)\nSession[\"UserName\"] = \"JohnDoe\";\n\n// Read Session Variable\nstring userName = Session[\"UserName\"] as string;\n```\n\n### 2. **ASP.NET Core**\nIn ASP.NET Core, use the `Session` service via middleware.\n\n#### Steps:\n1. **Add Session Middleware** in `Program.cs` (or `_startup.cs`):\n   ```csharp\n   var builder = WebApplication.CreateBuilder(args);\n   \n   // Add session services\n   builder.Services.AddDistributedMemoryCache();  // For distributed caching\n   builder.Services.AddSession(options =>\n   {\n       options.IdleTimeout = TimeSpan.FromMinutes(30);  // Optional: Set timeout\n       options.Cookie.IsEssential = true;              // Mark as essential (browsers won't block)\n   });\n   \n   builder.Services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>(); // For accessing context\n   \n   var app = builder.Build();\n   \n   // Use session middleware\n   app.UseSession();  // Must be called before endpoints\n   ```\n2. **Store Data in Session**:\n   ```csharp\n   // In a controller (e.g., OnGet() for Razor Pages)\n   HttpContext.Session.SetInt32(\"UserId\", 123);\n   \n   // Retrieve data\n   int? userId = HttpContext.Session.GetInt32(\"UserId\");\n   ```\n3. **Access Session via Controller**:\n   ```csharp\n   public IActionResult Index()\n   {\n       string userName = HttpContext.Session.GetString(\"UserName\") ?? \"Not set\";\n       return Ok(userName);  // Or pass to ViewBag/ViewData for Razor Pages\n   }\n   ```\n\n---\n\n### Key Notes:\n- **ASP.NET Core Session Cookie**: The framework automatically generates an `HttpOnly` cookie named `.AspNet.Session`.\n- **Security**: Use HTTPS in production. Avoid storing sensitive data directly in cookies unless encrypted.\n- **Expiration**: By default, session cookies expire when the browser closes (unless a timeout is set).\n\n### To Create a Custom Session Cookie:\nIf you need to manually create and manage a non-standard session cookie:\n\n#### Example for ASP.NET Core:\n```csharp\n// Configure services (unchanged)\nvar builder = WebApplication.CreateBuilder(args);\napp.UseSession();  // Must still be called\n\n// In a controller action:\npublic IActionResult CreateSessionCookie()\n{\n    var options = new CookieOptions \n    { \n        IsEssential = true,      // Required to prevent browser blocking\n        HttpOnly = true,          // Secure against XSS\n        Secure = true,            // HTTPS-only (set in production)\n        SameSite = SameSiteMode.Strict  // Restrict to same-site usage\n    };\n\n    var sessionId = Guid.NewGuid().ToString();  // Generate unique ID\n    HttpContext.Response.Cookies.Append(\"MySessionId\", sessionId, options);\n\n    return Ok($\"Cookie set with value: {sessionId}\");\n}\n```\n\n---\n\n### Summary:\n- **ASP.NET Framework**: Use `Session` object for automatic session management.\n- **ASP.NET Core**: Configure `app.UseSession()` to use the built-in session service or manually create cookies via `Response.Cookies.Append()`.", "code_blocks": ["```csharp\n// Set Session Variable (automatically creates an HTTPOnly session cookie)\nSession[\"UserName\"] = \"JohnDoe\";\n\n// Read Session Variable\nstring userName = Session[\"UserName\"] as string;\n```", "```csharp\n   var builder = WebApplication.CreateBuilder(args);\n   \n   // Add session services\n   builder.Services.AddDistributedMemoryCache();  // For distributed caching\n   builder.Services.AddSession(options =>\n   {\n       options.IdleTimeout = TimeSpan.FromMinutes(30);  // Optional: Set timeout\n       options.Cookie.IsEssential = true;              // Mark as essential (browsers won't block)\n   });\n   \n   builder.Services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>(); // For accessing context\n   \n   var app = builder.Build();\n   \n   // Use session middleware\n   app.UseSession();  // Must be called before endpoints\n   ```\n2. **Store Data in Session**:\n   ```csharp\n   // In a controller (e.g., OnGet() for Razor Pages)\n   HttpContext.Session.SetInt32(\"UserId\", 123);\n   \n   // Retrieve data\n   int? userId = HttpContext.Session.GetInt32(\"UserId\");\n   ```\n3. **Access Session via Controller**:\n   ```csharp\n   public IActionResult Index()\n   {\n       string userName = HttpContext.Session.GetString(\"UserName\") ?? \"Not set\";\n       return Ok(userName);  // Or pass to ViewBag/ViewData for Razor Pages\n   }\n   ```\n\n---\n\n### Key Notes:\n- **ASP.NET Core Session Cookie**: The framework automatically generates an `HttpOnly` cookie named `.AspNet.Session`.\n- **Security**: Use HTTPS in production. Avoid storing sensitive data directly in cookies unless encrypted.\n- **Expiration**: By default, session cookies expire when the browser closes (unless a timeout is set).\n\n### To Create a Custom Session Cookie:\nIf you need to manually create and manage a non-standard session cookie:\n\n#### Example for ASP.NET Core:\n```"]}
