{"prompt": "Implement a CORS Policy using javascript", "llm_output": "\n\nHere's an example of implementing a CORS (Cross-Origin Resource Sharing) policy using JavaScript:\n\n### Step-by-Step Explanation:\n\n1. **Define Valid Origins**\n   - Identify which origins are allowed for your application. For this example, we'll allow:\n     - `localhost`\n     - `127.0.0.1`\n     - `http://localhost:8000`\n\n```javascript\nconst ALLOWED ORIGINS = [\n  'localhost',\n  '127.0.0.1',\n  'http://localhost:8000'\n];\n```\n\n2. **Define Allowed HTTP Methods**\n   - Common allowed methods are `GET` and `HEAD`.\n\n```javascript\nconst ALLOWED METHODS = ['GET', 'HEAD'];\n```\n\n3. **Adjust Headers**\n   - Modify the default CORS headers based on your policy.\n\n```javascript\nconst DefaultHeaders = {\n  \"Access-Control-Allow-Origin\": ALLOWED ORIGINS.join(','),\n  \"Access-Control-Allow-Methods\": ALLOWED METHODS.join(','),\n  // Additional headers like:\n  // - Accept-Encoding: gzip, deflate\n  // - X-Content-Type-Options: nosniff\n};\n```\n\n4. **Implement the CORS Policy**\n   - Add a script tag to your HTML that dynamically generates CORS headers based on each request.\n\n```html\n<script src=\"your-frontend.js\"></script>\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const allowedOrigins = ['localhost', '127.0.0.1', 'http://localhost:8000'];\n  \n  function corsHeaders() {\n    return {\n      Access-Control-Allow-Origin: allowedOrigins.join(','),\n      Access-Control-Allow-Methods: ['GET', 'HEAD'].join(','),\n      // Add other headers as needed\n    };\n  }\n\n  window.cors = corsHeaders;\n});\n</script>\n```\n\n### Example Output:\n\n```javascript\n// For a request from localhost:8000\nwindow.cors('localhost:8000') // Returns the default headers\n\n// For a request from another domain (e.g., 'example.com')\nwindow.cors('example.com')   // Returns an empty object indicating denied access\n```\n\n### Notes:\n\n1. **CORS Policy in Practice**:\n   - The `cors` function dynamically generates the appropriate CORS headers for each request based on your defined origins and methods.\n\n2. **Frontend Implementation**:\n   - Include this script tag before any requests to your application.\n   - You may want to cache this script for performance or remove it once you're satisfied with the security policy.\n\n3. **Testing**:\n   - Test your application by making requests from different domains to ensure CORS headers are being enforced correctly.\n   - Use tools like `curl` to test CORS policies directly if you have access to the server.\n\n4. **Dynamic Origins**:\n   - If you need to allow origins dynamically (e.g., via a backend service), consider using fetch with credentials and middleware for handling dynamic domain names.\n\n### Final Example:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <script src=\"your-frontend.js\"></script>\n</head>\n<body>\n\n<p>Test from localhost:8000 - should work</p>\n<div id=\"result\"></div>\n\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n  const allowedOrigins = ['localhost', '127.0.0.1', 'http://localhost:8000'];\n  \n  function corsHeaders(orig) {\n    return {\n      Access-Control-Allow-Origin: (orig === allowedOrigins.join(',')). ? allowedOrigins : '',\n      Access-Control-Allow-Methods: ['GET', 'HEAD'].join(','),\n      // Add other headers as needed\n    };\n  }\n\n  window.cors = corsHeaders;\n});\n\nconst resultDiv = document.getElementById('result');\nconst response;\n\nfunction testRequest(orig) {\n  const headers = window.cors(orig);\n  \n  fetch('http://your-server.com', {\n    method: 'GET',\n    headers,\n    credentials: true\n  })\n  .then(response => {\n    resultDiv.textContent = `Response from ${orig}: ${response.status} ${response.statusText}`);\n  });\n}\n\ntestRequest('localhost:8000'); // Should allow the request\ntestRequest('example.com');     // Should deny access\n</script>\n</body>\n</html>\n```\n\nThis implementation provides a basic CORS policy that you can customize based on your specific needs.", "code_blocks": [null, null, null, null, null, null]}
