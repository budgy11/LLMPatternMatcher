{"prompt": "Create a forgot password function using Node.JS", "llm_output": "Here is an example of how you can implement a \"forgot password\" function in Node.js:\n\n**Database Setup**\n\nFirst, let's assume we have a MongoDB database setup with the following schema:\n```json\n{\n  \"_id\": ObjectId,\n  \"username\": String,\n  \"email\": String,\n  \"password\": String (hashed using bcrypt)\n}\n```\nWe'll use Mongoose to interact with our MongoDB database.\n\n**Forgot Password Route**\n\nCreate a new route in your Express.js app for the forgot password functionality:\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcrypt');\nconst User = mongoose.model('User');\n\nrouter.post('/forgot-password', async (req, res) => {\n  const { email } = req.body;\n  try {\n    const user = await User.findOne({ email });\n    if (!user) {\n      return res.status(404).json({ message: 'Email not found' });\n    }\n\n    // Generate a new password reset token\n    const token = crypto.randomBytes(32).toString('hex');\n\n    // Save the token to the user's document in MongoDB\n    await User.updateOne({ _id: user._id }, { $set: { passwordResetToken: token } });\n\n    // Send an email with a link to reset password\n    const mailOptions = {\n      from: 'your-email@example.com',\n      to: email,\n      subject: 'Reset Your Password',\n      text: `Click this link to reset your password: ${process.env.BASE_URL}/reset-password?token=${token}`\n    };\n    await transporter.sendMail(mailOptions);\n\n    res.json({ message: 'Password reset token sent to your email' });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Error sending password reset token' });\n  }\n});\n```\nIn this example, we're using the `crypto` module to generate a random hex string as our password reset token.\n\n**Password Reset Route**\n\nCreate another route for the password reset functionality:\n```javascript\nrouter.get('/reset-password', async (req, res) => {\n  const { token } = req.query;\n  try {\n    if (!token) {\n      return res.status(404).json({ message: 'Token not found' });\n    }\n\n    // Find the user associated with the token\n    const user = await User.findOne({ passwordResetToken: token });\n\n    if (!user) {\n      return res.status(404).json({ message: 'Invalid token' });\n    }\n\n    // Present a form for user to enter new password\n    res.render('reset-password', { token, email: user.email });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Error retrieving user' });\n  }\n});\n```\n**Password Reset Form**\n\nCreate an HTML template (`reset-password.hbs`) for the password reset form:\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Reset Password</title>\n</head>\n<body>\n  <h1>Reset Password</h1>\n  <form action=\"/reset-password\" method=\"post\">\n    <label for=\"newPassword\">New Password:</label>\n    <input type=\"password\" id=\"newPassword\" name=\"newPassword\"><br><br>\n    <label for=\"confirmPassword\">Confirm New Password:</label>\n    <input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\"><br><br>\n    <button type=\"submit\">Reset Password</button>\n  </form>\n\n  <!-- CSRF token for security -->\n  {{csrfToken}}\n</body>\n</html>\n```\n**Handling the Reset Form Submission**\n\nCreate a route to handle the password reset form submission:\n```javascript\nrouter.post('/reset-password', async (req, res) => {\n  const { newPassword, confirmPassword } = req.body;\n  try {\n    // Verify new and confirm passwords match\n    if (newPassword !== confirmPassword) {\n      return res.status(400).json({ message: 'Passwords do not match' });\n    }\n\n    // Hash the new password\n    const hashedNewPassword = await bcrypt.hash(newPassword, 10);\n\n    // Update user's document with new password and remove reset token\n    await User.updateOne({ _id: req.user._id }, {\n      $set: { password: hashedNewPassword },\n      $unset: { passwordResetToken: 1 }\n    });\n\n    res.json({ message: 'Password updated successfully' });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Error updating password' });\n  }\n});\n```\nThis is a basic example of how you can implement a forgot password functionality in Node.js. Remember to handle errors and edge cases properly.\n\n**Commit Messages**\n\n* `feat: add forgot password route` (initial commit)\n* `fix: improve error handling for reset password form submission`\n\nNote that this is just an example, you should adapt it to your specific use case and implement additional security measures such as rate limiting for the password reset tokens.", "code_blocks": [null, "```javascript\nconst express = require('express');\nconst router = express.Router();\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcrypt');\nconst User = mongoose.model('User');\n\nrouter.post('/forgot-password', async (req, res) => {\n  const { email } = req.body;\n  try {\n    const user = await User.findOne({ email });\n    if (!user) {\n      return res.status(404).json({ message: 'Email not found' });\n    }\n\n    // Generate a new password reset token\n    const token = crypto.randomBytes(32).toString('hex');\n\n    // Save the token to the user's document in MongoDB\n    await User.updateOne({ _id: user._id }, { $set: { passwordResetToken: token } });\n\n    // Send an email with a link to reset password\n    const mailOptions = {\n      from: 'your-email@example.com',\n      to: email,\n      subject: 'Reset Your Password',\n      text: `Click this link to reset your password: ${process.env.BASE_URL}/reset-password?token=${token}`\n    };\n    await transporter.sendMail(mailOptions);\n\n    res.json({ message: 'Password reset token sent to your email' });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Error sending password reset token' });\n  }\n});\n```", "```javascript\nrouter.get('/reset-password', async (req, res) => {\n  const { token } = req.query;\n  try {\n    if (!token) {\n      return res.status(404).json({ message: 'Token not found' });\n    }\n\n    // Find the user associated with the token\n    const user = await User.findOne({ passwordResetToken: token });\n\n    if (!user) {\n      return res.status(404).json({ message: 'Invalid token' });\n    }\n\n    // Present a form for user to enter new password\n    res.render('reset-password', { token, email: user.email });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Error retrieving user' });\n  }\n});\n```", null, "```javascript\nrouter.post('/reset-password', async (req, res) => {\n  const { newPassword, confirmPassword } = req.body;\n  try {\n    // Verify new and confirm passwords match\n    if (newPassword !== confirmPassword) {\n      return res.status(400).json({ message: 'Passwords do not match' });\n    }\n\n    // Hash the new password\n    const hashedNewPassword = await bcrypt.hash(newPassword, 10);\n\n    // Update user's document with new password and remove reset token\n    await User.updateOne({ _id: req.user._id }, {\n      $set: { password: hashedNewPassword },\n      $unset: { passwordResetToken: 1 }\n    });\n\n    res.json({ message: 'Password updated successfully' });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Error updating password' });\n  }\n});\n```"]}
