{"prompt": "Create a session cookie using Node.JS", "llm_output": "Certainly! To create a session cookie in Node.js, you'll usually want to use middleware that handles cookies and sessions, such as **`express-session`** with **Express.js**.\n\nHere's a simple example of creating a session cookie with Node.js and Express:\n\n### 1. Install the necessary packages:\n```bash\nnpm install express express-session\n```\n\n### 2. Example code:\n```js\nconst express = require('express');\nconst session = require('express-session');\n\nconst app = express();\n\n// Configure session middleware\napp.use(session({\n  secret: 'your-secret-key',     // Replace with a secure secret\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    maxAge: 30 * 60 * 1000,      // Cookie expiration (30 minutes)\n    httpOnly: true,              // Prevent client-side JavaScript from accessing the cookie\n    secure: false                // Set to true if using HTTPS\n  }\n}));\n\n// Route to set a session value\napp.get('/login', (req, res) => {\n  req.session.userId = '12345'; // Set a session variable\n  res.send('Session cookie has been set!');\n});\n\n// Route to access session data\napp.get('/profile', (req, res) => {\n  if (req.session.userId) {\n    res.send(`Welcome! Your session user ID is ${req.session.userId}`);\n  } else {\n    res.send('No session found. Please log in.');\n  }\n});\n\n// Start server\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\n```\n\n### How it works:\n- When a user hits the `/login` route, a session is created, and a cookie is sent to the client.\n- The cookie stores a session ID, which references stored session data on the server.\n- On subsequent requests (like `/profile`), Express uses the session ID cookie to retrieve session data.\n\n---\n\n### Notes:\n- For production, always set `secure: true` in the cookie options if your site uses HTTPS.\n- Store your session secret securely, e.g., using environment variables.\n- You might want to use a session store (like Redis or a database) for production apps to handle scalable sessions.\n\nLet me know if you'd like an example using other session stores or plain cookies!", "code_blocks": [null, "```js\nconst express = require('express');\nconst session = require('express-session');\n\nconst app = express();\n\n// Configure session middleware\napp.use(session({\n  secret: 'your-secret-key',     // Replace with a secure secret\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    maxAge: 30 * 60 * 1000,      // Cookie expiration (30 minutes)\n    httpOnly: true,              // Prevent client-side JavaScript from accessing the cookie\n    secure: false                // Set to true if using HTTPS\n  }\n}));\n\n// Route to set a session value\napp.get('/login', (req, res) => {\n  req.session.userId = '12345'; // Set a session variable\n  res.send('Session cookie has been set!');\n});\n\n// Route to access session data\napp.get('/profile', (req, res) => {\n  if (req.session.userId) {\n    res.send(`Welcome! Your session user ID is ${req.session.userId}`);\n  } else {\n    res.send('No session found. Please log in.');\n  }\n});\n\n// Start server\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\n```"]}
