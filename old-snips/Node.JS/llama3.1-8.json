{"prompt": "Create a reset password function using Node.JS", "llm_output": "Here is an example of how you can create a reset password function using Node.js. This example uses MongoDB as the database, but you can adapt it to work with other databases.\n\n**Step 1: Set up your project**\n\nFirst, make sure you have Node.js and npm installed on your machine. Then, create a new project directory and initialize a new npm project by running `npm init` in your terminal.\n\nNext, install the required packages:\n\n```bash\nnpm install express nodemailer bcryptjs jsonwebtoken mongoose\n```\n\n**Step 2: Set up your database**\n\nCreate a new file called `db.js` to connect to your MongoDB database. For this example, we'll use Mongoose as our ORM (Object-Relational Mapping) tool.\n\n```javascript\n// db.js\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydatabase', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\nconst db = mongoose.connection;\n\ndb.on('error', console.error.bind(console, 'connection error:'));\ndb.once('open', function() {\n  console.log('Connected to MongoDB');\n});\n\nmodule.exports = db;\n```\n\n**Step 3: Create your User model**\n\nCreate a new file called `user.model.js` to define our User schema.\n\n```javascript\n// user.model.js\nconst mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n  email: String,\n  password: String,\n  resetToken: String,\n  expiresAt: Date\n});\n\nmodule.exports = mongoose.model('User', userSchema);\n```\n\n**Step 4: Create your routes**\n\nCreate a new file called `resetPassword.route.js` to handle the reset password functionality.\n\n```javascript\n// resetPassword.route.js\nconst express = require('express');\nconst router = express.Router();\nconst User = require('./user.model');\n\nrouter.post('/forgot', async (req, res) => {\n  const { email } = req.body;\n\n  try {\n    const user = await User.findOne({ email });\n\n    if (!user) {\n      return res.status(404).send({ message: 'User not found' });\n    }\n\n    const resetToken = generateResetToken();\n    const expiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes\n\n    user.resetToken = resetToken;\n    user.expiresAt = expiresAt;\n\n    await user.save();\n\n    try {\n      sendEmail('reset', email, resetToken);\n    } catch (error) {\n      console.error(error);\n      return res.status(500).send({ message: 'Error sending email' });\n    }\n\n    res.send({ message: 'Reset token sent to your email' });\n  } catch (error) {\n    console.error(error);\n    res.status(500).send({ message: 'Error processing request' });\n  }\n});\n\nrouter.post('/reset', async (req, res) => {\n  const { resetToken, newPassword } = req.body;\n\n  try {\n    const user = await User.findOne({\n      resetToken,\n      expiresAt: { $gt: new Date() }\n    });\n\n    if (!user) {\n      return res.status(404).send({ message: 'Invalid reset token' });\n    }\n\n    user.password = bcrypt.hashSync(newPassword, 10);\n    user.resetToken = null;\n    user.expiresAt = null;\n\n    await user.save();\n\n    res.send({ message: 'Password changed successfully' });\n  } catch (error) {\n    console.error(error);\n    res.status(500).send({ message: 'Error processing request' });\n  }\n});\n\nfunction generateResetToken() {\n  return jwt.sign({}, process.env.SECRET_KEY, { expiresIn: '15m' });\n}\n\nasync function sendEmail(type, email, resetToken) {\n  const transporter = nodemailer.createTransport({\n    host: process.env.EMAIL_HOST,\n    port: 587,\n    secure: false,\n    auth: {\n      user: process.env.EMAIL_USER,\n      pass: process.env.EMAIL_PASSWORD\n    }\n  });\n\n  let subject;\n  let body;\n\n  if (type === 'reset') {\n    subject = 'Reset Password';\n    body = `\n      <h1>Reset Password</h1>\n      <p>Your reset token is: ${resetToken}</p>\n    `;\n  }\n\n  const mailOptions = {\n    from: process.env.EMAIL_USER,\n    to: email,\n    subject,\n    html: body\n  };\n\n  await transporter.sendMail(mailOptions);\n}\n\nmodule.exports = router;\n```\n\n**Step 5: Update your main route**\n\nFinally, update your `index.js` file to include the reset password route.\n\n```javascript\n// index.js\nconst express = require('express');\nconst app = express();\nconst db = require('./db');\n\napp.use(express.json());\napp.use('/reset', require('./resetPassword.route'));\n\nmodule.exports = app;\n```\n\nThis is a basic example of how you can create a reset password functionality using Node.js. Make sure to replace the placeholders with your actual database connection details and email credentials.\n\nNote that this example uses bcrypt for password hashing, jsonwebtoken for token generation, and nodemailer for sending emails. You may need to install additional packages or modify the code to fit your specific requirements.", "code_blocks": [null, "```javascript\n// db.js\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydatabase', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\nconst db = mongoose.connection;\n\ndb.on('error', console.error.bind(console, 'connection error:'));\ndb.once('open', function() {\n  console.log('Connected to MongoDB');\n});\n\nmodule.exports = db;\n```", "```javascript\n// user.model.js\nconst mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n  email: String,\n  password: String,\n  resetToken: String,\n  expiresAt: Date\n});\n\nmodule.exports = mongoose.model('User', userSchema);\n```", "```javascript\n// resetPassword.route.js\nconst express = require('express');\nconst router = express.Router();\nconst User = require('./user.model');\n\nrouter.post('/forgot', async (req, res) => {\n  const { email } = req.body;\n\n  try {\n    const user = await User.findOne({ email });\n\n    if (!user) {\n      return res.status(404).send({ message: 'User not found' });\n    }\n\n    const resetToken = generateResetToken();\n    const expiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes\n\n    user.resetToken = resetToken;\n    user.expiresAt = expiresAt;\n\n    await user.save();\n\n    try {\n      sendEmail('reset', email, resetToken);\n    } catch (error) {\n      console.error(error);\n      return res.status(500).send({ message: 'Error sending email' });\n    }\n\n    res.send({ message: 'Reset token sent to your email' });\n  } catch (error) {\n    console.error(error);\n    res.status(500).send({ message: 'Error processing request' });\n  }\n});\n\nrouter.post('/reset', async (req, res) => {\n  const { resetToken, newPassword } = req.body;\n\n  try {\n    const user = await User.findOne({\n      resetToken,\n      expiresAt: { $gt: new Date() }\n    });\n\n    if (!user) {\n      return res.status(404).send({ message: 'Invalid reset token' });\n    }\n\n    user.password = bcrypt.hashSync(newPassword, 10);\n    user.resetToken = null;\n    user.expiresAt = null;\n\n    await user.save();\n\n    res.send({ message: 'Password changed successfully' });\n  } catch (error) {\n    console.error(error);\n    res.status(500).send({ message: 'Error processing request' });\n  }\n});\n\nfunction generateResetToken() {\n  return jwt.sign({}, process.env.SECRET_KEY, { expiresIn: '15m' });\n}\n\nasync function sendEmail(type, email, resetToken) {\n  const transporter = nodemailer.createTransport({\n    host: process.env.EMAIL_HOST,\n    port: 587,\n    secure: false,\n    auth: {\n      user: process.env.EMAIL_USER,\n      pass: process.env.EMAIL_PASSWORD\n    }\n  });\n\n  let subject;\n  let body;\n\n  if (type === 'reset') {\n    subject = 'Reset Password';\n    body = `\n      <h1>Reset Password</h1>\n      <p>Your reset token is: ${resetToken}</p>\n    `;\n  }\n\n  const mailOptions = {\n    from: process.env.EMAIL_USER,\n    to: email,\n    subject,\n    html: body\n  };\n\n  await transporter.sendMail(mailOptions);\n}\n\nmodule.exports = router;\n```", "```javascript\n// index.js\nconst express = require('express');\nconst app = express();\nconst db = require('./db');\n\napp.use(express.json());\napp.use('/reset', require('./resetPassword.route'));\n\nmodule.exports = app;\n```"]}
