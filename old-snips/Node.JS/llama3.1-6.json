{"prompt": "Create a search function using Node.JS", "llm_output": "Here is an example of a basic search function in Node.js using the `express` and `mongoose` packages.\n\n**Dependencies:**\n\n* `express`: A lightweight framework for building web applications.\n* `mongoose`: A MongoDB ORM (Object Relational Mapping) tool for interacting with MongoDB databases.\n\n**search.js**\n```javascript\nconst express = require('express');\nconst mongoose = require('mongoose');\n\n// Connect to the database\nmongoose.connect('mongodb://localhost/searchDB', { useNewUrlParser: true, useUnifiedTopology: true });\n\n// Define a schema for the search results\nconst SearchResult = new mongoose.Schema({\n  query: String,\n  results: [{ type: String }]\n});\n\n// Create a model for the search results\nconst SearchResults = mongoose.model('SearchResults', SearchResult);\n\n// Create an express app\nconst app = express();\n\n// Middleware to parse JSON requests\napp.use(express.json());\n\n// Define the search route\napp.post('/search', async (req, res) => {\n  const query = req.body.query;\n  if (!query) {\n    return res.status(400).json({ error: 'Query is required' });\n  }\n\n  try {\n    // Find documents in the database that match the query\n    const results = await SearchResults.find({ $text: { $search: query } });\n\n    // Return the search results as JSON\n    res.json(results);\n  } catch (err) {\n    console.error(err);\n    return res.status(500).json({ error: 'Error searching database' });\n  }\n});\n\n// Start the server\nconst port = 3000;\napp.listen(port, () => {\n  console.log(`Server listening on port ${port}`);\n});\n```\n**Example use case:**\n\nTo test this search function, you can use a tool like `curl` or Postman to send a POST request to `/search` with the query as JSON:\n```bash\ncurl -X POST \\\n  http://localhost:3000/search \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"query\": \"example\"}'\n```\nThis should return an array of search results that match the query.\n\n**Explanation:**\n\n* We first connect to a MongoDB database using `mongoose`.\n* We define a schema for the search results, which includes a `query` field and an array of `results`.\n* We create a model for the search results based on this schema.\n* In the `/search` route, we extract the query from the request body and use it to search the database using the `$text` operator.\n* If no results are found, we return an empty array. Otherwise, we return the search results as JSON.\n\nNote: This is a basic example and you may want to add more features such as pagination, filtering, or ranking of results depending on your specific use case.", "code_blocks": ["```javascript\nconst express = require('express');\nconst mongoose = require('mongoose');\n\n// Connect to the database\nmongoose.connect('mongodb://localhost/searchDB', { useNewUrlParser: true, useUnifiedTopology: true });\n\n// Define a schema for the search results\nconst SearchResult = new mongoose.Schema({\n  query: String,\n  results: [{ type: String }]\n});\n\n// Create a model for the search results\nconst SearchResults = mongoose.model('SearchResults', SearchResult);\n\n// Create an express app\nconst app = express();\n\n// Middleware to parse JSON requests\napp.use(express.json());\n\n// Define the search route\napp.post('/search', async (req, res) => {\n  const query = req.body.query;\n  if (!query) {\n    return res.status(400).json({ error: 'Query is required' });\n  }\n\n  try {\n    // Find documents in the database that match the query\n    const results = await SearchResults.find({ $text: { $search: query } });\n\n    // Return the search results as JSON\n    res.json(results);\n  } catch (err) {\n    console.error(err);\n    return res.status(500).json({ error: 'Error searching database' });\n  }\n});\n\n// Start the server\nconst port = 3000;\napp.listen(port, () => {\n  console.log(`Server listening on port ${port}`);\n});\n```", null]}
