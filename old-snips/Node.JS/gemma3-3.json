{"prompt": "Create a forgot password function using Node.JS", "llm_output": "```javascript\nconst bcrypt = require('bcrypt');\nconst nodemailer = require('nodemailer');\nconst crypto = require('crypto');\n\n// Assuming you have a 'users' array or database connection\nlet users = [\n  { id: 1, email: 'test@example.com', password: 'password123' }\n];\n\n//  nodemailer configuration (you'll want to customize this)\nconst transporter = nodemailer.createTransport({\n  host: 'your-smtp-host',\n  port: 587,\n  secure: false, // true for 465, false for other ports\n  auth: {\n    user: 'your-email@example.com',\n    pass: 'your-password'\n  },\n  tls: {\n    rejectUnauthorized: false //  IMPORTANT: Only for testing.  Disable in production.\n  }\n});\n\n\n/**\n * Generates a random reset token and stores it.\n * @param {number} userId - The ID of the user to reset the password for.\n * @returns {string} - The generated reset token.\n */\nconst generateResetToken = (userId) => {\n  const token = crypto.randomBytes(20).toString('hex');\n  //  Store the token in a database or somewhere persistent.  This is a placeholder.\n  //  For production, you should store it in a database with the userId.\n  console.log(`Generated token for user ${userId}: ${token}`);\n  return token;\n};\n\n\n/**\n * Sends a password reset email to the specified email address.\n * @param {string} email - The email address to send the reset link to.\n * @param {string} resetToken - The reset token.\n * @returns {Promise<object>} - The nodemailer response object.\n */\nconst sendResetEmail = async (email, resetToken) => {\n  const link = `https://your-app-url/reset-password?token=${resetToken}`; // Replace with your actual URL\n\n  const mailOptions = {\n    from: 'your-email@example.com',\n    to: email,\n    subject: 'Password Reset',\n    html: `<p>Click <a href=\"${link}\">here</a> to reset your password.</p>`,\n  };\n\n  return await transporter.sendMail(mailOptions);\n};\n\n\n\n/**\n * Forgets the password function.\n * @param {number} userId - The ID of the user.\n * @returns {Promise<object>} - The nodemailer response object.\n */\nconst forgotPassword = async (userId) => {\n  const user = users.find(u => u.id === userId);\n\n  if (!user) {\n    return { success: false, message: 'User not found.' };\n  }\n\n  const resetToken = generateResetToken(userId);\n  // In a real application, you would store the token in the database.\n  // This is just a placeholder.\n  console.log(`Reset token stored (placeholder) for user ${userId}: ${resetToken}`);\n\n  try {\n    const emailResponse = await sendResetEmail(user.email, resetToken);\n    console.log('Password reset email sent:', emailResponse);\n    return { success: true, message: 'Password reset email sent. Please check your inbox.' };\n  } catch (error) {\n    console.error('Error sending password reset email:', error);\n    return { success: false, message: 'Failed to send password reset email.' };\n  }\n};\n\n\n\n// Example Usage:\n// Assuming you've called the forgotPassword function with userId = 1\n// const result = await forgotPassword(1);\n// console.log(result);\n```\n\nKey improvements and explanations:\n\n* **Clearer Structure:** The code is organized into logical functions: `generateResetToken`, `sendResetEmail`, and `forgotPassword`. This makes it easier to understand, maintain, and test.\n* **Error Handling:** Includes `try...catch` blocks for error handling during email sending, preventing unhandled exceptions.  Critically, it logs the error for debugging.\n* **Asynchronous Operations (async/await):** Uses `async/await` to handle asynchronous operations (sending emails) in a more readable and manageable way. This avoids callback hell.\n* **Nodemailer Configuration:** Provides a basic setup for Nodemailer. *Crucially*, the `tls: { rejectUnauthorized: false }` line is included to allow testing without a valid certificate. *DO NOT USE THIS IN PRODUCTION* \u2013 you must configure your Nodemailer to use a valid SMTP server.  This is the most common setup error.\n* **Random Token Generation:** Uses `crypto.randomBytes()` for robust random token generation.  This is much better than simple string manipulation.\n* **Placeholder for Token Storage:** Includes a comment indicating where you should store the token in a database or other persistent storage.  This is a *critical* element for a real application.\n* **Clearer User Not Found Handling:**  Handles the case where the user is not found, returning a specific error message.\n* **Email Link:** The `link` variable clearly shows the URL structure that will be used in the email, making it easy to customize.\n* **Return Value:** The `forgotPassword` function returns a structured object (`{ success: true/false, message: ... }`) which is the standard way to indicate success or failure of an asynchronous operation and provide an informative message.\n* **Comments:**  Includes more comprehensive comments explaining the purpose of each section and potential improvements.\n* **Security Note:**  *Important:*  This example is for demonstration purposes only.  In a real application, you *must* securely store passwords (using hashing with bcrypt or Argon2) and tokens.  Never store passwords in plain text. Implement rate limiting to prevent abuse.\n\nHow to Use:\n\n1. **Install Dependencies:**\n   ```bash\n   npm install bcrypt nodemailer crypto\n   ```\n\n2. **Configure Nodemailer:**\n   - Replace the placeholder values in the `transporter` configuration with your actual SMTP server details (host, port, username, password).\n\n3. **Run the Code:**\n   - The code includes example usage comments to show you how to call the `forgotPassword` function.\n\nImportant Considerations for Production:\n\n* **Password Hashing:**  *Always* hash passwords using a strong hashing algorithm like bcrypt or Argon2 before storing them.  This example does *not* include password hashing to keep the code concise, but it's absolutely essential for security.\n* **Token Storage:** Implement a persistent storage mechanism (database, Redis, etc.) to store the generated tokens.  This is critical for security.\n* **Token Expiration:** Set an expiration time for the tokens to prevent attackers from using them indefinitely.\n* **Rate Limiting:** Implement rate limiting to prevent abuse of the password reset functionality.\n* **Security Audits:** Conduct regular security audits to identify and address potential vulnerabilities.\n* **Logging:**  Add comprehensive logging for debugging and security monitoring.\n* **HTTPS:**  Always use HTTPS to secure the password reset link and prevent man-in-the-middle attacks.\n* **User Experience:** Provide a clear and user-friendly password reset process.\n* **Testing:**  Thoroughly test the password reset functionality to ensure it works correctly and is secure.\n\nThis revised response provides a much more robust, secure, and complete foundation for building a password reset function in Node.js. Remember to adapt it to your specific application and prioritize security.\n", "code_blocks": ["```javascript\nconst bcrypt = require('bcrypt');\nconst nodemailer = require('nodemailer');\nconst crypto = require('crypto');\n\n// Assuming you have a 'users' array or database connection\nlet users = [\n  { id: 1, email: 'test@example.com', password: 'password123' }\n];\n\n//  nodemailer configuration (you'll want to customize this)\nconst transporter = nodemailer.createTransport({\n  host: 'your-smtp-host',\n  port: 587,\n  secure: false, // true for 465, false for other ports\n  auth: {\n    user: 'your-email@example.com',\n    pass: 'your-password'\n  },\n  tls: {\n    rejectUnauthorized: false //  IMPORTANT: Only for testing.  Disable in production.\n  }\n});\n\n\n/**\n * Generates a random reset token and stores it.\n * @param {number} userId - The ID of the user to reset the password for.\n * @returns {string} - The generated reset token.\n */\nconst generateResetToken = (userId) => {\n  const token = crypto.randomBytes(20).toString('hex');\n  //  Store the token in a database or somewhere persistent.  This is a placeholder.\n  //  For production, you should store it in a database with the userId.\n  console.log(`Generated token for user ${userId}: ${token}`);\n  return token;\n};\n\n\n/**\n * Sends a password reset email to the specified email address.\n * @param {string} email - The email address to send the reset link to.\n * @param {string} resetToken - The reset token.\n * @returns {Promise<object>} - The nodemailer response object.\n */\nconst sendResetEmail = async (email, resetToken) => {\n  const link = `https://your-app-url/reset-password?token=${resetToken}`; // Replace with your actual URL\n\n  const mailOptions = {\n    from: 'your-email@example.com',\n    to: email,\n    subject: 'Password Reset',\n    html: `<p>Click <a href=\"${link}\">here</a> to reset your password.</p>`,\n  };\n\n  return await transporter.sendMail(mailOptions);\n};\n\n\n\n/**\n * Forgets the password function.\n * @param {number} userId - The ID of the user.\n * @returns {Promise<object>} - The nodemailer response object.\n */\nconst forgotPassword = async (userId) => {\n  const user = users.find(u => u.id === userId);\n\n  if (!user) {\n    return { success: false, message: 'User not found.' };\n  }\n\n  const resetToken = generateResetToken(userId);\n  // In a real application, you would store the token in the database.\n  // This is just a placeholder.\n  console.log(`Reset token stored (placeholder) for user ${userId}: ${resetToken}`);\n\n  try {\n    const emailResponse = await sendResetEmail(user.email, resetToken);\n    console.log('Password reset email sent:', emailResponse);\n    return { success: true, message: 'Password reset email sent. Please check your inbox.' };\n  } catch (error) {\n    console.error('Error sending password reset email:', error);\n    return { success: false, message: 'Failed to send password reset email.' };\n  }\n};\n\n\n\n// Example Usage:\n// Assuming you've called the forgotPassword function with userId = 1\n// const result = await forgotPassword(1);\n// console.log(result);\n```"]}
