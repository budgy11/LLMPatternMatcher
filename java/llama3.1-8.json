{"prompt": "Create a reset password function using java", "llm_output": "**Reset Password Function in Java**\n=====================================\n\n### Overview\n\nThis is an example of a basic reset password function implemented in Java. This function will send a password reset link to the user's email address.\n\n### Code\n```java\nimport javax.mail.*;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeMessage;\nimport java.util.Properties;\n\npublic class PasswordResetFunction {\n    public static boolean resetPassword(String username, String newPassword) throws Exception {\n        // Generate a random token for the password reset link\n        String token = generateRandomToken();\n\n        // Send an email with the password reset link to the user's email address\n        sendEmail(username, token);\n\n        // Update the user's password in the database (replace \"userDAO\" with your actual DAO implementation)\n        UserDAO userDAO = new UserDAO();\n        userDAO.updatePassword(username, newPassword);\n\n        return true;\n    }\n\n    private static String generateRandomToken() {\n        StringBuilder token = new StringBuilder();\n        for (int i = 0; i < 32; i++) {\n            token.append((char) ((Math.random() * 26) + 'a'));\n        }\n        return token.toString();\n    }\n\n    private static void sendEmail(String username, String token) throws Exception {\n        Properties properties = new Properties();\n        properties.put(\"mail.smtp.host\", \"smtp.gmail.com\");\n        properties.put(\"mail.smtp.port\", \"587\");\n        properties.put(\"mail.smtp.auth\", \"true\");\n\n        Session session = Session.getInstance(properties,\n                new Authenticator() {\n                    @Override\n                    protected PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(\"your-email@gmail.com\", \"your-password\");\n                    }\n                });\n\n        MimeMessage message = new MimeMessage(session);\n        message.setFrom(new InternetAddress(\"your-email@gmail.com\"));\n        message.addRecipient(Message.RecipientType.TO, new InternetAddress(username));\n        message.setSubject(\"Password Reset Link\");\n\n        String link = \"http://example.com/reset-password?username=\" + username + \"&token=\" + token;\n        message.setContent(link, \"text/html\");\n\n        Transport.send(message);\n    }\n}\n```\n### Explanation\n\n1. The `resetPassword` function takes two parameters: `username` and `newPassword`. It generates a random token using the `generateRandomToken` method.\n2. The function then sends an email to the user's email address with a password reset link using the `sendEmail` method. The link contains the `username` and `token` as query parameters.\n3. After sending the email, the function updates the user's password in the database using the `UserDAO` interface.\n\n### Example Use Case\n\n```java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        PasswordResetFunction.resetPassword(\"johnDoe\", \"newPassword\");\n    }\n}\n```\nThis example will send a password reset link to John Doe's email address with the new password set as `newPassword`.\n\n### Note\n\n* Make sure to replace `\"your-email@gmail.com\"` and `\"your-password\"` in the `sendEmail` method with your actual Gmail account credentials.\n* You may need to add additional dependencies, such as JavaMail API, to your project.\n* This is a basic implementation and you should consider adding security measures, such as password hashing and salting, to protect user passwords.", "code_blocks": ["```java\nimport javax.mail.*;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeMessage;\nimport java.util.Properties;\n\npublic class PasswordResetFunction {\n    public static boolean resetPassword(String username, String newPassword) throws Exception {\n        // Generate a random token for the password reset link\n        String token = generateRandomToken();\n\n        // Send an email with the password reset link to the user's email address\n        sendEmail(username, token);\n\n        // Update the user's password in the database (replace \"userDAO\" with your actual DAO implementation)\n        UserDAO userDAO = new UserDAO();\n        userDAO.updatePassword(username, newPassword);\n\n        return true;\n    }\n\n    private static String generateRandomToken() {\n        StringBuilder token = new StringBuilder();\n        for (int i = 0; i < 32; i++) {\n            token.append((char) ((Math.random() * 26) + 'a'));\n        }\n        return token.toString();\n    }\n\n    private static void sendEmail(String username, String token) throws Exception {\n        Properties properties = new Properties();\n        properties.put(\"mail.smtp.host\", \"smtp.gmail.com\");\n        properties.put(\"mail.smtp.port\", \"587\");\n        properties.put(\"mail.smtp.auth\", \"true\");\n\n        Session session = Session.getInstance(properties,\n                new Authenticator() {\n                    @Override\n                    protected PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(\"your-email@gmail.com\", \"your-password\");\n                    }\n                });\n\n        MimeMessage message = new MimeMessage(session);\n        message.setFrom(new InternetAddress(\"your-email@gmail.com\"));\n        message.addRecipient(Message.RecipientType.TO, new InternetAddress(username));\n        message.setSubject(\"Password Reset Link\");\n\n        String link = \"http://example.com/reset-password?username=\" + username + \"&token=\" + token;\n        message.setContent(link, \"text/html\");\n\n        Transport.send(message);\n    }\n}\n```", "```java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        PasswordResetFunction.resetPassword(\"johnDoe\", \"newPassword\");\n    }\n}\n```"]}
