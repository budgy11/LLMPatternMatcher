{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a simple purchase functionality using PHP, HTML, and MySQL:\n\n**Database Schema:**\n\nWe will need to create two tables in our database: `products` and `orders`.\n\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE orders (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT,\n  product_id INT,\n  quantity INT,\n  total_cost DECIMAL(10,2),\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n**PHP Code:**\n\nWe will create a PHP script to handle the purchase functionality.\n\n```php\n// config.php\n$host = 'localhost';\n$dbname = 'mydatabase';\n$username = 'root';\n$password = '';\n\ntry {\n    $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    echo 'Connection failed: ' . $e->getMessage();\n}\n\n// functions.php\nfunction addProduct($name, $price) {\n    global $pdo;\n    \n    try {\n        $stmt = $pdo->prepare(\"INSERT INTO products (name, price) VALUES (:name, :price)\");\n        $stmt->bindParam(':name', $name);\n        $stmt->bindParam(':price', $price);\n        $stmt->execute();\n        \n        return true;\n    } catch (PDOException $e) {\n        echo 'Error adding product: ' . $e->getMessage();\n        return false;\n    }\n}\n\nfunction purchaseProduct($userId, $productId, $quantity) {\n    global $pdo;\n    \n    try {\n        // Check if user has sufficient balance\n        $stmt = $pdo->prepare(\"SELECT * FROM users WHERE id = :id\");\n        $stmt->bindParam(':id', $userId);\n        $stmt->execute();\n        $user = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        if ($user['balance'] < ($quantity * getProductName($productId)['price'])) {\n            echo 'Insufficient balance';\n            return false;\n        }\n        \n        // Subtract product quantity\n        $product = getProductName($productId);\n        $stmt = $pdo->prepare(\"UPDATE products SET quantity = quantity - :quantity WHERE id = :id\");\n        $stmt->bindParam(':quantity', $quantity);\n        $stmt->bindParam(':id', $productId);\n        $stmt->execute();\n        \n        // Create order\n        $order = array(\n            'user_id' => $userId,\n            'product_id' => $productId,\n            'quantity' => $quantity,\n            'total_cost' => ($quantity * $product['price'])\n        );\n        \n        $stmt = $pdo->prepare(\"INSERT INTO orders (user_id, product_id, quantity, total_cost) VALUES (:user_id, :product_id, :quantity, :total_cost)\");\n        $stmt->bindParam(':user_id', $order['user_id']);\n        $stmt->bindParam(':product_id', $order['product_id']);\n        $stmt->bindParam(':quantity', $order['quantity']);\n        $stmt->bindParam(':total_cost', $order['total_cost']);\n        $stmt->execute();\n        \n        // Update user balance\n        updateBalance($userId, -$order['total_cost']);\n        \n        return true;\n    } catch (PDOException $e) {\n        echo 'Error purchasing product: ' . $e->getMessage();\n        return false;\n    }\n}\n\nfunction getProductName($id) {\n    global $pdo;\n    \n    try {\n        $stmt = $pdo->prepare(\"SELECT * FROM products WHERE id = :id\");\n        $stmt->bindParam(':id', $id);\n        $stmt->execute();\n        return $stmt->fetch(PDO::FETCH_ASSOC);\n    } catch (PDOException $e) {\n        echo 'Error getting product name: ' . $e->getMessage();\n        return array();\n    }\n}\n\nfunction updateBalance($userId, amount) {\n    global $pdo;\n    \n    try {\n        $stmt = $pdo->prepare(\"UPDATE users SET balance = balance + :amount WHERE id = :id\");\n        $stmt->bindParam(':amount', $amount);\n        $stmt->bindParam(':id', $userId);\n        $stmt->execute();\n        \n        return true;\n    } catch (PDOException $e) {\n        echo 'Error updating balance: ' . $e->getMessage();\n        return false;\n    }\n}\n```\n\n**HTML Form:**\n\n```html\n<form action=\"\" method=\"post\">\n  <label for=\"product_id\">Product ID:</label>\n  <input type=\"text\" id=\"product_id\" name=\"product_id\"><br><br>\n  <label for=\"quantity\">Quantity:</label>\n  <input type=\"number\" id=\"quantity\" name=\"quantity\"><br><br>\n  <button type=\"submit\" name=\"purchase\">Purchase</button>\n</form>\n```\n\n**PHP Purchase Script:**\n\n```php\nif (isset($_POST['purchase'])) {\n    $productId = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n    \n    if ($userId = purchaseProduct($userId, $productId, $quantity)) {\n        echo 'Product purchased successfully!';\n    } else {\n        echo 'Error purchasing product';\n    }\n}\n```\n\nNote that this is a very basic example and does not include any error checking or validation. You should add more functionality to your code as needed.\n\nAlso note that this example uses PDO (PHP Data Objects) for database interactions, which is the recommended way of interacting with databases in PHP.", "code_blocks": [null, "```php\n// config.php\n$host = 'localhost';\n$dbname = 'mydatabase';\n$username = 'root';\n$password = '';\n\ntry {\n    $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    echo 'Connection failed: ' . $e->getMessage();\n}\n\n// functions.php\nfunction addProduct($name, $price) {\n    global $pdo;\n    \n    try {\n        $stmt = $pdo->prepare(\"INSERT INTO products (name, price) VALUES (:name, :price)\");\n        $stmt->bindParam(':name', $name);\n        $stmt->bindParam(':price', $price);\n        $stmt->execute();\n        \n        return true;\n    } catch (PDOException $e) {\n        echo 'Error adding product: ' . $e->getMessage();\n        return false;\n    }\n}\n\nfunction purchaseProduct($userId, $productId, $quantity) {\n    global $pdo;\n    \n    try {\n        // Check if user has sufficient balance\n        $stmt = $pdo->prepare(\"SELECT * FROM users WHERE id = :id\");\n        $stmt->bindParam(':id', $userId);\n        $stmt->execute();\n        $user = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        if ($user['balance'] < ($quantity * getProductName($productId)['price'])) {\n            echo 'Insufficient balance';\n            return false;\n        }\n        \n        // Subtract product quantity\n        $product = getProductName($productId);\n        $stmt = $pdo->prepare(\"UPDATE products SET quantity = quantity - :quantity WHERE id = :id\");\n        $stmt->bindParam(':quantity', $quantity);\n        $stmt->bindParam(':id', $productId);\n        $stmt->execute();\n        \n        // Create order\n        $order = array(\n            'user_id' => $userId,\n            'product_id' => $productId,\n            'quantity' => $quantity,\n            'total_cost' => ($quantity * $product['price'])\n        );\n        \n        $stmt = $pdo->prepare(\"INSERT INTO orders (user_id, product_id, quantity, total_cost) VALUES (:user_id, :product_id, :quantity, :total_cost)\");\n        $stmt->bindParam(':user_id', $order['user_id']);\n        $stmt->bindParam(':product_id', $order['product_id']);\n        $stmt->bindParam(':quantity', $order['quantity']);\n        $stmt->bindParam(':total_cost', $order['total_cost']);\n        $stmt->execute();\n        \n        // Update user balance\n        updateBalance($userId, -$order['total_cost']);\n        \n        return true;\n    } catch (PDOException $e) {\n        echo 'Error purchasing product: ' . $e->getMessage();\n        return false;\n    }\n}\n\nfunction getProductName($id) {\n    global $pdo;\n    \n    try {\n        $stmt = $pdo->prepare(\"SELECT * FROM products WHERE id = :id\");\n        $stmt->bindParam(':id', $id);\n        $stmt->execute();\n        return $stmt->fetch(PDO::FETCH_ASSOC);\n    } catch (PDOException $e) {\n        echo 'Error getting product name: ' . $e->getMessage();\n        return array();\n    }\n}\n\nfunction updateBalance($userId, amount) {\n    global $pdo;\n    \n    try {\n        $stmt = $pdo->prepare(\"UPDATE users SET balance = balance + :amount WHERE id = :id\");\n        $stmt->bindParam(':amount', $amount);\n        $stmt->bindParam(':id', $userId);\n        $stmt->execute();\n        \n        return true;\n    } catch (PDOException $e) {\n        echo 'Error updating balance: ' . $e->getMessage();\n        return false;\n    }\n}\n```", null, "```php\nif (isset($_POST['purchase'])) {\n    $productId = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n    \n    if ($userId = purchaseProduct($userId, $productId, $quantity)) {\n        echo 'Product purchased successfully!';\n    } else {\n        echo 'Error purchasing product';\n    }\n}\n```"]}
