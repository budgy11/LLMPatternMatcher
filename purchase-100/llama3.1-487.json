{"prompt": "Create a purchase functionality using php", "llm_output": "Here's an example of a simple purchase functionality using PHP, including user authentication and database interaction.\n\n**Database Schema**\n\nFor this example, we'll use the following tables in our MySQL database:\n\n```sql\nCREATE TABLE users (\n  id INT AUTO_INCREMENT,\n  username VARCHAR(255) NOT NULL,\n  email VARCHAR(255) NOT NULL,\n  password VARCHAR(255) NOT NULL,\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE products (\n  id INT AUTO_INCREMENT,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10,2) NOT NULL,\n  description TEXT,\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE orders (\n  id INT AUTO_INCREMENT,\n  user_id INT,\n  order_date DATE NOT NULL DEFAULT CURRENT_DATE,\n  total DECIMAL(10,2) NOT NULL,\n  status VARCHAR(255) NOT NULL DEFAULT 'pending',\n  PRIMARY KEY (id),\n  FOREIGN KEY (user_id) REFERENCES users(id)\n);\n\nCREATE TABLE order_items (\n  id INT AUTO_INCREMENT,\n  order_id INT,\n  product_id INT,\n  quantity INT NOT NULL,\n  PRIMARY KEY (id),\n  FOREIGN KEY (order_id) REFERENCES orders(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n**PHP Code**\n\nWe'll create a `purchase` function that takes in the user's ID, product IDs, and quantities as parameters. This function will then insert the purchase data into the database.\n\n```php\n// config.php: database connection settings\n$db_host = 'localhost';\n$db_username = 'root';\n$db_password = '';\n$db_name = 'store';\n\n// Create a new instance of the PDO class\n$pdo = new PDO(\"mysql:host=$db_host;dbname=$db_name\", $db_username, $db_password);\n\nfunction purchase($user_id, $product_ids, $quantities) {\n  // Validate user ID and product IDs\n  if (!is_int($user_id)) throw new Exception('User ID must be an integer');\n  if (!is_array($product_ids)) throw new Exception('Product IDs must be an array');\n  foreach ($product_ids as $id => $pid) {\n    if (!is_int($id) || !is_int($pid)) throw new Exception('Invalid product ID: ' . var_export($pid, true));\n  }\n\n  // Validate quantities\n  foreach (array_combine($product_ids, $quantities) as $pid => $quantity) {\n    if (!is_int($quantity) || $quantity <= 0) throw new Exception('Invalid quantity for product with ID ' . $pid);\n  }\n\n  try {\n    // Insert order into orders table\n    $stmt = $pdo->prepare('INSERT INTO orders (user_id, total) VALUES (:user_id, :total)');\n    $stmt->bindParam(':user_id', $user_id);\n    $order_total = array_sum(array_combine($product_ids, $quantities));\n    $stmt->bindParam(':total', $order_total);\n    $stmt->execute();\n\n    // Get the ID of the newly inserted order\n    $order_id = $pdo->lastInsertId();\n\n    // Insert order items into order_items table\n    foreach (array_combine($product_ids, $quantities) as $pid => $quantity) {\n      $stmt = $pdo->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');\n      $stmt->bindParam(':order_id', $order_id);\n      $stmt->bindParam(':product_id', $pid);\n      $stmt->bindParam(':quantity', $quantity);\n      $stmt->execute();\n    }\n\n    return array('success' => true, 'message' => 'Purchase successful');\n  } catch (PDOException $e) {\n    throw new Exception($e->getMessage());\n  }\n}\n\n// Example usage:\n$user_id = 1;\n$product_ids = array(1, 2, 3);\n$quantities = array(2, 5, 7);\n\ntry {\n  $result = purchase($user_id, $product_ids, $quantities);\n  print_r($result);\n} catch (Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}\n```\n\nThis code assumes you have the necessary PDO extension installed and configured on your PHP setup. You'll also need to replace the placeholders in `config.php` with your actual database connection settings.\n\n**Note**: This is a simplified example for illustration purposes only. In a real-world application, you'd want to add more validation, error handling, and security measures (e.g., user authentication, CSRF protection). Additionally, consider using an ORM library like Doctrine or Eloquent to interact with your database.", "code_blocks": [null, "```php\n// config.php: database connection settings\n$db_host = 'localhost';\n$db_username = 'root';\n$db_password = '';\n$db_name = 'store';\n\n// Create a new instance of the PDO class\n$pdo = new PDO(\"mysql:host=$db_host;dbname=$db_name\", $db_username, $db_password);\n\nfunction purchase($user_id, $product_ids, $quantities) {\n  // Validate user ID and product IDs\n  if (!is_int($user_id)) throw new Exception('User ID must be an integer');\n  if (!is_array($product_ids)) throw new Exception('Product IDs must be an array');\n  foreach ($product_ids as $id => $pid) {\n    if (!is_int($id) || !is_int($pid)) throw new Exception('Invalid product ID: ' . var_export($pid, true));\n  }\n\n  // Validate quantities\n  foreach (array_combine($product_ids, $quantities) as $pid => $quantity) {\n    if (!is_int($quantity) || $quantity <= 0) throw new Exception('Invalid quantity for product with ID ' . $pid);\n  }\n\n  try {\n    // Insert order into orders table\n    $stmt = $pdo->prepare('INSERT INTO orders (user_id, total) VALUES (:user_id, :total)');\n    $stmt->bindParam(':user_id', $user_id);\n    $order_total = array_sum(array_combine($product_ids, $quantities));\n    $stmt->bindParam(':total', $order_total);\n    $stmt->execute();\n\n    // Get the ID of the newly inserted order\n    $order_id = $pdo->lastInsertId();\n\n    // Insert order items into order_items table\n    foreach (array_combine($product_ids, $quantities) as $pid => $quantity) {\n      $stmt = $pdo->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');\n      $stmt->bindParam(':order_id', $order_id);\n      $stmt->bindParam(':product_id', $pid);\n      $stmt->bindParam(':quantity', $quantity);\n      $stmt->execute();\n    }\n\n    return array('success' => true, 'message' => 'Purchase successful');\n  } catch (PDOException $e) {\n    throw new Exception($e->getMessage());\n  }\n}\n\n// Example usage:\n$user_id = 1;\n$product_ids = array(1, 2, 3);\n$quantities = array(2, 5, 7);\n\ntry {\n  $result = purchase($user_id, $product_ids, $quantities);\n  print_r($result);\n} catch (Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}\n```"]}
