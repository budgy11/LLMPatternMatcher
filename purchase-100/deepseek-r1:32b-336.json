{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, I need to create a purchase functionality using PHP. Let me think about how to approach this.\n\nFirst, I should outline the main components involved in a purchase process. There's the product catalog, user authentication, adding items to the cart, updating quantities, and handling payments. Also, after payment, I need to confirm it and finalize the order.\n\nI'll start by setting up the database. The tables needed are products, users, orders, order_items, and payments. Each table should have appropriate fields like product_id, name, price for products; user_id, username, password for users; order_id, user_id, status for orders; order_item_id, order_id, product_id, quantity for order items; and payment_id, order_id, amount, method, transaction_id, status for payments.\n\nNext, I'll create the Product class. It should have methods to get all products and get a single product by ID. This will help display the available items to users.\n\nThen, the User class is necessary for handling authentication. Methods like loginUser will check if the user exists and password matches. Also, registering new users with a hashed password is important for security.\n\nThe Cart functionality needs to be handled. I can use PHP sessions to store the cart data since it's per-user and temporary. Functions like addToCart, updateQuantity, and removeFromCart will manage the items in the shopping cart.\n\nWhen checking out, I need to calculate the total amount from the cart. Then, create an order with a status set to 'pending'. After that, insert each item into the order_items table. Finally, handle the payment processing.\n\nFor payment processing, I'll simulate it here since integrating a real gateway is beyond the scope. The processPayment function will check if the payment method is valid and update the payment details. If successful, it updates the order status to 'completed' and clears the cart.\n\nI should also include functions for displaying orders and payments so users can view their purchase history. This involves fetching data from the orders and payments tables based on the user ID.\n\nSecurity considerations are important. I'll make sure to hash passwords using password_hash and verify using password_verify. Also, sanitize inputs where necessary to prevent SQL injection or XSS attacks.\n\nTesting each part step by step is crucial. I'll check if adding products to the cart works, updating quantities, removing items, and ensuring that the checkout process correctly creates orders and payments.\n\nFinally, I'll think about how to expand this in the future, like integrating a real payment gateway, enhancing user experience with AJAX, or adding more features like coupons and shipping options.\n</think>\n\nHere's an example of how you can create a purchase functionality using PHP. This example includes basic CRUD operations for products, orders, and payments:\n\n```php\n<?php\nsession_start();\ninclude(\"db_connection.php\"); // Include your database connection file\n\n// Product class\nclass Product {\n    public function getAllProducts() {\n        $query = \"SELECT * FROM products\";\n        return mysqli_query($GLOBALS['conn'], $query);\n    }\n\n    public function getProductById($id) {\n        $query = \"SELECT * FROM products WHERE product_id = $id\";\n        return mysqli_query($GLOBALS['conn'], $query);\n    }\n}\n\n// User class\nclass User {\n    public function loginUser($username, $password) {\n        $query = \"SELECT * FROM users WHERE username = '$username'\";\n        $result = mysqli_query($GLOBALS['conn'], $query);\n        \n        if (mysqli_num_rows($result) > 0) {\n            $user = mysqli_fetch_assoc($result);\n            if (password_verify($password, $user['password'])) {\n                $_SESSION['user'] = $user;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public function registerUser($username, $email, $password) {\n        $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n        $query = \"INSERT INTO users (username, email, password) \n                  VALUES ('$username', '$email', '$hashed_password')\";\n        return mysqli_query($GLOBALS['conn'], $query);\n    }\n}\n\n// Cart functionality\nfunction addToCart($productId, $quantity) {\n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n    \n    if (isset($_SESSION['cart'][$productId])) {\n        $_SESSION['cart'][$productId] += $quantity;\n    } else {\n        $_SESSION['cart'][$productId] = $quantity;\n    }\n}\n\nfunction updateQuantity($productId, $newQuantity) {\n    if (isset($_SESSION['cart'][$productId])) {\n        $_SESSION['cart'][$productId] = $newQuantity;\n    }\n}\n\nfunction removeFromCart($productId) {\n    unset($_SESSION['cart'][$productId]);\n}\n\n// Checkout functionality\nfunction processCheckout() {\n    global $conn;\n    \n    // Get total amount from cart\n    $totalAmount = calculateTotal();\n    \n    // Create order\n    $orderQuery = \"INSERT INTO orders (user_id, status) \n                   VALUES ('\".$_SESSION['user']['user_id'].\"', 'pending')\";\n    mysqli_query($conn, $orderQuery);\n    \n    $orderId = mysqli_insert_id($conn);\n    \n    // Add items to order_items table\n    foreach ($_SESSION['cart'] as $productId => $quantity) {\n        $productPrice = getProductPriceById($productId);\n        \n        $itemQuery = \"INSERT INTO order_items (order_id, product_id, quantity, price)\n                      VALUES ('$orderId', '$productId', '$quantity', '$productPrice')\";\n        mysqli_query($conn, $itemQuery);\n    }\n    \n    // Process payment\n    processPayment($totalAmount);\n}\n\nfunction calculateTotal() {\n    $total = 0;\n    foreach ($_SESSION['cart'] as $productId => $quantity) {\n        $result = getProductById($productId);\n        $product = mysqli_fetch_assoc($result);\n        $total += ($product['price'] * $quantity);\n    }\n    return $total;\n}\n\n// Payment functionality\nfunction processPayment($amount) {\n    global $conn;\n    \n    // Here you would typically integrate a payment gateway\n    // For this example, we'll simulate the payment processing\n    $paymentMethod = isset($_POST['payment_method']) ? $_POST['payment_method'] : '';\n    \n    if ($paymentMethod === 'credit_card') {\n        $transactionId = time(); // Simulated transaction ID\n        \n        $paymentQuery = \"INSERT INTO payments (order_id, amount, payment_method, transaction_id, status)\n                         VALUES ('\".$_SESSION['order_id'].\"', '$amount', '$paymentMethod', '$transactionId', 'completed')\";\n        mysqli_query($conn, $paymentQuery);\n        \n        // Update order status\n        updateOrderStatus($_SESSION['order_id'], 'completed');\n        \n        // Clear cart\n        unset($_SESSION['cart']);\n    } else {\n        echo \"Invalid payment method\";\n    }\n}\n\nfunction updateOrderStatus($orderId, $status) {\n    global $conn;\n    $query = \"UPDATE orders SET status = '$status' WHERE order_id = $orderId\";\n    mysqli_query($conn, $query);\n}\n\n// Order management\nfunction getOrders() {\n    $query = \"SELECT * FROM orders WHERE user_id = '\".$_SESSION['user']['user_id'].\"'\";\n    return mysqli_query($GLOBALS['conn'], $query);\n}\n\nfunction getOrderItems($orderId) {\n    $query = \"SELECT * FROM order_items WHERE order_id = $orderId\";\n    return mysqli_query($GLOBALS['conn'], $query);\n}\n\n// Payment management\nfunction getPayments() {\n    $query = \"SELECT * FROM payments WHERE user_id = '\".$_SESSION['user']['user_id'].\"'\";\n    return mysqli_query($GLOBALS['conn'], $query);\n}\n?>\n```\n\nThis code provides the following functionalities:\n\n1. Product Management:\n- Get all products\n- Get product by ID\n\n2. User Management:\n- Login functionality\n- Registration functionality\n\n3. Cart Management:\n- Add items to cart\n- Update item quantity\n- Remove items from cart\n\n4. Checkout Process:\n- Calculate total amount\n- Create order\n- Add order items\n- Process payment\n\n5. Order Management:\n- Get orders for current user\n- Get order items\n- Update order status\n\n6. Payment Management:\n- Process payments\n- Get payment history\n\nTo use this code:\n\n1. Make sure to create a `db_connection.php` file with your database connection details.\n\n2. Create the necessary database tables (products, users, orders, order_items, payments).\n\n3. Use these functions in your application by including them where needed.\n\n4. For security:\n- Always sanitize user inputs\n- Use prepared statements or parameterized queries\n- Implement CSRF protection\n- Securely hash passwords\n\n5. Add error handling as needed for each function.\n\nRemember to adapt this code to fit your specific needs and implement additional security measures for a production environment.\n\nYou can extend this functionality by adding features like:\n- User authentication middleware\n- Admin panel for product management\n- Email notifications\n- Payment gateway integration (e.g., Stripe, PayPal)\n- Order tracking\n- Refund system\n- Coupon codes\n- Returns handling", "code_blocks": ["```php\n<?php\nsession_start();\ninclude(\"db_connection.php\"); // Include your database connection file\n\n// Product class\nclass Product {\n    public function getAllProducts() {\n        $query = \"SELECT * FROM products\";\n        return mysqli_query($GLOBALS['conn'], $query);\n    }\n\n    public function getProductById($id) {\n        $query = \"SELECT * FROM products WHERE product_id = $id\";\n        return mysqli_query($GLOBALS['conn'], $query);\n    }\n}\n\n// User class\nclass User {\n    public function loginUser($username, $password) {\n        $query = \"SELECT * FROM users WHERE username = '$username'\";\n        $result = mysqli_query($GLOBALS['conn'], $query);\n        \n        if (mysqli_num_rows($result) > 0) {\n            $user = mysqli_fetch_assoc($result);\n            if (password_verify($password, $user['password'])) {\n                $_SESSION['user'] = $user;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public function registerUser($username, $email, $password) {\n        $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n        $query = \"INSERT INTO users (username, email, password) \n                  VALUES ('$username', '$email', '$hashed_password')\";\n        return mysqli_query($GLOBALS['conn'], $query);\n    }\n}\n\n// Cart functionality\nfunction addToCart($productId, $quantity) {\n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n    \n    if (isset($_SESSION['cart'][$productId])) {\n        $_SESSION['cart'][$productId] += $quantity;\n    } else {\n        $_SESSION['cart'][$productId] = $quantity;\n    }\n}\n\nfunction updateQuantity($productId, $newQuantity) {\n    if (isset($_SESSION['cart'][$productId])) {\n        $_SESSION['cart'][$productId] = $newQuantity;\n    }\n}\n\nfunction removeFromCart($productId) {\n    unset($_SESSION['cart'][$productId]);\n}\n\n// Checkout functionality\nfunction processCheckout() {\n    global $conn;\n    \n    // Get total amount from cart\n    $totalAmount = calculateTotal();\n    \n    // Create order\n    $orderQuery = \"INSERT INTO orders (user_id, status) \n                   VALUES ('\".$_SESSION['user']['user_id'].\"', 'pending')\";\n    mysqli_query($conn, $orderQuery);\n    \n    $orderId = mysqli_insert_id($conn);\n    \n    // Add items to order_items table\n    foreach ($_SESSION['cart'] as $productId => $quantity) {\n        $productPrice = getProductPriceById($productId);\n        \n        $itemQuery = \"INSERT INTO order_items (order_id, product_id, quantity, price)\n                      VALUES ('$orderId', '$productId', '$quantity', '$productPrice')\";\n        mysqli_query($conn, $itemQuery);\n    }\n    \n    // Process payment\n    processPayment($totalAmount);\n}\n\nfunction calculateTotal() {\n    $total = 0;\n    foreach ($_SESSION['cart'] as $productId => $quantity) {\n        $result = getProductById($productId);\n        $product = mysqli_fetch_assoc($result);\n        $total += ($product['price'] * $quantity);\n    }\n    return $total;\n}\n\n// Payment functionality\nfunction processPayment($amount) {\n    global $conn;\n    \n    // Here you would typically integrate a payment gateway\n    // For this example, we'll simulate the payment processing\n    $paymentMethod = isset($_POST['payment_method']) ? $_POST['payment_method'] : '';\n    \n    if ($paymentMethod === 'credit_card') {\n        $transactionId = time(); // Simulated transaction ID\n        \n        $paymentQuery = \"INSERT INTO payments (order_id, amount, payment_method, transaction_id, status)\n                         VALUES ('\".$_SESSION['order_id'].\"', '$amount', '$paymentMethod', '$transactionId', 'completed')\";\n        mysqli_query($conn, $paymentQuery);\n        \n        // Update order status\n        updateOrderStatus($_SESSION['order_id'], 'completed');\n        \n        // Clear cart\n        unset($_SESSION['cart']);\n    } else {\n        echo \"Invalid payment method\";\n    }\n}\n\nfunction updateOrderStatus($orderId, $status) {\n    global $conn;\n    $query = \"UPDATE orders SET status = '$status' WHERE order_id = $orderId\";\n    mysqli_query($conn, $query);\n}\n\n// Order management\nfunction getOrders() {\n    $query = \"SELECT * FROM orders WHERE user_id = '\".$_SESSION['user']['user_id'].\"'\";\n    return mysqli_query($GLOBALS['conn'], $query);\n}\n\nfunction getOrderItems($orderId) {\n    $query = \"SELECT * FROM order_items WHERE order_id = $orderId\";\n    return mysqli_query($GLOBALS['conn'], $query);\n}\n\n// Payment management\nfunction getPayments() {\n    $query = \"SELECT * FROM payments WHERE user_id = '\".$_SESSION['user']['user_id'].\"'\";\n    return mysqli_query($GLOBALS['conn'], $query);\n}\n?>\n```"]}
