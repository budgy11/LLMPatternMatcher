{"prompt": "Create a purchase cart functionality using php", "llm_output": "**Purchase Cart Functionality with PHP**\n=====================================\n\nIn this example, we'll create a basic purchase cart system using PHP. This will allow users to add items to their cart and view the total cost of their purchases.\n\n**Database Setup**\n------------------\n\nBefore we start coding, let's set up our database schema for storing cart information:\n\n```sql\nCREATE TABLE carts (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE cart_items (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  cart_id INT,\n  product_id INT,\n  quantity INT,\n  price DECIMAL(10,2),\n  FOREIGN KEY (cart_id) REFERENCES carts(id)\n);\n```\n\n**Cart Model**\n----------------\n\nCreate a `Cart` model to handle CRUD operations for cart data:\n\n```php\nclass Cart {\n  private $db;\n\n  public function __construct() {\n    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n  }\n\n  public function add($user_id, $product_id, $quantity) {\n    try {\n      $stmt = $this->db->prepare(\"INSERT INTO cart_items (cart_id, product_id, quantity, price)\n        SELECT id, ?, ? * price FROM carts\n        WHERE user_id = ?\n          AND IFNULL(quantity, 0) + ? <= quantity\");\n      $stmt->execute([$product_id, $quantity, $user_id, $quantity]);\n      return $this->db->lastInsertId();\n    } catch (PDOException $e) {\n      echo 'Error adding item to cart: ' . $e->getMessage();\n    }\n  }\n\n  public function getCartItems($cart_id) {\n    try {\n      $stmt = $this->db->prepare(\"SELECT ci.id, p.name AS product_name, p.price, ci.quantity\n        FROM cart_items ci\n        JOIN products p ON ci.product_id = p.id\n        WHERE ci.cart_id = ?\");\n      $stmt->execute([$cart_id]);\n      return $stmt->fetchAll();\n    } catch (PDOException $e) {\n      echo 'Error fetching cart items: ' . $e->getMessage();\n    }\n  }\n\n  public function updateQuantity($item_id, $new_quantity) {\n    try {\n      $stmt = $this->db->prepare(\"UPDATE cart_items SET quantity = ? WHERE id = ?\");\n      $stmt->execute([$new_quantity, $item_id]);\n      return true;\n    } catch (PDOException $e) {\n      echo 'Error updating item quantity: ' . $e->getMessage();\n    }\n  }\n\n  public function deleteItem($item_id) {\n    try {\n      $stmt = $this->db->prepare(\"DELETE FROM cart_items WHERE id = ?\");\n      $stmt->execute([$item_id]);\n      return true;\n    } catch (PDOException $e) {\n      echo 'Error deleting item: ' . $e->getMessage();\n    }\n  }\n\n  public function getTotalCost($cart_id) {\n    try {\n      $stmt = $this->db->prepare(\"SELECT SUM(ci.quantity * p.price) AS total_cost\n        FROM cart_items ci\n        JOIN products p ON ci.product_id = p.id\n        WHERE ci.cart_id = ?\");\n      $stmt->execute([$cart_id]);\n      return $stmt->fetchColumn();\n    } catch (PDOException $e) {\n      echo 'Error fetching total cost: ' . $e->getMessage();\n    }\n  }\n}\n```\n\n**Cart Controller**\n------------------\n\nCreate a `CartController` to handle user interactions with the cart:\n\n```php\nclass CartController {\n  private $cart;\n\n  public function __construct() {\n    $this->cart = new Cart();\n  }\n\n  public function addProduct($user_id, $product_id) {\n    // Validate user input and product ID\n    // ...\n    $quantity = $_POST['quantity'];\n    $result = $this->cart->add($user_id, $product_id, $quantity);\n    if ($result !== false) {\n      echo 'Item added to cart successfully!';\n    } else {\n      echo 'Error adding item to cart.';\n    }\n  }\n\n  public function viewCart() {\n    // Validate user input and cart ID\n    // ...\n    $cart_id = $_GET['id'];\n    $items = $this->cart->getCartItems($cart_id);\n    echo json_encode($items); // Return JSON response for client-side rendering\n  }\n\n  public function updateQuantity($item_id, $new_quantity) {\n    // Validate user input and item ID\n    // ...\n    $result = $this->cart->updateQuantity($item_id, $new_quantity);\n    if ($result !== false) {\n      echo 'Item quantity updated successfully!';\n    } else {\n      echo 'Error updating item quantity.';\n    }\n  }\n\n  public function deleteProduct($item_id) {\n    // Validate user input and item ID\n    // ...\n    $result = $this->cart->deleteItem($item_id);\n    if ($result !== false) {\n      echo 'Item deleted from cart successfully!';\n    } else {\n      echo 'Error deleting item.';\n    }\n  }\n\n  public function getTotalCost() {\n    // Validate user input and cart ID\n    // ...\n    $cart_id = $_GET['id'];\n    $total_cost = $this->cart->getTotalCost($cart_id);\n    echo json_encode(['total_cost' => $total_cost]); // Return JSON response for client-side rendering\n  }\n}\n```\n\n**Example Usage**\n-----------------\n\nTo add a product to the cart, send a POST request with `user_id`, `product_id`, and `quantity` as parameters:\n\n```bash\nPOST /cart/add HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\n\nuser_id=1&product_id=123&quantity=2\n```\n\nTo view the cart contents, send a GET request with `id` as a parameter:\n\n```bash\nGET /cart/view HTTP/1.1\n```\n\nNote that this is a basic implementation and you should add additional validation and security measures (e.g., session management, authentication) to your application.\n\n**Commit Message Guidelines**\n---------------------------\n\nFor commits related to this feature, use the following format:\n\n`feat: Add purchase cart functionality`\n\nOr for bug fixes:\n\n`fix: Fix issue with cart item quantity update`\n\nRemember to follow standard professional guidelines for commit messages.", "code_blocks": [null, "```php\nclass Cart {\n  private $db;\n\n  public function __construct() {\n    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n  }\n\n  public function add($user_id, $product_id, $quantity) {\n    try {\n      $stmt = $this->db->prepare(\"INSERT INTO cart_items (cart_id, product_id, quantity, price)\n        SELECT id, ?, ? * price FROM carts\n        WHERE user_id = ?\n          AND IFNULL(quantity, 0) + ? <= quantity\");\n      $stmt->execute([$product_id, $quantity, $user_id, $quantity]);\n      return $this->db->lastInsertId();\n    } catch (PDOException $e) {\n      echo 'Error adding item to cart: ' . $e->getMessage();\n    }\n  }\n\n  public function getCartItems($cart_id) {\n    try {\n      $stmt = $this->db->prepare(\"SELECT ci.id, p.name AS product_name, p.price, ci.quantity\n        FROM cart_items ci\n        JOIN products p ON ci.product_id = p.id\n        WHERE ci.cart_id = ?\");\n      $stmt->execute([$cart_id]);\n      return $stmt->fetchAll();\n    } catch (PDOException $e) {\n      echo 'Error fetching cart items: ' . $e->getMessage();\n    }\n  }\n\n  public function updateQuantity($item_id, $new_quantity) {\n    try {\n      $stmt = $this->db->prepare(\"UPDATE cart_items SET quantity = ? WHERE id = ?\");\n      $stmt->execute([$new_quantity, $item_id]);\n      return true;\n    } catch (PDOException $e) {\n      echo 'Error updating item quantity: ' . $e->getMessage();\n    }\n  }\n\n  public function deleteItem($item_id) {\n    try {\n      $stmt = $this->db->prepare(\"DELETE FROM cart_items WHERE id = ?\");\n      $stmt->execute([$item_id]);\n      return true;\n    } catch (PDOException $e) {\n      echo 'Error deleting item: ' . $e->getMessage();\n    }\n  }\n\n  public function getTotalCost($cart_id) {\n    try {\n      $stmt = $this->db->prepare(\"SELECT SUM(ci.quantity * p.price) AS total_cost\n        FROM cart_items ci\n        JOIN products p ON ci.product_id = p.id\n        WHERE ci.cart_id = ?\");\n      $stmt->execute([$cart_id]);\n      return $stmt->fetchColumn();\n    } catch (PDOException $e) {\n      echo 'Error fetching total cost: ' . $e->getMessage();\n    }\n  }\n}\n```", "```php\nclass CartController {\n  private $cart;\n\n  public function __construct() {\n    $this->cart = new Cart();\n  }\n\n  public function addProduct($user_id, $product_id) {\n    // Validate user input and product ID\n    // ...\n    $quantity = $_POST['quantity'];\n    $result = $this->cart->add($user_id, $product_id, $quantity);\n    if ($result !== false) {\n      echo 'Item added to cart successfully!';\n    } else {\n      echo 'Error adding item to cart.';\n    }\n  }\n\n  public function viewCart() {\n    // Validate user input and cart ID\n    // ...\n    $cart_id = $_GET['id'];\n    $items = $this->cart->getCartItems($cart_id);\n    echo json_encode($items); // Return JSON response for client-side rendering\n  }\n\n  public function updateQuantity($item_id, $new_quantity) {\n    // Validate user input and item ID\n    // ...\n    $result = $this->cart->updateQuantity($item_id, $new_quantity);\n    if ($result !== false) {\n      echo 'Item quantity updated successfully!';\n    } else {\n      echo 'Error updating item quantity.';\n    }\n  }\n\n  public function deleteProduct($item_id) {\n    // Validate user input and item ID\n    // ...\n    $result = $this->cart->deleteItem($item_id);\n    if ($result !== false) {\n      echo 'Item deleted from cart successfully!';\n    } else {\n      echo 'Error deleting item.';\n    }\n  }\n\n  public function getTotalCost() {\n    // Validate user input and cart ID\n    // ...\n    $cart_id = $_GET['id'];\n    $total_cost = $this->cart->getTotalCost($cart_id);\n    echo json_encode(['total_cost' => $total_cost]); // Return JSON response for client-side rendering\n  }\n}\n```", null, null]}
