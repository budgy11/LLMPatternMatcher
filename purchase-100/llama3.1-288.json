{"prompt": "Create a purchase functionality using php", "llm_output": "Here's an example of how you can create a basic purchase functionality using PHP. This example assumes that you have a database set up with the necessary tables for storing products and orders.\n\n**Database Schema**\n\nFor this example, we'll need two tables: `products` and `orders`.\n\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE orders (\n  id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  order_date DATE,\n  total_cost DECIMAL(10,2)\n);\n```\n\n**PHP Code**\n\n```php\n// Include the database connection file\nrequire_once 'db.php';\n\n// Function to get all products from the database\nfunction getProducts() {\n  $query = \"SELECT * FROM products\";\n  return queryDB($query);\n}\n\n// Function to add a new order to the database\nfunction addOrder($customerName, $orderDate, $totalCost) {\n  $query = \"INSERT INTO orders (customer_name, order_date, total_cost)\n            VALUES ('$customerName', '$orderDate', '$totalCost')\";\n  return queryDB($query);\n}\n\n// Function to create a new purchase in the database\nfunction makePurchase($productId, $quantity) {\n  // Get the product details from the database\n  $productQuery = \"SELECT price FROM products WHERE id = '$productId'\";\n  $productDetails = queryDB($productQuery);\n\n  if ($productDetails) {\n    // Calculate the total cost of the purchase\n    $totalCost = $productDetails[0]['price'] * $quantity;\n\n    // Add the order to the database\n    $orderDate = date('Y-m-d');\n    $addOrderResult = addOrder($customerName, $orderDate, $totalCost);\n\n    if ($addOrderResult) {\n      // Update the stock level of the product in the database\n      updateStockLevel($productId);\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n\n// Function to update the stock level of a product in the database\nfunction updateStockLevel($productId) {\n  $query = \"UPDATE products SET stock_level = stock_level - '$quantity' WHERE id = '$productId'\";\n  return queryDB($query);\n}\n\n// Helper function to run a SQL query and get the result\nfunction queryDB($query) {\n  global $conn;\n  try {\n    $result = $conn->prepare($query);\n    $result->execute();\n    return $result->fetchALL(PDO::FETCH_ASSOC);\n  } catch (PDOException $e) {\n    die('Query failed: ' . $e->getMessage());\n  }\n}\n\n// Example usage:\n$customerName = 'John Doe';\n$productId = 1;\n$quantity = 2;\n\nif (makePurchase($productId, $quantity)) {\n  echo \"Purchase successful!\";\n} else {\n  echo \"Purchase failed.\";\n}\n```\n\nThis example code provides basic functionality for creating a purchase in the database. However, it does not include any error checking or validation that would be required in a real-world application.\n\n**Important Note**: This is a simplified example and should not be used as-is in production without proper testing and security measures to prevent SQL injection attacks.", "code_blocks": [null, "```php\n// Include the database connection file\nrequire_once 'db.php';\n\n// Function to get all products from the database\nfunction getProducts() {\n  $query = \"SELECT * FROM products\";\n  return queryDB($query);\n}\n\n// Function to add a new order to the database\nfunction addOrder($customerName, $orderDate, $totalCost) {\n  $query = \"INSERT INTO orders (customer_name, order_date, total_cost)\n            VALUES ('$customerName', '$orderDate', '$totalCost')\";\n  return queryDB($query);\n}\n\n// Function to create a new purchase in the database\nfunction makePurchase($productId, $quantity) {\n  // Get the product details from the database\n  $productQuery = \"SELECT price FROM products WHERE id = '$productId'\";\n  $productDetails = queryDB($productQuery);\n\n  if ($productDetails) {\n    // Calculate the total cost of the purchase\n    $totalCost = $productDetails[0]['price'] * $quantity;\n\n    // Add the order to the database\n    $orderDate = date('Y-m-d');\n    $addOrderResult = addOrder($customerName, $orderDate, $totalCost);\n\n    if ($addOrderResult) {\n      // Update the stock level of the product in the database\n      updateStockLevel($productId);\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n\n// Function to update the stock level of a product in the database\nfunction updateStockLevel($productId) {\n  $query = \"UPDATE products SET stock_level = stock_level - '$quantity' WHERE id = '$productId'\";\n  return queryDB($query);\n}\n\n// Helper function to run a SQL query and get the result\nfunction queryDB($query) {\n  global $conn;\n  try {\n    $result = $conn->prepare($query);\n    $result->execute();\n    return $result->fetchALL(PDO::FETCH_ASSOC);\n  } catch (PDOException $e) {\n    die('Query failed: ' . $e->getMessage());\n  }\n}\n\n// Example usage:\n$customerName = 'John Doe';\n$productId = 1;\n$quantity = 2;\n\nif (makePurchase($productId, $quantity)) {\n  echo \"Purchase successful!\";\n} else {\n  echo \"Purchase failed.\";\n}\n```"]}
