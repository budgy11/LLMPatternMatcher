{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality in PHP, including form validation and error handling. This example assumes that you have a database set up to store products and customers.\n\n**Database Structure:**\n\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE orders (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  customer_name VARCHAR(255),\n  order_date DATE,\n  total_cost DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  FOREIGN KEY (order_id) REFERENCES orders(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n**PHP Code:**\n\n```php\n<?php\n\n// Configuration file for database connection\nrequire_once 'config.php';\n\n// Function to validate form data\nfunction validate_form($data) {\n    // Validate name and email\n    if (!isset($data['name']) || empty(trim($data['name']))) {\n        return array('error' => 'Name is required');\n    }\n    if (!isset($data['email']) || empty(trim($data['email'])) || !filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n        return array('error' => 'Invalid email address');\n    }\n\n    // Validate product selections\n    $selected_products = array_filter($data['products']);\n    if (empty($selected_products)) {\n        return array('error' => 'Please select at least one product');\n    }\n\n    // Validate quantity and price\n    foreach ($selected_products as $product_id => $quantity) {\n        if (!is_numeric($quantity) || $quantity < 1) {\n            return array('error' => 'Invalid quantity for product ' . $product_id);\n        }\n        $product = get_product($product_id);\n        if (!$product) {\n            return array('error' => 'Product ' . $product_id . ' not found');\n        }\n        if ($quantity * $product['price'] > $_SESSION['total_cost']) {\n            return array('error' => 'Insufficient funds for product ' . $product_id);\n        }\n    }\n\n    // All validation passed\n    return array();\n}\n\n// Function to process purchase\nfunction process_purchase($data) {\n    // Get selected products and quantities\n    $selected_products = array_filter($data['products']);\n\n    // Create new order in database\n    $order = array(\n        'customer_name' => $_SESSION['username'],\n        'order_date' => date('Y-m-d'),\n        'total_cost' => $_SESSION['total_cost']\n    );\n    insert_order($order);\n\n    // Insert order items into database\n    foreach ($selected_products as $product_id => $quantity) {\n        $product = get_product($product_id);\n        if ($product) {\n            $order_item = array(\n                'order_id' => get_last_order_id(),\n                'product_id' => $product_id,\n                'quantity' => $quantity\n            );\n            insert_order_item($order_item);\n        }\n    }\n\n    // Clear session variables\n    unset($_SESSION['username']);\n    unset($_SESSION['products']);\n    unset($_SESSION['total_cost']);\n\n    echo 'Purchase successful!';\n}\n\n// Function to get last order ID\nfunction get_last_order_id() {\n    global $conn;\n    $stmt = $conn->prepare('SELECT id FROM orders ORDER BY id DESC LIMIT 1');\n    $stmt->execute();\n    return $stmt->fetchColumn();\n}\n\n// Function to insert new order into database\nfunction insert_order($order) {\n    global $conn;\n    $stmt = $conn->prepare('INSERT INTO orders (customer_name, order_date, total_cost) VALUES (:customer_name, :order_date, :total_cost)');\n    $stmt->bindParam(':customer_name', $order['customer_name']);\n    $stmt->bindParam(':order_date', $order['order_date']);\n    $stmt->bindParam(':total_cost', $order['total_cost']);\n    $stmt->execute();\n}\n\n// Function to insert new order item into database\nfunction insert_order_item($order_item) {\n    global $conn;\n    $stmt = $conn->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');\n    $stmt->bindParam(':order_id', $order_item['order_id']);\n    $stmt->bindParam(':product_id', $order_item['product_id']);\n    $stmt->bindParam(':quantity', $order_item['quantity']);\n    $stmt->execute();\n}\n\n// Function to get product by ID\nfunction get_product($id) {\n    global $conn;\n    $stmt = $conn->prepare('SELECT * FROM products WHERE id = :id');\n    $stmt->bindParam(':id', $id);\n    $stmt->execute();\n    return $stmt->fetch();\n}\n\n?>\n```\n\n**HTML Form:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Purchase Form</title>\n</head>\n<body>\n    <?php if (isset($_SESSION['username'])) : ?>\n        <h1>Confirm Purchase:</h1>\n        <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n            <?php foreach ($selected_products as $product_id => $quantity) : ?>\n                <input type=\"hidden\" name=\"products[<?php echo $product_id; ?>]\" value=\"<?php echo $quantity; ?>\">\n            <?php endforeach; ?>\n            <label for=\"name\">Name:</label>\n            <input type=\"text\" id=\"name\" name=\"name\" value=\"<?php echo $_SESSION['username']; ?>\">\n            <br><br>\n            <button type=\"submit\" name=\"process_purchase\">Process Purchase</button>\n        </form>\n    <?php else : ?>\n        <h1>Please log in or register to make a purchase:</h1>\n        <!-- login/register form here -->\n    <?php endif; ?>\n</body>\n</html>\n```\n\nThis code assumes that you have already implemented the following:\n\n* A database connection using PDO\n* The `config.php` file for database configuration\n* User authentication and session management\n\nNote: This is a simplified example to demonstrate basic functionality. You should add proper error handling, validation, and security measures in your production environment.", "code_blocks": [null, "```php\n<?php\n\n// Configuration file for database connection\nrequire_once 'config.php';\n\n// Function to validate form data\nfunction validate_form($data) {\n    // Validate name and email\n    if (!isset($data['name']) || empty(trim($data['name']))) {\n        return array('error' => 'Name is required');\n    }\n    if (!isset($data['email']) || empty(trim($data['email'])) || !filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n        return array('error' => 'Invalid email address');\n    }\n\n    // Validate product selections\n    $selected_products = array_filter($data['products']);\n    if (empty($selected_products)) {\n        return array('error' => 'Please select at least one product');\n    }\n\n    // Validate quantity and price\n    foreach ($selected_products as $product_id => $quantity) {\n        if (!is_numeric($quantity) || $quantity < 1) {\n            return array('error' => 'Invalid quantity for product ' . $product_id);\n        }\n        $product = get_product($product_id);\n        if (!$product) {\n            return array('error' => 'Product ' . $product_id . ' not found');\n        }\n        if ($quantity * $product['price'] > $_SESSION['total_cost']) {\n            return array('error' => 'Insufficient funds for product ' . $product_id);\n        }\n    }\n\n    // All validation passed\n    return array();\n}\n\n// Function to process purchase\nfunction process_purchase($data) {\n    // Get selected products and quantities\n    $selected_products = array_filter($data['products']);\n\n    // Create new order in database\n    $order = array(\n        'customer_name' => $_SESSION['username'],\n        'order_date' => date('Y-m-d'),\n        'total_cost' => $_SESSION['total_cost']\n    );\n    insert_order($order);\n\n    // Insert order items into database\n    foreach ($selected_products as $product_id => $quantity) {\n        $product = get_product($product_id);\n        if ($product) {\n            $order_item = array(\n                'order_id' => get_last_order_id(),\n                'product_id' => $product_id,\n                'quantity' => $quantity\n            );\n            insert_order_item($order_item);\n        }\n    }\n\n    // Clear session variables\n    unset($_SESSION['username']);\n    unset($_SESSION['products']);\n    unset($_SESSION['total_cost']);\n\n    echo 'Purchase successful!';\n}\n\n// Function to get last order ID\nfunction get_last_order_id() {\n    global $conn;\n    $stmt = $conn->prepare('SELECT id FROM orders ORDER BY id DESC LIMIT 1');\n    $stmt->execute();\n    return $stmt->fetchColumn();\n}\n\n// Function to insert new order into database\nfunction insert_order($order) {\n    global $conn;\n    $stmt = $conn->prepare('INSERT INTO orders (customer_name, order_date, total_cost) VALUES (:customer_name, :order_date, :total_cost)');\n    $stmt->bindParam(':customer_name', $order['customer_name']);\n    $stmt->bindParam(':order_date', $order['order_date']);\n    $stmt->bindParam(':total_cost', $order['total_cost']);\n    $stmt->execute();\n}\n\n// Function to insert new order item into database\nfunction insert_order_item($order_item) {\n    global $conn;\n    $stmt = $conn->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');\n    $stmt->bindParam(':order_id', $order_item['order_id']);\n    $stmt->bindParam(':product_id', $order_item['product_id']);\n    $stmt->bindParam(':quantity', $order_item['quantity']);\n    $stmt->execute();\n}\n\n// Function to get product by ID\nfunction get_product($id) {\n    global $conn;\n    $stmt = $conn->prepare('SELECT * FROM products WHERE id = :id');\n    $stmt->bindParam(':id', $id);\n    $stmt->execute();\n    return $stmt->fetch();\n}\n\n?>\n```", null]}
