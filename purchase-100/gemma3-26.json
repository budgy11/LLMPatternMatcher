{"prompt": "Create a purchase cart functionality using php", "llm_output": "```php\n<?php\nsession_start();\n\n// Database connection details (replace with your actual credentials)\n$db_host = 'localhost';\n$db_name = 'shopping_cart';\n$db_user = 'your_username';\n$db_password = 'your_password';\n\n// --- Database Connection ---\n$conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// --- Helper Functions ---\nfunction sanitize_input($data) {\n    global $conn;\n    $data = trim($data);\n    $data = stripslashes($data);\n    $data = htmlspecialchars($data); // Important for security!\n    return $data;\n}\n\n// --- Product Data (for demonstration - replace with your database query) ---\n$products = array(\n    1 => array('id' => 1, 'name' => 'T-Shirt', 'price' => 20.00, 'stock' => 10),\n    2 => array('id' => 2, 'name' => 'Jeans', 'price' => 50.00, 'stock' => 5),\n    3 => array('id' => 3, 'name' => 'Sneakers', 'price' => 80.00, 'stock' => 3)\n);\n\n// --- Cart Functions ---\n\n// Initialize Cart if it doesn't exist\nif (!isset($_SESSION['cart'])) {\n    $_SESSION['cart'] = array();\n}\n\n// Add to Cart\nfunction addToCart($product_id, $quantity) {\n    global $_SESSION['cart'];\n\n    if (isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n    } else {\n        $_SESSION['cart'][$product_id] = array('quantity' => $quantity);\n    }\n}\n\n// Remove from Cart\nfunction removeFromCart($product_id) {\n    if (isset($_SESSION['cart'][$product_id])) {\n        unset($_SESSION['cart'][$product_id]);\n    }\n}\n\n// Update Quantity in Cart\nfunction updateQuantity($product_id, $quantity) {\n    if (isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id]['quantity'] = $quantity;\n    }\n}\n\n// Get Cart Contents\nfunction getCartContents() {\n    return $_SESSION['cart'];\n}\n\n// --- Cart Actions based on HTTP request ---\n\n// 1. Add to Cart (GET request)\nif (isset($_GET['action']) && $_GET['action'] == 'add') {\n    $product_id = sanitize_input($_GET['product_id']);\n    $quantity = sanitize_input($_GET['quantity']);\n\n    if (is_numeric($product_id) && is_numeric($quantity) && $quantity > 0) {\n        addToCart($product_id, $quantity);\n        echo \"<p>Item added to cart.</p>\";\n    } else {\n        echo \"<p>Invalid product ID or quantity.</p>\";\n    }\n}\n\n// 2. Remove from Cart (GET request)\nif (isset($_GET['action']) && $_GET['action'] == 'remove') {\n    $product_id = sanitize_input($_GET['product_id']);\n    removeFromCart($product_id);\n    echo \"<p>Item removed from cart.</p>\";\n}\n\n// 3. Update Quantity in Cart (GET request)\nif (isset($_GET['action']) && $_GET['action'] == 'update') {\n    $product_id = sanitize_input($_GET['product_id']);\n    $quantity = sanitize_input($_GET['quantity']);\n\n    if (is_numeric($product_id) && is_numeric($quantity) && $quantity > 0) {\n        updateQuantity($product_id, $quantity);\n        echo \"<p>Quantity updated in cart.</p>\";\n    } else {\n        echo \"<p>Invalid product ID or quantity.</p>\";\n    }\n}\n\n\n// --- Display Cart Contents ---\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n    <style>\n        .cart-item {\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Shopping Cart</h1>\n\n<?php\n    $cart_contents = getCartContents();\n\n    if (!empty($cart_contents)) {\n        echo \"<h2>Cart Contents:</h2>\";\n        foreach ($cart_contents as $product_id => $item) {\n            echo \"<div class='cart-item'>\";\n            echo \"Product ID: \" . $product_id . \"<br>\";\n            echo \"Name: \" . $products[$product_id]['name'] . \"<br>\";\n            echo \"Price: $\" . $products[$product_id]['price'] . \"<br>\";\n            echo \"Quantity: \" . $item['quantity'] . \"<br>\";\n            echo \"Subtotal: $\" . ($products[$product_id]['price'] * $item['quantity']) . \"<br>\";\n            echo \"</div>\";\n        }\n\n        echo \"<p><strong>Total:</strong> $\" . round(getTotalCartValue(), 2) . \"</p>\"; // Calculate and display total\n    } else {\n        echo \"<p>Your cart is empty.</p>\";\n    }\n?>\n\n<hr>\n\n<h2>Add to Cart</h2>\n<form method=\"GET\">\n    <label for=\"product_id\">Product ID:</label>\n    <select name=\"product_id\" id=\"product_id\">\n        <?php\n        foreach ($products as $id => $product) {\n            echo \"<option value='\" . $id . \"'>\" . $id . \"</option>\";\n        }\n        ?>\n    </select>\n    <br>\n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" name=\"quantity\" id=\"quantity\" value=\"1\" min=\"1\">\n    <br>\n    <button type=\"submit\" name=\"action\" value=\"add\">Add to Cart</button>\n</form>\n\n<hr>\n\n<h2>Remove from Cart</h2>\n<form method=\"GET\">\n    <label for=\"product_id\">Product ID:</label>\n    <select name=\"product_id\" id=\"product_id\">\n        <?php\n        foreach ($products as $id => $product) {\n            echo \"<option value='\" . $id . \"'>\" . $id . \"</option>\";\n        }\n        ?>\n    </select>\n    <br>\n    <button type=\"submit\" name=\"action\" value=\"remove\">Remove from Cart</button>\n</form>\n\n<hr>\n\n<h2>Update Quantity in Cart</h2>\n<form method=\"GET\">\n    <label for=\"product_id\">Product ID:</label>\n    <select name=\"product_id\" id=\"product_id\">\n        <?php\n        foreach ($products as $id => $product) {\n            echo \"<option value='\" . $id . \"'>\" . $id . \"</option>\";\n        }\n        ?>\n    </select>\n    <br>\n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" name=\"quantity\" id=\"quantity\" value=\"1\" min=\"1\">\n    <br>\n    <button type=\"submit\" name=\"action\" value=\"update\">Update Quantity</button>\n</form>\n\n\n</body>\n</html>\n\n<?php\n\n// Helper Function to calculate total cart value.\nfunction getTotalCartValue() {\n    $total = 0;\n    $cart_contents = getCartContents();\n    foreach ($cart_contents as $product_id => $item) {\n        $total += ($products[$product_id]['price'] * $item['quantity']);\n    }\n    return $total;\n}\n\n?>\n```\n\nKey improvements and explanations:\n\n* **Database Connection:**  Uses `mysqli` for a robust database connection.  Remember to replace the placeholders with your actual database credentials.  This is crucial for any real-world shopping cart.\n* **Sanitization:**  The `sanitize_input()` function is *essential* for security. It removes HTML tags and other potentially harmful characters from user input before using it in a database query or other operations.  This prevents Cross-Site Scripting (XSS) attacks.\n* **Cart Initialization:** The code now correctly initializes the `$_SESSION['cart']` array if it doesn't exist, preventing errors on the first visit.\n* **`add`, `remove`, and `update` actions:** The code now handles the `add`, `remove` and `update` actions, providing a complete shopping cart experience.\n* **Clearer Cart Functions:** `addToCart`, `removeFromCart`, `updateQuantity`, and `getCartContents` are now clearly defined functions, making the code more modular and readable.\n* **`getTotalCartValue()` Function:** This function calculates and displays the total cart value. It loops through the cart contents and calculates the subtotal for each item, then sums them up. The `round()` function ensures the total is displayed with two decimal places.\n* **User Interface (HTML/PHP):**  The code generates a basic HTML interface for the shopping cart.  It includes forms for adding items to the cart, removing items from the cart, and updating the quantity of items in the cart.\n* **Error Handling:**  Includes basic error handling (e.g., checking if the product ID and quantity are valid numbers) to improve the user experience.  More comprehensive error handling would be needed in a production environment.\n* **Comments and Readability:** Added more comments to explain the code and improve readability.\n* **`session_start()`:**  The `session_start()` function is called at the beginning of the script to start a PHP session. This is necessary for using session variables (like the shopping cart).\n* **Security:** Uses `htmlspecialchars()` in the `sanitize_input()` function to prevent XSS vulnerabilities. This is critical for protecting your application from attacks.\n\n**How to Use:**\n\n1. **Save the code:** Save the code as a `.php` file (e.g., `shopping_cart.php`).\n2. **Database Setup:** Create a database named `shopping_cart` (or whatever you choose) and a table to store your products.  Here's a basic SQL schema for the table:\n\n   ```sql\n   CREATE TABLE products (\n       id INT AUTO_INCREMENT PRIMARY KEY,\n       name VARCHAR(255) NOT NULL,\n       price DECIMAL(10, 2) NOT NULL,\n       stock INT NOT NULL\n   );\n\n   INSERT INTO products (name, price, stock) VALUES\n   ('T-Shirt', 20.00, 10),\n   ('Jeans', 50.00, 5),\n   ('Sneakers', 80.00, 3);\n   ```\n\n3. **Update Database Credentials:** Modify the `$db_host`, `$db_name`, `$db_user`, and `$db_password` variables in the PHP code to match your database credentials.\n4. **Run the Script:** Place the file in your web server's document root (e.g., `htdocs` or `www`) and access it through your web browser (e.g., `http://localhost/shopping_cart.php`).\n\n**Important Considerations and Next Steps (Beyond this Basic Example):**\n\n* **Real Database:**  Use a proper database system (MySQL, PostgreSQL, etc.) and a robust database schema.\n* **Product Data:**  The example uses hardcoded product data.  In a real application, you'll fetch product information from the database.\n* **Session Management:**  Be aware of session security best practices (e.g., setting appropriate session expiration times, using secure cookies).\n* **Error Handling:** Implement more comprehensive error handling (e.g., logging errors, displaying user-friendly error messages).\n* **Input Validation:** Add more robust input validation to prevent invalid data from being added to the cart.\n* **User Authentication:**  Add user authentication to allow users to save their carts and manage their accounts.\n* **Payment Integration:**  Integrate with a payment gateway (e.g., PayPal, Stripe) to allow users to pay for their orders.\n* **Order Processing:** Implement logic to process orders, generate invoices, and manage inventory.\n* **Testing:** Thoroughly test the shopping cart functionality to ensure it works correctly and is secure.\n* **Security Best Practices:**  Follow security best practices throughout the development process to protect your application from vulnerabilities.\n\nThis improved example provides a solid foundation for building a basic shopping cart functionality. Remember to expand and enhance it based on your specific requirements and needs.\n", "code_blocks": ["```php\n<?php\nsession_start();\n\n// Database connection details (replace with your actual credentials)\n$db_host = 'localhost';\n$db_name = 'shopping_cart';\n$db_user = 'your_username';\n$db_password = 'your_password';\n\n// --- Database Connection ---\n$conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// --- Helper Functions ---\nfunction sanitize_input($data) {\n    global $conn;\n    $data = trim($data);\n    $data = stripslashes($data);\n    $data = htmlspecialchars($data); // Important for security!\n    return $data;\n}\n\n// --- Product Data (for demonstration - replace with your database query) ---\n$products = array(\n    1 => array('id' => 1, 'name' => 'T-Shirt', 'price' => 20.00, 'stock' => 10),\n    2 => array('id' => 2, 'name' => 'Jeans', 'price' => 50.00, 'stock' => 5),\n    3 => array('id' => 3, 'name' => 'Sneakers', 'price' => 80.00, 'stock' => 3)\n);\n\n// --- Cart Functions ---\n\n// Initialize Cart if it doesn't exist\nif (!isset($_SESSION['cart'])) {\n    $_SESSION['cart'] = array();\n}\n\n// Add to Cart\nfunction addToCart($product_id, $quantity) {\n    global $_SESSION['cart'];\n\n    if (isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n    } else {\n        $_SESSION['cart'][$product_id] = array('quantity' => $quantity);\n    }\n}\n\n// Remove from Cart\nfunction removeFromCart($product_id) {\n    if (isset($_SESSION['cart'][$product_id])) {\n        unset($_SESSION['cart'][$product_id]);\n    }\n}\n\n// Update Quantity in Cart\nfunction updateQuantity($product_id, $quantity) {\n    if (isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id]['quantity'] = $quantity;\n    }\n}\n\n// Get Cart Contents\nfunction getCartContents() {\n    return $_SESSION['cart'];\n}\n\n// --- Cart Actions based on HTTP request ---\n\n// 1. Add to Cart (GET request)\nif (isset($_GET['action']) && $_GET['action'] == 'add') {\n    $product_id = sanitize_input($_GET['product_id']);\n    $quantity = sanitize_input($_GET['quantity']);\n\n    if (is_numeric($product_id) && is_numeric($quantity) && $quantity > 0) {\n        addToCart($product_id, $quantity);\n        echo \"<p>Item added to cart.</p>\";\n    } else {\n        echo \"<p>Invalid product ID or quantity.</p>\";\n    }\n}\n\n// 2. Remove from Cart (GET request)\nif (isset($_GET['action']) && $_GET['action'] == 'remove') {\n    $product_id = sanitize_input($_GET['product_id']);\n    removeFromCart($product_id);\n    echo \"<p>Item removed from cart.</p>\";\n}\n\n// 3. Update Quantity in Cart (GET request)\nif (isset($_GET['action']) && $_GET['action'] == 'update') {\n    $product_id = sanitize_input($_GET['product_id']);\n    $quantity = sanitize_input($_GET['quantity']);\n\n    if (is_numeric($product_id) && is_numeric($quantity) && $quantity > 0) {\n        updateQuantity($product_id, $quantity);\n        echo \"<p>Quantity updated in cart.</p>\";\n    } else {\n        echo \"<p>Invalid product ID or quantity.</p>\";\n    }\n}\n\n\n// --- Display Cart Contents ---\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n    <style>\n        .cart-item {\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Shopping Cart</h1>\n\n<?php\n    $cart_contents = getCartContents();\n\n    if (!empty($cart_contents)) {\n        echo \"<h2>Cart Contents:</h2>\";\n        foreach ($cart_contents as $product_id => $item) {\n            echo \"<div class='cart-item'>\";\n            echo \"Product ID: \" . $product_id . \"<br>\";\n            echo \"Name: \" . $products[$product_id]['name'] . \"<br>\";\n            echo \"Price: $\" . $products[$product_id]['price'] . \"<br>\";\n            echo \"Quantity: \" . $item['quantity'] . \"<br>\";\n            echo \"Subtotal: $\" . ($products[$product_id]['price'] * $item['quantity']) . \"<br>\";\n            echo \"</div>\";\n        }\n\n        echo \"<p><strong>Total:</strong> $\" . round(getTotalCartValue(), 2) . \"</p>\"; // Calculate and display total\n    } else {\n        echo \"<p>Your cart is empty.</p>\";\n    }\n?>\n\n<hr>\n\n<h2>Add to Cart</h2>\n<form method=\"GET\">\n    <label for=\"product_id\">Product ID:</label>\n    <select name=\"product_id\" id=\"product_id\">\n        <?php\n        foreach ($products as $id => $product) {\n            echo \"<option value='\" . $id . \"'>\" . $id . \"</option>\";\n        }\n        ?>\n    </select>\n    <br>\n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" name=\"quantity\" id=\"quantity\" value=\"1\" min=\"1\">\n    <br>\n    <button type=\"submit\" name=\"action\" value=\"add\">Add to Cart</button>\n</form>\n\n<hr>\n\n<h2>Remove from Cart</h2>\n<form method=\"GET\">\n    <label for=\"product_id\">Product ID:</label>\n    <select name=\"product_id\" id=\"product_id\">\n        <?php\n        foreach ($products as $id => $product) {\n            echo \"<option value='\" . $id . \"'>\" . $id . \"</option>\";\n        }\n        ?>\n    </select>\n    <br>\n    <button type=\"submit\" name=\"action\" value=\"remove\">Remove from Cart</button>\n</form>\n\n<hr>\n\n<h2>Update Quantity in Cart</h2>\n<form method=\"GET\">\n    <label for=\"product_id\">Product ID:</label>\n    <select name=\"product_id\" id=\"product_id\">\n        <?php\n        foreach ($products as $id => $product) {\n            echo \"<option value='\" . $id . \"'>\" . $id . \"</option>\";\n        }\n        ?>\n    </select>\n    <br>\n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" name=\"quantity\" id=\"quantity\" value=\"1\" min=\"1\">\n    <br>\n    <button type=\"submit\" name=\"action\" value=\"update\">Update Quantity</button>\n</form>\n\n\n</body>\n</html>\n\n<?php\n\n// Helper Function to calculate total cart value.\nfunction getTotalCartValue() {\n    $total = 0;\n    $cart_contents = getCartContents();\n    foreach ($cart_contents as $product_id => $item) {\n        $total += ($products[$product_id]['price'] * $item['quantity']);\n    }\n    return $total;\n}\n\n?>\n```"]}
