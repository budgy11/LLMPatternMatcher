{"prompt": "Create a purchase cart functionality using php", "llm_output": "Here is an example of how you can create a simple purchase cart functionality using PHP:\n\n**Cart Class**\n```php\nclass Cart {\n    private $items;\n\n    public function __construct() {\n        $this->items = array();\n    }\n\n    public function add_item($product_id, $quantity) {\n        if (array_key_exists($product_id, $this->items)) {\n            $this->items[$product_id]['quantity'] += $quantity;\n        } else {\n            $this->items[$product_id] = array('product' => get_product($product_id), 'quantity' => $quantity);\n        }\n    }\n\n    public function remove_item($product_id) {\n        if (array_key_exists($product_id, $this->items)) {\n            unset($this->items[$product_id]);\n        }\n    }\n\n    public function update_quantity($product_id, $new_quantity) {\n        if (array_key_exists($product_id, $this->items)) {\n            $this->items[$product_id]['quantity'] = $new_quantity;\n        }\n    }\n\n    public function get_total() {\n        $total = 0;\n        foreach ($this->items as $item) {\n            $price = $item['product']['price'];\n            $total += $price * $item['quantity'];\n        }\n        return $total;\n    }\n\n    public function display_cart() {\n        echo '<h2>Cart:</h2>';\n        foreach ($this->items as $item) {\n            echo $item['product']['name'] . ' x' . $item['quantity'] . ': $' . number_format($item['product']['price'] * $item['quantity'], 2) . '<br>';\n        }\n        echo 'Total: $' . number_format($this->get_total(), 2);\n    }\n}\n```\n**Product Function (assuming a database-driven product table)**\n\n```php\nfunction get_product($product_id) {\n    // Connect to database and retrieve product data\n    $db = new mysqli('localhost', 'username', 'password', 'database');\n    if ($result = $db->query(\"SELECT * FROM products WHERE id = '$product_id'\")) {\n        return $result->fetch_assoc();\n    }\n}\n```\n**Example Usage**\n```php\n$cart = new Cart();\n\n// Add items to cart\n$cart->add_item(1, 2);\n$cart->add_item(3, 1);\n\n// Display cart\n$cart->display_cart();\n\n// Update quantity of item in cart\n$cart->update_quantity(1, 3);\n\n// Remove item from cart\n$cart->remove_item(3);\n\n// Display updated cart\n$cart->display_cart();\n```\nThis example demonstrates a simple `Cart` class that uses an array to store items. Each item is represented by an associative array with keys for the product's name, price, and quantity.\n\n**Notes:**\n\n* This implementation assumes a database-driven product table.\n* The `get_product()` function is used to retrieve product data from the database.\n* The cart is stored in memory; you may want to consider persisting it to a session or database if you plan to implement user-specific carts.\n* Error handling and security measures (e.g., input validation, prepared statements) have been omitted for brevity.\n\nThis example provides a basic framework for creating a purchase cart functionality using PHP. You can extend this implementation as needed to accommodate additional features such as tax calculation, payment processing, or shipping integration.", "code_blocks": ["```php\nclass Cart {\n    private $items;\n\n    public function __construct() {\n        $this->items = array();\n    }\n\n    public function add_item($product_id, $quantity) {\n        if (array_key_exists($product_id, $this->items)) {\n            $this->items[$product_id]['quantity'] += $quantity;\n        } else {\n            $this->items[$product_id] = array('product' => get_product($product_id), 'quantity' => $quantity);\n        }\n    }\n\n    public function remove_item($product_id) {\n        if (array_key_exists($product_id, $this->items)) {\n            unset($this->items[$product_id]);\n        }\n    }\n\n    public function update_quantity($product_id, $new_quantity) {\n        if (array_key_exists($product_id, $this->items)) {\n            $this->items[$product_id]['quantity'] = $new_quantity;\n        }\n    }\n\n    public function get_total() {\n        $total = 0;\n        foreach ($this->items as $item) {\n            $price = $item['product']['price'];\n            $total += $price * $item['quantity'];\n        }\n        return $total;\n    }\n\n    public function display_cart() {\n        echo '<h2>Cart:</h2>';\n        foreach ($this->items as $item) {\n            echo $item['product']['name'] . ' x' . $item['quantity'] . ': $' . number_format($item['product']['price'] * $item['quantity'], 2) . '<br>';\n        }\n        echo 'Total: $' . number_format($this->get_total(), 2);\n    }\n}\n```", "```php\nfunction get_product($product_id) {\n    // Connect to database and retrieve product data\n    $db = new mysqli('localhost', 'username', 'password', 'database');\n    if ($result = $db->query(\"SELECT * FROM products WHERE id = '$product_id'\")) {\n        return $result->fetch_assoc();\n    }\n}\n```", "```php\n$cart = new Cart();\n\n// Add items to cart\n$cart->add_item(1, 2);\n$cart->add_item(3, 1);\n\n// Display cart\n$cart->display_cart();\n\n// Update quantity of item in cart\n$cart->update_quantity(1, 3);\n\n// Remove item from cart\n$cart->remove_item(3);\n\n// Display updated cart\n$cart->display_cart();\n```"]}
