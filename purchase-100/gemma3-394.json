{"prompt": "Create a purchase functionality using php", "llm_output": "```php\n<?php\n\n// Data storage (replace with a database in a real application)\n$cart = [];\n\n// Function to add an item to the cart\nfunction addToCart($productId, $quantity, $productName, $productPrice) {\n  global $cart;\n  \n  // Check if the product already exists in the cart\n  if (isset($cart[$productId])) {\n    $cart[$productId]['quantity'] += $quantity;\n  } else {\n    $cart[$productId] = [\n      'quantity' => $quantity,\n      'name' => $productName,\n      'price' => $productPrice\n    ];\n  }\n}\n\n// Function to view the cart\nfunction viewCart() {\n  global $cart;\n\n  if (empty($cart)) {\n    echo \"<p>Your cart is empty.</p>\";\n    return;\n  }\n\n  echo \"<h2>Your Cart</h2>\";\n  echo \"<ul>\";\n  foreach ($cart as $id => $item) {\n    echo \"<li>\";\n    echo \"<strong>Product Name:</strong> \" . $item['name'] . \"<br>\";\n    echo \"<strong>Quantity:</strong> \" . $item['quantity'] . \"<br>\";\n    echo \"<strong>Price:</strong> $\" . $item['price'] . \" per item<br>\";\n    echo \"<strong>Total for item:</strong> $\" . $item['quantity'] * $item['price'] . \"<br>\";\n    echo \"</li>\";\n  }\n  echo \"</ul>\";\n\n  // Calculate total cost\n  $totalCost = 0;\n  foreach ($cart as $id => $item) {\n      $totalCost += $item['quantity'] * $item['price'];\n  }\n  echo \"<p><strong>Total Cost:</strong> $\" . $totalCost . \"</p>\";\n}\n\n// Function to remove an item from the cart\nfunction removeItemFromCart($productId) {\n  global $cart;\n\n  if (isset($cart[$productId])) {\n    unset($cart[$productId]);\n  } else {\n    echo \"<p>Product with ID \" . $productId . \" not found in the cart.</p>\";\n  }\n}\n\n// Function to update the quantity of an item\nfunction updateQuantity($productId, $newQuantity) {\n  global $cart;\n\n  if (isset($cart[$productId])) {\n    if ($newQuantity > 0) {\n      $cart[$productId]['quantity'] = $newQuantity;\n    } else {\n      // Handle invalid quantity (e.g., set quantity to 0 or remove item)\n      removeItemFromCart($productId); // Or $cart[$productId]['quantity'] = 0;\n    }\n  } else {\n    echo \"<p>Product with ID \" . $productId . \" not found in the cart.</p>\";\n  }\n}\n\n\n// --- Example Usage (Simulated product data) ---\n$products = [\n  1 => ['name' => 'T-Shirt', 'price' => 20],\n  2 => ['name' => 'Jeans', 'price' => 50],\n  3 => ['name' => 'Shoes', 'price' => 80],\n];\n\n// --- Simulated Purchase Request ---\n//  Let's simulate a user adding items to the cart\naddToCart(1, 2, $products[1]['name'], $products[1]['price']); // Add 2 T-Shirts\naddToCart(2, 1, $products[2]['name'], $products[2]['price']); // Add 1 Jeans\naddToCart(3, 1, $products[3]['name'], $products[3]['price']); // Add 1 Shoes\n\n// View the cart\nviewCart();\n\n// Simulate removing an item\nremoveItemFromCart(1);\n\n// View the cart again\nviewCart();\n\n// Simulate updating quantity\nupdateQuantity(2, 3); //Change quantity of Jeans to 3\nviewCart();\n\n//--------------------------------------------------------------------\n//  THIS IS A VERY BASIC EXAMPLE.  IN A REAL APPLICATION, YOU WOULD:\n// 1. Use a database to store product information and cart data.\n// 2. Implement input validation to handle user input.\n// 3.  Add error handling.\n// 4.  Secure the application to prevent vulnerabilities.\n// 5.  Consider using a session or cookie to maintain cart state.\n//--------------------------------------------------------------------\n?>\n```\n\nKey improvements and explanations:\n\n* **Clearer Function Definitions:**  The code is organized into functions (`addToCart`, `viewCart`, `removeItemFromCart`, `updateQuantity`) for better readability and maintainability.\n* **Data Storage (Simulated):**  The `$cart` array serves as a placeholder for a database. *Crucially*, the code now initializes it to be empty.  This prevents errors on the first run.\n* **Product Data:** Includes a `$products` array for sample product information, making the example self-contained.\n* **`viewCart()` Function:**\n    * Prints the contents of the cart in a user-friendly format.\n    * Calculates and displays the total cost of the items in the cart.\n* **`removeItemFromCart()` Function:**  Properly removes the item from the cart by `unset()`. Handles the case where the product doesn't exist.\n* **`updateQuantity()` Function:** Updates the quantity of an item in the cart. Includes validation to ensure the new quantity is greater than 0, preventing setting a quantity to zero or attempting to delete an item that doesn't exist.\n* **Comments and Explanation:**  Detailed comments explain the purpose of each section of the code.\n* **Self-Contained Example:**  The example runs without external dependencies, making it easier to understand and test.\n* **Error Handling (Basic):**  The `removeItemFromCart()` and `updateQuantity()` functions provide a basic level of error handling (checking if the product exists).\n* **Important Disclaimer:**  The final comment emphasizes that this is a *basic* example and highlights the necessary steps for a real-world application (database integration, input validation, security, session management, etc.).\n\nHow to run this code:\n\n1.  **Save the code:** Save the code as a `.php` file (e.g., `purchase.php`).\n2.  **Run it through a web server:** You'll need a web server (like Apache or Nginx) with PHP installed.  Place the `purchase.php` file in your web server's document root directory.\n3.  **Access it in your browser:** Open your web browser and navigate to the URL of your PHP file (e.g., `http://localhost/purchase.php`).\n\nThis improved version provides a more robust and understandable foundation for a basic e-commerce purchase functionality.  Remember to adapt and expand upon this code to meet the specific requirements of your application.\n", "code_blocks": ["```php\n<?php\n\n// Data storage (replace with a database in a real application)\n$cart = [];\n\n// Function to add an item to the cart\nfunction addToCart($productId, $quantity, $productName, $productPrice) {\n  global $cart;\n  \n  // Check if the product already exists in the cart\n  if (isset($cart[$productId])) {\n    $cart[$productId]['quantity'] += $quantity;\n  } else {\n    $cart[$productId] = [\n      'quantity' => $quantity,\n      'name' => $productName,\n      'price' => $productPrice\n    ];\n  }\n}\n\n// Function to view the cart\nfunction viewCart() {\n  global $cart;\n\n  if (empty($cart)) {\n    echo \"<p>Your cart is empty.</p>\";\n    return;\n  }\n\n  echo \"<h2>Your Cart</h2>\";\n  echo \"<ul>\";\n  foreach ($cart as $id => $item) {\n    echo \"<li>\";\n    echo \"<strong>Product Name:</strong> \" . $item['name'] . \"<br>\";\n    echo \"<strong>Quantity:</strong> \" . $item['quantity'] . \"<br>\";\n    echo \"<strong>Price:</strong> $\" . $item['price'] . \" per item<br>\";\n    echo \"<strong>Total for item:</strong> $\" . $item['quantity'] * $item['price'] . \"<br>\";\n    echo \"</li>\";\n  }\n  echo \"</ul>\";\n\n  // Calculate total cost\n  $totalCost = 0;\n  foreach ($cart as $id => $item) {\n      $totalCost += $item['quantity'] * $item['price'];\n  }\n  echo \"<p><strong>Total Cost:</strong> $\" . $totalCost . \"</p>\";\n}\n\n// Function to remove an item from the cart\nfunction removeItemFromCart($productId) {\n  global $cart;\n\n  if (isset($cart[$productId])) {\n    unset($cart[$productId]);\n  } else {\n    echo \"<p>Product with ID \" . $productId . \" not found in the cart.</p>\";\n  }\n}\n\n// Function to update the quantity of an item\nfunction updateQuantity($productId, $newQuantity) {\n  global $cart;\n\n  if (isset($cart[$productId])) {\n    if ($newQuantity > 0) {\n      $cart[$productId]['quantity'] = $newQuantity;\n    } else {\n      // Handle invalid quantity (e.g., set quantity to 0 or remove item)\n      removeItemFromCart($productId); // Or $cart[$productId]['quantity'] = 0;\n    }\n  } else {\n    echo \"<p>Product with ID \" . $productId . \" not found in the cart.</p>\";\n  }\n}\n\n\n// --- Example Usage (Simulated product data) ---\n$products = [\n  1 => ['name' => 'T-Shirt', 'price' => 20],\n  2 => ['name' => 'Jeans', 'price' => 50],\n  3 => ['name' => 'Shoes', 'price' => 80],\n];\n\n// --- Simulated Purchase Request ---\n//  Let's simulate a user adding items to the cart\naddToCart(1, 2, $products[1]['name'], $products[1]['price']); // Add 2 T-Shirts\naddToCart(2, 1, $products[2]['name'], $products[2]['price']); // Add 1 Jeans\naddToCart(3, 1, $products[3]['name'], $products[3]['price']); // Add 1 Shoes\n\n// View the cart\nviewCart();\n\n// Simulate removing an item\nremoveItemFromCart(1);\n\n// View the cart again\nviewCart();\n\n// Simulate updating quantity\nupdateQuantity(2, 3); //Change quantity of Jeans to 3\nviewCart();\n\n//--------------------------------------------------------------------\n//  THIS IS A VERY BASIC EXAMPLE.  IN A REAL APPLICATION, YOU WOULD:\n// 1. Use a database to store product information and cart data.\n// 2. Implement input validation to handle user input.\n// 3.  Add error handling.\n// 4.  Secure the application to prevent vulnerabilities.\n// 5.  Consider using a session or cookie to maintain cart state.\n//--------------------------------------------------------------------\n?>\n```"]}
