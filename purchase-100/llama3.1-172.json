{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality using PHP:\n\n**Note:** This is a simplified example and does not include any security measures, such as user authentication or validation.\n\n**Database Schema:**\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE orders (\n  id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  order_date DATE\n);\n\nCREATE TABLE order_items (\n  id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  FOREIGN KEY (order_id) REFERENCES orders(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n**PHP Code:**\n```php\n<?php\n\n// Connect to database\n$dsn = 'mysql:host=localhost;dbname=store';\n$username = 'root';\n$password = '';\n$dbh = new PDO($dsn, $username, $password);\n\n// Function to add product to order\nfunction add_product_to_order($order_id, $product_id, $quantity) {\n  global $dbh;\n  \n  // Check if product exists and has enough stock\n  $stmt = $dbh->prepare('SELECT * FROM products WHERE id = :id');\n  $stmt->execute([':id' => $product_id]);\n  $product = $stmt->fetch();\n  \n  if ($product['stock'] < $quantity) {\n    echo 'Not enough stock!';\n    return false;\n  }\n  \n  // Update product stock\n  $stmt = $dbh->prepare('UPDATE products SET stock = stock - :quantity WHERE id = :id');\n  $stmt->execute([':quantity' => $quantity, ':id' => $product_id]);\n  \n  // Add order item to database\n  $stmt = $dbh->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');\n  $stmt->execute([':order_id' => $order_id, ':product_id' => $product_id, ':quantity' => $quantity]);\n  \n  return true;\n}\n\n// Function to create new order\nfunction create_new_order($customer_name) {\n  global $dbh;\n  \n  // Get current date and time\n  $date = date('Y-m-d');\n  \n  // Insert new order into database\n  $stmt = $dbh->prepare('INSERT INTO orders (customer_name, order_date) VALUES (:customer_name, :order_date)');\n  $stmt->execute([':customer_name' => $customer_name, ':order_date' => $date]);\n  \n  return $dbh->lastInsertId();\n}\n\n// Function to display products and add to cart\nfunction display_products_and_add_to_cart() {\n  global $dbh;\n  \n  // Get all products from database\n  $stmt = $dbh->query('SELECT * FROM products');\n  $products = $stmt->fetchAll();\n  \n  // Display products\n  echo '<h1>Products</h1>';\n  foreach ($products as $product) {\n    echo '<p>' . $product['name'] . ' - ' . $product['price'] . '</p>';\n    \n    // Add button to add product to cart\n    echo '<button onclick=\"add_to_cart(' . $product['id'] . ')\">Add to Cart</button>';\n  }\n  \n  echo '<script>function add_to_cart(product_id) { window.location.href = \"?product_id=' . $product_id . '\"; }</script>';\n}\n\n// Function to display cart and checkout\nfunction display_cart_and_checkout() {\n  global $dbh;\n  \n  // Get all order items for current user\n  $stmt = $dbh->query('SELECT * FROM order_items');\n  $order_items = $stmt->fetchAll();\n  \n  // Display cart\n  echo '<h1>Cart</h1>';\n  foreach ($order_items as $item) {\n    echo '<p>' . $item['product_name'] . ' - Quantity: ' . $item['quantity'] . '</p>';\n    \n    // Add button to remove item from cart\n    echo '<button onclick=\"remove_from_cart(' . $item['id'] . ')\">Remove</button>';\n  }\n  \n  echo '<script>function remove_from_cart(order_item_id) { window.location.href = \"?order_item_id=' . $order_item_id . '\"; }</script>';\n  \n  // Add checkout button\n  echo '<button onclick=\"checkout()\">Checkout</button>';\n}\n\n// Function to process payment and confirm order\nfunction process_payment_and_confirm_order() {\n  global $dbh;\n  \n  // Get all order items for current user\n  $stmt = $dbh->query('SELECT * FROM order_items');\n  $order_items = $stmt->fetchAll();\n  \n  // Process payment (e.g. Stripe API)\n  // ...\n  \n  // Confirm order and update database\n  foreach ($order_items as $item) {\n    $stmt = $dbh->prepare('UPDATE products SET stock = stock - :quantity WHERE id = :id');\n    $stmt->execute([':quantity' => $item['quantity'], ':id' => $item['product_id']]);\n    \n    $stmt = $dbh->prepare('INSERT INTO orders (customer_name, order_date) VALUES (:customer_name, :order_date)');\n    $stmt->execute([':customer_name' => 'John Doe', ':order_date' => date('Y-m-d')]);\n  }\n  \n  echo 'Order confirmed!';\n}\n\n// Main script\nif (!isset($_GET['product_id'])) {\n  display_products_and_add_to_cart();\n} elseif (isset($_GET['product_id']) && $_GET['action'] == 'add') {\n  add_product_to_order(1, $_GET['product_id'], 1);\n} elseif (isset($_GET['order_item_id']) && $_GET['action'] == 'remove') {\n  $stmt = $dbh->prepare('DELETE FROM order_items WHERE id = :id');\n  $stmt->execute([':id' => $_GET['order_item_id']]);\n} elseif (isset($_POST['customer_name'])) {\n  create_new_order($_POST['customer_name']);\n  header('Location: ?action=checkout');\n  exit;\n}\n\n?>\n```\nThis script includes the following functionality:\n\n* `add_product_to_order()`: adds a product to an existing order\n* `create_new_order()`: creates a new order for a customer\n* `display_products_and_add_to_cart()`: displays products and allows user to add them to cart\n* `display_cart_and_checkout()`: displays cart contents and checkout button\n* `process_payment_and_confirm_order()`: processes payment and confirms order\n\nNote that this is a simplified example and does not include any security measures, such as user authentication or validation. In a real-world application, you would need to add these features to ensure the integrity of your data.\n\nAlso, this script assumes that you have a database set up with the schema defined above. You will need to replace the placeholders (`$dsn`, `$username`, `$password`) with your actual database credentials.\n\nI hope this helps! Let me know if you have any questions or need further clarification.", "code_blocks": [null, "```php\n<?php\n\n// Connect to database\n$dsn = 'mysql:host=localhost;dbname=store';\n$username = 'root';\n$password = '';\n$dbh = new PDO($dsn, $username, $password);\n\n// Function to add product to order\nfunction add_product_to_order($order_id, $product_id, $quantity) {\n  global $dbh;\n  \n  // Check if product exists and has enough stock\n  $stmt = $dbh->prepare('SELECT * FROM products WHERE id = :id');\n  $stmt->execute([':id' => $product_id]);\n  $product = $stmt->fetch();\n  \n  if ($product['stock'] < $quantity) {\n    echo 'Not enough stock!';\n    return false;\n  }\n  \n  // Update product stock\n  $stmt = $dbh->prepare('UPDATE products SET stock = stock - :quantity WHERE id = :id');\n  $stmt->execute([':quantity' => $quantity, ':id' => $product_id]);\n  \n  // Add order item to database\n  $stmt = $dbh->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');\n  $stmt->execute([':order_id' => $order_id, ':product_id' => $product_id, ':quantity' => $quantity]);\n  \n  return true;\n}\n\n// Function to create new order\nfunction create_new_order($customer_name) {\n  global $dbh;\n  \n  // Get current date and time\n  $date = date('Y-m-d');\n  \n  // Insert new order into database\n  $stmt = $dbh->prepare('INSERT INTO orders (customer_name, order_date) VALUES (:customer_name, :order_date)');\n  $stmt->execute([':customer_name' => $customer_name, ':order_date' => $date]);\n  \n  return $dbh->lastInsertId();\n}\n\n// Function to display products and add to cart\nfunction display_products_and_add_to_cart() {\n  global $dbh;\n  \n  // Get all products from database\n  $stmt = $dbh->query('SELECT * FROM products');\n  $products = $stmt->fetchAll();\n  \n  // Display products\n  echo '<h1>Products</h1>';\n  foreach ($products as $product) {\n    echo '<p>' . $product['name'] . ' - ' . $product['price'] . '</p>';\n    \n    // Add button to add product to cart\n    echo '<button onclick=\"add_to_cart(' . $product['id'] . ')\">Add to Cart</button>';\n  }\n  \n  echo '<script>function add_to_cart(product_id) { window.location.href = \"?product_id=' . $product_id . '\"; }</script>';\n}\n\n// Function to display cart and checkout\nfunction display_cart_and_checkout() {\n  global $dbh;\n  \n  // Get all order items for current user\n  $stmt = $dbh->query('SELECT * FROM order_items');\n  $order_items = $stmt->fetchAll();\n  \n  // Display cart\n  echo '<h1>Cart</h1>';\n  foreach ($order_items as $item) {\n    echo '<p>' . $item['product_name'] . ' - Quantity: ' . $item['quantity'] . '</p>';\n    \n    // Add button to remove item from cart\n    echo '<button onclick=\"remove_from_cart(' . $item['id'] . ')\">Remove</button>';\n  }\n  \n  echo '<script>function remove_from_cart(order_item_id) { window.location.href = \"?order_item_id=' . $order_item_id . '\"; }</script>';\n  \n  // Add checkout button\n  echo '<button onclick=\"checkout()\">Checkout</button>';\n}\n\n// Function to process payment and confirm order\nfunction process_payment_and_confirm_order() {\n  global $dbh;\n  \n  // Get all order items for current user\n  $stmt = $dbh->query('SELECT * FROM order_items');\n  $order_items = $stmt->fetchAll();\n  \n  // Process payment (e.g. Stripe API)\n  // ...\n  \n  // Confirm order and update database\n  foreach ($order_items as $item) {\n    $stmt = $dbh->prepare('UPDATE products SET stock = stock - :quantity WHERE id = :id');\n    $stmt->execute([':quantity' => $item['quantity'], ':id' => $item['product_id']]);\n    \n    $stmt = $dbh->prepare('INSERT INTO orders (customer_name, order_date) VALUES (:customer_name, :order_date)');\n    $stmt->execute([':customer_name' => 'John Doe', ':order_date' => date('Y-m-d')]);\n  }\n  \n  echo 'Order confirmed!';\n}\n\n// Main script\nif (!isset($_GET['product_id'])) {\n  display_products_and_add_to_cart();\n} elseif (isset($_GET['product_id']) && $_GET['action'] == 'add') {\n  add_product_to_order(1, $_GET['product_id'], 1);\n} elseif (isset($_GET['order_item_id']) && $_GET['action'] == 'remove') {\n  $stmt = $dbh->prepare('DELETE FROM order_items WHERE id = :id');\n  $stmt->execute([':id' => $_GET['order_item_id']]);\n} elseif (isset($_POST['customer_name'])) {\n  create_new_order($_POST['customer_name']);\n  header('Location: ?action=checkout');\n  exit;\n}\n\n?>\n```"]}
