{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nAlright, the user wants to create a purchase functionality using PHP. I need to outline a clear and comprehensive approach for them.\n\nFirst, I should consider the main components involved in a purchase process. Typically, this includes handling products, managing user shopping carts, processing orders, and generating invoices or receipts. So, I'll break down each of these steps.\n\nStarting with product management, it's essential to have functions to add, view, edit, and delete products. This ensures that the store can dynamically update its inventory. I'll include example functions for adding a product and viewing all products, which will interact with a database.\n\nNext, handling the shopping cart is crucial. Users need to be able to add items to their cart, view what's there, and remove items if needed. Since each user should have their own cart, using sessions makes sense here because they're tied to individual users. I'll provide functions for adding to the cart, viewing it, and deleting items from it.\n\nThen, processing the order is a key step. When a user checks out, we need to capture their details and payment information. This function should finalize the purchase, possibly reduce product stock, and handle any other post-purchase tasks like sending confirmation emails or generating invoices. I'll outline an example function that takes order data and processes it.\n\nGenerating an invoice is also important for both the user and the business. It provides a record of the transaction. I'll include a sample function that creates an invoice with all necessary details, which can be sent to the user via email or made available for download.\n\nThroughout this process, security is paramount. I should mention best practices like using prepared statements to prevent SQL injection, sanitizing inputs, and ensuring secure handling of payment information, possibly through integration with a payment gateway.\n\nAdditionally, error handling and logging are important for maintaining reliability and debugging issues. Including try-catch blocks or logging errors can help in keeping track of any problems that occur during the purchase process.\n\nI should also note about setting up a database connection early on, as all these functions will rely on it. Providing a simple example of connecting to MySQL using mysqli is a good starting point.\n\nFinally, I'll offer further enhancements like integrating payment gateways for real transactions, adding user authentication for personalized experiences, implementing email notifications, and optimizing the code with classes or frameworks for better maintainability.\n\nOverall, the goal is to provide a structured yet flexible guide that covers all essential aspects of building a purchase functionality in PHP, ensuring it's both functional and secure.\n</think>\n\nHere's an example of how you can create a purchase functionality using PHP. This will include handling product selection, adding items to cart, checking out, and processing payments.\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'store';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Product management functions\nfunction addProduct($name, $price, $description, $stock) {\n    global $conn;\n    $sql = \"INSERT INTO products (name, price, description, stock) VALUES (?, ?, ?, ?)\";\n    $stmt = $conn->prepare($sql);\n    return $stmt->execute([$name, $price, $description, $stock]);\n}\n\nfunction viewProducts() {\n    global $conn;\n    $sql = \"SELECT * FROM products\";\n    $stmt = $conn->query($sql);\n    return $stmt->fetchAll();\n}\n\n// Shopping cart functions\nsession_start();\n\nfunction addToCart($product_id, $quantity) {\n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n    \n    if (isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id] += $quantity;\n    } else {\n        $_SESSION['cart'][$product_id] = $quantity;\n    }\n}\n\nfunction viewCart() {\n    return isset($_SESSION['cart']) ? $_SESSION['cart'] : array();\n}\n\nfunction deleteFromCart($product_id) {\n    if (isset($_SESSION['cart'][$product_id])) {\n        unset($_SESSION['cart'][$product_id]);\n    }\n}\n\n// Order processing function\nfunction processOrder($order_data) {\n    global $conn;\n    \n    // Insert order into orders table\n    $sql = \"INSERT INTO orders (user_id, total_amount, payment_method, order_date) \n            VALUES (?, ?, ?, NOW())\";\n    $stmt = $conn->prepare($sql);\n    $stmt->execute([$order_data['user_id'], $order_data['total_amount'], $order_data['payment_method']]);\n    \n    // Get last inserted order ID\n    $order_id = $conn->lastInsertId();\n    \n    // Insert order items into order_items table\n    foreach ($order_data['items'] as $item) {\n        $sql = \"INSERT INTO order_items (order_id, product_id, quantity, price)\n                VALUES (?, ?, ?, ?)\";\n        $stmt = $conn->prepare($sql);\n        $stmt->execute([$order_id, $item['product_id'], $item['quantity'], $item['price']]);\n    }\n    \n    // Update product stock\n    foreach ($order_data['items'] as $item) {\n        $sql = \"UPDATE products SET stock = stock - ? WHERE id = ?\";\n        $stmt = $conn->prepare($sql);\n        $stmt->execute([$item['quantity'], $item['product_id']]);\n    }\n    \n    return $order_id;\n}\n\n// Invoice generation function\nfunction generateInvoice($order_id) {\n    global $conn;\n    \n    // Get order details\n    $sql = \"SELECT * FROM orders WHERE id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->execute([$order_id]);\n    $order = $stmt->fetch();\n    \n    // Get order items\n    $sql = \"SELECT * FROM order_items WHERE order_id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->execute([$order_id]);\n    $items = $stmt->fetchAll();\n    \n    // Generate invoice HTML\n    $invoice_html = \"<html>\n                        <head>\n                            <title>Invoice</title>\n                        </head>\n                        <body>\n                            <h1>Invoice #{$order['id']}</h1>\n                            <p>Date: {$order['order_date']}</p>\n                            <p>Total Amount: $\" . number_format($order['total_amount'], 2) . \"</p>\n                            <table border='1'>\n                                <tr><th>Product</th><th>Quantity</th><th>Price</th></tr>\";\n    \n    foreach ($items as $item) {\n        $invoice_html .= \"<tr>\n                            <td>\" . getProductDetails($item['product_id'])['name'] . \"</td>\n                            <td>{$item['quantity']}</td>\n                            <td>$\" . number_format($item['price'], 2) . \"</td>\n                         </tr>\";\n    }\n    \n    $invoice_html .= \"</table>\n                        </body>\n                    </html>\";\n    \n    return $invoice_html;\n}\n\n// Helper function to get product details\nfunction getProductDetails($product_id) {\n    global $conn;\n    \n    $sql = \"SELECT * FROM products WHERE id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->execute([$product_id]);\n    return $stmt->fetch();\n}\n?>\n```\n\nThis code provides the following functionalities:\n\n1. **Product Management:**\n   - Add new products to the store\n   - View all available products\n\n2. **Shopping Cart Operations:**\n   - Add items to cart\n   - View current cart contents\n   - Remove items from cart\n\n3. **Order Processing:**\n   - Insert order into database\n   - Record order items\n   - Update product stock levels\n\n4. **Invoice Generation:**\n   - Generate HTML formatted invoice\n   - Display order details and items\n\nTo use this code:\n\n1. Set up your database connection with appropriate credentials.\n\n2. Use the `addProduct()` function to add new products:\n```php\naddProduct('Laptop', 999.99, 'High performance laptop', 50);\n```\n\n3. Allow users to view products and add them to their cart:\n```php\n$products = viewProducts();\nforeach ($products as $product) {\n    echo \"<div>\";\n    echo \"<h2>{$product['name']}</h2>\";\n    echo \"<p>Price: $\" . number_format($product['price'], 2) . \"</p>\";\n    echo \"<button onclick=\\\"addToCart({$product['id']}, 1)\\\">Add to Cart</button>\";\n    echo \"</div>\";\n}\n```\n\n4. Implement a checkout page where users can review their cart and enter payment details:\n```php\nfunction checkout() {\n    $cart = viewCart();\n    if (empty($cart)) {\n        echo \"Your cart is empty.\";\n        return;\n    }\n    \n    // Display cart contents and order form here\n}\n```\n\n5. After receiving payment information, use `processOrder()` to complete the purchase:\n```php\n$order_data = array(\n    'user_id' => 1,\n    'total_amount' => calculateTotal(),\n    'payment_method' => 'credit_card',\n    'items' => getCartItems()\n);\n\n$order_id = processOrder($order_data);\n```\n\n6. Finally, generate and display an invoice:\n```php\n$invoice_html = generateInvoice($order_id);\necho $invoice_html;\n```\n\n**Important Considerations:**\n\n1. **Security:**\n   - Always sanitize user inputs\n   - Use prepared statements to prevent SQL injection\n   - Securely handle payment information\n\n2. **Error Handling:**\n   - Add try-catch blocks around critical operations\n   - Log errors for debugging purposes\n\n3. **Payment Integration:**\n   - For real transactions, integrate with a payment gateway (e.g., PayPal, Stripe)\n   - Never store sensitive payment information in your database\n\n4. **Session Management:**\n   - Securely manage sessions to prevent session hijacking\n   - Set appropriate session expiration times\n\n**Further Enhancements:**\n\n1. Add user authentication system\n2. Implement email notifications for orders and invoices\n3. Add product categories and filtering options\n4. Include search functionality\n5. Implement a wishlist feature\n6. Add order tracking and history\n7. Include reviews and ratings system\n8. Optimize database queries\n9. Add error logging\n10. Use an MVC framework (e.g., Laravel) for better code organization\n\nRemember to customize this code according to your specific needs and security requirements.", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'store';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Product management functions\nfunction addProduct($name, $price, $description, $stock) {\n    global $conn;\n    $sql = \"INSERT INTO products (name, price, description, stock) VALUES (?, ?, ?, ?)\";\n    $stmt = $conn->prepare($sql);\n    return $stmt->execute([$name, $price, $description, $stock]);\n}\n\nfunction viewProducts() {\n    global $conn;\n    $sql = \"SELECT * FROM products\";\n    $stmt = $conn->query($sql);\n    return $stmt->fetchAll();\n}\n\n// Shopping cart functions\nsession_start();\n\nfunction addToCart($product_id, $quantity) {\n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n    \n    if (isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id] += $quantity;\n    } else {\n        $_SESSION['cart'][$product_id] = $quantity;\n    }\n}\n\nfunction viewCart() {\n    return isset($_SESSION['cart']) ? $_SESSION['cart'] : array();\n}\n\nfunction deleteFromCart($product_id) {\n    if (isset($_SESSION['cart'][$product_id])) {\n        unset($_SESSION['cart'][$product_id]);\n    }\n}\n\n// Order processing function\nfunction processOrder($order_data) {\n    global $conn;\n    \n    // Insert order into orders table\n    $sql = \"INSERT INTO orders (user_id, total_amount, payment_method, order_date) \n            VALUES (?, ?, ?, NOW())\";\n    $stmt = $conn->prepare($sql);\n    $stmt->execute([$order_data['user_id'], $order_data['total_amount'], $order_data['payment_method']]);\n    \n    // Get last inserted order ID\n    $order_id = $conn->lastInsertId();\n    \n    // Insert order items into order_items table\n    foreach ($order_data['items'] as $item) {\n        $sql = \"INSERT INTO order_items (order_id, product_id, quantity, price)\n                VALUES (?, ?, ?, ?)\";\n        $stmt = $conn->prepare($sql);\n        $stmt->execute([$order_id, $item['product_id'], $item['quantity'], $item['price']]);\n    }\n    \n    // Update product stock\n    foreach ($order_data['items'] as $item) {\n        $sql = \"UPDATE products SET stock = stock - ? WHERE id = ?\";\n        $stmt = $conn->prepare($sql);\n        $stmt->execute([$item['quantity'], $item['product_id']]);\n    }\n    \n    return $order_id;\n}\n\n// Invoice generation function\nfunction generateInvoice($order_id) {\n    global $conn;\n    \n    // Get order details\n    $sql = \"SELECT * FROM orders WHERE id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->execute([$order_id]);\n    $order = $stmt->fetch();\n    \n    // Get order items\n    $sql = \"SELECT * FROM order_items WHERE order_id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->execute([$order_id]);\n    $items = $stmt->fetchAll();\n    \n    // Generate invoice HTML\n    $invoice_html = \"<html>\n                        <head>\n                            <title>Invoice</title>\n                        </head>\n                        <body>\n                            <h1>Invoice #{$order['id']}</h1>\n                            <p>Date: {$order['order_date']}</p>\n                            <p>Total Amount: $\" . number_format($order['total_amount'], 2) . \"</p>\n                            <table border='1'>\n                                <tr><th>Product</th><th>Quantity</th><th>Price</th></tr>\";\n    \n    foreach ($items as $item) {\n        $invoice_html .= \"<tr>\n                            <td>\" . getProductDetails($item['product_id'])['name'] . \"</td>\n                            <td>{$item['quantity']}</td>\n                            <td>$\" . number_format($item['price'], 2) . \"</td>\n                         </tr>\";\n    }\n    \n    $invoice_html .= \"</table>\n                        </body>\n                    </html>\";\n    \n    return $invoice_html;\n}\n\n// Helper function to get product details\nfunction getProductDetails($product_id) {\n    global $conn;\n    \n    $sql = \"SELECT * FROM products WHERE id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->execute([$product_id]);\n    return $stmt->fetch();\n}\n?>\n```", "```php\naddProduct('Laptop', 999.99, 'High performance laptop', 50);\n```", "```php\n$products = viewProducts();\nforeach ($products as $product) {\n    echo \"<div>\";\n    echo \"<h2>{$product['name']}</h2>\";\n    echo \"<p>Price: $\" . number_format($product['price'], 2) . \"</p>\";\n    echo \"<button onclick=\\\"addToCart({$product['id']}, 1)\\\">Add to Cart</button>\";\n    echo \"</div>\";\n}\n```", "```php\nfunction checkout() {\n    $cart = viewCart();\n    if (empty($cart)) {\n        echo \"Your cart is empty.\";\n        return;\n    }\n    \n    // Display cart contents and order form here\n}\n```", "```php\n$order_data = array(\n    'user_id' => 1,\n    'total_amount' => calculateTotal(),\n    'payment_method' => 'credit_card',\n    'items' => getCartItems()\n);\n\n$order_id = processOrder($order_data);\n```", "```php\n$invoice_html = generateInvoice($order_id);\necho $invoice_html;\n```"]}
