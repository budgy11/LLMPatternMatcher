{"prompt": "Create a purchase functionality using php", "llm_output": "```php\n<?php\n\n// Database Connection (Replace with your database details)\n$servername = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$dbname = \"your_database_name\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Initialize session variables\nsession_start();\n\n// --- Functions ---\n\n/**\n * Adds a product to the cart.\n *\n * @param int $product_id The ID of the product to add.\n * @return void\n */\nfunction addToCart($product_id) {\n  // Check if the cart exists in the session\n  if (!isset($_SESSION['cart'])) {\n    $_SESSION['cart'] = [];\n  }\n\n  // Check if the product is already in the cart\n  if (isset($_SESSION['cart'][$product_id])) {\n    // If it exists, increment the quantity\n    $_SESSION['cart'][$product_id]['quantity']++;\n  } else {\n    // If it doesn't exist, add it to the cart with quantity 1\n    $_SESSION['cart'][$product_id] = ['quantity' => 1];\n  }\n}\n\n/**\n * Retrieves the cart contents.\n *\n * @return array  An array representing the cart contents.\n */\nfunction getCart() {\n  return $_SESSION['cart'] ?? []; // Use null coalesce operator for safety\n}\n\n/**\n * Updates the quantity of a product in the cart.\n *\n * @param int $product_id The ID of the product to update.\n * @param int $quantity The new quantity.\n * @return void\n */\nfunction updateCartQuantity($product_id, $quantity) {\n  if (isset($_SESSION['cart'][$product_id])) {\n    $_SESSION['cart'][$product_id]['quantity'] = $quantity;\n  }\n}\n\n/**\n * Removes a product from the cart.\n *\n * @param int $product_id The ID of the product to remove.\n * @return void\n */\nfunction removeCartItem($product_id) {\n  if (isset($_SESSION['cart'][$product_id])) {\n    unset($_SESSION['cart'][$product_id]);\n  }\n}\n\n\n/**\n * Calculates the total cart value.\n *\n * @return float The total value.\n */\nfunction calculateCartTotal() {\n  $total = 0;\n  $cart = getCart();\n  foreach ($cart as $product_id => $item) {\n    $product_id = (int)$product_id;  // Ensure product_id is an integer\n\n    // Fetch product price from a database (replace with your actual query)\n    $product_price = $this->getProductPrice($product_id); // Assuming a getProductPrice() function\n    $total += $product_price * $item['quantity'];\n  }\n  return round($total, 2); // Round to 2 decimal places for currency\n}\n\n\n/**\n * A helper function to fetch product price from the database.\n * This is a placeholder.  Replace with your actual database query.\n *\n * @param int $product_id\n * @return float\n */\nfunction getProductPrice($product_id) {\n    // Replace this with your actual database query to fetch the price\n    // Example:\n    // $query = \"SELECT price FROM products WHERE id = ?\";\n    // $stmt = $conn->prepare($query);\n    // $stmt->bind_param(\"i\", $product_id);\n    // $stmt->execute();\n    // $result = $stmt->get_result();\n    // $row = $result->fetch_assoc();\n    // return $row['price'];\n\n    // Placeholder - returns a hardcoded price for demonstration purposes\n    return 50.00; //  Example product price\n}\n\n\n\n// --- Purchase Functionality ---\n\n// Example: Handle adding to cart\nif (isset($_POST['add_to_cart'])) {\n  $product_id = (int)$_POST['product_id']; // Ensure product_id is an integer\n  addToCart($product_id);\n  $message = \"Product added to cart.\";\n}\n\n// Example: Handle updating cart quantity\nif (isset($_POST['update_quantity'])) {\n    $product_id = (int)$_POST['product_id'];\n    $quantity = (int)$_POST['quantity'];\n    updateCartQuantity($product_id, $quantity);\n    $message = \"Cart updated.\";\n}\n\n// Example: Handle removing from cart\nif (isset($_POST['remove_from_cart'])) {\n  $product_id = (int)$_POST['product_id'];\n  removeCartItem($product_id);\n  $message = \"Product removed from cart.\";\n}\n\n\n\n// --- Display Cart (Example - can be improved with HTML/CSS) ---\n\n$cart = getCart();\n$total = calculateCartTotal();\n\necho \"<h2>Your Cart</h2>\";\nif (empty($cart)) {\n  echo \"<p>Your cart is empty.</p>\";\n} else {\n  echo \"<ul>\";\n  foreach ($cart as $product_id => $item) {\n    echo \"<li>Product ID: \" . $product_id . \", Quantity: \" . $item['quantity'] . \"</li>\";\n  }\n  echo \"</ul>\";\n  echo \"<p>Total: $\" . $total . \"</p>\";\n}\n\n?>\n```\n\nKey improvements and explanations:\n\n* **Database Connection:**  Includes a placeholder for database connection.  **Crucially, replace the placeholder with your actual database credentials and SQL queries.**\n* **Session Management:** Uses `session_start()` to maintain cart data across multiple pages.  *Always* use sessions for shopping carts to remember user choices.\n* **`addToCart()` Function:** Adds a product to the cart.  Handles the case where the product isn't yet in the cart.  Also ensures `product_id` is an integer.\n* **`getCart()` Function:**  Retrieves the cart contents from the session.  Uses the null coalesce operator (`??`) for a safer default return value (empty array) if the session cart hasn't been initialized.\n* **`updateCartQuantity()` Function:** Updates the quantity of an item in the cart.\n* **`removeCartItem()` Function:** Removes an item from the cart.\n* **`calculateCartTotal()` Function:** Calculates the total cart value.  *Important:*  This function now includes a placeholder for fetching the `product_price` from the database.  **You MUST replace this with your actual database query.**  The function rounds the total to 2 decimal places for currency.\n* **`getProductPrice()` Function (Placeholder):** A crucial placeholder function.  **You must implement this function to fetch the price of a product from your database based on the `product_id`**.  This is where you'll connect to your database and run a query like: `SELECT price FROM products WHERE id = ?` and return the price.\n* **Input Validation:** Added type casting to `product_id` to ensure it's an integer. This prevents errors and security issues.\n* **Clearer Error Handling (Minimal):**  The database connection check (`if ($conn->connect_error)`) provides a basic level of error handling.  In a production environment, you'd want more robust error handling and logging.\n* **Currency Formatting:**  The `calculateCartTotal` function now includes rounding to two decimal places, suitable for currency.\n* **Example Usage:** The code demonstrates how to add to the cart, update quantity, and remove items.\n* **Cart Display:** Provides a basic HTML output to display the contents of the cart and the total price.\n\n**To use this code:**\n\n1. **Database Setup:**\n   * Create a database.\n   * Create a `products` table (or use your existing product table) with at least the following columns:\n     * `id` (INT, Primary Key)\n     * `name` (VARCHAR)\n     * `price` (DECIMAL or FLOAT)\n   * Insert some product data into the `products` table.\n\n2. **Replace Placeholders:**\n   * **Crucially**, replace the database connection details (`$servername`, `$username`, `$password`, `$dbname`) with your actual database credentials.\n   * **Implement the `getProductPrice()` function.** This is the most important part.  Write the SQL query to fetch the product's price from your database based on the `product_id`.\n   * Replace the hardcoded product price in `getProductPrice()` with the result of your database query.\n\n3. **HTML (for Display):**  Create the HTML form elements (e.g., `<form>` with `input` fields) to allow users to add items to the cart, update quantities, and remove items.  Associate the form submission with the PHP code (the `$_POST` handling).\n\n4. **CSS (for Styling):** Add CSS to style the cart display to make it visually appealing.\n\n**Security Considerations:**\n\n* **Input Validation:** The provided code includes some basic input validation (casting `product_id` to an integer). However, you should add more robust validation to prevent malicious input.\n* **SQL Injection:**  **Never** directly insert user-provided input into your SQL queries.  Always use prepared statements with bound parameters to prevent SQL injection attacks.  The prepared statements automatically handle escaping and quoting of data.\n* **CSRF Protection:** Implement CSRF (Cross-Site Request Forgery) protection to prevent malicious websites from submitting forms on behalf of your user.\n* **HTTPS:** Always use HTTPS to encrypt communication between the user's browser and your server.\n\nThis comprehensive example provides a solid foundation for building a shopping cart functionality in PHP.  Remember to adapt it to your specific needs and prioritize security. Remember to handle errors and edge cases gracefully.  Testing thoroughly is essential.\n", "code_blocks": ["```php\n<?php\n\n// Database Connection (Replace with your database details)\n$servername = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$dbname = \"your_database_name\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Initialize session variables\nsession_start();\n\n// --- Functions ---\n\n/**\n * Adds a product to the cart.\n *\n * @param int $product_id The ID of the product to add.\n * @return void\n */\nfunction addToCart($product_id) {\n  // Check if the cart exists in the session\n  if (!isset($_SESSION['cart'])) {\n    $_SESSION['cart'] = [];\n  }\n\n  // Check if the product is already in the cart\n  if (isset($_SESSION['cart'][$product_id])) {\n    // If it exists, increment the quantity\n    $_SESSION['cart'][$product_id]['quantity']++;\n  } else {\n    // If it doesn't exist, add it to the cart with quantity 1\n    $_SESSION['cart'][$product_id] = ['quantity' => 1];\n  }\n}\n\n/**\n * Retrieves the cart contents.\n *\n * @return array  An array representing the cart contents.\n */\nfunction getCart() {\n  return $_SESSION['cart'] ?? []; // Use null coalesce operator for safety\n}\n\n/**\n * Updates the quantity of a product in the cart.\n *\n * @param int $product_id The ID of the product to update.\n * @param int $quantity The new quantity.\n * @return void\n */\nfunction updateCartQuantity($product_id, $quantity) {\n  if (isset($_SESSION['cart'][$product_id])) {\n    $_SESSION['cart'][$product_id]['quantity'] = $quantity;\n  }\n}\n\n/**\n * Removes a product from the cart.\n *\n * @param int $product_id The ID of the product to remove.\n * @return void\n */\nfunction removeCartItem($product_id) {\n  if (isset($_SESSION['cart'][$product_id])) {\n    unset($_SESSION['cart'][$product_id]);\n  }\n}\n\n\n/**\n * Calculates the total cart value.\n *\n * @return float The total value.\n */\nfunction calculateCartTotal() {\n  $total = 0;\n  $cart = getCart();\n  foreach ($cart as $product_id => $item) {\n    $product_id = (int)$product_id;  // Ensure product_id is an integer\n\n    // Fetch product price from a database (replace with your actual query)\n    $product_price = $this->getProductPrice($product_id); // Assuming a getProductPrice() function\n    $total += $product_price * $item['quantity'];\n  }\n  return round($total, 2); // Round to 2 decimal places for currency\n}\n\n\n/**\n * A helper function to fetch product price from the database.\n * This is a placeholder.  Replace with your actual database query.\n *\n * @param int $product_id\n * @return float\n */\nfunction getProductPrice($product_id) {\n    // Replace this with your actual database query to fetch the price\n    // Example:\n    // $query = \"SELECT price FROM products WHERE id = ?\";\n    // $stmt = $conn->prepare($query);\n    // $stmt->bind_param(\"i\", $product_id);\n    // $stmt->execute();\n    // $result = $stmt->get_result();\n    // $row = $result->fetch_assoc();\n    // return $row['price'];\n\n    // Placeholder - returns a hardcoded price for demonstration purposes\n    return 50.00; //  Example product price\n}\n\n\n\n// --- Purchase Functionality ---\n\n// Example: Handle adding to cart\nif (isset($_POST['add_to_cart'])) {\n  $product_id = (int)$_POST['product_id']; // Ensure product_id is an integer\n  addToCart($product_id);\n  $message = \"Product added to cart.\";\n}\n\n// Example: Handle updating cart quantity\nif (isset($_POST['update_quantity'])) {\n    $product_id = (int)$_POST['product_id'];\n    $quantity = (int)$_POST['quantity'];\n    updateCartQuantity($product_id, $quantity);\n    $message = \"Cart updated.\";\n}\n\n// Example: Handle removing from cart\nif (isset($_POST['remove_from_cart'])) {\n  $product_id = (int)$_POST['product_id'];\n  removeCartItem($product_id);\n  $message = \"Product removed from cart.\";\n}\n\n\n\n// --- Display Cart (Example - can be improved with HTML/CSS) ---\n\n$cart = getCart();\n$total = calculateCartTotal();\n\necho \"<h2>Your Cart</h2>\";\nif (empty($cart)) {\n  echo \"<p>Your cart is empty.</p>\";\n} else {\n  echo \"<ul>\";\n  foreach ($cart as $product_id => $item) {\n    echo \"<li>Product ID: \" . $product_id . \", Quantity: \" . $item['quantity'] . \"</li>\";\n  }\n  echo \"</ul>\";\n  echo \"<p>Total: $\" . $total . \"</p>\";\n}\n\n?>\n```"]}
