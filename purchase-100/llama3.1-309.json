{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality in PHP, which includes the following features:\n\n* User authentication\n* Product selection and display\n* Cart management (add, remove, view products)\n* Payment processing (using Stripe as payment gateway)\n\n**Note:** This is a simplified example and you should consider implementing proper security measures such as CSRF protection, password hashing, etc.\n\n### Database Schema\n\nWe'll use the following database schema to store users, products, and cart information:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255),\n  email VARCHAR(255),\n  password VARCHAR(255)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE cart (\n  user_id INT,\n  product_id INT,\n  quantity INT,\n  FOREIGN KEY (user_id) REFERENCES users(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n### PHP Code\n\n**`config.php`**\n\n```php\n<?php\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'root');\ndefine('DB_PASSWORD', '');\ndefine('DB_NAME', 'mydatabase');\n\n// Stripe API keys\ndefine('STRIPE_PUBLIC_KEY', 'your-public-key');\ndefine('STRIPE_SECRET_KEY', 'your-secret-key');\n?>\n```\n\n**`functions.php`**\n\n```php\n<?php\n\nfunction getUser($username) {\n  global $db;\n  $stmt = $db->prepare(\"SELECT * FROM users WHERE username=:username\");\n  $stmt->bindParam(':username', $username);\n  $stmt->execute();\n  return $stmt->fetch();\n}\n\nfunction getProduct($id) {\n  global $db;\n  $stmt = $db->prepare(\"SELECT * FROM products WHERE id=:id\");\n  $stmt->bindParam(':id', $id);\n  $stmt->execute();\n  return $stmt->fetch();\n}\n\nfunction addProductToCart($user_id, $product_id, $quantity) {\n  global $db;\n  $stmt = $db->prepare(\"INSERT INTO cart (user_id, product_id, quantity) VALUES (:user_id, :product_id, :quantity)\");\n  $stmt->bindParam(':user_id', $user_id);\n  $stmt->bindParam(':product_id', $product_id);\n  $stmt->bindParam(':quantity', $quantity);\n  $stmt->execute();\n}\n\nfunction removeProductFromCart($user_id, $product_id) {\n  global $db;\n  $stmt = $db->prepare(\"DELETE FROM cart WHERE user_id=:user_id AND product_id=:product_id\");\n  $stmt->bindParam(':user_id', $user_id);\n  $stmt->bindParam(':product_id', $product_id);\n  $stmt->execute();\n}\n\nfunction calculateCartTotal($user_id) {\n  global $db;\n  $stmt = $db->prepare(\"SELECT SUM(price * quantity) FROM cart WHERE user_id=:user_id\");\n  $stmt->bindParam(':user_id', $user_id);\n  $stmt->execute();\n  return $stmt->fetchColumn();\n}\n\nfunction processPayment($amount, $payment_method) {\n  global $stripe_public_key;\n  global $stripe_secret_key;\n\n  \\Stripe\\Stripe::setApiKey($stripe_secret_key);\n\n  $intent = \\Stripe\\Checkout\\Session::create([\n    'line_items' => [[\n      'price_data' => [\n        'currency' => 'usd',\n        'product_data' => [\n          'name' => 'My product',\n        ],\n        'unit_amount' => $amount,\n      ],\n      'quantity' => 1,\n    ]],\n    'mode' => 'payment',\n    'success_url' => 'https://example.com/success',\n    'cancel_url' => 'https://example.com/cancel',\n  ]);\n\n  return $intent->id;\n}\n\n?>\n```\n\n**`index.php`**\n\n```php\n<?php\n\nrequire_once('config.php');\nrequire_once('functions.php');\n\nif (isset($_POST['submit'])) {\n  // Authentication\n  $username = $_POST['username'];\n  $password = $_POST['password'];\n\n  if ($user = getUser($username)) {\n    if (password_verify($password, $user['password'])) {\n      // Product selection and display\n      $products = array();\n      $stmt = $db->prepare(\"SELECT * FROM products\");\n      $stmt->execute();\n      while ($product = $stmt->fetch()) {\n        $products[] = $product;\n      }\n\n      if (isset($_POST['add_to_cart'])) {\n        // Add product to cart\n        addProductToCart($user['id'], $_POST['product_id'], 1);\n      }\n    } else {\n      echo 'Invalid password';\n    }\n  } else {\n    echo 'Invalid username';\n  }\n}\n\nif (isset($_GET['view_cart'])) {\n  // View cart products\n  $products = array();\n  $stmt = $db->prepare(\"SELECT * FROM cart WHERE user_id=:user_id\");\n  $stmt->bindParam(':user_id', $_SESSION['user_id']);\n  $stmt->execute();\n\n  while ($product = $stmt->fetch()) {\n    $products[] = getProduct($product['product_id']);\n  }\n\n  echo '<h1>Cart products:</h1>';\n  foreach ($products as $product) {\n    echo '<p>' . $product['name'] . ' x' . $product['quantity'] . '</p>';\n  }\n}\n\nif (isset($_GET['checkout'])) {\n  // Payment processing\n  $amount = calculateCartTotal($_SESSION['user_id']);\n  $payment_method = 'card';\n\n  if ($payment_method == 'card') {\n    $payment_intent = processPayment($amount, $payment_method);\n  }\n\n  echo '<h1>Checkout:</h1>';\n}\n\n?>\n```\n\nThis code provides a basic purchase functionality with authentication, product selection and display, cart management (add, remove), payment processing using Stripe. You'll need to modify it according to your specific requirements.\n\nNote that this is just an example, you should consider implementing proper security measures such as CSRF protection, password hashing, etc.\n\nAlso, please ensure to replace the placeholders (`your-public-key`, `your-secret-key`) with your actual Stripe API keys.\n\nPlease let me know if you have any questions or need further assistance.", "code_blocks": [null, "```php\n<?php\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'root');\ndefine('DB_PASSWORD', '');\ndefine('DB_NAME', 'mydatabase');\n\n// Stripe API keys\ndefine('STRIPE_PUBLIC_KEY', 'your-public-key');\ndefine('STRIPE_SECRET_KEY', 'your-secret-key');\n?>\n```", "```php\n<?php\n\nfunction getUser($username) {\n  global $db;\n  $stmt = $db->prepare(\"SELECT * FROM users WHERE username=:username\");\n  $stmt->bindParam(':username', $username);\n  $stmt->execute();\n  return $stmt->fetch();\n}\n\nfunction getProduct($id) {\n  global $db;\n  $stmt = $db->prepare(\"SELECT * FROM products WHERE id=:id\");\n  $stmt->bindParam(':id', $id);\n  $stmt->execute();\n  return $stmt->fetch();\n}\n\nfunction addProductToCart($user_id, $product_id, $quantity) {\n  global $db;\n  $stmt = $db->prepare(\"INSERT INTO cart (user_id, product_id, quantity) VALUES (:user_id, :product_id, :quantity)\");\n  $stmt->bindParam(':user_id', $user_id);\n  $stmt->bindParam(':product_id', $product_id);\n  $stmt->bindParam(':quantity', $quantity);\n  $stmt->execute();\n}\n\nfunction removeProductFromCart($user_id, $product_id) {\n  global $db;\n  $stmt = $db->prepare(\"DELETE FROM cart WHERE user_id=:user_id AND product_id=:product_id\");\n  $stmt->bindParam(':user_id', $user_id);\n  $stmt->bindParam(':product_id', $product_id);\n  $stmt->execute();\n}\n\nfunction calculateCartTotal($user_id) {\n  global $db;\n  $stmt = $db->prepare(\"SELECT SUM(price * quantity) FROM cart WHERE user_id=:user_id\");\n  $stmt->bindParam(':user_id', $user_id);\n  $stmt->execute();\n  return $stmt->fetchColumn();\n}\n\nfunction processPayment($amount, $payment_method) {\n  global $stripe_public_key;\n  global $stripe_secret_key;\n\n  \\Stripe\\Stripe::setApiKey($stripe_secret_key);\n\n  $intent = \\Stripe\\Checkout\\Session::create([\n    'line_items' => [[\n      'price_data' => [\n        'currency' => 'usd',\n        'product_data' => [\n          'name' => 'My product',\n        ],\n        'unit_amount' => $amount,\n      ],\n      'quantity' => 1,\n    ]],\n    'mode' => 'payment',\n    'success_url' => 'https://example.com/success',\n    'cancel_url' => 'https://example.com/cancel',\n  ]);\n\n  return $intent->id;\n}\n\n?>\n```", "```php\n<?php\n\nrequire_once('config.php');\nrequire_once('functions.php');\n\nif (isset($_POST['submit'])) {\n  // Authentication\n  $username = $_POST['username'];\n  $password = $_POST['password'];\n\n  if ($user = getUser($username)) {\n    if (password_verify($password, $user['password'])) {\n      // Product selection and display\n      $products = array();\n      $stmt = $db->prepare(\"SELECT * FROM products\");\n      $stmt->execute();\n      while ($product = $stmt->fetch()) {\n        $products[] = $product;\n      }\n\n      if (isset($_POST['add_to_cart'])) {\n        // Add product to cart\n        addProductToCart($user['id'], $_POST['product_id'], 1);\n      }\n    } else {\n      echo 'Invalid password';\n    }\n  } else {\n    echo 'Invalid username';\n  }\n}\n\nif (isset($_GET['view_cart'])) {\n  // View cart products\n  $products = array();\n  $stmt = $db->prepare(\"SELECT * FROM cart WHERE user_id=:user_id\");\n  $stmt->bindParam(':user_id', $_SESSION['user_id']);\n  $stmt->execute();\n\n  while ($product = $stmt->fetch()) {\n    $products[] = getProduct($product['product_id']);\n  }\n\n  echo '<h1>Cart products:</h1>';\n  foreach ($products as $product) {\n    echo '<p>' . $product['name'] . ' x' . $product['quantity'] . '</p>';\n  }\n}\n\nif (isset($_GET['checkout'])) {\n  // Payment processing\n  $amount = calculateCartTotal($_SESSION['user_id']);\n  $payment_method = 'card';\n\n  if ($payment_method == 'card') {\n    $payment_intent = processPayment($amount, $payment_method);\n  }\n\n  echo '<h1>Checkout:</h1>';\n}\n\n?>\n```"]}
