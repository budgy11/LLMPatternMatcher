{"prompt": "Create a purchase cart functionality using php", "llm_output": "Here is an example of how to create a basic purchase cart functionality using PHP:\n\n**Database Schema:**\n\nWe'll need a database schema with the following tables:\n\n```sql\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE carts (\n    id INT PRIMARY KEY,\n    user_id INT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE cart_items (\n    id INT PRIMARY KEY,\n    cart_id INT,\n    product_id INT,\n    quantity INT,\n    FOREIGN KEY (cart_id) REFERENCES carts(id),\n    FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n**PHP Code:**\n\nWe'll create a `Cart` class to handle the logic of adding and removing items, updating quantities, and checking out.\n\n```php\nclass Cart {\n    private $db;\n\n    function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Add an item to the cart\n    function addItem($product_id, $quantity = 1) {\n        try {\n            $stmt = $this->db->prepare(\"INSERT INTO cart_items (cart_id, product_id, quantity) VALUES (:cart_id, :product_id, :quantity)\");\n            $stmt->bindParam(\":cart_id\", $_SESSION[\"cart_id\"]);\n            $stmt->bindParam(\":product_id\", $product_id);\n            $stmt->bindParam(\":quantity\", $quantity);\n            $stmt->execute();\n        } catch (PDOException $e) {\n            echo \"Error adding item to cart: \" . $e->getMessage();\n        }\n    }\n\n    // Remove an item from the cart\n    function removeItem($product_id) {\n        try {\n            $stmt = $this->db->prepare(\"DELETE FROM cart_items WHERE product_id = :product_id AND cart_id = :cart_id\");\n            $stmt->bindParam(\":product_id\", $product_id);\n            $stmt->bindParam(\":cart_id\", $_SESSION[\"cart_id\"]);\n            $stmt->execute();\n        } catch (PDOException $e) {\n            echo \"Error removing item from cart: \" . $e->getMessage();\n        }\n    }\n\n    // Update the quantity of an item in the cart\n    function updateQuantity($product_id, $new_quantity) {\n        try {\n            $stmt = $this->db->prepare(\"UPDATE cart_items SET quantity = :quantity WHERE product_id = :product_id AND cart_id = :cart_id\");\n            $stmt->bindParam(\":quantity\", $new_quantity);\n            $stmt->bindParam(\":product_id\", $product_id);\n            $stmt->bindParam(\":cart_id\", $_SESSION[\"cart_id\"]);\n            $stmt->execute();\n        } catch (PDOException $e) {\n            echo \"Error updating quantity: \" . $e->getMessage();\n        }\n    }\n\n    // Get the total cost of items in the cart\n    function getTotalCost() {\n        try {\n            $stmt = $this->db->prepare(\"SELECT SUM(ci.quantity * p.price) AS total FROM cart_items ci INNER JOIN products p ON ci.product_id = p.id WHERE ci.cart_id = :cart_id\");\n            $stmt->bindParam(\":cart_id\", $_SESSION[\"cart_id\"]);\n            $stmt->execute();\n            return $stmt->fetchColumn();\n        } catch (PDOException $e) {\n            echo \"Error getting total cost: \" . $e->getMessage();\n        }\n    }\n\n    // Checkout the cart\n    function checkout() {\n        try {\n            // Clear the cart items table for this user\n            $this->db->query(\"DELETE FROM cart_items WHERE cart_id = :cart_id\", array(\":cart_id\" => $_SESSION[\"cart_id\"]));\n\n            // Insert a new order into the database\n            $stmt = $this->db->prepare(\"INSERT INTO orders (user_id, total_cost) VALUES (:user_id, :total_cost)\");\n            $stmt->bindParam(\":user_id\", $_SESSION[\"user_id\"]);\n            $stmt->bindParam(\":total_cost\", $this->getTotalCost());\n            $stmt->execute();\n        } catch (PDOException $e) {\n            echo \"Error checking out cart: \" . $e->getMessage();\n        }\n    }\n}\n```\n\n**Example Usage:**\n\n```php\n// Initialize the Cart class with a database connection\n$db = new PDO(\"mysql:host=localhost;dbname=example\", \"username\", \"password\");\n$cart = new Cart($db);\n\n// Add items to the cart\n$_SESSION[\"cart_id\"] = 1;\n$cart->addItem(1, 2);\n$cart->addItem(3, 4);\n\n// Remove an item from the cart\n$cart->removeItem(3);\n\n// Update quantity of an item in the cart\n$cart->updateQuantity(1, 5);\n\n// Get total cost of items in the cart\necho $cart->getTotalCost();\n\n// Checkout the cart\n$cart->checkout();\n```\n\nThis is a basic example to get you started with implementing a purchase cart functionality using PHP. You'll need to adapt it to your specific use case and database schema.\n\nRemember to follow best practices for security, such as validating user input and preventing SQL injection attacks.", "code_blocks": [null, "```php\nclass Cart {\n    private $db;\n\n    function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Add an item to the cart\n    function addItem($product_id, $quantity = 1) {\n        try {\n            $stmt = $this->db->prepare(\"INSERT INTO cart_items (cart_id, product_id, quantity) VALUES (:cart_id, :product_id, :quantity)\");\n            $stmt->bindParam(\":cart_id\", $_SESSION[\"cart_id\"]);\n            $stmt->bindParam(\":product_id\", $product_id);\n            $stmt->bindParam(\":quantity\", $quantity);\n            $stmt->execute();\n        } catch (PDOException $e) {\n            echo \"Error adding item to cart: \" . $e->getMessage();\n        }\n    }\n\n    // Remove an item from the cart\n    function removeItem($product_id) {\n        try {\n            $stmt = $this->db->prepare(\"DELETE FROM cart_items WHERE product_id = :product_id AND cart_id = :cart_id\");\n            $stmt->bindParam(\":product_id\", $product_id);\n            $stmt->bindParam(\":cart_id\", $_SESSION[\"cart_id\"]);\n            $stmt->execute();\n        } catch (PDOException $e) {\n            echo \"Error removing item from cart: \" . $e->getMessage();\n        }\n    }\n\n    // Update the quantity of an item in the cart\n    function updateQuantity($product_id, $new_quantity) {\n        try {\n            $stmt = $this->db->prepare(\"UPDATE cart_items SET quantity = :quantity WHERE product_id = :product_id AND cart_id = :cart_id\");\n            $stmt->bindParam(\":quantity\", $new_quantity);\n            $stmt->bindParam(\":product_id\", $product_id);\n            $stmt->bindParam(\":cart_id\", $_SESSION[\"cart_id\"]);\n            $stmt->execute();\n        } catch (PDOException $e) {\n            echo \"Error updating quantity: \" . $e->getMessage();\n        }\n    }\n\n    // Get the total cost of items in the cart\n    function getTotalCost() {\n        try {\n            $stmt = $this->db->prepare(\"SELECT SUM(ci.quantity * p.price) AS total FROM cart_items ci INNER JOIN products p ON ci.product_id = p.id WHERE ci.cart_id = :cart_id\");\n            $stmt->bindParam(\":cart_id\", $_SESSION[\"cart_id\"]);\n            $stmt->execute();\n            return $stmt->fetchColumn();\n        } catch (PDOException $e) {\n            echo \"Error getting total cost: \" . $e->getMessage();\n        }\n    }\n\n    // Checkout the cart\n    function checkout() {\n        try {\n            // Clear the cart items table for this user\n            $this->db->query(\"DELETE FROM cart_items WHERE cart_id = :cart_id\", array(\":cart_id\" => $_SESSION[\"cart_id\"]));\n\n            // Insert a new order into the database\n            $stmt = $this->db->prepare(\"INSERT INTO orders (user_id, total_cost) VALUES (:user_id, :total_cost)\");\n            $stmt->bindParam(\":user_id\", $_SESSION[\"user_id\"]);\n            $stmt->bindParam(\":total_cost\", $this->getTotalCost());\n            $stmt->execute();\n        } catch (PDOException $e) {\n            echo \"Error checking out cart: \" . $e->getMessage();\n        }\n    }\n}\n```", "```php\n// Initialize the Cart class with a database connection\n$db = new PDO(\"mysql:host=localhost;dbname=example\", \"username\", \"password\");\n$cart = new Cart($db);\n\n// Add items to the cart\n$_SESSION[\"cart_id\"] = 1;\n$cart->addItem(1, 2);\n$cart->addItem(3, 4);\n\n// Remove an item from the cart\n$cart->removeItem(3);\n\n// Update quantity of an item in the cart\n$cart->updateQuantity(1, 5);\n\n// Get total cost of items in the cart\necho $cart->getTotalCost();\n\n// Checkout the cart\n$cart->checkout();\n```"]}
