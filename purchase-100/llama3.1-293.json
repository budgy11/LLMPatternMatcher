{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a simple purchase functionality in PHP:\n\n**Database Schema:**\n\nWe will use MySQL as our database. Create the following table to store orders and order items:\n```sql\nCREATE TABLE `orders` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `user_id` int(11) NOT NULL,\n  `order_date` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  `total` decimal(10,2) NOT NULL,\n  PRIMARY KEY (`id`)\n);\n\nCREATE TABLE `order_items` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `order_id` int(11) NOT NULL,\n  `product_id` int(11) NOT NULL,\n  `quantity` int(11) NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `order_id` (`order_id`)\n);\n```\n**PHP Code:**\n\nWe will use PHP to handle the purchase functionality. Create a file named `purchase.php` with the following code:\n```php\n<?php\n\n// Configuration\n$db_host = 'localhost';\n$db_username = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Connect to database\n$conn = new mysqli($db_host, $db_username, $db_password, $db_name);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add order\nfunction add_order($user_id, $products) {\n    global $conn;\n    \n    // Get total amount of the order\n    $total = 0;\n    foreach ($products as $product) {\n        $total += $product['price'] * $product['quantity'];\n    }\n    \n    // Insert new order into database\n    $query = \"INSERT INTO orders (user_id, order_date, total) VALUES (?, ?, ?)\";\n    $stmt = $conn->prepare($query);\n    $stmt->bind_param(\"iis\", $user_id, date('Y-m-d H:i:s'), $total);\n    $stmt->execute();\n    \n    // Get the id of the new order\n    $order_id = $conn->insert_id;\n    \n    // Insert order items into database\n    foreach ($products as $product) {\n        $query = \"INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)\";\n        $stmt = $conn->prepare($query);\n        $stmt->bind_param(\"iii\", $order_id, $product['id'], $product['quantity']);\n        $stmt->execute();\n    }\n    \n    // Return the id of the new order\n    return $order_id;\n}\n\n// Function to process payment\nfunction process_payment($order_id) {\n    global $conn;\n    \n    // Your payment processing code here (e.g. Stripe, PayPal)\n    // For example:\n    echo \"Processing payment for order #{$order_id}...\";\n    sleep(2); // Simulate a 2-second delay\n    echo \"Payment processed successfully!\";\n}\n\n// Function to display order summary\nfunction display_order_summary($order_id) {\n    global $conn;\n    \n    // Get the products in the order\n    $query = \"SELECT oi.product_id, p.name, oi.quantity FROM order_items oi JOIN products p ON oi.product_id = p.id WHERE oi.order_id = ?\";\n    $stmt = $conn->prepare($query);\n    $stmt->bind_param(\"i\", $order_id);\n    $stmt->execute();\n    \n    // Display the order summary\n    echo \"Order Summary for Order #{$order_id}:\";\n    while ($row = $stmt->get_result()->fetch_assoc()) {\n        echo \"<p>Product: {$row['name']} (x{$row['quantity']})</p>\";\n    }\n}\n\n// Example usage:\n$user_id = 1;\n$products = array(\n    array('id' => 1, 'price' => 19.99, 'quantity' => 2),\n    array('id' => 3, 'price' => 9.99, 'quantity' => 1)\n);\n\n$order_id = add_order($user_id, $products);\ndisplay_order_summary($order_id);\nprocess_payment($order_id);\n\n?>\n```\n**Explanation:**\n\nThe code consists of three main functions:\n\n1. `add_order`: Adds a new order to the database and returns the id of the new order.\n2. `process_payment`: Processes payment for an existing order (replace with your own payment processing code).\n3. `display_order_summary`: Displays a summary of an existing order.\n\nThe example usage at the end demonstrates how to use these functions together:\n\n* Add a new order using `add_order`.\n* Display a summary of the new order using `display_order_summary`.\n* Process payment for the new order using `process_payment`.\n\nNote that this is a simplified example and you should modify it to fit your specific needs. Additionally, be sure to secure your database connection and replace the placeholders with actual values.", "code_blocks": [null, "```php\n<?php\n\n// Configuration\n$db_host = 'localhost';\n$db_username = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Connect to database\n$conn = new mysqli($db_host, $db_username, $db_password, $db_name);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add order\nfunction add_order($user_id, $products) {\n    global $conn;\n    \n    // Get total amount of the order\n    $total = 0;\n    foreach ($products as $product) {\n        $total += $product['price'] * $product['quantity'];\n    }\n    \n    // Insert new order into database\n    $query = \"INSERT INTO orders (user_id, order_date, total) VALUES (?, ?, ?)\";\n    $stmt = $conn->prepare($query);\n    $stmt->bind_param(\"iis\", $user_id, date('Y-m-d H:i:s'), $total);\n    $stmt->execute();\n    \n    // Get the id of the new order\n    $order_id = $conn->insert_id;\n    \n    // Insert order items into database\n    foreach ($products as $product) {\n        $query = \"INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)\";\n        $stmt = $conn->prepare($query);\n        $stmt->bind_param(\"iii\", $order_id, $product['id'], $product['quantity']);\n        $stmt->execute();\n    }\n    \n    // Return the id of the new order\n    return $order_id;\n}\n\n// Function to process payment\nfunction process_payment($order_id) {\n    global $conn;\n    \n    // Your payment processing code here (e.g. Stripe, PayPal)\n    // For example:\n    echo \"Processing payment for order #{$order_id}...\";\n    sleep(2); // Simulate a 2-second delay\n    echo \"Payment processed successfully!\";\n}\n\n// Function to display order summary\nfunction display_order_summary($order_id) {\n    global $conn;\n    \n    // Get the products in the order\n    $query = \"SELECT oi.product_id, p.name, oi.quantity FROM order_items oi JOIN products p ON oi.product_id = p.id WHERE oi.order_id = ?\";\n    $stmt = $conn->prepare($query);\n    $stmt->bind_param(\"i\", $order_id);\n    $stmt->execute();\n    \n    // Display the order summary\n    echo \"Order Summary for Order #{$order_id}:\";\n    while ($row = $stmt->get_result()->fetch_assoc()) {\n        echo \"<p>Product: {$row['name']} (x{$row['quantity']})</p>\";\n    }\n}\n\n// Example usage:\n$user_id = 1;\n$products = array(\n    array('id' => 1, 'price' => 19.99, 'quantity' => 2),\n    array('id' => 3, 'price' => 9.99, 'quantity' => 1)\n);\n\n$order_id = add_order($user_id, $products);\ndisplay_order_summary($order_id);\nprocess_payment($order_id);\n\n?>\n```"]}
