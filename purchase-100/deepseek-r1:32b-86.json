{"prompt": "Create a purchase cart functionality using php", "llm_output": "<think>\nOkay, I need to create a purchase cart functionality using PHP. Let me think about how to approach this.\n\nFirst, I should consider what a shopping cart typically does. It allows users to add items, view their cart, update quantities, and remove items. Since PHP is server-side, I'll need to handle these actions through forms and maybe some AJAX for better user experience, but maybe start with basic form submissions first.\n\nI remember that sessions are useful here because they can store data specific to a user's session. So I can use $_SESSION to keep track of the cart items.\n\nLet me outline the steps:\n\n1. **Set up the database**: Create tables for products and orders. The products table will have id, name, price, description. The orders table will track each order with user info, total amount, etc.\n\n2. **Display products**: Fetch products from the database and display them on a page where users can add to cart.\n\n3. **Add to cart functionality**: When a user clicks \"Add to Cart,\" it should add the product to their session. Check if the product is already in the cart; if so, update the quantity, else add a new entry.\n\n4. **Cart management**: Allow users to view their cart, adjust quantities, remove items, and proceed to checkout.\n\n5. **Checkout process**: Calculate total price, get user details, and save the order to the database.\n\n6. **Order confirmation**: After checkout, display an order summary or thank you message.\n\nI should create a class for the shopping cart to encapsulate the functionality. This makes it cleaner and easier to maintain. The class can handle adding items, updating quantities, removing items, calculating totals, etc.\n\nFor the database connection, I'll use PDO because it's secure and supports prepared statements, which help prevent SQL injection.\n\nIn the add to cart process, when a user submits an item, I'll check if their session has a 'cart' key. If not, initialize it as an array. Then check if the product ID exists in the cart; if yes, increment quantity, else add the new product with quantity 1.\n\nWhen displaying the cart contents, loop through the session's cart array and display each item's details along with options to update quantity or remove items.\n\nFor updating quantities, I'll need a form where users can input the new quantity. Upon submission, the script will update the session accordingly.\n\nRemoving an item is straightforward: unset the product from the cart array in the session.\n\nAt checkout, calculate the total price by summing up each item's (price * quantity). Then insert into the orders table with user details and order date.\n\nI should also handle cases where the cart might be empty. For example, if someone tries to access checkout without items, redirect them back or show a message.\n\nTesting is important. I'll need to ensure that adding, updating, and removing items works correctly. Also, check that the total calculation is accurate and that orders are saved properly in the database.\n\nPotential issues to consider:\n- Session management: Ensure sessions are started at the beginning of each script.\n- Security: Use prepared statements to prevent SQL injection.\n- Data validation: Make sure quantities are positive integers when updating.\n- Error handling: Provide feedback if something goes wrong, like a product not found or an invalid quantity.\n\nI'll structure my code into separate pages:\n- index.php: Display products and allow adding to cart.\n- cart.php: Show current cart contents with options to update or remove items.\n- checkout.php: Collect user info and process the order.\n- classes/cart.class.php: The shopping cart class.\n- db/connect.php: Database connection setup.\n\nI should also include proper headers, like Content-Type for JSON if using AJAX, but maybe start without AJAX for simplicity.\n\nFinally, after placing an order, I'll redirect to a confirmation page or show a message indicating success and perhaps the order details.\n\nAlright, time to put this into code.\n</think>\n\nTo create a purchase cart functionality in PHP, follow these steps:\n\n### 1. Set Up the Database\n\nCreate a MySQL database with two tables: `products` and `orders`.\n\n**products Table:**\n```sql\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    description TEXT\n);\n```\n\n**orders Table:**\n```sql\nCREATE TABLE orders (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    order_date DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### 2. Create the Product Display Page (`index.php`)\n\nDisplay available products with an \"Add to Cart\" button.\n\n```php\n<?php\nsession_start();\nrequire 'db/connect.php';\ninclude_once 'classes/cart.class.php';\n\n$cart = new Cart($pdo);\n\n$sql = \"SELECT * FROM products\";\n$stmt = $pdo->query($sql);\n$products = $stmt->fetchAll(PDO::FETCH_ASSOC);\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product Store</title>\n</head>\n<body>\n    <h1>Welcome to Our Store</h1>\n    <?php foreach ($products as $product): ?>\n        <div>\n            <h2><?php echo $product['name']; ?></h2>\n            <p><?php echo $product['description']; ?></p>\n            <p>Price: $<?php echo number_format($product['price'], 2); ?></p>\n            <form action=\"add_to_cart.php\" method=\"POST\">\n                <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product['id']; ?>\">\n                <button type=\"submit\">Add to Cart</button>\n            </form>\n        </div>\n    <?php endforeach; ?>\n    <p><a href=\"cart.php\">View Your Cart</a></p>\n</body>\n</html>\n```\n\n### 3. Add to Cart Script (`add_to_cart.php`)\n\nHandle adding products to the cart.\n\n```php\n<?php\nsession_start();\nrequire 'db/connect.php';\ninclude_once 'classes/cart.class.php';\n\n$cart = new Cart($pdo);\n\nif (isset($_POST['product_id'])) {\n    $productId = $_POST['product_id'];\n    $cart->addToCart($productId);\n}\n\nheader(\"Location: index.php\");\nexit();\n```\n\n### 4. Cart Management Page (`cart.php`)\n\nDisplay cart contents and allow updates or removal of items.\n\n```php\n<?php\nsession_start();\nrequire 'db/connect.php';\ninclude_once 'classes/cart.class.php';\n\n$cart = new Cart($pdo);\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Your Shopping Cart</title>\n</head>\n<body>\n    <?php if ($cart->getTotalItems() > 0): ?>\n        <h1>Your Cart</h1>\n        <table border=\"1\">\n            <tr><th>Product</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr>\n            <?php foreach ($cart->getCartItems() as $item): ?>\n                <tr>\n                    <td><?php echo $item['name']; ?></td>\n                    <td>$<?php echo number_format($item['price'], 2); ?></td>\n                    <td><form action=\"update_cart.php\" method=\"POST\">\n                        <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $item['id']; ?>\">\n                        <input type=\"number\" name=\"quantity\" value=\"<?php echo $item['quantity']; ?>\" min=\"1\">\n                        <button type=\"submit\">Update</button>\n                    </form></td>\n                    <td>$<?php echo number_format($item['total'], 2); ?></td>\n                    <td><a href=\"remove_from_cart.php?product_id=<?php echo $item['id']; ?>\">Remove</a></td>\n                </tr>\n            <?php endforeach; ?>\n        </table>\n        <p>Total: $<?php echo number_format($cart->getCartTotal(), 2); ?></p>\n        <form action=\"checkout.php\" method=\"POST\">\n            <button type=\"submit\">Checkout</button>\n        </form>\n    <?php else: ?>\n        <h2>Your cart is empty.</h2>\n    <?php endif; ?>\n    <p><a href=\"index.php\">Continue Shopping</a></p>\n</body>\n</html>\n```\n\n### 5. Update Cart Quantity (`update_cart.php`)\n\nHandle quantity updates.\n\n```php\n<?php\nsession_start();\nrequire 'db/connect.php';\ninclude_once 'classes/cart.class.php';\n\n$cart = new Cart($pdo);\n\nif (isset($_POST['product_id']) && isset($_POST['quantity'])) {\n    $productId = $_POST['product_id'];\n    $quantity = max(1, intval($_POST['quantity']));\n    $cart->updateQuantity($productId, $quantity);\n}\n\nheader(\"Location: cart.php\");\nexit();\n```\n\n### 6. Remove from Cart (`remove_from_cart.php`)\n\nHandle item removal.\n\n```php\n<?php\nsession_start();\nrequire 'db/connect.php';\ninclude_once 'classes/cart.class.php';\n\n$cart = new Cart($pdo);\n\nif (isset($_GET['product_id'])) {\n    $productId = $_GET['product_id'];\n    $cart->removeFromCart($productId);\n}\n\nheader(\"Location: cart.php\");\nexit();\n```\n\n### 7. Checkout Page (`checkout.php`)\n\nCollect user information and process the order.\n\n```php\n<?php\nsession_start();\nrequire 'db/connect.php';\ninclude_once 'classes/cart.class.php';\n\n$cart = new Cart($pdo);\n\nif (isset($_POST['user_name'], $_POST['email'])) {\n    $userName = htmlspecialchars($_POST['user_name']);\n    $email = htmlspecialchars($_POST['email']);\n    \n    if ($cart->getTotalItems() > 0) {\n        $totalAmount = $cart->getCartTotal();\n        \n        try {\n            $sql = \"INSERT INTO orders (user_name, email, total_amount) VALUES (?, ?, ?)\";\n            $stmt = $pdo->prepare($sql);\n            $stmt->execute([$userName, $email, $totalAmount]);\n            \n            // Clear the cart\n            $cart->clearCart();\n            \n            header(\"Location: order_confirmation.php?order_id=\" . $pdo->lastInsertId());\n            exit();\n        } catch (PDOException $e) {\n            die(\"Error processing your order: \" . $e->getMessage());\n        }\n    } else {\n        die(\"Your cart is empty. Please add items to your cart before checking out.\");\n    }\n}\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Checkout</title>\n</head>\n<body>\n    <?php if ($cart->getTotalItems() > 0): ?>\n        <h1>Complete Your Purchase</h1>\n        <form action=\"checkout.php\" method=\"POST\">\n            <p>Your cart total: $<?php echo number_format($cart->getCartTotal(), 2); ?></p>\n            <label for=\"user_name\">Name:</label><br>\n            <input type=\"text\" id=\"user_name\" name=\"user_name\" required><br>\n            <label for=\"email\">Email:</label><br>\n            <input type=\"email\" id=\"email\" name=\"email\" required><br>\n            <button type=\"submit\">Place Order</button>\n        </form>\n    <?php else: ?>\n        <h2>Your cart is empty. Please add items to your cart before checking out.</h2>\n    <?php endif; ?>\n</body>\n</html>\n```\n\n### 8. Order Confirmation Page (`order_confirmation.php`)\n\nDisplay order confirmation details.\n\n```php\n<?php\nsession_start();\nrequire 'db/connect.php';\n\n$order_id = isset($_GET['order_id']) ? intval($_GET['order_id']) : null;\n\nif ($order_id) {\n    $sql = \"SELECT * FROM orders WHERE id = ?\";\n    $stmt = $pdo->prepare($sql);\n    $stmt->execute([$order_id]);\n    $order = $stmt->fetch(PDO::FETCH_ASSOC);\n    \n    if (!$order) {\n        die(\"Order not found.\");\n    }\n} else {\n    die(\"Invalid order ID.\");\n}\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Order Confirmation</title>\n</head>\n<body>\n    <h1>Thank you for your purchase!</h1>\n    <p>Your order details:</p>\n    <ul>\n        <li>Name: <?php echo $order['user_name']; ?></li>\n        <li>Email: <?php echo $order['email']; ?></li>\n        <li>Total Amount: $<?php echo number_format($order['total_amount'], 2); ?></li>\n        <li>Order Date: <?php echo date('Y-m-d H:i:s', strtotime($order['order_date'])); ?></li>\n    </ul>\n    <p>We will send a confirmation email to <?php echo $order['email']; ?> shortly.</p>\n</body>\n</html>\n```\n\n### 9. Shopping Cart Class (`classes/cart.class.php`)\n\nEncapsulates cart functionality.\n\n```php\n<?php\nclass Cart {\n    private $pdo;\n    private $cart;\n\n    public function __construct($pdo) {\n        $this->pdo = $pdo;\n        session_start();\n        if (!isset($_SESSION['cart'])) {\n            $_SESSION['cart'] = array();\n        }\n        $this->cart = &$_SESSION['cart'];\n    }\n\n    public function addToCart($productId) {\n        // Check if product exists\n        try {\n            $sql = \"SELECT id FROM products WHERE id = ?\";\n            $stmt = $this->pdo->prepare($sql);\n            $stmt->execute([$productId]);\n            if ($stmt->fetch()) {\n                if (isset($this->cart[$productId])) {\n                    $this->cart[$productId]['quantity']++;\n                } else {\n                    $this->cart[$productId] = array(\n                        'id' => $productId,\n                        'quantity' => 1\n                    );\n                }\n            }\n        } catch (PDOException $e) {\n            die(\"Error adding product: \" . $e->getMessage());\n        }\n    }\n\n    public function removeFromCart($productId) {\n        if (isset($this->cart[$productId])) {\n            unset($this->cart[$productId]);\n        }\n    }\n\n    public function updateQuantity($productId, $quantity) {\n        if ($quantity < 1) {\n            $quantity = 1;\n        }\n        if (isset($this->cart[$productId])) {\n            $this->cart[$productId]['quantity'] = $quantity;\n        }\n    }\n\n    public function clearCart() {\n        $this->cart = array();\n    }\n\n    public function getCartItems() {\n        $items = array();\n        foreach ($this->cart as $productId => $item) {\n            try {\n                $sql = \"SELECT * FROM products WHERE id = ?\";\n                $stmt = $this->pdo->prepare($sql);\n                $stmt->execute([$productId]);\n                $product = $stmt->fetch(PDO::FETCH_ASSOC);\n                \n                if ($product) {\n                    $items[] = array(\n                        'id' => $product['id'],\n                        'name' => $product['name'],\n                        'price' => $product['price'],\n                        'quantity' => $item['quantity'],\n                        'total' => $item['quantity'] * $product['price']\n                    );\n                }\n            } catch (PDOException $e) {\n                die(\"Error fetching product: \" . $e->getMessage());\n            }\n        }\n        return $items;\n    }\n\n    public function getCartTotal() {\n        $total = 0.00;\n        foreach ($this->cart as $productId => $item) {\n            try {\n                $sql = \"SELECT price FROM products WHERE id = ?\";\n                $stmt = $this->pdo->prepare($sql);\n                $stmt->execute([$productId]);\n                $price = $stmt->fetchColumn();\n                \n                if ($price !== false) {\n                    $total += $item['quantity'] * $price;\n                }\n            } catch (PDOException $e) {\n                die(\"Error calculating total: \" . $e->getMessage());\n            }\n        }\n        return $total;\n    }\n\n    public function getTotalItems() {\n        $total = 0;\n        foreach ($this->cart as $item) {\n            $total += $item['quantity'];\n        }\n        return $total;\n    }\n}\n```\n\n### 10. Database Connection (`db/connect.php`)\n\nEstablishes a connection to the MySQL database.\n\n```php\n<?php\ntry {\n    $pdo = new PDO('mysql:host=localhost;dbname=your_database_name', 'username', 'password');\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n```\n\n### Instructions for Use:\n\n1. Replace the database connection details in `db/connect.php` with your actual MySQL credentials.\n2. Create the necessary tables in your database using the provided SQL statements.\n3. Upload all files to your web server, ensuring proper file structure.\n4. Test each functionality step-by-step:\n   - View products on `index.php`.\n   - Add items to cart and verify session storage.\n   - Update quantities or remove items from the cart.\n   - Proceed to checkout with valid user details.\n   - Confirm order is saved correctly in the database.\n\nThis implementation provides a basic shopping cart system with essential features. You can extend it by adding more functionalities such as user authentication, payment integration, and email notifications.", "code_blocks": [null, null, "```php\n<?php\nsession_start();\nrequire 'db/connect.php';\ninclude_once 'classes/cart.class.php';\n\n$cart = new Cart($pdo);\n\n$sql = \"SELECT * FROM products\";\n$stmt = $pdo->query($sql);\n$products = $stmt->fetchAll(PDO::FETCH_ASSOC);\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product Store</title>\n</head>\n<body>\n    <h1>Welcome to Our Store</h1>\n    <?php foreach ($products as $product): ?>\n        <div>\n            <h2><?php echo $product['name']; ?></h2>\n            <p><?php echo $product['description']; ?></p>\n            <p>Price: $<?php echo number_format($product['price'], 2); ?></p>\n            <form action=\"add_to_cart.php\" method=\"POST\">\n                <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product['id']; ?>\">\n                <button type=\"submit\">Add to Cart</button>\n            </form>\n        </div>\n    <?php endforeach; ?>\n    <p><a href=\"cart.php\">View Your Cart</a></p>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\nrequire 'db/connect.php';\ninclude_once 'classes/cart.class.php';\n\n$cart = new Cart($pdo);\n\nif (isset($_POST['product_id'])) {\n    $productId = $_POST['product_id'];\n    $cart->addToCart($productId);\n}\n\nheader(\"Location: index.php\");\nexit();\n```", "```php\n<?php\nsession_start();\nrequire 'db/connect.php';\ninclude_once 'classes/cart.class.php';\n\n$cart = new Cart($pdo);\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Your Shopping Cart</title>\n</head>\n<body>\n    <?php if ($cart->getTotalItems() > 0): ?>\n        <h1>Your Cart</h1>\n        <table border=\"1\">\n            <tr><th>Product</th><th>Price</th><th>Quantity</th><th>Total</th><th>Action</th></tr>\n            <?php foreach ($cart->getCartItems() as $item): ?>\n                <tr>\n                    <td><?php echo $item['name']; ?></td>\n                    <td>$<?php echo number_format($item['price'], 2); ?></td>\n                    <td><form action=\"update_cart.php\" method=\"POST\">\n                        <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $item['id']; ?>\">\n                        <input type=\"number\" name=\"quantity\" value=\"<?php echo $item['quantity']; ?>\" min=\"1\">\n                        <button type=\"submit\">Update</button>\n                    </form></td>\n                    <td>$<?php echo number_format($item['total'], 2); ?></td>\n                    <td><a href=\"remove_from_cart.php?product_id=<?php echo $item['id']; ?>\">Remove</a></td>\n                </tr>\n            <?php endforeach; ?>\n        </table>\n        <p>Total: $<?php echo number_format($cart->getCartTotal(), 2); ?></p>\n        <form action=\"checkout.php\" method=\"POST\">\n            <button type=\"submit\">Checkout</button>\n        </form>\n    <?php else: ?>\n        <h2>Your cart is empty.</h2>\n    <?php endif; ?>\n    <p><a href=\"index.php\">Continue Shopping</a></p>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\nrequire 'db/connect.php';\ninclude_once 'classes/cart.class.php';\n\n$cart = new Cart($pdo);\n\nif (isset($_POST['product_id']) && isset($_POST['quantity'])) {\n    $productId = $_POST['product_id'];\n    $quantity = max(1, intval($_POST['quantity']));\n    $cart->updateQuantity($productId, $quantity);\n}\n\nheader(\"Location: cart.php\");\nexit();\n```", "```php\n<?php\nsession_start();\nrequire 'db/connect.php';\ninclude_once 'classes/cart.class.php';\n\n$cart = new Cart($pdo);\n\nif (isset($_GET['product_id'])) {\n    $productId = $_GET['product_id'];\n    $cart->removeFromCart($productId);\n}\n\nheader(\"Location: cart.php\");\nexit();\n```", "```php\n<?php\nsession_start();\nrequire 'db/connect.php';\ninclude_once 'classes/cart.class.php';\n\n$cart = new Cart($pdo);\n\nif (isset($_POST['user_name'], $_POST['email'])) {\n    $userName = htmlspecialchars($_POST['user_name']);\n    $email = htmlspecialchars($_POST['email']);\n    \n    if ($cart->getTotalItems() > 0) {\n        $totalAmount = $cart->getCartTotal();\n        \n        try {\n            $sql = \"INSERT INTO orders (user_name, email, total_amount) VALUES (?, ?, ?)\";\n            $stmt = $pdo->prepare($sql);\n            $stmt->execute([$userName, $email, $totalAmount]);\n            \n            // Clear the cart\n            $cart->clearCart();\n            \n            header(\"Location: order_confirmation.php?order_id=\" . $pdo->lastInsertId());\n            exit();\n        } catch (PDOException $e) {\n            die(\"Error processing your order: \" . $e->getMessage());\n        }\n    } else {\n        die(\"Your cart is empty. Please add items to your cart before checking out.\");\n    }\n}\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Checkout</title>\n</head>\n<body>\n    <?php if ($cart->getTotalItems() > 0): ?>\n        <h1>Complete Your Purchase</h1>\n        <form action=\"checkout.php\" method=\"POST\">\n            <p>Your cart total: $<?php echo number_format($cart->getCartTotal(), 2); ?></p>\n            <label for=\"user_name\">Name:</label><br>\n            <input type=\"text\" id=\"user_name\" name=\"user_name\" required><br>\n            <label for=\"email\">Email:</label><br>\n            <input type=\"email\" id=\"email\" name=\"email\" required><br>\n            <button type=\"submit\">Place Order</button>\n        </form>\n    <?php else: ?>\n        <h2>Your cart is empty. Please add items to your cart before checking out.</h2>\n    <?php endif; ?>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\nrequire 'db/connect.php';\n\n$order_id = isset($_GET['order_id']) ? intval($_GET['order_id']) : null;\n\nif ($order_id) {\n    $sql = \"SELECT * FROM orders WHERE id = ?\";\n    $stmt = $pdo->prepare($sql);\n    $stmt->execute([$order_id]);\n    $order = $stmt->fetch(PDO::FETCH_ASSOC);\n    \n    if (!$order) {\n        die(\"Order not found.\");\n    }\n} else {\n    die(\"Invalid order ID.\");\n}\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Order Confirmation</title>\n</head>\n<body>\n    <h1>Thank you for your purchase!</h1>\n    <p>Your order details:</p>\n    <ul>\n        <li>Name: <?php echo $order['user_name']; ?></li>\n        <li>Email: <?php echo $order['email']; ?></li>\n        <li>Total Amount: $<?php echo number_format($order['total_amount'], 2); ?></li>\n        <li>Order Date: <?php echo date('Y-m-d H:i:s', strtotime($order['order_date'])); ?></li>\n    </ul>\n    <p>We will send a confirmation email to <?php echo $order['email']; ?> shortly.</p>\n</body>\n</html>\n```", "```php\n<?php\nclass Cart {\n    private $pdo;\n    private $cart;\n\n    public function __construct($pdo) {\n        $this->pdo = $pdo;\n        session_start();\n        if (!isset($_SESSION['cart'])) {\n            $_SESSION['cart'] = array();\n        }\n        $this->cart = &$_SESSION['cart'];\n    }\n\n    public function addToCart($productId) {\n        // Check if product exists\n        try {\n            $sql = \"SELECT id FROM products WHERE id = ?\";\n            $stmt = $this->pdo->prepare($sql);\n            $stmt->execute([$productId]);\n            if ($stmt->fetch()) {\n                if (isset($this->cart[$productId])) {\n                    $this->cart[$productId]['quantity']++;\n                } else {\n                    $this->cart[$productId] = array(\n                        'id' => $productId,\n                        'quantity' => 1\n                    );\n                }\n            }\n        } catch (PDOException $e) {\n            die(\"Error adding product: \" . $e->getMessage());\n        }\n    }\n\n    public function removeFromCart($productId) {\n        if (isset($this->cart[$productId])) {\n            unset($this->cart[$productId]);\n        }\n    }\n\n    public function updateQuantity($productId, $quantity) {\n        if ($quantity < 1) {\n            $quantity = 1;\n        }\n        if (isset($this->cart[$productId])) {\n            $this->cart[$productId]['quantity'] = $quantity;\n        }\n    }\n\n    public function clearCart() {\n        $this->cart = array();\n    }\n\n    public function getCartItems() {\n        $items = array();\n        foreach ($this->cart as $productId => $item) {\n            try {\n                $sql = \"SELECT * FROM products WHERE id = ?\";\n                $stmt = $this->pdo->prepare($sql);\n                $stmt->execute([$productId]);\n                $product = $stmt->fetch(PDO::FETCH_ASSOC);\n                \n                if ($product) {\n                    $items[] = array(\n                        'id' => $product['id'],\n                        'name' => $product['name'],\n                        'price' => $product['price'],\n                        'quantity' => $item['quantity'],\n                        'total' => $item['quantity'] * $product['price']\n                    );\n                }\n            } catch (PDOException $e) {\n                die(\"Error fetching product: \" . $e->getMessage());\n            }\n        }\n        return $items;\n    }\n\n    public function getCartTotal() {\n        $total = 0.00;\n        foreach ($this->cart as $productId => $item) {\n            try {\n                $sql = \"SELECT price FROM products WHERE id = ?\";\n                $stmt = $this->pdo->prepare($sql);\n                $stmt->execute([$productId]);\n                $price = $stmt->fetchColumn();\n                \n                if ($price !== false) {\n                    $total += $item['quantity'] * $price;\n                }\n            } catch (PDOException $e) {\n                die(\"Error calculating total: \" . $e->getMessage());\n            }\n        }\n        return $total;\n    }\n\n    public function getTotalItems() {\n        $total = 0;\n        foreach ($this->cart as $item) {\n            $total += $item['quantity'];\n        }\n        return $total;\n    }\n}\n```", "```php\n<?php\ntry {\n    $pdo = new PDO('mysql:host=localhost;dbname=your_database_name', 'username', 'password');\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n```"]}
