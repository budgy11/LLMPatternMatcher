{"prompt": "Create a purchase functionality using php", "llm_output": "```php\n<?php\n\n// Database Connection (Replace with your actual database credentials)\n$db_host = 'localhost';\n$db_user = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Connect to the database\n$conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// --- Purchase Functionality ---\n\n/**\n * Handles the purchase process.\n *\n * @param array $order_data  An associative array containing the order details.\n *                          Example:\n *                          [\n *                              'product_id' => 123,\n *                              'quantity' => 2,\n *                              'customer_name' => 'John Doe',\n *                              'customer_email' => 'john.doe@example.com'\n *                          ]\n */\nfunction processPurchase(array $order_data) {\n    // Validate Input (Crucial for security!)\n    if (empty($order_data['product_id']) || empty($order_data['quantity']) || empty($order_data['customer_name']) || empty($order_data['customer_email'])) {\n        return \"Error: Missing required fields.\";\n    }\n    \n    $product_id = $order_data['product_id'];\n    $quantity = $order_data['quantity'];\n    $customer_name = $order_data['customer_name'];\n    $customer_email = $order_data['customer_email'];\n\n    // Validate Quantity (e.g., ensure it's a positive integer)\n    if (!is_numeric($quantity) || $quantity <= 0) {\n        return \"Error: Invalid quantity.\";\n    }\n\n    // *** In a real application, you'd implement proper input validation and sanitization here ***\n    // This is a simplified example; a production system would have more robust validation.\n\n    // --- Database Interaction ---\n\n    // 1. Check if the product exists.\n    $sql_check_product = \"SELECT id FROM products WHERE id = ?\";\n    $stmt_check_product = $conn->prepare($sql_check_product);\n    $stmt_check_product->bind_param(\"i\", $product_id);\n    $stmt_check_product->execute();\n    $result = $stmt_check_product->get_result();\n\n    if ($result->num_rows == 0) {\n        $stmt_check_product->close();\n        return \"Error: Product not found.\";\n    }\n\n\n    // 2.  Insert the order into the orders table\n    $sql_insert_order = \"INSERT INTO orders (product_id, quantity, customer_name, customer_email, order_date) VALUES (?, ?, ?, ?, NOW())\";\n    $stmt_insert_order = $conn->prepare($sql_insert_order);\n    $stmt_insert_order->bind_param(\"isss\", $product_id, $quantity, $customer_name, $customer_email);\n    $stmt_insert_order->execute();\n\n    if ($stmt_insert_order->get_affected_rows() === 0) {\n        $stmt_insert_order->close();\n        return \"Error: Failed to insert order into the database.\";\n    }\n\n    $stmt_insert_order->close();\n\n    // 3.  Update the product's stock (example)\n    $sql_update_stock = \"UPDATE products SET stock = stock - ? WHERE id = ?\";\n    $stmt_update_stock = $conn->prepare($sql_update_stock);\n    $stmt_update_stock->bind_param(\"is\", $quantity, $product_id);\n    $stmt_update_stock->execute();\n\n    if ($stmt_update_stock->get_affected_rows() === 0) {\n        // Handle product stock update failure (e.g., log the error)\n        // Consider what to do if stock isn't updated, like rollback the order.\n        return \"Error: Failed to update product stock.\";\n    }\n\n    $stmt_update_stock->close();\n\n    return \"Order placed successfully! Order ID: \" . $conn->insert_id; //Returns the auto-generated Order ID\n}\n\n\n// --- Example Usage (Simulated Form Handling) ---\n\n//  Simulate receiving the order data from a form\n$order_data = [\n    'product_id' => 123,\n    'quantity' => 2,\n    'customer_name' => 'Jane Smith',\n    'customer_email' => 'jane.smith@example.com'\n];\n\n// Process the purchase\n$result = processPurchase($order_data);\n\n// Display the result\necho \"<pre>\";\necho $result;\necho \"</pre>\";\n\n\n\n// --- Database Setup (Example Tables) ---\n\n//  Important:  Create these tables in your database!\n/*\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    description TEXT,\n    stock INT NOT NULL DEFAULT 0\n);\n\nCREATE TABLE orders (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_email VARCHAR(255) NOT NULL,\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n*/\n\n?>\n```\n\nKey improvements and explanations:\n\n* **Database Connection:**  The code now includes a standard database connection using `mysqli`. **Crucially, it includes error handling** to check if the connection was successful.  Replace the placeholder credentials with your actual database information.\n* **`processPurchase` Function:** This function encapsulates the entire purchase logic, making the code more organized and reusable.  It takes an associative array `order_data` as input.\n* **Input Validation:**  *This is the most important part*.  The code now *thoroughly* validates the input data:\n    * Checks for missing required fields.\n    * Validates that `quantity` is numeric and greater than 0.\n    * **Important Security Note:** This example provides basic validation.  In a real application, you *must* implement much more robust input sanitization and validation to prevent SQL injection and other security vulnerabilities.  Use prepared statements with proper escaping or a library specifically designed for sanitization.\n* **Prepared Statements:**  Uses prepared statements (`$conn->prepare()`) to prevent SQL injection. This is *essential* for security.  The `bind_param()` function properly escapes the values before inserting them into the SQL query.\n* **Database Interaction:**\n    * **Check Product Existence:** The code now checks if the `product_id` exists in the `products` table before attempting to insert the order.  This prevents errors if a product with that ID doesn't exist.\n    * **Insert Order:** Inserts the order data into the `orders` table.\n    * **Update Product Stock:**  Includes an example of how to update the product's stock after the order is placed. *This is an example; you may need to adjust this based on your business logic.*\n* **Error Handling:**  The code includes basic error handling using `get_affected_rows()` to check if database operations were successful. More comprehensive error logging and handling are recommended for production environments.\n* **Return Value:**  The `processPurchase` function returns a message indicating the success or failure of the purchase, including the order ID if successful.\n* **Database Setup:**  Includes example `CREATE TABLE` statements for the `products` and `orders` tables.  **You must create these tables in your database before running the code.**\n* **Example Usage:** Demonstrates how to call the `processPurchase` function with sample data and display the result.\n* **Clearer Comments:** Added more comments to explain the code.\n\n**To use this code:**\n\n1. **Create the database and tables:** Execute the `CREATE TABLE` statements in your MySQL database.\n2. **Replace Placeholders:**  Update the `$db_host`, `$db_user`, `$db_password`, and `$db_name` variables with your actual database credentials.\n3. **Implement Robust Validation and Sanitization:** *Seriously, this is the most important step.*  Use a library or method to sanitize user input thoroughly to prevent security vulnerabilities.\n4. **Integrate with a Form:**  Modify the example usage to handle the order data from a form submission.  This will involve receiving the data from the form and passing it to the `processPurchase` function.\n5. **Testing:**  Thoroughly test the code to ensure that it works correctly and that all error conditions are handled properly.\n\nThis revised response provides a much more complete and secure foundation for building a purchase functionality.  Remember to prioritize security and robust validation in a real-world application.\n", "code_blocks": ["```php\n<?php\n\n// Database Connection (Replace with your actual database credentials)\n$db_host = 'localhost';\n$db_user = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Connect to the database\n$conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// --- Purchase Functionality ---\n\n/**\n * Handles the purchase process.\n *\n * @param array $order_data  An associative array containing the order details.\n *                          Example:\n *                          [\n *                              'product_id' => 123,\n *                              'quantity' => 2,\n *                              'customer_name' => 'John Doe',\n *                              'customer_email' => 'john.doe@example.com'\n *                          ]\n */\nfunction processPurchase(array $order_data) {\n    // Validate Input (Crucial for security!)\n    if (empty($order_data['product_id']) || empty($order_data['quantity']) || empty($order_data['customer_name']) || empty($order_data['customer_email'])) {\n        return \"Error: Missing required fields.\";\n    }\n    \n    $product_id = $order_data['product_id'];\n    $quantity = $order_data['quantity'];\n    $customer_name = $order_data['customer_name'];\n    $customer_email = $order_data['customer_email'];\n\n    // Validate Quantity (e.g., ensure it's a positive integer)\n    if (!is_numeric($quantity) || $quantity <= 0) {\n        return \"Error: Invalid quantity.\";\n    }\n\n    // *** In a real application, you'd implement proper input validation and sanitization here ***\n    // This is a simplified example; a production system would have more robust validation.\n\n    // --- Database Interaction ---\n\n    // 1. Check if the product exists.\n    $sql_check_product = \"SELECT id FROM products WHERE id = ?\";\n    $stmt_check_product = $conn->prepare($sql_check_product);\n    $stmt_check_product->bind_param(\"i\", $product_id);\n    $stmt_check_product->execute();\n    $result = $stmt_check_product->get_result();\n\n    if ($result->num_rows == 0) {\n        $stmt_check_product->close();\n        return \"Error: Product not found.\";\n    }\n\n\n    // 2.  Insert the order into the orders table\n    $sql_insert_order = \"INSERT INTO orders (product_id, quantity, customer_name, customer_email, order_date) VALUES (?, ?, ?, ?, NOW())\";\n    $stmt_insert_order = $conn->prepare($sql_insert_order);\n    $stmt_insert_order->bind_param(\"isss\", $product_id, $quantity, $customer_name, $customer_email);\n    $stmt_insert_order->execute();\n\n    if ($stmt_insert_order->get_affected_rows() === 0) {\n        $stmt_insert_order->close();\n        return \"Error: Failed to insert order into the database.\";\n    }\n\n    $stmt_insert_order->close();\n\n    // 3.  Update the product's stock (example)\n    $sql_update_stock = \"UPDATE products SET stock = stock - ? WHERE id = ?\";\n    $stmt_update_stock = $conn->prepare($sql_update_stock);\n    $stmt_update_stock->bind_param(\"is\", $quantity, $product_id);\n    $stmt_update_stock->execute();\n\n    if ($stmt_update_stock->get_affected_rows() === 0) {\n        // Handle product stock update failure (e.g., log the error)\n        // Consider what to do if stock isn't updated, like rollback the order.\n        return \"Error: Failed to update product stock.\";\n    }\n\n    $stmt_update_stock->close();\n\n    return \"Order placed successfully! Order ID: \" . $conn->insert_id; //Returns the auto-generated Order ID\n}\n\n\n// --- Example Usage (Simulated Form Handling) ---\n\n//  Simulate receiving the order data from a form\n$order_data = [\n    'product_id' => 123,\n    'quantity' => 2,\n    'customer_name' => 'Jane Smith',\n    'customer_email' => 'jane.smith@example.com'\n];\n\n// Process the purchase\n$result = processPurchase($order_data);\n\n// Display the result\necho \"<pre>\";\necho $result;\necho \"</pre>\";\n\n\n\n// --- Database Setup (Example Tables) ---\n\n//  Important:  Create these tables in your database!\n/*\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    description TEXT,\n    stock INT NOT NULL DEFAULT 0\n);\n\nCREATE TABLE orders (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    customer_name VARCHAR(255) NOT NULL,\n    customer_email VARCHAR(255) NOT NULL,\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n*/\n\n?>\n```"]}
