{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality in PHP:\n\n**Database Schema:**\n\nFor this example, we will use a simple database schema with the following tables:\n\n* `products`: stores product information\n* `orders`: stores order information\n* `order_items`: stores itemized information for each order\n\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE orders (\n  id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  order_date DATE,\n  total_cost DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n  id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  FOREIGN KEY (order_id) REFERENCES orders(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n**PHP Code:**\n\nWe will create two classes: `Product` and `Order`. The `Product` class will encapsulate the product's data, while the `Order` class will handle order creation, item addition, and processing.\n\n```php\n// Product.php\n\nclass Product {\n  private $id;\n  private $name;\n  private $price;\n\n  public function __construct($id, $name, $price) {\n    $this->id = $id;\n    $this->name = $name;\n    $this->price = $price;\n  }\n\n  public function getId() { return $this->id; }\n  public function getName() { return $this->name; }\n  public function getPrice() { return $this->price; }\n}\n\n// Order.php\n\nclass Order {\n  private $id;\n  private $customerName;\n  private $orderDate;\n  private $totalCost;\n\n  public function __construct($customerId, $customerName) {\n    $this->customerName = $customerName;\n    $this->orderDate = date('Y-m-d');\n    $this->totalCost = 0.00;\n  }\n\n  public function getId() { return $this->id; }\n  public function getCustomerName() { return $this->customerName; }\n  public function getOrderDate() { return $this->orderDate; }\n  public function getTotalCost() { return $this->totalCost; }\n\n  public function addItem(Product $product, $quantity) {\n    $item = new OrderItem($this->id, $product->getId(), $quantity);\n    $this->addOrderItem($item);\n  }\n\n  private function addOrderItem(OrderItem $item) {\n    // save order item to database\n    // for example:\n    // $sql = 'INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)';\n    // $stmt = $db->prepare($sql);\n    // $stmt->execute([$this->id, $item->getProductId(), $item->getQuantity()]);\n  }\n}\n\n// OrderItem.php\n\nclass OrderItem {\n  private $id;\n  private $orderId;\n  private $productId;\n  private $quantity;\n\n  public function __construct($orderId, $productId, $quantity) {\n    $this->orderId = $orderId;\n    $this->productId = $productId;\n    $this->quantity = $quantity;\n  }\n\n  public function getOrderId() { return $this->orderId; }\n  public function getProductId() { return $this->productId; }\n  public function getQuantity() { return $this->quantity; }\n}\n```\n\n**Controller Code:**\n\nWe will create a simple `PurchaseController` that handles the purchase process.\n\n```php\n// PurchaseController.php\n\nclass PurchaseController {\n  private $db;\n\n  public function __construct($db) {\n    $this->db = $db;\n  }\n\n  public function processOrder() {\n    if (isset($_POST['customer_name']) && isset($_POST['product_id'])) {\n      $customerId = $_SESSION['customer_id'];\n      $customerName = $_POST['customer_name'];\n      $productId = $_POST['product_id'];\n\n      // get product from database\n      $sql = 'SELECT * FROM products WHERE id = ?';\n      $stmt = $this->db->prepare($sql);\n      $stmt->execute([$productId]);\n      $product = $stmt->fetch();\n\n      if ($product) {\n        $order = new Order($customerId, $customerName);\n\n        // get product quantity from database\n        $quantitySql = 'SELECT * FROM products WHERE id = ?';\n        $quantityStmt = $this->db->prepare($quantitySql);\n        $quantityStmt->execute([$productId]);\n        $productQuantity = $quantityStmt->fetch()['quantity'];\n\n        if ($productQuantity >= $_POST['quantity']) {\n          // add item to order\n          $order->addItem(new Product($productId, $product['name'], $product['price']), $_POST['quantity']);\n\n          // save order to database\n          $sql = 'INSERT INTO orders (customer_name, total_cost) VALUES (?, ?)';\n          $stmt = $this->db->prepare($sql);\n          $stmt->execute([$order->getCustomerName(), $order->getTotalCost()]);\n\n          // update product quantity in database\n          $updateSql = 'UPDATE products SET quantity = quantity - ? WHERE id = ?';\n          $updateStmt = $this->db->prepare($updateSql);\n          $updateStmt->execute([$_POST['quantity'], $productId]);\n        }\n      }\n\n      header('Location: index.php');\n      exit;\n    }\n  }\n}\n```\n\n**HTML Code:**\n\nWe will create a simple form to allow users to select products and quantity.\n\n```html\n<!-- purchase.html -->\n\n<form action=\"index.php\" method=\"post\">\n  <label for=\"customer_name\">Customer Name:</label>\n  <input type=\"text\" id=\"customer_name\" name=\"customer_name\"><br><br>\n\n  <label for=\"product_id\">Product ID:</label>\n  <select id=\"product_id\" name=\"product_id\">\n    <?php foreach ($products as $product): ?>\n      <option value=\"<?php echo $product['id']; ?>\"><?php echo $product['name']; ?></option>\n    <?php endforeach; ?>\n  </select><br><br>\n\n  <label for=\"quantity\">Quantity:</label>\n  <input type=\"number\" id=\"quantity\" name=\"quantity\"><br><br>\n\n  <input type=\"submit\" value=\"Add to Cart\">\n</form>\n```\n\n**Note:** This is a simplified example and you should consider adding validation, security measures (e.g., sanitizing user input), and error handling. Additionally, this code assumes that the database connection is already established and available through the `$db` variable.", "code_blocks": [null, "```php\n// Product.php\n\nclass Product {\n  private $id;\n  private $name;\n  private $price;\n\n  public function __construct($id, $name, $price) {\n    $this->id = $id;\n    $this->name = $name;\n    $this->price = $price;\n  }\n\n  public function getId() { return $this->id; }\n  public function getName() { return $this->name; }\n  public function getPrice() { return $this->price; }\n}\n\n// Order.php\n\nclass Order {\n  private $id;\n  private $customerName;\n  private $orderDate;\n  private $totalCost;\n\n  public function __construct($customerId, $customerName) {\n    $this->customerName = $customerName;\n    $this->orderDate = date('Y-m-d');\n    $this->totalCost = 0.00;\n  }\n\n  public function getId() { return $this->id; }\n  public function getCustomerName() { return $this->customerName; }\n  public function getOrderDate() { return $this->orderDate; }\n  public function getTotalCost() { return $this->totalCost; }\n\n  public function addItem(Product $product, $quantity) {\n    $item = new OrderItem($this->id, $product->getId(), $quantity);\n    $this->addOrderItem($item);\n  }\n\n  private function addOrderItem(OrderItem $item) {\n    // save order item to database\n    // for example:\n    // $sql = 'INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)';\n    // $stmt = $db->prepare($sql);\n    // $stmt->execute([$this->id, $item->getProductId(), $item->getQuantity()]);\n  }\n}\n\n// OrderItem.php\n\nclass OrderItem {\n  private $id;\n  private $orderId;\n  private $productId;\n  private $quantity;\n\n  public function __construct($orderId, $productId, $quantity) {\n    $this->orderId = $orderId;\n    $this->productId = $productId;\n    $this->quantity = $quantity;\n  }\n\n  public function getOrderId() { return $this->orderId; }\n  public function getProductId() { return $this->productId; }\n  public function getQuantity() { return $this->quantity; }\n}\n```", "```php\n// PurchaseController.php\n\nclass PurchaseController {\n  private $db;\n\n  public function __construct($db) {\n    $this->db = $db;\n  }\n\n  public function processOrder() {\n    if (isset($_POST['customer_name']) && isset($_POST['product_id'])) {\n      $customerId = $_SESSION['customer_id'];\n      $customerName = $_POST['customer_name'];\n      $productId = $_POST['product_id'];\n\n      // get product from database\n      $sql = 'SELECT * FROM products WHERE id = ?';\n      $stmt = $this->db->prepare($sql);\n      $stmt->execute([$productId]);\n      $product = $stmt->fetch();\n\n      if ($product) {\n        $order = new Order($customerId, $customerName);\n\n        // get product quantity from database\n        $quantitySql = 'SELECT * FROM products WHERE id = ?';\n        $quantityStmt = $this->db->prepare($quantitySql);\n        $quantityStmt->execute([$productId]);\n        $productQuantity = $quantityStmt->fetch()['quantity'];\n\n        if ($productQuantity >= $_POST['quantity']) {\n          // add item to order\n          $order->addItem(new Product($productId, $product['name'], $product['price']), $_POST['quantity']);\n\n          // save order to database\n          $sql = 'INSERT INTO orders (customer_name, total_cost) VALUES (?, ?)';\n          $stmt = $this->db->prepare($sql);\n          $stmt->execute([$order->getCustomerName(), $order->getTotalCost()]);\n\n          // update product quantity in database\n          $updateSql = 'UPDATE products SET quantity = quantity - ? WHERE id = ?';\n          $updateStmt = $this->db->prepare($updateSql);\n          $updateStmt->execute([$_POST['quantity'], $productId]);\n        }\n      }\n\n      header('Location: index.php');\n      exit;\n    }\n  }\n}\n```", null]}
