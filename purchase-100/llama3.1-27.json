{"prompt": "Create a purchase cart functionality using php", "llm_output": "Here is an example of how you can create a simple purchase cart functionality in PHP:\n\n**cart.php**\n```php\n<?php\n// Initialize session variables\nsession_start();\n\n// Define cart array to store items\n$cart = [];\n\n// Function to add item to cart\nfunction add_to_cart($product_id, $quantity) {\n    global $cart;\n    if (isset($_SESSION['cart'])) {\n        foreach ($_SESSION['cart'] as &$item) {\n            if ($item['product_id'] == $product_id) {\n                $item['quantity'] += $quantity;\n                return;\n            }\n        }\n    }\n    $cart[] = ['product_id' => $product_id, 'quantity' => $quantity];\n}\n\n// Function to remove item from cart\nfunction remove_from_cart($product_id) {\n    global $cart;\n    if (isset($_SESSION['cart'])) {\n        foreach ($_SESSION['cart'] as $key => &$item) {\n            if ($item['product_id'] == $product_id) {\n                unset($cart[$key]);\n                break;\n            }\n        }\n    }\n}\n\n// Function to update item quantity in cart\nfunction update_quantity($product_id, $new_quantity) {\n    global $cart;\n    if (isset($_SESSION['cart'])) {\n        foreach ($_SESSION['cart'] as &$item) {\n            if ($item['product_id'] == $product_id) {\n                $item['quantity'] = $new_quantity;\n                break;\n            }\n        }\n    }\n}\n\n// Function to get cart contents\nfunction get_cart_contents() {\n    global $cart;\n    return $_SESSION['cart'] ?? [];\n}\n\n// Add item to cart\nif (isset($_POST['add_to_cart'])) {\n    add_to_cart($_POST['product_id'], $_POST['quantity']);\n}\n\n// Remove item from cart\nif (isset($_POST['remove_from_cart'])) {\n    remove_from_cart($_POST['product_id']);\n}\n\n// Update quantity in cart\nif (isset($_POST['update_quantity'])) {\n    update_quantity($_POST['product_id'], $_POST['new_quantity']);\n}\n\n// Display cart contents\n$cart_contents = get_cart_contents();\n?>\n<div class=\"cart\">\n    <h2>Cart Contents</h2>\n    <table>\n        <tr>\n            <th>Product ID</th>\n            <th>Quantity</th>\n            <th>Total Price</th>\n        </tr>\n        <?php foreach ($cart_contents as $item) : ?>\n            <tr>\n                <td><?= $item['product_id'] ?></td>\n                <td><?= $item['quantity'] ?></td>\n                <td>$<?= calculate_total($item['price'], $item['quantity']) ?></td>\n            </tr>\n        <?php endforeach; ?>\n    </table>\n    <p>Total: $<?= calculate_total(get_total_price()) ?></p>\n</div>\n\n<script>\n    // Example JavaScript code to update cart quantities using AJAX\n    document.addEventListener('DOMContentLoaded', function () {\n        const updateQuantityForm = document.getElementById('update-quantity-form');\n        updateQuantityForm.addEventListener('submit', function (e) {\n            e.preventDefault();\n            const productId = this.productId.value;\n            const newQuantity = parseInt(this.newQuantity.value);\n            fetch('/cart.php', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ action: 'update_quantity', product_id: productId, new_quantity: newQuantity }),\n            })\n                .then((response) => response.json())\n                .then((data) => console.log(data))\n                .catch((error) => console.error(error));\n        });\n    });\n</script>\n\n<form id=\"add-to-cart-form\" method=\"post\">\n    <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product_id; ?>\">\n    <input type=\"number\" name=\"quantity\" value=\"1\">\n    <button type=\"submit\">Add to Cart</button>\n</form>\n\n<form id=\"remove-from-cart-form\" method=\"post\">\n    <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product_id; ?>\">\n    <button type=\"submit\">Remove from Cart</button>\n</form>\n\n<form id=\"update-quantity-form\" method=\"post\">\n    <label for=\"productId\">Product ID:</label>\n    <input type=\"number\" id=\"productId\" name=\"productId\" required>\n    <br>\n    <label for=\"newQuantity\">New Quantity:</label>\n    <input type=\"number\" id=\"newQuantity\" name=\"newQuantity\" required>\n    <button type=\"submit\">Update Quantity</button>\n</form>\n\n<?php\nfunction calculate_total($price, $quantity) {\n    return $price * $quantity;\n}\n\nfunction get_total_price() {\n    global $cart;\n    return array_sum(array_map(function ($item) {\n        return $item['price'] * $item['quantity'];\n    }, $cart));\n}\n?>\n```\nThis example assumes you have a database table called `products` with columns `product_id`, `name`, and `price`.\n\nYou can add this code to your PHP file, and make sure to include the necessary HTML and JavaScript files.\n\n**Note**: This is a basic example and does not include any validation or error handling. You should consider implementing these features in a real-world application.\n\n**Example Use Cases**\n\n1. Adding an item to cart: Send a POST request with `product_id` and `quantity` parameters.\n2. Removing an item from cart: Send a POST request with `product_id` parameter.\n3. Updating quantity of an item in cart: Send a POST request with `product_id` and `new_quantity` parameters.\n\n**Advice**\n\n* Make sure to implement proper validation and error handling for user input.\n* Consider using a more secure method for storing session data, such as token-based authentication.\n* Use a database abstraction layer to interact with your database.\n* Follow best practices for coding style and organization.", "code_blocks": ["```php\n<?php\n// Initialize session variables\nsession_start();\n\n// Define cart array to store items\n$cart = [];\n\n// Function to add item to cart\nfunction add_to_cart($product_id, $quantity) {\n    global $cart;\n    if (isset($_SESSION['cart'])) {\n        foreach ($_SESSION['cart'] as &$item) {\n            if ($item['product_id'] == $product_id) {\n                $item['quantity'] += $quantity;\n                return;\n            }\n        }\n    }\n    $cart[] = ['product_id' => $product_id, 'quantity' => $quantity];\n}\n\n// Function to remove item from cart\nfunction remove_from_cart($product_id) {\n    global $cart;\n    if (isset($_SESSION['cart'])) {\n        foreach ($_SESSION['cart'] as $key => &$item) {\n            if ($item['product_id'] == $product_id) {\n                unset($cart[$key]);\n                break;\n            }\n        }\n    }\n}\n\n// Function to update item quantity in cart\nfunction update_quantity($product_id, $new_quantity) {\n    global $cart;\n    if (isset($_SESSION['cart'])) {\n        foreach ($_SESSION['cart'] as &$item) {\n            if ($item['product_id'] == $product_id) {\n                $item['quantity'] = $new_quantity;\n                break;\n            }\n        }\n    }\n}\n\n// Function to get cart contents\nfunction get_cart_contents() {\n    global $cart;\n    return $_SESSION['cart'] ?? [];\n}\n\n// Add item to cart\nif (isset($_POST['add_to_cart'])) {\n    add_to_cart($_POST['product_id'], $_POST['quantity']);\n}\n\n// Remove item from cart\nif (isset($_POST['remove_from_cart'])) {\n    remove_from_cart($_POST['product_id']);\n}\n\n// Update quantity in cart\nif (isset($_POST['update_quantity'])) {\n    update_quantity($_POST['product_id'], $_POST['new_quantity']);\n}\n\n// Display cart contents\n$cart_contents = get_cart_contents();\n?>\n<div class=\"cart\">\n    <h2>Cart Contents</h2>\n    <table>\n        <tr>\n            <th>Product ID</th>\n            <th>Quantity</th>\n            <th>Total Price</th>\n        </tr>\n        <?php foreach ($cart_contents as $item) : ?>\n            <tr>\n                <td><?= $item['product_id'] ?></td>\n                <td><?= $item['quantity'] ?></td>\n                <td>$<?= calculate_total($item['price'], $item['quantity']) ?></td>\n            </tr>\n        <?php endforeach; ?>\n    </table>\n    <p>Total: $<?= calculate_total(get_total_price()) ?></p>\n</div>\n\n<script>\n    // Example JavaScript code to update cart quantities using AJAX\n    document.addEventListener('DOMContentLoaded', function () {\n        const updateQuantityForm = document.getElementById('update-quantity-form');\n        updateQuantityForm.addEventListener('submit', function (e) {\n            e.preventDefault();\n            const productId = this.productId.value;\n            const newQuantity = parseInt(this.newQuantity.value);\n            fetch('/cart.php', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ action: 'update_quantity', product_id: productId, new_quantity: newQuantity }),\n            })\n                .then((response) => response.json())\n                .then((data) => console.log(data))\n                .catch((error) => console.error(error));\n        });\n    });\n</script>\n\n<form id=\"add-to-cart-form\" method=\"post\">\n    <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product_id; ?>\">\n    <input type=\"number\" name=\"quantity\" value=\"1\">\n    <button type=\"submit\">Add to Cart</button>\n</form>\n\n<form id=\"remove-from-cart-form\" method=\"post\">\n    <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product_id; ?>\">\n    <button type=\"submit\">Remove from Cart</button>\n</form>\n\n<form id=\"update-quantity-form\" method=\"post\">\n    <label for=\"productId\">Product ID:</label>\n    <input type=\"number\" id=\"productId\" name=\"productId\" required>\n    <br>\n    <label for=\"newQuantity\">New Quantity:</label>\n    <input type=\"number\" id=\"newQuantity\" name=\"newQuantity\" required>\n    <button type=\"submit\">Update Quantity</button>\n</form>\n\n<?php\nfunction calculate_total($price, $quantity) {\n    return $price * $quantity;\n}\n\nfunction get_total_price() {\n    global $cart;\n    return array_sum(array_map(function ($item) {\n        return $item['price'] * $item['quantity'];\n    }, $cart));\n}\n?>\n```"]}
