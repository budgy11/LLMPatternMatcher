{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality in PHP:\n\n**Note:** This is a simplified example and you should consider implementing security measures such as user authentication, payment gateways, and validation to make it production-ready.\n\n**Database Schema:**\n\nFor this example, we'll assume the following database schema:\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE orders (\n  id INT PRIMARY KEY,\n  user_id INT,\n  total_cost DECIMAL(10,2),\n  status ENUM('pending', 'shipped', 'delivered')\n);\n```\n**PHP Code:**\n\n```php\n// db.php (database connection file)\n<?php\n$servername = \"localhost\";\n$username = \"root\";\n$password = \"\";\n$dbname = \"mydb\";\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n?>\n```\n\n```php\n// purchase.php (purchase functionality file)\n<?php\n\nrequire_once 'db.php';\n\n// Check if the user is logged in\nif (!isset($_SESSION['user_id'])) {\n    header('Location: login.php');\n    exit;\n}\n\n// Get the product ID from the URL parameter\n$product_id = $_GET['product_id'];\n\n// Check if the product exists\n$query = \"SELECT * FROM products WHERE id = '$product_id'\";\n$result = $conn->query($query);\nif ($result->num_rows > 0) {\n    // Product found, get its details\n    $row = $result->fetch_assoc();\n    $product_name = $row['name'];\n    $product_price = $row['price'];\n\n    // Check if the product is in stock (for demonstration purposes only)\n    $stock_query = \"SELECT * FROM products WHERE id = '$product_id' AND quantity > 0\";\n    $stock_result = $conn->query($stock_query);\n    if ($stock_result->num_rows > 0) {\n        // Product is in stock, proceed with purchase\n        // Get the user's current cart contents (for demonstration purposes only)\n        $cart_query = \"SELECT * FROM orders WHERE user_id = $_SESSION[user_id] AND status = 'pending'\";\n        $cart_result = $conn->query($cart_query);\n        if ($cart_result->num_rows > 0) {\n            // User has a pending order, update its total cost\n            while ($cart_row = $cart_result->fetch_assoc()) {\n                $order_id = $cart_row['id'];\n                $total_cost = $cart_row['total_cost'] + $product_price;\n                $query = \"UPDATE orders SET total_cost = '$total_cost' WHERE id = '$order_id'\";\n                $conn->query($query);\n            }\n        } else {\n            // User does not have a pending order, create one\n            $query = \"INSERT INTO orders (user_id, total_cost) VALUES ($_SESSION[user_id], '$product_price')\";\n            $conn->query($query);\n            $order_id = $conn->insert_id;\n        }\n\n        // Add the product to the user's cart\n        $query = \"INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', 1)\";\n        $conn->query($query);\n\n        // Update the product's stock level\n        $query = \"UPDATE products SET quantity = quantity - 1 WHERE id = '$product_id'\";\n        $conn->query($query);\n\n        // Redirect to a success page or display a message\n        header('Location: purchase-success.php');\n        exit;\n    } else {\n        // Product is out of stock, display an error message\n        echo \"Sorry, this product is currently out of stock.\";\n    }\n} else {\n    // Product not found, display an error message\n    echo \"Product not found.\";\n}\n\n?>\n```\n**Explanation:**\n\n1. The `db.php` file connects to the database and establishes a connection object.\n2. The `purchase.php` file checks if the user is logged in (using session data) and gets the product ID from the URL parameter.\n3. It then checks if the product exists in the database, and if it does, retrieves its details.\n4. If the product is in stock, it proceeds with the purchase by updating the user's cart contents (or creating a new order) and adding the product to their cart.\n5. Finally, it updates the product's stock level and redirects the user to a success page or displays an error message.\n\n**Note:** This is a basic example, and you should consider implementing additional features such as:\n\n* User authentication and authorization\n* Payment gateways (e.g., PayPal, Stripe)\n* Validation and sanitization of user input data\n* Error handling and logging\n* Security measures to prevent SQL injection and cross-site scripting attacks\n\nRemember to replace the placeholders (`localhost`, `root`, etc.) with your actual database credentials.", "code_blocks": [null, "```php\n// db.php (database connection file)\n<?php\n$servername = \"localhost\";\n$username = \"root\";\n$password = \"\";\n$dbname = \"mydb\";\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n?>\n```", "```php\n// purchase.php (purchase functionality file)\n<?php\n\nrequire_once 'db.php';\n\n// Check if the user is logged in\nif (!isset($_SESSION['user_id'])) {\n    header('Location: login.php');\n    exit;\n}\n\n// Get the product ID from the URL parameter\n$product_id = $_GET['product_id'];\n\n// Check if the product exists\n$query = \"SELECT * FROM products WHERE id = '$product_id'\";\n$result = $conn->query($query);\nif ($result->num_rows > 0) {\n    // Product found, get its details\n    $row = $result->fetch_assoc();\n    $product_name = $row['name'];\n    $product_price = $row['price'];\n\n    // Check if the product is in stock (for demonstration purposes only)\n    $stock_query = \"SELECT * FROM products WHERE id = '$product_id' AND quantity > 0\";\n    $stock_result = $conn->query($stock_query);\n    if ($stock_result->num_rows > 0) {\n        // Product is in stock, proceed with purchase\n        // Get the user's current cart contents (for demonstration purposes only)\n        $cart_query = \"SELECT * FROM orders WHERE user_id = $_SESSION[user_id] AND status = 'pending'\";\n        $cart_result = $conn->query($cart_query);\n        if ($cart_result->num_rows > 0) {\n            // User has a pending order, update its total cost\n            while ($cart_row = $cart_result->fetch_assoc()) {\n                $order_id = $cart_row['id'];\n                $total_cost = $cart_row['total_cost'] + $product_price;\n                $query = \"UPDATE orders SET total_cost = '$total_cost' WHERE id = '$order_id'\";\n                $conn->query($query);\n            }\n        } else {\n            // User does not have a pending order, create one\n            $query = \"INSERT INTO orders (user_id, total_cost) VALUES ($_SESSION[user_id], '$product_price')\";\n            $conn->query($query);\n            $order_id = $conn->insert_id;\n        }\n\n        // Add the product to the user's cart\n        $query = \"INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', 1)\";\n        $conn->query($query);\n\n        // Update the product's stock level\n        $query = \"UPDATE products SET quantity = quantity - 1 WHERE id = '$product_id'\";\n        $conn->query($query);\n\n        // Redirect to a success page or display a message\n        header('Location: purchase-success.php');\n        exit;\n    } else {\n        // Product is out of stock, display an error message\n        echo \"Sorry, this product is currently out of stock.\";\n    }\n} else {\n    // Product not found, display an error message\n    echo \"Product not found.\";\n}\n\n?>\n```"]}
