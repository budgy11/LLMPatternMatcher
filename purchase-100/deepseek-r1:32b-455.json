{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, the user wants to create a purchase functionality using PHP. I need to figure out how to approach this.\n\nFirst, I should outline the main components involved in a purchase process. There's the product listing, adding items to the cart, viewing the cart, and then making the purchase.\n\nI'll start by setting up the database. The products table will hold all the product details like id, name, price, description, and stock. Then, an orders table is needed to store each order with user info and a foreign key to track the product.\n\nNext, I'll need some PHP classes. A Product class to handle product data and methods for adding to cart, checking stock, etc. An Order class will manage the order creation and payment processing.\n\nFor the user interface, I'll create HTML pages. The index page will display all products with add to cart buttons. Each button should send an AJAX request to add the item without reloading the page. Then, a view_cart.php will show the selected items and let users adjust quantities or remove items.\n\nThe checkout process involves displaying the cart contents and collecting user details for shipping and payment. I'll use Stripe for payment processing since it's popular and has good documentation. After successful payment, an order is created in the database with all relevant details.\n\nI should handle sessions to keep track of the cart across pages. Each time a product is added or removed, the session updates accordingly. Also, form validation on the frontend will ensure users provide necessary info before processing payment.\n\nSecurity is important, so I'll include CSRF protection tokens and use prepared statements in database queries to prevent SQL injection. Error handling will be done both in PHP and JavaScript to catch any issues during the process.\n\nFinally, after a successful purchase, redirecting the user to an order confirmation page with their details and a thank you message makes sense. Testing each step thoroughly is crucial to ensure everything works smoothly from adding products to completing the payment.\n</think>\n\nHere's an example of how to create a purchase functionality using PHP. This example includes:\n\n1. A product listing page\n2. An add to cart functionality\n3. A view cart functionality\n4. Checkout process\n5. Payment processing\n\nFirst, let's create the database tables:\n\n```sql\nCREATE TABLE products (\n    id INT(11) AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    description TEXT,\n    stock INT(11)\n);\n\nCREATE TABLE orders (\n    id INT(11) AUTO_INCREMENT PRIMARY KEY,\n    user_name VARCHAR(255),\n    email VARCHAR(255),\n    address TEXT,\n    product_id INT(11),\n    quantity INT(11),\n    total DECIMAL(10,2),\n    order_date DATETIME,\n    FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\nNow, let's create the PHP classes and functions:\n\n```php\n// config.php - Database configuration\n<?php\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'root';\n$password = '';\n\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n?>\n\n// product_class.php\n<?php\nclass Product {\n    private $id;\n    private $name;\n    private $price;\n    private $description;\n    private $stock;\n\n    public function __construct($id, $name, $price, $description, $stock) {\n        $this->id = $id;\n        $this->name = $name;\n        $this->price = $price;\n        $this->description = $description;\n        $this->stock = $stock;\n    }\n\n    public function getId() {\n        return $this->id;\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function getPrice() {\n        return $this->price;\n    }\n\n    public function getDescription() {\n        return $this->description;\n    }\n\n    public function getStock() {\n        return $this->stock;\n    }\n\n    public static function getAllProducts($conn) {\n        $stmt = $conn->prepare(\"SELECT * FROM products\");\n        $stmt->execute();\n        $result = $stmt->get_result();\n        \n        $products = array();\n        while ($row = $result->fetch_assoc()) {\n            $product = new Product(\n                $row['id'],\n                $row['name'],\n                $row['price'],\n                $row['description'],\n                $row['stock']\n            );\n            array_push($products, $product);\n        }\n        return $products;\n    }\n\n    public static function getProductById($conn, $id) {\n        $stmt = $conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n        $stmt->bind_param(\"i\", $id);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        if ($row = $result->fetch_assoc()) {\n            return new Product(\n                $row['id'],\n                $row['name'],\n                $row['price'],\n                $row['description'],\n                $row['stock']\n            );\n        } else {\n            return null;\n        }\n    }\n\n    public function addToCart($conn, $userId) {\n        // Add to cart logic\n    }\n\n    public static function removeFromCart($conn, $cartId) {\n        // Remove from cart logic\n    }\n\n    public static function updateCartQuantity($conn, $cartId, $quantity) {\n        // Update quantity in cart logic\n    }\n}\n?>\n\n// order_class.php\n<?php\nclass Order {\n    private $id;\n    private $user_name;\n    private $email;\n    private $address;\n    private $product_id;\n    private $quantity;\n    private $total;\n    private $order_date;\n\n    public function __construct($id, $user_name, $email, $address, $product_id, $quantity, $total, $order_date) {\n        $this->id = $id;\n        $this->user_name = $user_name;\n        $this->email = $email;\n        $this->address = $address;\n        $this->product_id = $product_id;\n        $this->quantity = $quantity;\n        $this->total = $total;\n        $this->order_date = $order_date;\n    }\n\n    public function getId() {\n        return $this->id;\n    }\n\n    public function getUser_name() {\n        return $this->user_name;\n    }\n\n    public function getEmail() {\n        return $this->email;\n    }\n\n    public function getAddress() {\n        return $this->address;\n    }\n\n    public function getProduct_id() {\n        return $this->product_id;\n    }\n\n    public function getQuantity() {\n        return $this->quantity;\n    }\n\n    public function getTotal() {\n        return $this->total;\n    }\n\n    public function getOrder_date() {\n        return $this->order_date;\n    }\n\n    public static function placeOrder($conn, $user_name, $email, $address, $product_id, $quantity) {\n        $subtotal = Product::getProductById($conn, $product_id)->getPrice() * $quantity;\n\n        $stmt = $conn->prepare(\"INSERT INTO orders (user_name, email, address, product_id, quantity, total, order_date) VALUES (?, ?, ?, ?, ?, ?, NOW())\");\n        $stmt->bind_param(\"ssisdd\", $user_name, $email, $address, $product_id, $quantity, $subtotal);\n        if ($stmt->execute()) {\n            // Update product stock\n            Product::updateStock($conn, $product_id, $quantity);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static function updateStock($conn, $id, $quantity) {\n        $current_stock = Product::getProductById($conn, $id)->getStock();\n        if ($current_stock >= $quantity) {\n            $new_stock = $current_stock - $quantity;\n            $stmt = $conn->prepare(\"UPDATE products SET stock = ? WHERE id = ?\");\n            $stmt->bind_param(\"ii\", $new_stock, $id);\n            return $stmt->execute();\n        } else {\n            return false;\n        }\n    }\n\n    public static function getAllOrders($conn) {\n        // Get all orders logic\n    }\n\n    public static function getOrderById($conn, $id) {\n        // Get order by id logic\n    }\n}\n?>\n\n// cart_class.php\n<?php\nsession_start();\n\nclass Cart {\n    private $cart_id;\n    private $product_id;\n    private $user_id;\n    private $quantity;\n\n    public function __construct($cart_id, $product_id, $user_id, $quantity) {\n        $this->cart_id = $cart_id;\n        $this->product_id = $product_id;\n        $this->user_id = $user_id;\n        $this->quantity = $quantity;\n    }\n\n    public function getCart_id() {\n        return $this->cart_id;\n    }\n\n    public function getProduct_id() {\n        return $this->product_id;\n    }\n\n    public function getUser_id() {\n        return $this->user_id;\n    }\n\n    public function getQuantity() {\n        return $this->quantity;\n    }\n\n    public static function addToCart($conn, $product_id, $user_id, $quantity) {\n        $stmt = $conn->prepare(\"INSERT INTO cart (product_id, user_id, quantity) VALUES (?, ?, ?)\");\n        $stmt->bind_param(\"iii\", $product_id, $user_id, $quantity);\n        if ($stmt->execute()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static function removeFromCart($conn, $cart_id) {\n        $stmt = $conn->prepare(\"DELETE FROM cart WHERE cart_id = ?\");\n        $stmt->bind_param(\"i\", $cart_id);\n        if ($stmt->execute()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static function updateQuantity($conn, $cart_id, $quantity) {\n        $stmt = $conn->prepare(\"UPDATE cart SET quantity = ? WHERE cart_id = ?\");\n        $stmt->bind_param(\"ii\", $quantity, $cart_id);\n        if ($stmt->execute()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static function getCartItems($conn, $user_id) {\n        $stmt = $conn->prepare(\"SELECT * FROM cart WHERE user_id = ?\");\n        $stmt->bind_param(\"i\", $user_id);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        $cart_items = array();\n        while ($row = $result->fetch_assoc()) {\n            $product = Product::getProductById($conn, $row['product_id']);\n            $cart_item = new Cart(\n                $row['cart_id'],\n                $row['product_id'],\n                $row['user_id'],\n                $row['quantity']\n            );\n            array_push($cart_items, array('cart' => $cart_item, 'product' => $product));\n        }\n        return $cart_items;\n    }\n}\n?>\n```\n\nNow, let's create the HTML pages:\n\n1. index.php - Product listing page\n\n```php\n<?php include_once(\"config.php\"); ?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product Listing</title>\n</head>\n<body>\n    <?php\n        $products = Product::getAllProducts($conn);\n        foreach ($products as $product) {\n            echo \"<div>\";\n            echo \"<h2>\" . $product->getName() . \"</h2>\";\n            echo \"<p>Price: $\" . number_format($product->getPrice(), 2) . \"</p>\";\n            echo \"<p>Description: \" . $product->getDescription() . \"</p>\";\n            echo \"<p>Stock: \" . $product->getStock() . \"</p>\";\n            echo \"<form action='add_to_cart.php' method='post'>\";\n            echo \"<input type='hidden' name='product_id' value='\" . $product->getId() . \"'>\";\n            echo \"<input type='number' name='quantity' min='1' max='\" . $product->getStock() . \"' value='1'>\";\n            echo \"<button type='submit'>Add to Cart</button>\";\n            echo \"</form>\";\n            echo \"</div><br/>\";\n        }\n    ?>\n</body>\n</html>\n```\n\n2. add_to_cart.php\n\n```php\n<?php include_once(\"config.php\"); session_start(); ?>\n\n<?php\nif (isset($_POST['product_id']) && isset($_POST['quantity'])) {\n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n\n    if (!empty($product_id) && !empty($quantity)) {\n        if (Cart::addToCart($conn, $product_id, $_SESSION['user_id'], $quantity)) {\n            echo \"<script>alert('Product added to cart');</script>\";\n            echo \"<script>window.location.href='index.php';</script>\";\n        } else {\n            echo \"<script>alert('Error adding product to cart');</script>\";\n            echo \"<script>window.location.href='index.php';</script>\";\n        }\n    }\n}\n?>\n```\n\n3. view_cart.php\n\n```php\n<?php include_once(\"config.php\"); session_start(); ?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>View Cart</title>\n</head>\n<body>\n    <?php\n        $cart_items = Cart::getCartItems($conn, $_SESSION['user_id']);\n        if (!empty($cart_items)) {\n            foreach ($cart_items as $item) {\n                echo \"<div>\";\n                echo \"<h2>\" . $item['product']->getName() . \"</h2>\";\n                echo \"<p>Price: $\" . number_format($item['product']->getPrice(), 2) . \"</p>\";\n                echo \"<p>Quantity: \" . $item['cart']->getQuantity() . \"</p>\";\n                echo \"<form action='update_cart.php' method='post'>\";\n                echo \"<input type='hidden' name='cart_id' value='\" . $item['cart']->getCart_id() . \"'>\";\n                echo \"<input type='number' name='quantity' min='1' max='\" . $item['product']->getStock() . \"' value='\" . $item['cart']->getQuantity() . \"'>\";\n                echo \"<button type='submit'>Update Quantity</button>\";\n                echo \"</form>\";\n                echo \"<a href='remove_from_cart.php?cart_id=\" . $item['cart']->getCart_id() . \"'>Remove from Cart</a>\";\n                echo \"</div><br/>\";\n            }\n        } else {\n            echo \"<p>Your cart is empty.</p>\";\n        }\n    ?>\n    <a href=\"index.php\">Continue Shopping</a> |\n    <?php if (!empty($cart_items)) { ?>\n        <a href=\"checkout.php\">Checkout</a>\n    <?php } ?>\n</body>\n</html>\n```\n\n4. checkout.php\n\n```php\n<?php include_once(\"config.php\"); session_start(); ?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Checkout</title>\n</head>\n<body>\n    <?php\n        $cart_items = Cart::getCartItems($conn, $_SESSION['user_id']);\n        if (!empty($cart_items)) {\n            echo \"<h2>Your Order</h2>\";\n            foreach ($cart_items as $item) {\n                echo \"<div>\";\n                echo \"<p>\" . $item['product']->getName() . \"</p>\";\n                echo \"<p>Price: $\" . number_format($item['product']->getPrice(), 2) . \"</p>\";\n                echo \"<p>Quantity: \" . $item['cart']->getQuantity() . \"</p>\";\n                echo \"<p>Total: $\" . number_format($item['product']->getPrice() * $item['cart']->getQuantity(), 2) . \"</p>\";\n                echo \"</div><br/>\";\n            }\n\n            echo \"<h3>Shipping Information</h3>\";\n            echo \"<form action='process_payment.php' method='post'>\";\n            echo \"<input type='text' name='user_name' placeholder='Name' required><br/>\";\n            echo \"<input type='email' name='email' placeholder='Email' required><br/>\";\n            echo \"<textarea name='address' placeholder='Address' required></textarea><br/>\";\n            echo \"<button type='submit'>Complete Purchase</button>\";\n            echo \"</form>\";\n        } else {\n            echo \"<p>Your cart is empty.</p>\";\n        }\n    ?>\n</body>\n</html>\n```\n\n5. process_payment.php\n\n```php\n<?php include_once(\"config.php\"); session_start(); ?>\n\n<?php\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $user_name = $_POST['user_name'];\n    $email = $_POST['email'];\n    $address = $_POST['address'];\n\n    // Get cart items\n    $cart_items = Cart::getCartItems($conn, $_SESSION['user_id']);\n\n    if (!empty($cart_items)) {\n        foreach ($cart_items as $item) {\n            $product_id = $item['cart']->getProduct_id();\n            $quantity = $item['cart']->getQuantity();\n\n            // Place order\n            if (Order::placeOrder($conn, $user_name, $email, $address, $product_id, $quantity)) {\n                // Remove item from cart\n                Cart::removeFromCart($conn, $item['cart']->getCart_id());\n            } else {\n                die(\"Error placing order\");\n            }\n        }\n\n        echo \"<script>alert('Order placed successfully');</script>\";\n        echo \"<script>window.location.href='order_confirmation.php';</script>\";\n    } else {\n        echo \"<script>alert('Your cart is empty');</script>\";\n        echo \"<script>window.location.href='index.php';</script>\";\n    }\n}\n?>\n```\n\n6. order_confirmation.php\n\n```php\n<?php include_once(\"config.php\"); session_start(); ?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Order Confirmation</title>\n</head>\n<body>\n    <h2>Thank you for your purchase!</h2>\n    <?php\n        // You can display the order details here if needed\n        echo \"<p>Your order has been received.</p>\";\n    ?>\n    <a href=\"index.php\">Back to Home Page</a>\n</body>\n</html>\n```\n\nThis is a basic implementation of a purchase functionality using PHP. It includes:\n\n- Product listing with add to cart functionality\n- Cart management (add, remove, update quantity)\n- Checkout process with shipping information\n- Order placement and confirmation\n- Payment processing (simplified for demonstration)\n\nTo make this fully functional, you would need to:\n\n1. Set up a proper payment gateway (e.g., Stripe, PayPal)\n2. Implement user authentication\n3. Add more error handling and validation\n4. Improve the user interface with CSS\n5. Add more features like shipping options, discounts, etc.\n\nRemember to secure your application by implementing CSRF protection, sanitizing inputs, and using prepared statements for database queries to prevent SQL injection.", "code_blocks": [null, "```php\n// config.php - Database configuration\n<?php\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'root';\n$password = '';\n\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n?>\n\n// product_class.php\n<?php\nclass Product {\n    private $id;\n    private $name;\n    private $price;\n    private $description;\n    private $stock;\n\n    public function __construct($id, $name, $price, $description, $stock) {\n        $this->id = $id;\n        $this->name = $name;\n        $this->price = $price;\n        $this->description = $description;\n        $this->stock = $stock;\n    }\n\n    public function getId() {\n        return $this->id;\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function getPrice() {\n        return $this->price;\n    }\n\n    public function getDescription() {\n        return $this->description;\n    }\n\n    public function getStock() {\n        return $this->stock;\n    }\n\n    public static function getAllProducts($conn) {\n        $stmt = $conn->prepare(\"SELECT * FROM products\");\n        $stmt->execute();\n        $result = $stmt->get_result();\n        \n        $products = array();\n        while ($row = $result->fetch_assoc()) {\n            $product = new Product(\n                $row['id'],\n                $row['name'],\n                $row['price'],\n                $row['description'],\n                $row['stock']\n            );\n            array_push($products, $product);\n        }\n        return $products;\n    }\n\n    public static function getProductById($conn, $id) {\n        $stmt = $conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n        $stmt->bind_param(\"i\", $id);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        if ($row = $result->fetch_assoc()) {\n            return new Product(\n                $row['id'],\n                $row['name'],\n                $row['price'],\n                $row['description'],\n                $row['stock']\n            );\n        } else {\n            return null;\n        }\n    }\n\n    public function addToCart($conn, $userId) {\n        // Add to cart logic\n    }\n\n    public static function removeFromCart($conn, $cartId) {\n        // Remove from cart logic\n    }\n\n    public static function updateCartQuantity($conn, $cartId, $quantity) {\n        // Update quantity in cart logic\n    }\n}\n?>\n\n// order_class.php\n<?php\nclass Order {\n    private $id;\n    private $user_name;\n    private $email;\n    private $address;\n    private $product_id;\n    private $quantity;\n    private $total;\n    private $order_date;\n\n    public function __construct($id, $user_name, $email, $address, $product_id, $quantity, $total, $order_date) {\n        $this->id = $id;\n        $this->user_name = $user_name;\n        $this->email = $email;\n        $this->address = $address;\n        $this->product_id = $product_id;\n        $this->quantity = $quantity;\n        $this->total = $total;\n        $this->order_date = $order_date;\n    }\n\n    public function getId() {\n        return $this->id;\n    }\n\n    public function getUser_name() {\n        return $this->user_name;\n    }\n\n    public function getEmail() {\n        return $this->email;\n    }\n\n    public function getAddress() {\n        return $this->address;\n    }\n\n    public function getProduct_id() {\n        return $this->product_id;\n    }\n\n    public function getQuantity() {\n        return $this->quantity;\n    }\n\n    public function getTotal() {\n        return $this->total;\n    }\n\n    public function getOrder_date() {\n        return $this->order_date;\n    }\n\n    public static function placeOrder($conn, $user_name, $email, $address, $product_id, $quantity) {\n        $subtotal = Product::getProductById($conn, $product_id)->getPrice() * $quantity;\n\n        $stmt = $conn->prepare(\"INSERT INTO orders (user_name, email, address, product_id, quantity, total, order_date) VALUES (?, ?, ?, ?, ?, ?, NOW())\");\n        $stmt->bind_param(\"ssisdd\", $user_name, $email, $address, $product_id, $quantity, $subtotal);\n        if ($stmt->execute()) {\n            // Update product stock\n            Product::updateStock($conn, $product_id, $quantity);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static function updateStock($conn, $id, $quantity) {\n        $current_stock = Product::getProductById($conn, $id)->getStock();\n        if ($current_stock >= $quantity) {\n            $new_stock = $current_stock - $quantity;\n            $stmt = $conn->prepare(\"UPDATE products SET stock = ? WHERE id = ?\");\n            $stmt->bind_param(\"ii\", $new_stock, $id);\n            return $stmt->execute();\n        } else {\n            return false;\n        }\n    }\n\n    public static function getAllOrders($conn) {\n        // Get all orders logic\n    }\n\n    public static function getOrderById($conn, $id) {\n        // Get order by id logic\n    }\n}\n?>\n\n// cart_class.php\n<?php\nsession_start();\n\nclass Cart {\n    private $cart_id;\n    private $product_id;\n    private $user_id;\n    private $quantity;\n\n    public function __construct($cart_id, $product_id, $user_id, $quantity) {\n        $this->cart_id = $cart_id;\n        $this->product_id = $product_id;\n        $this->user_id = $user_id;\n        $this->quantity = $quantity;\n    }\n\n    public function getCart_id() {\n        return $this->cart_id;\n    }\n\n    public function getProduct_id() {\n        return $this->product_id;\n    }\n\n    public function getUser_id() {\n        return $this->user_id;\n    }\n\n    public function getQuantity() {\n        return $this->quantity;\n    }\n\n    public static function addToCart($conn, $product_id, $user_id, $quantity) {\n        $stmt = $conn->prepare(\"INSERT INTO cart (product_id, user_id, quantity) VALUES (?, ?, ?)\");\n        $stmt->bind_param(\"iii\", $product_id, $user_id, $quantity);\n        if ($stmt->execute()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static function removeFromCart($conn, $cart_id) {\n        $stmt = $conn->prepare(\"DELETE FROM cart WHERE cart_id = ?\");\n        $stmt->bind_param(\"i\", $cart_id);\n        if ($stmt->execute()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static function updateQuantity($conn, $cart_id, $quantity) {\n        $stmt = $conn->prepare(\"UPDATE cart SET quantity = ? WHERE cart_id = ?\");\n        $stmt->bind_param(\"ii\", $quantity, $cart_id);\n        if ($stmt->execute()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static function getCartItems($conn, $user_id) {\n        $stmt = $conn->prepare(\"SELECT * FROM cart WHERE user_id = ?\");\n        $stmt->bind_param(\"i\", $user_id);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        $cart_items = array();\n        while ($row = $result->fetch_assoc()) {\n            $product = Product::getProductById($conn, $row['product_id']);\n            $cart_item = new Cart(\n                $row['cart_id'],\n                $row['product_id'],\n                $row['user_id'],\n                $row['quantity']\n            );\n            array_push($cart_items, array('cart' => $cart_item, 'product' => $product));\n        }\n        return $cart_items;\n    }\n}\n?>\n```", "```php\n<?php include_once(\"config.php\"); ?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product Listing</title>\n</head>\n<body>\n    <?php\n        $products = Product::getAllProducts($conn);\n        foreach ($products as $product) {\n            echo \"<div>\";\n            echo \"<h2>\" . $product->getName() . \"</h2>\";\n            echo \"<p>Price: $\" . number_format($product->getPrice(), 2) . \"</p>\";\n            echo \"<p>Description: \" . $product->getDescription() . \"</p>\";\n            echo \"<p>Stock: \" . $product->getStock() . \"</p>\";\n            echo \"<form action='add_to_cart.php' method='post'>\";\n            echo \"<input type='hidden' name='product_id' value='\" . $product->getId() . \"'>\";\n            echo \"<input type='number' name='quantity' min='1' max='\" . $product->getStock() . \"' value='1'>\";\n            echo \"<button type='submit'>Add to Cart</button>\";\n            echo \"</form>\";\n            echo \"</div><br/>\";\n        }\n    ?>\n</body>\n</html>\n```", "```php\n<?php include_once(\"config.php\"); session_start(); ?>\n\n<?php\nif (isset($_POST['product_id']) && isset($_POST['quantity'])) {\n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n\n    if (!empty($product_id) && !empty($quantity)) {\n        if (Cart::addToCart($conn, $product_id, $_SESSION['user_id'], $quantity)) {\n            echo \"<script>alert('Product added to cart');</script>\";\n            echo \"<script>window.location.href='index.php';</script>\";\n        } else {\n            echo \"<script>alert('Error adding product to cart');</script>\";\n            echo \"<script>window.location.href='index.php';</script>\";\n        }\n    }\n}\n?>\n```", "```php\n<?php include_once(\"config.php\"); session_start(); ?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>View Cart</title>\n</head>\n<body>\n    <?php\n        $cart_items = Cart::getCartItems($conn, $_SESSION['user_id']);\n        if (!empty($cart_items)) {\n            foreach ($cart_items as $item) {\n                echo \"<div>\";\n                echo \"<h2>\" . $item['product']->getName() . \"</h2>\";\n                echo \"<p>Price: $\" . number_format($item['product']->getPrice(), 2) . \"</p>\";\n                echo \"<p>Quantity: \" . $item['cart']->getQuantity() . \"</p>\";\n                echo \"<form action='update_cart.php' method='post'>\";\n                echo \"<input type='hidden' name='cart_id' value='\" . $item['cart']->getCart_id() . \"'>\";\n                echo \"<input type='number' name='quantity' min='1' max='\" . $item['product']->getStock() . \"' value='\" . $item['cart']->getQuantity() . \"'>\";\n                echo \"<button type='submit'>Update Quantity</button>\";\n                echo \"</form>\";\n                echo \"<a href='remove_from_cart.php?cart_id=\" . $item['cart']->getCart_id() . \"'>Remove from Cart</a>\";\n                echo \"</div><br/>\";\n            }\n        } else {\n            echo \"<p>Your cart is empty.</p>\";\n        }\n    ?>\n    <a href=\"index.php\">Continue Shopping</a> |\n    <?php if (!empty($cart_items)) { ?>\n        <a href=\"checkout.php\">Checkout</a>\n    <?php } ?>\n</body>\n</html>\n```", "```php\n<?php include_once(\"config.php\"); session_start(); ?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Checkout</title>\n</head>\n<body>\n    <?php\n        $cart_items = Cart::getCartItems($conn, $_SESSION['user_id']);\n        if (!empty($cart_items)) {\n            echo \"<h2>Your Order</h2>\";\n            foreach ($cart_items as $item) {\n                echo \"<div>\";\n                echo \"<p>\" . $item['product']->getName() . \"</p>\";\n                echo \"<p>Price: $\" . number_format($item['product']->getPrice(), 2) . \"</p>\";\n                echo \"<p>Quantity: \" . $item['cart']->getQuantity() . \"</p>\";\n                echo \"<p>Total: $\" . number_format($item['product']->getPrice() * $item['cart']->getQuantity(), 2) . \"</p>\";\n                echo \"</div><br/>\";\n            }\n\n            echo \"<h3>Shipping Information</h3>\";\n            echo \"<form action='process_payment.php' method='post'>\";\n            echo \"<input type='text' name='user_name' placeholder='Name' required><br/>\";\n            echo \"<input type='email' name='email' placeholder='Email' required><br/>\";\n            echo \"<textarea name='address' placeholder='Address' required></textarea><br/>\";\n            echo \"<button type='submit'>Complete Purchase</button>\";\n            echo \"</form>\";\n        } else {\n            echo \"<p>Your cart is empty.</p>\";\n        }\n    ?>\n</body>\n</html>\n```", "```php\n<?php include_once(\"config.php\"); session_start(); ?>\n\n<?php\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $user_name = $_POST['user_name'];\n    $email = $_POST['email'];\n    $address = $_POST['address'];\n\n    // Get cart items\n    $cart_items = Cart::getCartItems($conn, $_SESSION['user_id']);\n\n    if (!empty($cart_items)) {\n        foreach ($cart_items as $item) {\n            $product_id = $item['cart']->getProduct_id();\n            $quantity = $item['cart']->getQuantity();\n\n            // Place order\n            if (Order::placeOrder($conn, $user_name, $email, $address, $product_id, $quantity)) {\n                // Remove item from cart\n                Cart::removeFromCart($conn, $item['cart']->getCart_id());\n            } else {\n                die(\"Error placing order\");\n            }\n        }\n\n        echo \"<script>alert('Order placed successfully');</script>\";\n        echo \"<script>window.location.href='order_confirmation.php';</script>\";\n    } else {\n        echo \"<script>alert('Your cart is empty');</script>\";\n        echo \"<script>window.location.href='index.php';</script>\";\n    }\n}\n?>\n```", "```php\n<?php include_once(\"config.php\"); session_start(); ?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Order Confirmation</title>\n</head>\n<body>\n    <h2>Thank you for your purchase!</h2>\n    <?php\n        // You can display the order details here if needed\n        echo \"<p>Your order has been received.</p>\";\n    ?>\n    <a href=\"index.php\">Back to Home Page</a>\n</body>\n</html>\n```"]}
