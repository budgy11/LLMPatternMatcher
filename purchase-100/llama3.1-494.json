{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of how you can create a basic purchase functionality using PHP:\n\n**Note:** This example assumes that you have a database set up with the following tables: `products`, `orders`, and `order_items`. The `products` table has columns for `id`, `name`, `price`, etc. The `orders` table has columns for `id`, `customer_id`, `order_date`, etc. The `order_items` table has columns for `id`, `order_id`, `product_id`, `quantity`, etc.\n\n**PHP Code:**\n```php\n<?php\n\n// Database connection settings\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"database_name\";\n\n// Create a database connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\n// Check if the connection is successful\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add an order\nfunction addOrder($customer_id, $total_cost) {\n    // Insert a new row into the orders table\n    $sql = \"INSERT INTO orders (customer_id, total_cost) VALUES ('$customer_id', '$total_cost')\";\n    if ($conn->query($sql)) {\n        echo \"Order added successfully!\";\n    } else {\n        echo \"Error adding order: \" . $conn->error;\n    }\n}\n\n// Function to add an item to an existing order\nfunction addItemToOrder($order_id, $product_id, $quantity) {\n    // Insert a new row into the order_items table\n    $sql = \"INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', '$quantity')\";\n    if ($conn->query($sql)) {\n        echo \"Item added to order successfully!\";\n    } else {\n        echo \"Error adding item to order: \" . $conn->error;\n    }\n}\n\n// Function to get the total cost of an order\nfunction getOrderTotal($order_id) {\n    // Select the total cost from the orders table where the id matches the provided order_id\n    $sql = \"SELECT total_cost FROM orders WHERE id = '$order_id'\";\n    $result = $conn->query($sql);\n    if ($result->num_rows > 0) {\n        return $result->fetch_assoc()[\"total_cost\"];\n    } else {\n        return 0;\n    }\n}\n\n// Function to get the items in an order\nfunction getOrderItems($order_id) {\n    // Select all rows from the order_items table where the order_id matches the provided id\n    $sql = \"SELECT * FROM order_items WHERE order_id = '$order_id'\";\n    $result = $conn->query($sql);\n    if ($result->num_rows > 0) {\n        return $result->fetch_all();\n    } else {\n        return array();\n    }\n}\n\n// Process a purchase\nif (isset($_POST[\"submit\"])) {\n    // Get the customer's ID from the session or some other storage mechanism\n    $customer_id = $_SESSION[\"customer_id\"];\n\n    // Get the product IDs and quantities from the form data\n    $product_ids = $_POST[\"products\"];\n    $quantities = $_POST[\"quantities\"];\n\n    // Calculate the total cost of the order\n    $total_cost = 0;\n    foreach ($product_ids as $key => $value) {\n        $total_cost += getProductPrice($value);\n    }\n\n    // Add an order to the database with the customer's ID and total cost\n    addOrder($customer_id, $total_cost);\n\n    // Loop through each product and quantity, adding an item to the order for each one\n    foreach ($product_ids as $key => $value) {\n        addItemToOrder($_SESSION[\"order_id\"], $value, $quantities[$key]);\n    }\n\n    // Display a success message or redirect the user to a confirmation page\n    echo \"Purchase completed successfully!\";\n}\n\n// Function to get the price of a product by ID\nfunction getProductPrice($product_id) {\n    // Select the price from the products table where the id matches the provided id\n    $sql = \"SELECT price FROM products WHERE id = '$product_id'\";\n    $result = $conn->query($sql);\n    if ($result->num_rows > 0) {\n        return $result->fetch_assoc()[\"price\"];\n    } else {\n        return 0;\n    }\n}\n\n?>\n```\n**HTML Form:**\n```html\n<form action=\"\" method=\"post\">\n    <input type=\"hidden\" name=\"customer_id\" value=\"<?php echo $_SESSION[\"customer_id\"]; ?>\">\n    <?php foreach ($products as $product): ?>\n        <div>\n            <label><?php echo $product[\"name\"]; ?></label>\n            <select name=\"quantities[<?php echo $product[\"id\"]; ?>]\">\n                <?php for ($i = 1; $i <= 10; $i++): ?>\n                    <option value=\"<?php echo $i; ?>\"><?php echo $i; ?></option>\n                <?php endfor; ?>\n            </select>\n        </div>\n    <?php endforeach; ?>\n    <input type=\"submit\" name=\"submit\" value=\"Purchase\">\n</form>\n```\n**Explanation:**\n\n1. The PHP code sets up a database connection to the `database_name` database.\n2. It defines four functions: `addOrder`, `addItemToOrder`, `getOrderTotal`, and `getOrderItems`. These functions are used to interact with the database tables.\n3. When the form is submitted, it loops through each product and quantity, adding an item to the order for each one using the `addItemToOrder` function.\n4. After adding all items to the order, it calculates the total cost of the order by calling the `getProductPrice` function for each product and summing up their prices.\n5. The `addOrder` function is called with the customer's ID and total cost as arguments, creating a new row in the orders table.\n6. Finally, it displays a success message or redirects the user to a confirmation page.\n\nNote that this is a simplified example and you should consider implementing proper error handling, security measures (e.g., sanitizing user input), and validation checks on form data before using this code in production. Additionally, you may need to modify the database schema and queries to fit your specific requirements.", "code_blocks": ["```php\n<?php\n\n// Database connection settings\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"database_name\";\n\n// Create a database connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\n// Check if the connection is successful\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add an order\nfunction addOrder($customer_id, $total_cost) {\n    // Insert a new row into the orders table\n    $sql = \"INSERT INTO orders (customer_id, total_cost) VALUES ('$customer_id', '$total_cost')\";\n    if ($conn->query($sql)) {\n        echo \"Order added successfully!\";\n    } else {\n        echo \"Error adding order: \" . $conn->error;\n    }\n}\n\n// Function to add an item to an existing order\nfunction addItemToOrder($order_id, $product_id, $quantity) {\n    // Insert a new row into the order_items table\n    $sql = \"INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', '$quantity')\";\n    if ($conn->query($sql)) {\n        echo \"Item added to order successfully!\";\n    } else {\n        echo \"Error adding item to order: \" . $conn->error;\n    }\n}\n\n// Function to get the total cost of an order\nfunction getOrderTotal($order_id) {\n    // Select the total cost from the orders table where the id matches the provided order_id\n    $sql = \"SELECT total_cost FROM orders WHERE id = '$order_id'\";\n    $result = $conn->query($sql);\n    if ($result->num_rows > 0) {\n        return $result->fetch_assoc()[\"total_cost\"];\n    } else {\n        return 0;\n    }\n}\n\n// Function to get the items in an order\nfunction getOrderItems($order_id) {\n    // Select all rows from the order_items table where the order_id matches the provided id\n    $sql = \"SELECT * FROM order_items WHERE order_id = '$order_id'\";\n    $result = $conn->query($sql);\n    if ($result->num_rows > 0) {\n        return $result->fetch_all();\n    } else {\n        return array();\n    }\n}\n\n// Process a purchase\nif (isset($_POST[\"submit\"])) {\n    // Get the customer's ID from the session or some other storage mechanism\n    $customer_id = $_SESSION[\"customer_id\"];\n\n    // Get the product IDs and quantities from the form data\n    $product_ids = $_POST[\"products\"];\n    $quantities = $_POST[\"quantities\"];\n\n    // Calculate the total cost of the order\n    $total_cost = 0;\n    foreach ($product_ids as $key => $value) {\n        $total_cost += getProductPrice($value);\n    }\n\n    // Add an order to the database with the customer's ID and total cost\n    addOrder($customer_id, $total_cost);\n\n    // Loop through each product and quantity, adding an item to the order for each one\n    foreach ($product_ids as $key => $value) {\n        addItemToOrder($_SESSION[\"order_id\"], $value, $quantities[$key]);\n    }\n\n    // Display a success message or redirect the user to a confirmation page\n    echo \"Purchase completed successfully!\";\n}\n\n// Function to get the price of a product by ID\nfunction getProductPrice($product_id) {\n    // Select the price from the products table where the id matches the provided id\n    $sql = \"SELECT price FROM products WHERE id = '$product_id'\";\n    $result = $conn->query($sql);\n    if ($result->num_rows > 0) {\n        return $result->fetch_assoc()[\"price\"];\n    } else {\n        return 0;\n    }\n}\n\n?>\n```", null]}
