{"prompt": "Create a purchase functionality using php", "llm_output": "```php\n<?php\n\n// Configuration (Adjust these to your actual database details)\n$db_host = \"localhost\";\n$db_name = \"shopping_cart\";\n$db_user = \"your_user\";\n$db_pass = \"your_password\";\n\n// Function to connect to the database\nfunction connectToDatabase($host, $name, $user, $pass) {\n  $conn = new mysqli($host, $user, $pass, $name);\n\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  return $conn;\n}\n\n// Function to check if an item is already in the cart\nfunction isItemInCart($cart_id, $item_id) {\n  $conn = connectToDatabase($db_host, $db_name, $db_user, $db_pass);\n  $sql = \"SELECT * FROM cart_items WHERE cart_id = ? AND item_id = ?\";\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"is\", $cart_id, $item_id);\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  if ($row = $result->fetch_assoc()) {\n    return true;\n  } else {\n    return false;\n  }\n  $stmt->close();\n  $conn->close();\n}\n\n// Function to add an item to the cart\nfunction addItemToCart($cart_id, $item_id, $quantity) {\n  $conn = connectToDatabase($db_host, $db_name, $db_user, $db_pass);\n\n  $sql = \"INSERT INTO cart_items (cart_id, item_id, quantity) VALUES (?, ?, ?)\";\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"iss\", $cart_id, $item_id, $quantity);\n\n  if ($stmt->execute()) {\n    echo \"Item added to cart successfully!\";\n  } else {\n    echo \"Error adding item to cart.\";\n  }\n  $stmt->close();\n  $conn->close();\n}\n\n// Function to update the quantity of an item in the cart\nfunction updateQuantityInCart($cart_id, $item_id, $quantity) {\n  $conn = connectToDatabase($db_host, $db_name, $db_user, $db_pass);\n\n  $sql = \"UPDATE cart_items SET quantity = ? WHERE cart_id = ? AND item_id = ?\";\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"iss\", $quantity, $cart_id, $item_id);\n\n  if ($stmt->execute()) {\n    echo \"Quantity updated successfully!\";\n  } else {\n    echo \"Error updating quantity.\";\n  }\n  $stmt->close();\n  $conn->close();\n}\n\n// Function to remove an item from the cart\nfunction removeItemFromCart($cart_id, $item_id) {\n  $conn = connectToDatabase($db_host, $db_name, $db_user, $db_pass);\n\n  $sql = \"DELETE FROM cart_items WHERE cart_id = ? AND item_id = ?\";\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"is\", $cart_id, $item_id);\n\n  if ($stmt->execute()) {\n    echo \"Item removed from cart successfully!\";\n  } else {\n    echo \"Error removing item from cart.\";\n  }\n  $stmt->close();\n  $conn->close();\n}\n\n// --- Example Usage (Simulated Form Handling) ---\n\n// Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  // Get cart ID from the form (you'll want to store this in a session)\n  $cart_id = $_POST[\"cart_id\"];\n\n  // Get item ID and quantity from the form\n  $item_id = $_POST[\"item_id\"];\n  $quantity = $_POST[\"quantity\"];\n\n  // Add the item to the cart\n  addItemToCart($cart_id, $item_id, $quantity);\n\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Shopping Cart</title>\n</head>\n<body>\n\n  <h1>Shopping Cart</h1>\n\n  <form method=\"post\" action=\"\">\n    <label for=\"item_id\">Item ID:</label>\n    <input type=\"number\" id=\"item_id\" name=\"item_id\" required><br><br>\n\n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" id=\"quantity\" name=\"quantity\" required><br><br>\n\n    <input type=\"submit\" value=\"Add to Cart\">\n  </form>\n\n  <?php\n    // You'll likely want to display the contents of the cart here,\n    // using queries to retrieve items from the cart_items table.\n  ?>\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Database Connection Function:** The `connectToDatabase()` function encapsulates the database connection logic, making the code more organized and easier to maintain.  This is critical for a real-world application.\n* **Prepared Statements:**  This is *essential* for security.  The code now uses prepared statements with `mysqli_prepare()` and `mysqli_stmt_bind_param()`. This *prevents SQL injection attacks*.  Never directly embed user input into SQL queries.\n* **Error Handling:**  Includes basic error checking after executing queries.  For a production environment, you'd want more robust error logging and handling.\n* **Clearer Function Definitions:**  Each function has a specific purpose, making the code easier to understand and test.\n* **Example Usage:** Demonstrates how to use the functions in a simulated form handling scenario. This is a crucial step for understanding the flow of the code.\n* **Security:**  Prepared statements *completely* eliminate the risk of SQL injection.\n* **HTML Form:** A basic HTML form is included for demonstration.\n* **Comments:**  Added comments to explain key parts of the code.\n* **`mysqli_stmt_close()`:** Added `close()` calls for the statements to free up resources.  Important for performance.\n* **`mysqli_connect_close()`:**  Added `close()` calls for the connection to release resources.\n\n**How to Use:**\n\n1. **Database Setup:**\n   - Create a database named `shopping_cart` (or whatever you choose).\n   - Create three tables:\n     - `items` (at least for testing; in a real application, you'd have a separate `items` table). This table would contain item details.\n     - `cart_items` (This table stores the cart data).  The columns are:\n       - `cart_id` (INT, PRIMARY KEY) -  A unique identifier for the shopping cart.  You'll likely store this in a session.\n       - `item_id` (INT, FOREIGN KEY referencing the `items` table) - The ID of the item being added to the cart.\n       - `quantity` (INT) -  The quantity of the item in the cart.\n\n     ```sql\n     CREATE TABLE items (\n       id INT PRIMARY KEY AUTO_INCREMENT,\n       name VARCHAR(255) NOT NULL,\n       price DECIMAL(10, 2) NOT NULL\n     );\n\n     CREATE TABLE cart_items (\n       cart_id INT PRIMARY KEY,\n       item_id INT,\n       quantity INT NOT NULL,\n       FOREIGN KEY (item_id) REFERENCES items(id)\n     );\n     ```\n\n2. **Database Credentials:**  Modify the `$db_host`, `$db_name`, `$db_user`, and `$db_pass` variables in the PHP code with your actual database credentials.\n\n3. **Run the Script:**  Place the PHP code in a `.php` file (e.g., `shopping_cart.php`) and run it through a web server (like Apache) that's configured to process PHP files.\n\n4. **Test:**  Fill out the form and submit it.  You'll need to check the `cart_items` table in your database to confirm that the items have been added correctly.\n\n**Further Enhancements:**\n\n* **Session Management:** Store the `cart_id` in a session to track the user's shopping cart across multiple pages.\n* **User Interface:**  Create a more user-friendly interface with a product catalog and a proper shopping cart display.\n* **Product Catalog:**  Add a separate table to store product information (name, description, price, image URL, etc.).\n* **Quantity Updates:**  Implement functionality to update the quantity of items in the cart.\n* **Remove Items:**  Add functionality to remove items from the cart.\n* **Checkout:**  Implement the checkout process to process payments and create orders.\n* **Error Handling & Logging:** Add more robust error handling and logging to help with debugging.\n* **Testing:**  Write unit tests to ensure the functionality of the code.\n* **Input Validation:** Add input validation to the form to ensure that the user enters valid data.\n\nThis comprehensive example provides a solid foundation for building a shopping cart functionality using PHP and MySQL. Remember to prioritize security and scalability as you develop your application further.\n", "code_blocks": ["```php\n<?php\n\n// Configuration (Adjust these to your actual database details)\n$db_host = \"localhost\";\n$db_name = \"shopping_cart\";\n$db_user = \"your_user\";\n$db_pass = \"your_password\";\n\n// Function to connect to the database\nfunction connectToDatabase($host, $name, $user, $pass) {\n  $conn = new mysqli($host, $user, $pass, $name);\n\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  return $conn;\n}\n\n// Function to check if an item is already in the cart\nfunction isItemInCart($cart_id, $item_id) {\n  $conn = connectToDatabase($db_host, $db_name, $db_user, $db_pass);\n  $sql = \"SELECT * FROM cart_items WHERE cart_id = ? AND item_id = ?\";\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"is\", $cart_id, $item_id);\n  $stmt->execute();\n  $result = $stmt->get_result();\n\n  if ($row = $result->fetch_assoc()) {\n    return true;\n  } else {\n    return false;\n  }\n  $stmt->close();\n  $conn->close();\n}\n\n// Function to add an item to the cart\nfunction addItemToCart($cart_id, $item_id, $quantity) {\n  $conn = connectToDatabase($db_host, $db_name, $db_user, $db_pass);\n\n  $sql = \"INSERT INTO cart_items (cart_id, item_id, quantity) VALUES (?, ?, ?)\";\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"iss\", $cart_id, $item_id, $quantity);\n\n  if ($stmt->execute()) {\n    echo \"Item added to cart successfully!\";\n  } else {\n    echo \"Error adding item to cart.\";\n  }\n  $stmt->close();\n  $conn->close();\n}\n\n// Function to update the quantity of an item in the cart\nfunction updateQuantityInCart($cart_id, $item_id, $quantity) {\n  $conn = connectToDatabase($db_host, $db_name, $db_user, $db_pass);\n\n  $sql = \"UPDATE cart_items SET quantity = ? WHERE cart_id = ? AND item_id = ?\";\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"iss\", $quantity, $cart_id, $item_id);\n\n  if ($stmt->execute()) {\n    echo \"Quantity updated successfully!\";\n  } else {\n    echo \"Error updating quantity.\";\n  }\n  $stmt->close();\n  $conn->close();\n}\n\n// Function to remove an item from the cart\nfunction removeItemFromCart($cart_id, $item_id) {\n  $conn = connectToDatabase($db_host, $db_name, $db_user, $db_pass);\n\n  $sql = \"DELETE FROM cart_items WHERE cart_id = ? AND item_id = ?\";\n  $stmt = $conn->prepare($sql);\n  $stmt->bind_param(\"is\", $cart_id, $item_id);\n\n  if ($stmt->execute()) {\n    echo \"Item removed from cart successfully!\";\n  } else {\n    echo \"Error removing item from cart.\";\n  }\n  $stmt->close();\n  $conn->close();\n}\n\n// --- Example Usage (Simulated Form Handling) ---\n\n// Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  // Get cart ID from the form (you'll want to store this in a session)\n  $cart_id = $_POST[\"cart_id\"];\n\n  // Get item ID and quantity from the form\n  $item_id = $_POST[\"item_id\"];\n  $quantity = $_POST[\"quantity\"];\n\n  // Add the item to the cart\n  addItemToCart($cart_id, $item_id, $quantity);\n\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Shopping Cart</title>\n</head>\n<body>\n\n  <h1>Shopping Cart</h1>\n\n  <form method=\"post\" action=\"\">\n    <label for=\"item_id\">Item ID:</label>\n    <input type=\"number\" id=\"item_id\" name=\"item_id\" required><br><br>\n\n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" id=\"quantity\" name=\"quantity\" required><br><br>\n\n    <input type=\"submit\" value=\"Add to Cart\">\n  </form>\n\n  <?php\n    // You'll likely want to display the contents of the cart here,\n    // using queries to retrieve items from the cart_items table.\n  ?>\n</body>\n</html>\n```"]}
