{"prompt": "Create a purchase cart functionality using php", "llm_output": "```php\n<?php\nsession_start();\n\n// Database connection details (Replace with your actual credentials)\n$dbHost = \"localhost\";\n$dbUser = \"your_username\";\n$dbPass = \"your_password\";\n$dbName = \"shopping_cart\";\n\n// Check if the connection is successful\n$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// ------------------------------------------------------------------\n// Product Data (Simulated Database for Example)\n// In a real application, you'd retrieve this from a database.\n$products = [\n    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],\n    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],\n    3 => ['id' => 3, 'name' => 'Shoes', 'price' => 80],\n];\n\n// ------------------------------------------------------------------\n// Functions\n// ------------------------------------------------------------------\n\n// Add to Cart Function\nfunction addToCart($productId, $quantity = 1) {\n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = [];\n    }\n\n    if (isset($_SESSION['cart'][$productId])) {\n        $_SESSION['cart'][$productId]['quantity'] += $quantity;\n    } else {\n        $_SESSION['cart'][$productId] = ['quantity' => $quantity];\n    }\n}\n\n// Remove from Cart Function\nfunction removeFromCart($productId) {\n    if (isset($_SESSION['cart'][$productId])) {\n        unset($_SESSION['cart'][$productId]);\n    }\n}\n\n// Get Cart Items\nfunction getCartItems() {\n    return $_SESSION['cart'];\n}\n\n// Calculate Total Cart Value\nfunction calculateTotal() {\n    $total = 0;\n    if (isset($_SESSION['cart'])) {\n        foreach ($_SESSION['cart'] as $item) {\n            $totalItemPrice = $item['price'] * $item['quantity'];\n            $total = $total + $totalItemPrice;\n        }\n    }\n    return $total;\n}\n\n\n// ------------------------------------------------------------------\n// Handle Actions (Adding to Cart, etc.)\n// ------------------------------------------------------------------\n\nif (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {\n    $productId = $_POST['product_id'];\n    $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1;\n    addToCart($productId, $quantity);\n}\n\nif (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {\n    $productId = $_POST['product_id'];\n    removeFromCart($productId);\n}\n\n\n// ------------------------------------------------------------------\n// Display Cart Page\n// ------------------------------------------------------------------\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n    <style>\n        .cart-item {\n            margin-bottom: 10px;\n        }\n        .cart-total {\n            font-weight: bold;\n            margin-top: 20px;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Shopping Cart</h1>\n\n<?php\n// Display Cart Items\nif (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {\n    echo \"<table border='1'>\";\n    echo \"<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th></tr>\";\n\n    foreach ($_SESSION['cart'] as $productId => $item) {\n        $product = $products[$productId]; // Get product details\n        $totalItemPrice = $product['price'] * $item['quantity'];\n        echo \"<tr class='cart-item'>\";\n        echo \"<td>\" . $product['name'] . \"</td>\";\n        echo \"<td>$\" . $product['price'] . \"</td>\";\n        echo \"<td>\" . $item['quantity'] . \"</td>\";\n        echo \"<td>$\" . $totalItemPrice . \"</td>\";\n        echo \"</tr>\";\n    }\n\n    echo \"</table>\";\n\n    echo \"<div class='cart-total'>Total: $\" . calculateTotal() . \"</div>\";\n} else {\n    echo \"<p>Your cart is empty.</p>\";\n}\n?>\n\n<hr>\n\n<h2>Add Items to Cart</h2>\n<ul>\n    <?php\n    foreach ($products as $id => $product) {\n        echo \"<li>Product ID: \" . $product['id'] . \" - \" . $product['name'] . \" - Price: $\" . $product['price'] . \" <button onclick='addToCart(\" . $product['id'] . \", 1)'>Add to Cart</button></li>\";\n    }\n    ?>\n</ul>\n\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Session Management:** Uses `session_start()` to maintain the cart contents between pages. This is crucial for a shopping cart.\n* **Database Connection:** Includes placeholder for a database connection.  *Replace the example database credentials* with your actual database information.\n* **Product Data (Simulated):**  Uses a `$products` array to simulate a database for demonstration.  In a real application, you would fetch product data from your database.\n* **`addToCart()` Function:** Handles adding items to the cart.  It checks if the product is already in the cart and updates the quantity if it is. If not, it adds a new item to the cart.\n* **`removeFromCart()` Function:** Removes a product from the cart.\n* **`getCartItems()` Function:**  Returns the contents of the cart. (though it's not used directly in this example, it's good practice to have).\n* **`calculateTotal()` Function:** Calculates the total value of the cart.\n* **Clear Display:** Generates an HTML table to display the cart items, including product name, price, quantity, and total.\n* **Add to Cart Button:** Added HTML buttons to add items to the cart. The `addToCart()` function is called when the button is clicked, passing the product ID and quantity (defaulting to 1). This is triggered by the Javascript from the `HTML` on the display page.\n* **Error Handling:** Basic error handling is included with the database connection.\n* **Clean HTML:** The code is well-formatted and easy to read.\n* **Example Javascript (Important):**  The provided example HTML includes an  `onclick='addToCart(product_id, 1)'` attribute. *This is how the HTML triggers the PHP `addToCart` function*.\n\n**How to Use This Code:**\n\n1. **Save the Code:** Save the code as a `.php` file (e.g., `shopping_cart.php`).\n2. **Database Setup:**\n   - Create a database named `shopping_cart`.\n   - Create a table named `products` with columns: `id` (INT, primary key), `name` (VARCHAR), `price` (DECIMAL).\n   - Insert some sample products into the `products` table.\n3. **Replace Database Credentials:** Update the `$dbHost`, `$dbUser`, `$dbPass`, and `$dbName` variables with your actual database credentials.\n4. **Run the Code:**  Place the `shopping_cart.php` file in your web server's document root.  Access it through your web browser (e.g., `http://localhost/shopping_cart.php`).\n\n**Next Steps and Enhancements:**\n\n* **Real Database Integration:** Replace the simulated `$products` array with a real database query to fetch product data.\n* **Product Details:**  Add product images and other details to the cart display.\n* **Quantity Input:**  Allow the user to specify the quantity of each item they want to add to the cart (using an input field).\n* **Checkout Process:** Implement a checkout process (e.g., collecting shipping address, payment information).\n* **Security:**  Implement proper security measures, such as input validation and output encoding, to prevent vulnerabilities like cross-site scripting (XSS) and SQL injection.\n* **Session Timeout:** Implement a mechanism to handle session timeouts to prevent carts from disappearing when users close their browsers.\n* **More Robust Error Handling:** Add more comprehensive error handling to catch and display errors gracefully.\n* **CSS Styling:**  Add CSS styling to make the shopping cart look more visually appealing.\n* **Testing:** Thoroughly test the shopping cart functionality under different scenarios (e.g., adding multiple items, removing items, updating quantities).\n* **CSRF Protection:** Implement Cross-Site Request Forgery (CSRF) protection to prevent malicious attacks.\n\nThis comprehensive example provides a solid foundation for building a shopping cart functionality in PHP. Remember to adapt the code to your specific needs and to implement appropriate security measures.\n", "code_blocks": ["```php\n<?php\nsession_start();\n\n// Database connection details (Replace with your actual credentials)\n$dbHost = \"localhost\";\n$dbUser = \"your_username\";\n$dbPass = \"your_password\";\n$dbName = \"shopping_cart\";\n\n// Check if the connection is successful\n$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// ------------------------------------------------------------------\n// Product Data (Simulated Database for Example)\n// In a real application, you'd retrieve this from a database.\n$products = [\n    1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],\n    2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],\n    3 => ['id' => 3, 'name' => 'Shoes', 'price' => 80],\n];\n\n// ------------------------------------------------------------------\n// Functions\n// ------------------------------------------------------------------\n\n// Add to Cart Function\nfunction addToCart($productId, $quantity = 1) {\n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = [];\n    }\n\n    if (isset($_SESSION['cart'][$productId])) {\n        $_SESSION['cart'][$productId]['quantity'] += $quantity;\n    } else {\n        $_SESSION['cart'][$productId] = ['quantity' => $quantity];\n    }\n}\n\n// Remove from Cart Function\nfunction removeFromCart($productId) {\n    if (isset($_SESSION['cart'][$productId])) {\n        unset($_SESSION['cart'][$productId]);\n    }\n}\n\n// Get Cart Items\nfunction getCartItems() {\n    return $_SESSION['cart'];\n}\n\n// Calculate Total Cart Value\nfunction calculateTotal() {\n    $total = 0;\n    if (isset($_SESSION['cart'])) {\n        foreach ($_SESSION['cart'] as $item) {\n            $totalItemPrice = $item['price'] * $item['quantity'];\n            $total = $total + $totalItemPrice;\n        }\n    }\n    return $total;\n}\n\n\n// ------------------------------------------------------------------\n// Handle Actions (Adding to Cart, etc.)\n// ------------------------------------------------------------------\n\nif (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {\n    $productId = $_POST['product_id'];\n    $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1;\n    addToCart($productId, $quantity);\n}\n\nif (isset($_POST['action']) && $_POST['action'] == 'remove_from_cart') {\n    $productId = $_POST['product_id'];\n    removeFromCart($productId);\n}\n\n\n// ------------------------------------------------------------------\n// Display Cart Page\n// ------------------------------------------------------------------\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n    <style>\n        .cart-item {\n            margin-bottom: 10px;\n        }\n        .cart-total {\n            font-weight: bold;\n            margin-top: 20px;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Shopping Cart</h1>\n\n<?php\n// Display Cart Items\nif (isset($_SESSION['cart']) && !empty($_SESSION['cart'])) {\n    echo \"<table border='1'>\";\n    echo \"<tr><th>Product Name</th><th>Price</th><th>Quantity</th><th>Total</th></tr>\";\n\n    foreach ($_SESSION['cart'] as $productId => $item) {\n        $product = $products[$productId]; // Get product details\n        $totalItemPrice = $product['price'] * $item['quantity'];\n        echo \"<tr class='cart-item'>\";\n        echo \"<td>\" . $product['name'] . \"</td>\";\n        echo \"<td>$\" . $product['price'] . \"</td>\";\n        echo \"<td>\" . $item['quantity'] . \"</td>\";\n        echo \"<td>$\" . $totalItemPrice . \"</td>\";\n        echo \"</tr>\";\n    }\n\n    echo \"</table>\";\n\n    echo \"<div class='cart-total'>Total: $\" . calculateTotal() . \"</div>\";\n} else {\n    echo \"<p>Your cart is empty.</p>\";\n}\n?>\n\n<hr>\n\n<h2>Add Items to Cart</h2>\n<ul>\n    <?php\n    foreach ($products as $id => $product) {\n        echo \"<li>Product ID: \" . $product['id'] . \" - \" . $product['name'] . \" - Price: $\" . $product['price'] . \" <button onclick='addToCart(\" . $product['id'] . \", 1)'>Add to Cart</button></li>\";\n    }\n    ?>\n</ul>\n\n\n</body>\n</html>\n```"]}
