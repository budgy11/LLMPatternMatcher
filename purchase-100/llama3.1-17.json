{"prompt": "Create a purchase cart functionality using php", "llm_output": "**Purchase Cart Functionality in PHP**\n=====================================\n\nThis example demonstrates a basic purchase cart functionality using PHP, with features like adding items to the cart, removing items from the cart, updating item quantities, and calculating the total cost.\n\n**Database Schema**\n------------------\n\nWe'll assume you have a MySQL database with the following schema:\n\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE cart (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT,\n  product_id INT,\n  quantity INT,\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n**Cart Class**\n--------------\n\nCreate a `Cart` class to handle cart operations:\n```php\nclass Cart {\n  private $userId;\n  private $products;\n\n  public function __construct($userId = null) {\n    if ($userId !== null) {\n      $this->userId = $userId;\n      $this->loadProducts();\n    } else {\n      $this->products = array();\n    }\n  }\n\n  public function loadProducts() {\n    global $db; // assume a database connection is established\n    $query = \"SELECT * FROM cart WHERE user_id = :user_id\";\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':user_id', $this->userId);\n    $stmt->execute();\n    $this->products = $stmt->fetchAll(PDO::FETCH_ASSOC);\n  }\n\n  public function addProduct($productId, $quantity) {\n    global $db; // assume a database connection is established\n    $query = \"INSERT INTO cart (user_id, product_id, quantity)\n              VALUES (:user_id, :product_id, :quantity)\";\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':user_id', $this->userId);\n    $stmt->bindParam(':product_id', $productId);\n    $stmt->bindParam(':quantity', $quantity);\n    $stmt->execute();\n  }\n\n  public function removeProduct($productId) {\n    global $db; // assume a database connection is established\n    $query = \"DELETE FROM cart WHERE user_id = :user_id AND product_id = :product_id\";\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':user_id', $this->userId);\n    $stmt->bindParam(':product_id', $productId);\n    $stmt->execute();\n  }\n\n  public function updateQuantity($productId, $quantity) {\n    global $db; // assume a database connection is established\n    $query = \"UPDATE cart SET quantity = :quantity WHERE user_id = :user_id AND product_id = :product_id\";\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':user_id', $this->userId);\n    $stmt->bindParam(':product_id', $productId);\n    $stmt->bindParam(':quantity', $quantity);\n    $stmt->execute();\n  }\n\n  public function getTotalCost() {\n    global $db; // assume a database connection is established\n    $query = \"SELECT SUM(c.quantity * p.price) AS total_cost FROM cart c\n              INNER JOIN products p ON c.product_id = p.id WHERE user_id = :user_id\";\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':user_id', $this->userId);\n    $stmt->execute();\n    return $stmt->fetchColumn();\n  }\n\n  public function getProducts() {\n    return $this->products;\n  }\n}\n```\n\n**Example Usage**\n-----------------\n\n```php\n// Create a new cart instance for user ID 1\n$cart = new Cart(1);\n\n// Add products to the cart\n$cart->addProduct(1, 2); // product ID 1 with quantity 2\n$cart->addProduct(2, 3); // product ID 2 with quantity 3\n\n// Remove a product from the cart\n$cart->removeProduct(2);\n\n// Update the quantity of a product in the cart\n$cart->updateQuantity(1, 4);\n\n// Get the total cost of the products in the cart\n$totalCost = $cart->getTotalCost();\n\n// Print the products in the cart\nprint_r($cart->getProducts());\n```\n\nThis is a basic implementation of a purchase cart functionality using PHP and MySQL. You can enhance this example by adding more features, such as:\n\n* Authentication and authorization mechanisms to restrict access to cart operations based on user roles.\n* Support for multiple payment gateways and payment methods.\n* Integration with shipping providers for calculating shipping costs.\n* Handling discounts, coupons, and promotions.\n* Generating orders and order receipts.", "code_blocks": [null, "```php\nclass Cart {\n  private $userId;\n  private $products;\n\n  public function __construct($userId = null) {\n    if ($userId !== null) {\n      $this->userId = $userId;\n      $this->loadProducts();\n    } else {\n      $this->products = array();\n    }\n  }\n\n  public function loadProducts() {\n    global $db; // assume a database connection is established\n    $query = \"SELECT * FROM cart WHERE user_id = :user_id\";\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':user_id', $this->userId);\n    $stmt->execute();\n    $this->products = $stmt->fetchAll(PDO::FETCH_ASSOC);\n  }\n\n  public function addProduct($productId, $quantity) {\n    global $db; // assume a database connection is established\n    $query = \"INSERT INTO cart (user_id, product_id, quantity)\n              VALUES (:user_id, :product_id, :quantity)\";\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':user_id', $this->userId);\n    $stmt->bindParam(':product_id', $productId);\n    $stmt->bindParam(':quantity', $quantity);\n    $stmt->execute();\n  }\n\n  public function removeProduct($productId) {\n    global $db; // assume a database connection is established\n    $query = \"DELETE FROM cart WHERE user_id = :user_id AND product_id = :product_id\";\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':user_id', $this->userId);\n    $stmt->bindParam(':product_id', $productId);\n    $stmt->execute();\n  }\n\n  public function updateQuantity($productId, $quantity) {\n    global $db; // assume a database connection is established\n    $query = \"UPDATE cart SET quantity = :quantity WHERE user_id = :user_id AND product_id = :product_id\";\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':user_id', $this->userId);\n    $stmt->bindParam(':product_id', $productId);\n    $stmt->bindParam(':quantity', $quantity);\n    $stmt->execute();\n  }\n\n  public function getTotalCost() {\n    global $db; // assume a database connection is established\n    $query = \"SELECT SUM(c.quantity * p.price) AS total_cost FROM cart c\n              INNER JOIN products p ON c.product_id = p.id WHERE user_id = :user_id\";\n    $stmt = $db->prepare($query);\n    $stmt->bindParam(':user_id', $this->userId);\n    $stmt->execute();\n    return $stmt->fetchColumn();\n  }\n\n  public function getProducts() {\n    return $this->products;\n  }\n}\n```", "```php\n// Create a new cart instance for user ID 1\n$cart = new Cart(1);\n\n// Add products to the cart\n$cart->addProduct(1, 2); // product ID 1 with quantity 2\n$cart->addProduct(2, 3); // product ID 2 with quantity 3\n\n// Remove a product from the cart\n$cart->removeProduct(2);\n\n// Update the quantity of a product in the cart\n$cart->updateQuantity(1, 4);\n\n// Get the total cost of the products in the cart\n$totalCost = $cart->getTotalCost();\n\n// Print the products in the cart\nprint_r($cart->getProducts());\n```"]}
