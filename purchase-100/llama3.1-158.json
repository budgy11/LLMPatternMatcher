{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a simple purchase functionality in PHP. This example assumes that you have already set up a database to store the products and users.\n\n**Database Schema**\n\nWe will use a MySQL database with the following tables:\n\n```sql\nCREATE TABLE products (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(255),\n    email VARCHAR(255)\n);\n```\n\n**Purchase Functionality Code**\n\n```php\n// Connect to the database\n$dsn = 'mysql:host=localhost;dbname=your_database';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n    $pdo = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n    throw new Exception($e->getMessage());\n}\n\n// Function to get all products\nfunction getProducts() {\n    global $pdo;\n    $stmt = $pdo->prepare('SELECT * FROM products');\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\n\n// Function to add product to cart\nfunction addToCart($userId, $productId) {\n    global $pdo;\n    $stmt = $pdo->prepare('INSERT INTO cart (user_id, product_id) VALUES (:user_id, :product_id)');\n    $stmt->bindParam(':user_id', $userId);\n    $stmt->bindParam(':product_id', $productId);\n    return $stmt->execute();\n}\n\n// Function to get products in cart\nfunction getCart($userId) {\n    global $pdo;\n    $stmt = $pdo->prepare('SELECT p.* FROM cart c JOIN products p ON c.product_id = p.id WHERE c.user_id = :user_id');\n    $stmt->bindParam(':user_id', $userId);\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\n\n// Function to purchase product\nfunction purchase($userId, $productId) {\n    global $pdo;\n    \n    // Check if user has enough balance\n    $balance = getUserBalance($userId);\n    $productPrice = getProductPrice($productId);\n    \n    if ($balance < $productPrice) {\n        throw new Exception('Insufficient balance');\n    }\n    \n    // Subtract product price from user's balance\n    subtractBalance($userId, $productPrice);\n    \n    // Add product to cart and remove from stock\n    addToCart($userId, $productId);\n    subtractProductStock($productId);\n}\n\n// Function to get user balance\nfunction getUserBalance($userId) {\n    global $pdo;\n    $stmt = $pdo->prepare('SELECT balance FROM users WHERE id = :user_id');\n    $stmt->bindParam(':user_id', $userId);\n    $stmt->execute();\n    return $stmt->fetchColumn();\n}\n\n// Function to subtract user's balance\nfunction subtractBalance($userId, $amount) {\n    global $pdo;\n    $stmt = $pdo->prepare('UPDATE users SET balance = balance - :amount WHERE id = :user_id');\n    $stmt->bindParam(':user_id', $userId);\n    $stmt->bindParam(':amount', $amount);\n    return $stmt->execute();\n}\n\n// Function to get product price\nfunction getProductPrice($productId) {\n    global $pdo;\n    $stmt = $pdo->prepare('SELECT price FROM products WHERE id = :product_id');\n    $stmt->bindParam(':product_id', $productId);\n    $stmt->execute();\n    return $stmt->fetchColumn();\n}\n\n// Function to subtract product stock\nfunction subtractProductStock($productId) {\n    global $pdo;\n    $stmt = $pdo->prepare('UPDATE products SET stock = stock - 1 WHERE id = :product_id');\n    $stmt->bindParam(':product_id', $productId);\n    return $stmt->execute();\n}\n\n// Test the functionality\n$userId = 1; // Replace with actual user ID\n$productId = 1; // Replace with actual product ID\n\ntry {\n    purchase($userId, $productId);\n} catch (Exception $e) {\n    echo 'Error: ' . $e->getMessage();\n}\n```\n\nThis is a basic example of how you can implement a purchase functionality in PHP. Note that this code assumes that the database schema and data types are already set up.\n\n**Note**: This example does not include any error handling for cases like:\n\n*   User trying to purchase more products than they have balance\n*   Product being out of stock\n*   User's login information is invalid\n\nYou should add these checks according to your application's requirements.", "code_blocks": [null, "```php\n// Connect to the database\n$dsn = 'mysql:host=localhost;dbname=your_database';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n    $pdo = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n    throw new Exception($e->getMessage());\n}\n\n// Function to get all products\nfunction getProducts() {\n    global $pdo;\n    $stmt = $pdo->prepare('SELECT * FROM products');\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\n\n// Function to add product to cart\nfunction addToCart($userId, $productId) {\n    global $pdo;\n    $stmt = $pdo->prepare('INSERT INTO cart (user_id, product_id) VALUES (:user_id, :product_id)');\n    $stmt->bindParam(':user_id', $userId);\n    $stmt->bindParam(':product_id', $productId);\n    return $stmt->execute();\n}\n\n// Function to get products in cart\nfunction getCart($userId) {\n    global $pdo;\n    $stmt = $pdo->prepare('SELECT p.* FROM cart c JOIN products p ON c.product_id = p.id WHERE c.user_id = :user_id');\n    $stmt->bindParam(':user_id', $userId);\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\n\n// Function to purchase product\nfunction purchase($userId, $productId) {\n    global $pdo;\n    \n    // Check if user has enough balance\n    $balance = getUserBalance($userId);\n    $productPrice = getProductPrice($productId);\n    \n    if ($balance < $productPrice) {\n        throw new Exception('Insufficient balance');\n    }\n    \n    // Subtract product price from user's balance\n    subtractBalance($userId, $productPrice);\n    \n    // Add product to cart and remove from stock\n    addToCart($userId, $productId);\n    subtractProductStock($productId);\n}\n\n// Function to get user balance\nfunction getUserBalance($userId) {\n    global $pdo;\n    $stmt = $pdo->prepare('SELECT balance FROM users WHERE id = :user_id');\n    $stmt->bindParam(':user_id', $userId);\n    $stmt->execute();\n    return $stmt->fetchColumn();\n}\n\n// Function to subtract user's balance\nfunction subtractBalance($userId, $amount) {\n    global $pdo;\n    $stmt = $pdo->prepare('UPDATE users SET balance = balance - :amount WHERE id = :user_id');\n    $stmt->bindParam(':user_id', $userId);\n    $stmt->bindParam(':amount', $amount);\n    return $stmt->execute();\n}\n\n// Function to get product price\nfunction getProductPrice($productId) {\n    global $pdo;\n    $stmt = $pdo->prepare('SELECT price FROM products WHERE id = :product_id');\n    $stmt->bindParam(':product_id', $productId);\n    $stmt->execute();\n    return $stmt->fetchColumn();\n}\n\n// Function to subtract product stock\nfunction subtractProductStock($productId) {\n    global $pdo;\n    $stmt = $pdo->prepare('UPDATE products SET stock = stock - 1 WHERE id = :product_id');\n    $stmt->bindParam(':product_id', $productId);\n    return $stmt->execute();\n}\n\n// Test the functionality\n$userId = 1; // Replace with actual user ID\n$productId = 1; // Replace with actual product ID\n\ntry {\n    purchase($userId, $productId);\n} catch (Exception $e) {\n    echo 'Error: ' . $e->getMessage();\n}\n```"]}
