{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, I need to create a purchase functionality using PHP. Let me think about how to approach this.\n\nFirst, I should outline the main components required. The user needs a way to select products, so a product listing page makes sense. Each product should have details like name, description, price, and an image. Then, there's the shopping cart where users can add items they want to purchase.\n\nNext, when the user is ready to buy, they'll go through checkout. Here, I need to collect shipping information. Maybe a form with fields for name, email, address, city, state, ZIP code, and phone number. It's important to validate this data on both the client side with JavaScript and server side with PHP to ensure everything is correct before proceeding.\n\nAfter collecting the shipping info, I have to process the payment. Since handling real payments can be complex, using a sandbox environment like Stripe or PayPal would be ideal for testing. This way, I can simulate transactions without dealing with actual money during development.\n\nI should also handle errors gracefully. If something goes wrong during checkout\u2014like invalid input or a failed payment\u2014the user should get clear error messages and the option to try again.\n\nSecurity is another big concern. I need to protect against SQL injection by using prepared statements when interacting with the database. Also, sanitizing all inputs will help prevent other types of attacks. Using HTTPS for secure data transmission is a must, especially when handling sensitive information like payment details.\n\nNow, let's think about the structure. The main pages would be product_listing.php, checkout.php, and thankyou.php. I'll need to set up a database to store products, orders, order items, and customers. Each table should have appropriate fields, like product_id, name, price for products; order_id, customer_id, total_amount, etc., for orders.\n\nIn product_listing.php, I'll fetch all products from the database and display them in a user-friendly way. Each product will have an \"Add to Cart\" button that adds it to the session. The shopping cart should be stored in the session so that users can add items across different pages without losing their selection.\n\nOn checkout.php, after adding items to the cart, I'll collect shipping info. Once submitted, this data is validated and then used to process payment. If payment fails, I'll redirect back with an error message; if successful, proceed to thankyou.php where order details are displayed.\n\nIn thankyou.php, I'll insert the new customer into the database if they're not already there, create a new order record, and add each item in the cart as order items linked to this order. Then, clear the session data to reset the cart for future use.\n\nI should also consider user sessions to keep track of what's in their cart. Using PHP's built-in session functions will help manage this. Additionally, ensuring that all forms have CSRF protection to prevent cross-site request forgery attacks is important.\n\nTesting each part step by step is crucial. I'll start by verifying the product display, then check adding items to the cart and viewing it. Next, test the checkout process with valid and invalid inputs to see how errors are handled. Finally, ensure that payment processing works correctly in the sandbox environment and that all data is properly stored in the database after a successful transaction.\n\nPotential issues I might encounter include handling multiple product quantities, ensuring that the cart updates correctly when items are added or removed, and dealing with database transactions to maintain consistency when inserting order-related records. Implementing proper error handling around these areas will be essential for a smooth user experience.\n\nOverall, breaking down the problem into smaller parts\u2014like setting up the database, creating the product listing, implementing the shopping cart, designing the checkout process, and integrating payment methods\u2014will make the task manageable. Testing each component thoroughly before moving on to the next will help catch issues early and ensure everything works together seamlessly in the end.\n</think>\n\nCreating a purchase functionality using PHP involves several steps, including setting up a product listing page, a shopping cart, a checkout page, and handling payment processing. Below is a simplified example of how you can implement this.\n\n### 1. Set Up Your Database\n\nFirst, create a database to store products, orders, order items, and customers.\n\n```sql\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    image VARCHAR(255)\n);\n\nCREATE TABLE orders (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n\nCREATE TABLE order_items (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(id),\n    FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE customers (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    first_name VARCHAR(255) NOT NULL,\n    last_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    city VARCHAR(255) NOT NULL,\n    state VARCHAR(255) NOT NULL,\n    zip_code VARCHAR(10) NOT NULL\n);\n```\n\n### 2. Product Listing Page (`product_listing.php`)\n\nThis page displays all available products.\n\n```php\n<?php\n// Include database connection\ninclude('db_connection.php');\n\n// Query to get all products\n$sql = \"SELECT * FROM products\";\n$result = $conn->query($sql);\n\n// Start the session to use shopping cart\nsession_start();\n\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Product Listing</title>\n    <!-- Include Bootstrap CSS for styling -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n    <div class=\"container mt-4\">\n        <?php\n        if ($result->num_rows > 0) {\n            while($row = $result->fetch_assoc()) {\n                ?>\n                <div class=\"card mb-4\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\"><?php echo $row['name']; ?></h5>\n                        <p class=\"card-text\"><?php echo $row['description']; ?></p>\n                        <p class=\"card-text\">Price: $<?php echo number_format($row['price'], 2); ?></p>\n                        <?php if ($row['image']) { ?>\n                            <img src=\"<?php echo $row['image']; ?>\" alt=\"<?php echo $row['name']; ?>\" class=\"img-fluid w-50 h-auto\">\n                        <?php } ?>\n                        <form action=\"add_to_cart.php\" method=\"post\">\n                            <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $row['id']; ?>\">\n                            <button type=\"submit\" class=\"btn btn-primary\">Add to Cart</button>\n                        </form>\n                    </div>\n                </div>\n                <?php\n            }\n        } else {\n            echo \"No products available.\";\n        }\n        ?>\n    </div>\n\n    <!-- Include Bootstrap JS -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>\n\n<?php\n// Close database connection\n$conn->close();\n?>\n```\n\n### 3. Add to Cart Page (`add_to_cart.php`)\n\nThis script adds a product to the shopping cart.\n\n```php\n<?php\nsession_start();\n\nif (isset($_POST['product_id'])) {\n    $productId = $_POST['product_id'];\n    \n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n    \n    // Check if product is already in cart\n    if (array_key_exists($productId, $_SESSION['cart'])) {\n        $_SESSION['cart'][$productId]['quantity']++;\n    } else {\n        $sql = \"SELECT name, price FROM products WHERE id = ?\";\n        $stmt = $conn->prepare($sql);\n        $stmt->bind_param(\"i\", $productId);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        \n        if ($result->num_rows > 0) {\n            $product = $result->fetch_assoc();\n            $_SESSION['cart'][$productId] = array(\n                'name' => $product['name'],\n                'price' => $product['price'],\n                'quantity' => 1\n            );\n        }\n    }\n}\n\n// Redirect back to product listing page\nheader(\"Location: product_listing.php\");\nexit();\n\n// Include database connection\ninclude('db_connection.php');\n$conn->close();\n?>\n```\n\n### 4. Checkout Page (`checkout.php`)\n\nThis page collects shipping information and processes the order.\n\n```php\n<?php\nsession_start();\n\nif (empty($_SESSION['cart'])) {\n    header(\"Location: product_listing.php\");\n    exit();\n}\n\n// Initialize variables for form fields\n$firstName = $lastName = $email = $address = $city = $state = $zipCode = \"\";\n$errors = array();\n\n// Check if form is submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    // Validate and sanitize input\n    $firstName = htmlspecialchars(trim($_POST['first_name']));\n    $lastName = htmlspecialchars(trim($_POST['last_name']));\n    $email = htmlspecialchars(trim($_POST['email']));\n    $address = htmlspecialchars(trim($_POST['address']));\n    $city = htmlspecialchars(trim($_POST['city']));\n    $state = htmlspecialchars(trim($_POST['state']));\n    $zipCode = htmlspecialchars(trim($_POST['zip_code']));\n\n    // Basic validation\n    if (empty($firstName)) {\n        $errors[] = \"First name is required.\";\n    }\n    if (empty($lastName)) {\n        $errors[] = \"Last name is required.\";\n    }\n    if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        $errors[] = \"Valid email is required.\";\n    }\n    if (empty($address)) {\n        $errors[] = \"Address is required.\";\n    }\n    if (empty($city)) {\n        $errors[] = \"City is required.\";\n    }\n    if (empty($state)) {\n        $errors[] = \"State is required.\";\n    }\n    if (empty($zipCode) || !preg_match('/^[0-9]{5}(-[0-9]{4})?$/', $zipCode)) {\n        $errors[] = \"Valid ZIP code is required.\";\n    }\n\n    // If no errors, process the payment\n    if (empty($errors)) {\n        // Here you would typically integrate with a payment gateway like Stripe or PayPal\n        // For this example, we'll assume the payment was successful\n\n        // Calculate total amount\n        $totalAmount = 0;\n        foreach ($_SESSION['cart'] as $item) {\n            $totalAmount += $item['price'] * $item['quantity'];\n        }\n\n        // Insert customer into database if not exists\n        $sqlCheckCustomer = \"SELECT id FROM customers WHERE email = ?\";\n        $stmt = $conn->prepare($sqlCheckCustomer);\n        $stmt->bind_param(\"s\", $email);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        if ($result->num_rows == 0) {\n            $sqlInsertCustomer = \"INSERT INTO customers (first_name, last_name, email, address, city, state, zip_code) VALUES (?, ?, ?, ?, ?, ?, ?)\";\n            $stmt = $conn->prepare($sqlInsertCustomer);\n            $stmt->bind_param(\"sssssss\", $firstName, $lastName, $email, $address, $city, $state, $zipCode);\n            if (!$stmt->execute()) {\n                die(\"Error inserting customer: \" . $stmt->error);\n            }\n            $customerId = $conn->insert_id;\n        } else {\n            $row = $result->fetch_assoc();\n            $customerId = $row['id'];\n        }\n\n        // Insert order\n        $sqlInsertOrder = \"INSERT INTO orders (customer_id, total_amount) VALUES (?, ?)\";\n        $stmt = $conn->prepare($sqlInsertOrder);\n        $stmt->bind_param(\"id\", $customerId, $totalAmount);\n        if (!$stmt->execute()) {\n            die(\"Error inserting order: \" . $stmt->error);\n        }\n        $orderId = $conn->insert_id;\n\n        // Insert order items\n        foreach ($_SESSION['cart'] as $productId => $item) {\n            $sqlInsertOrderItem = \"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\";\n            $stmt = $conn->prepare($sqlInsertOrderItem);\n            $stmt->bind_param(\"iidi\", $orderId, $productId, $item['quantity'], $item['price']);\n            if (!$stmt->execute()) {\n                die(\"Error inserting order item: \" . $stmt->error);\n            }\n        }\n\n        // Clear cart\n        unset($_SESSION['cart']);\n\n        // Redirect to thank you page\n        header(\"Location: thankyou.php?order_id=\" . $orderId);\n        exit();\n    }\n}\n\n// Include database connection\ninclude('db_connection.php');\n$conn->close();\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Checkout</title>\n    <!-- Include Bootstrap CSS -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body class=\"bg-light\">\n    <div class=\"container mt-4\">\n        <?php if (!empty($errors)) { ?>\n            <div class=\"alert alert-danger\">\n                <?php foreach ($errors as $error) { ?>\n                    <li><?php echo $error; ?></li>\n                <?php } ?>\n            </div>\n        <?php } ?>\n\n        <h2>Checkout</h2>\n        <form action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\" method=\"post\">\n            <div class=\"row g-4\">\n                <div class=\"col-md-6\">\n                    <label for=\"first_name\" class=\"form-label\">First Name</label>\n                    <input type=\"text\" class=\"form-control\" id=\"first_name\" name=\"first_name\" value=\"<?php echo $firstName; ?>\">\n                </div>\n                <div class=\"col-md-6\">\n                    <label for=\"last_name\" class=\"form-label\">Last Name</label>\n                    <input type=\"text\" class=\"form-control\" id=\"last_name\" name=\"last_name\" value=\"<?php echo $lastName; ?>\">\n                </div>\n                <div class=\"col-md-12\">\n                    <label for=\"email\" class=\"form-label\">Email Address</label>\n                    <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" value=\"<?php echo $email; ?>\">\n                </div>\n                <div class=\"col-md-12\">\n                    <label for=\"address\" class=\"form-label\">Address</label>\n                    <input type=\"text\" class=\"form-control\" id=\"address\" name=\"address\" value=\"<?php echo $address; ?>\">\n                </div>\n                <div class=\"col-md-6\">\n                    <label for=\"city\" class=\"form-label\">City</label>\n                    <input type=\"text\" class=\"form-control\" id=\"city\" name=\"city\" value=\"<?php echo $city; ?>\">\n                </div>\n                <div class=\"col-md-4\">\n                    <label for=\"state\" class=\"form-label\">State</label>\n                    <select class=\"form-select\" id=\"state\" name=\"state\">\n                        <option <?php if ($state == 'California') {echo 'selected';} ?>>California</option>\n                        <!-- Add more states as needed -->\n                    </select>\n                </div>\n                <div class=\"col-md-2\">\n                    <label for=\"zip_code\" class=\"form-label\">ZIP Code</label>\n                    <input type=\"text\" class=\"form-control\" id=\"zip_code\" name=\"zip_code\" value=\"<?php echo $zipCode; ?>\">\n                </div>\n            </div>\n\n            <button type=\"submit\" class=\"btn btn-primary mt-3\">Place Order</button>\n        </form>\n    </div>\n\n    <!-- Include Bootstrap JS -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>\n```\n\n### 5. Thank You Page (`thankyou.php`)\n\nThis page thanks the customer for their order and displays the order details.\n\n```php\n<?php\nsession_start();\n\n// Get order ID from query string\nif (isset($_GET['order_id'])) {\n    $orderId = $_GET['order_id'];\n} else {\n    header(\"Location: product_listing.php\");\n    exit();\n}\n\n// Include database connection\ninclude('db_connection.php');\n\n// Query to get order details\n$sql = \"SELECT o.id AS order_id, c.first_name, c.last_name, o.total_amount \n        FROM orders o \n        JOIN customers c ON o.customer_id = c.id \n        WHERE o.id = ?\";\n$stmt = $conn->prepare($sql);\n$stmt->bind_param(\"i\", $orderId);\n$stmt->execute();\n$result = $stmt->get_result();\n\nif ($result->num_rows == 0) {\n    die(\"Invalid order ID.\");\n}\n\n$orderDetails = $result->fetch_assoc();\n\n// Get order items\n$sqlItems = \"SELECT oi.quantity, p.name AS product_name \n            FROM order_items oi \n            JOIN products p ON oi.product_id = p.id \n            WHERE oi.order_id = ?\";\n$stmt = $conn->prepare($sqlItems);\n$stmt->bind_param(\"i\", $orderId);\n$stmt->execute();\n$resultItems = $stmt->get_result();\n\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Thank You</title>\n    <!-- Include Bootstrap CSS -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body class=\"bg-light\">\n    <div class=\"container mt-4\">\n        <h2>Thank you for your order!</h2>\n        <p>Your order has been received and will be processed shortly.</p>\n        \n        <div class=\"card mt-4\">\n            <div class=\"card-body\">\n                <h5 class=\"card-title\">Order Summary</h5>\n                <p><strong>Order ID:</strong> <?php echo $orderDetails['order_id']; ?></p>\n                <p><strong>Name:</strong> <?php echo $orderDetails['first_name'] . ' ' . $orderDetails['last_name']; ?></p>\n                <p><strong>Total Amount:</strong> $<?php echo number_format($orderDetails['total_amount'], 2); ?></p>\n\n                <h6>Ordered Items:</h6>\n                <?php if ($resultItems->num_rows > 0) { ?>\n                    <ul class=\"list-group\">\n                        <?php while ($item = $resultItems->fetch_assoc()) { ?>\n                            <li class=\"list-group-item\"><?php echo $item['product_name']; ?> (Quantity: <?php echo $item['quantity']; ?>)</li>\n                        <?php } ?>\n                    </ul>\n                <?php } else { ?>\n                    <p>No items in your order.</p>\n                <?php } ?>\n\n                <div class=\"mt-3\">\n                    <a href=\"product_listing.php\" class=\"btn btn-primary\">Continue Shopping</a>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <!-- Include Bootstrap JS -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>\n\n<?php\n// Close database connection\n$conn->close();\n?>\n\n```\n\nThis code creates a basic e-commerce purchase process with the following features:\n\n- Product listing page (not shown, but can be created separately)\n- Shopping cart functionality using session variables\n- Checkout form with customer information validation\n- Integration with a MySQL database to store orders and customers\n- Order confirmation and thank you page\n\nTo use this code:\n\n1. Create a MySQL database and tables as specified in the schema.\n2. Update the `db_connection.php` file with your database credentials.\n3. Implement a product listing page (or similar) that allows users to add items to their cart.\n4. Add additional form fields or validation as needed for your specific use case.\n5. Integrate an actual payment gateway (e.g., Stripe, PayPal) in place of the placeholder payment processing code.\n\nNote: This is a simplified example and should not be used directly in production without additional security measures (e.g., CSRF protection, input sanitization, secure password handling), proper error handling, and additional features as required by your business needs.\n</think>\n\nTo create a basic e-commerce purchase process with the given features, follow these steps:\n\n1. **Set Up Database Tables**:\n   - Create tables for `customers`, `orders`, `order_items`, and `products` in your MySQL database using appropriate SQL schema.\n\n2. **Update Database Connection File** (`db_connection.php`):\n   ```php\n   <?php\n   $servername = \"localhost\";\n   $username = \"your_username\";\n   $password = \"your_password\";\n   $dbname = \"ecommerce_db\";\n\n   // Create connection\n   $conn = new mysqli($servername, $username, $password, $dbname);\n\n   // Check connection\n   if ($conn->connect_error) {\n       die(\"Connection failed: \" . $conn->connect_error);\n   }\n   ?>\n   ```\n\n3. **Create Product Listing Page** (`product_listing.php`):\n   - Implement a page that displays available products and allows users to add items to their cart using session variables.\n\n4. **Implement Shopping Cart Functionality**:\n   - Use PHP sessions to store the shopping cart contents. For example, in `add_to_cart.php`, add product details to the session array.\n\n5. **Add Checkout Form Validation**:\n   - In the checkout page (`checkout.php`), include form validation for customer information and handle errors appropriately.\n\n6. **Integrate Payment Gateway**:\n   - Replace the placeholder payment processing code with an actual integration (e.g., Stripe API) to handle real transactions.\n\n7. **Thank You Page**:\n   - After successful order placement, redirect users to a thank you page (`thankyou.php`) displaying their order details and providing options for further actions.\n\n**Example Implementation:**\n\n- **Product Listing Page**: Displays products with images, descriptions, and \"Add to Cart\" buttons.\n  \n- **Shopping Cart**: Uses `$_SESSION['cart']` to store selected items and quantities.\n\n- **Checkout Process**:\n  - Collects shipping and payment details.\n  - Validates form inputs.\n  - Processes the order (currently a placeholder).\n\n- **Order Confirmation**: Shows order summary, including total amount and purchased items.\n\n**Security Considerations:**\n- Implement CSRF protection.\n- Use prepared statements to prevent SQL injection.\n- Sanitize all user inputs.\n- Store sensitive data securely.\n\nThis setup provides a foundational e-commerce purchase process. Further enhancements like secure payment integration, email notifications, and order tracking can be added based on specific requirements.", "code_blocks": [null, "```php\n<?php\n// Include database connection\ninclude('db_connection.php');\n\n// Query to get all products\n$sql = \"SELECT * FROM products\";\n$result = $conn->query($sql);\n\n// Start the session to use shopping cart\nsession_start();\n\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Product Listing</title>\n    <!-- Include Bootstrap CSS for styling -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n    <div class=\"container mt-4\">\n        <?php\n        if ($result->num_rows > 0) {\n            while($row = $result->fetch_assoc()) {\n                ?>\n                <div class=\"card mb-4\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\"><?php echo $row['name']; ?></h5>\n                        <p class=\"card-text\"><?php echo $row['description']; ?></p>\n                        <p class=\"card-text\">Price: $<?php echo number_format($row['price'], 2); ?></p>\n                        <?php if ($row['image']) { ?>\n                            <img src=\"<?php echo $row['image']; ?>\" alt=\"<?php echo $row['name']; ?>\" class=\"img-fluid w-50 h-auto\">\n                        <?php } ?>\n                        <form action=\"add_to_cart.php\" method=\"post\">\n                            <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $row['id']; ?>\">\n                            <button type=\"submit\" class=\"btn btn-primary\">Add to Cart</button>\n                        </form>\n                    </div>\n                </div>\n                <?php\n            }\n        } else {\n            echo \"No products available.\";\n        }\n        ?>\n    </div>\n\n    <!-- Include Bootstrap JS -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>\n\n<?php\n// Close database connection\n$conn->close();\n?>\n```", "```php\n<?php\nsession_start();\n\nif (isset($_POST['product_id'])) {\n    $productId = $_POST['product_id'];\n    \n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n    \n    // Check if product is already in cart\n    if (array_key_exists($productId, $_SESSION['cart'])) {\n        $_SESSION['cart'][$productId]['quantity']++;\n    } else {\n        $sql = \"SELECT name, price FROM products WHERE id = ?\";\n        $stmt = $conn->prepare($sql);\n        $stmt->bind_param(\"i\", $productId);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        \n        if ($result->num_rows > 0) {\n            $product = $result->fetch_assoc();\n            $_SESSION['cart'][$productId] = array(\n                'name' => $product['name'],\n                'price' => $product['price'],\n                'quantity' => 1\n            );\n        }\n    }\n}\n\n// Redirect back to product listing page\nheader(\"Location: product_listing.php\");\nexit();\n\n// Include database connection\ninclude('db_connection.php');\n$conn->close();\n?>\n```", "```php\n<?php\nsession_start();\n\nif (empty($_SESSION['cart'])) {\n    header(\"Location: product_listing.php\");\n    exit();\n}\n\n// Initialize variables for form fields\n$firstName = $lastName = $email = $address = $city = $state = $zipCode = \"\";\n$errors = array();\n\n// Check if form is submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    // Validate and sanitize input\n    $firstName = htmlspecialchars(trim($_POST['first_name']));\n    $lastName = htmlspecialchars(trim($_POST['last_name']));\n    $email = htmlspecialchars(trim($_POST['email']));\n    $address = htmlspecialchars(trim($_POST['address']));\n    $city = htmlspecialchars(trim($_POST['city']));\n    $state = htmlspecialchars(trim($_POST['state']));\n    $zipCode = htmlspecialchars(trim($_POST['zip_code']));\n\n    // Basic validation\n    if (empty($firstName)) {\n        $errors[] = \"First name is required.\";\n    }\n    if (empty($lastName)) {\n        $errors[] = \"Last name is required.\";\n    }\n    if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        $errors[] = \"Valid email is required.\";\n    }\n    if (empty($address)) {\n        $errors[] = \"Address is required.\";\n    }\n    if (empty($city)) {\n        $errors[] = \"City is required.\";\n    }\n    if (empty($state)) {\n        $errors[] = \"State is required.\";\n    }\n    if (empty($zipCode) || !preg_match('/^[0-9]{5}(-[0-9]{4})?$/', $zipCode)) {\n        $errors[] = \"Valid ZIP code is required.\";\n    }\n\n    // If no errors, process the payment\n    if (empty($errors)) {\n        // Here you would typically integrate with a payment gateway like Stripe or PayPal\n        // For this example, we'll assume the payment was successful\n\n        // Calculate total amount\n        $totalAmount = 0;\n        foreach ($_SESSION['cart'] as $item) {\n            $totalAmount += $item['price'] * $item['quantity'];\n        }\n\n        // Insert customer into database if not exists\n        $sqlCheckCustomer = \"SELECT id FROM customers WHERE email = ?\";\n        $stmt = $conn->prepare($sqlCheckCustomer);\n        $stmt->bind_param(\"s\", $email);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        if ($result->num_rows == 0) {\n            $sqlInsertCustomer = \"INSERT INTO customers (first_name, last_name, email, address, city, state, zip_code) VALUES (?, ?, ?, ?, ?, ?, ?)\";\n            $stmt = $conn->prepare($sqlInsertCustomer);\n            $stmt->bind_param(\"sssssss\", $firstName, $lastName, $email, $address, $city, $state, $zipCode);\n            if (!$stmt->execute()) {\n                die(\"Error inserting customer: \" . $stmt->error);\n            }\n            $customerId = $conn->insert_id;\n        } else {\n            $row = $result->fetch_assoc();\n            $customerId = $row['id'];\n        }\n\n        // Insert order\n        $sqlInsertOrder = \"INSERT INTO orders (customer_id, total_amount) VALUES (?, ?)\";\n        $stmt = $conn->prepare($sqlInsertOrder);\n        $stmt->bind_param(\"id\", $customerId, $totalAmount);\n        if (!$stmt->execute()) {\n            die(\"Error inserting order: \" . $stmt->error);\n        }\n        $orderId = $conn->insert_id;\n\n        // Insert order items\n        foreach ($_SESSION['cart'] as $productId => $item) {\n            $sqlInsertOrderItem = \"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\";\n            $stmt = $conn->prepare($sqlInsertOrderItem);\n            $stmt->bind_param(\"iidi\", $orderId, $productId, $item['quantity'], $item['price']);\n            if (!$stmt->execute()) {\n                die(\"Error inserting order item: \" . $stmt->error);\n            }\n        }\n\n        // Clear cart\n        unset($_SESSION['cart']);\n\n        // Redirect to thank you page\n        header(\"Location: thankyou.php?order_id=\" . $orderId);\n        exit();\n    }\n}\n\n// Include database connection\ninclude('db_connection.php');\n$conn->close();\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Checkout</title>\n    <!-- Include Bootstrap CSS -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body class=\"bg-light\">\n    <div class=\"container mt-4\">\n        <?php if (!empty($errors)) { ?>\n            <div class=\"alert alert-danger\">\n                <?php foreach ($errors as $error) { ?>\n                    <li><?php echo $error; ?></li>\n                <?php } ?>\n            </div>\n        <?php } ?>\n\n        <h2>Checkout</h2>\n        <form action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\" method=\"post\">\n            <div class=\"row g-4\">\n                <div class=\"col-md-6\">\n                    <label for=\"first_name\" class=\"form-label\">First Name</label>\n                    <input type=\"text\" class=\"form-control\" id=\"first_name\" name=\"first_name\" value=\"<?php echo $firstName; ?>\">\n                </div>\n                <div class=\"col-md-6\">\n                    <label for=\"last_name\" class=\"form-label\">Last Name</label>\n                    <input type=\"text\" class=\"form-control\" id=\"last_name\" name=\"last_name\" value=\"<?php echo $lastName; ?>\">\n                </div>\n                <div class=\"col-md-12\">\n                    <label for=\"email\" class=\"form-label\">Email Address</label>\n                    <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" value=\"<?php echo $email; ?>\">\n                </div>\n                <div class=\"col-md-12\">\n                    <label for=\"address\" class=\"form-label\">Address</label>\n                    <input type=\"text\" class=\"form-control\" id=\"address\" name=\"address\" value=\"<?php echo $address; ?>\">\n                </div>\n                <div class=\"col-md-6\">\n                    <label for=\"city\" class=\"form-label\">City</label>\n                    <input type=\"text\" class=\"form-control\" id=\"city\" name=\"city\" value=\"<?php echo $city; ?>\">\n                </div>\n                <div class=\"col-md-4\">\n                    <label for=\"state\" class=\"form-label\">State</label>\n                    <select class=\"form-select\" id=\"state\" name=\"state\">\n                        <option <?php if ($state == 'California') {echo 'selected';} ?>>California</option>\n                        <!-- Add more states as needed -->\n                    </select>\n                </div>\n                <div class=\"col-md-2\">\n                    <label for=\"zip_code\" class=\"form-label\">ZIP Code</label>\n                    <input type=\"text\" class=\"form-control\" id=\"zip_code\" name=\"zip_code\" value=\"<?php echo $zipCode; ?>\">\n                </div>\n            </div>\n\n            <button type=\"submit\" class=\"btn btn-primary mt-3\">Place Order</button>\n        </form>\n    </div>\n\n    <!-- Include Bootstrap JS -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\n\n// Get order ID from query string\nif (isset($_GET['order_id'])) {\n    $orderId = $_GET['order_id'];\n} else {\n    header(\"Location: product_listing.php\");\n    exit();\n}\n\n// Include database connection\ninclude('db_connection.php');\n\n// Query to get order details\n$sql = \"SELECT o.id AS order_id, c.first_name, c.last_name, o.total_amount \n        FROM orders o \n        JOIN customers c ON o.customer_id = c.id \n        WHERE o.id = ?\";\n$stmt = $conn->prepare($sql);\n$stmt->bind_param(\"i\", $orderId);\n$stmt->execute();\n$result = $stmt->get_result();\n\nif ($result->num_rows == 0) {\n    die(\"Invalid order ID.\");\n}\n\n$orderDetails = $result->fetch_assoc();\n\n// Get order items\n$sqlItems = \"SELECT oi.quantity, p.name AS product_name \n            FROM order_items oi \n            JOIN products p ON oi.product_id = p.id \n            WHERE oi.order_id = ?\";\n$stmt = $conn->prepare($sqlItems);\n$stmt->bind_param(\"i\", $orderId);\n$stmt->execute();\n$resultItems = $stmt->get_result();\n\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Thank You</title>\n    <!-- Include Bootstrap CSS -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body class=\"bg-light\">\n    <div class=\"container mt-4\">\n        <h2>Thank you for your order!</h2>\n        <p>Your order has been received and will be processed shortly.</p>\n        \n        <div class=\"card mt-4\">\n            <div class=\"card-body\">\n                <h5 class=\"card-title\">Order Summary</h5>\n                <p><strong>Order ID:</strong> <?php echo $orderDetails['order_id']; ?></p>\n                <p><strong>Name:</strong> <?php echo $orderDetails['first_name'] . ' ' . $orderDetails['last_name']; ?></p>\n                <p><strong>Total Amount:</strong> $<?php echo number_format($orderDetails['total_amount'], 2); ?></p>\n\n                <h6>Ordered Items:</h6>\n                <?php if ($resultItems->num_rows > 0) { ?>\n                    <ul class=\"list-group\">\n                        <?php while ($item = $resultItems->fetch_assoc()) { ?>\n                            <li class=\"list-group-item\"><?php echo $item['product_name']; ?> (Quantity: <?php echo $item['quantity']; ?>)</li>\n                        <?php } ?>\n                    </ul>\n                <?php } else { ?>\n                    <p>No items in your order.</p>\n                <?php } ?>\n\n                <div class=\"mt-3\">\n                    <a href=\"product_listing.php\" class=\"btn btn-primary\">Continue Shopping</a>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <!-- Include Bootstrap JS -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>\n\n<?php\n// Close database connection\n$conn->close();\n?>\n\n```"]}
