{"prompt": "Create a purchase cart functionality using php", "llm_output": "Here's an example of how to create a basic purchase cart functionality using PHP. We'll be using MySQL as our database management system.\n\n**Database Schema**\n\nBefore we dive into the code, let's define the schema for our `cart` table:\n\n```sql\nCREATE TABLE cart (\n  id INT AUTO_INCREMENT,\n  user_id INT NOT NULL,\n  product_id INT NOT NULL,\n  quantity INT NOT NULL DEFAULT 1,\n  total_price DECIMAL(10,2) NOT NULL,\n  PRIMARY KEY (id),\n  FOREIGN KEY (user_id) REFERENCES users(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n**PHP Code**\n\nWe'll create a `Cart` class that will handle all cart-related operations.\n\n```php\nclass Cart {\n  private $db;\n\n  public function __construct() {\n    $this->db = new Database(); // Assuming we have a `Database` class for database connection\n  }\n\n  public function addProduct($userId, $productId) {\n    $query = \"INSERT INTO cart (user_id, product_id, quantity, total_price)\n              VALUES (:user_id, :product_id, 1, 0)\";\n    $stmt = $this->db->prepare($query);\n    $stmt->bindParam(':user_id', $userId);\n    $stmt->bindParam(':product_id', $productId);\n    return $stmt->execute();\n  }\n\n  public function updateQuantity($cartId, $newQuantity) {\n    $query = \"UPDATE cart SET quantity = :quantity WHERE id = :cart_id\";\n    $stmt = $this->db->prepare($query);\n    $stmt->bindParam(':quantity', $newQuantity);\n    $stmt->bindParam(':cart_id', $cartId);\n    return $stmt->execute();\n  }\n\n  public function removeProduct($cartId) {\n    $query = \"DELETE FROM cart WHERE id = :cart_id\";\n    $stmt = $this->db->prepare($query);\n    $stmt->bindParam(':cart_id', $cartId);\n    return $stmt->execute();\n  }\n\n  public function getCartItems($userId) {\n    $query = \"SELECT * FROM cart WHERE user_id = :user_id\";\n    $stmt = $this->db->prepare($query);\n    $stmt->bindParam(':user_id', $userId);\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n  }\n\n  public function getTotalCost($cartId) {\n    $query = \"SELECT total_price FROM cart WHERE id = :cart_id\";\n    $stmt = $this->db->prepare($query);\n    $stmt->bindParam(':cart_id', $cartId);\n    $stmt->execute();\n    return $stmt->fetchColumn();\n  }\n\n  public function placeOrder() {\n    // This method will calculate the total cost, update cart items, and insert a new order into the database\n    // For simplicity, we'll assume this is done elsewhere in your codebase\n  }\n}\n```\n\n**Example Usage**\n\n```php\n$cart = new Cart();\n// Add product to cart\n$userId = 1;\n$productId = 5;\n$success = $cart->addProduct($userId, $productId);\nif ($success) {\n  echo \"Product added to cart successfully!\";\n}\n\n// Update quantity of an item in the cart\n$cartId = 10;\n$newQuantity = 3;\n$success = $cart->updateQuantity($cartId, $newQuantity);\nif ($success) {\n  echo \"Quantity updated successfully!\";\n}\n\n// Get all items in the cart for a user\n$userId = 1;\n$items = $cart->getCartItems($userId);\nprint_r($items);\n\n// Remove an item from the cart\n$cartId = 10;\n$success = $cart->removeProduct($cartId);\nif ($success) {\n  echo \"Item removed from cart successfully!\";\n}\n```\n\nThis is a basic implementation, and you can customize it according to your needs. Note that this example assumes you're using PDO for database interactions.\n\n**Commit Message Guidelines**\n\nWhen committing changes to the codebase, follow standard professional guidelines:\n\n* Use imperative mood (e.g., \"Add purchase cart functionality\" instead of \"Added purchase cart functionality\")\n* Keep messages concise and descriptive\n* Follow the conventional commit message format: `type(scope): subject`", "code_blocks": [null, "```php\nclass Cart {\n  private $db;\n\n  public function __construct() {\n    $this->db = new Database(); // Assuming we have a `Database` class for database connection\n  }\n\n  public function addProduct($userId, $productId) {\n    $query = \"INSERT INTO cart (user_id, product_id, quantity, total_price)\n              VALUES (:user_id, :product_id, 1, 0)\";\n    $stmt = $this->db->prepare($query);\n    $stmt->bindParam(':user_id', $userId);\n    $stmt->bindParam(':product_id', $productId);\n    return $stmt->execute();\n  }\n\n  public function updateQuantity($cartId, $newQuantity) {\n    $query = \"UPDATE cart SET quantity = :quantity WHERE id = :cart_id\";\n    $stmt = $this->db->prepare($query);\n    $stmt->bindParam(':quantity', $newQuantity);\n    $stmt->bindParam(':cart_id', $cartId);\n    return $stmt->execute();\n  }\n\n  public function removeProduct($cartId) {\n    $query = \"DELETE FROM cart WHERE id = :cart_id\";\n    $stmt = $this->db->prepare($query);\n    $stmt->bindParam(':cart_id', $cartId);\n    return $stmt->execute();\n  }\n\n  public function getCartItems($userId) {\n    $query = \"SELECT * FROM cart WHERE user_id = :user_id\";\n    $stmt = $this->db->prepare($query);\n    $stmt->bindParam(':user_id', $userId);\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n  }\n\n  public function getTotalCost($cartId) {\n    $query = \"SELECT total_price FROM cart WHERE id = :cart_id\";\n    $stmt = $this->db->prepare($query);\n    $stmt->bindParam(':cart_id', $cartId);\n    $stmt->execute();\n    return $stmt->fetchColumn();\n  }\n\n  public function placeOrder() {\n    // This method will calculate the total cost, update cart items, and insert a new order into the database\n    // For simplicity, we'll assume this is done elsewhere in your codebase\n  }\n}\n```", "```php\n$cart = new Cart();\n// Add product to cart\n$userId = 1;\n$productId = 5;\n$success = $cart->addProduct($userId, $productId);\nif ($success) {\n  echo \"Product added to cart successfully!\";\n}\n\n// Update quantity of an item in the cart\n$cartId = 10;\n$newQuantity = 3;\n$success = $cart->updateQuantity($cartId, $newQuantity);\nif ($success) {\n  echo \"Quantity updated successfully!\";\n}\n\n// Get all items in the cart for a user\n$userId = 1;\n$items = $cart->getCartItems($userId);\nprint_r($items);\n\n// Remove an item from the cart\n$cartId = 10;\n$success = $cart->removeProduct($cartId);\nif ($success) {\n  echo \"Item removed from cart successfully!\";\n}\n```"]}
