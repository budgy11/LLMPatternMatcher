{"prompt": "Create a purchase cart functionality using php", "llm_output": "Here is an example of how you can create a simple purchase cart functionality using PHP. This will include the following features:\n\n* User can add items to cart\n* User can view their cart\n* User can remove items from cart\n* User can update quantity of items in cart\n* User can checkout (not including payment processing)\n\n**Database Schema**\n\nFirst, let's create a database schema for our e-commerce application. We'll use MySQL.\n\n```sql\nCREATE TABLE products (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(255),\n    price DECIMAL(10,2)\n);\n\nCREATE TABLE carts (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    user_id INT,\n    total DECIMAL(10,2)\n);\n\nCREATE TABLE cart_items (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    cart_id INT,\n    product_id INT,\n    quantity INT\n);\n```\n\n**PHP Code**\n\nNext, let's create the PHP code for our cart functionality.\n\n```php\n// config.php (configuration file)\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n// db.php (database connection file)\nfunction connectToDB() {\n    $conn = new PDO(\"mysql:host=$GLOBALS['host'];dbname=$GLOBALS['dbname']\", $GLOBALS['username'], $GLOBALS['password']);\n    return $conn;\n}\n\n// cart.php (cart functionality file)\nrequire_once 'config.php';\nrequire_once 'db.php';\n\nclass Cart {\n    private $conn;\n\n    function __construct() {\n        $this->conn = connectToDB();\n    }\n\n    // Add item to cart\n    public function addItem($product_id, $quantity) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM products WHERE id = :product_id\");\n            $stmt->bindParam(':product_id', $product_id);\n            $stmt->execute();\n            $product = $stmt->fetch();\n\n            if ($product) {\n                $cartStmt = $this->conn->prepare(\"SELECT * FROM carts WHERE user_id = :user_id AND total >= :total\");\n                $cartStmt->bindParam(':user_id', $_SESSION['user_id']);\n                $cartStmt->bindParam(':total', $product['price'] * $quantity);\n                $cartStmt->execute();\n                $cart = $cartStmt->fetch();\n\n                if (!$cart) {\n                    // Create new cart\n                    $newCartStmt = $this->conn->prepare(\"INSERT INTO carts (user_id, total) VALUES (:user_id, :total)\");\n                    $newCartStmt->bindParam(':user_id', $_SESSION['user_id']);\n                    $newCartStmt->bindParam(':total', $product['price'] * $quantity);\n                    $newCartStmt->execute();\n                    $cartId = $this->conn->lastInsertId();\n\n                    // Add item to cart\n                    $addItemStmt = $this->conn->prepare(\"INSERT INTO cart_items (cart_id, product_id, quantity) VALUES (:cart_id, :product_id, :quantity)\");\n                    $addItemStmt->bindParam(':cart_id', $cartId);\n                    $addItemStmt->bindParam(':product_id', $product['id']);\n                    $addItemStmt->bindParam(':quantity', $quantity);\n                    $addItemStmt->execute();\n                } else {\n                    // Add item to existing cart\n                    $existingItemStmt = $this->conn->prepare(\"SELECT * FROM cart_items WHERE product_id = :product_id AND cart_id = :cart_id\");\n                    $existingItemStmt->bindParam(':product_id', $product['id']);\n                    $existingItemStmt->bindParam(':cart_id', $_SESSION['cart_id']);\n                    $existingItemStmt->execute();\n                    $existingItem = $existingItemStmt->fetch();\n\n                    if (!$existingItem) {\n                        // Update quantity in cart\n                        $updateQuantityStmt = $this->conn->prepare(\"UPDATE cart_items SET quantity = quantity + :quantity WHERE product_id = :product_id AND cart_id = :cart_id\");\n                        $updateQuantityStmt->bindParam(':product_id', $product['id']);\n                        $updateQuantityStmt->bindParam(':quantity', $quantity);\n                        $updateQuantityStmt->bindParam(':cart_id', $_SESSION['cart_id']);\n                        $updateQuantityStmt->execute();\n                    } else {\n                        // Update quantity in existing item\n                        $updateExistingItemStmt = $this->conn->prepare(\"UPDATE cart_items SET quantity = :quantity WHERE product_id = :product_id AND cart_id = :cart_id\");\n                        $updateExistingItemStmt->bindParam(':product_id', $product['id']);\n                        $updateExistingItemStmt->bindParam(':quantity', $quantity);\n                        $updateExistingItemStmt->bindParam(':cart_id', $_SESSION['cart_id']);\n                        $updateExistingItemStmt->execute();\n                    }\n                }\n\n                // Update cart total\n                $updateTotalStmt = $this->conn->prepare(\"UPDATE carts SET total = :total WHERE id = :id\");\n                $updateTotalStmt->bindParam(':id', $_SESSION['cart_id']);\n                $updateTotalStmt->bindParam(':total', $this->getCartTotal());\n                $updateTotalStmt->execute();\n\n                // Update session cart ID\n                $_SESSION['cart_id'] = $cartId;\n            }\n        } catch (PDOException $e) {\n            print \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Get cart total\n    public function getCartTotal() {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM carts WHERE id = :cart_id\");\n            $stmt->bindParam(':cart_id', $_SESSION['cart_id']);\n            $stmt->execute();\n            $cart = $stmt->fetch();\n\n            if ($cart) {\n                return $cart['total'];\n            } else {\n                return 0;\n            }\n        } catch (PDOException $e) {\n            print \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Remove item from cart\n    public function removeItem($product_id, $quantity = null) {\n        try {\n            if ($quantity === null) {\n                $quantity = 1;\n            }\n\n            $stmt = $this->conn->prepare(\"SELECT * FROM cart_items WHERE product_id = :product_id AND cart_id = :cart_id\");\n            $stmt->bindParam(':product_id', $product_id);\n            $stmt->bindParam(':cart_id', $_SESSION['cart_id']);\n            $stmt->execute();\n            $item = $stmt->fetch();\n\n            if ($item) {\n                // Update quantity in cart\n                $updateQuantityStmt = $this->conn->prepare(\"UPDATE cart_items SET quantity = :quantity WHERE product_id = :product_id AND cart_id = :cart_id\");\n                $updateQuantityStmt->bindParam(':product_id', $product_id);\n                $updateQuantityStmt->bindParam(':quantity', 0);\n                $updateQuantityStmt->bindParam(':cart_id', $_SESSION['cart_id']);\n                $updateQuantityStmt->execute();\n\n                // Update cart total\n                $updateTotalStmt = $this->conn->prepare(\"UPDATE carts SET total = :total WHERE id = :id\");\n                $updateTotalStmt->bindParam(':id', $_SESSION['cart_id']);\n                $updateTotalStmt->bindParam(':total', $this->getCartTotal());\n                $updateTotalStmt->execute();\n            }\n        } catch (PDOException $e) {\n            print \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Update quantity of item in cart\n    public function updateQuantity($product_id, $quantity) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM cart_items WHERE product_id = :product_id AND cart_id = :cart_id\");\n            $stmt->bindParam(':product_id', $product_id);\n            $stmt->bindParam(':cart_id', $_SESSION['cart_id']);\n            $stmt->execute();\n            $item = $stmt->fetch();\n\n            if ($item) {\n                // Update quantity in cart\n                $updateQuantityStmt = $this->conn->prepare(\"UPDATE cart_items SET quantity = :quantity WHERE product_id = :product_id AND cart_id = :cart_id\");\n                $updateQuantityStmt->bindParam(':product_id', $product_id);\n                $updateQuantityStmt->bindParam(':quantity', $quantity);\n                $updateQuantityStmt->bindParam(':cart_id', $_SESSION['cart_id']);\n                $updateQuantityStmt->execute();\n\n                // Update cart total\n                $updateTotalStmt = $this->conn->prepare(\"UPDATE carts SET total = :total WHERE id = :id\");\n                $updateTotalStmt->bindParam(':id', $_SESSION['cart_id']);\n                $updateTotalStmt->bindParam(':total', $this->getCartTotal());\n                $updateTotalStmt->execute();\n            }\n        } catch (PDOException $e) {\n            print \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Get cart items\n    public function getCartItems() {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM cart_items WHERE cart_id = :cart_id\");\n            $stmt->bindParam(':cart_id', $_SESSION['cart_id']);\n            $stmt->execute();\n            return $stmt->fetchAll();\n        } catch (PDOException $e) {\n            print \"Error: \" . $e->getMessage();\n        }\n    }\n}\n\n// Example usage\n$cart = new Cart();\n\n// Add item to cart\n$cart->addItem(1, 2);\n\n// View cart items\nprint_r($cart->getCartItems());\n\n// Update quantity of item in cart\n$cart->updateQuantity(1, 3);\n\n// Remove item from cart\n$cart->removeItem(1);\n```\n\n**Notes**\n\n* This code assumes that the user is logged in and has a `user_id` session variable.\n* The `addItem` method checks if the product already exists in the cart. If it does, it updates the quantity of the existing item. Otherwise, it adds a new item to the cart.\n* The `removeItem` method removes an item from the cart by setting its quantity to 0.\n* The `updateQuantity` method updates the quantity of an item in the cart.\n* The `getCartTotal` method returns the total value of all items in the cart.\n* The `getCartItems` method returns an array of all items in the cart.\n\nThis is a basic example of how you can implement a purchase cart functionality using PHP and MySQL. You may need to modify it to fit your specific requirements.", "code_blocks": [null, "```php\n// config.php (configuration file)\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n// db.php (database connection file)\nfunction connectToDB() {\n    $conn = new PDO(\"mysql:host=$GLOBALS['host'];dbname=$GLOBALS['dbname']\", $GLOBALS['username'], $GLOBALS['password']);\n    return $conn;\n}\n\n// cart.php (cart functionality file)\nrequire_once 'config.php';\nrequire_once 'db.php';\n\nclass Cart {\n    private $conn;\n\n    function __construct() {\n        $this->conn = connectToDB();\n    }\n\n    // Add item to cart\n    public function addItem($product_id, $quantity) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM products WHERE id = :product_id\");\n            $stmt->bindParam(':product_id', $product_id);\n            $stmt->execute();\n            $product = $stmt->fetch();\n\n            if ($product) {\n                $cartStmt = $this->conn->prepare(\"SELECT * FROM carts WHERE user_id = :user_id AND total >= :total\");\n                $cartStmt->bindParam(':user_id', $_SESSION['user_id']);\n                $cartStmt->bindParam(':total', $product['price'] * $quantity);\n                $cartStmt->execute();\n                $cart = $cartStmt->fetch();\n\n                if (!$cart) {\n                    // Create new cart\n                    $newCartStmt = $this->conn->prepare(\"INSERT INTO carts (user_id, total) VALUES (:user_id, :total)\");\n                    $newCartStmt->bindParam(':user_id', $_SESSION['user_id']);\n                    $newCartStmt->bindParam(':total', $product['price'] * $quantity);\n                    $newCartStmt->execute();\n                    $cartId = $this->conn->lastInsertId();\n\n                    // Add item to cart\n                    $addItemStmt = $this->conn->prepare(\"INSERT INTO cart_items (cart_id, product_id, quantity) VALUES (:cart_id, :product_id, :quantity)\");\n                    $addItemStmt->bindParam(':cart_id', $cartId);\n                    $addItemStmt->bindParam(':product_id', $product['id']);\n                    $addItemStmt->bindParam(':quantity', $quantity);\n                    $addItemStmt->execute();\n                } else {\n                    // Add item to existing cart\n                    $existingItemStmt = $this->conn->prepare(\"SELECT * FROM cart_items WHERE product_id = :product_id AND cart_id = :cart_id\");\n                    $existingItemStmt->bindParam(':product_id', $product['id']);\n                    $existingItemStmt->bindParam(':cart_id', $_SESSION['cart_id']);\n                    $existingItemStmt->execute();\n                    $existingItem = $existingItemStmt->fetch();\n\n                    if (!$existingItem) {\n                        // Update quantity in cart\n                        $updateQuantityStmt = $this->conn->prepare(\"UPDATE cart_items SET quantity = quantity + :quantity WHERE product_id = :product_id AND cart_id = :cart_id\");\n                        $updateQuantityStmt->bindParam(':product_id', $product['id']);\n                        $updateQuantityStmt->bindParam(':quantity', $quantity);\n                        $updateQuantityStmt->bindParam(':cart_id', $_SESSION['cart_id']);\n                        $updateQuantityStmt->execute();\n                    } else {\n                        // Update quantity in existing item\n                        $updateExistingItemStmt = $this->conn->prepare(\"UPDATE cart_items SET quantity = :quantity WHERE product_id = :product_id AND cart_id = :cart_id\");\n                        $updateExistingItemStmt->bindParam(':product_id', $product['id']);\n                        $updateExistingItemStmt->bindParam(':quantity', $quantity);\n                        $updateExistingItemStmt->bindParam(':cart_id', $_SESSION['cart_id']);\n                        $updateExistingItemStmt->execute();\n                    }\n                }\n\n                // Update cart total\n                $updateTotalStmt = $this->conn->prepare(\"UPDATE carts SET total = :total WHERE id = :id\");\n                $updateTotalStmt->bindParam(':id', $_SESSION['cart_id']);\n                $updateTotalStmt->bindParam(':total', $this->getCartTotal());\n                $updateTotalStmt->execute();\n\n                // Update session cart ID\n                $_SESSION['cart_id'] = $cartId;\n            }\n        } catch (PDOException $e) {\n            print \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Get cart total\n    public function getCartTotal() {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM carts WHERE id = :cart_id\");\n            $stmt->bindParam(':cart_id', $_SESSION['cart_id']);\n            $stmt->execute();\n            $cart = $stmt->fetch();\n\n            if ($cart) {\n                return $cart['total'];\n            } else {\n                return 0;\n            }\n        } catch (PDOException $e) {\n            print \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Remove item from cart\n    public function removeItem($product_id, $quantity = null) {\n        try {\n            if ($quantity === null) {\n                $quantity = 1;\n            }\n\n            $stmt = $this->conn->prepare(\"SELECT * FROM cart_items WHERE product_id = :product_id AND cart_id = :cart_id\");\n            $stmt->bindParam(':product_id', $product_id);\n            $stmt->bindParam(':cart_id', $_SESSION['cart_id']);\n            $stmt->execute();\n            $item = $stmt->fetch();\n\n            if ($item) {\n                // Update quantity in cart\n                $updateQuantityStmt = $this->conn->prepare(\"UPDATE cart_items SET quantity = :quantity WHERE product_id = :product_id AND cart_id = :cart_id\");\n                $updateQuantityStmt->bindParam(':product_id', $product_id);\n                $updateQuantityStmt->bindParam(':quantity', 0);\n                $updateQuantityStmt->bindParam(':cart_id', $_SESSION['cart_id']);\n                $updateQuantityStmt->execute();\n\n                // Update cart total\n                $updateTotalStmt = $this->conn->prepare(\"UPDATE carts SET total = :total WHERE id = :id\");\n                $updateTotalStmt->bindParam(':id', $_SESSION['cart_id']);\n                $updateTotalStmt->bindParam(':total', $this->getCartTotal());\n                $updateTotalStmt->execute();\n            }\n        } catch (PDOException $e) {\n            print \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Update quantity of item in cart\n    public function updateQuantity($product_id, $quantity) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM cart_items WHERE product_id = :product_id AND cart_id = :cart_id\");\n            $stmt->bindParam(':product_id', $product_id);\n            $stmt->bindParam(':cart_id', $_SESSION['cart_id']);\n            $stmt->execute();\n            $item = $stmt->fetch();\n\n            if ($item) {\n                // Update quantity in cart\n                $updateQuantityStmt = $this->conn->prepare(\"UPDATE cart_items SET quantity = :quantity WHERE product_id = :product_id AND cart_id = :cart_id\");\n                $updateQuantityStmt->bindParam(':product_id', $product_id);\n                $updateQuantityStmt->bindParam(':quantity', $quantity);\n                $updateQuantityStmt->bindParam(':cart_id', $_SESSION['cart_id']);\n                $updateQuantityStmt->execute();\n\n                // Update cart total\n                $updateTotalStmt = $this->conn->prepare(\"UPDATE carts SET total = :total WHERE id = :id\");\n                $updateTotalStmt->bindParam(':id', $_SESSION['cart_id']);\n                $updateTotalStmt->bindParam(':total', $this->getCartTotal());\n                $updateTotalStmt->execute();\n            }\n        } catch (PDOException $e) {\n            print \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Get cart items\n    public function getCartItems() {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM cart_items WHERE cart_id = :cart_id\");\n            $stmt->bindParam(':cart_id', $_SESSION['cart_id']);\n            $stmt->execute();\n            return $stmt->fetchAll();\n        } catch (PDOException $e) {\n            print \"Error: \" . $e->getMessage();\n        }\n    }\n}\n\n// Example usage\n$cart = new Cart();\n\n// Add item to cart\n$cart->addItem(1, 2);\n\n// View cart items\nprint_r($cart->getCartItems());\n\n// Update quantity of item in cart\n$cart->updateQuantity(1, 3);\n\n// Remove item from cart\n$cart->removeItem(1);\n```"]}
