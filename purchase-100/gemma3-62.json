{"prompt": "Create a purchase cart functionality using php", "llm_output": "```php\n<?php\nsession_start();\n\n// Database Connection (Replace with your actual database details)\n$db_host = \"localhost\";\n$db_name = \"shopping_cart\";\n$db_user = \"your_user\";\n$db_password = \"your_password\";\n\n// Function to connect to the database\nfunction connectToDatabase() {\n    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n    if ($conn->connect_error) {\n        die(\"Connection failed: \" . $conn->connect_error);\n    }\n    return $conn;\n}\n\n// Function to add an item to the cart\nfunction addToCart($product_id, $quantity) {\n    $conn = connectToDatabase();\n\n    // Check if the product exists\n    $product_query = \"SELECT id, name, price FROM products WHERE id = ?\";\n    $stmt = $conn->prepare($product_query);\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($row = $result->fetch_assoc()) {\n        $product_name = $row['name'];\n        $product_price = $row['price'];\n\n        if (isset($_SESSION['cart'][$product_id])) {\n            $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n        } else {\n            $_SESSION['cart'][$product_id] = [\n                'quantity' => $quantity,\n                'product_id' => $product_id,\n                'product_name' => $product_name,\n                'product_price' => $product_price\n            ];\n        }\n    } else {\n        // Product not found - you might want to log this\n        echo \"Product with ID \" . $product_id . \" not found.\";\n    }\n\n    $stmt->close();\n}\n\n// Function to remove an item from the cart\nfunction removeFromCart($product_id) {\n    if (isset($_SESSION['cart'][$product_id])) {\n        unset($_SESSION['cart'][$product_id]);\n    }\n}\n\n// Function to update the quantity of an item in the cart\nfunction updateQuantity($product_id, $quantity) {\n    if (isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id]['quantity'] = $quantity;\n    }\n}\n\n// Function to get the cart contents\nfunction getCartContents() {\n    return $_SESSION['cart'];\n}\n\n// Function to calculate the total cart value\nfunction calculateTotal() {\n    $total = 0;\n    $cart = getCartContents();\n    foreach ($cart as $item) {\n        $total += $item['product_price'] * $item['quantity'];\n    }\n    return $total;\n}\n\n// ---------------------  Handle Cart Actions  ---------------------\n\n// Check if the action is \"add\"\nif (isset($_POST['action']) && $_POST['action'] == 'add') {\n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n    addToCart($product_id, $quantity);\n}\n\n// Check if the action is \"remove\"\nif (isset($_POST['action']) && $_POST['action'] == 'remove') {\n    $product_id = $_POST['product_id'];\n    removeFromCart($product_id);\n}\n\n// Check if the action is \"update\"\nif (isset($_POST['action']) && $_POST['action'] == 'update') {\n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n    updateQuantity($product_id, $quantity);\n}\n\n\n// --------------------- Display the Cart  ---------------------\n\n// Get the cart contents\n$cart = getCartContents();\n\n// Calculate the total\n$total = calculateTotal();\n\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n    <style>\n        .cart-item {\n            border: 1px solid #ccc;\n            margin-bottom: 10px;\n            padding: 10px;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>Shopping Cart</h1>\n\n    <?php if (empty($cart)): ?>\n        <p>Your cart is empty.</p>\n    <?php else: ?>\n\n        <table id=\"cart-table\">\n            <thead>\n                <tr>\n                    <th>Product</th>\n                    <th>Price</th>\n                    <th>Quantity</th>\n                    <th>Total</th>\n                    <th>Action</th>\n                </tr>\n            </thead>\n            <tbody>\n                <?php\n                foreach ($cart as $item): ?>\n                    <tr class=\"cart-item\">\n                        <td><?php echo $item['product_name']; ?></td>\n                        <td><?php echo $item['product_price']; ?></td>\n                        <td><?php echo $item['quantity']; ?></td>\n                        <td><?php echo number_format($item['product_price'] * $item['quantity'], 2); ?></td>\n                        <td>\n                            <form method=\"post\">\n                                <input type=\"hidden\" name=\"action\" value=\"update\">\n                                <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $item['product_id']; ?>\">\n                                <input type=\"number\" name=\"quantity\" value=\"<?php echo $item['quantity']; ?>\" min=\"1\">\n                                <button type=\"submit\">Update</button>\n                            </form>\n                            <form method=\"post\">\n                                <input type=\"hidden\" name=\"action\" value=\"remove\">\n                                <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $item['product_id']; ?>\">\n                                <button type=\"submit\">Remove</button>\n                            </form>\n                        </td>\n                    </tr>\n                <?php endforeach; ?>\n            </tbody>\n        </table>\n\n        <p><strong>Total:</strong> <?php echo number_format($total, 2); ?></p>\n    <?php endif; ?>\n\n    <hr>\n    <p>\n        <a href=\"index.php\">Continue Shopping</a>\n    </p>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Session Management:** Uses `session_start()` to maintain cart contents across multiple pages. This is *crucial* for a functional shopping cart.\n* **Database Interaction (Placeholder):**  The code includes a function `connectToDatabase()` to handle database connections.  **You *must* replace the placeholder database details with your actual credentials.** The `addToCart` function uses prepared statements to prevent SQL injection.\n* **Prepared Statements:** Using `prepare()` and `bind_param()` is *essential* for security.  It prevents malicious users from injecting SQL code into your queries.\n* **Error Handling (Basic):** Added a basic error message if a product is not found.  More robust error handling is recommended for a production environment.\n* **Cart Logic:**  `addToCart`, `removeFromCart`, and `updateQuantity` functions are clearly defined for managing the cart contents.\n* **Total Calculation:** `calculateTotal` calculates the total cart value accurately.\n* **Clear Display:**  Displays the cart items in a table format, including the product name, price, quantity, and total for each item.\n* **Update and Remove Buttons:**  Includes update and remove buttons for each item in the cart.  The update button uses a hidden input field for the quantity to be updated.\n* **Form Handling:** Uses `method=\"post\"` for all forms, and correctly handles the `action` and `product_id` parameters.\n* **Continue Shopping Link:** Adds a link back to the main product listing page (index.php).\n* **Security:**  Prepared statements prevent SQL injection. However, always validate and sanitize user inputs to prevent other types of vulnerabilities.\n* **Code Organization:**  The code is well-organized into functions for better readability and maintainability.\n* **Comments:**  Includes comments to explain the purpose of each section of the code.\n* **Number Formatting:** `number_format()` is used to display currency values in a user-friendly format.\n* **HTML Structure:**  Uses a table to organize the cart items, and includes appropriate HTML elements for the buttons and form inputs.\n\n**How to Use:**\n\n1. **Create a Database:** Create a database named `shopping_cart` (or whatever you want) and a table named `products`. The `products` table should have at least `id`, `name`, and `price` columns.  Example:\n   ```sql\n   CREATE TABLE products (\n       id INT PRIMARY KEY,\n       name VARCHAR(255) NOT NULL,\n       price DECIMAL(10, 2) NOT NULL\n   );\n\n   -- Insert some sample products\n   INSERT INTO products (id, name, price) VALUES\n   (1, 'T-Shirt', 20.00),\n   (2, 'Jeans', 50.00),\n   (3, 'Hat', 15.00);\n   ```\n\n2. **Database Credentials:** Replace the placeholder values for `$db_host`, `$db_name`, `$db_user`, and `$db_password` with your actual database credentials.\n\n3. **Create an `index.php` page:** Create a simple `index.php` page that displays the products you want to sell.  This page should have a way to add products to the cart.  Here's a basic example:\n\n   ```php\n   <?php\n   // Include the shopping cart script (assuming it's in shopping_cart.php)\n   require_once 'shopping_cart.php';\n   ?>\n\n   <!DOCTYPE html>\n   <html>\n   <head>\n       <title>Products</title>\n   </head>\n   <body>\n\n       <h1>Available Products</h1>\n\n       <?php\n       // Fetch products from the database (replace with your database query)\n       $conn = connectToDatabase();\n       $product_query = \"SELECT id, name, price FROM products\";\n       $stmt = $conn->prepare($product_query);\n       $stmt->execute();\n       $result = $stmt->get_result();\n\n       if ($result->num_rows > 0) {\n           while ($row = $result->fetch_assoc()) {\n               echo \"<p><a href='add_to_cart.php?product_id=\" . $row['id'] . \"&quantity=1'>Add to Cart</a> - \" . $row['name'] . \" - $\" . number_format($row['price'], 2) . \"</p>\";\n           }\n       } else {\n           echo \"<p>No products available.</p>\";\n       }\n       ?>\n\n   </body>\n   </html>\n   ```\n\n4. **`add_to_cart.php`:** This page handles adding a product to the cart.  Here's an example:\n\n   ```php\n   <?php\n   require_once 'shopping_cart.php';\n\n   if (isset($_GET['product_id']) && isset($_GET['quantity'])) {\n       $product_id = (int)$_GET['product_id'];\n       $quantity = (int)$_GET['quantity'];\n       addToCart($product_id, $quantity);\n       header(\"Location: index.php\"); // Redirect back to the product listing\n       exit;\n   }\n   ?>\n   ```\n\n5. **Run the Code:** Place all three files (`shopping_cart.php`, `index.php`, and `add_to_cart.php`) in the same directory on your web server.  Access `index.php` through your web browser.\n\n**Important Considerations for a Production Environment:**\n\n* **Error Handling:** Implement robust error handling (try-catch blocks, logging) to catch and handle unexpected errors gracefully.\n* **Session Management:** Choose a robust session management mechanism (e.g., using cookies or PHP's built-in session handling) to ensure session persistence.\n* **Input Validation and Sanitization:** *Always* validate and sanitize user inputs to prevent security vulnerabilities, especially SQL injection and cross-site scripting (XSS).  Use `htmlspecialchars()` to escape output.\n* **Database Security:**  Follow best practices for database security, such as using prepared statements, limiting user permissions, and regularly updating your database software.\n* **Scalability:**  For a high-traffic website, you'll need to consider scalability issues, such as caching, database optimization, and using a more robust session management system.\n* **Testing:** Thoroughly test the shopping cart functionality to ensure that it works correctly under various conditions.\n* **User Interface (UI):**  Improve the user interface to make the shopping cart experience more intuitive and user-friendly. Consider using a JavaScript framework for creating a more dynamic UI.\n\nThis comprehensive example provides a solid foundation for building a basic shopping cart functionality using PHP.  Remember to adapt and extend it based on your specific needs and requirements.  Remember the security aspects and always follow best practices when handling user data.\n", "code_blocks": ["```php\n<?php\nsession_start();\n\n// Database Connection (Replace with your actual database details)\n$db_host = \"localhost\";\n$db_name = \"shopping_cart\";\n$db_user = \"your_user\";\n$db_password = \"your_password\";\n\n// Function to connect to the database\nfunction connectToDatabase() {\n    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n    if ($conn->connect_error) {\n        die(\"Connection failed: \" . $conn->connect_error);\n    }\n    return $conn;\n}\n\n// Function to add an item to the cart\nfunction addToCart($product_id, $quantity) {\n    $conn = connectToDatabase();\n\n    // Check if the product exists\n    $product_query = \"SELECT id, name, price FROM products WHERE id = ?\";\n    $stmt = $conn->prepare($product_query);\n    $stmt->bind_param(\"i\", $product_id);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($row = $result->fetch_assoc()) {\n        $product_name = $row['name'];\n        $product_price = $row['price'];\n\n        if (isset($_SESSION['cart'][$product_id])) {\n            $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n        } else {\n            $_SESSION['cart'][$product_id] = [\n                'quantity' => $quantity,\n                'product_id' => $product_id,\n                'product_name' => $product_name,\n                'product_price' => $product_price\n            ];\n        }\n    } else {\n        // Product not found - you might want to log this\n        echo \"Product with ID \" . $product_id . \" not found.\";\n    }\n\n    $stmt->close();\n}\n\n// Function to remove an item from the cart\nfunction removeFromCart($product_id) {\n    if (isset($_SESSION['cart'][$product_id])) {\n        unset($_SESSION['cart'][$product_id]);\n    }\n}\n\n// Function to update the quantity of an item in the cart\nfunction updateQuantity($product_id, $quantity) {\n    if (isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id]['quantity'] = $quantity;\n    }\n}\n\n// Function to get the cart contents\nfunction getCartContents() {\n    return $_SESSION['cart'];\n}\n\n// Function to calculate the total cart value\nfunction calculateTotal() {\n    $total = 0;\n    $cart = getCartContents();\n    foreach ($cart as $item) {\n        $total += $item['product_price'] * $item['quantity'];\n    }\n    return $total;\n}\n\n// ---------------------  Handle Cart Actions  ---------------------\n\n// Check if the action is \"add\"\nif (isset($_POST['action']) && $_POST['action'] == 'add') {\n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n    addToCart($product_id, $quantity);\n}\n\n// Check if the action is \"remove\"\nif (isset($_POST['action']) && $_POST['action'] == 'remove') {\n    $product_id = $_POST['product_id'];\n    removeFromCart($product_id);\n}\n\n// Check if the action is \"update\"\nif (isset($_POST['action']) && $_POST['action'] == 'update') {\n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n    updateQuantity($product_id, $quantity);\n}\n\n\n// --------------------- Display the Cart  ---------------------\n\n// Get the cart contents\n$cart = getCartContents();\n\n// Calculate the total\n$total = calculateTotal();\n\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n    <style>\n        .cart-item {\n            border: 1px solid #ccc;\n            margin-bottom: 10px;\n            padding: 10px;\n        }\n    </style>\n</head>\n<body>\n\n    <h1>Shopping Cart</h1>\n\n    <?php if (empty($cart)): ?>\n        <p>Your cart is empty.</p>\n    <?php else: ?>\n\n        <table id=\"cart-table\">\n            <thead>\n                <tr>\n                    <th>Product</th>\n                    <th>Price</th>\n                    <th>Quantity</th>\n                    <th>Total</th>\n                    <th>Action</th>\n                </tr>\n            </thead>\n            <tbody>\n                <?php\n                foreach ($cart as $item): ?>\n                    <tr class=\"cart-item\">\n                        <td><?php echo $item['product_name']; ?></td>\n                        <td><?php echo $item['product_price']; ?></td>\n                        <td><?php echo $item['quantity']; ?></td>\n                        <td><?php echo number_format($item['product_price'] * $item['quantity'], 2); ?></td>\n                        <td>\n                            <form method=\"post\">\n                                <input type=\"hidden\" name=\"action\" value=\"update\">\n                                <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $item['product_id']; ?>\">\n                                <input type=\"number\" name=\"quantity\" value=\"<?php echo $item['quantity']; ?>\" min=\"1\">\n                                <button type=\"submit\">Update</button>\n                            </form>\n                            <form method=\"post\">\n                                <input type=\"hidden\" name=\"action\" value=\"remove\">\n                                <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $item['product_id']; ?>\">\n                                <button type=\"submit\">Remove</button>\n                            </form>\n                        </td>\n                    </tr>\n                <?php endforeach; ?>\n            </tbody>\n        </table>\n\n        <p><strong>Total:</strong> <?php echo number_format($total, 2); ?></p>\n    <?php endif; ?>\n\n    <hr>\n    <p>\n        <a href=\"index.php\">Continue Shopping</a>\n    </p>\n\n</body>\n</html>\n```"]}
