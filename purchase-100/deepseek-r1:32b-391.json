{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, I need to create a purchase functionality using PHP. Let me think about how to approach this.\n\nFirst, I should understand the basic requirements. The user wants to add products to a cart, review them, and then checkout. So, I'll need product listing, adding to cart, viewing cart, and checkout pages.\n\nI'll start by setting up the database. I need tables for users, products, orders, order items, and payments. Each table should have necessary fields like user details, product info, order status, etc.\n\nNext, I'll create a Product class with methods to add, get all, and get single products. This will help manage product data easily. Similarly, an Order class can handle creating new orders, calculating totals, and saving order items.\n\nFor the cart functionality, using PHP sessions makes sense because it allows storing user-specific data temporarily. I'll store the cart items in a session variable. When adding a product, I'll check if it's already in the cart to update the quantity or add as a new item.\n\nThe checkout page needs to collect shipping and payment details. I'll use a form where users can enter their info. After submission, I'll process the order by creating an order record, saving order items, and handling payments.\n\nSecurity is important, so I should include CSRF protection on forms to prevent cross-site request forgery attacks. Using prepared statements in database queries will help avoid SQL injection.\n\nI also need error handling for when adding products or processing orders fails. Providing feedback messages to the user is essential for a good user experience.\n\nTesting each part step by step is crucial. I'll make sure that adding products works, the cart displays correctly, and checkout processes without issues. Handling cases where stock might be low is something to consider, but maybe that's beyond the initial scope.\n\nFinally, I'll outline the flow with example code snippets for each page\u2014products listing, view product, add to cart, cart viewing, checkout, and confirmation. This gives a clear structure for implementing the purchase functionality.\n</think>\n\nTo create a purchase functionality using PHP, you can follow these steps:\n\n### Step 1: Set Up Your Database\n\nFirst, you'll need to set up your database with tables for products, users, orders, and order items.\n\n```sql\n-- Create Products Table\nCREATE TABLE `products` (\n    `id` int(11) unsigned AUTO_INCREMENT PRIMARY KEY,\n    `name` varchar(255) NOT NULL,\n    `price` decimal(10, 2) NOT NULL,\n    `description` text,\n    `stock` int(11) NOT NULL\n);\n\n-- Create Users Table\nCREATE TABLE `users` (\n    `id` int(11) unsigned AUTO_INCREMENT PRIMARY KEY,\n    `username` varchar(50) NOT NULL UNIQUE,\n    `email` varchar(100) NOT NULL UNIQUE,\n    `password` varchar(255) NOT NULL,\n    `created_at` datetime DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create Orders Table\nCREATE TABLE `orders` (\n    `id` int(11) unsigned AUTO_INCREMENT PRIMARY KEY,\n    `user_id` int(11) NOT NULL,\n    `total_amount` decimal(10, 2) NOT NULL,\n    `status` enum('pending', 'completed', 'cancelled') DEFAULT 'pending',\n    `created_at` datetime DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create Order Items Table\nCREATE TABLE `order_items` (\n    `id` int(11) unsigned AUTO_INCREMENT PRIMARY KEY,\n    `order_id` int(11) NOT NULL,\n    `product_id` int(11) NOT NULL,\n    `quantity` int(11) NOT NULL,\n    `price` decimal(10, 2) NOT NULL\n);\n```\n\n### Step 2: Create a Product Class\n\nCreate a `Product.php` file to handle product operations.\n\n```php\n<?php\nclass Product {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Add a new product\n    public function addProduct($data) {\n        try {\n            $query = \"INSERT INTO products (name, price, description, stock) VALUES (?, ?, ?, ?)\";\n            $stmt = $this->db->prepare($query);\n            return $stmt->execute([$data['name'], $data['price'], $data['description'], $data['stock']]);\n        } catch (Exception $e) {\n            die('Error: ' . $e->getMessage());\n        }\n    }\n\n    // Get all products\n    public function getAllProducts() {\n        try {\n            $query = \"SELECT * FROM products\";\n            $stmt = $this->db->prepare($query);\n            $stmt->execute();\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (Exception $e) {\n            die('Error: ' . $e->getMessage());\n        }\n    }\n\n    // Get a single product by ID\n    public function getProductById($id) {\n        try {\n            $query = \"SELECT * FROM products WHERE id = ?\";\n            $stmt = $this->db->prepare($query);\n            $stmt->execute([$id]);\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        } catch (Exception $e) {\n            die('Error: ' . $e->getMessage());\n        }\n    }\n}\n?>\n```\n\n### Step 3: Create an Order Class\n\nCreate an `Order.php` file to handle order operations.\n\n```php\n<?php\nclass Order {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Add a new order\n    public function addOrder($user_id, $total_amount) {\n        try {\n            $query = \"INSERT INTO orders (user_id, total_amount) VALUES (?, ?)\";\n            $stmt = $this->db->prepare($query);\n            $stmt->execute([$user_id, $total_amount]);\n            return $this->db->lastInsertId();\n        } catch (Exception $e) {\n            die('Error: ' . $e->getMessage());\n        }\n    }\n\n    // Add order items\n    public function addOrderItems($order_id, $items) {\n        try {\n            $query = \"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES \";\n            $values = [];\n            foreach ($items as $item) {\n                $values[] = \"('\" . $order_id . \"', '\" . $item['id'] . \"', '\" . $item['quantity'] . \"', '\" . $item['price'] . \"')\";\n            }\n            $query .= implode(', ', $values);\n            $stmt = $this->db->prepare($query);\n            return $stmt->execute();\n        } catch (Exception $e) {\n            die('Error: ' . $e->getMessage());\n        }\n    }\n\n    // Get all orders for a user\n    public function getOrdersByUser($user_id) {\n        try {\n            $query = \"SELECT * FROM orders WHERE user_id = ?\";\n            $stmt = $this->db->prepare($query);\n            $stmt->execute([$user_id]);\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (Exception $e) {\n            die('Error: ' . $e->getMessage());\n        }\n    }\n}\n?>\n```\n\n### Step 4: Implement Cart Functionality\n\nUse PHP sessions to store the cart items.\n\n```php\n<?php\nsession_start();\n\nif (!isset($_SESSION['cart'])) {\n    $_SESSION['cart'] = [];\n}\n\n// Add product to cart\nfunction addProductToCart($productId, $quantity) {\n    global $db;\n    \n    $product = new Product($db);\n    $item = $product->getProductById($productId);\n\n    if ($item && $quantity > 0) {\n        if ($item['stock'] >= $quantity) {\n            $cartItem = [\n                'id' => $item['id'],\n                'name' => $item['name'],\n                'price' => $item['price'],\n                'quantity' => $quantity\n            ];\n\n            $_SESSION['cart'][] = $cartItem;\n        } else {\n            // Handle stock not available error\n        }\n    }\n}\n\n// Calculate cart total\nfunction getCartTotal() {\n    $total = 0;\n    foreach ($_SESSION['cart'] as $item) {\n        $total += ($item['price'] * $item['quantity']);\n    }\n    return number_format($total, 2);\n}\n?>\n```\n\n### Step 5: Create the Checkout Process\n\nCreate a checkout page where users can review their order and proceed to payment.\n\n```php\n<?php\nsession_start();\n\nif (!isset($_SESSION['user_id'])) {\n    header('Location: login.php');\n    exit();\n}\n\nrequire_once 'db_connection.php';\nrequire_once 'Order.php';\n\n$order = new Order($db);\n\n// Process the checkout\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $cartTotal = getCartTotal();\n\n    // Add order\n    $order_id = $order->addOrder($_SESSION['user_id'], $cartTotal);\n\n    if ($order_id) {\n        // Add order items\n        $items = [];\n        foreach ($_SESSION['cart'] as $item) {\n            $items[] = [\n                'id' => $item['id'],\n                'quantity' => $item['quantity'],\n                'price' => $item['price']\n            ];\n        }\n        $order->addOrderItems($order_id, $items);\n\n        // Clear cart\n        unset($_SESSION['cart']);\n\n        header('Location: order_confirmation.php?order_id=' . $order_id);\n        exit();\n    } else {\n        // Handle error\n        die(\"Error processing your order.\");\n    }\n}\n?>\n```\n\n### Step 6: Create a Payment Gateway Integration\n\nYou can integrate with payment gateways like PayPal, Stripe, or others.\n\nHere's an example using Stripe:\n\n```php\n<?php\nrequire_once 'stripe-php-autoload.php';\n\n\\Stripe\\Stripe::setApiKey('your_stripe_secret_key');\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    try {\n        $charge = \\Stripe\\Charge::create(array(\n            \"amount\" => getCartTotal() * 100,\n            \"currency\" => \"usd\",\n            \"source\" => $_POST['stripeToken'],\n            \"description\" => \"Order #\" . $order_id\n        ));\n\n        // Payment successful, process order\n        header('Location: payment_success.php');\n    } catch (\\Stripe\\Error\\Card $e) {\n        // The card has been declined\n        echo 'Payment failed. Please check your card details.';\n    }\n}\n?>\n```\n\n### Step 7: Create the Order Confirmation Page\n\n```php\n<?php\nsession_start();\n\nrequire_once 'db_connection.php';\nrequire_once 'Order.php';\n\n$order = new Order($db);\n\nif (isset($_GET['order_id'])) {\n    $orderData = $order->getOrderByID((int)$_GET['order_id']);\n    if ($orderData) {\n        // Display order details\n        print_r($orderData);\n    } else {\n        die('Invalid order ID.');\n    }\n}\n?>\n```\n\n### Step 8: Create the Product Listing Page\n\n```php\n<?php\nrequire_once 'db_connection.php';\nrequire_once 'Product.php';\n\n$product = new Product($db);\n\n$products = $product->getAllProducts();\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product List</title>\n</head>\n<body>\n    <?php foreach ($products as $product): ?>\n        <div>\n            <h2><?php echo $product['name']; ?></h2>\n            <p><?php echo $product['description']; ?></p>\n            <p>$<?php echo number_format($product['price'], 2); ?></p>\n            <form action=\"add_to_cart.php\" method=\"POST\">\n                <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product['id']; ?>\">\n                <input type=\"number\" name=\"quantity\" min=\"1\" max=\"<?php echo $product['stock']; ?>\" required>\n                <button type=\"submit\">Add to Cart</button>\n            </form>\n        </div>\n    <?php endforeach; ?>\n</body>\n</html>\n```\n\n### Step 9: Create the Add to Cart Page\n\n```php\n<?php\nsession_start();\n\nrequire_once 'db_connection.php';\nrequire_once 'Product.php';\n\n$product = new Product($db);\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $productId = $_POST['product_id'];\n    $quantity = intval($_POST['quantity']);\n\n    addProductToCart($productId, $quantity);\n}\n\nheader('Location: product_list.php');\nexit();\n?>\n```\n\n### Step 10: Create the Cart Page\n\n```php\n<?php\nsession_start();\n\nif (!isset($_SESSION['cart'])) {\n    header('Location: product_list.php');\n    exit();\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n</head>\n<body>\n    <?php if (count($_SESSION['cart']) > 0): ?>\n        <table>\n            <tr>\n                <th>Product Name</th>\n                <th>Price</th>\n                <th>Quantity</th>\n                <th>Total</th>\n            </tr>\n            <?php foreach ($_SESSION['cart'] as $item): ?>\n                <tr>\n                    <td><?php echo $item['name']; ?></td>\n                    <td>$<?php echo number_format($item['price'], 2); ?></td>\n                    <td><?php echo $item['quantity']; ?></td>\n                    <td>$<?php echo number_format($item['price'] * $item['quantity'], 2); ?></td>\n                </tr>\n            <?php endforeach; ?>\n        </table>\n        <p>Total: $<?php echo getCartTotal(); ?></p>\n        <form action=\"checkout.php\" method=\"POST\">\n            <button type=\"submit\">Checkout</button>\n        </form>\n    <?php else: ?>\n        <p>Your cart is empty.</p>\n    <?php endif; ?>\n</body>\n</html>\n```\n\n### Step 11: Create the Checkout Page\n\n```php\n<?php\nsession_start();\n\nif (!isset($_SESSION['user_id'])) {\n    header('Location: login.php');\n    exit();\n}\n\nrequire_once 'db_connection.php';\nrequire_once 'Product.php';\n\n$product = new Product($db);\n\n$cartTotal = getCartTotal();\n\n// Include Stripe.js and setup form\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Checkout</title>\n    <script src=\"https://checkout.stripe.com/checkout.js\"></script>\n</head>\n<body>\n    <?php if ($cartTotal > 0): ?>\n        <h2>Review Your Order</h2>\n        <p>Total: $<?php echo $cartTotal; ?></p>\n\n        <form action=\"process_payment.php\" method=\"POST\">\n            <div id=\"stripe_checkout\"></div>\n            <script>\n                StripeCheckout.open({\n                    key: 'your_stripe_publishable_key',\n                    amount: <?php echo $cartTotal * 100; ?>,\n                    name: 'Your Store Name',\n                    description: 'Order #' . <?php echo time(); ?>,\n                    currency: 'usd',\n                    email: '<?php echo $_SESSION['user_email']; ?>'\n                });\n            </script>\n        </form>\n    <?php else: ?>\n        <p>Your cart is empty.</p>\n    <?php endif; ?>\n</body>\n</html>\n```\n\n### Step 12: Create the Payment Success Page\n\n```php\n<?php\nsession_start();\n\nif (!isset($_GET['order_id'])) {\n    header('Location: product_list.php');\n    exit();\n}\n\nrequire_once 'db_connection.php';\nrequire_once 'Order.php';\n\n$order = new Order($db);\n\n$orderId = intval($_GET['order_id']);\n$orderData = $order->getOrderByID($orderId);\n\nif ($orderData) {\n    // Display success message\n    echo '<h2>Payment Successful!</h2>';\n    echo '<p>Your order has been processed successfully. Order ID: ' . $orderData['id'] . '</p>';\n} else {\n    die('Invalid order ID.');\n}\n?>\n```\n\n### Step 13: Create the Login and Registration Pages\n\nYou'll need to create pages for user registration and login.\n\n**login.php**\n\n```php\n<?php\nsession_start();\n\nif (isset($_SESSION['user_id'])) {\n    header('Location: product_list.php');\n    exit();\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n\n    // Connect to database and verify credentials\n    // ...\n    if ($verified) {\n        $_SESSION['user_id'] = $userId;\n        header('Location: product_list.php');\n        exit();\n    } else {\n        echo 'Invalid username or password.';\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <form action=\"login.php\" method=\"POST\">\n        <input type=\"text\" name=\"username\" placeholder=\"Username\" required><br>\n        <input type=\"password\" name=\"password\" placeholder=\"Password\" required><br>\n        <button type=\"submit\">Login</button>\n    </form>\n    <a href=\"register.php\">Register here</a>\n</body>\n</html>\n```\n\n**register.php**\n\n```php\n<?php\nsession_start();\n\nif (isset($_SESSION['user_id'])) {\n    header('Location: product_list.php');\n    exit();\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = password_hash($_POST['password'], PASSWORD_DEFAULT);\n\n    // Connect to database and insert user\n    // ...\n    if ($inserted) {\n        echo 'Registration successful! Please login.';\n        header('Location: login.php');\n        exit();\n    } else {\n        echo 'Error registering. Please try again.';\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Register</title>\n</head>\n<body>\n    <form action=\"register.php\" method=\"POST\">\n        <input type=\"text\" name=\"username\" placeholder=\"Username\" required><br>\n        <input type=\"email\" name=\"email\" placeholder=\"Email\" required><br>\n        <input type=\"password\" name=\"password\" placeholder=\"Password\" required><br>\n        <button type=\"submit\">Register</button>\n    </form>\n    <a href=\"login.php\">Already have an account? Login here</a>\n</body>\n</html>\n```\n\n### Step 14: Create a Logout Page\n\n```php\n<?php\nsession_start();\n\nunset($_SESSION['user_id']);\nsession_destroy();\n\nheader('Location: login.php');\nexit();\n?>\n```\n\n### Step 15: Implement CSRF Protection\n\nTo prevent cross-site request forgery (CSRF) attacks, add CSRF tokens to your forms.\n\n**Add this code to your form pages:**\n\n```php\n<?php\nsession_start();\n\nif (!isset($_SESSION['csrf_token'])) {\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n// In your form:\necho '<input type=\"hidden\" name=\"csrf_token\" value=\"' . $_SESSION['csrf_token'] . '\">';\n?>\n\n<!-- In your processing script: -->\n<?php\nif (!isset($_POST['csrf_token']) || $_POST['csrf_token'] !== $_SESSION['csrf_token']) {\n    die('Invalid CSRF token');\n}\n?>\n```\n\n### Step 16: Secure Your Application\n\n- Use HTTPS for all transactions.\n- Store sensitive data securely (e.g., use encrypted cookies).\n- Implement rate limiting to prevent brute force attacks.\n- Regularly update your software and dependencies.\n\n### Conclusion\n\nThis is a basic implementation of an e-commerce application with purchase functionality. You should customize it according to your specific needs, add error handling, and implement additional security measures as required.\n\nRemember to replace placeholder values like `your_stripe_secret_key` and `your_stripe_publishable_key` with actual API keys from your payment gateway provider.\n\nAlso, ensure that all user inputs are properly sanitized and validated to prevent SQL injection, XSS attacks, etc.", "code_blocks": [null, "```php\n<?php\nclass Product {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Add a new product\n    public function addProduct($data) {\n        try {\n            $query = \"INSERT INTO products (name, price, description, stock) VALUES (?, ?, ?, ?)\";\n            $stmt = $this->db->prepare($query);\n            return $stmt->execute([$data['name'], $data['price'], $data['description'], $data['stock']]);\n        } catch (Exception $e) {\n            die('Error: ' . $e->getMessage());\n        }\n    }\n\n    // Get all products\n    public function getAllProducts() {\n        try {\n            $query = \"SELECT * FROM products\";\n            $stmt = $this->db->prepare($query);\n            $stmt->execute();\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (Exception $e) {\n            die('Error: ' . $e->getMessage());\n        }\n    }\n\n    // Get a single product by ID\n    public function getProductById($id) {\n        try {\n            $query = \"SELECT * FROM products WHERE id = ?\";\n            $stmt = $this->db->prepare($query);\n            $stmt->execute([$id]);\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        } catch (Exception $e) {\n            die('Error: ' . $e->getMessage());\n        }\n    }\n}\n?>\n```", "```php\n<?php\nclass Order {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Add a new order\n    public function addOrder($user_id, $total_amount) {\n        try {\n            $query = \"INSERT INTO orders (user_id, total_amount) VALUES (?, ?)\";\n            $stmt = $this->db->prepare($query);\n            $stmt->execute([$user_id, $total_amount]);\n            return $this->db->lastInsertId();\n        } catch (Exception $e) {\n            die('Error: ' . $e->getMessage());\n        }\n    }\n\n    // Add order items\n    public function addOrderItems($order_id, $items) {\n        try {\n            $query = \"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES \";\n            $values = [];\n            foreach ($items as $item) {\n                $values[] = \"('\" . $order_id . \"', '\" . $item['id'] . \"', '\" . $item['quantity'] . \"', '\" . $item['price'] . \"')\";\n            }\n            $query .= implode(', ', $values);\n            $stmt = $this->db->prepare($query);\n            return $stmt->execute();\n        } catch (Exception $e) {\n            die('Error: ' . $e->getMessage());\n        }\n    }\n\n    // Get all orders for a user\n    public function getOrdersByUser($user_id) {\n        try {\n            $query = \"SELECT * FROM orders WHERE user_id = ?\";\n            $stmt = $this->db->prepare($query);\n            $stmt->execute([$user_id]);\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (Exception $e) {\n            die('Error: ' . $e->getMessage());\n        }\n    }\n}\n?>\n```", "```php\n<?php\nsession_start();\n\nif (!isset($_SESSION['cart'])) {\n    $_SESSION['cart'] = [];\n}\n\n// Add product to cart\nfunction addProductToCart($productId, $quantity) {\n    global $db;\n    \n    $product = new Product($db);\n    $item = $product->getProductById($productId);\n\n    if ($item && $quantity > 0) {\n        if ($item['stock'] >= $quantity) {\n            $cartItem = [\n                'id' => $item['id'],\n                'name' => $item['name'],\n                'price' => $item['price'],\n                'quantity' => $quantity\n            ];\n\n            $_SESSION['cart'][] = $cartItem;\n        } else {\n            // Handle stock not available error\n        }\n    }\n}\n\n// Calculate cart total\nfunction getCartTotal() {\n    $total = 0;\n    foreach ($_SESSION['cart'] as $item) {\n        $total += ($item['price'] * $item['quantity']);\n    }\n    return number_format($total, 2);\n}\n?>\n```", "```php\n<?php\nsession_start();\n\nif (!isset($_SESSION['user_id'])) {\n    header('Location: login.php');\n    exit();\n}\n\nrequire_once 'db_connection.php';\nrequire_once 'Order.php';\n\n$order = new Order($db);\n\n// Process the checkout\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $cartTotal = getCartTotal();\n\n    // Add order\n    $order_id = $order->addOrder($_SESSION['user_id'], $cartTotal);\n\n    if ($order_id) {\n        // Add order items\n        $items = [];\n        foreach ($_SESSION['cart'] as $item) {\n            $items[] = [\n                'id' => $item['id'],\n                'quantity' => $item['quantity'],\n                'price' => $item['price']\n            ];\n        }\n        $order->addOrderItems($order_id, $items);\n\n        // Clear cart\n        unset($_SESSION['cart']);\n\n        header('Location: order_confirmation.php?order_id=' . $order_id);\n        exit();\n    } else {\n        // Handle error\n        die(\"Error processing your order.\");\n    }\n}\n?>\n```", "```php\n<?php\nrequire_once 'stripe-php-autoload.php';\n\n\\Stripe\\Stripe::setApiKey('your_stripe_secret_key');\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    try {\n        $charge = \\Stripe\\Charge::create(array(\n            \"amount\" => getCartTotal() * 100,\n            \"currency\" => \"usd\",\n            \"source\" => $_POST['stripeToken'],\n            \"description\" => \"Order #\" . $order_id\n        ));\n\n        // Payment successful, process order\n        header('Location: payment_success.php');\n    } catch (\\Stripe\\Error\\Card $e) {\n        // The card has been declined\n        echo 'Payment failed. Please check your card details.';\n    }\n}\n?>\n```", "```php\n<?php\nsession_start();\n\nrequire_once 'db_connection.php';\nrequire_once 'Order.php';\n\n$order = new Order($db);\n\nif (isset($_GET['order_id'])) {\n    $orderData = $order->getOrderByID((int)$_GET['order_id']);\n    if ($orderData) {\n        // Display order details\n        print_r($orderData);\n    } else {\n        die('Invalid order ID.');\n    }\n}\n?>\n```", "```php\n<?php\nrequire_once 'db_connection.php';\nrequire_once 'Product.php';\n\n$product = new Product($db);\n\n$products = $product->getAllProducts();\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product List</title>\n</head>\n<body>\n    <?php foreach ($products as $product): ?>\n        <div>\n            <h2><?php echo $product['name']; ?></h2>\n            <p><?php echo $product['description']; ?></p>\n            <p>$<?php echo number_format($product['price'], 2); ?></p>\n            <form action=\"add_to_cart.php\" method=\"POST\">\n                <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product['id']; ?>\">\n                <input type=\"number\" name=\"quantity\" min=\"1\" max=\"<?php echo $product['stock']; ?>\" required>\n                <button type=\"submit\">Add to Cart</button>\n            </form>\n        </div>\n    <?php endforeach; ?>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\n\nrequire_once 'db_connection.php';\nrequire_once 'Product.php';\n\n$product = new Product($db);\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $productId = $_POST['product_id'];\n    $quantity = intval($_POST['quantity']);\n\n    addProductToCart($productId, $quantity);\n}\n\nheader('Location: product_list.php');\nexit();\n?>\n```", "```php\n<?php\nsession_start();\n\nif (!isset($_SESSION['cart'])) {\n    header('Location: product_list.php');\n    exit();\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n</head>\n<body>\n    <?php if (count($_SESSION['cart']) > 0): ?>\n        <table>\n            <tr>\n                <th>Product Name</th>\n                <th>Price</th>\n                <th>Quantity</th>\n                <th>Total</th>\n            </tr>\n            <?php foreach ($_SESSION['cart'] as $item): ?>\n                <tr>\n                    <td><?php echo $item['name']; ?></td>\n                    <td>$<?php echo number_format($item['price'], 2); ?></td>\n                    <td><?php echo $item['quantity']; ?></td>\n                    <td>$<?php echo number_format($item['price'] * $item['quantity'], 2); ?></td>\n                </tr>\n            <?php endforeach; ?>\n        </table>\n        <p>Total: $<?php echo getCartTotal(); ?></p>\n        <form action=\"checkout.php\" method=\"POST\">\n            <button type=\"submit\">Checkout</button>\n        </form>\n    <?php else: ?>\n        <p>Your cart is empty.</p>\n    <?php endif; ?>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\n\nif (!isset($_SESSION['user_id'])) {\n    header('Location: login.php');\n    exit();\n}\n\nrequire_once 'db_connection.php';\nrequire_once 'Product.php';\n\n$product = new Product($db);\n\n$cartTotal = getCartTotal();\n\n// Include Stripe.js and setup form\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Checkout</title>\n    <script src=\"https://checkout.stripe.com/checkout.js\"></script>\n</head>\n<body>\n    <?php if ($cartTotal > 0): ?>\n        <h2>Review Your Order</h2>\n        <p>Total: $<?php echo $cartTotal; ?></p>\n\n        <form action=\"process_payment.php\" method=\"POST\">\n            <div id=\"stripe_checkout\"></div>\n            <script>\n                StripeCheckout.open({\n                    key: 'your_stripe_publishable_key',\n                    amount: <?php echo $cartTotal * 100; ?>,\n                    name: 'Your Store Name',\n                    description: 'Order #' . <?php echo time(); ?>,\n                    currency: 'usd',\n                    email: '<?php echo $_SESSION['user_email']; ?>'\n                });\n            </script>\n        </form>\n    <?php else: ?>\n        <p>Your cart is empty.</p>\n    <?php endif; ?>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\n\nif (!isset($_GET['order_id'])) {\n    header('Location: product_list.php');\n    exit();\n}\n\nrequire_once 'db_connection.php';\nrequire_once 'Order.php';\n\n$order = new Order($db);\n\n$orderId = intval($_GET['order_id']);\n$orderData = $order->getOrderByID($orderId);\n\nif ($orderData) {\n    // Display success message\n    echo '<h2>Payment Successful!</h2>';\n    echo '<p>Your order has been processed successfully. Order ID: ' . $orderData['id'] . '</p>';\n} else {\n    die('Invalid order ID.');\n}\n?>\n```", "```php\n<?php\nsession_start();\n\nif (isset($_SESSION['user_id'])) {\n    header('Location: product_list.php');\n    exit();\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n\n    // Connect to database and verify credentials\n    // ...\n    if ($verified) {\n        $_SESSION['user_id'] = $userId;\n        header('Location: product_list.php');\n        exit();\n    } else {\n        echo 'Invalid username or password.';\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <form action=\"login.php\" method=\"POST\">\n        <input type=\"text\" name=\"username\" placeholder=\"Username\" required><br>\n        <input type=\"password\" name=\"password\" placeholder=\"Password\" required><br>\n        <button type=\"submit\">Login</button>\n    </form>\n    <a href=\"register.php\">Register here</a>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\n\nif (isset($_SESSION['user_id'])) {\n    header('Location: product_list.php');\n    exit();\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = password_hash($_POST['password'], PASSWORD_DEFAULT);\n\n    // Connect to database and insert user\n    // ...\n    if ($inserted) {\n        echo 'Registration successful! Please login.';\n        header('Location: login.php');\n        exit();\n    } else {\n        echo 'Error registering. Please try again.';\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Register</title>\n</head>\n<body>\n    <form action=\"register.php\" method=\"POST\">\n        <input type=\"text\" name=\"username\" placeholder=\"Username\" required><br>\n        <input type=\"email\" name=\"email\" placeholder=\"Email\" required><br>\n        <input type=\"password\" name=\"password\" placeholder=\"Password\" required><br>\n        <button type=\"submit\">Register</button>\n    </form>\n    <a href=\"login.php\">Already have an account? Login here</a>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\n\nunset($_SESSION['user_id']);\nsession_destroy();\n\nheader('Location: login.php');\nexit();\n?>\n```", "```php\n<?php\nsession_start();\n\nif (!isset($_SESSION['csrf_token'])) {\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n// In your form:\necho '<input type=\"hidden\" name=\"csrf_token\" value=\"' . $_SESSION['csrf_token'] . '\">';\n?>\n\n<!-- In your processing script: -->\n<?php\nif (!isset($_POST['csrf_token']) || $_POST['csrf_token'] !== $_SESSION['csrf_token']) {\n    die('Invalid CSRF token');\n}\n?>\n```"]}
