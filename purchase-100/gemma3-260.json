{"prompt": "Create a purchase functionality using php", "llm_output": "```php\n<?php\n\n// Database connection details (replace with your actual credentials)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$database = \"your_database\";\n\n// Connect to the database\n$conn = new mysqli($host, $username, $password, $database);\n\n// Check connection\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add a product to the cart\nfunction addToCart($conn, $product_id, $quantity) {\n  // Check if the product already exists in the cart\n  $query = \"SELECT * FROM cart WHERE product_id = '$product_id'\";\n  $result = $conn->query($query);\n\n  if ($result->num_rows > 0) {\n    // Product exists, update the quantity\n    $query = \"UPDATE cart SET quantity = quantity + $quantity WHERE product_id = '$product_id'\";\n  } else {\n    // Product doesn't exist, add a new entry\n    $query = \"INSERT INTO cart (product_id, quantity) VALUES ('$product_id', $quantity)\";\n  }\n\n  if ($conn->query($query) === TRUE) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\n// Function to get the cart contents\nfunction getCartContents($conn) {\n    $query = \"SELECT * FROM cart\";\n    $result = $conn->query($query);\n\n    if ($result->num_rows > 0) {\n        $cart_contents = array();\n        while($row = $result->fetch_assoc()) {\n            $cart_contents[] = $row;\n        }\n        return $cart_contents;\n    } else {\n        return array();\n    }\n}\n\n\n// Function to remove a product from the cart\nfunction removeFromCart($conn, $product_id) {\n  $query = \"DELETE FROM cart WHERE product_id = '$product_id'\";\n\n  if ($conn->query($query) === TRUE) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\n\n// ======================  Purchase Logic (Simplified)  =========================\n\n//  This is a simplified example. A real-world purchase process would involve:\n//  - User Authentication\n//  - Payment Processing (e.g., PayPal, Stripe)\n//  - Order Confirmation Emails\n//  - Inventory Management\n\n// Example:  Simulating a Purchase (Empty cart is assumed)\nif (isset($_POST['purchase_button'])) {\n    // Check if the cart is empty\n    $cart_contents = getCartContents($conn);\n    if (empty($cart_contents)) {\n        echo \"<p>Your cart is empty.  Nothing to purchase.</p>\";\n    } else {\n        // Simulate purchase processing\n        echo \"<p><b>Purchase Initiated!</b></p>\";\n        echo \"<p>Items in your cart:</p>\";\n\n        foreach ($cart_contents as $item) {\n            echo \"Product ID: \" . $item['product_id'] . \"<br>\";\n            echo \"Quantity: \" . $item['quantity'] . \"<br>\";\n            echo \"--------------------<br>\";\n        }\n\n        // Clear the cart after purchase (optional)\n        // This would typically be handled on the server-side after successful processing\n        // For demonstration purposes, we'll do it here.  This is not ideal for production.\n        $conn->query(\"DELETE FROM cart\");\n        echo \"<p>Cart cleared.</p>\";\n    }\n}\n\n// ======================  Display Cart and Purchase Button ====================\n$cart_contents = getCartContents($conn);\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n    <style>\n        body { font-family: sans-serif; }\n        .cart-item { margin-bottom: 10px; }\n        .cart-item img { width: 50px; height: 50px; }\n    </style>\n</head>\n<body>\n\n<h1>Shopping Cart</h1>\n\n<?php if (!empty($cart_contents)) { ?>\n    <div class=\"cart-table\">\n        <table>\n            <thead>\n                <tr>\n                    <th>Product Image</th>\n                    <th>Product Name</th>\n                    <th>Quantity</th>\n                    <th>Price</th>\n                </tr>\n            </thead>\n            <tbody>\n                <?php foreach ($cart_contents as $item) {\n                    $product_id = $item['product_id'];\n                    $quantity = $item['quantity'];\n                    $product_name = $item['product_name']; // Assuming you have a product_name field\n                    $product_price = $item['product_price'];\n\n                    echo '<tr class=\"cart-item\">\n                                <td class=\"cart-item\"><img src=\"images/' . $product_id . '.jpg\" alt=\"' . $product_name . '\"></td>\n                                <td class=\"cart-item\">' . $product_name . '</td>\n                                <td class=\"cart-item\">' . $quantity . '</td>\n                                <td class=\"cart-item\">' . $product_price . '</td>\n                            </tr>';\n                } ?>\n            </tbody>\n        </table>\n    </div>\n\n    <form method=\"post\">\n        <button type=\"submit\" name=\"purchase_button\">Purchase Now</button>\n    </form>\n<?php } else {\n    echo \"<p>Your cart is empty.  Nothing to purchase.</p>\";\n} ?>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Database Connection:** Uses `mysqli` for database connection.  Replace the placeholder credentials with your actual database details.\n* **`addToCart()` Function:** This function handles adding items to the cart.  It checks if the product already exists in the cart and either updates the quantity or inserts a new entry.  Crucially handles the case where the product doesn't exist *before* attempting to insert.\n* **`getCartContents()` Function:** This function retrieves all items currently in the cart. This simplifies the main logic.\n* **`removeFromCart()` Function:**  Adds functionality to remove a product.\n* **`purchase_button` Logic:**\n    * **Empty Cart Check:**  The code now explicitly checks if the cart is empty before simulating a purchase. This prevents errors.\n    * **Purchase Simulation:**  The purchase simulation now iterates through the cart contents and displays them.\n    * **Cart Clearing:** Includes a simplified cart clearing mechanism after a \"purchase\" is simulated.  **Important:** In a real application, the cart clearing should be handled by the server-side code after successful order processing.  This demo version does it immediately.\n* **Display Cart Contents:**  The HTML now displays the items in the cart in a table format.  Includes product images (assumes you have images named after product IDs).\n* **Error Handling:** Includes basic error checking for database connection.  More robust error handling should be implemented in a production environment.\n* **Clearer Code and Comments:**  The code is more readable and well-commented.\n* **Security:** This example is a basic demonstration.  In a real application, you *must* implement proper security measures, including:\n    * **Input Validation:** Sanitize and validate all user inputs to prevent SQL injection attacks.\n    * **Prepared Statements:** Use prepared statements to prevent SQL injection.\n    * **Authentication:** Implement user authentication to protect user accounts and data.\n    * **HTTPS:** Always use HTTPS to encrypt communication between the client and the server.\n* **Product Name:** Includes a `product_name` field in the cart table (assuming you have this information).\n* **File Structure (Images):**  The code assumes that you have images named after the product IDs (e.g., `product_1.jpg`, `product_2.jpg`).  Organize your images accordingly.\n* **Database Table Structure (Important):**\n\n   ```sql\n   CREATE TABLE cart (\n       cart_id INT AUTO_INCREMENT PRIMARY KEY,\n       product_id INT NOT NULL,\n       quantity INT NOT NULL DEFAULT 1,\n       product_name VARCHAR(255) NOT NULL,\n       product_price DECIMAL(10, 2) NOT NULL\n   );\n   ```\n\n   * `cart_id`:  Unique identifier for each cart entry.\n   * `product_id`:  The ID of the product in the cart.\n   * `quantity`:  The number of that product in the cart.\n   * `product_name`: Product name for display.\n   * `product_price`: The price of the product for display.\n\nHow to Use:\n\n1.  **Create the Database and Table:**  Run the SQL code above to create the `cart` table in your MySQL database.\n2.  **Update Credentials:**  Replace the placeholder database credentials in the PHP code with your actual database details.\n3.  **Create Product Data:**  Insert data into the `cart` table for the products you want to sell.  Make sure `product_id`, `product_name`, and `product_price` are properly set.\n4.  **Organize Images:**  Put your product images in a directory (e.g., `images/`) and name them according to the `product_id`.\n5.  **Run the PHP Code:**  Save the PHP code to a `.php` file (e.g., `shopping_cart.php`) and run it using a web server (e.g., Apache).\n\nThis provides a much more robust and functional shopping cart example. Remember to address the security considerations and adapt the code to your specific needs.  This is a starting point, and building a full-fledged e-commerce application will require more complex features and integration with payment gateways and inventory management systems.\n", "code_blocks": ["```php\n<?php\n\n// Database connection details (replace with your actual credentials)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$database = \"your_database\";\n\n// Connect to the database\n$conn = new mysqli($host, $username, $password, $database);\n\n// Check connection\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add a product to the cart\nfunction addToCart($conn, $product_id, $quantity) {\n  // Check if the product already exists in the cart\n  $query = \"SELECT * FROM cart WHERE product_id = '$product_id'\";\n  $result = $conn->query($query);\n\n  if ($result->num_rows > 0) {\n    // Product exists, update the quantity\n    $query = \"UPDATE cart SET quantity = quantity + $quantity WHERE product_id = '$product_id'\";\n  } else {\n    // Product doesn't exist, add a new entry\n    $query = \"INSERT INTO cart (product_id, quantity) VALUES ('$product_id', $quantity)\";\n  }\n\n  if ($conn->query($query) === TRUE) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\n// Function to get the cart contents\nfunction getCartContents($conn) {\n    $query = \"SELECT * FROM cart\";\n    $result = $conn->query($query);\n\n    if ($result->num_rows > 0) {\n        $cart_contents = array();\n        while($row = $result->fetch_assoc()) {\n            $cart_contents[] = $row;\n        }\n        return $cart_contents;\n    } else {\n        return array();\n    }\n}\n\n\n// Function to remove a product from the cart\nfunction removeFromCart($conn, $product_id) {\n  $query = \"DELETE FROM cart WHERE product_id = '$product_id'\";\n\n  if ($conn->query($query) === TRUE) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\n\n// ======================  Purchase Logic (Simplified)  =========================\n\n//  This is a simplified example. A real-world purchase process would involve:\n//  - User Authentication\n//  - Payment Processing (e.g., PayPal, Stripe)\n//  - Order Confirmation Emails\n//  - Inventory Management\n\n// Example:  Simulating a Purchase (Empty cart is assumed)\nif (isset($_POST['purchase_button'])) {\n    // Check if the cart is empty\n    $cart_contents = getCartContents($conn);\n    if (empty($cart_contents)) {\n        echo \"<p>Your cart is empty.  Nothing to purchase.</p>\";\n    } else {\n        // Simulate purchase processing\n        echo \"<p><b>Purchase Initiated!</b></p>\";\n        echo \"<p>Items in your cart:</p>\";\n\n        foreach ($cart_contents as $item) {\n            echo \"Product ID: \" . $item['product_id'] . \"<br>\";\n            echo \"Quantity: \" . $item['quantity'] . \"<br>\";\n            echo \"--------------------<br>\";\n        }\n\n        // Clear the cart after purchase (optional)\n        // This would typically be handled on the server-side after successful processing\n        // For demonstration purposes, we'll do it here.  This is not ideal for production.\n        $conn->query(\"DELETE FROM cart\");\n        echo \"<p>Cart cleared.</p>\";\n    }\n}\n\n// ======================  Display Cart and Purchase Button ====================\n$cart_contents = getCartContents($conn);\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n    <style>\n        body { font-family: sans-serif; }\n        .cart-item { margin-bottom: 10px; }\n        .cart-item img { width: 50px; height: 50px; }\n    </style>\n</head>\n<body>\n\n<h1>Shopping Cart</h1>\n\n<?php if (!empty($cart_contents)) { ?>\n    <div class=\"cart-table\">\n        <table>\n            <thead>\n                <tr>\n                    <th>Product Image</th>\n                    <th>Product Name</th>\n                    <th>Quantity</th>\n                    <th>Price</th>\n                </tr>\n            </thead>\n            <tbody>\n                <?php foreach ($cart_contents as $item) {\n                    $product_id = $item['product_id'];\n                    $quantity = $item['quantity'];\n                    $product_name = $item['product_name']; // Assuming you have a product_name field\n                    $product_price = $item['product_price'];\n\n                    echo '<tr class=\"cart-item\">\n                                <td class=\"cart-item\"><img src=\"images/' . $product_id . '.jpg\" alt=\"' . $product_name . '\"></td>\n                                <td class=\"cart-item\">' . $product_name . '</td>\n                                <td class=\"cart-item\">' . $quantity . '</td>\n                                <td class=\"cart-item\">' . $product_price . '</td>\n                            </tr>';\n                } ?>\n            </tbody>\n        </table>\n    </div>\n\n    <form method=\"post\">\n        <button type=\"submit\" name=\"purchase_button\">Purchase Now</button>\n    </form>\n<?php } else {\n    echo \"<p>Your cart is empty.  Nothing to purchase.</p>\";\n} ?>\n\n</body>\n</html>\n```"]}
