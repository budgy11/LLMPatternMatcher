{"prompt": "Create a purchase functionality using php", "llm_output": "Here's an example of a basic purchase functionality in PHP. This includes user authentication, adding items to cart, checking out and making a payment.\n\n**Database Setup**\n\nWe'll use MySQL as our database for this example. You can set up your own database or use an existing one.\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(255),\n    email VARCHAR(255) UNIQUE,\n    password VARCHAR(255)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(255),\n    price DECIMAL(10,2)\n);\n\nCREATE TABLE cart (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    user_id INT,\n    product_id INT,\n    quantity INT\n);\n```\n\n**PHP Code**\n\nWe'll create the following files:\n\n* `config.php` for database configuration and connection.\n* `user.php` for handling user authentication.\n* `product.php` for fetching products from the database.\n* `cart.php` for adding items to cart and checking out.\n* `payment.php` for making payment.\n\n**config.php**\n```php\n<?php\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n$dsn = \"mysql:host=$host;dbname=$dbname\";\n\ntry {\n    $pdo = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n    echo 'Connection failed: ' . $e->getMessage();\n}\n\n?>\n```\n\n**user.php**\n```php\n<?php\nclass User {\n    private $id;\n    private $name;\n    private $email;\n\n    public function __construct($id = null, $name = null, $email = null) {\n        if ($id !== null) {\n            $this->id = $id;\n            $this->name = $name;\n            $this->email = $email;\n        }\n    }\n\n    public static function login($username, $password) {\n        global $pdo;\n\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email AND password = :password');\n        $stmt->bindParam(':email', $username);\n        $stmt->bindParam(':password', $password);\n\n        $stmt->execute();\n\n        if ($stmt->rowCount() > 0) {\n            return new User($stmt->fetch()['id'], $stmt->fetch()['name'], $stmt->fetch()['email']);\n        } else {\n            throw new Exception('Invalid username or password');\n        }\n    }\n\n    public function isloggedin() {\n        return !empty($this->id);\n    }\n}\n?>\n```\n\n**product.php**\n```php\n<?php\nclass Product {\n    private $id;\n    private $name;\n    private $price;\n\n    public function __construct($id = null, $name = null, $price = null) {\n        if ($id !== null) {\n            $this->id = $id;\n            $this->name = $name;\n            $this->price = $price;\n        }\n    }\n\n    public static function all() {\n        global $pdo;\n\n        $stmt = $pdo->query('SELECT * FROM products');\n\n        return array_map(function ($row) {\n            return new Product($row['id'], $row['name'], $row['price']);\n        }, $stmt->fetchAll());\n    }\n}\n?>\n```\n\n**cart.php**\n```php\n<?php\nclass Cart {\n    private $user_id;\n\n    public function __construct($user_id = null) {\n        if ($user_id !== null) {\n            $this->user_id = $user_id;\n        }\n    }\n\n    public static function add_item($product_id, $quantity) {\n        global $pdo;\n\n        $stmt = $pdo->prepare('INSERT INTO cart (user_id, product_id, quantity) VALUES (:user_id, :product_id, :quantity)');\n        $stmt->bindParam(':user_id', self::get_user_id());\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->bindParam(':quantity', $quantity);\n\n        $stmt->execute();\n    }\n\n    public static function get_cart() {\n        global $pdo;\n\n        $stmt = $pdo->prepare('SELECT * FROM cart WHERE user_id = :user_id');\n        $stmt->bindParam(':user_id', self::get_user_id());\n\n        $stmt->execute();\n\n        return $stmt->fetchAll();\n    }\n\n    private static function get_user_id() {\n        if (!isset($_SESSION['user'])) {\n            throw new Exception('User not logged in');\n        }\n        return $_SESSION['user']->id;\n    }\n}\n?>\n```\n\n**payment.php**\n```php\n<?php\nclass Payment {\n    public static function make_payment($cart_items) {\n        // This is a very basic implementation of payment processing.\n        // You should replace this with your own payment gateway integration.\n\n        $total_amount = 0;\n\n        foreach ($cart_items as $item) {\n            $total_amount += $item['product_id']->price * $item['quantity'];\n        }\n\n        echo \"Total amount: $\" . number_format($total_amount, 2);\n    }\n}\n?>\n```\n\n**index.php**\n```php\n<?php\nrequire 'config.php';\nrequire 'user.php';\nrequire 'cart.php';\n\nif (!isset($_SESSION['user'])) {\n    // Redirect to login page\n}\n\n// Display products and add items to cart\n$products = Product::all();\n?>\n\n<h1>Products</h1>\n\n<ul>\n    <?php foreach ($products as $product) { ?>\n        <li>\n            <?php echo $product->name; ?> - $<?php echo number_format($product->price, 2); ?>\n            <button onclick=\"add_item(<?php echo $product->id; ?>)\">Add to cart</button>\n        </li>\n    <?php } ?>\n</ul>\n\n<script>\nfunction add_item(product_id) {\n    const quantity = prompt(\"Enter quantity:\");\n    Cart.add_item(product_id, parseInt(quantity));\n}\n</script>\n```\n\n**cart.php**\n```php\n<?php\nrequire 'config.php';\nrequire 'user.php';\nrequire 'cart.php';\n\nif (!isset($_SESSION['user'])) {\n    // Redirect to login page\n}\n\n// Display cart items and checkout button\n$cart_items = Cart::get_cart();\n\n?>\n\n<h1>Cart</h1>\n\n<ul>\n    <?php foreach ($cart_items as $item) { ?>\n        <li>\n            <?php echo $item['product_id']->name; ?> x<?php echo $item['quantity']; ?> - $<?php echo number_format($item['product_id']->price * $item['quantity'], 2); ?>\n        </li>\n    <?php } ?>\n</ul>\n\n<button onclick=\"checkout()\">Checkout</button>\n\n<script>\nfunction checkout() {\n    const cart_items = Cart.get_cart();\n    Payment.make_payment(cart_items);\n}\n</script>\n```\n\n**payment.php**\n```php\n<?php\nrequire 'config.php';\n\n// This is a very basic implementation of payment processing.\n// You should replace this with your own payment gateway integration.\n\n// For example, you can use Stripe to process payments\n\n?>\n```\nNote that this is just an example and you will need to modify it according to your needs. Also, please note that the security of user passwords should be handled more securely in a production environment.", "code_blocks": [null, "```php\n<?php\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n$dsn = \"mysql:host=$host;dbname=$dbname\";\n\ntry {\n    $pdo = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n    echo 'Connection failed: ' . $e->getMessage();\n}\n\n?>\n```", "```php\n<?php\nclass User {\n    private $id;\n    private $name;\n    private $email;\n\n    public function __construct($id = null, $name = null, $email = null) {\n        if ($id !== null) {\n            $this->id = $id;\n            $this->name = $name;\n            $this->email = $email;\n        }\n    }\n\n    public static function login($username, $password) {\n        global $pdo;\n\n        $stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email AND password = :password');\n        $stmt->bindParam(':email', $username);\n        $stmt->bindParam(':password', $password);\n\n        $stmt->execute();\n\n        if ($stmt->rowCount() > 0) {\n            return new User($stmt->fetch()['id'], $stmt->fetch()['name'], $stmt->fetch()['email']);\n        } else {\n            throw new Exception('Invalid username or password');\n        }\n    }\n\n    public function isloggedin() {\n        return !empty($this->id);\n    }\n}\n?>\n```", "```php\n<?php\nclass Product {\n    private $id;\n    private $name;\n    private $price;\n\n    public function __construct($id = null, $name = null, $price = null) {\n        if ($id !== null) {\n            $this->id = $id;\n            $this->name = $name;\n            $this->price = $price;\n        }\n    }\n\n    public static function all() {\n        global $pdo;\n\n        $stmt = $pdo->query('SELECT * FROM products');\n\n        return array_map(function ($row) {\n            return new Product($row['id'], $row['name'], $row['price']);\n        }, $stmt->fetchAll());\n    }\n}\n?>\n```", "```php\n<?php\nclass Cart {\n    private $user_id;\n\n    public function __construct($user_id = null) {\n        if ($user_id !== null) {\n            $this->user_id = $user_id;\n        }\n    }\n\n    public static function add_item($product_id, $quantity) {\n        global $pdo;\n\n        $stmt = $pdo->prepare('INSERT INTO cart (user_id, product_id, quantity) VALUES (:user_id, :product_id, :quantity)');\n        $stmt->bindParam(':user_id', self::get_user_id());\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->bindParam(':quantity', $quantity);\n\n        $stmt->execute();\n    }\n\n    public static function get_cart() {\n        global $pdo;\n\n        $stmt = $pdo->prepare('SELECT * FROM cart WHERE user_id = :user_id');\n        $stmt->bindParam(':user_id', self::get_user_id());\n\n        $stmt->execute();\n\n        return $stmt->fetchAll();\n    }\n\n    private static function get_user_id() {\n        if (!isset($_SESSION['user'])) {\n            throw new Exception('User not logged in');\n        }\n        return $_SESSION['user']->id;\n    }\n}\n?>\n```", "```php\n<?php\nclass Payment {\n    public static function make_payment($cart_items) {\n        // This is a very basic implementation of payment processing.\n        // You should replace this with your own payment gateway integration.\n\n        $total_amount = 0;\n\n        foreach ($cart_items as $item) {\n            $total_amount += $item['product_id']->price * $item['quantity'];\n        }\n\n        echo \"Total amount: $\" . number_format($total_amount, 2);\n    }\n}\n?>\n```", "```php\n<?php\nrequire 'config.php';\nrequire 'user.php';\nrequire 'cart.php';\n\nif (!isset($_SESSION['user'])) {\n    // Redirect to login page\n}\n\n// Display products and add items to cart\n$products = Product::all();\n?>\n\n<h1>Products</h1>\n\n<ul>\n    <?php foreach ($products as $product) { ?>\n        <li>\n            <?php echo $product->name; ?> - $<?php echo number_format($product->price, 2); ?>\n            <button onclick=\"add_item(<?php echo $product->id; ?>)\">Add to cart</button>\n        </li>\n    <?php } ?>\n</ul>\n\n<script>\nfunction add_item(product_id) {\n    const quantity = prompt(\"Enter quantity:\");\n    Cart.add_item(product_id, parseInt(quantity));\n}\n</script>\n```", "```php\n<?php\nrequire 'config.php';\nrequire 'user.php';\nrequire 'cart.php';\n\nif (!isset($_SESSION['user'])) {\n    // Redirect to login page\n}\n\n// Display cart items and checkout button\n$cart_items = Cart::get_cart();\n\n?>\n\n<h1>Cart</h1>\n\n<ul>\n    <?php foreach ($cart_items as $item) { ?>\n        <li>\n            <?php echo $item['product_id']->name; ?> x<?php echo $item['quantity']; ?> - $<?php echo number_format($item['product_id']->price * $item['quantity'], 2); ?>\n        </li>\n    <?php } ?>\n</ul>\n\n<button onclick=\"checkout()\">Checkout</button>\n\n<script>\nfunction checkout() {\n    const cart_items = Cart.get_cart();\n    Payment.make_payment(cart_items);\n}\n</script>\n```", "```php\n<?php\nrequire 'config.php';\n\n// This is a very basic implementation of payment processing.\n// You should replace this with your own payment gateway integration.\n\n// For example, you can use Stripe to process payments\n\n?>\n```"]}
