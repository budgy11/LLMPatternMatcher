{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, I need to create a purchase functionality using PHP. Let me think about how to approach this.\n\nFirst, I should consider the different components involved in a purchase process. There's displaying products, showing product details, adding items to the cart, updating quantities, viewing and checking out the cart, processing payments, confirming the order, and handling errors or success messages.\n\nI'll start by setting up the database. I need tables for users, products, orders, and order items. The user table will have basic info like name, email, password. Products should include details like name, description, price, quantity, etc. Orders will track each transaction with a unique ID, user ID, total amount, payment method, status, and timestamps. Order items will link products to orders with quantities and prices.\n\nNext, I'll create the PHP classes. A Product class to handle product operations, an Order class for managing orders, and a Cart class to handle the shopping cart logic. Each class will have methods for CRUD operations\u2014create, read, update, delete.\n\nFor user authentication, I'll need functions to register, login, and logout users. Registration should hash passwords for security. Login will check credentials and start a session if valid.\n\nDisplaying products can be done with a simple HTML page that fetches product data from the database using PHP. Each product will have an image, name, description, price, and an \"Add to Cart\" button.\n\nThe product details page will show more information about a selected product. It'll include a larger image, detailed description, quantity selector, and add to cart functionality. The quantity should be validated on both client and server sides to prevent invalid entries.\n\nAdding items to the cart involves storing the product ID and quantity in a session variable. I'll write a function that checks if the item is already in the cart and updates the quantity or adds it as new. Also, handle cases where stock isn't sufficient by displaying an error message.\n\nUpdating the cart will allow users to change quantities. This can be done with input fields on the cart page, each linked to the product's ID for easy processing when submitting changes. The PHP function will loop through the updated quantities and update the session accordingly.\n\nThe checkout page needs a form where users can enter their shipping and payment details. I'll use HTML forms with appropriate input fields and validate them on submission. For simplicity, I might simulate payment processing without integrating an actual gateway.\n\nProcessing the order involves several steps: generating an order ID, inserting into the orders table, creating order items for each product in the cart, deducting quantities from the products, and then clearing the cart. Error handling is crucial here to ensure data integrity; if any part fails, the transaction should roll back.\n\nOrder confirmation will redirect users after a successful purchase, displaying a thank you message with the order ID. It's also good practice to send a confirmation email, but that might be beyond the current scope unless I include email functionality.\n\nError handling throughout the application is important for user feedback and debugging. Using try-catch blocks can help manage exceptions gracefully, and logging errors can aid in troubleshooting later.\n\nI should also consider security measures like sanitizing inputs to prevent SQL injection and XSS attacks. Using prepared statements or parameterized queries will enhance security when interacting with databases.\n\nTesting each part as I go is essential. I'll start by testing database connections, then move on to user registration and login flows. Each function related to the cart and order processing should be tested individually before integrating them into the full application.\n\nDocumentation is another important aspect. Keeping track of functions, classes, and their purposes will make maintenance easier in the future. Maybe using comments within the code or external documentation files.\n\nFinally, I'll structure the project with proper folder organization\u2014separating PHP scripts, CSS, JavaScript, images, etc.\u2014to maintain clarity and scalability as the application grows.\n\nPutting it all together, I'll create each page step by step: index.php for product display, product-detail.php for details, add-to-cart processing in another script, cart.php with update functionality, checkout.php for payment details, and process-order.php to handle the transaction. Each will interact with their respective classes and functions.\n\nI should also think about scalability\u2014how easy it would be to add new features or integrate third-party services like actual payment gateways or shipping providers. Keeping the code modular and well-structured will facilitate future enhancements.\n\nIn summary, breaking down the problem into smaller tasks, systematically addressing each component with proper planning and testing, ensures a robust purchase functionality using PHP.\n</think>\n\nCreating a purchase functionality in PHP involves several steps, including user authentication, product display, cart management, order processing, and payment handling. Below is a simplified implementation:\n\n### Step 1: Database Setup\n\nFirst, create the necessary database tables.\n\n```sql\n-- Create users table\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create products table\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    stock INT NOT NULL,\n    image_url VARCHAR(255),\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create orders table\nCREATE TABLE orders (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    payment_method VARCHAR(255) NOT NULL,\n    order_status VARCHAR(255) NOT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n\n-- Create order_items table\nCREATE TABLE order_items (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(id),\n    FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n### Step 2: User Authentication\n\nCreate a user authentication system with registration and login.\n\n```php\n<?php\n// Include configuration file\nrequire_once(\"config.php\");\n\nclass User {\n    public $id;\n    public $name;\n    public $email;\n\n    public function register($name, $email, $password) {\n        global $conn;\n        \n        // Check if email exists\n        $stmt = $conn->prepare(\"SELECT id FROM users WHERE email = ?\");\n        $stmt->bind_param(\"s\", $email);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        \n        if ($result->num_rows > 0) {\n            return false; // Email already exists\n        }\n\n        // Hash password\n        $password_hash = password_hash($password, PASSWORD_BCRYPT);\n\n        // Insert into database\n        $stmt = $conn->prepare(\"INSERT INTO users (name, email, password_hash) VALUES (?, ?, ?)\");\n        $stmt->bind_param(\"sss\", $name, $email, $password_hash);\n        \n        if ($stmt->execute()) {\n            $this->id = $conn->insert_id;\n            $this->name = $name;\n            $this->email = $email;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public function login($email, $password) {\n        global $conn;\n        \n        // Get user data\n        $stmt = $conn->prepare(\"SELECT id, name, password_hash FROM users WHERE email = ?\");\n        $stmt->bind_param(\"s\", $email);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        if ($result->num_rows == 1) {\n            $user = $result->fetch_assoc();\n            \n            // Verify password\n            if (password_verify($password, $user['password_hash'])) {\n                $this->id = $user['id'];\n                $this->name = $user['name'];\n                $this->email = $email;\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\n// Example usage:\n// $user = new User();\n// if ($user->register('John Doe', 'john@example.com', 'password123')) {\n//     echo \"Registration successful!\";\n// }\n\n// if ($user->login('john@example.com', 'password123')) {\n//     echo \"Login successful!\";\n// }\n?>\n```\n\n### Step 3: Product Display and Cart Management\n\nCreate a product class to manage products.\n\n```php\n<?php\nrequire_once(\"config.php\");\n\nclass Product {\n    public $id;\n    public $name;\n    public $description;\n    public $price;\n    public $stock;\n    public $image_url;\n\n    public function __construct($id, $name, $description, $price, $stock, $image_url) {\n        $this->id = $id;\n        $this->name = $name;\n        $this->description = $description;\n        $this->price = $price;\n        $this->stock = $stock;\n        $this->image_url = $image_url;\n    }\n\n    public static function getAllProducts() {\n        global $conn;\n        \n        $products = array();\n        \n        $stmt = $conn->prepare(\"SELECT * FROM products\");\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        while ($row = $result->fetch_assoc()) {\n            $product = new Product($row['id'], $row['name'], $row['description'], $row['price'], $row['stock'], $row['image_url']);\n            array_push($products, $product);\n        }\n\n        return $products;\n    }\n}\n?>\n```\n\n### Step 4: Cart Class\n\nCreate a cart class to manage user's shopping cart.\n\n```php\n<?php\nsession_start();\n\nclass Cart {\n    public $items;\n\n    function __construct() {\n        if (isset($_SESSION['cart'])) {\n            $this->items = $_SESSION['cart'];\n        } else {\n            $this->items = array();\n        }\n    }\n\n    public function addToCart($productId, $quantity) {\n        // Check if product exists in cart\n        if (!empty($this->items[$productId])) {\n            // Update quantity\n            $this->items[$productId] += $quantity;\n        } else {\n            // Add new product\n            $this->items[$productId] = $quantity;\n        }\n\n        $_SESSION['cart'] = $this->items;\n    }\n\n    public function updateCart($productId, $quantity) {\n        if ($quantity > 0) {\n            $this->items[$productId] = $quantity;\n        } else {\n            unset($this->items[$productId]);\n        }\n\n        $_SESSION['cart'] = $this->items;\n    }\n\n    public function getCartTotal() {\n        global $conn;\n\n        $total = 0;\n        \n        foreach ($this->items as $productId => $quantity) {\n            // Get product price\n            $stmt = $conn->prepare(\"SELECT price FROM products WHERE id = ?\");\n            $stmt->bind_param(\"i\", $productId);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            if ($row = $result->fetch_assoc()) {\n                $total += $row['price'] * $quantity;\n            }\n        }\n\n        return $total;\n    }\n\n    public function getCartItems() {\n        global $conn;\n\n        $items = array();\n        \n        foreach ($this->items as $productId => $quantity) {\n            // Get product details\n            $stmt = $conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n            $stmt->bind_param(\"i\", $productId);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            if ($row = $result->fetch_assoc()) {\n                $product = new Product($row['id'], $row['name'], $row['description'], $row['price'], $row['stock'], $row['image_url']);\n                array_push($items, array(\n                    'product' => $product,\n                    'quantity' => $quantity\n                ));\n            }\n        }\n\n        return $items;\n    }\n}\n?>\n```\n\n### Step 5: Order Processing\n\nCreate an order class to handle the checkout process.\n\n```php\n<?php\nrequire_once(\"config.php\");\nsession_start();\n\nclass Order {\n    public $id;\n    public $user_id;\n    public $total_amount;\n    public $payment_method;\n    public $order_status;\n\n    function __construct($user_id, $total_amount, $payment_method) {\n        global $conn;\n\n        // Create new order\n        $stmt = $conn->prepare(\"INSERT INTO orders (user_id, total_amount, payment_method, order_status) VALUES (?, ?, ?, 'pending')\");\n        $stmt->bind_param(\"ids\", $user_id, $total_amount, $payment_method);\n        \n        if ($stmt->execute()) {\n            $this->id = $conn->insert_id;\n            $this->user_id = $user_id;\n            $this->total_amount = $total_amount;\n            $this->payment_method = $payment_method;\n            $this->order_status = 'pending';\n            \n            // Insert order items\n            $cart = new Cart();\n            foreach ($cart->getCartItems() as $item) {\n                $productId = $item['product']->id;\n                $quantity = $item['quantity'];\n                $price = $item['product']->price;\n\n                $stmt2 = $conn->prepare(\"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\");\n                $stmt2->bind_param(\"iidi\", $this->id, $productId, $quantity, $price);\n                $stmt2->execute();\n            }\n\n            // Deduct stock\n            foreach ($cart->getCartItems() as $item) {\n                $productId = $item['product']->id;\n                $quantity = $item['quantity'];\n\n                $stmt3 = $conn->prepare(\"UPDATE products SET stock = stock - ? WHERE id = ?\");\n                $stmt3->bind_param(\"ii\", $quantity, $productId);\n                $stmt3->execute();\n            }\n\n            // Clear cart\n            $_SESSION['cart'] = array();\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n?>\n```\n\n### Step 6: Checkout Page\n\nCreate a checkout page to process the order.\n\n```php\n<?php\nsession_start();\nrequire_once(\"config.php\");\nrequire_once(\"classes/Product.php\");\nrequire_once(\"classes/Cart.php\");\nrequire_once(\"classes/Order.php\");\n\nif (isset($_SESSION['user_id'])) {\n    $cart = new Cart();\n\n    if (!empty($cart->getCartItems())) {\n        // Process order\n        if (isset($_POST['submit'])) {\n            $payment_method = $_POST['payment_method'];\n            $total_amount = $cart->getCartTotal();\n            \n            $order = new Order($_SESSION['user_id'], $total_amount, $payment_method);\n\n            if ($order) {\n                // Redirect to confirmation page\n                header(\"Location: order-confirmation.php?order_id=\" . $order->id);\n                exit();\n            } else {\n                echo \"Error processing your order. Please try again.\";\n            }\n        }\n\n        // Display checkout form\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Checkout</title>\n</head>\n<body>\n    <h1>Checkout</h1>\n    \n    <?php if (!empty($cart->getCartItems())): ?>\n        <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"POST\">\n            <div style=\"margin-bottom: 20px;\">\n                <label for=\"payment_method\">Payment Method:</label><br>\n                <input type=\"text\" id=\"payment_method\" name=\"payment_method\" required><br><br>\n                \n                <button type=\"submit\" name=\"submit\">Place Order</button>\n            </div>\n        </form>\n\n        <h2>Order Summary</h2>\n        <?php foreach ($cart->getCartItems() as $item): ?>\n            <p><?php echo $item['product']->name; ?> (Quantity: <?php echo $item['quantity']; ?>)</p>\n        <?php endforeach; ?>\n        <p>Total: <?php echo $cart->getCartTotal(); ?></p>\n    <?php else: ?>\n        <p>Your cart is empty.</p>\n    <?php endif; ?>\n\n    <a href=\"index.php\">Continue Shopping</a><br>\n    <a href=\"logout.php\">Logout</a>\n</body>\n</html>\n\n<?php\n    } else {\n        echo \"Your cart is empty. Please add items to your cart before checking out.\";\n    }\n} else {\n    header(\"Location: login.php\");\n    exit();\n}\n?>\n```\n\n### Step 7: Order Confirmation Page\n\nCreate an order confirmation page.\n\n```php\n<?php\nsession_start();\nrequire_once(\"config.php\");\n\nif (isset($_GET['order_id'])) {\n    $order_id = $_GET['order_id'];\n    \n    // Retrieve order details from database\n    $stmt = $conn->prepare(\"SELECT * FROM orders WHERE id = ?\");\n    $stmt->bind_param(\"i\", $order_id);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($row = $result->fetch_assoc()) {\n        // Display confirmation message\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Order Confirmation</title>\n</head>\n<body>\n    <h1>Thank you for your order!</h1>\n    <p>Your order ID is: <?php echo $order_id; ?></p>\n    <p>Total Amount: <?php echo $row['total_amount']; ?></p>\n    <p>Payment Method: <?php echo $row['payment_method']; ?></p>\n    <p>Status: <?php echo $row['order_status']; ?></p>\n\n    <a href=\"index.php\">Continue Shopping</a><br>\n    <a href=\"logout.php\">Logout</a>\n</body>\n</html>\n\n<?php\n    } else {\n        echo \"Invalid order ID.\";\n    }\n} else {\n    header(\"Location: index.php\");\n    exit();\n}\n?>\n```\n\n### Step 8: Error Handling and Security\n\nAdd error handling to your functions and ensure input validation. Also, secure sensitive data by hashing passwords and using prepared statements.\n\n### Conclusion\n\nThis is a basic implementation of a purchase functionality in PHP. It includes user authentication, product display, cart management, order processing, and confirmation. You can enhance this further by adding:\n\n- Payment gateways (e.g., Stripe, PayPal)\n- More detailed error handling\n- Cart updates via AJAX\n- Order tracking\n- User notifications\n- Admin panel for managing products and orders\n\nRemember to secure your application properly, validate all inputs, and handle errors gracefully.", "code_blocks": [null, "```php\n<?php\n// Include configuration file\nrequire_once(\"config.php\");\n\nclass User {\n    public $id;\n    public $name;\n    public $email;\n\n    public function register($name, $email, $password) {\n        global $conn;\n        \n        // Check if email exists\n        $stmt = $conn->prepare(\"SELECT id FROM users WHERE email = ?\");\n        $stmt->bind_param(\"s\", $email);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        \n        if ($result->num_rows > 0) {\n            return false; // Email already exists\n        }\n\n        // Hash password\n        $password_hash = password_hash($password, PASSWORD_BCRYPT);\n\n        // Insert into database\n        $stmt = $conn->prepare(\"INSERT INTO users (name, email, password_hash) VALUES (?, ?, ?)\");\n        $stmt->bind_param(\"sss\", $name, $email, $password_hash);\n        \n        if ($stmt->execute()) {\n            $this->id = $conn->insert_id;\n            $this->name = $name;\n            $this->email = $email;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public function login($email, $password) {\n        global $conn;\n        \n        // Get user data\n        $stmt = $conn->prepare(\"SELECT id, name, password_hash FROM users WHERE email = ?\");\n        $stmt->bind_param(\"s\", $email);\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        if ($result->num_rows == 1) {\n            $user = $result->fetch_assoc();\n            \n            // Verify password\n            if (password_verify($password, $user['password_hash'])) {\n                $this->id = $user['id'];\n                $this->name = $user['name'];\n                $this->email = $email;\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\n// Example usage:\n// $user = new User();\n// if ($user->register('John Doe', 'john@example.com', 'password123')) {\n//     echo \"Registration successful!\";\n// }\n\n// if ($user->login('john@example.com', 'password123')) {\n//     echo \"Login successful!\";\n// }\n?>\n```", "```php\n<?php\nrequire_once(\"config.php\");\n\nclass Product {\n    public $id;\n    public $name;\n    public $description;\n    public $price;\n    public $stock;\n    public $image_url;\n\n    public function __construct($id, $name, $description, $price, $stock, $image_url) {\n        $this->id = $id;\n        $this->name = $name;\n        $this->description = $description;\n        $this->price = $price;\n        $this->stock = $stock;\n        $this->image_url = $image_url;\n    }\n\n    public static function getAllProducts() {\n        global $conn;\n        \n        $products = array();\n        \n        $stmt = $conn->prepare(\"SELECT * FROM products\");\n        $stmt->execute();\n        $result = $stmt->get_result();\n\n        while ($row = $result->fetch_assoc()) {\n            $product = new Product($row['id'], $row['name'], $row['description'], $row['price'], $row['stock'], $row['image_url']);\n            array_push($products, $product);\n        }\n\n        return $products;\n    }\n}\n?>\n```", "```php\n<?php\nsession_start();\n\nclass Cart {\n    public $items;\n\n    function __construct() {\n        if (isset($_SESSION['cart'])) {\n            $this->items = $_SESSION['cart'];\n        } else {\n            $this->items = array();\n        }\n    }\n\n    public function addToCart($productId, $quantity) {\n        // Check if product exists in cart\n        if (!empty($this->items[$productId])) {\n            // Update quantity\n            $this->items[$productId] += $quantity;\n        } else {\n            // Add new product\n            $this->items[$productId] = $quantity;\n        }\n\n        $_SESSION['cart'] = $this->items;\n    }\n\n    public function updateCart($productId, $quantity) {\n        if ($quantity > 0) {\n            $this->items[$productId] = $quantity;\n        } else {\n            unset($this->items[$productId]);\n        }\n\n        $_SESSION['cart'] = $this->items;\n    }\n\n    public function getCartTotal() {\n        global $conn;\n\n        $total = 0;\n        \n        foreach ($this->items as $productId => $quantity) {\n            // Get product price\n            $stmt = $conn->prepare(\"SELECT price FROM products WHERE id = ?\");\n            $stmt->bind_param(\"i\", $productId);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            if ($row = $result->fetch_assoc()) {\n                $total += $row['price'] * $quantity;\n            }\n        }\n\n        return $total;\n    }\n\n    public function getCartItems() {\n        global $conn;\n\n        $items = array();\n        \n        foreach ($this->items as $productId => $quantity) {\n            // Get product details\n            $stmt = $conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n            $stmt->bind_param(\"i\", $productId);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            if ($row = $result->fetch_assoc()) {\n                $product = new Product($row['id'], $row['name'], $row['description'], $row['price'], $row['stock'], $row['image_url']);\n                array_push($items, array(\n                    'product' => $product,\n                    'quantity' => $quantity\n                ));\n            }\n        }\n\n        return $items;\n    }\n}\n?>\n```", "```php\n<?php\nrequire_once(\"config.php\");\nsession_start();\n\nclass Order {\n    public $id;\n    public $user_id;\n    public $total_amount;\n    public $payment_method;\n    public $order_status;\n\n    function __construct($user_id, $total_amount, $payment_method) {\n        global $conn;\n\n        // Create new order\n        $stmt = $conn->prepare(\"INSERT INTO orders (user_id, total_amount, payment_method, order_status) VALUES (?, ?, ?, 'pending')\");\n        $stmt->bind_param(\"ids\", $user_id, $total_amount, $payment_method);\n        \n        if ($stmt->execute()) {\n            $this->id = $conn->insert_id;\n            $this->user_id = $user_id;\n            $this->total_amount = $total_amount;\n            $this->payment_method = $payment_method;\n            $this->order_status = 'pending';\n            \n            // Insert order items\n            $cart = new Cart();\n            foreach ($cart->getCartItems() as $item) {\n                $productId = $item['product']->id;\n                $quantity = $item['quantity'];\n                $price = $item['product']->price;\n\n                $stmt2 = $conn->prepare(\"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\");\n                $stmt2->bind_param(\"iidi\", $this->id, $productId, $quantity, $price);\n                $stmt2->execute();\n            }\n\n            // Deduct stock\n            foreach ($cart->getCartItems() as $item) {\n                $productId = $item['product']->id;\n                $quantity = $item['quantity'];\n\n                $stmt3 = $conn->prepare(\"UPDATE products SET stock = stock - ? WHERE id = ?\");\n                $stmt3->bind_param(\"ii\", $quantity, $productId);\n                $stmt3->execute();\n            }\n\n            // Clear cart\n            $_SESSION['cart'] = array();\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n?>\n```", "```php\n<?php\nsession_start();\nrequire_once(\"config.php\");\nrequire_once(\"classes/Product.php\");\nrequire_once(\"classes/Cart.php\");\nrequire_once(\"classes/Order.php\");\n\nif (isset($_SESSION['user_id'])) {\n    $cart = new Cart();\n\n    if (!empty($cart->getCartItems())) {\n        // Process order\n        if (isset($_POST['submit'])) {\n            $payment_method = $_POST['payment_method'];\n            $total_amount = $cart->getCartTotal();\n            \n            $order = new Order($_SESSION['user_id'], $total_amount, $payment_method);\n\n            if ($order) {\n                // Redirect to confirmation page\n                header(\"Location: order-confirmation.php?order_id=\" . $order->id);\n                exit();\n            } else {\n                echo \"Error processing your order. Please try again.\";\n            }\n        }\n\n        // Display checkout form\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Checkout</title>\n</head>\n<body>\n    <h1>Checkout</h1>\n    \n    <?php if (!empty($cart->getCartItems())): ?>\n        <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"POST\">\n            <div style=\"margin-bottom: 20px;\">\n                <label for=\"payment_method\">Payment Method:</label><br>\n                <input type=\"text\" id=\"payment_method\" name=\"payment_method\" required><br><br>\n                \n                <button type=\"submit\" name=\"submit\">Place Order</button>\n            </div>\n        </form>\n\n        <h2>Order Summary</h2>\n        <?php foreach ($cart->getCartItems() as $item): ?>\n            <p><?php echo $item['product']->name; ?> (Quantity: <?php echo $item['quantity']; ?>)</p>\n        <?php endforeach; ?>\n        <p>Total: <?php echo $cart->getCartTotal(); ?></p>\n    <?php else: ?>\n        <p>Your cart is empty.</p>\n    <?php endif; ?>\n\n    <a href=\"index.php\">Continue Shopping</a><br>\n    <a href=\"logout.php\">Logout</a>\n</body>\n</html>\n\n<?php\n    } else {\n        echo \"Your cart is empty. Please add items to your cart before checking out.\";\n    }\n} else {\n    header(\"Location: login.php\");\n    exit();\n}\n?>\n```", "```php\n<?php\nsession_start();\nrequire_once(\"config.php\");\n\nif (isset($_GET['order_id'])) {\n    $order_id = $_GET['order_id'];\n    \n    // Retrieve order details from database\n    $stmt = $conn->prepare(\"SELECT * FROM orders WHERE id = ?\");\n    $stmt->bind_param(\"i\", $order_id);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($row = $result->fetch_assoc()) {\n        // Display confirmation message\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Order Confirmation</title>\n</head>\n<body>\n    <h1>Thank you for your order!</h1>\n    <p>Your order ID is: <?php echo $order_id; ?></p>\n    <p>Total Amount: <?php echo $row['total_amount']; ?></p>\n    <p>Payment Method: <?php echo $row['payment_method']; ?></p>\n    <p>Status: <?php echo $row['order_status']; ?></p>\n\n    <a href=\"index.php\">Continue Shopping</a><br>\n    <a href=\"logout.php\">Logout</a>\n</body>\n</html>\n\n<?php\n    } else {\n        echo \"Invalid order ID.\";\n    }\n} else {\n    header(\"Location: index.php\");\n    exit();\n}\n?>\n```"]}
