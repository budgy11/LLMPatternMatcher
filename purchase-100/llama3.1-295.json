{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality in PHP, using a database to store orders and products.\n\n**Database Schema:**\n\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE orders (\n  id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  order_date DATE,\n  total DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n  id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  FOREIGN KEY (order_id) REFERENCES orders(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n**PHP Code:**\n\n```php\n// config.php\n\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'root');\ndefine('DB_PASSWORD', '');\ndefine('DB_NAME', 'store');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n```\n\n```php\n// product.php\n\nclass Product {\n  private $id;\n  private $name;\n  private $price;\n\n  public function __construct($id, $name, $price) {\n    $this->id = $id;\n    $this->name = $name;\n    $this->price = $price;\n  }\n\n  public function get_id() {\n    return $this->id;\n  }\n\n  public function get_name() {\n    return $this->name;\n  }\n\n  public function get_price() {\n    return $this->price;\n  }\n}\n```\n\n```php\n// order.php\n\nclass Order {\n  private $id;\n  private $customer_name;\n  private $order_date;\n  private $total;\n\n  public function __construct($id, $customer_name, $order_date, $total) {\n    $this->id = $id;\n    $this->customer_name = $customer_name;\n    $this->order_date = $order_date;\n    $this->total = $total;\n  }\n\n  public function get_id() {\n    return $this->id;\n  }\n\n  public function get_customer_name() {\n    return $this->customer_name;\n  }\n\n  public function get_order_date() {\n    return $this->order_date;\n  }\n\n  public function get_total() {\n    return $this->total;\n  }\n}\n```\n\n```php\n// cart.php\n\nclass Cart {\n  private $products;\n\n  public function __construct() {\n    $this->products = array();\n  }\n\n  public function add_product($product_id, $quantity) {\n    if (array_key_exists($product_id, $this->products)) {\n      $this->products[$product_id] += $quantity;\n    } else {\n      $this->products[$product_id] = $quantity;\n    }\n  }\n\n  public function remove_product($product_id) {\n    unset($this->products[$product_id]);\n  }\n\n  public function get_products() {\n    return $this->products;\n  }\n}\n```\n\n```php\n// purchase.php\n\nclass Purchase {\n  private $cart;\n\n  public function __construct() {\n    $this->cart = new Cart();\n  }\n\n  public function add_product_to_cart($product_id, $quantity) {\n    $product = new Product(1, 'Product 1', 9.99);\n    $this->cart->add_product($product_id, $quantity);\n  }\n\n  public function remove_product_from_cart($product_id) {\n    $this->cart->remove_product($product_id);\n  }\n\n  public function get_total() {\n    $total = 0;\n    foreach ($this->cart->get_products() as $product_id => $quantity) {\n      $product = new Product(1, 'Product 1', 9.99);\n      $total += $product->get_price() * $quantity;\n    }\n    return $total;\n  }\n\n  public function checkout($customer_name) {\n    // Create order\n    $order_date = date('Y-m-d');\n    $total = $this->get_total();\n    $order = new Order(1, $customer_name, $order_date, $total);\n\n    // Add order items to database\n    foreach ($this->cart->get_products() as $product_id => $quantity) {\n      $product = new Product($product_id, 'Product 1', 9.99);\n      $query = \"INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)\";\n      $stmt = $conn->prepare($query);\n      $stmt->bind_param('iii', $order->get_id(), $product->get_id(), $quantity);\n      $stmt->execute();\n    }\n\n    // Update database with new order\n    $query = \"INSERT INTO orders (customer_name, order_date, total) VALUES (?, ?, ?)\";\n    $stmt = $conn->prepare($query);\n    $stmt->bind_param('sds', $order->get_customer_name(), $order->get_order_date(), $order->get_total());\n    $stmt->execute();\n\n    // Reset cart\n    $this->cart = new Cart();\n  }\n}\n```\n\n**Usage:**\n\n```php\n$purchase = new Purchase();\n\n// Add products to cart\n$purchase->add_product_to_cart(1, 2);\n$purchase->add_product_to_cart(2, 3);\n\n// Checkout\n$purchase->checkout('John Doe');\n```\n\nNote that this is a very basic implementation and you should add more error checking and security measures (e.g., user authentication, payment processing). Additionally, the database schema and PHP code can be improved for better performance and scalability.", "code_blocks": [null, "```php\n// config.php\n\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'root');\ndefine('DB_PASSWORD', '');\ndefine('DB_NAME', 'store');\n\n// Connect to database\n$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n```", "```php\n// product.php\n\nclass Product {\n  private $id;\n  private $name;\n  private $price;\n\n  public function __construct($id, $name, $price) {\n    $this->id = $id;\n    $this->name = $name;\n    $this->price = $price;\n  }\n\n  public function get_id() {\n    return $this->id;\n  }\n\n  public function get_name() {\n    return $this->name;\n  }\n\n  public function get_price() {\n    return $this->price;\n  }\n}\n```", "```php\n// order.php\n\nclass Order {\n  private $id;\n  private $customer_name;\n  private $order_date;\n  private $total;\n\n  public function __construct($id, $customer_name, $order_date, $total) {\n    $this->id = $id;\n    $this->customer_name = $customer_name;\n    $this->order_date = $order_date;\n    $this->total = $total;\n  }\n\n  public function get_id() {\n    return $this->id;\n  }\n\n  public function get_customer_name() {\n    return $this->customer_name;\n  }\n\n  public function get_order_date() {\n    return $this->order_date;\n  }\n\n  public function get_total() {\n    return $this->total;\n  }\n}\n```", "```php\n// cart.php\n\nclass Cart {\n  private $products;\n\n  public function __construct() {\n    $this->products = array();\n  }\n\n  public function add_product($product_id, $quantity) {\n    if (array_key_exists($product_id, $this->products)) {\n      $this->products[$product_id] += $quantity;\n    } else {\n      $this->products[$product_id] = $quantity;\n    }\n  }\n\n  public function remove_product($product_id) {\n    unset($this->products[$product_id]);\n  }\n\n  public function get_products() {\n    return $this->products;\n  }\n}\n```", "```php\n// purchase.php\n\nclass Purchase {\n  private $cart;\n\n  public function __construct() {\n    $this->cart = new Cart();\n  }\n\n  public function add_product_to_cart($product_id, $quantity) {\n    $product = new Product(1, 'Product 1', 9.99);\n    $this->cart->add_product($product_id, $quantity);\n  }\n\n  public function remove_product_from_cart($product_id) {\n    $this->cart->remove_product($product_id);\n  }\n\n  public function get_total() {\n    $total = 0;\n    foreach ($this->cart->get_products() as $product_id => $quantity) {\n      $product = new Product(1, 'Product 1', 9.99);\n      $total += $product->get_price() * $quantity;\n    }\n    return $total;\n  }\n\n  public function checkout($customer_name) {\n    // Create order\n    $order_date = date('Y-m-d');\n    $total = $this->get_total();\n    $order = new Order(1, $customer_name, $order_date, $total);\n\n    // Add order items to database\n    foreach ($this->cart->get_products() as $product_id => $quantity) {\n      $product = new Product($product_id, 'Product 1', 9.99);\n      $query = \"INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)\";\n      $stmt = $conn->prepare($query);\n      $stmt->bind_param('iii', $order->get_id(), $product->get_id(), $quantity);\n      $stmt->execute();\n    }\n\n    // Update database with new order\n    $query = \"INSERT INTO orders (customer_name, order_date, total) VALUES (?, ?, ?)\";\n    $stmt = $conn->prepare($query);\n    $stmt->bind_param('sds', $order->get_customer_name(), $order->get_order_date(), $order->get_total());\n    $stmt->execute();\n\n    // Reset cart\n    $this->cart = new Cart();\n  }\n}\n```", "```php\n$purchase = new Purchase();\n\n// Add products to cart\n$purchase->add_product_to_cart(1, 2);\n$purchase->add_product_to_cart(2, 3);\n\n// Checkout\n$purchase->checkout('John Doe');\n```"]}
