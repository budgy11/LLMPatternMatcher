{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of how you can create a simple purchase functionality using PHP. This example assumes that you have already set up a database with the necessary tables for products and customers.\n\n**Database Setup**\n\nFor this example, we will need two tables: `products` and `orders`.\n\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10,2) NOT NULL\n);\n\nCREATE TABLE orders (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  customer_id INT NOT NULL,\n  product_id INT NOT NULL,\n  quantity INT NOT NULL DEFAULT 1,\n  total_price DECIMAL(10,2) NOT NULL,\n  FOREIGN KEY (customer_id) REFERENCES customers(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n**PHP Code**\n\nHere is the PHP code for the purchase functionality:\n\n```php\n// db_config.php\n<?php\n$host = 'localhost';\n$dbname = 'mydb';\n$user = 'myuser';\n$password = 'mypassword';\n\ntry {\n    $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $password);\n} catch (PDOException $e) {\n    die('ERROR: Could not connect. ' . $e->getMessage());\n}\n\nfunction getProducts() {\n    global $pdo;\n    $stmt = $pdo->prepare(\"SELECT * FROM products\");\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\n\nfunction purchaseProduct($productId, $customerId) {\n    global $pdo;\n    \n    // Get product details\n    $productStmt = $pdo->prepare(\"SELECT price FROM products WHERE id = :id\");\n    $productStmt->bindParam(':id', $productId);\n    $productStmt->execute();\n    $price = $productStmt->fetchColumn();\n    \n    // Insert order into database\n    $stmt = $pdo->prepare(\"INSERT INTO orders (customer_id, product_id, quantity, total_price) VALUES (:customer_id, :product_id, 1, :total_price)\");\n    $stmt->bindParam(':customer_id', $customerId);\n    $stmt->bindParam(':product_id', $productId);\n    $stmt->bindParam(':total_price', $price);\n    $stmt->execute();\n    \n    return true;\n}\n\n// Function to display products and handle form submission\nfunction displayProducts() {\n    global $pdo;\n    $products = getProducts();\n    \n    if (isset($_POST['purchase'])) {\n        $productId = $_POST['product_id'];\n        $customerId = 1; // Replace with actual customer ID\n        \n        purchaseProduct($productId, $customerId);\n        \n        echo \"Product purchased successfully!\";\n    } else {\n        ?>\n        <h1>Available Products</h1>\n        <ul>\n            <?php foreach ($products as $product) { ?>\n                <li>\n                    <?= $product['name'] ?> (<?= $product['price'] ?>)\n                    <form action=\"\" method=\"post\">\n                        <input type=\"hidden\" name=\"product_id\" value=\"<?= $product['id'] ?>\">\n                        <button type=\"submit\" name=\"purchase\">Purchase</button>\n                    </form>\n                </li>\n            <?php } ?>\n        </ul>\n        <?php\n    }\n}\n\ndisplayProducts();\n?>\n```\n\n**Example Use Case**\n\n1. A customer visits the website and sees a list of available products.\n2. The customer selects a product they want to purchase and clicks the \"Purchase\" button.\n3. The PHP code checks if the product is available in stock (not implemented here for simplicity).\n4. If the product is available, the code inserts an order into the database with the customer's ID, product ID, quantity, and total price.\n5. The customer is notified that their product has been successfully purchased.\n\nNote: This example uses PDO for database interactions, which is a more secure way to interact with databases in PHP. Also, this is a simplified example and you should add proper error handling and validation in your actual implementation.", "code_blocks": [null, "```php\n// db_config.php\n<?php\n$host = 'localhost';\n$dbname = 'mydb';\n$user = 'myuser';\n$password = 'mypassword';\n\ntry {\n    $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $password);\n} catch (PDOException $e) {\n    die('ERROR: Could not connect. ' . $e->getMessage());\n}\n\nfunction getProducts() {\n    global $pdo;\n    $stmt = $pdo->prepare(\"SELECT * FROM products\");\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\n\nfunction purchaseProduct($productId, $customerId) {\n    global $pdo;\n    \n    // Get product details\n    $productStmt = $pdo->prepare(\"SELECT price FROM products WHERE id = :id\");\n    $productStmt->bindParam(':id', $productId);\n    $productStmt->execute();\n    $price = $productStmt->fetchColumn();\n    \n    // Insert order into database\n    $stmt = $pdo->prepare(\"INSERT INTO orders (customer_id, product_id, quantity, total_price) VALUES (:customer_id, :product_id, 1, :total_price)\");\n    $stmt->bindParam(':customer_id', $customerId);\n    $stmt->bindParam(':product_id', $productId);\n    $stmt->bindParam(':total_price', $price);\n    $stmt->execute();\n    \n    return true;\n}\n\n// Function to display products and handle form submission\nfunction displayProducts() {\n    global $pdo;\n    $products = getProducts();\n    \n    if (isset($_POST['purchase'])) {\n        $productId = $_POST['product_id'];\n        $customerId = 1; // Replace with actual customer ID\n        \n        purchaseProduct($productId, $customerId);\n        \n        echo \"Product purchased successfully!\";\n    } else {\n        ?>\n        <h1>Available Products</h1>\n        <ul>\n            <?php foreach ($products as $product) { ?>\n                <li>\n                    <?= $product['name'] ?> (<?= $product['price'] ?>)\n                    <form action=\"\" method=\"post\">\n                        <input type=\"hidden\" name=\"product_id\" value=\"<?= $product['id'] ?>\">\n                        <button type=\"submit\" name=\"purchase\">Purchase</button>\n                    </form>\n                </li>\n            <?php } ?>\n        </ul>\n        <?php\n    }\n}\n\ndisplayProducts();\n?>\n```"]}
