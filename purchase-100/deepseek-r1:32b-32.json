{"prompt": "Create a purchase cart functionality using php", "llm_output": "<think>\nAlright, the user wants to create a purchase cart functionality using PHP. I need to figure out how to approach this step by step.\n\nFirst, I should consider what features are essential for a shopping cart. Users need to add products, view their cart, update quantities, remove items, and proceed to checkout. Also, they should be able to search for products, which means integrating a search feature.\n\nI'll start by outlining the database structure. The products table will store product details like id, name, price, description, and image path. The cart table needs to track each user's cart items, so it should include user_id, product_id, quantity, and timestamps for tracking when items are added or updated.\n\nNext, I'll think about the PHP classes needed. A Product class will handle product operations\u2014fetching products, adding new ones, searching, etc. A Cart class will manage cart operations: adding items, updating quantities, removing items, calculating totals, and handling checkout.\n\nFor user authentication, a simple UserAuth class can handle registration, login, logout, and checking if the user is logged in. This ensures that each cart is tied to a specific user.\n\nIn the product.php page, I'll display all products with an \"Add to Cart\" button. When a user clicks this button, it triggers an addCart function in cart.php, which checks if the item is already in the cart and updates accordingly.\n\nThe search functionality will be part of the Product class, allowing users to filter products by name or description. This will be handled in the products page with a form submission.\n\nIn the cart.php page, I'll display all items in the user's cart, showing each product's details, quantity input, remove button, and total prices. There should also be options to update quantities, proceed to checkout, and view purchase history.\n\nCheckout involves inserting order data into the orders table and clearing the cart. This ensures that once an order is placed, it's recorded, and the cart is emptied for future use.\n\nI'll also need to handle sessions or cookies to keep track of logged-in users. The UserAuth class will manage this by setting session variables upon login and checking them on each page load.\n\nTesting each part is crucial. I'll make sure that adding products works correctly, quantities update without issues, and checkout redirects properly after saving the order. Also, verifying that search returns the correct results is important.\n\nFinally, I'll consider possible improvements like using AJAX for dynamic updates instead of full page reloads, implementing pagination for product listings, or adding more user details in the orders table. But for now, the core functionality should be solid.\n</think>\n\nHere's an example implementation of a purchase cart functionality using PHP:\n\n### Step 1: Create Database Tables\n\nFirst, create two tables in your database - one for products and one for the shopping cart.\n\n```sql\nCREATE TABLE products (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(255),\n    price DECIMAL(10,2),\n    description TEXT,\n    image_path VARCHAR(255)\n);\n\nCREATE TABLE cart (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    user_id INT,\n    product_id INT,\n    quantity INT,\n    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### Step 2: Create Product Class\n\nThis class will handle product-related operations.\n\n```php\nclass Product {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Get all products\n    public function getAllProducts() {\n        $query = \"SELECT * FROM products\";\n        $result = $this->db->query($query);\n        return $result->fetchAll(PDO::FETCH_ASSOC);\n    }\n\n    // Add new product\n    public function addProduct($name, $price, $description, $image_path) {\n        $query = \"INSERT INTO products (name, price, description, image_path) \n                VALUES (?, ?, ?, ?)\";\n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([$name, $price, $description, $image_path]);\n    }\n\n    // Search products\n    public function searchProducts($keyword) {\n        $query = \"SELECT * FROM products \n                WHERE name LIKE ? OR description LIKE ?\";\n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([\"%$keyword%\", \"%$keyword%\"]);\n    }\n}\n```\n\n### Step 3: Create Cart Class\n\nThis class will handle cart-related operations.\n\n```php\nclass Cart {\n    private $db;\n    private $user_id;\n\n    public function __construct($db, $user_id) {\n        $this->db = $db;\n        $this->user_id = $user_id;\n    }\n\n    // Add item to cart\n    public function addItem($product_id, $quantity = 1) {\n        $query = \"INSERT INTO cart (user_id, product_id, quantity)\n                VALUES (?, ?, ?)\n                ON DUPLICATE KEY UPDATE quantity = quantity + ?\";\n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([$this->user_id, $product_id, $quantity, $quantity]);\n    }\n\n    // Get cart items\n    public function getCartItems() {\n        $query = \"SELECT c.*, p.* FROM cart c \n                JOIN products p ON c.product_id = p.id \n                WHERE c.user_id = ?\";\n        $stmt = $this->db->prepare($query);\n        $stmt->execute([$this->user_id]);\n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    }\n\n    // Update quantity\n    public function updateQuantity($cart_id, $quantity) {\n        $query = \"UPDATE cart SET quantity = ?, updated_at = CURRENT_TIMESTAMP \n                WHERE id = ?\";\n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([$quantity, $cart_id]);\n    }\n\n    // Remove item from cart\n    public function removeItem($cart_id) {\n        $query = \"DELETE FROM cart WHERE id = ?\";\n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([$cart_id]);\n    }\n\n    // Calculate total price\n    public function calculateTotal() {\n        $query = \"SELECT SUM(p.price * c.quantity) as total \n                FROM cart c JOIN products p ON c.product_id = p.id \n                WHERE c.user_id = ?\";\n        $stmt = $this->db->prepare($query);\n        $stmt->execute([$this->user_id]);\n        return $stmt->fetch(PDO::FETCH_ASSOC)['total'];\n    }\n\n    // Checkout\n    public function checkout() {\n        // Here you would typically insert into an orders table\n        // and then empty the cart\n        $this->emptyCart();\n        return true;\n    }\n\n    // Empty cart\n    private function emptyCart() {\n        $query = \"DELETE FROM cart WHERE user_id = ?\";\n        $stmt = $this->db->prepare($query);\n        $stmt->execute([$this->user_id]);\n    }\n}\n```\n\n### Step 4: User Authentication\n\nYou'll need to handle user authentication. Here's a simple example:\n\n```php\nclass UserAuth {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Register user\n    public function register($username, $password) {\n        $query = \"INSERT INTO users (username, password)\n                VALUES (?, ?)\";\n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([$username, md5($password)]);\n    }\n\n    // Login user\n    public function login($username, $password) {\n        $query = \"SELECT * FROM users WHERE username = ? AND password = ?\";\n        $stmt = $this->db->prepare($query);\n        $stmt->execute([$username, md5($password)]);\n        return $stmt->fetch(PDO::FETCH_ASSOC);\n    }\n\n    // Check if user is logged in\n    public function isLoggedIn() {\n        return isset($_SESSION['user_id']);\n    }\n\n    // Logout user\n    public function logout() {\n        session_unset();\n        session_destroy();\n    }\n}\n```\n\n### Step 5: Display Products\n\nCreate a `products.php` page:\n\n```php\n<?php\nrequire_once 'database.php';\nrequire_once 'Product.php';\n\n$product = new Product($db);\n\n// Get all products\n$products = $product->getAllProducts();\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart - Products</title>\n</head>\n<body>\n    <h1>Available Products</h1>\n    \n    <?php foreach ($products as $product): ?>\n        <div class=\"product\">\n            <img src=\"<?php echo $product['image_path']; ?>\" alt=\"<?php echo $product['name']; ?>\">\n            <h2><?php echo $product['name']; ?></h2>\n            <p><?php echo $product['description']; ?></p>\n            <p>Price: $<?php echo number_format($product['price'], 2); ?></p>\n            <form action=\"cart.php\" method=\"post\">\n                <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product['id']; ?>\">\n                <button type=\"submit\">Add to Cart</button>\n            </form>\n        </div>\n    <?php endforeach; ?>\n\n    <!-- Add your own styling and layout -->\n</body>\n</html>\n```\n\n### Step 6: Cart Page\n\nCreate a `cart.php` page:\n\n```php\n<?php\nsession_start();\nrequire_once 'database.php';\nrequire_once 'Cart.php';\n\nif (!isset($_SESSION['user_id'])) {\n    header('Location: login.php');\n    exit;\n}\n\n$cart = new Cart($db, $_SESSION['user_id']);\n\n// Handle form submissions\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    if (isset($_POST['add_to_cart'])) {\n        $product_id = intval($_POST['product_id']);\n        $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1;\n        $cart->addItem($product_id, $quantity);\n    } elseif (isset($_POST['update_quantity'])) {\n        foreach ($_POST['quantity'] as $cart_id => $qty) {\n            $cart->updateQuantity($cart_id, intval($qty));\n        }\n    } elseif (isset($_POST['remove_item'])) {\n        $cart->removeItem(intval($_POST['item_id']));\n    } elseif (isset($_POST['checkout'])) {\n        $cart->checkout();\n        header('Location: products.php');\n        exit;\n    }\n}\n\n$items = $cart->getCartItems();\n$total = $cart->calculateTotal();\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n</head>\n<body>\n    <h1>Your Shopping Cart</h1>\n    \n    <?php if (!empty($items)): ?>\n        <form action=\"cart.php\" method=\"post\">\n            <table>\n                <thead>\n                    <tr>\n                        <th>Product</th>\n                        <th>Quantity</th>\n                        <th>Price</th>\n                        <th>Total</th>\n                        <th>Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <?php foreach ($items as $item): ?>\n                        <tr>\n                            <td><?php echo $item['name']; ?></td>\n                            <td>\n                                <input type=\"number\" name=\"quantity[<?php echo $item['id']; ?>]\" \n                                       value=\"<?php echo $item['quantity']; ?>\" min=\"1\">\n                            </td>\n                            <td>$<?php echo number_format($item['price'], 2); ?></td>\n                            <td>$<?php echo number_format($item['price'] * $item['quantity'], 2); ?></td>\n                            <td>\n                                <input type=\"hidden\" name=\"remove_item_id\" value=\"<?php echo $item['id']; ?>\">\n                                <button type=\"submit\" name=\"remove_item\">Remove</button>\n                            </td>\n                        </tr>\n                    <?php endforeach; ?>\n                </tbody>\n            </table>\n            \n            <div class=\"cart-total\">\n                <h3>Total: $<?php echo number_format($total, 2); ?></h3>\n                <input type=\"submit\" name=\"update_quantity\" value=\"Update Cart\">\n                <input type=\"submit\" name=\"checkout\" value=\"Checkout\">\n            </div>\n        </form>\n    <?php else: ?>\n        <p>Your cart is empty!</p>\n    <?php endif; ?>\n\n    <a href=\"products.php\">Continue Shopping</a>\n</body>\n</html>\n```\n\n### Step 7: Database Connection\n\nCreate a `database.php` file:\n\n```php\n<?php\ntry {\n    $db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Database connection failed: \" . $e->getMessage());\n}\n?>\n```\n\n### Step 8: User Authentication Pages\n\nCreate login and registration pages:\n\n```php\n// login.php\n<?php\nsession_start();\nrequire_once 'database.php';\nrequire_once 'UserAuth.php';\n\n$user_auth = new UserAuth($db);\n\nif ($user_auth->isLoggedIn()) {\n    header('Location: products.php');\n    exit;\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    if (isset($_POST['login'])) {\n        $user = $user_auth->login($_POST['username'], $_POST['password']);\n        if ($user) {\n            $_SESSION['user_id'] = $user['id'];\n            header('Location: products.php');\n            exit;\n        } else {\n            $error = \"Invalid username or password\";\n        }\n    } elseif (isset($_POST['register'])) {\n        $user_auth->register($_POST['username'], $_POST['password']);\n        header('Location: login.php');\n        exit;\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <?php if (!empty($error)): ?>\n        <div class=\"error\"><?php echo $error; ?></div>\n    <?php endif; ?>\n\n    <h1>Login</h1>\n    <form action=\"\" method=\"post\">\n        <input type=\"text\" name=\"username\" placeholder=\"Username\" required>\n        <input type=\"password\" name=\"password\" placeholder=\"Password\" required>\n        <button type=\"submit\" name=\"login\">Login</button>\n    </form>\n\n    <p>Don't have an account? <a href=\"?action=register\">Register here</a></p>\n\n    <?php if (isset($_GET['action']) && $_GET['action'] == 'register'): ?>\n        <h1>Register</h1>\n        <form action=\"\" method=\"post\">\n            <input type=\"text\" name=\"username\" placeholder=\"Username\" required>\n            <input type=\"password\" name=\"password\" placeholder=\"Password\" required>\n            <button type=\"submit\" name=\"register\">Register</button>\n        </form>\n    <?php endif; ?>\n</body>\n</html>\n```\n\n### Step 9: Logout\n\nAdd logout functionality:\n\n```php\n// logout.php\n<?php\nsession_start();\nrequire_once 'UserAuth.php';\n\n$user_auth = new UserAuth($db);\n$user_auth->logout();\n\nheader('Location: login.php');\nexit;\n?>\n```\n\nThis is a basic implementation of a shopping cart system. You can further customize it by adding:\n\n- More user information (first name, last name, email)\n- Order history\n- Payment integration\n- Shipping options\n- User reviews and ratings\n- Product categories\n- Search and filtering\n- Sorting options\n\nTo use this code:\n\n1. Create a database named `your_database` with the appropriate tables\n2. Update the database connection details in `database.php`\n3. Set up your web server to serve these files\n4. Test each page and functionality\n\nRemember to secure your application by:\n- Using prepared statements for all database queries\n- Sanitizing user input\n- Implementing CSRF protection\n- Using HTTPS for production environments\n- Properly handling errors and exceptions", "code_blocks": [null, "```php\nclass Product {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Get all products\n    public function getAllProducts() {\n        $query = \"SELECT * FROM products\";\n        $result = $this->db->query($query);\n        return $result->fetchAll(PDO::FETCH_ASSOC);\n    }\n\n    // Add new product\n    public function addProduct($name, $price, $description, $image_path) {\n        $query = \"INSERT INTO products (name, price, description, image_path) \n                VALUES (?, ?, ?, ?)\";\n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([$name, $price, $description, $image_path]);\n    }\n\n    // Search products\n    public function searchProducts($keyword) {\n        $query = \"SELECT * FROM products \n                WHERE name LIKE ? OR description LIKE ?\";\n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([\"%$keyword%\", \"%$keyword%\"]);\n    }\n}\n```", "```php\nclass Cart {\n    private $db;\n    private $user_id;\n\n    public function __construct($db, $user_id) {\n        $this->db = $db;\n        $this->user_id = $user_id;\n    }\n\n    // Add item to cart\n    public function addItem($product_id, $quantity = 1) {\n        $query = \"INSERT INTO cart (user_id, product_id, quantity)\n                VALUES (?, ?, ?)\n                ON DUPLICATE KEY UPDATE quantity = quantity + ?\";\n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([$this->user_id, $product_id, $quantity, $quantity]);\n    }\n\n    // Get cart items\n    public function getCartItems() {\n        $query = \"SELECT c.*, p.* FROM cart c \n                JOIN products p ON c.product_id = p.id \n                WHERE c.user_id = ?\";\n        $stmt = $this->db->prepare($query);\n        $stmt->execute([$this->user_id]);\n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    }\n\n    // Update quantity\n    public function updateQuantity($cart_id, $quantity) {\n        $query = \"UPDATE cart SET quantity = ?, updated_at = CURRENT_TIMESTAMP \n                WHERE id = ?\";\n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([$quantity, $cart_id]);\n    }\n\n    // Remove item from cart\n    public function removeItem($cart_id) {\n        $query = \"DELETE FROM cart WHERE id = ?\";\n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([$cart_id]);\n    }\n\n    // Calculate total price\n    public function calculateTotal() {\n        $query = \"SELECT SUM(p.price * c.quantity) as total \n                FROM cart c JOIN products p ON c.product_id = p.id \n                WHERE c.user_id = ?\";\n        $stmt = $this->db->prepare($query);\n        $stmt->execute([$this->user_id]);\n        return $stmt->fetch(PDO::FETCH_ASSOC)['total'];\n    }\n\n    // Checkout\n    public function checkout() {\n        // Here you would typically insert into an orders table\n        // and then empty the cart\n        $this->emptyCart();\n        return true;\n    }\n\n    // Empty cart\n    private function emptyCart() {\n        $query = \"DELETE FROM cart WHERE user_id = ?\";\n        $stmt = $this->db->prepare($query);\n        $stmt->execute([$this->user_id]);\n    }\n}\n```", "```php\nclass UserAuth {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Register user\n    public function register($username, $password) {\n        $query = \"INSERT INTO users (username, password)\n                VALUES (?, ?)\";\n        $stmt = $this->db->prepare($query);\n        return $stmt->execute([$username, md5($password)]);\n    }\n\n    // Login user\n    public function login($username, $password) {\n        $query = \"SELECT * FROM users WHERE username = ? AND password = ?\";\n        $stmt = $this->db->prepare($query);\n        $stmt->execute([$username, md5($password)]);\n        return $stmt->fetch(PDO::FETCH_ASSOC);\n    }\n\n    // Check if user is logged in\n    public function isLoggedIn() {\n        return isset($_SESSION['user_id']);\n    }\n\n    // Logout user\n    public function logout() {\n        session_unset();\n        session_destroy();\n    }\n}\n```", "```php\n<?php\nrequire_once 'database.php';\nrequire_once 'Product.php';\n\n$product = new Product($db);\n\n// Get all products\n$products = $product->getAllProducts();\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart - Products</title>\n</head>\n<body>\n    <h1>Available Products</h1>\n    \n    <?php foreach ($products as $product): ?>\n        <div class=\"product\">\n            <img src=\"<?php echo $product['image_path']; ?>\" alt=\"<?php echo $product['name']; ?>\">\n            <h2><?php echo $product['name']; ?></h2>\n            <p><?php echo $product['description']; ?></p>\n            <p>Price: $<?php echo number_format($product['price'], 2); ?></p>\n            <form action=\"cart.php\" method=\"post\">\n                <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product['id']; ?>\">\n                <button type=\"submit\">Add to Cart</button>\n            </form>\n        </div>\n    <?php endforeach; ?>\n\n    <!-- Add your own styling and layout -->\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\nrequire_once 'database.php';\nrequire_once 'Cart.php';\n\nif (!isset($_SESSION['user_id'])) {\n    header('Location: login.php');\n    exit;\n}\n\n$cart = new Cart($db, $_SESSION['user_id']);\n\n// Handle form submissions\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    if (isset($_POST['add_to_cart'])) {\n        $product_id = intval($_POST['product_id']);\n        $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1;\n        $cart->addItem($product_id, $quantity);\n    } elseif (isset($_POST['update_quantity'])) {\n        foreach ($_POST['quantity'] as $cart_id => $qty) {\n            $cart->updateQuantity($cart_id, intval($qty));\n        }\n    } elseif (isset($_POST['remove_item'])) {\n        $cart->removeItem(intval($_POST['item_id']));\n    } elseif (isset($_POST['checkout'])) {\n        $cart->checkout();\n        header('Location: products.php');\n        exit;\n    }\n}\n\n$items = $cart->getCartItems();\n$total = $cart->calculateTotal();\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n</head>\n<body>\n    <h1>Your Shopping Cart</h1>\n    \n    <?php if (!empty($items)): ?>\n        <form action=\"cart.php\" method=\"post\">\n            <table>\n                <thead>\n                    <tr>\n                        <th>Product</th>\n                        <th>Quantity</th>\n                        <th>Price</th>\n                        <th>Total</th>\n                        <th>Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <?php foreach ($items as $item): ?>\n                        <tr>\n                            <td><?php echo $item['name']; ?></td>\n                            <td>\n                                <input type=\"number\" name=\"quantity[<?php echo $item['id']; ?>]\" \n                                       value=\"<?php echo $item['quantity']; ?>\" min=\"1\">\n                            </td>\n                            <td>$<?php echo number_format($item['price'], 2); ?></td>\n                            <td>$<?php echo number_format($item['price'] * $item['quantity'], 2); ?></td>\n                            <td>\n                                <input type=\"hidden\" name=\"remove_item_id\" value=\"<?php echo $item['id']; ?>\">\n                                <button type=\"submit\" name=\"remove_item\">Remove</button>\n                            </td>\n                        </tr>\n                    <?php endforeach; ?>\n                </tbody>\n            </table>\n            \n            <div class=\"cart-total\">\n                <h3>Total: $<?php echo number_format($total, 2); ?></h3>\n                <input type=\"submit\" name=\"update_quantity\" value=\"Update Cart\">\n                <input type=\"submit\" name=\"checkout\" value=\"Checkout\">\n            </div>\n        </form>\n    <?php else: ?>\n        <p>Your cart is empty!</p>\n    <?php endif; ?>\n\n    <a href=\"products.php\">Continue Shopping</a>\n</body>\n</html>\n```", "```php\n<?php\ntry {\n    $db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Database connection failed: \" . $e->getMessage());\n}\n?>\n```", "```php\n// login.php\n<?php\nsession_start();\nrequire_once 'database.php';\nrequire_once 'UserAuth.php';\n\n$user_auth = new UserAuth($db);\n\nif ($user_auth->isLoggedIn()) {\n    header('Location: products.php');\n    exit;\n}\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    if (isset($_POST['login'])) {\n        $user = $user_auth->login($_POST['username'], $_POST['password']);\n        if ($user) {\n            $_SESSION['user_id'] = $user['id'];\n            header('Location: products.php');\n            exit;\n        } else {\n            $error = \"Invalid username or password\";\n        }\n    } elseif (isset($_POST['register'])) {\n        $user_auth->register($_POST['username'], $_POST['password']);\n        header('Location: login.php');\n        exit;\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <?php if (!empty($error)): ?>\n        <div class=\"error\"><?php echo $error; ?></div>\n    <?php endif; ?>\n\n    <h1>Login</h1>\n    <form action=\"\" method=\"post\">\n        <input type=\"text\" name=\"username\" placeholder=\"Username\" required>\n        <input type=\"password\" name=\"password\" placeholder=\"Password\" required>\n        <button type=\"submit\" name=\"login\">Login</button>\n    </form>\n\n    <p>Don't have an account? <a href=\"?action=register\">Register here</a></p>\n\n    <?php if (isset($_GET['action']) && $_GET['action'] == 'register'): ?>\n        <h1>Register</h1>\n        <form action=\"\" method=\"post\">\n            <input type=\"text\" name=\"username\" placeholder=\"Username\" required>\n            <input type=\"password\" name=\"password\" placeholder=\"Password\" required>\n            <button type=\"submit\" name=\"register\">Register</button>\n        </form>\n    <?php endif; ?>\n</body>\n</html>\n```", "```php\n// logout.php\n<?php\nsession_start();\nrequire_once 'UserAuth.php';\n\n$user_auth = new UserAuth($db);\n$user_auth->logout();\n\nheader('Location: login.php');\nexit;\n?>\n```"]}
