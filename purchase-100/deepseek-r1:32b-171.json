{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, the user wants to create a purchase functionality using PHP. I need to figure out how to approach this step by step.\n\nFirst, I should outline the main components required for a basic purchasing system. That would include displaying products, allowing users to add them to a cart, updating quantities, and handling checkout with payment processing.\n\nI'll start by setting up a database connection. Using MySQLi is good because it's secure and widely used. I'll need tables for products and orders. The product table should have ID, name, price, and description fields. The order table will track each purchase with details like user info, total amount, payment method, and timestamps.\n\nNext, I'll create a class called PurchaseHandler to encapsulate the functionality. This makes it organized and easier to manage. The constructor will take database credentials and establish a connection.\n\nFor displaying products, I'll write a method in the class that fetches all products from the database and returns them as an array. Then, in the HTML, loop through this array to display each product with its details and an \"Add to Cart\" button.\n\nThe add to cart functionality will use sessions to store selected items. When a user clicks \"Add to Cart,\" it should update the session data. If the item is already in the cart, increment the quantity; otherwise, add it with a quantity of one.\n\nUpdating quantities in the cart is straightforward. I'll check if the new quantity is positive and then update the session array accordingly.\n\nHandling checkout involves processing the payment information. The method will first validate that there are items in the cart. Then, it inserts an order into the orders table with user details and total amount. After a successful payment simulation (since we're not integrating actual payment gateways here), it redirects to a success page or handles failure.\n\nFinally, I'll create a thank you page that confirms the purchase and displays the order details. This includes showing the product names, quantities, prices, and totals.\n\nIn the provided code, I included a basic example of how these methods interact. The index.php fetches products and initializes the PurchaseHandler. The cart functionality uses sessions to keep track of items. The checkout method simulates payment processing, which in a real-world scenario would integrate with services like Stripe or PayPal.\n\nI should also mention that this is a simplified version. In a production environment, additional features like user authentication, secure payment gateways, order tracking, and error handling are necessary for security and functionality.\n</think>\n\nHere's an example of how to create purchase functionality using PHP:\n\n```php\n<?php\nsession_start();\nrequire_once 'db_connection.php';\n\nclass PurchaseHandler {\n    private $conn;\n\n    public function __construct($host, $username, $password, $dbname) {\n        $this->conn = new mysqli($host, $username, $password, $dbname);\n        if ($this->conn->connect_error) {\n            die(\"Connection failed: \" . $this->conn->connect_error);\n        }\n    }\n\n    // Display products\n    public function getProducts() {\n        $sql = \"SELECT * FROM products\";\n        $result = $this->conn->query($sql);\n        \n        if ($result->num_rows > 0) {\n            return $result;\n        } else {\n            return false;\n        }\n    }\n\n    // Add to cart functionality\n    public function addToCart($product_id, $quantity) {\n        if (!isset($_SESSION['cart'])) {\n            $_SESSION['cart'] = array();\n        }\n        \n        if (isset($_SESSION['cart'][$product_id])) {\n            $_SESSION['cart'][$product_id] += $quantity;\n        } else {\n            $_SESSION['cart'][$product_id] = $quantity;\n        }\n    }\n\n    // Update cart quantity\n    public function updateCart($product_id, $new_quantity) {\n        if ($new_quantity > 0) {\n            $_SESSION['cart'][$product_id] = $new_quantity;\n        } else {\n            unset($_SESSION['cart'][$product_id]);\n        }\n    }\n\n    // Checkout functionality\n    public function checkout($user_info, $payment_method) {\n        if (empty($_SESSION['cart'])) {\n            return false; // Empty cart\n        }\n\n        // Calculate total amount\n        $total_amount = 0;\n        foreach ($_SESSION['cart'] as $product_id => $quantity) {\n            $sql = \"SELECT price FROM products WHERE id = ?\";\n            $stmt = $this->conn->prepare($sql);\n            $stmt->bind_param(\"i\", $product_id);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            if ($row = $result->fetch_assoc()) {\n                $total_amount += $row['price'] * $quantity;\n            }\n        }\n\n        // Insert order into database\n        $sql = \"INSERT INTO orders (user_name, email, phone, total_amount, payment_method)\n                VALUES (?, ?, ?, ?, ?)\";\n        $stmt = $this->conn->prepare($sql);\n        $stmt->bind_param(\"sssd\", $user_info['name'], $user_info['email'], $user_info['phone'], $total_amount, $payment_method);\n\n        if ($stmt->execute()) {\n            // Clear cart\n            unset($_SESSION['cart']);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Get order details by ID\n    public function getOrderDetails($order_id) {\n        $sql = \"SELECT * FROM orders WHERE id = ?\";\n        $stmt = $this->conn->prepare($sql);\n        $stmt->bind_param(\"i\", $order_id);\n        $stmt->execute();\n        return $stmt->get_result()->fetch_assoc();\n    }\n}\n\n// Initialize purchase handler\n$purchaseHandler = new PurchaseHandler(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\n// Display products\n$products = $purchaseHandler->getProducts();\n\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Purchase System</title>\n    <style>\n        body { font-family: Arial, sans-serif; }\n        .product-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; padding: 20px; }\n        .product-card { border: 1px solid #ddd; padding: 15px; text-align: center; }\n        button { padding: 8px 16px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }\n    </style>\n</head>\n<body>\n    <h2>Products</h2>\n    <div class=\"product-grid\">\n        <?php while ($row = $products->fetch_assoc()): ?>\n            <div class=\"product-card\">\n                <h3><?php echo $row['name']; ?></h3>\n                <p>Price: $<?php echo number_format($row['price'], 2); ?></p>\n                <p>Description: <?php echo $row['description']; ?></p>\n                <form action=\"cart.php\" method=\"post\">\n                    <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $row['id']; ?>\">\n                    <button type=\"submit\">Add to Cart</button>\n                </form>\n            </div>\n        <?php endwhile; ?>\n    </div>\n\n    <h2>Your Cart</h2>\n    <?php if (!empty($_SESSION['cart'])): ?>\n        <table border=\"1\">\n            <tr><th>Product ID</th><th>Quantity</th><th>Action</th></tr>\n            <?php foreach ($_SESSION['cart'] as $product_id => $quantity): ?>\n                <tr>\n                    <td><?php echo $product_id; ?></td>\n                    <td><?php echo $quantity; ?></td>\n                    <td>\n                        <form action=\"update_cart.php\" method=\"post\">\n                            <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product_id; ?>\">\n                            <input type=\"number\" name=\"new_quantity\" min=\"1\" value=\"<?php echo $quantity; ?>\">\n                            <button type=\"submit\">Update</button>\n                        </form>\n                    </td>\n                </tr>\n            <?php endforeach; ?>\n        </table>\n    <?php else: ?>\n        <p>Your cart is empty.</p>\n    <?php endif; ?>\n\n    <h2>Checkout</h2>\n    <form action=\"checkout.php\" method=\"post\">\n        <input type=\"text\" name=\"name\" placeholder=\"Name\" required><br>\n        <input type=\"email\" name=\"email\" placeholder=\"Email\" required><br>\n        <input type=\"tel\" name=\"phone\" placeholder=\"Phone Number\" required><br>\n        <select name=\"payment_method\">\n            <option value=\"credit_card\">Credit Card</option>\n            <option value=\"paypal\">PayPal</option>\n        </select><br>\n        <button type=\"submit\">Place Order</button>\n    </form>\n\n    <?php\n    // Check if payment was successful\n    if (isset($_GET['order_id'])) {\n        $order = $purchaseHandler->getOrderDetails($_GET['order_id']);\n        echo \"<h2>Thank you for your purchase!</h2>\";\n        echo \"<p>Your order details:</p>\";\n        echo \"<p>Name: \" . $order['user_name'] . \"</p>\";\n        echo \"<p>Email: \" . $order['email'] . \"</p>\";\n        echo \"<p>Total Amount: $\" . number_format($order['total_amount'], 2) . \"</p>\";\n    }\n    ?>\n</body>\n</html>\n```\n\nThis code provides a basic purchasing system with the following features:\n\n1. Product display\n2. Add to cart functionality\n3. Cart management (add, update, remove items)\n4. Checkout process with payment information\n5. Order confirmation\n\nTo use this system:\n\n1. Create a database with two tables:\n   - products: id, name, price, description\n   - orders: id, user_name, email, phone, total_amount, payment_method, order_date\n\n2. Modify the db_connection.php file with your database credentials.\n\n3. Add some test products to your database.\n\n4. The system will handle:\n   - Displaying products in a grid layout\n   - Adding items to cart (stored in session)\n   - Updating quantities in cart\n   - Checkout process that stores order information in the database\n   - Order confirmation page with details\n\nTo expand this system, you could add:\n\n1. User authentication and registration\n2. More payment gateways (Stripe, PayPal, etc.)\n3. Order tracking and history\n4. Product reviews and ratings\n5. Search and filtering functionality\n6. Admin panel for managing products and orders\n7. Email notifications for orders\n\nRemember to secure your code by:\n- Sanitizing inputs\n- Using prepared statements\n- Implementing proper error handling\n- Securing sensitive data\n- Using HTTPS for payment processing", "code_blocks": ["```php\n<?php\nsession_start();\nrequire_once 'db_connection.php';\n\nclass PurchaseHandler {\n    private $conn;\n\n    public function __construct($host, $username, $password, $dbname) {\n        $this->conn = new mysqli($host, $username, $password, $dbname);\n        if ($this->conn->connect_error) {\n            die(\"Connection failed: \" . $this->conn->connect_error);\n        }\n    }\n\n    // Display products\n    public function getProducts() {\n        $sql = \"SELECT * FROM products\";\n        $result = $this->conn->query($sql);\n        \n        if ($result->num_rows > 0) {\n            return $result;\n        } else {\n            return false;\n        }\n    }\n\n    // Add to cart functionality\n    public function addToCart($product_id, $quantity) {\n        if (!isset($_SESSION['cart'])) {\n            $_SESSION['cart'] = array();\n        }\n        \n        if (isset($_SESSION['cart'][$product_id])) {\n            $_SESSION['cart'][$product_id] += $quantity;\n        } else {\n            $_SESSION['cart'][$product_id] = $quantity;\n        }\n    }\n\n    // Update cart quantity\n    public function updateCart($product_id, $new_quantity) {\n        if ($new_quantity > 0) {\n            $_SESSION['cart'][$product_id] = $new_quantity;\n        } else {\n            unset($_SESSION['cart'][$product_id]);\n        }\n    }\n\n    // Checkout functionality\n    public function checkout($user_info, $payment_method) {\n        if (empty($_SESSION['cart'])) {\n            return false; // Empty cart\n        }\n\n        // Calculate total amount\n        $total_amount = 0;\n        foreach ($_SESSION['cart'] as $product_id => $quantity) {\n            $sql = \"SELECT price FROM products WHERE id = ?\";\n            $stmt = $this->conn->prepare($sql);\n            $stmt->bind_param(\"i\", $product_id);\n            $stmt->execute();\n            $result = $stmt->get_result();\n\n            if ($row = $result->fetch_assoc()) {\n                $total_amount += $row['price'] * $quantity;\n            }\n        }\n\n        // Insert order into database\n        $sql = \"INSERT INTO orders (user_name, email, phone, total_amount, payment_method)\n                VALUES (?, ?, ?, ?, ?)\";\n        $stmt = $this->conn->prepare($sql);\n        $stmt->bind_param(\"sssd\", $user_info['name'], $user_info['email'], $user_info['phone'], $total_amount, $payment_method);\n\n        if ($stmt->execute()) {\n            // Clear cart\n            unset($_SESSION['cart']);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Get order details by ID\n    public function getOrderDetails($order_id) {\n        $sql = \"SELECT * FROM orders WHERE id = ?\";\n        $stmt = $this->conn->prepare($sql);\n        $stmt->bind_param(\"i\", $order_id);\n        $stmt->execute();\n        return $stmt->get_result()->fetch_assoc();\n    }\n}\n\n// Initialize purchase handler\n$purchaseHandler = new PurchaseHandler(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\n// Display products\n$products = $purchaseHandler->getProducts();\n\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Purchase System</title>\n    <style>\n        body { font-family: Arial, sans-serif; }\n        .product-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; padding: 20px; }\n        .product-card { border: 1px solid #ddd; padding: 15px; text-align: center; }\n        button { padding: 8px 16px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }\n    </style>\n</head>\n<body>\n    <h2>Products</h2>\n    <div class=\"product-grid\">\n        <?php while ($row = $products->fetch_assoc()): ?>\n            <div class=\"product-card\">\n                <h3><?php echo $row['name']; ?></h3>\n                <p>Price: $<?php echo number_format($row['price'], 2); ?></p>\n                <p>Description: <?php echo $row['description']; ?></p>\n                <form action=\"cart.php\" method=\"post\">\n                    <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $row['id']; ?>\">\n                    <button type=\"submit\">Add to Cart</button>\n                </form>\n            </div>\n        <?php endwhile; ?>\n    </div>\n\n    <h2>Your Cart</h2>\n    <?php if (!empty($_SESSION['cart'])): ?>\n        <table border=\"1\">\n            <tr><th>Product ID</th><th>Quantity</th><th>Action</th></tr>\n            <?php foreach ($_SESSION['cart'] as $product_id => $quantity): ?>\n                <tr>\n                    <td><?php echo $product_id; ?></td>\n                    <td><?php echo $quantity; ?></td>\n                    <td>\n                        <form action=\"update_cart.php\" method=\"post\">\n                            <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product_id; ?>\">\n                            <input type=\"number\" name=\"new_quantity\" min=\"1\" value=\"<?php echo $quantity; ?>\">\n                            <button type=\"submit\">Update</button>\n                        </form>\n                    </td>\n                </tr>\n            <?php endforeach; ?>\n        </table>\n    <?php else: ?>\n        <p>Your cart is empty.</p>\n    <?php endif; ?>\n\n    <h2>Checkout</h2>\n    <form action=\"checkout.php\" method=\"post\">\n        <input type=\"text\" name=\"name\" placeholder=\"Name\" required><br>\n        <input type=\"email\" name=\"email\" placeholder=\"Email\" required><br>\n        <input type=\"tel\" name=\"phone\" placeholder=\"Phone Number\" required><br>\n        <select name=\"payment_method\">\n            <option value=\"credit_card\">Credit Card</option>\n            <option value=\"paypal\">PayPal</option>\n        </select><br>\n        <button type=\"submit\">Place Order</button>\n    </form>\n\n    <?php\n    // Check if payment was successful\n    if (isset($_GET['order_id'])) {\n        $order = $purchaseHandler->getOrderDetails($_GET['order_id']);\n        echo \"<h2>Thank you for your purchase!</h2>\";\n        echo \"<p>Your order details:</p>\";\n        echo \"<p>Name: \" . $order['user_name'] . \"</p>\";\n        echo \"<p>Email: \" . $order['email'] . \"</p>\";\n        echo \"<p>Total Amount: $\" . number_format($order['total_amount'], 2) . \"</p>\";\n    }\n    ?>\n</body>\n</html>\n```"]}
