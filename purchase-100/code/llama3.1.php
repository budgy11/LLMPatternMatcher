
<?php
// Initialize session
session_start();

// Check if cart is already in session, otherwise initialize it as an empty array
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Add item to cart
function add_item_to_cart($product_id) {
    global $_SESSION;
    $exists = false;
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $product_id) {
            $item['quantity']++;
            $exists = true;
            break;
        }
    }
    if (!$exists) {
        $_SESSION['cart'][] = array('id' => $product_id, 'name' => '', 'price' => 0, 'quantity' => 1);
    }
}

// Remove item from cart
function remove_item_from_cart($product_id) {
    global $_SESSION;
    foreach ($_SESSION['cart'] as $key => &$item) {
        if ($item['id'] == $product_id) {
            unset($_SESSION['cart'][$key]);
            break;
        }
    }
}

// Update quantity of item in cart
function update_item_quantity($product_id, $quantity) {
    global $_SESSION;
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $product_id) {
            $item['quantity'] = $quantity;
            break;
        }
    }
}

// Display cart contents
function display_cart() {
    global $_SESSION;
    echo '<table>';
    echo '<tr><th>Product</th><th>Price</th><th>Quantity</th><th>Total</th></tr>';
    foreach ($_SESSION['cart'] as $item) {
        echo '<tr>';
        echo '<td>' . $item['name'] . '</td>';
        echo '<td>$' . number_format($item['price'], 2) . '</td>';
        echo '<td>' . $item['quantity'] . '</td>';
        echo '<td>$' . number_format($item['quantity'] * $item['price'], 2) . '</td>';
        echo '</tr>';
    }
    echo '</table>';
}

// Calculate total cart value
function calculate_cart_total() {
    global $_SESSION;
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['quantity'] * $item['price'];
    }
    return number_format($total, 2);
}
?>


<?php include 'cart.php'; ?>

<!-- Assume we have a products array with product info -->
$products = array(
    array('id' => 1, 'name' => 'Product A', 'price' => 9.99),
    array('id' => 2, 'name' => 'Product B', 'price' => 19.99),
    // ...
);

// Display products
echo '<h1>Products</h1>';
foreach ($products as $product) {
    echo '<p><a href="#" onclick="add_item_to_cart(' . $product['id'] . ')">' . $product['name'] . '</a> - $' . number_format($product['price'], 2) . '</p>';
}

// Display cart
echo '<h1>Cart</h1>';
display_cart();

// Display total
echo '<p>Total: $' . calculate_cart_total() . '</p>';

?>


<?php
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

$dsn = "mysql:host=$host;dbname=$dbname";

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

?>


<?php
class User {
    private $id;
    private $name;
    private $email;

    public function __construct($id = null, $name = null, $email = null) {
        if ($id !== null) {
            $this->id = $id;
            $this->name = $name;
            $this->email = $email;
        }
    }

    public static function login($username, $password) {
        global $pdo;

        $stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email AND password = :password');
        $stmt->bindParam(':email', $username);
        $stmt->bindParam(':password', $password);

        $stmt->execute();

        if ($stmt->rowCount() > 0) {
            return new User($stmt->fetch()['id'], $stmt->fetch()['name'], $stmt->fetch()['email']);
        } else {
            throw new Exception('Invalid username or password');
        }
    }

    public function isloggedin() {
        return !empty($this->id);
    }
}
?>


<?php
class Product {
    private $id;
    private $name;
    private $price;

    public function __construct($id = null, $name = null, $price = null) {
        if ($id !== null) {
            $this->id = $id;
            $this->name = $name;
            $this->price = $price;
        }
    }

    public static function all() {
        global $pdo;

        $stmt = $pdo->query('SELECT * FROM products');

        return array_map(function ($row) {
            return new Product($row['id'], $row['name'], $row['price']);
        }, $stmt->fetchAll());
    }
}
?>


<?php
class Cart {
    private $user_id;

    public function __construct($user_id = null) {
        if ($user_id !== null) {
            $this->user_id = $user_id;
        }
    }

    public static function add_item($product_id, $quantity) {
        global $pdo;

        $stmt = $pdo->prepare('INSERT INTO cart (user_id, product_id, quantity) VALUES (:user_id, :product_id, :quantity)');
        $stmt->bindParam(':user_id', self::get_user_id());
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':quantity', $quantity);

        $stmt->execute();
    }

    public static function get_cart() {
        global $pdo;

        $stmt = $pdo->prepare('SELECT * FROM cart WHERE user_id = :user_id');
        $stmt->bindParam(':user_id', self::get_user_id());

        $stmt->execute();

        return $stmt->fetchAll();
    }

    private static function get_user_id() {
        if (!isset($_SESSION['user'])) {
            throw new Exception('User not logged in');
        }
        return $_SESSION['user']->id;
    }
}
?>


<?php
class Payment {
    public static function make_payment($cart_items) {
        // This is a very basic implementation of payment processing.
        // You should replace this with your own payment gateway integration.

        $total_amount = 0;

        foreach ($cart_items as $item) {
            $total_amount += $item['product_id']->price * $item['quantity'];
        }

        echo "Total amount: $" . number_format($total_amount, 2);
    }
}
?>


<?php
require 'config.php';
require 'user.php';
require 'cart.php';

if (!isset($_SESSION['user'])) {
    // Redirect to login page
}

// Display products and add items to cart
$products = Product::all();
?>

<h1>Products</h1>

<ul>
    <?php foreach ($products as $product) { ?>
        <li>
            <?php echo $product->name; ?> - $<?php echo number_format($product->price, 2); ?>
            <button onclick="add_item(<?php echo $product->id; ?>)">Add to cart</button>
        </li>
    <?php } ?>
</ul>

<script>
function add_item(product_id) {
    const quantity = prompt("Enter quantity:");
    Cart.add_item(product_id, parseInt(quantity));
}
</script>


<?php
require 'config.php';
require 'user.php';
require 'cart.php';

if (!isset($_SESSION['user'])) {
    // Redirect to login page
}

// Display cart items and checkout button
$cart_items = Cart::get_cart();

?>

<h1>Cart</h1>

<ul>
    <?php foreach ($cart_items as $item) { ?>
        <li>
            <?php echo $item['product_id']->name; ?> x<?php echo $item['quantity']; ?> - $<?php echo number_format($item['product_id']->price * $item['quantity'], 2); ?>
        </li>
    <?php } ?>
</ul>

<button onclick="checkout()">Checkout</button>

<script>
function checkout() {
    const cart_items = Cart.get_cart();
    Payment.make_payment(cart_items);
}
</script>


<?php
require 'config.php';

// This is a very basic implementation of payment processing.
// You should replace this with your own payment gateway integration.

// For example, you can use Stripe to process payments

?>


// auth.php

<?php
if (!isset($_SESSION['user_id'])) {
  // redirect to login page if not logged in
  header('Location: login.php');
}

// load user data from database
$user = $_SESSION['user'];

function authenticate($username, $password) {
  global $db;
  $query = "SELECT * FROM users WHERE username = '$username'";
  $result = mysqli_query($db, $query);
  if (mysqli_num_rows($result) == 1) {
    // user exists, check password
    $user_data = mysqli_fetch_assoc($result);
    if ($password === $user_data['password']) {
      return true;
    }
  }
  return false;
}

function login($username, $password) {
  global $db;
  if (authenticate($username, $password)) {
    // authenticate successful, set session variables
    $_SESSION['user_id'] = $user_data['id'];
    $_SESSION['username'] = $username;
    header('Location: index.php');
  } else {
    echo "Invalid username or password";
  }
}

function register($username, $email, $password) {
  global $db;
  // hash password before storing in database
  $hashed_password = password_hash($password, PASSWORD_DEFAULT);
  $query = "INSERT INTO users (username, email, password) VALUES ('$username', '$email', '$hashed_password')";
  mysqli_query($db, $query);
}


// cart.php

<?php
if (!isset($_SESSION['user_id'])) {
  // redirect to login page if not logged in
  header('Location: login.php');
}

// load product data from database
$product_query = "SELECT * FROM products";
$product_result = mysqli_query($db, $product_query);
$product_list = array();
while ($product_row = mysqli_fetch_assoc($product_result)) {
  $product_list[] = $product_row;
}

function add_to_cart($product_id) {
  global $cart;
  // check if product is already in cart
  foreach ($cart as &$item) {
    if ($item['id'] == $product_id) {
      // increment quantity
      $item['quantity']++;
      return true;
    }
  }
  // add new item to cart
  $new_item = array(
    'id' => $product_id,
    'name' => '',
    'price' => '',
    'quantity' => 1
  );
  $cart[] = $new_item;
}

function view_cart() {
  global $cart;
  // print out contents of cart
  foreach ($cart as &$item) {
    echo "Product: {$item['name']} ({$item['price']}) x {$item['quantity']}<br>";
  }
}

// add items to cart based on form submission
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // check if user has submitted a product ID
  $product_id = $_POST['product_id'];
  add_to_cart($product_id);
}


// checkout.php

<?php
if (!isset($_SESSION['user_id'])) {
  // redirect to login page if not logged in
  header('Location: login.php');
}

// load cart contents and calculate total
$cart_query = "SELECT * FROM products WHERE id IN (".implode(',', array_column($cart, 'id')).")";
$cart_result = mysqli_query($db, $cart_query);
$cart_list = array();
while ($row = mysqli_fetch_assoc($cart_result)) {
  foreach ($cart as &$item) {
    if ($item['id'] == $row['id']) {
      $item['name'] = $row['name'];
      $item['price'] = $row['price'];
    }
  }
}

function calculate_total() {
  global $cart;
  // calculate total cost
  $total = 0;
  foreach ($cart as &$item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// process payment and update database
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // check if user has submitted payment information
  $payment_method = $_POST['payment_method'];
  $payment_details = $_POST['payment_details'];
  
  // create new order in database
  $order_query = "INSERT INTO orders (user_id, total) VALUES ({$_SESSION['user_id']}, '{$total}')";
  mysqli_query($db, $order_query);
  
  // add items to order in database
  foreach ($cart as &$item) {
    $order_item_query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ((SELECT MAX(id) FROM orders), {$item['id']}, {$item['quantity']})";
    mysqli_query($db, $order_item_query);
  }
  
  // update cart contents
  $cart = array();
}


// index.php

<form action="cart.php" method="post">
  <input type="hidden" name="product_id" value="123">
  <button type="submit">Add to Cart</button>
</form>


// cart.php

echo "Your Cart:<br>";
view_cart();


// checkout.php

<form action="checkout.php" method="post">
  <input type="hidden" name="payment_method" value="paypal">
  <input type="text" name="payment_details" placeholder="Payment Details...">
  <button type="submit">Submit Payment</button>
</form>


// checkout.php

$order_query = "INSERT INTO orders (user_id, total) VALUES ({$_SESSION['user_id']}, '{$total}')";
mysqli_query($db, $order_query);


<?php
// Configuration file with database connection settings
require_once 'config.php';

// Check if form has been submitted
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Extract form data
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Validate input
    if (!isset($product_id) || !isset($quantity)) {
        die('Invalid product or quantity');
    }

    // Check product availability and calculate price
    $sql = "SELECT * FROM products WHERE id = '$product_id'";
    $result = mysqli_query($conn, $sql);
    if (!$result) {
        die("Error fetching product data");
    }
    $product = mysqli_fetch_assoc($result);

    if ($quantity > $product['stock']) {
        echo 'Insufficient stock';
        exit;
    }

    // Calculate total price
    $price = $product['price'] * $quantity;

    // Create a new order
    $sql = "INSERT INTO orders (user_id, product_id, quantity, total_price)
            VALUES ('$user_id', '$product_id', '$quantity', '$price')";
    if (!mysqli_query($conn, $sql)) {
        die("Error creating order");
    }

    // Update stock levels
    $new_stock = $product['stock'] - $quantity;
    $sql = "UPDATE products SET stock = '$new_stock' WHERE id = '$product_id'";
    mysqli_query($conn, $sql);

    echo 'Order created successfully!';
} else {
?>


<?php require_once 'purchase_functionality.php'; ?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>

<form action="purchase_functionality.php" method="post">
    Product ID: <input type="text" name="product_id"><br><br>
    Quantity: <input type="number" name="quantity"><br><br>
    <button type="submit">Purchase</button>
</form>

<?php if (isset($_GET['success'])) { ?>
    <p>Purchase successful!</p>
<?php } ?>

</body>
</html>


<?php

// Database connection settings
$conn = mysqli_connect('localhost', 'username', 'password', 'database');

?>


<?php
// Database connection settings
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "store";

// Create database connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check if the user has submitted the form
if (isset($_POST['buy'])) {
    // Get the product ID and quantity from the form data
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Validate the input
    if ($product_id == "" || $quantity == "") {
        echo "Please enter both product ID and quantity";
        exit;
    }

    // Query to select the product details from the database
    $sql = "SELECT * FROM products WHERE id = '$product_id'";
    $result = mysqli_query($conn, $sql);

    // Check if the product exists in the database
    if (mysqli_num_rows($result) == 0) {
        echo "Product not found";
        exit;
    }

    // Get the product details from the query result
    $row = mysqli_fetch_assoc($result);
    $product_name = $row['name'];
    $price = $row['price'];

    // Calculate the total cost
    $total_cost = $quantity * $price;

    // Query to insert a new order into the database
    $sql = "INSERT INTO orders (product_id, quantity, total_cost) VALUES ('$product_id', '$quantity', '$total_cost')";
    mysqli_query($conn, $sql);

    // Update the product stock in the database
    $sql = "UPDATE products SET stock = stock - '$quantity' WHERE id = '$product_id'";
    mysqli_query($conn, $sql);

    // Display a success message to the user
    echo "Purchase successful!";
}
?>


<?php
// Include the database connection settings from purchase.php
include 'purchase.php';

// Query to select all products from the database
$sql = "SELECT * FROM products";
$result = mysqli_query($conn, $sql);

// Display a form for each product in the result set
while ($row = mysqli_fetch_assoc($result)) {
    echo "
        <form action='' method='post'>
            <input type='hidden' name='product_id' value='{$row['id']}' />
            <label>Product Name:</label>
            <p>{$row['name']}</p>
            <label>Price:</label>
            <p>${$row['price']}</p>
            <label>Quantity:</label>
            <input type='number' name='quantity' value='1' min='1' />
            <button type='submit' name='buy'>Buy</button>
        </form>
    ";
}
?>


// Customer.php
class Customer {
  private $id;
  private $name;
  private $email;

  public function __construct($id, $name, $email) {
    $this->id = $id;
    $this->name = $name;
    $this->email = $email;
  }

  public static function findCustomerById($customerId) {
    // Retrieve customer from database using id
    // ...
    return new Customer($customerId, $customerData['name'], $customerData['email']);
  }
}

// Product.php
class Product {
  private $id;
  private $name;
  private $price;

  public function __construct($id, $name, $price) {
    $this->id = $id;
    $this->name = $name;
    $this->price = $price;
  }

  public static function findProductById($productId) {
    // Retrieve product from database using id
    // ...
    return new Product($productId, $productData['name'], $productData['price']);
  }
}

// Order.php
class Order {
  private $id;
  private $customerId;
  private $orderDate;
  private $totalCost;

  public function __construct($id, $customerId, $orderDate, $totalCost) {
    $this->id = $id;
    $this->customerId = $customerId;
    $this->orderDate = $orderDate;
    $this->totalCost = $totalCost;
  }

  public static function createOrder($customerId, $products, $quantities) {
    // Create new order in database
    // ...
    return new Order($orderId, $customerId, date('Y-m-d'), calculateTotalCost($products, $quantities));
  }
}

// OrderItem.php
class OrderItem {
  private $id;
  private $orderId;
  private $productId;
  private $quantity;

  public function __construct($id, $orderId, $productId, $quantity) {
    $this->id = $id;
    $this->orderId = $orderId;
    $this->productId = $productId;
    $this->quantity = $quantity;
  }

  public static function createOrderItem($orderId, $productId, $quantity) {
    // Create new order item in database
    // ...
    return new OrderItem($orderItemId, $orderId, $productId, $quantity);
  }
}


// PurchaseController.php
class PurchaseController {
  public function placeOrder() {
    try {
      // Retrieve customer data from database using id
      $customerId = $_POST['customer_id'];
      $customer = Customer::findCustomerById($customerId);

      // Retrieve product data from database using ids
      $productIds = explode(',', $_POST['product_ids']);
      $products = array();
      foreach ($productIds as $productId) {
        $products[] = Product::findProductById($productId);
      }

      // Create new order and add order items to it
      $order = Order::createOrder($customerId, $products, explode(',', $_POST['quantities']));
      foreach ($products as $index => $product) {
        $orderItem = OrderItem::createOrderItem($order->getId(), $product->getId(), $_POST['quantities'][$index]);
      }

      // Update order status to "pending"
      // ...

      return array('success' => true, 'message' => 'Order placed successfully');
    } catch (Exception $e) {
      return array('success' => false, 'message' => $e->getMessage());
    }
  }
}


// routes.php
$app->post('/place-order', 'PurchaseController:placeOrder');


<?php
// Check if the cart is empty
if (empty($_SESSION['cart'])) {
    echo "Your cart is empty.";
} else {
    // Display cart contents
    echo "<h2>Your Cart</h2>";
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $product_name = $item['name'];
        $quantity = $item['quantity'];
        $price = $item['price'];
        echo "$product_name x $quantity = \$$price<br>";
        $total += ($price * $quantity);
    }
    echo "Total: \$$total";
}
?>


<?php
// Get the product ID and quantity from the form data
$product_id = $_POST['product_id'];
$quantity = $_POST['quantity'];

// Check if the product exists in the database
$result = mysql_query("SELECT * FROM products WHERE id='$product_id'");
if (mysql_num_rows($result) > 0) {
    // Get the product details from the database
    $row = mysql_fetch_array($result);
    $product_name = $row['name'];
    $price = $row['price'];

    // Check if the quantity is valid
    if ($quantity <= 0) {
        echo "Invalid quantity.";
    } else {
        // Add the product to the cart
        $_SESSION['cart'][] = array('name' => $product_name, 'quantity' => $quantity, 'price' => $price);

        // Redirect back to the cart page
        header("Location: cart.php");
        exit;
    }
} else {
    echo "Product not found.";
}
?>


<?php
// Get the product ID from the form data
$product_id = $_POST['product_id'];

// Check if the product exists in the cart
foreach ($_SESSION['cart'] as $key => $item) {
    if ($item['id'] == $product_id) {
        // Remove the product from the cart
        unset($_SESSION['cart'][$key]);
        break;
    }
}

// Redirect back to the cart page
header("Location: cart.php");
exit;
?>


<?php
// Get the customer details from the form data
$customer_name = $_POST['customer_name'];
$customer_email = $_POST['customer_email'];

// Check if the customer details are valid
if (!empty($customer_name) && !empty($customer_email)) {
    // Process the payment (e.g. using PayPal)
    $payment_status = "paid";

    // Update the order status in the database
    mysql_query("INSERT INTO orders (customer_name, customer_email, total_amount, status) VALUES ('$customer_name', '$customer_email', '$total', '$payment_status')");

    // Clear the cart and redirect to a success page
    unset($_SESSION['cart']);
    header("Location: success.php");
} else {
    echo "Invalid customer details.";
}
?>


Route::get('/login', 'LoginController@index');
Route::post('/login', 'LoginController@login');

Route::get('/register', 'RegisterController@index');
Route::post('/register', 'RegisterController@register');

Route::get('/products', 'ProductController@index');
Route::get('/products/{id}', 'ProductController@show');

Route::get('/cart', 'CartController@index');
Route::post('/cart', 'CartController@add');

Route::post('/checkout', 'CheckoutController@store');


namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\User;

class LoginController extends Controller
{
    public function index()
    {
        return view('login');
    }

    public function login(Request $request)
    {
        $credentials = $request->only(['username', 'password']);

        if (!auth()->attempt($credentials)) {
            return redirect('/login')->withErrors(['Invalid username or password']);
        }

        return redirect('/');
    }
}


namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\User;

class RegisterController extends Controller
{
    public function index()
    {
        return view('register');
    }

    public function register(Request $request)
    {
        User::create($request->all());

        return redirect('/');
    }
}


namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Product;

class ProductController extends Controller
{
    public function index()
    {
        $products = Product::all();

        return view('products', compact('products'));
    }

    public function show($id)
    {
        $product = Product::find($id);

        return view('product', compact('product'));
    }
}


namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Order;

class CartController extends Controller
{
    public function index()
    {
        $orders = Order::where('user_id', auth()->id())->get();

        return view('cart', compact('orders'));
    }

    public function add(Request $request)
    {
        Order::create($request->all());

        return redirect('/cart');
    }
}


namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Order;

class CheckoutController extends Controller
{
    public function store(Request $request)
    {
        Order::create($request->all());

        return redirect('/cart');
    }
}


<h1>Login</h1>

<form method="POST" action="/login">
    @csrf

    <label for="username">Username:</label>
    <input type="text" id="username" name="username"><br><br>

    <label for="password">Password:</label>
    <input type="password" id="password" name="password"><br><br>

    <button type="submit">Login</button>
</form>


<h1>Register</h1>

<form method="POST" action="/register">
    @csrf

    <label for="username">Username:</label>
    <input type="text" id="username" name="username"><br><br>

    <label for="password">Password:</label>
    <input type="password" id="password" name="password"><br><br>

    <button type="submit">Register</button>
</form>


<h1>Products</h1>

<ul>
    @foreach($products as $product)
        <li>{{ $product->name }} - {{ $product->price }}</li>
    @endforeach
</ul>


<h1>Product Details</h1>

<p>Name: {{ $product->name }}</p>
<p>Price: {{ $product->price }}</p>


<h1>Cart</h1>

<ul>
    @foreach($orders as $order)
        <li>{{ $order->product_id }} - {{ $order->order_date }}</li>
    @endforeach
</ul>


<?php

// Configuration variables
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "exampledb";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function purchase() {
    global $conn;

    // Get product information from user input (for simplicity)
    $productName = $_POST['productName'];
    $quantity = $_POST['quantity'];
    $price = $_POST['price'];
    $customerName = $_POST['customerName'];

    // Insert order into database
    $sql = "INSERT INTO Orders (ProductName, Quantity, Price, CustomerName) VALUES ('$productName', '$quantity', '$price', '$customerName')";
    if ($conn->query($sql) === TRUE) {
        echo "Order placed successfully!";
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
    }
}

function getOrders() {
    global $conn;

    // Retrieve list of all orders
    $sql = "SELECT * FROM Orders";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        // Output data of each row
        while($row = $result->fetch_assoc()) {
            echo "Order ID: " . $row["OrderID"]. "<br> Product Name: " . $row["ProductName"]. "<br> Quantity: " . $row["Quantity"]. "<br> Price: " . $row["Price"]. "<br> Customer Name: " . $row["CustomerName"]. "<br><br>";
        }
    } else {
        echo "No orders available.";
    }
}

if (isset($_POST['purchase'])) {
    purchase();
} elseif (isset($_POST['getOrders'])) {
    getOrders();
}

// Close connection
$conn->close();

?>


<?php

// Connect to database
$conn = mysqli_connect("localhost", "username", "password", "database");

// Check connection
if (!$conn) {
  die("Connection failed: " . mysqli_connect_error());
}

// Function to display products
function displayProducts($conn) {
  $query = "SELECT * FROM products";
  $result = mysqli_query($conn, $query);

  if (mysqli_num_rows($result) > 0) {
    echo "<table>";
    while ($row = mysqli_fetch_assoc($result)) {
      echo "<tr><td>" . $row["name"] . "</td><td>$" . $row["price"] . "</td></tr>";
    }
    echo "</table>";
  } else {
    echo "No products available.";
  }
}

// Function to handle form submission
function processOrder($conn) {
  if (isset($_POST['submit'])) {
    // Validate user input
    if (!empty($_POST['customer_name']) && !empty($_POST['product_id']) && !empty($_POST['quantity'])) {
      $customerName = $_POST['customer_name'];
      $productId = $_POST['product_id'];
      $quantity = $_POST['quantity'];

      // Retrieve product price from database
      $query = "SELECT price FROM products WHERE id=$productId";
      $result = mysqli_query($conn, $query);
      $price = mysqli_fetch_assoc($result)["price"];

      // Calculate total cost
      $totalCost = $price * $quantity;

      // Insert order into database
      $query = "INSERT INTO orders (customer_name, product_id, quantity, total_cost) VALUES ('$customerName', '$productId', '$quantity', '$totalCost')";
      mysqli_query($conn, $query);

      echo "Order placed successfully!";
    } else {
      echo "Please fill in all fields.";
    }
  }
}

// Display products and form
displayProducts($conn);
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <label for="customer_name">Customer Name:</label>
  <input type="text" id="customer_name" name="customer_name"><br><br>
  <label for="product_id">Select Product:</label>
  <select id="product_id" name="product_id">
    <?php
      $query = "SELECT * FROM products";
      $result = mysqli_query($conn, $query);
      while ($row = mysqli_fetch_assoc($result)) {
        echo "<option value='" . $row["id"] . "'>" . $row["name"] . "</option>";
      }
    ?>
  </select><br><br>
  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity"><br><br>
  <input type="submit" name="submit" value="Place Order">
</form>

<?php
// Close connection
mysqli_close($conn);
?>


<?php

// Initialize the session
session_start();

// Set default values for cart
$_SESSION['cart'] = array();

// Function to add item to cart
function add_item_to_cart($product_id, $quantity) {
  global $_SESSION;
  
  // Check if product already exists in cart
  foreach ($_SESSION['cart'] as &$item) {
    if ($item['product_id'] == $product_id) {
      $item['quantity'] += $quantity;
      return;
    }
  }

  // Add new item to cart
  $_SESSION['cart'][] = array('product_id' => $product_id, 'quantity' => $quantity);
}

// Function to remove item from cart
function remove_item_from_cart($product_id) {
  global $_SESSION;
  
  // Find the index of the product in the cart
  foreach (array_keys($_SESSION['cart']) as $index) {
    if ($_SESSION['cart'][$index]['product_id'] == $product_id) {
      unset($_SESSION['cart'][$index]);
      return;
    }
  }

  // If not found, do nothing
}

// Function to update quantity of item in cart
function update_quantity($product_id, $new_quantity) {
  global $_SESSION;
  
  // Find the index of the product in the cart
  foreach (array_keys($_SESSION['cart']) as $index) {
    if ($_SESSION['cart'][$index]['product_id'] == $product_id) {
      $_SESSION['cart'][$index]['quantity'] = $new_quantity;
      return;
    }
  }

  // If not found, do nothing
}

// Function to calculate total cost of cart
function calculate_total_cost() {
  global $_SESSION;
  
  $total_cost = 0;
  foreach ($_SESSION['cart'] as $item) {
    $product_price = get_product_price($item['product_id']); // Assume this function is defined elsewhere
    $total_cost += $product_price * $item['quantity'];
  }
  return $total_cost;
}

// Function to display cart contents
function display_cart() {
  global $_SESSION;
  
  echo "<h2>Cart Contents:</h2>";
  foreach ($_SESSION['cart'] as $item) {
    echo "<p>Product ID: {$item['product_id']} | Quantity: {$item['quantity']}</p>";
  }
}

// Function to add a product to the cart from a form submission
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  add_item_to_cart($product_id, $quantity);
}

?>


class User {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function register($username, $password) {
        try {
            $stmt = $this->db->prepare("INSERT INTO users (username, password) VALUES (:username, :password)");
            $stmt->execute([':username' => $username, ':password' => password_hash($password, PASSWORD_DEFAULT)]);
            return true;
        } catch (PDOException $e) {
            echo "Error registering user: " . $e->getMessage();
            return false;
        }
    }

    public function login($username, $password) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM users WHERE username = :username");
            $stmt->execute([':username' => $username]);
            $user = $stmt->fetch();
            if (password_verify($password, $user['password'])) {
                return true;
            } else {
                echo "Invalid password";
                return false;
            }
        } catch (PDOException $e) {
            echo "Error logging in user: " . $e->getMessage();
            return false;
        }
    }
}


class Product {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function getAllProducts() {
        try {
            $stmt = $this->db->prepare("SELECT * FROM products");
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error fetching products: " . $e->getMessage();
            return null;
        }
    }

    public function getProduct($id) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM products WHERE id = :id");
            $stmt->execute([':id' => $id]);
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error fetching product: " . $e->getMessage();
            return null;
        }
    }

    public function createProduct($name, $price) {
        try {
            $stmt = $this->db->prepare("INSERT INTO products (name, price) VALUES (:name, :price)");
            $stmt->execute([':name' => $name, ':price' => $price]);
            return true;
        } catch (PDOException $e) {
            echo "Error creating product: " . $e->getMessage();
            return false;
        }
    }

    public function updateProduct($id, $name, $price) {
        try {
            $stmt = $this->db->prepare("UPDATE products SET name = :name, price = :price WHERE id = :id");
            $stmt->execute([':id' => $id, ':name' => $name, ':price' => $price]);
            return true;
        } catch (PDOException $e) {
            echo "Error updating product: " . $e->getMessage();
            return false;
        }
    }

    public function deleteProduct($id) {
        try {
            $stmt = $this->db->prepare("DELETE FROM products WHERE id = :id");
            $stmt->execute([':id' => $id]);
            return true;
        } catch (PDOException $e) {
            echo "Error deleting product: " . $e->getMessage();
            return false;
        }
    }
}


class Order {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function createOrder($user_id, $product_id, $quantity) {
        try {
            $stmt = $this->db->prepare("INSERT INTO orders (user_id, product_id, quantity) VALUES (:user_id, :product_id, :quantity)");
            $stmt->execute([':user_id' => $user_id, ':product_id' => $product_id, ':quantity' => $quantity]);
            return true;
        } catch (PDOException $e) {
            echo "Error creating order: " . $e->getMessage();
            return false;
        }
    }

    public function getAllOrders() {
        try {
            $stmt = $this->db->prepare("SELECT * FROM orders");
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error fetching orders: " . $e->getMessage();
            return null;
        }
    }

    public function getOrder($id) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM orders WHERE id = :id");
            $stmt->execute([':id' => $id]);
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error fetching order: " . $e->getMessage();
            return null;
        }
    }

    public function updateOrder($id, $quantity) {
        try {
            $stmt = $this->db->prepare("UPDATE orders SET quantity = :quantity WHERE id = :id");
            $stmt->execute([':id' => $id, ':quantity' => $quantity]);
            return true;
        } catch (PDOException $e) {
            echo "Error updating order: " . $e->getMessage();
            return false;
        }
    }

    public function deleteOrder($id) {
        try {
            $stmt = $this->db->prepare("DELETE FROM orders WHERE id = :id");
            $stmt->execute([':id' => $id]);
            return true;
        } catch (PDOException $e) {
            echo "Error deleting order: " . $e->getMessage();
            return false;
        }
    }
}


$db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');

$user = new User($db);
$product = new Product($db);
$order = new Order($db);

if (isset($_POST['register'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];

    if ($user->register($username, $password)) {
        echo "User registered successfully";
    } else {
        echo "Error registering user";
    }
} elseif (isset($_POST['login'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];

    if ($user->login($username, $password)) {
        echo "User logged in successfully";
    } else {
        echo "Invalid username or password";
    }
}

if (isset($_POST['create_product'])) {
    $name = $_POST['name'];
    $price = $_POST['price'];

    if ($product->createProduct($name, $price)) {
        echo "Product created successfully";
    } else {
        echo "Error creating product";
    }
} elseif (isset($_POST['update_product'])) {
    $id = $_POST['id'];
    $name = $_POST['name'];
    $price = $_POST['price'];

    if ($product->updateProduct($id, $name, $price)) {
        echo "Product updated successfully";
    } else {
        echo "Error updating product";
    }
}

if (isset($_POST['purchase'])) {
    $user_id = $_SESSION['user_id'];
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    if ($order->createOrder($user_id, $product_id, $quantity)) {
        echo "Order created successfully";
    } else {
        echo "Error creating order";
    }
}


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'store');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to get products
function getProducts() {
    global $conn;
    $query = "SELECT * FROM products";
    $result = $conn->query($query);
    return $result;
}

// Function to process purchase
function processPurchase() {
    global $conn;
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        // Get data from form
        $customerName = $_POST['customer_name'];
        $productId = $_POST['product_id'];
        $quantity = $_POST['quantity'];

        // Validate input
        if (empty($customerName) || empty($productId) || empty($quantity)) {
            echo "Error: Please fill in all fields.";
            return;
        }

        // Get product price and quantity available
        $query = "SELECT * FROM products WHERE id = '$productId'";
        $result = $conn->query($query);
        if ($result->num_rows > 0) {
            $productData = $result->fetch_assoc();
            $price = $productData['price'];
            $availableQuantity = $productData['quantity'];

            // Check if quantity is available
            if ($availableQuantity < $quantity) {
                echo "Error: Not enough quantity available.";
                return;
            }

            // Process order
            $orderDate = date('Y-m-d');
            $total = $price * $quantity;

            // Insert order into database
            $query = "INSERT INTO orders (customer_name, order_date, total) VALUES ('$customerName', '$orderDate', '$total')";
            $conn->query($query);

            // Get order ID
            $orderId = $conn->insert_id;

            // Insert order item into database
            $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$orderId', '$productId', '$quantity')";
            $conn->query($query);

            echo "Purchase successful!";
        } else {
            echo "Error: Product not found.";
        }
    }
}

// Call function to process purchase
processPurchase();

?>


// config.php
<?php

// Database connection settings
$dbHost = 'localhost';
$dbUsername = 'your_username';
$dbPassword = 'your_password';
$dbName = 'your_database_name';

// Connect to the database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

?>


// functions.php
<?php

function get_items() {
    global $conn;
    $query = "SELECT * FROM items";
    $result = $conn->query($query);

    if (!$result) {
        die("Query failed: " . $conn->error);
    }

    return $result->fetch_all(MYSQLI_ASSOC);
}

function add_to_cart($id, $quantity) {
    global $conn;
    $query = "INSERT INTO orders (item_id, quantity) VALUES (?, ?)";
    $stmt = $conn->prepare($query);

    if (!$stmt->bind_param("ii", $id, $quantity)) {
        die("Binding parameters failed: " . $conn->error);
    }

    if (!$stmt->execute()) {
        die("Execute query failed: " . $conn->error);
    }
}

function get_cart_contents() {
    global $conn;
    $query = "SELECT * FROM orders WHERE user_id = ? AND status = 'pending'";
    $result = $conn->query($query);

    if (!$result) {
        die("Query failed: " . $conn->error);
    }

    return $result->fetch_all(MYSQLI_ASSOC);
}

function remove_from_cart($id) {
    global $conn;
    $query = "DELETE FROM orders WHERE user_id = ? AND item_id = ?";
    $stmt = $conn->prepare($query);

    if (!$stmt->bind_param("ii", $_SESSION['user_id'], $id)) {
        die("Binding parameters failed: " . $conn->error);
    }

    if (!$stmt->execute()) {
        die("Execute query failed: " . $conn->error);
    }
}

?>


// index.php (example of a purchase functionality)
<?php

require_once 'config.php';
require_once 'functions.php';

// Check if user is logged in and has items in cart
if (!isset($_SESSION['user_id']) || get_cart_contents()) {
    echo "You must be logged in to access this feature.";
} else {
    // Display items
    $items = get_items();
    ?>
    <h1>Shop</h1>
    <ul>
        <?php foreach ($items as $item) : ?>
            <li><?php echo $item['name']; ?> - <?php echo '$' . number_format($item['price'], 2); ?></li>
        <?php endforeach; ?>
    </ul>

    <!-- Display cart contents -->
    <h1>Cart</h1>
    <?php foreach (get_cart_contents() as $order) : ?>
        <p><?php echo 'Item: ' . get_item_name($order['item_id']); ?> - <?php echo '$' . number_format($order['quantity'] * get_item_price($order['item_id']), 2); ?></p>
    <?php endforeach; ?>

    <!-- Add item to cart -->
    <form action="" method="post">
        <select name="item_id">
            <?php foreach ($items as $item) : ?>
                <option value="<?php echo $item['id']; ?>"><?php echo $item['name']; ?></option>
            <?php endforeach; ?>
        </select>
        <input type="number" name="quantity" placeholder="Quantity">
        <button type="submit">Add to Cart</button>
    </form>

    <!-- Remove item from cart -->
    <form action="" method="post">
        <input type="hidden" name="item_id" value="<?php echo $_POST['item_id']; ?>">
        <button type="submit">Remove from Cart</button>
    </form>
    <?php
}

// Process payment (example)
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Get items in cart and calculate total cost
    $cart_contents = get_cart_contents();
    $total_cost = 0;
    foreach ($cart_contents as $order) {
        $total_cost += $order['quantity'] * get_item_price($order['item_id']);
    }

    // Process payment (in this example, we'll just print out a message)
    echo "Payment processed successfully! Total cost: $" . number_format($total_cost, 2);
}

function get_item_name($id) {
    $query = "SELECT name FROM items WHERE id = ?";
    $result = $conn->prepare($query);

    if (!$result->bind_param("i", $id)) {
        die("Binding parameters failed: " . $conn->error);
    }

    if (!$result->execute()) {
        die("Execute query failed: " . $conn->error);
    }

    return $result->get_result()->fetch_assoc()['name'];
}

function get_item_price($id) {
    $query = "SELECT price FROM items WHERE id = ?";
    $result = $conn->prepare($query);

    if (!$result->bind_param("i", $id)) {
        die("Binding parameters failed: " . $conn->error);
    }

    if (!$result->execute()) {
        die("Execute query failed: " . $conn->error);
    }

    return $result->get_result()->fetch_assoc()['price'];
}

?>


<?php
// Database connection settings
$db_host = 'localhost';
$db_username = 'root';
$db_password = '';
$db_name = 'store';

// Set the error reporting level to E_ALL for debugging purposes
error_reporting(E_ALL);

?>


<?php
require_once 'config.php';

// Check if user is already logged in
if (isset($_SESSION['user_id'])) {
    header('Location: index.php');
}

// Handle login form submission
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $username = $_POST['username'];
    $password = $_POST['password'];

    // Query database for user with matching username and password
    $sql = "SELECT * FROM users WHERE email = '$username' AND password = md5('$password')";
    $result = mysqli_query($conn, $sql);

    if (mysqli_num_rows($result) == 1) {
        // Set session variables on successful login
        $row = mysqli_fetch_assoc($result);
        $_SESSION['user_id'] = $row['id'];
        header('Location: index.php');
    } else {
        echo 'Invalid username or password';
    }
}
?>


<?php
require_once 'config.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
}

// Retrieve user ID from session variable
$user_id = $_SESSION['user_id'];
?>

<!-- Display products table -->
<table>
    <tr>
        <th>Product Name</th>
        <th>Price</th>
        <th>Add to Cart</th>
    </tr>

    <?php
    $sql = "SELECT * FROM products";
    $result = mysqli_query($conn, $sql);

    while ($row = mysqli_fetch_assoc($result)) {
        ?>
        <tr>
            <td><?php echo $row['name']; ?></td>
            <td><?php echo $row['price']; ?></td>
            <td><a href="cart.php?product_id=<?php echo $row['id']; ?>">Add to Cart</a></td>
        </tr>

    <?php
}

?>
</table>


<?php
require_once 'config.php';

// Retrieve user ID from session variable
$user_id = $_SESSION['user_id'];

// Handle form submission to add product to cart
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Insert new row into carts table with user ID, product ID, and quantity
    $sql = "INSERT INTO carts (user_id, product_id, quantity) VALUES ('$user_id', '$product_id', '$quantity')";
    mysqli_query($conn, $sql);
}

// Retrieve list of products in cart for current user
$sql = "SELECT * FROM carts WHERE user_id = '$user_id'";
$result = mysqli_query($conn, $sql);

while ($row = mysqli_fetch_assoc($result)) {
    // Display product information with quantity and price
    echo "Product Name: $row[product_name] | Price: $" . $row['price'] . " x $row[quantity]" . "
";
}
?>


<?php
require_once 'config.php';

// Retrieve list of products in cart for current user
$user_id = $_SESSION['user_id'];
$sql = "SELECT * FROM carts WHERE user_id = '$user_id'";
$result = mysqli_query($conn, $sql);

$total_price = 0;

while ($row = mysqli_fetch_assoc($result)) {
    // Calculate total price by summing prices of all products in cart
    $total_price += $row['price'] * $row['quantity'];
}

// Display final checkout page with total price and shopping summary
echo "Total Price: $" . $total_price;
?>


// config.php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'store');

// database connection function
function db_connect() {
  $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// product model class
class Product {
  private $id;
  private $name;
  private $price;

  public function __construct($id, $name, $price) {
    $this->id = $id;
    $this->name = $name;
    $this->price = $price;
  }

  public function getID() {
    return $this->id;
  }

  public function getName() {
    return $this->name;
  }

  public function getPrice() {
    return $this->price;
  }
}

// cart class
class Cart {
  private $products;

  public function __construct() {
    $this->products = array();
  }

  public function addProduct($product_id, $quantity) {
    if (array_key_exists($product_id, $this->products)) {
      $this->products[$product_id]['quantity'] += $quantity;
    } else {
      $this->products[$product_id] = array('quantity' => $quantity);
    }
  }

  public function getProducts() {
    return $this->products;
  }
}

// order class
class Order {
  private $id;
  private $customer_id;
  private $total;

  public function __construct($customer_id, $total) {
    $this->customer_id = $customer_id;
    $this->total = $total;
  }

  public function getID() {
    return $this->id;
  }

  public function getCustomerID() {
    return $this->customer_id;
  }

  public function getTotal() {
    return $this->total;
  }
}

// purchase functionality
function process_purchase($cart, $customer_id) {
  // calculate total cost of items in cart
  $total = 0;
  foreach ($cart->getProducts() as $product_id => $product_info) {
    $total += (float)$product_info['quantity'] * get_product_price($product_id);
  }

  // create new order
  $order = new Order($customer_id, $total);

  // insert order into database
  $conn = db_connect();
  $stmt = $conn->prepare("INSERT INTO orders (customer_id, total) VALUES (?, ?)");
  $stmt->bind_param('ii', $order->getCustomerID(), $order->getTotal());
  $stmt->execute();

  // get ID of newly created order
  $order_id = $conn->insert_id;

  // insert each product into the order_items table
  foreach ($cart->getProducts() as $product_id => $product_info) {
    $quantity = $product_info['quantity'];
    $stmt = $conn->prepare("INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)");
    $stmt->bind_param('iii', $order_id, $product_id, $quantity);
    $stmt->execute();
  }

  // close database connection
  $conn->close();

  return $order_id;
}

// get price of a product from database
function get_product_price($product_id) {
  $conn = db_connect();
  $stmt = $conn->prepare("SELECT price FROM products WHERE id = ?");
  $stmt->bind_param('i', $product_id);
  $stmt->execute();
  $result = $stmt->get_result();
  $row = $result->fetch_array(MYSQLI_ASSOC);
  return (float)$row['price'];
}


// create a new cart object
$cart = new Cart();

// add some products to the cart
$cart->addProduct(1, 2); // product_id 1, quantity 2
$cart->addProduct(3, 1); // product_id 3, quantity 1

// get customer ID (e.g. from a login system)
$customer_id = 123;

// process the purchase
$order_id = process_purchase($cart, $customer_id);

// print out order ID
echo "Order ID: $order_id";


<?php
require_once 'config.php';

// Get the product ID from the URL parameter
$product_id = $_GET['product_id'];

// Check if the user is logged in
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

// Validate the product ID
if (empty($product_id) || !is_numeric($product_id)) {
    echo 'Invalid product ID';
    exit;
}

// Get the product details from the database
$product = getProduct($product_id);

// Check if the product exists and is available for sale
if (!$product || !$product['available']) {
    echo 'Product not found or out of stock';
    exit;
}

// Calculate the total cost (including tax)
$total_cost = calculateTotalCost($product, $_SESSION['user_id']);

// Update the user's cart with the new product
updateCart($_SESSION['user_id'], $product_id);

// Redirect to the payment page
header('Location: payment.php?total_cost=' . $total_cost);
exit;


<?php

// Database connection settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database_name');

// Function to connect to the database
function dbConnect() {
    $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

?>


<?php

function getProduct($product_id) {
    $db = dbConnect();
    $query = "SELECT * FROM products WHERE id = '$product_id'";
    $result = $db->query($query);
    if ($result->num_rows > 0) {
        return $result->fetch_assoc();
    } else {
        return false;
    }
}

?>


<?php

function calculateTotalCost($product, $user_id) {
    // Calculate tax rate (assuming 8% sales tax)
    $tax_rate = 0.08;

    // Get the user's address from the database
    $address = getUserAddress($user_id);

    // Calculate the total cost (including tax)
    $total_cost = $product['price'] * $address['distance_from_store'];

    return $total_cost;
}

?>


<?php

function updateCart($user_id, $product_id) {
    $db = dbConnect();
    $query = "INSERT INTO cart (user_id, product_id) VALUES ('$user_id', '$product_id')";
    if ($db->query($query)) {
        return true;
    } else {
        return false;
    }
}

?>


<?php

// Get the total cost from the URL parameter
$total_cost = $_GET['total_cost'];

?>

<!DOCTYPE html>
<html>
<head>
    <title>Payment Page</title>
</head>
<body>

<h1>Payment Page</h1>

<form action="process_payment.php" method="post">
    <input type="hidden" name="total_cost" value="<?php echo $total_cost; ?>">
    <button type="submit">Pay Now</button>
</form>

</body>
</html>


<?php

// Process the payment using a payment gateway (e.g. PayPal, Stripe)
// ...
// Update the user's cart with the new status
updateCartStatus($_SESSION['user_id']);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Payment Successful</title>
</head>
<body>

<h1>Payment Successful</h1>

<p>Thank you for your payment!</p>

</body>
</html>


// controllers/PurchaseController.php

class PurchaseController extends Controller {
    public function index() {
        // Display products page
        $products = Product::all();
        return view('products', compact('products'));
    }

    public function store(Request $request) {
        // Validate input data
        $validatedData = $request->validate([
            'product_id' => 'required|integer',
            'quantity' => 'required|integer|min:1'
        ]);

        // Get product details
        $product = Product::find($validatedData['product_id']);

        if (!$product) {
            return redirect()->back()->with('error', 'Product not found');
        }

        // Check stock availability
        if ($product->stock < $validatedData['quantity']) {
            return redirect()->back()->with('error', 'Insufficient stock');
        }

        // Create order
        $order = new Order();
        $order->user_id = auth()->id(); // Get current user ID
        $order->product_id = $validatedData['product_id'];
        $order->quantity = $validatedData['quantity'];
        $order->total = $product->price * $validatedData['quantity'];
        $order->save();

        // Update product stock
        $product->stock -= $validatedData['quantity'];
        $product->save();

        return redirect()->back()->with('success', 'Order created successfully');
    }
}


Route::get('/products', [PurchaseController::class, 'index']);
Route::post('/order', [PurchaseController::class, 'store']);


<!-- resources/views/products.blade.php -->

<form action="{{ route('order') }}" method="post">
    @csrf

    <select name="product_id" id="product-id">
        @foreach ($products as $product)
            <option value="{{ $product->id }}">{{ $product->name }} ({{ $product->price }})</option>
        @endforeach
    </select>

    <input type="number" name="quantity" id="quantity" min="1">

    <button type="submit">Add to Cart</button>
</form>


<?php
require_once 'db.php'; // database connection

// function to add product to cart
function add_product_to_cart($product_id, $quantity) {
  global $mysqli;
  
  if ($quantity <= 0) {
    echo "Invalid quantity";
    return false;
  }
  
  $query = "INSERT INTO cart (product_id, quantity) VALUES (?, ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("ii", $product_id, $quantity);
  if ($stmt->execute()) {
    echo "Product added to cart";
    return true;
  } else {
    echo "Error adding product to cart: " . $mysqli->error;
    return false;
  }
  
  $stmt->close();
}

// function to view cart contents
function view_cart_contents() {
  global $mysqli;
  
  $query = "SELECT * FROM cart WHERE user_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("i", $_SESSION['user_id']);
  if ($stmt->execute()) {
    $result = $stmt->get_result();
    
    echo "<h2>Cart Contents:</h2>";
    while ($row = $result->fetch_assoc()) {
      echo "Product: " . $row['product_name'] . ", Quantity: " . $row['quantity'];
    }
  } else {
    echo "Error viewing cart contents: " . $mysqli->error;
  }
  
  $stmt->close();
}

// function to remove product from cart
function remove_product_from_cart($product_id) {
  global $mysqli;
  
  $query = "DELETE FROM cart WHERE user_id = ? AND product_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("ii", $_SESSION['user_id'], $product_id);
  if ($stmt->execute()) {
    echo "Product removed from cart";
    return true;
  } else {
    echo "Error removing product from cart: " . $mysqli->error;
    return false;
  }
  
  $stmt->close();
}

// function to calculate total cost
function calculate_total_cost() {
  global $mysqli;
  
  $query = "SELECT * FROM cart WHERE user_id = ?";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("i", $_SESSION['user_id']);
  if ($stmt->execute()) {
    $result = $stmt->get_result();
    
    $total_cost = 0;
    while ($row = $result->fetch_assoc()) {
      $total_cost += $row['quantity'] * $row['price'];
    }
    
    return $total_cost;
  } else {
    echo "Error calculating total cost: " . $mysqli->error;
    return false;
  }
  
  $stmt->close();
}

// function to checkout
function checkout() {
  global $mysqli;
  
  // calculate total cost
  $total_cost = calculate_total_cost();
  
  if ($total_cost > 0) {
    // create new order
    $query = "INSERT INTO orders (customer_name, total, date) VALUES (?, ?, ?)";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param("sss", $_SESSION['username'], $total_cost, date('Y-m-d'));
    if ($stmt->execute()) {
      echo "Order created successfully";
      
      // delete cart contents
      query = "DELETE FROM cart WHERE user_id = ?";
      $stmt = $mysqli->prepare($query);
      $stmt->bind_param("i", $_SESSION['user_id']);
      if ($stmt->execute()) {
        echo "Cart cleared successfully";
        
        // redirect to success page
        header('Location: success.php');
        exit;
      } else {
        echo "Error clearing cart: " . $mysqli->error;
      }
    } else {
      echo "Error creating order: " . $mysqli->error;
    }
  } else {
    echo "No products in cart";
  }
  
  $stmt->close();
}
?>


<?php
require_once 'cart.php';

// checkout functionality
if (isset($_POST['submit'])) {
  // remove all products from cart
  remove_all_products_from_cart();

  // create new order
  checkout();
}

// view cart contents
view_cart_contents();
?>


<?php

// Connect to the database
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database_name";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product
function add_product($product_name, $price) {
    global $conn;
    $sql = "INSERT INTO products (name, price) VALUES ('$product_name', '$price')";
    if ($conn->query($sql)) {
        echo "Product added successfully!";
    } else {
        echo "Error adding product: " . $conn->error;
    }
}

// Function to place order
function place_order($customer_id, $products, $quantity) {
    global $conn;
    // Get total cost of products
    $total_cost = 0;
    foreach ($products as $product) {
        $sql = "SELECT price FROM products WHERE id='" . $product['id'] . "'";
        $result = $conn->query($sql);
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_assoc()) {
                $total_cost += $row['price'];
            }
        } else {
            echo "Error fetching product price: " . $conn->error;
        }
    }

    // Insert order
    $sql = "INSERT INTO orders (customer_id, total_cost) VALUES ('" . $customer_id . "', '" . $total_cost . "')";

    if ($conn->query($sql)) {
        // Get last inserted id of the order
        $last_inserted_id = $conn->insert_id;

        // Insert order items
        foreach ($products as $product) {
            $sql = "INSERT INTO order_items (order_id, product_id, quantity, price) VALUES ('" . $last_inserted_id . "', '" . $product['id'] . "', '" . $quantity[$product['id']] . "', '" . $total_cost . "')";

            if ($conn->query($sql)) {
                echo "Order placed successfully!";
            } else {
                echo "Error placing order: " . $conn->error;
            }
        }
    } else {
        echo "Error placing order: " . $conn->error;
    }
}

// Test functions
add_product("Apple", 5.99);
$products = array(
    array('id' => 1, 'price' => 5.99),
    array('id' => 2, 'price' => 7.99)
);

$quantity = array(1 => 2, 2 => 3);
place_order(1, $products, $quantity);

?>


<?php

require_once 'config.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Process form data
    $userId = $_POST['user_id'];
    $productId = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Validate input
    if (!isset($userId) || !isset($productId) || !isset($quantity)) {
        echo 'Error: Invalid input';
        exit;
    }

    // Calculate total price
    $totalPrice = $_POST['price'] * $quantity;

    // Insert order into database
    $sql = "INSERT INTO orders (user_id, product_id, quantity, total_price) VALUES (:user_id, :product_id, :quantity, :total_price)";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([
        ':user_id' => $userId,
        ':product_id' => $productId,
        ':quantity' => $quantity,
        ':total_price' => $totalPrice
    ]);

    // Update product stock
    $sql = "UPDATE products SET quantity = quantity - :quantity WHERE id = :product_id";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([
        ':quantity' => $quantity,
        ':product_id' => $productId
    ]);

    echo 'Order successful!';
} else {
    // Display form
?>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <label for="user_id">User ID:</label>
    <input type="text" id="user_id" name="user_id"><br><br>
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id"><br><br>
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity"><br><br>
    <button type="submit">Place Order</button>
</form>

<?php
}
?>


<?php

// Database connection settings
$dbHost = 'localhost';
$dbUsername = 'username';
$dbPassword = 'password';
$dbName = 'database_name';

$pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUsername, $dbPassword);


<?php
session_start();

// Check if cart is already created in session
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function addItemToCart($id, $name, $price) {
    // Create a new array for the item
    $item = array(
        'id' => $id,
        'name' => $name,
        'price' => $price
    );
    
    // Add item to cart
    $_SESSION['cart'][] = $item;
}

// Function to update item quantity in cart
function updateItemQuantity($id, $quantity) {
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $id) {
            $item['quantity'] = $quantity;
            break;
        }
    }
}

// Function to remove item from cart
function removeItemFromCart($id) {
    // Remove item by ID
    $_SESSION['cart'] = array_filter($_SESSION['cart'], function ($item) use ($id) {
        return $item['id'] != $id;
    });
}

// Function to calculate total cost of cart
function calculateTotalCost() {
    $totalCost = 0;
    foreach ($_SESSION['cart'] as &$item) {
        $totalCost += $item['price'];
    }
    return $totalCost;
}

// Example usage:
$productId = 1;
$productName = 'Product A';
$productPrice = 9.99;

addItemToCart($productId, $productName, $productPrice);

echo "Total Cost: $" . calculateTotalCost();
?>


<?php
session_start();

// Display cart items and total cost
?>

<h1>Cart Items:</h1>

<table>
    <tr>
        <th>Name</th>
        <th>Price</th>
        <th></th>
    </tr>
    
    <?php foreach ($_SESSION['cart'] as $item) : ?>
    <tr>
        <td><?php echo $item['name']; ?></td>
        <td><?php echo "$" . $item['price']; ?></td>
        <td>
            <a href="#" class="remove-item" data-id="<?php echo $item['id']; ?>">Remove</a>
        </td>
    </tr>
    
    <?php endforeach; ?>
</table>

<h2>Total Cost: $<?php echo calculateTotalCost(); ?></h2>


// Database connection settings
$db_host = 'localhost';
$db_username = 'root';
$db_password = '';
$db_name = 'shop';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);


function getProducts() {
  global $conn;
  $query = "SELECT * FROM products";
  return $result = $conn->query($query)->fetch_all(MYSQLI_ASSOC);
}

function addProductToCart($product_id, $cart_id) {
  global $conn;
  $query = "INSERT INTO cart_items (product_id, cart_id) VALUES (?, ?)";
  return $conn->prepare($query)->execute([$product_id, $cart_id]);
}

function removeItemFromCart($item_id) {
  global $conn;
  $query = "DELETE FROM cart_items WHERE id = ?";
  return $conn->prepare($query)->execute([$item_id]);
}


<?php include 'includes/config.php'; ?>
<?php include 'includes/functions.php'; ?>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Shopping Cart</title>
</head>
<body>

  <!-- Display products -->
  <?php foreach (getProducts() as $product) : ?>
    <p>
      <a href="?add-to-cart=<?= $product['id'] ?>">
        <?= $product['name'] ?> ($<?= number_format($product['price'], 2) ?>)
      </a>
    </p>
  <?php endforeach; ?>

  <!-- Display cart -->
  <?php if (isset($_GET['cart_id'])) : ?>
    <h2>Shopping Cart</h2>

    <?php $cartId = $_GET['cart_id']; ?>
    <?php foreach (getProducts() as $product) : ?>
      <?php $count = count(cartItemsByProduct($product['id'], $cartId)); ?>
      <?php if ($count > 0) : ?>
        <p>
          <?= $product['name'] ?> x<?= $count ?> ($<?= number_format(count($count) * $product['price'], 2) ?>)
        </p>
      <?php endif; ?>
    <?php endforeach; ?>

    <!-- Add to cart form -->
    <form action="" method="post">
      <input type="hidden" name="cart_id" value="<?= $_GET['cart_id'] ?>">
      <select name="product_id">
        <?php foreach (getProducts() as $product) : ?>
          <option value="<?= $product['id'] ?>">
            <?= $product['name'] ?> ($<?= number_format($product['price'], 2) ?>)
          </option>
        <?php endforeach; ?>
      </select>
      <input type="submit" name="add-to-cart" value="Add to Cart">
    </form>

    <!-- Remove item form -->
    <?php if (isset($_GET['remove-item'])) : ?>
      <p>Removing <?= $_GET['product_id'] ?> from cart...</p>
      <?php removeItemFromCart($_GET['product_id']); ?>
    <?php endif; ?>

  <?php endif; ?>

</body>
</html>

<?php
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  if (isset($_POST['add-to-cart'])) {
    addProductToCart($_POST['product_id'], $_GET['cart_id']);
  } elseif (isset($_POST['cart_id'])) {
    // Create cart if it doesn't exist
    $query = "INSERT INTO carts (user_id) VALUES (?)";
    $conn->prepare($query)->execute([$_SESSION['user_id']]);
  }
}


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'store';
$username = 'root';
$password = '';

// Connect to the database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

// Function to add a product to cart
function add_product_to_cart($product_id) {
  global $conn;
  // Get user's cart ID (assuming a session variable)
  $cart_id = $_SESSION['cart_id'];
  
  // Insert product into cart
  $query = "INSERT INTO cart_items (cart_id, product_id, quantity) VALUES (:cart_id, :product_id, 1)";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':cart_id', $cart_id);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
}

// Function to remove a product from cart
function remove_product_from_cart($product_id) {
  global $conn;
  // Get user's cart ID (assuming a session variable)
  $cart_id = $_SESSION['cart_id'];
  
  // Delete product from cart
  $query = "DELETE FROM cart_items WHERE cart_id = :cart_id AND product_id = :product_id";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':cart_id', $cart_id);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
}

// Function to update quantity of a product in cart
function update_quantity_in_cart($product_id, $quantity) {
  global $conn;
  // Get user's cart ID (assuming a session variable)
  $cart_id = $_SESSION['cart_id'];
  
  // Update quantity in cart
  $query = "UPDATE cart_items SET quantity = :quantity WHERE cart_id = :cart_id AND product_id = :product_id";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':cart_id', $cart_id);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':quantity', $quantity);
  $stmt->execute();
}

// Function to calculate total cost of cart
function calculate_cart_total() {
  global $conn;
  // Get user's cart ID (assuming a session variable)
  $cart_id = $_SESSION['cart_id'];
  
  // Calculate total cost of cart
  $query = "SELECT SUM(p.price * ci.quantity) AS total FROM products p INNER JOIN cart_items ci ON p.id = ci.product_id WHERE ci.cart_id = :cart_id";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':cart_id', $cart_id);
  $stmt->execute();
  
  // Return total cost
  return $stmt->fetchColumn();
}

// Function to create order
function create_order() {
  global $conn;
  // Get user's cart ID (assuming a session variable)
  $cart_id = $_SESSION['cart_id'];
  
  // Create new order
  $query = "INSERT INTO orders (customer_id, total) VALUES (:customer_id, :total)";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':customer_id', $_SESSION['user_id']);
  $stmt->bindParam(':total', calculate_cart_total());
  $stmt->execute();
  
  // Update cart items to be ordered
  $query = "UPDATE cart_items SET ordered = 1 WHERE cart_id = :cart_id";
  $stmt = $conn->prepare($query);
  $stmt->bindParam(':cart_id', $cart_id);
  $stmt->execute();
}

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
  echo "Please log in to purchase products.";
  exit;
}

// Get product list from database
$query = "SELECT * FROM products";
$stmt = $conn->prepare($query);
$stmt->execute();
$products = $stmt->fetchAll();

// Display cart contents and total cost
echo "<h1>Cart Contents</h1>";
echo "<p>Total: $" . calculate_cart_total() . "</p>";

// Display product list
echo "<h1>Product List</h1>";
foreach ($products as $product) {
  echo "<p>" . $product['name'] . " - $" . $product['price'] . "</p>";
  
  // Add to cart button
  if (isset($_SESSION['cart_id'])) {
    echo "<button onclick='add_product_to_cart(" . $product['id'] . ")'>Add to Cart</button>";
  } else {
    echo "<button disabled>Add to Cart</button>";
  }
}

// Purchase button
echo "<button onclick='create_order()'>Purchase</button>";

?>


<?php

// Get user's cart ID (assuming a session variable)
$cart_id = $_SESSION['cart_id'];

// Display cart contents and total cost
echo "<h1>Cart Contents</h1>";
echo "<p>Total: $" . calculate_cart_total() . "</p>";

// Display product list with add to cart buttons
$query = "SELECT * FROM products";
$stmt = $conn->prepare($query);
$stmt->execute();
$products = $stmt->fetchAll();

foreach ($products as $product) {
  echo "<p>" . $product['name'] . " - $" . $product['price'] . "</p>";
  
  // Add to cart button
  if (isset($_SESSION['cart_id'])) {
    echo "<button onclick='add_product_to_cart(" . $product['id'] . ")'>Add to Cart</button>";
  } else {
    echo "<button disabled>Add to Cart</button>";
  }
}

?>


<?php
// Database connection settings
$host = 'localhost';
$dbname = 'mydatabase';
$user = 'myuser';
$password = 'mypassword';

// Establish database connection
$conn = new PDO("mysql:host=$host;dbname=$dbname", $user, $password);
?>


<?php
require_once 'config.php';

// User registration form handler
if (isset($_POST['register'])) {
    $username = $_POST['username'];
    $email = $_POST['email'];
    $password = password_hash($_POST['password'], PASSWORD_DEFAULT);

    $stmt = $conn->prepare("INSERT INTO users (username, email, password) VALUES (:username, :email, :password)");
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':email', $email);
    $stmt->bindParam(':password', $password);
    $stmt->execute();

    echo "User created successfully!";
}

// User login form handler
if (isset($_POST['login'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];

    $stmt = $conn->prepare("SELECT * FROM users WHERE username = :username");
    $stmt->bindParam(':username', $username);
    $stmt->execute();

    $user = $stmt->fetch();
    if ($user && password_verify($password, $user['password'])) {
        // Successful login
        session_start();
        $_SESSION['user_id'] = $user['id'];
        header('Location: products.php');
        exit;
    } else {
        echo "Invalid username or password!";
    }
}
?>


<?php
require_once 'config.php';

// Display all products
$stmt = $conn->query("SELECT * FROM products");
$products = $stmt->fetchAll();

if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Add product to cart
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }
    $_SESSION['cart'][$product_id] = $quantity;
}
?>


<?php
require_once 'config.php';

// Display cart contents
if (isset($_SESSION['cart'])) {
    echo "Cart Contents:
";
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        // Fetch product details from database
        $stmt = $conn->prepare("SELECT * FROM products WHERE id = :id");
        $stmt->bindParam(':id', $product_id);
        $stmt->execute();
        $product = $stmt->fetch();

        echo "$product[name] x $quantity
";
    }
}

// Checkout form handler
if (isset($_POST['checkout'])) {
    // Calculate total cost and update order status
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        $stmt = $conn->prepare("SELECT price FROM products WHERE id = :id");
        $stmt->bindParam(':id', $product_id);
        $stmt->execute();
        $price = $stmt->fetch();

        $total += ($price['price'] * $quantity);
    }

    // Create new order in database
    $order_id = uniqid();
    $user_id = $_SESSION['user_id'];
    $stmt = $conn->prepare("INSERT INTO orders (user_id, total, status) VALUES (:user_id, :total, 'pending')");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':total', $total);
    $stmt->execute();

    // Update product quantities and order details
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        // Update product quantity in database
        $stmt = $conn->prepare("UPDATE products SET quantity = quantity - :quantity WHERE id = :id");
        $stmt->bindParam(':quantity', $quantity);
        $stmt->bindParam(':id', $product_id);
        $stmt->execute();

        // Add order details to database
        $stmt = $conn->prepare("INSERT INTO orders_products (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)");
        $stmt->bindParam(':order_id', $order_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':quantity', $quantity);
        $stmt->execute();
    }

    // Clear cart and redirect to confirmation page
    unset($_SESSION['cart']);
    header('Location: confirm.php');
    exit;
}
?>


<?php
require_once 'config.php';

// Display order details
$order_id = $_GET['order_id'];
$stmt = $conn->prepare("SELECT * FROM orders WHERE id = :id");
$stmt->bindParam(':id', $order_id);
$stmt->execute();
$order = $stmt->fetch();

echo "Order #{$order['id']} confirmed!";
?>


<?php

// Include database connection settings
require_once 'db.php';

// Check if user is logged in
if (!isset($_SESSION['user'])) {
    echo "You must be logged in to make a purchase.";
    exit;
}

// Get the product ID from the URL parameter
$product_id = isset($_GET['product_id']) ? $_GET['product_id'] : null;

// Check if product exists
$pdo = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USER, DB_PASSWORD);
$stmt = $pdo->prepare('SELECT * FROM products WHERE id = :product_id');
$stmt->bindParam(':product_id', $product_id);
$stmt->execute();
$product = $stmt->fetch();

if (!$product) {
    echo "Product not found.";
    exit;
}

// Get the user's cart
$user_cart = array();
if (isset($_SESSION['user_cart'])) {
    $user_cart = $_SESSION['user_cart'];
}

// Add product to cart
$quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1;

$user_cart[] = array(
    'product_id' => $product_id,
    'quantity' => $quantity
);

$_SESSION['user_cart'] = $user_cart;

// Calculate total cost
$total_cost = 0;
foreach ($user_cart as $item) {
    $stmt = $pdo->prepare('SELECT * FROM products WHERE id = :product_id');
    $stmt->bindParam(':product_id', $item['product_id']);
    $stmt->execute();
    $product = $stmt->fetch();
    $total_cost += $product['price'] * $item['quantity'];
}

// Update order table
$order_id = uniqid();
$stmt = $pdo->prepare('INSERT INTO orders (customer_name, total_cost) VALUES (:customer_name, :total_cost)');
$stmt->bindParam(':customer_name', $_SESSION['user']['name']);
$stmt->bindParam(':total_cost', $total_cost);
$stmt->execute();

// Insert order items
foreach ($user_cart as $item) {
    $stmt = $pdo->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');
    $stmt->bindParam(':order_id', $order_id);
    $stmt->bindParam(':product_id', $item['product_id']);
    $stmt->bindParam(':quantity', $item['quantity']);
    $stmt->execute();
}

// Clear cart
unset($_SESSION['user_cart']);

echo "Purchase successful! Your order ID is: $order_id";

?>


<?php

require_once 'purchase.php';

?>

<form action="purchase.php" method="post">
  <input type="hidden" name="product_id" value="<?php echo $product['id']; ?>">
  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity" value="1">
  <button type="submit">Add to Cart</button>
</form>


<?php

// Configuration
$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'store';

// Create connection
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to create product
function create_product($name, $price) {
    global $conn;
    $sql = "INSERT INTO products (name, price) VALUES (?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ss", $name, $price);
    $stmt->execute();
}

// Function to view all products
function get_products() {
    global $conn;
    $sql = "SELECT * FROM products";
    $result = $conn->query($sql);
    return $result;
}

// Function to add product to cart
function add_to_cart($user_id, $product_id, $quantity) {
    global $conn;
    $sql = "INSERT INTO carts (user_id, product_id, quantity) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iii", $user_id, $product_id, $quantity);
    $stmt->execute();
}

// Function to checkout
function checkout() {
    global $conn;
    // Empty cart
    $sql = "DELETE FROM carts";
    $conn->query($sql);

    // Update stock
    $sql = "UPDATE products SET stock = stock - quantity WHERE id IN (SELECT product_id FROM carts)";
    $conn->query($sql);
}

?>


<?php

// Configuration
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to display products
function displayProducts() {
    global $conn;
    
    $sql = "SELECT * FROM products";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        echo "<table border='1'>";
        while ($row = $result->fetch_assoc()) {
            echo "<tr>";
            echo "<td>" . $row['name'] . "</td>";
            echo "<td>Price: $" . $row['price'] . "</td>";
            echo "<td>Quantity: " . $row['quantity'] . "</td>";
            echo "<td><button type='button' class='btn btn-primary' onclick=\"addToCart(" . $row['id'] . ");\">Add to Cart</button></td>";
            echo "</tr>";
        }
        echo "</table>";
    } else {
        echo "No products available.";
    }
}

// Function to add product to cart
function addToCart($pid) {
    global $conn;
    
    // Retrieve user's current cart contents ( assume session-based)
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'][$pid]++;
    } else {
        $_SESSION['cart'] = array($pid => 1);
    }
}

// Function to purchase products in cart
function purchaseProducts() {
    global $conn;
    
    // Retrieve user's current cart contents ( assume session-based)
    if (isset($_SESSION['cart'])) {
        
        // Validate and process each product
        foreach ($_SESSION['cart'] as $pid => $quantity) {
            // Retrieve product details from database
            $sql = "SELECT * FROM products WHERE id=" . intval($pid);
            $result = $conn->query($sql);
            
            if ($result->num_rows > 0) {
                $product = $result->fetch_assoc();
                
                // Validate quantity and update stock (simulated)
                if ($quantity <= $product['quantity']) {
                    echo "Product " . $pid . " successfully added to cart.";
                    
                    // Update product stock
                    $sql = "UPDATE products SET quantity=quantity-" . intval($quantity) . " WHERE id=" . intval($pid);
                    $conn->query($sql);
                } else {
                    echo "Insufficient quantity for product " . $pid . ".";
                }
            } else {
                echo "Product not found.";
            }
        }
        
        // Clear cart
        unset($_SESSION['cart']);
    }
}

// Display products and form to purchase
?>

<form action="" method="post">
    <input type="submit" name="purchase" value="Purchase Selected Products">
</form>

<!-- Form to display selected products and allow user to input quantity -->
<div id="selected-products"></div>
<script>
    function addToCart(pid) {
        // Simulate adding product to cart (not actual database update)
        let cart = <?php echo json_encode($_SESSION['cart']); ?>;
        
        if (!cart[pid]) {
            cart[pid] = 1;
        } else {
            cart[pid]++;
        }
        
        document.getElementById('selected-products').innerHTML = '';
        
        for (let pid in cart) {
            let product = <?php echo json_encode($conn->query("SELECT * FROM products WHERE id=" . intval(pid))->fetch_assoc()); ?>;
            
            let html = "<p>Product: " + product.name + "</p>";
            html += "<p>Price: $" + product.price + "</p>";
            html += "<input type='number' value='" + cart[pid] + "' min='1'>";
            document.getElementById('selected-products').innerHTML += html;
        }
    }

    if (document.querySelector('button[type="button"]')) {
        let buttons = document.querySelectorAll('button[type="button"]');
        
        for (let button of buttons) {
            button.addEventListener('click', function() {
                addToCart(button.parentNode.parentNode.rowIndex - 1);
            });
        }
    }
</script>


// config.php
<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

$dsn = 'mysql:host=' . DB_HOST . ';dbname=' . DB_NAME;
$options = [
    PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8',
];


// database.php
<?php
require_once 'config.php';

class Database {
  private $pdo;

  public function __construct() {
    try {
      $this->pdo = new PDO($dsn, DB_USER, DB_PASSWORD, $options);
      $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
      die('Database connection failed: ' . $e->getMessage());
    }
  }

  public function getProduct($id) {
    $stmt = $this->pdo->prepare('SELECT * FROM products WHERE id = :id');
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  public function getCart($userId) {
    $stmt = $this->pdo->prepare('SELECT * FROM carts WHERE user_id = :user_id');
    $stmt->bindParam(':user_id', $userId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function updateCart($userId, $productId, $quantity) {
    $stmt = $this->pdo->prepare('UPDATE carts SET quantity = :quantity WHERE user_id = :user_id AND product_id = :product_id');
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':quantity', $quantity);
    return $stmt->execute();
  }

  public function addCart($userId, $productId) {
    $stmt = $this->pdo->prepare('INSERT INTO carts (user_id, product_id, quantity) VALUES (:user_id, :product_id, 1)');
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    return $stmt->execute();
  }

  public function removeCart($userId, $productId) {
    $stmt = $this->pdo->prepare('DELETE FROM carts WHERE user_id = :user_id AND product_id = :product_id');
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    return $stmt->execute();
  }
}


// cart.php
<?php
class Cart {
  private $database;

  public function __construct() {
    $this->database = new Database();
  }

  public function addProduct($userId, $productId) {
    if ($this->database->getCart($userId)) {
      // If user has a cart, update the quantity of the product
      $product = $this->database->getProduct($productId);
      $quantity = $product['quantity'] + 1;
      return $this->database->updateCart($userId, $productId, $quantity);
    } else {
      // If user doesn't have a cart, create one and add the product
      return $this->database->addCart($userId, $productId);
    }
  }

  public function removeProduct($userId, $productId) {
    // Remove the product from the cart if it exists
    return $this->database->removeCart($userId, $productId);
  }

  public function getProducts() {
    // Get all products in the user's cart
    return $this->database->getCart($userId)->products;
  }
}


// checkout.php
<?php
class Checkout {
  private $database;

  public function __construct() {
    $this->database = new Database();
  }

  public function processCheckout($userId) {
    // Get all products in the user's cart
    $products = (new Cart())->getProducts();

    // Update the quantity of each product in the database
    foreach ($products as $product) {
      $productId = $product['id'];
      $quantity = $product['quantity'];

      // If the quantity is greater than 1, update the quantity in the database
      if ($quantity > 1) {
        (new Cart())->updateProduct($userId, $productId, $quantity - 1);
      }
    }

    // Clear the cart
    return (new Cart())->clearCart($userId);
  }
}


// config.php

<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'ecommerce');

$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


// register.php

<?php
require_once 'config.php';

if (isset($_POST['register'])) {
  $name = $_POST['name'];
  $email = $_POST['email'];
  $password = $_POST['password'];

  $sql = "INSERT INTO users (name, email, password) VALUES ('$name', '$email', '$password')";
  if ($conn->query($sql)) {
    echo 'User created successfully!';
  } else {
    echo 'Error: ' . $sql . '<br />' . $conn->error;
  }
}
?>

<form method="post">
  <input type="text" name="name" placeholder="Name"><br><br>
  <input type="email" name="email" placeholder="Email"><br><br>
  <input type="password" name="password" placeholder="Password"><br><br>
  <button type="submit" name="register">Register</button>
</form>


// login.php

<?php
require_once 'config.php';

if (isset($_POST['login'])) {
  $email = $_POST['email'];
  $password = $_POST['password'];

  $sql = "SELECT * FROM users WHERE email='$email' AND password='$password'";
  $result = $conn->query($sql);

  if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
      session_start();
      $_SESSION['user_id'] = $row['id'];
      header('Location: index.php');
      exit;
    }
  } else {
    echo 'Invalid email or password!';
  }
}
?>

<form method="post">
  <input type="email" name="email" placeholder="Email"><br><br>
  <input type="password" name="password" placeholder="Password"><br><br>
  <button type="submit" name="login">Login</button>
</form>


// index.php

<?php
require_once 'config.php';

if (!isset($_SESSION['user_id'])) {
  header('Location: login.php');
  exit;
}

$sql = "SELECT * FROM products";
$result = $conn->query($sql);

echo '<h1>Products</h1>';
echo '<ul>';

while ($row = $result->fetch_assoc()) {
  echo '<li><a href="#">' . $row['name'] . '</a></li>';
}

echo '</ul>';
?>

<form method="post">
  <input type="hidden" name="product_id" value="">
  <button type="submit" name="add_to_cart">Add to Cart</button>
</form>


// cart.php

<?php
require_once 'config.php';

if (!isset($_SESSION['user_id'])) {
  header('Location: login.php');
  exit;
}

$sql = "SELECT * FROM products";
$result = $conn->query($sql);

echo '<h1>Cart</h1>';
echo '<ul>';

while ($row = $result->fetch_assoc()) {
  echo '<li>' . $row['name'] . ' - <span>$' . number_format($row['price'], 2) . '</span></li>';
}

echo '</ul>';

if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  $sql = "INSERT INTO cart (user_id, product_id, quantity) VALUES ($_SESSION[user_id], '$product_id', '$quantity')";
  if ($conn->query($sql)) {
    echo 'Product added to cart!';
  } else {
    echo 'Error: ' . $sql . '<br />' . $conn->error;
  }
}
?>

<form method="post">
  <input type="hidden" name="product_id" value="">
  <select name="quantity">
    <?php for ($i = 1; $i <= 10; $i++) { ?>
      <option value="<?php echo $i; ?>"><?php echo $i; ?></option>
    <?php } ?>
  </select>
  <button type="submit" name="add_to_cart">Add to Cart</button>
</form>


// checkout.php

<?php
require_once 'config.php';

if (!isset($_SESSION['user_id'])) {
  header('Location: login.php');
  exit;
}

$sql = "SELECT * FROM cart WHERE user_id=$_SESSION[user_id]";
$result = $conn->query($sql);

echo '<h1>Checkout</h1>';
echo '<ul>';

$total_cost = 0;

while ($row = $result->fetch_assoc()) {
  echo '<li>' . $row['product_name'] . ' - <span>$' . number_format($row['price'], 2) . '</span></li>';
  $total_cost += $row['price'];
}

echo '</ul>';

if (isset($_POST['checkout'])) {
  $sql = "UPDATE users SET balance=balance-$total_cost WHERE id=$_SESSION[user_id]";
  if ($conn->query($sql)) {
    echo 'Payment successful!';
  } else {
    echo 'Error: ' . $sql . '<br />' . $conn->error;
  }
}
?>

<form method="post">
  <button type="submit" name="checkout">Checkout</button>
</form>


// Assume we have a database connection established ($db)

class Product {
  public $id;
  public $name;
  public $price;

  function __construct($id, $name, $price) {
    $this->id = $id;
    $this->name = $name;
    $this->price = $price;
  }

  // Function to get all products from the database
  static function getAllProducts() {
    global $db;
    $query = "SELECT * FROM products";
    $result = mysqli_query($db, $query);
    $products = array();
    while ($row = mysqli_fetch_assoc($result)) {
      $product = new Product($row['id'], $row['name'], $row['price']);
      $products[] = $product;
    }
    return $products;
  }

  // Function to get a specific product from the database
  static function getProduct($id) {
    global $db;
    $query = "SELECT * FROM products WHERE id=$id";
    $result = mysqli_query($db, $query);
    $row = mysqli_fetch_assoc($result);
    return new Product($row['id'], $row['name'], $row['price']);
  }
}


class Cart {
  public $products;

  function __construct() {
    $this->products = array();
  }

  // Function to add a product to the cart
  function addProduct($product) {
    if (!isset($this->products[$product->id])) {
      $this->products[$product->id] = $product;
    }
  }

  // Function to remove a product from the cart
  function removeProduct($productId) {
    unset($this->products[$productId]);
  }

  // Function to get all products in the cart
  function getAllProducts() {
    return array_values($this->products);
  }

  // Function to calculate the total cost of items in the cart
  function getTotalCost() {
    $total = 0;
    foreach ($this->products as $product) {
      $total += $product->price;
    }
    return $total;
  }
}


// Assume we have a database connection established ($db)
// and a session for user data

class PurchaseController {
  public function index() {
    // Display all products
    $products = Product::getAllProducts();
    require 'view/products.php';
  }

  public function addProductToCart($id) {
    // Add product to cart
    global $cart;
    $product = Product::getProduct($id);
    if (isset($_SESSION['user_id'])) {
      $cart->addProduct($product);
    } else {
      echo 'Please log in to purchase products';
    }
  }

  public function removeProductFromCart($id) {
    // Remove product from cart
    global $cart;
    $cart->removeProduct($id);
  }

  public function checkout() {
    // Display all items in the cart and total cost
    $products = $GLOBALS['cart']->getAllProducts();
    $totalCost = $GLOBALS['cart']->getTotalCost();
    require 'view/cart.php';
  }

  public function makePayment() {
    // Process payment using a payment gateway (e.g. Stripe, PayPal)
    if ($this->isPaymentSuccessful()) {
      // Insert data into the database
      global $db;
      $query = "INSERT INTO orders (user_id, total_cost) VALUES (?, ?)";
      $stmt = mysqli_prepare($db, $query);
      mysqli_stmt_bind_param($stmt, 'ii', $_SESSION['user_id'], $totalCost);
      mysqli_stmt_execute($stmt);
      // Update cart to empty it
      global $cart;
      $cart->products = array();
    } else {
      echo 'Payment failed';
    }
  }

  private function isPaymentSuccessful() {
    // Implement payment processing logic (e.g. using Stripe API)
    return true; // Replace with actual implementation
  }
}


// Assume we have a session for user data

// Set up the cart and purchase controller
$cart = new Cart();
$purchaseController = new PurchaseController();

if (isset($_GET['action'])) {
  $action = $_GET['action'];
  if ($action == 'addProductToCart') {
    $purchaseController->addProductToCart($_GET['id']);
  } elseif ($action == 'removeProductFromCart') {
    $purchaseController->removeProductFromCart($_GET['id']);
  }
}

if (isset($_POST['makePayment'])) {
  $purchaseController->makePayment();
}


// Display all products

<div>
  <h1>Products</h1>
  <?php foreach ($products as $product) : ?>
    <div>
      <h2><?php echo $product->name; ?></h2>
      <p><?php echo 'Price: ' . $product->price; ?></p>
      <button onclick="window.location.href='?action=addProductToCart&id=<?php echo $product->id; ?>'">Add to Cart</button>
    </div>
  <?php endforeach; ?>
</div>


// Display all items in the cart and total cost

<div>
  <h1>Cart</h1>
  <?php foreach ($products as $product) : ?>
    <div>
      <h2><?php echo $product->name; ?></h2>
      <p><?php echo 'Price: ' . $product->price; ?></p>
      <button onclick="window.location.href='?action=removeProductFromCart&id=<?php echo $product->id; ?>'">Remove from Cart</button>
    </div>
  <?php endforeach; ?>
  <h2>Total Cost: <?php echo $totalCost; ?></h2>
  <form action="" method="post">
    <input type="submit" name="makePayment" value="Make Payment"/>
  </form>
</div>


<?php

// Connect to database
$mysqli = new mysqli("localhost", "username", "password", "database");

if ($mysqli->connect_errno) {
    echo "Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error;
}

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    header("Location: login.php");
    exit();
}

// Get product id from URL parameter
$product_id = isset($_GET['product_id']) ? $_GET['product_id'] : null;

// Check if product exists
$products_query = "SELECT * FROM products WHERE id = '$product_id'";
$products_result = $mysqli->query($products_query);

if (!$products_result) {
    echo "Error: " . $mysqli->error;
}

$product = $products_result->fetch_assoc();

// Get user information from session
$user_id = $_SESSION['user_id'];

// Check if order already exists for this user and product
$order_query = "SELECT * FROM orders WHERE user_id = '$user_id' AND product_id = '$product_id'";
$order_result = $mysqli->query($order_query);

if ($order_result->num_rows > 0) {
    echo "You have already ordered this product.";
} else {
    // Create new order
    $new_order_query = "INSERT INTO orders (user_id, product_id, quantity, total_price)
        VALUES ('$user_id', '$product_id', 1, '$product['price']')";
    if (!$mysqli->query($new_order_query)) {
        echo "Error: " . $mysqli->error;
    } else {
        echo "Order successful!";
    }
}

// Close database connection
$mysqli->close();

?>


<?php
// Initialize the cart array
$cart = array();

// Function to add item to cart
function addItemToCart($item, $quantity) {
  global $cart;
  if (array_key_exists($item['id'], $cart)) {
    $cart[$item['id']]['quantity'] += $quantity;
  } else {
    $cart[$item['id']] = array(
      'name' => $item['name'],
      'price' => $item['price'],
      'quantity' => $quantity
    );
  }
}

// Function to remove item from cart
function removeItemFromCart($itemId) {
  global $cart;
  if (array_key_exists($itemId, $cart)) {
    unset($cart[$itemId]);
  }
}

// Function to update quantity of an item in cart
function updateQuantity($itemId, $newQuantity) {
  global $cart;
  if (array_key_exists($itemId, $cart)) {
    $cart[$itemId]['quantity'] = $newQuantity;
  }
}

// Function to calculate total cost of items in cart
function calculateTotal() {
  global $cart;
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}
?>


<?php include 'cart.php'; ?>

<!DOCTYPE html>
<html>
<head>
  <title>Shopping Cart</title>
</head>
<body>

  <?php
  // Sample products array
  $products = array(
    array('id' => 1, 'name' => 'Product A', 'price' => 10.99),
    array('id' => 2, 'name' => 'Product B', 'price' => 5.99),
    array('id' => 3, 'name' => 'Product C', 'price' => 7.99)
  );

  // Display products
  foreach ($products as $product) {
    ?>
    <div>
      <h2><?php echo $product['name']; ?></h2>
      <p>Price: <?php echo $product['price']; ?></p>
      <button onclick="addItemToCart(<?php echo json_encode($product); ?>, 1)">Add to Cart</button>
    </div>
    <?php
  }

  // Display cart contents
  ?>
  <h2>Cart Contents:</h2>
  <?php foreach ($cart as $item) { ?>
    <p><?php echo $item['name']; ?> x <?php echo $item['quantity']; ?></p>
  <?php } ?>

  <button onclick="removeItemFromCart(1)">Remove Item</button>

  <script>
    function addItemToCart(item, quantity) {
      // Send AJAX request to server to add item to cart
      fetch('/cart.php', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({item: item, quantity: quantity})
      })
      .then(response => response.json())
      .then(data => console.log(data));
    }

    function removeItemFromCart(itemId) {
      // Send AJAX request to server to remove item from cart
      fetch('/cart.php', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({action: 'remove', itemId: itemId})
      })
      .then(response => response.json())
      .then(data => console.log(data));
    }
  </script>
</body>
</html>


<?php
// ...

// Function to handle AJAX requests from client-side
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  $data = json_decode(file_get_contents('php://input'), true);
  if ($data) {
    switch ($data['action']) {
      case 'add':
        addItemToCart($data['item'], $data['quantity']);
        break;
      case 'remove':
        removeItemFromCart($data['itemId']);
        break;
    }
  }

  // Calculate total cost of items in cart and send response back to client
  header('Content-Type: application/json');
  echo json_encode(array(
    'total' => calculateTotal(),
    'cart' => $cart
  ));
}
?>


// PurchaseController.php

class PurchaseController {
  private $db;

  public function __construct() {
    // Connect to database
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
  }

  public function index() {
    // Display a form for the user to select products
    echo '<form action="" method="post">';
    echo '<select name="product_id[]" multiple>';
    $products = $this->db->query('SELECT * FROM products')->fetchAll();
    foreach ($products as $product) {
      echo '<option value="' . $product['id'] . '">' . $product['name'] . '</option>';
    }
    echo '</select>';
    echo '<input type="submit" name="purchase" value="Purchase">';
    echo '</form>';
  }

  public function purchase() {
    // Handle the purchase form submission
    if (isset($_POST['purchase'])) {
      $products = $_POST['product_id'];
      $customer_name = $_POST['customer_name'];

      // Validate and sanitize user input
      foreach ($products as &$product) {
        $product = (int) $product;
      }

      // Insert new order into the database
      $order_id = $this->db->query('INSERT INTO orders (customer_name, total_cost) VALUES (?, ?)', [$customer_name, 0])->errorCode();
      foreach ($products as $product) {
        // Get product details
        $product_details = $this->db->query('SELECT * FROM products WHERE id = ?', [$product])->fetch();

        // Update order total cost and insert new order item into the database
        $order_total = $this->db->query('UPDATE orders SET total_cost = total_cost + ? WHERE id = ?', [$product_details['price'], $order_id])->errorCode();
        $this->db->query('INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, 1)', [$order_id, $product]);
      }

      // Display a success message
      echo 'Order placed successfully!';
    }
  }
}


$purchase_controller = new PurchaseController();

// Display the purchase form
$purchase_controller->index();

// Handle the purchase form submission (via AJAX or a separate request)
if (isset($_POST['purchase'])) {
  $purchase_controller->purchase();
}


<?php
session_start();

// Initialize cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function addToCart($item_id, $quantity) {
    global $_SESSION;
    // Check if item is already in cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $item_id) {
            // Update quantity if item is already in cart
            $item['quantity'] += $quantity;
            return;
        }
    }
    // Add new item to cart
    $_SESSION['cart'][] = array('id' => $item_id, 'quantity' => $quantity);
}

// Function to remove item from cart
function removeFromCart($item_id) {
    global $_SESSION;
    foreach ($_SESSION['cart'] as $key => &$item) {
        if ($item['id'] == $item_id) {
            unset($_SESSION['cart'][$key]);
            return;
        }
    }
}

// Function to update item quantity in cart
function updateQuantity($item_id, $new_quantity) {
    global $_SESSION;
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $item_id) {
            $item['quantity'] = $new_quantity;
            return;
        }
    }
}

// Function to display cart contents
function displayCart() {
    global $_SESSION;
    echo "<h2>Cart Contents:</h2>";
    foreach ($_SESSION['cart'] as &$item) {
        echo "$item[id] x $item[quantity]<br>";
    }
}

// Display form to add item to cart
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <label>Item ID:</label>
    <input type="text" name="item_id"><br>
    <label>Quantity:</label>
    <input type="number" name="quantity"><br>
    <input type="submit" value="Add to Cart">
</form>

<?php
// Check if form has been submitted
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Get item ID and quantity from form
    $item_id = $_POST['item_id'];
    $quantity = (int) $_POST['quantity'];

    // Add item to cart
    addToCart($item_id, $quantity);

    // Display updated cart contents
    displayCart();
}
?>


<?php
session_start();

// Function to process payment
function processPayment() {
    global $_SESSION;
    // TO DO: implement payment processing logic here (e.g. using Stripe API)
    echo "Payment processed successfully!";
}

// Display form to enter payment details
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <label>Card Number:</label>
    <input type="text" name="card_number"><br>
    <label>Expiration Date:</label>
    <input type="date" name="expiration_date"><br>
    <label>CVC:</label>
    <input type="number" name="cvc"><br>
    <input type="submit" value="Process Payment">
</form>

<?php
// Check if form has been submitted
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Process payment using Stripe API (TO DO: implement this)
    processPayment();

    // Clear cart contents after successful payment
    unset($_SESSION['cart']);
}
?>


<?php
session_start();
include 'cart.php';

// Display cart contents and form to add item to cart
displayCart();

// Display link to purchase page
echo "<a href='purchase.php'>Proceed to Checkout</a>";

// TO DO: implement security measures (e.g. CSRF token) to prevent cross-site request forgery attacks
?>


<?php
// Include database connection file (e.g., db_connection.php)
require_once 'db_connection.php';

// Get all products from database
$query = "SELECT * FROM products";
$products = mysqli_query($conn, $query);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Product Selection</title>
</head>
<body>

    <!-- Display products -->
    <?php foreach ($products as $product): ?>
        <p><?php echo $product['name']; ?> (<?php echo $product['price']; ?>)</p>
        <form action="cart.php" method="post">
            <input type="hidden" name="product_id" value="<?php echo $product['id']; ?>">
            <button type="submit">Add to Cart</button>
        </form>
    <?php endforeach; ?>

    <!-- Link to cart -->
    <a href="cart.php">View Cart</a>

</body>
</html>


<?php
// Include database connection file (e.g., db_connection.php)
require_once 'db_connection.php';

// Check if user has submitted the form
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Get product ID from hidden input field
    $product_id = $_POST['product_id'];

    // Insert product into cart table
    $query = "INSERT INTO cart (user_id, product_id) VALUES ('', '$product_id')";
    mysqli_query($conn, $query);

    // Redirect to cart page with updated cart content
    header('Location: cart.php');
    exit;
}

// Get all products in user's cart from database
$query = "SELECT * FROM cart";
$cart_products = mysqli_query($conn, $query);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Cart</title>
</head>
<body>

    <!-- Display cart content -->
    <?php foreach ($cart_products as $product): ?>
        <p><?php echo $product['name']; ?> (<?php echo $product['price']; ?>)</p>
        <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
            <input type="hidden" name="remove_product_id" value="<?php echo $product['id']; ?>">
            <button type="submit">Remove from Cart</button>
        </form>
    <?php endforeach; ?>

    <!-- Display total cost -->
    <?php
    // Calculate total cost by summing up all product prices in cart
    $total_cost = 0;
    foreach ($cart_products as $product) {
        $query = "SELECT price FROM products WHERE id = '$product['product_id']'";
        $result = mysqli_query($conn, $query);
        $price = mysqli_fetch_array($result)['price'];
        $total_cost += $price;
    }
    ?>

    <p>Total Cost: <?php echo $total_cost; ?></p>

    <!-- Form to proceed to checkout -->
    <form action="process_purchase.php" method="post">
        <input type="hidden" name="user_id" value="<?php echo $_SESSION['user_id']; ?>">
        <button type="submit">Proceed to Checkout</button>
    </form>

</body>
</html>


<?php
// Include database connection file (e.g., db_connection.php)
require_once 'db_connection.php';

// Check if user has submitted the form
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Get user ID from hidden input field
    $user_id = $_POST['user_id'];

    // Create new order in database
    $query = "INSERT INTO orders (user_id, product_id) VALUES ('$user_id', '')";
    mysqli_query($conn, $query);

    // Update cart table to reflect removed products
    $query = "UPDATE cart SET user_id = '', product_id = '' WHERE user_id = '$user_id'";
    mysqli_query($conn, $query);

    // Redirect to success page
    header('Location: success.php');
    exit;
}

// Redirect to error page if user has not submitted the form
header('Location: error.php');
exit;
?>


<?php

// Include database connection file
require_once 'dbconnect.php';

// Check if form has been submitted
if (isset($_POST['submit'])) {
  // Process form data
  $product_id = $_POST['product_id'];
  $customer_id = $_POST['customer_id'];
  $quantity = $_POST['quantity'];

  // Validate input data
  if ($product_id == '' || $customer_id == '' || $quantity == '') {
    echo 'Please fill in all fields';
    exit;
  }

  // Check if product is available
  $query = "SELECT * FROM products WHERE id = '$product_id'";
  $result = mysqli_query($conn, $query);
  $product = mysqli_fetch_assoc($result);

  if ($quantity > $product['stock']) {
    echo 'Insufficient stock for this product';
    exit;
  }

  // Calculate total cost
  $total_cost = $product['price'] * $quantity;

  // Insert order into database
  $query = "INSERT INTO orders (customer_id, order_date, total_cost) VALUES ('$customer_id', NOW(), '$total_cost')";
  mysqli_query($conn, $query);

  // Update stock level
  $query = "UPDATE products SET stock = stock - $quantity WHERE id = '$product_id'";
  mysqli_query($conn, $query);

  // Display success message
  echo 'Order placed successfully!';
} else {
  // Display form to user
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <label for="customer_id">Customer ID:</label>
  <input type="text" id="customer_id" name="customer_id"><br><br>
  <label for="product_id">Product ID:</label>
  <select id="product_id" name="product_id">
    <?php
      $query = "SELECT * FROM products";
      $result = mysqli_query($conn, $query);
      while ($product = mysqli_fetch_assoc($result)) {
        echo '<option value="' . $product['id'] . '">' . $product['name'] . '</option>';
      }
    ?>
  </select><br><br>
  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity"><br><br>
  <input type="submit" name="submit" value="Place Order">
</form>

<?php
}
?>


// config.php

<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

require_once 'functions.php';
?>


// functions.php

<?php
function connectToDatabase() {
  $connection = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
  if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
  }
  return $connection;
}

function createUser($username, $email, $password) {
  $db = connectToDatabase();
  $query = "INSERT INTO users (username, email, password) VALUES (?, ?, ?)";
  $stmt = $db->prepare($query);
  $stmt->bind_param("ss", $username, $email, $password);
  if ($stmt->execute()) {
    return true;
  } else {
    echo "Error creating user: " . $stmt->error;
  }
}

function loginUser($username, $password) {
  $db = connectToDatabase();
  $query = "SELECT * FROM users WHERE username = ? AND password = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("ss", $username, $password);
  if ($stmt->execute()) {
    return true;
  } else {
    echo "Error logging in user: " . $stmt->error;
  }
}

function addProductToCart($user_id, $product_id) {
  $db = connectToDatabase();
  $query = "INSERT INTO cart (user_id, product_id) VALUES (?, ?)";
  $stmt = $db->prepare($query);
  $stmt->bind_param("ii", $user_id, $product_id);
  if ($stmt->execute()) {
    return true;
  } else {
    echo "Error adding product to cart: " . $stmt->error;
  }
}

function viewCartContents($user_id) {
  $db = connectToDatabase();
  $query = "SELECT * FROM cart WHERE user_id = ?";
  $stmt = $db->prepare($query);
  $stmt->bind_param("i", $user_id);
  if ($stmt->execute()) {
    return $stmt->get_result()->fetch_all(MYSQLI_ASSOC);
  } else {
    echo "Error viewing cart contents: " . $stmt->error;
  }
}

function makePayment($amount) {
  // Assuming PayPal integration
  $paypal_url = 'https://www.paypal.com/cgi-bin/webscr';
  $paypal_params = array(
    'cmd' => '_xclick',
    'business' => 'your_paypal_email@example.com',
    'amount' => $amount,
    'currency_code' => 'USD'
  );
  return curl_init($paypal_url . '?' . http_build_query($paypal_params));
}
?>


// cart.php

<?php
class Cart {
  private $user_id;

  public function __construct($user_id) {
    $this->user_id = $user_id;
  }

  public function viewContents() {
    return viewCartContents($this->user_id);
  }

  public function removeItem($product_id) {
    // Remove item from cart
  }
}
?>


// product.php

<?php
class Product {
  private $id;

  public function __construct($id) {
    $this->id = $id;
  }

  public function add() {
    // Add product to cart
  }

  public function remove() {
    // Remove product from cart
  }
}
?>


// Create user
$username = 'example_user';
$email = 'example@example.com';
$password = 'password123';
createUser($username, $email, password_hash($password, PASSWORD_DEFAULT));

// Login user
$user_id = loginUser($username, $password);

// Add product to cart
$product_id = 1;
addProductToCart($user_id, $product_id);

// View cart contents
$cart_contents = new Cart($user_id);
print_r($cart_contents->viewContents());

// Make payment
$amount = 10.99;
$payment_url = makePayment($amount)->url;

// Redirect user to payment page
header('Location: ' . $payment_url);
exit();


// database connection settings
$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'store';

// connect to the database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// register user function
function registerUser($username, $email, $password) {
    global $conn;
    
    // hash the password
    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
    
    // insert into users table
    $sql = "INSERT INTO users (username, email, password) VALUES ('$username', '$email', '$hashedPassword')";
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}

// login function
function loginUser($username, $password) {
    global $conn;
    
    // get user from database
    $sql = "SELECT * FROM users WHERE username = '$username'";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            if (password_verify($password, $row['password'])) {
                return $row;
            }
        }
    }
    
    return null;
}

// add to cart function
function addToCart($productId, $userId) {
    global $conn;
    
    // check if product already exists in cart
    $sql = "SELECT * FROM order_items WHERE product_id = '$productId' AND user_id = '$userId'";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        return false; // product already exists in cart
    }
    
    // insert into order items table
    $sql = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('NULL', '$productId', '1')";
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}

// checkout function
function checkout($userId, $products) {
    global $conn;
    
    // get order total
    $orderTotal = 0;
    foreach ($products as $product) {
        $orderTotal += $product['price'] * $product['quantity'];
    }
    
    // insert into orders table
    $sql = "INSERT INTO orders (user_id, total) VALUES ('$userId', '$orderTotal')";
    if ($conn->query($sql) === TRUE) {
        
        // update order items with new order id
        foreach ($products as $product) {
            $sql = "UPDATE order_items SET order_id = LAST_INSERT_ID() WHERE product_id = '$product[id]'";
            if (!$conn->query($sql)) {
                echo "Error: " . $sql . "<br>" . $conn->error;
            }
        }
        
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}

// example usage
$username = 'john';
$email = 'john@example.com';
$password = 'password123';

registerUser($username, $email, $password);

$userId = loginUser($username, $password)['id'];

$product1Id = 1; // product id from database
$product2Id = 2; // product id from database

addToCart($product1Id, $userId);
addToCart($product2Id, $userId);

$products = array(
    array('id' => $product1Id, 'name' => 'Product 1', 'price' => 10.99),
    array('id' => $product2Id, 'name' => 'Product 2', 'price' => 5.99)
);

checkout($userId, $products);


<?php

// Set up the configuration
$cart = array(); // array to store cart items
$totalCost = 0; // total cost of items in cart
$discount = 0; // discount percentage (optional)

// Function to add item to cart
function addItemToCart($itemId, $itemName, $itemPrice) {
    global $cart;
    global $totalCost;

    $cart[$itemId] = array('name' => $itemName, 'price' => $itemPrice);
    $totalCost += $itemPrice;
}

// Function to remove item from cart
function removeFromCart($itemId) {
    global $cart;
    global $totalCost;

    if (isset($cart[$itemId])) {
        unset($cart[$itemId]);
        $totalCost -= $cart[$itemId]['price'];
    }
}

// Function to calculate total cost with discount
function calculateTotalCost() {
    global $discount;
    global $totalCost;

    if ($discount > 0) {
        return $totalCost * (1 - ($discount / 100));
    } else {
        return $totalCost;
    }
}

// Function to process purchase
function processPurchase() {
    global $cart;
    global $totalCost;

    // Calculate total cost with discount
    $totalCost = calculateTotalCost();

    // Print out the cart contents and total cost
    echo "Your cart contains:
";
    foreach ($cart as $item) {
        echo "$item[name] - \$" . number_format($item['price'], 2) . "
";
    }
    echo "Total: \$$" . number_format($totalCost, 2) . "
";

    // Process payment (not implemented in this example)
}

// Test the functions
addItemToCart(1, 'Item 1', 10.99);
addItemToCart(2, 'Item 2', 5.99);
removeFromCart(1);

processPurchase();

?>


// connect.php
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "ecommerce";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}


// index.php (login and registration)
<?php
require 'connect.php';

if (isset($_POST['register'])) {
  // register user
  $username = $_POST['username'];
  $password = password_hash($_POST['password'], PASSWORD_DEFAULT);

  $sql = "INSERT INTO users (username, password) VALUES (?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("ss", $username, $password);
  $stmt->execute();

  header('Location: index.php');
}

if (isset($_POST['login'])) {
  // login user
  $username = $_POST['username'];
  $password = $_POST['password'];

  $sql = "SELECT * FROM users WHERE username = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("s", $username);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($row = $result->fetch_assoc()) {
    if (password_verify($password, $row['password'])) {
      // login successful
      session_start();
      $_SESSION['user_id'] = $row['id'];
      header('Location: products.php');
    } else {
      echo "Invalid password";
    }
  } else {
    echo "Invalid username";
  }
}
?>

<form action="" method="post">
  <label for="username">Username:</label>
  <input type="text" name="username"><br><br>
  <label for="password">Password:</label>
  <input type="password" name="password"><br><br>
  <input type="submit" name="login" value="Login">
</form>

<form action="" method="post">
  <label for="username">Username:</label>
  <input type="text" name="username"><br><br>
  <label for="password">Password:</label>
  <input type="password" name="password"><br><br>
  <input type="submit" name="register" value="Register">
</form>


// products.php (display products)
<?php
require 'connect.php';

$sql = "SELECT * FROM products";
$result = $conn->query($sql);

if ($result->num_rows > 0) {
  while ($row = $result->fetch_assoc()) {
    echo "<div><h2>" . $row['name'] . "</h2>";
    echo "<p>Price: $" . $row['price'] . "</p>";
    echo "<form action='' method='post'>";
    echo "<input type='hidden' name='product_id' value='" . $row['id'] . "'>";
    echo "<label for='quantity'>Quantity:</label>";
    echo "<input type='number' min='1' max='" . $row['quantity'] . "' name='quantity'><br><br>";
    echo "<input type='submit' name='buy' value='Buy'>";
    echo "</form></div>";
  }
} else {
  echo "No products available";
}
?>

<?php
if (isset($_POST['buy'])) {
  // buy product
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  $sql = "SELECT * FROM products WHERE id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($row = $result->fetch_assoc()) {
    if ($quantity <= $row['quantity']) {
      // buy successful
      session_start();
      $_SESSION['user_id'] = $_SESSION['user_id'];
      $total = $row['price'] * $quantity;

      $sql = "INSERT INTO orders (user_id, product_id, quantity, total) VALUES (?, ?, ?, ?)";
      $stmt = $conn->prepare($sql);
      $stmt->bind_param("iiss", $_SESSION['user_id'], $product_id, $quantity, $total);
      $stmt->execute();

      header('Location: products.php');
    } else {
      echo "Insufficient quantity";
    }
  } else {
    echo "Invalid product ID";
  }
}
?>


class Product {
  private $id;
  private $name;
  private $price;

  public function __construct($id, $name, $price) {
    $this->id = $id;
    $this->name = $name;
    $this->price = $price;
  }

  public function getId() {
    return $this->id;
  }

  public function getName() {
    return $this->name;
  }

  public function getPrice() {
    return $this->price;
  }
}


class Order {
  private $id;
  private $user_id;
  private $order_date;
  private $total;

  public function __construct($id, $user_id, $order_date, $total) {
    $this->id = $id;
    $this->user_id = $user_id;
    $this->order_date = $order_date;
    $this->total = $total;
  }

  public function getId() {
    return $this->id;
  }

  public function getUserID() {
    return $this->user_id;
  }

  public function getOrderDate() {
    return $this->order_date;
  }

  public function getTotal() {
    return $this->total;
  }
}


class OrderItem {
  private $id;
  private $order_id;
  private $product_id;
  private $quantity;

  public function __construct($id, $order_id, $product_id, $quantity) {
    $this->id = $id;
    $this->order_id = $order_id;
    $this->product_id = $product_id;
    $this->quantity = $quantity;
  }

  public function getId() {
    return $this->id;
  }

  public function getOrderID() {
    return $this->order_id;
  }

  public function getProductID() {
    return $this->product_id;
  }

  public function getQuantity() {
    return $this->quantity;
  }
}


class Purchase {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function placeOrder($user_id, $products) {
    // Get current date and time
    $order_date = date("Y-m-d");

    // Calculate total cost of order
    $total = 0;
    foreach ($products as $product) {
      $total += $product->getPrice() * $product->getQuantity();
    }

    // Insert new order into database
    $query = "INSERT INTO orders (user_id, order_date, total) VALUES (?, ?, ?)";
    $stmt = $this->db->prepare($query);
    $stmt->execute([$user_id, $order_date, $total]);

    // Get ID of newly inserted order
    $order_id = $this->db->lastInsertId();

    // Insert new order items into database
    foreach ($products as $product) {
      $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
      $stmt = $this->db->prepare($query);
      $stmt->execute([$order_id, $product->getId(), $product->getQuantity()]);
    }

    return new Order($order_id, $user_id, $order_date, $total);
  }
}


// Create database connection
$db = new PDO("mysql:host=localhost;dbname=shop", "username", "password");

// Create purchase object
$purchase = new Purchase($db);

// Get products from database (e.g. using a separate function)
$products = array(
  new Product(1, "Product A", 9.99),
  new Product(2, "Product B", 19.99),
  new Product(3, "Product C", 29.99)
);

// Place order
$order = $purchase->placeOrder(1, $products);

echo "Order placed successfully! Order ID: " . $order->getId() . "
";


<?php
// Database configuration
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

$conn = new mysqli($db_host, $db_password);
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


<?php
// Database query function
function db_query($query, $params = null) {
    global $conn;
    if ($params === null) {
        return $conn->query($query);
    } else {
        return $conn->prepare($query);
    }
}
?>


<?php
// Include config and database files
require 'config.php';
require 'database.php';

// Get products from database
$query = "SELECT * FROM products";
$result = db_query($query);
$products = $result->fetch_all(MYSQLI_ASSOC);

?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Product List</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>Product List</h1>
    <ul>
        <?php foreach ($products as $product): ?>
            <li>
                <?= $product['name'] ?> (<?= $product['price'] ?>)
                <button onclick="addToCart(<?= $product['id'] ?>)">Add to Cart</button>
            </li>
        <?php endforeach; ?>
    </ul>

    <!-- JavaScript function for adding product to cart -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script>
        function addToCart(productId) {
            $.ajax({
                type: 'POST',
                url: 'cart.php',
                data: {id: productId},
                success: function() {
                    alert('Product added to cart!');
                }
            });
        }
    </script>

</body>
</html>


<?php
// Include config and database files
require 'config.php';
require 'database.php';

// Check if user is logged in (for simplicity, we will use session)
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

// Get cart items from database
$query = "SELECT * FROM cart WHERE user_id = ?";
$stmt = db_query($query, $_SESSION['user_id']);
$cartItems = $stmt->fetch_all(MYSQLI_ASSOC);

?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Cart</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>Cart</h1>
    <ul>
        <?php foreach ($cartItems as $item): ?>
            <li>
                <?= $item['name'] ?> (<?= $item['price'] ?>)
                <button onclick="removeFromCart(<?= $item['id'] ?>)">Remove from Cart</button>
            </li>
        <?php endforeach; ?>
    </ul>

    <!-- Total price -->
    <p>Total: <?= count($cartItems) * 10 ?></p>

    <!-- Checkout button -->
    <button onclick="checkout()">Checkout</button>

    <!-- JavaScript function for removing product from cart -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script>
        function removeFromCart(cartItemId) {
            $.ajax({
                type: 'POST',
                url: 'cart.php',
                data: {id: cartItemId},
                success: function() {
                    alert('Product removed from cart!');
                }
            });
        }

        // JavaScript function for checkout
        function checkout() {
            $.ajax({
                type: 'POST',
                url: 'checkout.php',
                data: {},
                success: function() {
                    alert('Thank you for your purchase!');
                }
            });
        }
    </script>

</body>
</html>


<?php
// Include config and database files
require 'config.php';
require 'database.php';

// Update cart status to "paid"
$query = "UPDATE cart SET status = ? WHERE user_id = ?";
$stmt = db_query($query, $_SESSION['user_id'], 'paid');
if ($stmt->execute()) {
    echo "Thank you for your purchase!";
} else {
    echo "Error processing payment.";
}
?>


<?php
session_start();

// Check if the cart is empty, if so set it to an empty array
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Function to add items to the cart
function addToCart($itemId) {
    global $itemId;
    // Check if the item already exists in the cart
    if (in_array($itemId, $_SESSION['cart'])) {
        echo "Item is already in your cart.";
    } else {
        $_SESSION['cart'][] = $itemId;
        echo "Item added to your cart.";
    }
}

// Function to remove items from the cart
function removeFromCart($itemId) {
    global $itemId;
    // Check if the item exists in the cart
    if (in_array($itemId, $_SESSION['cart'])) {
        $key = array_search($itemId, $_SESSION['cart']);
        unset($_SESSION['cart'][$key]);
        echo "Item removed from your cart.";
    } else {
        echo "Item is not in your cart.";
    }
}

// Function to display the contents of the cart
function displayCart() {
    global $itemId;
    if (count($_SESSION['cart']) > 0) {
        echo "<h2>Your Cart</h2>";
        foreach ($_SESSION['cart'] as $item) {
            // You can add a database query here to retrieve item details
            echo "Item ID: $item";
            // Add remove button
            echo '<button class="remove-button" onclick="removeFromCart(' . $item . ')">Remove</button>';
        }
    } else {
        echo "<h2>Your cart is empty.</h2>";
    }
}

// Function to calculate the total cost of items in the cart
function calculateTotal() {
    global $itemId;
    // You can add a database query here to retrieve item prices
    // For this example, let's assume each item costs $10
    $total = count($_SESSION['cart']) * 10;
    return $total;
}

// Add event listener for adding items to the cart
?>


<?php
include 'cart.php';

// Display the contents of the cart
displayCart();

// If you want to add items to the cart, call the addToCart function
if (isset($_GET['add'])) {
    addToCart($_GET['id']);
}

// If you want to remove an item from the cart, call the removeFromCart function
if (isset($_GET['remove'])) {
    removeFromCart($_GET['id']);
}
?>

<!-- Add a form to add items to the cart -->
<form action="index.php" method="get">
    <input type="hidden" name="add" value="1">
    <input type="text" name="id" placeholder="Item ID">
    <button type="submit">Add to Cart</button>
</form>

<!-- Display the total cost of items in the cart -->
<p>Total: <?php echo calculateTotal(); ?></p>


<?php

// Configuration
$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'store';

// Connect to database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product to cart
function addProductToCart() {
  global $conn;
  
  if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
    $productId = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    
    // Check if product exists in database
    $query = "SELECT * FROM products WHERE id = '$productId'";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
      while ($row = $result->fetch_assoc()) {
        $productName = $row['name'];
        $productPrice = $row['price'];
        
        // Check if product is already in cart
        $cartQuery = "SELECT * FROM cart WHERE user_id = ".$_SESSION['user_id']." AND product_id = '$productId'";
        $cartResult = $conn->query($cartQuery);
        
        if ($cartResult->num_rows > 0) {
          while ($cartRow = $cartResult->fetch_assoc()) {
            // Update quantity
            $newQuantity = $cartRow['quantity'] + $quantity;
            
            // Update cart table
            $updateQuery = "UPDATE cart SET quantity = '$newQuantity' WHERE id = ".$cartRow['id'];
            $conn->query($updateQuery);
          }
        } else {
          // Insert new product into cart
          $insertQuery = "INSERT INTO cart (user_id, product_id, quantity) VALUES ('".$_SESSION['user_id']."', '$productId', '$quantity')";
          $conn->query($insertQuery);
        }
      }
    }
  }
}

// Function to display cart contents
function displayCartContents() {
  global $conn;
  
  // Get all products in cart for current user
  $cartQuery = "SELECT * FROM cart WHERE user_id = ".$_SESSION['user_id'];
  $result = $conn->query($cartQuery);
  
  if ($result->num_rows > 0) {
    echo "<table border='1'>";
    while ($row = $result->fetch_assoc()) {
      $productName = getProductNameFromId($row['product_id']);
      
      echo "<tr>";
      echo "<td>".$productName."</td>";
      echo "<td>Quantity: ".$row['quantity']."</td>";
      echo "</tr>";
    }
    echo "</table>";
  } else {
    echo "Your cart is empty!";
  }
}

// Function to display checkout form
function displayCheckoutForm() {
  global $conn;
  
  // Get all products in cart for current user
  $cartQuery = "SELECT * FROM cart WHERE user_id = ".$_SESSION['user_id'];
  $result = $conn->query($cartQuery);
  
  if ($result->num_rows > 0) {
    echo "<h2>Checkout</h2>";
    
    // Get total cost of products in cart
    $totalCost = 0;
    while ($row = $result->fetch_assoc()) {
      $productName = getProductNameFromId($row['product_id']);
      
      // Get product price from database
      $query = "SELECT * FROM products WHERE id = '$row[product_id]'";
      $resultPrice = $conn->query($query);
      
      if ($resultPrice->num_rows > 0) {
        while ($priceRow = $resultPrice->fetch_assoc()) {
          $totalCost += $priceRow['price'] * $row['quantity'];
        }
      }
    }
    
    echo "<h3>Total cost: $".number_format($totalCost,2)."</h3>";
    
    // Display checkout form
    echo "<form action='".$_SERVER['PHP_SELF']."' method='post'>";
    echo "Payment method:<br>";
    echo "<input type='radio' name='payment_method' value='paypal'> PayPal<br>";
    echo "<input type='radio' name='payment_method' value='credit_card'> Credit card<br><br>";
    echo "Enter payment information:<br>";
    echo "<textarea name='payment_info' rows='5' cols='30'></textarea><br><br>";
    echo "<input type='submit' value='Submit'>";
    echo "</form>";
  }
}

// Function to get product name from id
function getProductNameFromId($id) {
  global $conn;
  
  $query = "SELECT * FROM products WHERE id = '$id'";
  $result = $conn->query($query);
  
  if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
      return $row['name'];
    }
  } else {
    return "";
  }
}

// Display cart contents and checkout form
displayCartContents();
displayCheckoutForm();

?>


<?php
session_start();

// Include purchase functionality
include 'purchase.php';

// Add product to cart
if (isset($_POST['add_to_cart'])) {
  $productId = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  
  // Update session variables
  $_SESSION['product_id'] = $productId;
  $_SESSION['quantity'] = $quantity;
  
  // Add product to cart using purchase functionality
  addProductToCart();
}

// Display products for sale
echo "<h1>Products for Sale</h1>";
echo "<ul>";
$query = "SELECT * FROM products";
$result = $conn->query($query);

if ($result->num_rows > 0) {
  while ($row = $result->fetch_assoc()) {
    echo "<li>".$row['name']."</li>";
  }
}
echo "</ul>";

?>


<?php
session_start();

// Include purchase functionality
include 'purchase.php';

// Display cart contents
displayCartContents();
?>

<form action='".$_SERVER['PHP_SELF']."' method='post'>
  <input type='hidden' name='add_to_cart' value='1'>
  <input type='submit' value='Add to Cart'>
</form>


<?php
session_start();

// Include purchase functionality
include 'purchase.php';

// Display checkout form
displayCheckoutForm();
?>


<?php
session_start();

// Include purchase functionality
include 'purchase.php';

// Process payment information
if (isset($_POST['submit'])) {
  // Update database with payment information
  $paymentMethod = $_POST['payment_method'];
  $paymentInfo = $_POST['payment_info'];
  
  // Update cart table with payment information
  $updateQuery = "UPDATE cart SET payment_method = '$paymentMethod', payment_info = '$paymentInfo' WHERE user_id = ".$_SESSION['user_id']."";
  $conn->query($updateQuery);
}
?>


<?php
session_start();

// Include purchase functionality
include 'purchase.php';

// Display thank you message
echo "<h1>Thank You!</h1>";
echo "Your payment has been processed successfully!";
?>


<?php

// Connect to database
$conn = new mysqli("localhost", "username", "password", "database");

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to get products from database
function getProducts() {
  global $conn;
  $sql = "SELECT * FROM products";
  $result = $conn->query($sql);

  if (!$result) {
      echo "Error getting products: " . $conn->error;
  }

  return $result;
}

// Function to add order
function addOrder($userId, $productId) {
  global $conn;
  $sql = "INSERT INTO orders (user_id, product_id) VALUES (?, ?)";
  $stmt = $conn->prepare($sql);

  if (!$stmt) {
      echo "Error preparing statement: " . $conn->error;
  }

  $stmt->bind_param("ii", $userId, $productId);
  $result = $stmt->execute();

  if (!$result) {
      echo "Error adding order: " . $conn->error;
  }

  return $result;
}

// Function to process payment
function processPayment($amount) {
  // Simulate a successful payment for this example
  return true;
}

// Function to complete purchase
function completePurchase($userId, $productId) {
  global $conn;

  // Get product price from database
  $sql = "SELECT price FROM products WHERE id = ?";
  $stmt = $conn->prepare($sql);

  if (!$stmt) {
      echo "Error preparing statement: " . $conn->error;
  }

  $stmt->bind_param("i", $productId);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result) {
      while ($row = $result->fetch_assoc()) {
          $price = $row['price'];

          // Check if user has sufficient funds
          // ...

          // Process payment
          if (processPayment($price)) {
              // Add order to database
              addOrder($userId, $productId);

              return true;
          } else {
              echo "Error processing payment.";
              return false;
          }
      }
  }

  echo "Error getting product price.";
  return false;
}

?>


<?php

// Get user ID from session or database
$user_id = $_SESSION['user_id'];

// Get products from database
$products = getProducts();

if ($products) {
    while ($row = $products->fetch_assoc()) {
        $product_id = $row['id'];
        $price = $row['price'];

        // Display product information and add-to-cart button

        if (isset($_POST['add_to_cart'])) {
            completePurchase($user_id, $product_id);
        }
    }
}

?>


<?php

// Database connection
$db = new mysqli('localhost', 'username', 'password', 'database');

// Check connection
if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

// Retrieve products from database
$sql = "SELECT * FROM products";
$result = $db->query($sql);

?>


<?php

// Database connection
$db = new mysqli('localhost', 'username', 'password', 'database');

// Check connection
if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

// Add product to cart
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Check if product exists in cart
    $sql = "SELECT * FROM cart WHERE user_id = ? AND product_id = ?";
    $stmt = $db->prepare($sql);
    $stmt->bind_param('ii', $_SESSION['user_id'], $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        // Update quantity
        $sql = "UPDATE cart SET quantity = ? WHERE user_id = ? AND product_id = ?";
        $stmt = $db->prepare($sql);
        $stmt->bind_param('iii', $quantity, $_SESSION['user_id'], $product_id);
        $stmt->execute();
    } else {
        // Insert new item into cart
        $sql = "INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)";
        $stmt = $db->prepare($sql);
        $stmt->bind_param('iii', $_SESSION['user_id'], $product_id, $quantity);
        $stmt->execute();
    }
}

// View cart contents
if (isset($_POST['view_cart'])) {
    $sql = "SELECT * FROM cart WHERE user_id = ?";
    $stmt = $db->prepare($sql);
    $stmt->bind_param('i', $_SESSION['user_id']);
    $stmt->execute();
    $result = $stmt->get_result();

    echo "<table border='1'>";
    while ($row = $result->fetch_assoc()) {
        echo "<tr>";
        echo "<td>" . $row['product_name'] . "</td>";
        echo "<td>" . $row['quantity'] . "</td>";
        echo "<td>$" . number_format($row['price'], 2) . "</td>";
        echo "</tr>";
    }
    echo "</table>";
}

// Update cart quantities
if (isset($_POST['update_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Check if product exists in cart
    $sql = "SELECT * FROM cart WHERE user_id = ? AND product_id = ?";
    $stmt = $db->prepare($sql);
    $stmt->bind_param('ii', $_SESSION['user_id'], $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        // Update quantity
        $sql = "UPDATE cart SET quantity = ? WHERE user_id = ? AND product_id = ?";
        $stmt = $db->prepare($sql);
        $stmt->bind_param('iii', $quantity, $_SESSION['user_id'], $product_id);
        $stmt->execute();
    }
}

// Remove item from cart
if (isset($_POST['remove_item'])) {
    $product_id = $_POST['product_id'];

    // Check if product exists in cart
    $sql = "SELECT * FROM cart WHERE user_id = ? AND product_id = ?";
    $stmt = $db->prepare($sql);
    $stmt->bind_param('ii', $_SESSION['user_id'], $product_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        // Remove item from cart
        $sql = "DELETE FROM cart WHERE user_id = ? AND product_id = ?";
        $stmt = $db->prepare($sql);
        $stmt->bind_param('ii', $_SESSION['user_id'], $product_id);
        $stmt->execute();
    }
}

// Make payment (dummy method)
if (isset($_POST['make_payment'])) {
    echo "Payment successful!";
}

?>


<?php

// Include cart and products scripts
include 'cart.php';
include 'products.php';

?>

<!-- Display products -->
<h2>Products:</h2>
<ul>
    <?php while ($row = $result->fetch_assoc()) { ?>
        <li>
            <?php echo $row['name']; ?> (<?php echo "Price: $" . number_format($row['price'], 2); ?>)
            <form action="" method="post">
                <input type="hidden" name="product_id" value="<?php echo $row['id']; ?>">
                <input type="number" name="quantity" min="1">
                <button type="submit" name="add_to_cart">Add to Cart</button>
            </form>
        </li>
    <?php } ?>
</ul>

<!-- Display cart contents -->
<h2>Cart:</h2>
<form action="" method="post">
    <table border='1'>
        <?php while ($row = $result->fetch_assoc()) { ?>
            <tr>
                <td><?php echo $row['product_name']; ?></td>
                <td><?php echo $row['quantity']; ?></td>
                <td>$<?php echo number_format($row['price'], 2); ?></td>
            </tr>
        <?php } ?>
    </table>
    <button type="submit" name="view_cart">View Cart</button>
</form>

<!-- Update cart quantities -->
<h2>Update Cart:</h2>
<form action="" method="post">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id"><br><br>
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity"><br><br>
    <button type="submit" name="update_cart">Update Cart</button>
</form>

<!-- Remove item from cart -->
<h2>Remove Item:</h2>
<form action="" method="post">
    <label for="product_id">Product ID:</label>
    <input type="number" id="product_id" name="product_id"><br><br>
    <button type="submit" name="remove_item">Remove Item</button>
</form>

<!-- Make payment -->
<h2>Make Payment:</h2>
<form action="" method="post">
    <button type="submit" name="make_payment">Make Payment</button>
</form>

<?php
// Close database connection
$db->close();
?>


<?php

// Configuration
$host = 'localhost';
$username = 'root';
$password = '';
$dbname = 'your_database';

// Connect to database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to authenticate user
function authenticateUser($email, $password) {
  global $conn;
  
  // Query database for user
  $sql = "SELECT * FROM users WHERE email = '$email'";
  $result = $conn->query($sql);
  
  if ($result->num_rows > 0) {
    // Get user data from result
    $user = $result->fetch_assoc();
    
    // Verify password
    if (password_verify($password, $user['password_hash'])) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
}

// Function to add product to cart
function addToCart($userId, $productId) {
  global $conn;
  
  // Query database for user's current cart
  $sql = "SELECT * FROM carts WHERE user_id = '$userId'";
  $result = $conn->query($sql);
  
  if ($result->num_rows > 0) {
    // Get existing cart data from result
    $cart = $result->fetch_assoc();
    
    // Add product to cart
    $newCart = array('user_id' => $userId, 'products' => array());
    array_push($newCart['products'], array('product_id' => $productId));
    
    // Update database with new cart data
    $sql = "UPDATE carts SET products = JSON_SET(products, '$.', JSON_INSERT(JSON_EXTRACT(products, '$.'), '$[0]', { product_id: $productId })) WHERE user_id = '$userId'";
    $conn->query($sql);
  } else {
    // Create new cart if none exists
    $newCart = array('user_id' => $userId, 'products' => array());
    array_push($newCart['products'], array('product_id' => $productId));
    
    // Insert new cart data into database
    $sql = "INSERT INTO carts (user_id, products) VALUES ('$userId', JSON_INSERT(JSON_OBJECT(), '$.', { product_id: $productId }))";
    $conn->query($sql);
  }
}

// Function to checkout and create order
function checkout() {
  global $conn;
  
  // Get user ID from session
  if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit();
  }
  $userId = $_SESSION['user_id'];
  
  // Query database for cart data
  $sql = "SELECT * FROM carts WHERE user_id = '$userId'";
  $result = $conn->query($sql);
  
  if ($result->num_rows > 0) {
    // Get cart data from result
    $cart = $result->fetch_assoc();
    
    // Calculate order total
    $orderTotal = 0;
    foreach ($cart['products'] as $product) {
      $orderTotal += getProductId($product['product_id'])['price'];
    }
    
    // Create new order
    $newOrder = array('user_id' => $userId, 'total' => $orderTotal, 'status' => 'pending');
    
    // Insert new order data into database
    $sql = "INSERT INTO orders (user_id, total, status) VALUES ('$userId', '$orderTotal', 'pending')";
    $conn->query($sql);
    
    // Update cart with order ID
    foreach ($cart['products'] as &$product) {
      $product['order_id'] = $conn->insert_id;
    }
    
    // Update database with new cart data
    $sql = "UPDATE carts SET products = JSON_SET(products, '$.', JSON_INSERT(JSON_EXTRACT(products, '$.'), '$[0]', { order_id: $conn->insert_id })) WHERE user_id = '$userId'";
    $conn->query($sql);
    
    // Update order status to shipped
    $sql = "UPDATE orders SET status = 'shipped' WHERE id = '$conn->insert_id'";
    $conn->query($sql);
  }
}

// Function to get product ID by name or ID
function getProductId($nameOrId) {
  global $conn;
  
  // Query database for product
  if (is_numeric($nameOrId)) {
    $sql = "SELECT * FROM products WHERE id = '$nameOrId'";
  } else {
    $sql = "SELECT * FROM products WHERE name = '$nameOrId'";
  }
  $result = $conn->query($sql);
  
  return $result->fetch_assoc();
}

// Main script
if (isset($_POST['email']) && isset($_POST['password'])) {
  // Authenticate user
  if (authenticateUser($_POST['email'], $_POST['password'])) {
    echo "Logged in successfully!";
  } else {
    echo "Invalid email or password.";
  }
} elseif (isset($_GET['product_id'])) {
  // Add product to cart
  addToCart($_SESSION['user_id'], $_GET['product_id']);
} elseif (isset($_POST['checkout'])) {
  // Checkout and create order
  checkout();
}

?>


class Product {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=shop', 'root', '');
    }

    public function getAllProducts() {
        $stmt = $this->db->prepare("SELECT * FROM products");
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
}


class Order {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=shop', 'root', '');
    }

    public function placeOrder($user_id, $order_date, $total) {
        $stmt = $this->db->prepare("INSERT INTO orders (user_id, order_date, total) VALUES (:user_id, :order_date, :total)");
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':order_date', $order_date);
        $stmt->bindParam(':total', $total);
        return $stmt->execute();
    }

    public function getOrder($id) {
        $stmt = $this->db->prepare("SELECT * FROM orders WHERE id = :id");
        $stmt->bindParam(':id', $id);
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }
}


class Cart {
    private $order_id;
    private $products;

    public function __construct() {
        $this->order_id = session_start();
        if (!isset($_SESSION['cart'])) {
            $_SESSION['cart'] = array();
        }
    }

    public function addProduct($product) {
        if (array_key_exists($product['id'], $_SESSION['cart'])) {
            $_SESSION['cart'][$product['id']]['quantity']++;
        } else {
            $_SESSION['cart'][$product['id']] = array(
                'id' => $product['id'],
                'name' => $product['name'],
                'price' => $product['price'],
                'quantity' => 1
            );
        }
    }

    public function getCart() {
        return $_SESSION['cart'];
    }

    public function placeOrder() {
        $order_date = date('Y-m-d');
        $total = 0;
        foreach ($_SESSION['cart'] as $product) {
            $price = $product['price'];
            $quantity = $product['quantity'];
            $total += ($price * $quantity);
        }
        $order_id = $this->placeOrder($this->getUserId(), $order_date, $total);
        return $order_id;
    }

    private function placeOrder($user_id, $order_date, $total) {
        $order = new Order();
        return $order->placeOrder($user_id, $order_date, $total);
    }
}


$product = new Product();
$products = $product->getAllProducts();

// Display products to user
foreach ($products as $product) {
    echo "ID: " . $product['id'] . ", Name: " . $product['name'];
}

// Add product to cart
$cart = new Cart();
$cart->addProduct($product);

// Checkout and place order
$order_id = $cart->placeOrder();
echo "Order ID: " . $order_id;


<?php
// Include database connection settings
include 'db_connect.php';

// Get all products from database
$query = "SELECT * FROM products";
$result = mysqli_query($conn, $query);

$products = array();
while ($row = mysqli_fetch_assoc($result)) {
    $products[] = array(
        'id' => $row['id'],
        'name' => $row['name'],
        'price' => $row['price']
    );
}

// Display products
?>

<h1>Products</h1>
<ul>
    <?php foreach ($products as $product) { ?>
        <li>
            <?= $product['name'] ?> - <?= $product['price'] ?>
            <a href="cart.php?action=add&id=<?= $product['id'] ?>">Add to Cart</a>
        </li>
    <?php } ?>
</ul>

<a href="cart.php">View Cart</a>


<?php
// Include database connection settings
include 'db_connect.php';

// Check if user is adding or removing item from cart
if (isset($_GET['action']) && $_GET['action'] == 'add') {
    $product_id = $_GET['id'];
    // Get product details from database
    $query = "SELECT * FROM products WHERE id = '$product_id'";
    $result = mysqli_query($conn, $query);
    $product = mysqli_fetch_assoc($result);

    // Add item to cart if not already in cart
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }
    if (!in_array($product_id, $_SESSION['cart'])) {
        $_SESSION['cart'][] = $product_id;
    }

} elseif (isset($_GET['action']) && $_GET['action'] == 'remove') {
    $product_id = $_GET['id'];
    // Remove item from cart
    if (in_array($product_id, $_SESSION['cart'])) {
        unset($_SESSION['cart'][array_search($product_id, $_SESSION['cart'])]);
    }
}

// Display cart contents
?>

<h1>Cart</h1>
<ul>
    <?php foreach ($_SESSION['cart'] as $item) { ?>
        <li>
            <?= get_product_name($item) ?> - <?= get_product_price($item) ?>
            <a href="cart.php?action=remove&id=<?= $item ?>">Remove</a>
        </li>
    <?php } ?>
</ul>

<a href="checkout.php">Checkout</a>

<?php
function get_product_name($product_id) {
    // Get product name from database
    $query = "SELECT name FROM products WHERE id = '$product_id'";
    $result = mysqli_query($conn, $query);
    return mysqli_fetch_assoc($result)['name'];
}

function get_product_price($product_id) {
    // Get product price from database
    $query = "SELECT price FROM products WHERE id = '$product_id'";
    $result = mysqli_query($conn, $query);
    return mysqli_fetch_assoc($result)['price'];
}


<?php
// Include database connection settings
include 'db_connect.php';

// Get cart contents from session
$cart_contents = $_SESSION['cart'];

// Process order if form submitted
if (isset($_POST['submit'])) {
    // Insert order into database
    $customer_id = $_POST['customer_id'];
    foreach ($cart_contents as $item) {
        $query = "INSERT INTO orders (customer_id, product_id, quantity) VALUES ('$customer_id', '$item', 1)";
        mysqli_query($conn, $query);
    }
}

// Display form to enter customer details
?>

<h1>Checkout</h1>
<form action="checkout.php" method="post">
    <label for="customer_id">Customer ID:</label>
    <input type="text" id="customer_id" name="customer_id"><br><br>
    <input type="submit" name="submit" value="Place Order">
</form>


<?php
// Include database connection settings
require_once 'db_config.php';

// Get all products from database
$query = "SELECT * FROM products";
$result = mysqli_query($conn, $query);
$products = mysqli_fetch_all($result, MYSQLI_ASSOC);

?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purchase</title>
</head>
<body>

<form action="process_purchase.php" method="post">
    <?php foreach ($products as $product): ?>
        <p>
            <input type="checkbox" id="<?= $product['id'] ?>" name="cart[<?= $product['id'] ?>]">
            <label for="<?= $product['id'] ?>"> <?= $product['name'] ?> (<?= $product['price'] ?>)</label><br>
            <select name="quantity[<?= $product['id'] ?>]" id="quantity-<?= $product['id'] ?>">
                <?php for ($i = 1; $i <= 10; $i++): ?>
                    <option value="<?= $i ?>" <?= (isset($_SESSION['cart'][$product['id']]) && $_SESSION['cart'][$product['id']] == $i) ? 'selected' : '' ?>><?= $i ?></option>
                <?php endfor; ?>
            </select><br>
        </p>
    <?php endforeach; ?>

    <input type="submit" value="Purchase">
</form>

<?php if (isset($_SESSION['cart'])): ?>
    <h2>Cart:</h2>
    <ul>
        <?php foreach ($_SESSION['cart'] as $product_id => $quantity): ?>
            <li><?= get_product_name($product_id) ?> x <?= $quantity ?></li>
        <?php endforeach; ?>
    </ul>

    <p>Total: <?= calculate_total_cost() ?></p>
<?php endif; ?>

</body>
</html>

<?php function get_product_name($product_id) {
    global $conn;
    $query = "SELECT name FROM products WHERE id = '$product_id'";
    $result = mysqli_query($conn, $query);
    return mysqli_fetch_assoc($result)['name'];
}

function calculate_total_cost() {
    global $_SESSION;
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        $query = "SELECT price FROM products WHERE id = '$product_id'";
        $result = mysqli_query($conn, $query);
        $price = mysqli_fetch_assoc($result)['price'];
        $total += $price * $quantity;
    }
    return $total;
}
?>


<?php
// Include database connection settings
require_once 'db_config.php';

// Get all cart items from session
$cart = $_SESSION['cart'];

// Loop through each product in the cart
foreach ($cart as $product_id => $quantity) {
    // Insert order into database
    $query = "INSERT INTO orders (user_id, product_id, quantity, total_cost)
                VALUES (?, ?, ?, ?)";
    $stmt = mysqli_prepare($conn, $query);
    mysqli_stmt_bind_param($stmt, 'iiss', $_SESSION['user_id'], $product_id, $quantity, calculate_total_cost());
    mysqli_stmt_execute($stmt);

    // Update product stock
    $query = "UPDATE products SET stock = stock - ? WHERE id = ?";
    $stmt = mysqli_prepare($conn, $query);
    mysqli_stmt_bind_param($stmt, 'ii', $quantity, $product_id);
    mysqli_stmt_execute($stmt);
}

// Remove cart items from session
$_SESSION['cart'] = array();

// Redirect user to confirmation page
header('Location: thank_you.php');
exit;

function calculate_total_cost() {
    global $_SESSION;
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        $query = "SELECT price FROM products WHERE id = '$product_id'";
        $result = mysqli_query($conn, $query);
        $price = mysqli_fetch_assoc($result)['price'];
        $total += $price * $quantity;
    }
    return $total;
}
?>


<?php
// Database connection settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Establish database connection
$connection = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($connection->connect_error) {
  die("Connection failed: " . $connection->connect_error);
}
?>


<?php
require_once 'config.php';

class Product {
  private $id;
  private $name;
  private $price;

  public function __construct($id, $name, $price) {
    $this->id = $id;
    $this->name = $name;
    $this->price = $price;
  }

  public static function getAllProducts() {
    $query = "SELECT * FROM products";
    $result = $connection->query($query);

    $products = array();
    while ($row = $result->fetch_assoc()) {
      $products[] = new Product($row['id'], $row['name'], $row['price']);
    }

    return $products;
  }
}
?>


<?php
require_once 'config.php';
require_once 'product.php';

class Purchase {
  private $customerName;
  private $total;

  public function __construct($customerName, $total) {
    $this->customerName = $customerName;
    $this->total = $total;
  }

  public static function placeOrder($productId, $quantity) {
    // Get the product details
    $product = Product::getProductById($productId);

    if ($product !== null) {
      // Calculate the total cost
      $totalCost = $product->price * $quantity;

      // Create a new order
      $order = new Order($customerName, $totalCost);
      $order->saveToDatabase();

      return true;
    } else {
      return false;
    }
  }

  private static function getProductById($id) {
    $query = "SELECT * FROM products WHERE id = '$id'";
    $result = $connection->query($query);

    if ($row = $result->fetch_assoc()) {
      return new Product($row['id'], $row['name'], $row['price']);
    } else {
      return null;
    }
  }

  private function saveToDatabase() {
    $query = "INSERT INTO orders (customer_name, order_date, total) VALUES ('$this->customerName', NOW(), '$this->total')";
    $connection->query($query);
  }
}

// Example usage:
$customerId = 1; // Replace with actual customer ID
$productIds = array(1, 2, 3); // Replace with actual product IDs
$quantities = array(2, 1, 3); // Replace with actual quantities

foreach ($productIds as $index => $productId) {
  if (Purchase::placeOrder($productId, $quantities[$index])) {
    echo "Order placed successfully for product ID $productId.
";
  } else {
    echo "Failed to place order for product ID $productId.
";
  }
}
?>


<?php

// Connect to database
$conn = new PDO('mysql:host=localhost;dbname=example', 'username', 'password');

// Retrieve all products from database
$stmt = $conn->prepare("SELECT * FROM products");
$stmt->execute();
$products = $stmt->fetchAll();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase</title>
</head>
<body>

  <!-- Display product list -->
  <?php foreach ($products as $product) { ?>
    <div class="product">
      <h2><?php echo $product['name']; ?></h2>
      <p>Price: <?php echo $product['price']; ?></p>
      <button>Add to Cart</button>
    </div>
  <?php } ?>

  <!-- Display cart contents -->
  <div class="cart">
    <h2>Cart Contents:</h2>
    <?php if (isset($_SESSION['cart'])) { ?>
      <?php foreach ($_SESSION['cart'] as $item) { ?>
        <p><?php echo $item['product_name']; ?> x <?php echo $item['quantity']; ?></p>
      <?php } ?>
    <?php } else { ?>
      <p>No items in cart.</p>
    <?php } ?>
  </div>

  <!-- Add product to cart functionality -->
  <script>
    document.querySelectorAll('.add-to-cart').forEach(button => {
      button.addEventListener('click', () => {
        const productId = button.dataset.productId;
        const quantity = prompt("Enter quantity:");
        const productName = document.querySelector(`[data-product-id="${productId}"]`).textContent;

        if (quantity !== null) {
          // Add product to cart
          const cart = <?php echo json_encode($_SESSION['cart']); ?>;
          cart.push({product_name: productName, quantity: quantity});
          $_SESSION['cart'] = cart;
          window.location.href = 'index.php';
        }
      });
    });
  </script>

</body>
</html>


<?php

// Connect to database
$conn = new PDO('mysql:host=localhost;dbname=example', 'username', 'password');

// Retrieve cart contents from session
$cart = $_SESSION['cart'];

// Insert order into orders table
$stmt = $conn->prepare("INSERT INTO orders (customer_name, order_date) VALUES (:customer_name, :order_date)");
$stmt->execute(array(
  ':customer_name' => $_POST['customer_name'],
  ':order_date' => date('Y-m-d')
));
$order_id = $conn->lastInsertId();

// Insert order items into order_items table
foreach ($cart as $item) {
  $stmt = $conn->prepare("INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)");
  $stmt->execute(array(
    ':order_id' => $order_id,
    ':product_id' => $item['product_id'],
    ':quantity' => $item['quantity']
  ));
}

// Clear cart contents from session
$_SESSION['cart'] = array();

?>


<?php

// Connect to database
$conn = new PDO('mysql:host=localhost;dbname=example', 'username', 'password');

// Retrieve all products from database
$stmt = $conn->prepare("SELECT * FROM products");
$stmt->execute();
$products = $stmt->fetchAll();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase</title>
</head>
<body>

  <!-- Display product list -->
  <?php foreach ($products as $product) { ?>
    <div class="product">
      <h2><?php echo $product['name']; ?></h2>
      <p>Price: <?php echo $product['price']; ?></p>
      <button class="add-to-cart" data-product-id="<?php echo $product['id']; ?>">Add to Cart</button>
    </div>
  <?php } ?>

  <!-- Display cart contents -->
  <div class="cart">
    <h2>Cart Contents:</h2>
    <?php if (isset($_SESSION['cart'])) { ?>
      <?php foreach ($_SESSION['cart'] as $item) { ?>
        <p><?php echo $item['product_name']; ?> x <?php echo $item['quantity']; ?></p>
      <?php } ?>
    <?php } else { ?>
      <p>No items in cart.</p>
    <?php } ?>
  </div>

  <!-- Process order form -->
  <form action="order_process.php" method="post">
    <input type="text" name="customer_name" placeholder="Customer Name">
    <button type="submit">Place Order</button>
  </form>

</body>
</html>


<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'store');

$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


<?php
require_once 'config.php';

// Get the product ID from the URL parameter
$product_id = $_GET['product_id'];

// Check if the product exists
$result = mysqli_query($conn, "SELECT * FROM products WHERE id = '$product_id'");

if (mysqli_num_rows($result) == 0) {
    echo 'Product not found';
    exit;
}

// Get the customer details
if (isset($_SESSION['customer_id'])) {
    $customer_id = $_SESSION['customer_id'];
} else {
    // Redirect to login page if not logged in
    header('Location: login.php');
    exit;
}

// Check if the product is in stock
$result = mysqli_query($conn, "SELECT * FROM products WHERE id = '$product_id' AND quantity > 0");

if (mysqli_num_rows($result) == 0) {
    echo 'Product out of stock';
    exit;
}

// Calculate the total price
$total_price = $_SESSION['price'];

// Insert order into database
$order_id = mysqli_insert_id($conn);
mysqli_query($conn, "INSERT INTO orders (customer_id, total) VALUES ('$customer_id', '$total_price')");

// Insert order item into database
mysqli_query($conn, "INSERT INTO order_items (order_id, product_id, quantity, price) VALUES ('$order_id', '$product_id', 1, '$price')");

// Update product stock
mysqli_query($conn, "UPDATE products SET quantity = quantity - 1 WHERE id = '$product_id'");

// Redirect to payment page
header('Location: payment.php');
exit;
?>


<?php
require_once 'config.php';

// Get the order ID from the URL parameter
$order_id = $_GET['order_id'];

// Check if the payment is successful
if (isset($_POST['pay'])) {
    // Update the order status to paid
    mysqli_query($conn, "UPDATE orders SET status = 'paid' WHERE id = '$order_id'");
}

// Display the payment form
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <input type="hidden" name="order_id" value="<?php echo $order_id; ?>">
    <button type="submit" name="pay">Pay</button>
</form>


<?php
// Initialize cart array
$cart = array();

// Function to add item to cart
function add_to_cart($id, $name, $price) {
    global $cart;
    if (array_key_exists($id, $cart)) {
        $cart[$id]['quantity']++;
    } else {
        $cart[$id] = array('name' => $name, 'price' => $price, 'quantity' => 1);
    }
}

// Function to remove item from cart
function remove_from_cart($id) {
    global $cart;
    if (array_key_exists($id, $cart)) {
        unset($cart[$id]);
    }
}

// Function to update quantity of item in cart
function update_quantity($id, $quantity) {
    global $cart;
    if (array_key_exists($id, $cart)) {
        $cart[$id]['quantity'] = $quantity;
    }
}

// Function to display cart contents
function display_cart() {
    global $cart;
    echo "<h2>Cart Contents:</h2>";
    foreach ($cart as $item) {
        echo "$item[name] x $item[quantity] @ $" . number_format($item['price'], 2) . " = $" . number_format($item['quantity'] * $item['price'], 2) . "<br>";
    }
    echo "<p>Total: $" . number_format(array_sum(array_column($cart, 'quantity') * array_column($cart, 'price')), 2) . "</p>";
}

// Function to checkout
function checkout() {
    global $cart;
    // Process payment and clear cart
    echo "Checkout successful!";
    unset($cart);
}
?>


<?php
include 'cart.php';

// Add some items to the cart
add_to_cart(1, 'Product 1', 9.99);
add_to_cart(2, 'Product 2', 19.99);

// Display cart contents
display_cart();

// Remove an item from the cart
remove_from_cart(1);

// Update quantity of another item in the cart
update_quantity(2, 3);

// Display updated cart contents
display_cart();

// Checkout
checkout();
?>


// config.php (database connection settings)
$dbHost = 'localhost';
$dbUser = 'your_username';
$dbPass = 'your_password';
$dbName = 'online_store';

// connect to database
$conn = new mysqli($dbHost, $dbUser, $dbPass, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// function to add product to cart
function addToCart() {
    global $conn;
    $productId = $_POST['product_id'];
    $userId = $_POST['user_id'];

    // check if user has items in cart already
    $query = "SELECT * FROM orders WHERE user_id = '$userId' AND status = 'pending'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        // update existing order
        $orderData = $result->fetch_assoc();
        $total = $orderData['total'] + $_POST['price'];
        $query = "UPDATE orders SET total = '$total' WHERE id = '" . $orderData['id'] . "'";
        $conn->query($query);
    } else {
        // create new order
        $query = "INSERT INTO orders (user_id, total) VALUES ('$userId', '".$_POST['price']."')";
        $conn->query($query);
    }

    return true;
}

// function to checkout and place order
function checkout() {
    global $conn;
    $orderId = $_POST['order_id'];
    $paymentMethod = $_POST['payment_method'];

    // update order status
    $query = "UPDATE orders SET status = 'shipped' WHERE id = '$orderId'";
    $conn->query($query);

    return true;
}

// function to display products and cart contents
function displayProducts() {
    global $conn;
    $userId = $_POST['user_id'];

    // retrieve user's cart contents
    $query = "SELECT * FROM orders WHERE user_id = '$userId' AND status = 'pending'";
    $result = $conn->query($query);

    while ($row = $result->fetch_assoc()) {
        echo "<p>Order ID: " . $row['id'] . "</p>";
        echo "<p>Total: $" . number_format($row['total'], 2) . "</p>";
    }
}


<?php
// database connection settings
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "online_store";

// create connection
$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// get product id from URL
$product_id = $_GET['product_id'];

// retrieve product details from database
$query = "SELECT * FROM products WHERE id = '$product_id'";
$result = $conn->query($query);

if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
        // display product details
        echo "<h2>Product Details</h2>";
        echo "Name: " . $row["name"] . "</br>";
        echo "Price: $" . $row["price"] . "</br>";
        echo "Description: " . $row["description"];

        // create form for purchase
        ?>
        <form action="process.php" method="post">
            <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
            <label>Quantity:</label>
            <input type="number" name="quantity" required></br></br>
            <button type="submit">Purchase</button>
        </form>

        <?php
    }
} else {
    echo "No product found.";
}

// close connection
$conn->close();
?>


<?php
// database connection settings
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "online_store";

// create connection
$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// get product id and quantity from form data
$product_id = $_POST['product_id'];
$quantity = $_POST['quantity'];

// check if quantity is valid (for example, at least 1)
if ($quantity < 1) {
    echo "Invalid quantity.";
} else {
    // retrieve product details from database
    $query = "SELECT * FROM products WHERE id = '$product_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            // calculate total cost
            $total_cost = $row["price"] * $quantity;

            // insert purchase record into database
            $query = "INSERT INTO purchases (product_id, quantity, total_cost)
                      VALUES ('$product_id', '$quantity', '$total_cost')";
            $conn->query($query);

            // update product stock in database
            $query = "UPDATE products SET stock = stock - '$quantity' WHERE id = '$product_id'";
            $conn->query($query);
        }
    }

    echo "Purchase successful.";
}

// close connection
$conn->close();
?>


<?php

// Configuration
$host = 'localhost';
$dbname = 'shop';
$username = 'your_username';
$password = 'your_password';

// Connect to database
$conn = new mysqli($host, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to process payment (placeholder)
function processPayment() {
    // Replace with actual payment processing code
    echo "Payment processed successfully";
}

// Form handling
if ($_SERVER['REQUEST_METHOD'] === 'POST') {

    // Get form data
    $customerName = $_POST['name'];
    $email = $_POST['email'];
    $productName = $_POST['product_name'];
    $quantity = (int) $_POST['quantity'];

    // Validation
    if (!isset($customerName, $email, $productName, $quantity)) {
        echo "Error: All fields are required";
        exit;
    }

    if (!$conn->query("SELECT * FROM customers WHERE email='$email'")->num_rows) {
        echo "Error: Customer not found with this email address";
        exit;
    }

    // Get customer ID
    $customerID = $conn->query("SELECT id FROM customers WHERE email='$email'")->fetch_assoc()['id'];

    // Insert order into database
    $total = floatval($quantity) * 10; // Replace with actual price calculation
    $conn->query("INSERT INTO orders (customer_id, product_name, quantity, total, status)
                  VALUES ('$customerID', '$productName', '$quantity', '$total', 'pending')");

    // Process payment
    processPayment();

    // Send email notification to customer
    $to = $email;
    $subject = "Order Confirmation";
    $body = "Your order has been placed successfully!";
    mail($to, $subject, $body);

    echo "Order processed successfully. Thank you for shopping with us!";

} else {
?>
<form method="post">
  <label for="name">Name:</label>
  <input type="text" id="name" name="name"><br><br>

  <label for="email">Email:</label>
  <input type="email" id="email" name="email"><br><br>

  <label for="product_name">Product Name:</label>
  <input type="text" id="product_name" name="product_name"><br><br>

  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity"><br><br>

  <button type="submit">Place Order</button>
</form>

<?php
}
?>


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'e-commerce');

// Establish database connection
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// User registration form handler
if (isset($_POST['register'])) {
    $name = $_POST['name'];
    $email = $_POST['email'];
    $password = password_hash($_POST['password'], PASSWORD_DEFAULT);

    // Insert user data into database
    $query = "INSERT INTO users (name, email, password) VALUES ('$name', '$email', '$password')";
    $conn->query($query);
}

// User login form handler
if (isset($_POST['login'])) {
    $email = $_POST['email'];
    $password = $_POST['password'];

    // Fetch user data from database
    $query = "SELECT * FROM users WHERE email = '$email'";
    $result = $conn->query($query);
    $user_data = $result->fetch_assoc();

    if ($user_data && password_verify($_POST['password'], $user_data['password'])) {
        // Login successful, set session variables
        $_SESSION['id'] = $user_data['id'];
        $_SESSION['name'] = $user_data['name'];
        header('Location: cart.php');
        exit;
    }
}

// Add product to cart form handler
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Insert product data into database
    $query = "INSERT INTO cart (user_id, product_id, quantity) VALUES ('{$_SESSION['id']}', '$product_id', '$quantity')";
    $conn->query($query);
}

?>

<!-- HTML Form Structure -->
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="text" name="name" placeholder="Name">
  <input type="email" name="email" placeholder="Email">
  <input type="password" name="password" placeholder="Password">
  <button type="submit" name="register">Register</button>
</form>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="email" name="email" placeholder="Email">
  <input type="password" name="password" placeholder="Password">
  <button type="submit" name="login">Login</button>
</form>

<?php if (isset($_SESSION['id'])) { ?>
  <h2>My Cart:</h2>
  <?php
    $query = "SELECT * FROM products WHERE id IN (SELECT product_id FROM cart WHERE user_id = '{$_SESSION['id']}')";
    $result = $conn->query($query);
    while ($row = $result->fetch_assoc()) {
      echo "<p>Product: $row[name] - Price: $row[price] - Quantity: 1</p>";
    }
  ?>
  
  <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <input type="hidden" name="product_id" value="<?php echo $row['id']; ?>">
    <input type="number" name="quantity" placeholder="Quantity">
    <button type="submit" name="add_to_cart">Add to Cart</button>
  </form>
<?php } ?>

<?php if (isset($_SESSION['id'])) { ?>
  <h2>Checkout:</h2>
  
  <?php
    $query = "SELECT * FROM products WHERE id IN (SELECT product_id FROM cart WHERE user_id = '{$_SESSION['id']}')";
    $result = $conn->query($query);
    while ($row = $result->fetch_assoc()) {
      echo "<p>Product: $row[name] - Price: $row[price] - Quantity: 1</p>";
    }
  ?>
  
  <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <input type="submit" name="checkout" value="Checkout">
  </form>
<?php } ?>

<?php
if (isset($_POST['checkout'])) {
  // Update quantity in cart table
  $query = "UPDATE cart SET quantity = '1' WHERE user_id = '{$_SESSION['id']}'";
  $conn->query($query);
  
  // Insert order data into database
  $query = "INSERT INTO orders (user_id, date) VALUES ('{$_SESSION['id']}', NOW())";
  $conn->query($query);
}
?>


<?php

// Connect to database
$conn = new mysqli("localhost", "username", "password", "database");

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to display products
function display_products() {
  global $conn;
  $query = "SELECT * FROM products";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
      while ($row = $result->fetch_assoc()) {
          echo "<option value='" . $row["id"] . "'>" . $row["name"] . "</option>";
      }
  } else {
      echo "No products available";
  }
}

// Function to process order
function process_order() {
  global $conn;
  if (isset($_POST['submit'])) {
      $customer_name = $_POST['customer_name'];
      $order_date = date("Y-m-d");

      // Insert into orders table
      $query = "INSERT INTO orders (customer_name, order_date) VALUES ('$customer_name', '$order_date')";
      $conn->query($query);

      // Get the last inserted ID
      $last_id = $conn->insert_id;

      // Loop through selected products and insert into order_items table
      foreach ($_POST['products'] as $product_id => $quantity) {
          if ($quantity > 0) {
              $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$last_id', '$product_id', '$quantity')";
              $conn->query($query);
          }
      }

      echo "Order processed successfully";
  }
}

// Display products and process order form
?>

<form method="post">
  <h2>Customer Information</h2>
  <label for="customer_name">Name:</label>
  <input type="text" id="customer_name" name="customer_name"><br><br>

  <h2>Select Products:</h2>
  <select multiple name="products[]">
    <?php display_products(); ?>
  </select>

  <button type="submit" name="submit">Place Order</button>
</form>

<?php
process_order();
?>


<?php
defined('BASEPATH') or exit('No direct script access allowed');

// Database connection settings
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_database_username';
$password = 'your_database_password';

try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}


<?php
defined('BASEPATH') or exit('No direct script access allowed');

require_once 'config.php';

if (isset($_POST['submit'])) {
    $email = $_POST['email'];
    $password = $_POST['password'];

    $query = "SELECT * FROM users WHERE email = :email";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':email', $email);
    $stmt->execute();

    if ($stmt->rowCount() > 0) {
        $user = $stmt->fetch();
        if (password_verify($password, $user['password'])) {
            // Login successful
            $_SESSION['user_id'] = $user['id'];
            header('Location: products.php');
            exit;
        }
    } else {
        echo 'Invalid email or password';
    }
}
?>


<?php
defined('BASEPATH') or exit('No direct script access allowed');

require_once 'config.php';

if (isset($_POST['submit'])) {
    $email = $_POST['email'];
    $password = $_POST['password'];

    // Hash password
    $hashed_password = password_hash($password, PASSWORD_DEFAULT);

    $query = "INSERT INTO users (email, password) VALUES (:email, :password)";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':email', $email);
    $stmt->bindParam(':password', $hashed_password);
    $stmt->execute();

    echo 'Registration successful';
}
?>


<?php
defined('BASEPATH') or exit('No direct script access allowed');

require_once 'config.php';

$query = "SELECT * FROM products";
$stmt = $conn->prepare($query);
$stmt->execute();
$products = $stmt->fetchAll();

if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Add product to cart
    $cart_query = "INSERT INTO cart (user_id, product_id, quantity) VALUES (:user_id, :product_id, :quantity)";
    $cart_stmt = $conn->prepare($cart_query);
    $cart_stmt->bindParam(':user_id', $_SESSION['user_id']);
    $cart_stmt->bindParam(':product_id', $product_id);
    $cart_stmt->bindParam(':quantity', $quantity);
    $cart_stmt->execute();
}

?>

<!-- Display products -->
<h1>Products</h1>
<ul>
    <?php foreach ($products as $product) { ?>
        <li>
            <a href="#" class="add_to_cart" data-product-id="<?php echo $product['id']; ?>">
                <?php echo $product['name']; ?>
            </a>
            <span>Price: <?php echo $product['price']; ?></span>
        </li>
    <?php } ?>
</ul>

<!-- Cart form -->
<form action="cart.php" method="post">
    <input type="hidden" name="add_to_cart" value="1">
    <!-- Product ID and quantity fields will be generated dynamically -->
</form>


<?php
defined('BASEPATH') or exit('No direct script access allowed');

require_once 'config.php';

$query = "SELECT * FROM cart WHERE user_id = :user_id";
$stmt = $conn->prepare($query);
$stmt->bindParam(':user_id', $_SESSION['user_id']);
$stmt->execute();
$cart_contents = $stmt->fetchAll();

if (isset($_POST['update_cart'])) {
    // Update cart quantities
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    $query = "UPDATE cart SET quantity = :quantity WHERE product_id = :product_id AND user_id = :user_id";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':quantity', $quantity);
    $stmt->execute();
}

?>

<!-- Display cart contents -->
<h1>Cart Contents</h1>
<ul>
    <?php foreach ($cart_contents as $item) { ?>
        <li>
            <span><?php echo $item['name']; ?></span>
            <input type="number" name="quantity" value="<?php echo $item['quantity']; ?>">
            <button class="update_cart" data-product-id="<?php echo $item['product_id']; ?>">Update</button>
        </li>
    <?php } ?>
</ul>

<!-- Update cart form -->
<form action="cart.php" method="post">
    <!-- Product ID and quantity fields will be generated dynamically -->
    <input type="hidden" name="update_cart" value="1">
</form>


<?php
defined('BASEPATH') or exit('No direct script access allowed');

require_once 'config.php';

// Stripe API settings
$stripe_secret_key = 'your_stripe_secret_key';
$stripe_publishable_key = 'your_stripe_publishable_key';

if (isset($_POST['place_order'])) {
    // Get cart contents
    $cart_query = "SELECT * FROM cart WHERE user_id = :user_id";
    $stmt = $conn->prepare($cart_query);
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->execute();
    $cart_contents = $stmt->fetchAll();

    // Calculate total
    $total = 0;
    foreach ($cart_contents as $item) {
        $total += $item['price'] * $item['quantity'];
    }

    // Charge customer using Stripe API
    $stripe_charges_api_key = 'your_stripe_charges_api_key';
    $charge = \Stripe\Charge::create([
        'amount' => $total,
        'currency' => 'usd',
        'source' => $_POST['token'],
    ]);

    // Update cart status to paid
    foreach ($cart_contents as $item) {
        $update_query = "UPDATE cart SET status = :status WHERE product_id = :product_id AND user_id = :user_id";
        $stmt = $conn->prepare($update_query);
        $stmt->bindParam(':user_id', $_SESSION['user_id']);
        $stmt->bindParam(':product_id', $item['product_id']);
        $stmt->bindParam(':status', 'paid');
        $stmt->execute();
    }
}

?>

<!-- Stripe payment form -->
<form action="checkout.php" method="post">
    <input type="hidden" name="place_order" value="1">
    <!-- Token generated by Stripe will be passed here -->
</form>


<?php

// Configuration file
require 'config.php';

// Initialize session
session_start();

// Connect to MySQL database
$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Define the payment function using Stripe
function stripePayment($token, $amount) {
    // Stripe secret key
    $stripeSecretKey = 'YOUR_STRIPE_SECRET_KEY';
    
    \Stripe\Stripe::setApiKey($stripeSecretKey);

    try {
        // Create a charge object to purchase some things (we're going to buy the user's soul!)
        $charge = array(
            "amount" => $amount * 100, // convert amount from dollars to cents
            "currency" => "usd",
            "source" => $token,
            "description" => "Test Charge"
        );

        $customer = \Stripe\Customer::create(array("email" => $_SESSION['email']));

        $charge = \Stripe\Charge::create($charge);

        // If the payment was successful, create an order in our database
        if ($charge->status == 'succeeded') {
            $sql = "INSERT INTO orders (amount, user_id)
                    VALUES ('" . $_POST['amount'] . "', '" . $_SESSION['id'] . "')";

            if ($conn->query($sql) === TRUE) {
                echo "Order created successfully!";
            } else {
                echo "Error: " . $sql . "<br>" . $conn->error;
            }
        } else {
            echo "Payment failed.";
        }

    } catch (\Stripe\Error\Card $e) {
        // Since it's a decline, we'll retry by sending the user back to our payment form
        echo "Payment declined: " . $e->getMessage();
    } catch (Exception $e) {
        // Something else happened, continue
        echo 'Unexpected error: ' . $e->getMessage();
    }
}

// Define the function to update order in database
function updateOrder() {
    global $conn;
    
    if ($stmt = $conn->prepare("INSERT INTO orders (amount, user_id)
                               VALUES (?, ?)")) {

        // Bind parameters
        $stmt->bind_param("is", $_POST['amount'], $_SESSION['id']);

        // Execute query
        if ($stmt->execute()) {
            echo "Order created successfully!";
        } else {
            echo "Error updating order: " . $conn->error;
        }

        // Close statement
        $stmt->close();
    }
}

// Check for POST request and process purchase
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Get the amount from the form
    $amount = $_POST['amount'];

    // Process payment using Stripe
    stripePayment($_POST['stripeToken'], $amount);

} else {
    // If not POST, display a simple form to input purchase details
?>

<html>
  <head>
    <title>Make Purchase</title>
  </head>

  <body>
    <?php if (isset($_SESSION['logged_in']) && $_SESSION['logged_in'] == true) : ?>
      <form action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>" method="post">
        Amount: <input type="number" name="amount"><br><br>
        Stripe Token: <input type="hidden" name="stripeToken"><?php echo (isset($_POST['stripeToken'])) ? $_POST['stripeToken'] : ''; ?><br><br>

        <button type="submit">Make Purchase</button>
      </form>

    <?php else : ?>
      <h2>You are not logged in!</h2>

    <?php endif; ?>

  </body>
</html>

<?php
}

// Close MySQL connection
$conn->close();

?>


<?php

// Configuration file for database connection details and Stripe API keys
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "mydatabase";

?>


<?php

// Configuration
$dbHost = 'localhost';
$dbUsername = 'username';
$dbPassword = 'password';
$dbName = 'database';

// Establish connection to database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product to cart
function add_product_to_cart($product_id, $quantity) {
    global $conn;
    // Check if product exists in database
    $sql = "SELECT * FROM products WHERE id = '$product_id'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            // Get product price and name
            $price = $row['price'];
            $name = $row['name'];

            // Check if order exists for customer
            $sql = "SELECT * FROM orders WHERE customer_name = '" . $_SESSION['customer_name'] . "'";
            $result = $conn->query($sql);

            if ($result->num_rows > 0) {
                while ($order_row = $result->fetch_assoc()) {
                    // Get order ID
                    $order_id = $order_row['id'];

                    // Check if product is already in cart
                    $sql = "SELECT * FROM order_items WHERE order_id = '$order_id' AND product_id = '$product_id'";
                    $result = $conn->query($sql);

                    if ($result->num_rows > 0) {
                        // Update existing item quantity
                        $sql = "UPDATE order_items SET quantity = quantity + '$quantity' WHERE order_id = '$order_id' AND product_id = '$product_id'";
                        $conn->query($sql);
                    } else {
                        // Add new item to cart
                        $sql = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', '$quantity')";
                        $conn->query($sql);

                        // Update order total
                        $sql = "UPDATE orders SET total = total + '$price' * '$quantity' WHERE id = '$order_id'";
                        $conn->query($sql);
                    }
                }
            } else {
                // Create new order for customer
                $sql = "INSERT INTO orders (customer_name, total) VALUES ('" . $_SESSION['customer_name'] . "', '0')";
                $conn->query($sql);

                // Get new order ID
                $order_id = $conn->insert_id;

                // Add item to cart
                $sql = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', '$quantity')";
                $conn->query($sql);
            }
        }
    } else {
        echo 'Product not found.';
    }
}

// Function to view cart contents
function view_cart_contents() {
    global $conn;
    // Check if order exists for customer
    $sql = "SELECT * FROM orders WHERE customer_name = '" . $_SESSION['customer_name'] . "'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        while ($order_row = $result->fetch_assoc()) {
            // Get order ID
            $order_id = $order_row['id'];

            // Get order items
            $sql = "SELECT * FROM order_items WHERE order_id = '$order_id'";
            $item_result = $conn->query($sql);

            echo '<h2>Cart Contents:</h2>';
            while ($item_row = $item_result->fetch_assoc()) {
                // Get product name and price
                $product_name = '';
                $price = '';

                $sql = "SELECT * FROM products WHERE id = '$item_row[product_id]'";
                $result = $conn->query($sql);

                if ($result->num_rows > 0) {
                    while ($row = $result->fetch_assoc()) {
                        $product_name = $row['name'];
                        $price = $row['price'];

                        echo '<p>' . $product_name . ' x ' . $item_row['quantity'] . ' = £' . ($price * $item_row['quantity']) . '</p>';
                    }
                }
            }

            // Calculate total
            $sql = "SELECT SUM(price * quantity) AS total FROM order_items WHERE order_id = '$order_id'";
            $result = $conn->query($sql);

            if ($result->num_rows > 0) {
                while ($row = $result->fetch_assoc()) {
                    echo '<p>Total: £' . $row['total'] . '</p>';
                }
            }

            // Display checkout button
            echo '<button>Checkout</button>';
        }
    } else {
        echo 'No orders found.';
    }
}

// Example usage:
session_start();

// Add product to cart
add_product_to_cart(1, 2);

// View cart contents
view_cart_contents();

?>


// Connect to the database
$dsn = 'mysql:host=localhost;dbname=your_database';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    throw new Exception($e->getMessage());
}

// Function to get all products
function getProducts() {
    global $pdo;
    $stmt = $pdo->prepare('SELECT * FROM products');
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to add product to cart
function addToCart($userId, $productId) {
    global $pdo;
    $stmt = $pdo->prepare('INSERT INTO cart (user_id, product_id) VALUES (:user_id, :product_id)');
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    return $stmt->execute();
}

// Function to get products in cart
function getCart($userId) {
    global $pdo;
    $stmt = $pdo->prepare('SELECT p.* FROM cart c JOIN products p ON c.product_id = p.id WHERE c.user_id = :user_id');
    $stmt->bindParam(':user_id', $userId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to purchase product
function purchase($userId, $productId) {
    global $pdo;
    
    // Check if user has enough balance
    $balance = getUserBalance($userId);
    $productPrice = getProductPrice($productId);
    
    if ($balance < $productPrice) {
        throw new Exception('Insufficient balance');
    }
    
    // Subtract product price from user's balance
    subtractBalance($userId, $productPrice);
    
    // Add product to cart and remove from stock
    addToCart($userId, $productId);
    subtractProductStock($productId);
}

// Function to get user balance
function getUserBalance($userId) {
    global $pdo;
    $stmt = $pdo->prepare('SELECT balance FROM users WHERE id = :user_id');
    $stmt->bindParam(':user_id', $userId);
    $stmt->execute();
    return $stmt->fetchColumn();
}

// Function to subtract user's balance
function subtractBalance($userId, $amount) {
    global $pdo;
    $stmt = $pdo->prepare('UPDATE users SET balance = balance - :amount WHERE id = :user_id');
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':amount', $amount);
    return $stmt->execute();
}

// Function to get product price
function getProductPrice($productId) {
    global $pdo;
    $stmt = $pdo->prepare('SELECT price FROM products WHERE id = :product_id');
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
    return $stmt->fetchColumn();
}

// Function to subtract product stock
function subtractProductStock($productId) {
    global $pdo;
    $stmt = $pdo->prepare('UPDATE products SET stock = stock - 1 WHERE id = :product_id');
    $stmt->bindParam(':product_id', $productId);
    return $stmt->execute();
}

// Test the functionality
$userId = 1; // Replace with actual user ID
$productId = 1; // Replace with actual product ID

try {
    purchase($userId, $productId);
} catch (Exception $e) {
    echo 'Error: ' . $e->getMessage();
}


// products.php

<?php

// Connect to database (e.g. MySQL)
$conn = mysqli_connect("localhost", "username", "password", "database");

// Check connection
if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Select all products from table
$query = "SELECT * FROM products";
$result = mysqli_query($conn, $query);

?>

<html>
<head>
  <title>Products</title>
</head>
<body>

<form action="purchase.php" method="post">
  <select name="product_id">
    <?php while ($row = mysqli_fetch_assoc($result)) { ?>
      <option value="<?php echo $row['id']; ?>"><?php echo $row['name']; ?></option>
    <?php } ?>
  </select>

  <input type="submit" value="Add to Cart">
</form>

</body>
</html>


// purchase.php

<?php

// Connect to database (e.g. MySQL)
$conn = mysqli_connect("localhost", "username", "password", "database");

// Check connection
if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Retrieve selected product ID from form
$product_id = $_POST['product_id'];

// Add product to session variable
$_SESSION['cart'][] = array('id' => $product_id);

?>

<html>
<head>
  <title>Cart</title>
</head>
<body>

<h2>Your Cart:</h2>

<ul>
  <?php foreach ($_SESSION['cart'] as $item) { ?>
    <li><?php echo get_product_name($conn, $item['id']); ?></li>
  <?php } ?>
</ul>

<form action="checkout.php" method="post">
  <input type="submit" value="Checkout">
</form>

<?php
function get_product_name($conn, $product_id) {
    // Retrieve product name from database
    $query = "SELECT name FROM products WHERE id = '$product_id'";
    $result = mysqli_query($conn, $query);
    return mysqli_fetch_assoc($result)['name'];
}
?>
</body>
</html>


// checkout.php

<?php

// Connect to database (e.g. MySQL)
$conn = mysqli_connect("localhost", "username", "password", "database");

// Check connection
if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Retrieve cart contents from session variable
$cart = $_SESSION['cart'];

// Process payment using Stripe or other payment gateway (omitted for brevity)

// Update database with order information
$query = "INSERT INTO orders (product_id, quantity) VALUES ";
foreach ($cart as $item) {
    $query .= "('".$item['id']."', 1),";
}
$query = rtrim($query, ',');
mysqli_query($conn, $query);

?>

<html>
<head>
  <title>Thank You</title>
</head>
<body>

<h2>Order Placed Successfully!</h2>

<p>Order #<?php echo mysqli_insert_id($conn); ?>:</p>

<ul>
  <?php foreach ($cart as $item) { ?>
    <li><?php echo get_product_name($conn, $item['id']); ?></li>
  <?php } ?>
</ul>

</body>
</html>

<?php
function get_product_name($conn, $product_id) {
    // Retrieve product name from database
    $query = "SELECT name FROM products WHERE id = '$product_id'";
    $result = mysqli_query($conn, $query);
    return mysqli_fetch_assoc($result)['name'];
}
?>


<?php

// Session variables to store cart data
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

function add_to_cart($product_id, $quantity) {
    // Check if product exists in cart already
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $product_id) {
            // If the product is already in cart, increase its quantity by the new amount
            $item['quantity'] += $quantity;
            return true;  // Return to avoid adding same product again
        }
    }

    // Add product to cart if not present
    $_SESSION['cart'][] = array('id' => $product_id, 'quantity' => $quantity);
}

function view_cart() {
    echo '<pre>';
    print_r($_SESSION['cart']);
    echo '</pre>';
}

function update_quantity($product_id, $new_quantity) {
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $product_id) {
            $item['quantity'] = $new_quantity;
            return true;  // Update successful
        }
    }

    echo "Product not found in cart.";
}

function remove_product($product_id) {
    foreach ($_SESSION['cart'] as $key => &$item) {
        if ($item['id'] == $product_id) {
            unset($_SESSION['cart'][$key]);
            return true;  // Product removed successfully
        }
    }

    echo "Product not found in cart.";
}

// Example usage:

// Adding a product to the cart
add_to_cart(1, 2); // Add product with id 1 in quantity of 2

// Viewing the contents of the cart
view_cart();

// Updating the quantity of a product in the cart
update_quantity(1, 5);

// Removing a product from the cart
remove_product(1);


<?php

require_once 'cart.php';

?>

<h2>Shopping Cart</h2>

<form action="add_to_cart.php" method="post">
    <label for="product_id">Product ID:</label>
    <input type="number" name="product_id" id="product_id"><br><br>
    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" id="quantity"><br><br>
    <input type="submit" value="Add to Cart">
</form>

<form action="update_quantity.php" method="post">
    <label for="product_id">Product ID:</label>
    <input type="number" name="product_id" id="product_id"><br><br>
    <label for="new_quantity">New Quantity:</label>
    <input type="number" name="new_quantity" id="new_quantity"><br><br>
    <input type="submit" value="Update Quantity">
</form>

<form action="remove_product.php" method="post">
    <label for="product_id">Product ID:</label>
    <input type="number" name="product_id" id="product_id"><br><br>
    <input type="submit" value="Remove Product">
</form>

<?php
// Display cart contents
view_cart();
?>


<?php

require_once 'cart.php';

if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
    add_to_cart($_POST['product_id'], $_POST['quantity']);
}

// For other operations like update_quantity and remove_product, follow similar logic.


<?php

// Include database connection script
require 'db_connect.php';

// Check if form is submitted
if (isset($_POST['submit'])) {

    // Input data from form
    $product_name = $_POST['product_name'];
    $price = $_POST['price'];
    $quantity = $_POST['quantity'];
    $customer_name = $_POST['customer_name'];
    $email = $_POST['email'];

    // Validate input data
    if (empty($product_name) || empty($price) || empty($quantity) || empty($customer_name) || empty($email)) {
        echo "Please fill out all fields.";
    } else {

        // Calculate total cost
        $total_cost = ($price * $quantity);

        // Insert data into database
        $query = "INSERT INTO purchases (product_name, price, quantity, customer_name, email)
                  VALUES ('$product_name', '$price', '$quantity', '$customer_name', '$email')";
        $result = mysqli_query($conn, $query);

        if ($result) {

            // Send confirmation email
            $to = $email;
            $subject = "Purchase Confirmation";
            $body = "
                Dear $customer_name,
                We are pleased to confirm your purchase of $product_name for \$$price.
                Your total cost is \$$total_cost. Thank you for shopping with us!
                Best regards, Ecommerce Team.";
            $headers = "From: ecommerce@example.com";

            mail($to, $subject, $body, $headers);

            echo "Purchase successful! You will receive a confirmation email shortly.";

        } else {
            echo "Error inserting data into database.";
        }

    }
}

?>

<!-- HTML form to input purchase data -->
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name"><br><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price"><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity"><br><br>

    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name"><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email"><br><br>

    <button type="submit" name="submit">Submit</button>
</form>


<?php

// Define database connection settings
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "ecommerce";

// Establish database connection
$conn = mysqli_connect($servername, $username, $password, $dbname);

// Check connection
if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

?>


class Purchase {
  private $db;

  public function __construct() {
    // Connect to the database using PDO
    $this->db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myusername', 'mypassword');
  }

  /**
   * Add a product to the cart.
   *
   * @param int $product_id ID of the product to add to the cart.
   * @param int $quantity Number of units of the product to add.
   */
  public function addToCart($product_id, $quantity) {
    // Check if the product exists
    $stmt = $this->db->prepare('SELECT * FROM products WHERE id = :id');
    $stmt->execute([':id' => $product_id]);
    $product = $stmt->fetch();

    if ($product) {
      // Update the cart with the new item
      $cart = $_SESSION['cart'] ?? [];
      $cart[] = ['product_id' => $product_id, 'quantity' => $quantity];
      $_SESSION['cart'] = $cart;

      return true;
    }

    return false;
  }

  /**
   * Remove a product from the cart.
   *
   * @param int $product_id ID of the product to remove from the cart.
   */
  public function removeFromCart($product_id) {
    // Get the current cart
    $cart = $_SESSION['cart'] ?? [];

    // Check if the product exists in the cart
    foreach ($cart as $key => $item) {
      if ($item['product_id'] == $product_id) {
        unset($cart[$key]);
        break;
      }
    }

    // Update the session with the updated cart
    $_SESSION['cart'] = $cart;

    return true;
  }

  /**
   * Process a purchase.
   *
   * @param int $customer_name Name of the customer making the purchase.
   */
  public function processPurchase($customer_name) {
    // Get the current cart
    $cart = $_SESSION['cart'] ?? [];

    // Calculate the total cost of the order
    $total_cost = 0;
    foreach ($cart as $item) {
      $stmt = $this->db->prepare('SELECT price FROM products WHERE id = :id');
      $stmt->execute([':id' => $item['product_id']]);
      $price = $stmt->fetch()['price'];
      $total_cost += $price * $item['quantity'];
    }

    // Create a new order in the database
    $stmt = $this->db->prepare('INSERT INTO orders (customer_name, total_cost) VALUES (:customer_name, :total_cost)');
    $stmt->execute([':customer_name' => $customer_name, ':total_cost' => $total_cost]);

    // Empty the cart
    $_SESSION['cart'] = [];

    return true;
  }
}


// Create a new instance of the Purchase class
$purchase = new Purchase();

// Add a product to the cart
$purchase->addToCart(1, 2); // Product ID 1, quantity 2

// Remove a product from the cart
$purchase->removeFromCart(1);

// Process a purchase
$purchase->processPurchase('John Doe');


<?php

define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

?>


<?php

function getProducts() {
    $conn = mysqli_connect(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
    if (!$conn) {
        die("Connection failed: " . mysqli_connect_error());
    }
    
    $query = "SELECT * FROM products";
    $result = mysqli_query($conn, $query);
    
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<div>" . $row['name'] . ": $" . $row['price'] . "</div>";
    }
    
    mysqli_close($conn);
}

function getUserOrders() {
    $conn = mysqli_connect(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
    if (!$conn) {
        die("Connection failed: " . mysqli_connect_error());
    }
    
    $query = "SELECT * FROM orders WHERE user_id = '" . $_SESSION['id'] . "'";
    $result = mysqli_query($conn, $query);
    
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<div>" . $row['total'] . "</div>";
    }
    
    mysqli_close($conn);
}

function addProductToCart() {
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'][] = array('product_id' => $_POST['product_id'], 'quantity' => $_POST['quantity']);
    } else {
        $_SESSION['cart'] = array(array('product_id' => $_POST['product_id'], 'quantity' => $_POST['quantity']));
    }
}

function checkout() {
    if (!isset($_SESSION['id'])) {
        echo "Please login to checkout.";
        return;
    }
    
    $conn = mysqli_connect(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
    if (!$conn) {
        die("Connection failed: " . mysqli_connect_error());
    }
    
    $query = "INSERT INTO orders (user_id, total) VALUES ('" . $_SESSION['id'] . "', '" . $_POST['total'] . "')";
    mysqli_query($conn, $query);
    
    $order_id = mysqli_insert_id($conn);
    
    foreach ($_SESSION['cart'] as $item) {
        $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('" . $order_id . "', '" . $item['product_id'] . "', '" . $item['quantity'] . "')";
        mysqli_query($conn, $query);
    }
    
    unset($_SESSION['cart']);
    
    echo "Order placed successfully.";
    
    mysqli_close($conn);
}

?>


<?php

require_once 'config.php';
require_once 'functions.php';

if (isset($_POST['register'])) {
    $username = $_POST['username'];
    $email = $_POST['email'];
    $password = password_hash($_POST['password'], PASSWORD_DEFAULT);
    
    $conn = mysqli_connect(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
    if (!$conn) {
        die("Connection failed: " . mysqli_connect_error());
    }
    
    $query = "INSERT INTO users (username, email, password) VALUES ('" . $username . "', '" . $email . "', '" . $password . "')";
    mysqli_query($conn, $query);
    
    echo "User registered successfully.";
}

if (isset($_POST['login'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];
    
    $conn = mysqli_connect(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
    if (!$conn) {
        die("Connection failed: " . mysqli_connect_error());
    }
    
    $query = "SELECT * FROM users WHERE username = '" . $username . "'";
    $result = mysqli_query($conn, $query);
    
    while ($row = mysqli_fetch_assoc($result)) {
        if (password_verify($password, $row['password'])) {
            $_SESSION['id'] = $row['id'];
        }
    }
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shop</title>
</head>
<body>

<h1>Register</h1>

<form action="" method="post">
    <input type="text" name="username" placeholder="Username"><br><br>
    <input type="email" name="email" placeholder="Email"><br><br>
    <input type="password" name="password" placeholder="Password"><br><br>
    <button type="submit" name="register">Register</button>
</form>

<h1>Login</h1>

<form action="" method="post">
    <input type="text" name="username" placeholder="Username"><br><br>
    <input type="password" name="password" placeholder="Password"><br><br>
    <button type="submit" name="login">Login</button>
</form>

<?php

if (isset($_SESSION['id'])) {
    echo "<h1>Welcome " . $_SESSION['username'] . "</h1>";
}

?>

<h1>Products</h1>

<div id="products"></div>

<script>
    fetch('getProducts.php')
        .then(response => response.text())
        .then(data => document.getElementById('products').innerHTML = data);
</script>

<?php

if (isset($_SESSION['id'])) {
    echo "<button onclick='location.href=\"cart.php\"'>View Cart</button>";
}

?>

</body>
</html>


<?php

require_once 'config.php';
require_once 'functions.php';

?>

<h1>Cart</h1>

<div id="cart"></div>

<script>
    fetch('getCart.php')
        .then(response => response.text())
        .then(data => document.getElementById('cart').innerHTML = data);
    
    function addProductToCart(product_id, quantity) {
        fetch('addProductToCart.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                product_id,
                quantity
            })
        })
        .then(response => response.text())
        .then(data => document.getElementById('cart').innerHTML = data);
    }
</script>

<?php

if (isset($_SESSION['id'])) {
    echo "<button onclick='location.href=\"checkout.php\"'>Checkout</button>";
}

?>

</body>
</html>


<?php

require_once 'config.php';
require_once 'functions.php';

if (isset($_POST['place_order'])) {
    $total = $_POST['total'];
    
    checkout();
}

?>

<h1>Checkout</h1>

<form action="" method="post">
    <input type="hidden" name="total" value="<?php echo $_SESSION['cart_total']; ?>">
    <button type="submit" name="place_order">Place Order</button>
</form>

<?php

if (isset($_SESSION['id'])) {
    echo "<button onclick='location.href=\"cart.php\"'>View Cart</button>";
}

?>

</body>
</html>


<?php

require_once 'config.php';
require_once 'functions.php';

if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
    addProductToCart();
}

?>


<?php

require_once 'config.php';
require_once 'functions.php';

if (isset($_SESSION['cart'])) {
    $cart_total = 0;
    
    foreach ($_SESSION['cart'] as $item) {
        $query = "SELECT price FROM products WHERE id = '" . $item['product_id'] . "'";
        $result = mysqli_query($conn, $query);
        
        while ($row = mysqli_fetch_assoc($result)) {
            $cart_total += $row['price'] * $item['quantity'];
        }
    }
    
    echo "Cart Total: $" . $cart_total;
} else {
    echo "No products in cart.";
}

?>


<?php

// Configuration
require_once 'config.php';

// Connect to database
$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to display products
function displayProducts() {
    global $conn;
    $sql = "SELECT * FROM products";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        echo "<table>";
        while($row = $result->fetch_assoc()) {
            echo "<tr><td>" . $row["name"] . "</td><td>" . $row["price"] . "</td></tr>";
        }
        echo "</table>";
    } else {
        echo "0 results";
    }

    $conn->close();
}

// Function to add product to cart
function addToCart($product_id) {
    global $conn;
    session_start();

    if (isset($_SESSION["cart"])) {
        array_push($_SESSION["cart"], $product_id);
    } else {
        $_SESSION["cart"] = array($product_id);
    }

    header("Location: " . $_SERVER['REQUEST_URI']);
}

// Function to checkout
function checkout() {
    global $conn;
    session_start();

    if (!isset($_SESSION["cart"])) {
        echo "Cart is empty.";
        return;
    }

    // Calculate total cost
    $total = 0;
    foreach ($_SESSION["cart"] as $product_id) {
        $sql = "SELECT price FROM products WHERE id = '$product_id'";
        $result = $conn->query($sql);
        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                $total += $row["price"];
            }
        }
    }

    // Insert order into database
    $sql = "INSERT INTO orders (user_id, total) VALUES ('$_SESSION[user_id]', '$total')";
    if ($conn->query($sql)) {
        echo "Order placed successfully.";
    } else {
        echo "Error: " . $conn->error;
    }

    // Clear cart
    unset($_SESSION["cart"]);
}

?>


<?php

// Start session
session_start();

?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purchase Functionality</title>
</head>
<body>

    <?php displayProducts(); ?>

    <form action="" method="post">
        <input type="hidden" name="product_id" value="">
        <button type="submit">Add to Cart</button>
    </form>

    <a href="?checkout=true">Checkout</a>

<?php
if (isset($_GET["checkout"])) {
    checkout();
}
?>
</body>
</html>


<?php

// Check if form has been submitted
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // Get product ID from URL or session
  $productId = $_GET['product_id'] ?? $_SESSION['selected_product'];

  // Get product details from database
  $product = mysqli_query($conn, "SELECT * FROM products WHERE id = '$productId'");

  if ($product->num_rows > 0) {
    $row = $product->fetch_assoc();

    // Validate form data
    if (isset($_POST['quantity']) && is_numeric($_POST['quantity'])) {
      $quantity = $_POST['quantity'];

      // Calculate total price
      $totalPrice = $row['price'] * $quantity;

      // Insert order into database
      mysqli_query($conn, "INSERT INTO orders (customer_name, product_id, quantity, total_price) VALUES ('".$_SESSION['username']."', '$productId', '$quantity', '$totalPrice')");

      // Redirect to confirmation page
      header('Location: purchase-confirmation.php');
      exit();
    } else {
      echo '<p>Error: Invalid quantity.</p>';
    }
  } else {
    echo '<p>Error: Product not found.</p>';
  }
}

?>

<!-- HTML Form -->
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity" min="1"><br><br>
  <input type="hidden" name="product_id" value="<?php echo $productId; ?>">
  <button type="submit">Purchase</button>
</form>


<?php

// Database configuration
$host = 'localhost';
$db_name = 'purchase_functionality';
$username = 'root';
$password = '';

try {
    $conn = new PDO("mysql:host=$host;dbname=$db_name", $username, $password);
} catch(PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

?>


<?php

// User authentication function
function authenticate($username, $password) {
    global $conn;

    $stmt = $conn->prepare("SELECT * FROM users WHERE username = :username");
    $stmt->bindParam(':username', $username);
    $stmt->execute();
    $user = $stmt->fetch();

    if ($user && password_verify($password, $user['password'])) {
        return true;
    }

    return false;
}

?>


<?php

// Product listing function
function list_products() {
    global $conn;

    $products = array();
    $stmt = $conn->prepare("SELECT * FROM products");
    $stmt->execute();
    $products = $stmt->fetchAll();

    return $products;
}

?>


<?php

// Cart management functions
function add_to_cart($user_id, $product_id) {
    global $conn;

    // Check if product already exists in cart
    $stmt = $conn->prepare("SELECT * FROM order_items WHERE user_id = :user_id AND product_id = :product_id");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    if ($stmt->fetch()) {
        // Product already exists, update quantity
        $stmt = $conn->prepare("UPDATE order_items SET quantity = quantity + 1 WHERE user_id = :user_id AND product_id = :product_id");
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
    } else {
        // Add new product to cart
        $stmt = $conn->prepare("INSERT INTO order_items (user_id, product_id, quantity) VALUES (:user_id, :product_id, 1)");
        $stmt->bindParam(':user_id', $user_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->execute();
    }
}

function remove_from_cart($user_id, $product_id) {
    global $conn;

    // Remove product from cart
    $stmt = $conn->prepare("DELETE FROM order_items WHERE user_id = :user_id AND product_id = :product_id");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
}

?>


<?php

// Order placement function
function place_order($user_id) {
    global $conn;

    // Get user's cart items
    $stmt = $conn->prepare("SELECT * FROM order_items WHERE user_id = :user_id");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    $cart_items = $stmt->fetchAll();

    // Create new order
    $order_id = uniqid();
    $order_date = date('Y-m-d H:i:s');
    $stmt = $conn->prepare("INSERT INTO orders (id, user_id, order_date) VALUES (:order_id, :user_id, :order_date)");
    $stmt->bindParam(':order_id', $order_id);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':order_date', $order_date);
    $stmt->execute();

    // Add cart items to order
    foreach ($cart_items as $item) {
        $stmt = $conn->prepare("INSERT INTO order_items (id, order_id, product_id, quantity) VALUES (:id, :order_id, :product_id, :quantity)");
        $stmt->bindParam(':id', uniqid());
        $stmt->bindParam(':order_id', $order_id);
        $stmt->bindParam(':product_id', $item['product_id']);
        $stmt->bindParam(':quantity', $item['quantity']);
        $stmt->execute();
    }
}

?>


include 'config.php';
include 'user_auth.php';

$username = $_POST['username'];
$password = $_POST['password'];

if (authenticate($username, $password)) {
    echo "Login successful!";
} else {
    echo "Invalid username or password.";
}


include 'config.php';
include 'product.php';

$products = list_products();

echo "<ul>";
foreach ($products as $product) {
    echo "<li>$product['name'] - $product['price]</li>";
}
echo "</ul>";


include 'config.php';
include 'cart.php';

$user_id = $_SESSION['user_id'];

// Add product to cart
add_to_cart($user_id, 1);

// Remove product from cart
remove_from_cart($user_id, 1);


include 'config.php';
include 'order.php';

$user_id = $_SESSION['user_id'];

place_order($user_id);


<?php
class Database {
  private $host;
  private $db_name;
  private $username;
  private $password;

  public function __construct() {
    $this->host = 'localhost';
    $this->db_name = 'store_database';
    $this->username = 'store_user';
    $this->password = 'store_password';

    try {
      $this->conn = new PDO("mysql:host=$this->host;dbname=$this->db_name", $this->username, $this->password);
      $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch(PDOException $e) {
      echo "Connection failed: " . $e->getMessage();
    }
  }

  public function query($query, $params = array()) {
    try {
      $stmt = $this->conn->prepare($query);
      $stmt->execute($params);
      return $stmt;
    } catch(PDOException $e) {
      echo "Error: " . $e->getMessage();
    }
  }

  public function fetchAll($query, $params = array()) {
    try {
      $stmt = $this->conn->prepare($query);
      $stmt->execute($params);
      return $stmt->fetchAll();
    } catch(PDOException $e) {
      echo "Error: " . $e->getMessage();
    }
  }

  public function close() {
    $this->conn = null;
  }
}
?>


<?php
require 'database.php';

if (isset($_POST['product_id']) && isset($_POST['quantity'])) {

  // Authenticate user
  if (!isset($_SESSION['user_id'])) {
    echo "Please login first.";
    return;
  }

  $db = new Database();
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  // Get product information
  $query = 'SELECT * FROM products WHERE id = :id';
  $params = array(':id' => $product_id);
  $result = $db->query($query, $params);

  if ($result) {
    $product = $result->fetch();

    // Validate quantity and price
    if ($quantity <= 0 || $product['price'] < 0) {
      echo "Invalid quantity or price.";
      return;
    }

    // Create order
    $query = 'INSERT INTO orders (user_id, product_name, price, quantity) VALUES (:user_id, :product_name, :price, :quantity)';
    $params = array(
      ':user_id' => $_SESSION['user_id'],
      ':product_name' => $product['name'],
      ':price' => $product['price'] * $quantity,
      ':quantity' => $quantity
    );
    $db->query($query, $params);

    echo "Order created successfully.";
  } else {
    echo "Error retrieving product information.";
  }
}

// Close database connection
$db = new Database();
$db->close();

?>


// Database configuration
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'store');

// Connect to database
function connectToDatabase() {
  $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}


// Get products from database
function getProducts() {
  $conn = connectToDatabase();
  $sql = "SELECT * FROM products";
  $result = $conn->query($sql);
  while ($row = $result->fetch_assoc()) {
    echo "<li>" . $row['name'] . " - $" . $row['price'] . "</li>";
  }
}

// Add product to cart
function addProductToCart($userId, $productId) {
  $conn = connectToDatabase();
  $sql = "INSERT INTO cart (user_id, product_id) VALUES (?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("ii", $userId, $productId);
  if ($stmt->execute()) {
    echo "Product added to cart successfully.";
  } else {
    echo "Error adding product to cart.";
  }
}


// View products in cart
function viewCart() {
  $conn = connectToDatabase();
  $sql = "SELECT * FROM cart WHERE user_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $_SESSION['user_id']);
  if ($stmt->execute()) {
    $result = $stmt->get_result();
    while ($row = $result->fetch_assoc()) {
      echo "<li>" . $row['product_id'] . " - Quantity: " . $row['quantity'] . "</li>";
    }
  } else {
    echo "Error viewing cart.";
  }
}

// Remove product from cart
function removeProductFromCart($cartId) {
  $conn = connectToDatabase();
  $sql = "DELETE FROM cart WHERE id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $cartId);
  if ($stmt->execute()) {
    echo "Product removed from cart successfully.";
  } else {
    echo "Error removing product from cart.";
  }
}


// Calculate total price of order
function calculateTotal() {
  $conn = connectToDatabase();
  $sql = "SELECT * FROM cart WHERE user_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $_SESSION['user_id']);
  if ($stmt->execute()) {
    $result = $stmt->get_result();
    $total = 0;
    while ($row = $result->fetch_assoc()) {
      $total += $row['quantity'] * getProductIdPrice($row['product_id']);
    }
    return $total;
  } else {
    echo "Error calculating total.";
    return 0;
  }
}

// Get product price
function getProductIdPrice($productId) {
  $conn = connectToDatabase();
  $sql = "SELECT price FROM products WHERE id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $productId);
  if ($stmt->execute()) {
    $result = $stmt->get_result();
    return $result->fetch_assoc()['price'];
  } else {
    echo "Error getting product price.";
    return 0;
  }
}

// Make payment
function makePayment() {
  // Process payment here (e.g. Stripe, PayPal)
  // For this example, we'll just echo a success message
  echo "Payment processed successfully!";
}


session_start();

// Add product to cart
if (isset($_POST['add_product'])) {
  addProductToCart($_SESSION['user_id'], $_POST['product_id']);
}

// View products in cart
if (isset($_GET['view_cart'])) {
  viewCart();
}

// Remove product from cart
if (isset($_POST['remove_product'])) {
  removeProductFromCart($_POST['cart_id']);
}

// Calculate total price of order
if (isset($_POST['calculate_total'])) {
  echo calculateTotal();
}

// Make payment
if (isset($_POST['make_payment'])) {
  makePayment();
}


<?php

// Database configuration
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'store');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

?>


<?php
require_once 'config.php';

if (isset($_POST['username']) && isset($_POST['email']) && isset($_POST['password'])) {
  $username = $_POST['username'];
  $email = $_POST['email'];
  $password = password_hash($_POST['password'], PASSWORD_DEFAULT);

  $query = "INSERT INTO users SET username='$username', email='$email', password='$password'";
  $conn->query($query);
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Register</title>
</head>
<body>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  Username: <input type="text" name="username"><br><br>
  Email: <input type="email" name="email"><br><br>
  Password: <input type="password" name="password"><br><br>
  <input type="submit" value="Register">
</form>

</body>
</html>


<?php
require_once 'config.php';

if (isset($_POST['username']) && isset($_POST['password'])) {
  $username = $_POST['username'];
  $password = $_POST['password'];

  $query = "SELECT * FROM users WHERE username='$username' AND password='".password_verify($password, get_password_from_database())."'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    session_start();
    $_SESSION['username'] = $username;
    header('Location: index.php');
  } else {
    echo 'Invalid username or password';
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Login</title>
</head>
<body>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  Username: <input type="text" name="username"><br><br>
  Password: <input type="password" name="password"><br><br>
  <input type="submit" value="Login">
</form>

</body>
</html>


<?php
require_once 'config.php';

// Get products from database
$query = "SELECT * FROM products";
$result = $conn->query($query);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Index</title>
</head>
<body>

<h1>Welcome, <?php echo $_SESSION['username']; ?></h1>

<!-- Display products -->
<table border="1">
  <tr>
    <th>Name</th>
    <th>Price</th>
  </tr>
  <?php while ($row = $result->fetch_assoc()) { ?>
  <tr>
    <td><?php echo $row['name']; ?></td>
    <td><?php echo $row['price']; ?></td>
  </tr>
  <?php } ?>
</table>

<!-- Add to cart form -->
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  Product ID: <input type="text" name="product_id"><br><br>
  Quantity: <input type="number" name="quantity"><br><br>
  <input type="submit" value="Add to Cart">
</form>

<!-- Display cart -->
<h2>Cart:</h2>
<table border="1">
  <?php
  if (isset($_SESSION['cart'])) {
    $cart = $_SESSION['cart'];
    foreach ($cart as $item) {
      echo "<tr><td>" . $item['name'] . "</td><td>" . $item['price'] . " x " . $item['quantity'] . "</td></tr>";
    }
  }
  ?>
</table>

</body>
</html>


<?php
require_once 'config.php';

// Update cart in session
if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  // Check if product is already in cart
  foreach ($_SESSION['cart'] as &$item) {
    if ($item['id'] == $product_id) {
      $item['quantity'] += $quantity;
      break;
    }
  }

  // Add product to cart if not already there
  else {
    $_SESSION['cart'][] = array('id' => $product_id, 'name' => get_product_name_from_database($product_id), 'price' => get_product_price_from_database($product_id), 'quantity' => $quantity);
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Cart</title>
</head>
<body>

<h1>Cart:</h1>

<!-- Display cart -->
<table border="1">
  <?php
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $item) {
      echo "<tr><td>" . $item['name'] . "</td><td>" . $item['price'] . " x " . $item['quantity'] . "</td></tr>";
    }
  }
  ?>
</table>

<!-- Checkout form -->
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="submit" value="Checkout">
</form>

</body>
</html>


<?php
require_once 'config.php';

// Process checkout
if (isset($_POST['cart'])) {
  $cart = $_SESSION['cart'];

  // Calculate total cost
  $total_cost = 0;
  foreach ($cart as $item) {
    $total_cost += $item['price'] * $item['quantity'];
  }

  // Update database with order details
  $query = "INSERT INTO orders SET username='" . $_SESSION['username'] . "', total_cost=" . $total_cost;
  $conn->query($query);

  // Clear cart session variable
  unset($_SESSION['cart']);
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Checkout</title>
</head>
<body>

<h1>Checkout:</h1>

<!-- Display order summary -->
<table border="1">
  <?php
  if (isset($_POST['cart'])) {
    echo "<tr><td>Total Cost:</td><td>" . $total_cost . "</td></tr>";
  }
  ?>
</table>

<!-- Process payment form -->
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="submit" value="Process Payment">
</form>

</body>
</html>


<?php
$config = array(
    'dbHost' => 'localhost',
    'dbName' => 'your_database_name',
    'dbUser' => 'your_username',
    'dbPassword' => 'your_password'
);
?>


<?php
require_once 'config.php';

function register($username, $email, $password) {
    global $config;
    $conn = new mysqli($config['dbHost'], $config['dbUser'], $config['dbPassword'], $config['dbName']);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    
    // Hash password
    $hashed_password = password_hash($password, PASSWORD_DEFAULT);

    $sql = "INSERT INTO users (username, email, password) VALUES (?, ?, ?)";
    if (!$stmt = $conn->prepare($sql)) {
        die('Prepare failed: ' . htmlspecialchars($conn->error));
    }
    
    // Bind parameters
    if (!mysqli_stmt_bind_param($stmt, 'sss', $username, $email, $hashed_password)) {
        die('Bind failed: ' . htmlspecialchars(mysqli_stmt_error($stmt)));
    }
    
    if (mysqli_stmt_execute($stmt)) {
        mysqli_stmt_close($stmt);
        return true;
    } else {
        echo 'Execute failed: ' . htmlspecialchars($conn->error);
        return false;
    }

    $conn->close();
}

function login($username, $password) {
    global $config;
    $conn = new mysqli($config['dbHost'], $config['dbUser'], $config['dbPassword'], $config['dbName']);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    
    $sql = "SELECT * FROM users WHERE username = ?";
    if (!$stmt = $conn->prepare($sql)) {
        die('Prepare failed: ' . htmlspecialchars($conn->error));
    }

    // Bind parameters
    if (!mysqli_stmt_bind_param($stmt, 's', $username)) {
        die('Bind failed: ' . htmlspecialchars(mysqli_stmt_error($stmt)));
    }
    
    if (mysqli_stmt_execute($stmt)) {
        mysqli_stmt_store_result($stmt);
        
        if (mysqli_stmt_num_rows($stmt) == 1) {
            mysqli_stmt_bind_result($stmt, $hashed_password);
            mysqli_stmt_fetch($stmt);
            
            // Verify password
            if (password_verify($password, $hashed_password)) {
                return true;
            } else {
                echo "Wrong password";
                return false;
            }
        } else {
            echo 'No such user';
            return false;
        }

        mysqli_stmt_close($stmt);
    } else {
        echo 'Execute failed: ' . htmlspecialchars($conn->error);
        return false;
    }

    $conn->close();
}

function logout() {
    // For simplicity, we don't handle the logout process in this example.
}
?>


<?php
require_once 'config.php';
require_once 'auth.php';

// Assume a form with user's id, product name, and price is submitted.

function purchase($user_id, $product_name, $price) {
    global $config;
    $conn = new mysqli($config['dbHost'], $config['dbUser'], $config['dbPassword'], $config['dbName']);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    
    // Insert into purchases table
    $sql = "INSERT INTO purchases (user_id, product_name, price) VALUES (?, ?, ?)";
    if (!$stmt = $conn->prepare($sql)) {
        die('Prepare failed: ' . htmlspecialchars($conn->error));
    }

    // Bind parameters
    if (!mysqli_stmt_bind_param($stmt, 'iis', $user_id, $product_name, $price)) {
        die('Bind failed: ' . htmlspecialchars(mysqli_stmt_error($stmt)));
    }
    
    if (mysqli_stmt_execute($stmt)) {
        mysqli_stmt_close($stmt);
        return true;
    } else {
        echo 'Execute failed: ' . htmlspecialchars($conn->error);
        return false;
    }

    $conn->close();
}

// To use the purchase functionality, you can call it from a form submit handler.
if (isset($_POST['submit'])) {
    if (login($_POST['username'], $_POST['password'])) {
        // User is logged in
        $purchase_result = purchase($_SESSION['user_id'], $_POST['product_name'], $_POST['price']);
        
        // Process the result as needed...
    } else {
        echo "Login failed";
    }
}
?>


// Configuration
require_once 'config.php';

// Database Connection
$db = new mysqli(HOST, USERNAME, PASSWORD, DATABASE);

// Check connection
if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

class Cart {
    private $db;

    public function __construct() {
        $this->db = $GLOBALS['db'];
    }

    // Get all products from database
    public function getProducts() {
        $query = "SELECT * FROM products";
        $result = $this->db->query($query);
        return $result;
    }

    // Add product to cart
    public function addProduct($user_id, $product_id) {
        $quantity = 1; // Default quantity

        // Check if product is already in cart
        $existingProductQuery = "SELECT * FROM carts WHERE user_id = '$user_id' AND product_id = '$product_id'";
        $existingResult = $this->db->query($existingProductQuery);

        if ($existingResult->num_rows > 0) {
            // Update existing product quantity
            $updateQuantityQuery = "UPDATE carts SET quantity = quantity + '$quantity' WHERE user_id = '$user_id' AND product_id = '$product_id'";
            $this->db->query($updateQuantityQuery);
        } else {
            // Insert new product into cart
            $insertProductQuery = "INSERT INTO carts (user_id, product_id, quantity) VALUES ('$user_id', '$product_id', '$quantity')";
            $this->db->query($insertProductQuery);
        }
    }

    // Remove product from cart
    public function removeProduct($user_id, $product_id) {
        // Check if product exists in cart
        $existingProductQuery = "SELECT * FROM carts WHERE user_id = '$user_id' AND product_id = '$product_id'";
        $existingResult = $this->db->query($existingProductQuery);

        if ($existingResult->num_rows > 0) {
            // Delete product from cart
            $deleteProductQuery = "DELETE FROM carts WHERE user_id = '$user_id' AND product_id = '$product_id'";
            $this->db->query($deleteProductQuery);
        }
    }

    // Update product quantity in cart
    public function updateQuantity($user_id, $product_id, $new_quantity) {
        // Check if product exists in cart and is being updated with a valid new quantity
        if ($existingResult = $this->db->query("SELECT * FROM carts WHERE user_id = '$user_id' AND product_id = '$product_id'")) {
            if ($existingResult->num_rows > 0 && (int)$new_quantity >= 1) {
                // Update product quantity in cart
                $updateQuantityQuery = "UPDATE carts SET quantity = '$new_quantity' WHERE user_id = '$user_id' AND product_id = '$product_id'";
                $this->db->query($updateQuantityQuery);
            }
        }
    }

    // Calculate total cost of cart
    public function calculateTotalCost() {
        $totalCost = 0;

        // Query cart for products and their quantities
        if ($cartProducts = $this->db->query("SELECT product_id, quantity FROM carts WHERE user_id = '$user_id'")) {
            while ($row = $cartProducts->fetch_assoc()) {
                // Fetch corresponding product price from database
                $productPriceQuery = "SELECT price FROM products WHERE id = '" . (int)$row['product_id'] . "'";
                if ($priceResult = $this->db->query($productPriceQuery)) {
                    if ($priceRow = $priceResult->fetch_assoc()) {
                        // Add product cost to total cost
                        $totalCost += (float)$priceRow['price'] * $row['quantity'];
                    }
                }
            }

            return $totalCost;
        } else {
            return null; // No products in cart
        }
    }
}


require_once 'cart.php';

// Initialize Cart class instance
$cart = new Cart();

// User ID
$user_id = 1;

// Product IDs to add/remove/update
$product_ids = array(1, 2, 3);

// Quantities for products 2 and 3 (optional)
$new_quantities = array(null, 2, 3);

// Add/Remove products from cart
foreach ($product_ids as $i => $id) {
    if ($new_quantities[$i]) {
        // Update quantity
        $cart->updateQuantity($user_id, $id, $new_quantities[$i]);
    } else {
        // Add or remove product based on existence in cart
        if (isset($existingProducts[$id])) {
            // Remove product from cart
            $cart->removeProduct($user_id, $id);
        } else {
            // Add product to cart
            $cart->addProduct($user_id, $id);
        }
    }
}

// Calculate total cost of cart
$totalCost = $cart->calculateTotalCost();

echo "Total Cost: $" . number_format((float)$totalCost, 2);

// Display products in cart (optional)
if ($cartProducts = $cart->db->query("SELECT * FROM carts WHERE user_id = '$user_id'")) {
    echo "<ul>";
    while ($row = $cartProducts->fetch_assoc()) {
        echo "<li>Product ID: " . $row['product_id'] . ", Quantity: " . $row['quantity'] . "</li>";
    }
    echo "</ul>";
}


<?php

// Configuration settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function getProducts() {
  global $conn;
  $query = "SELECT * FROM products";
  $result = $conn->query($query);
  return $result->fetch_all(MYSQLI_ASSOC);
}

function processOrder($userId, $products) {
  global $conn;
  
  // Insert order into database
  $total = 0;
  foreach ($products as $product) {
    $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1;
    $price = $product['price'];
    $subtotal = $quantity * $price;
    $total += $subtotal;
    
    // Insert order item into database
    $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (NULL, ?, ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param('ii', $product['id'], $quantity);
    $stmt->execute();
  }
  
  // Update total in database
  $query = "INSERT INTO orders (user_id, total) VALUES (?, ?)";
  $stmt = $conn->prepare($query);
  $stmt->bind_param('ii', $userId, $total);
  $stmt->execute();
}

if ($_SERVER['REQUEST_METHOD'] == 'GET') {
  // Display products
  $products = getProducts();
} elseif ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // Process order
  $userId = $_SESSION['user_id'];
  $products = $_POST['products'];
  
  processOrder($userId, $products);
}

?>


<?php
// Database connection settings
$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'example';

// Create a new PDO instance
$conn = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUsername, $dbPassword);
?>


<?php
require_once 'config.php';

if (isset($_POST['register'])) {
  // Get form data
  $name = $_POST['name'];
  $email = $_POST['email'];
  $password = $_POST['password'];

  // Hash password
  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);

  // Insert new user into database
  $stmt = $conn->prepare("INSERT INTO users (name, email, password) VALUES (:name, :email, :password)");
  $stmt->bindParam(':name', $name);
  $stmt->bindParam(':email', $email);
  $stmt->bindParam(':password', $hashedPassword);
  $stmt->execute();

  // Redirect to login page
  header('Location: login.php');
}
?>


<?php
require_once 'config.php';

if (isset($_POST['login'])) {
  // Get form data
  $email = $_POST['email'];
  $password = $_POST['password'];

  // Query database for matching email and password
  $stmt = $conn->prepare("SELECT * FROM users WHERE email = :email");
  $stmt->bindParam(':email', $email);
  $stmt->execute();
  $user = $stmt->fetch();

  if ($user && password_verify($password, $user['password'])) {
    // Login successful
    $_SESSION['id'] = $user['id'];
    header('Location: index.php');
  } else {
    echo 'Invalid email or password';
  }
}
?>


<?php
require_once 'config.php';

// Get all products from database
$stmt = $conn->prepare("SELECT * FROM products");
$stmt->execute();
$products = $stmt->fetchAll();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Product Listing</title>
</head>
<body>

  <?php foreach ($products as $product): ?>
    <h2><?php echo $product['name']; ?></h2>
    <p><?php echo $product['description']; ?></p>
    <p>$<?php echo $product['price']; ?></p>
    <form action="cart.php" method="post">
      <input type="hidden" name="product_id" value="<?php echo $product['id']; ?>">
      <button type="submit">Add to Cart</button>
    </form>
  <?php endforeach; ?>
</body>
</html>


<?php
require_once 'config.php';

if (isset($_POST['add_to_cart'])) {
  // Get form data
  $product_id = $_POST['product_id'];

  // Insert new product into cart
  $stmt = $conn->prepare("INSERT INTO carts (user_id, product_id) VALUES (:user_id, :product_id)");
  $stmt->bindParam(':user_id', $_SESSION['id']);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
}

// Get cart contents
$stmt = $conn->prepare("SELECT products.name, products.description, products.price FROM carts INNER JOIN products ON carts.product_id = products.id WHERE carts.user_id = :user_id");
$stmt->bindParam(':user_id', $_SESSION['id']);
$stmt->execute();
$cart_contents = $stmt->fetchAll();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Cart Contents</title>
</head>
<body>

  <?php foreach ($cart_contents as $item): ?>
    <h2><?php echo $item['name']; ?></h2>
    <p><?php echo $item['description']; ?></p>
    <p>$<?php echo $item['price']; ?></p>
  <?php endforeach; ?>
</body>
</html>


<?php
require_once 'config.php';

// Get cart contents
$stmt = $conn->prepare("SELECT products.name, products.description, products.price FROM carts INNER JOIN products ON carts.product_id = products.id WHERE carts.user_id = :user_id");
$stmt->bindParam(':user_id', $_SESSION['id']);
$stmt->execute();
$cart_contents = $stmt->fetchAll();

// Calculate total cost
$total_cost = 0;
foreach ($cart_contents as $item) {
  $total_cost += $item['price'];
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Checkout</title>
</head>
<body>

  <?php foreach ($cart_contents as $item): ?>
    <h2><?php echo $item['name']; ?></h2>
    <p><?php echo $item['description']; ?></p>
    <p>$<?php echo $item['price']; ?></p>
  <?php endforeach; ?>

  <form action="https://www.paypal.com/cgi-bin/webscr" method="post">
    <!-- PayPal form fields -->
    <input type="hidden" name="cmd" value="_xclick">
    <input type="hidden" name="business" value="<?php echo 'your_paypal_email'; ?>">
    <input type="hidden" name="item_name" value="<?php echo 'Product 1'; ?>">
    <input type="hidden" name="amount" value="<?php echo $total_cost; ?>">
    <button type="submit">Pay with PayPal</button>
  </form>

</body>
</html>


<?php

// Connect to database
$dsn = 'mysql:host=localhost;dbname=store';
$username = 'root';
$password = '';
$dbh = new PDO($dsn, $username, $password);

// Function to add product to order
function add_product_to_order($order_id, $product_id, $quantity) {
  global $dbh;
  
  // Check if product exists and has enough stock
  $stmt = $dbh->prepare('SELECT * FROM products WHERE id = :id');
  $stmt->execute([':id' => $product_id]);
  $product = $stmt->fetch();
  
  if ($product['stock'] < $quantity) {
    echo 'Not enough stock!';
    return false;
  }
  
  // Update product stock
  $stmt = $dbh->prepare('UPDATE products SET stock = stock - :quantity WHERE id = :id');
  $stmt->execute([':quantity' => $quantity, ':id' => $product_id]);
  
  // Add order item to database
  $stmt = $dbh->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');
  $stmt->execute([':order_id' => $order_id, ':product_id' => $product_id, ':quantity' => $quantity]);
  
  return true;
}

// Function to create new order
function create_new_order($customer_name) {
  global $dbh;
  
  // Get current date and time
  $date = date('Y-m-d');
  
  // Insert new order into database
  $stmt = $dbh->prepare('INSERT INTO orders (customer_name, order_date) VALUES (:customer_name, :order_date)');
  $stmt->execute([':customer_name' => $customer_name, ':order_date' => $date]);
  
  return $dbh->lastInsertId();
}

// Function to display products and add to cart
function display_products_and_add_to_cart() {
  global $dbh;
  
  // Get all products from database
  $stmt = $dbh->query('SELECT * FROM products');
  $products = $stmt->fetchAll();
  
  // Display products
  echo '<h1>Products</h1>';
  foreach ($products as $product) {
    echo '<p>' . $product['name'] . ' - ' . $product['price'] . '</p>';
    
    // Add button to add product to cart
    echo '<button onclick="add_to_cart(' . $product['id'] . ')">Add to Cart</button>';
  }
  
  echo '<script>function add_to_cart(product_id) { window.location.href = "?product_id=' . $product_id . '"; }</script>';
}

// Function to display cart and checkout
function display_cart_and_checkout() {
  global $dbh;
  
  // Get all order items for current user
  $stmt = $dbh->query('SELECT * FROM order_items');
  $order_items = $stmt->fetchAll();
  
  // Display cart
  echo '<h1>Cart</h1>';
  foreach ($order_items as $item) {
    echo '<p>' . $item['product_name'] . ' - Quantity: ' . $item['quantity'] . '</p>';
    
    // Add button to remove item from cart
    echo '<button onclick="remove_from_cart(' . $item['id'] . ')">Remove</button>';
  }
  
  echo '<script>function remove_from_cart(order_item_id) { window.location.href = "?order_item_id=' . $order_item_id . '"; }</script>';
  
  // Add checkout button
  echo '<button onclick="checkout()">Checkout</button>';
}

// Function to process payment and confirm order
function process_payment_and_confirm_order() {
  global $dbh;
  
  // Get all order items for current user
  $stmt = $dbh->query('SELECT * FROM order_items');
  $order_items = $stmt->fetchAll();
  
  // Process payment (e.g. Stripe API)
  // ...
  
  // Confirm order and update database
  foreach ($order_items as $item) {
    $stmt = $dbh->prepare('UPDATE products SET stock = stock - :quantity WHERE id = :id');
    $stmt->execute([':quantity' => $item['quantity'], ':id' => $item['product_id']]);
    
    $stmt = $dbh->prepare('INSERT INTO orders (customer_name, order_date) VALUES (:customer_name, :order_date)');
    $stmt->execute([':customer_name' => 'John Doe', ':order_date' => date('Y-m-d')]);
  }
  
  echo 'Order confirmed!';
}

// Main script
if (!isset($_GET['product_id'])) {
  display_products_and_add_to_cart();
} elseif (isset($_GET['product_id']) && $_GET['action'] == 'add') {
  add_product_to_order(1, $_GET['product_id'], 1);
} elseif (isset($_GET['order_item_id']) && $_GET['action'] == 'remove') {
  $stmt = $dbh->prepare('DELETE FROM order_items WHERE id = :id');
  $stmt->execute([':id' => $_GET['order_item_id']]);
} elseif (isset($_POST['customer_name'])) {
  create_new_order($_POST['customer_name']);
  header('Location: ?action=checkout');
  exit;
}

?>


// Cart.php

class Cart {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    // Add item to cart
    public function addItem($productId, $quantity) {
        try {
            $stmt = $this->db->prepare("SELECT * FROM products WHERE id = :id");
            $stmt->execute(['id' => $productId]);
            $product = $stmt->fetch();

            if ($product && $quantity > 0) {
                $cartItem = [
                    'user_id' => $_SESSION['user_id'],
                    'product_id' => $productId,
                    'quantity' => $quantity
                ];

                // Check if product is already in cart
                $stmt = $this->db->prepare("SELECT * FROM carts WHERE user_id = :userId AND product_id = :productId");
                $stmt->execute($cartItem);
                $existingCartItem = $stmt->fetch();

                if ($existingCartItem) {
                    // Update existing item
                    $updateStmt = $this->db->prepare("UPDATE carts SET quantity = quantity + :quantity WHERE user_id = :userId AND product_id = :productId");
                    $updateStmt->execute(array_merge($cartItem, ['quantity' => $quantity]));
                } else {
                    // Add new item to cart
                    $insertStmt = $this->db->prepare("INSERT INTO carts (user_id, product_id, quantity) VALUES (:userId, :productId, :quantity)");
                    $insertStmt->execute($cartItem);
                }

                return true;
            }
        } catch (Exception $e) {
            // Handle database error
            echo "Error adding item to cart: " . $e->getMessage();
        }
    }

    // Get cart contents
    public function getContents() {
        try {
            $stmt = $this->db->prepare("SELECT * FROM carts WHERE user_id = :userId");
            $stmt->execute(['userId' => $_SESSION['user_id']]);
            return $stmt->fetchAll();
        } catch (Exception $e) {
            // Handle database error
            echo "Error retrieving cart contents: " . $e->getMessage();
        }
    }

    // Calculate total cost of cart
    public function calculateTotal() {
        try {
            $total = 0;
            foreach ($this->getContents() as $cartItem) {
                $productPrice = $this->db->prepare("SELECT price FROM products WHERE id = :id")->execute(['id' => $cartItem['product_id']])->fetch()['price'];
                $total += $cartItem['quantity'] * $productPrice;
            }
            return $total;
        } catch (Exception $e) {
            // Handle database error
            echo "Error calculating total cost: " . $e->getMessage();
        }
    }

    // Process payment (simply for demonstration purposes)
    public function processPayment() {
        try {
            // Assume we have a payment gateway integrated here...
            // Simulate payment processing by updating cart status to 'paid'
            $updateStmt = $this->db->prepare("UPDATE carts SET status = 'paid' WHERE user_id = :userId");
            $updateStmt->execute(['userId' => $_SESSION['user_id']]);
        } catch (Exception $e) {
            // Handle database error
            echo "Error processing payment: " . $e->getMessage();
        }
    }
}


// example.php

require_once 'cart.php';

$db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');

$cart = new Cart($db);

// Add item to cart
$cart->addItem(1, 2); // Product ID 1, quantity 2

// Get cart contents
$cartsContents = $cart->getContents();

// Calculate total cost of cart
$totalCost = $cart->calculateTotal();

echo "Cart Contents: ";
print_r($cartsContents);
echo "
";
echo "Total Cost: $" . number_format($totalCost, 2);

// Process payment (simply for demonstration purposes)
$cart->processPayment();


<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

session_start();
?>


<?php
require_once('config.php');

if (isset($_POST['username']) && isset($_POST['password'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];

    $query = "SELECT * FROM users WHERE username = '$username'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            if (password_verify($password, $row['password'])) {
                $_SESSION['user_id'] = $row['id'];
                header('Location: products.php');
                exit;
            }
        }
    }

    echo 'Invalid username or password';
}
?>


<?php
require_once('config.php');

if (isset($_SESSION['user_id'])) {
    echo '<h1>Products</h1>';

    $query = "SELECT * FROM products";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "<p>ID: {$row['id']} - Name: {$row['name']} - Price: {$row['price']}</p>";
            echo '<form action="purchase.php" method="post">';
            echo '<input type="hidden" name="product_id" value="' . $row['id'] . '">';
            echo '<button type="submit">Purchase</button>';
            echo '</form>';
        }
    } else {
        echo 'No products available';
    }
} else {
    header('Location: authenticate.php');
}
?>


<?php
require_once('config.php');

if (isset($_POST['product_id'])) {
    $user_id = $_SESSION['user_id'];
    $product_id = $_POST['product_id'];

    $query = "INSERT INTO orders SET user_id = '$user_id', product_id = '$product_id', quantity = 1, total = (SELECT price FROM products WHERE id = '$product_id')";
    $conn->query($query);

    echo 'Purchase successful!';
} else {
    header('Location: products.php');
}
?>


// purchase.php

class Purchase {
    private $db;

    public function __construct() {
        // Connect to database
        $this->db = new PDO('mysql:host=localhost;dbname=example', 'username', 'password');
    }

    /**
     * Add a product to the cart
     *
     * @param int $product_id
     * @param int $quantity
     */
    public function addProductToCart($product_id, $quantity) {
        // Check if product exists
        $stmt = $this->db->prepare('SELECT * FROM products WHERE id = :id');
        $stmt->bindParam(':id', $product_id);
        $stmt->execute();
        $product = $stmt->fetch();

        if ($product) {
            // Calculate new total
            $newTotal = $product['price'] * $quantity;

            // Insert into cart (assuming a cart table exists)
            $stmt = $this->db->prepare('INSERT INTO cart (product_id, quantity, total) VALUES (:id, :quantity, :total)');
            $stmt->bindParam(':id', $product_id);
            $stmt->bindParam(':quantity', $quantity);
            $stmt->bindParam(':total', $newTotal);
            $stmt->execute();
        } else {
            echo "Product does not exist";
        }
    }

    /**
     * Place an order
     *
     * @param int $customer_id
     */
    public function placeOrder($customer_id) {
        // Get cart contents
        $cartContents = $this->getCartContents();

        // Calculate total for order
        $orderTotal = 0;
        foreach ($cartContents as $content) {
            $orderTotal += $content['total'];
        }

        // Insert into orders table
        $stmt = $this->db->prepare('INSERT INTO orders (customer_id, order_date, total) VALUES (:id, NOW(), :total)');
        $stmt->bindParam(':id', $customer_id);
        $stmt->bindParam(':total', $orderTotal);
        $stmt->execute();

        // Insert into order_details table
        foreach ($cartContents as $content) {
            $stmt = $this->db->prepare('INSERT INTO order_details (order_id, product_id, quantity) VALUES (:id, :product_id, :quantity)');
            $stmt->bindParam(':id', $this->db->lastInsertId());
            $stmt->bindParam(':product_id', $content['product_id']);
            $stmt->bindParam(':quantity', $content['quantity']);
            $stmt->execute();
        }

        // Clear cart
        $this->clearCart();

        echo "Order placed successfully";
    }

    /**
     * Get cart contents
     *
     * @return array
     */
    public function getCartContents() {
        // Assuming a cart table exists with product_id, quantity, and total columns
        $stmt = $this->db->prepare('SELECT * FROM cart');
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Clear cart
     */
    public function clearCart() {
        // Assuming a cart table exists
        $stmt = $this->db->prepare('DELETE FROM cart');
        $stmt->execute();
    }
}


// Create a new purchase object
$purchase = new Purchase();

// Add product to cart
$purchase->addProductToCart(1, 2);

// Place order
$purchase->placeOrder(123);


<?php

// Include configuration and database connection
require_once 'config.php';
require_once 'db.php';

// Set default values for form fields
$productId = $_POST['product_id'] ?? '';
$quantity = $_POST['quantity'] ?? 0;
$userEmail = $_POST['email'] ?? '';

// Validate form input
if (!empty($productId) && !empty($userEmail)) {
    if (ctype_digit($productId)) {
        $productId = intval($productId);
    } else {
        echo 'Invalid product ID.';
        return;
    }

    if ($quantity > 0) {
        // Check if user is logged in
        if (!isset($_SESSION['user_id'])) {
            echo 'Please log in to make a purchase.';
            return;
        }
    } else {
        echo 'Quantity must be greater than zero.';
        return;
    }
} else {
    echo 'Please enter product ID and email.';
    return;
}

// Get product details
$product = get_product($productId);
if (!$product) {
    echo 'Product not found.';
    return;
}

// Check if user has sufficient balance (optional)
if (!isset($_SESSION['balance']) || $_SESSION['balance'] < $product['price'] * $quantity) {
    echo 'Insufficient balance.';
    return;
}

// Calculate total
$total = $product['price'] * $quantity;

// Create new purchase record
$purchase = array(
    'user_id' => $_SESSION['user_id'],
    'product_id' => $productId,
    'quantity' => $quantity,
    'total' => $total,
    'status' => 'pending'
);

insert_purchase($purchase);
echo 'Purchase successful!';


function get_product($id) {
  $query = "SELECT * FROM products WHERE id = '$id'";
  $result = mysqli_query($conn, $query);
  if ($row = mysqli_fetch_assoc($result)) {
    return $row;
  } else {
    return false;
  }
}

function insert_purchase($purchase) {
  $query = "INSERT INTO purchases SET ";
  foreach ($purchase as $key => $value) {
    $query .= "$key = '$value', ";
  }
  $query = rtrim($query, ', ');
  mysqli_query($conn, $query);
}


// database connection settings
$host = 'localhost';
$dbname = 'store';
$user = 'root';
$password = '';

// create a PDO instance
$conn = new PDO("mysql:host=$host;dbname=$dbname", $user, $password);

// function to get all products from the database
function getProducts() {
  global $conn;
  $stmt = $conn->prepare('SELECT * FROM products');
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// function to add a new order
function addOrder($customerName, $products) {
  global $conn;
  
  // get the total cost of the order
  $totalCost = 0;
  foreach ($products as $product) {
    $totalCost += $product['price'] * $product['quantity'];
  }
  
  // insert a new order into the database
  $stmt = $conn->prepare('INSERT INTO orders (customer_name, total_cost) VALUES (?, ?)');
  $stmt->execute(array($customerName, $totalCost));
  
  // get the ID of the newly inserted order
  $orderId = $conn->lastInsertId();
  
  // insert new order items into the database
  foreach ($products as $product) {
    $stmt = $conn->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)');
    $stmt->execute(array($orderId, $product['id'], $product['quantity']));
  }
  
  return $orderId;
}

// function to checkout
function checkout() {
  global $conn;
  
  // get all products from the database
  $products = getProducts();
  
  // display products to user
  echo "Available Products:
";
  foreach ($products as $product) {
    echo "$product[name] - \$$product[price]
";
  }
  
  // ask for customer name and product IDs
  $customerName = trim(fgets(STDIN));
  $productIds = explode(',', trim(fgets(STDIN)));
  
  // add new order with the given products
  $orderId = addOrder($customerName, array_map(function($productId) use ($products) {
    return array(
      'id' => (int)$productId,
      'name' => $products[array_search($productId, array_column($products, 'id'))]['name'],
      'price' => $products[array_search($productId, array_column($products, 'id'))]['price']
    );
  }, $productIds));
  
  // display order details to user
  echo "Order #${orderId} created successfully!
";
  echo "Customer Name: $customerName
";
  echo "Order Date: " . date('Y-m-d') . "
";
  echo "Total Cost: \$$totalCost
";
}

// call the checkout function
checkout();


// Configuration
require_once 'config.php';

// Functions
function get_products() {
  global $conn;
  $query = "SELECT * FROM products";
  $result = mysqli_query($conn, $query);
  return $result;
}

function add_to_cart() {
  global $conn, $_SESSION;
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  $query = "INSERT INTO cart (customer_id, product_id, quantity) VALUES (?, ?, ?)";
  $stmt = mysqli_prepare($conn, $query);
  mysqli_stmt_bind_param($stmt, 'iis', $_SESSION['customer_id'], $product_id, $quantity);
  mysqli_stmt_execute($stmt);

  header('Location: view_cart.php');
  exit;
}

function process_order() {
  global $conn, $_SESSION;

  // Get cart items
  $query = "SELECT * FROM cart WHERE customer_id = ?";
  $stmt = mysqli_prepare($conn, $query);
  mysqli_stmt_bind_param($stmt, 'i', $_SESSION['customer_id']);
  mysqli_stmt_execute($stmt);
  $result = mysqli_stmt_get_result($stmt);

  // Calculate total
  $total = 0;
  while ($row = mysqli_fetch_assoc($result)) {
    $product_price = get_product_price($row['product_id']);
    $quantity = $row['quantity'];
    $subtotal = $product_price * $quantity;
    $total += $subtotal;
  }

  // Insert order
  $query = "INSERT INTO orders (customer_id, total) VALUES (?, ?)";
  $stmt = mysqli_prepare($conn, $query);
  mysqli_stmt_bind_param($stmt, 'ii', $_SESSION['customer_id'], $total);
  mysqli_stmt_execute($stmt);

  // Clear cart
  $query = "DELETE FROM cart WHERE customer_id = ?";
  $stmt = mysqli_prepare($conn, $query);
  mysqli_stmt_bind_param($stmt, 'i', $_SESSION['customer_id']);
  mysqli_stmt_execute($stmt);

  header('Location: view_order.php');
  exit;
}

function get_product_price($product_id) {
  global $conn;
  $query = "SELECT price FROM products WHERE id = ?";
  $stmt = mysqli_prepare($conn, $query);
  mysqli_stmt_bind_param($stmt, 'i', $product_id);
  mysqli_stmt_execute($stmt);
  $result = mysqli_stmt_get_result($stmt);
  return mysqli_fetch_assoc($result)['price'];
}

// Process requests
if (isset($_POST['add_to_cart'])) {
  add_to_cart();
} elseif (isset($_POST['process_order'])) {
  process_order();
}


<?php
// Configuration
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}


// db.php

class Database {
    private static $conn;

    public static function getConnection() {
        if (!isset(self::$conn)) {
            try {
                self::$conn = new PDO('mysql:host=localhost;dbname=example', 'username', 'password');
                self::$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            } catch (PDOException $e) {
                die("ERROR: Could not connect. " . $e->getMessage());
            }
        }
        return self::$conn;
    }
}


// auth.php

class Auth {
    private static $users;

    public static function register($name, $email, $password) {
        try {
            $stmt = Database::getConnection()->prepare('INSERT INTO users (name, email, password) VALUES (?, ?, ?)');
            $stmt->execute([$name, $email, password_hash($password, PASSWORD_DEFAULT)]);
            return true;
        } catch (PDOException $e) {
            echo "ERROR: Could not register. " . $e->getMessage();
            return false;
        }
    }

    public static function login($email, $password) {
        try {
            $stmt = Database::getConnection()->prepare('SELECT * FROM users WHERE email = ?');
            $stmt->execute([$email]);
            $user = $stmt->fetch();
            if ($user && password_verify($password, $user['password'])) {
                $_SESSION['user_id'] = $user['id'];
                return true;
            }
        } catch (PDOException $e) {
            echo "ERROR: Could not login. " . $e->getMessage();
            return false;
        }
    }

    public static function isLoggedIn() {
        if (!isset($_SESSION['user_id'])) {
            header('Location: index.php');
            exit;
        }
        return true;
    }
}


// product.php

class Product {
    private $id;
    private $name;
    private $price;

    public function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }

    public function getId() {
        return $this->id;
    }

    public function getName() {
        return $this->name;
    }

    public function getPrice() {
        return $this->price;
    }
}


// index.php

require_once 'db.php';
require_once 'auth.php';
require_once 'product.php';

if (Auth::isLoggedIn()) {
    $cart = array();
    if (isset($_SESSION['cart'])) {
        $cart = unserialize($_SESSION['cart']);
    }

    if (isset($_POST['add_to_cart'])) {
        $product_id = $_POST['product_id'];
        $quantity = $_POST['quantity'];

        if (!array_key_exists($product_id, $cart)) {
            $cart[$product_id] = array('quantity' => 1);
        } else {
            $cart[$product_id]['quantity'] += 1;
        }

        $_SESSION['cart'] = serialize($cart);

        header('Location: index.php');
        exit;
    }

    if (isset($_POST['checkout'])) {
        // Process payment using a payment gateway like Stripe or PayPal
        // ...

        $stmt = Database::getConnection()->prepare('INSERT INTO orders (user_id, product_id, quantity, total_price) VALUES (?, ?, ?, ?)');
        foreach ($cart as $product_id => $details) {
            $stmt->execute([$_SESSION['user_id'], $product_id, $details['quantity'], $details['quantity'] * Product::getProduct($product_id)->getPrice()]);
        }

        unset($_SESSION['cart']);
        header('Location: thankyou.php');
        exit;
    }
} else {
    // Redirect to login page if user is not logged in
}


// thankyou.php

require_once 'db.php';

if (Auth::isLoggedIn()) {
    echo "Thank you for your purchase!";
} else {
    // Redirect to login page if user is not logged in
}


class Cart {
  private $userId;
  private $products;

  public function __construct($userId = null) {
    if ($userId !== null) {
      $this->userId = $userId;
      $this->loadProducts();
    } else {
      $this->products = array();
    }
  }

  public function loadProducts() {
    global $db; // assume a database connection is established
    $query = "SELECT * FROM cart WHERE user_id = :user_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $this->userId);
    $stmt->execute();
    $this->products = $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function addProduct($productId, $quantity) {
    global $db; // assume a database connection is established
    $query = "INSERT INTO cart (user_id, product_id, quantity)
              VALUES (:user_id, :product_id, :quantity)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $this->userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':quantity', $quantity);
    $stmt->execute();
  }

  public function removeProduct($productId) {
    global $db; // assume a database connection is established
    $query = "DELETE FROM cart WHERE user_id = :user_id AND product_id = :product_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $this->userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
  }

  public function updateQuantity($productId, $quantity) {
    global $db; // assume a database connection is established
    $query = "UPDATE cart SET quantity = :quantity WHERE user_id = :user_id AND product_id = :product_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $this->userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':quantity', $quantity);
    $stmt->execute();
  }

  public function getTotalCost() {
    global $db; // assume a database connection is established
    $query = "SELECT SUM(c.quantity * p.price) AS total_cost FROM cart c
              INNER JOIN products p ON c.product_id = p.id WHERE user_id = :user_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $this->userId);
    $stmt->execute();
    return $stmt->fetchColumn();
  }

  public function getProducts() {
    return $this->products;
  }
}


// Create a new cart instance for user ID 1
$cart = new Cart(1);

// Add products to the cart
$cart->addProduct(1, 2); // product ID 1 with quantity 2
$cart->addProduct(2, 3); // product ID 2 with quantity 3

// Remove a product from the cart
$cart->removeProduct(2);

// Update the quantity of a product in the cart
$cart->updateQuantity(1, 4);

// Get the total cost of the products in the cart
$totalCost = $cart->getTotalCost();

// Print the products in the cart
print_r($cart->getProducts());


<?php

// Configuration
require_once 'config.php';

// Database connection
$dsn = 'mysql:host=localhost;dbname=your_database';
$username = 'your_username';
$password = 'your_password';
try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// User authentication
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

// Product listing
$products = array();
$stmt = $pdo->prepare('SELECT * FROM products');
$stmt->execute();
while ($row = $stmt->fetch()) {
    $products[] = array(
        'id' => $row['id'],
        'name' => $row['name'],
        'price' => $row['price']
    );
}

// Payment processing
if (isset($_POST['submit'])) {
    // Stripe API keys
    \Stripe\Stripe::setApiKey('YOUR_STRIPE_API_KEY');
    \Stripe\Stripe::setApiVersion('2020-08-27');

    // Get the product ID and quantity from the form data
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Calculate the total cost
    $total = $products[$product_id - 1]['price'] * $quantity;

    // Create a new charge
    try {
        $charge = \Stripe\Charge::create([
            'amount' => $total,
            'currency' => 'usd',
            'description' => 'Purchase of product #'.$product_id,
            'source' => $_POST['token']
        ]);
        echo 'Payment successful!';
    } catch (Exception $e) {
        echo 'Error: ' . $e->getMessage();
    }
}

// Display the purchase form
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purchase</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
</head>
<body>

    <div class="container">
        <h1>Purchase</h1>
        <?php foreach ($products as $product) { ?>
            <div class="card">
                <h2><?= $product['name'] ?></h2>
                <p>Price: <?= $product['price'] ?></p>
                <form action="<?= $_SERVER['PHP_SELF'] ?>" method="post">
                    <input type="hidden" name="product_id" value="<?= $product['id'] ?>">
                    <input type="number" name="quantity" value="1">
                    <button type="submit" name="submit">Purchase</button>
                </form>
            </div>
        <?php } ?>
    </div>

<?php
require_once 'footer.php';
?>


<?php

// Stripe API keys
\Stripe\Stripe::setApiKey('YOUR_STRIPE_API_KEY');

// Set the API version
\Stripe\Stripe::setApiVersion('2020-08-27');


<?php

// Database configuration
$dsn = 'mysql:host=localhost;dbname=your_database';
$username = 'your_username';
$password = 'your_password';

?>


<?php

// Configuration
$dbHost = 'localhost';
$dbUsername = 'username';
$dbPassword = 'password';
$dbName = 'database';

// Create connection
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product to cart
function addProductToCart() {
  global $conn;

  // Get product ID and quantity from request
  if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
    $productId = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Check if product exists
    $query = "SELECT * FROM products WHERE id = '$productId'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
      while ($row = $result->fetch_assoc()) {
        $productPrice = $row['price'];

        // Insert product into order_items table
        $insertQuery = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (NULL, '$productId', '$quantity')";
        $conn->query($insertQuery);

        echo "Product added to cart successfully!";
      }
    } else {
      echo "Product not found.";
    }
  }
}

// Function to process payment
function processPayment() {
  global $conn;

  // Get order ID and total from request
  if (isset($_POST['order_id']) && isset($_POST['total'])) {
    $orderId = $_POST['order_id'];
    $total = $_POST['total'];

    // Insert order into orders table
    $insertQuery = "INSERT INTO orders (customer_name, order_date) VALUES ('Customer Name', NOW())";
    $conn->query($insertQuery);

    // Update order ID in order_items table
    $updateQuery = "UPDATE order_items SET order_id = '$orderId' WHERE order_id IS NULL";
    $conn->query($updateQuery);

    echo "Order processed successfully!";
  }
}

// Check if user is adding product to cart
if (isset($_POST['action']) && $_POST['action'] == 'addProduct') {
  addProductToCart();
} elseif (isset($_POST['action']) && $_POST['action'] == 'processPayment') {
  processPayment();
}

// Close connection
$conn->close();

?>


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'store';
$username = 'root';
$password = '';

// Connect to database
try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}

// Function to add product to cart
function addToCart($customer_id, $product_id, $quantity) {
    global $conn;
    
    // Check if product is already in cart
    $stmt = $conn->prepare("SELECT * FROM orders WHERE customer_id = :customer_id AND product_id = :product_id");
    $stmt->bindParam(':customer_id', $customer_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    
    if ($stmt->rowCount() > 0) {
        return "Product already in cart";
    }
    
    // Add product to order
    $stmt = $conn->prepare("INSERT INTO orders (customer_id, product_id, quantity) VALUES (:customer_id, :product_id, :quantity)");
    $stmt->bindParam(':customer_id', $customer_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':quantity', $quantity);
    $stmt->execute();
    
    return "Product added to cart";
}

// Function to update product quantity in cart
function updateQuantity($order_id, $new_quantity) {
    global $conn;
    
    // Update product quantity in order
    $stmt = $conn->prepare("UPDATE orders SET quantity = :quantity WHERE id = :id");
    $stmt->bindParam(':quantity', $new_quantity);
    $stmt->bindParam(':id', $order_id);
    $stmt->execute();
}

// Function to remove product from cart
function removeFromCart($customer_id, $product_id) {
    global $conn;
    
    // Remove product from order
    $stmt = $conn->prepare("DELETE FROM orders WHERE customer_id = :customer_id AND product_id = :product_id");
    $stmt->bindParam(':customer_id', $customer_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
}

// Function to checkout
function checkout($customer_id) {
    global $conn;
    
    // Get total cost of order
    $stmt = $conn->prepare("SELECT SUM(price * quantity) AS total FROM orders WHERE customer_id = :customer_id");
    $stmt->bindParam(':customer_id', $customer_id);
    $stmt->execute();
    
    $total = $stmt->fetchColumn();
    
    // Insert new order into database
    $stmt = $conn->prepare("INSERT INTO orders (customer_id, total) VALUES (:customer_id, :total)");
    $stmt->bindParam(':customer_id', $customer_id);
    $stmt->bindParam(':total', $total);
    $stmt->execute();
    
    // Clear cart
    removeFromCart($customer_id, null);
}

// Example usage:
$customer_id = 1;
$product_id = 1;
$quantity = 2;

echo addToCart($customer_id, $product_id, $quantity); // Product added to cart

// Update quantity
updateQuantity(1, 3);

// Remove product from cart
removeFromCart($customer_id, $product_id);

// Checkout
checkout($customer_id);

?>


<?php

define('DB_HOST', 'your_host');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

?>


<?php

function authenticate($username, $password) {
  // Simple password-based authentication for demonstration purposes only!
  global $db;
  $query = "SELECT * FROM users WHERE name = '$username' AND password = '$password'";
  return mysqli_query($db, $query);
}

?>


<?php

function db_connect() {
  global $db;
  $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  $db = $conn;
}

function get_products() {
  $query = "SELECT * FROM products";
  return mysqli_query($db, $query)->fetch_all(MYSQLI_ASSOC);
}

?>


<?php

function add_to_cart($product_id) {
  global $user_id;
  $query = "INSERT INTO cart (user_id, product_id) VALUES ('$user_id', '$product_id')";
  return mysqli_query($db, $query);
}

function get_cart_contents() {
  $query = "SELECT * FROM cart WHERE user_id = '$user_id'";
  return mysqli_query($db, $query)->fetch_all(MYSQLI_ASSOC);
}

?>


<?php

function checkout() {
  global $user_id;
  $cart = get_cart_contents();
  if (empty($cart)) {
    echo "Cart is empty!";
    exit;
  }
  
  // Process payment using Stripe API
  require_once 'stripe-php/init.php';
  \Stripe\Stripe::setApiKey('YOUR_STRIPE_SECRET_KEY');
  
  foreach ($cart as $item) {
    $product = get_product($item['product_id']);
    $amount = $product['price'] * $item['quantity'];
    $charge = \Stripe\Charge::create(array(
      'amount' => $amount,
      'currency' => 'usd',
      'source' => $_POST['token'],
      'description' => "Order #{$item['id']}"
    ));
  }
  
  // Clear cart contents
  $query = "DELETE FROM cart WHERE user_id = '$user_id'";
  mysqli_query($db, $query);
}

function get_product($product_id) {
  $query = "SELECT * FROM products WHERE id = '$product_id'";
  return mysqli_query($db, $query)->fetch_assoc();
}

?>


<?php

require_once 'config.php';
require_once 'database.php';
$db_connect();

if (isset($_POST['login'])) {
  authenticate($_POST['username'], $_POST['password']);
  if ($result = authenticate($_POST['username'], $_POST['password'])) {
    $user_id = mysqli_fetch_assoc($result)['id'];
  } else {
    echo "Invalid username or password!";
    exit;
  }
}

if (isset($_POST['add_to_cart'])) {
  add_to_cart($_POST['product_id']);
}

if (isset($_POST['checkout'])) {
  checkout();
}

?>


// database connection settings
$db_host = 'localhost';
$db_username = 'root';
$db_password = '';
$db_name = 'e commerce';

// connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// function to authenticate user
function authenticateUser($username, $password) {
  global $conn;
  $query = "SELECT * FROM users WHERE username = '$username' AND password = '$password'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    return true;
  } else {
    return false;
  }
}

// function to get user data
function getUserData($username) {
  global $conn;
  $query = "SELECT * FROM users WHERE username = '$username'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    return $result->fetch_assoc();
  } else {
    return false;
  }
}

// function to add product to cart
function addToCart($productId, $userId) {
  global $conn;
  $query = "INSERT INTO cart (product_id, user_id) VALUES ('$productId', '$userId')";
  $conn->query($query);
}

// function to view cart contents
function viewCartContents($userId) {
  global $conn;
  $query = "SELECT * FROM cart WHERE user_id = '$userId'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    return $result->fetch_assoc();
  } else {
    return false;
  }
}

// function to place order
function placeOrder($cartId, $userId) {
  global $conn;
  $query = "INSERT INTO orders (cart_id, user_id) VALUES ('$cartId', '$userId')";
  $conn->query($query);
}


// authenticate user
$loggedIn = authenticateUser('johnDoe', 'password123');

if ($loggedIn) {
  // get user data
  $userData = getUserData('johnDoe');
  
  echo "Welcome, " . $userData['username'] . "!";

  // add product to cart
  addToCart(1, $userData['id']);
  
  // view cart contents
  $cartContents = viewCartContents($userData['id']);
  
  echo "Your cart contains the following products:";
  print_r($cartContents);

  // place order
  $orderId = placeOrder($cartContents['id'], $userData['id']);

  echo "Order placed successfully with ID: $orderId";
}


<?php
require_once 'db.php'; // database connection settings

// display products
$query = "SELECT * FROM products";
$result = mysqli_query($conn, $query);

while ($product = mysqli_fetch_assoc($result)) {
    echo '<div class="product">';
    echo '<h2>' . $product['name'] . '</h2>';
    echo '<p>Price: ' . $product['price'] . '</p>';
    echo '<button class="add-to-cart" data-id="' . $product['id'] . '">Add to Cart</button>';
    echo '</div>';
}
?>

<script>
    $(document).ready(function() {
        $('.add-to-cart').click(function() {
            var productId = $(this).data('id');
            $.ajax({
                type: 'POST',
                url: 'cart.php',
                data: {product_id: productId},
                success: function(response) {
                    console.log(response);
                }
            });
        });
    });
</script>


<?php
require_once 'db.php'; // database connection settings

// check if user is logged in
if (!isset($_SESSION['user_id'])) {
    echo "Please login first";
    exit;
}

// get product id from request data
$product_id = $_POST['product_id'];

// add product to cart
$query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, 1)";
$stmt = mysqli_prepare($conn, $query);
mysqli_stmt_bind_param($stmt, 'ii', $_SESSION['user_id'], $product_id);
mysqli_stmt_execute($stmt);

echo "Product added to cart";
?>


<?php
require_once 'db.php'; // database connection settings

// get user id from session
$user_id = $_SESSION['user_id'];

// display cart contents
$query = "SELECT * FROM order_items WHERE order_id = ?";
$result = mysqli_query($conn, $query);
while ($order_item = mysqli_fetch_assoc($result)) {
    echo '<div class="cart-item">';
    echo '<h2>' . $order_item['product_name'] . '</h2>';
    echo '<p>Quantity: ' . $order_item['quantity'] . '</p>';
    echo '<button class="remove-from-cart" data-id="' . $order_item['id'] . '">Remove from Cart</button>';
    echo '</div>';
}
?>

<script>
    $(document).ready(function() {
        $('.remove-from-cart').click(function() {
            var itemId = $(this).data('id');
            $.ajax({
                type: 'POST',
                url: 'cart.php',
                data: {item_id: itemId},
                success: function(response) {
                    console.log(response);
                }
            });
        });
    });
</script>


<?php
require_once 'db.php'; // database connection settings

// get user id from session
$user_id = $_SESSION['user_id'];

// calculate total amount of order items
$query = "SELECT * FROM order_items WHERE order_id = ?";
$result = mysqli_query($conn, $query);
$total_amount = 0;
while ($order_item = mysqli_fetch_assoc($result)) {
    $total_amount += $order_item['price'] * $order_item['quantity'];
}

// create new order
$query = "INSERT INTO orders (user_id, total_amount) VALUES (?, ?)";
$stmt = mysqli_prepare($conn, $query);
mysqli_stmt_bind_param($stmt, 'ii', $user_id, $total_amount);
mysqli_stmt_execute($stmt);

// get last inserted order id
$order_id = mysqli_insert_id($conn);

// update order items with new order id
$query = "UPDATE order_items SET order_id = ? WHERE user_id = ?";
$stmt = mysqli_prepare($conn, $query);
mysqli_stmt_bind_param($stmt, 'ii', $order_id, $user_id);
mysqli_stmt_execute($stmt);

echo "Order placed successfully";
?>


<?php

// Configuration
$db_host = 'localhost';
$db_username = 'root';
$db_password = '';
$db_name = 'store';

// Connect to database
$conn = mysqli_connect($db_host, $db_username, $db_password, $db_name);

// Check connection
if (!$conn) {
  die("Connection failed: " . mysqli_connect_error());
}

// Function to add product to cart
function add_product_to_cart($product_id, $quantity) {
  global $conn;
  
  // Insert into order_items table
  $query = "INSERT INTO order_items (order_id, product_id, quantity)
            VALUES ('', '$product_id', '$quantity')";
  mysqli_query($conn, $query);
}

// Function to process purchase
function process_purchase() {
  global $conn;
  
  // Get customer ID from session
  $customer_id = $_SESSION['customer_id'];
  
  // Create new order
  $query = "INSERT INTO orders (customer_id, order_date, total)
            VALUES ('$customer_id', NOW(), '')";
  mysqli_query($conn, $query);
  
  // Get last inserted order ID
  $order_id = mysqli_insert_id($conn);
  
  // Update total for new order
  $query = "UPDATE orders SET total = (SELECT SUM(p.price * oi.quantity) 
                                        FROM products p
                                        JOIN order_items oi ON p.id = oi.product_id
                                        WHERE oi.order_id = '$order_id')";
  mysqli_query($conn, $query);
  
  // Return order ID
  return $order_id;
}

// Function to add product to order
function add_product_to_order($product_id, $quantity) {
  global $conn;
  
  // Get customer ID from session
  $customer_id = $_SESSION['customer_id'];
  
  // Add product to cart
  add_product_to_cart($product_id, $quantity);
  
  // Process purchase
  $order_id = process_purchase();
  
  // Update order items with new order ID
  $query = "UPDATE order_items SET order_id = '$order_id'
            WHERE product_id = '$product_id'";
  mysqli_query($conn, $query);
}

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  
  // Add product to order
  add_product_to_order($product_id, $quantity);
  
  // Redirect to success page
  header('Location: success.php');
  exit;
}

// Display form
?>
<form action="" method="post">
  <label for="product_id">Product ID:</label>
  <input type="text" id="product_id" name="product_id"><br><br>
  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity"><br><br>
  <input type="submit" value="Add to Cart">
</form>


<?php
// Database configuration
$host = 'localhost';
$dbname = 'store';
$username = 'root';
$password = '';

try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    die('ERROR: Unable to connect to database. ' . $e->getMessage());
}


<?php
// User authentication
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $email = $_POST['email'];
    $password = $_POST['password'];

    $stmt = $conn->prepare("SELECT * FROM users WHERE email = :email");
    $stmt->bindParam(':email', $email);
    $stmt->execute();

    if ($stmt->rowCount() > 0) {
        // User found, verify password
        $user = $stmt->fetch();
        if (password_verify($password, $user['password'])) {
            // Login successful, set session variables
            $_SESSION['user_id'] = $user['id'];
            header('Location: dashboard.php');
            exit;
        }
    }

    echo 'Invalid email or password';
}
?>


<?php
// Display products
$stmt = $conn->query("SELECT * FROM products");
$products = $stmt->fetchAll();

foreach ($products as $product) {
    ?>
    <div class="product">
        <h2><?php echo $product['name']; ?></h2>
        <p>Price: <?php echo $product['price']; ?></p>
        <form action="cart.php" method="post">
            <input type="hidden" name="product_id" value="<?php echo $product['id']; ?>">
            <button type="submit">Add to Cart</button>
        </form>
    </div>
    <?php
}
?>


<?php
// Add product to cart
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $product_id = $_POST['product_id'];
    $quantity = 1; // default quantity

    // Check if user is logged in
    if (!isset($_SESSION['user_id'])) {
        echo 'You must be logged in to add products to your cart';
        exit;
    }

    // Get product price and calculate total price
    $stmt = $conn->prepare("SELECT * FROM products WHERE id = :id");
    $stmt->bindParam(':id', $product_id);
    $stmt->execute();
    $product = $stmt->fetch();
    $total_price = $product['price'] * $quantity;

    // Insert order into database
    $order_id = uniqid();
    $stmt = $conn->prepare("INSERT INTO orders (user_id, product_id, quantity, total_price) VALUES (:user_id, :product_id, :quantity, :total_price)");
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':quantity', $quantity);
    $stmt->bindParam(':total_price', $total_price);
    $stmt->execute();

    echo 'Product added to cart successfully';
}
?>


<?php
// Display user's orders
$stmt = $conn->prepare("SELECT * FROM orders WHERE user_id = :user_id");
$stmt->bindParam(':user_id', $_SESSION['user_id']);
$stmt->execute();
$orders = $stmt->fetchAll();

foreach ($orders as $order) {
    ?>
    <div class="order">
        <h2>Order #<?php echo $order['id']; ?></h2>
        <p>Product: <?php echo $conn->prepare("SELECT name FROM products WHERE id = :id")->bindParam(':id', $order['product_id'])->execute()->fetch()['name']; ?></p>
        <p>Quantity: <?php echo $order['quantity']; ?></p>
        <p>Total Price: <?php echo $order['total_price']; ?></p>
    </div>
    <?php
}
?>


<?php

// Database configuration
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'purchase_system');

// PayPal API settings
define('PAYPAL_API_CLIENT_ID', 'YOUR_PAYPAL_API_CLIENT_ID');
define('PAYPAL_API_SECRET', 'YOUR_PAYPAL_API_SECRET');

?>


<?php

require_once 'config.php';

function connectToDatabase() {
    $conn = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USERNAME, DB_PASSWORD);
    return $conn;
}

?>


<?php

class Product {
    private $id;
    private $name;
    private $price;

    function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }

    function getId() {
        return $this->id;
    }

    function getName() {
        return $this->name;
    }

    function getPrice() {
        return $this->price;
    }
}

?>


<?php

class User {
    private $id;
    private $username;
    private $password;

    function __construct($id, $username, $password) {
        $this->id = $id;
        $this->username = $username;
        $this->password = $password;
    }

    function getId() {
        return $this->id;
    }

    function getUsername() {
        return $this->username;
    }
}

?>


<?php

class LoginController {
    public function login($username, $password) {
        $conn = connectToDatabase();
        $stmt = $conn->prepare("SELECT * FROM users WHERE username=:username AND password=:password");
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':password', $password);
        $stmt->execute();
        if ($row = $stmt->fetch()) {
            return true;
        } else {
            return false;
        }
    }

    public function register($username, $password) {
        $conn = connectToDatabase();
        $stmt = $conn->prepare("INSERT INTO users (username, password) VALUES (:username, :password)");
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':password', $password);
        $stmt->execute();
    }
}

?>


<?php

class ProductController {
    public function getProducts() {
        $conn = connectToDatabase();
        $stmt = $conn->prepare("SELECT * FROM products");
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_CLASS, 'Product');
    }

    public function buyProduct($productId) {
        // Get the product from the database
        $product = null;
        $conn = connectToDatabase();
        $stmt = $conn->prepare("SELECT * FROM products WHERE id=:id");
        $stmt->bindParam(':id', $productId);
        $stmt->execute();
        if ($row = $stmt->fetch()) {
            $product = new Product($row['id'], $row['name'], $row['price']);
        }

        // Create a PayPal payment request
        require_once 'PayPal-PHP-SDK/autoload.php';
        $apiContext = new ApiContext(
            PAYPAL_API_CLIENT_ID,
            PAYPAL_API_SECRET
        );
        $paypalClient = new \PayPal\Client($apiContext);
        $request = clone $paypalClient->createPaymentRequest();
        $request->setIntent('sale')
            ->setCurrencyCode('USD')
            ->setDescription($product->getName())
            ->setTotalAmount($product->getPrice());
        $paymentId = $paypalClient->getHttpClient()->post('/v1/payments/', $request);

        // Redirect the user to PayPal for payment
        header("Location: https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&business=YOUR_PAYPAL_EMAIL&id=$productId");
    }
}

?>


<?php

class OrderController {
    public function placeOrder($productId) {
        // Get the product from the database
        $product = null;
        $conn = connectToDatabase();
        $stmt = $conn->prepare("SELECT * FROM products WHERE id=:id");
        $stmt->bindParam(':id', $productId);
        $stmt->execute();
        if ($row = $stmt->fetch()) {
            $product = new Product($row['id'], $row['name'], $row['price']);
        }

        // Insert the order into the database
        $conn = connectToDatabase();
        $stmt = $conn->prepare("INSERT INTO orders (product_id, price) VALUES (:id, :price)");
        $stmt->bindParam(':id', $productId);
        $stmt->bindParam(':price', $product->getPrice());
        $stmt->execute();
    }
}

?>


<?php

require_once 'controllers/LoginController.php';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $loginController = new LoginController();
    if ($loginController->login($_POST['username'], $_POST['password'])) {
        echo "Logged in successfully!";
    } else {
        echo "Invalid username or password.";
    }
}

?>

<form action="" method="post">
    <input type="text" name="username" placeholder="Username">
    <input type="password" name="password" placeholder="Password">
    <button type="submit">Login</button>
</form>

<a href="?register=true">Register</a>

<?php
if (isset($_GET['register']) && $_GET['register'] == 'true') {
?>

<form action="" method="post">
    <input type="text" name="username" placeholder="Username">
    <input type="password" name="password" placeholder="Password">
    <button type="submit">Register</button>
</form>

<?php } ?>


<?php

require_once 'controllers/ProductController.php';

$productController = new ProductController();
$products = $productController->getProducts();

?>

<h1>Products:</h1>

<ul>
    <?php foreach ($products as $product) { ?>
        <li><?php echo $product->getName(); ?> (<?php echo $product->getPrice(); ?>)</li>
    <?php } ?>
</ul>

<a href="?buy_product=true&product_id=<?php echo $_GET['product_id']; ?>">Buy Product</a>

<?php
if (isset($_GET['buy_product']) && $_GET['buy_product'] == 'true') {
    $productController = new ProductController();
    $productController->buyProduct($_GET['product_id']);
}
?>

<a href="?place_order=true&product_id=<?php echo $_GET['product_id']; ?>">Place Order</a>

<?php
if (isset($_GET['place_order']) && $_GET['place_order'] == 'true') {
    $orderController = new OrderController();
    $orderController->placeOrder($_GET['product_id']);
}
?>


<?php

require_once 'config.php';
require_once 'database.php';

// Check if the user is logged in
if (!isset($_SESSION['username'])) {
    header("Location: views/login.php");
}

// Include the necessary controllers and models
require_once 'controllers/LoginController.php';
require_once 'controllers/ProductController.php';
require_once 'models/User.php';
require_once 'models/Product.php';

?>


<?php

require_once 'app.php';

?>

<h1>Welcome to the purchase system!</h1>

<a href="?view=products">View Products</a>
<a href="?view=login">Login/Registration</a>

<?php
if (isset($_GET['view']) && $_GET['view'] == 'products') {
    require_once 'views/products.php';
} elseif (isset($_GET['view']) && $_GET['view'] == 'login') {
    require_once 'views/login.php';
}
?>


<?php

// Configuration
$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'example';

// Connect to database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product to cart
function addProductToCart($productId, $quantity) {
    global $conn;
    $query = "INSERT INTO order_items (order_id, product_id, quantity)
              VALUES (NULL, '$productId', '$quantity')";
    if ($conn->query($query) === TRUE) {
        echo "Product added to cart successfully.";
    } else {
        echo "Error adding product to cart: " . $conn->error;
    }
}

// Function to create order
function createOrder() {
    global $conn;
    $customerId = $_SESSION['customer_id'];
    $orderDate = date('Y-m-d');
    $query = "INSERT INTO orders (customer_name, order_date)
              VALUES ('$customerId', '$orderDate')";
    if ($conn->query($query) === TRUE) {
        echo "Order created successfully.";
    } else {
        echo "Error creating order: " . $conn->error;
    }
}

// Function to purchase products
function purchaseProducts() {
    global $conn;
    $productId = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Add product to cart
    addProductToCart($productId, $quantity);

    // Create order
    createOrder();
}

?>


class Cart {
  private $items = array();

  public function add_item($product_id, $quantity) {
    if (array_key_exists($product_id, $this->items)) {
      $this->items[$product_id] += $quantity;
    } else {
      $this->items[$product_id] = $quantity;
    }
  }

  public function remove_item($product_id) {
    unset($this->items[$product_id]);
  }

  public function get_items() {
    return $this->items;
  }

  public function get_total() {
    $total = 0;
    foreach ($this->items as $product_id => $quantity) {
      // assume we have a function to get the price of a product
      $price = get_product_price($product_id);
      $total += $price * $quantity;
    }
    return $total;
  }

  public function display_cart() {
    echo "<h2>Shopping Cart</h2>";
    foreach ($this->items as $product_id => $quantity) {
      // assume we have a function to get the name and price of a product
      $name = get_product_name($product_id);
      $price = get_product_price($product_id);
      echo "Product: $name, Quantity: $quantity, Price: $" . number_format($price, 2) . "<br>";
    }
    echo "<p>Total: $" . number_format($this->get_total(), 2) . "</p>";
  }
}


$cart = new Cart();

// Add some products to the cart
$cart->add_item(1, 2); // add 2 of product 1
$cart->add_item(3, 1); // add 1 of product 3

// Display the cart
$cart->display_cart();


class Cart {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=shopping_cart', 'username', 'password');
  }

  public function add_item($product_id, $quantity) {
    $stmt = $this->db->prepare("INSERT INTO cart (product_id, quantity) VALUES (:product_id, :quantity)");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':quantity', $quantity);
    $stmt->execute();
  }

  public function remove_item($product_id) {
    $this->db->query("DELETE FROM cart WHERE product_id = '$product_id'");
  }

  // ...
}


<?php

class Database {
    private $host;
    private $db;
    private $user;
    private $pass;

    function __construct() {
        $this->host = 'localhost';
        $this->db = 'example';
        $this->user = 'root';
        $this->pass = '';
    }

    function connect() {
        try {
            $conn = new PDO("mysql:host=$this->host;dbname=$this->db", $this->user, $this->pass);
            return $conn;
        } catch(PDOException $e) {
            echo "Connection failed: " . $e->getMessage();
        }
    }

    function disconnect($conn) {
        $conn = null;
    }
}
?>


<?php

class PurchaseModel extends Database {
    private $conn;

    function __construct() {
        parent::__construct();
        $this->conn = $this->connect();
    }

    // Get all purchases
    function getAllPurchases() {
        $sql = "SELECT * FROM purchases";
        try {
            $stmt = $this->conn->prepare($sql);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch(PDOException $e) {
            echo "Error: " . $e->getMessage();
        }
    }

    // Get purchase by id
    function getPurchaseById($id) {
        $sql = "SELECT * FROM purchases WHERE id = :id";
        try {
            $stmt = $this->conn->prepare($sql);
            $stmt->bindParam(':id', $id);
            $stmt->execute();
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch(PDOException $e) {
            echo "Error: " . $e->getMessage();
        }
    }

    // Create a new purchase
    function createPurchase($data) {
        $sql = "INSERT INTO purchases (user_id, product_id, purchase_date, total) VALUES (:user_id, :product_id, NOW(), :total)";
        try {
            $stmt = $this->conn->prepare($sql);
            $stmt->bindParam(':user_id', $data['user_id']);
            $stmt->bindParam(':product_id', $data['product_id']);
            $stmt->bindParam(':total', $data['total']);
            return $stmt->execute();
        } catch(PDOException $e) {
            echo "Error: " . $e->getMessage();
        }
    }

    // Update an existing purchase
    function updatePurchase($id, $data) {
        $sql = "UPDATE purchases SET user_id = :user_id, product_id = :product_id, total = :total WHERE id = :id";
        try {
            $stmt = $this->conn->prepare($sql);
            $stmt->bindParam(':id', $id);
            $stmt->bindParam(':user_id', $data['user_id']);
            $stmt->bindParam(':product_id', $data['product_id']);
            $stmt->bindParam(':total', $data['total']);
            return $stmt->execute();
        } catch(PDOException $e) {
            echo "Error: " . $e->getMessage();
        }
    }

    // Delete a purchase
    function deletePurchase($id) {
        $sql = "DELETE FROM purchases WHERE id = :id";
        try {
            $stmt = $this->conn->prepare($sql);
            $stmt->bindParam(':id', $id);
            return $stmt->execute();
        } catch(PDOException $e) {
            echo "Error: " . $e->getMessage();
        }
    }

    function disconnect() {
        parent::disconnect($this->conn);
    }
}
?>


<?php

class PurchaseController extends PurchaseModel {

    // Display all purchases
    function getAllPurchasesView() {
        $purchases = $this->getAllPurchases();
        require_once 'view/purchases.php';
    }

    // Display a single purchase
    function getPurchaseViewById($id) {
        $purchase = $this->getPurchaseById($id);
        require_once 'view/single-purchase.php';
    }

    // Create a new purchase
    function createPurchaseView() {
        if (isset($_POST['submit'])) {
            $data = array(
                'user_id' => $_POST['user_id'],
                'product_id' => $_POST['product_id'],
                'total' => $_POST['total']
            );
            if ($this->createPurchase($data)) {
                header('Location: purchases.php');
                exit;
            }
        } else {
            require_once 'view/create-purchase.php';
        }
    }

    // Update an existing purchase
    function updatePurchaseView($id) {
        $purchase = $this->getPurchaseById($id);
        if (isset($_POST['submit'])) {
            $data = array(
                'user_id' => $_POST['user_id'],
                'product_id' => $_POST['product_id'],
                'total' => $_POST['total']
            );
            if ($this->updatePurchase($id, $data)) {
                header('Location: purchases.php');
                exit;
            }
        } else {
            require_once 'view/update-purchase.php';
        }
    }

    // Delete a purchase
    function deletePurchaseView($id) {
        if (isset($_POST['submit'])) {
            if ($this->deletePurchase($id)) {
                header('Location: purchases.php');
                exit;
            }
        } else {
            require_once 'view/delete-purchase.php';
        }
    }

}
?>


<?php require_once 'header.php'; ?>
<h1>Purchases</h1>
<ul>
    <?php foreach ($purchases as $purchase) : ?>
        <li><?php echo $purchase['id']; ?> | <?php echo $purchase['user_id']; ?> | <?php echo $purchase['product_id']; ?> | <?php echo $purchase['total']; ?></li>
    <?php endforeach; ?>
</ul>
<?php require_once 'footer.php'; ?>


<?php require_once 'header.php'; ?>
<h1>Single Purchase</h1>
<p><?php echo $purchase['id']; ?> | <?php echo $purchase['user_id']; ?> | <?php echo $purchase['product_id']; ?> | <?php echo $purchase['total']; ?></p>
<?php require_once 'footer.php'; ?>


<?php require_once 'header.php'; ?>
<h1>Create Purchase</h1>
<form action="" method="post">
    <label for="user_id">User ID:</label><br>
    <input type="text" id="user_id" name="user_id"><br>
    <label for="product_id">Product ID:</label><br>
    <input type="text" id="product_id" name="product_id"><br>
    <label for="total">Total:</label><br>
    <input type="text" id="total" name="total"><br>
    <input type="submit" name="submit" value="Create Purchase">
</form>
<?php require_once 'footer.php'; ?>


<?php require_once 'header.php'; ?>
<h1>Update Purchase</h1>
<p><?php echo $purchase['id']; ?> | <?php echo $purchase['user_id']; ?> | <?php echo $purchase['product_id']; ?> | <?php echo $purchase['total']; ?></p>
<form action="" method="post">
    <label for="user_id">User ID:</label><br>
    <input type="text" id="user_id" name="user_id"><br>
    <label for="product_id">Product ID:</label><br>
    <input type="text" id="product_id" name="product_id"><br>
    <label for="total">Total:</label><br>
    <input type="text" id="total" name="total"><br>
    <input type="submit" name="submit" value="Update Purchase">
</form>
<?php require_once 'footer.php'; ?>


<?php require_once 'header.php'; ?>
<h1>Delete Purchase</h1>
<p><?php echo $purchase['id']; ?> | <?php echo $purchase['user_id']; ?> | <?php echo $purchase['product_id']; ?> | <?php echo $purchase['total']; ?></p>
<form action="" method="post">
    <input type="submit" name="submit" value="Delete Purchase">
</form>
<?php require_once 'footer.php'; ?>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purchases</title>
</head>
<body>
    <nav>
        <ul>
            <li><a href="purchases.php">Purchases</a></li>
            <li><a href="single-purchase.php?id=<?php echo $id; ?>">Single Purchase</a></li>
            <li><a href="create-purchase.php">Create Purchase</a></li>
            <li><a href="update-purchase.php?id=<?php echo $id; ?>">Update Purchase</a></li>
            <li><a href="delete-purchase.php?id=<?php echo $id; ?>">Delete Purchase</a></li>
        </ul>
    </nav>


</body>
</html>


<?php

// Connect to the database
$conn = new mysqli("localhost", "username", "password", "database");

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get products from the database
function getProducts() {
  global $conn;
  $query = "SELECT * FROM products";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
      echo "<div class='product'>";
      echo "<h2>" . $row["name"] . "</h2>";
      echo "<p>Price: $" . $row["price"] . "</p>";
      echo "<button class='add-to-cart' data-id='" . $row["id"] . "'>Add to Cart</button>";
      echo "</div>";
    }
  } else {
    echo "0 results";
  }
}

// Add product to cart
function addProductToCart() {
  global $conn;
  if (isset($_POST['product_id'])) {
    $product_id = $_POST['product_id'];
    $customer_name = $_POST['customer_name'];

    // Check if the product exists in the cart
    $query = "SELECT * FROM order_items WHERE product_id = '$product_id' AND customer_name = '$customer_name'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
      echo "Product already added to your cart";
    } else {
      // Add the product to the cart
      $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (NULL, '$product_id', '1')";
      $conn->query($query);
      echo "Product added successfully to your cart!";
    }
  }
}

// Checkout functionality
function checkout() {
  global $conn;
  if (isset($_POST['customer_name'])) {
    $customer_name = $_POST['customer_name'];
    $order_date = date("Y-m-d");

    // Insert new order into the database
    $query = "INSERT INTO orders (customer_name, order_date) VALUES ('$customer_name', '$order_date')";
    $conn->query($query);

    // Get the latest order ID
    $latest_order_id = $conn->insert_id;

    // Update the order items with the new order ID
    $query = "UPDATE order_items SET order_id = '$latest_order_id'";
    $conn->query($query);
    echo "Order created successfully!";
  }
}

// Execute functions based on user actions
if (isset($_POST['action'])) {
  if ($_POST['action'] == 'add_product_to_cart') {
    addProductToCart();
  } elseif ($_POST['action'] == 'checkout') {
    checkout();
  }
}

?>

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Online Store</title>
<style>
.product {
  border: 1px solid #ccc;
  padding: 10px;
}
.add-to-cart {
  background-color: #4CAF50;
  color: white;
  padding: 10px 20px;
  border: none;
  cursor: pointer;
}
.add-to-cart:hover {
  background-color: #3e8e41;
}
</style>
</head>

<body>
<h1>Online Store</h1>
<div class="products">
<?php getProducts(); ?>
</div>

<!-- Add product to cart form -->
<form id="add_product_to_cart_form" action="" method="post">
  <input type="hidden" name="product_id" value="">
  <button type="submit" class="add-to-cart">Add to Cart</button>
</form>

<!-- Checkout form -->
<form id="checkout_form" action="" method="post">
  <label for="customer_name">Customer Name:</label>
  <input type="text" name="customer_name" required>
  <button type="submit" class="add-to-cart">Checkout</button>
</form>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
$(document).ready(function() {
  $(".add-to-cart").on("click", function() {
    var product_id = $(this).data('id');
    $("#add_product_to_cart_form input[name='product_id']").val(product_id);
  });
});
</script>
</body>
</html>



// db.php - database connection settings

$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'store';

// Connect to database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// functions.php - purchase functionality

function authenticateUser($username, $password) {
  // Check if user exists and password is correct
  $query = "SELECT * FROM users WHERE username='$username' AND password=PASSWORD('$password')";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    return true;
  } else {
    return false;
  }
}

function addProductToOrder($order_id, $product_id, $quantity) {
  // Check if product is available
  $query = "SELECT * FROM products WHERE id='$product_id'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    $row = $result->fetch_assoc();
    if ($row['quantity'] >= $quantity) {
      // Add product to order
      $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', '$quantity')";
      $conn->query($query);

      // Update product quantity
      $query = "UPDATE products SET quantity=quantity-$quantity WHERE id='$product_id'";
      $conn->query($query);
    } else {
      echo 'Product is not available';
    }
  } else {
    echo 'Product does not exist';
  }
}

function createOrder($user_id, $total) {
  // Create new order
  $query = "INSERT INTO orders (user_id, total, status) VALUES ('$user_id', '$total', 'pending')";
  $conn->query($query);

  return $conn->insert_id;
}

function processPayment($order_id, $payment_method, $amount_paid) {
  // Update order status
  $query = "UPDATE orders SET status='shipped' WHERE id='$order_id'";
  $conn->query($query);
}


// index.php - purchase form

if (isset($_POST['username']) && isset($_POST['password'])) {
  if (authenticateUser($_POST['username'], $_POST['password'])) {
    $user_id = get_user_id($conn, $_POST['username']);

    // Get products
    $query = "SELECT * FROM products";
    $result = $conn->query($query);

    echo '<h1>Purchase Form</h1>';

    while ($row = $result->fetch_assoc()) {
      echo '<form action="" method="post">
        <input type="hidden" name="product_id" value="' . $row['id'] . '">
        <label>Product:</label>
        <span>' . $row['name'] . '</span><br>
        <label>Quantity:</label>
        <input type="number" name="quantity" required><br>
        <button type="submit">Add to Cart</button>
      </form>';
    }
  } else {
    echo 'Invalid username or password';
  }
} else {
  // Display login form
}


// index.php - display order summary

if (isset($_SESSION['order_id'])) {
  // Get order details
  $query = "SELECT * FROM orders WHERE id='".$_SESSION['order_id']."'";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    $row = $result->fetch_assoc();

    echo '<h1>Order Summary</h1>';

    // Display order items
    $query = "SELECT * FROM order_items WHERE order_id='".$_SESSION['order_id']."'";
    $result = $conn->query($query);

    while ($row_item = $result->fetch_assoc()) {
      echo 'Product: ' . $row_item['product_name'] . ', Quantity: ' . $row_item['quantity'] . '<br>';
    }
  }
}


function register_user($username, $email, $password) {
    // Hash the password
    $hashed_password = password_hash($password, PASSWORD_DEFAULT);

    // Insert user into database
    $query = "INSERT INTO users (username, email, password) VALUES ('$username', '$email', '$hashed_password')";
    mysqli_query($db, $query);
}

function login_user($username, $password) {
    // Get user from database
    $query = "SELECT * FROM users WHERE username = '$username'";
    $result = mysqli_query($db, $query);

    if ($row = mysqli_fetch_assoc($result)) {
        // Check password
        if (password_verify($password, $row['password'])) {
            return true;
        }
    }

    return false;
}


function make_purchase($user_id, $product_name, $price) {
    // Insert order into database
    $query = "INSERT INTO orders (user_id, product_name, price, payment_method, payment_status) VALUES ('$user_id', '$product_name', '$price', 'PayPal', 'Pending')";
    mysqli_query($db, $query);
}


function process_payment($order_id) {
    // Simulate payment processing
    echo "Processing payment for order $order_id...";

    // Update order status in database
    $query = "UPDATE orders SET payment_status = 'Success' WHERE id = '$order_id'";
    mysqli_query($db, $query);
}


// Register a user
register_user('john', 'john@example.com', 'password');

// Login the user
if (login_user('john', 'password')) {
    echo "User logged in successfully!";
} else {
    echo "Invalid username or password";
}

// Make a purchase
make_purchase(1, 'Product A', 9.99);

// Process payment
process_payment(1);


<?php
// Database connection settings
$host = 'localhost';
$dbname = 'e commerce_db';
$username = 'root';
$password = '';

// Connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

// Function to add product to cart
function addProductToCart($productId, $quantity) {
    global $conn;
    
    // Check if product exists in cart
    $stmt = $conn->prepare('SELECT * FROM cart WHERE productId = :productId');
    $stmt->bindParam(':productId', $productId);
    $stmt->execute();
    $productInCart = $stmt->fetch();

    if ($productInCart) {
        // Update quantity if product already exists in cart
        $updateStmt = $conn->prepare('UPDATE cart SET quantity = :quantity WHERE productId = :productId');
        $updateStmt->bindParam(':quantity', $quantity);
        $updateStmt->bindParam(':productId', $productId);
        $updateStmt->execute();
    } else {
        // Add new product to cart
        $insertStmt = $conn->prepare('INSERT INTO cart (productId, quantity) VALUES (:productId, :quantity)');
        $insertStmt->bindParam(':productId', $productId);
        $insertStmt->bindParam(':quantity', $quantity);
        $insertStmt->execute();
    }
}

// Function to update cart
function updateCart($cartId, $productId, $quantity) {
    global $conn;
    
    // Update quantity of product in cart
    $stmt = $conn->prepare('UPDATE cart SET quantity = :quantity WHERE id = :cartId AND productId = :productId');
    $stmt->bindParam(':cartId', $cartId);
    $stmt->bindParam(':productId', $productId);
    $stmt->bindParam(':quantity', $quantity);
    $stmt->execute();
}

// Function to remove product from cart
function removeProductFromCart($cartId, $productId) {
    global $conn;
    
    // Delete product from cart
    $stmt = $conn->prepare('DELETE FROM cart WHERE id = :cartId AND productId = :productId');
    $stmt->bindParam(':cartId', $cartId);
    $stmt->bindParam(':productId', $productId);
    $stmt->execute();
}

// Function to checkout (process payment and update order)
function checkout($cartId, $paymentMethod) {
    global $conn;
    
    // Get total cost of cart
    $stmt = $conn->prepare('SELECT SUM(quantity * price) AS total FROM cart WHERE id = :cartId');
    $stmt->bindParam(':cartId', $cartId);
    $stmt->execute();
    $totalCost = $stmt->fetch()['total'];

    // Process payment (this example assumes a simple PayPal payment gateway)
    if ($paymentMethod == 'paypal') {
        $paypalToken = 'YOUR_PAYPAL_TOKEN';
        $paypalSecret = 'YOUR_PAYPAL_SECRET';

        // Call PayPal API to process payment
        $paypalResponse = callPayPalAPI($paypalToken, $paypalSecret, $cartId);

        // Update order status if payment is successful
        if ($paypalResponse['success']) {
            updateOrderStatus($cartId);
        } else {
            echo 'Payment failed: ' . $paypalResponse['error'];
        }
    }

    // Update order with new total cost and payment method
    $updateStmt = $conn->prepare('UPDATE orders SET totalCost = :totalCost, paymentMethod = :paymentMethod WHERE id = :cartId');
    $updateStmt->bindParam(':cartId', $cartId);
    $updateStmt->bindParam(':totalCost', $totalCost);
    $updateStmt->bindParam(':paymentMethod', $paymentMethod);
    $updateStmt->execute();
}

// Function to update order status
function updateOrderStatus($orderId) {
    global $conn;
    
    // Update order status (e.g. from "pending" to "shipped")
    $stmt = $conn->prepare('UPDATE orders SET status = :status WHERE id = :orderId');
    $stmt->bindParam(':orderId', $orderId);
    $stmt->bindParam(':status', 'shipped'); // example status
    $stmt->execute();
}

// Process request
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    switch ($_POST['action']) {
        case 'add_product_to_cart':
            addProductToCart($_POST['productId'], $_POST['quantity']);
            break;
        case 'update_cart':
            updateCart($_POST['cartId'], $_POST['productId'], $_POST['quantity']);
            break;
        case 'remove_product_from_cart':
            removeProductFromCart($_POST['cartId'], $_POST['productId']);
            break;
        case 'checkout':
            checkout($_POST['cartId'], $_POST['paymentMethod']);
            break;
    }
}

// Display cart contents
$stmt = $conn->prepare('SELECT * FROM cart WHERE id = :id');
$stmt->bindParam(':id', $_SESSION['cartId']);
$stmt->execute();
$cartContents = $stmt->fetchAll();

?>


// database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// connect to the database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// form data
$customer_name = $_POST['customer_name'];
$order_date = date('Y-m-d');
$total_cost = 0;

// get the selected products
if (isset($_POST['product_id'])) {
    foreach ($_POST['product_id'] as $product_id) {
        $query = "SELECT * FROM products WHERE id = '$product_id'";
        $result = $conn->query($query);
        
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_assoc()) {
                $total_cost += $row['price'];
            }
        }
    }
}

// insert the order into the database
$query = "INSERT INTO orders (customer_name, order_date, total_cost)
          VALUES ('$customer_name', '$order_date', '$total_cost')";
$conn->query($query);

// get the last inserted order id
$order_id = $conn->insert_id;

// update the product quantities in the products table
foreach ($_POST['product_id'] as $product_id) {
    $query = "UPDATE products SET quantity = quantity - 1 WHERE id = '$product_id'";
    $conn->query($query);
}

// close the database connection
$conn->close();


<!DOCTYPE html>
<html>
<head>
    <title>Purchase Form</title>
</head>
<body>
    <h1>Purchase Form</h1>
    
    <form action="purchase.php" method="post">
        Customer Name: <input type="text" name="customer_name"><br><br>
        
        Products:
        <?php
            // get all products from the database
            $query = "SELECT * FROM products";
            $result = $conn->query($query);
            
            if ($result->num_rows > 0) {
                while ($row = $result->fetch_assoc()) {
                    echo "<input type='checkbox' name='product_id[]' value='" . $row['id'] . "'>" . $row['name'] . " $" . $row['price'] . "<br>";
                }
            }
        ?>
        
        <input type="submit" value="Purchase">
    </form>
</body>
</html>


<?php
require_once 'config.php';

// Connect to database
$conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get products from database
$sql = "SELECT * FROM products";
$result = $conn->query($sql);

?>
<!DOCTYPE html>
<html>
<head>
    <title>Purchase</title>
</head>
<body>
    <h1>Products:</h1>
    <ul>
        <?php while ($row = $result->fetch_assoc()) { ?>
            <li>
                <a href="purchase.php?product_id=<?php echo $row['id']; ?>"><?php echo $row['name']; ?></a>
                ($<?php echo number_format($row['price'], 2); ?>)
            </li>
        <?php } ?>
    </ul>

    <form action="purchase_process.php" method="post">
        <input type="submit" value="Make Purchase">
    </form>

</body>
</html>


<?php
require_once 'config.php';

// Connect to database
$conn = new mysqli($db_host, $db_user, $db_pass, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get product ID from URL
$product_id = $_GET['product_id'];

// Add item to order
$sql = "INSERT INTO order_items (order_id, product_id, quantity)
        VALUES ('NULL', '$product_id', '1')";

if ($conn->query($sql) === TRUE) {
    echo "Item added to cart.";
} else {
    echo "Error: " . $conn->error;
}

// Redirect back to index page
header("Location: index.php");
?>


<?php
$db_host = 'localhost';
$db_user = 'root';
$db_pass = '';
$db_name = 'store';

?>


<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'store');

$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}
?>


<?php
function getUserData($username){
  global $conn;
  $query = "SELECT * FROM users WHERE username='$username'";
  $result = mysqli_query($conn, $query);

  if (mysqli_num_rows($result) > 0) {
    return mysqli_fetch_assoc($result);
  }
  return false;
}

function getUserCart($userId){
  global $conn;
  $query = "SELECT * FROM cart WHERE user_id='$userId'";
  $result = mysqli_query($conn, $query);

  if (mysqli_num_rows($result) > 0) {
    while ($row = mysqli_fetch_assoc($result)) {
      return array_merge($row, array('product' => getProductData($row['product_id'])));
    }
  }
  return false;
}

function addProductToCart($userId, $productId, $quantity){
  global $conn;
  $query = "INSERT INTO cart (user_id, product_id, quantity) VALUES ('$userId', '$productId', '$quantity')";
  if (mysqli_query($conn, $query)) {
    return true;
  }
  return false;
}

function purchase($userId){
  global $conn;
  $cartData = getUserCart($userId);
  foreach ($cartData as $item) {
    $price = getProductPrice($item['product_id']);
    // Deduct price from user balance
    deductBalance($userId, $price * $item['quantity']);
    // Update stock quantity
    updateStockQuantity($item['product_id'], -$item['quantity']);
  }
  return true;
}

function getProductData($productId){
  global $conn;
  $query = "SELECT * FROM products WHERE id='$productId'";
  $result = mysqli_query($conn, $query);
  if (mysqli_num_rows($result) > 0) {
    return mysqli_fetch_assoc($result);
  }
  return false;
}

function getProductPrice($productId){
  global $conn;
  $query = "SELECT price FROM products WHERE id='$productId'";
  $result = mysqli_query($conn, $query);
  if (mysqli_num_rows($result) > 0) {
    return mysqli_fetch_assoc($result)['price'];
  }
  return false;
}

function updateStockQuantity($productId, $quantity){
  global $conn;
  $query = "UPDATE products SET stock_quantity=stock_quantity-$quantity WHERE id='$productId'";
  if (mysqli_query($conn, $query)) {
    return true;
  }
  return false;
}
?>


<?php
require_once 'config.php';
require_once 'functions.php';

if (isset($_POST['username']) && isset($_POST['password'])) {
  $userData = getUserData($_POST['username']);
  if ($userData !== false) {
    if (password_verify($_POST['password'], $userData['password'])) {
      $_SESSION['userId'] = $userData['id'];
    }
  }
}

?>


<?php
require_once 'config.php';
require_once 'functions.php';

$query = "SELECT * FROM products";
$result = mysqli_query($conn, $query);

if (mysqli_num_rows($result) > 0) {
  while ($row = mysqli_fetch_assoc($result)) {
    echo "<div>";
    echo "<h2>$row[name]</h2>";
    echo "<p>Price: $<span>" . number_format($row['price'], 2) . "</span></p>";
    echo "<button>Add to Cart</button>";
    echo "</div>";
  }
}
?>


<?php
require_once 'config.php';
require_once 'functions.php';

if (isset($_SESSION['userId'])) {
  $cartData = getUserCart($_SESSION['userId']);
  if ($cartData !== false) {
    foreach ($cartData as $item) {
      echo "<div>";
      echo "<h2>$item[name]</h2>";
      echo "<p>Price: $<span>" . number_format($item['price'], 2) . "</span></p>";
      echo "<p>Quantity: $item[quantity]</p>";
      echo "</div>";
    }
  }
}
?>


<?php
require_once 'config.php';
require_once 'functions.php';

if (isset($_SESSION['userId'])) {
  if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
    $result = addProductToCart($_SESSION['userId'], $_POST['product_id'], $_POST['quantity']);
    if ($result) {
      echo "Added to cart";
    } else {
      echo "Failed to add to cart";
    }
  }

  if (isset($_POST['checkout'])) {
    $result = purchase($_SESSION['userId']);
    if ($result) {
      echo "Purchase successful";
    } else {
      echo "Failed to make purchase";
    }
  }
}
?>


// config.php (database connection settings)
$host = 'localhost';
$dbname = 'store';
$username = 'root';
$password = '';

// db.php (database connection class)
class Database {
    private $conn;

    public function __construct() {
        $this->conn = new PDO("mysql:host=$GLOBALS['host'];dbname=$GLOBALS['dbname']", $GLOBALS['username'], $GLOBALS['password']);
    }

    public function query($sql, $params = array()) {
        $stmt = $this->conn->prepare($sql);
        foreach ($params as $key => $val) {
            $stmt->bindParam($key, $val);
        }
        return $stmt->execute();
    }

    public function fetchAll($sql, $params = array()) {
        $stmt = $this->conn->prepare($sql);
        foreach ($params as $key => $val) {
            $stmt->bindParam($key, $val);
        }
        return $stmt->fetchAll();
    }
}

// users.php (user management)
class Users {
    private $db;

    public function __construct() {
        $this->db = new Database();
    }

    public function create($name, $email) {
        $sql = "INSERT INTO users (name, email) VALUES (:name, :email)";
        return $this->db->query($sql, array(':name' => $name, ':email' => $email));
    }

    public function getAll() {
        $sql = "SELECT * FROM users";
        return $this->db->fetchAll($sql);
    }
}

// products.php (product management)
class Products {
    private $db;

    public function __construct() {
        $this->db = new Database();
    }

    public function create($name, $price) {
        $sql = "INSERT INTO products (name, price) VALUES (:name, :price)";
        return $this->db->query($sql, array(':name' => $name, ':price' => $price));
    }

    public function getAll() {
        $sql = "SELECT * FROM products";
        return $this->db->fetchAll($sql);
    }
}

// orders.php (order management)
class Orders {
    private $db;

    public function __construct() {
        $this->db = new Database();
    }

    public function create($user_id, $total, $status) {
        $sql = "INSERT INTO orders (user_id, total, status) VALUES (:user_id, :total, :status)";
        return $this->db->query($sql, array(':user_id' => $user_id, ':total' => $total, ':status' => $status));
    }

    public function getAll() {
        $sql = "SELECT * FROM orders";
        return $this->db->fetchAll($sql);
    }
}

// purchase.php (purchase functionality)
class Purchase {
    private $users;
    private $products;
    private $orders;

    public function __construct() {
        $this->users = new Users();
        $this->products = new Products();
        $this->orders = new Orders();
    }

    public function index() {
        $users = $this->users->getAll();
        $products = $this->products->getAll();
        return array('users' => $users, 'products' => $products);
    }

    public function add_to_cart($user_id, $product_id) {
        // Add product to cart
        $sql = "SELECT * FROM products WHERE id = :id";
        $product = $this->db->fetch($sql, array(':id' => $product_id));
        if ($product) {
            // Update order total and status
            $order = $this->orders->getByUser($user_id);
            if ($order) {
                $total += $product['price'];
                $status = 'pending';
                $this->orders->update($order['id'], array('total' => $total, 'status' => $status));
            } else {
                // Create new order
                $total = $product['price'];
                $status = 'pending';
                $new_order = $this->orders->create($user_id, $total, $status);
            }
        }
    }

    public function checkout($user_id) {
        // Get user's cart products and total price
        $cart_products = $this->db->fetchAll("SELECT * FROM orders WHERE user_id = :id", array(':id' => $user_id));
        $total_price = 0;
        foreach ($cart_products as $product) {
            $total_price += $product['price'];
        }

        // Create new order
        $new_order = $this->orders->create($user_id, $total_price, 'pending');

        // Update product stock and add to order history
        foreach ($cart_products as $product) {
            $sql = "UPDATE products SET stock = stock - 1 WHERE id = :id";
            $this->db->query($sql, array(':id' => $product['id']));
        }
    }

    public function view_order($order_id) {
        // Get order details
        $order = $this->orders->getById($order_id);
        return $order;
    }
}


$purchase = new Purchase();
$result = $purchase->index();
print_r($result);

// Add product to cart
$user_id = 1;
$product_id = 1;
$purchase->add_to_cart($user_id, $product_id);

// Checkout
$purchase->checkout($user_id);

// View order
$order_id = 1;
$order = $purchase->view_order($order_id);
print_r($order);


// config.php
<?php
$db_host = 'localhost';
$db_username = 'root';
$db_password = '';
$db_name = 'database';

$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>

// purchase.php
<?php
require_once 'config.php';

// Function to add a product to the cart
function add_product_to_cart($product_id, $quantity) {
    global $conn;
    $sql = "INSERT INTO order_items (order_id, product_id, quantity)
            VALUES ((SELECT id FROM orders WHERE user_id = ?), ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iii", $_SESSION['user_id'], $product_id, $quantity);
    $stmt->execute();
}

// Function to create a new order
function create_order() {
    global $conn;
    $sql = "INSERT INTO orders (user_id, total)
            VALUES (?, 0)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $_SESSION['user_id']);
    $stmt->execute();
}

// Function to calculate the total cost of a cart
function calculate_total() {
    global $conn;
    $sql = "SELECT SUM(p.price * oi.quantity) AS total FROM products p
            JOIN order_items oi ON p.id = oi.product_id
            WHERE oi.order_id = (SELECT id FROM orders WHERE user_id = ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $_SESSION['user_id']);
    $stmt->execute();
    return $stmt->get_result()->fetch_assoc()['total'];
}

// Function to complete a purchase
function complete_purchase() {
    global $conn;
    create_order();
    $order_id = $conn->insert_id;
    $total = calculate_total();

    // Update the total cost of the order
    $sql = "UPDATE orders SET total = ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("di", $total, $order_id);
    $stmt->execute();

    // Clear the cart
    $sql = "DELETE FROM order_items WHERE order_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $order_id);
    $stmt->execute();
}

// If the user is logged in, proceed with the purchase
if (isset($_SESSION['user_id'])) {
    // Add product to cart
    if (isset($_POST['add_to_cart'])) {
        add_product_to_cart($_POST['product_id'], $_POST['quantity']);
    }

    // Complete the purchase
    if (isset($_POST['complete_purchase'])) {
        complete_purchase();
    }
}
?>


// login.php
<?php
require_once 'config.php';

if (isset($_POST['username']) && isset($_POST['password'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];

    $sql = "SELECT * FROM users WHERE username = ? AND password = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ss", $username, $password);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        $_SESSION['user_id'] = $result->fetch_assoc()['id'];
        header('Location: purchase.php');
        exit;
    } else {
        echo 'Invalid username or password';
    }
}
?>

// purchase.php
<?php
require_once 'config.php';

// Add product to cart
if (isset($_POST['add_to_cart'])) {
    add_product_to_cart($_POST['product_id'], $_POST['quantity']);
}

// Complete the purchase
if (isset($_POST['complete_purchase'])) {
    complete_purchase();
}
?>

<!-- HTML Form -->
<form action="purchase.php" method="post">
    <input type="hidden" name="add_to_cart" value="1">
    <label>Product ID:</label>
    <input type="text" name="product_id"><br><br>
    <label>Quantity:</label>
    <input type="number" name="quantity"><br><br>
    <button type="submit">Add to Cart</button>
</form>

<form action="purchase.php" method="post">
    <input type="hidden" name="complete_purchase" value="1">
    <button type="submit">Complete Purchase</button>
</form>


<?php
// Initialize an empty array to store cart data
$cart = [];

// Function to add item to cart
function addItem($item_id, $quantity) {
    global $cart;
    
    // Check if item is already in cart
    foreach ($cart as &$item) {
        if ($item['id'] == $item_id) {
            // If it is, update quantity
            $item['quantity'] += $quantity;
            return true;
        }
    }
    
    // If not, add new item to cart
    array_push($cart, ['id' => $item_id, 'name' => getitemName($item_id), 'price' => getItemPrice($item_id), 'quantity' => $quantity]);
    
    return false;
}

// Function to view cart contents
function viewCart() {
    global $cart;
    
    // Display each item in the cart with its quantity and total cost
    echo "<h2>Shopping Cart</h2>";
    foreach ($cart as $item) {
        echo "Item: " . $item['name'] . " (x" . $item['quantity'] . ") = $" . number_format($item['price'] * $item['quantity'], 2) . "<br>";
    }
    
    // Display total cost of all items in cart
    $totalCost = array_sum(array_map(function($item) {
        return $item['price'] * $item['quantity'];
    }, $cart));
    
    echo "Total: $" . number_format($totalCost, 2);
}

// Function to remove item from cart
function removeItem($item_id) {
    global $cart;
    
    // Find and remove the specified item from the cart
    foreach ($cart as &$item) {
        if ($item['id'] == $item_id) {
            array_splice($cart, array_search($item, $cart), 1);
            return true;
        }
    }
    
    return false;
}

// Function to update quantity of item in cart
function updateQuantity($item_id, $new_quantity) {
    global $cart;
    
    // Find the specified item and update its quantity
    foreach ($cart as &$item) {
        if ($item['id'] == $item_id) {
            $item['quantity'] = $new_quantity;
            return true;
        }
    }
    
    return false;
}

// Simulated database functions for demonstration purposes
function getitemName($item_id) {
    // Return item name based on its ID (for example)
    switch ($item_id) {
        case 1:
            return "Apple Watch";
        case 2:
            return "iPhone 13 Pro";
        default:
            return "";
    }
}

function getItemPrice($item_id) {
    // Return price of item based on its ID (for example)
    switch ($item_id) {
        case 1:
            return 299.99;
        case 2:
            return 799.99;
        default:
            return 0.00;
    }
}

// Example usage
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['action'])) {
        switch ($_POST['action']) {
            case 'add':
                addItem($_POST['item_id'], $_POST['quantity']);
                break;
            case 'remove':
                removeItem($_POST['item_id']);
                break;
            case 'update':
                updateQuantity($_POST['item_id'], $_POST['new_quantity']);
                break;
        }
    }
}

?>
<form action="" method="post">
    <input type="hidden" name="action" value="">
    
    <!-- Add items to cart -->
    <label>Item ID:</label>
    <input type="number" name="item_id">
    <label>Quantity:</label>
    <input type="number" name="quantity">
    <input type="submit" value="Add Item">
</form>

<form action="" method="post">
    <input type="hidden" name="action" value="">
    
    <!-- View cart contents -->
    <input type="submit" value="View Cart">
</form>

<?php
// Display viewCart() function if user clicks 'View Cart' button
if (isset($_POST['action']) && $_POST['action'] == "View Cart") {
    viewCart();
}
?>


<?php
// Initialize session data if not set
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function addItemToCart($id, $name, $price) {
    // Check if item already exists in cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $id) {
            // If existing item found, increment quantity
            $item['quantity'] += 1;
            return;
        }
    }

    // Add new item to cart
    $_SESSION['cart'][] = array('id' => $id, 'name' => $name, 'price' => $price, 'quantity' => 1);
}

// Function to remove item from cart
function removeFromCart($id) {
    // Find the index of the item in the cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $id) {
            unset($item);
            break;
        }
    }

    // Re-index array to remove empty elements
    $_SESSION['cart'] = array_values($_SESSION['cart']);
}

// Function to update cart total
function updateCartTotal() {
    // Calculate total cost of items in cart
    $total = 0;
    foreach ($_SESSION['cart'] as &$item) {
        $total += $item['price'] * $item['quantity'];
    }

    return $total;
}

// Display the cart contents and total cost
?>
<table>
    <tr><th>Item Name</th><th>Quantity</th><th>Price per item</th><th>Total for item</th></tr>
    <?php foreach ($_SESSION['cart'] as $item): ?>
        <tr>
            <td><?php echo $item['name']; ?></td>
            <td><?php echo $item['quantity']; ?></td>
            <td>$<?php echo number_format($item['price'], 2); ?></td>
            <td>$<?php echo number_format($item['price'] * $item['quantity'], 2); ?></td>
        </tr>
    <?php endforeach; ?>
</table>

Total cost: $<?php echo number_format(updateCartTotal(), 2); ?>

<!-- Add buttons to the page for users to interact with cart -->
<form action="cart.php" method="post">
    <button type="submit" name="removeItem">Remove item from cart</button>
    <input type="hidden" name="itemIdToRemove" value="">
</form>

<form action="checkout.php" method="post">
    <button type="submit">Proceed to Checkout</button>
</form>

<?php
if (isset($_POST['removeItem'])) {
    removeFromCart($_POST['itemIdToRemove']);
}

// Display error messages for users if an item is removed from the cart
if (count($_SESSION['cart']) == 0) {
    echo "<p>Cart is empty.</p>";
}
?>


<?php
// Retrieve user's cart data from session
$cart = $_SESSION['cart'];

// Display a confirmation message before proceeding to checkout
echo "You are about to proceed with the following items in your cart:
";
foreach ($cart as $item) {
    echo "  - {$item['name']} x {$item['quantity']}
";
}

// Process payment using Stripe or another payment gateway
// (This example uses a placeholder function for demonstration purposes)
processPayment($cart);

function processPayment($cart) {
    // Implement your actual payment processing logic here
    // For this example, we'll just display a success message
    echo "Payment processed successfully!";
}
?>


<?php
// Add an item to the cart with ID 1, name "Apple", and price $2.99
addItemToCart(1, 'Apple', 2.99);
?>


<?php
// Remove the item with ID 1 from the cart
removeFromCart(1);
?>


// form.php

?>

<form action="purchase.php" method="post">
  <label for="product_id">Select Product:</label>
  <select name="product_id">
    <?php foreach ($products as $product) { ?>
      <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?></option>
    <?php } ?>
  </select>

  <br />

  <label for="quantity">Quantity:</label>
  <input type="number" name="quantity" required>

  <br />

  <button type="submit">Purchase</button>
</form>

<?php


// purchase.php

require_once 'database.php';

if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
  $productId = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  // Retrieve product details from database
  $stmt = $pdo->prepare('SELECT price FROM products WHERE id = :id');
  $stmt->execute([':id' => $productId]);
  $productPrice = $stmt->fetchColumn();

  // Calculate total cost
  $totalCost = $productPrice * $quantity;

  // Store purchase in database
  $stmt = $pdo->prepare('INSERT INTO purchases (product_id, quantity, total_cost) VALUES (:id, :qty, :tc)');
  $stmt->execute([
    ':id' => $productId,
    ':qty' => $quantity,
    ':tc' => $totalCost
  ]);

  echo 'Purchase successful!';
}


// database.php

$pdo = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');


<?php

// Database connection settings
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'myshop');

// Connect to database
$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($mysqli->connect_errno) {
    echo "Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error;
}

?>


<?php

// Include database connection settings
require_once 'database.php';

// Function to add product to cart
function add_product_to_cart($product_id, $quantity) {
    // Check if product exists in cart
    $query = "SELECT * FROM cart WHERE product_id = '$product_id' AND user_id = '" . $_SESSION['user_id'] . "'";
    $result = $mysqli->query($query);
    
    if ($result->num_rows > 0) {
        // Update quantity if product already exists in cart
        $row = $result->fetch_assoc();
        $new_quantity = $row['quantity'] + $quantity;
        $update_query = "UPDATE cart SET quantity = '$new_quantity' WHERE id = '" . $row['id'] . "'";
        $mysqli->query($update_query);
    } else {
        // Insert new product into cart
        $insert_query = "INSERT INTO cart (user_id, product_id, quantity) VALUES ('" . $_SESSION['user_id'] . "', '$product_id', '$quantity')";
        $mysqli->query($insert_query);
    }
}

// Function to view cart contents
function view_cart_contents() {
    // Get user's cart contents
    $query = "SELECT * FROM cart WHERE user_id = '" . $_SESSION['user_id'] . "'";
    $result = $mysqli->query($query);
    
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "<p>Product ID: $row[product_id]</p>";
            echo "<p>Quantity: $row[quantity]</p>";
        }
    } else {
        echo "Your cart is empty.";
    }
}

?>


<?php

// Include database connection settings and cart functions
require_once 'database.php';
require_once 'cart.php';

// Function to process payment
function process_payment($total_amount) {
    // Process payment using a payment gateway (e.g., PayPal, Stripe)
    // For demonstration purposes, this function is empty
}

?>


<?php

// Include database connection settings and cart functions
require_once 'database.php';
require_once 'cart.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    echo "Please log in to continue.";
} else {
    // Display product list with "Add to Cart" buttons
    $query = "SELECT * FROM products";
    $result = $mysqli->query($query);
    
    while ($row = $result->fetch_assoc()) {
        echo "<p>Product ID: $row[id]</p>";
        echo "<p>Product Name: $row[name]</p>";
        echo "<button onclick='add_product_to_cart(" . $row['id'] . ", 1)'>Add to Cart</button>";
    }
}

?>


// db_config.php
<?php
$host = 'localhost';
$dbname = 'mydb';
$user = 'myuser';
$password = 'mypassword';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $user, $password);
} catch (PDOException $e) {
    die('ERROR: Could not connect. ' . $e->getMessage());
}

function getProducts() {
    global $pdo;
    $stmt = $pdo->prepare("SELECT * FROM products");
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function purchaseProduct($productId, $customerId) {
    global $pdo;
    
    // Get product details
    $productStmt = $pdo->prepare("SELECT price FROM products WHERE id = :id");
    $productStmt->bindParam(':id', $productId);
    $productStmt->execute();
    $price = $productStmt->fetchColumn();
    
    // Insert order into database
    $stmt = $pdo->prepare("INSERT INTO orders (customer_id, product_id, quantity, total_price) VALUES (:customer_id, :product_id, 1, :total_price)");
    $stmt->bindParam(':customer_id', $customerId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':total_price', $price);
    $stmt->execute();
    
    return true;
}

// Function to display products and handle form submission
function displayProducts() {
    global $pdo;
    $products = getProducts();
    
    if (isset($_POST['purchase'])) {
        $productId = $_POST['product_id'];
        $customerId = 1; // Replace with actual customer ID
        
        purchaseProduct($productId, $customerId);
        
        echo "Product purchased successfully!";
    } else {
        ?>
        <h1>Available Products</h1>
        <ul>
            <?php foreach ($products as $product) { ?>
                <li>
                    <?= $product['name'] ?> (<?= $product['price'] ?>)
                    <form action="" method="post">
                        <input type="hidden" name="product_id" value="<?= $product['id'] ?>">
                        <button type="submit" name="purchase">Purchase</button>
                    </form>
                </li>
            <?php } ?>
        </ul>
        <?php
    }
}

displayProducts();
?>


class PurchaseController {
  private $mysqli;

  public function __construct($mysqli) {
    $this->mysqli = $mysqli;
  }

  /**
   * Display product list
   */
  public function index() {
    $query = "SELECT * FROM products";
    $result = mysqli_query($this->mysqli, $query);
    $products = array();
    while ($row = mysqli_fetch_assoc($result)) {
      $products[] = $row;
    }
    include 'view/products.php';
  }

  /**
   * Process purchase
   */
  public function processPurchase() {
    if (isset($_POST['product_id']) && isset($_POST['user_id'])) {
      $productId = $_POST['product_id'];
      $userId = $_POST['user_id'];

      // Get product details
      $query = "SELECT price FROM products WHERE id = '$productId'";
      $result = mysqli_query($this->mysqli, $query);
      $row = mysqli_fetch_assoc($result);
      $price = $row['price'];

      // Insert order into database
      $query = "INSERT INTO orders (user_id, product_id) VALUES ('$userId', '$productId')";
      mysqli_query($this->mysqli, $query);

      echo "Order placed successfully!";
    } else {
      echo "Error processing purchase.";
    }
  }

  /**
   * User authentication and authorization
   */
  public function authenticate() {
    if (isset($_POST['username']) && isset($_POST['password'])) {
      $username = $_POST['username'];
      $password = $_POST['password'];

      // Authenticate user
      $query = "SELECT * FROM users WHERE username = '$username' AND password = '$password'";
      $result = mysqli_query($this->mysqli, $query);
      if (mysqli_num_rows($result) > 0) {
        // User authenticated, authorize access to purchase functionality
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }
}


<?php include 'view/header.php'; ?>

<h1>Products</h1>

<form action="" method="post">
  <select name="product_id">
    <?php foreach ($products as $product) : ?>
      <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?> (<?php echo $product['price']; ?>)</option>
    <?php endforeach; ?>
  </select>
  <input type="hidden" name="user_id" value="<?php echo $_SESSION['user']['id']; ?>">
  <button type="submit">Buy Now</button>
</form>

<?php include 'view/footer.php'; ?>


// database connection settings
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$dbname = 'your_database_name';

// connect to database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// form to collect customer and product information
?>

<form action="purchase.php" method="post">
  <label for="customer_name">Customer Name:</label>
  <input type="text" id="customer_name" name="customer_name"><br><br>

  <label for="product_id">Product ID:</label>
  <select id="product_id" name="product_id">
    <?php
      // retrieve products from database
      $query = "SELECT * FROM products";
      $result = $conn->query($query);
      
      while ($row = $result->fetch_assoc()) {
        echo "<option value='" . $row['id'] . "'>" . $row['name'] . "</option>";
      }
    ?>
  </select><br><br>

  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity"><br><br>

  <button type="submit" name="submit">Purchase</button>
</form>

<?php

// process purchase form submission
if (isset($_POST['submit'])) {
  // retrieve customer and product information from database
  $customer_name = $_POST['customer_name'];
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  // calculate total cost
  $query = "SELECT price FROM products WHERE id = '$product_id'";
  $result = $conn->query($query);
  $row = $result->fetch_assoc();
  $total = $row['price'] * $quantity;

  // insert purchase into database
  $query = "INSERT INTO purchases (customer_name, product_id, quantity, total) VALUES ('$customer_name', '$product_id', '$quantity', '$total')";
  $conn->query($query);

  echo "Purchase successful!";
}

// close database connection
$conn->close();
?>


// config.php (database connection settings)
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'mydb';

// Establish database connection
function connectDB() {
  $conn = new mysqli($GLOBALS['db_host'], $GLOBALS['db_username'], $GLOBALS['db_password'], $GLOBALS['db_name']);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

// Purchase function
function purchaseProduct($productId, $quantity) {
  // Retrieve product details from database
  $conn = connectDB();
  $stmt = $conn->prepare("SELECT price FROM products WHERE id = ?");
  $stmt->bind_param('i', $productId);
  $stmt->execute();
  $result = $stmt->get_result();
  if ($result) {
    $productPrice = $result->fetch_assoc()['price'];
    // Calculate total cost
    $totalCost = $productPrice * $quantity;
    
    // Insert purchase into database
    $stmt = $conn->prepare("INSERT INTO purchases (product_id, quantity, total_cost) VALUES (?, ?, ?)");
    $stmt->bind_param('iis', $productId, $quantity, $totalCost);
    $stmt->execute();
    
    return true; // Purchase successful
  } else {
    return false; // Product not found
  }
}

// Example usage:
$productId = 1;
$quantity = 2;
if (purchaseProduct($productId, $quantity)) {
  echo "Purchase successful!";
} else {
  echo "Error: Product not found.";
}


// config.php (database connection settings)
$db_host = 'localhost';
$db_username = 'root';
$db_password = '';
$db_name = 'ecommerce';

// connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

class Purchase {
  public function __construct() {
    // initialize database connection
    global $conn;
  }

  // add product to cart
  public function addToCart($product_id) {
    // check if user is logged in
    if (!isset($_SESSION['user_id'])) {
      return 'Error: You must be logged in to add products to your cart.';
    }

    // get current order ID (if it exists)
    $orderId = $this->getOrderId();

    // insert product into order items table
    $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, 1)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param('ii', $orderId, $product_id);
    if (!$stmt->execute()) {
      return 'Error: Unable to add product to cart.';
    }
  }

  // get current order ID (if it exists)
  private function getOrderId() {
    $query = "SELECT id FROM orders WHERE user_id = ? AND status = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param('ii', $_SESSION['user_id'], 'pending');
    $stmt->execute();
    $result = $stmt->get_result();
    if ($result->num_rows > 0) {
      return $result->fetch_assoc()['id'];
    } else {
      // create new order
      $query = "INSERT INTO orders (user_id, total) VALUES (?, 0)";
      $conn->prepare($query)->bind_param('i', $_SESSION['user_id'])->execute();
      return $this->getOrderId(); // get the newly created order ID
    }
  }

  // checkout
  public function checkout() {
    // get current order ID (if it exists)
    $orderId = $this->getOrderId();

    // update total for order
    $query = "UPDATE orders SET total = ? WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param('di', $total, $orderId);

    // calculate total
    $total = 0;
    $query = "SELECT price FROM products WHERE id IN (SELECT product_id FROM order_items WHERE order_id = ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param('i', $orderId);
    $stmt->execute();
    $result = $stmt->get_result();
    while ($row = $result->fetch_assoc()) {
      $total += (float) $row['price'];
    }

    // update order total
    if (!$stmt->execute()) {
      return 'Error: Unable to update order total.';
    }

    // mark order as complete
    $query = "UPDATE orders SET status = ? WHERE id = ?";
    $conn->prepare($query)->bind_param('si', 'complete', $orderId)->execute();
  }
}


$purchase = new Purchase();
$purchase->addToCart(123); // assume ID 123 is a valid product ID


$purchase = new Purchase();
$purchase->checkout();


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'store';
$username = 'root';
$password = '';

// Set timezone
date_default_timezone_set('UTC');

?>


<?php

require_once 'config.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  $username = $_POST['username'];
  $password = $_POST['password'];

  // Hash password (using md5 for simplicity)
  $hashedPassword = md5($password);

  $sql = "INSERT INTO users (username, password) VALUES (:username, :password)";
  $stmt = $pdo->prepare($sql);
  $stmt->execute([':username' => $username, ':password' => $hashedPassword]);

  header('Location: login.php');
  exit;
}

?>
<!DOCTYPE html>
<html>
<head>
  <title>Register</title>
</head>
<body>

<h1>Register</h1>

<form method="post">
  <label for="username">Username:</label>
  <input type="text" name="username"><br><br>
  <label for="password">Password:</label>
  <input type="password" name="password"><br><br>
  <button type="submit">Register</button>
</form>

</body>
</html>


<?php

require_once 'config.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  $username = $_POST['username'];
  $password = $_POST['password'];

  // Hash password (using md5 for simplicity)
  $hashedPassword = md5($password);

  $sql = "SELECT * FROM users WHERE username = :username AND password = :password";
  $stmt = $pdo->prepare($sql);
  $stmt->execute([':username' => $username, ':password' => $hashedPassword]);

  $user = $stmt->fetch();

  if ($user) {
    $_SESSION['logged_in'] = true;
    header('Location: products.php');
    exit;
  } else {
    echo 'Invalid username or password';
  }
}

?>
<!DOCTYPE html>
<html>
<head>
  <title>Login</title>
</head>
<body>

<h1>Login</h1>

<form method="post">
  <label for="username">Username:</label>
  <input type="text" name="username"><br><br>
  <label for="password">Password:</label>
  <input type="password" name="password"><br><br>
  <button type="submit">Login</button>
</form>

</body>
</html>


<?php

require_once 'config.php';

$sql = "SELECT * FROM products";
$stmt = $pdo->prepare($sql);
$stmt->execute();

$products = $stmt->fetchAll();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Products</title>
</head>
<body>

<h1>Products</h1>

<ul>
  <?php foreach ($products as $product) { ?>
    <li>
      <?= $product['name'] ?> (<?= $product['price'] ?>)
      <button onclick="addProduct(<?= $product['id'] ?>)">Add to Cart</button>
    </li>
  <?php } ?>
</ul>

<script>
function addProduct(id) {
  var cart = JSON.parse(localStorage.getItem('cart')) || [];
  cart.push({ id: id });
  localStorage.setItem('cart', JSON.stringify(cart));
}
</script>

</body>
</html>


<?php

require_once 'config.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  $product_id = $_POST['product_id'];

  // Simulate payment processing (in a real app, you'd use a payment gateway)
  echo "Payment processed successfully!";
}

$sql = "SELECT * FROM cart WHERE user_id = :user_id";
$stmt = $pdo->prepare($sql);
$stmt->execute([':user_id' => $_SESSION['logged_in']]);

$cart = $stmt->fetchAll();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Cart</title>
</head>
<body>

<h1>Cart</h1>

<ul>
  <?php foreach ($cart as $item) { ?>
    <li>
      <?= $item['product_id'] ?> (<?= $product['price'] ?>)
      <button onclick="removeItem(<?= $item['id'] ?>)">Remove from Cart</button>
    </li>
  <?php } ?>
</ul>

<form method="post">
  <label for="product_id">Product ID:</label>
  <input type="text" name="product_id"><br><br>
  <button type="submit">Checkout</button>
</form>

<script>
function removeItem(id) {
  var cart = JSON.parse(localStorage.getItem('cart')) || [];
  cart.splice(cart.findIndex(item => item.id === id), 1);
  localStorage.setItem('cart', JSON.stringify(cart));
}
</script>

</body>
</html>


<?php

// Include database connection script
require_once 'dbConnection.php';

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get form data
    $productName = $_POST['product_name'];
    $price = $_POST['price'];
    $quantity = $_POST['quantity'];

    // Validate input
    if (empty($productName) || empty($price) || empty($quantity)) {
        echo "Please fill in all fields.";
        exit;
    }

    try {
        // Connect to database
        $pdo = connectToDatabase();

        // Insert purchase into database
        $stmt = $pdo->prepare('INSERT INTO purchases (product_name, price, quantity, user_id) VALUES (:productName, :price, :quantity, :userId)');
        $stmt->bindParam(':productName', $productName);
        $stmt->bindParam(':price', $price);
        $stmt->bindParam(':quantity', $quantity);
        $stmt->bindParam(':userId', $_SESSION['id']);
        $stmt->execute();

        // Confirm purchase
        echo "Purchase successful!";
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
    }
}

?>

<!-- HTML Form -->
<form action="<?php echo $_SERVER["PHP_SELF"]; ?>" method="post">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name"><br><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price"><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity"><br><br>

    <input type="submit" value="Purchase">
</form>


<?php

function connectToDatabase() {
    $host = 'localhost';
    $dbname = 'your_database_name';
    $username = 'your_username';
    $password = 'your_password';

    try {
        $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
        return $pdo;
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
    }
}

?>


// database connection settings
$dbHost = 'localhost';
$dbUsername = 'your_username';
$dbPassword = 'your_password';
$dbName = 'your_database_name';

// connect to the database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// function to add a product to cart
function add_product_to_cart($product_id, $quantity) {
  global $conn;
  $sql = "INSERT INTO cart (product_id, quantity) VALUES ('$product_id', '$quantity')";
  if ($conn->query($sql) === TRUE) {
    echo "Product added to cart successfully.";
  } else {
    echo "Error adding product to cart: " . $conn->error;
  }
}

// function to calculate the total amount
function calculate_total_amount() {
  global $conn;
  $sql = "SELECT * FROM cart";
  $result = $conn->query($sql);
  $total_amount = 0;
  while ($row = $result->fetch_assoc()) {
    $product_id = $row['product_id'];
    $quantity = $row['quantity'];
    $sql = "SELECT price FROM products WHERE id='$product_id'";
    $price_result = $conn->query($sql);
    if ($price_result->num_rows > 0) {
      $price_row = $price_result->fetch_assoc();
      $price = $price_row['price'];
      $total_amount += $quantity * $price;
    }
  }
  return $total_amount;
}

// function to process the purchase
function process_purchase() {
  global $conn;
  $customer_name = $_POST['customer_name'];
  $sql = "INSERT INTO purchases (customer_name, total_amount) VALUES ('$customer_name', '" . calculate_total_amount() . "')";

  if ($conn->query($sql) === TRUE) {
    echo "Purchase processed successfully.";
  } else {
    echo "Error processing purchase: " . $conn->error;
  }

  // clear the cart
  $sql = "DELETE FROM cart";
  if ($conn->query($sql) === TRUE) {
    echo "Cart cleared successfully.";
  } else {
    echo "Error clearing cart: " . $conn->error;
  }
}

// function to display the products in the cart
function display_cart() {
  global $conn;
  $sql = "SELECT * FROM cart";
  $result = $conn->query($sql);
  if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
      echo "<p>Product ID: " . $row['product_id'] . ", Quantity: " . $row['quantity'] . "</p>";
    }
  } else {
    echo "Cart is empty.";
  }
}

// main script
if (isset($_POST['add_product'])) {
  add_product_to_cart($_POST['product_id'], $_POST['quantity']);
} elseif (isset($_POST['process_purchase'])) {
  process_purchase();
} elseif (isset($_POST['display_cart'])) {
  display_cart();
}


<?php

// Initialize an empty cart array
$cart = [];

function add_item_to_cart($product_id, $quantity) {
    global $cart;

    // Check if product already exists in the cart
    foreach ($cart as &$item) {
        if ($item['id'] == $product_id) {
            // If product is found, update its quantity
            $item['quantity'] += $quantity;
            return;
        }
    }

    // If product not found, add it to the cart with given quantity
    $cart[] = ['id' => $product_id, 'name' => '', 'price' => 0, 'quantity' => $quantity];
}

function remove_item_from_cart($product_id) {
    global $cart;

    // Find and remove product from the cart
    foreach ($cart as $key => &$item) {
        if ($item['id'] == $product_id) {
            unset($cart[$key]);
            return;
        }
    }
}

function update_item_quantity($product_id, $new_quantity) {
    global $cart;

    // Find product in the cart and update its quantity
    foreach ($cart as &$item) {
        if ($item['id'] == $product_id) {
            $item['quantity'] = $new_quantity;
            return;
        }
    }
}

function calculate_total_cost() {
    global $cart;

    $total_cost = 0;
    // Calculate total cost by multiplying price of each item by its quantity
    foreach ($cart as $item) {
        $total_cost += $item['price'] * $item['quantity'];
    }

    return $total_cost;
}

// Example usage:
add_item_to_cart(1, 2); // Add product with id 1 to the cart in a quantity of 2
add_item_to_cart(3, 1); // Add product with id 3 to the cart in a quantity of 1

print_r($cart);

remove_item_from_cart(1);
echo "
";

update_item_quantity(3, 5);
echo "Total cost: " . calculate_total_cost();

?>


// db_connection.php: connects to the database and returns a PDO object
<?php
$dsn = 'mysql:host=localhost;dbname=your_database';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// products.php: retrieves product information from the database
<?php
function getProducts() {
    global $pdo;
    $query = 'SELECT * FROM products';
    $stmt = $pdo->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// orders.php: creates a new order and adds it to the database
<?php
function createOrder() {
    global $pdo;
    if (isset($_POST['customer_id']) && isset($_POST['products'])) {
        $customerId = $_POST['customer_id'];
        $products = json_decode($_POST['products'], true);

        // create a new order
        $query = 'INSERT INTO orders (customer_id, date) VALUES (:customer_id, NOW())';
        $stmt = $pdo->prepare($query);
        $stmt->bindParam(':customer_id', $customerId);
        $stmt->execute();

        // add order items to the database
        foreach ($products as $product) {
            $query = 'INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)';
            $stmt = $pdo->prepare($query);
            $stmt->bindParam(':order_id', $pdo->lastInsertId());
            $stmt->bindParam(':product_id', $product['id']);
            $stmt->bindParam(':quantity', $product['quantity']);
            $stmt->execute();
        }
    }
}

// process.php: processes the purchase and redirects to a success page
<?php
require_once 'db_connection.php';
require_once 'orders.php';

if (isset($_POST['customer_id']) && isset($_POST['products'])) {
    createOrder();
    header('Location: success.php');
    exit;
} else {
    echo 'Error processing order.';
}
?>


<?php
// Configuration file

// Database connection settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

// Email configuration for password reset and notifications
define('EMAIL_ADDRESS', 'your_email_address');
?>


<?php
// Database connection file

require_once 'config.php';

function connectToDatabase() {
  $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
  
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  
  return $conn;
}

function disconnectFromDatabase($conn) {
  $conn->close();
}
?>


<?php
// User functionality file

require_once 'db.php';

class User {
  private $id;
  private $email;
  private $password;

  public function __construct($id, $email, $password) {
    $this->id = $id;
    $this->email = $email;
    $this->password = $password;
  }

  public static function authenticateUser($email, $password) {
    // Retrieve user data from database
    $conn = connectToDatabase();
    $query = "SELECT * FROM users WHERE email='" . $email . "'";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
      while ($row = $result->fetch_assoc()) {
        // Verify password
        if (password_verify($password, $row['password'])) {
          return new User($row['id'], $row['email'], '');
        }
      }
    }
    
    return null;
  }

  public static function createUser($email, $password) {
    // Insert user data into database
    $conn = connectToDatabase();
    $query = "INSERT INTO users (email, password) VALUES ('" . $email . "', '" . password_hash($password, PASSWORD_DEFAULT) . "')";
    
    if ($conn->query($query)) {
      return new User($conn->insert_id, $email, '');
    }
    
    return null;
  }
}
?>


<?php
// Product functionality file

class Product {
  private $id;
  private $name;
  private $price;
  private $stock;

  public function __construct($id, $name, $price, $stock) {
    $this->id = $id;
    $this->name = $name;
    $this->price = $price;
    $this->stock = $stock;
  }

  public static function getProduct($id) {
    // Retrieve product data from database
    $conn = connectToDatabase();
    $query = "SELECT * FROM products WHERE id='" . $id . "'";
    
    if ($result = $conn->query($query)) {
      while ($row = $result->fetch_assoc()) {
        return new Product($row['id'], $row['name'], $row['price'], $row['stock']);
      }
    }
    
    return null;
  }

  public static function updateProductStock($id, $quantity) {
    // Update product stock in database
    $conn = connectToDatabase();
    $query = "UPDATE products SET stock=stock-" . $quantity . " WHERE id='" . $id . "'";
    
    if ($conn->query($query)) {
      return true;
    }
    
    return false;
  }
}
?>


<?php
// Order functionality file

class Order {
  private $id;
  private $user_id;
  private $product_id;
  private $quantity;
  private $total;

  public function __construct($id, $user_id, $product_id, $quantity, $total) {
    $this->id = $id;
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->quantity = $quantity;
    $this->total = $total;
  }

  public static function createOrder($user_id, $product_id, $quantity) {
    // Insert order data into database
    $conn = connectToDatabase();
    $query = "INSERT INTO orders (user_id, product_id, quantity, total) VALUES (" . $user_id . ", " . $product_id . ", " . $quantity . ", " . ($product->price * $quantity) . ")";
    
    if ($conn->query($query)) {
      return new Order($conn->insert_id, $user_id, $product_id, $quantity, $product->price * $quantity);
    }
    
    return null;
  }

  public static function updateOrderStock($id) {
    // Update order stock in database
    $conn = connectToDatabase();
    $query = "UPDATE products SET stock=stock-" . $order->quantity . " WHERE id='" . $product_id . "'";
    
    if ($conn->query($query)) {
      return true;
    }
    
    return false;
  }
}
?>


<?php
// Purchase functionality file

require_once 'user.php';
require_once 'product.php';

if (isset($_POST['submit'])) {
  $user_id = $_SESSION['id'];
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  // Retrieve product data from database
  $product = Product::getProduct($product_id);

  if ($product !== null) {
    // Check if product is in stock
    if ($product->stock >= $quantity) {
      // Create order and update product stock
      $order = Order::createOrder($user_id, $product_id, $quantity);
      Product::updateProductStock($product_id, $quantity);

      echo "Order created successfully!";
    } else {
      echo "Sorry, this product is out of stock.";
    }
  } else {
    echo "Invalid product ID.";
  }
}
?>


<?php

// Configuration
$dbHost = 'localhost';
$dbUsername = 'your_username';
$dbPassword = 'your_password';
$dbName = 'store';

// Connect to database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product to cart
function add_to_cart($product_id, $quantity) {
    global $conn;
    
    // Check if product exists in database
    $query = "SELECT * FROM products WHERE id = '$product_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            // Add product to cart
            $sql = "INSERT INTO cart (product_id, quantity)
                    VALUES ('$product_id', '$quantity')";
            if (!$conn->query($sql)) {
                echo 'Error: ' . $conn->error;
            }
        }
    } else {
        echo 'Product not found.';
    }
}

// Function to remove product from cart
function remove_from_cart($product_id) {
    global $conn;
    
    // Remove product from cart
    $sql = "DELETE FROM cart WHERE product_id = '$product_id'";
    if (!$conn->query($sql)) {
        echo 'Error: ' . $conn->error;
    }
}

// Function to update quantity in cart
function update_quantity($product_id, $quantity) {
    global $conn;
    
    // Update quantity in cart
    $sql = "UPDATE cart SET quantity = '$quantity' WHERE product_id = '$product_id'";
    if (!$conn->query($sql)) {
        echo 'Error: ' . $conn->error;
    }
}

// Function to view cart
function view_cart() {
    global $conn;
    
    // View cart contents
    $result = $conn->query("SELECT * FROM cart");
    while ($row = $result->fetch_assoc()) {
        echo "Product ID: " . $row['product_id'] . ", Quantity: " . $row['quantity'];
    }
}

// Function to checkout (purchase)
function checkout() {
    global $conn;
    
    // Retrieve products in cart
    $query = "SELECT * FROM cart";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            // Update stock levels and remove from cart
            $sql = "UPDATE products SET stock_levels = stock_levels - '" . $row['quantity'] . "' WHERE id = '$row[product_id]'";
            if (!$conn->query($sql)) {
                echo 'Error: ' . $conn->error;
            }
        }
        
        // Clear cart
        $sql = "DELETE FROM cart";
        if (!$conn->query($sql)) {
            echo 'Error: ' . $conn->error;
        }
    } else {
        echo 'Cart is empty.';
    }
}

// Test the functions
add_to_cart(1, 2); // Add product with ID 1 to cart in quantity of 2
remove_from_cart(1); // Remove product with ID 1 from cart
update_quantity(1, 3); // Update quantity of product with ID 1 to 3

echo '<hr>';
view_cart(); // View cart contents
checkout(); // Checkout (purchase)

?>


<?php
$servername = "localhost";
$username = "your_username";
$password = "your_password";
$dbname = "your_database";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


<?php
include 'database.php';

$query = "SELECT * FROM products";
$result = mysqli_query($conn, $query);

while ($row = mysqli_fetch_assoc($result)) {
    echo '<h2>' . $row['name'] . '</h2>';
    echo '<p>Price: ' . $row['price'] . '</p>';
    echo '<button class="add-to-cart" data-id="' . $row['id'] . '">Add to Cart</button><br><br>';
}
?>


<?php
include 'database.php';

if (!isset($_SESSION)) {
    session_start();
}

$cart = array();

if (isset($_SESSION['cart'])) {
    $cart = unserialize($_SESSION['cart']);
}

echo '<h2>Cart Contents:</h2>';
echo '<table border="1">';
echo '<tr><th>Product</th><th>Quantity</th><th>Total</th></tr>';

$total = 0;

foreach ($cart as $product_id => $quantity) {
    $query = "SELECT * FROM products WHERE id='" . $product_id . "'";
    $result = mysqli_query($conn, $query);
    $row = mysqli_fetch_assoc($result);

    echo '<tr><td>' . $row['name'] . '</td><td>' . $quantity . '</td><td>' . $row['price'] * $quantity . '</td></tr>';
    $total += $row['price'] * $quantity;
}

echo '<tr><th>Total:</th><th colspan="2">' . $total . '</th></tr>';
echo '</table>';

if (isset($_POST['remove'])) {
    unset($cart[$_POST['product_id']]);
}

$items = array();
foreach ($cart as $product_id => $quantity) {
    $query = "SELECT * FROM products WHERE id='" . $product_id . "'";
    $result = mysqli_query($conn, $query);
    $row = mysqli_fetch_assoc($result);

    $items[] = array('name' => $row['name'], 'price' => $row['price']);
}

$_SESSION['cart'] = serialize($items);

if (isset($_POST['checkout'])) {
    // TO DO: Complete the purchase
}
?>


<?php
include 'database.php';

if (!isset($_SESSION)) {
    session_start();
}

$product_id = $_GET['id'];
$quantity = 1;

if (isset($_SESSION['cart'])) {
    $cart = unserialize($_SESSION['cart']);
} else {
    $cart = array();
}
if (array_key_exists($product_id, $cart)) {
    $cart[$product_id] += $quantity;
} else {
    $cart[$product_id] = $quantity;
}

$_SESSION['cart'] = serialize($cart);

header('Location: cart.php');
?>


<?php
include 'database.php';

if (!isset($_SESSION)) {
    session_start();
}

$items = unserialize($_SESSION['cart']);

$total = 0;
foreach ($items as $product) {
    $query = "SELECT * FROM products WHERE name='" . $product['name'] . "'";
    $result = mysqli_query($conn, $query);
    $row = mysqli_fetch_assoc($result);

    $total += $row['price'] * $product['quantity'];
}

// TO DO: Implement payment gateway and update database
?>


// Configuration file (e.g. config.php)
$db_host = 'localhost';
$db_username = 'root';
$db_password = '';
$db_name = 'store';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to add a purchase
function add_purchase($user_id, $product_id, $quantity) {
  global $conn;
  
  // Validate input
  if (!is_numeric($user_id) || !is_numeric($product_id) || !is_numeric($quantity)) {
    throw new Exception('Invalid input');
  }
  
  // Calculate total cost
  $total_cost = get_product_price($product_id) * $quantity;
  
  // Insert purchase into database
  $stmt = $conn->prepare("INSERT INTO purchases (user_id, product_id, quantity, total_cost)
                            VALUES (?, ?, ?, ?)");
  $stmt->bind_param("iiii", $user_id, $product_id, $quantity, $total_cost);
  $stmt->execute();
  
  // Update product stock
  update_product_stock($product_id, -$quantity);
  
  return true;
}

// Function to get a product's price
function get_product_price($product_id) {
  global $conn;
  
  // Retrieve product from database
  $stmt = $conn->prepare("SELECT price FROM products WHERE id = ?");
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $result = $stmt->get_result();
  $row = $result->fetch_assoc();
  
  return $row['price'];
}

// Function to update product stock
function update_product_stock($product_id, $quantity) {
  global $conn;
  
  // Retrieve current stock from database
  $stmt = $conn->prepare("SELECT stock FROM products WHERE id = ?");
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $result = $stmt->get_result();
  $row = $result->fetch_assoc();
  
  // Update stock
  $new_stock = $row['stock'] - $quantity;
  $stmt = $conn->prepare("UPDATE products SET stock = ? WHERE id = ?");
  $stmt->bind_param("ii", $new_stock, $product_id);
  $stmt->execute();
}

// Example usage:
try {
  // Add a purchase
  add_purchase(1, 1, 2);
  
  echo "Purchase added successfully!";
} catch (Exception $e) {
  echo "Error: " . $e->getMessage();
}


<?php

// Database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add a new order
function addOrder($customer_id, $total) {
  global $conn;
  $sql = "INSERT INTO orders (customer_id, order_date, total) VALUES (?, NOW(), ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("ii", $customer_id, $total);
  if ($stmt->execute()) {
    return true; // Order added successfully
  } else {
    return false; // Error adding order
  }
}

// Function to get the customer's current balance
function getCustomerBalance($customer_id) {
  global $conn;
  $sql = "SELECT total FROM orders WHERE customer_id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $customer_id);
  if ($stmt->execute()) {
    $result = $stmt->get_result();
    return $result->fetch_assoc()['total'];
  } else {
    return null; // Error retrieving balance
  }
}

// Function to update the customer's balance after a purchase
function updateCustomerBalance($customer_id, $amount) {
  global $conn;
  $balance = getCustomerBalance($customer_id);
  if ($balance !== null) {
    $new_balance = $balance - $amount;
    $sql = "UPDATE orders SET total = ? WHERE customer_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("id", $new_balance, $customer_id);
    if ($stmt->execute()) {
      return true; // Balance updated successfully
    } else {
      return false; // Error updating balance
    }
  } else {
    return null; // Error retrieving balance
  }
}

// Process the purchase
if (isset($_POST['submit'])) {
  $customer_id = $_POST['customer_id'];
  $total = $_POST['total'];

  if ($addOrder($customer_id, $total)) {
    echo "Order added successfully!";
  } else {
    echo "Error adding order.";
  }
}

?>


// products.model.php

class Product {
  public $id;
  public $name;
  public $price;

  function __construct($id, $name, $price) {
    $this->id = $id;
    $this->name = $name;
    $this->price = $price;
  }
}

// orders.model.php

class Order {
  public $id;
  public $userId;
  public $orderDate;
  public $total;

  function __construct($id, $userId, $orderDate, $total) {
    $this->id = $id;
    $this->userId = $userId;
    $this->orderDate = $orderDate;
    $this->total = $total;
  }
}

// order_items.model.php

class OrderItem {
  public $id;
  public $orderId;
  public $productId;
  public $quantity;

  function __construct($id, $orderId, $productId, $quantity) {
    $this->id = $id;
    $this->orderId = $orderId;
    $this->productId = $productId;
    $this->quantity = $quantity;
  }
}


// cart.controller.php

class CartController {
  private $db;

  function __construct() {
    require_once 'config/db.php';
    $this->db = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
    if ($this->db->connect_error) {
      die("Connection failed: " . $this->db->connect_error);
    }
  }

  function addProductToCart($productId, $quantity) {
    // Check if product exists
    $query = "SELECT * FROM products WHERE id = '$productId'";
    $result = $this->db->query($query);
    if ($result->num_rows == 0) {
      return array('error' => 'Product not found');
    }

    // Add product to cart
    $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('", $_SESSION['userId'], "', '$productId', '$quantity')";
    $result = $this->db->query($query);

    return array('success' => 'Product added to cart');
  }

  function viewCart() {
    // Get user id
    $userId = $_SESSION['userId'];

    // Get order items
    $query = "SELECT * FROM order_items WHERE order_id = '$userId'";
    $result = $this->db->query($query);
    $orderItems = array();
    while ($row = $result->fetch_assoc()) {
      $orderItem = new OrderItem(
        $row['id'],
        $row['order_id'],
        $row['product_id'],
        $row['quantity']
      );
      array_push($orderItems, $orderItem);
    }

    // Get order total
    $query = "SELECT SUM(price * quantity) AS total FROM order_items WHERE order_id = '$userId'";
    $result = $this->db->query($query);
    $total = 0;
    if ($result->num_rows > 0) {
      while ($row = $result->fetch_assoc()) {
        $total += $row['total'];
      }
    }

    return array('orderItems' => $orderItems, 'total' => $total);
  }

  function checkout() {
    // Get user id
    $userId = $_SESSION['userId'];

    // Get order total
    $query = "SELECT SUM(price * quantity) AS total FROM order_items WHERE order_id = '$userId'";
    $result = $this->db->query($query);
    $total = 0;
    if ($result->num_rows > 0) {
      while ($row = $result->fetch_assoc()) {
        $total += $row['total'];
      }
    }

    // Create order
    $orderId = $this->db->insert_id + 1;
    $query = "INSERT INTO orders (id, user_id, total) VALUES ('$orderId', '$userId', '$total')";
    $result = $this->db->query($query);

    // Remove items from cart
    $query = "DELETE FROM order_items WHERE order_id = '$userId'";
    $result = $this->db->query($query);

    return array('success' => 'Order created');
  }
}


// cart.view.php

require_once 'cart.controller.php';

$cartController = new CartController();

if (isset($_POST['add_to_cart'])) {
  $productId = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  $result = $cartController->addProductToCart($productId, $quantity);
} elseif (isset($_POST['checkout'])) {
  $result = $cartController->checkout();
}

if ($result) {
  echo json_encode($result);
}

// Display products
$query = "SELECT * FROM products";
$result = $this->db->query($query);

while ($row = $result->fetch_assoc()) {
  // Display product name and price
  echo '<p>' . $row['name'] . ' - $' . $row['price'] . '</p>';
  echo '<form action="" method="post">';
  echo '<input type="hidden" name="product_id" value="' . $row['id'] . '">';
  echo '<button type="submit" name="add_to_cart">Add to Cart</button>';
  echo '</form>';
}

// Display cart
if (isset($_SESSION['userId'])) {
  $result = $cartController->viewCart();
  // Display order items and total
  foreach ($result['orderItems'] as $item) {
    echo '<p>' . $item->name . ' x' . $item->quantity . '</p>';
  }
  echo '<p>Total: $' . $result['total'] . '</p>';

  // Checkout button
  if (isset($_SESSION['userId'])) {
    echo '<button type="submit" name="checkout">Checkout</button>';
  }
}


<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
?>


<?php
require_once 'config.php';

if (isset($_POST['register'])) {
  $username = $_POST['username'];
  $email = $_POST['email'];
  $password = $_POST['password'];

  $query = "INSERT INTO users (username, email, password) VALUES ('$username', '$email', '$password')";
  if ($mysqli->query($query)) {
    echo 'Registration successful!';
  } else {
    echo 'Error: ' . $mysqli->error;
  }
}
?>


<?php
require_once 'config.php';

if (isset($_POST['login'])) {
  $username = $_POST['username'];
  $password = $_POST['password'];

  $query = "SELECT * FROM users WHERE username = '$username' AND password = '$password'";
  $result = $mysqli->query($query);
  if ($result->num_rows > 0) {
    echo 'Login successful!';
  } else {
    echo 'Error: invalid username or password';
  }
}
?>


<?php
require_once 'config.php';

$query = "SELECT * FROM products";
$result = $mysqli->query($query);
?>

<table>
  <tr>
    <th>Name</th>
    <th>Price</th>
  </tr>
  <?php while ($product = $result->fetch_assoc()) { ?>
    <tr>
      <td><?php echo $product['name']; ?></td>
      <td><?php echo $product['price']; ?></td>
    </tr>
  <?php } ?>
</table>


<?php
require_once 'config.php';

if (isset($_POST['buy'])) {
  $user_id = $_SESSION['user_id'];
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  // simulate payment processing
  $total = $_POST['price'] * $quantity;
  $query = "INSERT INTO orders (user_id, total, status) VALUES ('$user_id', '$total', 'pending')";
  if ($mysqli->query($query)) {
    echo 'Purchase successful!';
  } else {
    echo 'Error: ' . $mysqli->error;
  }
}
?>


// Connect to the database
$db = new mysqli('localhost', 'username', 'password', 'database');

// Check connection
if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

// Function to add a product to the cart
function add_to_cart($product_id, $quantity) {
    global $db;
    // Get the current session id (assuming we're using PHP sessions)
    $session_id = session_id();

    // Check if the product is already in the cart
    $query = "SELECT * FROM cart WHERE session_id = '$session_id' AND product_id = '$product_id'";
    $result = $db->query($query);
    if ($result->num_rows > 0) {
        // Product is already in the cart, update quantity
        $row = $result->fetch_assoc();
        $new_quantity = $quantity + $row['quantity'];
        $update_query = "UPDATE cart SET quantity = '$new_quantity' WHERE session_id = '$session_id' AND product_id = '$product_id'";
        $db->query($update_query);
    } else {
        // Product is not in the cart, add it
        $insert_query = "INSERT INTO cart (session_id, product_id, quantity) VALUES ('$session_id', '$product_id', '$quantity')";
        $db->query($insert_query);
    }
}

// Function to remove a product from the cart
function remove_from_cart($product_id) {
    global $db;
    // Get the current session id
    $session_id = session_id();

    // Remove the product from the cart
    $delete_query = "DELETE FROM cart WHERE session_id = '$session_id' AND product_id = '$product_id'";
    $db->query($delete_query);
}

// Function to update the quantity of a product in the cart
function update_cart_quantity($product_id, $new_quantity) {
    global $db;
    // Get the current session id
    $session_id = session_id();

    // Update the quantity of the product in the cart
    $update_query = "UPDATE cart SET quantity = '$new_quantity' WHERE session_id = '$session_id' AND product_id = '$product_id'";
    $db->query($update_query);
}

// Function to process a purchase (create an order and add items)
function process_purchase() {
    global $db;
    // Get the current session id
    $session_id = session_id();

    // Create a new order
    $insert_order_query = "INSERT INTO orders (customer_id, date, total) VALUES ('$session_id', NOW(), 0)";
    $db->query($insert_order_query);

    // Get the ID of the newly created order
    $order_id = $db->insert_id;

    // Add items to the order from the cart
    $query = "SELECT * FROM cart WHERE session_id = '$session_id'";
    $result = $db->query($query);
    while ($row = $result->fetch_assoc()) {
        // Get the product information
        $product_query = "SELECT * FROM products WHERE id = '$row[product_id]'";
        $product_result = $db->query($product_query);
        $product_row = $product_result->fetch_assoc();

        // Add the item to the order
        $insert_item_query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$row[product_id]', '$row[quantity]')";
        $db->query($insert_item_query);

        // Update the total of the order
        $total = $product_row['price'] * $row['quantity'];
        $update_total_query = "UPDATE orders SET total = total + '$total' WHERE id = '$order_id'";
        $db->query($update_total_query);
    }

    // Remove all items from the cart
    $delete_cart_query = "DELETE FROM cart WHERE session_id = '$session_id'";
    $db->query($delete_cart_query);

    return $order_id;
}

// Example usage:
add_to_cart(1, 2); // Add product with ID 1 to cart in quantity 2

// Process the purchase
$order_id = process_purchase();
echo "Order ID: $order_id";


<?php
require_once 'dbconfig.php';

if (isset($_POST['purchase'])) {
    $product_name = $_POST['product_name'];
    $quantity = $_POST['quantity'];
    $price = $_POST['price'];
    $customer_name = $_POST['customer_name'];
    $email = $_POST['email'];

    // Connect to database
    $conn = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

    if ($conn) {
        // Insert into orders table
        $query = "INSERT INTO orders (product_name, quantity, price, customer_name, email) VALUES ('$product_name', '$quantity', '$price', '$customer_name', '$email')";

        if (mysqli_query($conn, $query)) {
            echo 'Order successful!';
        } else {
            echo 'Error: ' . mysqli_error($conn);
        }
    }

    // Close the database connection
    mysqli_close($conn);
}
?>

<form action="" method="post">
  <label for="product_name">Product Name:</label>
  <input type="text" id="product_name" name="product_name"><br><br>
  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity"><br><br>
  <label for="price">Price:</label>
  <input type="number" id="price" name="price"><br><br>
  <label for="customer_name">Customer Name:</label>
  <input type="text" id="customer_name" name="customer_name"><br><br>
  <label for="email">Email:</label>
  <input type="email" id="email" name="email"><br><br>

  <button type="submit" name="purchase">Purchase</button>
</form>


<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');
?>


<?php
// Cart class to handle cart operations
class Cart {
  private $items;

  public function __construct() {
    $this->items = array();
  }

  // Add item to cart
  public function addItem($item_id, $quantity) {
    if (array_key_exists($item_id, $this->items)) {
      $this->items[$item_id]['quantity'] += $quantity;
    } else {
      $this->items[$item_id] = array('price' => 0, 'quantity' => $quantity);
    }
  }

  // Remove item from cart
  public function removeItem($item_id) {
    if (array_key_exists($item_id, $this->items)) {
      unset($this->items[$item_id]);
    }
  }

  // Update quantity of an item in cart
  public function updateQuantity($item_id, $quantity) {
    if (array_key_exists($item_id, $this->items)) {
      $this->items[$item_id]['quantity'] = $quantity;
    }
  }

  // Get total price of items in cart
  public function getTotalPrice() {
    $total_price = 0;
    foreach ($this->items as $item) {
      $total_price += $item['price'] * $item['quantity'];
    }
    return $total_price;
  }

  // Display cart contents
  public function displayCart() {
    echo '<h2>Shopping Cart</h2>';
    echo '<table border="1">';
    echo '<tr><th>Item ID</th><th>Price</th><th>Quantity</th></tr>';
    foreach ($this->items as $item) {
      echo '<tr><td>' . $item['item_id'] . '</td><td>' . $item['price'] . '</td><td>' . $item['quantity'] . '</td></tr>';
    }
    echo '</table>';
  }

  // Checkout
  public function checkout() {
    // Process payment and update database
    echo 'Thank you for your order!';
  }
}
?>


<?php
require_once 'cart.php';

// Create cart instance
$cart = new Cart();

// Add items to cart
$cart->addItem(1, 2);
$cart->addItem(2, 3);

// Display cart contents
$cart->displayCart();

// Get total price of items in cart
echo 'Total price: $' . $cart->getTotalPrice() . '<br>';

// Checkout
$cart->checkout();
?>


// Configuration for Database Connection
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

// Create Connection
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Query to Select Products
$query = "SELECT * FROM products";
$result = $conn->query($query);

?>

<!-- Display Products -->
<form action="" method="post">
    <select name="product_id" required>
        <option value="">Select a product</option>
        <?php while ($row = $result->fetch_assoc()) { ?>
            <option value="<?php echo $row['id']; ?>">
                <?php echo $row['name']; ?> | Price: <?php echo $row['price']; ?>
            </option>
        <?php } ?>
    </select>

    <!-- User Input -->
    <input type="text" name="username" placeholder="Username" required>
    <input type="email" name="email" placeholder="Email Address" required>

    <!-- Submit Button -->
    <button type="submit">Purchase</button>
</form>

<?php
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Retrieve Selected Product ID
    $product_id = $_POST['product_id'];
    
    // Insert Purchase into Database
    $query = "INSERT INTO purchases (product_id, username, email) VALUES ('$product_id', '".$_POST['username']."','".$_POST['email']."')";
    if ($conn->query($query)) {
        echo 'Purchase made successfully!';
    } else {
        die("Error: " . $conn->error);
    }
}
?>

<?php
// Close the database connection
$conn->close();
?>


$stmt = $conn->prepare("INSERT INTO purchases (product_id, username, email) VALUES (?, ?, ?)");
$stmt->bind_param("iii", $product_id, $_POST['username'], $_POST['email']);
if ($stmt->execute()) {
    echo 'Purchase made successfully!';
} else {
    die("Error: " . $conn->error);
}


<?php
// Connect to database
$conn = mysqli_connect("localhost", "username", "password", "database");

if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Check if user is logged in
session_start();
if (!isset($_SESSION['user_id'])) {
    echo "<a href='login.php'>Login</a> to place an order.";
    exit;
}
?>
<!DOCTYPE html>
<html>
<head>
    <title>Place Order</title>
</head>
<body>
    <form action="process.php" method="post">
        <label for="item_name">Item Name:</label><br>
        <input type="text" id="item_name" name="item_name"><br><br>
        <label for="price">Price:</label><br>
        <input type="number" step="0.01" id="price" name="price"><br><br>
        <input type="submit" value="Place Order">
    </form>
</body>
</html>


<?php
// Connect to database
$conn = mysqli_connect("localhost", "username", "password", "database");

if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Check if user is logged in
session_start();
if (!isset($_SESSION['user_id'])) {
    echo "You must be logged in to place an order.";
    exit;
}

// Get item name and price from form data
$item_name = $_POST['item_name'];
$price = $_POST['price'];

// Check if item name and price are valid
if (empty($item_name) || empty($price)) {
    echo "Please enter both item name and price.";
    exit;
}

// Insert order into database
$order_id = mysqli_insert_id($conn);
$user_id = $_SESSION['user_id'];
$item_name = mysqli_real_escape_string($conn, $item_name);
$price = floatval($price);

mysqli_query($conn, "INSERT INTO orders (user_id, item_name, price) VALUES ('$user_id', '$item_name', '$price')");

echo "Order placed successfully!";
?>


// PurchaseController.php

class PurchaseController {
  private $db;

  function __construct() {
    // Initialize database connection
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  }

  public function index() {
    // Display products for purchase
    $products = $this->db->query("SELECT * FROM products")->fetchAll();
    return render('purchase.html', ['products' => $products]);
  }

  public function checkout() {
    // Handle checkout process
    if (isset($_POST['cart'])) {
      // Process cart items
      foreach ($_POST['cart'] as $item) {
        $product_id = $item['product_id'];
        $quantity = $item['quantity'];

        // Check product availability and update stock
        $product = $this->db->query("SELECT * FROM products WHERE id = '$product_id'")->fetch();
        if ($product && $product['stock'] >= $quantity) {
          // Update stock and create order item
          $this->db->exec("UPDATE products SET stock = stock - $quantity WHERE id = '$product_id'");
          $order_item = new OrderItem($product_id, $_SESSION['user_id'], $quantity);
          $order_item->save();
        }
      }

      // Create order and send to user
      $customer_name = $_SESSION['username'];
      $total_cost = 0;
      foreach ($_POST['cart'] as $item) {
        $total_cost += $this->db->query("SELECT price FROM products WHERE id = '$item[product_id]'")->fetch()['price'] * $item['quantity'];
      }
      $order = new Order($customer_name, $total_cost);
      $order->save();
    }

    // Redirect to success page
    header('Location: success.php');
  }
}


// Order.php

class Order {
  private $id;
  private $customer_name;
  private $total_cost;

  function __construct($customer_name, $total_cost) {
    $this->customer_name = $customer_name;
    $this->total_cost = $total_cost;
  }

  public function save() {
    // Insert order into database
    $this->id = $this->db->exec("INSERT INTO orders (customer_name, total_cost) VALUES ('$this->customer_name', '$this->total_cost')")->rowCount();
    return true;
  }
}

// OrderItem.php

class OrderItem {
  private $order_id;
  private $product_id;
  private $quantity;

  function __construct($product_id, $user_id, $quantity) {
    // Initialize with user ID
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->quantity = $quantity;
  }

  public function save() {
    // Insert order item into database
    $order_item_id = $this->db->exec("INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$this->user_id', '$this->product_id', '$this->quantity')")->rowCount();
    return true;
  }
}


<?php

// Configuration
require_once 'config.php';

// Connect to database
$conn = mysqli_connect($db_host, $db_user, $db_password, $db_name);

// Check connection
if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Function to add product to cart
function add_product_to_cart() {
    global $conn;
    
    // Get product ID and quantity from form data
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    
    // Check if product exists in database
    $query = "SELECT * FROM products WHERE id = '$product_id'";
    $result = mysqli_query($conn, $query);
    
    if (mysqli_num_rows($result) > 0) {
        // Get product details
        $row = mysqli_fetch_assoc($result);
        
        // Check if quantity is valid
        if ($quantity <= 0 || $quantity > 100) {
            echo "Invalid quantity";
            return;
        }
        
        // Add product to cart
        $cart_item_id = $_SESSION['cart']['item_count'] + 1;
        $_SESSION['cart'][$cart_item_id] = array(
            'product_id' => $product_id,
            'quantity' => $quantity,
            'total' => $row['price'] * $quantity
        );
        
        // Update cart item count
        $_SESSION['cart']['item_count']++;
    }
}

// Function to place order
function place_order() {
    global $conn;
    
    // Get cart contents from session
    $cart_contents = $_SESSION['cart'];
    
    // Check if cart is not empty
    if (empty($cart_contents)) {
        echo "Cart is empty";
        return;
    }
    
    // Insert order into database
    $order_date = date('Y-m-d');
    $total = 0;
    
    foreach ($cart_contents as $item) {
        $product_id = $item['product_id'];
        $quantity = $item['quantity'];
        
        // Get product details from database
        $query = "SELECT * FROM products WHERE id = '$product_id'";
        $result = mysqli_query($conn, $query);
        
        if (mysqli_num_rows($result) > 0) {
            $row = mysqli_fetch_assoc($result);
            
            // Insert order item into database
            $order_item_id = $_SESSION['orders']['item_count'] + 1;
            $query = "INSERT INTO orders_items (order_id, product_id, quantity)
                      VALUES ('$order_date', '$product_id', '$quantity')";
            mysqli_query($conn, $query);
            
            // Update order total
            $total += $row['price'] * $quantity;
        }
    }
    
    // Insert order into database
    $query = "INSERT INTO orders (customer_name, order_date, total)
              VALUES ('$_POST[customer_name]', '$order_date', '$total')";
    mysqli_query($conn, $query);
    
    // Update session data
    $_SESSION['orders']['item_count']++;
}

// Process form submission
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    if (isset($_POST['add_to_cart'])) {
        add_product_to_cart();
    } elseif (isset($_POST['place_order'])) {
        place_order();
    }
}

?>


// Connect to database
$conn = mysqli_connect("localhost", "username", "password", "database");

// Check connection
if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Function to display products
function getProducts() {
    $query = "SELECT * FROM products";
    $result = mysqli_query($GLOBALS['conn'], $query);
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<option value='{$row['id']}'>{$row['name']} - {$row['price']}</option>";
    }
}

// Function to add product to cart
function addToCart() {
    if (isset($_POST['product_id']) && isset($_SESSION['cart'])) {
        $productId = $_POST['product_id'];
        $quantity = 1;
        array_push($_SESSION['cart'], array('product_id' => $productId, 'quantity' => $quantity));
        echo "Product added to cart";
    }
}

// Function to checkout
function checkout() {
    if (isset($_SESSION['cart'])) {
        $user_id = $_SESSION['user']['id'];
        foreach ($_SESSION['cart'] as $item) {
            $query = "INSERT INTO orders (user_id, product_id, order_date, total)
                      VALUES ('$user_id', '$item[product_id]', NOW(), '{$_SESSION['total']}')";
            mysqli_query($conn, $query);
            $_SESSION['cart'] = array();
        }
        echo "Order successful";
    }
}

// Check if user is logged in
if (!isset($_SESSION['user'])) {
    header("Location: login.php");
} else {
    // Display products
    getProducts();

    // Add product to cart
    if (isset($_POST['product_id'])) {
        addToCart();
    }

    // Checkout
    if (isset($_POST['checkout'])) {
        checkout();
    }
}


<?php
function getProducts() {
    $query = "SELECT * FROM products";
    $result = mysqli_query($GLOBALS['conn'], $query);
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<option value='{$row['id']}'>{$row['name']} - {$row['price']}</option>";
    }
}
getProducts();
?>


<?php

// include database connection settings
require_once 'db_connect.php';

// check if user is logged in
if (!isset($_SESSION['user_id'])) {
    // redirect to login page
    header('Location: login.php');
    exit;
}

// retrieve product ID from URL parameter
$product_id = $_GET['product_id'];

// query database for product details
$query = "SELECT * FROM products WHERE id = :product_id";
$stmt = $db->prepare($query);
$stmt->bindParam(':product_id', $product_id);
$stmt->execute();
$product = $stmt->fetch();

// validate user input (if any)
if (isset($_POST['quantity']) && $_POST['quantity'] > 0) {
    // retrieve quantity from POST variable
    $quantity = $_POST['quantity'];

    // query database for user details
    $query = "SELECT * FROM users WHERE id = :user_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->execute();
    $user = $stmt->fetch();

    // calculate order total cost
    $order_total = $product['price'] * $quantity;

    // insert new order into database
    $query = "INSERT INTO orders (user_id, product_id, total_cost) VALUES (:user_id, :product_id, :total_cost)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':total_cost', $order_total);
    $stmt->execute();

    // redirect to success page
    header('Location: success.php');
    exit;
} else {
    // display product details and quantity form
    ?>
    <h1>Product Details:</h1>
    <p>Name: <?php echo $product['name']; ?></p>
    <p>Price: <?php echo $product['price']; ?></p>

    <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" value="1">
        <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
        <button type="submit">Purchase</button>
    </form>

<?php
}
?>


<?php

// include database connection settings
require_once 'db_connect.php';

// retrieve order ID from session variable
$order_id = $_SESSION['order_id'];

// query database for order details
$query = "SELECT * FROM orders WHERE id = :order_id";
$stmt = $db->prepare($query);
$stmt->bindParam(':order_id', $order_id);
$stmt->execute();
$order = $stmt->fetch();

?>
<h1>Order Successful!</h1>
<p>Product: <?php echo $order['product_name']; ?></p>
<p>Quantity: <?php echo $order['quantity']; ?></p>
<p>Total Cost: <?php echo $order['total_cost']; ?></p>

<?php
unset($_SESSION['user_id']);
unset($_SESSION['order_id']);

?>


<?php

// include database connection settings
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
    $db = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

?>


// Product.php

class Product {
  private $id;
  private $name;
  private $price;

  public function __construct($id, $name, $price) {
    $this->id = $id;
    $this->name = $name;
    $this->price = $price;
  }

  public function getId() {
    return $this->id;
  }

  public function getName() {
    return $this->name;
  }

  public function getPrice() {
    return $this->price;
  }
}

// Order.php

class Order {
  private $id;
  private $customerName;

  public function __construct($id, $customerName) {
    $this->id = $id;
    $this->customerName = $customerName;
  }

  public function getId() {
    return $this->id;
  }

  public function getCustomerName() {
    return $this->customerName;
  }
}

// OrderItem.php

class OrderItem {
  private $id;
  private $orderId;
  private $productId;
  private $quantity;

  public function __construct($id, $orderId, $productId, $quantity) {
    $this->id = $id;
    $this->orderId = $orderId;
    $this->productId = $productId;
    $this->quantity = $quantity;
  }

  public function getId() {
    return $this->id;
  }

  public function getOrderId() {
    return $this->orderId;
  }

  public function getProductId() {
    return $this->productId;
  }

  public function getQuantity() {
    return $this->quantity;
  }
}

// Purchase.php

class Purchase {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
  }

  public function makePurchase($orderId, $products) {
    try {
      // Create a new order
      $stmt = $this->db->prepare("INSERT INTO orders (customer_name) VALUES (:customerName)");
      $stmt->bindParam(':customerName', $_POST['customerName']);
      $stmt->execute();

      // Get the last inserted ID
      $orderId = $this->db->lastInsertId();

      // Create a new order item for each product
      foreach ($products as $product) {
        $productId = $product->getId();
        $quantity = $_POST['quantity'];

        $stmt = $this->db->prepare("INSERT INTO order_items (order_id, product_id, quantity) VALUES (:orderId, :productId, :quantity)");
        $stmt->bindParam(':orderId', $orderId);
        $stmt->bindParam(':productId', $productId);
        $stmt->bindParam(':quantity', $quantity);
        $stmt->execute();
      }

      // Update the stock of each product
      foreach ($products as $product) {
        $productId = $product->getId();
        $newQuantity = $this->db->query("SELECT quantity FROM order_items WHERE product_id = :productId", array(':productId' => $productId))->fetchColumn() - $_POST['quantity'];
        if ($newQuantity < 0) {
          throw new Exception('Not enough stock available for product ' . $product->getName());
        }
      }

      return true;
    } catch (Exception $e) {
      echo 'Error making purchase: ' . $e->getMessage();
      return false;
    }
  }
}


$purchase = new Purchase();

// Get the products from the database
$stmt = $this->db->prepare("SELECT * FROM products");
$stmt->execute();
$products = array();
while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
  $product = new Product($row['id'], $row['name'], $row['price']);
  $products[] = $product;
}

// Process the purchase form data
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  $orderId = $_POST['order_id'];
  $customerName = $_POST['customer_name'];

  // Validate the products array
  if (!is_array($_POST['products'])) {
    echo 'Invalid products format';
    exit;
  }

  foreach ($_POST['products'] as $product) {
    $productId = $product['id'];
    $quantity = isset($product['quantity']) ? $product['quantity'] : 1;

    // Check if the product exists
    $productExists = false;
    foreach ($products as $p) {
      if ($p->getId() == $productId) {
        $productExists = true;
        break;
      }
    }

    if (!$productExists) {
      echo 'Invalid product ID';
      exit;
    }
  }

  // Make the purchase
  $result = $purchase->makePurchase($orderId, $_POST['products']);
  if ($result) {
    echo 'Purchase successful!';
  } else {
    echo 'Error making purchase';
  }
}


<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'database_name');

function connectToDatabase() {
    $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}
?>


<?php include 'config.php'; ?>

<form action="process_register.php" method="post">
    <label for="username">Username:</label>
    <input type="text" id="username" name="username"><br><br>
    <label for="email">Email:</label>
    <input type="email" id="email" name="email"><br><br>
    <label for="password">Password:</label>
    <input type="password" id="password" name="password"><br><br>
    <button type="submit">Register</button>
</form>

<?php
if (isset($_POST['username']) && isset($_POST['email']) && isset($_POST['password'])) {
    // Register user logic here
}
?>


<?php include 'config.php'; ?>

<form action="process_login.php" method="post">
    <label for="username">Username:</label>
    <input type="text" id="username" name="username"><br><br>
    <label for="password">Password:</label>
    <input type="password" id="password" name="password"><br><br>
    <button type="submit">Login</button>
</form>

<?php
if (isset($_POST['username']) && isset($_POST['password'])) {
    // Login logic here
}
?>


<?php include 'config.php'; ?>

<table>
    <tr>
        <th>Name</th>
        <th>Price</th>
        <th>Stock</th>
    </tr>

<?php
$conn = connectToDatabase();
$query = "SELECT * FROM products";
$result = $conn->query($query);

while ($row = mysqli_fetch_assoc($result)) {
    echo "<tr>";
    echo "<td>" . $row['name'] . "</td>";
    echo "<td>" . $row['price'] . "</td>";
    echo "<td>" . $row['stock'] . "</td>";
    echo "</tr>";
}

$conn->close();
?>
</table>


<?php include 'config.php'; ?>

// process_register.php

if (isset($_POST['username']) && isset($_POST['email']) && isset($_POST['password'])) {
    $conn = connectToDatabase();
    $query = "INSERT INTO users (username, email, password) VALUES ('" . $_POST['username'] . "', '" . $_POST['email'] . "', '" . $_POST['password'] . "')";
    $result = $conn->query($query);
    if ($result) {
        echo "User registered successfully!";
    } else {
        echo "Error registering user";
    }
    $conn->close();
}

// process_login.php

if (isset($_POST['username']) && isset($_POST['password'])) {
    $conn = connectToDatabase();
    $query = "SELECT * FROM users WHERE username='" . $_POST['username'] . "' AND password='" . $_POST['password'] . "'";
    $result = $conn->query($query);
    if ($result->num_rows > 0) {
        echo "Login successful!";
    } else {
        echo "Invalid username or password";
    }
    $conn->close();
}
?>


<?php include 'config.php'; ?>

<form action="process_order.php" method="post">
    <label for="product_id">Select Product:</label>
    <select id="product_id" name="product_id">
        <?php
        $conn = connectToDatabase();
        $query = "SELECT * FROM products";
        $result = $conn->query($query);
        
        while ($row = mysqli_fetch_assoc($result)) {
            echo "<option value='" . $row['id'] . "'>" . $row['name'] . "</option>";
        }
        
        $conn->close();
        ?>
    </select><br><br>
    <button type="submit">Place Order</button>
</form>

<?php
if (isset($_POST['product_id'])) {
    // Logic for placing order here
}
?>


<?php include 'config.php'; ?>

if (isset($_POST['product_id'])) {
    $conn = connectToDatabase();
    $query = "INSERT INTO orders (user_id, product_id) VALUES ('" . $_SESSION['user_id'] . "', '" . $_POST['product_id'] . "')"; // Assuming user is logged in
    $result = $conn->query($query);
    
    if ($result) {
        echo "Order placed successfully!";
    } else {
        echo "Error placing order";
    }
    
    $conn->close();
}
?>


<?php

// Configuration
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'database';

// Connect to database
$conn = mysqli_connect($db_host, $db_username, $db_password, $db_name);

if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Function to add user
function addUser($name, $email) {
  global $conn;
  $query = "INSERT INTO users (name, email) VALUES ('$name', '$email')";
  return mysqli_query($conn, $query);
}

// Function to get product by ID
function getProductById($id) {
  global $conn;
  $query = "SELECT * FROM products WHERE id = '$id'";
  $result = mysqli_query($conn, $query);
  if (mysqli_num_rows($result) > 0) {
    return mysqli_fetch_assoc($result);
  } else {
    return null;
  }
}

// Function to add product to cart
function addToCart($user_id, $product_id, $quantity) {
  global $conn;
  $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$user_id', '$product_id', '$quantity')";
  return mysqli_query($conn, $query);
}

// Function to checkout
function checkout() {
  global $conn;
  // Get user ID and cart contents
  $user_id = $_SESSION['user_id'];
  $cart_contents = getOrderItemsForUser($user_id);

  // Calculate total cost
  $total_cost = 0;
  foreach ($cart_contents as $item) {
    $product_price = getProductById($item['product_id'])['price'];
    $total_cost += $product_price * $item['quantity'];
  }

  // Create new order
  $order_date = date('Y-m-d');
  $query = "INSERT INTO orders (user_id, order_date, total_cost) VALUES ('$user_id', '$order_date', '$total_cost')";
  mysqli_query($conn, $query);

  // Update cart contents to mark as ordered
  foreach ($cart_contents as $item) {
    $query = "UPDATE order_items SET is_ordered = '1' WHERE id = '$item['id']'";
    mysqli_query($conn, $query);
  }

  // Return success message
  return array('message' => 'Order created successfully!', 'order_id' => mysqli_insert_id($conn));
}

// Function to get cart contents for user
function getOrderItemsForUser($user_id) {
  global $conn;
  $query = "SELECT * FROM order_items WHERE user_id = '$user_id'";
  return mysqli_query($conn, $query);
}

?>


<?php

// Assume we have a form with the following fields:
// - name (for new user)
// - email (for new user)
// - product_id (for adding to cart)
// - quantity (for adding to cart)

if (isset($_POST['submit'])) {
  // Add new user
  addUser($_POST['name'], $_POST['email']);

  // Get product details
  $product = getProductById($_POST['product_id']);
  if ($product) {
    // Add product to cart
    addToCart($_SESSION['user_id'], $_POST['product_id'], $_POST['quantity']);
  }
}

// Checkout functionality
if (isset($_POST['checkout'])) {
  $result = checkout();
  print_r($result);
}
?>

<form method="post">
  <input type="text" name="name" placeholder="Name">
  <input type="email" name="email" placeholder="Email">
  <select name="product_id">
    <?php foreach (getProducts() as $product) { ?>
      <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?></option>
    <?php } ?>
  </select>
  <input type="number" name="quantity" placeholder="Quantity">
  <button type="submit" name="submit">Add to Cart</button>

  <form method="post">
    <button type="submit" name="checkout">Checkout</button>
  </form>
</form>


// database connection settings
$host = 'localhost';
$dbname = 'shop';
$username = 'root';
$password = '';

// connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

// function to get products from database
function get_products($conn) {
    $stmt = $conn->prepare('SELECT * FROM products');
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// function to add product to cart
function add_product_to_cart($conn, $product_id, $quantity) {
    // check if user has an existing cart
    $stmt = $conn->prepare('SELECT * FROM carts WHERE user_id = :user_id');
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->execute();
    $cart = $stmt->fetch(PDO::FETCH_ASSOC);

    // add product to cart
    if ($cart) {
        $new_quantity = $cart['quantity'] + $quantity;
        $stmt = $conn->prepare('UPDATE carts SET quantity = :quantity WHERE id = :id');
        $stmt->bindParam(':quantity', $new_quantity);
        $stmt->bindParam(':id', $cart['id']);
        $stmt->execute();
    } else {
        // create new cart
        $stmt = $conn->prepare('INSERT INTO carts (user_id, quantity) VALUES (:user_id, :quantity)');
        $stmt->bindParam(':user_id', $_SESSION['user_id']);
        $stmt->bindParam(':quantity', $quantity);
        $stmt->execute();
    }
}

// function to process purchase
function process_purchase($conn) {
    // check if user has a cart
    $stmt = $conn->prepare('SELECT * FROM carts WHERE user_id = :user_id');
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->execute();
    $cart = $stmt->fetch(PDO::FETCH_ASSOC);

    // process purchase
    if ($cart) {
        $order_date = date('Y-m-d');
        $total = 0;
        foreach (get_products($conn) as $product) {
            $quantity = $cart['quantity'];
            $total += $product['price'] * $quantity;
        }
        $stmt = $conn->prepare('INSERT INTO orders (user_id, order_date, total) VALUES (:user_id, :order_date, :total)');
        $stmt->bindParam(':user_id', $_SESSION['user_id']);
        $stmt->bindParam(':order_date', $order_date);
        $stmt->bindParam(':total', $total);
        $stmt->execute();

        // create order items
        foreach (get_products($conn) as $product) {
            $quantity = $cart['quantity'];
            $stmt = $conn->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');
            $stmt->bindParam(':order_id', $conn->lastInsertId());
            $stmt->bindParam(':product_id', $product['id']);
            $stmt->bindParam(':quantity', $quantity);
            $stmt->execute();
        }

        // update cart quantity to 0
        $stmt = $conn->prepare('UPDATE carts SET quantity = :quantity WHERE id = :id');
        $stmt->bindParam(':quantity', 0);
        $stmt->bindParam(':id', $cart['id']);
        $stmt->execute();

        // clear session cart
        unset($_SESSION['cart']);
    }
}

// example usage
if (isset($_POST['add_product'])) {
    add_product_to_cart($conn, $_POST['product_id'], 1);
} elseif (isset($_POST['process_purchase'])) {
    process_purchase($conn);
}


<form action="" method="post">
    <select name="product_id" id="product_id">
        <?php foreach (get_products($conn) as $product): ?>
            <option value="<?= $product['id'] ?>"><?= $product['name'] ?></option>
        <?php endforeach; ?>
    </select>
    <button type="submit" name="add_product">Add to Cart</button>
</form>

<form action="" method="post">
    <button type="submit" name="process_purchase">Process Purchase</button>
</form>


<?php
// Initialize cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function addItemToCart($item_id, $quantity) {
    global $db;
    
    // Check if item already exists in cart
    foreach ($_SESSION['cart'] as &$cart_item) {
        if ($cart_item['id'] == $item_id) {
            // If it does, increment quantity
            $cart_item['quantity'] += $quantity;
            return;
        }
    }

    // If not, add new item to cart
    $_SESSION['cart'][] = array(
        'id' => $item_id,
        'name' => $item_name,
        'price' => $item_price,
        'quantity' => $quantity
    );
}

// Function to display cart contents
function displayCart() {
    global $db;
    
    echo '<table border="1">';
    echo '<tr><th>Item</th><th>Price</th><th>Quantity</th><th>Total</th></tr>';
    
    // Loop through each item in cart
    foreach ($_SESSION['cart'] as &$cart_item) {
        $item = get_item($db, $cart_item['id']);
        echo '<tr>';
        echo '<td>' . $item['name'] . '</td>';
        echo '<td>$' . number_format($item['price'], 2) . '</td>';
        echo '<td>' . $cart_item['quantity'] . '</td>';
        echo '<td>$' . number_format($cart_item['price'] * $cart_item['quantity'], 2) . '</td>';
        echo '</tr>';
    }
    
    // Calculate total cost of all items in cart
    $total = array_sum(array_map(function($item) { return $item['price'] * $item['quantity']; }, $_SESSION['cart']));
    echo '<tr><th colspan="3">Total:</th><td>$' . number_format($total, 2) . '</td></tr>';
    
    echo '</table>';
}

// Function to remove item from cart
function removeItemFromCart($item_id) {
    global $db;
    
    // Find the index of the item in cart and unset it
    foreach (array_keys($_SESSION['cart']) as $i) {
        if ($_SESSION['cart'][$i]['id'] == $item_id) {
            unset($_SESSION['cart'][$i]);
        }
    }
}

// Function to update quantity of item in cart
function updateQuantity($item_id, $new_quantity) {
    global $db;
    
    // Find the item in cart and update its quantity
    foreach ($_SESSION['cart'] as &$cart_item) {
        if ($cart_item['id'] == $item_id) {
            $cart_item['quantity'] = $new_quantity;
            return;
        }
    }
}

// Function to checkout (empty cart)
function checkout() {
    global $db;
    
    // Empty the cart
    unset($_SESSION['cart']);
}


<?php
require_once 'cart.php';

if (isset($_POST['add_to_cart'])) {
    addItemToCart($_POST['item_id'], $_POST['quantity']);
}

if (isset($_GET['remove_item'])) {
    removeItemFromCart($_GET['remove_item']);
}

if (isset($_POST['update_quantity'])) {
    updateQuantity($_POST['item_id'], $_POST['new_quantity']);
}

// Display cart contents
displayCart();

?>

<form action="index.php" method="post">
    <input type="hidden" name="add_to_cart" value="1">
    <label>Item ID:</label>
    <input type="text" name="item_id"><br><br>
    <label>Quantity:</label>
    <input type="number" name="quantity"><br><br>
    <input type="submit" value="Add to Cart">
</form>

<form action="index.php" method="get">
    <input type="hidden" name="remove_item" value="">
    <label>Item ID:</label>
    <input type="text" name="remove_item"><br><br>
    <input type="submit" value="Remove Item">
</form>

<form action="index.php" method="post">
    <input type="hidden" name="update_quantity" value="1">
    <label>Item ID:</label>
    <input type="text" name="item_id"><br><br>
    <label>New Quantity:</label>
    <input type="number" name="new_quantity"><br><br>
    <input type="submit" value="Update Quantity">
</form>

<form action="index.php" method="post">
    <input type="hidden" name="checkout" value="1">
    <input type="submit" value="Checkout">
</form>


<?php

// Database connection settings
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "mydatabase";

// Create a new PDO instance
$dsn = "mysql:host=$servername;dbname=$dbname";
$conn = new PDO($dsn, $username, $password);

// Define constants for success and error messages
define('SUCCESS', 'Purchase successful!');
define('ERROR', 'Error processing your request.');

// Function to get user data
function getUserData() {
  global $conn;
  
  // Assume we're logged in and got the user's ID from a session variable
  $userId = $_SESSION['user_id'];
  
  $sql = "SELECT * FROM users WHERE id = :id";
  $stmt = $conn->prepare($sql);
  $stmt->bindParam(':id', $userId);
  $stmt->execute();
  
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

// Function to get product data
function getProductData() {
  global $conn;
  
  // Assume we're getting the product ID from a session variable or form submission
  $productId = $_SESSION['product_id'];
  
  $sql = "SELECT * FROM products WHERE id = :id";
  $stmt = $conn->prepare($sql);
  $stmt->bindParam(':id', $productId);
  $stmt->execute();
  
  return $stmt->fetch(PDO::FETCH_ASSOC);
}

// Function to process purchase
function processPurchase() {
  global $conn;
  
  // Get user and product data from the database
  $userData = getUserData();
  $productData = getProductData();
  
  if ($productData && $userData) {
    // Update product quantity in stock
    $sql = "UPDATE products SET quantity = quantity - 1 WHERE id = :id";
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':id', $productData['id']);
    $stmt->execute();
    
    // Insert new purchase record into the database
    $sql = "INSERT INTO purchases (user_id, product_id, amount) VALUES (:userId, :productId, 1)";
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':userId', $userData['id']);
    $stmt->bindParam(':productId', $productData['id']);
    $stmt->execute();
    
    // Display success message
    echo SUCCESS;
  } else {
    // Display error message
    echo ERROR;
  }
}

// Example usage:
processPurchase();

?>


CREATE TABLE orders (
  id INT AUTO_INCREMENT PRIMARY KEY,
  product_name VARCHAR(255),
  quantity INT,
  price DECIMAL(10,2)
);

CREATE TABLE customers (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255),
  email VARCHAR(255)
);


<?php
session_start();

// Include database connection file (not shown here for brevity)
require 'db_connect.php';

if (!isset($_SESSION['user_id'])) {
  include 'register_form.php';
} else {
  if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Handle checkout form submission
    handle_checkout();
  }
  // Display user's cart contents and checkout form
  display_cart_contents_and_checkout_form();
}
?>

<?php
// Functions used by the above script

function handle_checkout() {
  global $db;
  
  // Insert order into database
  $query = "INSERT INTO orders (product_name, quantity, price) VALUES (?, ?, ?)";
  $stmt = $db->prepare($query);
  $stmt->execute(array(
    $_POST['product_name'],
    $_POST['quantity'],
    $_POST['price']
  ));

  // Clear cart
  unset($_SESSION['cart']);

  header('Location: success.php');
}

function display_cart_contents_and_checkout_form() {
  global $db;
  
  // Retrieve products from database and insert them into HTML form
  $query = "SELECT * FROM products";
  $products = $db->query($query)->fetch_all(MYSQLI_ASSOC);
  
  echo '<form action="" method="post">';
  
  foreach ($products as $product) {
    echo '<input type="checkbox" name="cart[]" value="' . $product['id'] . '"> ' . $product['name'];
  }
  
  echo '<br><button type="submit">Checkout</button>';
  
  // Retrieve products already in cart and insert them into HTML form
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $product_id) {
      $query = "SELECT * FROM products WHERE id = ?";
      $product = $db->prepare($query)->execute(array($product_id))->fetch_assoc();
      
      echo '<input type="checkbox" name="cart[]" value="' . $product['id'] . '" checked> ' . $product['name'];
    }
  }
  
  echo '</form>';
}
?>


<?php
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // Handle user registration form submission
  handle_user_registration();
}

// Display registration form
?>

<form action="" method="post">
  <label for="name">Name:</label>
  <input type="text" name="name"><br><br>
  
  <label for="email">Email:</label>
  <input type="email" name="email"><br><br>
  
  <button type="submit">Register</button>
</form>

<?php
// Function used by the above script

function handle_user_registration() {
  global $db;
  
  // Insert user into database
  $query = "INSERT INTO customers (name, email) VALUES (?, ?)";
  $stmt = $db->prepare($query);
  $stmt->execute(array(
    $_POST['name'],
    $_POST['email']
  ));
  
  // Set session variable to identify logged-in user
  $_SESSION['user_id'] = $db->insert_id;
}
?>


<?php
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // Handle login form submission
  handle_user_login();
}

// Display login form
?>

<form action="" method="post">
  <label for="email">Email:</label>
  <input type="email" name="email"><br><br>
  
  <label for="password">Password:</label>
  <input type="password" name="password"><br><br>
  
  <button type="submit">Login</button>
</form>

<?php
// Function used by the above script

function handle_user_login() {
  global $db;
  
  // Retrieve user data from database and verify login credentials
  $query = "SELECT * FROM customers WHERE email = ? AND password = ?";
  $user_data = $db->prepare($query)->execute(array(
    $_POST['email'],
    md5($_POST['password']) // For simplicity, storing passwords as MD5 hashes; use a more secure method in production
  ))->fetch_assoc();
  
  if ($user_data) {
    // Set session variable to identify logged-in user
    $_SESSION['user_id'] = $user_data['id'];
  }
}
?>


<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'mydatabase');

$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


<?php
require_once 'config.php';

// Get all products from database
$query = "SELECT * FROM products";
$result = $conn->query($query);

$products = array();

while ($row = $result->fetch_assoc()) {
    $products[] = array(
        'id' => $row['id'],
        'name' => $row['name'],
        'price' => $row['price']
    );
}

print_r(json_encode($products));
?>


<?php
require_once 'config.php';

// Insert new order into database
if (isset($_POST['product_id']) && isset($_POST['customer_id'])) {
    $customer_id = $_POST['customer_id'];
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Check if product exists and customer is valid
    $query = "SELECT * FROM products WHERE id = '$product_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $product_name = $row['name'];
            $product_price = $row['price'];

            // Calculate total cost
            $total = $quantity * $product_price;

            // Insert new order into database
            $query = "INSERT INTO orders (customer_id, product_id, quantity, total) VALUES ('$customer_id', '$product_id', '$quantity', '$total')";
            $conn->query($query);

            echo "Order placed successfully!";
        }
    } else {
        echo "Product not found.";
    }
}
?>


<?php
require_once 'config.php';

// Display all products and allow customer to select one
$query = "SELECT * FROM products";
$result = $conn->query($query);

$products = array();

while ($row = $result->fetch_assoc()) {
    $products[] = array(
        'id' => $row['id'],
        'name' => $row['name']
    );
}

?>

<h1>Products</h1>

<ul>
    <?php foreach ($products as $product) { ?>
        <li>
            <?= $product['name'] ?> (<?= $product['price'] ?>)
            <form action="orders.php" method="post">
                <input type="hidden" name="customer_id" value="<?= $_SESSION['customer_id'] ?>">
                <input type="hidden" name="product_id" value="<?= $product['id'] ?>">
                Quantity: <input type="number" name="quantity">
                <button type="submit">Buy Now</button>
            </form>
        </li>
    <?php } ?>
</ul>

<?php
?>


<?php
// Database connection settings
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database_name";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get user ID and product ID from POST data
$user_id = $_POST['user_id'];
$product_id = $_POST['product_id'];

// Validate input data
if (empty($user_id) || empty($product_id)) {
    echo "Error: User ID and Product ID are required.";
    exit;
}

// Check if user has enough balance to make the purchase
$query = "SELECT * FROM users WHERE id = '$user_id'";
$result = $conn->query($query);
if (!$result) {
    echo "Error: Unable to retrieve user data.";
    exit;
}
$user_data = $result->fetch_assoc();
$balance = $user_data['balance'];

if ($balance < 1) { // assume product price is 1 unit of currency
    echo "Error: Insufficient balance.";
    exit;
}

// Update user balance and purchase history
$query = "UPDATE users SET balance = balance - 1 WHERE id = '$user_id'";
$conn->query($query);

$query = "INSERT INTO purchases (user_id, product_id) VALUES ('$user_id', '$product_id')";
$conn->query($query);

echo "Purchase successful!";
?>


<?php
// Display a form to select user ID and product ID
echo "<form method='post'>";
echo "User ID: <input type='text' name='user_id'><br>";
echo "Product ID: <input type='text' name='product_id'><br>";
echo "<button type='submit'>Make Purchase</button>";
echo "</form>";

// If the form has been submitted, redirect to purchase.php
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    header("Location: purchase.php");
    exit;
}
?>


<?php
session_start();

// Initialize empty cart array
$_SESSION['cart'] = [];

// Function to add item to cart
function add_to_cart($item_id) {
    global $_SESSION;
    if (!isset($_SESSION['cart'][$item_id])) {
        $_SESSION['cart'][$item_id] = 1;
    } else {
        $_SESSION['cart'][$item_id]++;
    }
}

// Function to remove item from cart
function remove_from_cart($item_id) {
    global $_SESSION;
    unset($_SESSION['cart'][$item_id]);
}

// Function to update quantity in cart
function update_quantity($item_id, $quantity) {
    global $_SESSION;
    if (isset($_SESSION['cart'][$item_id])) {
        $_SESSION['cart'][$item_id] = $quantity;
    }
}

// Display shopping cart
if (isset($_SESSION['cart'])) {
    echo "Shopping Cart:<br>";
    foreach ($_SESSION['cart'] as $item_id => $quantity) {
        // Assume we have a function to retrieve item details from the database
        $item_details = get_item_details($item_id);
        echo "$item_details[name] x $quantity<br>";
    }
}

// Display form for adding items to cart
echo "<h2>Add Items to Cart</h2>";
echo "<form action='index.php' method='post'>";
echo "<select name='item_id[]'>";
foreach (get_items() as $item) {
    echo "<option value='{$item['id']}'>{$item['name']}</option>";
}
echo "</select>";
echo "<input type='submit' value='Add to Cart'>";
echo "</form>";

// Process form submission
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    foreach ($_POST['item_id'] as $item_id) {
        add_to_cart($item_id);
    }
}

// Display payment details form
echo "<h2>Payment Details</h2>";
echo "<form action='process_payment.php' method='post'>";
echo "<label for='name'>Name:</label><br>";
echo "<input type='text' id='name' name='name'><br>";
echo "<label for='email'>Email:</label><br>";
echo "<input type='email' id='email' name='email'><br>";
echo "<label for='card_number'>Card Number:</label><br>";
echo "<input type='number' id='card_number' name='card_number'><br>";
echo "<label for='expiration_date'>Expiration Date:</label><br>";
echo "<input type='date' id='expiration_date' name='expiration_date'><br>";
echo "<label for='cvv'>CVV:</label><br>";
echo "<input type='number' id='cvv' name='cvv'><br>";
echo "<input type='submit' value='Place Order'>";
echo "</form>";

// Process payment
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Assume we have a function to process the payment
    $payment_status = process_payment($_POST);
    if ($payment_status) {
        echo "Payment successful!";
    } else {
        echo "Payment failed.";
    }
}
?>


<?php
session_start();

// Function to process payment
function process_payment($data) {
    global $_SESSION;
    // Assume we have a function to validate the payment details
    $validation_status = validate_payment_details($data);
    if ($validation_status) {
        // Process the payment using a dedicated payments API or database
        // For this example, we'll just simulate a successful payment
        return true;
    } else {
        return false;
    }
}

// Validate payment details
function validate_payment_details($data) {
    if (!isset($data['name']) || !isset($data['email']) || !isset($data['card_number']) || !isset($data['expiration_date']) || !isset($data['cvv'])) {
        return false;
    }
    // Simulate a successful payment
    return true;
}
?>


// config.php (database configuration file)
<?php
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
?>


// cart.php (cart management functionality)
<?php
require_once 'config.php';

if ($_SERVER['REQUEST_METHOD'] == 'GET') {
  // Display products in the cart
  if (isset($_SESSION['user_id'])) {
    $stmt = $conn->prepare('SELECT * FROM carts WHERE user_id = :user_id');
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->execute();
    $cart_items = $stmt->fetchAll();

    // Calculate total cost
    $total_cost = 0;
    foreach ($cart_items as $item) {
      $total_cost += $item['price'] * $item['quantity'];
    }
  } else {
    $total_cost = 0; // User is not logged in, so cart is empty
  }

  include 'cart_display.php'; // Include template to display cart contents
}

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // Add item to the cart
  if (isset($_SESSION['user_id'])) {
    $stmt = $conn->prepare('INSERT INTO carts SET user_id = :user_id, product_id = :product_id, quantity = :quantity');
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->bindParam(':product_id', $_POST['product_id']);
    $stmt->bindParam(':quantity', $_POST['quantity']);
    $stmt->execute();
  }
}
?>


// checkout.php (checkout functionality)
<?php
require_once 'config.php';

if ($_SERVER['REQUEST_METHOD'] == 'GET') {
  // Display order summary and payment options
  if (isset($_SESSION['user_id'])) {
    $stmt = $conn->prepare('SELECT * FROM carts WHERE user_id = :user_id');
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->execute();
    $cart_items = $stmt->fetchAll();

    // Calculate total cost
    $total_cost = 0;
    foreach ($cart_items as $item) {
      $total_cost += $item['price'] * $item['quantity'];
    }
  } else {
    $total_cost = 0; // User is not logged in, so cart is empty
  }

  include 'checkout_display.php'; // Include template to display order summary and payment options
}

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // Process payment (e.g., PayPal)
  if (isset($_SESSION['user_id'])) {
    // Update database with order details
    $stmt = $conn->prepare('INSERT INTO orders SET user_id = :user_id, total_cost = :total_cost');
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->bindParam(':total_cost', $_POST['total_cost']);
    $stmt->execute();

    // Clear cart
    $stmt = $conn->prepare('DELETE FROM carts WHERE user_id = :user_id');
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->execute();
  }
}
?>


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product to cart
function addProductToCart($product_id, $quantity) {
    global $conn;
    
    // Check if product exists in database
    $query = "SELECT * FROM products WHERE id = '$product_id'";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        // Get product details
        $row = $result->fetch_assoc();
        
        // Update cart with new product
        $query = "INSERT INTO orders (user_id, total, status) VALUES ('', '" . $quantity * $row['price'] . "', 'pending')";
        $conn->query($query);
        
        echo "Product added to cart successfully!";
    } else {
        echo "Product not found in database.";
    }
}

// Function to checkout
function checkout() {
    global $conn;
    
    // Get current user ID (assuming we have a login system)
    $user_id = $_SESSION['user_id'];
    
    // Calculate total cost of products in cart
    $query = "SELECT * FROM orders WHERE user_id = '$user_id'";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        $total_cost = 0;
        
        while ($row = $result->fetch_assoc()) {
            $total_cost += $row['total'];
        }
        
        // Update order status to 'completed'
        $query = "UPDATE orders SET status = 'completed' WHERE user_id = '$user_id'";
        $conn->query($query);
        
        echo "Order completed successfully!";
    } else {
        echo "No products in cart.";
    }
}

// Process form submission
if (isset($_POST['add_product'])) {
    addProductToCart($_POST['product_id'], $_POST['quantity']);
} elseif (isset($_POST['checkout'])) {
    checkout();
}

?>


<?php

// Database connection settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'store');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

?>


<?php

require_once 'config.php';

// Get all products from database
$query = "SELECT * FROM products";
$result = $conn->query($query);

$products = array();

while ($row = $result->fetch_assoc()) {
    $products[] = array(
        'id' => $row['id'],
        'name' => $row['name'],
        'price' => $row['price']
    );
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Products</title>
</head>
<body>

<h1>Products</h1>

<ul>
    <?php foreach ($products as $product) { ?>
        <li><?php echo $product['name']; ?> - <?php echo '$' . number_format($product['price'], 2); ?></li>
    <?php } ?>
</ul>

<form action="cart.php" method="post">
    <input type="hidden" name="product_id" value="<?php echo $_GET['id']; ?>">
    <button type="submit">Add to Cart</button>
</form>

<?php
// Add product to cart if submit button is pressed
if (isset($_POST['product_id'])) {
    // Get customer data from session
    $customer_name = $_SESSION['customer_name'];
    $customer_email = $_SESSION['customer_email'];

    // Insert order into database
    $query = "INSERT INTO orders (customer_name, customer_email, order_date, total) VALUES (?, ?, NOW(), ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("sss", $customer_name, $customer_email, '0.00');
    $stmt->execute();

    // Get order ID
    $order_id = $conn->insert_id;

    // Insert order item into database
    $query = "INSERT INTO order_items (order_id, product_name, quantity, price) VALUES (?, ?, 1, ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("iss", $order_id, $_POST['product_id'], '0.00');
    $stmt->execute();
}
?>
</body>
</html>


<?php

require_once 'config.php';

// Get customer data from session
$customer_name = $_SESSION['customer_name'];
$customer_email = $_SESSION['customer_email'];

// Get order ID from session
$order_id = $_SESSION['order_id'];

?>

<!DOCTYPE html>
<html>
<head>
    <title>Cart</title>
</head>
<body>

<h1>Cart</h1>

<ul>
    <?php
    // Get order items from database
    $query = "SELECT * FROM order_items WHERE order_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $order_id);
    $stmt->execute();
    $result = $stmt->get_result();

    while ($row = $result->fetch_assoc()) {
        echo '<li>' . $row['product_name'] . ' - x' . $row['quantity'] . '</li>';
    }
    ?>
</ul>

<p>Total: <?php echo number_format($_SESSION['total'], 2); ?></p>

<form action="checkout.php" method="post">
    <button type="submit">Checkout</button>
</form>

<?php
// Update total in session if order item is added or removed
if (isset($_POST['action']) && $_POST['action'] == 'add') {
    // Get product ID from post data
    $product_id = $_POST['product_id'];

    // Insert new order item into database
    $query = "INSERT INTO order_items (order_id, product_name, quantity, price) VALUES (?, ?, 1, ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("iss", $order_id, $product_id, '0.00');
    $stmt->execute();

    // Update total in session
    $_SESSION['total'] += '0.00';
} elseif (isset($_POST['action']) && $_POST['action'] == 'remove') {
    // Get order item ID from post data
    $order_item_id = $_POST['order_item_id'];

    // Delete order item from database
    $query = "DELETE FROM order_items WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $order_item_id);
    $stmt->execute();

    // Update total in session
    $_SESSION['total'] -= '0.00';
}
?>
</body>
</html>


<?php

require_once 'config.php';

// Get customer data from session
$customer_name = $_SESSION['customer_name'];
$customer_email = $_SESSION['customer_email'];

// Get order ID from session
$order_id = $_SESSION['order_id'];

?>

<!DOCTYPE html>
<html>
<head>
    <title>Checkout</title>
</head>
<body>

<h1>Checkout</h1>

<ul>
    <?php
    // Get order items from database
    $query = "SELECT * FROM order_items WHERE order_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $order_id);
    $stmt->execute();
    $result = $stmt->get_result();

    while ($row = $result->fetch_assoc()) {
        echo '<li>' . $row['product_name'] . ' - x' . $row['quantity'] . '</li>';
    }
    ?>
</ul>

<p>Total: <?php echo number_format($_SESSION['total'], 2); ?></p>

<form action="payment.php" method="post">
    <button type="submit">Pay with PayPal</button>
</form>

<?php
// Process payment using PayPal API (not included in this example)
?>


<?php

// Get the products from the database
$products = getProducts();

?>

<!-- Display the cart contents -->
<h1>Cart Contents</h1>
<ul>
  <?php foreach ($products as $product) { ?>
    <li><?= $product['name'] ?> (<?= $product['price'] ?>)</li>
  <?php } ?>
</ul>

<form action="checkout.php" method="post">
  <button type="submit">Checkout</button>
</form>

<?php
function getProducts() {
  // Connect to the database
  $conn = mysqli_connect("localhost", "username", "password", "database");

  // Query the products table
  $query = "SELECT * FROM products";
  $result = mysqli_query($conn, $query);

  // Fetch the results
  $products = array();
  while ($row = mysqli_fetch_assoc($result)) {
    $products[] = $row;
  }

  // Close the database connection
  mysqli_close($conn);

  return $products;
}


<?php

// Get the products from the cart
$cart = $_SESSION['cart'] ?? array();

// Calculate the total cost
$total_cost = calculateTotalCost($cart);

?>

<!-- Display the order form -->
<h1>Checkout</h1>
<form action="process_order.php" method="post">
  <label for="customer_name">Customer Name:</label>
  <input type="text" id="customer_name" name="customer_name"><br><br>

  <label for="order_date">Order Date:</label>
  <input type="date" id="order_date" name="order_date"><br><br>

  <button type="submit">Place Order</button>
</form>

<?php
function calculateTotalCost($cart) {
  // Connect to the database
  $conn = mysqli_connect("localhost", "username", "password", "database");

  // Query the products table for the product prices
  $query = "SELECT * FROM products";
  $result = mysqli_query($conn, $query);

  // Fetch the results
  while ($row = mysqli_fetch_assoc($result)) {
    if (isset($cart[$row['id']])) {
      $total_cost += $row['price'] * $cart[$row['id']];
    }
  }

  // Close the database connection
  mysqli_close($conn);

  return $total_cost;
}


<?php

// Get the order data from the request
$customer_name = $_POST['customer_name'];
$order_date = $_POST['order_date'];

// Calculate the total cost again (just in case)
$total_cost = calculateTotalCost($_SESSION['cart'] ?? array());

// Insert a new order into the database
$query = "INSERT INTO orders (customer_name, order_date, total_cost) VALUES (?, ?, ?)";
$stmt = mysqli_prepare($conn, $query);
mysqli_stmt_bind_param($stmt, 'sss', $customer_name, $order_date, $total_cost);

// Execute the query and close the database connection
mysqli_stmt_execute($stmt);
mysqli_close($conn);

// Redirect to a success page
header("Location: success.php");
exit;

?>


<?php

?>

<!-- Display a success message -->
<h1>Order Placed Successfully!</h1>

<p>Your order has been placed successfully. A confirmation email will be sent to you shortly.</p>


// database connection settings
$host = 'localhost';
$dbname = 'mydatabase';
$username = 'myuser';
$password = 'mypassword';

// connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

// function to get products from database
function getProducts() {
    global $conn;
    $query = "SELECT * FROM products";
    $stmt = $conn->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// function to add order to database
function addOrder($customerName, $products) {
    global $conn;
    $totalCost = 0;
    foreach ($products as $product) {
        $totalCost += $product['price'] * $product['quantity'];
    }
    $query = "INSERT INTO orders (customer_name, total_cost, status) VALUES (:customerName, :totalCost, 'pending')";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':customerName', $customerName);
    $stmt->bindParam(':totalCost', $totalCost);
    $stmt->execute();
    return $conn->lastInsertId();
}

// function to add order item to database
function addOrderItem($orderId, $productId, $quantity) {
    global $conn;
    $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (:orderId, :productId, :quantity)";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':orderId', $orderId);
    $stmt->bindParam(':productId', $productId);
    $stmt->bindParam(':quantity', $quantity);
    $stmt->execute();
}

// function to process purchase
function processPurchase() {
    global $conn;
    if (isset($_POST['customerName']) && isset($_POST['products'])) {
        // get products from database
        $products = getProducts();

        // validate input
        if (!empty($_POST['customerName']) && is_array($_POST['products'])) {
            // add order to database
            $orderId = addOrder($_POST['customerName'], $_POST['products']);

            // add order items to database
            foreach ($_POST['products'] as $product) {
                addOrderItem($orderId, $product['id'], $product['quantity']);
            }
        } else {
            echo "Error: invalid input";
            return false;
        }
    }
}

// process purchase on form submission
if (isset($_POST['submit'])) {
    processPurchase();
}


<?php
session_start();

// Initialize cart array in session
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function add_to_cart($product_id, $quantity) {
    global $_SESSION;
    if (array_key_exists($product_id, $_SESSION['cart'])) {
        $_SESSION['cart'][$product_id] += $quantity;
    } else {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

// Function to remove item from cart
function remove_from_cart($product_id) {
    global $_SESSION;
    if (array_key_exists($product_id, $_SESSION['cart'])) {
        unset($_SESSION['cart'][$product_id]);
    }
}

// Function to update quantity of item in cart
function update_quantity($product_id, $new_quantity) {
    global $_SESSION;
    if (array_key_exists($product_id, $_SESSION['cart'])) {
        $_SESSION['cart'][$product_id] = $new_quantity;
    }
}

// Function to display cart contents
function display_cart() {
    global $_SESSION;
    echo "<table>";
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        // Assume we have a function to get product details from database
        $product_details = get_product_details($product_id);
        echo "<tr><td>$product_details[name]</td><td>$quantity x $product_details[price] = $" . ($quantity * $product_details['price']) . "</td></tr>";
    }
    echo "</table>";
}

// Function to calculate total cost of cart
function calculate_total() {
    global $_SESSION;
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        // Assume we have a function to get product details from database
        $product_details = get_product_details($product_id);
        $total += ($quantity * $product_details['price']);
    }
    return $total;
}


<?php
include 'cart.php';

// Assume we have a function to display products
function display_products() {
    echo "<ul>";
    // Connect to database and retrieve product list
    // Display each product with its price and add_to_cart button
    echo "</ul>";
}

// Handle form submission to add or remove item from cart
if (isset($_POST['action'])) {
    if ($_POST['action'] == 'add') {
        $product_id = $_POST['product_id'];
        $quantity = $_POST['quantity'];
        add_to_cart($product_id, $quantity);
    } elseif ($_POST['action'] == 'remove') {
        $product_id = $_POST['product_id'];
        remove_from_cart($product_id);
    }
}

// Display cart contents and total cost
display_cart();
echo "Total: $" . calculate_total();

?>


<?php

// Connect to database
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "mydatabase";

$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Form data
if (isset($_POST['submit'])) {

    // Get product ID from session or form data
    if (isset($_SESSION['product_id'])) {
        $product_id = $_SESSION['product_id'];
    } elseif (isset($_POST['product_id'])) {
        $product_id = $_POST['product_id'];
    }

    // Get customer information from session or form data
    if (isset($_SESSION['customer_name'])) {
        $customer_name = $_SESSION['customer_name'];
    } elseif (isset($_POST['name'])) {
        $customer_name = $_POST['name'];
    }
    if (isset($_SESSION['customer_email'])) {
        $customer_email = $_SESSION['customer_email'];
    } elseif (isset($_POST['email'])) {
        $customer_email = $_POST['email'];
    }

    // Insert order into database
    $sql = "INSERT INTO orders (customer_id, product_id, order_date, total_cost) 
            VALUES (?, ?, NOW(), ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iii", $customer_id, $product_id, $total_cost);

    // Get product price from database
    $sql_product_price = "SELECT price FROM products WHERE id = ?";
    $stmt_product_price = $conn->prepare($sql_product_price);
    $stmt_product_price->bind_param("i", $product_id);
    $stmt_product_price->execute();
    $result_product_price = $stmt_product_price->get_result();
    $price = $result_product_price->fetch_assoc();

    // Get customer ID from database
    $sql_customer_id = "SELECT id FROM customers WHERE name = ? AND email = ?";
    $stmt_customer_id = $conn->prepare($sql_customer_id);
    $stmt_customer_id->bind_param("ss", $customer_name, $customer_email);
    $stmt_customer_id->execute();
    $result_customer_id = $stmt_customer_id->get_result();
    $customer_id = $result_customer_id->fetch_assoc();

    // Calculate total cost
    $total_cost = $price['price'];

    // Execute query to insert order into database
    $stmt->execute();

    // Get order ID from database
    $sql_order_id = "SELECT id FROM orders WHERE customer_id = ? AND product_id = ?";
    $stmt_order_id = $conn->prepare($sql_order_id);
    $stmt_order_id->bind_param("ii", $customer_id, $product_id);
    $stmt_order_id->execute();
    $result_order_id = $stmt_order_id->get_result();

    // Redirect user to order confirmation page
    header('Location: order_confirmation.php');
    exit;
}

// Display form
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <label for="name">Name:</label>
  <input type="text" id="name" name="name"><br><br>
  <label for="email">Email:</label>
  <input type="email" id="email" name="email"><br><br>

  <?php
    // Display product list (optional)
    $sql_product_list = "SELECT * FROM products";
    $result_product_list = $conn->query($sql_product_list);
    while ($row_product_list = $result_product_list->fetch_assoc()) {
      echo "<input type='radio' id='product_$row_product_list[id]' name='product_id' value='$row_product_list[id]'>";
      echo "<label for='product_$row_product_list[id]'>$row_product_list[name]</label><br>";
    }
  ?>

  <button type="submit" name="submit">Purchase</button>
</form>


<?php
// Connect to database
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "mydatabase";

$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get order ID from session
$order_id = $_SESSION['order_id'];

// Display order confirmation message
echo "Order Confirmation";
echo "<br>";
echo "Order ID: $order_id";
echo "<br>";
echo "Customer Name: " . $_SESSION['customer_name'];
echo "<br>";
echo "Product Name: " . $_SESSION['product_name'];
echo "<br>";
echo "Total Cost: $" . $_SESSION['total_cost'];
?>


<?php

// Include database connection script
require_once 'db.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

// Get product details from form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {

    // Sanitize input data
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Validate user input
    if (!$product_id || !$quantity) {
        echo "Error: Please enter valid product ID and quantity.";
        exit;
    }

    try {
        // Check if product exists in database
        $stmt = $db->prepare('SELECT * FROM products WHERE id = :id');
        $stmt->bindParam(':id', $product_id);
        $stmt->execute();
        $product_data = $stmt->fetch();

        // Check if quantity is valid
        if ($quantity < 1) {
            echo "Error: Please enter a valid quantity.";
            exit;
        }

        // Place order in database
        $order_id = uniqid();
        $stmt = $db->prepare('INSERT INTO orders (user_id, product_id, quantity)
                                VALUES (:user_id, :product_id, :quantity)');
        $stmt->bindParam(':user_id', $_SESSION['user_id']);
        $stmt->bindParam(':product_id', $product_data['id']);
        $stmt->bindParam(':quantity', $quantity);
        $stmt->execute();

        // Update product stock
        $current_stock = $product_data['stock'] - $quantity;
        $stmt = $db->prepare('UPDATE products SET stock = :stock WHERE id = :id');
        $stmt->bindParam(':stock', $current_stock);
        $stmt->bindParam(':id', $product_data['id']);
        $stmt->execute();

        echo "Order placed successfully! Your order ID is: $order_id";
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage();
        exit;
    }
}

// Display products for user to select
$stmt = $db->prepare('SELECT * FROM products');
$stmt->execute();
$products = $stmt->fetchAll();

?>

<!-- Display HTML form for user to select product and quantity -->
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <select name="product_id" required>
        <?php foreach ($products as $product) { ?>
            <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?></option>
        <?php } ?>
    </select>

    <input type="number" min="1" name="quantity" placeholder="Quantity">

    <button type="submit">Place Order</button>
</form>


// config.php (configure database connection and settings)
<?php
$dbHost = 'localhost';
$dbName = 'your_database_name';
$dbUsername = 'your_database_username';
$dbPassword = 'your_database_password';

try {
    $pdo = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUsername, $dbPassword);
} catch (PDOException $e) {
    echo "Error connecting to database: " . $e->getMessage();
}

class Product {
    public $id;
    public $name;
    public $price;

    function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }
}
?>

// functions.php (functions for interacting with the database)
<?php
function getProducts() {
    global $pdo;
    $query = "SELECT * FROM products";
    return $pdo->query($query)->fetchAll(PDO::FETCH_CLASS, 'Product');
}

function addOrder($customerId, $products) {
    global $pdo;
    $total = 0;
    foreach ($products as $product) {
        $total += $product->price;
    }
    $stmt = $pdo->prepare("INSERT INTO orders (customer_name, total) VALUES (:customer_name, :total)");
    $stmt->bindParam(':customer_name', $_SESSION['username']);
    $stmt->bindParam(':total', $total);
    $stmt->execute();
    return $pdo->lastInsertId();
}

function addToCart($customerId, $productId) {
    global $pdo;
    $query = "INSERT INTO cart (customer_id, product_id) VALUES (:customer_id, :product_id)";
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':customer_id', $customerId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
}
?>

// index.php (example of how to use the functions)
<?php
require_once 'config.php';
require_once 'functions.php';

if (!isset($_SESSION['username'])) {
    // redirect to login page if not logged in
}

$products = getProducts();

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $productId = $_POST['product_id'];
    addToCart($_SESSION['customer_id'], $productId);
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purchase</title>
</head>
<body>

<?php
if (isset($_SESSION['cart'])) {
    echo "<p>Cart:</p>";
    foreach ($_SESSION['cart'] as $product) {
        echo "$product->name ($product->price)<br>";
    }
}

$products = getProducts();
?>

<form action="" method="post">
    <select name="product_id">
        <?php
        foreach ($products as $product) {
            echo "<option value=\"$product->id\">$product->name</option>";
        }
        ?>
    </select>
    <input type="submit" value="Add to Cart">
</form>

<?php
if (isset($_SESSION['cart'])) {
    echo "<p>Total: ";
    $total = 0;
    foreach ($_SESSION['cart'] as $product) {
        $total += $product->price;
    }
    echo "$total</p>";
}
?>

<form action="" method="post">
    <input type="submit" value="Make Payment">
</form>

<?php
if (isset($_POST['Make Payment'])) {
    $customerId = $_SESSION['customer_id'];
    $products = $_SESSION['cart'];
    addOrder($customerId, $products);
    unset($_SESSION['cart']);
}
?>

</body>
</html>


// Set session variables
session_start();
$_SESSION['username'] = 'your_username';
$_SESSION['customer_id'] = 1;

// Unset session variables when done
unset($_SESSION['cart']);


class Purchase {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=store', 'username', 'password');
  }

  public function makePurchase($customerName, $products) {
    // Calculate total cost of purchase
    $totalCost = array_sum(array_map(function($product) { return $product['price'] * $product['quantity']; }, $products));

    // Create new order
    $query = "INSERT INTO orders (customer_name, total) VALUES (:customerName, :total)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':customerName', $customerName);
    $stmt->bindParam(':total', $totalCost);
    $stmt->execute();

    // Get ID of new order
    $orderId = $this->db->lastInsertId();

    // Create order items
    foreach ($products as $product) {
      $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (:orderId, :productId, :quantity)";
      $stmt = $this->db->prepare($query);
      $stmt->bindParam(':orderId', $orderId);
      $stmt->bindParam(':productId', $product['id']);
      $stmt->bindParam(':quantity', $product['quantity']);
      $stmt->execute();
    }

    return array('order_id' => $orderId, 'total_cost' => $totalCost);
  }
}


$purchase = new Purchase();

$products = array(
  array('id' => 1, 'name' => 'Product A', 'price' => 9.99),
  array('id' => 2, 'name' => 'Product B', 'price' => 19.99)
);

$result = $purchase->makePurchase('John Doe', $products);

print_r($result);


Array
(
  [order_id] => 1
  [total_cost] => 29.97
)


// db.php: connect to database and return PDO instance
$dsn = 'mysql:host=localhost;dbname=shop';
$username = 'root';
$password = '';

try {
  $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
  echo 'Connection failed: ' . $e->getMessage();
}

// index.php: handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  // Get product ID from form data
  $productId = $_POST['product_id'];

  // Retrieve product details from database
  $query = "SELECT * FROM products WHERE id = :id";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':id', $productId);
  $stmt->execute();
  $product = $stmt->fetch();

  if (!$product) {
    echo 'Product not found!';
    exit;
  }

  // Retrieve customer details from session (or form data)
  $customerName = $_SESSION['customer_name'] ?? null;

  if (!$customerName) {
    echo 'Please login to proceed!';
    exit;
  }

  // Create new order
  $query = "INSERT INTO orders (customer_name, total) VALUES (:name, :total)";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':name', $customerName);
  $stmt->bindParam(':total', $product['price']);
  $stmt->execute();

  // Get order ID
  $orderId = $pdo->lastInsertId();

  // Add product to order items table
  $query = "INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (:id, :pid, 1, :price)";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':id', $orderId);
  $stmt->bindParam(':pid', $productId);
  $stmt->bindParam(':price', $product['price']);
  $stmt->execute();

  // Update order total
  $query = "UPDATE orders SET total = (SELECT SUM(price) FROM order_items WHERE order_id = :id)";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':id', $orderId);
  $stmt->execute();

  echo 'Order placed successfully!';
} else {
?>
  <!-- index.php: display form for user to select product -->
  <form action="" method="post">
    <select name="product_id">
      <?php
        // Retrieve products from database and populate select options
        $query = "SELECT * FROM products";
        $stmt = $pdo->prepare($query);
        $stmt->execute();
        while ($row = $stmt->fetch()) {
          echo "<option value='{$row['id']}'>{$row['name']}</option>";
        }
      ?>
    </select>
    <input type="submit" value="Place Order">
  </form>
<?php
}


<?php
// Database connection settings
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "shopping_cart";

// Create database connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check if database connection was successful
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Define a function to add a product to the cart
function add_product_to_cart($product_id, $quantity) {
    global $conn;
    
    // Check if product exists in database
    $query = "SELECT * FROM products WHERE id = '$product_id'";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        // Retrieve product details from database
        while($row = $result->fetch_assoc()) {
            $product_name = $row["name"];
            $product_price = $row["price"];
            
            // Check if quantity is valid (not less than or equal to 0)
            if ($quantity > 0) {
                // Add product to cart
                $query = "INSERT INTO cart (product_id, name, price, quantity) VALUES ('$product_id', '$product_name', '$product_price', '$quantity')";
                $result = $conn->query($query);
                
                if (!$result) {
                    echo "Error adding product to cart: " . $conn->error;
                }
            } else {
                echo "Invalid quantity.";
            }
        }
    } else {
        echo "Product not found in database.";
    }
}

// Define a function to view the cart
function view_cart() {
    global $conn;
    
    // Retrieve all products from cart
    $query = "SELECT * FROM cart WHERE user_id = '$user_id'";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $product_name = $row["name"];
            $product_price = $row["price"];
            $quantity = $row["quantity"];
            
            echo "<p>Product: $product_name, Price: $product_price, Quantity: $quantity</p>";
        }
    } else {
        echo "Cart is empty.";
    }
}

// Define a function to checkout
function checkout() {
    global $conn;
    
    // Retrieve all products from cart
    $query = "SELECT * FROM cart WHERE user_id = '$user_id'";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $product_name = $row["name"];
            $product_price = $row["price"];
            $quantity = $row["quantity"];
            
            // Update stock levels in database
            $query = "UPDATE products SET quantity = quantity - '$quantity' WHERE name = '$product_name'";
            $result = $conn->query($query);
            
            if (!$result) {
                echo "Error updating stock levels: " . $conn->error;
            }
        }
        
        // Clear cart
        $query = "TRUNCATE TABLE cart";
        $result = $conn->query($query);
    } else {
        echo "Cart is empty.";
    }
}

// Define a function to handle form submission (e.g. add product to cart)
function handle_form_submission() {
    global $conn;
    
    if (isset($_POST["product_id"]) && isset($_POST["quantity"])) {
        // Extract user input
        $product_id = $_POST["product_id"];
        $quantity = $_POST["quantity"];
        
        // Add product to cart
        add_product_to_cart($product_id, $quantity);
    } else {
        echo "Error processing form submission.";
    }
}

// Include navigation and content sections
require_once("navigation.php");
?>

<h1>Purchase</h1>

<!-- Form to add products to cart -->
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <label for="product_id">Product ID:</label>
  <input type="text" id="product_id" name="product_id"><br><br>
  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity"><br><br>
  <button type="submit" name="submit">Add to Cart</button>
</form>

<!-- Display cart contents -->
<?php
view_cart();
?>

<!-- Checkout button -->
<button onclick="location.href='checkout.php'">Checkout</button>

<?php
// Include footer section
require_once("footer.php");
?>


// auth.php (user authentication)
class Auth {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  }

  public function login($username, $password) {
    // query to retrieve user data
    $query = "SELECT * FROM users WHERE username = :username AND password = :password";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':password', $password);
    $stmt->execute();
    return $stmt->fetch();
  }
}

// product.php (product data)
class Product {
  private $id;
  private $name;
  private $price;

  public function __construct($id, $name, $price) {
    $this->id = $id;
    $this->name = $name;
    $this->price = $price;
  }

  public function getId() {
    return $this->id;
  }

  public function getName() {
    return $this->name;
  }

  public function getPrice() {
    return $this->price;
  }
}

// cart.php (purchase functionality)
class Cart {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  }

  public function addProduct($productId, $quantity) {
    // query to insert product into order table
    $query = "INSERT INTO orders (user_id, product_id, quantity, total) VALUES (:user_id, :product_id, :quantity, :total)";
    $stmt = $this->db->prepare($query);
    $user = Auth::getInstance()->getUser();
    $productId = $productId;
    $quantity = $quantity;
    // calculate total price
    $total = $quantity * Product::getInstance($productId)->getPrice();
    $stmt->bindParam(':user_id', $user['id']);
    $stmt->bindParam(':product_id', $productId);
    $stmt->bindParam(':quantity', $quantity);
    $stmt->bindParam(':total', $total);
    $stmt->execute();
  }

  public function viewCart() {
    // query to retrieve order data
    $query = "SELECT * FROM orders WHERE user_id = :user_id";
    $stmt = $this->db->prepare($query);
    $user = Auth::getInstance()->getUser();
    $stmt->bindParam(':user_id', $user['id']);
    $stmt->execute();
    return $stmt->fetchAll();
  }
}


// login.php (example usage)
require_once 'auth.php';
$auth = new Auth();
$user = $auth->login('username', 'password');

// cart.php (example usage)
$cart = new Cart();

// add product to cart
$productId = 1;
$quantity = 2;
$cart->addProduct($productId, $quantity);

// view cart contents
print_r($cart->viewCart());


// config.php: database configuration file
<?php
$dbHost = 'localhost';
$dbUsername = 'your_username';
$dbPassword = 'your_password';
$dbName = 'your_database_name';

// Create a connection to the database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>

// functions.php: functions for purchase functionality
<?php
function getProducts() {
  global $conn;
  $query = "SELECT * FROM products";
  $result = $conn->query($query);
  return $result->fetch_all(MYSQLI_ASSOC);
}

function addOrder($data) {
  global $conn;
  $query = "INSERT INTO orders (customer_name, order_date, total, status)
            VALUES ('$data[customer_name]', NOW(), '$data[total]', 'pending')";
  $conn->query($query);
}

function updateOrderStatus($id, $status) {
  global $conn;
  $query = "UPDATE orders SET status = '$status' WHERE id = '$id'";
  $conn->query($query);
}
?>

// index.php: main script for purchase functionality
<?php
require_once 'config.php';
require_once 'functions.php';

// Get products from database
$products = getProducts();

// Process form submission (if any)
if (isset($_POST['submit'])) {
  // Validate form data
  if (!empty($_POST['customer_name']) && !empty($_POST['product_id']) && !empty($_POST['quantity'])) {
    // Calculate total cost
    $total = $_POST['price'] * $_POST['quantity'];

    // Add order to database
    addOrder([
      'customer_name' => $_POST['customer_name'],
      'total' => $total,
    ]);

    // Update product stock (not implemented in this example)
  } else {
    echo "Error: Invalid form submission.";
  }
}

// Display products and form
?>
<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>
  <h1>Products:</h1>
  <ul>
    <?php foreach ($products as $product) : ?>
      <li><?php echo $product['name']; ?> (<?php echo $product['price']; ?>)</li>
    <?php endforeach; ?>
  </ul>

  <form action="" method="post">
    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name"><br><br>

    <label for="product_id">Product ID:</label>
    <select id="product_id" name="product_id">
      <?php foreach ($products as $product) : ?>
        <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?></option>
      <?php endforeach; ?>
    </select><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity"><br><br>

    <button type="submit" name="submit">Place Order</button>
  </form>

  <?php if (isset($_POST['submit'])) : ?>
    <p>Order placed successfully!</p>
  <?php endif; ?>
</body>
</html>


<?php

// Include database connection settings
require_once 'db_settings.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
  header('Location: login.php');
  exit;
}

// Get product ID from URL parameter
$productId = $_GET['product_id'];

// Validate product ID
if (!$productId || !is_numeric($productId)) {
  echo 'Invalid product ID';
  exit;
}

// Query database for product details
$query = "SELECT * FROM products WHERE id = '$productId'";
$result = mysqli_query($db, $query);
$product = mysqli_fetch_assoc($result);

// Check if product exists
if (!$product) {
  echo 'Product not found';
  exit;
}

// Get user's cart contents (assuming cart is stored in session)
$cartContents = $_SESSION['cart'];

// Calculate total cost of order
$totalCost = 0;
foreach ($cartContents as $item) {
  if ($item['id'] == $productId) {
    $totalCost += $item['price'] * $item['quantity'];
  }
}

// Insert new order into database
$query = "INSERT INTO orders (user_id, total, status)
          VALUES ('{$_SESSION['user_id']}', '$totalCost', 'pending')";
mysqli_query($db, $query);
$order_id = mysqli_insert_id($db);

// Insert new order items into database
foreach ($cartContents as $item) {
  if ($item['id'] == $productId) {
    $query = "INSERT INTO order_items (order_id, product_id, quantity, price)
              VALUES ('$order_id', '$item[id]', '{$item['quantity']}','$item[price]')";
    mysqli_query($db, $query);
  }
}

// Update user's cart contents
unset($_SESSION['cart'][$productId]);

// Display confirmation message and redirect to success page
echo 'Order placed successfully!';
header('Location: success.php');
exit;

?>


<?php

// Database connection settings
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'shop';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to get products from database
function getProducts() {
    global $conn;
    $query = "SELECT * FROM products";
    $result = $conn->query($query);
    return $result->fetch_all(MYSQLI_ASSOC);
}

// Function to add product to cart
function addToCart($product_id, $quantity) {
    global $conn;
    $query = "INSERT INTO cart (product_id, quantity) VALUES ('$product_id', '$quantity')";
    $conn->query($query);
}

// Function to remove product from cart
function removeFromCart($product_id) {
    global $conn;
    $query = "DELETE FROM cart WHERE product_id = '$product_id'";
    $conn->query($query);
}

// Function to calculate total cost of items in cart
function calculateTotalCost() {
    global $conn;
    $query = "SELECT SUM(quantity * price) as total_cost FROM products JOIN cart ON products.id = cart.product_id";
    $result = $conn->query($query);
    return $result->fetch_assoc()['total_cost'];
}

// Function to place order
function placeOrder() {
    global $conn;
    // Get current date and time
    $current_date = date('Y-m-d H:i:s');
    
    // Insert new order into database
    $query = "INSERT INTO orders (date, total_cost) VALUES ('$current_date', '" . calculateTotalCost() . "')";
    $conn->query($query);
    
    // Delete items from cart after successful payment
    $query = "TRUNCATE TABLE cart";
    $conn->query($query);
}

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Get product id and quantity
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    
    // Add product to cart
    addToCart($product_id, $quantity);
    
    // Redirect user to cart page
    header('Location: cart.php');
    exit;
}

// Display products on page
$products = getProducts();

?>

<html>
<head>
    <title>Shop</title>
</head>
<body>
    <h1>Shop</h1>
    
    <?php foreach ($products as $product) { ?>
        <p>
            <?php echo $product['name']; ?> (<?php echo $product['price']; ?>)
            <form action="" method="post">
                <input type="hidden" name="product_id" value="<?php echo $product['id']; ?>">
                <input type="number" name="quantity" value="1">
                <button type="submit">Add to Cart</button>
            </form>
        </p>
    <?php } ?>
    
    <a href="cart.php">View Cart</a>
    
    <?php if (isset($_POST['place_order'])) { ?>
        <p>Total Cost: <?php echo calculateTotalCost(); ?></p>
        <form action="" method="post">
            <button type="submit" name="place_order">Place Order</button>
        </form>
    <?php } ?>
    
</body>
</html>

<?php
// Close database connection
$conn->close();
?>


<?php

// Include purchase.php file
require_once 'purchase.php';

?>

<html>
<head>
    <title>Cart</title>
</head>
<body>
    <h1>Cart</h1>
    
    <?php $cart_products = getProductsFromCart(); ?>
    
    <?php foreach ($cart_products as $product) { ?>
        <p>
            <?php echo $product['name']; ?> (<?php echo $product['price']; ?>)
            <form action="" method="post">
                <input type="hidden" name="product_id" value="<?php echo $product['id']; ?>">
                <button type="submit">Remove from Cart</button>
            </form>
        </p>
    <?php } ?>
    
    <a href="index.php">Back to Shop</a>
    
    <?php if (isset($_POST['place_order'])) { ?>
        <p>Total Cost: <?php echo calculateTotalCost(); ?></p>
        <form action="" method="post">
            <button type="submit" name="place_order">Place Order</button>
        </form>
    <?php } ?>
    
</body>
</html>

<?php
// Function to get products from cart
function getProductsFromCart() {
    global $conn;
    $query = "SELECT * FROM products JOIN cart ON products.id = cart.product_id";
    return $conn->query($query)->fetch_all(MYSQLI_ASSOC);
}

?>


<?php

// Include purchase.php file
require_once 'purchase.php';

?>

<html>
<head>
    <title>Order</title>
</head>
<body>
    <h1>Order</h1>
    
    <?php $orders = getOrders(); ?>
    
    <?php foreach ($orders as $order) { ?>
        <p>
            Date: <?php echo $order['date']; ?> - Total Cost: <?php echo $order['total_cost']; ?>
        </p>
    <?php } ?>
    
</body>
</html>

<?php
// Function to get orders
function getOrders() {
    global $conn;
    $query = "SELECT * FROM orders";
    return $conn->query($query)->fetch_all(MYSQLI_ASSOC);
}

?>


class Product {
  public $id;
  public $name;
  public $price;

  function __construct($id, $name, $price) {
    $this->id = $id;
    $this->name = $name;
    $this->price = $price;
  }
}

class Cart {
  private $products = array();

  function addProduct($product) {
    array_push($this->products, $product);
  }

  function removeProduct($product_id) {
    foreach ($this->products as $key => $product) {
      if ($product->id == $product_id) {
        unset($this->products[$key]);
      }
    }
  }

  function getProducts() {
    return $this->products;
  }

  function calculateTotal() {
    $total = 0;
    foreach ($this->products as $product) {
      $total += $product->price * $this->getQuantity($product);
    }
    return $total;
  }

  private function getQuantity($product) {
    $count = 0;
    foreach ($this->products as $item) {
      if ($item == $product) {
        $count++;
      }
    }
    return $count;
  }
}

// Function to add product to cart
function addToCart($user_id, $product_id, $quantity) {
  global $db;
  $query = "INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)";
  $stmt = $db->prepare($query);
  $stmt->execute(array($user_id, $product_id, $quantity));
}

// Function to remove product from cart
function removeFromCart($user_id, $product_id) {
  global $db;
  $query = "DELETE FROM cart WHERE user_id = ? AND product_id = ?";
  $stmt = $db->prepare($query);
  $stmt->execute(array($user_id, $product_id));
}

// Function to get products in cart
function getCartProducts($user_id) {
  global $db;
  $query = "SELECT p.id, p.name, c.quantity FROM products p JOIN cart c ON p.id = c.product_id WHERE c.user_id = ?";
  $stmt = $db->prepare($query);
  $stmt->execute(array($user_id));
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to calculate total cost of items in cart
function getCartTotal($user_id) {
  global $db;
  $query = "SELECT SUM(c.quantity * p.price) AS total FROM products p JOIN cart c ON p.id = c.product_id WHERE c.user_id = ?";
  $stmt = $db->prepare($query);
  $stmt->execute(array($user_id));
  return $stmt->fetchColumn();
}


$user_id = 1;
$product_id = 1;
$quantity = 2;

addToCart($user_id, $product_id, $quantity);


$user_id = 1;
$product_id = 1;

removeFromCart($user_id, $product_id);


$user_id = 1;
$products = getCartProducts($user_id);

foreach ($products as $product) {
  echo $product['name'] . " x " . $product['quantity'];
}


$user_id = 1;
$total = getCartTotal($user_id);
echo "Total: $" . number_format($total, 2);


<?php

// Configuration
$host = 'localhost';
$dbname = 'mydatabase';
$username = 'myusername';
$password = 'mypassword';

// Database connection
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

// Function to authenticate user
function authenticateUser($email, $password) {
  global $conn;
  $stmt = $conn->prepare('SELECT * FROM users WHERE email = :email');
  $stmt->execute(array(':email' => $email));
  $user = $stmt->fetch();
  if ($user && password_verify($password, $user['password'])) {
    return $user;
  }
  return false;
}

// Function to get user's products
function getUserProducts($userId) {
  global $conn;
  $stmt = $conn->prepare('SELECT * FROM products WHERE id IN (SELECT product_id FROM orders WHERE user_id = :userId)');
  $stmt->execute(array(':userId' => $userId));
  return $stmt->fetchAll();
}

// Function to add order
function addOrder($userId, $productId, $quantity) {
  global $conn;
  $price = getProductIdPrice($productId);
  if ($price) {
    $totalPrice = $price * $quantity;
    $stmt = $conn->prepare('INSERT INTO orders (user_id, product_id, quantity, total_price) VALUES (:userId, :productId, :quantity, :totalPrice)');
    $stmt->execute(array(
      ':userId' => $userId,
      ':productId' => $productId,
      ':quantity' => $quantity,
      ':totalPrice' => $totalPrice
    ));
  }
}

// Function to get product price
function getProductIdPrice($productId) {
  global $conn;
  $stmt = $conn->prepare('SELECT price FROM products WHERE id = :productId');
  $stmt->execute(array(':productId' => $productId));
  return $stmt->fetch()['price'];
}

// Main function to handle purchase
function purchase() {
  if (isset($_POST['email']) && isset($_POST['password'])) {
    $user = authenticateUser($_POST['email'], $_POST['password']);
    if ($user) {
      $products = getUserProducts($user['id']);
      foreach ($products as $product) {
        $quantity = (int)$_POST["{$product['id']}"];
        addOrder($user['id'], $product['id'], $quantity);
      }
    }
  }
}

// Process form submission
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  purchase();
}

?>


// Purchase.php

class Purchase {
    private $db;

    public function __construct() {
        // Connect to database
        $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
    }

    public function addProductToCart($product_id, $quantity) {
        // Check if product exists and quantity is valid
        $stmt = $this->db->prepare("SELECT * FROM products WHERE id = ?");
        $stmt->execute([$product_id]);
        $product = $stmt->fetch();
        if (!$product || $product['price'] <= 0) {
            return array('error' => 'Invalid product or quantity');
        }

        // Check if product is already in cart
        $stmt = $this->db->prepare("SELECT * FROM orders WHERE customer_id = ? AND product_id = ?");
        $stmt->execute([$_SESSION['customer_id'], $product_id]);
        $order = $stmt->fetch();
        if ($order) {
            // Update quantity
            $updateStmt = $this->db->prepare("UPDATE orders SET quantity = quantity + ? WHERE id = ?");
            $updateStmt->execute([$quantity, $order['id']]);
        } else {
            // Add new order
            $insertStmt = $this->db->prepare("INSERT INTO orders (customer_id, product_id, quantity) VALUES (?, ?, ?)");
            $insertStmt->execute([$_SESSION['customer_id'], $product_id, $quantity]);
        }

        return array('success' => 'Product added to cart');
    }

    public function checkout() {
        // Get all products in cart
        $stmt = $this->db->prepare("SELECT * FROM orders WHERE customer_id = ?");
        $stmt->execute([$_SESSION['customer_id']]);
        $orders = $stmt->fetchAll();

        // Calculate total cost
        $totalCost = 0;
        foreach ($orders as $order) {
            $totalCost += $order['product_id'] * $order['quantity'];
        }

        // Create new order
        $insertStmt = $this->db->prepare("INSERT INTO orders (customer_id, product_id, quantity, total_cost) VALUES (?, ?, ?, ?)");
        $insertStmt->execute([$_SESSION['customer_id'], null, 0, $totalCost]);

        return array('success' => 'Order created');
    }
}


$purchase = new Purchase();
$productId = 1;
$quantity = 2;
$result = $purchase->addProductToCart($productId, $quantity);
print_r($result); // Output: Array ( [success] => Product added to cart )


$purchase = new Purchase();
$result = $purchase->checkout();
print_r($result); // Output: Array ( [success] => Order created )


<?php

// Connect to the database
$conn = new mysqli('localhost', 'username', 'password', 'database');

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add a product to the order
function add_product_to_order($order_id, $product_id, $quantity) {
    global $conn;

    // Validate input
    if (empty($order_id) || empty($product_id) || !is_numeric($quantity)) {
        return false;
    }

    // Insert into orders_products table
    $query = "INSERT INTO orders_products (order_id, product_id, quantity)
              VALUES ('$order_id', '$product_id', '$quantity')";
    if (!$conn->query($query)) {
        echo "Error adding product to order: " . $conn->error;
        return false;
    }

    // Update the order total cost
    $total_cost = get_order_total($order_id);
    update_order_total($order_id, $total_cost);

    return true;
}

// Function to get the order total cost
function get_order_total($order_id) {
    global $conn;

    // Query the database for the order total cost
    $query = "SELECT SUM(op.quantity * p.price) AS total_cost FROM orders_products op
              JOIN products p ON op.product_id = p.id
              WHERE op.order_id = '$order_id'";
    if ($result = $conn->query($query)) {
        return $result->fetch_assoc()['total_cost'];
    } else {
        echo "Error getting order total: " . $conn->error;
        return false;
    }
}

// Function to update the order total cost
function update_order_total($order_id, $total_cost) {
    global $conn;

    // Update the order total cost in the orders table
    $query = "UPDATE orders SET total_cost = '$total_cost' WHERE id = '$order_id'";
    if (!$conn->query($query)) {
        echo "Error updating order total: " . $conn->error;
        return false;
    }

    return true;
}

// Function to create a new order
function create_order($customer_name) {
    global $conn;

    // Generate a unique order ID
    $order_id = uniqid();

    // Insert into orders table
    $query = "INSERT INTO orders (id, customer_name, total_cost)
              VALUES ('$order_id', '$customer_name', 0)";
    if (!$conn->query($query)) {
        echo "Error creating order: " . $conn->error;
        return false;
    }

    return $order_id;
}

// Function to purchase a product
function purchase_product($product_id, $quantity) {
    global $conn;

    // Get the current customer's order ID (assuming we have a session variable or cookie storing this info)
    $customer_name = $_SESSION['customer_name'];
    $order_id = get_customer_order_id($customer_name);

    if (!empty($order_id)) {
        add_product_to_order($order_id, $product_id, $quantity);
    } else {
        // If the customer doesn't have an existing order, create a new one
        $order_id = create_order($customer_name);
        add_product_to_order($order_id, $product_id, $quantity);
    }

    return true;
}

// Function to get the customer's current order ID
function get_customer_order_id($customer_name) {
    global $conn;

    // Query the database for the customer's current order ID
    $query = "SELECT id FROM orders WHERE customer_name = '$customer_name' AND total_cost > 0";
    if ($result = $conn->query($query)) {
        return $result->fetch_assoc()['id'];
    } else {
        echo "Error getting customer's current order ID: " . $conn->error;
        return false;
    }
}

// Example usage:
$customer_name = 'John Doe';
$product_id = 1; // assuming product with id=1 exists in the database
$quantity = 2;

$purchased = purchase_product($product_id, $quantity);

if ($purchased) {
    echo "Product purchased successfully!";
} else {
    echo "Error purchasing product.";
}


<?php

// Connect to database (replace with your actual database connection)
$mysqli = new mysqli('localhost', 'username', 'password', 'database');

if ($mysqli->connect_error) {
  die("Connection failed: " . $mysqli->connect_error);
}

// Get product ID from URL parameter
$product_id = $_GET['product_id'];

// Validate product ID (replace with actual validation logic)
if (!is_numeric($product_id)) {
  echo 'Invalid product ID';
  exit;
}

// Retrieve product details
$query = "SELECT * FROM products WHERE id = '$product_id'";
$result = $mysqli->query($query);

if ($result->num_rows > 0) {
  // Product found, proceed with purchase
  while ($row = $result->fetch_assoc()) {
    $product_name = $row['name'];
    $price = $row['price'];

    // Get user's current order (or create new one)
    $query = "SELECT * FROM orders WHERE user_id = '".$_SESSION['user_id']."'";
    $order_result = $mysqli->query($query);

    if ($order_result->num_rows > 0) {
      // User has an existing order, update it
      while ($row = $order_result->fetch_assoc()) {
        $order_id = $row['id'];
        break;
      }
    } else {
      // Create new order for user
      $query = "INSERT INTO orders (user_id, order_date, total_cost) VALUES ('".$_SESSION['user_id']."', NOW(), 0)";
      $mysqli->query($query);
      $order_id = $mysqli->insert_id;
    }

    // Add product to order
    $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', 1)";
    $mysqli->query($query);

    // Update total cost of order
    $total_cost = get_order_total($order_id);
    $query = "UPDATE orders SET total_cost = '$total_cost' WHERE id = '$order_id'";
    $mysqli->query($query);

    echo 'Product purchased successfully!';
  }
} else {
  echo 'Product not found';
}

function get_order_total($order_id) {
  // Retrieve order items for given order ID
  $query = "SELECT SUM(quantity * price) AS total FROM products p JOIN order_items oi ON p.id = oi.product_id WHERE oi.order_id = '$order_id'";
  $result = $mysqli->query($query);

  if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
      return $row['total'];
    }
  } else {
    return 0;
  }
}

?>


<?php

// Configuration for database connection
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Check if form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // Get posted data
    $name = $_POST['name'];
    $email = $_POST['email'];
    $product_name = $_POST['product_name'];
    $quantity = $_POST['quantity'];
    $price = $_POST['price'];

    // Validate input
    if (empty($name) || empty($email) || empty($product_name) || empty($quantity) || empty($price)) {
        echo "Please fill out all fields.";
    } elseif (!is_numeric($quantity)) {
        echo "Invalid quantity.";
    } elseif (!is_numeric($price)) {
        echo "Invalid price.";
    } else {

        // Insert data into database
        $query = "INSERT INTO purchases (name, email, product_name, quantity, price)
                  VALUES ('$name', '$email', '$product_name', '$quantity', '$price')";
        if ($conn->query($query) === TRUE) {
            echo "Purchase successful!";
        } else {
            echo "Error: " . $conn->error;
        }
    }

    // Close database connection
    $conn->close();
}

?>

<!-- Form for user input -->
<form action="" method="post">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name"><br><br>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email"><br><br>

    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name"><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity"><br><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price"><br><br>

    <input type="submit" value="Purchase">
</form>


// Include database connection file
require 'db.php';

// Function to add product to cart
function addProductToCart($product_id, $quantity) {
  // Get product details from database
  $product = getProductDetails($product_id);
  
  // If product is found
  if ($product) {
    // Check if quantity is valid
    if ($quantity <= 0) {
      echo 'Invalid quantity';
      return;
    }
    
    // Add product to cart
    $cart[] = array(
      'id' => $product_id,
      'name' => $product['name'],
      'price' => $product['price'],
      'quantity' => $quantity
    );
  } else {
    echo 'Product not found';
  }
}

// Function to get product details from database
function getProductDetails($id) {
  // Query database for product details
  $query = "SELECT * FROM products WHERE id = '$id'";
  
  // Execute query and fetch result
  $result = mysqli_query($db, $query);
  $product = mysqli_fetch_assoc($result);
  
  return $product;
}

// Function to place order
function placeOrder() {
  // Get cart contents
  global $cart;
  
  // Calculate total cost of order
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  
  // Create new order in database
  $order = array(
    'customer_name' => $_POST['name'],
    'order_date' => date('Y-m-d'),
    'total' => $total
  );
  
  // Insert order into database
  mysqli_query($db, "INSERT INTO orders SET name = '" . $_POST['name'] . "', order_date = NOW(), total = '$total'");
  
  // Get last inserted ID (order ID)
  $orderId = mysqli_insert_id($db);
  
  // Create new order item for each product in cart
  foreach ($cart as $item) {
    $query = "INSERT INTO order_items SET order_id = '$orderId', product_id = '" . $item['id'] . "', quantity = '" . $item['quantity'] . "'";
    
    mysqli_query($db, $query);
  }
}

// Check if form has been submitted
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // Process form data (e.g., add product to cart)
  // ...

  // Place order
  placeOrder();
}


<?php

// Configuration
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'database';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product to cart
function add_product_to_cart($product_id, $quantity) {
    global $conn;
    
    // Check if product exists in database
    $sql = "SELECT * FROM products WHERE id = '$product_id'";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        // Get product details
        $row = $result->fetch_assoc();
        
        // Check if quantity is valid
        if ($quantity <= $row['stock'] && $quantity >= 1) {
            // Add product to cart
            $sql = "INSERT INTO cart (product_id, quantity)
                    VALUES ('$product_id', '$quantity')";
            $conn->query($sql);
            
            echo "Product added to cart successfully!";
        } else {
            echo "Invalid quantity. Please try again.";
        }
    } else {
        echo "Product not found in database.";
    }
}

// Function to update product quantity in cart
function update_product_quantity_in_cart($product_id, $new_quantity) {
    global $conn;
    
    // Check if product exists in cart
    $sql = "SELECT * FROM cart WHERE product_id = '$product_id'";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        // Get current quantity
        $row = $result->fetch_assoc();
        
        // Update quantity
        $sql = "UPDATE cart SET quantity = '$new_quantity' WHERE product_id = '$product_id'";
        $conn->query($sql);
        
        echo "Quantity updated successfully!";
    } else {
        echo "Product not found in cart.";
    }
}

// Function to remove product from cart
function remove_product_from_cart($product_id) {
    global $conn;
    
    // Check if product exists in cart
    $sql = "SELECT * FROM cart WHERE product_id = '$product_id'";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        // Remove product from cart
        $sql = "DELETE FROM cart WHERE product_id = '$product_id'";
        $conn->query($sql);
        
        echo "Product removed from cart successfully!";
    } else {
        echo "Product not found in cart.";
    }
}

// Function to checkout
function checkout() {
    global $conn;
    
    // Get total cost
    $total_cost = 0;
    $sql = "SELECT * FROM cart";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $product_id = $row['product_id'];
            $quantity = $row['quantity'];
            
            // Get product price
            $sql = "SELECT * FROM products WHERE id = '$product_id'";
            $result2 = $conn->query($sql);
            $row2 = $result2->fetch_assoc();
            
            $total_cost += ($quantity * $row2['price']);
        }
    }
    
    // Update stock
    $sql = "UPDATE products SET stock = stock - 1 WHERE id IN (SELECT product_id FROM cart)";
    $conn->query($sql);
    
    // Remove products from cart
    $sql = "DELETE FROM cart";
    $conn->query($sql);
    
    echo "Checkout successful! Total cost: $" . number_format($total_cost, 2) . ".";
}

?>


<?php include 'purchase.php'; ?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase</title>
</head>
<body>

    <!-- Form to add product to cart -->
    <form action="" method="post">
        <label for="product_id">Product ID:</label>
        <input type="text" id="product_id" name="product_id"><br><br>
        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity"><br><br>
        <input type="submit" value="Add to Cart">
    </form>

    <!-- Form to update quantity in cart -->
    <form action="" method="post">
        <label for="product_id">Product ID:</label>
        <input type="text" id="product_id" name="product_id"><br><br>
        <label for="new_quantity">New Quantity:</label>
        <input type="number" id="new_quantity" name="new_quantity"><br><br>
        <input type="submit" value="Update Quantity">
    </form>

    <!-- Form to remove product from cart -->
    <form action="" method="post">
        <label for="product_id">Product ID:</label>
        <input type="text" id="product_id" name="product_id"><br><br>
        <input type="submit" value="Remove from Cart">
    </form>

    <!-- Form to checkout -->
    <form action="" method="post">
        <input type="submit" value="Checkout">
    </form>

</body>
</html>

<?php

// Handle form submissions
if (isset($_POST['product_id'])) {
    add_product_to_cart($_POST['product_id'], $_POST['quantity']);
}

if (isset($_POST['new_quantity'])) {
    update_product_quantity_in_cart($_POST['product_id'], $_POST['new_quantity']);
}

if (isset($_POST['remove'])) {
    remove_product_from_cart($_POST['product_id']);
}

if (isset($_POST['checkout'])) {
    checkout();
}
?>


<?php
// Configuration
$cart = array(); // shopping cart
$prices = array(
    'product1' => 19.99,
    'product2' => 29.99,
    'product3' => 39.99
);

// Function to add item to cart
function add_item_to_cart($item, $quantity) {
    global $cart;
    if (!isset($cart[$item])) {
        $cart[$item] = array('quantity' => 0);
    }
    $cart[$item]['quantity'] += $quantity;
}

// Function to update quantity of item in cart
function update_quantity_in_cart($item, $new_quantity) {
    global $cart;
    if (isset($cart[$item])) {
        $cart[$item]['quantity'] = $new_quantity;
    }
}

// Function to remove item from cart
function remove_item_from_cart($item) {
    global $cart;
    unset($cart[$item]);
}

// Function to calculate total cost of items in cart
function calculate_total_cost() {
    global $cart, $prices;
    $total = 0;
    foreach ($cart as $item => $data) {
        $total += $prices[$item] * $data['quantity'];
    }
    return $total;
}

// Function to display shopping cart
function display_cart() {
    global $cart, $prices;
    echo "<h2>Shopping Cart</h2>";
    foreach ($cart as $item => $data) {
        echo "Item: $item (x" . $data['quantity'] . ") - $" . number_format($prices[$item] * $data['quantity'], 2) . "<br>";
    }
    echo "Total: $" . number_format(calculate_total_cost(), 2);
}

// Function to process purchase
function process_purchase() {
    global $cart, $prices;
    // Process payment (e.g. Stripe API)
    // ...
    // Update database with purchased items
    // ...
}

// Add example items to cart
add_item_to_cart('product1', 2);
add_item_to_cart('product2', 3);

// Display shopping cart
display_cart();

// Process purchase
process_purchase();
?>


<?php

// database connection settings
$db_host = 'localhost';
$db_username = 'root';
$db_password = '';
$db_name = 'example';

// connect to the database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

// check if the connection was successful
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function display_products() {
  global $conn;
  $query = "SELECT * FROM products";
  $result = $conn->query($query);
  echo "<table>";
  while ($row = $result->fetch_assoc()) {
    echo "<tr><td>" . $row['name'] . "</td><td> $" . number_format($row['price'], 2) . "</td></tr>";
  }
  echo "</table>";
}

function add_to_cart($product_id, $quantity) {
  global $conn;
  if (isset($_SESSION['cart'])) {
    $_SESSION['cart'][$product_id] += $quantity;
  } else {
    $_SESSION['cart'] = array();
    $_SESSION['cart'][$product_id] = $quantity;
  }
}

function display_cart() {
  global $conn;
  echo "<table>";
  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
      $query = "SELECT * FROM products WHERE id = '$product_id'";
      $result = $conn->query($query);
      $row = $result->fetch_assoc();
      echo "<tr><td>" . $row['name'] . "</td><td> $" . number_format($row['price'], 2) . " x $quantity</td></tr>";
    }
  }
  echo "</table>";
}

function checkout() {
  global $conn;
  if (isset($_SESSION['cart'])) {
    // get the user's id
    $user_id = $_SESSION['user']['id'];

    // calculate the total cost
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
      $query = "SELECT price FROM products WHERE id = '$product_id'";
      $result = $conn->query($query);
      $row = $result->fetch_assoc();
      $total += $row['price'] * $quantity;
    }

    // create a new order
    $order_id = uniqid();
    $query = "INSERT INTO orders (user_id, total) VALUES ('$user_id', '$total')";
    $conn->query($query);

    // add the items to the order
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
      $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', '$quantity')";
      $conn->query($query);
    }

    // clear the cart
    unset($_SESSION['cart']);

    echo "Order placed successfully!";
  }
}

?>


// config.php: database connection settings
$host = 'localhost';
$dbname = 'mydatabase';
$username = 'myuser';
$password = 'mypassword';

// connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

// function to add a product to the cart
function addProductToCart($product_id, $quantity) {
  global $conn;
  // check if product exists in database
  $stmt = $conn->prepare('SELECT * FROM products WHERE id = :id');
  $stmt->bindParam(':id', $product_id);
  $stmt->execute();
  $product = $stmt->fetch();

  if ($product) {
    // add to cart
    $cart = $_SESSION['cart'] ?? [];
    $cart[$product_id] = ['quantity' => $quantity];
    $_SESSION['cart'] = $cart;
  }
}

// function to checkout
function checkout() {
  global $conn;
  // get order details from session
  $order = $_SESSION['order'];
  if (!$order) {
    echo 'Error: No order found';
    return false;
  }

  try {
    // create new order in database
    $stmt = $conn->prepare('INSERT INTO orders (customer_name, total_cost, status) VALUES (:name, :total, :status)');
    $stmt->bindParam(':name', $_SESSION['order']['customer_name']);
    $stmt->bindParam(':total', $_SESSION['order']['total_cost']);
    $stmt->bindParam(':status', 'pending');
    $stmt->execute();

    // get order ID
    $orderId = $conn->lastInsertId();

    // add items to order in database
    foreach ($_SESSION['order']['items'] as $item) {
      $stmt = $conn->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:id, :product_id, :quantity)');
      $stmt->bindParam(':id', $orderId);
      $stmt->bindParam(':product_id', $item['product_id']);
      $stmt->bindParam(':quantity', $item['quantity']);
      $stmt->execute();
    }

    // remove order from session
    unset($_SESSION['order']);

    return true;
  } catch (PDOException $e) {
    echo 'Error: ' . $e->getMessage();
    return false;
  }
}

// function to add item to order
function addItemToOrder($product_id, $quantity) {
  global $conn;
  // get product details from database
  $stmt = $conn->prepare('SELECT * FROM products WHERE id = :id');
  $stmt->bindParam(':id', $product_id);
  $stmt->execute();
  $product = $stmt->fetch();

  if ($product) {
    // add item to order in session
    $_SESSION['order']['items'][] = ['product_id' => $product_id, 'quantity' => $quantity];

    // update order total
    $_SESSION['order']['total_cost'] += $product['price'] * $quantity;
  }
}

// function to handle form submission
function handleSubmit() {
  global $conn;
  // get product ID and quantity from form data
  $productId = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  // add item to order
  addItemToOrder($productId, $quantity);

  // redirect to checkout page
  header('Location: checkout.php');
}

// include config file
include 'config.php';

// handle form submission
if (isset($_POST['product_id'])) {
  handleSubmit();
}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Checkout</title>
</head>
<body>

<form action="" method="post">

    <?php foreach ($_SESSION['order']['items'] as $item) { ?>
        <p><?php echo $products[$item['product_id']]['name']; ?> x <?php echo $item['quantity']; ?></p>
    <?php } ?>

    <label for="customer_name">Customer Name:</label>
    <input id="customer_name" name="customer_name" type="text">

    <button type="submit">Complete Purchase</button>

</form>

<?php if (isset($_POST['customer_name'])) { ?>
    <?php checkout(); ?>
<?php } ?>

</body>
</html>


<?php
// Connect to the database
$conn = new mysqli("localhost", "username", "password", "database");

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get products from the database
$sql = "SELECT * FROM products";
$result = $conn->query($sql);

// Display products on the webpage
echo "<table border='1'>";
echo "<tr><th>Product Name</th><th>Price</th></tr>";
while ($row = $result->fetch_assoc()) {
    echo "<tr><td>$row[name]</td><td>$row[price]</td></tr>";
}
echo "</table>";

// Close the database connection
$conn->close();
?>


<?php
// Connect to the database
$conn = new mysqli("localhost", "username", "password", "database");

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// If the user is adding a product to their cart...
if (isset($_POST['add_to_cart'])) {
    // Get the product ID and quantity from the form data
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Check if the product already exists in the cart
    $sql = "SELECT * FROM cart WHERE user_id = 1 AND product_id = '$product_id'";
    $result = $conn->query($sql);

    // If it does, update the quantity; otherwise, insert a new row
    if ($result->num_rows > 0) {
        // Update the quantity
        $sql = "UPDATE cart SET quantity = quantity + '$quantity' WHERE user_id = 1 AND product_id = '$product_id'";
    } else {
        // Insert a new row into the cart table
        $sql = "INSERT INTO cart (user_id, product_id, quantity) VALUES (1, '$product_id', '$quantity')";
    }

    // Execute the query
    if ($conn->query($sql)) {
        echo "Product added to cart successfully!";
    } else {
        echo "Error adding product to cart: " . $conn->error;
    }
}

// Display cart contents on the webpage
$sql = "SELECT * FROM cart WHERE user_id = 1";
$result = $conn->query($sql);

echo "<h2>Cart Contents:</h2>";
echo "<table border='1'>";
echo "<tr><th>Product Name</th><th>Quantity</th></tr>";
while ($row = $result->fetch_assoc()) {
    // Get the product name from the products table
    $product_sql = "SELECT * FROM products WHERE id = '$row[product_id]'";
    $product_result = $conn->query($product_sql);
    $product_row = $product_result->fetch_assoc();

    echo "<tr><td>$product_row[name]</td><td>$row[quantity]</td></tr>";
}
echo "</table>";

// Close the database connection
$conn->close();
?>


// database connection settings
$host = 'localhost';
$dbname = 'example_database';
$user = 'root';
$password = '';

// connect to the database
$conn = new mysqli($host, $user, $password, $dbname);

// check if the database is connected successfully
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// function to place an order
function placeOrder($customerName, $orderDate, $productIds, $quantities) {
  // insert new order into orders table
  $query = "INSERT INTO orders (customer_name, order_date) VALUES (?, ?)";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("ss", $customerName, $orderDate);
  $stmt->execute();

  // get the id of the newly inserted order
  $orderId = $conn->insert_id;

  // insert new order items into order_items table
  foreach ($productIds as $index => $productId) {
    $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("iii", $orderId, $productId, $quantities[$index]);
    $stmt->execute();
  }

  return $orderId;
}

// function to view orders
function viewOrders() {
  // select all orders from the orders table
  $query = "SELECT * FROM orders";
  $result = $conn->query($query);

  while ($row = $result->fetch_assoc()) {
    echo "Order ID: " . $row['id'] . "<br>";
    echo "Customer Name: " . $row['customer_name'] . "<br>";
    echo "Order Date: " . $row['order_date'] . "<br>";

    // select all order items for the current order
    $query = "SELECT * FROM order_items WHERE order_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $row['id']);
    $stmt->execute();
    $orderItemsResult = $stmt->get_result();

    while ($orderItemRow = $orderItemsResult->fetch_assoc()) {
      echo "Product ID: " . $orderItemRow['product_id'] . "<br>";
      echo "Quantity: " . $orderItemRow['quantity'] . "<br>";
    }
  }
}

// function to manage inventory
function manageInventory() {
  // select all products from the products table
  $query = "SELECT * FROM products";
  $result = $conn->query($query);

  while ($row = $result->fetch_assoc()) {
    echo "Product ID: " . $row['id'] . "<br>";
    echo "Name: " . $row['name'] . "<br>";
    echo "Price: $" . $row['price'] . "<br>";

    // select all order items for the current product
    $query = "SELECT * FROM order_items WHERE product_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $row['id']);
    $stmt->execute();
    $orderItemsResult = $stmt->get_result();

    while ($orderItemRow = $orderItemsResult->fetch_assoc()) {
      echo "Order ID: " . $orderItemRow['order_id'] . "<br>";
      echo "Quantity: " . $orderItemRow['quantity'] . "<br>";
    }
  }
}

// example usage
if (isset($_POST['place_order'])) {
  $customerName = $_POST['customer_name'];
  $orderDate = date('Y-m-d');
  $productIds = array_map(function($value) { return intval($value); }, explode(',', $_POST['product_ids']));
  $quantities = array_map(function($value) { return intval($value); }, explode(',', $_POST['quantities']));

  $orderId = placeOrder($customerName, $orderDate, $productIds, $quantities);
  echo "Order placed successfully! Order ID: $orderId";
} elseif (isset($_POST['view_orders'])) {
  viewOrders();
} elseif (isset($_POST['manage_inventory'])) {
  manageInventory();
}


// config.php (database connection settings)
$db_host = 'localhost';
$db_username = 'root';
$db_password = '';
$db_name = 'your_database';

// functions.php (functions for database interactions)
function connectDB() {
  global $db_host, $db_username, $db_password, $db_name;
  $conn = new mysqli($db_host, $db_username, $db_password, $db_name);
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
  return $conn;
}

function getProducts() {
  global $conn;
  $query = "SELECT * FROM products";
  $result = $conn->query($query);
  return $result;
}

function addProductToCart($product_id, $quantity) {
  global $conn;
  $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('', '$product_id', '$quantity')";
  $conn->query($query);
}

function checkout() {
  global $conn;
  // Get total cost of items in cart
  $total = 0;
  $query = "SELECT SUM(p.price * oi.quantity) as total FROM products p INNER JOIN order_items oi ON p.id = oi.product_id";
  $result = $conn->query($query);
  $row = $result->fetch_assoc();
  $total = $row['total'];
  
  // Create new order
  $query = "INSERT INTO orders (customer_name, order_date, total) VALUES ('', CURDATE(), '$total')";
  $conn->query($query);
  
  // Update product quantities and remove items from cart
  $query = "UPDATE products SET quantity = quantity - oi.quantity FROM products p INNER JOIN order_items oi ON p.id = oi.product_id";
  $conn->query($query);
  
  // Clear cart
  $query = "TRUNCATE TABLE order_items";
  $conn->query($query);
}

// index.php (display products and allow user to add to cart)
<?php
require_once 'config.php';
$conn = connectDB();

// Display products
$result = getProducts();
while ($row = $result->fetch_assoc()) {
  echo '<div>';
  echo '<h2>' . $row['name'] . '</h2>';
  echo '<p>Price: ' . $row['price'] . '</p>';
  echo '<form action="" method="post">';
  echo '<input type="hidden" name="product_id" value="' . $row['id'] . '">';
  echo '<label for="quantity">Quantity:</label>';
  echo '<input type="number" id="quantity" name="quantity">';
  echo '<button type="submit">Add to Cart</button>';
  echo '</form>';
  echo '</div>';
}

if (isset($_POST['product_id'])) {
  addProductToCart($_POST['product_id'], $_POST['quantity']);
}

// Allow user to checkout
echo '<form action="" method="post">';
echo '<button type="submit">Checkout</button>';
echo '</form>';

?>


<?php

// Database Connection Settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

// Create a database connection
function connectToDatabase() {
    $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Close the database connection
function closeDatabaseConnection($conn) {
    $conn->close();
}

// Function to add a new purchase
function addPurchase($customerName, $productId, $quantity = 1) {
    // Connect to the database
    $conn = connectToDatabase();

    // Get the product details from the products table
    $query = "SELECT price FROM products WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $productId);
    $stmt->execute();
    $result = $stmt->get_result();
    $productPrice = $result->fetch_assoc()["price"];

    // Calculate the total price
    $totalPrice = ($productPrice * $quantity);

    // Insert a new purchase into the purchases table
    $query = "INSERT INTO purchases (customer_name, product_id, total_price) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("sdi", $customerName, $productId, $totalPrice);
    $stmt->execute();

    // Close the database connection
    closeDatabaseConnection($conn);

    return true;
}

// Function to display all purchases
function displayPurchases() {
    // Connect to the database
    $conn = connectToDatabase();

    // Get all purchases from the purchases table
    $query = "SELECT p.id, p.customer_name, p.product_id, p.total_price FROM purchases p";
    $result = $conn->query($query);

    // Display each purchase in a table
    echo "<table border='1'>";
    echo "<tr><th>Id</th><th>Customer Name</th><th>Product Id</th><th>Total Price</th></tr>";
    while ($row = $result->fetch_assoc()) {
        echo "<tr><td>" . $row["id"] . "</td><td>" . $row["customer_name"] . "</td><td>" . $row["product_id"] . "</td><td>" . $row["total_price"] . "</td></tr>";
    }
    echo "</table>";

    // Close the database connection
    closeDatabaseConnection($conn);
}

// Example usage:
if (isset($_POST['submit'])) {
    addPurchase($_POST['customerName'], $_POST['productId']);
} else {
    displayPurchases();
}
?>


// index.php

<?php
require_once 'dbconfig.php'; // database configuration file

$productList = array();
$result = mysqli_query($conn, "SELECT * FROM products");
while ($row = mysqli_fetch_assoc($result)) {
    $productList[] = $row;
}

?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product List</title>
</head>
<body>

<h1>Product List</h1>

<ul>
    <?php foreach ($productList as $product) : ?>
        <li>
            <a href="?id=<?= $product['id'] ?>"><?= $product['name'] ?></a>
            (<?= $product['price'] ?>)
        </li>
    <?php endforeach; ?>
</ul>

<a href="cart.php">Add to Cart</a>

<?php
if (isset($_GET['id'])) {
    addToCart();
}
?>

</body>
</html>

<?php

function addToCart() {
    $productId = $_GET['id'];
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }
    $_SESSION['cart'][$productId] = true;
}

?>


// cart.php

<?php
require_once 'dbconfig.php'; // database configuration file

if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

$cartList = array();
$result = mysqli_query($conn, "SELECT * FROM products");
while ($row = mysqli_fetch_assoc($result)) {
    $cartList[] = $row;
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cart</title>
</head>
<body>

<h1>Cart</h1>

<ul>
    <?php foreach ($cartList as $product) : ?>
        <li>
            <a href="?remove=<?= $product['id'] ?>"><?= $product['name'] ?></a>
            (<?= $product['price'] ?>)
            x <?= isset($_SESSION['cart'][$product['id']]) ? '1' : '0' ?>
        </li>
    <?php endforeach; ?>
</ul>

<a href="checkout.php">Checkout</a>

<?php
if (isset($_GET['remove'])) {
    removeFromCart();
}
?>

<?php

function removeFromCart() {
    $productId = $_GET['remove'];
    unset($_SESSION['cart'][$productId]);
}

?>


// checkout.php

<?php
require_once 'dbconfig.php'; // database configuration file

$orderId = uniqid();

$totalPrice = 0;
foreach ($_SESSION['cart'] as $product) {
    $result = mysqli_query($conn, "SELECT price FROM products WHERE id=" . (int) $product);
    if ($row = mysqli_fetch_assoc($result)) {
        $totalPrice += (float) $row['price'];
    }
}

mysqli_query($conn, "
INSERT INTO orders (customer_name, total_price)
VALUES ('" . $_SESSION['username'] . "', " . $totalPrice . ")
");

mysqli_query($conn, "
UPDATE products
SET quantity = quantity - 1
WHERE id IN (" . implode(',', array_keys($_SESSION['cart'])) . ")
");

unset($_SESSION['cart']);

echo 'Your order has been successfully placed!';
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
</head>
<body>

<h1>Checkout</h1>

<p>Total Price: <?= $totalPrice ?></p>

<?php

function calculateTotal() {
    global $totalPrice;
    foreach ($_SESSION['cart'] as $product) {
        $result = mysqli_query($conn, "SELECT price FROM products WHERE id=" . (int) $product);
        if ($row = mysqli_fetch_assoc($result)) {
            $totalPrice += (float) $row['price'];
        }
    }
}

?>


<?php

// database connection settings
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
  // connect to database
  $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
  echo "Error connecting to database: " . $e->getMessage();
  exit;
}

// function to handle purchase request
function purchase($product_id, $quantity) {
  global $conn;

  // retrieve product information
  $stmt = $conn->prepare("SELECT * FROM products WHERE id = ?");
  $stmt->execute(array($product_id));
  $product_info = $stmt->fetch();

  if (!$product_info) {
    throw new Exception("Product not found");
  }

  // check if quantity is valid
  if ($quantity <= 0) {
    throw new Exception("Invalid quantity");
  }

  // insert order and order item into database
  $order_id = uniqid();
  $stmt = $conn->prepare("INSERT INTO orders (customer_name, order_date) VALUES (?, ?)");
  $stmt->execute(array(null, date('Y-m-d H:i:s')));
  $stmt = $conn->prepare("INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)");
  for ($i = 0; $i < $quantity; $i++) {
    $stmt->execute(array($order_id, $product_info['id'], 1));
  }

  // update product stock
  $stmt = $conn->prepare("UPDATE products SET stock = stock - ? WHERE id = ?");
  $stmt->execute(array(1, $product_info['id']));

  return array(
    'order_id' => $order_id,
    'total_amount' => $quantity * $product_info['price']
  );
}

// handle purchase request
if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
  try {
    $result = purchase($_POST['product_id'], $_POST['quantity']);
    echo json_encode($result);
  } catch (Exception $e) {
    echo json_encode(array('error' => $e->getMessage()));
  }
}

?>


// controllers/PurchaseController.php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Product;
use App\Models\Order;
use App\Models\OrderItem;

class PurchaseController extends Controller
{
    public function index()
    {
        // Display products for selection
        $products = Product::all();
        return view('purchase.index', compact('products'));
    }

    public function store(Request $request)
    {
        // Validate form data
        $validatedData = $request->validate([
            'product_id' => 'required|integer',
            'quantity' => 'required|integer|min:1',
        ]);

        // Get product details
        $product = Product::find($validatedData['product_id']);

        // Check if product is available in stock
        if ($product->stock < $validatedData['quantity']) {
            return redirect()->back()->withErrors(['Product not available in stock']);
        }

        // Create new order and item
        $order = new Order();
        $order->user_id = auth()->id(); // Assuming user authentication is set up
        $order->save();

        $item = new OrderItem();
        $item->order_id = $order->id;
        $item->product_id = $validatedData['product_id'];
        $item->quantity = $validatedData['quantity'];
        $item->total_cost = $product->price * $validatedData['quantity'];
        $item->save();

        // Update product stock
        $product->stock -= $validatedData['quantity'];
        $product->save();

        return redirect()->route('purchase.success');
    }
}


// views/purchase/index.blade.php

<h1>Purchase</h1>

<form action="{{ route('purchase.store') }}" method="post">
    @csrf

    <select name="product_id">
        @foreach ($products as $product)
            <option value="{{ $product->id }}">{{ $product->name }}</option>
        @endforeach
    </select>

    <input type="number" name="quantity" placeholder="Quantity">

    <button type="submit">Purchase</button>
</form>


// views/purchase/success.blade.php

<h1>Thank you for your purchase!</h1>

<p>You have successfully purchased {{ $order->total_cost }} worth of products.</p>

<a href="{{ route('purchase.index') }}">Continue shopping</a>


<?php

// Configuration
$db_host = 'localhost';
$db_user = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product
function add_product($name, $price) {
    global $conn;
    $sql = "INSERT INTO products (name, price) VALUES ('$name', '$price')";
    if ($conn->query($sql) === TRUE) {
        return true;
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
        return false;
    }
}

// Function to make a purchase
function make_purchase($customer_name, $product_id, $quantity) {
    global $conn;
    // Get product price from database
    $sql = "SELECT price FROM products WHERE id='$product_id'";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        $row = $result->fetch_assoc();
        $price = $row['price'];
        
        // Calculate total
        $total = $price * $quantity;
        
        // Insert purchase into database
        $sql = "INSERT INTO purchases (customer_name, product_id, quantity, total) VALUES ('$customer_name', '$product_id', '$quantity', '$total')";
        if ($conn->query($sql) === TRUE) {
            return true;
        } else {
            echo "Error: " . $sql . "<br>" . $conn->error;
            return false;
        }
    } else {
        echo "Product not found.";
        return false;
    }
}

// Function to get all purchases
function get_purchases() {
    global $conn;
    $sql = "SELECT * FROM purchases";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            echo "ID: " . $row['id'] . "<br>Customer Name: " . $row['customer_name'] . "<br>Product ID: " . $row['product_id'] . "<br>Quantity: " . $row['quantity'] . "<br>Total: $" . $row['total'] . "<br><hr>";
        }
    } else {
        echo "No purchases found.";
    }
}

?>


// Add a product
add_product('Apple', 1.99);

// Make a purchase
make_purchase('John Doe', 1, 2);

// Get all purchases
get_purchases();


<?php
// Database connection settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

// Establish database connection
$dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME;
$conn = new PDO($dsn, DB_USERNAME, DB_PASSWORD);

function getProducts() {
  global $conn;
  $stmt = $conn->prepare("SELECT * FROM products");
  $stmt->execute();
  return $stmt->fetchAll();
}

function getProduct($id) {
  global $conn;
  $stmt = $conn->prepare("SELECT * FROM products WHERE id = :id");
  $stmt->bindParam(':id', $id);
  $stmt->execute();
  return $stmt->fetch();
}
?>


<?php
class User {
  private $username;
  private $password;

  function __construct($username, $password) {
    $this->username = $username;
    $this->password = $password;
  }

  function authenticate() {
    global $conn;
    $stmt = $conn->prepare("SELECT * FROM users WHERE username = :username AND password = :password");
    $stmt->bindParam(':username', $this->username);
    $stmt->bindParam(':password', $this->password);
    $stmt->execute();
    return $stmt->fetch() !== false;
  }
}
?>


<?php
class Purchase {
  private $user_id;
  private $product_id;
  private $quantity;

  function __construct($user_id, $product_id, $quantity) {
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->quantity = $quantity;
  }

  function completePurchase() {
    global $conn;
    try {
      $stmt = $conn->prepare("INSERT INTO purchases (user_id, product_id, quantity) VALUES (:user_id, :product_id, :quantity)");
      $stmt->bindParam(':user_id', $this->user_id);
      $stmt->bindParam(':product_id', $this->product_id);
      $stmt->bindParam(':quantity', $this->quantity);
      $stmt->execute();

      // Update product stock
      $product = getProduct($this->product_id);
      $newStock = $product['stock'] - $this->quantity;
      $stmt = $conn->prepare("UPDATE products SET stock = :stock WHERE id = :id");
      $stmt->bindParam(':stock', $newStock);
      $stmt->bindParam(':id', $this->product_id);
      $stmt->execute();

      return true;
    } catch (PDOException $e) {
      echo "Error: " . $e->getMessage();
      return false;
    }
  }
}
?>


require_once 'config.php';
require_once 'user.php';
require_once 'purchase.php';

// Create a new user
$user = new User('john_doe', 'password123');
if ($user->authenticate()) {
  echo "User authenticated successfully";
} else {
  echo "Authentication failed";
}

// Get available products
$products = getProducts();
foreach ($products as $product) {
  echo $product['name'] . " - $" . number_format($product['price'], 2);
}

// Create a new purchase
$purchase = new Purchase(1, 1, 2);
if ($purchase->completePurchase()) {
  echo "Purchase completed successfully";
} else {
  echo "Error completing purchase";
}


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

// Connect to database
$conn = new mysqli($host, $username, $password, $dbname);

// Check if connection was successful
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Form data from user input
$product_name = $_POST['product_name'];
$price = floatval($_POST['price']);
$quantity = intval($_POST['quantity']);

// Validate form data
if (empty($product_name)) {
    echo 'Please enter product name';
} elseif (!is_numeric($price) || $price <= 0) {
    echo 'Please enter valid price';
} elseif (!is_numeric($quantity) || $quantity <= 0) {
    echo 'Please enter valid quantity';
}

// If form data is valid, insert purchase into database
if ($product_name && $price > 0 && $quantity > 0) {
    // Prepare SQL statement
    $stmt = $conn->prepare("INSERT INTO purchases (product_name, price, quantity) VALUES (?, ?, ?)");
    
    // Bind parameters
    $stmt->bind_param('dii', $product_name, $price, $quantity);
    
    // Execute query
    if ($stmt->execute()) {
        echo 'Purchase added successfully!';
    } else {
        echo 'Error adding purchase: ' . $conn->error;
    }
}

// Close connection
$conn->close();

?>


<?php include 'purchase_function.php'; ?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Form</title>
</head>
<body>

<h1>Purchase Form</h1>

<form action="" method="post">
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name"><br><br>
    
    <label for="price">Price:</label>
    <input type="number" id="price" name="price" step="0.01"><br><br>
    
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity"><br><br>
    
    <input type="submit" value="Submit">
</form>

</body>
</html>


<?php

// Connect to database
$db = new mysqli('localhost', 'username', 'password', 'database');

// Check connection
if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

// Get user ID from session
$user_id = $_SESSION['user_id'];

// Handle form submission
if (isset($_POST['submit'])) {
    // Get product ID, quantity, and other data from form
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Validate input
    if ($quantity <= 0 || !ctype_digit($quantity)) {
        echo "Invalid quantity";
        exit;
    }

    // Add order to database
    $query = "INSERT INTO orders (user_id, product_id, quantity) VALUES (?, ?, ?)";
    $stmt = $db->prepare($query);
    $stmt->bind_param("iii", $user_id, $product_id, $quantity);
    if ($stmt->execute()) {
        echo "Order added successfully!";
    } else {
        echo "Error adding order: " . $db->error;
    }
}

// Display form
?>
<form method="post">
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id"><br><br>
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity"><br><br>
    <input type="submit" value="Purchase">
</form>


<?php
session_start();
require_once 'db.php'; // assuming db.php contains database connection settings
?>


<?php

// Initialize the cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

function add_item_to_cart($item_id) {
    // Check if the item is already in the cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $item_id) {
            // If it exists, increment its quantity
            $item['quantity']++;
            return;
        }
    }

    // Add the new item to the cart with a quantity of 1
    $_SESSION['cart'][] = ['id' => $item_id, 'price' => 0.00, 'quantity' => 1];
}

function remove_item_from_cart($item_id) {
    // Filter out the item from the cart array if it exists
    $_SESSION['cart'] = array_filter($_SESSION['cart'], function ($item) use ($item_id) {
        return $item['id'] != $item_id;
    });
}

function update_item_quantity($item_id, $new_quantity) {
    // Find the item in the cart and update its quantity
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $item_id) {
            $item['quantity'] = $new_quantity;
            return;
        }
    }

    // If the item is not found, add it to the cart with the new quantity
    add_item_to_cart($item_id);
}

function calculate_total_cost() {
    $total = 0.00;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'] * $item['quantity'];
    }
    return number_format($total, 2); // round to two decimal places
}

?>


<?php require_once 'cart.php'; ?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purchase Cart</title>
</head>
<body>

    <!-- Form to add items to the cart -->
    <form action="" method="post">
        <input type="hidden" name="item_id" value="1">
        <button type="submit">Add Item 1 to Cart</button>
    </form>

    <!-- Form to remove an item from the cart -->
    <form action="" method="post">
        <input type="hidden" name="remove_item_id" value="2">
        <button type="submit">Remove Item 2 from Cart</button>
    </form>

    <!-- Form to update an item's quantity in the cart -->
    <form action="" method="post">
        <input type="hidden" name="update_item_id" value="3">
        <label for="new_quantity">New Quantity:</label>
        <input type="number" id="new_quantity" name="new_quantity">
        <button type="submit">Update Item 3's Quantity</button>
    </form>

    <!-- Display the current cart contents -->
    <?php if (!empty($_SESSION['cart'])) : ?>
        <h2>Cart Contents:</h2>
        <ul>
            <?php foreach ($_SESSION['cart'] as $item) : ?>
                <li><?php echo $item['id']; ?> (Quantity: <?php echo $item['quantity']; ?>, Price: <?php echo number_format($item['price'], 2); ?>)</li>
            <?php endforeach; ?>
        </ul>

        <!-- Display the total cost -->
        <p>Total Cost: <?php echo calculate_total_cost(); ?></p>
    <?php else : ?>
        <p>Your cart is empty.</p>
    <?php endif; ?>

</body>
</html>


<?php

// Configuration file for database connection
require_once 'config.php';

// Function to validate form data
function validate_form($data) {
    // Validate name and email
    if (!isset($data['name']) || empty(trim($data['name']))) {
        return array('error' => 'Name is required');
    }
    if (!isset($data['email']) || empty(trim($data['email'])) || !filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {
        return array('error' => 'Invalid email address');
    }

    // Validate product selections
    $selected_products = array_filter($data['products']);
    if (empty($selected_products)) {
        return array('error' => 'Please select at least one product');
    }

    // Validate quantity and price
    foreach ($selected_products as $product_id => $quantity) {
        if (!is_numeric($quantity) || $quantity < 1) {
            return array('error' => 'Invalid quantity for product ' . $product_id);
        }
        $product = get_product($product_id);
        if (!$product) {
            return array('error' => 'Product ' . $product_id . ' not found');
        }
        if ($quantity * $product['price'] > $_SESSION['total_cost']) {
            return array('error' => 'Insufficient funds for product ' . $product_id);
        }
    }

    // All validation passed
    return array();
}

// Function to process purchase
function process_purchase($data) {
    // Get selected products and quantities
    $selected_products = array_filter($data['products']);

    // Create new order in database
    $order = array(
        'customer_name' => $_SESSION['username'],
        'order_date' => date('Y-m-d'),
        'total_cost' => $_SESSION['total_cost']
    );
    insert_order($order);

    // Insert order items into database
    foreach ($selected_products as $product_id => $quantity) {
        $product = get_product($product_id);
        if ($product) {
            $order_item = array(
                'order_id' => get_last_order_id(),
                'product_id' => $product_id,
                'quantity' => $quantity
            );
            insert_order_item($order_item);
        }
    }

    // Clear session variables
    unset($_SESSION['username']);
    unset($_SESSION['products']);
    unset($_SESSION['total_cost']);

    echo 'Purchase successful!';
}

// Function to get last order ID
function get_last_order_id() {
    global $conn;
    $stmt = $conn->prepare('SELECT id FROM orders ORDER BY id DESC LIMIT 1');
    $stmt->execute();
    return $stmt->fetchColumn();
}

// Function to insert new order into database
function insert_order($order) {
    global $conn;
    $stmt = $conn->prepare('INSERT INTO orders (customer_name, order_date, total_cost) VALUES (:customer_name, :order_date, :total_cost)');
    $stmt->bindParam(':customer_name', $order['customer_name']);
    $stmt->bindParam(':order_date', $order['order_date']);
    $stmt->bindParam(':total_cost', $order['total_cost']);
    $stmt->execute();
}

// Function to insert new order item into database
function insert_order_item($order_item) {
    global $conn;
    $stmt = $conn->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');
    $stmt->bindParam(':order_id', $order_item['order_id']);
    $stmt->bindParam(':product_id', $order_item['product_id']);
    $stmt->bindParam(':quantity', $order_item['quantity']);
    $stmt->execute();
}

// Function to get product by ID
function get_product($id) {
    global $conn;
    $stmt = $conn->prepare('SELECT * FROM products WHERE id = :id');
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch();
}

?>


<?php

// Configuration
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

// Connect to database
$conn = mysqli_connect($host, $username, $password, $dbname);

if (!$conn) {
  die('Connection failed: ' . mysqli_connect_error());
}

// Check if form is submitted
if (isset($_POST['submit'])) {

  // Validate user input
  $user_id = $_POST['user_id'];
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  if (!ctype_digit($user_id) || !ctype_digit($product_id) || !ctype_digit($quantity)) {
    echo 'Invalid input';
    exit;
  }

  // Get product price
  $query = "SELECT price FROM products WHERE id = '$product_id'";
  $result = mysqli_query($conn, $query);

  if (!$result) {
    echo 'Error getting product price: ' . mysqli_error($conn);
    exit;
  }

  $product_price = mysqli_fetch_assoc($result)['price'];

  // Calculate total
  $total = $quantity * $product_price;

  // Insert purchase into database
  $query = "INSERT INTO purchases (user_id, product_id, quantity, total) VALUES ('$user_id', '$product_id', '$quantity', '$total')";
  $result = mysqli_query($conn, $query);

  if (!$result) {
    echo 'Error inserting purchase: ' . mysqli_error($conn);
    exit;
  }

  // Display success message
  echo 'Purchase successful!';
} else {
  ?>
  <h1>Purchase Form</h1>

  <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <label for="user_id">User ID:</label>
    <input type="text" id="user_id" name="user_id"><br><br>
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id"><br><br>
    <label for="quantity">Quantity:</label>
    <input type="text" id="quantity" name="quantity"><br><br>

    <input type="submit" value="Submit">
  </form>
  <?php
}
?>


<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database');

// Database connection settings
$dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME;
$conn = new PDO($dsn, DB_USER, DB_PASSWORD);


<?php
require_once 'config.php';

if (isset($_POST['register'])) {
  $name = $_POST['name'];
  $email = $_POST['email'];
  $password = $_POST['password'];

  $stmt = $conn->prepare("INSERT INTO users (name, email, password) VALUES (:name, :email, :password)");
  $stmt->bindParam(':name', $name);
  $stmt->bindParam(':email', $email);
  $stmt->bindParam(':password', $password);

  if ($stmt->execute()) {
    echo 'User registered successfully!';
  } else {
    echo 'Error registering user.';
  }
}
?>


<?php
require_once 'config.php';

if (isset($_POST['login'])) {
  $email = $_POST['email'];
  $password = $_POST['password'];

  $stmt = $conn->prepare("SELECT * FROM users WHERE email = :email AND password = :password");
  $stmt->bindParam(':email', $email);
  $stmt->bindParam(':password', $password);

  if ($stmt->execute() && $stmt->rowCount() > 0) {
    $_SESSION['user_id'] = $stmt->fetch()['id'];
    echo 'User logged in successfully!';
  } else {
    echo 'Invalid email or password.';
  }
}
?>


<?php
require_once 'config.php';

$stmt = $conn->query("SELECT * FROM products");
$products = $stmt->fetchAll();

echo '<h1>Products</h1>';
foreach ($products as $product) {
  echo '<p>' . $product['name'] . ': $' . number_format($product['price'], 2) . '</p>';
}
?>


<?php
require_once 'config.php';

if (isset($_POST['add'])) {
  $user_id = $_SESSION['user_id'];
  $product_id = $_POST['product_id'];

  $stmt = $conn->prepare("INSERT INTO cart (user_id, product_id) VALUES (:user_id, :product_id)");
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':product_id', $product_id);

  if ($stmt->execute()) {
    echo 'Product added to cart successfully!';
  } else {
    echo 'Error adding product to cart.';
  }
}
?>


<?php
require_once 'config.php';

$stmt = $conn->query("SELECT * FROM cart WHERE user_id = :user_id", array(':user_id' => $_SESSION['user_id']));
$cart = $stmt->fetchAll();

echo '<h1>Cart</h1>';
foreach ($cart as $item) {
  echo '<p>' . $items['product_name'] . ': ' . number_format($items['quantity'] * $items['price'], 2) . '</p>';
}
?>


<?php
require_once 'config.php';

if (isset($_POST['purchase'])) {
  $user_id = $_SESSION['user_id'];
  $cart_id = $_POST['cart_id'];

  $stmt = $conn->prepare("SELECT * FROM cart WHERE user_id = :user_id AND id = :cart_id");
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':cart_id', $cart_id);

  if ($stmt->execute() && $stmt->rowCount() > 0) {
    $item = $stmt->fetch();

    // Update product stock
    $product_id = $item['product_id'];
    $new_stock = $conn->query("SELECT stock_quantity FROM products WHERE id = :product_id", array(':product_id' => $product_id))->fetch()['stock_quantity'] - $item['quantity'];

    $stmt = $conn->prepare("UPDATE products SET stock_quantity = :new_stock WHERE id = :product_id");
    $stmt->bindParam(':new_stock', $new_stock);
    $stmt->bindParam(':product_id', $product_id);

    if ($stmt->execute()) {
      echo 'Purchase made successfully!';
    } else {
      echo 'Error making purchase.';
    }
  } else {
    echo 'Cart not found or user is not logged in.';
  }
}
?>


// Connect to database
$conn = new mysqli('localhost', 'username', 'password', 'database');

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to get all products
function get_products() {
  global $conn;
  $query = "SELECT * FROM products";
  $result = $conn->query($query);
  return $result->fetch_all(MYSQLI_ASSOC);
}

// Function to add product to cart
function add_to_cart($product_id, $quantity) {
  global $conn;
  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }
  if (array_key_exists($product_id, $_SESSION['cart'])) {
    $_SESSION['cart'][$product_id]['quantity'] += $quantity;
  } else {
    $_SESSION['cart'][$product_id] = array('product_id' => $product_id, 'quantity' => $quantity);
  }
}

// Function to checkout
function checkout() {
  global $conn;
  if (!isset($_SESSION['cart']) || empty($_SESSION['cart'])) {
    echo "Cart is empty!";
    return false;
  }
  
  // Calculate total cost
  $total_cost = 0;
  foreach ($_SESSION['cart'] as $item) {
    $query = "SELECT price FROM products WHERE id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $item['product_id']);
    $stmt->execute();
    $result = $stmt->get_result();
    $price = $result->fetch_assoc()['price'];
    $total_cost += $price * $item['quantity'];
  }
  
  // Insert order
  $query = "INSERT INTO orders (user_id, total_cost, status) VALUES (?, ?, ?)";
  $stmt = $conn->prepare($query);
  $stmt->bind_param("iii", $_SESSION['user_id'], $total_cost, 1); // status = 1 means pending
  $stmt->execute();
  
  // Get order ID
  $order_id = $conn->insert_id;
  
  // Insert order items
  foreach ($_SESSION['cart'] as $item) {
    $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("iii", $order_id, $item['product_id'], $item['quantity']);
    $stmt->execute();
  }
  
  // Clear cart
  unset($_SESSION['cart']);
  
  return true;
}


// Assuming we have a user logged in and stored in the session
$_SESSION['user_id'] = 1;

// Get all products
$products = get_products();

// Add product to cart
add_to_cart(1, 2);

// Checkout
if (checkout()) {
  echo "Order placed successfully!";
} else {
  echo "Error while placing order.";
}


<?php
require_once 'config.php';

// Display products
$query = "SELECT * FROM products";
$result = mysqli_query($conn, $query);
$products = mysqli_fetch_all($result, MYSQLI_ASSOC);

?>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Shop</title>
</head>
<body>

  <?php foreach ($products as $product) : ?>
    <div class="product">
      <h2><?php echo $product['name']; ?></h2>
      <p><?php echo $product['description']; ?></p>
      <p>$<?php echo $product['price']; ?></p>
      <button id="add-to-cart" data-product-id="<?php echo $product['id']; ?>">Add to Cart</button>
    </div>
  <?php endforeach; ?>

  <!-- Display cart -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script>
    $(document).ready(function() {
      $('#add-to-cart').click(function(e) {
        e.preventDefault();
        var productId = $(this).data('product-id');
        $.ajax({
          type: 'POST',
          url: 'cart.php',
          data: {productId: productId},
          success: function(response) {
            console.log(response);
          }
        });
      });

      // Display cart
      $.ajax({
        type: 'GET',
        url: 'cart.php',
        success: function(response) {
          $('#cart').html(response);
        }
      });
    });
  </script>

</body>
</html>


<?php
require_once 'config.php';

// Get products in cart
$query = "SELECT * FROM orders WHERE user_id = 1";
$result = mysqli_query($conn, $query);
$cart = mysqli_fetch_all($result, MYSQLI_ASSOC);

// Add product to cart
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  $productId = $_POST['productId'];
  $query = "INSERT INTO orders (user_id, product_id, quantity) VALUES (1, ?, 1)";
  $stmt = mysqli_prepare($conn, $query);
  mysqli_stmt_bind_param($stmt, 'i', $productId);
  mysqli_stmt_execute($stmt);

  echo json_encode(array('message' => 'Product added to cart'));
}

// Display cart
?>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cart</title>
</head>
<body>

  <?php foreach ($cart as $item) : ?>
    <div class="cart-item">
      <h2><?php echo $item['name']; ?></h2>
      <p>$<?php echo $item['price']; ?></p>
    </div>
  <?php endforeach; ?>

  <!-- Checkout button -->
  <button id="checkout">Checkout</button>

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script>
    $(document).ready(function() {
      $('#checkout').click(function(e) {
        e.preventDefault();
        $.ajax({
          type: 'POST',
          url: 'process_order.php',
          success: function(response) {
            console.log(response);
          }
        });
      });
    });
  </script>

</body>
</html>


<?php
require_once 'config.php';

// Process order
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  $userId = 1;
  $query = "SELECT * FROM orders WHERE user_id = ?";
  $stmt = mysqli_prepare($conn, $query);
  mysqli_stmt_bind_param($stmt, 'i', $userId);
  mysqli_stmt_execute($stmt);

  $result = mysqli_stmt_get_result($stmt);
  while ($item = mysqli_fetch_assoc($result)) {
    // Update stock and order status
    $productId = $item['product_id'];
    $query = "UPDATE products SET stock = stock - ? WHERE id = ?";
    $stmt = mysqli_prepare($conn, $query);
    mysqli_stmt_bind_param($stmt, 'ii', $item['quantity'], $productId);
    mysqli_stmt_execute($stmt);

    // Update order status
    $orderId = $item['id'];
    $query = "UPDATE orders SET status = ? WHERE id = ?";
    $stmt = mysqli_prepare($conn, $query);
    mysqli_stmt_bind_param($stmt, 'si', 'pending', $orderId);
    mysqli_stmt_execute($stmt);
  }

  echo json_encode(array('message' => 'Order processed successfully'));
}


<?php

// Database connection settings
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

$conn = mysqli_connect(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

?>


<?php

define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'store');

?>


<?php

require_once 'config.php';

function connect() {
    $conn = new PDO("mysql:host=".DB_HOST.";dbname=".DB_NAME, DB_USER, DB_PASSWORD);
    return $conn;
}

function disconnect($conn) {
    $conn = null;
}
?>


<?php

class User {
    private $db;

    function __construct() {
        $this->db = connect();
    }

    function register($username, $email, $password) {
        $stmt = $this->db->prepare("INSERT INTO users (username, email, password) VALUES (?, ?, ?)");
        $stmt->execute(array($username, $email, password_hash($password, PASSWORD_DEFAULT)));
        return $this->db->lastInsertId();
    }

    function login($username, $password) {
        $stmt = $this->db->prepare("SELECT * FROM users WHERE username = ?");
        $stmt->execute(array($username));
        $user = $stmt->fetch();
        if ($user && password_verify($password, $user['password'])) {
            return $user;
        }
        return null;
    }
}

?>


<?php

class Product {
    private $db;

    function __construct() {
        $this->db = connect();
    }

    function getAllProducts() {
        $stmt = $this->db->prepare("SELECT * FROM products");
        $stmt->execute();
        return $stmt->fetchAll();
    }

    function getProduct($id) {
        $stmt = $this->db->prepare("SELECT * FROM products WHERE id = ?");
        $stmt->execute(array($id));
        return $stmt->fetch();
    }
}

?>


<?php

class Cart {
    private $user_id;
    private $product_id;
    private $quantity;

    function __construct() {
        $this->db = connect();
    }

    function addProduct($user_id, $product_id, $quantity) {
        $stmt = $this->db->prepare("INSERT INTO carts (user_id, product_id, quantity) VALUES (?, ?, ?)");
        $stmt->execute(array($user_id, $product_id, $quantity));
        return $this->db->lastInsertId();
    }

    function getCartProducts() {
        $stmt = $this->db->prepare("SELECT * FROM carts WHERE user_id = ?");
        $stmt->execute(array($_SESSION['user_id']));
        return $stmt->fetchAll();
    }
}

?>


<?php

class Order {
    private $user_id;
    private $cart;

    function __construct() {
        $this->db = connect();
        $this->cart = new Cart();
    }

    function placeOrder($user_id) {
        // Payment processing (mocked for demo purposes)
        if ($_SESSION['payment_method'] == 'paypal') {
            // PayPal payment gateway code here
        } elseif ($_SESSION['payment_method'] == 'stripe') {
            // Stripe payment gateway code here
        }

        // Save order to database
        $stmt = $this->db->prepare("INSERT INTO orders (user_id) VALUES (?)");
        $stmt->execute(array($user_id));
        return $this->db->lastInsertId();
    }
}

?>


<?php

require_once 'config.php';
require_once 'db.php';
require_once 'user.php';
require_once 'product.php';
require_once 'cart.php';
require_once 'order.php';

if (isset($_SESSION['logged_in'])) {
    // User is logged in, display products and cart
    $products = new Product();
    $cart = new Cart();

    echo '<h1>Product Catalog</h1>';
    echo '<ul>';
    foreach ($products->getAllProducts() as $product) {
        echo '<li>' . $product['name'] . ' - ' . $product['price'] . '</li>';
        echo '<button class="add-to-cart" data-id="' . $product['id'] . '">Add to Cart</button>';
    }
    echo '</ul>';

    echo '<h1>Cart</h1>';
    echo '<table>';
    foreach ($cart->getCartProducts() as $product) {
        echo '<tr><td>' . $product['name'] . '</td><td>' . $product['quantity'] . '</td></tr>';
    }
    echo '</table>';

    // Place order button
    if (isset($_SESSION['user_id'])) {
        echo '<button class="place-order">Place Order</button>';
    }
} else {
    // User is not logged in, display login form
    echo '<h1>Login Form</h1>';
    echo '<form action="login.php" method="post">';
    echo '<label>Username:</label><br>';
    echo '<input type="text" name="username"><br>';
    echo '<label>Password:</label><br>';
    echo '<input type="password" name="password"><br>';
    echo '<button type="submit">Login</button>';
    echo '</form>';
}
?>

<script>
    $(document).ready(function() {
        $('.add-to-cart').click(function() {
            var productId = $(this).data('id');
            $.ajax({
                type: 'POST',
                url: 'cart.php',
                data: {action: 'addProduct', userId: <?= $_SESSION['user_id'] ?>, productId: productId},
                success: function(response) {
                    console.log(response);
                }
            });
        });

        $('.place-order').click(function() {
            var userId = <?= $_SESSION['user_id'] ?>;
            $.ajax({
                type: 'POST',
                url: 'order.php',
                data: {action: 'placeOrder', userId: userId},
                success: function(response) {
                    console.log(response);
                }
            });
        });
    });
</script>


<?php

require_once 'config.php';
require_once 'db.php';
require_once 'user.php';

if (isset($_POST['username']) && isset($_POST['password'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];

    $user = new User();
    if ($user->login($username, $password)) {
        $_SESSION['logged_in'] = true;
        $_SESSION['user_id'] = $user->id;
        header('Location: index.php');
        exit;
    } else {
        echo 'Invalid username or password';
    }
}
?>


// Database connection details
$host = 'localhost';
$dbname = 'store';
$username = 'root';
$password = '';

// Create a database connection
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product to cart
function addToCart() {
    global $conn;

    // Get the user's selected products and quantities
    if (isset($_POST['product_id'])) {
        foreach ($_POST['product_id'] as $key => $value) {
            // Insert into order table for each product
            $sql = "INSERT INTO orders (customer_name, product_id, quantity)
                    VALUES ('".$_POST['customer_name']."', '".$_POST['product_id'][$key]."','".$_POST['quantity'][$key]."', NOW())";
            
            if ($conn->query($sql) === TRUE) {
                echo 'Product added to cart!';
            } else {
                echo "Error adding product: " . $conn->error;
            }
        }
    }
}

// Function to checkout
function checkout() {
    global $conn;

    // Delete the products from the order table
    $sql = "DELETE FROM orders WHERE customer_name = '".$_POST['customer_name']."' AND order_date > DATE_SUB(NOW(), INTERVAL 1 DAY)";
    
    if ($conn->query($sql) === TRUE) {
        echo 'Order successful!';
    } else {
        echo "Error: " . $conn->error;
    }
}

// Add product to cart
if (isset($_POST['addToCart'])) {
    addToCart();
} elseif (isset($_POST['checkout'])) {
    checkout();
}

// Close database connection
$conn->close();


// product.model.php

class Product {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function getAllProducts() {
    $query = "SELECT * FROM products";
    return $this->db->query($query)->fetch_all();
  }

  public function getProductById($id) {
    $query = "SELECT * FROM products WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(":id", $id);
    return $stmt->execute()->fetch();
  }
}


// order.model.php

class Order {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function placeOrder($product_id, $quantity, $customer_name) {
    // Insert new order into database
    $query = "INSERT INTO orders (customer_name, order_date, total) VALUES (:customer_name, NOW(), :total)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(":customer_name", $customer_name);
    $total = $this->getProductPrice($product_id) * $quantity;
    $stmt->bindParam(":total", $total);
    return $stmt->execute();
  }

  private function getProductPrice($id) {
    // Get product price from database
    $query = "SELECT price FROM products WHERE id = :id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(":id", $id);
    return $stmt->execute()->fetchColumn();
  }
}


// cart.controller.php

class Cart {
  private $productModel;
  private $orderModel;

  public function __construct($productModel, $orderModel) {
    $this->productModel = $productModel;
    $this->orderModel = $orderModel;
  }

  public function index() {
    // Display products
    return $this->productModel->getAllProducts();
  }

  public function addToCart($id) {
    // Add product to cart
    $quantity = $_POST['quantity'];
    if ($this->orderModel->placeOrder($id, $quantity, $_SESSION['customer_name'])) {
      header("Location: success.php");
      exit;
    } else {
      echo "Error placing order";
    }
  }

  public function checkout() {
    // Display cart contents
    return $this->productModel->getAllProducts();
  }
}


// index.php

<?php
require_once "cart.controller.php";

$cart = new Cart(new Product($db), new Order($db));

if (isset($_POST['addToCart'])) {
  $id = $_POST['id'];
  $quantity = $_POST['quantity'];
  $cart->addToCart($id);
} else {
?>
  <h1>Products</h1>
  <ul>
    <?php foreach ($cart->index() as $product) { ?>
      <li>
        <?= $product['name'] ?> - <?= $product['price'] ?>
        <form action="" method="post">
          <input type="hidden" name="id" value="<?= $product['id'] ?>">
          Quantity: <input type="number" name="quantity" value="1"> <br>
          <button type="submit" name="addToCart">Add to Cart</button>
        </form>
      </li>
    <?php } ?>
  </ul>
<?php
}
?>


<?php

// Configuration
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to the database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product to order
function addProductToOrder($order_id, $product_id, $quantity) {
    global $conn;
    // Insert into order_items table
    $sql = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iii", $order_id, $product_id, $quantity);
    $stmt->execute();
}

// Function to calculate total
function calculateTotal($order_id) {
    global $conn;
    // Calculate the total cost of the order
    $sql = "SELECT SUM(oi.quantity * p.price) AS total FROM order_items oi INNER JOIN products p ON oi.product_id = p.id WHERE oi.order_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $order_id);
    $stmt->execute();
    $result = $stmt->get_result();
    return $result->fetch_assoc()["total"];
}

// Function to place an order
function placeOrder() {
    global $conn;
    // Get the customer details from the form
    $customer_name = $_POST["customer_name"];
    $order_date = date("Y-m-d");
    
    // Calculate the total cost of the order
    $total = calculateTotal($_POST["order_id"]);
    
    // Insert into orders table
    $sql = "INSERT INTO orders (customer_name, order_date, total) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ssd", $customer_name, $order_date, $total);
    $stmt->execute();
    
    // Get the ID of the newly inserted order
    $new_order_id = $conn->insert_id;
    
    // Insert products into order_items table
    foreach ($_POST["product_ids"] as $key => $value) {
        addProductToOrder($new_order_id, $value, $_POST["quantities"][$key]);
    }
}

// Handle form submission
if (isset($_POST["place_order"])) {
    placeOrder();
}

?>


// config.php - database configuration file

$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'ecommerce';

// Connect to database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product to cart
function add_to_cart($product_id, $quantity) {
    global $conn;
    
    // Get customer session data
    $customer_id = $_SESSION['customer_id'];
    
    // Check if product is already in cart
    $query = "SELECT * FROM order_items WHERE product_id = '$product_id' AND order_id = '$customer_id'";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            // Update quantity
            $quantity += $row['quantity'];
            
            $update_query = "UPDATE order_items SET quantity = '$quantity' WHERE id = '".$row['id']."'";
            $conn->query($update_query);
        }
    } else {
        // Insert new product into cart
        $insert_query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$customer_id', '$product_id', '$quantity')";
        $conn->query($insert_query);
    }
}

// Function to remove product from cart
function remove_from_cart($product_id) {
    global $conn;
    
    // Get customer session data
    $customer_id = $_SESSION['customer_id'];
    
    // Delete product from cart
    $delete_query = "DELETE FROM order_items WHERE product_id = '$product_id' AND order_id = '$customer_id'";
    $conn->query($delete_query);
}

// Function to checkout and create new order
function checkout() {
    global $conn;
    
    // Get customer session data
    $customer_id = $_SESSION['customer_id'];
    
    // Calculate total cost
    $total = 0;
    $query = "SELECT * FROM order_items WHERE order_id = '$customer_id'";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            // Add cost of each product to total
            $total += ($row['price'] * $row['quantity']);
        }
        
        // Create new order
        $insert_query = "INSERT INTO orders (customer_id, total, status) VALUES ('$customer_id', '$total', 'pending')";
        $conn->query($insert_query);
        
        // Update product quantities
        foreach ($result as $row) {
            $update_query = "UPDATE products SET quantity = quantity - ".$row['quantity']. " WHERE id = '".$row['product_id']."'";
            $conn->query($update_query);
            
            // Remove from cart
            remove_from_cart($row['product_id']);
        }
    }
}

// Function to view order history
function view_order_history() {
    global $conn;
    
    // Get customer session data
    $customer_id = $_SESSION['customer_id'];
    
    // Retrieve all orders for customer
    $query = "SELECT * FROM orders WHERE customer_id = '$customer_id'";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        echo "<table>";
        
        while($row = $result->fetch_assoc()) {
            echo "<tr><td>ID:</td><td>".$row['id']."</td></tr>";
            echo "<tr><td>Total:</td><td>".$row['total']."</td></tr>";
            echo "<tr><td>Status:</td><td>".$row['status']."</td></tr>";
        }
        
        echo "</table>";
    }
}


<?php
// Initialize session variables
session_start();

// Define cart array to store items
$cart = [];

// Function to add item to cart
function add_to_cart($product_id, $quantity) {
    global $cart;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as &$item) {
            if ($item['product_id'] == $product_id) {
                $item['quantity'] += $quantity;
                return;
            }
        }
    }
    $cart[] = ['product_id' => $product_id, 'quantity' => $quantity];
}

// Function to remove item from cart
function remove_from_cart($product_id) {
    global $cart;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as $key => &$item) {
            if ($item['product_id'] == $product_id) {
                unset($cart[$key]);
                break;
            }
        }
    }
}

// Function to update item quantity in cart
function update_quantity($product_id, $new_quantity) {
    global $cart;
    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as &$item) {
            if ($item['product_id'] == $product_id) {
                $item['quantity'] = $new_quantity;
                break;
            }
        }
    }
}

// Function to get cart contents
function get_cart_contents() {
    global $cart;
    return $_SESSION['cart'] ?? [];
}

// Add item to cart
if (isset($_POST['add_to_cart'])) {
    add_to_cart($_POST['product_id'], $_POST['quantity']);
}

// Remove item from cart
if (isset($_POST['remove_from_cart'])) {
    remove_from_cart($_POST['product_id']);
}

// Update quantity in cart
if (isset($_POST['update_quantity'])) {
    update_quantity($_POST['product_id'], $_POST['new_quantity']);
}

// Display cart contents
$cart_contents = get_cart_contents();
?>
<div class="cart">
    <h2>Cart Contents</h2>
    <table>
        <tr>
            <th>Product ID</th>
            <th>Quantity</th>
            <th>Total Price</th>
        </tr>
        <?php foreach ($cart_contents as $item) : ?>
            <tr>
                <td><?= $item['product_id'] ?></td>
                <td><?= $item['quantity'] ?></td>
                <td>$<?= calculate_total($item['price'], $item['quantity']) ?></td>
            </tr>
        <?php endforeach; ?>
    </table>
    <p>Total: $<?= calculate_total(get_total_price()) ?></p>
</div>

<script>
    // Example JavaScript code to update cart quantities using AJAX
    document.addEventListener('DOMContentLoaded', function () {
        const updateQuantityForm = document.getElementById('update-quantity-form');
        updateQuantityForm.addEventListener('submit', function (e) {
            e.preventDefault();
            const productId = this.productId.value;
            const newQuantity = parseInt(this.newQuantity.value);
            fetch('/cart.php', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ action: 'update_quantity', product_id: productId, new_quantity: newQuantity }),
            })
                .then((response) => response.json())
                .then((data) => console.log(data))
                .catch((error) => console.error(error));
        });
    });
</script>

<form id="add-to-cart-form" method="post">
    <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
    <input type="number" name="quantity" value="1">
    <button type="submit">Add to Cart</button>
</form>

<form id="remove-from-cart-form" method="post">
    <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
    <button type="submit">Remove from Cart</button>
</form>

<form id="update-quantity-form" method="post">
    <label for="productId">Product ID:</label>
    <input type="number" id="productId" name="productId" required>
    <br>
    <label for="newQuantity">New Quantity:</label>
    <input type="number" id="newQuantity" name="newQuantity" required>
    <button type="submit">Update Quantity</button>
</form>

<?php
function calculate_total($price, $quantity) {
    return $price * $quantity;
}

function get_total_price() {
    global $cart;
    return array_sum(array_map(function ($item) {
        return $item['price'] * $item['quantity'];
    }, $cart));
}
?>


<?php

// Connect to database
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database_name";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to display products
function display_products() {
  global $conn;
  $sql = "SELECT * FROM products";
  $result = $conn->query($sql);
  while ($row = $result->fetch_assoc()) {
      echo "<li>" . $row["name"] . " - $" . $row["price"] . "</li>";
  }
}

// Function to add product to cart
function add_product_to_cart() {
  global $conn;
  if (isset($_POST["product_id"]) && isset($_POST["quantity"])) {
      $product_id = $_POST["product_id"];
      $quantity = $_POST["quantity"];

      // Check if product is already in cart
      $sql = "SELECT * FROM order_items WHERE order_id = ? AND product_id = ?";
      $stmt = $conn->prepare($sql);
      $stmt->bind_param("ii", $_SESSION["order_id"], $product_id);
      $stmt->execute();
      $result = $stmt->get_result();

      if ($result->num_rows > 0) {
          // Product is already in cart, update quantity
          while ($row = $result->fetch_assoc()) {
              $new_quantity = $row["quantity"] + $quantity;
              $sql = "UPDATE order_items SET quantity = ? WHERE id = ?";
              $stmt = $conn->prepare($sql);
              $stmt->bind_param("ii", $new_quantity, $row["id"]);
              $stmt->execute();
          }
      } else {
          // Add product to cart
          $sql = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
          $stmt = $conn->prepare($sql);
          $stmt->bind_param("iii", $_SESSION["order_id"], $product_id, $quantity);
          $stmt->execute();
      }
  }
}

// Function to place order
function place_order() {
  global $conn;
  if (isset($_POST["customer_name"]) && isset($_POST["order_date"])) {
      $customer_name = $_POST["customer_name"];
      $order_date = $_POST["order_date"];

      // Calculate total cost of order
      $sql = "SELECT SUM(price * quantity) AS total FROM products INNER JOIN order_items ON products.id = order_items.product_id WHERE order_id = ?";
      $stmt = $conn->prepare($sql);
      $stmt->bind_param("i", $_SESSION["order_id"]);
      $stmt->execute();
      $result = $stmt->get_result();

      while ($row = $result->fetch_assoc()) {
          $total = $row["total"];

          // Insert order into database
          $sql = "INSERT INTO orders (customer_name, order_date, total) VALUES (?, ?, ?)";
          $stmt = $conn->prepare($sql);
          $stmt->bind_param("sss", $customer_name, $order_date, $total);
          $stmt->execute();
      }
  }
}

// Start session
session_start();

// Display products
display_products();

?>


<?php
// Configuration file (e.g. database connection)
require_once 'config.php';

// Check if the user is logged in
if (!isset($_SESSION['username'])) {
    header('Location: login.php');
    exit;
}

// Get the product ID from the URL parameter
$product_id = $_GET['product_id'];

// Validate the product ID
if (!$product_id || !ctype_digit($product_id)) {
    header('Location: products.php');
    exit;
}

// Connect to the database
$conn = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

// Check connection
if (!$conn) {
    die("Connection failed: " . mysqli_error());
}

// Query to get the product details
$sql = "SELECT * FROM products WHERE id = '$product_id'";
$result = mysqli_query($conn, $sql);

// Check if the product exists
if (mysqli_num_rows($result) == 0) {
    header('Location: products.php');
    exit;
}

// Get the product details from the result
$product = mysqli_fetch_assoc($result);

// Query to insert a new order into the database
$sql = "INSERT INTO orders SET customer_id = '".$_SESSION['id']."', product_id = '$product_id', quantity = 1";
mysqli_query($conn, $sql);

// Update the product stock
$stock = $product['quantity'] - 1;
$sql = "UPDATE products SET quantity = '$stock' WHERE id = '$product_id'";
mysqli_query($conn, $sql);

// Display a success message
echo 'Your purchase has been successful!';
?>


<?php
// Database configuration
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database_name');

// Session configuration
session_start();

// Define the customer ID (e.g. from a login system)
$_SESSION['id'] = 1; // Replace with actual customer ID

?>


// Connect to the database
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add a product to the cart
function add_product_to_cart() {
    global $conn;
    
    if (isset($_POST["product_id"]) && isset($_POST["quantity"])) {
        $product_id = $_POST["product_id"];
        $quantity = $_POST["quantity"];
        
        // Check if product exists in database
        $query = "SELECT * FROM products WHERE id = '$product_id'";
        $result = $conn->query($query);
        
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_assoc()) {
                $product_name = $row["name"];
                $product_price = $row["price"];
                
                // Add product to order items table
                $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('', '$product_id', '$quantity')";
                $conn->query($query);
            }
        } else {
            echo "Product not found";
        }
    }
}

// Function to place an order
function place_order() {
    global $conn;
    
    if (isset($_POST["customer_name"]) && isset($_POST["order_date"])) {
        $customer_name = $_POST["customer_name"];
        $order_date = $_POST["order_date"];
        
        // Add order to orders table
        $query = "INSERT INTO orders (customer_name, order_date) VALUES ('$customer_name', '$order_date')";
        $conn->query($query);
        
        // Update order id in order items table
        $query = "UPDATE order_items SET order_id = LAST_INSERT_ID() WHERE order_id IS NULL";
        $conn->query($query);
    }
}

// Handle add product to cart form submission
if (isset($_POST["add_product"])) {
    add_product_to_cart();
}

// Handle place order form submission
if (isset($_POST["place_order"])) {
    place_order();
}


<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


<?php
class Cart {
    private $items;

    function __construct() {
        if (!isset($_SESSION['cart'])) {
            $_SESSION['cart'] = array();
        }
        $this->items = $_SESSION['cart'];
    }

    function add_item($product_id, $quantity) {
        if (array_key_exists($product_id, $this->items)) {
            $this->items[$product_id] += $quantity;
        } else {
            $this->items[$product_id] = $quantity;
        }
        $_SESSION['cart'] = $this->items;
    }

    function remove_item($product_id) {
        if (array_key_exists($product_id, $this->items)) {
            unset($this->items[$product_id]);
        }
        $_SESSION['cart'] = $this->items;
    }

    function view_cart() {
        return $this->items;
    }
}
?>


<?php
class Product {
    private $id;
    private $name;
    private $price;

    function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }

    function get_name() {
        return $this->name;
    }

    function get_price() {
        return $this->price;
    }
}

$products = array(
    new Product(1, 'Product 1', 9.99),
    new Product(2, 'Product 2', 19.99),
    new Product(3, 'Product 3', 29.99)
);
?>


<?php
function process_payment() {
    // Simulate payment processing (e.g., PayPal API call)
    echo "Payment processed successfully!";
}
?>


<?php
include 'config.php';
include 'cart.php';
include 'products.php';

if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

$cart = new Cart();

// Display products
foreach ($products as $product) {
    echo "<p>Product: " . $product->get_name() . ", Price: $" . $product->get_price() . "</p>";
    if (array_key_exists($product->id, $_SESSION['cart'])) {
        echo "Already in cart! Quantity: " . $_SESSION['cart'][$product->id];
    }
}

// Add product to cart
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    $cart->add_item($product_id, $quantity);
}

// Remove product from cart
if (isset($_GET['remove'])) {
    $product_id = $_GET['remove'];
    $cart->remove_item($product_id);
}

// View cart contents
echo "<h2>Cart Contents:</h2>";
echo "<ul>";
foreach ($cart->view_cart() as $item => $quantity) {
    echo "<li>Product: " . $products[$item]->get_name() . ", Quantity: " . $quantity . "</li>";
}
echo "</ul>";

// Process payment
if (isset($_POST['process_payment'])) {
    process_payment();
}

?>
<form action="" method="post">
    <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
    <input type="hidden" name="quantity" value="<?php echo $quantity; ?>">
    <button type="submit" name="add_to_cart">Add to Cart</button>
</form>

<form action="" method="get">
    <input type="hidden" name="remove" value="<?php echo $product_id; ?>">
    <button type="submit" name="remove_product">Remove from Cart</button>
</form>

<button type="submit" name="process_payment">Process Payment</button>


<?php

// Database connection settings
$host = 'your_host';
$dbname = 'your_database';
$username = 'your_username';
$password = 'your_password';

// Create a new database connection
$conn = new mysqli($host, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Define purchase function
function purchaseProduct() {
  global $conn;
  
  // Get user input values
  $customerName = $_POST['customer_name'];
  $productName = $_POST['product_name'];
  $quantity = (int) $_POST['quantity'];
  $price = (float) $_POST['price'];

  // Validate user input
  if (empty($customerName) || empty($productName) || !isset($quantity) || !isset($price)) {
    echo "Error: All fields are required.";
    return;
  }

  // Insert purchase data into database
  $sql = "INSERT INTO purchases (customer_name, product_name, quantity, price) VALUES (?, ?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("ssds", $customerName, $productName, $quantity, $price);

  if ($stmt->execute()) {
    echo "Purchase successful!";
  } else {
    echo "Error: Purchase failed.";
  }

  // Close the database connection
  $conn->close();
}

// Handle form submission
if (isset($_POST['submit'])) {
  purchaseProduct();
} else {
  // Display form
?>

<form action="" method="post">
  <label for="customer_name">Customer Name:</label>
  <input type="text" id="customer_name" name="customer_name"><br><br>

  <label for="product_name">Product Name:</label>
  <input type="text" id="product_name" name="product_name"><br><br>

  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity"><br><br>

  <label for="price">Price:</label>
  <input type="number" step="0.01" id="price" name="price"><br><br>

  <button type="submit" name="submit">Purchase</button>
</form>

<?php
}

?>


// config.php (database connection settings)
<?php
$host = 'localhost';
$dbname = 'store';
$user = 'root';
$password = '';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $user, $password);
} catch(PDOException $e) {
    die('ERROR: Could not connect. '. $e->getMessage());
}
?>

// user.php (user registration and login)
<?php
require 'config.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (!empty($_POST['username']) && !empty($_POST['password'])) {
        $stmt = $pdo->prepare('INSERT INTO users SET username=:username, password=:password');
        $stmt->execute([':username' => $_POST['username'], ':password' => md5($_POST['password'])]);
        echo 'User created successfully!';
    } else {
        echo 'Please enter both username and password.';
    }
} elseif ($_SERVER['REQUEST_METHOD'] === 'GET') {
    if (isset($_SESSION['user_id'])) {
        $stmt = $pdo->prepare('SELECT * FROM users WHERE id=:id');
        $stmt->execute([':id' => $_SESSION['user_id']]);
        $user = $stmt->fetch();
        echo json_encode($user);
    } else {
        echo 'Please login first.';
    }
}
?>

// product.php (product listing)
<?php
require 'config.php';

$stmt = $pdo->query('SELECT * FROM products');
$products = $stmt->fetchAll();

echo '<h1>Products</h1>';
foreach ($products as $product) {
    echo '<p>' . $product['name'] . ': $' . $product['price'] . '</p>';
}
?>

// purchase.php (purchase functionality)
<?php
require 'config.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (!empty($_SESSION['user_id'])) {
        if (isset($_POST['products'])) {
            foreach ($pdo->query('SELECT * FROM products WHERE id IN (' . implode(',', $_POST['products']) . ')') as $product) {
                $stmt = $pdo->prepare('INSERT INTO order_items SET order_id=:order_id, product_id=:product_id, quantity=:quantity');
                $stmt->execute([':order_id' => null, ':product_id' => $product['id'], ':quantity' => $_POST['products'][$product['id']]]);
            }
        } else {
            echo 'Please select products first.';
        }
    } else {
        echo 'Please login first.';
    }
}
?>


<?php

require_once 'config/db.php'; // Your database configuration file
require_once 'vendor/autoload.php'; // Stripe library autoload

use Stripe\Stripe;
use Stripe\Customer;

// Initialize Stripe library with your secret key
Stripe::setApiKey('YOUR_STRIPE_SECRET_KEY');

if (isset($_POST['submit'])) {
    // Authentication
    $username = $_POST['username'];
    $password = $_POST['password'];

    $sql = "SELECT * FROM users WHERE username = '$username' AND password_hash = '$password'";
    $result = mysqli_query($conn, $sql);

    if (mysqli_num_rows($result) > 0) {
        // Get user ID
        $user_id = mysqli_fetch_assoc($result)['id'];

        // Get products in cart
        $cart = $_SESSION['cart'] ?? [];

        // Calculate total cost
        $total = array_sum(array_map(function ($product_id, $quantity) use ($conn) {
            return ($quantity * get_product_price($product_id)) + 1.25;
        }, array_keys($cart), $cart));

        // Create order
        $order = create_order($user_id, $total);

        // Add order items
        foreach ($cart as $product_id => $quantity) {
            add_order_item($order['id'], $product_id, $quantity);
        }

        // Clear cart
        unset($_SESSION['cart']);

        // Redirect to payment page
        header('Location: payment.php?order_id=' . $order['id']);
        exit;
    } else {
        echo 'Invalid username or password';
    }
}

function get_product_price($product_id) {
    global $conn;

    $sql = "SELECT price FROM products WHERE id = '$product_id'";
    return mysqli_fetch_assoc(mysqli_query($conn, $sql))['price'];
}

function create_order($user_id, $total) {
    global $conn;

    $order = [
        'id' => null,
        'user_id' => $user_id,
        'total' => $total,
        'status' => 'pending'
    ];

    $sql = "INSERT INTO orders (user_id, total, status) VALUES ('$user_id', '$total', 'pending')";
    $result = mysqli_query($conn, $sql);

    return ['id' => mysqli_insert_id($conn)];
}

function add_order_item($order_id, $product_id, $quantity) {
    global $conn;

    $sql = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', '$quantity')";
    mysqli_query($conn, $sql);
}


<?php

require_once 'config/db.php'; // Your database configuration file
require_once 'vendor/autoload.php'; // Stripe library autoload

use Stripe\Stripe;
use Stripe\Customer;
use Stripe\Charge;

// Initialize Stripe library with your secret key
Stripe::setApiKey('YOUR_STRIPE_SECRET_KEY');

if (isset($_GET['order_id'])) {
    $order_id = $_GET['order_id'];

    // Get order details
    $sql = "SELECT * FROM orders WHERE id = '$order_id'";
    $result = mysqli_query($conn, $sql);
    $order = mysqli_fetch_assoc($result);

    // Create customer if not already exists
    $customer_id = get_customer_id($order['user_id']);

    // Create charge using Stripe library
    $charge = create_charge($customer_id, $order['total']);

    // Update order status to 'paid'
    update_order_status($order_id, 'paid');

    echo '<h1>Payment successful!</h1>';
}

function get_customer_id($user_id) {
    global $conn;

    $sql = "SELECT id FROM customers WHERE user_id = '$user_id'";
    $result = mysqli_query($conn, $sql);

    if (mysqli_num_rows($result) > 0) {
        return mysqli_fetch_assoc($result)['id'];
    } else {
        // Create new customer
        $customer = [
            'id' => null,
            'user_id' => $user_id
        ];

        $sql = "INSERT INTO customers (user_id) VALUES ('$user_id')";
        $result = mysqli_query($conn, $sql);

        return ['id' => mysqli_insert_id($conn)];
    }
}

function create_charge($customer_id, $amount) {
    global $conn;

    Stripe::setApiKey('YOUR_STRIPE_SECRET_KEY');
    Stripe\Charge::create([
        'amount' => $amount * 100,
        'currency' => 'usd',
        'source' => 'card_1234567890123456', // Replace with customer's payment source
        'description' => 'Order #'.$customer_id,
        'metadata' => ['order_id' => $customer_id]
    ]);
}

function update_order_status($order_id, $status) {
    global $conn;

    $sql = "UPDATE orders SET status = '$status' WHERE id = '$order_id'";
    mysqli_query($conn, $sql);
}


// config.php: database connection settings
<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'store');

$connection = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USERNAME, DB_PASSWORD);
?>

// index.php: the main purchase page
<?php
require_once 'config.php';

if (isset($_POST['submit'])) {
  // validate form data
  $customer_name = $_POST['customer_name'];
  $products = $_POST['products'];

  if (!empty($customer_name) && !empty($products)) {
    // create new order
    $order_id = uniqid();
    $order_date = date('Y-m-d');
    $query = "INSERT INTO orders (customer_name, order_date) VALUES (?, ?)";
    $stmt = $connection->prepare($query);
    $stmt->execute([$customer_name, $order_date]);

    // insert product into order_items table
    foreach ($products as $product_id => $quantity) {
      $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
      $stmt = $connection->prepare($query);
      $stmt->execute([$order_id, $product_id, $quantity]);
    }

    // send confirmation email
    $to = 'customer@example.com';
    $subject = 'Order Confirmation';
    $message = 'Thank you for your order!';
    mail($to, $subject, $message);

    // redirect to success page
    header('Location: success.php');
    exit;
  }
}

// display products
$query = "SELECT * FROM products";
$stmt = $connection->prepare($query);
$stmt->execute();
$products = $stmt->fetchAll();

?>

<h1>Purchase</h1>

<form method="post">
  <label>Customer Name:</label>
  <input type="text" name="customer_name"><br><br>
  <?php foreach ($products as $product): ?>
    <label><?php echo $product['name']; ?>: </label>
    <input type="number" name="products[<?php echo $product['id']; ?>]">
    <br><br>
  <?php endforeach; ?>

  <button type="submit" name="submit">Purchase</button>
</form>

<?php
?>


<h1>Order Successful!</h1>

<p>Your order has been placed successfully. Thank you for shopping with us!</p>


// Include the database connection file
require_once 'db.php';

// Function to get all products from the database
function getProducts() {
  $query = "SELECT * FROM products";
  return queryDB($query);
}

// Function to add a new order to the database
function addOrder($customerName, $orderDate, $totalCost) {
  $query = "INSERT INTO orders (customer_name, order_date, total_cost)
            VALUES ('$customerName', '$orderDate', '$totalCost')";
  return queryDB($query);
}

// Function to create a new purchase in the database
function makePurchase($productId, $quantity) {
  // Get the product details from the database
  $productQuery = "SELECT price FROM products WHERE id = '$productId'";
  $productDetails = queryDB($productQuery);

  if ($productDetails) {
    // Calculate the total cost of the purchase
    $totalCost = $productDetails[0]['price'] * $quantity;

    // Add the order to the database
    $orderDate = date('Y-m-d');
    $addOrderResult = addOrder($customerName, $orderDate, $totalCost);

    if ($addOrderResult) {
      // Update the stock level of the product in the database
      updateStockLevel($productId);
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
}

// Function to update the stock level of a product in the database
function updateStockLevel($productId) {
  $query = "UPDATE products SET stock_level = stock_level - '$quantity' WHERE id = '$productId'";
  return queryDB($query);
}

// Helper function to run a SQL query and get the result
function queryDB($query) {
  global $conn;
  try {
    $result = $conn->prepare($query);
    $result->execute();
    return $result->fetchALL(PDO::FETCH_ASSOC);
  } catch (PDOException $e) {
    die('Query failed: ' . $e->getMessage());
  }
}

// Example usage:
$customerName = 'John Doe';
$productId = 1;
$quantity = 2;

if (makePurchase($productId, $quantity)) {
  echo "Purchase successful!";
} else {
  echo "Purchase failed.";
}


<?php

// Include database connection settings
require_once 'dbconnect.php';

// Check if user is logged in
if (!isset($_SESSION['username'])) {
  header('Location: login.php');
  exit;
}

// Get product ID from URL parameter
$productId = $_GET['product_id'];

// Retrieve product details from database
$query = "SELECT * FROM products WHERE id = '$productId'";
$result = mysqli_query($conn, $query);
$product = mysqli_fetch_assoc($result);

// Check if product exists
if (empty($product)) {
  echo 'Product not found';
  exit;
}

// Get user's session data
$username = $_SESSION['username'];

// Calculate order total
$orderTotal = $product['price'];

// Insert new order into database
$query = "INSERT INTO orders (customer_name, order_date, total) VALUES ('$username', NOW(), '$orderTotal')";
mysqli_query($conn, $query);

// Get the ID of the newly created order
$orderId = mysqli_insert_id($conn);

// Update product stock levels
$query = "UPDATE products SET quantity = quantity - 1 WHERE id = '$productId'";
mysqli_query($conn, $query);

// Display a confirmation message
echo 'Your purchase has been successful!';

?>


// Define constants for cart items and session name
define('CART_ITEMS', 'cart_items');
define('CART_SESSION_NAME', 'cart_session');

// Initialize the cart array if it doesn't exist in the session
if (!isset($_SESSION[CART_SESSION_NAME])) {
    $_SESSION[CART_SESSION_NAME] = [];
}


class Product {
    public $id;
    public $name;
    public $price;

    function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }
}


function addProductToCart($productId, $quantity) {
    // Check if product exists in session
    foreach ($_SESSION[CART_SESSION_NAME] as &$item) {
        if ($item['product_id'] == $productId) {
            // Update quantity
            $item['quantity'] += $quantity;
            return true;
        }
    }

    // Add new item to cart
    $_SESSION[CART_SESSION_NAME][] = ['product_id' => $productId, 'quantity' => $quantity];

    return true;
}

function removeProductFromCart($productId) {
    // Get index of product in session
    foreach ($_SESSION[CART_SESSION_NAME] as &$item) {
        if ($item['product_id'] == $productId) {
            unset($item);
            break;
        }
    }

    // Re-index cart items to maintain correct indices
    $_SESSION[CART_SESSION_NAME] = array_values($_SESSION[CART_SESSION_NAME]);

    return true;
}

function updateQuantityInCart($productId, $newQuantity) {
    // Update quantity of product in session
    foreach ($_SESSION[CART_SESSION_NAME] as &$item) {
        if ($item['product_id'] == $productId) {
            $item['quantity'] = $newQuantity;
            return true;
        }
    }

    return false;
}

function displayCartContents() {
    // Display contents of cart
    echo "Cart Contents:
";
    foreach ($_SESSION[CART_SESSION_NAME] as $item) {
        echo "Product: " . getProductById($item['product_id'])->name . ", Quantity: " . $item['quantity'] . "
";
    }
}

function displayTotalCost() {
    // Calculate and display total cost
    $total = 0;
    foreach ($_SESSION[CART_SESSION_NAME] as $item) {
        $total += getProductById($item['product_id'])->price * $item['quantity'];
    }

    echo "Total Cost: $" . number_format($total, 2) . "
";
}

function displayAllProducts() {
    // Display all products
    global $db;
    $query = "SELECT * FROM products";
    $result = mysqli_query($db, $query);

    while ($product = mysqli_fetch_assoc($result)) {
        echo "Product ID: " . $product['id'] . ", Name: " . $product['name'] . ", Price: $" . number_format($product['price'], 2) . "
";
    }
}

function getProductById($productId) {
    global $db;
    $query = "SELECT * FROM products WHERE id = '$productId'";
    $result = mysqli_query($db, $query);

    return mysqli_fetch_assoc($result);
}


<?php

// Include database connection settings
require_once 'db.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
  header('Location: login.php');
  exit;
}

// Get product ID from URL parameter
$product_id = $_GET['product_id'];

// Validate product ID
if (!$product_id) {
  die('Invalid product ID');
}

// Get product details from database
$query = "SELECT * FROM products WHERE id = :product_id";
$stmt = $db->prepare($query);
$stmt->bindParam(':product_id', $product_id);
$stmt->execute();
$product = $stmt->fetch();

// Check if product exists
if (!$product) {
  die('Product not found');
}

// Get user details from database
$user_id = $_SESSION['user_id'];
$query = "SELECT * FROM users WHERE id = :user_id";
$stmt = $db->prepare($query);
$stmt->bindParam(':user_id', $user_id);
$stmt->execute();
$user = $stmt->fetch();

// Calculate total cost
$total = $product['price'] * 1;

// Insert order into database
$query = "INSERT INTO orders (user_id, order_date, total) VALUES (:user_id, NOW(), :total)";
$stmt = $db->prepare($query);
$stmt->bindParam(':user_id', $user_id);
$stmt->bindParam(':total', $total);
$stmt->execute();
$order_id = $db->lastInsertId();

// Insert order item into database
$query = "INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (:order_id, :product_id, 1, :price)";
$stmt = $db->prepare($query);
$stmt->bindParam(':order_id', $order_id);
$stmt->bindParam(':product_id', $product_id);
$stmt->bindParam(':price', $total);
$stmt->execute();

// Display success message
echo 'Order placed successfully!';
echo '<pre>';
print_r($_SESSION);

?>


<?php

require_once 'purchase.php';

?>

<form action="purchase.php" method="get">
  <input type="hidden" name="product_id" value="<?php echo $product['id']; ?>">
  <button type="submit">Place Order</button>
</form>


<?php
// include database connection file
require_once 'db_connection.php';

if (isset($_POST['register'])) {
    // register user
    $name = $_POST['name'];
    $email = $_POST['email'];
    $password = password_hash($_POST['password'], PASSWORD_DEFAULT);
    
    $query = "INSERT INTO users (name, email, password) VALUES (:name, :email, :password)";
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':name', $name);
    $stmt->bindParam(':email', $email);
    $stmt->bindParam(':password', $password);
    $stmt->execute();
    
    echo "User registered successfully!";
}

if (isset($_POST['login'])) {
    // login user
    $email = $_POST['email'];
    $password = $_POST['password'];
    
    $query = "SELECT * FROM users WHERE email = :email AND password = :password";
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':email', $email);
    $stmt->bindParam(':password', $password);
    $stmt->execute();
    
    if ($stmt->rowCount() > 0) {
        echo "Logged in successfully!";
    } else {
        echo "Invalid email or password";
    }
}
?>

<form method="post">
    <input type="text" name="name" placeholder="Name">
    <input type="email" name="email" placeholder="Email">
    <input type="password" name="password" placeholder="Password">
    <button type="submit" name="register">Register</button>
</form>

<form method="post">
    <input type="text" name="email" placeholder="Email">
    <input type="password" name="password" placeholder="Password">
    <button type="submit" name="login">Login</button>
</form>


<?php
// include database connection file
require_once 'db_connection.php';

if (isset($_SESSION['user_id'])) {
    // get cart contents for current user
    $query = "SELECT * FROM cart WHERE user_id = :user_id";
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->execute();
    
    if ($stmt->rowCount() > 0) {
        while ($row = $stmt->fetch()) {
            echo $row['product_name'] . " x " . $row['quantity'];
        }
    } else {
        echo "Cart is empty";
    }
} else {
    echo "Please login to view cart contents";
}
?>


<?php
// include database connection file
require_once 'db_connection.php';

if (isset($_POST['add_to_cart'])) {
    // add product to cart
    $product_id = $_POST['product_id'];
    $user_id = $_SESSION['user_id'];
    
    $query = "INSERT INTO cart (user_id, product_id, quantity) VALUES (:user_id, :product_id, 1)";
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    
    echo "Product added to cart successfully!";
}

// display products
$query = "SELECT * FROM products";
$stmt = $pdo->query($query);

while ($row = $stmt->fetch()) {
    echo "<button type='submit' name='add_to_cart' value='" . $row['id'] ."'>" . $row['name'] . "</button>";
}
?>


<?php
// include database connection file
require_once 'db_connection.php';

if (isset($_POST['make_purchase'])) {
    // make purchase
    $cart_contents = $_SESSION['cart_contents'];
    
    foreach ($cart_contents as $product_id => $quantity) {
        $query = "UPDATE cart SET quantity = :quantity WHERE product_id = :product_id AND user_id = :user_id";
        $stmt = $pdo->prepare($query);
        $stmt->bindParam(':quantity', $quantity);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':user_id', $_SESSION['user_id']);
        $stmt->execute();
    }
    
    echo "Purchase made successfully!";
}

// display cart contents
if (isset($_SESSION['cart_contents'])) {
    echo "<form method='post'>";
    foreach ($_SESSION['cart_contents'] as $product_id => $quantity) {
        echo $product_id . " x " . $quantity;
    }
    echo "<button type='submit' name='make_purchase'>Make Purchase</button>";
    echo "</form>";
} else {
    echo "No items in cart";
}
?>


<?php
$pdo = new PDO('mysql:host=localhost;dbname=ecommerce', 'username', 'password');
?>


<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

$mysqli = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($mysqli->connect_errno) {
    die("Connection failed: " . $mysqli->connect_error);
}


<?php

function authenticateUser($username, $password) {
    global $mysqli;
    
    $query = "SELECT * FROM users WHERE username = '$username'";
    $result = $mysqli->query($query);
    
    if ($result->num_rows > 0) {
        $user = $result->fetch_assoc();
        
        if (password_verify($password, $user['password'])) {
            return true;
        } else {
            echo "Incorrect password";
        }
    } else {
        echo "User not found";
    }
    
    return false;
}

function purchaseProduct($productId, $quantity) {
    global $mysqli;
    
    // Check if product exists
    $query = "SELECT * FROM products WHERE id = '$productId'";
    $result = $mysqli->query($query);
    
    if ($result->num_rows > 0) {
        $product = $result->fetch_assoc();
        
        // Calculate total price
        $totalPrice = $product['price'] * $quantity;
        
        // Insert order into database
        $query = "INSERT INTO orders (user_id, order_date, total) VALUES ('1', NOW(), '$totalPrice')";
        $mysqli->query($query);
        
        // Update product quantity in stock
        $query = "UPDATE products SET quantity_in_stock = quantity_in_stock - '$quantity' WHERE id = '$productId'";
        $mysqli->query($query);
        
        echo "Purchase successful";
    } else {
        echo "Product not found";
    }
}

function login() {
    global $mysqli;
    
    if (isset($_POST['username']) && isset($_POST['password'])) {
        $username = $_POST['username'];
        $password = $_POST['password'];
        
        if (authenticateUser($username, $password)) {
            echo "Login successful";
        }
    } else {
        echo "Invalid login credentials";
    }
}

function purchase() {
    global $mysqli;
    
    if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
        $productId = $_POST['product_id'];
        $quantity = $_POST['quantity'];
        
        purchaseProduct($productId, $quantity);
    } else {
        echo "Invalid product or quantity";
    }
}

?>


<?php
include 'config.php';
include 'functions.php';

if (isset($_POST['login'])) {
    login();
} elseif (isset($_POST['purchase'])) {
    purchase();
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Product</title>
</head>
<body>

<form action="" method="post">
    <input type="text" name="username" placeholder="Username">
    <br>
    <input type="password" name="password" placeholder="Password">
    <br>
    <button type="submit" name="login">Login</button>
</form>

<br>

<form action="" method="post">
    <select name="product_id">
        <?php
            $query = "SELECT * FROM products";
            $result = $mysqli->query($query);
            
            while ($row = $result->fetch_assoc()) {
                echo '<option value="' . $row['id'] . '">' . $row['name'] . '</option>';
            }
        ?>
    </select>
    <br>
    <input type="number" name="quantity" placeholder="Quantity">
    <br>
    <button type="submit" name="purchase">Purchase</button>
</form>

</body>
</html>


<?php

// Configuration
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add order
function add_order($user_id, $products) {
    global $conn;
    
    // Get total amount of the order
    $total = 0;
    foreach ($products as $product) {
        $total += $product['price'] * $product['quantity'];
    }
    
    // Insert new order into database
    $query = "INSERT INTO orders (user_id, order_date, total) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("iis", $user_id, date('Y-m-d H:i:s'), $total);
    $stmt->execute();
    
    // Get the id of the new order
    $order_id = $conn->insert_id;
    
    // Insert order items into database
    foreach ($products as $product) {
        $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("iii", $order_id, $product['id'], $product['quantity']);
        $stmt->execute();
    }
    
    // Return the id of the new order
    return $order_id;
}

// Function to process payment
function process_payment($order_id) {
    global $conn;
    
    // Your payment processing code here (e.g. Stripe, PayPal)
    // For example:
    echo "Processing payment for order #{$order_id}...";
    sleep(2); // Simulate a 2-second delay
    echo "Payment processed successfully!";
}

// Function to display order summary
function display_order_summary($order_id) {
    global $conn;
    
    // Get the products in the order
    $query = "SELECT oi.product_id, p.name, oi.quantity FROM order_items oi JOIN products p ON oi.product_id = p.id WHERE oi.order_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $order_id);
    $stmt->execute();
    
    // Display the order summary
    echo "Order Summary for Order #{$order_id}:";
    while ($row = $stmt->get_result()->fetch_assoc()) {
        echo "<p>Product: {$row['name']} (x{$row['quantity']})</p>";
    }
}

// Example usage:
$user_id = 1;
$products = array(
    array('id' => 1, 'price' => 19.99, 'quantity' => 2),
    array('id' => 3, 'price' => 9.99, 'quantity' => 1)
);

$order_id = add_order($user_id, $products);
display_order_summary($order_id);
process_payment($order_id);

?>


<?php
// Connect to database
$conn = mysqli_connect("localhost", "username", "password", "database");

if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Get session variables
session_start();

// Retrieve cart items from session
$cart_items = $_SESSION['cart'];

if (!isset($cart_items)) {
    $cart_items = array();
}

// Process payment (e.g. Stripe, PayPal)
if (isset($_POST['submit'])) {
    // Payment processing code goes here
    // For example, using Stripe API:
    require_once 'stripe-php/lib/Stripe.php';
    Stripe::setApiKey('YOUR_STRIPE_API_KEY');
    $token = $_POST['stripeToken'];
    $charge = Stripe_Charge::create(array(
        "amount" => 1000,
        "currency" => "usd",
        "source" => $token
    ));
}

// Display cart items and payment form
?>

<!DOCTYPE html>
<html>
<head>
    <title>Cart</title>
</head>
<body>

<h1>Cart</h1>

<ul>
<?php foreach ($cart_items as $item) { ?>
    <li><?php echo $item['name']; ?> x <?php echo $item['quantity']; ?></li>
<?php } ?>
</ul>

<form action="" method="post">
    <!-- Payment form fields -->
    <input type="hidden" name="stripeToken" value="<?php echo $_POST['stripeToken']; ?>">
    <button type="submit" name="submit">Pay Now!</button>
</form>

<?php
// Close database connection
mysqli_close($conn);
?>
</body>
</html>


<?php
// Connect to database
$conn = mysqli_connect("localhost", "username", "password", "database");

if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Get session variables
session_start();

// Display products and add-to-cart form
?>

<!DOCTYPE html>
<html>
<head>
    <title>Products</title>
</head>
<body>

<h1>Products</h1>

<ul>
<?php
// Retrieve products from database
$query = "SELECT * FROM products";
$result = mysqli_query($conn, $query);

if (mysqli_num_rows($result) > 0) {
    while ($row = mysqli_fetch_assoc($result)) {
        ?>
        <li>
            <?php echo $row['name']; ?> (<?php echo $row['price']; ?>)
            <form action="" method="post">
                <input type="hidden" name="product_id" value="<?php echo $row['id']; ?>">
                <button type="submit" name="add_to_cart">Add to Cart</button>
            </form>
        </li>
        <?php
    }
}
?>
</ul>

<?php
// Close database connection
mysqli_close($conn);
?>
</body>
</html>


if (isset($_POST['add_to_cart'])) {
    // Get product ID and quantity from form data
    $product_id = $_POST['product_id'];
    $quantity = 1;

    // Check if product is already in cart
    foreach ($cart_items as &$item) {
        if ($item['id'] == $product_id) {
            $item['quantity'] += 1;
            break;
        }
    }

    // If not, add new item to cart
    if (!isset($item)) {
        array_push($cart_items, array(
            'id' => $product_id,
            'name' => $_POST['product_name'],
            'price' => $_POST['product_price'],
            'quantity' => 1
        ));
    }

    // Update session cart items
    $_SESSION['cart'] = $cart_items;
}

// Display payment form
?>

<!-- Payment form fields -->
<form action="" method="post">
    <!-- Stripe token input field -->
    <input type="hidden" name="stripeToken" id="stripe-token" />
    <!-- Product price and total cost display -->
    <p>Subtotal: <?php echo $cart_subtotal; ?></p>
    <button type="submit">Pay Now!</button>
</form>

<?php
// Close database connection
mysqli_close($conn);
?>


// config.php

define('DB_HOST', 'localhost');
define('DB_USERNAME', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'store');

// Connect to database
$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


// product.php

class Product {
  private $id;
  private $name;
  private $price;

  public function __construct($id, $name, $price) {
    $this->id = $id;
    $this->name = $name;
    $this->price = $price;
  }

  public function get_id() {
    return $this->id;
  }

  public function get_name() {
    return $this->name;
  }

  public function get_price() {
    return $this->price;
  }
}


// order.php

class Order {
  private $id;
  private $customer_name;
  private $order_date;
  private $total;

  public function __construct($id, $customer_name, $order_date, $total) {
    $this->id = $id;
    $this->customer_name = $customer_name;
    $this->order_date = $order_date;
    $this->total = $total;
  }

  public function get_id() {
    return $this->id;
  }

  public function get_customer_name() {
    return $this->customer_name;
  }

  public function get_order_date() {
    return $this->order_date;
  }

  public function get_total() {
    return $this->total;
  }
}


// cart.php

class Cart {
  private $products;

  public function __construct() {
    $this->products = array();
  }

  public function add_product($product_id, $quantity) {
    if (array_key_exists($product_id, $this->products)) {
      $this->products[$product_id] += $quantity;
    } else {
      $this->products[$product_id] = $quantity;
    }
  }

  public function remove_product($product_id) {
    unset($this->products[$product_id]);
  }

  public function get_products() {
    return $this->products;
  }
}


// purchase.php

class Purchase {
  private $cart;

  public function __construct() {
    $this->cart = new Cart();
  }

  public function add_product_to_cart($product_id, $quantity) {
    $product = new Product(1, 'Product 1', 9.99);
    $this->cart->add_product($product_id, $quantity);
  }

  public function remove_product_from_cart($product_id) {
    $this->cart->remove_product($product_id);
  }

  public function get_total() {
    $total = 0;
    foreach ($this->cart->get_products() as $product_id => $quantity) {
      $product = new Product(1, 'Product 1', 9.99);
      $total += $product->get_price() * $quantity;
    }
    return $total;
  }

  public function checkout($customer_name) {
    // Create order
    $order_date = date('Y-m-d');
    $total = $this->get_total();
    $order = new Order(1, $customer_name, $order_date, $total);

    // Add order items to database
    foreach ($this->cart->get_products() as $product_id => $quantity) {
      $product = new Product($product_id, 'Product 1', 9.99);
      $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
      $stmt = $conn->prepare($query);
      $stmt->bind_param('iii', $order->get_id(), $product->get_id(), $quantity);
      $stmt->execute();
    }

    // Update database with new order
    $query = "INSERT INTO orders (customer_name, order_date, total) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param('sds', $order->get_customer_name(), $order->get_order_date(), $order->get_total());
    $stmt->execute();

    // Reset cart
    $this->cart = new Cart();
  }
}


$purchase = new Purchase();

// Add products to cart
$purchase->add_product_to_cart(1, 2);
$purchase->add_product_to_cart(2, 3);

// Checkout
$purchase->checkout('John Doe');


// config.php: database connection settings

class Purchase {
    private $db;

    function __construct() {
        // Connect to the database
        $this->db = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

        if ($this->db->connect_error) {
            die("Connection failed: " . $this->db->connect_error);
        }
    }

    // User authentication methods

    function registerUser($username, $password) {
        $query = "INSERT INTO users (username, password) VALUES (?, ?)";
        $stmt = $this->db->prepare($query);
        $stmt->bind_param("ss", $username, $password);
        return $stmt->execute();
    }

    function loginUser($username, $password) {
        $query = "SELECT * FROM users WHERE username = ?";
        $stmt = $this->db->prepare($query);
        $stmt->bind_param("s", $username);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($row = $result->fetch_assoc()) {
            // Check password
            if (password_verify($password, $row['password'])) {
                return $row;
            }
        }

        return null;
    }

    // Product catalog management methods

    function getProducts() {
        $query = "SELECT * FROM products";
        $result = $this->db->query($query);

        return $result->fetch_all(MYSQLI_ASSOC);
    }

    function getProduct($id) {
        $query = "SELECT * FROM products WHERE id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->bind_param("i", $id);
        $stmt->execute();
        $result = $stmt->get_result();

        return $row = $result->fetch_assoc();
    }

    // Order management methods

    function createOrder($userId, $productId, $quantity) {
        $query = "INSERT INTO orders (user_id, product_id, quantity) VALUES (?, ?, ?)";
        $stmt = $this->db->prepare($query);
        $stmt->bind_param("iii", $userId, $productId, $quantity);

        return $stmt->execute();
    }

    function getOrderByUser($userId) {
        $query = "SELECT * FROM orders WHERE user_id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->bind_param("i", $userId);
        $stmt->execute();
        $result = $stmt->get_result();

        return $result->fetch_all(MYSQLI_ASSOC);
    }

    // Payment processing methods

    function processPayment($orderId, $amount) {
        // Use Stripe for payment processing
        \Stripe\Stripe::setApiKey('YOUR_STRIPE_SECRET_KEY');

        try {
            $payment = \Stripe\Charge::create([
                'amount' => $amount * 100,
                'currency' => 'usd',
                'source' => 'test_card', // Replace with actual card details
                'description' => 'Test payment'
            ]);

            $query = "INSERT INTO payments (order_id, amount) VALUES (?, ?)";
            $stmt = $this->db->prepare($query);
            $stmt->bind_param("ii", $orderId, $amount);
            return $stmt->execute();
        } catch (\Stripe\Error\Base $e) {
            echo 'Payment failed: ' . $e->getMessage() . "
";
            return false;
        }
    }

    function updateOrderStatus($orderId, $status) {
        $query = "UPDATE orders SET status = ? WHERE id = ?";
        $stmt = $this->db->prepare($query);
        $stmt->bind_param("si", $status, $orderId);

        return $stmt->execute();
    }
}

// Usage example

$purchase = new Purchase();

// Register a user
$username = 'john';
$password = password_hash('password', PASSWORD_DEFAULT);
if (!$purchase->registerUser($username, $password)) {
    echo "Registration failed";
}

// Login as the user
$user = $purchase->loginUser($username, 'password');
if ($user) {
    // Get products
    $products = $purchase->getProducts();

    // Create an order for a product
    $productId = 1;
    $quantity = 2;
    if (!$purchase->createOrder($user['id'], $productId, $quantity)) {
        echo "Order creation failed";
    }

    // Get the order by user ID
    $orders = $purchase->getOrderByUser($user['id']);

    // Process payment (using Stripe)
    $orderId = 1;
    $amount = 19.99;
    if (!$purchase->processPayment($orderId, $amount)) {
        echo "Payment processing failed";
    }

    // Update order status
    if (!$purchase->updateOrderStatus($orderId, 'shipped')) {
        echo "Order status update failed";
    }
}


// db.php (database connection settings)
$host = 'localhost';
$dbname = 'mydb';
$user = 'myuser';
$password = 'mypassword';

$conn = new PDO("mysql:host=$host;dbname=$dbname", $user, $password);

// functions.php (purchase functionality)
function add_product_to_cart($product_id) {
  // check if product exists
  $stmt = $conn->prepare('SELECT * FROM products WHERE id = :id');
  $stmt->bindParam(':id', $product_id);
  $stmt->execute();
  $product = $stmt->fetch();
  
  if (!$product) {
    throw new Exception("Product not found");
  }
  
  // retrieve user's cart
  $user_cart = get_user_cart($_SESSION['user_id']);
  
  // add product to cart
  $cart_item = array(
    'product_id' => $product_id,
    'quantity' => 1
  );
  $user_cart[] = $cart_item;
  update_user_cart($_SESSION['user_id'], $user_cart);
}

function remove_product_from_cart($product_id) {
  // retrieve user's cart
  $user_cart = get_user_cart($_SESSION['user_id']);
  
  // find product in cart and remove it
  foreach ($user_cart as &$cart_item) {
    if ($cart_item['product_id'] == $product_id) {
      unset($cart_item);
      break;
    }
  }
  
  update_user_cart($_SESSION['user_id'], array_filter($user_cart));
}

function make_purchase() {
  // retrieve user's cart
  $user_cart = get_user_cart($_SESSION['user_id']);
  
  // calculate total cost of order
  $total_cost = 0;
  foreach ($user_cart as &$cart_item) {
    $product = get_product($cart_item['product_id']);
    $total_cost += $product['price'] * $cart_item['quantity'];
  }
  
  // create new order
  $order_date = date('Y-m-d H:i:s');
  $stmt = $conn->prepare('INSERT INTO orders (user_id, product_id, order_date) VALUES (:user_id, :product_id, :order_date)');
  foreach ($user_cart as &$cart_item) {
    $stmt->execute(array(
      ':user_id' => $_SESSION['user_id'],
      ':product_id' => $cart_item['product_id']
    ));
    
    // update product stock
    $product = get_product($cart_item['product_id']);
    if ($product['quantity'] > 0) {
      $new_quantity = $product['quantity'] - $cart_item['quantity'];
      $stmt = $conn->prepare('UPDATE products SET quantity = :quantity WHERE id = :id');
      $stmt->execute(array(
        ':quantity' => $new_quantity,
        ':id' => $cart_item['product_id']
      ));
    }
  }
  
  // update user's cart
  update_user_cart($_SESSION['user_id'], array());
}

function get_product($product_id) {
  $stmt = $conn->prepare('SELECT * FROM products WHERE id = :id');
  $stmt->bindParam(':id', $product_id);
  $stmt->execute();
  return $stmt->fetch();
}

function get_user_cart($user_id) {
  // retrieve user's cart
  $stmt = $conn->prepare('SELECT * FROM carts WHERE user_id = :user_id');
  $stmt->bindParam(':user_id', $user_id);
  $stmt->execute();
  return $stmt->fetchAll();
}

function update_user_cart($user_id, $cart) {
  // update user's cart
  $stmt = $conn->prepare('UPDATE carts SET cart = :cart WHERE user_id = :user_id');
  $stmt->bindParam(':cart', serialize($cart));
  $stmt->bindParam(':user_id', $user_id);
  $stmt->execute();
}

// example usage:
$_SESSION['user_id'] = 1; // set user's ID
add_product_to_cart(1); // add product to cart
make_purchase(); // make purchase


// models/Product.php

class Product {
    private $id;
    private $name;
    private $price;

    public function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }

    public static function getProducts() {
        // Retrieve products from database
        $products = array();
        $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
        $query = $db->prepare("SELECT * FROM products");
        $query->execute();
        while ($row = $query->fetch(PDO::FETCH_ASSOC)) {
            $products[] = new Product($row['id'], $row['name'], $row['price']);
        }
        return $products;
    }

    public function getId() {
        return $this->id;
    }

    public function getName() {
        return $this->name;
    }

    public function getPrice() {
        return $this->price;
    }
}


// models/Cart.php

class Cart {
    private $id;
    private $userId;

    public function __construct($id, $userId) {
        $this->id = $id;
        $this->userId = $userId;
    }

    public static function getUserCart($userId) {
        // Retrieve cart from database
        $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
        $query = $db->prepare("SELECT * FROM carts WHERE user_id = :user_id");
        $query->bindParam(':user_id', $userId);
        $query->execute();
        $cart = $query->fetch(PDO::FETCH_ASSOC);
        if ($cart) {
            return new Cart($cart['id'], $cart['user_id']);
        } else {
            // Create a new cart
            $query = $db->prepare("INSERT INTO carts (user_id) VALUES (:user_id)");
            $query->bindParam(':user_id', $userId);
            $query->execute();
            return new Cart($db->lastInsertId(), $userId);
        }
    }

    public function getId() {
        return $this->id;
    }

    public function getUserId() {
        return $this->userId;
    }
}


// controllers/Purchase.php

class Purchase {
    private $cart;

    public function __construct($userId) {
        $this->cart = Cart::getUserCart($userId);
    }

    public function addProductToCart($productId, $quantity) {
        // Retrieve product from database
        $product = Product::getProducts()[intval($productId)];
        if (!$product) {
            throw new Exception("Product not found");
        }
        // Add product to cart
        $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
        $query = $db->prepare("INSERT INTO cart_items (cart_id, product_id, quantity) VALUES (:cart_id, :product_id, :quantity)");
        $query->bindParam(':cart_id', $this->cart->getId());
        $query->bindParam(':product_id', intval($productId));
        $query->bindParam(':quantity', intval($quantity));
        $query->execute();
    }

    public function viewCart() {
        // Retrieve cart items from database
        $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
        $query = $db->prepare("SELECT * FROM cart_items WHERE cart_id = :cart_id");
        $query->bindParam(':cart_id', $this->cart->getId());
        $query->execute();
        $items = array();
        while ($row = $query->fetch(PDO::FETCH_ASSOC)) {
            $items[] = array(
                'product' => Product::getProducts()[intval($row['product_id'])],
                'quantity' => intval($row['quantity'])
            );
        }
        return $items;
    }

    public function checkout() {
        // Retrieve cart items from database
        $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
        $query = $db->prepare("SELECT * FROM cart_items WHERE cart_id = :cart_id");
        $query->bindParam(':cart_id', $this->cart->getId());
        $query->execute();
        while ($row = $query->fetch(PDO::FETCH_ASSOC)) {
            // Process payment (e.g., Stripe, PayPal)
            // ...
            // Remove item from cart
            $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
            $query = $db->prepare("DELETE FROM cart_items WHERE id = :id");
            $query->bindParam(':id', intval($row['id']));
            $query->execute();
        }
    }
}


// example.php

$userId = 1; // Replace with actual user ID
$purchase = new Purchase($userId);

// Add product to cart
$productIds = array(1, 2, 3); // Replace with actual product IDs
foreach ($productIds as $productId) {
    $purchase->addProductToCart($productId, 1);
}

// View cart
$cartItems = $purchase->viewCart();
print_r($cartItems);

// Checkout
$purchase->checkout();


<?php

// Database credentials
$dbHost = 'localhost';
$dbUsername = 'your_username';
$dbPassword = 'your_password';
$dbName = 'your_database';

// Create connection
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

?>


<?php

class Product {
  private $db;

  public function __construct() {
    require_once 'db.php';
    $this->db = $conn;
  }

  public function getAllProducts() {
    $sql = "SELECT * FROM products";
    $result = $this->db->query($sql);
    return $result->fetch_all(MYSQLI_ASSOC);
  }
}


<?php

class User {
  private $db;

  public function __construct() {
    require_once 'db.php';
    $this->db = $conn;
  }

  public function getAllUsers() {
    $sql = "SELECT * FROM users";
    $result = $this->db->query($sql);
    return $result->fetch_all(MYSQLI_ASSOC);
  }
}


<?php

class Purchase {
  private $product;
  private $user;

  public function __construct() {
    require_once 'product.php';
    $this->product = new Product();
    require_once 'user.php';
    $this->user = new User();
  }

  public function index() {
    // Display all products
    $products = $this->product->getAllProducts();
    return view('purchase', array('products' => $products));
  }

  public function store($productId, $userId) {
    // Insert purchase into database
    $sql = "INSERT INTO purchases (product_id, user_id) VALUES (?, ?)";
    $stmt = $this->db->prepare($sql);
    $stmt->bind_param("ii", $productId, $userId);
    $stmt->execute();
  }
}


<?php

// Display all products
$products = array(
  array('id' => 1, 'name' => 'Product A', 'price' => 9.99),
  array('id' => 2, 'name' => 'Product B', 'price' => 19.99)
);

?>
<h1>Purchase</h1>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <select name="product_id">
    <?php foreach ($products as $product) { ?>
      <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?></option>
    <?php } ?>
  </select>

  <input type="submit" name="buy" value="Buy">
</form>

<?php if (isset($_POST['buy'])) { ?>
  <?php
    require_once 'purchase.php';
    $purchase = new Purchase();
    $purchase->store($product_id, $_SESSION['user_id']);
  ?>
  <p>Purchase successful!</p>
<?php } ?>


<?php

require_once 'db.php';

$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);

if ($uri == '/') {
  require_once 'home.php';
} elseif ($uri == '/purchase') {
  require_once 'purchase.php';
}


<?php
// Check if the user is logged in (optional)
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

// Get the products from the database (replace with your own database connection code)
$products = array(
    array('id' => 1, 'name' => 'Product 1', 'price' => 9.99),
    array('id' => 2, 'name' => 'Product 2', 'price' => 19.99),
    array('id' => 3, 'name' => 'Product 3', 'price' => 29.99)
);

// Get the cart contents from the session
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Display the cart contents
echo '<h2>Your Cart</h2>';
echo '<table>';
echo '<tr><th>Product Name</th><th>Price</th><th>Quantity</th></tr>';

foreach ($_SESSION['cart'] as $product_id => $quantity) {
    foreach ($products as $product) {
        if ($product['id'] == $product_id) {
            echo '<tr>';
            echo '<td>' . $product['name'] . '</td>';
            echo '<td>$' . number_format($product['price'], 2) . '</td>';
            echo '<td>' . $quantity . '</td>';
            echo '</tr>';
        }
    }
}

echo '</table>';

// Display the total cost
echo '<p>Total: $';
echo number_format(calculate_total($_SESSION['cart']), 2);
echo '</p>';

// Form to add products to cart
echo '<h2>Add Products to Cart</h2>';
echo '<form method="post">';
foreach ($products as $product) {
    echo '<input type="checkbox" name="add_' . $product['id'] . '" value="' . $product['id'] . '"> ' . $product['name'] . ' - $' . number_format($product['price'], 2) . '</br>';
}
echo '<button type="submit">Add to Cart</button>';
echo '</form>';

// Function to calculate the total cost
function calculate_total($cart_contents) {
    $total = 0;
    foreach ($cart_contents as $product_id => $quantity) {
        $product = get_product_from_database($product_id);
        if ($product['price'] !== null) {
            $total += $product['price'] * $quantity;
        }
    }
    return $total;
}

// Function to get a product from the database (replace with your own database connection code)
function get_product_from_database($id) {
    // Replace with your own database connection code
    return array('price' => 0);
}


<?php
// Get the cart contents from the session
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Add products to cart
foreach ($_POST as $key => $value) {
    if (strpos($key, 'add_') === 0) {
        $product_id = substr($key, 4);
        if (!isset($_SESSION['cart'][$product_id])) {
            $_SESSION['cart'][$product_id] = 1;
        } else {
            $_SESSION['cart'][$product_id]++;
        }
    }
}

// Redirect back to cart page
header('Location: cart.php');
exit;


<?php
session_start();

// Check if the session is empty, and if so, initialize it
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addToCart($productId, $quantity) {
    global $_SESSION;
    // Check if the product ID already exists in the cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $productId) {
            // If it does, increment the quantity
            $item['quantity'] += $quantity;
            return true; // Item was added successfully
        }
    }
    // If not, add the item to the cart with the specified quantity
    $_SESSION['cart'][] = array('id' => $productId, 'quantity' => $quantity);
    return false; // Item was added successfully
}

// Function to remove an item from the cart
function removeFromCart($productId) {
    global $_SESSION;
    foreach ($_SESSION['cart'] as $key => &$item) {
        if ($item['id'] == $productId) {
            unset($_SESSION['cart'][$key]);
            return true; // Item was removed successfully
        }
    }
    return false; // Item not found in cart
}

// Function to update the quantity of an item in the cart
function updateQuantity($productId, $newQuantity) {
    global $_SESSION;
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $productId) {
            $item['quantity'] = $newQuantity;
            return true; // Quantity updated successfully
        }
    }
    return false; // Item not found in cart
}

// Function to get the total cost of the items in the cart
function getTotalCost() {
    global $_SESSION;
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        // Assume that we have a function to get the price of an item by ID
        $price = getItemPrice($item['id']);
        $total += $price * $item['quantity'];
    }
    return $total;
}

// Function to display the contents of the cart
function displayCart() {
    global $_SESSION;
    echo '<h2>Cart Contents:</h2>';
    echo '<table border="1">';
    echo '<tr><th>Product ID</th><th>Quantity</th><th>Price</th></tr>';
    foreach ($_SESSION['cart'] as $item) {
        // Assume that we have a function to get the price of an item by ID
        $price = getItemPrice($item['id']);
        echo '<tr>';
        echo '<td>' . $item['id'] . '</td>';
        echo '<td>' . $item['quantity'] . '</th>';
        echo '<td>$' . $price * $item['quantity'] . '</td>';
        echo '</tr>';
    }
    echo '</table>';
}

// Function to get the price of an item by ID (this is a placeholder, you would need to implement this function)
function getItemPrice($id) {
    // For demonstration purposes only
    return 10.99;
}
?>


<?php require_once 'cart.php'; ?>

<!DOCTYPE html>
<html>
<head>
    <title>Cart Example</title>
</head>
<body>

<form action="" method="post">
    <input type="hidden" name="productId" value="<?php echo $productId; ?>">
    <input type="number" name="quantity" value="1">
    <button type="submit">Add to Cart</button>
</form>

<?php
if (isset($_POST['productId'])) {
    addToCart($_POST['productId'], $_POST['quantity']);
}
?>

<a href="cart.php">View Cart</a>

<?php if (isset($_SESSION['cart'])) { ?>
    <h2>Cart Contents:</h2>
    <table border="1">
        <?php foreach ($_SESSION['cart'] as $item) { ?>
            <tr>
                <td><?php echo $item['id']; ?></td>
                <td><?php echo $item['quantity']; ?></td>
                <td>$<?php echo getItemPrice($item['id']) * $item['quantity']; ?></td>
            </tr>
        <?php } ?>
    </table>

    <p>Total Cost: $<?php echo getTotalCost(); ?></p>

    <form action="" method="post">
        <input type="hidden" name="productId" value="<?php echo $productId; ?>">
        <button type="submit">Remove from Cart</button>
    </form>

    <?php foreach ($_SESSION['cart'] as $key => $item) { ?>
        <form action="" method="post">
            <input type="hidden" name="productId" value="<?php echo $item['id']; ?>">
            <input type="number" name="quantity" value="<?php echo $item['quantity']; ?>">
            <button type="submit">Update Quantity</button>
        </form>
    <?php } ?>
<?php } ?>

</body>
</html>


<?php

// Database connection settings
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "mydb";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product to cart
function addProductToCart($product_id, $user_id) {
    global $conn;
    
    // Check if product exists in database
    $sql = "SELECT * FROM products WHERE id = '$product_id'";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $price = $row['price'];
            
            // Get user's cart
            $sql = "SELECT * FROM orders WHERE user_id = '$user_id'";
            $cart_result = $conn->query($sql);
            
            if ($cart_result->num_rows > 0) {
                while($cart_row = $cart_result->fetch_assoc()) {
                    $total += $price;
                    
                    // Update order total
                    $sql = "UPDATE orders SET total = '$total' WHERE id = '$cart_row[id]'";
                    $conn->query($sql);
                }
            } else {
                // Create new cart for user
                $sql = "INSERT INTO orders (user_id, product_id, total) VALUES ('$user_id', '$product_id', '$price')";
                $conn->query($sql);
            }
        }
    }
}

// Function to checkout
function checkout() {
    global $conn;
    
    // Get user's cart
    $sql = "SELECT * FROM orders WHERE user_id = '".$_SESSION['user_id']."'";
    $result = $conn->query($sql);
    
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            $total += $row['total'];
            
            // Update order status
            $sql = "UPDATE orders SET status = 'pending' WHERE id = '$row[id]'";
            $conn->query($sql);
        }
        
        // Clear cart
        $sql = "DELETE FROM orders WHERE user_id = '".$_SESSION['user_id']."'";
        $conn->query($sql);
    }
}

// Function to purchase product
function purchaseProduct() {
    global $conn;
    
    // Get product ID from session
    $product_id = $_SESSION['product_id'];
    
    // Add product to cart
    addProductToCart($product_id, $_SESSION['user_id']);
    
    // Checkout
    checkout();
}

// Connect to database and start session
session_start();
$conn = new mysqli($servername, $username, $password, $dbname);

if (isset($_POST['purchase'])) {
    purchaseProduct();
}

?>


<?php

// Database Configuration
$db_host = "YOUR_DB_HOST";
$db_username = "YOUR_DB_USERNAME";
$db_password = "YOUR_DB_PASSWORD";
$db_name = "YOUR_DB_NAME";

try {
    // Create a PDO instance with the database settings
    $pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_username, $db_password);
    
    // Set up the error mode
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}

// Check if POST is set and contains a purchase form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {

    // Validate the input fields
    $errors = [];

    // Customer name validation
    if (empty($_POST['customer_name'])) {
        $errors[] = "Please enter your customer name.";
    }

    // Email address validation
    if (!filter_var($_POST['email'], FILTER_VALIDATE_EMAIL)) {
        $errors[] = "Please enter a valid email address.";
    } else {
        $_SESSION['email'] = $_POST['email'];
    }

    // Order total validation (assuming a decimal field for the price)
    if (empty($_POST['order_total'])) {
        $errors[] = "Please enter the order total.";
    } else {
        try {
            $total = floatval($_POST['order_total']);
            if ($total < 0) {
                $errors[] = "Order total cannot be less than zero.";
            }
        } catch (Exception $e) {
            $errors[] = "Invalid order total. Please enter a number.";
        }
    }

    // If there are no errors, proceed with inserting the data into the database
    if (empty($errors)) {

        try {
            // Prepare and execute the insert statement
            $stmt = $pdo->prepare("INSERT INTO orders (customer_name, email, order_date, total) VALUES (:name, :email, NOW(), :total)");
            $stmt->execute([
                ":name" => $_POST['customer_name'],
                ":email" => $_SESSION['email'],
                ":total" => floatval($_POST['order_total'])
            ]);

            // Display a success message
            echo "Order placed successfully!";

        } catch (PDOException $e) {
            echo "Error placing order: " . $e->getMessage();
        }

    } else {

        // If there are errors, display them to the user
        $error_message = "";
        foreach ($errors as $error) {
            $error_message .= "$error<br>";
        }
        echo "<p style='color:red'>$error_message</p>";

    }

}

?>

<!-- HTML form for customer input -->
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="POST">
    <label>Customer Name:</label>
    <input type="text" name="customer_name"><br><br>

    <label>Email Address:</label>
    <input type="email" name="email"><br><br>

    <label>Order Total:</label>
    <input type="number" step="0.01" name="order_total"><br><br>

    <button type="submit">Place Order</button>
</form>


// Include database connection file
require_once 'db.php';

// Define a function to handle purchases
function makePurchase() {
  global $db;

  // Check if user is logged in
  if (!isset($_SESSION['user_id'])) {
    echo "Please log in first.";
    return false;
  }

  // Get product ID from request
  $productId = $_REQUEST['product_id'];

  // Validate product ID
  $query = "SELECT * FROM products WHERE id = '$productId'";
  $result = mysqli_query($db, $query);
  if (!$result || mysqli_num_rows($result) == 0) {
    echo "Invalid product.";
    return false;
  }

  // Get user's current balance
  $user_id = $_SESSION['user_id'];
  $query = "SELECT balance FROM users WHERE id = '$user_id'";
  $result = mysqli_query($db, $query);
  if (!$result || !mysqli_num_rows($result)) {
    echo "Error retrieving user balance.";
    return false;
  }
  $balance = mysqli_fetch_assoc($result)['balance'];

  // Check if user has sufficient balance
  if ($balance < $_REQUEST['price']) {
    echo "Insufficient funds.";
    return false;
  }

  // Update user's balance and create new order
  $query = "UPDATE users SET balance = balance - ".$_REQUEST['price']." WHERE id = '$user_id'";
  mysqli_query($db, $query);

  $query = "INSERT INTO orders (user_id, total) VALUES ('$user_id', ".$_REQUEST['price'].")";
  mysqli_query($db, $query);

  // Update product quantity
  $query = "UPDATE products SET quantity = quantity - 1 WHERE id = '$productId'";
  mysqli_query($db, $query);

  echo "Purchase successful!";
}

// Handle request to make a purchase
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  makePurchase();
}


<?php
// Database configuration
define('DB_HOST', 'your_host');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
function connect() {
    global $conn;
    $conn = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
}
?>


<?php
class Product {
    private $id;
    private $name;
    private $price;

    function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }

    // Getters
    function getId() { return $this->id; }
    function getName() { return $this->name; }
    function getPrice() { return $this->price; }
}

// Function to get all products from database
function getAllProducts() {
    connect();
    $query = "SELECT * FROM products";
    $result = mysqli_query($conn, $query);
    $products = array();

    while ($row = mysqli_fetch_assoc($result)) {
        $product = new Product($row['id'], $row['name'], $row['price']);
        $products[] = $product;
    }

    return $products;
}
?>


<?php
class CartItem {
    private $productId;
    private $quantity;

    function __construct($productId, $quantity) {
        $this->productId = $productId;
        $this->quantity = $quantity;
    }

    // Getters
    function getProductId() { return $this->productId; }
    function getQuantity() { return $this->quantity; }
}

class Cart {
    private $items;

    function __construct() {
        $this->items = array();
    }

    // Add item to cart
    function addItem($productId, $quantity) {
        if (array_key_exists($productId, $this->items)) {
            $this->items[$productId] += $quantity;
        } else {
            $this->items[$productId] = $quantity;
        }
    }

    // View items in cart
    function viewItems() {
        return $this->items;
    }
}
?>


<?php
class Purchase {
    private $cart;

    function __construct() {
        $this->cart = new Cart();
    }

    // Add product to cart
    function addProductToCart($productId, $quantity) {
        $product = getProductById($productId);
        if ($product) {
            $this->cart->addItem($productId, $quantity);
            updateInventory($productId, -$quantity * $product->getPrice());
        }
    }

    // View shopping cart
    function viewShoppingCart() {
        return $this->cart->viewItems();
    }

    // Make purchase
    function makePurchase() {
        foreach ($this->cart->viewItems() as $itemId => $quantity) {
            echo "Removing $quantity x {$product->getName()} from cart...
";
        }
        $this->cart = new Cart(); // Clear cart after purchase
    }
}

// Helper functions

function getProductById($id) {
    global $products;
    foreach ($products as $product) {
        if ($product->getId() == $id) {
            return $product;
        }
    }
    return null; // Return null if product not found
}

function updateInventory($productId, $quantity) {
    connect();
    $query = "UPDATE products SET stock = stock + ? WHERE id = ?";
    mysqli_query($conn, $query, array($quantity, $productId));
}
?>


// Create products
$products = array(
    new Product(1, 'Product 1', 10.99),
    new Product(2, 'Product 2', 9.99),
    new Product(3, 'Product 3', 12.99)
);

// Add products to cart
$purchase = new Purchase();
$purchase->addProductToCart(1, 2);
$purchase->addProductToCart(2, 3);

// View shopping cart
print_r($purchase->viewShoppingCart());

// Make purchase
$purchase->makePurchase();


// database configuration
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'store');

class Product {
    private $id;
    private $name;
    private $price;

    public function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }

    public static function getAll() {
        // database connection
        $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        $sql = "SELECT * FROM products";
        $result = $conn->query($sql);

        $products = array();
        while ($row = $result->fetch_assoc()) {
            $product = new Product($row['id'], $row['name'], $row['price']);
            $products[] = $product;
        }

        return $products;
    }

    public function addProduct() {
        // database connection
        $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        $sql = "INSERT INTO products (name, price) VALUES (?, ?)";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("ss", $this->name, $this->price);

        if ($stmt->execute()) {
            echo "Product added successfully!";
        } else {
            echo "Error adding product: " . $conn->error;
        }
    }

    public function makePurchase() {
        // database connection
        $conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }

        $sql = "INSERT INTO orders (product_id, customer_name, order_date, total_cost) VALUES (?, ?, NOW(), ?)";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("si", $this->id, $_POST['customer_name'], $this->price);

        if ($stmt->execute()) {
            echo "Order placed successfully!";
        } else {
            echo "Error placing order: " . $conn->error;
        }
    }
}

// create a new product
$product = new Product(0, 'New Product', 10.99);
$product->addProduct();

// view all products
$products = Product::getAll();
foreach ($products as $product) {
    echo $product->name . ' - ' . $product->price . '<br>';
}

// make a purchase
$product->id = 1;
$product->makePurchase();


<?php

// Database connection settings
$db_host = 'localhost';
$db_username = 'root';
$db_password = '';
$db_name = 'store';

// Connect to database
$conn = mysqli_connect($db_host, $db_username, $db_password, $db_name);

if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

function login() {
    global $conn;
    
    if (isset($_POST['username']) && isset($_POST['password'])) {
        $username = $_POST['username'];
        $password = md5($_POST['password']);
        
        $query = "SELECT * FROM users WHERE username='$username' AND password='$password'";
        $result = mysqli_query($conn, $query);
        
        if (mysqli_num_rows($result) > 0) {
            session_start();
            $_SESSION['username'] = $username;
            header('Location: index.php');
            exit;
        } else {
            echo 'Invalid username or password';
        }
    }
}

function logout() {
    global $conn;
    
    session_destroy();
    header('Location: index.php');
    exit;
}

function display_cart() {
    global $conn;
    
    if (isset($_SESSION['username'])) {
        $user_id = $_SESSION['username'];
        
        $query = "SELECT * FROM order_items WHERE user_id='$user_id'";
        $result = mysqli_query($conn, $query);
        
        echo '<table border="1">';
        echo '<tr><th>Product Name</th><th>Quantity</th><th>Price</th></tr>';
        
        while ($row = mysqli_fetch_assoc($result)) {
            $product_id = $row['product_id'];
            $quantity = $row['quantity'];
            
            $query = "SELECT name, price FROM products WHERE id='$product_id'";
            $result2 = mysqli_query($conn, $query);
            
            $row2 = mysqli_fetch_assoc($result2);
            echo '<tr><td>' . $row2['name'] . '</td><td>' . $quantity . '</td><td>$' . $row2['price'] * $quantity . '</td></tr>';
        }
        
        echo '</table>';
    } else {
        echo 'You are not logged in';
    }
}

function add_to_cart() {
    global $conn;
    
    if (isset($_SESSION['username'])) {
        $user_id = $_SESSION['username'];
        $product_id = $_POST['product_id'];
        $quantity = $_POST['quantity'];
        
        $query = "SELECT * FROM order_items WHERE user_id='$user_id' AND product_id='$product_id'";
        $result = mysqli_query($conn, $query);
        
        if (mysqli_num_rows($result) > 0) {
            // Update quantity
            $row = mysqli_fetch_assoc($result);
            $new_quantity = $row['quantity'] + $quantity;
            
            $query = "UPDATE order_items SET quantity='$new_quantity' WHERE id='" . $row['id'] . "'";
        } else {
            // Insert new item
            $query = "INSERT INTO order_items (user_id, product_id, quantity) VALUES ('$user_id', '$product_id', '$quantity')";
        }
        
        mysqli_query($conn, $query);
    }
}

function checkout() {
    global $conn;
    
    if (isset($_SESSION['username'])) {
        $user_id = $_SESSION['username'];
        
        // Get cart contents
        $query = "SELECT * FROM order_items WHERE user_id='$user_id'";
        $result = mysqli_query($conn, $query);
        
        while ($row = mysqli_fetch_assoc($result)) {
            $product_id = $row['product_id'];
            $quantity = $row['quantity'];
            
            // Update stock
            $query = "UPDATE products SET stock=stock-$quantity WHERE id='$product_id'";
            mysqli_query($conn, $query);
        }
        
        // Clear cart
        $query = "DELETE FROM order_items WHERE user_id='$user_id'";
        mysqli_query($conn, $query);
    }
}

if (isset($_POST['action']) && $_POST['action'] == 'login') {
    login();
} elseif (isset($_POST['action']) && $_POST['action'] == 'logout') {
    logout();
} elseif (isset($_GET['action']) && $_GET['action'] == 'add_to_cart') {
    add_to_cart();
} elseif (isset($_POST['action']) && $_POST['action'] == 'checkout') {
    checkout();
}

display_cart();

?>


<!DOCTYPE html>
<html>
<head>
    <title>Store</title>
</head>
<body>

<h1>Welcome to our store!</h1>

<form method="post">
    <input type="hidden" name="action" value="login">
    <label>Username:</label>
    <input type="text" name="username"><br><br>
    <label>Password:</label>
    <input type="password" name="password"><br><br>
    <input type="submit" value="Login">
</form>

<form method="post">
    <input type="hidden" name="action" value="logout">
    <input type="submit" value="Logout">
</form>

<h1>Cart:</h1>

<table border="1">
    <tr><th>Product Name</th><th>Quantity</th><th>Price</th></tr>
    
<?php
    
    if (isset($_SESSION['username'])) {
        $user_id = $_SESSION['username'];
        
        $query = "SELECT * FROM order_items WHERE user_id='$user_id'";
        $result = mysqli_query($conn, $query);
        
        while ($row = mysqli_fetch_assoc($result)) {
            $product_id = $row['product_id'];
            $quantity = $row['quantity'];
            
            $query = "SELECT name, price FROM products WHERE id='$product_id'";
            $result2 = mysqli_query($conn, $query);
            
            $row2 = mysqli_fetch_assoc($result2);
            echo '<tr><td>' . $row2['name'] . '</td><td>' . $quantity . '</td><td>$' . $row2['price'] * $quantity . '</td></tr>';
        }
    } else {
        echo 'You are not logged in';
    }
    
?>
</table>

<form method="post">
    <input type="hidden" name="action" value="add_to_cart">
    <label>Product ID:</label>
    <input type="text" name="product_id"><br><br>
    <label>Quantity:</label>
    <input type="text" name="quantity"><br><br>
    <input type="submit" value="Add to Cart">
</form>

<form method="post">
    <input type="hidden" name="action" value="checkout">
    <input type="submit" value="Checkout">
</form>

</body>
</html>


// config.php
<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

$connection = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}
?>

// index.php
<?php
require_once 'config.php';

// display products
$query = "SELECT * FROM products";
$results = $connection->query($query);

echo "<h1>Products</h1>";
echo "<ul>";

while ($row = $results->fetch_assoc()) {
    echo "<li><a href='add_to_cart.php?id=" . $row['id'] . "'>" . $row['name'] . "</a></li>";
}

echo "</ul>";

// add to cart
if (isset($_GET['id'])) {
    $product_id = $_GET['id'];
    $cart[] = array('id' => $product_id, 'quantity' => 1);
    session_start();
    $_SESSION['cart'] = $cart;
    echo "Added " . $_SESSION['cart'][0]['name'] . " to cart!";
}

// display cart
if (isset($_SESSION['cart'])) {
    echo "<h1>Cart</h1>";
    foreach ($_SESSION['cart'] as $item) {
        $query = "SELECT * FROM products WHERE id = '" . $item['id'] . "'";
        $result = $connection->query($query);
        $row = $result->fetch_assoc();
        echo "<p>" . $row['name'] . " x " . $item['quantity'] . "</p>";
    }
}

// checkout
if (isset($_POST['submit'])) {
    // retrieve cart contents
    $cart_contents = $_SESSION['cart'];
    
    // calculate total cost
    $total_cost = 0;
    foreach ($cart_contents as $item) {
        $query = "SELECT price FROM products WHERE id = '" . $item['id'] . "'";
        $result = $connection->query($query);
        $row = $result->fetch_assoc();
        $total_cost += $row['price'] * $item['quantity'];
    }
    
    // insert order into database
    $customer_name = $_POST['customer_name'];
    $order_date = date('Y-m-d');
    $query = "INSERT INTO orders (customer_name, order_date, total_cost) VALUES ('$customer_name', '$order_date', '$total_cost')";
    $connection->query($query);
    
    // insert cart contents into database
    foreach ($cart_contents as $item) {
        $query = "INSERT INTO orders_items (order_id, product_id, quantity) VALUES ((SELECT MAX(id) FROM orders), '" . $item['id'] . "', '" . $item['quantity'] . "') ";
        $connection->query($query);
    }
    
    // clear cart
    session_start();
    unset($_SESSION['cart']);
}

?>

<form action="" method="post">
    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name"><br><br>
    <input type="submit" name="submit" value="Checkout">
</form>

// add_to_cart.php
<?php
require_once 'config.php';

$product_id = $_GET['id'];
$cart[] = array('id' => $product_id, 'quantity' => 1);
session_start();
$_SESSION['cart'] = $cart;

echo "Added " . $_SESSION['cart'][0]['name'] . " to cart!";
?>


// product.php

class Product {
    private $id;
    private $name;
    private $price;

    public function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }

    public function getId() {
        return $this->id;
    }

    public function getName() {
        return $this->name;
    }

    public function getPrice() {
        return $this->price;
    }
}


// user.php

class User {
    private $id;
    private $username;
    private $email;

    public function __construct($id, $username, $email) {
        $this->id = $id;
        $this->username = $username;
        $this->email = $email;
    }

    public function getId() {
        return $this->id;
    }

    public function getUsername() {
        return $this->username;
    }

    public function getEmail() {
        return $this->email;
    }
}


// PurchaseController.php

class PurchaseController {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    // Display products and their prices
    public function index() {
        $products = array(
            new Product(1, "Product A", 19.99),
            new Product(2, "Product B", 29.99),
            new Product(3, "Product C", 39.99)
        );

        require_once 'views/product_list.php';
    }

    // Add product to cart
    public function addProductToCart($productId) {
        $product = new Product($productId, "", "");

        if (isset($_SESSION['cart'])) {
            $_SESSION['cart'][] = array(
                'id' => $product->getId(),
                'quantity' => 1
            );
        } else {
            $_SESSION['cart'] = array(
                array(
                    'id' => $product->getId(),
                    'quantity' => 1
                )
            );
        }

        header('Location: index.php');
    }

    // Checkout process
    public function checkout() {
        if (isset($_POST['submit'])) {
            // Process order data
            $userId = $_SESSION['user_id'];

            $orderData = array();
            foreach ($_SESSION['cart'] as $item) {
                $orderData[] = array(
                    'product_name' => "",
                    'price' => 0,
                    'quantity' => $item['quantity'],
                    'total' => $item['quantity'] * $item['price']
                );
            }

            // Insert order data into orders table
            foreach ($orderData as $item) {
                $stmt = $this->db->prepare('INSERT INTO orders (user_id, product_name, price, quantity, total) VALUES (:id, :name, :price, :quantity, :total)');
                $stmt->bindParam(':id', $userId);
                $stmt->bindParam(':name', $item['product_name']);
                $stmt->bindParam(':price', $item['price']);
                $stmt->bindParam(':quantity', $item['quantity']);
                $stmt->bindParam(':total', $item['total']);

                if ($stmt->execute()) {
                    echo 'Order successfully placed!';
                } else {
                    echo 'Error placing order: ' . $this->db->errorInfo()[2];
                }
            }

            // Clear cart
            unset($_SESSION['cart']);
        }

        require_once 'views/checkout.php';
    }
}


<?php

require_once 'config/db.php';
require_once 'models/Product.php';

$dbc = new DatabaseConnection();
$db = $dbc->getConnection();

$pController = new PurchaseController($db);

if (isset($_SESSION['user_id'])) {
    // User is logged in, display products and their prices
    $pController->index();
} else {
    // Redirect to login page if user is not logged in
    header('Location: index.php?login=true');
}


<?php

require_once 'config/db.php';
require_once 'models/Product.php';

$dbc = new DatabaseConnection();
$db = $dbc->getConnection();

$pController = new PurchaseController($db);

if (isset($_POST['submit'])) {
    // Process checkout form data
    $pController->checkout();
} else {
    require_once 'views/checkout_form.php';
}


<?php

// Configuration
$stripe_key = 'YOUR_STRIPE_PUBLIC_KEY';
$stripe_secret = 'YOUR_STRIPE_SECRET_KEY';

?>

<!-- Form for user details -->
<form action="process.php" method="post">
  <label>Full Name:</label>
  <input type="text" name="name"><br><br>
  <label>Email:</label>
  <input type="email" name="email"><br><br>
  <label>Card Number:</label>
  <input type="number" name="card_number"><br><br>
  <label>CVC:</label>
  <input type="number" name="cvc"><br><br>
  <label>Expiration Date (MM/YY):</label>
  <input type="text" name="exp_date"><br><br>
  <button type="submit">Place Order</button>
</form>

<?php
// If we have a payment ID, print the payment status
if (isset($_GET['payment_id'])) {
  echo '<p>Payment Status: ' . $_GET['status'] . '</p>';
}
?>


<?php

require_once 'stripe/init.php';

\Stripe\Stripe::setApiKey($stripe_secret);

// Collect the form data
$name = $_POST['name'];
$email = $_POST['email'];
$card_number = $_POST['card_number'];
$cvc = $_POST['cvc'];
$exp_date = $_POST['exp_date'];

// Create a Stripe Customer object
$customer = \Stripe\Customer::create([
  'email' => $email,
  'name' => $name,
]);

// Create a Payment Method (Card) object
$payment_method = \Stripe\PaymentMethod::create([
  'card' => [
    'number' => $card_number,
    'exp_month' => substr($exp_date, 0, 2),
    'exp_year' => substr($exp_date, -2),
    'cvc' => $cvc,
  ],
]);

// Create a Payment Intent object
$payment_intent = \Stripe\PaymentIntent::create([
  'amount' => 10000, // $100.00
  'currency' => 'usd',
  'payment_method_types' => ['card'],
  'setup_future_payments' => true,
]);

// Confirm the Payment Intent with a Payment Method (Card) object
$payment_intent->confirm(
  [
    'payment_method_types' => ['card'],
    'return_url' => 'http://example.com/success.php',
  ]
);

// Redirect to success page
header('Location: http://example.com/success.php?payment_id=' . $payment_intent['id']);
exit();

?>


<?php

require_once 'stripe/init.php';

\Stripe\Stripe::setApiKey($stripe_secret);

// Get the Payment Intent ID from the query string
$payment_id = $_GET['payment_id'];

// Retrieve the Payment Intent object
$payment_intent = \Stripe\PaymentIntent::retrieve($payment_id);

echo '<p>Payment Status: ' . $payment_intent->status . '</p>';

?>


<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'mydatabase');

// Stripe API keys
define('STRIPE_PUBLIC_KEY', 'your-public-key');
define('STRIPE_SECRET_KEY', 'your-secret-key');
?>


<?php

function getUser($username) {
  global $db;
  $stmt = $db->prepare("SELECT * FROM users WHERE username=:username");
  $stmt->bindParam(':username', $username);
  $stmt->execute();
  return $stmt->fetch();
}

function getProduct($id) {
  global $db;
  $stmt = $db->prepare("SELECT * FROM products WHERE id=:id");
  $stmt->bindParam(':id', $id);
  $stmt->execute();
  return $stmt->fetch();
}

function addProductToCart($user_id, $product_id, $quantity) {
  global $db;
  $stmt = $db->prepare("INSERT INTO cart (user_id, product_id, quantity) VALUES (:user_id, :product_id, :quantity)");
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':quantity', $quantity);
  $stmt->execute();
}

function removeProductFromCart($user_id, $product_id) {
  global $db;
  $stmt = $db->prepare("DELETE FROM cart WHERE user_id=:user_id AND product_id=:product_id");
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
}

function calculateCartTotal($user_id) {
  global $db;
  $stmt = $db->prepare("SELECT SUM(price * quantity) FROM cart WHERE user_id=:user_id");
  $stmt->bindParam(':user_id', $user_id);
  $stmt->execute();
  return $stmt->fetchColumn();
}

function processPayment($amount, $payment_method) {
  global $stripe_public_key;
  global $stripe_secret_key;

  \Stripe\Stripe::setApiKey($stripe_secret_key);

  $intent = \Stripe\Checkout\Session::create([
    'line_items' => [[
      'price_data' => [
        'currency' => 'usd',
        'product_data' => [
          'name' => 'My product',
        ],
        'unit_amount' => $amount,
      ],
      'quantity' => 1,
    ]],
    'mode' => 'payment',
    'success_url' => 'https://example.com/success',
    'cancel_url' => 'https://example.com/cancel',
  ]);

  return $intent->id;
}

?>


<?php

require_once('config.php');
require_once('functions.php');

if (isset($_POST['submit'])) {
  // Authentication
  $username = $_POST['username'];
  $password = $_POST['password'];

  if ($user = getUser($username)) {
    if (password_verify($password, $user['password'])) {
      // Product selection and display
      $products = array();
      $stmt = $db->prepare("SELECT * FROM products");
      $stmt->execute();
      while ($product = $stmt->fetch()) {
        $products[] = $product;
      }

      if (isset($_POST['add_to_cart'])) {
        // Add product to cart
        addProductToCart($user['id'], $_POST['product_id'], 1);
      }
    } else {
      echo 'Invalid password';
    }
  } else {
    echo 'Invalid username';
  }
}

if (isset($_GET['view_cart'])) {
  // View cart products
  $products = array();
  $stmt = $db->prepare("SELECT * FROM cart WHERE user_id=:user_id");
  $stmt->bindParam(':user_id', $_SESSION['user_id']);
  $stmt->execute();

  while ($product = $stmt->fetch()) {
    $products[] = getProduct($product['product_id']);
  }

  echo '<h1>Cart products:</h1>';
  foreach ($products as $product) {
    echo '<p>' . $product['name'] . ' x' . $product['quantity'] . '</p>';
  }
}

if (isset($_GET['checkout'])) {
  // Payment processing
  $amount = calculateCartTotal($_SESSION['user_id']);
  $payment_method = 'card';

  if ($payment_method == 'card') {
    $payment_intent = processPayment($amount, $payment_method);
  }

  echo '<h1>Checkout:</h1>';
}

?>


<?php
// Session initialization
session_start();

// Get the product ID and quantity from the form data
if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Update the cart array in session
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }
    $_SESSION['cart'][$product_id] = $quantity;

    // Redirect to the cart page
    header('Location: cart.php');
    exit;
}

// Display the cart contents
if (isset($_SESSION['cart'])) {
    echo '<h1>Cart Contents:</h1>';
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        // Retrieve product details from database
        $product = getProductDetails($product_id);
        echo '<p>' . $product['name'] . ' x ' . $quantity . '</p>';
        echo '<p>Price: ' . $product['price'] . '</p>';
    }
} else {
    echo '<h1>Your cart is empty.</h1>';
}

// Form to add products to cart
echo '<form action="" method="post">';
echo '<input type="hidden" name="product_id" value="">';
echo '<select name="product_id">';
echo '<option value="1">Product 1</option>';
echo '<option value="2">Product 2</option>';
echo '<option value="3">Product 3</option>';
echo '</select>';
echo '<input type="number" name="quantity" value="1">';
echo '<button type="submit">Add to Cart</button>';
echo '</form>';

// Function to retrieve product details from database
function getProductDetails($product_id) {
    // Replace with your own database connection and query
    $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
    $stmt = $db->prepare('SELECT * FROM products WHERE id = :id');
    $stmt->bindParam(':id', $product_id);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
}
?>


<?php
// Get the product ID and quantity from the form data
$product_id = $_POST['product_id'];
$quantity = $_POST['quantity'];

// Update the cart array in session
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}
$_SESSION['cart'][$product_id] = $quantity;

// Redirect to the cart page
header('Location: cart.php');
exit;
?>


// config.php
<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'store');

$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


// login.php
<?php
require_once 'config.php';

if (isset($_POST['username']) && isset($_POST['password'])) {
    $username = $_POST['username'];
    $password = md5($_POST['password']);

    $query = "SELECT * FROM users WHERE username='$username' AND password='$password'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        session_start();
        $_SESSION['user_id'] = $result->fetch_assoc()['id'];
        header('Location: dashboard.php');
    } else {
        echo "Invalid username or password";
    }
}
?>


// product.php
<?php
require_once 'config.php';

$query = "SELECT * FROM products";
$result = $conn->query($query);

if ($result->num_rows > 0) {
    while ($product = $result->fetch_assoc()) {
        echo "<div>";
        echo "<h2>$product[name]</h2>";
        echo "<p>Price: $" . number_format($product['price'], 2) . "</p>";
        echo "<p>Description: " . substr($product['description'], 0, 100) . "</p>";
        echo "<a href='cart.php?product_id=$product[id]'>Add to Cart</a>";
        echo "</div>";
    }
}
?>


// cart.php
<?php
require_once 'config.php';

if (isset($_SESSION['user_id'])) {
    $query = "SELECT * FROM carts WHERE user_id=" . $_SESSION['user_id'];
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        echo "<h2>Cart</h2>";
        while ($cart_item = $result->fetch_assoc()) {
            $product_query = "SELECT * FROM products WHERE id=" . $cart_item['product_id'];
            $product_result = $conn->query($product_query);
            $product = $product_result->fetch_assoc();

            echo "<div>";
            echo "<h3>$product[name]</h3>";
            echo "<p>Price: $" . number_format($product['price'], 2) . "</p>";
            echo "<p>Quantity: " . $cart_item['quantity'] . "</p>";
            echo "<a href='remove_from_cart.php?cart_id=$cart_item[id]'>Remove</a>";
            echo "</div>";
        }
    } else {
        echo "<h2>No items in cart</h2>";
    }

    if (isset($_GET['product_id'])) {
        $query = "INSERT INTO carts (user_id, product_id, quantity) VALUES (" . $_SESSION['user_id'] . ", " . $_GET['product_id'] . ", 1)";
        $conn->query($query);
        header('Location: cart.php');
    }
}
?>


// checkout.php
<?php
require_once 'config.php';

if (isset($_SESSION['user_id'])) {
    $query = "SELECT * FROM carts WHERE user_id=" . $_SESSION['user_id'];
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        $total = 0;
        while ($cart_item = $result->fetch_assoc()) {
            $product_query = "SELECT * FROM products WHERE id=" . $cart_item['product_id'];
            $product_result = $conn->query($product_query);
            $product = $product_result->fetch_assoc();

            $total += $product['price'] * $cart_item['quantity'];
        }

        $order_query = "INSERT INTO orders (user_id, total) VALUES (" . $_SESSION['user_id'] . ", " . number_format($total, 2) . ")";
        $conn->query($order_query);
        $order_id = $conn->insert_id;

        while ($cart_item = $result->fetch_assoc()) {
            $item_query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (" . $order_id . ", " . $cart_item['product_id'] . ", " . $cart_item['quantity'] . ")";
            $conn->query($item_query);
        }

        $delete_cart_query = "DELETE FROM carts WHERE user_id=" . $_SESSION['user_id'];
        $conn->query($delete_cart_query);

        header('Location: success.php');
    } else {
        echo "<h2>No items in cart</h2>";
    }
}
?>


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'mydatabase';
$username = 'root';
$password = '';

// Connect to database
try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Error connecting to database: " . $e->getMessage();
    exit;
}

// Function to add product to cart
function add_product_to_cart($product_id) {
    // Check if user is logged in
    if (!isset($_SESSION['user_id'])) {
        echo "You must be logged in to add products to your cart.";
        return false;
    }

    // Retrieve product information from database
    $stmt = $pdo->prepare("SELECT * FROM products WHERE id = :product_id");
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    $product_info = $stmt->fetch();

    if ($product_info) {
        // Add product to user's cart
        $cart_product = array(
            'product_id' => $product_info['id'],
            'name' => $product_info['name'],
            'price' => $product_info['price']
        );
        $_SESSION['cart_products'][] = $cart_product;
        return true;
    } else {
        echo "Product not found.";
        return false;
    }
}

// Function to checkout
function checkout() {
    // Check if user is logged in and has products in cart
    if (!isset($_SESSION['user_id']) || empty($_SESSION['cart_products'])) {
        echo "You must be logged in and have products in your cart to checkout.";
        return false;
    }

    // Retrieve user's information from database
    $stmt = $pdo->prepare("SELECT * FROM users WHERE id = :user_id");
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->execute();
    $user_info = $stmt->fetch();

    if ($user_info) {
        // Process payment (not implemented in this example)
        echo "Payment processed successfully.";
        return true;
    } else {
        echo "User not found.";
        return false;
    }
}

// Function to purchase product
function purchase_product($product_id) {
    // Add product to user's cart and checkout
    if (add_product_to_cart($product_id)) {
        if (checkout()) {
            echo "Product purchased successfully.";
            return true;
        } else {
            echo "Checkout failed.";
            return false;
        }
    } else {
        echo "Failed to add product to cart.";
        return false;
    }
}

// Example usage
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $product_id = $_POST['product_id'];
    purchase_product($product_id);
}


// connection settings
$db_host = 'localhost';
$db_username = 'root';
$db_password = '';
$db_name = 'store';

// connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// function to display products
function displayProducts() {
  global $conn;
  $sql = "SELECT * FROM products";
  $result = $conn->query($sql);
  
  if ($result->num_rows > 0) {
      while($row = $result->fetch_assoc()) {
          echo '<div class="product">';
          echo '<h2>' . $row["name"] . '</h2>';
          echo '<p>Price: ' . $row["price"] . '</p>';
          echo '<button type="button" onclick="addToCart(' . $row["id"] . ')">Add to Cart</button>';
          echo '</div>';
      }
  } else {
      echo "0 results";
  }
}

// function to add product to cart
function addToCart($productId) {
  global $conn;
  if (isset($_SESSION['cart'][$productId])) {
    $_SESSION['cart'][$productId] += 1;
  } else {
    $_SESSION['cart'][$productId] = 1;
  }
  
  header('Location: ' . $_SERVER['PHP_SELF']);
  exit();
}

// function to display cart
function displayCart() {
  global $conn;
  if (isset($_SESSION['cart'])) {
      echo '<h2>Cart:</h2>';
      $total = 0;
      foreach ($_SESSION['cart'] as $productId => $quantity) {
          $sql = "SELECT * FROM products WHERE id = '$productId'";
          $result = $conn->query($sql);
          while ($row = $result->fetch_assoc()) {
              echo '<p>' . $row["name"] . ' x ' . $quantity . '</p>';
              $total += $row["price"] * $quantity;
          }
      }
      
      echo '<p>Total: $' . number_format($total, 2) . '</p>';
      echo '<button type="button" onclick="checkout()">Checkout</button>';
  } else {
      echo "No products in cart";
  }
}

// function to checkout
function checkout() {
  global $conn;
  
  if (isset($_SESSION['cart'])) {
      $customer_id = $_POST['customer'];
      $orderTotal = 0;
      
      foreach ($_SESSION['cart'] as $productId => $quantity) {
          $sql = "SELECT * FROM products WHERE id = '$productId'";
          $result = $conn->query($sql);
          while ($row = $result->fetch_assoc()) {
              $orderTotal += $row["price"] * $quantity;
              
              // insert order into database
              $sql = "INSERT INTO orders (customer_id, product_id, quantity, total) VALUES ('$customer_id', '$productId', '$quantity', '$orderTotal')";
              if ($conn->query($sql)) {
                  echo "Order placed successfully!";
              } else {
                  echo "Error: " . $conn->error;
              }
          }
      }
      
      // remove products from cart
      unset($_SESSION['cart']);
  }
  
  header('Location: ' . $_SERVER['PHP_SELF']);
  exit();
}


<?php
session_start();

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $username = $_POST["username"];
    $password = $_POST["password"];

    // Connect to database
    $conn = mysqli_connect("localhost", "root", "", "store");

    // Check if user exists and password is correct
    $query = "SELECT * FROM users WHERE username = '$username' AND password = '$password'";
    $result = mysqli_query($conn, $query);

    if (mysqli_num_rows($result) > 0) {
        $_SESSION["user_id"] = mysqli_fetch_assoc($result)["id"];
        header("Location: index.php");
    } else {
        echo "Invalid username or password";
    }
}
?>


<?php
session_start();

// Check if user is logged in
if (!isset($_SESSION["user_id"])) {
    header("Location: login.php");
}

// Get user ID from session
$user_id = $_SESSION["user_id"];

// Connect to database
$conn = mysqli_connect("localhost", "root", "", "store");

// Display products and cart items
$query = "SELECT * FROM products";
$result = mysqli_query($conn, $query);

$product_list = "";
while ($row = mysqli_fetch_assoc($result)) {
    $product_list .= "<li><a href='view_product.php?id=" . $row["id"] . "'>" . $row["name"] . "</a> - $" . $row["price"] . "</li>";
}

$query = "SELECT * FROM cart_items WHERE user_id = '$user_id'";
$result = mysqli_query($conn, $query);

$cart_list = "";
while ($row = mysqli_fetch_assoc($result)) {
    $cart_list .= "<li>" . $row["product_name"] . " x " . $row["quantity"] . "</li>";
}

echo "<h1>Products</h1><ul>$product_list</ul>";

echo "<h1>Cart</h1><ul>$cart_list</ul>";

// Display cart and checkout buttons
if (isset($_SESSION["cart_id"])) {
    echo "<a href='checkout.php'>Checkout</a>";
} else {
    echo "<button onclick='add_to_cart()'>Add to Cart</button>";
}
?>


<?php
// Get product ID from URL parameter
$product_id = $_GET["id"];

// Connect to database
$conn = mysqli_connect("localhost", "root", "", "store");

// Display product details and add to cart button
$query = "SELECT * FROM products WHERE id = '$product_id'";
$result = mysqli_query($conn, $query);

$row = mysqli_fetch_assoc($result);
echo "<h1>" . $row["name"] . "</h1><p>" . $row["description"] . "</p>";

// Add to cart button
echo "<button onclick='add_to_cart(" . $product_id . ")'>Add to Cart</button>";
?>


<?php
// Get user ID from session
$user_id = $_SESSION["user_id"];

// Connect to database
$conn = mysqli_connect("localhost", "root", "", "store");

// Display cart items and checkout button
$query = "SELECT * FROM cart_items WHERE user_id = '$user_id'";
$result = mysqli_query($conn, $query);

$cart_list = "";
while ($row = mysqli_fetch_assoc($result)) {
    $cart_list .= "<li>" . $row["product_name"] . " x " . $row["quantity"] . "</li>";
}

echo "<h1>Cart</h1><ul>$cart_list</ul>";

// Display checkout button
if (isset($_SESSION["cart_id"])) {
    echo "<a href='checkout.php'>Checkout</a>";
} else {
    echo "<button onclick='add_to_cart()'>Add to Cart</button>";
}
?>


<?php
// Get user ID from session
$user_id = $_SESSION["user_id"];

// Connect to database
$conn = mysqli_connect("localhost", "root", "", "store");

// Create new order and save cart items
$query = "INSERT INTO orders (user_id, total) VALUES ('$user_id', 0)";
mysqli_query($conn, $query);

$cart_id = $_SESSION["cart_id"];

$query = "SELECT * FROM cart_items WHERE cart_id = '$cart_id'";
$result = mysqli_query($conn, $query);

while ($row = mysqli_fetch_assoc($result)) {
    $product_id = $row["product_id"];
    $quantity = $row["quantity"];

    // Update product stock
    $query = "UPDATE products SET stock = stock - $quantity WHERE id = '$product_id'";
    mysqli_query($conn, $query);

    // Save order item
    $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (LAST_INSERT_ID(), '$product_id', '$quantity')";
    mysqli_query($conn, $query);
}

// Update cart status to paid
$query = "UPDATE carts SET status = 'paid' WHERE id = '$cart_id'";
mysqli_query($conn, $query);

// Clear cart and redirect to order summary page
$_SESSION["cart_id"] = NULL;
header("Location: ordersummary.php");
?>


<?php

// Configuration
$host = 'localhost';
$dbname = 'your_database';
$username = 'your_username';
$password = 'your_password';

// Connect to database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get user input
$product_name = $_POST['product_name'];
$quantity = $_POST['quantity'];

// Validate user input
if (empty($product_name) || empty($quantity)) {
    echo 'Error: Please enter both product name and quantity.';
} elseif (!ctype_digit($quantity)) {
    echo 'Error: Quantity must be a valid number.';
} else {
    // Prepare query to insert order into database
    $query = "INSERT INTO orders (user_id, product_name, price, quantity, total)
              VALUES (?, ?, ?, ?, ?)";
    $stmt = $conn->prepare($query);
    $price = 10.99; // Example price for demonstration purposes

    // Bind parameters
    $stmt->bind_param('iidd', $_SESSION['user_id'], $product_name, $price, $quantity);

    // Execute query
    if ($stmt->execute()) {
        echo 'Order placed successfully!';
        $total = $price * $quantity;
        echo 'Total: $' . number_format($total, 2);
    } else {
        echo 'Error: Unable to place order.';
    }

    // Close statement and connection
    $stmt->close();
    $conn->close();
}

?>


<?php

// Configuration
$host = 'localhost';
$dbname = 'your_database';
$username = 'your_username';
$password = 'your_password';

// Connect to database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Start session (assuming you have a user ID stored in the session)
session_start();

// Display form for user to enter product name and quantity
?>
<form action="purchase.php" method="post">
  <label>Product Name:</label>
  <input type="text" name="product_name"><br><br>
  <label>Quantity:</label>
  <input type="number" name="quantity"><br><br>
  <button type="submit">Place Order</button>
</form>

<?php

// Close connection
$conn->close();

?>


<?php

// Include database connection settings
require_once 'db_settings.php';

// Get the product ID and quantity from the form data
$product_id = $_POST['product_id'];
$quantity = $_POST['quantity'];

// Validate input data
if (!$product_id || !$quantity) {
  echo 'Error: Product ID or Quantity not provided.';
  exit;
}

// Retrieve product details from database
$query = "SELECT * FROM products WHERE id = '$product_id'";
$result = mysqli_query($conn, $query);
$product = mysqli_fetch_assoc($result);

// Check if product exists and is available in stock
if (!$product || $product['stock'] < $quantity) {
  echo 'Error: Product not found or out of stock.';
  exit;
}

// Calculate total cost
$total = $product['price'] * $quantity;

// Create a new order in the database
$query = "INSERT INTO orders (customer_name, customer_email, order_date, total)
          VALUES ('$product['name'], '$product['email'], NOW(), '$total')";
mysqli_query($conn, $query);

// Update product stock
$query = "UPDATE products SET stock = stock - $quantity WHERE id = '$product_id'";
mysqli_query($conn, $query);

// Redirect to a confirmation page or send an email notification
header('Location: confirm_purchase.php');
exit;
?>


class User {
    private $db;

    function __construct($db) {
        $this->db = $db;
    }

    public function login($username, $password) {
        $query = "SELECT * FROM users WHERE username = '$username' AND password = '$password'";
        return $this->db->query($query)->fetch_assoc();
    }
}


class Order {
    private $db;

    function __construct($db) {
        $this->db = $db;
    }

    public function create_order($user_id, $product_name, $quantity, $price) {
        $query = "INSERT INTO orders (user_id, product_name, quantity, price) VALUES ('$user_id', '$product_name', '$quantity', '$price')";
        return $this->db->query($query);
    }
}


require_once 'User.php';
require_once 'Order.php';

$db = new mysqli('localhost', 'username', 'password', 'database_name');

if ($db->connect_error) {
    die("Connection failed: " . $db->connect_error);
}

$user = new User($db);

if (isset($_POST['username']) && isset($_POST['password'])) {
    $user_data = $user->login($_POST['username'], $_POST['password']);

    if ($user_data) {
        echo 'Welcome, ' . $user_data['username'] . '!';

        $order = new Order($db);

        $product_name = isset($_POST['product_name']) ? $_POST['product_name'] : '';
        $quantity = (int)isset($_POST['quantity']);
        $price = (float)isset($_POST['price']);

        if ($quantity > 0 && $price > 0) {
            $order->create_order($user_data['id'], $product_name, $quantity, $price);
            echo 'Order placed successfully!';
        } else {
            echo 'Invalid quantity or price.';
        }
    } else {
        echo 'Invalid username or password.';
    }
}

?>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <label for="username">Username:</label>
    <input type="text" id="username" name="username"><br><br>

    <label for="password">Password:</label>
    <input type="password" id="password" name="password"><br><br>

    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name"><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity"><br><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price"><br><br>

    <input type="submit" value="Purchase">
</form>


<?php

// Include database connection settings
require_once 'db_connection.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

// Get current user's ID
$user_id = $_SESSION['user_id'];

// Get all products from database
$products_query = "SELECT * FROM products";
$products_result = mysqli_query($conn, $products_query);
$products = array();
while ($product = mysqli_fetch_assoc($products_result)) {
    $products[] = $product;
}

// Process form submission (if any)
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Get order items from form
    $order_items = $_POST['order_items'];

    // Validate order items
    if (empty($order_items) || !is_array($order_items)) {
        echo "Error: Invalid order items";
        exit;
    }

    // Create new order
    $order_query = "INSERT INTO orders (user_id, total_cost) VALUES ('$user_id', 0)";
    mysqli_query($conn, $order_query);
    $order_id = mysqli_insert_id($conn);

    // Add each item to the order
    foreach ($order_items as $item) {
        $product_id = $item['product_id'];
        $quantity = $item['quantity'];

        // Update product quantity in stock
        $product_query = "UPDATE products SET quantity = quantity - $quantity WHERE id = '$product_id'";
        mysqli_query($conn, $product_query);

        // Add item to order_items table
        $order_item_query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', '$quantity')";
        mysqli_query($conn, $order_item_query);
    }

    // Update total cost of the order
    $total_cost_query = "UPDATE orders SET total_cost = 0 WHERE id = '$order_id'";
    mysqli_query($conn, $total_cost_query);

    echo "Order created successfully!";
}

?>

<!-- Display products and add to cart form -->
<h1>Purchase Products</h1>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <table>
        <?php foreach ($products as $product): ?>
            <tr>
                <td><?php echo $product['name']; ?></td>
                <td>$<?php echo number_format($product['price'], 2); ?></td>
                <td>
                    <input type="number" name="order_items[]" value="<?php echo $product['id']; ?>" hidden>
                    <button type="button" class="btn btn-primary" onclick="add_to_cart(<?php echo $product['id']; ?>)">Add to Cart</button>
                </td>
            </tr>
        <?php endforeach; ?>
    </table>

    <!-- Display cart contents and checkout button -->
    <h2>Cart Contents:</h2>
    <ul id="cart-contents">
        <?php foreach ($order_items as $item): ?>
            <li><?php echo $item['product_name']; ?> x<?php echo $item['quantity']; ?></li>
        <?php endforeach; ?>
    </ul>

    <button type="submit" class="btn btn-primary">Checkout</button>
</form>

<script>
    function add_to_cart(product_id) {
        var quantity = prompt("Enter quantity:", "");
        if (quantity != null && !isNaN(quantity)) {
            // Update cart contents and send AJAX request to update product stock
            document.getElementById('cart-contents').innerHTML += '<li>' + product_name + ' x' + quantity + '</li>';
            $.ajax({
                type: 'POST',
                url: '<?php echo $_SERVER['PHP_SELF']; ?>',
                data: { order_items[]: { product_id: product_id, quantity: quantity } },
                success: function(data) {
                    alert("Product added to cart!");
                }
            });
        }
    }
</script>


class Product {
    private $id;
    private $name;
    private $price;

    public function __construct($id = null, $name = null, $price = null) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }

    public static function getAll() {
        global $db;
        $query = "SELECT * FROM products";
        return mysqli_query($db, $query);
    }

    public static function getOne($id) {
        global $db;
        $query = "SELECT * FROM products WHERE id = '$id'";
        return mysqli_fetch_assoc(mysqli_query($db, $query));
    }
}


class Purchase {
    private $id;
    private $customer_name;
    private $product_id;

    public function __construct($id = null, $customer_name = null, $product_id = null) {
        $this->id = $id;
        $this->customer_name = $customer_name;
        $this->product_id = $product_id;
    }

    public static function addPurchase($product_id, $customer_name) {
        global $db;
        $query = "INSERT INTO purchases (customer_name, product_id) VALUES ('$customer_name', '$product_id')";
        return mysqli_query($db, $query);
    }

    public static function getAllPurchases() {
        global $db;
        $query = "SELECT * FROM purchases";
        return mysqli_query($db, $query);
    }
}


<?php

require_once 'includes/db.php';
require_once 'models/Product.php';

?>

<form action="" method="post">
    <select name="product_id">
        <?php foreach (Product::getAll() as $product) { ?>
            <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?></option>
        <?php } ?>
    </select>

    <input type="text" name="customer_name">

    <button type="submit" name="submit">Submit</button>
</form>


<?php

require_once 'includes/db.php';
require_once 'models/Purchase.php';

if (isset($_POST['submit'])) {
    $product_id = $_POST['product_id'];
    $customer_name = $_POST['customer_name'];

    Purchase::addPurchase($product_id, $customer_name);

    echo "Purchase added successfully!";
}

?>


<?php

// Configuration file
require_once 'config.php';

// Function to authenticate a user
function authenticateUser($username, $password) {
    global $db;
    
    // Query database for username and password
    $query = "SELECT * FROM users WHERE username = :username AND password = :password";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':password', $password);
    $stmt->execute();
    
    // Check if user exists
    if ($stmt->rowCount() > 0) {
        return true;
    } else {
        return false;
    }
}

// Function to add product to cart
function addToCart($productId, $userId) {
    global $db;
    
    // Query database for existing cart entry
    $query = "SELECT * FROM carts WHERE user_id = :user_id AND product_id = :product_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
    
    // Check if cart entry already exists
    if ($stmt->rowCount() > 0) {
        return true; // Product is already in cart
    } else {
        // Insert new cart entry
        $query = "INSERT INTO carts (user_id, product_id) VALUES (:user_id, :product_id)";
        $stmt = $db->prepare($query);
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        
        return true; // Product added to cart
    }
}

// Function to remove product from cart
function removeFromCart($productId, $userId) {
    global $db;
    
    // Query database for existing cart entry
    $query = "SELECT * FROM carts WHERE user_id = :user_id AND product_id = :product_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
    
    // Check if cart entry exists
    if ($stmt->rowCount() > 0) {
        // Delete cart entry
        $query = "DELETE FROM carts WHERE user_id = :user_id AND product_id = :product_id";
        $stmt = $db->prepare($query);
        $stmt->bindParam(':user_id', $userId);
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        
        return true; // Product removed from cart
    } else {
        return false; // Product not found in cart
    }
}

// Function to purchase products in cart
function purchaseProducts() {
    global $db;
    
    // Get user ID and cart contents
    $userId = $_SESSION['user_id'];
    $query = "SELECT * FROM carts WHERE user_id = :user_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->execute();
    
    // Process each product in cart
    foreach ($stmt as $product) {
        // Update product stock levels (simulated for simplicity)
        $query = "UPDATE products SET stock_level = stock_level - 1 WHERE id = :id";
        $stmt = $db->prepare($query);
        $stmt->bindParam(':id', $product['product_id']);
        $stmt->execute();
        
        // Remove product from cart
        removeFromCart($product['product_id'], $userId);
    }
}

// Check for user authentication
if (isset($_SESSION['user_id'])) {
    // User is authenticated, allow them to view their cart
    echo "Welcome, " . $_SESSION['username'] . "! Your cart contains:<br>";
    
    // Get products in cart and display them
    $query = "SELECT * FROM carts WHERE user_id = :user_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->execute();
    
    foreach ($stmt as $product) {
        echo $product['name'] . " (ID: " . $product['id'] . ") - Price: $" . number_format($product['price'], 2) . "<br>";
    }
    
    // Allow user to purchase products in cart
    if (isset($_POST['purchase'])) {
        purchaseProducts();
        echo "Order processed successfully!";
    }
} else {
    // User is not authenticated, prompt them to log in
    echo "You must log in to view your cart. Please click the link below to log in:<br>";
    
    // Provide login form
    if (isset($_POST['login'])) {
        $username = $_POST['username'];
        $password = $_POST['password'];
        
        // Attempt to authenticate user
        if (authenticateUser($username, $password)) {
            // User authenticated successfully, log them in
            $_SESSION['user_id'] = getUserIdByUsername($username);
            $_SESSION['username'] = $username;
            
            echo "You are now logged in!";
        } else {
            echo "Invalid username or password.";
        }
    }
}

// Function to retrieve user ID by username (simplified)
function getUserIdByUsername($username) {
    global $db;
    
    // Query database for user ID
    $query = "SELECT * FROM users WHERE username = :username";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':username', $username);
    $stmt->execute();
    
    return $stmt->fetchColumn('id');
}

?>


<?php

// Initialize session
session_start();

// Check if cart is empty
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function addItemToCart($productId, $productName, $price) {
    // Get current quantity of product in cart
    $quantity = isset($_SESSION['cart'][$productId]) ? $_SESSION['cart'][$productId]['quantity'] : 0;
    
    // Update quantity of product in cart
    $_SESSION['cart'][$productId] = array(
        'name' => $productName,
        'price' => $price,
        'quantity' => $quantity + 1
    );
}

// Function to update quantity of item in cart
function updateItemInCart($productId, $newQuantity) {
    // Update quantity of product in cart
    $_SESSION['cart'][$productId]['quantity'] = $newQuantity;
}

// Function to remove item from cart
function removeItemFromCart($productId) {
    // Remove product from cart
    unset($_SESSION['cart'][$productId]);
}

// Function to calculate total cost of items in cart
function calculateTotalCost() {
    // Initialize total cost
    $totalCost = 0;
    
    // Loop through each item in cart
    foreach ($_SESSION['cart'] as $item) {
        // Add product price times quantity to total cost
        $totalCost += $item['price'] * $item['quantity'];
    }
    
    return $totalCost;
}

// Function to display contents of cart
function displayCart() {
    // Get current cart contents
    $cartContents = $_SESSION['cart'];
    
    // Display cart contents
    echo "Cart Contents:
";
    foreach ($cartContents as $productId => $item) {
        echo "$item[name] x $item[quantity] = $" . number_format($item['price'] * $item['quantity'], 2) . "
";
    }
    
    // Display total cost
    echo "Total Cost: $" . number_format(calculateTotalCost(), 2) . "

";
}

// Add item to cart if form submitted
if (isset($_POST['add'])) {
    addItemToCart($_POST['productId'], $_POST['productName'], $_POST['price']);
} elseif (isset($_POST['update'])) {
    updateItemInCart($_POST['productId'], $_POST['newQuantity']);
} elseif (isset($_POST['remove'])) {
    removeItemFromCart($_POST['productId']);
}

// Display cart contents
displayCart();

?>


<?php
// db.config.php

return [
    'host' => 'localhost',
    'username' => 'your_username',
    'password' => 'your_password',
    'database' => 'purchase_system'
];


// Product.php

namespace App\Models;

class Product
{
    private $id;
    private $name;
    private $price;

    public function __construct($id, $name, $price)
    {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }

    // Getters
    public function getId()
    {
        return $this->id;
    }

    public function getName()
    {
        return $this->name;
    }

    public function getPrice()
    {
        return $this->price;
    }
}

// User.php

namespace App\Models;

class User
{
    private $id;
    private $username;
    private $email;

    public function __construct($id, $username, $email)
    {
        $this->id = $id;
        $this->username = $username;
        $this->email = $email;
    }

    // Getters
    public function getId()
    {
        return $this->id;
    }

    public function getUsername()
    {
        return $this->username;
    }

    public function getEmail()
    {
        return $this->email;
    }
}


// PurchaseController.php

namespace App\Controllers;

use App\Models\Product;
use App\Models\User;

class PurchaseController
{
    public function index()
    {
        // Display available products
        $products = [
            new Product(1, 'Product 1', 10.99),
            new Product(2, 'Product 2', 5.99)
        ];

        return view('purchase-form.html', ['products' => $products]);
    }

    public function addToCart($productId)
    {
        // Get the product
        $product = Product::find($productId);

        if (!$product) {
            echo "Invalid product";
            return;
        }

        // Add to cart logic goes here
    }

    public function checkout()
    {
        // Payment processing logic goes here
    }
}


<?php
// index.php

require_once 'config/db.config.php';
require_once 'models/Product.php';
require_once 'controllers/PurchaseController.php';

$purchaseController = new PurchaseController();

if (isset($_GET['action'])) {
    $action = $_GET['action'];

    switch ($action) {
        case 'index':
            echo $purchaseController->index();
            break;
        case 'addToCart':
            echo $purchaseController->addToCart($_POST['productId']);
            break;
        default:
            echo "Invalid action";
    }
}


<?php

// Configuration file with database credentials and other settings
require_once 'config.php';

// Function to add a new order
function addOrder($userId, $products) {
  // Insert new order into orders table
  $query = "INSERT INTO orders (user_id, order_date, total)
            VALUES (:user_id, NOW(), :total)";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->bindParam(':total', $products['total']);
  $stmt->execute();

  // Get the ID of the newly inserted order
  $orderId = $pdo->lastInsertId();

  // Insert new order items into order_items table
  foreach ($products as $product) {
    $query = "INSERT INTO order_items (order_id, product_id, quantity)
              VALUES (:order_id, :product_id, :quantity)";
    $stmt = $pdo->prepare($query);
    $stmt->bindParam(':order_id', $orderId);
    $stmt->bindParam(':product_id', $product['id']);
    $stmt->bindParam(':quantity', $product['quantity']);
    $stmt->execute();
  }

  return $orderId;
}

// Function to get the cart contents
function getCartContents($userId) {
  // Query the order_items table for all items in the user's cart
  $query = "SELECT p.name, oi.quantity, o.id AS order_id
            FROM order_items oi
            JOIN products p ON oi.product_id = p.id
            JOIN orders o ON oi.order_id = o.id
            WHERE o.user_id = :user_id";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':user_id', $userId);
  $stmt->execute();

  // Fetch the results and return them as an array
  return $stmt->fetchAll();
}

// Function to update the quantity of a product in the cart
function updateCartQuantity($orderId, $productId, $quantity) {
  // Update the quantity of the product in the order_items table
  $query = "UPDATE order_items SET quantity = :quantity
            WHERE order_id = :order_id AND product_id = :product_id";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':quantity', $quantity);
  $stmt->bindParam(':order_id', $orderId);
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();
}

// Function to remove a product from the cart
function removeProductFromCart($orderId, $productId) {
  // Delete the order item from the order_items table
  $query = "DELETE FROM order_items WHERE order_id = :order_id AND product_id = :product_id";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':order_id', $orderId);
  $stmt->bindParam(':product_id', $productId);
  $stmt->execute();
}

// Example usage:
$userId = 1; // Replace with the actual user ID
$productIds = array(1, 2, 3); // Replace with the actual product IDs
$quantities = array(2, 1, 3);

// Add products to cart
foreach ($productIds as $i => $productId) {
  updateCartQuantity(addOrder($userId, array('total' => 0)), $productId, $quantities[$i]);
}

// Get the cart contents
$cartContents = getCartContents($userId);
print_r($cartContents);

?>


<?php

// Configuration file with database credentials and other settings
require_once 'config.php';

// Function to process the purchase
function processPurchase($orderId) {
  // Update the status of the order in the orders table
  $query = "UPDATE orders SET status = :status WHERE id = :order_id";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':status', 'paid');
  $stmt->bindParam(':order_id', $orderId);
  $stmt->execute();

  // Insert a new payment into the payments table
  $query = "INSERT INTO payments (order_id, amount)
            VALUES (:order_id, :amount)";
  $stmt = $pdo->prepare($query);
  $stmt->bindParam(':order_id', $orderId);
  $stmt->bindParam(':amount', '12.99'); // Replace with the actual amount
  $stmt->execute();
}

// Example usage:
$orderId = $_POST['order_id'];

processPurchase($orderId);

?>


<?php
  // Database connection settings
  $host = 'localhost';
  $db = 'eshop';
  $user = 'root';
  $pass = '';

  // Create database connection
  $conn = new PDO("mysql:host=$host;dbname=$db", $user, $pass);

  // Check if user is logged in
  if (!isset($_SESSION['username'])) {
    header('Location: login.php');
    exit;
  }

  // Get products from database
  $stmt = $conn->prepare('SELECT * FROM products');
  $stmt->execute();
  $products = $stmt->fetchAll();

?>
<!DOCTYPE html>
<html>
<head>
  <title>Purchase</title>
</head>
<body>
  <h1>Purchase</h1>
  <form action="purchase.php" method="post">
    <?php foreach ($products as $product) { ?>
      <p>
        <input type="checkbox" name="products[]" value="<?php echo $product['id']; ?>">
        <?php echo $product['name'] . ' (' . $product['price'] . ')' ?>
      </p>
    <?php } ?>
    <button type="submit">Purchase</button>
  </form>
</body>
</html>


<?php
  // Database connection settings
  $host = 'localhost';
  $db = 'eshop';
  $user = 'root';
  $pass = '';

  // Create database connection
  $conn = new PDO("mysql:host=$host;dbname=$db", $user, $pass);

  // Check if form was submitted
  if (isset($_POST['products'])) {
    // Get products from session
    $_SESSION['products'] = $_POST['products'];

    // Update stock in database
    foreach ($_SESSION['products'] as $product_id) {
      $stmt = $conn->prepare('UPDATE products SET stock = stock - 1 WHERE id = :id');
      $stmt->bindParam(':id', $product_id);
      $stmt->execute();
    }

    // Calculate total price
    $total_price = 0;
    foreach ($_SESSION['products'] as $product_id) {
      $stmt = $conn->prepare('SELECT price FROM products WHERE id = :id');
      $stmt->bindParam(':id', $product_id);
      $stmt->execute();
      $price = $stmt->fetchColumn();
      $total_price += $price;
    }

    // Process payment (for example, using Stripe API)
    // ...

    // Update order in database
    $stmt = $conn->prepare('INSERT INTO orders (customer_id, total_price) VALUES (:customer_id, :total_price)');
    $stmt->bindParam(':customer_id', $_SESSION['username']);
    $stmt->bindParam(':total_price', $total_price);
    $stmt->execute();

    // Clear session
    unset($_SESSION['products']);

    header('Location: thanks.php');
  }
?>


<?php
  // Database connection settings
  $host = 'localhost';
  $db = 'eshop';
  $user = 'root';
  $pass = '';

  // Create database connection
  $conn = new PDO("mysql:host=$host;dbname=$db", $user, $pass);

?>
<!DOCTYPE html>
<html>
<head>
  <title>Thanks</title>
</head>
<body>
  <h1>Thank you for your purchase!</h1>
  <p>Your order has been successfully processed.</p>
</body>
</html>


<?php
// Database connection settings
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$dbname = 'your_database';

// Establish a connection
$conn = new mysqli($host, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add item to cart
function addToCart($product_id, $quantity) {
    global $conn;
    // Query to check if product is already in cart
    $query = "SELECT * FROM cart_items WHERE user_id = ".$_SESSION['user_id']." AND product_id = ".$product_id."";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        // Update quantity of existing item in cart
        $query = "UPDATE cart_items SET quantity = quantity + ".$quantity." WHERE user_id = ".$_SESSION['user_id']." AND product_id = ".$product_id."";
    } else {
        // Insert new item into cart with given quantity
        $query = "INSERT INTO cart_items (user_id, product_id, quantity) VALUES (".$_SESSION['user_id'].", ".$product_id.", ".$quantity.")";
    }
    
    if ($conn->query($query) === TRUE) {
        echo "Item added to cart successfully.";
    } else {
        echo "Error adding item to cart: " . $conn->error;
    }
}

// Function to view cart contents
function viewCart() {
    global $conn;
    // Get all items from user's cart ordered by product_id
    $query = "SELECT ci.id, p.name AS product_name, ci.quantity, p.price FROM cart_items ci JOIN products p ON ci.product_id = p.id WHERE ci.user_id = ".$_SESSION['user_id']." ORDER BY p.id";
    
    if ($result = $conn->query($query)) {
        echo "<h2>Cart Contents:</h2>";
        while ($row = $result->fetch_assoc()) {
            echo "Product: ".$row['product_name'].", Quantity: ".$row['quantity'].", Price: €".$row['price']."<br>";
        }
    } else {
        echo "Error viewing cart contents: " . $conn->error;
    }
}

// Function to update quantity of item in cart
function updateQuantity($id, $newQuantity) {
    global $conn;
    // Update the quantity of the specified product in the user's cart
    $query = "UPDATE cart_items SET quantity = ".$newQuantity." WHERE id = ".$id." AND user_id = ".$_SESSION['user_id']."";
    
    if ($conn->query($query) === TRUE) {
        echo "Item quantity updated successfully.";
    } else {
        echo "Error updating item quantity: " . $conn->error;
    }
}

// Function to remove item from cart
function removeFromCart($id) {
    global $conn;
    // Delete the specified product from the user's cart
    $query = "DELETE FROM cart_items WHERE id = ".$id." AND user_id = ".$_SESSION['user_id']."";
    
    if ($conn->query($query) === TRUE) {
        echo "Item removed from cart successfully.";
    } else {
        echo "Error removing item: " . $conn->error;
    }
}

// Function to process checkout
function checkout() {
    global $conn;
    // Clear the cart by deleting all items for the user
    $query = "DELETE FROM cart_items WHERE user_id = ".$_SESSION['user_id']."";
    
    if ($conn->query($query) === TRUE) {
        echo "Checkout successful. Cart cleared.";
    } else {
        echo "Error during checkout: " . $conn->error;
    }
}

// Initialize session (if not already done)
if (!isset($_SESSION)) {
    session_start();
}

// Example usage
if (isset($_POST['addToCart'])) {
    addToCart($_POST['product_id'], $_POST['quantity']);
} elseif (isset($_POST['viewCart'])) {
    viewCart();
} elseif (isset($_POST['updateQuantity'])) {
    updateQuantity($_POST['id'], $_POST['newQuantity']);
} elseif (isset($_POST['removeFromCart'])) {
    removeFromCart($_POST['id']);
} elseif (isset($_POST['checkout'])) {
    checkout();
}
?>


// config.php: database connection settings
$db_host = 'localhost';
$db_username = 'root';
$db_password = '';
$db_name = 'example';

// Connect to the database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function getProducts() {
    global $conn;
    $sql = "SELECT * FROM products";
    $result = $conn->query($sql);
    return $result->fetch_all(MYSQLI_ASSOC);
}

function placeOrder($customerName, $products) {
    global $conn;
    $total = 0;
    $orderItems = array();
    
    foreach ($products as $product) {
        $itemPrice = $product['price'];
        $quantity = $product['quantity'];
        
        // Update the product quantity
        $sql = "UPDATE products SET quantity = quantity - $quantity WHERE id = " . $product['id'];
        $conn->query($sql);
        
        // Insert a new order item
        $orderItem = array(
            'order_id' => '',
            'product_id' => $product['id'],
            'quantity' => $quantity
        );
        $orderItems[] = $orderItem;
        
        // Update the total price
        $total += $itemPrice * $quantity;
    }
    
    // Insert a new order
    $sql = "INSERT INTO orders (customer_name, total) VALUES ('$customerName', '$total')";
    $conn->query($sql);
    
    // Get the last inserted ID
    $orderId = $conn->insert_id;
    
    // Update the order item IDs
    foreach ($orderItems as &$item) {
        $item['order_id'] = $orderId;
    }
    
    return array(
        'order' => getOrderByID($orderId),
        'items' => $orderItems
    );
}

function getOrderByID($id) {
    global $conn;
    $sql = "SELECT * FROM orders WHERE id = '$id'";
    $result = $conn->query($sql);
    return $result->fetch_assoc();
}


$customerName = 'John Doe';
$products = array(
    array('id' => 1, 'quantity' => 2),
    array('id' => 2, 'quantity' => 3)
);

$orderInfo = placeOrder($customerName, $products);
print_r($orderInfo);


<?php
  $servername = "localhost";
  $username = "root";
  $password = "";
  $dbname = "store";

  // Create connection
  $conn = new mysqli($servername, $username, $password, $dbname);

  // Check connection
  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }

  function getProducts() {
    global $conn;
    $sql = "SELECT * FROM products";
    return $conn->query($sql)->fetch_all(MYSQLI_ASSOC);
  }

  function getProduct($id) {
    global $conn;
    $sql = "SELECT * FROM products WHERE id = '$id'";
    return $conn->query($sql)->fetch_assoc();
  }

  function addOrder($product_id, $quantity) {
    global $conn;
    $sql = "INSERT INTO orders (product_id, quantity) VALUES ('$product_id', '$quantity')";
    return $conn->query($sql);
  }
?>


<?php
  include 'database.php';

  if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Handle form submission
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    if (addOrder($product_id, $quantity)) {
      echo "Order placed successfully!";
    } else {
      echo "Error placing order.";
    }
  }

  // Get products from database
  $products = getProducts();

?>

<!DOCTYPE html>
<html>
<head>
  <title>Store</title>
  <style>
    body { font-family: Arial, sans-serif; }
    #product-list { list-style: none; padding: 0; margin: 0; }
    #product-list li { display: block; background-color: #f7f7f7; padding: 10px; border-bottom: 1px solid #ccc; }
    #product-list li:hover { background-color: #ddd; }
  </style>
</head>
<body>

<h1>Store</h1>

<ul id="product-list">
  <?php foreach ($products as $product) : ?>
    <li>
      <img src="<?php echo $product['image']; ?>" alt="<?php echo $product['name']; ?>">
      <h2><?php echo $product['name']; ?></h2>
      <p>Price: <?php echo $product['price']; ?></p>
      <form action="" method="post">
        <input type="hidden" name="product_id" value="<?php echo $product['id']; ?>">
        <input type="number" name="quantity" value="1">
        <button type="submit">Add to Cart</button>
      </form>
    </li>
  <?php endforeach; ?>
</ul>

<?php if (isset($_GET['order_id'])) : ?>
  <h2>Order Summary:</h2>
  <p>Product ID: <?php echo $_GET['order_id']; ?></p>
  <p>Quantity: <?php echo $_POST['quantity']; ?></p>
<?php endif; ?>

</body>
</html>


<!-- index.php -->
<!DOCTYPE html>
<html>
<head>
    <title>Purchase History</title>
</head>
<body>
    <h1>Purchase History</h1>
    <form action="process_purchase.php" method="post">
        <label for="product_name">Product Name:</label>
        <input type="text" id="product_name" name="product_name"><br><br>
        <label for="price">Price:</label>
        <input type="number" id="price" name="price"><br><br>
        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity"><br><br>
        <button type="submit">Make Purchase</button>
    </form>

    <?php
    // Check if the user has made a purchase before.
    $pdo = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
    $stmt = $pdo->prepare("SELECT * FROM purchases WHERE user_id = :user_id");
    $stmt->bindParam(':user_id', $_SESSION['user_id']);
    $stmt->execute();
    $purchases = $stmt->fetchAll();

    if ($purchases) {
        echo "<h2>Purchase History:</h2>";
        foreach ($purchases as $purchase) {
            echo "Product Name: " . $purchase['product_name'] . "<br>";
            echo "Price: $" . $purchase['price'] . "<br>";
            echo "Quantity: " . $purchase['quantity'] . "<br><hr>";
        }
    } else {
        echo "<h2>No purchase history yet.</h2>";
    }

    ?>
</body>
</html>


// process_purchase.php
<?php

require_once 'config.php';

$pdo = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');

$product_name = $_POST['product_name'];
$price = $_POST['price'];
$quantity = $_POST['quantity'];

$stmt = $pdo->prepare("INSERT INTO purchases (user_id, product_name, price, quantity) VALUES (:user_id, :product_name, :price, :quantity)");
$stmt->bindParam(':user_id', $_SESSION['user_id']);
$stmt->bindParam(':product_name', $product_name);
$stmt->bindParam(':price', $price);
$stmt->bindParam(':quantity', $quantity);

if ($stmt->execute()) {
    header("Location: index.php");
} else {
    echo "Error making purchase.";
}
?>


// index.php
<?php
// ...
if ($purchases) {
    echo "<h2>Purchase History:</h2>";
    foreach ($purchases as $purchase) {
        echo "Product Name: " . $purchase['product_name'] . "<br>";
        echo "Price: $" . $purchase['price'] . "<br>";
        echo "Quantity: " . $purchase['quantity'] . "<br><hr>";
    }
} else {
    echo "<h2>No purchase history yet.</h2>";
}
// ...
?>


<?php
// Configuration settings
$server = 'localhost';
$username = 'your_username';
$password = 'your_password';
$dbname = 'your_database';

// Establish database connection
$conn = new mysqli($server, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get product data from database
$query = "SELECT * FROM products";
$result = $conn->query($query);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        table {
            border-collapse: collapse;
            width: 100%;
        }
        
        th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }
    </style>
</head>

<body>
    <h1>Purchase Functionality</h1>
    
    <?php
    // Display product table
    echo "<table>";
    echo "<tr><th>Product ID</th><th>Product Name</th><th>Price</th></tr>";
    
    while ($row = $result->fetch_assoc()) {
        echo "<tr>";
        echo "<td>" . $row['product_id'] . "</td>";
        echo "<td>" . $row['product_name'] . "</td>";
        echo "<td>$" . $row['price'] . "</td>";
        echo "</tr>";
    }
    
    echo "</table>";
    
    ?>
    
    <form action="process.php" method="post">
        <label for="product_id">Select a product:</label>
        <select name="product_id" id="product_id">
            <?php
            // Get product options from database
            $query = "SELECT * FROM products";
            $result = $conn->query($query);
            
            while ($row = $result->fetch_assoc()) {
                echo "<option value='" . $row['product_id'] . "'>" . $row['product_name'] . "</option>";
            }
            ?>
        </select>
        
        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity">
        
        <button type="submit">Purchase</button>
    </form>

<?php
// Close database connection
$conn->close();
?>


<?php
// Configuration settings
$server = 'localhost';
$username = 'your_username';
$password = 'your_password';
$dbname = 'your_database';

// Establish database connection
$conn = new mysqli($server, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get product data from database based on selected product ID
$query = "SELECT * FROM products WHERE product_id = '".$_POST['product_id']."'";
$result = $conn->query($query);

$row = $result->fetch_assoc();

// Calculate total cost
$total_cost = $row['price'] * $_POST['quantity'];

// Insert purchase record into database
$query = "INSERT INTO purchases (product_id, quantity, total_cost) VALUES ('".$_POST['product_id']."', '".$_POST['quantity']."', '".$total_cost."')";
$conn->query($query);

echo "Purchase successful!";

// Close database connection
$conn->close();
?>


// database connection details
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "store";

// create a new mysqli object with the database connection parameters
$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function createUser() {
    global $conn;
    
    // get user details from form input
    $name = $_POST['name'];
    $email = $_POST['email'];

    // insert new user into database
    $sql = "INSERT INTO users (name, email) VALUES ('$name', '$email')";
    if ($conn->query($sql)) {
        echo "User created successfully!";
    } else {
        echo "Error creating user: " . $conn->error;
    }
}

function viewCart() {
    global $conn;
    
    // get the current logged in user's id
    $user_id = $_SESSION['user_id'];

    // fetch all products from cart for this user
    $sql = "SELECT p.id, p.name, c.quantity FROM cart c INNER JOIN products p ON c.product_id=p.id WHERE c.user_id='$user_id'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        echo "<table><tr><th>Product ID</th><th>Product Name</th><th>Quantity</th></tr>";
        while($row = $result->fetch_assoc()) {
            echo "<tr><td>" . $row["id"] . "</td><td>" . $row["name"] . "</td><td>" . $row["quantity"] . "</td></tr>";
        }
        echo "</table>";
    } else {
        echo "Cart is empty.";
    }
}

function purchase() {
    global $conn;
    
    // get the current logged in user's id
    $user_id = $_SESSION['user_id'];

    // fetch all products from cart for this user
    $sql = "SELECT * FROM cart WHERE user_id='$user_id'";
    $result = $conn->query($sql);

    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            // remove the product from the cart and add it to the purchase history
            $sql = "INSERT INTO purchase_history (product_id, quantity, user_id) VALUES ('$row[id]', '$row[quantity]', '$user_id')";
            if ($conn->query($sql)) {
                echo "Product purchased successfully!";
            } else {
                echo "Error purchasing product: " . $conn->error;
            }
        }

        // empty the cart after purchase
        $sql = "TRUNCATE TABLE cart";
        if ($conn->query($sql)) {
            echo "Cart emptied successfully!";
        } else {
            echo "Error emptying cart: " . $conn->error;
        }
    } else {
        echo "No products to purchase.";
    }
}

// create a session for the logged in user
session_start();

// handle user creation
if (isset($_POST['create_user'])) {
    createUser();
}

// handle viewing of cart
if (isset($_GET['view_cart'])) {
    viewCart();
}

// handle making a purchase
if (isset($_GET['purchase'])) {
    purchase();
}


<?php

// Database connection settings
$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'your_database_name';

// Create a database connection
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

// Check if the connection was successful
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get the product ID from the URL query string
$product_id = $_GET['product_id'];

// Check if a user is logged in (for security reasons)
if (!isset($_SESSION['user_id'])) {
    echo 'You must be logged in to make a purchase.';
    exit;
}

// Retrieve the product details from the database
$stmt = $conn->prepare("SELECT * FROM products WHERE id = ?");
$stmt->bind_param('i', $product_id);
$stmt->execute();
$product = $stmt->get_result()->fetch_assoc();

// Check if the product exists
if (!$product) {
    echo 'Product not found.';
    exit;
}

// Add the product to the user's cart (cart is assumed to be already created)
$stmt = $conn->prepare("INSERT INTO carts (user_id, product_id) VALUES (?, ?)");
$stmt->bind_param('ii', $_SESSION['user_id'], $product_id);
$stmt->execute();

// Update the cart quantity
$stmt = $conn->prepare("UPDATE carts SET quantity = quantity + 1 WHERE user_id = ? AND product_id = ?");
$stmt->bind_param('ii', $_SESSION['user_id'], $product_id);
$stmt->execute();

// Calculate the new total price for the order
$total_price = 0;
$stmt = $conn->prepare("SELECT * FROM carts WHERE user_id = ?");
$stmt->bind_param('i', $_SESSION['user_id']);
$stmt->execute();
$carts = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);

foreach ($carts as $cart) {
    $product_price = get_product_price($cart['product_id'], $conn);
    $total_price += $product_price * $cart['quantity'];
}

// Create a new order
$stmt = $conn->prepare("INSERT INTO orders (user_id, total_price, status) VALUES (?, ?, ?)");
$stmt->bind_param('iii', $_SESSION['user_id'], $total_price, 0); // pending status
$stmt->execute();

// Update the cart quantity and remove the product from the user's cart
$stmt = $conn->prepare("UPDATE carts SET quantity = quantity - 1 WHERE user_id = ? AND product_id = ?");
$stmt->bind_param('ii', $_SESSION['user_id'], $product_id);
$stmt->execute();
$stmt = $conn->prepare("DELETE FROM carts WHERE user_id = ? AND product_id = ?");
$stmt->bind_param('ii', $_SESSION['user_id'], $product_id);
$stmt->execute();

// Redirect to the order summary page
header('Location: order_summary.php');
exit;

// Helper function to retrieve a product's price from the database
function get_product_price($product_id, $conn) {
    $stmt = $conn->prepare("SELECT price FROM products WHERE id = ?");
    $stmt->bind_param('i', $product_id);
    $stmt->execute();
    return $stmt->get_result()->fetch_assoc()['price'];
}

?>


<?php

// Retrieve the order details from the database
$stmt = $conn->prepare("SELECT * FROM orders WHERE user_id = ?");
$stmt->bind_param('i', $_SESSION['user_id']);
$stmt->execute();
$order = $stmt->get_result()->fetch_assoc();

// Display the order summary
echo 'Order Summary:';

echo '<ul>';
echo '<li>Order ID: ' . $order['id'] . '</li>';
echo '<li>Total Price: $" . number_format($order['total_price']) . "</li>";
echo '<li>Status: Pending</li>';
echo '</ul>';

// Display the products in the order
$stmt = $conn->prepare("SELECT * FROM carts WHERE user_id = ?");
$stmt->bind_param('i', $_SESSION['user_id']);
$stmt->execute();
$carts = $stmt->get_result()->fetch_all(MYSQLI_ASSOC);

foreach ($carts as $cart) {
    echo '<h2>' . get_product_name($cart['product_id'], $conn) . '</h2>';
    echo 'Quantity: ' . $cart['quantity'] . '<br>';
}

// Helper function to retrieve a product's name from the database
function get_product_name($product_id, $conn) {
    $stmt = $conn->prepare("SELECT name FROM products WHERE id = ?");
    $stmt->bind_param('i', $product_id);
    $stmt->execute();
    return $stmt->get_result()->fetch_assoc()['name'];
}

?>


<?php
// Initialize the cart array
$cart = array();

// Function to add an item to the cart
function add_to_cart($item_id, $quantity) {
  global $cart;
  if (!isset($cart[$item_id])) {
    $cart[$item_id] = array('quantity' => 0, 'price' => 0);
  }
  $cart[$item_id]['quantity'] += $quantity;
  $cart[$item_id]['price'] = calculate_price($item_id, $quantity);
}

// Function to remove an item from the cart
function remove_from_cart($item_id) {
  global $cart;
  unset($cart[$item_id]);
}

// Function to calculate the price of an item based on its ID and quantity
function calculate_price($item_id, $quantity) {
  // Replace this with your own database query or logic to retrieve the price
  return rand(1, 100); // Example: random price between 1 and 100
}

// Function to display the cart contents
function display_cart() {
  global $cart;
  echo '<h2>Cart Contents:</h2>';
  foreach ($cart as $item_id => $item) {
    echo "Item ID: $item_id, Quantity: $item[quantity], Price: $" . $item['price'] . "<br>";
  }
}

// Function to calculate the total cost of all items in the cart
function calculate_total() {
  global $cart;
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['price'];
  }
  return $total;
}
?>


// config.php: database connection settings
<?php
$host = 'localhost';
$dbname = 'mydatabase';
$username = 'root';
$password = '';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    die('Could not connect to database');
}
?>

// add_to_cart.php: handle adding product to cart
<?php
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // sanitize input data
    $product_id = $_POST['product_id'];
    $quantity = (int)$_POST['quantity'];

    // validate quantity
    if ($quantity <= 0) {
        echo "Invalid quantity";
        exit;
    }

    // add product to cart
    $stmt = $pdo->prepare("INSERT INTO cart SET user_id = ?, product_id = ?, quantity = ?");
    $result = $stmt->execute(array($_SESSION['user_id'], $product_id, $quantity));

    if ($result) {
        echo "Product added to cart";
    } else {
        echo "Error adding product to cart";
    }
}
?>

// checkout.php: handle checkout process
<?php
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // get user's cart contents
    $stmt = $pdo->prepare("SELECT * FROM cart WHERE user_id = ?");
    $result = $stmt->execute(array($_SESSION['user_id']));
    $cart_contents = $result->fetchAll();

    // calculate total cost
    $total_cost = 0;
    foreach ($cart_contents as $item) {
        $product_price = $pdo->query("SELECT price FROM products WHERE id = ?", array($item['product_id']))->fetchColumn();
        $total_cost += (int)$product_price * $item['quantity'];
    }

    // update order status
    $stmt = $pdo->prepare("INSERT INTO orders SET user_id = ?, total_cost = ?");
    $result = $stmt->execute(array($_SESSION['user_id'], $total_cost));

    if ($result) {
        echo "Order placed successfully";
    } else {
        echo "Error placing order";
    }
}
?>


<?php

class Auth {
  private $db;

  function __construct($db) {
    $this->db = $db;
  }

  public function login($username, $password) {
    $stmt = $this->db->prepare("SELECT * FROM users WHERE username = ? AND password = ?");
    $stmt->execute([$username, hash('sha256', $password)]);
    return $stmt->fetch();
  }
}

?>


<?php

class Product {
  private $db;

  function __construct($db) {
    $this->db = $db;
  }

  public function getAllProducts() {
    $stmt = $this->db->query("SELECT * FROM products");
    return $stmt->fetchAll();
  }
}

?>


<?php

class Cart {
  private $user_id;

  function __construct($user_id) {
    $this->user_id = $user_id;
  }

  public function addProduct($product_id, $quantity) {
    // Add product to cart
    $stmt = $this->db->prepare("INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)");
    $stmt->execute([$this->user_id, $product_id, $quantity]);
  }

  public function removeProduct($product_id) {
    // Remove product from cart
    $stmt = $this->db->prepare("DELETE FROM order_items WHERE product_id = ?");
    $stmt->execute([$product_id]);
  }
}

?>


<?php

class Order {
  private $user_id;

  function __construct($user_id) {
    $this->user_id = $user_id;
  }

  public function placeOrder() {
    // Process order
    $stmt = $this->db->prepare("INSERT INTO orders (user_id, total) VALUES (?, ?)");
    $stmt->execute([$this->user_id, $total]);

    // Update cart with placed order
    $cart = new Cart($this->user_id);
  }

  public function getOrderStatus() {
    $stmt = $this->db->query("SELECT status FROM orders WHERE user_id = ?");
    return $stmt->fetch()['status'];
  }
}

?>


<?php

require_once 'auth.php';
require_once 'product.php';

$db = new PDO('mysql:host=localhost;dbname=example', 'username', 'password');

// Login functionality
$auth = new Auth($db);
if (isset($_POST['login'])) {
  $username = $_POST['username'];
  $password = $_POST['password'];
  $user = $auth->login($username, $password);
  if ($user) {
    // User logged in successfully
  } else {
    // Login failed
  }
}

// Product functionality
$product = new Product($db);

// Cart functionality
$cart = new Cart(1); // Replace with actual user ID

// Order functionality
$order = new Order(1); // Replace with actual user ID

?>

<html>
  <body>
    <!-- Login form -->
    <form action="" method="post">
      <input type="text" name="username" placeholder="Username">
      <input type="password" name="password" placeholder="Password">
      <button type="submit" name="login">Login</button>
    </form>

    <!-- Product list -->
    <?php foreach ($product->getAllProducts() as $product): ?>
      <h2><?= $product['name'] ?></h2>
      <p>Price: <?= $product['price'] ?></p>
      <button type="submit" name="add_to_cart">Add to Cart</button>
    <?php endforeach; ?>

    <!-- Cart contents -->
    <?php foreach ($cart->getProducts() as $product): ?>
      <h2><?= $product['name'] ?></h2>
      <p>Quantity: <?= $product['quantity'] ?></p>
      <button type="submit" name="remove_from_cart">Remove from Cart</button>
    <?php endforeach; ?>

    <!-- Order status -->
    <p>Order Status: <?= $order->getOrderStatus() ?></p>

    <!-- Place order button -->
    <button type="submit" name="place_order">Place Order</button>
  </body>
</html>


<?php

// Configuration
require_once 'config.php';

// Get POST variables
$customer_name = $_POST['customer_name'];
$product_id = $_POST['product_id'];
$quantity = $_POST['quantity'];

// Validate input
if (empty($customer_name) || empty($product_id) || empty($quantity)) {
    die('Error: All fields are required');
}

// Get product details from database
$product = get_product($product_id);

// Check if product exists and quantity is valid
if (!$product || $quantity < 1) {
    die('Error: Invalid product or quantity');
}

// Calculate total cost
$total = $product['price'] * $quantity;

// Create order
$order_id = create_order($customer_name, $total);

// Add order item
create_order_item($order_id, $product_id, $quantity);

// Update stock
update_stock($product_id, -$quantity);

?>


<?php

function get_product($id) {
    global $db;
    $query = "SELECT * FROM products WHERE id = '$id'";
    return mysqli_fetch_assoc(mysqli_query($db, $query));
}

function create_order($customer_name, $total) {
    global $db;
    $query = "INSERT INTO orders (customer_name, total) VALUES ('$customer_name', '$total')";
    return mysqli_insert_id($db);
}

function create_order_item($order_id, $product_id, $quantity) {
    global $db;
    $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', '$quantity')";
    return mysqli_query($db, $query);
}

function update_stock($id, $quantity) {
    global $db;
    $query = "UPDATE products SET stock = stock - '$quantity' WHERE id = '$id'";
    return mysqli_query($db, $query);
}


<?php

// Database configuration
$db = new mysqli('localhost', 'username', 'password', 'database');

?>


class Purchase {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
  }

  public function processOrder($user_id, $product_id, $quantity) {
    // Get the product price
    $stmt = $this->db->prepare('SELECT price FROM products WHERE id = :product_id');
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
    $product_price = $stmt->fetchColumn();

    // Check if the user has enough balance
    $user_balance = $this->getUserBalance($user_id);
    if ($quantity * $product_price > $user_balance) {
      return array('error' => 'Insufficient balance');
    }

    // Create a new order
    $stmt = $this->db->prepare('INSERT INTO orders (user_id, product_id, quantity, total_cost) VALUES (:user_id, :product_id, :quantity, :total_cost)');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':quantity', $quantity);
    $stmt->bindParam(':total_cost', $quantity * $product_price);
    $stmt->execute();

    // Update the user balance
    $this->updateUserBalance($user_id, -$quantity * $product_price);

    return array('success' => true);
  }

  private function getUserBalance($user_id) {
    $stmt = $this->db->prepare('SELECT balance FROM users WHERE id = :user_id');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchColumn();
  }

  private function updateUserBalance($user_id, $amount) {
    $stmt = $this->db->prepare('UPDATE users SET balance = balance + :amount WHERE id = :user_id');
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':amount', $amount);
    $stmt->execute();
  }
}


$p = new Purchase();

$user_id = 1; // Replace with actual user ID
$product_id = 1; // Replace with actual product ID
$quantity = 2;

$result = $p->processOrder($user_id, $product_id, $quantity);

if ($result['success']) {
  echo 'Order processed successfully!';
} else {
  echo 'Error: ' . $result['error'];
}


<?php

// Configuration
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$dbname = 'your_database';

// Connect to database
$conn = mysqli_connect($host, $username, $password, $dbname);

if (!$conn) {
    die('Could not connect: ' . mysqli_error($conn));
}

// Function to add product to cart
function add_product_to_cart($product_id, $quantity) {
    // Get current session data (assuming it's stored in a file)
    $session_data = $_SESSION['cart'];

    if (!isset($session_data[$product_id])) {
        $session_data[$product_id] = array('quantity' => 0);
    }

    $session_data[$product_id]['quantity'] += $quantity;

    // Save updated session data
    $_SESSION['cart'] = $session_data;
}

// Function to place order
function place_order() {
    // Get current session data (assuming it's stored in a file)
    $session_data = $_SESSION['cart'];

    // Calculate total cost
    $total_cost = 0;
    foreach ($session_data as $product_id => $item) {
        $product_info = get_product_info($product_id);
        $total_cost += $item['quantity'] * $product_info['price'];
    }

    // Insert new order into database
    $order_data = array(
        'customer_name' => $_POST['customer_name'],
        'total_cost' => $total_cost,
        'status' => 'pending'
    );
    mysqli_query($conn, "INSERT INTO orders SET customer_name = '" . $order_data['customer_name'] . "', total_cost = " . $order_data['total_cost'] . ", status = 'pending'");

    // Get new order ID
    $order_id = mysqli_insert_id($conn);

    // Insert order items into database
    foreach ($session_data as $product_id => $item) {
        $product_info = get_product_info($product_id);
        mysqli_query($conn, "INSERT INTO order_items SET order_id = " . $order_id . ", product_id = '" . $product_id . "', quantity = " . $item['quantity']);
    }

    // Clear cart session data
    $_SESSION['cart'] = array();
}

// Function to get product info
function get_product_info($product_id) {
    $result = mysqli_query($conn, "SELECT * FROM products WHERE id = '" . $product_id . "'");
    return mysqli_fetch_array($result);
}

?>


// db.php (connection settings and database functions)

<?php

class Database {
  private $host;
  private $database;
  private $username;
  private $password;

  function __construct() {
    $this->host = 'localhost';
    $this->database = 'mydatabase';
    $this->username = 'root';
    $this->password = '';
  }

  function connect() {
    $conn = new PDO('mysql:host=' . $this->host . ';dbname=' . $this->database, $this->username, $this->password);
    return $conn;
  }
}

// purchase.php (purchase functionality)

<?php

require 'db.php';

function addProductToCart($productId) {
  global $session;

  if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
  }

  if (!in_array($productId, $_SESSION['cart'])) {
    $_SESSION['cart'][] = $productId;
  }
}

function viewCart() {
  global $session;

  $products = array();

  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $productId) {
      $product = getProduct($productId);
      $products[] = $product;
    }
  }

  return $products;
}

function checkout() {
  global $session;

  // Get the customer's details
  $customerName = $_POST['customer_name'];
  $email = $_POST['customer_email'];

  // Create a new order
  $order = array(
    'customer_id' => addCustomer($customerName, $email),
    'total' => calculateTotal(),
    'status' => 'pending'
  );

  // Add the order to the database
  insertOrder($order);

  // Process each item in the cart
  foreach (viewCart() as $product) {
    insertOrderItem($product['id'], $_SESSION['cart'][$product['id']], $order['id']);
  }

  // Clear the cart
  unset($_SESSION['cart']);

  return $order;
}

function calculateTotal() {
  global $session;

  $total = 0;

  if (isset($_SESSION['cart'])) {
    foreach ($_SESSION['cart'] as $productId) {
      $product = getProduct($productId);
      $total += $product['price'];
    }
  }

  return $total;
}

function getProduct($id) {
  global $db;

  $stmt = $db->prepare('SELECT * FROM products WHERE id = :id');
  $stmt->bindParam(':id', $id);
  $stmt->execute();
  $product = $stmt->fetch(PDO::FETCH_ASSOC);

  return $product;
}

function addCustomer($name, $email) {
  global $db;

  $stmt = $db->prepare('INSERT INTO customers (name, email) VALUES (:name, :email)');
  $stmt->bindParam(':name', $name);
  $stmt->bindParam(':email', $email);
  $stmt->execute();

  return $db->lastInsertId();
}

function insertOrder($order) {
  global $db;

  $stmt = $db->prepare('INSERT INTO orders (customer_id, total, status) VALUES (:customer_id, :total, :status)');
  $stmt->bindParam(':customer_id', $order['customer_id']);
  $stmt->bindParam(':total', $order['total']);
  $stmt->bindParam(':status', $order['status']);
  $stmt->execute();

  return $db->lastInsertId();
}

function insertOrderItem($productId, $quantity, $orderId) {
  global $db;

  $stmt = $db->prepare('INSERT INTO order_items (product_id, quantity, order_id) VALUES (:product_id, :quantity, :order_id)');
  $stmt->bindParam(':product_id', $productId);
  $stmt->bindParam(':quantity', $quantity);
  $stmt->bindParam(':order_id', $orderId);
  $stmt->execute();
}

// example usage
if (isset($_POST['add_to_cart'])) {
  addProductToCart($_POST['id']);
}

if (isset($_POST['checkout'])) {
  $order = checkout();
  echo json_encode($order);
}


// config.php - database connection settings
$host = 'localhost';
$dbname = 'store';
$username = 'root';
$password = '';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}

// Authentication
function authenticate($username, $password) {
    global $pdo;
    $stmt = $pdo->prepare('SELECT * FROM users WHERE username = :username AND password = :password');
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':password', $password);
    $stmt->execute();
    return $stmt->fetch();
}

// Product listing
function getProducts() {
    global $pdo;
    $stmt = $pdo->prepare('SELECT * FROM products');
    $stmt->execute();
    return $stmt->fetchAll();
}

// Add product to cart
function addProductToCart($userId, $productId) {
    global $pdo;
    $stmt = $pdo->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES ((SELECT id FROM orders WHERE user_id = :userId), :product_id, 1)');
    $stmt->bindParam(':userId', $userId);
    $stmt->bindParam(':product_id', $productId);
    $stmt->execute();
}

// Make a purchase
function makePurchase($userId, $products) {
    global $pdo;
    // Calculate total price
    $total = 0;
    foreach ($products as $product) {
        $total += $product['price'] * $product['quantity'];
    }

    // Create order
    $stmt = $pdo->prepare('INSERT INTO orders (user_id, total) VALUES (:userId, :total)');
    $stmt->bindParam(':userId', $userId);
    $stmt->bindParam(':total', $total);
    $stmt->execute();

    // Get the order ID
    $orderId = $pdo->lastInsertId();

    // Update quantities in products table
    foreach ($products as $product) {
        $stmt = $pdo->prepare('UPDATE products SET quantity = quantity - :quantity WHERE id = :product_id');
        $stmt->bindParam(':quantity', $product['quantity']);
        $stmt->bindParam(':product_id', $product['id']);
        $stmt->execute();
    }
}

// Example usage
if (isset($_POST['username']) && isset($_POST['password'])) {
    // Authentication
    $user = authenticate($_POST['username'], $_POST['password']);
    if ($user) {
        echo "Welcome, " . $_POST['username'] . "!";
    } else {
        echo "Invalid username or password.";
    }
}

if (isset($_GET['product_id'])) {
    // Add product to cart
    addProductToCart($userId, $_GET['product_id']);
}

if (isset($_POST['make_purchase'])) {
    // Make a purchase
    $products = array();
    foreach ($_POST['products'] as $productId => $quantity) {
        $stmt = $pdo->prepare('SELECT * FROM products WHERE id = :product_id');
        $stmt->bindParam(':product_id', $productId);
        $stmt->execute();
        $product = $stmt->fetch();
        $products[] = array(
            'id' => $product['id'],
            'price' => $product['price'],
            'quantity' => $quantity
        );
    }
    makePurchase($userId, $products);
}

// Product listing
$products = getProducts();

// Display products
foreach ($products as $product) {
    echo '<h2>' . $product['name'] . '</h2>';
    echo '<p>Price: ' . $product['price'] . '</p>';
    echo '<form action="" method="post">';
    echo '<input type="hidden" name="product_id" value="' . $product['id'] . '">';
    echo '<button type="submit">Add to cart</button>';
    echo '</form>';
}


<?php
session_start();

require_once 'dbconnect.php';

if (isset($_POST['username']) && isset($_POST['password'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];

    $query = "SELECT * FROM users WHERE username='$username'";
    $result = mysqli_query($conn, $query);
    if ($row = mysqli_fetch_assoc($result)) {
        if (password_verify($password, $row['password'])) {
            $_SESSION['user_id'] = $row['id'];
            header('Location: products.php');
            exit;
        }
    }
}

?>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <label>Username:</label>
    <input type="text" name="username"><br><br>
    <label>Password:</label>
    <input type="password" name="password"><br><br>
    <input type="submit" value="Login">
</form>


<?php
require_once 'dbconnect.php';

if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

$query = "SELECT * FROM products";
$result = mysqli_query($conn, $query);
$products = array();
while ($row = mysqli_fetch_assoc($result)) {
    $products[] = $row;
}
?>

<h1>Products</h1>

<ul>
    <?php foreach ($products as $product) { ?>
        <li>
            <?= $product['name'] ?>: $<?= number_format($product['price'], 2) ?>
            <form action="" method="post">
                <input type="hidden" name="product_id" value="<?= $product['id'] ?>">
                <label>Quantity:</label>
                <select name="quantity">
                    <?php for ($i = 1; $i <= $product['quantity']; $i++) { ?>
                        <option value="<?= $i ?>"><?= $i ?></option>
                    <?php } ?>
                </select>
                <input type="submit" value="Add to Cart">
            </form>
        </li>
    <?php } ?>
</ul>

<?php if (isset($_POST['product_id']) && isset($_POST['quantity'])) { ?>
    <?= $_POST['product_id'] ?>: <?= $_POST['quantity'] ?>
<?php } ?>


<?php
require_once 'dbconnect.php';

if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

$query = "SELECT * FROM orders WHERE user_id=".$_SESSION['user_id'];
$result = mysqli_query($conn, $query);
$orders = array();
while ($row = mysqli_fetch_assoc($result)) {
    $orders[] = $row;
}
?>

<h1>Cart</h1>

<ul>
    <?php foreach ($orders as $order) { ?>
        <li>
            <?= $order['id'] ?>: <?= date('Y-m-d', strtotime($order['order_date'])) ?> - Total: $<?= number_format($order['total'], 2) ?>
        </li>
    <?php } ?>
</ul>

<form action="" method="post">
    <input type="submit" value="Checkout">
</form>


<?php
require_once 'dbconnect.php';

if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Simulated payment processing
    $payment_status = 'paid';

    $query = "INSERT INTO orders (user_id, order_date, total)
              VALUES (".$_SESSION['user_id'].", NOW(), '".$_POST['total']."')";
    mysqli_query($conn, $query);

    echo 'Order placed successfully!';
}

?>


<?php
$conn = new mysqli('localhost', 'username', 'password', 'store');

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


// config.php
$host = 'localhost';
$dbname = 'mydatabase';
$username = 'root';
$password = '';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// functions.php
function addProduct($name, $price) {
    global $pdo;
    
    try {
        $stmt = $pdo->prepare("INSERT INTO products (name, price) VALUES (:name, :price)");
        $stmt->bindParam(':name', $name);
        $stmt->bindParam(':price', $price);
        $stmt->execute();
        
        return true;
    } catch (PDOException $e) {
        echo 'Error adding product: ' . $e->getMessage();
        return false;
    }
}

function purchaseProduct($userId, $productId, $quantity) {
    global $pdo;
    
    try {
        // Check if user has sufficient balance
        $stmt = $pdo->prepare("SELECT * FROM users WHERE id = :id");
        $stmt->bindParam(':id', $userId);
        $stmt->execute();
        $user = $stmt->fetch(PDO::FETCH_ASSOC);
        
        if ($user['balance'] < ($quantity * getProductName($productId)['price'])) {
            echo 'Insufficient balance';
            return false;
        }
        
        // Subtract product quantity
        $product = getProductName($productId);
        $stmt = $pdo->prepare("UPDATE products SET quantity = quantity - :quantity WHERE id = :id");
        $stmt->bindParam(':quantity', $quantity);
        $stmt->bindParam(':id', $productId);
        $stmt->execute();
        
        // Create order
        $order = array(
            'user_id' => $userId,
            'product_id' => $productId,
            'quantity' => $quantity,
            'total_cost' => ($quantity * $product['price'])
        );
        
        $stmt = $pdo->prepare("INSERT INTO orders (user_id, product_id, quantity, total_cost) VALUES (:user_id, :product_id, :quantity, :total_cost)");
        $stmt->bindParam(':user_id', $order['user_id']);
        $stmt->bindParam(':product_id', $order['product_id']);
        $stmt->bindParam(':quantity', $order['quantity']);
        $stmt->bindParam(':total_cost', $order['total_cost']);
        $stmt->execute();
        
        // Update user balance
        updateBalance($userId, -$order['total_cost']);
        
        return true;
    } catch (PDOException $e) {
        echo 'Error purchasing product: ' . $e->getMessage();
        return false;
    }
}

function getProductName($id) {
    global $pdo;
    
    try {
        $stmt = $pdo->prepare("SELECT * FROM products WHERE id = :id");
        $stmt->bindParam(':id', $id);
        $stmt->execute();
        return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        echo 'Error getting product name: ' . $e->getMessage();
        return array();
    }
}

function updateBalance($userId, amount) {
    global $pdo;
    
    try {
        $stmt = $pdo->prepare("UPDATE users SET balance = balance + :amount WHERE id = :id");
        $stmt->bindParam(':amount', $amount);
        $stmt->bindParam(':id', $userId);
        $stmt->execute();
        
        return true;
    } catch (PDOException $e) {
        echo 'Error updating balance: ' . $e->getMessage();
        return false;
    }
}


if (isset($_POST['purchase'])) {
    $productId = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    
    if ($userId = purchaseProduct($userId, $productId, $quantity)) {
        echo 'Product purchased successfully!';
    } else {
        echo 'Error purchasing product';
    }
}


<?php
// Include the configuration file
require_once 'config.php';

// Initialize the session and database connection
session_start();
$db = new PDO('mysql:host=localhost;dbname=shop', $username, $password);

// Check if user is logged in
if (!isset($_SESSION['username'])) {
    header('Location: login.php');
    exit;
}

// Get the item ID from the URL parameter
$item_id = $_GET['item'];

// Select the item from the database
$query = "SELECT * FROM items WHERE id = :id";
$stmt = $db->prepare($query);
$stmt->bindParam(':id', $item_id);
$stmt->execute();
$item = $stmt->fetch();

// Check if the user has already purchased the item
if (in_array($item['id'], $_SESSION['purchased_items'])) {
    echo 'You have already purchased this item.';
} else {
    // Add the item to the cart and update the session
    $_SESSION['cart'][] = array('item' => $item, 'quantity' => 1);
    $_SESSION['total'] += $item['price'];
    $_SESSION['purchased_items'][] = $item['id'];

    // Redirect to the payment page
    header('Location: payment.php');
}
?>


<?php
// Include the configuration file
require_once 'config.php';

// Initialize the session and database connection
session_start();
$db = new PDO('mysql:host=localhost;dbname=shop', $username, $password);

// Check if user has items in their cart
if (empty($_SESSION['cart'])) {
    header('Location: index.php');
    exit;
}

// Process payment using a third-party service like PayPal or Stripe
// This is a simplified example and you should replace it with your actual payment processing code
$payment_status = 'paid';
$total = $_SESSION['total'];
foreach ($_SESSION['cart'] as $item) {
    $query = "INSERT INTO orders (user_id, item_id, quantity, price) VALUES (:user_id, :item_id, :quantity, :price)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $_SESSION['username']);
    $stmt->bindParam(':item_id', $item['id']);
    $stmt->bindParam(':quantity', 1);
    $stmt->bindParam(':price', $item['price']);
    $stmt->execute();
}

// Update the user's balance and update the item quantity
$query = "UPDATE users SET balance = balance - :total WHERE username = :username";
$stmt = $db->prepare($query);
$stmt->bindParam(':total', $_SESSION['total']);
$stmt->bindParam(':username', $_SESSION['username']);
$stmt->execute();

// Remove items from the cart and purchased items list
$_SESSION['cart'] = array();
unset($_SESSION['purchased_items']);

// Display a confirmation message
echo 'Payment successful!';
?>


<?php
$database_config = array(
    'host' => 'localhost',
    'username' => 'your_username',
    'password' => 'your_password',
    'database' => 'shop'
);

$username = $database_config['username'];
$password = $database_config['password'];
?>


class Cart {
    private $items;

    public function __construct() {
        $this->items = array();
    }

    // Add an item to the cart
    public function add_item($product_id, $quantity) {
        if (isset($this->items[$product_id])) {
            $this->items[$product_id] += $quantity;
        } else {
            $this->items[$product_id] = $quantity;
        }
    }

    // Remove an item from the cart
    public function remove_item($product_id) {
        if (isset($this->items[$product_id])) {
            unset($this->items[$product_id]);
        }
    }

    // Get the contents of the cart
    public function get_items() {
        return $this->items;
    }

    // Calculate the total cost of the items in the cart
    public function calculate_total_cost() {
        $total = 0;
        foreach ($this->items as $product_id => $quantity) {
            // Assuming we have a database or data source for product prices
            $price = get_product_price($product_id);
            $total += $price * $quantity;
        }
        return $total;
    }

    // Print out the contents of the cart and total cost
    public function print_cart() {
        echo "Cart Contents:
";
        foreach ($this->items as $product_id => $quantity) {
            echo "$product_id: $quantity
";
        }
        echo "Total Cost: $" . $this->calculate_total_cost() . "
";
    }
}


// Create a new cart
$cart = new Cart();

// Add some products to the cart
$cart->add_item("product1", 2);
$cart->add_item("product2", 3);

// Print out the contents of the cart and total cost
$cart->print_cart();


// Assuming we have an HTML form with the following fields:
// <input type="text" name="product_id" value="...">
// <input type="number" name="quantity" value="...">

if (isset($_POST['add_to_cart'])) {
    $cart = new Cart();
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Validate the input
    if (!empty($product_id) && is_numeric($quantity)) {
        $cart->add_item($product_id, $quantity);
    } else {
        echo "Invalid input!";
    }
}


// process_payment.php
<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $name = $_POST["name"];
    $email = $_POST["email"];
    $amount = $_POST["amount"];

    // Simulate payment processing (replace with actual payment gateway API calls)
    $payment_status = true;  // Replace this with your own logic for determining payment success
    if ($payment_status) {
        echo "Payment successful!";
    } else {
        echo "Payment failed.";
    }
}
?>


// process_payment.php (continued from above)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // ... (previous code remains the same)

    if ($payment_status) {
        $to = $_POST["email"];
        $subject = "Payment Confirmation";
        $message = "Thank you for making a payment of $" . $_POST["amount"];

        mail($to, $subject, $message);
        echo "Email sent to user.";
    }
}
?>


// process_payment.php (continued from above)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // ... (previous code remains the same)

    if ($payment_status) {
        // Connect to your MySQL database using PDO or mysqli
        $db = new PDO("mysql:host=localhost;dbname=your_database", "username", "password");

        $query = "INSERT INTO purchases (name, email, amount)
                  VALUES (:name, :email, :amount)";
        $stmt = $db->prepare($query);
        $stmt->bindParam(":name", $_POST["name"]);
        $stmt->bindParam(":email", $_POST["email"]);
        $stmt->bindParam(":amount", $_POST["amount"]);

        if ($stmt->execute()) {
            echo "Purchase recorded in database.";
        } else {
            echo "Error recording purchase.";
        }
    }
}
?>


/**
 * Process user's purchase details.
 *
 * @param string  $name     User's name.
 * @param string  $email    User's email address.
 * @param float   $amount   Amount of payment made by the user.
 *
 * @return bool Whether payment was successful or not.
 */
function process_purchase($name, $email, $amount)
{
    // ...
}


// db.php: database connection settings
<?php
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "shop";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>

// index.php: purchase functionality
<?php
require 'db.php';

if (isset($_POST['purchase'])) {
  // Get product ID and quantity from form submission
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  // Check if product exists and user has sufficient balance
  $sql = "SELECT price FROM products WHERE id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("i", $product_id);
  $stmt->execute();
  $result = $stmt->get_result();

  while ($row = $result->fetch_assoc()) {
    if ($row['price'] > $_SESSION['balance']) {
      echo "Insufficient balance";
      exit;
    }
  }

  // Get user's ID from session
  $user_id = $_SESSION['id'];

  // Insert order item into database
  $sql = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("iii", $order_id, $product_id, $quantity);
  $stmt->execute();

  // Update user's balance and total
  $balance = $_SESSION['balance'] - $row['price'];
  $total = $total + $row['price'];

  $sql = "UPDATE users SET balance = ? WHERE id = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("di", $balance, $user_id);
  $stmt->execute();

  // Create new order
  $order_sql = "INSERT INTO orders (customer_name, total) VALUES (?, ?)";
  $order_stmt = $conn->prepare($order_sql);
  $order_stmt->bind_param("si", $customer_name, $total);
  $order_stmt->execute();
}
?>

// index.php: HTML form
<form action="" method="post">
  <input type="hidden" name="product_id" value="<?php echo $_GET['id']; ?>">
  <label>Quantity:</label>
  <input type="number" name="quantity"><br><br>
  <input type="submit" name="purchase" value="Purchase">
</form>


<?php

// Database connection settings
$host = 'localhost';
$username = 'root';
$password = '';
$dbname = 'store';

// Connect to database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get product ID from URL parameter
$product_id = $_GET['product_id'];

// Check if product exists in database
$query = "SELECT * FROM products WHERE id = '$product_id'";
$result = $conn->query($query);

if ($result->num_rows == 0) {
    echo 'Product not found';
    exit;
}

// Get product details from database
$product_data = $result->fetch_assoc();

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

// Get user's current cart contents
$user_cart = get_user_cart_contents($_SESSION['user_id']);

// Add product to cart
add_to_cart($product_data, $user_cart);

// Redirect to cart page
header('Location: cart.php');
exit;

function add_to_cart($product_data, &$user_cart) {
    // Check if product is already in cart
    foreach ($user_cart as $cart_item) {
        if ($cart_item['id'] == $product_data['id']) {
            // Increase quantity of existing item
            $cart_item['quantity'] += 1;
            return;
        }
    }

    // Add new item to cart
    $new_item = array(
        'id' => $product_data['id'],
        'name' => $product_data['name'],
        'price' => $product_data['price'],
        'quantity' => 1,
    );
    $user_cart[] = $new_item;
}

function get_user_cart_contents($user_id) {
    // Query database to retrieve user's cart contents
    $query = "SELECT * FROM cart WHERE user_id = '$user_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        return $result->fetch_assoc();
    } else {
        return array();
    }
}

// Close database connection
$conn->close();

?>


<?php

// Get user's cart contents from session
$user_cart = $_SESSION['user_cart'];

// Display cart contents
echo '<h1>Cart Contents:</h1>';
echo '<table border="1">';
echo '<tr><th>Product ID</th><th>Quantity</th></tr>';

foreach ($user_cart as $cart_item) {
    echo '<tr><td>' . $cart_item['id'] . '</td><td>' . $cart_item['quantity'] . '</td></tr>';
}

echo '</table>';

// Display total cost
$total_cost = 0;
foreach ($user_cart as $cart_item) {
    $total_cost += $cart_item['price'] * $cart_item['quantity'];
}
echo '<p>Total Cost: $" . $total_cost . "</p>";

?>


<form action="process_order.php" method="post">
    <label>Product Name:</label>
    <input type="text" name="product_name"><br><br>
    <label>Quantity:</label>
    <input type="number" name="quantity"><br><br>
    <label>Total Price:</label>
    <input type="number" name="total_price"><br><br>
    <input type="submit" value="Place Order">
</form>


<?php

// Define the product prices (for demonstration purposes only)
$products = array(
    "Product A" => 10.99,
    "Product B" => 9.99,
    "Product C" => 12.99
);

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Retrieve form data
    $product_name = $_POST["product_name"];
    $quantity = $_POST["quantity"];
    $total_price = $_POST["total_price"];

    // Validate input data
    if (empty($product_name) || empty($quantity) || empty($total_price)) {
        echo "Error: Please fill in all fields.";
    } elseif (!is_numeric($quantity) || !is_numeric($total_price)) {
        echo "Error: Quantity and total price must be numbers.";
    } elseif ($quantity <= 0 || $total_price <= 0) {
        echo "Error: Quantity and total price must be positive numbers.";
    }

    // Calculate the actual total price based on product prices
    foreach ($products as $product => $price) {
        if (strtolower($product_name) == strtolower($product)) {
            $actual_total_price = $price * $quantity;
            break;
        }
    }

    // Update the total price in the form data
    $_POST["total_price"] = $actual_total_price;

    // Process order (insert into database, send email, etc.)
    echo "Order processed successfully!";
} else {
    // Display an error message if the form is not submitted via POST
    echo "Error: Form must be submitted via POST.";
}

?>


<?php

// Define the database connection parameters (replace with your actual credentials)
$db_host = "localhost";
$db_username = "your_username";
$db_password = "your_password";
$db_name = "your_database";

// Create a connection to the database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

// Check if the connection is successful
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Retrieve form data
$product_name = $_POST["product_name"];
$quantity = $_POST["quantity"];
$total_price = $_POST["total_price"];

// Insert order data into the database
$sql = "INSERT INTO orders (product_name, quantity, total_price) VALUES ('$product_name', '$quantity', '$total_price')";
if ($conn->query($sql) === TRUE) {
    echo "Order inserted successfully!";
} else {
    echo "Error: " . $sql . "<br>" . $conn->error;
}

// Close the database connection
$conn->close();

?>


<?php

// Define the email settings (replace with your actual credentials)
$to_email = "customer@example.com";
$subject = "Order Confirmation";
$body = "Dear customer, thank you for placing an order with us. Your order details are as follows:

Product Name: $_POST[product_name]
Quantity: $_POST[quantity]
Total Price: $_POST[total_price]";

// Send the email using PHP's mail function
mail($to_email, $subject, $body);

?>


// db.inc.php (database connection settings)
<?php
$host = 'localhost';
$dbname = 'shop';
$username = 'root';
$password = '';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}

// functions.php (functions for interacting with database)
<?php
require 'db.inc.php';

function add_item_to_cart($user_id, $item_id) {
    global $pdo;
    $stmt = $pdo->prepare("INSERT INTO cart (user_id, item_id, quantity) VALUES (:user_id, :item_id, 1)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':item_id', $item_id);
    return $stmt->execute();
}

function update_cart($cart_id, $quantity) {
    global $pdo;
    $stmt = $pdo->prepare("UPDATE cart SET quantity = :quantity WHERE id = :cart_id");
    $stmt->bindParam(':quantity', $quantity);
    $stmt->bindParam(':cart_id', $cart_id);
    return $stmt->execute();
}

function remove_item_from_cart($cart_id) {
    global $pdo;
    $stmt = $pdo->prepare("DELETE FROM cart WHERE id = :cart_id");
    $stmt->bindParam(':cart_id', $cart_id);
    return $stmt->execute();
}

function checkout($user_id) {
    global $pdo;
    $items = array();
    $stmt = $pdo->query("SELECT * FROM cart WHERE user_id = :user_id", PDO::FETCH_ASSOC);
    foreach ($stmt as $row) {
        $items[] = array('item_id' => $row['item_id'], 'quantity' => $row['quantity']);
    }

    // process payment and update inventory
    echo "Payment processed successfully";
}

// cart.inc.php (functions for interacting with the user's cart)
<?php
require 'db.inc.php';

function get_cart($user_id) {
    global $pdo;
    $stmt = $pdo->query("SELECT * FROM cart WHERE user_id = :user_id", PDO::FETCH_ASSOC);
    return $stmt;
}

// index.php (front-end for interacting with the cart)
<?php
require 'cart.inc.php';

if (isset($_GET['action'])) {
    if ($_GET['action'] == 'add') {
        add_item_to_cart(1, 1); // replace 1 with the actual user ID
    } elseif ($_GET['action'] == 'update') {
        update_cart(1, $_POST['quantity']); // replace 1 with the actual cart ID
    } elseif ($_GET['action'] == 'remove') {
        remove_item_from_cart($_GET['id']);
    }
}

$cart = get_cart(1); // replace 1 with the actual user ID

if (isset($_POST['checkout'])) {
    checkout(1); // replace 1 with the actual user ID
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cart</title>
</head>
<body>

<h1>Cart</h1>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <?php foreach ($cart as $row) { ?>
        <p>Item: <?php echo $row['name']; ?> (Quantity: <?php echo $row['quantity']; ?>)</p>
        <input type="hidden" name="cart_id[]" value="<?php echo $row['id']; ?>">
        <input type="number" name="quantity[]" value="<?php echo $row['quantity']; ?>">
    <?php } ?>
    <button type="submit" name="checkout">Checkout</button>
</form>

<?php if (isset($_GET['action']) && $_GET['action'] == 'remove') { ?>
    <p>Item removed from cart!</p>
<?php } ?>

</body>
</html>


<?php
require_once 'config.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $customerName = $_POST['name'];
    $email = $_POST['email'];

    // Process the purchase and update the database
    purchase($customerName, $email);
}

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Purchase Functionality</title>
</head>
<body>

<form action="" method="post">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name"><br><br>
    <label for="email">Email:</label>
    <input type="email" id="email" name="email"><br><br>

    <?php
    $products = getProducts();
    foreach ($products as $product) {
        echo "<p><b>" . $product['name'] . ":</b> $" . $product['price'] . "</p>";
    }
    ?>

    <label for="products">Select products:</label>
    <?php
    $selectedProducts = $_POST['products'];
    if ($selectedProducts) {
        foreach ($selectedProducts as $selectedProduct) {
            echo "<input type='checkbox' name='products[]' value='" . $selectedProduct . "'> " . $product[$selectedProduct]['name'] . "</p>";
        }
    } else {
        foreach ($products as $product) {
            echo "<input type='checkbox' name='products[]' value='" . $product['id'] . "'>" . $product['name'] . "</p>";
        }
    }
    ?>

    <input type="submit" value="Purchase">
</form>

<?php
if (isset($_GET['success'])) {
    echo "<p style='color: green;'>Order placed successfully!</p>";
} elseif (isset($_GET['error'])) {
    echo "<p style='color: red;'>An error occurred while processing your order.</p>";
}
?>

</body>
</html>

<?php
function getProducts() {
    global $db;
    $sql = "SELECT * FROM products";
    return mysqli_query($db, $sql)->fetch_all(MYSQLI_ASSOC);
}

function purchase($customerName, $email) {
    global $db;
    try {
        // Insert customer into database if not already existing
        $sql = "INSERT INTO customers (name, email) VALUES ('$customerName', '$email')";
        mysqli_query($db, $sql);

        // Get the last inserted customer ID
        $customerId = mysqli_insert_id($db);

        // Get selected products from form data
        $products = $_POST['products'];
        if (!$products) {
            throw new Exception('No products selected');
        }

        // Insert order into database
        foreach ($products as $product) {
            $sql = "INSERT INTO orders (customer_id, product_id) VALUES ('$customerId', '$product')";
            mysqli_query($db, $sql);
        }

        header('Location: ?success=1');
    } catch (Exception $e) {
        echo 'An error occurred while processing your order.';
        die();
    }
}

?>


<?php
$db = new mysqli('localhost', 'username', 'password', 'database_name');

if ($db->connect_errno) {
    exit("Could not connect to database");
}
?>


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

// Connect to database
$conn = new mysqli($host, $username, $password, $dbname);

// Check for errors
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to get products from database
function get_products() {
    global $conn;
    $sql = "SELECT * FROM products";
    $result = $conn->query($sql);
    if (!$result) {
        return false;
    }
    return $result;
}

// Function to process purchase
function process_purchase($product_id, $quantity) {
    global $conn;
    // Check if product exists
    $sql = "SELECT * FROM products WHERE id = '$product_id'";
    $result = $conn->query($sql);
    if (!$result || $result->num_rows == 0) {
        return false; // Product not found
    }
    
    // Get product price
    $row = $result->fetch_assoc();
    $price = $row['price'];
    
    // Check if quantity is valid
    if ($quantity <= 0) {
        return false; // Invalid quantity
    }
    
    // Insert order into database
    $sql = "INSERT INTO orders (customer_name, product_id, quantity) VALUES ('", '', $product_id, ", ", $quantity, ")";
    if (!$conn->query($sql)) {
        return false; // Error inserting order
    }
    
    // Update product stock
    $new_stock = $row['stock'] - $quantity;
    $sql = "UPDATE products SET stock = '$new_stock' WHERE id = '$product_id'";
    if (!$conn->query($sql)) {
        return false; // Error updating product stock
    }
    
    return true; // Purchase processed successfully
}

// Display form for customer to input quantity
?>
<html>
<head>
    <title>Purchase Product</title>
</head>
<body>
    <?php
    $products = get_products();
    if ($products) {
        ?>
        <form action="" method="post">
            <select name="product_id" required>
                <?php
                while ($row = $products->fetch_assoc()) {
                    echo "<option value='" . $row['id'] . "'>" . $row['name'] . "</option>";
                }
                ?>
            </select>
            Quantity: <input type="number" name="quantity" min="1">
            <input type="submit" name="purchase" value="Purchase">
        </form>
        <?php
    } else {
        echo "Error getting products.";
    }
    
    // Process purchase form submission
    if (isset($_POST['purchase'])) {
        $product_id = $_POST['product_id'];
        $quantity = $_POST['quantity'];
        if (process_purchase($product_id, $quantity)) {
            echo "Purchase successful!";
        } else {
            echo "Error processing purchase.";
        }
    }
    ?>
</body>
</html>


// config.php
<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>

// index.php
<?php
include 'config.php';

if (isset($_POST['buy'])) {
  // get user input
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  // validate inputs
  if (!ctype_digit($product_id) || !ctype_digit($quantity)) {
    echo "Invalid product ID or quantity";
    return;
  }

  // check if product exists
  $sql = "SELECT * FROM products WHERE id = '$product_id'";
  $result = $conn->query($sql);

  if (!$result->num_rows > 0) {
    echo "Product not found";
    return;
  }

  // get product price and calculate total price
  $row = $result->fetch_assoc();
  $price = $row['price'];
  $total_price = $price * $quantity;

  // check if user has sufficient balance (in this case, we're assuming a balance of 0)
  $user_id = $_SESSION['id']; // you'll need to implement session management for user ID
  if ($total_price > 0) {
    echo "Insufficient balance";
    return;
  }

  // insert order into database
  $sql = "INSERT INTO orders (user_id, product_id, quantity, total_price)
          VALUES ('$user_id', '$product_id', '$quantity', '$total_price')";
  if ($conn->query($sql) === TRUE) {
    echo "Order placed successfully!";
  } else {
    echo "Error: " . $sql->error;
  }
}
?>

<!-- html form -->
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="hidden" name="product_id" value="<?php echo isset($_POST['product_id']) ? $_POST['product_id'] : ''; ?>">
  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity" min="1">
  <button type="submit" name="buy">Buy Now</button>
</form>


<?php

// Set up database connection
$db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');

// Check if cart is empty or not
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Get products and display them on the page
$stmt = $db->prepare('SELECT * FROM products');
$stmt->execute();
$products = $stmt->fetchAll();

?>

<form action="" method="post">
    <?php foreach ($products as $product): ?>
        <input type="checkbox" name="cart[]" value="<?php echo $product['id']; ?>">
        <label><?php echo $product['name']; ?></label>
        <br>
    <?php endforeach; ?>
    
    <button type="submit">Add to Cart</button>
</form>

<?php
// If form is submitted, redirect to cart page
if (isset($_POST['cart'])) {
    header('Location: cart.php');
}
?>


<?php

// Set up database connection
$db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');

// Check if user is logged in
if (!isset($_SESSION['customer_id'])) {
    header('Location: login.php');
}

// Get products and display them on the page
$stmt = $db->prepare('SELECT * FROM products WHERE id IN (':id')');
foreach ($_SESSION['cart'] as $product_id) {
    $stmt->bindParam(':id', $product_id);
    $stmt->execute();
}
$products = $stmt->fetchAll();

?>

<form action="" method="post">
    <?php foreach ($products as $product): ?>
        <input type="checkbox" name="cart[]" value="<?php echo $product['id']; ?>">
        <label><?php echo $product['name']; ?></label>
        <br>
    <?php endforeach; ?>
    
    <button type="submit">Update Cart</button>
</form>

<?php
// If form is submitted, process payment and update database
if (isset($_POST['cart'])) {
    // Simulate payment gateway API call
    require_once 'payment_gateway.php';
    $result = make_payment();
    if ($result) {
        // Update order in database
        foreach ($_SESSION['cart'] as $product_id) {
            $stmt = $db->prepare('INSERT INTO orders (customer_id, product_id, quantity, total) VALUES (:customer_id, :product_id, 1, :total)');
            $stmt->bindParam(':customer_id', $_SESSION['customer_id']);
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':total', get_product_price($product_id));
            $stmt->execute();
        }
    } else {
        echo 'Payment failed.';
    }
}
?>


<?php

function make_payment() {
    // Simulate payment gateway API call (replace with your actual API code)
    return true; // Replace with actual result from payment gateway API
}

function get_product_price($product_id) {
    $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
    $stmt = $db->prepare('SELECT price FROM products WHERE id=:id');
    $stmt->bindParam(':id', $product_id);
    $stmt->execute();
    return $stmt->fetchColumn();
}

?>


<?php

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get user input
    $name = $_POST['name'];
    $email = $_POST['email'];
    $password = $_POST['password'];

    // Validate user input
    $errors = array();
    if (empty($name)) {
        $errors[] = 'Name is required';
    }
    if (empty($email)) {
        $errors[] = 'Email is required';
    } else if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $errors[] = 'Invalid email format';
    }
    if (empty($password)) {
        $errors[] = 'Password is required';
    }

    // Insert user data into database
    if (count($errors) == 0) {
        $conn = new mysqli("localhost", "username", "password", "database");
        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }
        $sql = "INSERT INTO users (name, email, password)
                VALUES ('$name', '$email', '" . md5($password) . "')";

        if ($conn->query($sql) === TRUE) {
            echo "New record created successfully";
        } else {
            echo "Error: " . $sql . "<br>" . $conn->error;
        }
        $conn->close();
    } else {
        print_r($errors);
    }

}

?>

<form action="<?php echo $_SERVER["PHP_SELF"]; ?>" method="post">
  <label for="name">Name:</label><br>
  <input type="text" id="name" name="name" required><br>
  <label for="email">Email:</label><br>
  <input type="email" id="email" name="email" required><br>
  <label for="password">Password:</label><br>
  <input type="password" id="password" name="password" required><br>

  <button type="submit">Register</button>
</form>


<?php

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get user input
    $email = $_POST['email'];
    $password = $_POST['password'];

    // Validate user input
    $errors = array();
    if (empty($email)) {
        $errors[] = 'Email is required';
    } else if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $errors[] = 'Invalid email format';
    }
    if (empty($password)) {
        $errors[] = 'Password is required';
    }

    // Insert user data into database
    if (count($errors) == 0) {
        $conn = new mysqli("localhost", "username", "password", "database");
        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }
        $sql = "SELECT * FROM users WHERE email='$email' AND password='" . md5($password) . "'";

        if ($result = mysqli_query($conn, $sql)) {
            if (mysqli_num_rows($result) > 0) {
                echo "Login successful";
                // You can use the session to save user data
                $_SESSION['user_id'] = $email;
            } else {
                echo "Invalid credentials";
            }
        } else {
            echo "Error: " . $sql . "<br>" . mysqli_error($conn);
        }
        $conn->close();
    } else {
        print_r($errors);
    }

}

?>

<form action="<?php echo $_SERVER["PHP_SELF"]; ?>" method="post">
  <label for="email">Email:</label><br>
  <input type="email" id="email" name="email" required><br>
  <label for="password">Password:</label><br>
  <input type="password" id="password" name="password" required><br>

  <button type="submit">Login</button>
</form>


<?php

// Check if the user is logged in
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
}

// Get all products from database
$conn = new mysqli("localhost", "username", "password", "database");
$sql = "SELECT * FROM products";
$result = mysqli_query($conn, $sql);

?>

<form action="<?php echo $_SERVER["PHP_SELF"]; ?>" method="post">
  <?php while ($row = mysqli_fetch_assoc($result)) { ?>
    <label for="product"><?php echo $row['name']; ?></label><br>
    <input type="checkbox" id="product" name="products[]" value="<?php echo $row['id']; ?>">
    <button type="submit">Add to cart</button>

  <?php } ?>

</form>

<?php

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get user input
    $products = $_POST['products'];

    // Insert products into cart
    $conn = new mysqli("localhost", "username", "password", "database");
    for ($i = 0; $i < count($products); $i++) {
        $sql = "INSERT INTO cart (user_id, product_id) VALUES ('".$_SESSION['user_id']."', '".$_POST['products'][$i]."')";
        if (!$conn->query($sql)) {
            echo "Error: " . $sql . "<br>" . $conn->error;
        }
    }
    $conn->close();

}

?>


<?php

// Check if the user is logged in
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
}

// Get all products from cart
$conn = new mysqli("localhost", "username", "password", "database");
$sql = "SELECT * FROM cart WHERE user_id='".$_SESSION['user_id']."'";
$result = mysqli_query($conn, $sql);

?>

<form action="<?php echo $_SERVER["PHP_SELF"]; ?>" method="post">
  <?php while ($row = mysqli_fetch_assoc($result)) { ?>
    <label for="product"><?php echo getProductNameFromId($conn, $row['product_id']); ?></label><br>
    <input type="checkbox" id="product" name="products[]" value="<?php echo $row['id']; ?>">
  <?php } ?>

</form>

<?php

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get user input
    $products = $_POST['products'];

    // Insert products into order table and update cart
    $conn = new mysqli("localhost", "username", "password", "database");
    for ($i = 0; $i < count($products); $i++) {
        $sql = "INSERT INTO orders (user_id, product_id) VALUES ('".$_SESSION['user_id']."', '".$_POST['products'][$i]."')";
        if (!$conn->query($sql)) {
            echo "Error: " . $sql . "<br>" . $conn->error;
        }
        $sql = "DELETE FROM cart WHERE id='".$_POST['products'][$i]."'";
        if (!$conn->query($sql)) {
            echo "Error: " . $sql . "<br>" . $conn->error;
        }
    }
    $conn->close();

}

?>

<?php

function getProductNameFromId($conn, $productId) {
    $sql = "SELECT name FROM products WHERE id='$productId'";
    return mysqli_result($conn, $sql)->fetch_assoc()->name;
}


<?php
// Initialize the cart session variable
session_start();

// Define the products array
$products = [
    1 => ['name' => 'Product 1', 'price' => 10.99],
    2 => ['name' => 'Product 2', 'price' => 5.99],
    3 => ['name' => 'Product 3', 'price' => 7.99]
];

// Function to add product to cart
function add_to_cart($product_id, $quantity) {
    // Check if the product exists in the cart
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = ['quantity' => $quantity];
    } else {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    }
}

// Function to remove product from cart
function remove_from_cart($product_id) {
    unset($_SESSION['cart'][$product_id]);
}

// Function to update product quantity in cart
function update_quantity($product_id, $new_quantity) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
}

// Function to calculate total cost of items in cart
function calculate_total() {
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id => $product_data) {
        $total += $products[$product_id]['price'] * $product_data['quantity'];
    }
    return $total;
}

// Add a product to the cart (example usage)
// add_to_cart(1, 2);

// Display the current cart contents
echo "Current Cart Contents:
";
foreach ($_SESSION['cart'] as $product_id => $product_data) {
    echo "$product_id: {$products[$product_id]['name']} x {$product_data['quantity']} = $" . ($products[$product_id]['price'] * $product_data['quantity']) . "
";
}

// Display the total cost of items in cart
echo "Total Cost: $" . calculate_total() . "
";

?>


<?php include 'cart.php'; ?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Shopping Cart</h1>

<form action="" method="post">
    <?php foreach ($products as $product_id => $product_data) { ?>
        <p>
            <input type="checkbox" name="add_to_cart[]" value="<?php echo $product_id; ?>">
            <label for="<?php echo $product_id; ?>"><?php echo $product_data['name']; ?></label>
        </p>
    <?php } ?>

    <p>
        <button type="submit">Add to Cart</button>
    </p>
</form>

<?php if (isset($_POST['add_to_cart'])) { ?>
    <?php foreach ($_POST['add_to_cart'] as $product_id) { ?>
        add_to_cart($product_id, 1);
    <?php } ?>
<?php } ?>

<?php echo "Current Cart Contents:
"; ?>
<?php foreach ($_SESSION['cart'] as $product_id => $product_data) { ?>
    <p><?php echo "$product_id: {$products[$product_id]['name']} x {$product_data['quantity']} = $" . ($products[$product_id]['price'] * $product_data['quantity']) . "</p>
"; ?>
<?php } ?>

<p>Total Cost: <?php echo calculate_total(); ?></p>

</body>
</html>


<?php
require_once 'config.php'; // database connection settings

// form handling
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  // validate user input
  if (empty($product_id) || empty($quantity)) {
    echo "Error: Please fill in all fields.";
    exit;
  }

  // send data to purchase.php
  header('Location: purchase.php?product_id=' . $product_id . '&quantity=' . $quantity);
  exit;
}
?>
<!DOCTYPE html>
<html>
<head>
  <title>Purchase</title>
</head>
<body>
  <h1>Purchase</h1>
  <form action="" method="post">
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id"><br><br>
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity"><br><br>
    <input type="submit" value="Purchase">
  </form>
</body>
</html>


<?php
require_once 'config.php'; // database connection settings

// get product ID and quantity from URL parameters
$product_id = $_GET['product_id'];
$quantity = $_GET['quantity'];

// validate user input
if (empty($product_id) || empty($quantity)) {
  echo "Error: Invalid product ID or quantity.";
  exit;
}

// check if product exists and has enough stock
$query = "SELECT * FROM products WHERE id = '$product_id'";
$result = mysqli_query($conn, $query);
$product = mysqli_fetch_assoc($result);

if ($product['stock'] < $quantity) {
  echo "Error: Not enough stock available for this product.";
  exit;
}

// create order and update stock
$query = "
  INSERT INTO orders (user_id, order_date, total)
  VALUES ('', CURDATE(), '$quantity * " . $product['price'] . "')";

mysqli_query($conn, $query);

$query = "
  UPDATE products SET stock = stock - $quantity WHERE id = '$product_id'";
mysqli_query($conn, $query);

// create order items
for ($i = 0; $i < $quantity; $i++) {
  $query = "INSERT INTO order_items (order_id, product_id) VALUES ((SELECT MAX(id) FROM orders), '$product_id')";
  mysqli_query($conn, $query);
}

echo "Order created successfully!";
?>


<?php
// database connection settings
$conn = new mysqli('localhost', 'username', 'password', 'database');

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}
?>


<?php
defined('DB_HOST') or define('DB_HOST', 'localhost');
defined('DB_USERNAME') or define('DB_USERNAME', 'root');
defined('DB_PASSWORD') or define('DB_PASSWORD', '');
defined('DB_NAME') or define('DB_NAME', 'your_database_name');

$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
?>


<?php
require_once 'config.php';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  $name = $_POST['name'];
  $email = $_POST['email'];
  $password = $_POST['password'];

  $sql = "INSERT INTO users (name, email, password) VALUES (?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param('sss', $name, $email, md5($password));
  $stmt->execute();

  echo 'User registered successfully!';
}

?>


<?php
require_once 'config.php';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  $email = $_POST['email'];
  $password = $_POST['password'];

  $sql = "SELECT * FROM users WHERE email = ? AND password = ?";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param('ss', $email, md5($password));
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result->num_rows > 0) {
    echo 'Login successful!';
  } else {
    echo 'Invalid email or password.';
  }
}

?>


<?php
require_once 'config.php';

$sql = "SELECT * FROM products";
$result = $conn->query($sql);

while ($row = $result->fetch_assoc()) {
  echo '<p>' . $row['name'] . ' - $" . $row['price'] . '</p>';
}
?>


<?php
require_once 'config.php';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  session_start();
  $order_id = uniqid();
  $user_id = $_SESSION['user']['id'];
  $total = 0;

  foreach ($_SESSION['cart'] as $product_id => $quantity) {
    $sql = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param('iis', $order_id, $product_id, $quantity);
    $stmt->execute();

    $sql = "UPDATE products SET stock = stock - ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param('ii', $quantity, $product_id);
    $stmt->execute();
  }

  $sql = "INSERT INTO orders (user_id, total) VALUES (?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param('is', $user_id, $total);
  $stmt->execute();

  unset($_SESSION['cart']);
  echo 'Order placed successfully!';
}

?>


// config.php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// db_connection.php
<?php
function connect_to_db() {
    $conn = new PDO("mysql:host=".DB_HOST.";dbname=".DB_NAME, DB_USERNAME, DB_PASSWORD);
    return $conn;
}

function execute_query($query) {
    try {
        $stmt = $conn->prepare($query);
        $stmt->execute();
        return $stmt;
    } catch (PDOException $e) {
        echo "Error: " . $e->getMessage() . "<br>";
        die();
    }
}
?>

// purchase.php
<?php
require_once 'config.php';
require_once 'db_connection.php';

if (isset($_POST['submit'])) {
    // Get product ID and quantity from form data
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Validate product ID and quantity
    if ($product_id == '' || $quantity == '') {
        echo "Error: Please enter both product ID and quantity.<br>";
        die();
    }

    // Get product details from database
    $query = "SELECT * FROM products WHERE id = :product_id";
    $stmt = execute_query($query);
    $stmt->bindParam(':product_id', $product_id);

    $product = $stmt->fetch(PDO::FETCH_ASSOC);
    if ($product == false) {
        echo "Error: Product not found.<br>";
        die();
    }

    // Calculate total amount
    $total_amount = $product['price'] * $quantity;

    // Insert order into database
    $query = "INSERT INTO orders (customer_id, product_id, quantity, total_amount)
              VALUES (:customer_id, :product_id, :quantity, :total_amount)";
    $stmt = execute_query($query);
    $stmt->bindParam(':customer_id', $_SESSION['user']['id']);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':quantity', $quantity);
    $stmt->bindParam(':total_amount', $total_amount);

    // Update product quantity
    $query = "UPDATE products SET quantity = quantity - :quantity WHERE id = :product_id";
    execute_query($query);
    $stmt->bindParam(':quantity', $quantity);
    $stmt->bindParam(':product_id', $product_id);

    echo "Order placed successfully!";
}

// Display purchase form
?>

<form action="" method="post">
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id"><br><br>
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity"><br><br>
    <input type="submit" name="submit" value="Place Order">
</form>


// db.php

<?php

class Database {
    private $host = 'localhost';
    private $username = 'root';
    private $password = '';
    private $database = 'shop';

    public function connect() {
        try {
            $conn = new PDO('mysql:host=' . $this->host . ';dbname=' . $this->database, $this->username, $this->password);
            return $conn;
        } catch (PDOException $e) {
            echo 'Error connecting to database: ' . $e->getMessage();
        }
    }
}

?>


// Product.php

<?php

class Product {
    private $db;

    public function __construct() {
        $this->db = new Database();
        $this->conn = $this->db->connect();
    }

    public function getAllProducts() {
        $stmt = $this->conn->prepare('SELECT * FROM products');
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    public function getProduct($id) {
        $stmt = $this->conn->prepare('SELECT * FROM products WHERE id = :id');
        $stmt->bindParam(':id', $id);
        $stmt->execute();
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }
}

?>


// cart.php

<?php

class Cart {
    private $db;

    public function __construct() {
        $this->db = new Database();
        $this->conn = $this->db->connect();
    }

    public function addProductToCart($id, $quantity) {
        $stmt = $this->conn->prepare('INSERT INTO cart (product_id, quantity) VALUES (:id, :quantity)');
        $stmt->bindParam(':id', $id);
        $stmt->bindParam(':quantity', $quantity);
        $stmt->execute();
    }

    public function viewCart() {
        $stmt = $this->conn->prepare('SELECT * FROM cart');
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
}

?>


// payment.php

<?php

class Payment {
    private $db;

    public function __construct() {
        $this->db = new Database();
        $this->conn = $this->db->connect();
    }

    public function processPayment($amount) {
        // Implement your payment gateway here (e.g. Stripe, PayPal)
    }

    public function placeOrder($user_name, $email, $order_date, $total) {
        $stmt = $this->conn->prepare('INSERT INTO orders (user_name, email, order_date, total) VALUES (:user_name, :email, NOW(), :total)');
        $stmt->bindParam(':user_name', $user_name);
        $stmt->bindParam(':email', $email);
        $stmt->bindParam(':total', $total);
        $stmt->execute();
    }
}

?>


// index.php

<?php

require_once 'db.php';
require_once 'Product.php';
require_once 'Cart.php';
require_once 'Payment.php';

$product = new Product();
$cart = new Cart();
$payment = new Payment();

if (isset($_POST['add_to_cart'])) {
    $id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    $cart->addProductToCart($id, $quantity);
}

if (isset($_POST['place_order'])) {
    $user_name = $_POST['user_name'];
    $email = $_POST['email'];
    $total = array_sum(array_map(function ($item) { return $item['price'] * $item['quantity']; }, $cart->viewCart()));
    $payment->processPayment($total);
    $payment->placeOrder($user_name, $email, NULL, $total);
}

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shop</title>
</head>
<body>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="POST">
    <?php foreach ($product->getAllProducts() as $item) { ?>
        <input type="hidden" name="product_id[]" value="<?php echo $item['id']; ?>">
        <p><?php echo $item['name']; ?> - <?php echo $item['price']; ?></p>
        <input type="number" name="quantity[]" value="1">
    <?php } ?>
    <button type="submit" name="add_to_cart">Add to Cart</button>
</form>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="POST">
    <?php foreach ($cart->viewCart() as $item) { ?>
        <p><?php echo $item['name']; ?> x <?php echo $item['quantity']; ?></p>
    <?php } ?>
    <button type="submit" name="place_order">Place Order</button>
</form>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="POST">
    <label for="user_name">User Name:</label>
    <input type="text" id="user_name" name="user_name"><br><br>
    <label for="email">Email:</label>
    <input type="email" id="email" name="email"><br><br>
    <button type="submit" name="place_order">Place Order</button>
</form>

</body>
</html>


class Product {
  private $id;
  private $name;
  private $price;

  public function __construct($id, $name, $price) {
    $this->id = $id;
    $this->name = $name;
    $this->price = $price;
  }

  public static function getAll() {
    $query = "SELECT * FROM products";
    $result = mysqli_query($conn, $query);
    $products = array();
    while ($row = mysqli_fetch_assoc($result)) {
      $product = new Product($row['id'], $row['name'], $row['price']);
      $products[] = $product;
    }
    return $products;
  }

  public static function getOne($id) {
    $query = "SELECT * FROM products WHERE id = '$id'";
    $result = mysqli_query($conn, $query);
    $row = mysqli_fetch_assoc($result);
    return new Product($row['id'], $row['name'], $row['price']);
  }
}


class Order {
  private $id;
  private $customerName;
  private $total;

  public function __construct($id, $customerName, $total) {
    $this->id = $id;
    $this->customerName = $customerName;
    $this->total = $total;
  }

  public static function getAll() {
    $query = "SELECT * FROM orders";
    $result = mysqli_query($conn, $query);
    $orders = array();
    while ($row = mysqli_fetch_assoc($result)) {
      $order = new Order($row['id'], $row['customer_name'], $row['total']);
      $orders[] = $order;
    }
    return $orders;
  }

  public static function createOrder($customerName, $products) {
    $total = 0;
    foreach ($products as $product) {
      $total += $product->price;
    }
    $query = "INSERT INTO orders (customer_name, total) VALUES ('$customerName', '$total')";
    mysqli_query($conn, $query);
    return new Order(mysqli_insert_id($conn), $customerName, $total);
  }
}


function purchase($products) {
  $order = Order::createOrder($_SESSION['customer_name'], $products);
  foreach ($products as $product) {
    // Update product stock
    $query = "UPDATE products SET stock = stock - 1 WHERE id = '$product->id'";
    mysqli_query($conn, $query);
  }
  echo "Order created successfully!";
}


$products = array(
  Product::getOne(1),
  Product::getOne(2)
);
purchase($products);


<?php
// Initialize cart array
$cart = [];

// Function to display cart contents
function display_cart() {
  global $cart;
  echo "<h2>Cart Contents:</h2>";
  echo "<ul>";
  foreach ($cart as $item) {
    echo "<li>" . $item['name'] . " x" . $item['quantity'] . " = $" . $item['price'] * $item['quantity'] . "</li>";
  }
  echo "</ul>";
}

// Function to add item to cart
function add_to_cart($item) {
  global $cart;
  if (isset($_SESSION['cart'])) {
    array_push($_SESSION['cart'], $item);
  } else {
    $_SESSION['cart'][] = $item;
  }
}

// Form to input item details and add to cart
?>
<form action="" method="post">
  <label for="name">Item Name:</label>
  <input type="text" id="name" name="name"><br><br>
  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity"><br><br>
  <label for="price">Price:</label>
  <input type="number" id="price" name="price"><br><br>
  <button type="submit" name="add_to_cart">Add to Cart</button>
</form>

<?php
// If add to cart button is clicked
if (isset($_POST['add_to_cart'])) {
  $name = $_POST['name'];
  $quantity = $_POST['quantity'];
  $price = $_POST['price'];

  // Validate input and add item to cart
  if ($name && $quantity > 0 && $price > 0) {
    $item = [
      'name' => $name,
      'quantity' => $quantity,
      'price' => $price
    ];
    add_to_cart($item);
    echo "Item added to cart!";
  } else {
    echo "Error: Please fill in all required fields and ensure quantity and price are positive numbers.";
  }
}

// Display cart contents
display_cart();

// If checkout button is clicked
if (isset($_POST['checkout'])) {
  // Process payment and clear cart
  echo "Payment processed! Cart cleared.";
  unset($_SESSION['cart']);
}
?>


<?php
// Process payment and clear cart
echo "Payment processed! Cart cleared.";
unset($_SESSION['cart']);
?>


class Product {
    private $id;
    private $name;
    private $price;

    public function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }

    public function getId() {
        return $this->id;
    }

    public function getName() {
        return $this->name;
    }

    public function getPrice() {
        return $this->price;
    }
}


class Order {
    private $id;
    private $customer_name;
    private $total;

    public function __construct($id, $customer_name, $total) {
        $this->id = $id;
        $this->customer_name = $customer_name;
        $this->total = $total;
    }

    public function getId() {
        return $this->id;
    }

    public function getCustomerName() {
        return $this->customer_name;
    }

    public function getTotal() {
        return $this->total;
    }
}


require_once 'product.php';
require_once 'order.php';

function purchase($product_id, $quantity) {
    // Get product details from database
    $product = getProduct($product_id);

    if ($product) {
        // Calculate total cost
        $total = $product->getPrice() * $quantity;

        // Create new order in database
        $order_id = createOrder($product->getName(), $total);
        addProductToOrder($order_id, $product_id, $quantity);

        return true;
    } else {
        return false;
    }
}

function getProduct($id) {
    // Connect to database and retrieve product details
    $db = new PDO('mysql:host=localhost;dbname=example', 'username', 'password');

    $stmt = $db->prepare("SELECT * FROM products WHERE id = ?");
    $stmt->execute([$id]);
    $product = $stmt->fetch();

    return new Product($product['id'], $product['name'], $product['price']);
}

function createOrder($customer_name, $total) {
    // Connect to database and insert new order
    $db = new PDO('mysql:host=localhost;dbname=example', 'username', 'password');

    $stmt = $db->prepare("INSERT INTO orders (customer_name, total) VALUES (?, ?)");
    $stmt->execute([$customer_name, $total]);

    return $db->lastInsertId();
}

function addProductToOrder($order_id, $product_id, $quantity) {
    // Connect to database and insert product into order
    $db = new PDO('mysql:host=localhost;dbname=example', 'username', 'password');

    $stmt = $db->prepare("INSERT INTO order_products (order_id, product_id, quantity) VALUES (?, ?, ?)");
    $stmt->execute([$order_id, $product_id, $quantity]);
}


require_once 'purchase.php';

$product_id = 1;
$quantity = 2;

if (purchase($product_id, $quantity)) {
    echo "Purchase successful!";
} else {
    echo "Purchase failed.";
}

function displayOrders() {
    // Connect to database and retrieve all orders
    $db = new PDO('mysql:host=localhost;dbname=example', 'username', 'password');

    $stmt = $db->query("SELECT * FROM orders");
    $orders = $stmt->fetchAll();

    foreach ($orders as $order) {
        echo "Order ID: {$order['id']}, Customer Name: {$order['customer_name']}, Total: {$order['total']}";

        // Retrieve products in order
        $stmt = $db->query("SELECT * FROM order_products WHERE order_id = {$order['id']}");
        $products = $stmt->fetchAll();

        foreach ($products as $product) {
            echo ", Product ID: {$product['product_id']}, Quantity: {$product['quantity']}";
        }

        echo "
";
    }
}

displayOrders();


// user.php
class User {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function login($username, $password) {
    $stmt = $this->db->prepare("SELECT * FROM users WHERE username=:username AND password=:password");
    $stmt->execute(array('username' => $username, 'password' => $password));
    return $stmt->fetch();
  }
}

// product.php
class Product {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function getAll() {
    $stmt = $this->db->prepare("SELECT * FROM products");
    $stmt->execute();
    return $stmt->fetchAll();
  }
}

// order.php
class Order {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function create($user_id, $products) {
    $total = 0;
    foreach ($products as $product) {
      $total += $product['price'] * $product['quantity'];
    }
    $stmt = $this->db->prepare("INSERT INTO orders (user_id, total) VALUES (:user_id, :total)");
    $stmt->execute(array('user_id' => $user_id, 'total' => $total));
    $order_id = $this->db->lastInsertId();
    foreach ($products as $product) {
      $stmt = $this->db->prepare("INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)");
      $stmt->execute(array('order_id' => $order_id, 'product_id' => $product['id'], 'quantity' => $product['quantity']));
    }
  }

  public function getOrderByUser($user_id) {
    $stmt = $this->db->prepare("SELECT * FROM orders WHERE user_id=:user_id");
    $stmt->execute(array('user_id' => $user_id));
    return $stmt->fetch();
  }
}


// login.php
class LoginController {
  private $user;

  public function __construct($user) {
    $this->user = $user;
  }

  public function handleRequest() {
    $username = $_POST['username'];
    $password = $_POST['password'];
    $user = $this->user->login($username, $password);
    if ($user) {
      // login successful
      session_start();
      $_SESSION['user_id'] = $user['id'];
      header('Location: /products');
      exit;
    } else {
      // login failed
      echo 'Invalid username or password';
    }
  }
}

// products.php
class ProductsController {
  private $product;

  public function __construct($product) {
    $this->product = $product;
  }

  public function handleRequest() {
    $products = $this->product->getAll();
    include_once 'views/products.php';
  }
}

// checkout.php
class CheckoutController {
  private $order;

  public function __construct($order) {
    $this->order = $order;
  }

  public function handleRequest() {
    if (isset($_SESSION['user_id'])) {
      // user is logged in
      $products = array();
      foreach ($_POST['products'] as $product) {
        $products[] = array(
          'id' => $product,
          'price' => $_POST['prices'][$product],
          'quantity' => $_POST['quantities'][$product]
        );
      }
      $this->order->create($_SESSION['user_id'], $products);
      header('Location: /orders');
      exit;
    } else {
      // user is not logged in
      echo 'Please login to checkout';
    }
  }
}


// products.php
<h1>Products</h1>
<ul>
  <?php foreach ($products as $product): ?>
    <li>
      <?= $product['name'] ?> (<?= $product['price'] ?>)
      <form action="" method="post">
        <input type="hidden" name="id[]" value="<?= $product['id'] ?>">
        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantities[<?= $product['id'] ?>]">
        <button type="submit">Add to Cart</button>
      </form>
    </li>
  <?php endforeach; ?>
</ul>

// orders.php
<h1>Orders</h1>
<ul>
  <?php foreach ($order_items as $item): ?>
    <li>
      <?= $item['product_name'] ?> (<?= $item['price'] * $item['quantity'] ?>)
    </li>
  <?php endforeach; ?>
</ul>


// routes.php
$routes = array(
  '/' => 'products',
  '/login' => 'login',
  '/checkout' => 'checkout'
);


// index.php
require_once 'models/user.php';
require_once 'models/product.php';
require_once 'models/order.php';

$user = new User($db);
$product = new Product($db);
$order = new Order($db);

if (isset($_POST['username']) && isset($_POST['password'])) {
  $loginController = new LoginController($user);
  $loginController->handleRequest();
} elseif (isset($_GET['action']) && $_GET['action'] == 'products') {
  $productsController = new ProductsController($product);
  $productsController->handleRequest();
} elseif (isset($_POST['id'])) {
  $checkoutController = new CheckoutController($order);
  $checkoutController->handleRequest();
}


// config.php (database configuration)
<?php
$host = 'localhost';
$dbname = 'online_store';
$username = 'root';
$password = '';

$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
?>

// models/ProductModel.php (product model)
<?php
class ProductModel {
    public function getAllProducts() {
        $stmt = $conn->prepare('SELECT * FROM products');
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
}
?>

// controllers/CartController.php (cart controller)
<?php
class CartController {
    private $model;

    public function __construct(ProductModel $model) {
        $this->model = $model;
    }

    public function index() {
        if ($_SESSION['user_id']) {
            // get cart items for the current user
            $stmt = $conn->prepare('SELECT * FROM carts WHERE user_id = :user_id');
            $stmt->bindParam(':user_id', $_SESSION['user_id']);
            $stmt->execute();
            $cartItems = $stmt->fetchAll(PDO::FETCH_ASSOC);

            return view('cart', ['cartItems' => $cartItems]);
        } else {
            return view('login');
        }
    }

    public function addToCart() {
        if ($_POST) {
            // add product to cart
            $productId = $_POST['product_id'];
            $quantity = $_POST['quantity'];

            $stmt = $conn->prepare('INSERT INTO carts (user_id, product_id, quantity) VALUES (:user_id, :product_id, :quantity)');
            $stmt->bindParam(':user_id', $_SESSION['user_id']);
            $stmt->bindParam(':product_id', $productId);
            $stmt->bindParam(':quantity', $quantity);
            $stmt->execute();

            header('Location: ' . $_SERVER['HTTP_REFERER']);
            exit;
        }
    }

    public function removeFromCart() {
        if ($_POST) {
            // remove product from cart
            $cartItemId = $_POST['cart_item_id'];

            $stmt = $conn->prepare('DELETE FROM carts WHERE id = :id');
            $stmt->bindParam(':id', $cartItemId);
            $stmt->execute();

            header('Location: ' . $_SERVER['HTTP_REFERER']);
            exit;
        }
    }

    public function purchase() {
        if ($_POST) {
            // process payment and update cart
            // for simplicity, let's assume we're using Stripe
            require_once 'stripe/stripe.php';

            $token = $_POST['stripeToken'];
            $amount = 0;

            foreach ($_SESSION['cartItems'] as $item) {
                $amount += ($item['price'] * $item['quantity']);
            }

            \Stripe\Charge::create(array(
                "amount" => (int)$amount,
                "currency" => "usd",
                "source" => $token,
                "description" => $_SESSION['user_id']
            ));

            // clear cart
            unset($_SESSION['cartItems']);

            header('Location: ' . $_SERVER['HTTP_REFERER']);
            exit;
        }
    }
}
?>

// views/cart.php (cart view)
<?php
$cartController = new CartController(new ProductModel());
?>
<div class="container">
    <h1>Cart</h1>
    <?php foreach ($cartController->index()['cartItems'] as $item): ?>
        <div class="card">
            <h2><?= $item['name']; ?></h2>
            <p><?= '$' . number_format($item['price'], 2); ?></p>
            <button onclick="removeFromCart(<?= $item['id']; ?>)">Remove from cart</button>
        </div>
    <?php endforeach; ?>
    <form action="<?= $_SERVER['HTTP_REFERER']; ?>" method="POST">
        <input type="hidden" name="stripeToken" value="<?= $_POST['stripeToken']; ?>">
        <input type="submit" value="Purchase">
    </form>
</div>

// views/login.php (login view)
<?php
$cartController = new CartController(new ProductModel());
?>
<div class="container">
    <h1>Login</h1>
    <form action="<?= $_SERVER['HTTP_REFERER']; ?>" method="POST">
        <input type="text" name="username" placeholder="Username">
        <input type="password" name="password" placeholder="Password">
        <input type="submit" value="Login">
    </form>
</div>

// routes.php (routing)
<?php
$routes = [
    '/' => 'CartController@index',
    '/cart' => 'CartController:index',
    '/add-to-cart' => 'CartController:addToCart',
    '/remove-from-cart' => 'CartController:removeFromCart',
    '/purchase' => 'CartController:purchase',
];
?>


<?php

// Configuration
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to display products
function display_products() {
    global $conn;
    $query = "SELECT * FROM products";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        echo "<table>";
        while ($row = $result->fetch_assoc()) {
            echo "<tr>";
            echo "<td>" . $row['product_name'] . "</td>";
            echo "<td>" . $row['price'] . "</td>";
            echo "<td><a href='buy.php?product_id=" . $row['id'] . "'>Buy</a></td>";
            echo "</tr>";
        }
        echo "</table>";
    } else {
        echo "No products found";
    }
}

// Function to process purchase
function process_purchase($product_id) {
    global $conn;
    $query = "SELECT * FROM products WHERE id = '$product_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        $row = $result->fetch_assoc();
        $customer_name = $_POST['name'];
        $customer_email = $_POST['email'];
        $customer_address = $_POST['address'];

        // Insert into orders table
        $query = "INSERT INTO orders (product_id, customer_name, customer_email, customer_address) VALUES ('$product_id', '$customer_name', '$customer_email', '$customer_address')";
        $conn->query($query);

        // Update stock
        $query = "UPDATE products SET quantity = quantity - 1 WHERE id = '$product_id'";
        $conn->query($query);

        echo "Order successful!";
    } else {
        echo "Product not found";
    }
}

// Display products
display_products();

?>


<?php

require 'purchase.php';

if (isset($_GET['product_id'])) {
    $product_id = $_GET['product_id'];
    process_purchase($product_id);
} else {
    echo "Invalid product ID";
}

?>


<?php
session_start();

// Initialize cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Get current cart contents
$cart = $_SESSION['cart'];

// Display cart contents
?>

<div class="cart">
  <h2>Cart Contents:</h2>
  <table border="1">
    <tr>
      <th>Product</th>
      <th>Quantity</th>
      <th>Price</th>
      <th>Total</th>
    </tr>
    <?php
    // Display each item in the cart
    foreach ($cart as $product_id => $details) {
        echo "<tr>";
        echo "<td>" . $details['name'] . "</td>";
        echo "<td>" . $details['quantity'] . "</td>";
        echo "<td>$" . number_format($details['price'], 2) . "</td>";
        echo "<td>$" . number_format($details['total'], 2) . "</td>";
        echo "</tr>";
    }
    ?>
  </table>
</div>

<?php
// Calculate total cart value
$total = array_sum(array_column($cart, 'total'));
echo "<p>Total: $" . number_format($total, 2) . "</p>";

?>


<?php
function add_to_cart($product_id, $quantity) {
    global $cart;
    
    // Check if product is already in cart
    foreach ($cart as &$details) {
        if ($details['id'] == $product_id) {
            // If it is, update its quantity and recalculate total
            $details['quantity'] += $quantity;
            $details['total'] = $details['price'] * $details['quantity'];
            return true; // Update successful
        }
    }

    // If product not in cart, add it with new details
    $new_product = array(
        'id' => $product_id,
        'name' => get_product_name($product_id), // Function to retrieve name of product from database or elsewhere
        'price' => get_product_price($product_id), // Function to retrieve price of product from database or elsewhere
        'quantity' => $quantity,
        'total' => get_product_price($product_id) * $quantity // Calculate total immediately for new item
    );
    
    $cart[$product_id] = $new_product;
    return true; // Add successful
    
}

function remove_from_cart($product_id) {
    global $cart;
    
    unset($cart[$product_id]);
}

// Function to update cart based on form submission (e.g., quantity changes)
function update_cart() {
    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
        foreach ($_POST as $key => $value) {
            if ($key == 'remove') {
                remove_from_cart($value);
            } elseif ($key == 'quantity') {
                add_to_cart($_POST['product_id'], (int)$value); // Update quantity only, no need to recheck product existence
            }
        }
    }
}
?>


<?php
include_once "cart_controller.php";
?>

<!-- Display cart form for user input -->
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="hidden" name="product_id" value="[insert product ID here]"> <!-- Replace with actual product IDs -->
  <label>Quantity:</label>
  <input type="number" name="quantity" value="[initial quantity value]"> <!-- Replace with initial quantity for each product -->
  <button type="submit" name="add_to_cart">Add to Cart</button>
  <button type="submit" name="remove">Remove from Cart</button>
  <br><br>

  <?php
  update_cart(); // Call this after form submission to process any changes

  // Display cart button and link for adding more products
  echo "<a href='add_product.php'>Add More Products...</a>";
  ?>
</form>


<?php
include_once "cart_controller.php";
?>

<!-- Display full cart view (already shown in `cart.php`) -->
<div class="cart">
    <!-- Cart contents already displayed here, no need to repeat code -->
</div>

<p>Total: $<?php echo number_format(array_sum(array_column($cart, 'total')), 2); ?></p>


<?php

// Include database connection settings
include 'db_config.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

// Get products from database
$products = array();
$sql = "SELECT * FROM products";
$result = mysqli_query($conn, $sql);
while ($row = mysqli_fetch_assoc($result)) {
    $products[] = array(
        'id' => $row['id'],
        'name' => $row['name'],
        'price' => $row['price']
    );
}

// Handle form submission
if (isset($_POST['submit'])) {
    // Get product ID and quantity from form data
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Check if product is available in stock
    $sql = "SELECT * FROM order_items WHERE order_id = ? AND product_id = ?";
    $result = mysqli_query($conn, $sql, array($product_id));
    if (mysqli_num_rows($result) > 0) {
        echo "Product already added to cart.";
        exit;
    }

    // Add item to cart
    $sql = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
    mysqli_query($conn, $sql, array($_SESSION['user_id'], $product_id, $quantity));

    // Update total amount in orders table
    $total = get_total_amount();
    $sql = "UPDATE orders SET total = ? WHERE id = ?";
    mysqli_query($conn, $sql, array($total, $_SESSION['user_id']));

    echo "Item added to cart successfully.";
}

// Function to calculate total amount
function get_total_amount() {
    $sql = "SELECT SUM(oi.quantity * p.price) AS total FROM order_items oi JOIN products p ON oi.product_id = p.id WHERE oi.order_id = ?";
    $result = mysqli_query($conn, $sql, array($_SESSION['user_id']));
    return mysqli_fetch_assoc($result)['total'];
}

?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purchase</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        table {
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }
    </style>
</head>
<body>

<h1>Purchase</h1>

<form action="" method="post">
    <label for="product_id">Product:</label>
    <select name="product_id" required>
        <?php foreach ($products as $product) : ?>
            <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?></option>
        <?php endforeach; ?>
    </select>

    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" name="quantity" required>

    <br><br>

    <button type="submit" name="submit">Add to Cart</button>

    <p>Total Amount: <?php echo get_total_amount(); ?></p>
</form>

<h2>Cart:</h2>

<table>
    <tr>
        <th>Product Name</th>
        <th>Quantity</th>
        <th>Price</th>
        <th>Total</th>
    </tr>
    <?php foreach ($products as $product) : ?>
        <tr>
            <td><?php echo $product['name']; ?></td>
            <td></td>
            <td><?php echo $product['price']; ?></td>
            <td></td>
        </tr>
    <?php endforeach; ?>
</table>

</body>
</html>


<?php

class PurchaseController {
  private $db;

  public function __construct() {
    $this->db = new Database(); // assume we have a Database class that connects to our database
  }

  public function index() {
    // display products page
    $products = $this->db->query("SELECT * FROM products");
    return view('products', ['products' => $products]);
  }

  public function addtocart($product_id) {
    // add product to cart
    if (!isset($_SESSION['cart'])) {
      $_SESSION['cart'] = array();
    }
    $_SESSION['cart'][$product_id] = true;
    header("Location: " . url('view_cart'));
  }

  public function view_cart() {
    // display cart page
    $products_in_cart = array();
    if (isset($_SESSION['cart'])) {
      foreach ($_SESSION['cart'] as $product_id => $quantity) {
        $product = $this->db->query("SELECT * FROM products WHERE id = '$product_id'")->fetch_assoc();
        $products_in_cart[] = $product;
      }
    }
    return view('cart', ['products' => $products_in_cart]);
  }

  public function checkout() {
    // display checkout page
    if (!isset($_SESSION['customer'])) {
      header("Location: " . url('login'));
    }
    $order = array();
    $order['total_price'] = 0;
    $order_items = array();

    foreach ($_SESSION['cart'] as $product_id => $quantity) {
      $product = $this->db->query("SELECT * FROM products WHERE id = '$product_id'")->fetch_assoc();
      $order_items[] = array(
        'id' => $product['id'],
        'name' => $product['name'],
        'price' => $product['price'],
        'quantity' => $_SESSION['cart'][$product_id]
      );
      $order['total_price'] += ($product['price'] * $_SESSION['cart'][$product_id]);
    }

    return view('checkout', ['order' => $order, 'items' => $order_items]);
  }

  public function place_order() {
    // create new order
    if (!isset($_SESSION['customer'])) {
      header("Location: " . url('login'));
    }
    $order = array();
    $order['user_id'] = $_SESSION['customer']['id'];
    $order['total_price'] = 0;
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
      $order_items[] = array(
        'id' => $product_id,
        'name' => '',
        'price' => 0,
        'quantity' => $_SESSION['cart'][$product_id]
      );
      $order['total_price'] += ($product_id * $_SESSION['cart'][$product_id]);
    }
    $this->db->query("INSERT INTO orders (user_id, total_price) VALUES ('$order[user_id]', '$order[total_price]')");
    $order_id = $this->db->insert_id;
    foreach ($order_items as $item) {
      $this->db->query("INSERT INTO order_items (order_id, product_id, quantity, price) VALUES ('$order_id', '$item[id]', '$item[quantity]', '$item[price]')");
    }
    header("Location: " . url('view_orders'));
  }

  public function view_orders() {
    // display orders page
    $orders = array();
    $user_id = $_SESSION['customer']['id'];
    $orders_query = "SELECT * FROM orders WHERE user_id = '$user_id'";
    $orders_result = $this->db->query($orders_query);
    while ($order = $orders_result->fetch_assoc()) {
      $orders[] = array(
        'id' => $order['id'],
        'total_price' => $order['total_price']
      );
    }
    return view('orders', ['orders' => $orders]);
  }
}


<?php foreach ($products as $product): ?>
  <div>
    <h2><?= $product['name'] ?></h2>
    <p>Price: <?= $product['price'] ?></p>
    <button onclick="location.href='<?= url('addtocart', array($product['id'])) ?>'">Add to Cart</button>
  </div>
<?php endforeach; ?>


<?php foreach ($products_in_cart as $product): ?>
  <div>
    <h2><?= $product['name'] ?></h2>
    <p>Price: <?= $product['price'] ?></p>
    <p>Quantity: <?= $_SESSION['cart'][$product['id']] ?></p>
  </div>
<?php endforeach; ?>


<h1>Checkout</h1>

<p>Total Price: <?= $order['total_price'] ?></p>

<form action="<?= url('place_order') ?>" method="post">
  <input type="hidden" name="order" value="<?= json_encode($order) ?>">
  <button type="submit">Place Order</button>
</form>


// Include database connection file
require_once 'db.php';

// Function to add product to cart
function add_product_to_cart($product_id, $quantity) {
  // Get current user ID (assuming logged in user)
  $user_id = $_SESSION['user_id'];

  // Check if product exists in cart
  $cart_products = get_cart_products();
  foreach ($cart_products as $cp) {
    if ($cp['product_id'] == $product_id) {
      // Update quantity if product already in cart
      update_cart_product_quantity($cp['id'], $quantity);
      return;
    }
  }

  // Add new product to cart
  $cart_id = insert_cart_product($user_id, $product_id, $quantity);

  // Update order total and save changes
  update_order_total();
}

// Function to get products in cart
function get_cart_products() {
  // Get current user ID (assuming logged in user)
  $user_id = $_SESSION['user_id'];

  // Retrieve cart products from database
  $query = "SELECT * FROM order_items WHERE order_id IN (SELECT id FROM orders WHERE customer_name = ?)";
  $stmt = $db->prepare($query);
  $stmt->execute([$user_id]);
  return $stmt->fetchAll();
}

// Function to update product quantity in cart
function update_cart_product_quantity($cart_product_id, $quantity) {
  // Update quantity of existing cart product
  $query = "UPDATE order_items SET quantity = ? WHERE id = ?";
  $db->prepare($query)->execute([$quantity, $cart_product_id]);
}

// Function to insert new product into cart
function insert_cart_product($user_id, $product_id, $quantity) {
  // Insert new cart product
  $query = "INSERT INTO order_items (order_id, product_id, quantity)
            VALUES ((SELECT id FROM orders WHERE customer_name = ?), ?, ?)";
  $db->prepare($query)->execute([$user_id, $product_id, $quantity]);
  return $db->lastInsertId();
}

// Function to update total cost of order
function update_order_total() {
  // Calculate new total cost
  $total_cost = get_cart_products_total();

  // Update order with new total cost
  $query = "UPDATE orders SET total_cost = ? WHERE customer_name = ?";
  $db->prepare($query)->execute([$total_cost, $_SESSION['user_id']]);
}

// Function to calculate total cost of products in cart
function get_cart_products_total() {
  // Get current user ID (assuming logged in user)
  $user_id = $_SESSION['user_id'];

  // Retrieve cart products from database
  $query = "SELECT SUM(quantity * p.price) AS total FROM order_items oi
            JOIN products p ON oi.product_id = p.id
            WHERE oi.order_id IN (SELECT id FROM orders WHERE customer_name = ?)";
  $stmt = $db->prepare($query);
  $stmt->execute([$user_id]);
  return $stmt->fetch()['total'];
}

// Function to process payment and save order
function process_payment() {
  // Get current user ID (assuming logged in user)
  $user_id = $_SESSION['user_id'];

  // Save new order with total cost
  $query = "INSERT INTO orders (customer_name, order_date, total_cost)
            VALUES (?, ?, ?)";
  $db->prepare($query)->execute([$user_id, date('Y-m-d'), get_cart_products_total()]);

  // Insert order items and save changes
  foreach (get_cart_products() as $cp) {
    insert_order_item($cp['id'], $cp['product_id']);
  }

  // Clear cart and reset total cost
  clear_cart();
}

// Function to clear cart and reset total cost
function clear_cart() {
  // Get current user ID (assuming logged in user)
  $user_id = $_SESSION['user_id'];

  // Delete all order items for current user
  $query = "DELETE FROM order_items WHERE order_id IN (SELECT id FROM orders WHERE customer_name = ?)";
  $db->prepare($query)->execute([$user_id]);

  // Reset total cost of order
  update_order_total();
}

// Function to insert new order item into database
function insert_order_item($order_id, $product_id) {
  // Insert new order item
  $query = "INSERT INTO order_items (order_id, product_id)
            VALUES (?, ?)";
  $db->prepare($query)->execute([$order_id, $product_id]);
}


add_product_to_cart(123, 2); // Add product with ID 123 to cart in quantity of 2


process_payment(); // Save new order with total cost


clear_cart(); // Delete all order items for current user and reset total cost


<?php
// assume we have a database connection established
require_once 'db.php';

// retrieve products from database
$products = getProducts();

// render the product list
?>
<h1>Purchase Products</h1>
<form action="purchase.php" method="post">
  <?php foreach ($products as $product) { ?>
    <div class="product">
      <h2><?= $product['name'] ?></h2>
      <p>Price: <?= $product['price'] ?></p>
      <input type="checkbox" name="products[]" value="<?= $product['id'] ?>">
    </div>
  <?php } ?>
  <button type="submit">Purchase Selected Products</button>
</form>


<?php
// assume we have a database connection established
$conn = new mysqli("localhost", "username", "password", "database");

function getProducts() {
  $query = "SELECT * FROM products";
  $result = $conn->query($query);
  return $result->fetch_all(MYSQLI_ASSOC);
}


<?php
// assume we have a database connection established
require_once 'db.php';

// retrieve the selected products from the form data
$selectedProducts = $_POST['products'];

// validate the selected products (e.g., check if they exist in the database)
if (!empty($selectedProducts)) {
  // create an order for each selected product
  foreach ($selectedProducts as $productId) {
    $query = "INSERT INTO orders (product_id, customer_id) VALUES (?, ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("ii", $productId, $_SESSION['customer_id']);
    $stmt->execute();
  }
  
  // update the product stock levels
  foreach ($selectedProducts as $productId) {
    $query = "UPDATE products SET stock_level = stock_level - 1 WHERE id = ?";
    $conn->query($query, $productId);
  }
  
  // send a confirmation email to the customer (optional)
  // ...
} else {
  echo "Please select at least one product.";
}
?>


<?php

// Configuration File
require_once 'config.php';

// Functions for User Management
function registerUser($name, $email, $password) {
    global $db;
    
    $query = "INSERT INTO users (name, email, password) VALUES ('$name', '$email', '$password')";
    mysqli_query($db, $query);
}

function loginUser($email, $password) {
    global $db;
    
    $query = "SELECT * FROM users WHERE email='$email' AND password='$password'";
    $result = mysqli_query($db, $query);
    
    if (mysqli_num_rows($result) > 0) {
        return true; // Login successful
    } else {
        return false; // Login failed
    }
}

// Functions for Product Management
function addProduct($product_name, $price) {
    global $db;
    
    $query = "INSERT INTO products (product_name, price) VALUES ('$product_name', '$price')";
    mysqli_query($db, $query);
}

function removeProduct($id) {
    global $db;
    
    $query = "DELETE FROM products WHERE id='$id'";
    mysqli_query($db, $query);
}

// Functions for Purchase Management
function addOrder($user_id, $product_id) {
    global $db;
    
    $query = "INSERT INTO orders (user_id, product_id, purchase_date) VALUES ('$user_id', '$product_id', NOW())";
    mysqli_query($db, $query);
}

function viewOrders() {
    global $db;
    
    $query = "SELECT * FROM orders JOIN users ON orders.user_id=users.id JOIN products ON orders.product_id=products.id";
    $result = mysqli_query($db, $query);
    
    return mysqli_fetch_all($result);
}

// Product Page
if (isset($_POST['add_product'])) {
    $product_name = $_POST['product_name'];
    $price = $_POST['price'];
    
    addProduct($product_name, $price);
}

// Purchase Page
if (isset($_POST['buy_product'])) {
    $user_id = $_SESSION['user_id'];
    $product_id = $_GET['id'];
    
    addOrder($user_id, $product_id);
}

// User Registration Page
if (isset($_POST['register_user'])) {
    $name = $_POST['name'];
    $email = $_POST['email'];
    $password = md5($_POST['password']);
    
    registerUser($name, $email, $password);
}

?>


<?php
require_once 'config.php';

if (isset($_SESSION['user_id'])) {
    echo "<h1>Logged in as " . $_SESSION['name'] . "</h1>";
} else {
    echo '<a href="login.php">Login</a>';
}

echo '<form action="" method="POST">';
echo '<label for="product_name">Product Name:</label><br>';
echo '<input type="text" id="product_name" name="product_name"><br>';
echo '<label for="price">Price:</label><br>';
echo '<input type="number" id="price" name="price"><br>';
echo '<input type="submit" value="Add Product" name="add_product">';
echo '</form>';

echo '<h1>Products</h1>';
$query = "SELECT * FROM products";
$result = mysqli_query($db, $query);

while ($row = mysqli_fetch_assoc($result)) {
    echo '<a href="?id=' . $row['id'] . '">Buy ' . $row['product_name'] . '</a><br>';
}

echo '<form action="" method="POST">';
echo '<label for="name">Name:</label><br>';
echo '<input type="text" id="name" name="name"><br>';
echo '<label for="email">Email:</label><br>';
echo '<input type="email" id="email" name="email"><br>';
echo '<label for="password">Password:</label><br>';
echo '<input type="password" id="password" name="password"><br>';
echo '<input type="submit" value="Register User" name="register_user">';
echo '</form>';

?>


<?php
require_once 'config.php';

if (isset($_POST['login'])) {
    $email = $_POST['email'];
    $password = md5($_POST['password']);
    
    if (loginUser($email, $password)) {
        $query = "SELECT * FROM users WHERE email='$email'";
        $result = mysqli_query($db, $query);
        
        $row = mysqli_fetch_assoc($result);
        $_SESSION['user_id'] = $row['id'];
        $_SESSION['name'] = $row['name'];
    } else {
        echo 'Invalid credentials';
    }
}

?>


<?php
  $servername = "localhost";
  $username = "root";
  $password = "";
  $dbname = "shopping_cart";

  // Create connection
  $conn = new mysqli($servername, $username, $password, $dbname);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
?>


<?php
  require_once 'database.php';

  function getProducts() {
    $query = "SELECT * FROM products";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
      while($row = $result->fetch_assoc()) {
        echo '<div class="product">';
        echo '<h2>' . $row['name'] . '</h2>';
        echo '<p>Price: ' . $row['price'] . '</p>';
        echo '<p>Description: ' . $row['description'] . '</p>';
        echo '<button>Add to Cart</button>';
        echo '</div>';
      }
    } else {
      echo "No products available";
    }
  }

  getProducts();
?>


<?php
  require_once 'database.php';

  function getCartItems() {
    $query = "SELECT * FROM cart WHERE user_id = '$userId'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
      while($row = $result->fetch_assoc()) {
        echo '<div class="cart-item">';
        echo '<h2>' . $row['name'] . '</h2>';
        echo '<p>Quantity: ' . $row['quantity'] . '</p>';
        echo '<button>Remove from Cart</button>';
        echo '</div>';
      }
    } else {
      echo "No cart items available";
    }
  }

  function updateCart($productId, $quantity) {
    $query = "UPDATE cart SET quantity = '$quantity' WHERE product_id = '$productId'";
    $conn->query($query);
  }

  getCartItems();
?>


<?php
  require_once 'database.php';

  function checkout() {
    if (isset($_POST['checkout'])) {
      $userId = $_SESSION['user_id'];
      $totalCost = 0;
      foreach ($_POST as $key => $value) {
        if ($key == "submit") continue;
        $productQuantity = $value;
        $productId = explode("_", $key)[1];
        $query = "SELECT price FROM products WHERE id = '$productId'";
        $result = $conn->query($query);
        $row = $result->fetch_assoc();
        $totalCost += $row['price'] * $productQuantity;

        $updateCartQuery = "UPDATE cart SET quantity = '$productQuantity' WHERE user_id = '$userId' AND product_id = '$productId'";
        $conn->query($updateCartQuery);
      }

      $orderSql = "INSERT INTO orders (user_id, total_cost) VALUES ('$userId', '$totalCost')";
      $conn->query($orderSql);

      header('Location: thankyou.php');
    }
  }

  checkout();
?>


<?php
  require_once 'database.php';

  if (!isset($_SESSION['user_id'])) {
    echo "You must be logged in to view this page";
    exit;
  }

  $userId = $_SESSION['user_id'];

  if (isset($_POST['add_to_cart'])) {
    $productId = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    updateCart($productId, $quantity);
  }
?>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Purchase Functionality</title>
</head>
<body>

  <?php include 'product.php'; ?>

  <?php include 'cart.php'; ?>

  <?php if (isset($_POST['add_to_cart'])) { ?>
    <button>Checkout</button>
  <?php } else { ?>
    <form action="" method="post">
      <input type="hidden" name="product_id" value="<?php echo $productId; ?>">
      <input type="number" name="quantity" min="1" max="<?php echo $stockQuantity; ?>">
      <button type="submit">Add to Cart</button>
    </form>
  <?php } ?>

  <?php include 'checkout.php'; ?>
</body>
</html>


// config.php (database connection settings)
$db_host = 'localhost';
$db_user = 'root';
$db_password = '';
$db_name = 'store';

// purchase.php (purchase functionality)
require_once 'config.php';

// Connect to database
$conn = new mysqli($db_host, $db_user, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product to cart
function add_to_cart() {
  global $conn;
  
  // Get product ID and quantity from POST request
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  
  // Check if product exists in database
  $query = "SELECT * FROM products WHERE id = '$product_id'";
  $result = $conn->query($query);
  
  if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
      $price = $row['price'];
      
      // Check if product is already in cart
      $query = "SELECT * FROM order_items WHERE product_id = '$product_id' AND order_id = '$_SESSION[cart_id]'";
      $result = $conn->query($query);
      
      if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
          $current_quantity = $row['quantity'];
          
          // Update quantity in cart
          $new_quantity = $current_quantity + $quantity;
          $query = "UPDATE order_items SET quantity = '$new_quantity' WHERE id = '" . $row['id'] . "'";
          $conn->query($query);
        }
      } else {
        // Add product to cart
        $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$_SESSION[cart_id]', '$product_id', '$quantity')";
        $conn->query($query);
      }
    }
  }
}

// Function to process purchase
function process_purchase() {
  global $conn;
  
  // Get customer ID from session
  $customer_id = $_SESSION['customer_id'];
  
  // Calculate total cost of items in cart
  $total = 0;
  $query = "SELECT * FROM order_items WHERE order_id = '$_SESSION[cart_id]'";
  $result = $conn->query($query);
  
  while ($row = $result->fetch_assoc()) {
    $price = get_product_price($row['product_id']);
    $quantity = $row['quantity'];
    
    // Add product cost to total
    $total += $price * $quantity;
  }
  
  // Insert order into database
  $query = "INSERT INTO orders (customer_id, total) VALUES ('$customer_id', '$total')";
  $conn->query($query);
  
  // Update cart with new order ID
  $query = "UPDATE order_items SET order_id = LAST_INSERT_ID() WHERE order_id = '$_SESSION[cart_id]'";
  $conn->query($query);
}

// Function to get product price
function get_product_price($product_id) {
  global $conn;
  
  // Get product price from database
  $query = "SELECT price FROM products WHERE id = '$product_id'";
  $result = $conn->query($query);
  
  if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
      return $row['price'];
    }
  }
}

// Check if user is logged in
if (isset($_SESSION['customer_id'])) {
  // Check if purchase button was clicked
  if (isset($_POST['purchase'])) {
    process_purchase();
  } elseif (isset($_POST['add_to_cart'])) {
    add_to_cart();
  }
} else {
  echo 'Please log in to make a purchase.';
}

// Close database connection
$conn->close();


// Configuration file (config.php)
require_once 'config.php';

// Database connection
$db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');

// Function to add a product to cart
function add_product_to_cart($product_id, $quantity) {
  // Get user's cart ID from session or database
  $cart_id = $_SESSION['cart_id'];
  
  // Insert new order item into cart table
  $query = "INSERT INTO cart (user_id, product_id, quantity)
            VALUES (:user_id, :product_id, :quantity)";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':user_id', $_SESSION['user_id']);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':quantity', $quantity);
  $stmt->execute();
}

// Function to checkout (place order)
function place_order() {
  // Get user's cart ID from session or database
  $cart_id = $_SESSION['cart_id'];
  
  // Insert new order into orders table
  $query = "INSERT INTO orders (user_id, total)
            VALUES (:user_id, :total)";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':user_id', $_SESSION['user_id']);
  $stmt->bindParam(':total', $_POST['total']);
  $stmt->execute();
  
  // Get the newly inserted order ID
  $order_id = $db->lastInsertId('orders');
  
  // Update quantity of each product in cart table
  foreach ($_SESSION['cart'] as $item) {
    $query = "UPDATE products SET quantity = quantity - :quantity WHERE id = :product_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':quantity', $item['quantity']);
    $stmt->bindParam(':product_id', $item['product_id']);
    $stmt->execute();
    
    // Insert new order item into order_items table
    $query = "INSERT INTO order_items (order_id, product_id, quantity)
              VALUES (:order_id, :product_id, :quantity)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':order_id', $order_id);
    $stmt->bindParam(':product_id', $item['product_id']);
    $stmt->bindParam(':quantity', $item['quantity']);
    $stmt->execute();
  }
  
  // Clear cart
  unset($_SESSION['cart']);
}

// Process purchase functionality
if (isset($_POST['purchase'])) {
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $price = get_product_price($item['product_id']);
    $total += ($price * $item['quantity']);
  }
  
  // Update total in form and proceed with checkout
  $_POST['total'] = $total;
  place_order();
} else {
  echo "Error: unable to process purchase.";
}


<form action="" method="post">
  <table>
    <?php foreach ($_SESSION['cart'] as $item): ?>
      <tr>
        <td><?php echo $item['product_name']; ?></td>
        <td><?php echo $item['quantity']; ?> x <?php echo get_product_price($item['product_id']); ?></td>
      </tr>
    <?php endforeach; ?>
  </table>
  
  <input type="hidden" name="total" value="<?php echo $_POST['total']; ?>">
  <button type="submit" name="purchase">Purchase</button>
</form>


function get_product_price($product_id) {
  $query = "SELECT price FROM products WHERE id = :id";
  $stmt = $db->prepare($query);
  $stmt->bindParam(':id', $product_id);
  $stmt->execute();
  
  return $stmt->fetchColumn();
}


<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

$connection = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}

?>


<?php
class Product {
    private $id;
    private $name;
    private $price;

    public function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }

    public function getId() {
        return $this->id;
    }

    public function getName() {
        return $this->name;
    }

    public function getPrice() {
        return $this->price;
    }
}
?>


<?php
class User {
    private $id;
    private $username;
    private $email;

    public function __construct($id, $username, $email) {
        $this->id = $id;
        $this->username = $username;
        $this->email = $email;
    }

    public function getId() {
        return $this->id;
    }

    public function getUsername() {
        return $this->username;
    }

    public function getEmail() {
        return $this->email;
    }
}
?>


<?php
class Cart {
    private $userId;
    private $products;

    public function __construct($userId) {
        $this->userId = $userId;
        $this->products = array();
    }

    public function addProduct($product) {
        $this->products[] = $product;
    }

    public function removeProduct($productId) {
        foreach ($this->products as $key => $product) {
            if ($product->getId() == $productId) {
                unset($this->products[$key]);
                break;
            }
        }
    }

    public function getProducts() {
        return $this->products;
    }
}
?>


<?php
class Purchase {
    private $userId;
    private $cart;

    public function __construct($userId) {
        $this->userId = $userId;
        $this->cart = new Cart($userId);
    }

    public function addProduct($productId) {
        $product = new Product($productId, 'Example Product', 9.99);
        $this->cart->addProduct($product);
    }

    public function removeProduct($productId) {
        $this->cart->removeProduct($productId);
    }

    public function checkout() {
        foreach ($this->cart->getProducts() as $product) {
            $query = "INSERT INTO purchases (user_id, product_id, price)
                      VALUES (?, ?, ?)";
            $stmt = $connection->prepare($query);
            $stmt->bind_param("iii", $this->userId, $product->getId(), $product->getPrice());
            $stmt->execute();
        }
    }

    public function viewCart() {
        echo "Products in cart:
";
        foreach ($this->cart->getProducts() as $product) {
            echo "$product->getName(): $product->getPrice()
";
        }
    }
}
?>


<?php
include_once 'config.php';
include_once 'user.php';
include_once 'product.php';
include_once 'cart.php';
include_once 'purchase.php';

$user = new User(1, 'exampleuser', 'example@example.com');
$purchase = new Purchase($user->getId());

// Add products to cart
$purchase->addProduct(1);
$purchase->addProduct(2);

// View cart
$purchase->viewCart();

// Checkout
$purchase->checkout();
?>


<?php

class LoginController {
    public function index() {
        if (isset($_POST['username']) && isset($_POST['password'])) {
            $username = $_POST['username'];
            $password = $_POST['password'];

            // Assuming password is stored in plaintext for simplicity
            $query = "SELECT * FROM users WHERE username='$username' AND password='$password'";
            $result = mysqli_query($conn, $query);
            if ($row = mysqli_fetch_assoc($result)) {
                $_SESSION['user_id'] = $row['id'];
                header('Location: purchase.php');
                exit;
            } else {
                echo "Invalid username or password";
            }
        }
    }

    public function logout() {
        unset($_SESSION['user_id']);
        session_destroy();
    }
}


<?php

class PurchaseController {
    public function index() {
        // Get user ID from session
        $user_id = $_SESSION['user_id'];

        // Retrieve products and their prices from database
        $query = "SELECT * FROM products";
        $result = mysqli_query($conn, $query);
        $products = [];
        while ($row = mysqli_fetch_assoc($result)) {
            $products[] = [
                'id' => $row['id'],
                'name' => $row['name'],
                'price' => $row['price']
            ];
        }

        require_once 'views/purchase.php';
    }

    public function purchase() {
        // Get user ID from session
        $user_id = $_SESSION['user_id'];

        // Retrieve product IDs and quantities submitted via form
        $product_ids = $_POST['product_ids'];
        $quantities = $_POST['quantities'];

        if (empty($product_ids) || empty($quantities)) {
            echo "Please select products to purchase";
            return;
        }

        try {
            // Update product stock levels and create order entry
            foreach ($product_ids as $i => $id) {
                $query = "UPDATE products SET quantity=quantity-? WHERE id=?";
                $stmt = mysqli_prepare($conn, $query);
                mysqli_stmt_bind_param($stmt, 'ii', $quantities[$i], $id);
                mysqli_stmt_execute($stmt);

                // Insert order entry
                $date = date('Y-m-d');
                $total = 0;
                foreach ($product_ids as $index => $pid) {
                    $query = "INSERT INTO orders (user_id, product_id, quantity, total, date)
                              VALUES (?, ?, ?, ?, ?)";
                    $stmt = mysqli_prepare($conn, $query);
                    mysqli_stmt_bind_param($stmt, 'iisdd', $user_id, $pid, $quantities[$index], $total + ($quantities[$index] * $id), $date);
                    mysqli_stmt_execute($stmt);

                    // Update total for next product
                    $query = "SELECT price FROM products WHERE id=?";
                    $stmt = mysqli_prepare($conn, $query);
                    mysqli_stmt_bind_param($stmt, 'i', $pid);
                    mysqli_stmt_execute($stmt);
                    $row = mysqli_fetch_assoc(mysqli_use_result($stmt));
                    $total += ($quantities[$index] * $row['price']);
                }
            }

            echo "Purchase successful!";
        } catch (Exception $e) {
            echo "Error: " . $e->getMessage();
        }
    }
}


<?php

require_once 'controller/purchaseController.php';

if (isset($_POST['product_ids'])) {
    $purchaseController = new PurchaseController;
    $purchaseController->purchase();
} else {
    // Display product list and purchase form
    require_once 'views/productList.php';
}


<?php

// Define the cart array to store items
$cart = [];

// Function to add item to cart
function add_item_to_cart($item_id, $quantity) {
    global $cart;
    if (!isset($cart[$item_id])) {
        $cart[$item_id] = ['quantity' => 0];
    }
    $cart[$item_id]['quantity'] += $quantity;
}

// Function to remove item from cart
function remove_item_from_cart($item_id) {
    global $cart;
    if (isset($cart[$item_id])) {
        unset($cart[$item_id]);
    }
}

// Function to update quantity of item in cart
function update_quantity_in_cart($item_id, $new_quantity) {
    global $cart;
    if (isset($cart[$item_id])) {
        $cart[$item_id]['quantity'] = $new_quantity;
    }
}

// Function to get total cost of items in cart
function get_total_cost() {
    global $cart;
    $total_cost = 0;
    foreach ($cart as $item) {
        $total_cost += $item['price'] * $item['quantity'];
    }
    return $total_cost;
}

// Function to display cart contents
function display_cart_contents() {
    global $cart;
    echo "<h2>Cart Contents:</h2>";
    echo "<table border='1'>";
    echo "<tr><th>Item ID</th><th>Quantity</th><th>Price</th></tr>";
    foreach ($cart as $item) {
        echo "<tr><td>$item_id</td><td>$item['quantity']</td><td>\$".number_format($item['price'])."</td></tr>";
    }
    echo "</table>";
}

// Add items to cart (example data)
add_item_to_cart(1, 2); // Item ID 1, quantity 2
add_item_to_cart(2, 3); // Item ID 2, quantity 3

?>


<?php require_once 'cart.php'; ?>

<!DOCTYPE html>
<html>
<head>
    <title>Cart Example</title>
</head>
<body>

<h1>Cart Example</h1>

<!-- Display cart contents -->
<?php display_cart_contents(); ?>

<!-- Add item to cart form -->
<form action="" method="post">
    <input type="hidden" name="item_id" value="<?php echo $_POST['item_id']; ?>">
    <input type="hidden" name="quantity" value="<?php echo $_POST['quantity']; ?>">
    <button type="submit">Add to Cart</button>
</form>

<!-- Update quantity form -->
<form action="" method="post">
    <label for="item_id">Item ID:</label>
    <input type="text" id="item_id" name="item_id"><br><br>
    <label for="new_quantity">New Quantity:</label>
    <input type="number" id="new_quantity" name="new_quantity"><br><br>
    <button type="submit">Update Quantity</button>
</form>

<!-- Remove item from cart form -->
<form action="" method="post">
    <label for="item_id">Item ID:</label>
    <input type="text" id="item_id" name="item_id"><br><br>
    <button type="submit">Remove from Cart</button>
</form>

<?php
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    if (isset($_POST['item_id']) && isset($_POST['quantity'])) {
        add_item_to_cart($_POST['item_id'], $_POST['quantity']);
    } elseif (isset($_POST['item_id']) && isset($_POST['new_quantity'])) {
        update_quantity_in_cart($_POST['item_id'], $_POST['new_quantity']);
    } elseif (isset($_POST['item_id'])) {
        remove_item_from_cart($_POST['item_id']);
    }
}
?>

</body>
</html>


<?php
require_once 'dbconnect.php';

if (isset($_POST['submit'])) {
    $username = $_POST['username'];
    $email = $_POST['email'];
    $password = $_POST['password'];

    // Hash password for security
    $hashedPassword = hash('sha256', $password);

    $sql = "INSERT INTO Users (username, email, password) VALUES ('$username', '$email', '$hashedPassword')";
    mysqli_query($conn, $sql);

    echo 'User created successfully!';
}

?>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="POST">
    <label>Username:</label>
    <input type="text" name="username"><br><br>
    <label>Email:</label>
    <input type="email" name="email"><br><br>
    <label>Password:</label>
    <input type="password" name="password"><br><br>
    <button type="submit" name="submit">Register</button>
</form>


<?php
require_once 'dbconnect.php';

if (isset($_POST['login'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];

    // Hash password for security
    $hashedPassword = hash('sha256', $password);

    $sql = "SELECT * FROM Users WHERE username='$username' AND password='$hashedPassword'";
    $result = mysqli_query($conn, $sql);

    if (mysqli_num_rows($result) > 0) {
        while ($row = mysqli_fetch_assoc($result)) {
            $_SESSION['user_id'] = $row['id'];
        }
        echo 'Logged in successfully!';
    } else {
        echo 'Invalid credentials';
    }
}

?>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="POST">
    <label>Username:</label>
    <input type="text" name="username"><br><br>
    <label>Password:</label>
    <input type="password" name="password"><br><br>
    <button type="submit" name="login">Login</button>
</form>


<?php
require_once 'dbconnect.php';

$sql = "SELECT * FROM Products";
$result = mysqli_query($conn, $sql);

?>

<table>
    <?php while ($row = mysqli_fetch_assoc($result)) { ?>
        <tr>
            <td><?php echo $row['name']; ?></td>
            <td><?php echo $row['price']; ?></td>
            <td><button>Add to Cart</button></td>
        </tr>
    <?php } ?>
</table>


<?php
require_once 'dbconnect.php';

if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $user_id = $_SESSION['user_id'];

    $sql = "INSERT INTO Cart (user_id, product_id) VALUES ('$user_id', '$product_id')";
    mysqli_query($conn, $sql);

    echo 'Product added to cart!';
}

?>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="POST">
    <input type="hidden" name="product_id" value="<?php echo $_GET['id']; ?>">
    <button type="submit" name="add_to_cart">Add to Cart</button>
</form>

<table>
    <?php
    $sql = "SELECT * FROM Cart WHERE user_id=".$_SESSION['user_id'];
    $result = mysqli_query($conn, $sql);
    while ($row = mysqli_fetch_assoc($result)) {
        ?>
        <tr>
            <td><?php echo $row['product_id']; ?></td>
            <td><button>Remove from Cart</button></td>
        </tr>
    <?php } ?>
</table>


<?php
require_once 'dbconnect.php';

if (isset($_POST['checkout'])) {
    $user_id = $_SESSION['user_id'];
    $total = 0;

    // Calculate total cost of items in cart
    $sql = "SELECT * FROM Cart WHERE user_id='$user_id'";
    $result = mysqli_query($conn, $sql);

    while ($row = mysqli_fetch_assoc($result)) {
        $product_id = $row['product_id'];
        $quantity = 1;

        // Calculate cost of each item
        $sql2 = "SELECT price FROM Products WHERE id='$product_id'";
        $result2 = mysqli_query($conn, $sql2);
        while ($row2 = mysqli_fetch_assoc($result2)) {
            $price = $row2['price'];
            $total += $price * $quantity;
        }
    }

    // Insert order into database
    $sql3 = "INSERT INTO Orders (user_id, total) VALUES ('$user_id', '$total')";
    mysqli_query($conn, $sql3);

    echo 'Order placed successfully!';
}

?>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="POST">
    <button type="submit" name="checkout">Checkout</button>
</form>

<p>Total: <?php echo $total; ?></p>


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Establish database connection
$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to display products for purchase
function displayProducts() {
    $query = "SELECT * FROM products";
    $result = $conn->query($query);

    echo "<h2>Available Products</h2>";
    echo "<table border='1'>";
    echo "<tr><th>Name</th><th>Price</th></tr>";

    while ($row = $result->fetch_assoc()) {
        echo "<tr><td>" . $row['name'] . "</td><td>$" . $row['price'] . "</td></tr>";
    }

    echo "</table>";
}

// Function to process purchase
function processPurchase() {
    if (isset($_POST['submit'])) {
        // Get product IDs from form data
        $productIds = $_POST['products'];

        // Validate product IDs
        foreach ($productIds as $productId) {
            if (!ctype_digit($productId)) {
                echo "Invalid product ID";
                return;
            }
        }

        // Calculate total cost
        $totalCost = 0;
        foreach ($productIds as $productId) {
            $query = "SELECT price FROM products WHERE id = '$productId'";
            $result = $conn->query($query);
            if ($result->num_rows > 0) {
                while ($row = $result->fetch_assoc()) {
                    $totalCost += $row['price'];
                }
            } else {
                echo "Product not found";
                return;
            }
        }

        // Create new order
        $userId = $_SESSION['user_id'];
        $orderDate = date('Y-m-d H:i:s');
        $query = "INSERT INTO orders (user_id, total_cost) VALUES ('$userId', '$totalCost')";
        if ($conn->query($query)) {
            echo "Order placed successfully";
        } else {
            echo "Error placing order: " . $conn->error;
        }

        // Add products to order
        foreach ($productIds as $productId) {
            $query = "INSERT INTO order_products (order_id, product_id) VALUES ((SELECT MAX(id) FROM orders), '$productId')";
            if (!$conn->query($query)) {
                echo "Error adding product to order: " . $conn->error;
                return;
            }
        }

        header('Location: view_order.php');
        exit();
    }
}

?>

<!-- HTML Form -->
<form action="<?php $_SERVER['PHP_SELF'] ?>" method="post">
    <?php displayProducts(); ?>
    <br>
    <input type="checkbox" name="products[]" value="1">Product 1
    <br>
    <input type="checkbox" name="products[]" value="2">Product 2
    <br>
    <button type="submit" name="submit">Place Order</button>
</form>

<?php processPurchase(); ?>


// config.php
<?php

$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'store';

$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

?>


// register.php
<?php

require_once 'config.php';

if (isset($_POST['register'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];

    $sql = "INSERT INTO users (username, password) VALUES ('$username', '$password')";
    if ($conn->query($sql)) {
        echo "User created successfully.";
    } else {
        echo "Error creating user: " . $conn->error;
    }
}

?>

<form action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" method="post">
    <label>Username:</label>
    <input type="text" name="username"><br><br>
    <label>Password:</label>
    <input type="password" name="password"><br><br>
    <input type="submit" name="register" value="Register">
</form>


// login.php
<?php

require_once 'config.php';

if (isset($_POST['login'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];

    $sql = "SELECT * FROM users WHERE username = '$username' AND password = '$password'";
    if ($result = $conn->query($sql)) {
        if ($result->num_rows > 0) {
            echo "Login successful.";
        } else {
            echo "Invalid credentials.";
        }
    } else {
        echo "Error logging in: " . $conn->error;
    }
}

?>

<form action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" method="post">
    <label>Username:</label>
    <input type="text" name="username"><br><br>
    <label>Password:</label>
    <input type="password" name="password"><br><br>
    <input type="submit" name="login" value="Login">
</form>


// add_to_cart.php
<?php

require_once 'config.php';

if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Get the current user's id from session
    $user_id = $_SESSION['id'];

    $sql = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ((SELECT id FROM orders WHERE user_id = '$user_id' AND status = 'pending'), '$product_id', '$quantity')";
    if ($conn->query($sql)) {
        echo "Product added to cart successfully.";
    } else {
        echo "Error adding product: " . $conn->error;
    }
}

?>

<form action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" method="post">
    <label>Product ID:</label>
    <input type="text" name="product_id"><br><br>
    <label>Quantity:</label>
    <input type="number" name="quantity"><br><br>
    <input type="submit" name="add_to_cart" value="Add to Cart">
</form>


// checkout.php
<?php

require_once 'config.php';

if (isset($_POST['checkout'])) {
    $user_id = $_SESSION['id'];
    $total = 0;

    // Get the total cost of all products in the user's cart
    $sql = "SELECT SUM(p.price * oi.quantity) as total FROM order_items oi INNER JOIN orders o ON oi.order_id = o.id INNER JOIN products p ON oi.product_id = p.id WHERE o.user_id = '$user_id' AND o.status = 'pending'";
    if ($result = $conn->query($sql)) {
        while ($row = $result->fetch_assoc()) {
            $total += (float)$row['total'];
        }
    }

    // Create a new order and update the status of all products in the user's cart
    $order_id = 0;
    $sql = "INSERT INTO orders (user_id, total) VALUES ('$user_id', '$total')";
    if ($conn->query($sql)) {
        $order_id = $conn->insert_id;

        // Update the status of all products in the user's cart to 'processing'
        $sql = "UPDATE order_items oi SET oi.order_id = '$order_id' WHERE oi.user_id = '$user_id'";
        if ($conn->query($sql)) {
            echo "Checkout successful.";
        } else {
            echo "Error checking out: " . $conn->error;
        }
    } else {
        echo "Error checking out: " . $conn->error;
    }
}

?>

<form action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" method="post">
    <input type="submit" name="checkout" value="Checkout">
</form>


// stripe.php
<?php

require_once 'config.php';

if (isset($_POST['stripeToken'])) {
    $user_id = $_SESSION['id'];
    $order_id = 0;

    // Get the total cost of all products in the user's cart
    $sql = "SELECT SUM(p.price * oi.quantity) as total FROM order_items oi INNER JOIN orders o ON oi.order_id = o.id INNER JOIN products p ON oi.product_id = p.id WHERE o.user_id = '$user_id' AND o.status = 'pending'";
    if ($result = $conn->query($sql)) {
        while ($row = $result->fetch_assoc()) {
            $total = (float)$row['total'];
        }
    }

    // Create a new charge with Stripe
    \Stripe\Stripe::setApiKey("YOUR_STRIPE_SECRET_KEY");
    try {
        $charge = \Stripe\Charge::create(array(
            "amount" => (int) ($total * 100),
            "currency" => "usd",
            "source" => $_POST['stripeToken'],
            "description" => "Test Charge"
        ));
        echo "Charge successful.";
    } catch (\Stripe\Error\Card $e) {
        echo "Error charging card: " . $e->getMessage();
    }
}

?>

<form action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" method="post">
    <input type="hidden" name="stripeToken" value="<?php echo $_POST['stripeToken']; ?>">
    <input type="submit" name="stripeToken" value="Pay with Stripe">
</form>


<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($mysqli->connect_errno) {
    echo "Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error;
}
?>


<?php
require_once 'config.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = $_POST['username'];
    $email = $_POST['email'];
    $password = password_hash($_POST['password'], PASSWORD_DEFAULT);

    $query = "INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param('ss', $username, $email, $password);
    $stmt->execute();

    header('Location: login.php');
}
?>
<!DOCTYPE html>
<html>
<head>
    <title>Register</title>
</head>
<body>
    <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
        Username: <input type="text" name="username"><br><br>
        Email: <input type="email" name="email"><br><br>
        Password: <input type="password" name="password"><br><br>
        <input type="submit" value="Register">
    </form>
</body>
</html>


<?php
require_once 'config.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = $_POST['username'];
    $password = $_POST['password'];

    $query = "SELECT * FROM users WHERE username = ? AND password_hash = ?";
    $stmt = $mysqli->prepare($query);
    $stmt->bind_param('ss', $username, $password);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows === 1) {
        $_SESSION['user_id'] = $result->fetch_assoc()['id'];
        header('Location: cart.php');
    }
}
?>
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
    <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
        Username: <input type="text" name="username"><br><br>
        Password: <input type="password" name="password"><br><br>
        <input type="submit" value="Login">
    </form>
</body>
</html>


<?php
require_once 'config.php';

if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
}

$query = "SELECT * FROM products";
$result = $mysqli->query($query);

?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>
    <?php while ($product = $result->fetch_assoc()): ?>
        Name: <?= $product['name']; ?> | Price: <?= $product['price']; ?><br><br>
        <input type="number" name="quantity" value="1">
        <button onclick="addProduct(<?= $product['id']; ?>)">Add to Cart</button>
    <?php endwhile; ?>

    <script>
    function addProduct(productId) {
        var quantity = document.querySelector(`[name=quantity][value=1]`).value;

        $.ajax({
            type: 'POST',
            url: 'add_to_cart.php',
            data: {productId: productId, quantity: quantity},
            success: function() {
                alert('Product added to cart!');
            }
        });
    }
    </script>
</body>
</html>


<?php
require_once 'config.php';

$user_id = $_SESSION['user_id'];
$productId = $_POST['productId'];
$quantity = $_POST['quantity'];

$query = "INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)";
$stmt = $mysqli->prepare($query);
$stmt->bind_param('iis', $user_id, $productId, $quantity);
$stmt->execute();

?>


<?php
require_once 'config.php';

$productId = $_GET['id'];

$query = "SELECT * FROM products WHERE id = ?";
$result = $mysqli->prepare($query);
$result->bind_param('i', $productId);
$result->execute();
$product = $result->get_result()->fetch_assoc();

?>

<!DOCTYPE html>
<html>
<head>
    <title>Product Details</title>
</head>
<body>
    Name: <?= $product['name']; ?> | Price: <?= $product['price']; ?>
    <button onclick="buyNow()">Buy Now</button>

    <script>
    function buyNow() {
        $.ajax({
            type: 'POST',
            url: 'purchase.php',
            data: {productId: <?= $productId; ?>},
            success: function() {
                alert('Product purchased!');
            }
        });
    }
    </script>
</body>
</html>


<?php
require_once 'config.php';

$user_id = $_SESSION['user_id'];
$productId = $_POST['productId'];

$query = "INSERT INTO purchases (user_id, product_id) VALUES (?, ?)";
$stmt = $mysqli->prepare($query);
$stmt->bind_param('ii', $user_id, $productId);
$stmt->execute();

// Reduce quantity in cart
$query = "UPDATE cart SET quantity = quantity - 1 WHERE user_id = ? AND product_id = ?";
$stmt = $mysqli->prepare($query);
$stmt->bind_param('ii', $user_id, $productId);
$stmt->execute();
?>


// db.php (database connection file)
<?php
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "mydb";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


// purchase.php (purchase functionality file)
<?php

require_once 'db.php';

// Check if the user is logged in
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

// Get the product ID from the URL parameter
$product_id = $_GET['product_id'];

// Check if the product exists
$query = "SELECT * FROM products WHERE id = '$product_id'";
$result = $conn->query($query);
if ($result->num_rows > 0) {
    // Product found, get its details
    $row = $result->fetch_assoc();
    $product_name = $row['name'];
    $product_price = $row['price'];

    // Check if the product is in stock (for demonstration purposes only)
    $stock_query = "SELECT * FROM products WHERE id = '$product_id' AND quantity > 0";
    $stock_result = $conn->query($stock_query);
    if ($stock_result->num_rows > 0) {
        // Product is in stock, proceed with purchase
        // Get the user's current cart contents (for demonstration purposes only)
        $cart_query = "SELECT * FROM orders WHERE user_id = $_SESSION[user_id] AND status = 'pending'";
        $cart_result = $conn->query($cart_query);
        if ($cart_result->num_rows > 0) {
            // User has a pending order, update its total cost
            while ($cart_row = $cart_result->fetch_assoc()) {
                $order_id = $cart_row['id'];
                $total_cost = $cart_row['total_cost'] + $product_price;
                $query = "UPDATE orders SET total_cost = '$total_cost' WHERE id = '$order_id'";
                $conn->query($query);
            }
        } else {
            // User does not have a pending order, create one
            $query = "INSERT INTO orders (user_id, total_cost) VALUES ($_SESSION[user_id], '$product_price')";
            $conn->query($query);
            $order_id = $conn->insert_id;
        }

        // Add the product to the user's cart
        $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', 1)";
        $conn->query($query);

        // Update the product's stock level
        $query = "UPDATE products SET quantity = quantity - 1 WHERE id = '$product_id'";
        $conn->query($query);

        // Redirect to a success page or display a message
        header('Location: purchase-success.php');
        exit;
    } else {
        // Product is out of stock, display an error message
        echo "Sorry, this product is currently out of stock.";
    }
} else {
    // Product not found, display an error message
    echo "Product not found.";
}

?>


<?php
$host = 'localhost';
$dbname = 'shop';
$username = 'root';
$password = '';

try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}

function getProducts() {
    global $conn;
    $stmt = $conn->prepare('SELECT * FROM products');
    $stmt->execute();
    return $stmt->fetchAll();
}

function addOrder($user_id, $product_id, $quantity) {
    global $conn;
    $total = get_product_price($product_id);
    $order = array(
        'user_id' => $user_id,
        'product_id' => $product_id,
        'quantity' => $quantity,
        'total' => $total
    );
    insert_order($order);
}

function get_product_price($id) {
    global $conn;
    $stmt = $conn->prepare('SELECT price FROM products WHERE id = :id');
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch()['price'];
}

function insert_order($order) {
    global $conn;
    $sql = 'INSERT INTO orders (user_id, product_id, quantity, total, status) VALUES (:user_id, :product_id, :quantity, :total, "pending")';
    $stmt = $conn->prepare($sql);
    $stmt->bindParam(':user_id', $order['user_id']);
    $stmt->bindParam(':product_id', $order['product_id']);
    $stmt->bindParam(':quantity', $order['quantity']);
    $stmt->bindParam(':total', $order['total']);
    $stmt->execute();
}

function process_payment($id) {
    global $conn;
    $stmt = $conn->prepare('UPDATE orders SET status = "paid" WHERE id = :id');
    $stmt->bindParam(':id', $id);
    $stmt->execute();
}
?>


<?php
require_once 'config.php';

if (isset($_POST['add_to_cart'])) {
    addOrder($_SESSION['user_id'], $_POST['product_id'], $_POST['quantity']);
}

if (isset($_GET['process_payment'])) {
    process_payment($_GET['id']);
}

$products = getProducts();

?>

<html>
<head>
    <title>Shop</title>
</head>
<body>
    <h1>Shop</h1>

    <?php foreach ($products as $product): ?>
        <div>
            <h2><?php echo $product['name']; ?></h2>
            <p>Price: <?php echo $product['price']; ?></p>
            <form action="" method="post">
                <input type="hidden" name="product_id" value="<?php echo $product['id']; ?>">
                <input type="number" name="quantity" min="1">
                <button type="submit" name="add_to_cart">Add to cart</button>
            </form>
        </div>
    <?php endforeach; ?>

    <a href="?process_payment=<?php echo $_SESSION['order_id']; ?>">Process payment</a>

    <?php if (isset($_SESSION['order_id'])): ?>
        <h2>Order summary:</h2>
        <?php
            $stmt = $conn->prepare('SELECT * FROM orders WHERE id = :id');
            $stmt->bindParam(':id', $_SESSION['order_id']);
            $stmt->execute();
            $order = $stmt->fetch();

            echo "Product: " . get_product_name($order['product_id']) . ", Quantity: " . $order['quantity'] . ", Total: $" . $order['total'];
        ?>
    <?php endif; ?>

</body>
</html>


// Database connection settings
$dsn = 'mysql:host=localhost;dbname=shop';
$username = 'root';
$password = '';

// Create a PDO instance
try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// Function to add a product to the cart
function addToCart($productId, $quantity) {
    global $pdo;
    
    // Check if the product exists in the database
    $stmt = $pdo->prepare('SELECT * FROM products WHERE id = :id');
    $stmt->bindParam(':id', $productId);
    $stmt->execute();
    $product = $stmt->fetch();

    if ($product) {
        // Get the user's ID from the session
        $userId = $_SESSION['user_id'];

        // Check if the product is already in the cart
        $stmt = $pdo->prepare('SELECT * FROM orders WHERE user_id = :id AND product_id = :pid');
        $stmt->bindParam(':id', $userId);
        $stmt->bindParam(':pid', $productId);
        $stmt->execute();
        $order = $stmt->fetch();

        if ($order) {
            // Update the existing order
            $newQuantity = $order['quantity'] + $quantity;
            $total = $product['price'] * $newQuantity;
            $pdo->exec('UPDATE orders SET quantity = :nq, total = :t WHERE id = :id', array(
                ':nq' => $newQuantity,
                ':t' => $total,
                ':id' => $order['id']
            ));
        } else {
            // Add a new order
            $pdo->exec('INSERT INTO orders (user_id, product_id, quantity, total) VALUES (:uid, :pid, :q, :t)', array(
                ':uid' => $userId,
                ':pid' => $productId,
                ':q' => $quantity,
                ':t' => $product['price'] * $quantity
            ));
        }
    } else {
        echo 'Product not found';
    }
}

// Function to view the cart contents
function viewCart() {
    global $pdo;
    
    // Get the user's ID from the session
    $userId = $_SESSION['user_id'];

    // Retrieve the orders for the current user
    $stmt = $pdo->prepare('SELECT * FROM orders WHERE user_id = :id');
    $stmt->bindParam(':id', $userId);
    $stmt->execute();
    $orders = $stmt->fetchAll();

    echo '<h2>Cart Contents:</h2>';
    echo '<table border="1">';
    echo '<tr><th>Product Name</th><th>Quantity</th><th>Total</th></tr>';

    foreach ($orders as $order) {
        // Retrieve the product details
        $stmt = $pdo->prepare('SELECT * FROM products WHERE id = :id');
        $stmt->bindParam(':id', $order['product_id']);
        $stmt->execute();
        $product = $stmt->fetch();

        echo '<tr><td>' . $product['name'] . '</td><td>' . $order['quantity'] . '</td><td>' . $order['total'] . '</td></tr>';
    }

    echo '</table>';
}

// Function to checkout
function checkout() {
    global $pdo;
    
    // Get the user's ID from the session
    $userId = $_SESSION['user_id'];

    // Retrieve the orders for the current user
    $stmt = $pdo->prepare('SELECT * FROM orders WHERE user_id = :id');
    $stmt->bindParam(':id', $userId);
    $stmt->execute();
    $orders = $stmt->fetchAll();

    echo '<h2>Checkout:</h2>';

    // Process each order
    foreach ($orders as $order) {
        // Update the product stock
        $pdo->exec('UPDATE products SET quantity = quantity - :q WHERE id = :pid', array(
            ':q' => $order['quantity'],
            ':pid' => $order['product_id']
        ));

        // Remove the order from the cart
        $pdo->exec('DELETE FROM orders WHERE id = :id', array(':id' => $order['id']));
    }

    echo '<p>Thank you for your purchase!</p>';
}


// Set up the user session
$_SESSION['user_id'] = 1;

// Add a product to the cart
addToCart(1, 2);

// View the cart contents
viewCart();

// Checkout
checkout();


// Configuration
$dbHost = 'localhost';
$dbUsername = 'your_username';
$dbPassword = 'your_password';
$dbName = 'shop';

// Database connection
$conn = new PDO("mysql:host=$dbHost;dbname=$dbName", $dbUsername, $dbPassword);

// Function to get products
function getProducts() {
  global $conn;
  $stmt = $conn->prepare('SELECT * FROM products');
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to add order
function addOrder($customerName, $products) {
  global $conn;
  $total = 0;
  foreach ($products as $product) {
    $total += $product['price'] * $product['quantity'];
  }
  $stmt = $conn->prepare('INSERT INTO orders (customer_name, order_date, total) VALUES (?, NOW(), ?)');
  $stmt->execute([$customerName, $total]);
  $orderId = $conn->lastInsertId();
  return $orderId;
}

// Function to add order items
function addOrderItems($orderId, $products) {
  global $conn;
  foreach ($products as $product) {
    $stmt = $conn->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)');
    $stmt->execute([$orderId, $product['id'], $product['quantity']]);
  }
}

// Function to process purchase
function processPurchase() {
  if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Get customer name and products from form data
    $customerName = $_POST['customer_name'];
    $products = [];
    foreach ($_POST['products'] as $productId => $quantity) {
      $product = getProducts()[intval($productId)];
      if ($product) {
        $products[] = [
          'id' => $product['id'],
          'name' => $product['name'],
          'price' => $product['price'],
          'quantity' => intval($quantity)
        ];
      }
    }

    // Add order
    $orderId = addOrder($customerName, $products);

    // Add order items
    addOrderItems($orderId, $products);

    // Display success message
    echo 'Purchase successful!';
  }
}

// Call the processPurchase function
processPurchase();


<?php

// Configuration
$dbHost = 'localhost';
$dbUsername = 'your_username';
$dbPassword = 'your_password';
$dbName = 'your_database';

// Connect to database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get product list from database
$sql = "SELECT * FROM products";
$result = $conn->query($sql);

$products = array();
while ($row = $result->fetch_assoc()) {
    $products[] = array(
        'id' => $row['id'],
        'name' => $row['name'],
        'price' => $row['price']
    );
}

?>

<!-- HTML form -->
<form action="" method="post">
    <label for="product_id">Select a product:</label>
    <select name="product_id" id="product_id">
        <?php foreach ($products as $product) { ?>
            <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?></option>
        <?php } ?>
    </select>

    <br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity" required>

    <br><br>

    <button type="submit">Buy Now!</button>
</form>

<?php

// Handle form submission
if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
    $productId = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Validate input
    if ($quantity <= 0) {
        echo "Invalid quantity. Please enter a positive number.";
        return;
    }

    // Get product price from database
    $sql = "SELECT price FROM products WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $productId);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($row = $result->fetch_assoc()) {
        $price = $row['price'];

        // Calculate total
        $total = $price * $quantity;

        // Insert order into database
        $sql = "INSERT INTO orders (user_id, product_id, quantity, total) VALUES (?, ?, ?, ?)";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("iiii", 0, $productId, $quantity, $total);
        $stmt->execute();

        echo "Order placed successfully!";
    } else {
        echo "Error: Product not found.";
    }
}

// Close database connection
$conn->close();
?>


// Connect to the database
$mysqli = new mysqli("localhost", "username", "password", "database");

// Function to add a product to the cart
function add_product_to_cart($product_id, $quantity) {
  global $mysqli;
  $query = "INSERT INTO order_items (order_id, product_id, quantity)
            VALUES (NULL, ?, ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("ii", $product_id, $quantity);
  $result = $stmt->execute();
  if ($result) {
    return true;
  } else {
    return false;
  }
}

// Function to checkout
function checkout() {
  global $mysqli;
  // Get the cart contents
  $query = "SELECT oi.order_id, p.name, oi.quantity
            FROM order_items oi
            INNER JOIN products p ON oi.product_id = p.id";
  $stmt = $mysqli->prepare($query);
  $result = $stmt->execute();
  $cart_contents = array();
  while ($row = $stmt->get_result()->fetch_assoc()) {
    $cart_contents[] = array(
      "order_id" => $row["order_id"],
      "name" => $row["name"],
      "quantity" => $row["quantity"]
    );
  }

  // Create a new order
  $query = "INSERT INTO orders (customer_name, order_date, total)
            VALUES (?, ?, ?)";
  $stmt = $mysqli->prepare($query);
  $stmt->bind_param("sss", $_SESSION["username"], date("Y-m-d"), array_sum(array_column($cart_contents, "quantity")) * array_sum(array_column($cart_contents, "quantity")));
  $result = $stmt->execute();
  if ($result) {
    // Assign the order ID to each item in the cart
    foreach ($cart_contents as &$item) {
      $query = "UPDATE order_items SET order_id = ?
                WHERE id = ?";
      $stmt = $mysqli->prepare($query);
      $stmt->bind_param("ii", $item["order_id"], $item["id"]);
      $result = $stmt->execute();
    }
    return true;
  } else {
    return false;
  }
}

// Function to purchase a product
function purchase_product($product_id, $quantity) {
  global $mysqli;
  // Add the product to the cart
  if (add_product_to_cart($product_id, $quantity)) {
    // Proceed to checkout
    if (checkout()) {
      return true; // Order created successfully
    } else {
      return false; // Error creating order
    }
  } else {
    return false; // Error adding product to cart
  }
}


// Assume we have a user logged in with the username "john"
$_SESSION["username"] = "john";

// Purchase a product
$purchased = purchase_product(1, 2); // Product ID 1, quantity 2

if ($purchased) {
  echo "Order created successfully!";
} else {
  echo "Error creating order.";
}


class Cart {
  private $items;
  private $subtotal;
  private $taxRate;

  public function __construct() {
    $this->items = array();
    $this->subtotal = 0;
    $this->taxRate = 8; // default tax rate (8% in this example)
  }

  public function addItem($item, $quantity) {
    if (isset($this->items[$item])) {
      $this->items[$item] += $quantity;
    } else {
      $this->items[$item] = $quantity;
    }
    $this->updateSubtotal();
  }

  public function removeItem($item) {
    unset($this->items[$item]);
    $this->updateSubtotal();
  }

  public function updateSubtotal() {
    $this->subtotal = 0;
    foreach ($this->items as $item => $quantity) {
      $price = getItemPrice($item); // assume a function `getItemPrice()` exists
      $this->subtotal += $price * $quantity;
    }
  }

  public function getSubtotal() {
    return $this->subtotal;
  }

  public function getTaxAmount() {
    return ($this->subtotal * $this->taxRate / 100);
  }

  public function getTotal() {
    return $this->getSubtotal() + $this->getTaxAmount();
  }
}


function getItemPrice($item) {
  // simulate retrieving item price from database
  $prices = array(
    'product1' => 19.99,
    'product2' => 29.99,
    'product3' => 39.99,
  );
  return isset($prices[$item]) ? $prices[$item] : 0;
}


// cart.php (continued)

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  $item = $_POST['item'];
  $quantity = $_POST['quantity'];

  if ($item && $quantity) {
    $cart->addItem($item, $quantity);
  }
}


class PurchaseController {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
    }

    // Display products in cart
    public function displayCart() {
        if (isset($_SESSION['cart'])) {
            $productsInCart = $_SESSION['cart'];
            echo '<h2>Shopping Cart</h2>';
            foreach ($productsInCart as $product) {
                echo '<p>' . $product['name'] . ' x ' . $product['quantity'] . ' @ $' . $product['price'] . '</p>';
            }
        } else {
            echo '<p>No products in cart.</p>';
        }
    }

    // Add product to cart
    public function addProductToCart($productId) {
        if (isset($_SESSION['cart'])) {
            $productsInCart = $_SESSION['cart'];
            foreach ($productsInCart as &$product) {
                if ($product['id'] == $productId) {
                    $product['quantity']++;
                    break;
                }
            }
        } else {
            $_SESSION['cart'][] = array(
                'id' => $productId,
                'name' => '',
                'price' => 0.00,
                'quantity' => 1
            );
        }

        // Save cart to session
        $_SESSION['cart'] = $_SESSION['cart'];
    }

    // Remove product from cart
    public function removeProductFromCart($productId) {
        if (isset($_SESSION['cart'])) {
            $productsInCart = $_SESSION['cart'];
            foreach ($productsInCart as &$product) {
                if ($product['id'] == $productId) {
                    unset($product);
                    break;
                }
            }

            // Save cart to session
            $_SESSION['cart'] = array_values($productsInCart);
        }
    }

    // Process payment and save order
    public function processPayment() {
        if (isset($_POST['submit'])) {
            $user_id = $_POST['user_id'];
            $total = 0.00;

            // Calculate total cost of products in cart
            foreach ($_SESSION['cart'] as $product) {
                $total += ($product['price'] * $product['quantity']);
            }

            // Save order to database
            $sql = "INSERT INTO orders (user_id, total, status)
                    VALUES (:user_id, :total, 'pending')";
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':user_id', $user_id);
            $stmt->bindParam(':total', $total);
            $stmt->execute();

            // Save products to order details
            foreach ($_SESSION['cart'] as $product) {
                $sql = "INSERT INTO order_details (order_id, product_id, quantity)
                        VALUES (:order_id, :product_id, :quantity)";
                $stmt = $this->db->prepare($sql);
                $stmt->bindParam(':order_id', $this->db->lastInsertId());
                $stmt->bindParam(':product_id', $product['id']);
                $stmt->bindParam(':quantity', $product['quantity']);
                $stmt->execute();
            }

            // Clear cart
            unset($_SESSION['cart']);

            echo 'Order successfully processed!';
        }
    }
}


<?php
define('DB_HOST', 'localhost');
define('DB_NAME', 'database_name');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');

$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
?>


<?php
require_once 'config.php';

if (isset($_POST['submit'])) {
  $username = $_POST['username'];
  $email = $_POST['email'];
  $password = password_hash($_POST['password'], PASSWORD_DEFAULT);

  $query = "INSERT INTO users (username, email, password) VALUES ('$username', '$email', '$password')";
  mysqli_query($mysqli, $query);
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Register</title>
</head>
<body>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <label for="username">Username:</label><br>
  <input type="text" id="username" name="username"><br>
  <label for="email">Email:</label><br>
  <input type="email" id="email" name="email"><br>
  <label for="password">Password:</label><br>
  <input type="password" id="password" name="password"><br>
  <input type="submit" name="submit" value="Register">
</form>

</body>
</html>


<?php
require_once 'config.php';

if (isset($_POST['login'])) {
  $username = $_POST['username'];
  $password = $_POST['password'];

  $query = "SELECT * FROM users WHERE username = '$username' AND password = '$password'";
  $result = mysqli_query($mysqli, $query);

  if (mysqli_num_rows($result) > 0) {
    header('Location: index.php');
    exit;
  } else {
    echo 'Invalid credentials';
  }
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Login</title>
</head>
<body>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <label for="username">Username:</label><br>
  <input type="text" id="username" name="username"><br>
  <label for="password">Password:</label><br>
  <input type="password" id="password" name="password"><br>
  <input type="submit" name="login" value="Login">
</form>

</body>
</html>


<?php
require_once 'config.php';

$query = "SELECT * FROM products";
$result = mysqli_query($mysqli, $query);

?>

<!DOCTYPE html>
<html>
<head>
  <title>Products</title>
</head>
<body>

<h1>Products</h1>

<ul>
  <?php while ($row = mysqli_fetch_assoc($result)) { ?>
    <li><?php echo $row['name']; ?> - <?php echo $row['price']; ?></li>
  <?php } ?>
</ul>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="hidden" name="product_id" value="">
  <input type="submit" name="add_to_cart" value="Add to Cart">
</form>

<?php
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  // Add product to cart logic here
}

?>

</body>
</html>


<?php
require_once 'config.php';

$query = "SELECT * FROM products";
$result = mysqli_query($mysqli, $query);

$products_in_cart = array();

if (isset($_SESSION['cart'])) {
  $products_in_cart = $_SESSION['cart'];
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Cart</title>
</head>
<body>

<h1>Cart</h1>

<ul>
  <?php while ($row = mysqli_fetch_assoc($result)) { ?>
    <li><?php echo $row['name']; ?> - <?php echo $row['price']; ?></li>
    <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
      <input type="hidden" name="product_id" value="<?php echo $row['id']; ?>">
      <input type="submit" name="add_to_cart" value="Add to Cart">
    </form>
  <?php } ?>
</ul>

<?php
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  if (!in_array($product_id, $products_in_cart)) {
    array_push($products_in_cart, $product_id);
    $_SESSION['cart'] = $products_in_cart;
  }
}

?>

</body>
</html>


<?php
require_once 'config.php';

if (isset($_POST['checkout'])) {
  // Process payment logic here
}

?>

<!DOCTYPE html>
<html>
<head>
  <title>Checkout</title>
</head>
<body>

<h1>Checkout</h1>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="submit" name="checkout" value="Checkout">
</form>

<?php
if (isset($_POST['checkout'])) {
  // Process payment logic here
}

?>

</body>
</html>


<?php

// Check if form has been submitted
if (isset($_POST['submit'])) {

    // Assign form values to variables
    $customer_name = $_POST['customer_name'];
    $email = $_POST['email'];
    $product = $_POST['product'];
    $quantity = $_POST['quantity'];

    // Calculate total amount
    $amount = $quantity * 10; // Assume product price is $10

    // Store purchase information in database
    include 'dbconnect.php';
    $query = "INSERT INTO purchases (customer_name, email, product_name, quantity, amount) VALUES ('$customer_name', '$email', '$product', '$quantity', '$amount')";
    mysqli_query($conn, $query);

    echo "Thank you for your purchase!";
}

?>


<?php

// DB connection settings
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "test";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

?>


// database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// function to get all products from database
function get_products() {
  global $conn;
  $query = "SELECT * FROM products";
  $result = $conn->query($query);
  return $result->fetch_all(MYSQLI_ASSOC);
}

// function to process purchase
function process_purchase($product_id, $quantity) {
  global $conn;
  // check if product exists and has sufficient quantity
  $query = "SELECT * FROM products WHERE id = '$product_id'";
  $result = $conn->query($query);
  if ($result->num_rows == 0 || (int)$result->fetch_assoc()['quantity'] < (int)$quantity) {
    return false;
  }

  // update product quantity
  $new_quantity = (int)$result->fetch_assoc()['quantity'] - (int)$quantity;
  $query = "UPDATE products SET quantity = '$new_quantity' WHERE id = '$product_id'";
  $conn->query($query);

  // insert order into database
  $total_cost = (int)$quantity * (float)result->fetch_assoc()['price'];
  $query = "INSERT INTO orders (product_id, quantity, total_cost) VALUES ('$product_id', '$quantity', '$total_cost')";
  $conn->query($query);

  return true;
}

// function to display cart
function display_cart() {
  global $conn;
  $query = "SELECT * FROM orders";
  $result = $conn->query($query);
  echo "<h2>Cart</h2>";
  foreach ($result->fetch_all(MYSQLI_ASSOC) as $order) {
    echo "Product: " . get_product_name($order['product_id']) . ", Quantity: " . $order['quantity'] . ", Total Cost: $" . $order['total_cost'] . "<br>";
  }
}

// function to display product name
function get_product_name($product_id) {
  global $conn;
  $query = "SELECT name FROM products WHERE id = '$product_id'";
  return $conn->query($query)->fetch_assoc()['name'];
}


// get all products
$products = get_products();

// create cart
.cart{
  display_cart();
}

// add product to cart
if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  if (process_purchase($product_id, $quantity)) {
    echo "Product added to cart!";
  } else {
    echo "Error adding product to cart.";
  }
}

// display products
foreach ($products as $product) {
  echo "<p>ID: " . $product['id'] . ", Name: " . $product['name'] . ", Price: $" . $product['price'] . "</p>";
}


class Purchase {
  private $db;

  function __construct() {
    // Connect to database
    $this->db = new mysqli('localhost', 'username', 'password', 'database');
  }

  public function placeOrder($customer_id, $products) {
    // Validate customer ID and products
    if (!$this->validateCustomer($customer_id)) {
      return array('error' => 'Invalid customer ID');
    }
    foreach ($products as $product) {
      if (!isset($product['id']) || !isset($product['quantity'])) {
        return array('error' => 'Invalid product data');
      }
    }

    // Calculate order total
    $total = 0;
    foreach ($products as $product) {
      $total += (int)$product['price'] * $product['quantity'];
    }

    // Insert new order into database
    $query = "INSERT INTO orders (customer_id, order_date, total, status)
              VALUES (?, NOW(), ?, 'pending')";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param('ii', $customer_id, $total);
    $stmt->execute();

    // Get new order ID
    $orderId = $this->db->insert_id;

    // Insert order items into database
    foreach ($products as $product) {
      $query = "INSERT INTO order_items (order_id, product_id, quantity)
                VALUES (?, ?, ?)";
      $stmt = $this->db->prepare($query);
      $stmt->bind_param('iii', $orderId, $product['id'], $product['quantity']);
      $stmt->execute();
    }

    return array('success' => 'Order placed successfully');
  }

  public function validateCustomer($customer_id) {
    // Check if customer exists in database
    $query = "SELECT * FROM customers WHERE id = ?";
    $stmt = $this->db->prepare($query);
    $stmt->bind_param('i', $customer_id);
    $stmt->execute();
    $result = $stmt->get_result();

    return $result->num_rows > 0;
  }
}


$purchase = new Purchase();

$products = array(
  array('id' => 1, 'price' => 9.99, 'quantity' => 2),
  array('id' => 3, 'price' => 19.99, 'quantity' => 1)
);

$result = $purchase->placeOrder(1, $products);

if ($result['success']) {
  echo "Order placed successfully!";
} else {
  echo "Error: " . $result['error'];
}


// config.php
<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database_name');

$connection = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}
?>

// functions.php
<?php

function create_user($name, $email) {
  $query = "INSERT INTO users (name, email) VALUES (?, ?)";
  $stmt = $connection->prepare($query);
  $stmt->bind_param("ss", $name, $email);
  $result = $stmt->execute();
  return $result;
}

function add_to_cart($user_id, $product_id, $quantity) {
  $query = "INSERT INTO cart_items (user_id, product_id, quantity) VALUES (?, ?, ?)";
  $stmt = $connection->prepare($query);
  $stmt->bind_param("iii", $user_id, $product_id, $quantity);
  $result = $stmt->execute();
  return $result;
}

function make_purchase($user_id) {
  $query = "SELECT c.user_id, p.price, ci.quantity FROM cart_items ci JOIN products p ON ci.product_id = p.id WHERE ci.user_id = ?";
  $stmt = $connection->prepare($query);
  $stmt->bind_param("i", $user_id);
  $stmt->execute();
  $result = $stmt->get_result();

  if ($result) {
    $order_total = 0;
    while ($row = $result->fetch_assoc()) {
      $order_total += $row['price'] * $row['quantity'];
    }

    $query = "INSERT INTO orders (user_id, total) VALUES (?, ?)";
    $stmt = $connection->prepare($query);
    $stmt->bind_param("id", $user_id, $order_total);
    $result = $stmt->execute();

    if ($result) {
      // remove items from cart
      $query = "DELETE FROM cart_items WHERE user_id = ?";
      $stmt = $connection->prepare($query);
      $stmt->bind_param("i", $user_id);
      $result = $stmt->execute();
    }
  }

  return $result;
}

?>


// create a new user
$user_name = "John Doe";
$user_email = "johndoe@example.com";
$result = create_user($user_name, $user_email);
echo "User created: " . ($result ? "Yes" : "No") . "
";

// add items to cart
$user_id = 1;
$product_ids[] = 1;
$quantities[] = 2;

foreach (array_combine($product_ids, $quantities) as $product_id => $quantity) {
  $result = add_to_cart($user_id, $product_id, $quantity);
  echo "Item added to cart: " . ($result ? "Yes" : "No") . "
";
}

// make a purchase
$result = make_purchase($user_id);
echo "Purchase made: " . ($result ? "Yes" : "No") . "
";


<?php

// Product database (in a real application, this would be replaced with a database)
$products = array(
    array("id" => 1, "name" => "Product 1", "price" => 10.99),
    array("id" => 2, "name" => "Product 2", "price" => 5.99),
    array("id" => 3, "name" => "Product 3", "price" => 7.99)
);

// Shopping cart (in a real application, this would be replaced with session data)
$cart = array();

// Display products
function displayProducts($products) {
    foreach ($products as $product) {
        echo "<p>" . $product['name'] . " - $" . number_format($product['price'], 2) . "</p>";
    }
}

displayProducts($products);

?>

<!-- Shopping cart form -->
<form action="" method="post">
    <table>
        <?php foreach ($products as $product) { ?>
            <tr>
                <td><?php echo $product['name']; ?></td>
                <td>$<?php echo number_format($product['price'], 2); ?></td>
                <td><input type="checkbox" name="cart[]" value="<?php echo $product['id']; ?>"></td>
            </tr>
        <?php } ?>
    </table>

    <!-- Submit cart -->
    <button type="submit">Add to Cart</button>

    <?php
    // If the form has been submitted, add products to cart and display it.
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        // Check which products are in the shopping cart
        $cart = $_POST['cart'];

        // Check stock for each product
        foreach ($products as $product) {
            if (in_array($product['id'], $cart)) {
                echo "<p>Adding " . $product['name'] . " to your cart.</p>";
            }
        }

        // Display the shopping cart
        echo "<h2>Your Cart:</h2>";

        foreach ($products as $product) {
            if (in_array($product['id'], $cart)) {
                echo "<p>" . $product['name'] . " - $" . number_format($product['price'], 2) . "</p>";
            }
        }

        // Display checkout button
        echo "<button type='submit' name='checkout'>Checkout</button>";
    } ?>

    <!-- If the form has been submitted and the user chose to checkout, display the purchase confirmation -->
    <?php if (isset($_POST['checkout'])) { ?>
        <h2>Thank you for your order!</h2>
        <?php foreach ($products as $product) {
            if (in_array($product['id'], $_POST['cart'])) {
                echo "You purchased " . $product['name'] . " for $" . number_format($product['price'], 2) . ".<br>";
            }
        } ?>
    <?php } ?>

</form>


<?php

// Include database connection file
require_once 'db.php';

// Function to add product to cart
function add_product_to_cart($user_id, $product_id, $quantity = 1) {
  global $conn;
  
  // Check if product already exists in cart
  $stmt = $conn->prepare("SELECT * FROM cart WHERE user_id = ? AND product_id = ?");
  $stmt->execute([$user_id, $product_id]);
  $result = $stmt->fetch();
  
  if ($result) {
    // Update quantity and total
    $new_quantity = $result['quantity'] + $quantity;
    $new_total = $result['total'] + $result['price'] * $quantity;
    
    $stmt = $conn->prepare("UPDATE cart SET quantity = ?, total = ? WHERE id = ?");
    $stmt->execute([$new_quantity, $new_total, $result['id']]);
  } else {
    // Insert new product into cart
    $total = $product->price * $quantity;
    
    $stmt = $conn->prepare("INSERT INTO cart (user_id, product_id, quantity, total) VALUES (?, ?, ?, ?)");
    $stmt->execute([$user_id, $product_id, $quantity, $total]);
  }
  
  return true;
}

// Function to get cart contents
function get_cart_contents($user_id) {
  global $conn;
  
  $stmt = $conn->prepare("SELECT * FROM cart WHERE user_id = ?");
  $stmt->execute([$user_id]);
  $result = $stmt->fetchAll();
  
  return $result;
}

// Function to checkout (remove products from cart and update user balance)
function checkout($user_id) {
  global $conn;
  
  // Get cart contents
  $cart_contents = get_cart_contents($user_id);
  
  foreach ($cart_contents as $product) {
    // Update product stock and remove from cart
    $stmt = $conn->prepare("UPDATE products SET stock = stock - ? WHERE id = ?");
    $stmt->execute([$product['quantity'], $product['product_id']]);
    
    $stmt = $conn->prepare("DELETE FROM cart WHERE user_id = ? AND product_id = ?");
    $stmt->execute([$user_id, $product['product_id']]);
  }
  
  // Update user balance
  $total_paid = array_sum(array_column($cart_contents, 'total'));
  
  $stmt = $conn->prepare("UPDATE users SET balance = balance - ? WHERE id = ?");
  $stmt->execute([$total_paid, $user_id]);
}

?>


<?php

// Include cart file
require_once 'cart.php';

// Get products from database
$products = get_products();

?>

<!-- HTML for adding product to cart -->
<form action="" method="post">
  <select name="product_id">
    <?php foreach ($products as $product) { ?>
      <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?></option>
    <?php } ?>
  </select>
  <input type="number" name="quantity" value="1">
  <button type="submit" name="add_to_cart">Add to Cart</button>
</form>

<!-- HTML for viewing cart contents -->
<h2>Cart Contents:</h2>
<ul>
  <?php $cart_contents = get_cart_contents($_SESSION['user_id']); foreach ($cart_contents as $product) { ?>
    <li><?php echo $product['name']; ?> (x<?php echo $product['quantity']; ?>): $<?php echo number_format($product['total'], 2); ?></li>
  <?php } ?>
</ul>

<!-- HTML for checkout -->
<form action="" method="post">
  <button type="submit" name="checkout">Checkout</button>
</form>

<?php

// Check if add to cart button was clicked
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  
  add_product_to_cart($_SESSION['user_id'], $product_id, $quantity);
}

// Check if checkout button was clicked
if (isset($_POST['checkout'])) {
  checkout($_SESSION['user_id']);
}

?>


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'online_store';
$username = 'root';
$password = '';

try {
    // Connect to database
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}

// Function to add a purchase to the database
function add_purchase($user_id, $product_id, $quantity) {
    global $conn;
    
    // Check if product is in stock
    $stmt = $conn->prepare("SELECT quantity FROM products WHERE id = :id");
    $stmt->bindParam(':id', $product_id);
    $stmt->execute();
    $product = $stmt->fetch();
    
    if ($product['quantity'] >= $quantity) {
        // Update product stock
        $update_stmt = $conn->prepare("UPDATE products SET quantity = quantity - :quantity WHERE id = :id");
        $update_stmt->bindParam(':quantity', $quantity);
        $update_stmt->bindParam(':id', $product_id);
        $update_stmt->execute();
        
        // Add purchase to database
        $insert_stmt = $conn->prepare("INSERT INTO purchases (user_id, product_id, quantity) VALUES (:user_id, :product_id, :quantity)");
        $insert_stmt->bindParam(':user_id', $user_id);
        $insert_stmt->bindParam(':product_id', $product_id);
        $insert_stmt->bindParam(':quantity', $quantity);
        $insert_stmt->execute();
        
        return true;
    } else {
        return false;
    }
}

// Function to get user's purchase history
function get_purchase_history($user_id) {
    global $conn;
    
    // Get all purchases for the user
    $stmt = $conn->prepare("SELECT p.product_id, p.name, p.price, pu.quantity FROM products p JOIN purchases pu ON p.id = pu.product_id WHERE pu.user_id = :id");
    $stmt->bindParam(':id', $user_id);
    $stmt->execute();
    
    return $stmt->fetchAll();
}

// Example usage
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    $result = add_purchase($_SESSION['user_id'], $product_id, $quantity);
    if ($result) {
        echo "Product added to cart successfully!";
    } else {
        echo "Error adding product to cart.";
    }
}

if (isset($_POST['view_cart'])) {
    $user_id = $_SESSION['user_id'];
    $purchase_history = get_purchase_history($user_id);
    echo json_encode($purchase_history);
}

?>


<?php

// Include database connection settings
require_once 'purchase.php';

// Initialize session
session_start();

?>

<html>
<head>
    <title>Online Store</title>
</head>
<body>

<form action="" method="post">
    <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
    <input type="number" name="quantity" value="1">
    <button type="submit" name="add_to_cart">Add to Cart</button>
</form>

<form action="" method="post">
    <button type="submit" name="view_cart">View Cart</button>
</form>

<?php

// Check if user is logged in
if (isset($_SESSION['user_id'])) {
    // Display cart contents
    $purchase_history = get_purchase_history($_SESSION['user_id']);
    echo "<h2>Purchase History:</h2>";
    foreach ($purchase_history as $row) {
        echo "<p>Product ID: " . $row['product_id'] . ", Name: " . $row['name'] . ", Price: $" . $row['price'] . ", Quantity: " . $row['quantity'] . "</p>";
    }
}

?>
</body>
</html>


<?php

// Database connection settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

?>


<?php

// Function to connect to database
function db_connect() {
    global $db_host, $db_username, $db_password, $db_name;
    return new mysqli($db_host, $db_username, $db_password, $db_name);
}

// Function to get user's cart
function get_cart($user_id) {
    // SQL query to select products from user's cart
    $sql = "SELECT * FROM cart WHERE user_id = '$user_id'";
    return mysqli_query(db_connect(), $sql);
}

?>


<?php

// Include functions and database connection settings
include 'config.php';
include 'functions.php';

// Connect to database
$db = db_connect();

// Check if user is logged in (for security purposes)
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
}

// Get user's cart products
$cart_products = get_cart($_SESSION['user_id']);

?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purchase</title>
</head>
<body>

    <!-- Display cart products -->
    <?php
    while ($product = mysqli_fetch_assoc($cart_products)) {
        echo '<p>' . $product['name'] . ': ' . $product['price'] . '</p>';
    }
    ?>

    <!-- Checkout form -->
    <form action="process_payment.php" method="post">
        <input type="text" name="card_number" placeholder="Card Number">
        <input type="text" name="expiry_date" placeholder="Expiry Date">
        <input type="text" name="cvc" placeholder="CVC">
        <button type="submit">Pay</button>
    </form>

</body>
</html>


<?php

// Include functions and database connection settings
include 'config.php';
include 'functions.php';

// Connect to database
$db = db_connect();

// Process payment using Stripe API (example use case)
if ($_POST['card_number'] && $_POST['expiry_date'] && $_POST['cvc']) {
    // Create a new charge object
    $charge = array(
        "amount" => 1000, // amount in cents
        "currency" => "usd",
        "source" => array(
            "object" => "card",
            "id" => $_POST['card_number'],
            "exp_month" => (int) $_POST['expiry_date'],
            "exp_year" => date('Y') + 1,
            "cvc" => $_POST['cvc']
        )
    );

    // Create a Stripe client
    \Stripe\Stripe::setApiKey("YOUR_STRIPE_KEY");

    try {
        // Make the charge request
        $charge_response = \Stripe\Charge::create($charge);
        
        // If payment is successful, add order to database
        $sql = "INSERT INTO orders (user_id, total) VALUES ('$user_id', '" . $_POST['amount'] . "')";  
        mysqli_query($db, $sql);

        echo 'Payment Successful!';
    } catch (\Stripe\Error\Base => e) {
        // If payment fails, display error message
        echo "Error processing payment: " . $e->getMessage();
    }
}

?>


<?php
// Initialize the cart array
$cart = [];

// Function to add item to cart
function add_to_cart($item_id, $quantity) {
  global $cart;
  if (isset($cart[$item_id])) {
    // If item is already in cart, increment quantity
    $cart[$item_id]['quantity'] += $quantity;
  } else {
    // Add new item to cart
    $cart[$item_id] = ['price' => get_price($item_id), 'quantity' => $quantity];
  }
}

// Function to remove item from cart
function remove_from_cart($item_id) {
  global $cart;
  if (isset($cart[$item_id])) {
    // Remove item from cart
    unset($cart[$item_id]);
  }
}

// Function to get total cost of items in cart
function get_total_cost() {
  global $cart;
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// Function to display cart contents
function display_cart() {
  global $cart;
  ?>
  <h2>Cart Contents:</h2>
  <table>
    <tr>
      <th>Item ID</th>
      <th>Price</th>
      <th>Quantity</th>
    </tr>
    <?php foreach ($cart as $item_id => $item) { ?>
    <tr>
      <td><?= $item_id ?></td>
      <td><?= $item['price'] ?></td>
      <td><?= $item['quantity'] ?></td>
    </tr>
    <?php } ?>
  </table>
  <?php
}

// Function to update quantity of item in cart
function update_quantity($item_id, $new_quantity) {
  global $cart;
  if (isset($cart[$item_id])) {
    // Update quantity of item in cart
    $cart[$item_id]['quantity'] = $new_quantity;
  }
}
?>


<?php require 'cart.php'; ?>

<h1>Purchase Cart</h1>

<!-- Display existing items in cart -->
<div id="existing-items">
  <?php display_cart(); ?>
</div>

<!-- Add item to cart form -->
<form action="" method="post">
  <label for="item_id">Item ID:</label>
  <input type="text" id="item_id" name="item_id"><br><br>
  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity"><br><br>
  <button type="submit" name="add_to_cart">Add to Cart</button>
</form>

<!-- Remove item from cart form -->
<form action="" method="post">
  <label for="item_id_remove">Item ID:</label>
  <input type="text" id="item_id_remove" name="item_id"><br><br>
  <button type="submit" name="remove_from_cart">Remove from Cart</button>
</form>

<!-- Update quantity of item in cart form -->
<form action="" method="post">
  <label for="item_id_update">Item ID:</label>
  <input type="text" id="item_id_update" name="item_id"><br><br>
  <label for="new_quantity">New Quantity:</label>
  <input type="number" id="new_quantity" name="new_quantity"><br><br>
  <button type="submit" name="update_quantity">Update Quantity</button>
</form>

<!-- Display total cost of items in cart -->
<p>Total Cost: <?php echo get_total_cost(); ?></p>

<?php
if (isset($_POST['add_to_cart'])) {
  $item_id = $_POST['item_id'];
  $quantity = $_POST['quantity'];
  add_to_cart($item_id, $quantity);
}

if (isset($_POST['remove_from_cart'])) {
  $item_id = $_POST['item_id'];
  remove_from_cart($item_id);
}

if (isset($_POST['update_quantity'])) {
  $item_id = $_POST['item_id'];
  $new_quantity = $_POST['new_quantity'];
  update_quantity($item_id, $new_quantity);
}
?>


<?php
// Define prices of items
$prices = [
  'item1' => 10.99,
  'item2' => 5.99,
  'item3' => 7.99,
];

function get_price($item_id) {
  global $prices;
  return isset($prices[$item_id]) ? $prices[$item_id] : 0;
}
?>


// db.php: database connection settings
$host = 'localhost';
$dbname = 'mydatabase';
$username = 'myusername';
$password = 'mypassword';

class Database {
    private $conn;

    function __construct() {
        try {
            $this->conn = new PDO('mysql:host=' . $host . ';dbname=' . $dbname, $username, $password);
            $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        } catch (PDOException $e) {
            echo 'Connection failed: ' . $e->getMessage();
        }
    }

    function query($sql, $params = array()) {
        $stmt = $this->conn->prepare($sql);
        foreach ($params as $key => $value) {
            $stmt->bindValue($key, $value);
        }
        return $stmt->execute() ? $this->conn->lastInsertId() : null;
    }

    function fetchAll($sql, $params = array()) {
        $stmt = $this->conn->prepare($sql);
        foreach ($params as $key => $value) {
            $stmt->bindValue($key, $value);
        }
        return $stmt->execute() ? $stmt->fetchAll(PDO::FETCH_ASSOC) : null;
    }

    function fetchOne($sql, $params = array()) {
        $stmt = $this->conn->prepare($sql);
        foreach ($params as $key => $value) {
            $stmt->bindValue($key, $value);
        }
        return $stmt->execute() ? $stmt->fetch(PDO::FETCH_ASSOC) : null;
    }

    function close() {
        $this->conn = null;
    }
}

class Purchase {
    private $db;

    function __construct(Database $db) {
        $this->db = $db;
    }

    function placeOrder($customerName, $products) {
        try {
            // validate input
            if (empty($customerName)) {
                throw new Exception('Customer name is required');
            }
            foreach ($products as $product) {
                if (!isset($product['id']) || !isset($product['quantity'])) {
                    throw new Exception('Invalid product data');
                }
            }

            // create order
            $orderData = array(
                'customer_name' => $customerName,
                'order_date' => date('Y-m-d H:i:s')
            );
            $orderId = $this->db->query('INSERT INTO orders SET ?', $orderData);

            // add items to order
            foreach ($products as $product) {
                $itemData = array(
                    'order_id' => $orderId,
                    'product_id' => $product['id'],
                    'quantity' => $product['quantity']
                );
                $this->db->query('INSERT INTO order_items SET ?', $itemData);
            }

            return array('message' => 'Order placed successfully', 'order_id' => $orderId);

        } catch (Exception $e) {
            return array('error' => $e->getMessage());
        }
    }

    function getOrderByID($id) {
        try {
            $order = $this->db->fetchOne('SELECT * FROM orders WHERE id = ?', array('id' => $id));
            if ($order) {
                $items = $this->db->fetchAll('SELECT * FROM order_items WHERE order_id = ?', array('order_id' => $id));
                return array_merge($order, array('items' => $items));
            }
        } catch (Exception $e) {
            echo 'Error getting order by ID: ' . $e->getMessage();
        }
    }

    function updateOrderStatus($id, $status) {
        try {
            // update order status
            $this->db->query('UPDATE orders SET status = ? WHERE id = ?', array($status, $id));
        } catch (Exception $e) {
            echo 'Error updating order status: ' . $e->getMessage();
        }
    }

    function close() {
        $this->db->close();
    }
}

// usage
$db = new Database();
$purchase = new Purchase($db);

$products = array(
    array('id' => 1, 'quantity' => 2),
    array('id' => 2, 'quantity' => 3)
);
$result = $purchase->placeOrder('John Doe', $products);

print_r($result);

$orderID = $result['order_id'];
$result = $purchase->getOrderByID($orderID);

print_r($result);

$purchase->updateOrderStatus($orderID, 'shipped');

$purchase->close();


<!-- index.php -->
<form action="cart.php" method="post">
    <?php foreach ($products as $product): ?>
        <div>
            <label for="product_id_<?= $product['id'] ?>"><?= $product['name'] ?></label>
            <input type="number" id="product_id_<?= $product['id'] ?>" name="product_id[]" value="<?= $product['price'] ?>">
            <button type="submit">Add to Cart</button>
        </div>
    <?php endforeach; ?>
</form>


<!-- cart.php -->
<?php
if (isset($_POST['product_id'])) {
    $cart = array();
    foreach ($_POST['product_id'] as $key => $value) {
        if (!empty($value)) {
            $cart[] = array(
                'product_id' => $_POST['product_id'][$key],
                'quantity' => !empty($_POST['quantity'][$key]) ? $_POST['quantity'][$key] : 1
            );
        }
    }

    // Update cart in session or database
    if (isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array_merge($_SESSION['cart'], $cart);
    } else {
        $_SESSION['cart'] = $cart;
    }
}

// Display cart contents
if (isset($_SESSION['cart'])) {
    echo '<h2>Cart Contents:</h2>';
    foreach ($_SESSION['cart'] as $item) {
        echo "<p>Product ID: {$item['product_id']} Quantity: {$item['quantity']}</p>";
    }
}
?>


<!-- checkout.php -->
<?php
if (isset($_POST['checkout'])) {
    // Validate user input
    if (!empty($_SESSION['cart'])) {
        $total = 0;
        foreach ($_SESSION['cart'] as $item) {
            $product_id = $item['product_id'];
            $quantity = $item['quantity'];

            // Update purchase in database
            $stmt = $db->prepare("INSERT INTO purchases (product_id, user_id, quantity, total) VALUES (?, ?, ?, ?)");
            $stmt->execute(array($product_id, $_SESSION['user']['id'], $quantity, $total + ($product_id * $quantity)));

            // Update cart in session
            unset($_SESSION['cart'][$key]);
        }

        echo '<p>Thank you for your purchase!</p>';
    }
}
?>


<!-- checkout.php -->
<form action="checkout.php" method="post">
    <h2>Checkout:</h2>
    <?php foreach ($_SESSION['cart'] as $item): ?>
        <div>
            <label for="product_id_<?= $item['product_id'] ?>"><?= $item['name'] ?></label>
            <input type="number" id="product_id_<?= $item['id'] ?>" name="quantity[]" value="<?= $item['quantity'] ?>">
        </div>
    <?php endforeach; ?>
    <button type="submit" name="checkout">Confirm Purchase</button>
</form>


<?php
// Basic form validation
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Process the form data here
}

?>

<form action="<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>" method="post">
    <label for="customer_name">Name:</label>
    <input type="text" id="customer_name" name="customer_name"><br><br>
    <label for="customer_email">Email:</label>
    <input type="email" id="customer_email" name="customer_email"><br><br>
    <h2>Items to Purchase</h2>
    <?php
        // Assume we have a list of available items in an array for simplicity.
        $items = [
            "item1" => "Item 1",
            "item2" => "Item 2",
            "item3" => "Item 3"
        ];
        
        foreach ($items as $key => $value) {
    ?>
        <label for="<?php echo $key; ?>"><?php echo $value; ?></label>
        <input type="checkbox" id="<?php echo $key; ?>" name="<?php echo $key; ?>">
        <br><br>
    <?php
        }
    ?>
    
    <button type="submit">Purchase</button>
</form>


<?php

// Check if the form has been submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Validate and process the purchase data
    
    // Assume we've validated all necessary fields here (e.g., customer email, selected items)
    
    // Process payment (this is where actual payment processing logic would go,
    // but for this example, let's just simulate it by saving to database)
    
    $customer_name = $_POST['customer_name'];
    $customer_email = $_POST['customer_email'];

    // Assume we have a list of selected items in the POST array
    $selected_items = [];
    foreach ($_POST as $key => $value) {
        if (strpos($key, 'item') !== false && $value == "on") {
            $selected_items[] = $items[$key];
        }
    }

    // Connect to database for purchase data
    require_once 'db_config.php';
    
    $sql = "INSERT INTO purchases (customer_name, customer_email, item_list) VALUES (?, ?, ?)";
    $stmt = mysqli_prepare($conn, $sql);
    mysqli_stmt_bind_param($stmt, "sss", $customer_name, $customer_email, implode(',', $selected_items));
    if (mysqli_stmt_execute($stmt)) {
        echo "Purchase successful!";
    } else {
        echo "An error occurred: " . mysqli_error($conn);
    }
    
    mysqli_close($conn);
}

?>


<?php

// Configuration for database connection
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database_name";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

?>


class Purchase {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=shop', 'username', 'password');
  }

  public function addProductToCart($product_id, $quantity) {
    // Get product details from database
    $stmt = $this->db->prepare("SELECT * FROM products WHERE id = ?");
    $stmt->execute([$product_id]);
    $product = $stmt->fetch();

    if (!$product) {
      throw new Exception('Product not found');
    }

    // Check if product is already in cart
    $cart = $_SESSION['cart'] ?? [];
    foreach ($cart as &$item) {
      if ($item['id'] == $product_id) {
        $item['quantity'] += $quantity;
        return;
      }
    }

    // Add product to cart
    $cart[] = ['id' => $product_id, 'name' => $product['name'], 'price' => $product['price'], 'quantity' => $quantity];
    $_SESSION['cart'] = $cart;

    return true;
  }

  public function viewCart() {
    // Get products in cart
    $cart = $_SESSION['cart'] ?? [];
    return $cart;
  }

  public function processCheckout() {
    // Get user details (optional)
    $user_id = $_SESSION['user_id'] ?? null;

    // Calculate total cost
    $total_cost = 0;
    $cart = $_SESSION['cart'] ?? [];
    foreach ($cart as $item) {
      $product = $this->getProductDetails($item['id']);
      $total_cost += $product['price'] * $item['quantity'];
    }

    // Insert order into database
    $stmt = $this->db->prepare("INSERT INTO orders (user_id, order_date, total_cost) VALUES (?, ?, ?)");
    $stmt->execute([$user_id, date('Y-m-d'), $total_cost]);

    // Get order ID
    $order_id = $this->db->lastInsertId();

    // Insert order items into database
    foreach ($cart as $item) {
      $product = $this->getProductDetails($item['id']);
      $stmt = $this->db->prepare("INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)");
      $stmt->execute([$order_id, $product['id'], $item['quantity']]);
    }

    // Clear cart
    unset($_SESSION['cart']);

    return true;
  }

  private function getProductDetails($product_id) {
    $stmt = $this->db->prepare("SELECT * FROM products WHERE id = ?");
    $stmt->execute([$product_id]);
    return $stmt->fetch();
  }
}


$purchase = new Purchase();


$purchase->addProductToCart(1, 2); // Add product with ID 1 in quantity 2 to cart


$cart = $purchase->viewCart();
print_r($cart);


$purchase->processCheckout();


class User {
  private $id;
  private $username;
  private $email;

  public function __construct($id, $username, $email) {
    $this->id = $id;
    $this->username = $username;
    $this->email = $email;
  }

  public static function authenticate($username, $password) {
    // Authenticate user using password hashing library (e.g., Bcrypt)
    // Return true if authentication is successful
  }
}


class Product {
  private $id;
  private $name;
  private $description;
  private $price;

  public function __construct($id, $name, $description, $price) {
    $this->id = $id;
    $this->name = $name;
    $this->description = $description;
    $this->price = $price;
  }

  public static function getAll() {
    // Retrieve all products from database
  }
}


class Order {
  private $id;
  private $user_id;
  private $product_id;
  private $quantity;
  private $total;

  public function __construct($id, $user_id, $product_id, $quantity, $total) {
    $this->id = $id;
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->quantity = $quantity;
    $this->total = $total;
  }

  public static function create($user_id, $product_id, $quantity) {
    // Create a new order in the database
  }
}


class PurchaseController {
  private $model;

  public function __construct() {
    $this->model = new Order();
  }

  public function index() {
    // Display all products and allow user to select one for purchase
  }

  public function create($product_id, $quantity) {
    // Create a new order with the selected product and quantity
  }
}


<?php
require_once 'models/User.php';
require_once 'models/Product.php';
require_once 'controllers/PurchaseController.php';

$controller = new PurchaseController();

// Display all products
$products = Product::getAll();
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase</title>
</head>
<body>

  <h1>Products:</h1>
  <ul>
    <?php foreach ($products as $product) : ?>
      <li>
        <?= $product->name ?> (<?= $product->price ?>)
        <form action="purchase.php" method="post">
          <input type="hidden" name="product_id" value="<?= $product->id ?>">
          <input type="number" name="quantity" value="1">
          <button type="submit">Buy</button>
        </form>
      </li>
    <?php endforeach; ?>
  </ul>

  <?php if (isset($_POST['product_id']) && isset($_POST['quantity'])) : ?>
    <?= $controller->create($_POST['product_id'], $_POST['quantity']) ?>
  <?php endif; ?>

</body>
</html>


<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


<?php
require_once 'config.php';

if (isset($_POST['username']) && isset($_POST['password'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];

    $query = "SELECT * FROM users WHERE username = '$username' AND password = '$password'";
    $result = $conn->query($query);
    if ($result->num_rows > 0) {
        session_start();
        $_SESSION['user_id'] = $result->fetch_assoc()['id'];
        header('Location: products.php');
        exit;
    } else {
        echo 'Invalid username or password';
    }
}
?>


<?php
require_once 'config.php';

if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    if (isset($_SESSION['cart'])) {
        foreach ($_SESSION['cart'] as &$item) {
            if ($item['id'] == $product_id) {
                $item['quantity'] += $quantity;
                break;
            }
        }
    } else {
        $_SESSION['cart'][] = ['id' => $product_id, 'quantity' => $quantity];
    }

    header('Location: products.php');
    exit;
}

$query = "SELECT * FROM products";
$result = $conn->query($query);

?>
<!DOCTYPE html>
<html>
<head>
    <title>Products</title>
</head>
<body>

<form action="" method="post">
    <?php while ($product = $result->fetch_assoc()) { ?>
        <div>
            <h2><?php echo $product['name']; ?></h2>
            <p>Price: <?php echo $product['price']; ?></p>
            <input type="hidden" name="product_id" value="<?php echo $product['id']; ?>">
            <button type="submit" name="add_to_cart">Add to Cart</button>
        </div>
    <?php } ?>
</form>

<?php if (isset($_SESSION['cart'])) { ?>
    <h2>Cart:</h2>
    <ul>
        <?php foreach ($_SESSION['cart'] as $item) { ?>
            <li>
                <?php echo $item['quantity']; ?> x <?php echo get_product_name($conn, $item['id']); ?>
            </li>
        <?php } ?>
    </ul>
<?php } ?>

<?php function get_product_name($conn, $product_id) {
    $query = "SELECT name FROM products WHERE id = '$product_id'";
    $result = $conn->query($query);
    return $result->fetch_assoc()['name'];
} ?>
</body>
</html>


<?php
require_once 'config.php';

if (isset($_POST['update_cart'])) {
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $_POST['product_id']) {
            $item['quantity'] = $_POST['quantity'];
            break;
        }
    }

    header('Location: cart.php');
    exit;
}

if (isset($_POST['remove_from_cart'])) {
    foreach ($_SESSION['cart'] as $key => &$item) {
        if ($item['id'] == $_POST['product_id']) {
            unset($_SESSION['cart'][$key]);
            break;
        }
    }

    header('Location: cart.php');
    exit;
}

if (isset($_POST['place_order'])) {
    $total = 0;

    foreach ($_SESSION['cart'] as $item) {
        $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('', '$item[id]', '$item[quantity]')";
        $conn->query($query);

        $query = "SELECT id FROM orders WHERE user_id = '".$_SESSION['user_id']."'";
        $result = $conn->query($query);
        $order_id = $result->fetch_assoc()['id'];

        $total += get_product_price($conn, $item['id']) * $item['quantity'];
    }

    $query = "UPDATE orders SET total = '$total' WHERE user_id = '".$_SESSION['user_id']."'";
    $conn->query($query);

    header('Location: order.php');
    exit;
}

?>
<!DOCTYPE html>
<html>
<head>
    <title>Cart</title>
</head>
<body>

<form action="" method="post">
    <?php foreach ($_SESSION['cart'] as $item) { ?>
        <div>
            <h2><?php echo get_product_name($conn, $item['id']); ?></h2>
            <p>Quantity: <?php echo $item['quantity']; ?></p>
            <input type="hidden" name="product_id" value="<?php echo $item['id']; ?>">
            <button type="submit" name="update_cart">Update Quantity</button>
        </div>
    <?php } ?>
</form>

<form action="" method="post">
    <?php foreach ($_SESSION['cart'] as $key => $item) { ?>
        <div>
            <input type="hidden" name="product_id[]" value="<?php echo $item['id']; ?>">
            <button type="submit" name="remove_from_cart">Remove from Cart</button>
        </div>
    <?php } ?>
</form>

<form action="" method="post">
    Total: <?php echo $_SESSION['cart'][0]['quantity'] * get_product_price($conn, $_SESSION['cart'][0]['id']); ?><br><br>
    <input type="submit" name="place_order" value="Place Order">
</form>

<?php function get_product_price($conn, $product_id) {
    $query = "SELECT price FROM products WHERE id = '$product_id'";
    $result = $conn->query($query);
    return $result->fetch_assoc()['price'];
} ?>
</body>
</html>


<?php
require_once 'config.php';

?>
<!DOCTYPE html>
<html>
<head>
    <title>Order</title>
</head>
<body>

<h2>Your Order:</h2>

<table border="1">
    <?php $query = "SELECT * FROM order_items WHERE order_id = '".$_SESSION['user_id']."'";
    $result = $conn->query($query); ?>
    <tr>
        <th>Product Name</th>
        <th>Quantity</th>
        <th>Total Price</th>
    </tr>
    <?php while ($item = $result->fetch_assoc()) { ?>
        <tr>
            <td><?php echo get_product_name($conn, $item['product_id']); ?></td>
            <td><?php echo $item['quantity']; ?></td>
            <td><?php echo $item['quantity'] * get_product_price($conn, $item['product_id']); ?></td>
        </tr>
    <?php } ?>
</table>

Total: <?php $query = "SELECT total FROM orders WHERE user_id = '".$_SESSION['user_id']."'";
$result = $conn->query($query); echo $result->fetch_assoc()['total']; ?>

<?php function get_product_name($conn, $product_id) {
    $query = "SELECT name FROM products WHERE id = '$product_id'";
    $result = $conn->query($query);
    return $result->fetch_assoc()['name'];
} ?>
</body>
</html>


<?php

// Include database connection settings
require_once 'db_config.php';

// Process form submission (if any)
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // Validate user input
  $name = $_POST['name'];
  $email = $_POST['email'];
  $address = $_POST['address'];

  if (!empty($name) && !empty($email) && !empty($address)) {
    // Insert new customer into database (if they don't exist already)
    $customer_id = insert_customer($name, $email, $address);

    // Get the product ID from the form submission
    $product_id = $_POST['product_id'];

    // Check if product is in stock
    $stock_level = get_stock_level($product_id);
    if ($stock_level >= $_POST['quantity']) {
      // Create a new order for the customer
      $order_id = insert_order($customer_id);

      // Insert order item into database
      insert_order_item($order_id, $product_id, $_POST['quantity']);

      // Update stock level in database
      update_stock_level($product_id, -$_POST['quantity']);
    } else {
      echo "Sorry, we're out of stock for this product.";
    }
  } else {
    echo "Please fill out all fields.";
  }
}

// Function to insert new customer into database
function insert_customer($name, $email, $address) {
  // Connect to database
  $conn = mysqli_connect($db_host, $db_username, $db_password);

  // Create SQL query
  $sql = "INSERT INTO customers (name, email, address)
          VALUES ('$name', '$email', '$address')";

  // Execute query and get the new customer ID
  if (mysqli_query($conn, $sql)) {
    return mysqli_insert_id($conn);
  } else {
    echo "Error inserting customer: " . mysqli_error($conn);
    return false;
  }
}

// Function to insert new order into database
function insert_order($customer_id) {
  // Connect to database
  $conn = mysqli_connect($db_host, $db_username, $db_password);

  // Create SQL query
  $sql = "INSERT INTO orders (customer_id)
          VALUES ('$customer_id')";

  // Execute query and get the new order ID
  if (mysqli_query($conn, $sql)) {
    return mysqli_insert_id($conn);
  } else {
    echo "Error inserting order: " . mysqli_error($conn);
    return false;
  }
}

// Function to insert order item into database
function insert_order_item($order_id, $product_id, $quantity) {
  // Connect to database
  $conn = mysqli_connect($db_host, $db_username, $db_password);

  // Create SQL query
  $sql = "INSERT INTO order_items (order_id, product_id, quantity)
          VALUES ('$order_id', '$product_id', '$quantity')";

  // Execute query
  if (!mysqli_query($conn, $sql)) {
    echo "Error inserting order item: " . mysqli_error($conn);
  }
}

// Function to update stock level in database
function update_stock_level($product_id, $delta) {
  // Connect to database
  $conn = mysqli_connect($db_host, $db_username, $db_password);

  // Create SQL query
  $sql = "UPDATE products SET stock_level = stock_level - '$delta'
          WHERE id = '$product_id'";

  // Execute query
  if (!mysqli_query($conn, $sql)) {
    echo "Error updating stock level: " . mysqli_error($conn);
  }
}

// Function to get stock level from database
function get_stock_level($product_id) {
  // Connect to database
  $conn = mysqli_connect($db_host, $db_username, $db_password);

  // Create SQL query
  $sql = "SELECT stock_level FROM products WHERE id = '$product_id'";

  // Execute query and retrieve result
  $result = mysqli_query($conn, $sql);
  if ($row = mysqli_fetch_assoc($result)) {
    return $row['stock_level'];
  } else {
    echo "Error retrieving stock level: " . mysqli_error($conn);
    return false;
  }
}

?>


<?php

// Configuration settings
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product to cart
function add_to_cart($product_id, $user_id) {
    global $conn;
    
    // Check if product already exists in cart
    $query = "SELECT * FROM cart WHERE user_id = '$user_id' AND product_id = '$product_id'";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        return false; // Product already exists in cart
    }
    
    // Add product to cart
    $query = "INSERT INTO cart (user_id, product_id, quantity) VALUES ('$user_id', '$product_id', '1')";
    $conn->query($query);
    
    return true;
}

// Function to update product quantity in cart
function update_cart($product_id, $quantity, $user_id) {
    global $conn;
    
    // Update product quantity
    $query = "UPDATE cart SET quantity = '$quantity' WHERE user_id = '$user_id' AND product_id = '$product_id'";
    $conn->query($query);
}

// Function to remove product from cart
function remove_from_cart($product_id, $user_id) {
    global $conn;
    
    // Remove product from cart
    $query = "DELETE FROM cart WHERE user_id = '$user_id' AND product_id = '$product_id'";
    $conn->query($query);
}

// Function to get cart contents
function get_cart_contents($user_id) {
    global $conn;
    
    // Get cart contents
    $query = "SELECT * FROM cart WHERE user_id = '$user_id'";
    $result = $conn->query($query);
    
    return $result;
}

// Function to calculate total cost of cart
function calculate_total($cart_contents) {
    $total = 0;
    
    foreach ($cart_contents as $item) {
        $price = get_product_price($item['product_id']);
        
        // Calculate subtotal for each item
        $subtotal = $item['quantity'] * $price;
        
        // Add to total
        $total += $subtotal;
    }
    
    return $total;
}

// Function to process payment (simplified example)
function process_payment($cart_contents, $total) {
    echo "Payment processing...<br>";
    // Simulate payment processing...
    sleep(2);
    echo "Payment processed successfully!<br>";
}

?>


<?php

// Include purchase functionality file
require_once 'purchase.php';

// Initialize variables
$user_id = $_SESSION['user_id'];
$product_id = $_POST['product_id'];

// Add product to cart
if (add_to_cart($product_id, $user_id)) {
    echo "Product added to cart!<br>";
} else {
    echo "Product already exists in cart.<br>";
}

// Get cart contents
$cart_contents = get_cart_contents($user_id);

// Calculate total cost of cart
$total = calculate_total($cart_contents);

// Display cart contents and total cost
echo "Cart Contents:<br>";
foreach ($cart_contents as $item) {
    echo "Product: " . $item['product_id'] . "<br>";
}

echo "Total Cost: $" . $total . "<br>";

?>


<?php

// Include purchase functionality file
require_once 'purchase.php';

// Initialize variables
$user_id = $_SESSION['user_id'];

// Get cart contents
$cart_contents = get_cart_contents($user_id);

// Calculate total cost of cart
$total = calculate_total($cart_contents);

// Process payment (simplified example)
process_payment($cart_contents, $total);

?>


<?php
// Database connection settings
$host = 'localhost';
$dbname = 'mydatabase';
$username = 'myuser';
$password = 'mypassword';

// Create a new connection
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

// Purchase form
?>
<form action="" method="post">
  <label for="product">Product:</label>
  <select name="product" required>
    <?php
      // Retrieve products from database and display in select menu
      $query = "SELECT * FROM products";
      $stmt = $conn->prepare($query);
      $stmt->execute();
      while ($row = $stmt->fetch()) {
        echo "<option value='" . $row['id'] . "'>" . $row['name'] . "</option>";
      }
    ?>
  </select>
  
  <label for="quantity">Quantity:</label>
  <input type="number" name="quantity" required>

  <label for="payment_method">Payment Method:</label>
  <select name="payment_method" required>
    <option value="cash">Cash</option>
    <option value="credit_card">Credit Card</option>
  </select>

  <button type="submit">Purchase</button>
</form>

<?php
if (isset($_POST['product']) && isset($_POST['quantity']) && isset($_POST['payment_method'])) {
  // Extract data from form submission
  $product_id = $_POST['product'];
  $quantity = $_POST['quantity'];
  $payment_method = $_POST['payment_method'];

  // Validate data
  if ($quantity < 1) {
    echo "Invalid quantity. Please enter a number greater than zero.";
  } else {
    try {
      // Insert purchase into database
      $query = "INSERT INTO purchases (product_id, quantity, payment_method) VALUES (:id, :qty, :pm)";
      $stmt = $conn->prepare($query);
      $stmt->bindParam(':id', $product_id);
      $stmt->bindParam(':qty', $quantity);
      $stmt->bindParam(':pm', $payment_method);
      $stmt->execute();

      // Retrieve the purchase ID
      $purchase_id = $conn->lastInsertId();

      echo "Purchase successful. Your order number is: #".$purchase_id.".";

    } catch (PDOException $e) {
      echo 'Error inserting into database: '. $e->getMessage();
    }
  }
}
?>


// functions.php

function registerUser($username, $email, $password) {
  global $db;
  $query = "INSERT INTO users (username, email, password) VALUES (:username, :email, :password)";
  $stmt = $db->prepare($query);
  $stmt->bindParam(":username", $username);
  $stmt->bindParam(":email", $email);
  $stmt->bindParam(":password", password_hash($password, PASSWORD_DEFAULT));
  return $stmt->execute();
}

function loginUser($username, $password) {
  global $db;
  $query = "SELECT * FROM users WHERE username = :username";
  $stmt = $db->prepare($query);
  $stmt->bindParam(":username", $username);
  $stmt->execute();
  $user = $stmt->fetch();
  if ($user && password_verify($password, $user["password"])) {
    return $user;
  } else {
    return false;
  }
}

function addProductToCart($userId, $productId, $quantity) {
  global $db;
  $query = "INSERT INTO carts (user_id, product_id, quantity) VALUES (:userId, :productId, :quantity)";
  $stmt = $db->prepare($query);
  $stmt->bindParam(":userId", $userId);
  $stmt->bindParam(":productId", $productId);
  $stmt->bindParam(":quantity", $quantity);
  return $stmt->execute();
}

function checkout($cartId) {
  global $db;
  $query = "UPDATE carts SET status = 'paid' WHERE id = :cartId";
  $stmt = $db->prepare($query);
  $stmt->bindParam(":cartId", $cartId);
  return $stmt->execute();
}


<?php

require_once 'functions.php';

// Registration form handling
if (isset($_POST["register"])) {
  registerUser($_POST["username"], $_POST["email"], $_POST["password"]);
}

// Login form handling
if (isset($_POST["login"])) {
  $user = loginUser($_POST["username"], $_POST["password"]);
  if ($user) {
    // User logged in successfully, redirect to cart page
    header("Location: cart.php");
    exit;
  }
}

?>
<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

  <!-- Registration form -->
  <h2>Register</h2>
  <form method="post">
    <input type="text" name="username" placeholder="Username">
    <input type="email" name="email" placeholder="Email">
    <input type="password" name="password" placeholder="Password">
    <button type="submit" name="register">Register</button>
  </form>

  <!-- Login form -->
  <h2>Login</h2>
  <form method="post">
    <input type="text" name="username" placeholder="Username">
    <input type="password" name="password" placeholder="Password">
    <button type="submit" name="login">Login</button>
  </form>

</body>
</html>


<?php

require_once 'functions.php';

// Get products from database
$query = "SELECT * FROM products";
$products = $db->query($query)->fetchAll();

?>
<!DOCTYPE html>
<html>
<head>
  <title>Cart</title>
</head>
<body>

  <!-- Add product to cart form -->
  <h2>Add Product to Cart</h2>
  <form method="post">
    <select name="product_id">
      <?php foreach ($products as $product): ?>
        <option value="<?= $product["id"] ?>"><?= $product["name"] ?></option>
      <?php endforeach; ?>
    </select>
    <input type="number" name="quantity" placeholder="Quantity">
    <button type="submit" name="add_to_cart">Add to Cart</button>
  </form>

  <!-- Display cart contents -->
  <?php if (isset($_SESSION["cart"])): ?>
    <h2>Cart Contents:</h2>
    <?php foreach ($_SESSION["cart"] as $item): ?>
      <p><?= $item["name"] ?> x <?= $item["quantity"] ?></p>
    <?php endforeach; ?>
  <?php endif; ?>

</body>
</html>

<?php

// Add product to cart handling
if (isset($_POST["add_to_cart"])) {
  addProductToCart($_SESSION["user_id"], $_POST["product_id"], $_POST["quantity"]);
}

?>


<?php

require_once 'functions.php';

// Get cart contents from database
$query = "SELECT * FROM carts WHERE user_id = :userId AND status = 'pending'";
$stmt = $db->prepare($query);
$stmt->bindParam(":userId", $_SESSION["user_id"]);
$stmt->execute();
$cart = $stmt->fetchAll();

?>
<!DOCTYPE html>
<html>
<head>
  <title>Checkout</title>
</head>
<body>

  <!-- Checkout form -->
  <h2>Checkout</h2>
  <form method="post">
    <button type="submit" name="checkout">Checkout</button>
  </form>

  <!-- Display cart contents -->
  <?php foreach ($cart as $item): ?>
    <p><?= $item["name"] ?> x <?= $item["quantity"] ?></p>
  <?php endforeach; ?>

</body>
</html>

<?php

// Checkout handling
if (isset($_POST["checkout"])) {
  checkout($cart[0]["id"]);
}

?>


<?php
// Initialize the session
session_start();

// Define the products array
$products = array(
    'product1' => array('name' => 'Product 1', 'price' => 19.99),
    'product2' => array('name' => 'Product 2', 'price' => 29.99),
    'product3' => array('name' => 'Product 3', 'price' => 39.99)
);

// Initialize the cart
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add product to cart
function add_product_to_cart($product_id) {
    global $products;
    if (in_array($product_id, $_SESSION['cart'])) {
        echo "Product already in cart.";
    } else {
        $_SESSION['cart'][] = $product_id;
        echo "Product added to cart.";
    }
}

// Function to remove product from cart
function remove_product_from_cart($product_id) {
    global $products;
    if (in_array($product_id, $_SESSION['cart'])) {
        unset($_SESSION['cart'][array_search($product_id, $_SESSION['cart'])]);
        echo "Product removed from cart.";
    } else {
        echo "Product not in cart.";
    }
}

// Function to calculate total cost
function calculate_total() {
    global $products;
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id) {
        $total += $products[$product_id]['price'];
    }
    return $total;
}

// Display cart contents
echo "<h2>Cart Contents:</h2>";
foreach ($_SESSION['cart'] as $product_id) {
    echo "<p>" . $products[$product_id]['name'] . " (x1) = $" . number_format($products[$product_id]['price'], 2) . "</p>";
}

// Display total cost
echo "<p>Total Cost: $" . number_format(calculate_total(), 2) . "</p>";

// Add product to cart button
echo "<button onclick=\"add_product_to_cart('product1')\">Add Product 1</button> ";
echo "<button onclick=\"remove_product_from_cart('product1')\">Remove Product 1</button>";


<?php
// Initialize session
session_start();

// Set default values for cart
$_SESSION['cart'] = array();
$_SESSION['subtotal'] = 0;
$_SESSION['tax_rate'] = 0.08; // example tax rate of 8%
$_SESSION['shipping_rate'] = 5.00; // example shipping rate

// Function to add item to cart
function add_item_to_cart($item_id, $quantity) {
    global $_SESSION;

    if (isset($_SESSION['cart'][$item_id])) {
        $_SESSION['cart'][$item_id] += $quantity;
    } else {
        $_SESSION['cart'][$item_id] = $quantity;
    }

    calculate_subtotal();
}

// Function to remove item from cart
function remove_item_from_cart($item_id) {
    global $_SESSION;

    if (isset($_SESSION['cart'][$item_id])) {
        unset($_SESSION['cart'][$item_id]);

        calculate_subtotal();
    }
}

// Function to update quantity of an item in the cart
function update_quantity_in_cart($item_id, $new_quantity) {
    global $_SESSION;

    if (isset($_SESSION['cart'][$item_id])) {
        $_SESSION['cart'][$item_id] = $new_quantity;

        calculate_subtotal();
    }
}

// Function to calculate subtotal and total prices
function calculate_subtotal() {
    global $_SESSION, $_products; // assume products are stored in an array

    $_SESSION['subtotal'] = 0;
    foreach ($_SESSION['cart'] as $item_id => $quantity) {
        $price = $_products[$item_id]['price'];
        $discounted_price = $_products[$item_id]['price'] * (1 - $_products[$item_id]['discount']);
        $_SESSION['subtotal'] += $quantity * $discounted_price;
    }

    // calculate tax and shipping
    $_SESSION['tax'] = $_SESSION['subtotal'] * $_SESSION['tax_rate'];
    $_SESSION['shipping'] = $_SESSION['shipping_rate'];

    // calculate total price
    $_SESSION['total'] = $_SESSION['subtotal'] + $_SESSION['tax'] + $_SESSION['shipping'];
}

// Function to display cart contents
function display_cart_contents() {
    global $_SESSION;

    echo "<h2>Cart Contents:</h2>";
    echo "<table border='1'>";
    echo "<tr><th>Item ID</th><th>Quantity</th><th>Price</th></tr>";

    foreach ($_SESSION['cart'] as $item_id => $quantity) {
        $price = $_products[$item_id]['price'];
        $discounted_price = $price * (1 - $_products[$item_id]['discount']);
        echo "<tr>";
        echo "<td>$item_id</td>";
        echo "<td>$quantity</td>";
        echo "<td>\$$discounted_price</td>";
        echo "</tr>";
    }

    echo "</table>";

    calculate_subtotal();
}

// Example products array
$_products = array(
    'product1' => array('price' => 10.99, 'discount' => 0),
    'product2' => array('price' => 5.99, 'discount' => 0),
    'product3' => array('price' => 7.99, 'discount' => 0.1) // 10% discount
);

// Display cart contents initially
display_cart_contents();
?>


<?php include 'cart.php'; ?>

<form action="cart.php" method="post">
    <h2>Add Item to Cart:</h2>
    <label for="item_id">Item ID:</label>
    <input type="text" id="item_id" name="item_id"><br><br>
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity"><br><br>
    <input type="submit" value="Add to Cart">
</form>

<?php
if (isset($_POST['item_id'])) {
    add_item_to_cart($_POST['item_id'], $_POST['quantity']);
    display_cart_contents();
}
?>


<?php include 'cart.php'; ?>

<form action="remove_item.php" method="post">
    <h2>Remove Item from Cart:</h2>
    <label for="item_id">Item ID:</label>
    <input type="text" id="item_id" name="item_id"><br><br>
    <input type="submit" value="Remove from Cart">
</form>

<?php
if (isset($_POST['item_id'])) {
    remove_item_from_cart($_POST['item_id']);
    display_cart_contents();
}
?>


<?php include 'cart.php'; ?>

<form action="update_quantity.php" method="post">
    <h2>Update Quantity of Item in Cart:</h2>
    <label for="item_id">Item ID:</label>
    <input type="text" id="item_id" name="item_id"><br><br>
    <label for="quantity">New Quantity:</label>
    <input type="number" id="quantity" name="quantity"><br><br>
    <input type="submit" value="Update Quantity">
</form>

<?php
if (isset($_POST['item_id'])) {
    update_quantity_in_cart($_POST['item_id'], $_POST['quantity']);
    display_cart_contents();
}
?>


<?php

// Include database connection script
require_once 'db_connect.php';

// Check if user is logged in
if (!isset($_SESSION['customer_id'])) {
    header('Location: login.php');
    exit;
}

// Set up form data
$product_id = isset($_POST['product_id']) ? $_POST['product_id'] : '';
$quantity = isset($_POST['quantity']) ? $_POST['quantity'] : '';

// Validate form data
if (empty($product_id) || empty($quantity)) {
    echo 'Error: Please select a product and quantity.';
    exit;
}

// Check if product exists
$product_query = "SELECT * FROM products WHERE id = '$product_id'";
$product_result = mysqli_query($conn, $product_query);
if (!$product_result) {
    echo 'Error: Product not found.';
    exit;
}
$product_data = mysqli_fetch_assoc($product_result);

// Calculate total cost
$total_cost = $product_data['price'] * $quantity;

// Insert order into database
$order_query = "INSERT INTO orders (customer_id, product_id, quantity, total_cost) VALUES ('$customer_id', '$product_id', '$quantity', '$total_cost')";
$order_result = mysqli_query($conn, $order_query);
if (!$order_result) {
    echo 'Error: Unable to place order.';
    exit;
}

// Update product stock
$stock_query = "UPDATE products SET stock = stock - $quantity WHERE id = '$product_id'";
$stock_result = mysqli_query($conn, $stock_query);
if (!$stock_result) {
    echo 'Error: Unable to update stock.';
    exit;
}

// Display success message
echo 'Order placed successfully!';
exit;

?>


<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'store');

$connection = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}
?>


<?php
require_once 'config.php';

if (isset($_POST['submit'])) {
    $username = $_POST['username'];
    $password = password_hash($_POST['password'], PASSWORD_DEFAULT);

    $query = "INSERT INTO users (username, password) VALUES ('$username', '$password')";
    $result = $connection->query($query);

    if ($result) {
        echo "User created successfully!";
    } else {
        echo "Error creating user";
    }
}
?>


<?php
require_once 'config.php';

if (isset($_POST['submit'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];

    $query = "SELECT * FROM users WHERE username = '$username'";
    $result = $connection->query($query);

    if ($result && password_verify($password, $result->fetch_assoc()['password'])) {
        echo "Login successful!";
    } else {
        echo "Invalid username or password";
    }
}
?>


<?php
require_once 'config.php';

// Display products
$query = "SELECT * FROM products";
$result = $connection->query($query);

?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Store</title>
</head>
<body>

<h1>Products:</h1>

<ul>
    <?php while ($product = $result->fetch_assoc()) { ?>
        <li>
            <a href="#"><?php echo $product['name']; ?></a>
            <span>$<?php echo $product['price']; ?></span>
            <button>Add to cart</button>
        </li>
    <?php } ?>
</ul>

</body>
</html>


<?php
require_once 'config.php';

// Get user ID from session
$user_id = $_SESSION['user_id'];

// Display products in cart
$query = "SELECT * FROM carts WHERE user_id = '$user_id'";
$result = $connection->query($query);

?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cart</title>
</head>
<body>

<h1>Cart:</h1>

<ul>
    <?php while ($product = $result->fetch_assoc()) { ?>
        <li>
            <a href="#"><?php echo $product['name']; ?></a>
            <span>$<?php echo $product['price']; ?></span>
            <button>Remove</button>
        </li>
    <?php } ?>
</ul>

<h2>Total:</h2>

</body>
</html>


<?php
require_once 'config.php';

// Get user ID from session
$user_id = $_SESSION['user_id'];

// Display products in cart
$query = "SELECT * FROM carts WHERE user_id = '$user_id'";
$result = $connection->query($query);

$total = 0;

?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
</head>
<body>

<h1>Checkout:</h1>

<ul>
    <?php while ($product = $result->fetch_assoc()) { ?>
        <li>
            <a href="#"><?php echo $product['name']; ?></a>
            <span>$<?php echo $product['price']; ?></span>
        </li>
    <?php } ?>
</ul>

<h2>Total:</h2>

<form action="process_payment.php" method="post">
    <input type="hidden" name="total" value="<?php echo $total; ?>">
    <button>Process Payment</button>
</form>

</body>
</html>


<?php
require_once 'config.php';

// Get total from session
$total = $_POST['total'];

// Process payment (insert order into database)
$query = "INSERT INTO orders (user_id, total) VALUES ('$user_id', '$total')";
$result = $connection->query($query);

if ($result) {
    echo "Payment processed successfully!";
} else {
    echo "Error processing payment";
}
?>


<?php
require_once 'db.php'; // database connection settings (e.g., username, password)

// function to get all products
function getProducts() {
    global $conn;
    $sql = "SELECT * FROM products";
    return mysqli_query($conn, $sql);
}

// function to add item to cart
function addItemToCart($user_id, $product_id) {
    global $conn;
    $sql = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (NULL, '$product_id', 1)";
    return mysqli_query($conn, $sql);
}

// function to get all items in cart
function getCartItems() {
    global $conn;
    $sql = "SELECT * FROM orders WHERE user_id = '".$_SESSION['user_id']."' AND status='pending'";
    $result = mysqli_query($conn, $sql);
    return $result;
}

// function to checkout and update order status
function checkout($order_id) {
    global $conn;
    $sql = "UPDATE orders SET status='complete' WHERE id='$order_id'";
    return mysqli_query($conn, $sql);
}
?>


<?php require_once 'db.php'; ?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purchase Functionality</title>
    <link rel="stylesheet" href="style.css">
</head>

<body>
    <h1>Add Item to Cart</h1>
    <?php
        $products = getProducts();
    ?>
    <form action="" method="post">
        <?php while ($product = mysqli_fetch_assoc($products)) { ?>
            <div class="product">
                <input type="checkbox" name="items[]" value="<?php echo $product['id']; ?>">
                <img src="<?php echo 'image/'.$product['image']; ?>" alt="<?php echo $product['name']; ?>">
                <p><?php echo $product['name']; ?></p>
                <p>Price: <?php echo $product['price']; ?></p>
            </div>
        <?php } ?>
        <button type="submit">Add to Cart</button>
    </form>

    <?php
        if (isset($_POST['items'])) {
            foreach ($_POST['items'] as $item) {
                addItemToCart($_SESSION['user_id'], $item);
            }
        }
    ?>
    
    <h1>View Cart</h1>
    <?php
        $cartItems = getCartItems();
        if (mysqli_num_rows($cartItems) > 0) { 
    ?>
        <table>
            <thead>
                <tr>
                    <th>Product Name</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody>
                <?php
                    while ($row = mysqli_fetch_assoc($cartItems)) {
                        $product = get_product_by_id($conn, $row['product_id']);
                        echo "<tr><td>".$product['name']."</td><td>$".$product['price']."</td></tr>";
                    }
                ?>
            </tbody>
        </table>
    <?php } else { ?>
        <p>No items in cart.</p>
    <?php } ?>

    <h1>Checkout</h1>
    <form action="" method="post">
        <button type="submit" name="checkout">Checkout</button>
    </form>

    <?php
        if (isset($_POST['checkout'])) {
            $order_id = mysqli_insert_id($conn);
            checkout($order_id);
            echo "Order Complete!";
        }
    ?>
</body>
</html>


<?php

// Configuration
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function add_product_to_order($order_id, $product_id, $quantity) {
    global $conn;
    $stmt = $conn->prepare("INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)");
    $stmt->bind_param("iis", $order_id, $product_id, $quantity);
    $stmt->execute();
}

function get_product_info($product_id) {
    global $conn;
    $stmt = $conn->prepare("SELECT name, price FROM products WHERE id = ?");
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $result = $stmt->get_result();
    return $result->fetch_assoc();
}

function place_order() {
    global $conn;
    $customer_name = $_POST['customer_name'];
    $order_date = date('Y-m-d');
    $stmt = $conn->prepare("INSERT INTO orders (customer_name, order_date) VALUES (?, ?)");
    $stmt->bind_param("ss", $customer_name, $order_date);
    $stmt->execute();
    
    // Get the ID of the newly created order
    $new_order_id = $conn->insert_id;
    
    foreach ($_POST['products'] as $product_id => $quantity) {
        add_product_to_order($new_order_id, $product_id, $quantity);
    }
}

if (isset($_POST['place_order'])) {
    place_order();
} else {
?>
<html>
<head>
    <title>Product Purchase</title>
</head>
<body>
<form method="post">
    Customer Name: <input type="text" name="customer_name"><br><br>
    <h2>Products:</h2>
    <?php
    $stmt = $conn->prepare("SELECT id, name, price FROM products");
    $stmt->execute();
    $result = $stmt->get_result();
    
    while ($product = $result->fetch_assoc()) {
        echo "<input type='checkbox' name='products[$product[id]]'> $product[name] - \$" . number_format($product['price'], 2) . " <br>";
    }
?>
<br>
<input type="submit" value="Place Order" name="place_order">
</form>

<?php
}
?>

</body>
</html>


<?php

// Database connection settings
$db_host = 'localhost';
$db_username = 'root';
$db_password = '';
$db_name = 'your_database';

// Connect to the database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

// Check if the connection was successful
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function authenticateUser($username, $password) {
    // Prepare the SQL query to select the user's data
    $stmt = $conn->prepare("SELECT * FROM users WHERE username = ?");
    $stmt->bind_param('s', $username);

    // Execute the query and retrieve the result
    $stmt->execute();
    $result = $stmt->get_result();

    // If a user with the given username exists, check if the password is correct
    if ($result->num_rows > 0) {
        $user = $result->fetch_assoc();
        if (password_verify($password, $user['password'])) {
            return true;
        }
    }

    // If no matching user or incorrect password, return false
    return false;
}

// Register a new user
function registerUser($username, $password) {
    // Prepare the SQL query to insert the new user's data
    $stmt = $conn->prepare("INSERT INTO users (username, password) VALUES (?, ?)");
    $stmt->bind_param('ss', $username, password_hash($password, PASSWORD_DEFAULT));

    // Execute the query and commit the changes
    $stmt->execute();
    $conn->commit();

    // If the insert was successful, return true
    if ($stmt->affected_rows == 1) {
        return true;
    }

    // If the insert failed, return false
    return false;
}


<?php

// Include the auth.php file for user authentication functions
require_once 'auth.php';

// Set up payment processing using Stripe (modify this section according to your needs)
$stripe = array(
    "secret_key"      => "YOUR_STRIPE_SECRET_KEY",
    "publishable_key"  => "YOUR_STRIPE_PUBLISHABLE_KEY"
);

function processPayment($product_id, $amount) {
    // Prepare the SQL query to retrieve the product's data
    $stmt = $conn->prepare("SELECT * FROM products WHERE id = ?");
    $stmt->bind_param('i', $product_id);

    // Execute the query and retrieve the result
    $stmt->execute();
    $result = $stmt->get_result();

    // If a product with the given ID exists, process the payment using Stripe
    if ($result->num_rows > 0) {
        $product = $result->fetch_assoc();

        // Create a new PaymentIntent using Stripe
        $payment_intent = \Stripe\PaymentIntent::create([
            'amount' => $amount * 100,
            'currency' => 'usd',
            'metadata' => [
                "username" => $_SESSION['user']['username'],
                "product_id" => $product_id
            ]
        ]);

        // Save the payment intent's client secret to the order table
        $stmt = $conn->prepare("INSERT INTO orders (user_id, product_id, order_date) VALUES (?, ?, NOW())");
        $stmt->bind_param('ii', $_SESSION['user']['id'], $product_id);
        $stmt->execute();
    }

    // If the payment processing failed, return false
    return false;
}

// Add a new product to the cart and process the purchase
function addProductToCart($product_id) {
    // Prepare the SQL query to retrieve the user's data
    $stmt = $conn->prepare("SELECT * FROM users WHERE id = ?");
    $stmt->bind_param('i', $_SESSION['user']['id']);

    // Execute the query and retrieve the result
    $stmt->execute();
    $result = $stmt->get_result();

    // If a user with the given ID exists, add the product to their cart and process the purchase
    if ($result->num_rows > 0) {
        $user = $result->fetch_assoc();
        $product_price = get_product_price($product_id);

        // Process the payment
        if (processPayment($product_id, $product_price)) {
            return true;
        }
    }

    // If the addition to cart failed, return false
    return false;
}

// Helper function to retrieve a product's price
function get_product_price($product_id) {
    // Prepare the SQL query to retrieve the product's data
    $stmt = $conn->prepare("SELECT * FROM products WHERE id = ?");
    $stmt->bind_param('i', $product_id);

    // Execute the query and retrieve the result
    $stmt->execute();
    $result = $stmt->get_result();

    // If a product with the given ID exists, return its price
    if ($result->num_rows > 0) {
        $product = $result->fetch_assoc();
        return $product['price'];
    }

    // If no matching product found, return null
    return null;
}


// Set up user session and authentication (e.g., using a login form)
$_SESSION['user']['username'] = 'example_user';
$_SESSION['user']['id'] = 123;

// Add the product to cart and process purchase
if (addProductToCart(456)) {
    echo "Purchase successful!";
} else {
    echo "Purchase failed.";
}


class Purchase {
  private $db;

  public function __construct() {
    // Connect to the database
    $this->db = new mysqli('localhost', 'username', 'password', 'database');
  }

  public function placeOrder($customerName, $products) {
    // Insert order into orders table
    $orderQuery = "INSERT INTO orders (customer_name, order_date, total) VALUES (?, NOW(), ?)";
    $stmt = $this->db->prepare($orderQuery);
    $stmt->bind_param('ss', $customerName, 0); // Initialize total to 0

    // Get the ID of the newly inserted order
    $orderId = $this->db->insert_id;

    // Insert order items into order_items table
    foreach ($products as $product) {
      $itemQuery = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)";
      $stmtItem = $this->db->prepare($itemQuery);
      $stmtItem->bind_param('iii', $orderId, $product['id'], $product['quantity']);
      $stmtItem->execute();
    }

    // Update total of the order
    $totalQuery = "UPDATE orders SET total = ? WHERE id = ?";
    $stmtTotal = $this->db->prepare($totalQuery);
    $stmtTotal->bind_param('ds', 0, $orderId);

    // Get the products' prices and update the total
    foreach ($products as $product) {
      $priceQuery = "SELECT price FROM products WHERE id = ?";
      $stmtPrice = $this->db->prepare($priceQuery);
      $stmtPrice->bind_param('i', $product['id']);
      $stmtPrice->execute();
      $priceResult = $stmtPrice->get_result()->fetch_assoc();
      $total += $priceResult['price'] * $product['quantity'];
    }

    // Update the total of the order
    $stmtTotal->bind_param('ds', $total, $orderId);
    $stmtTotal->execute();

    return true;
  }
}


$purchase = new Purchase();
$products = array(
  array('id' => 1, 'name' => 'Product A', 'quantity' => 2),
  array('id' => 2, 'name' => 'Product B', 'quantity' => 3)
);

$result = $purchase->placeOrder('John Doe', $products);
if ($result) {
  echo "Order placed successfully!";
} else {
  echo "Error placing order.";
}


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'mydatabase';
$username = 'myusername';
$password = 'mypassword';

// Connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

// Function to add a product to the cart
function add_to_cart($product_id) {
  global $conn;
  $stmt = $conn->prepare('SELECT * FROM products WHERE id = :id');
  $stmt->bindParam(':id', $product_id);
  $stmt->execute();
  $product = $stmt->fetch();
  if ($product) {
    // Product exists, add to cart
    return array(
      'success' => true,
      'message' => 'Product added to cart',
      'data' => array('id' => $product['id'], 'name' => $product['name'], 'price' => $product['price'])
    );
  } else {
    // Product does not exist
    return array(
      'success' => false,
      'message' => 'Product not found'
    );
  }
}

// Function to place an order
function place_order() {
  global $conn;
  // Get the cart contents
  $cart_contents = $_SESSION['cart'];
  
  // Validate cart contents
  if (!$cart_contents) {
    return array(
      'success' => false,
      'message' => 'Cart is empty'
    );
  }
  
  // Create a new order
  $stmt = $conn->prepare('INSERT INTO orders (customer_name, order_date) VALUES (:customer_name, :order_date)');
  $stmt->bindParam(':customer_name', $_SESSION['customer_name']);
  $stmt->bindParam(':order_date', date('Y-m-d H:i:s'));
  $stmt->execute();
  
  // Get the new order ID
  $order_id = $conn->lastInsertId();
  
  // Create a new order item for each product in the cart
  foreach ($cart_contents as $product) {
    $stmt = $conn->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');
    $stmt->bindParam(':order_id', $order_id);
    $stmt->bindParam(':product_id', $product['id']);
    $stmt->bindParam(':quantity', $product['quantity']);
    $stmt->execute();
  }
  
  return array(
    'success' => true,
    'message' => 'Order placed successfully',
    'data' => array('order_id' => $order_id)
  );
}

// Check if the user is logged in
if (!isset($_SESSION['customer_name'])) {
  echo "You must be logged in to place an order";
  exit;
}

// Handle form submission (i.e. when the user clicks the "Place Order" button)
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  $product_id = $_POST['product_id'];
  
  // Add product to cart
  $result = add_to_cart($product_id);
  if ($result['success']) {
    // Product added to cart, proceed with order placement
    $order_result = place_order();
    echo json_encode($order_result);
  } else {
    echo json_encode($result);
  }
} else {
  // Display the form
?>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="hidden" name="product_id" value="<?php echo $product_id; ?>">
  <button type="submit">Place Order</button>
</form>

<?php
}
?>


// Database connection settings
$db_host = 'localhost';
$db_username = 'username';
$db_password = 'password';
$db_name = 'database';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to calculate total cost
function calculateTotalCost($products) {
    $total = 0;
    foreach ($products as $product) {
        $total += $product['price'] * $product['quantity'];
    }
    return $total;
}

// Function to insert new order into database
function insertOrder($customerName, $email, $products) {
    // Calculate total cost
    $totalCost = calculateTotalCost($products);

    // Insert new order into database
    $sql = "INSERT INTO orders (customer_name, email, total) VALUES ('$customerName', '$email', '$totalCost')";
    if ($conn->query($sql) === TRUE) {
        echo "Order inserted successfully!";
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
    }
}

// Function to get products from database
function getProducts() {
    $sql = "SELECT * FROM products";
    return $conn->query($sql)->fetch_all(MYSQLI_ASSOC);
}

// Get products from database
$products = getProducts();

?>

<!-- Display products and form -->
<h1>Purchase Products</h1>

<form action="" method="post">
    <?php foreach ($products as $product): ?>
        <p>
            <?= $product['name'] ?> (<?= $product['price'] ?>)
            <input type="number" name="quantity[]" value="1">
            <button type="button" onclick="addProduct(<?= $product['id'] ?>)">Add to Cart</button>
        </p>
    <?php endforeach; ?>
    <h2>Total: <?= calculateTotalCost($products) ?></h2>
    <input type="hidden" name="customer_name">
    <input type="email" name="email" placeholder="Email">
    <button type="submit">Purchase</button>
</form>

<script>
function addProduct(id) {
    // Get the current cart quantity
    var cart = <?= json_encode($products) ?>;
    for (var i = 0; i < cart.length; i++) {
        if (cart[i].id == id) {
            cart[i].quantity++;
            break;
        }
    }
    
    // Update total cost
    var totalCost = calculateTotalCost(cart);
    
    // Display updated quantity and total cost
    document.getElementById("total").innerHTML = "Total: " + totalCost;
}
</script>


<?php
require 'dbconnect.php';

if (isset($_POST['submit'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  // Validate input
  if ($quantity < 1 || !is_numeric($quantity)) {
    echo "Invalid quantity";
    exit;
  }

  // Check if product exists and has sufficient stock
  $query = "SELECT * FROM products WHERE id = '$product_id'";
  $result = mysqli_query($conn, $query);
  if (!$result) {
    die("Database query failed: " . mysqli_error($conn));
  }
  $row = mysqli_fetch_assoc($result);
  if ($row['stock'] < $quantity) {
    echo "Insufficient stock";
    exit;
  }

  // Update product stock and create new order
  $query = "UPDATE products SET stock = stock - '$quantity' WHERE id = '$product_id'";
  mysqli_query($conn, $query);
  $order_id = uniqid();
  $query = "INSERT INTO orders (product_id, quantity, order_date) VALUES ('$product_id', '$quantity', NOW())";
  mysqli_query($conn, $query);

  echo "Purchase successful!";
}

// Display products for purchase
$query = "SELECT * FROM products";
$result = mysqli_query($conn, $query);
while ($row = mysqli_fetch_assoc($result)) {
  ?>
  <form action="purchase.php" method="post">
    <input type="hidden" name="product_id" value="<?php echo $row['id']; ?>">
    <label for="quantity"><?php echo $row['name']; ?></label>
    <input type="number" id="quantity" name="quantity" value="1">
    <button type="submit">Buy</button>
  </form>
  <?php
}
?>


<?php
$conn = mysqli_connect('localhost', 'username', 'password', 'database');
if (!$conn) {
  die("Connection failed: " . mysqli_error($conn));
}
?>


class User {
  private $id;
  private $username;
  private $password;
  private $email;

  public function __construct($id = null, $username = null, $password = null, $email = null) {
    $this->id = $id;
    $this->username = $username;
    $this->password = $password;
    $this->email = $email;
  }

  // getters and setters
}


class Product {
  private $id;
  private $name;
  private $price;

  public function __construct($id = null, $name = null, $price = null) {
    $this->id = $id;
    $this->name = $name;
    $this->price = $price;
  }

  // getters and setters
}


class Cart {
  private $id;
  private $user_id;
  private $product_id;
  private $quantity;

  public function __construct($id = null, $user_id = null, $product_id = null, $quantity = null) {
    $this->id = $id;
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->quantity = $quantity;
  }

  // getters and setters
}


class Purchase {
  private $id;
  private $user_id;
  private $product_id;
  private $quantity;

  public function __construct($id = null, $user_id = null, $product_id = null, $quantity = null) {
    $this->id = $id;
    $this->user_id = $user_id;
    $this->product_id = $product_id;
    $this->quantity = $quantity;
  }

  // getters and setters
}


class PurchaseController {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function createPurchase(User $user, Product $product, Cart $cart) {
    // retrieve product price from database
    $price = $this->db->getPrice($product->id);

    // calculate total price
    $total_price = $price * $cart->quantity;

    // create purchase entry in database
    $purchase = new Purchase();
    $purchase->user_id = $user->id;
    $purchase->product_id = $product->id;
    $purchase->quantity = $cart->quantity;
    $purchase->total_price = $total_price;

    $this->db->createPurchase($purchase);
  }

  public function viewPurchases(User $user) {
    // retrieve all purchases made by user from database
    $purchases = $this->db->viewPurchases($user->id);

    return $purchases;
  }
}


class Database {
  private $connection;

  public function __construct() {
    // establish connection to database
    $this->connection = new mysqli('localhost', 'username', 'password', 'database_name');
  }

  public function getPrice($product_id) {
    // retrieve product price from database
    $query = "SELECT price FROM products WHERE id = '$product_id'";
    $result = $this->connection->query($query);

    return $result->fetch_assoc()['price'];
  }

  public function createPurchase(Purchase $purchase) {
    // create purchase entry in database
    $query = "INSERT INTO purchases (user_id, product_id, quantity, total_price) VALUES ('$purchase->user_id', '$purchase->product_id', '$purchase->quantity', '$purchase->total_price')";
    $this->connection->query($query);
  }

  public function viewPurchases($user_id) {
    // retrieve all purchases made by user from database
    $query = "SELECT * FROM purchases WHERE user_id = '$user_id'";
    $result = $this->connection->query($query);

    return $result->fetch_all();
  }
}


require_once 'Database.php';
require_once 'PurchaseController.php';

$db = new Database();
$purchaseController = new PurchaseController($db);

// create user and login session
$user = new User();
$user->username = $_POST['username'];
$user->password = $_POST['password'];
$user->email = $_POST['email'];

// add products to cart
$cart = new Cart();
$cart->user_id = $user->id;
$cart->product_id = $_POST['product_id'];
$cart->quantity = $_POST['quantity'];

$purchaseController->createPurchase($user, $product, $cart);

// view all purchases made by user
$purchases = $purchaseController->viewPurchases($user->id);


<?php
// Initialize the cart array
$cart = array();

// Function to add item to cart
function add_item($item_id, $quantity) {
  global $cart;
  if (isset($cart[$item_id])) {
    $cart[$item_id] += $quantity;
  } else {
    $cart[$item_id] = $quantity;
  }
}

// Function to remove item from cart
function remove_item($item_id) {
  global $cart;
  unset($cart[$item_id]);
}

// Function to update quantity of item in cart
function update_quantity($item_id, $new_quantity) {
  global $cart;
  if (isset($cart[$item_id])) {
    $cart[$item_id] = $new_quantity;
  }
}

// Function to get total cost of items in cart
function get_total() {
  global $cart;
  $total = 0;
  foreach ($cart as $item_id => $quantity) {
    // Assume prices are stored in a separate array for simplicity
    $prices = array('product1' => 9.99, 'product2' => 19.99, 'product3' => 29.99);
    if (isset($prices[$item_id])) {
      $total += $prices[$item_id] * $quantity;
    }
  }
  return $total;
}

// Function to display cart contents
function display_cart() {
  global $cart;
  echo "<h2>Cart Contents:</h2>";
  foreach ($cart as $item_id => $quantity) {
    // Assume item names are stored in a separate array for simplicity
    $names = array('product1' => 'Apple Watch', 'product2' => 'Samsung TV', 'product3' => 'Nintendo Switch');
    if (isset($names[$item_id])) {
      echo "<p>$quantity x " . $names[$item_id] . "</p>";
    }
  }
}

// Example usage:
// Add items to cart
add_item('product1', 2);
add_item('product2', 3);

// Display cart contents
display_cart();

// Get total cost of items in cart
echo "<p>Total: $" . get_total() . "</p>";

// Remove item from cart
remove_item('product2');

// Update quantity of item in cart
update_quantity('product1', 4);


add_item('product1', 2);


remove_item('product1');


update_quantity('product1', 4);


$total = get_total();
echo "Total: $" . $total;


display_cart();


<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'store');

$connection = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}
?>


<?php
class User {
    private $id;
    private $username;
    private $email;

    public function __construct($id, $username, $email) {
        $this->id = $id;
        $this->username = $username;
        $this->email = $email;
    }

    public static function registerUser($username, $email, $password) {
        $query = "INSERT INTO users (username, email, password) VALUES (?, ?, ?)";
        $stmt = $connection->prepare($query);
        $stmt->bind_param("sss", $username, $email, $password);
        $result = $stmt->execute();
        if ($result) {
            return true;
        } else {
            return false;
        }
    }

    public static function loginUser($username, $password) {
        $query = "SELECT * FROM users WHERE username = ?";
        $stmt = $connection->prepare($query);
        $stmt->bind_param("s", $username);
        $result = $stmt->execute();
        if ($result) {
            $user = $stmt->get_result()->fetch_assoc();
            if (password_verify($password, $user['password'])) {
                return new User($user['id'], $user['username'], $user['email']);
            } else {
                return null;
            }
        } else {
            return null;
        }
    }
}
?>


<?php
class Product {
    private $id;
    private $name;
    private $price;

    public function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }

    public static function getProducts() {
        $query = "SELECT * FROM products";
        $result = $connection->query($query);
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_assoc()) {
                yield new Product($row['id'], $row['name'], $row['price']);
            }
        } else {
            echo "No products found.";
        }
    }

    public static function getProduct($id) {
        $query = "SELECT * FROM products WHERE id = ?";
        $stmt = $connection->prepare($query);
        $stmt->bind_param("i", $id);
        $result = $stmt->execute();
        if ($result) {
            return $stmt->get_result()->fetch_assoc();
        } else {
            return null;
        }
    }
}
?>


<?php
class Cart {
    private $items;

    public function __construct() {
        $this->items = array();
    }

    public function addProduct($id) {
        if (array_key_exists($id, $this->items)) {
            $this->items[$id]++;
        } else {
            $this->items[$id] = 1;
        }
    }

    public function removeProduct($id) {
        unset($this->items[$id]);
    }

    public function getItems() {
        return $this->items;
    }
}
?>


<?php
class Order {
    private $id;
    private $user_id;
    private $order_date;
    private $total;

    public function __construct($id, $user_id, $order_date, $total) {
        $this->id = $id;
        $this->user_id = $user_id;
        $this->order_date = $order_date;
        $this->total = $total;
    }

    public static function placeOrder($cart, $user_id) {
        $query = "INSERT INTO orders (user_id, order_date, total) VALUES (?, ?, ?)";
        $stmt = $connection->prepare($query);
        $stmt->bind_param("iis", $user_id, date('Y-m-d'), $cart->getTotal());
        $result = $stmt->execute();
        if ($result) {
            return new Order($connection->insert_id, $user_id, date('Y-m-d'), $cart->getTotal());
        } else {
            return null;
        }
    }

    public static function getOrder($id) {
        $query = "SELECT * FROM orders WHERE id = ?";
        $stmt = $connection->prepare($query);
        $stmt->bind_param("i", $id);
        $result = $stmt->execute();
        if ($result) {
            return $stmt->get_result()->fetch_assoc();
        } else {
            return null;
        }
    }

    public function getId() {
        return $this->id;
    }
}
?>


<?php
require_once 'config.php';
require_once 'user.php';
require_once 'product.php';
require_once 'cart.php';
require_once 'order.php';

// User registration and login functionality
if (isset($_POST['register'])) {
    $username = $_POST['username'];
    $email = $_POST['email'];
    $password = password_hash($_POST['password'], PASSWORD_DEFAULT);
    if (User::registerUser($username, $email, $password)) {
        echo "User registered successfully.";
    } else {
        echo "Registration failed.";
    }
} elseif (isset($_POST['login'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];
    $user = User::loginUser($username, $password);
    if ($user !== null) {
        echo "Logged in successfully. Welcome, " . $user->getUsername();
    } else {
        echo "Login failed.";
    }
}

// Displaying products
$products = array();
foreach (Product::getProducts() as $product) {
    $products[] = $product;
}
?>
<!DOCTYPE html>
<html>
<head>
    <title>Purchase Functionality</title>
</head>
<body>
    <!-- User registration and login forms -->
    <?php if (isset($_POST['register'])) : ?>
        <p><?php echo 'User registered successfully.'; ?></p>
    <?php elseif (isset($_POST['login'])) : ?>
        <p><?php echo 'Logged in successfully. Welcome, ' . $user->getUsername(); ?></p>
    <?php endif; ?>

    <!-- Product display and cart functionality -->
    <h1>Products</h1>
    <?php foreach ($products as $product) : ?>
        <h2><?php echo $product->getName() . " - $" . number_format($product->getPrice(), 2); ?></h2>
        <form action="index.php" method="post">
            <input type="hidden" name="product_id" value="<?php echo $product->getId(); ?>">
            <button type="submit">Add to cart</button>
        </form>
    <?php endforeach; ?>

    <!-- Cart functionality -->
    <h1>Cart</h1>
    <ul>
        <?php foreach ($cart as $item) : ?>
            <li><?php echo "Product ID: " . $item['product_id'] . ", Quantity: " . $item['quantity']; ?></li>
        <?php endforeach; ?>
    </ul>

    <!-- Checkout functionality -->
    <h1>Checkout</h1>
    <form action="index.php" method="post">
        <input type="hidden" name="cart" value="<?php echo json_encode($cart); ?>">
        <button type="submit">Place order</button>
    </form>
</body>
</html>


// Configuration file for database connection
require_once 'config.php';

// Function to add product to cart
function add_product_to_cart($product_id) {
  // Get the current user's id from session or cookie
  $customer_id = $_SESSION['customer_id'] ?? null;

  if (!$customer_id) {
    echo "Please login first.";
    exit;
  }

  // Query to insert product into cart table
  $query = "
    INSERT INTO order_items (order_id, product_id, quantity)
    SELECT o.id, p.id, 1
    FROM orders o
    JOIN products p ON o.customer_id = ?
    WHERE p.id = ?";
  ";

  $stmt = $conn->prepare($query);
  $stmt->bind_param('ii', $customer_id, $product_id);
  $result = $stmt->execute();

  if (!$result) {
    echo "Error adding product to cart.";
    exit;
  }

  return true;
}

// Function to update quantity of product in cart
function update_product_quantity($order_id, $product_id, $quantity) {
  // Query to update quantity of product in cart table
  $query = "
    UPDATE order_items SET quantity = ?
    WHERE order_id = ? AND product_id = ?";
  ";

  $stmt = $conn->prepare($query);
  $stmt->bind_param('iis', $quantity, $order_id, $product_id);
  $result = $stmt->execute();

  if (!$result) {
    echo "Error updating quantity of product in cart.";
    exit;
  }

  return true;
}

// Function to create new order
function create_new_order() {
  // Get the current user's id from session or cookie
  $customer_id = $_SESSION['customer_id'] ?? null;

  if (!$customer_id) {
    echo "Please login first.";
    exit;
  }

  // Query to insert new order into orders table
  $query = "
    INSERT INTO orders (customer_id, total)
    VALUES (?, 0);
  ";

  $stmt = $conn->prepare($query);
  $stmt->bind_param('i', $customer_id);
  $result = $stmt->execute();

  if (!$result) {
    echo "Error creating new order.";
    exit;
  }

  return true;
}

// Function to finalize purchase
function finalize_purchase() {
  // Get the current user's id from session or cookie
  $customer_id = $_SESSION['customer_id'] ?? null;

  if (!$customer_id) {
    echo "Please login first.";
    exit;
  }

  // Query to select order id and total price of latest order
  $query = "
    SELECT o.id, p.price * oi.quantity AS total_price
    FROM orders o
    JOIN products p ON o.customer_id = ?
    JOIN order_items oi ON o.id = oi.order_id AND p.id = oi.product_id
    ORDER BY o.id DESC
    LIMIT 1;
  ";

  $stmt = $conn->prepare($query);
  $stmt->bind_param('i', $customer_id);
  $result = $stmt->execute();

  if (!$result) {
    echo "Error finalizing purchase.";
    exit;
  }

  $order_data = $stmt->get_result()->fetch_assoc();

  if ($order_data['total_price'] > 0) {
    // Update order total price
    update_order_total($order_data['id'], $order_data['total_price']);

    // Insert new order into orders table
    create_new_order();
  }

  return true;
}

// Function to update order total price
function update_order_total($order_id, $total) {
  // Query to update order total price in orders table
  $query = "
    UPDATE orders SET total = ?
    WHERE id = ?;
  ";

  $stmt = $conn->prepare($query);
  $stmt->bind_param('di', $total, $order_id);
  $result = $stmt->execute();

  if (!$result) {
    echo "Error updating order total price.";
    exit;
  }

  return true;
}


add_product_to_cart(1); // where 1 is the product id


update_product_quantity(1, 1, 2); // where 1 and 2 are order_id and product_id respectively


create_new_order();


finalize_purchase();


<?php

// Database connection settings
$host = 'localhost';
$username = 'root';
$password = '';
$dbname = 'store';

try {
    $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch(PDOException $e) {
    die("ERROR: Could not connect. " . $e->getMessage());
}

?>


<?php

// Display a list of products
function displayProducts() {
  global $conn;

  $query = "SELECT * FROM products";
  $result = $conn->prepare($query);
  $result->execute();

  while ($row = $result->fetch()) {
    echo "<p>" . $row['name'] . " - $" . number_format($row['price'], 2) . "</p>";
  }
}

?>


<?php

// Display the cart contents
function displayCart() {
  global $conn;
  session_start();

  if (isset($_SESSION['cart_id'])) {
    $query = "SELECT * FROM cart_items WHERE cart_id = :id";
    $result = $conn->prepare($query);
    $result->bindParam(':id', $_SESSION['cart_id']);
    $result->execute();

    echo "<p>Cart Contents:</p>";
    while ($row = $result->fetch()) {
      echo "<p>" . $row['product_name'] . " x " . $row['quantity'] . "</p>";
    }

    // Calculate the total cost
    $query = "SELECT * FROM cart_items WHERE cart_id = :id";
    $result = $conn->prepare($query);
    $result->bindParam(':id', $_SESSION['cart_id']);
    $result->execute();

    $total = 0;
    while ($row = $result->fetch()) {
      $total += $row['quantity'] * $row['price'];
    }

    echo "<p>Total: $" . number_format($total, 2) . "</p>";
  } else {
    echo "Your cart is empty.";
  }
}

// Add a product to the cart
function addProductToCart() {
  global $conn;
  session_start();

  if (isset($_POST['product_id'])) {
    $query = "SELECT * FROM products WHERE id = :id";
    $result = $conn->prepare($query);
    $result->bindParam(':id', $_POST['product_id']);
    $result->execute();

    $row = $result->fetch();
    $product_name = $row['name'];
    $price = $row['price'];

    // Check if the product is already in the cart
    $query = "SELECT * FROM cart_items WHERE product_id = :id AND cart_id = :cart_id";
    $result = $conn->prepare($query);
    $result->bindParam(':id', $_POST['product_id']);
    $result->bindParam(':cart_id', $_SESSION['cart_id']);
    $result->execute();

    if ($result->rowCount() > 0) {
      // Update the quantity
      $query = "UPDATE cart_items SET quantity = quantity + :quantity WHERE product_id = :id AND cart_id = :cart_id";
      $result = $conn->prepare($query);
      $result->bindParam(':id', $_POST['product_id']);
      $result->bindParam(':quantity', $_POST['quantity']);
      $result->bindParam(':cart_id', $_SESSION['cart_id']);
      $result->execute();
    } else {
      // Insert a new cart item
      $query = "INSERT INTO cart_items (cart_id, product_id, quantity) VALUES (:id, :product_id, :quantity)";
      $result = $conn->prepare($query);
      $result->bindParam(':id', $_SESSION['cart_id']);
      $result->bindParam(':product_id', $_POST['product_id']);
      $result->bindParam(':quantity', $_POST['quantity']);
      $result->execute();
    }

    header("Location: cart.php");
  }
}

?>


<?php

// Process the payment
function processPayment() {
  global $conn;
  session_start();

  // Check if the user has a cart
  if (isset($_SESSION['cart_id'])) {
    // Get the total cost of the cart
    $query = "SELECT * FROM cart_items WHERE cart_id = :id";
    $result = $conn->prepare($query);
    $result->bindParam(':id', $_SESSION['cart_id']);
    $result->execute();

    $total = 0;
    while ($row = $result->fetch()) {
      $total += $row['quantity'] * $row['price'];
    }

    // Process the payment
    // (Insert payment processing code here)

    echo "Payment processed successfully!";
  } else {
    echo "Your cart is empty.";
  }
}

?>


<?php
// Create a connection to the database
$conn = mysqli_connect("localhost", "your_username", "your_password", "database_name");

if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Insert some products into the database
$product1 = array(
    'name' => 'Product 1',
    'price' => 9.99,
    'description' => 'This is product one.'
);

$query1 = "INSERT INTO products (name, price, description) VALUES ('" . $product1['name'] . "', '" . $product1['price'] . "', '" . $product1['description'] . "')";

if (!mysqli_query($conn, $query1)) {
    echo 'Error: ' . mysqli_error($conn);
}

$product2 = array(
    'name' => 'Product 2',
    'price' => 19.99,
    'description' => 'This is product two.'
);

$query2 = "INSERT INTO products (name, price, description) VALUES ('" . $product2['name'] . "', '" . $product2['price'] . "', '" . $product2['description'] . "')";

if (!mysqli_query($conn, $query2)) {
    echo 'Error: ' . mysqli_error($conn);
}

// Close the connection
mysqli_close($conn);
?>


<?php
// Create a connection to the database
$conn = mysqli_connect("localhost", "your_username", "your_password", "database_name");

if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Retrieve data from the database
$result = mysqli_query($conn, "SELECT * FROM products ORDER BY id DESC");

// Display all retrieved rows
while ($row = mysqli_fetch_assoc($result)) {
    echo "<p><b>Product ID:</b> $row[id] - <b>Name:</b> $row[name] - <b>Price:</b> $" . number_format($row['price'], 2) . "</p>";
}

// Close the connection
mysqli_close($conn);
?>


<?php
if (isset($_POST['purchase'])) {
    // Create a connection to the database
    $conn = mysqli_connect("localhost", "your_username", "your_password", "database_name");

    if (!$conn) {
        die("Connection failed: " . mysqli_connect_error());
    }

    // Retrieve the product ID from the form data
    $productId = $_POST['product_id'];

    // Retrieve the product's details from the database
    $result = mysqli_query($conn, "SELECT * FROM products WHERE id='" . $productId . "'");

    if (mysqli_num_rows($result) > 0) {
        while ($row = mysqli_fetch_assoc($result)) {
            $name = $row['name'];
            $price = $row['price'];

            // Process the purchase
            echo "Thank you for your purchase of: $name";
            echo "<p>Your total is: $" . number_format($price, 2) . "</p>";
        }
    } else {
        echo 'Error: Product not found.';
    }

    // Close the connection
    mysqli_close($conn);
}
?>


// Configuration file (e.g. config.php)
<?php

define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

?>


// Connection to database
function connect_to_db() {
  $conn = new PDO("mysql:host=".DB_HOST.";dbname=".DB_NAME, DB_USERNAME, DB_PASSWORD);
  return $conn;
}

// Function to add product to cart
function add_product_to_cart($product_id, $quantity) {
  $conn = connect_to_db();
  $stmt = $conn->prepare("INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)");
  $stmt->bindParam(':order_id', $_SESSION['cart']['id']);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->bindParam(':quantity', $quantity);
  if ($stmt->execute()) {
    return true;
  } else {
    return false;
  }
}

// Function to checkout
function checkout() {
  $conn = connect_to_db();
  $order_id = $_SESSION['cart']['id'];
  $total = $_SESSION['cart']['total'];
  $status = 'pending';
  $stmt = $conn->prepare("INSERT INTO orders (user_id, total, status) VALUES (:user_id, :total, :status)");
  $stmt->bindParam(':user_id', $_SESSION['user']['id']);
  $stmt->bindParam(':total', $total);
  $stmt->bindParam(':status', $status);
  if ($stmt->execute()) {
    // Update order items with the new order id
    $order_items_stmt = $conn->prepare("UPDATE order_items SET order_id = :order_id WHERE order_id = :old_order_id");
    $order_items_stmt->bindParam(':order_id', $order_id);
    $order_items_stmt->bindParam(':old_order_id', $_SESSION['cart']['id']);
    if ($order_items_stmt->execute()) {
      // Clear the cart
      unset($_SESSION['cart']);
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
}

// Function to purchase product
function purchase_product($product_id, $quantity) {
  $conn = connect_to_db();
  $stmt = $conn->prepare("SELECT * FROM products WHERE id = :id");
  $stmt->bindParam(':id', $product_id);
  if ($stmt->execute()) {
    $product_data = $stmt->fetch();
    if (isset($_SESSION['cart']['total'])) {
      $_SESSION['cart']['total'] += ($product_data['price'] * $quantity);
    } else {
      $_SESSION['cart']['total'] = ($product_data['price'] * $quantity);
    }
    // Add product to cart
    add_product_to_cart($product_id, $quantity);
  }
}


// Set up session variables
$_SESSION['user']['id'] = 1;
$_SESSION['cart'] = array('total' => 0);

// Purchase a product
purchase_product(1, 2); // Product ID: 1, Quantity: 2

// Checkout
if (checkout()) {
  echo 'Order successful!';
} else {
  echo 'Error placing order.';
}


<?php
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database_name";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


<?php
class Product {
  private $id;
  private $name;
  private $price;

  public function __construct($id, $name, $price) {
    $this->id = $id;
    $this->name = $name;
    $this->price = $price;
  }

  public function getId() { return $this->id; }
  public function getName() { return $this->name; }
  public function getPrice() { return $this->price; }
}
?>


<?php
class Cart {
  private $userId;
  private $products = array();

  public function __construct($userId) {
    $this->userId = $userId;
  }

  public function addProduct($productId, $quantity) {
    if (array_key_exists($productId, $this->products)) {
      $this->products[$productId] += $quantity;
    } else {
      $this->products[$productId] = $quantity;
    }
  }

  public function getProducts() { return $this->products; }
}
?>


<?php
require_once 'db.php';
require_once 'product.php';
require_once 'cart.php';

// Add product to cart
if (isset($_POST['add_to_cart'])) {
  $userId = $_SESSION['user_id'];
  $productId = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  $cart = new Cart($userId);
  $cart->addProduct($productId, $quantity);

  // Save cart to database
  $stmt = $conn->prepare("INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)");
  $stmt->bind_param("iis", $userId, $productId, $quantity);
  $stmt->execute();
}

// Checkout
if (isset($_POST['checkout'])) {
  // Save order to database
  $stmt = $conn->prepare("INSERT INTO orders (user_id) VALUES (?)");
  $stmt->bind_param("i", $_SESSION['user_id']);
  $stmt->execute();

  // Clear cart
  unset($cart);
}

// Display products and cart contents
if (isset($_GET['products'])) {
  $query = "SELECT * FROM products";
  $result = $conn->query($query);

  echo '<h2>Products</h2>';
  while ($row = $result->fetch_assoc()) {
    echo '<p><a href="cart.php?add_to_cart='.$row['id'].'&quantity=1">'.$row['name'].'</a></p>';
  }
}

if (isset($_GET['cart'])) {
  $query = "SELECT * FROM cart WHERE user_id=".$_SESSION['user_id'];
  $result = $conn->query($query);

  echo '<h2>Cart Contents</h2>';
  while ($row = $result->fetch_assoc()) {
    echo '<p>'.$row['name'].' x '.$row['quantity'].'</p>';
  }
}
?>


<?php
require_once 'controller.php';
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Functionality</title>
</head>
<body>

<form action="" method="post">
  <input type="hidden" name="product_id" value="<?php echo $_GET['id']; ?>">
  <input type="number" name="quantity" value="1">
  <button type="submit" name="add_to_cart">Add to Cart</button>
</form>

<form action="" method="post">
  <button type="submit" name="checkout">Checkout</button>
</form>

<h2>Products:</h2>
<a href="index.php?products=true">View Products</a>

<h2>Cart Contents:</h2>
<a href="index.php?cart=true">View Cart</a>

<?php echo $_GET['id']; ?>


<?php
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'shop');
?>


<?php
require_once 'config.php';

function db_connect() {
  $conn = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USERNAME, DB_PASSWORD);
  return $conn;
}

function db_disconnect($conn) {
  $conn = null;
}
?>


<?php
require_once 'db.php';

class User {
  private $id;
  private $name;
  private $email;

  public function __construct() {}

  public function login($email, $password) {
    try {
      $conn = db_connect();
      $stmt = $conn->prepare("SELECT * FROM users WHERE email=:email AND password=:password");
      $stmt->bindParam(':email', $email);
      $stmt->bindParam(':password', $password);
      $stmt->execute();
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error: ' . $e->getMessage();
    }
  }

  public function register($name, $email, $password) {
    try {
      $conn = db_connect();
      $stmt = $conn->prepare("INSERT INTO users (name, email, password) VALUES (:name, :email, :password)");
      $stmt->bindParam(':name', $name);
      $stmt->bindParam(':email', $email);
      $stmt->bindParam(':password', $password);
      $stmt->execute();
    } catch (PDOException $e) {
      echo 'Error: ' . $e->getMessage();
    }
  }

  public function get_user($id) {
    try {
      $conn = db_connect();
      $stmt = $conn->prepare("SELECT * FROM users WHERE id=:id");
      $stmt->bindParam(':id', $id);
      $stmt->execute();
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error: ' . $e->getMessage();
    }
  }

  public function update_user($id, $name, $email, $password) {
    try {
      $conn = db_connect();
      $stmt = $conn->prepare("UPDATE users SET name=:name, email=:email, password=:password WHERE id=:id");
      $stmt->bindParam(':id', $id);
      $stmt->bindParam(':name', $name);
      $stmt->bindParam(':email', $email);
      $stmt->bindParam(':password', $password);
      $stmt->execute();
    } catch (PDOException $e) {
      echo 'Error: ' . $e->getMessage();
    }
  }

  public function delete_user($id) {
    try {
      $conn = db_connect();
      $stmt = $conn->prepare("DELETE FROM users WHERE id=:id");
      $stmt->bindParam(':id', $id);
      $stmt->execute();
    } catch (PDOException $e) {
      echo 'Error: ' . $e->getMessage();
    }
  }
}
?>


<?php
require_once 'db.php';

class Product {
  private $id;
  private $name;
  private $price;

  public function __construct() {}

  public function get_products() {
    try {
      $conn = db_connect();
      $stmt = $conn->prepare("SELECT * FROM products");
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error: ' . $e->getMessage();
    }
  }

  public function get_product($id) {
    try {
      $conn = db_connect();
      $stmt = $conn->prepare("SELECT * FROM products WHERE id=:id");
      $stmt->bindParam(':id', $id);
      $stmt->execute();
      return $stmt->fetch(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error: ' . $e->getMessage();
    }
  }

  public function add_product($name, $price) {
    try {
      $conn = db_connect();
      $stmt = $conn->prepare("INSERT INTO products (name, price) VALUES (:name, :price)");
      $stmt->bindParam(':name', $name);
      $stmt->bindParam(':price', $price);
      $stmt->execute();
    } catch (PDOException $e) {
      echo 'Error: ' . $e->getMessage();
    }
  }

  public function update_product($id, $name, $price) {
    try {
      $conn = db_connect();
      $stmt = $conn->prepare("UPDATE products SET name=:name, price=:price WHERE id=:id");
      $stmt->bindParam(':id', $id);
      $stmt->bindParam(':name', $name);
      $stmt->bindParam(':price', $price);
      $stmt->execute();
    } catch (PDOException $e) {
      echo 'Error: ' . $e->getMessage();
    }
  }

  public function delete_product($id) {
    try {
      $conn = db_connect();
      $stmt = $conn->prepare("DELETE FROM products WHERE id=:id");
      $stmt->bindParam(':id', $id);
      $stmt->execute();
    } catch (PDOException $e) {
      echo 'Error: ' . $e->getMessage();
    }
  }
}
?>


<?php
require_once 'db.php';

class Order {
  private $id;
  private $user_id;
  private $order_date;
  private $total;

  public function __construct() {}

  public function get_orders($user_id) {
    try {
      $conn = db_connect();
      $stmt = $conn->prepare("SELECT * FROM orders WHERE user_id=:user_id");
      $stmt->bindParam(':user_id', $user_id);
      $stmt->execute();
      return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
      echo 'Error: ' . $e->getMessage();
    }
  }

  public function add_order($user_id, $total) {
    try {
      $conn = db_connect();
      $stmt = $conn->prepare("INSERT INTO orders (user_id, order_date, total) VALUES (:user_id, NOW(), :total)");
      $stmt->bindParam(':user_id', $user_id);
      $stmt->bindParam(':total', $total);
      $stmt->execute();
    } catch (PDOException $e) {
      echo 'Error: ' . $e->getMessage();
    }
  }

  public function update_order($id, $user_id, $total) {
    try {
      $conn = db_connect();
      $stmt = $conn->prepare("UPDATE orders SET user_id=:user_id, total=:total WHERE id=:id");
      $stmt->bindParam(':id', $id);
      $stmt->bindParam(':user_id', $user_id);
      $stmt->bindParam(':total', $total);
      $stmt->execute();
    } catch (PDOException $e) {
      echo 'Error: ' . $e->getMessage();
    }
  }

  public function delete_order($id) {
    try {
      $conn = db_connect();
      $stmt = $conn->prepare("DELETE FROM orders WHERE id=:id");
      $stmt->bindParam(':id', $id);
      $stmt->execute();
    } catch (PDOException $e) {
      echo 'Error: ' . $e->getMessage();
    }
  }

  public function calculate_total($products, $user_id) {
    try {
      $total = 0;
      foreach ($products as $product) {
        $conn = db_connect();
        $stmt = $conn->prepare("SELECT price FROM products WHERE id=:id");
        $stmt->bindParam(':id', $product['id']);
        $stmt->execute();
        $price = $stmt->fetchColumn();
        $total += $price;
      }
      $this->add_order($user_id, $total);
    } catch (PDOException $e) {
      echo 'Error: ' . $e->getMessage();
    }
  }
}
?>


<?php
require_once 'config.php';
require_once 'db.php';

$user = new User();
$product = new Product();
$order = new Order();

if (isset($_POST['login'])) {
  $email = $_POST['email'];
  $password = $_POST['password'];
  $user->login($email, $password);
}

if (isset($_POST['register'])) {
  $name = $_POST['name'];
  $email = $_POST['email'];
  $password = $_POST['password'];
  $user->register($name, $email, $password);
}

if (isset($_POST['add_product'])) {
  $name = $_POST['name'];
  $price = $_POST['price'];
  $product->add_product($name, $price);
}

if (isset($_POST['update_product'])) {
  $id = $_POST['id'];
  $name = $_POST['name'];
  $price = $_POST['price'];
  $product->update_product($id, $name, $price);
}

if (isset($_POST['delete_product'])) {
  $id = $_POST['id'];
  $product->delete_product($id);
}

if (isset($_POST['calculate_total'])) {
  $user_id = $_POST['user_id'];
  $products = $_POST['products'];
  $order->calculate_total($products, $user_id);
}
?>


class Purchase {
  private $db;

  function __construct() {
    // Connect to database
    $this->db = new mysqli("localhost", "username", "password", "database_name");
  }

  /**
   * Add a product to the cart
   *
   * @param int $product_id
   * @param int $quantity
   */
  function addProduct($product_id, $quantity) {
    // Get product details from database
    $query = "SELECT price FROM products WHERE id = '$product_id'";
    $result = $this->db->query($query);
    if ($row = $result->fetch_assoc()) {
      $price = $row['price'];
      // Add product to order items table
      $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (NULL, '$product_id', '$quantity')";
      $this->db->query($query);
    }
  }

  /**
   * Remove a product from the cart
   *
   * @param int $product_id
   */
  function removeProduct($product_id) {
    // Get order items where product_id is set to product_id and delete them
    $query = "DELETE FROM order_items WHERE product_id = '$product_id'";
    $this->db->query($query);
  }

  /**
   * Calculate the total cost of the cart
   *
   * @return float
   */
  function calculateTotalCost() {
    // Get all products from the order items table
    $query = "SELECT price, quantity FROM order_items";
    $result = $this->db->query($query);
    $total_cost = 0;
    while ($row = $result->fetch_assoc()) {
      $price = $row['price'];
      $quantity = $row['quantity'];
      $total_cost += $price * $quantity;
    }
    return $total_cost;
  }

  /**
   * Place an order
   *
   * @return bool
   */
  function placeOrder() {
    // Get customer details (replace with actual implementation)
    $customer_name = $_POST['customer_name'];
    $order_date = date("Y-m-d");
    $total_cost = $this->calculateTotalCost();
    
    // Insert into orders table
    $query = "INSERT INTO orders (customer_name, order_date, total_cost) VALUES ('$customer_name', '$order_date', '$total_cost')";
    if ($this->db->query($query)) {
      return true;
    } else {
      return false;
    }
  }
}


$purchase = new Purchase();

// Add products to cart
$purchase->addProduct(1, 2);
$purchase->addProduct(3, 4);

// Remove product from cart
$purchase->removeProduct(1);

// Calculate total cost
$total_cost = $purchase->calculateTotalCost();

// Place order
if ($purchase->placeOrder()) {
  echo "Order placed successfully!";
} else {
  echo "Error placing order.";
}


<?php
// Database connection settings
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "shop";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Select product list
$query = "SELECT * FROM products";
$result = $conn->query($query);

// Display products
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shop</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h1>Shop</h1>
    <ul>
        <?php
        // Display products in an unordered list
        while ($row = $result->fetch_assoc()) {
            echo "<li>";
            echo "<a href='product.php?id={$row['id']}'>";
            echo "{$row['name']} - {$row['price']}";
            echo "</a>";
            echo "</li>";
        }
        ?>
    </ul>
    <p><a href="cart.php">View Cart</a></p>

    <?php
    // Close connection
    $conn->close();
    ?>
</body>
</html>


<?php
// Get product ID from URL parameter
$id = $_GET['id'];

// Database connection settings
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "shop";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Select product details
$query = "SELECT * FROM products WHERE id = '$id'";
$result = $conn->query($query);

// Display product details
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Details</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h1><?php echo $result->fetch_assoc()['name']; ?></h1>
    <p>Price: <?php echo $result->fetch_assoc()['price']; ?></p>
    <p>Description: <?php echo $result->fetch_assoc()['description']; ?></p>

    <?php
    // Display add to cart button
    ?>
    <form action="cart.php" method="post">
        <input type="hidden" name="product_id" value="<?php echo $id; ?>">
        <button type="submit">Add to Cart</button>
    </form>

    <?php
    // Close connection
    $conn->close();
    ?>
</body>
</html>


<?php
// Display cart contents
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cart</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h1>Cart</h1>

    <?php
    // Display cart contents as an unordered list
    $query = "SELECT * FROM cart";
    $result = mysqli_query($conn, $query);
    while ($row = $result->fetch_assoc()) {
        echo "<li>";
        echo "{$row['product_name']} - {$row['price']}";
        echo "</li>";
    }
    ?>
</body>
</html>

<?php
// Close connection
$conn->close();
?>


<?php
  $servername = "localhost";
  $username = "root";
  $password = "";
  $dbname = "store";

  try {
    $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
    // set the PDO error mode to exception
    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  } catch(PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
  }
?>


<?php
class Product {
  private $conn;
  private $table_name = "products";

  public function __construct($db) {
    $this->conn = $db;
  }

  public function getProducts() {
    $query = "SELECT * FROM $this->table_name";
    return $this->conn->prepare($query)->execute()->fetchAll();
  }
}
?>


<?php
class Cart {
  private $conn;
  private $user_id;

  public function __construct($db, $user_id) {
    $this->conn = $db;
    $this->user_id = $user_id;
  }

  public function addItem($product_id, $quantity) {
    $query = "INSERT INTO orders (user_id, product_id, quantity)
              VALUES (:user_id, :product_id, :quantity)";
    return $this->conn->prepare($query)->execute([
      ":user_id" => $this->user_id,
      ":product_id" => $product_id,
      ":quantity" => $quantity
    ]);
  }

  public function updateQuantity($order_id, $new_quantity) {
    $query = "UPDATE orders SET quantity = :new_quantity WHERE id = :order_id";
    return $this->conn->prepare($query)->execute([
      ":new_quantity" => $new_quantity,
      ":order_id" => $order_id
    ]);
  }

  public function getCart() {
    $query = "SELECT * FROM orders WHERE user_id = :user_id";
    return $this->conn->prepare($query)->execute([":user_id" => $this->user_id])->fetchAll();
  }
}
?>


<?php
class Payment {
  private $conn;

  public function __construct($db) {
    $this->conn = $db;
  }

  public function makePayment($order_id, $amount) {
    $query = "UPDATE orders SET payment_method = :payment_method, total = :total WHERE id = :order_id";
    return $this->conn->prepare($query)->execute([
      ":order_id" => $order_id,
      ":payment_method" => "Credit/Debit Card",
      ":total" => $amount
    ]);
  }
}
?>


<?php
require_once 'db.php';
require_once 'product.php';
require_once 'cart.php';
require_once 'payment.php';

$cart = new Cart($conn, $_SESSION['user_id']);
$product_model = new Product($conn);

if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  if ($cart->addItem($product_id, $quantity)) {
    echo "Item added to cart successfully!";
  } else {
    echo "Error adding item to cart.";
  }
}

if (isset($_POST['update_quantity'])) {
  $order_id = $_POST['order_id'];
  $new_quantity = $_POST['new_quantity'];

  if ($cart->updateQuantity($order_id, $new_quantity)) {
    echo "Quantity updated successfully!";
  } else {
    echo "Error updating quantity.";
  }
}

if (isset($_POST['make_payment'])) {
  $order_id = $_POST['order_id'];
  $amount = $_POST['amount'];

  if ($payment_model->makePayment($order_id, $amount)) {
    echo "Payment successful!";
  } else {
    echo "Error processing payment.";
  }
}
?>


<form action="purchase.php" method="post">
  <input type="hidden" name="product_id" value="<?php echo $product['id']; ?>">
  <input type="number" name="quantity" value="1">
  <button type="submit" name="add_to_cart">Add to Cart</button>
</form>


<form action="purchase.php" method="post">
  <input type="hidden" name="order_id" value="<?php echo $cart['id']; ?>">
  <input type="number" name="new_quantity" value="<?php echo $_POST['new_quantity']; ?>">
  <button type="submit" name="update_quantity">Update Quantity</button>
</form>


<form action="purchase.php" method="post">
  <input type="hidden" name="order_id" value="<?php echo $cart['id']; ?>">
  <input type="number" name="amount" value="<?php echo $_POST['amount']; ?>">
  <button type="submit" name="make_payment">Make Payment</button>
</form>


<?php
// Initialize session
session_start();

// Check if cart is empty, if so set it to an empty array
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function add_to_cart($product_id, $quantity) {
    global $_SESSION;
    // Check if product is already in cart, if so increment quantity
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $product_id) {
            $item['quantity'] += $quantity;
            return true;
        }
    }
    // If not, add new item to cart
    $_SESSION['cart'][] = array('id' => $product_id, 'quantity' => $quantity);
    return true;
}

// Function to remove item from cart
function remove_from_cart($product_id) {
    global $_SESSION;
    foreach ($_SESSION['cart'] as $key => &$item) {
        if ($item['id'] == $product_id) {
            unset($_SESSION['cart'][$key]);
            return true;
        }
    }
    return false;
}

// Function to update quantity of item in cart
function update_quantity($product_id, $new_quantity) {
    global $_SESSION;
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $product_id) {
            $item['quantity'] = $new_quantity;
            return true;
        }
    }
    return false;
}

// Function to get total cost of items in cart
function get_total_cost() {
    global $_SESSION;
    $total = 0;
    foreach ($_SESSION['cart'] as &$item) {
        // Assuming products table has a column called 'price'
        $query = "SELECT price FROM products WHERE id = '$item[id]'";
        $result = mysqli_query($conn, $query);
        $row = mysqli_fetch_assoc($result);
        $total += $row['price'] * $item['quantity'];
    }
    return $total;
}

// Example usage:
if (isset($_POST['add_to_cart'])) {
    add_to_cart($_POST['product_id'], $_POST['quantity']);
} elseif (isset($_POST['remove_from_cart'])) {
    remove_from_cart($_POST['product_id']);
} elseif (isset($_POST['update_quantity'])) {
    update_quantity($_POST['product_id'], $_POST['new_quantity']);
}

?>


<?php include 'cart.php'; ?>
<!DOCTYPE html>
<html>
<head>
    <title>Purchase Cart</title>
</head>
<body>
    <!-- Display cart contents -->
    <?php if (!empty($_SESSION['cart'])) : ?>
        <h1>Cart Contents:</h1>
        <ul>
            <?php foreach ($_SESSION['cart'] as $item) : ?>
                <li><?= $item['id'] ?> x <?= $item['quantity'] ?></li>
            <?php endforeach; ?>
        </ul>
    <?php else : ?>
        <p>Your cart is empty.</p>
    <?php endif; ?>

    <!-- Form to add items to cart -->
    <form action="" method="post">
        <label for="product_id">Product ID:</label>
        <input type="text" id="product_id" name="product_id"><br><br>
        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity"><br><br>
        <input type="submit" name="add_to_cart" value="Add to Cart">
    </form>

    <!-- Form to remove items from cart -->
    <form action="" method="post">
        <label for="product_id">Product ID:</label>
        <input type="text" id="product_id" name="product_id"><br><br>
        <input type="submit" name="remove_from_cart" value="Remove from Cart">
    </form>

    <!-- Form to update quantity of items in cart -->
    <form action="" method="post">
        <label for="product_id">Product ID:</label>
        <input type="text" id="product_id" name="product_id"><br><br>
        <label for="new_quantity">New Quantity:</label>
        <input type="number" id="new_quantity" name="new_quantity"><br><br>
        <input type="submit" name="update_quantity" value="Update Quantity">
    </form>

    <!-- Display total cost -->
    <?php echo 'Total Cost: $' . get_total_cost(); ?>
</body>
</html>


<?php

// Connect to database
$conn = new mysqli("localhost", "username", "password", "database");

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get products from database
$query = "SELECT * FROM products";
$result = $conn->query($query);

// Display products on page
while ($row = $result->fetch_assoc()) {
    echo "<p>ID: " . $row["id"] . ", Name: " . $row["name"] . ", Price: $" . $row["price"] . "</p>";
}

// Handle form submission
if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
    // Get product details from database
    $query = "SELECT * FROM products WHERE id = '" . $_POST['product_id'] . "'";
    $result = $conn->query($query);
    $row = $result->fetch_assoc();

    // Validate input data
    if ($_POST['quantity'] < 1) {
        echo "Error: Quantity must be at least 1.";
    } elseif ($_POST['quantity'] > $row["stock"]) {
        echo "Error: Not enough stock available for this product.";
    } else {
        // Insert order into database
        $query = "INSERT INTO orders (user_id, product_id, quantity) VALUES ('" . $_SESSION['user_id'] . "', '" . $_POST['product_id'] . "', '" . $_POST['quantity'] . "')";
        $conn->query($query);

        // Update stock in products table
        $query = "UPDATE products SET stock = stock - '" . $_POST['quantity'] . "' WHERE id = '" . $_POST['product_id'] . "'";
        $conn->query($query);

        echo "Order successful!";
    }
}

// Close connection
$conn->close();

?>


<?php

// Include database connection settings
require_once 'dbconfig.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

// Get product ID from URL parameter
$product_id = $_GET['product_id'];

// Retrieve product details
$query = "SELECT * FROM products WHERE id = $product_id";
$result = mysqli_query($conn, $query);
$product = mysqli_fetch_assoc($result);

// Check if product exists
if (!$product) {
    echo 'Product not found!';
    exit;
}

// Update user's order history
$query = "INSERT INTO orders (user_id, product_id, price, created_at)
          VALUES ('" . $_SESSION['user_id'] . "', '$product_id', '" . $product['price'] . "', NOW())";
mysqli_query($conn, $query);

// Update product quantity
$query = "UPDATE products SET quantity = quantity - 1 WHERE id = $product_id";
mysqli_query($conn, $query);

// Display success message and redirect to cart
echo 'Product purchased successfully!';
header('Location: cart.php');
exit;

?>


<?php

// Include database connection settings
require_once 'dbconfig.php';

// Get user's orders
$query = "SELECT * FROM orders WHERE user_id = '" . $_SESSION['user_id'] . "'";
$result = mysqli_query($conn, $query);
$orders = mysqli_fetch_all($result);

?>
<!DOCTYPE html>
<html>
<head>
    <title>Cart</title>
</head>
<body>
    <?php foreach ($orders as $order) : ?>
        <p><?= $order['product_name'] ?> x <?= $order['quantity'] ?></p>
    <?php endforeach; ?>
</body>
</html>


<?php

// Database connection settings
$conn = mysqli_connect('localhost', 'username', 'password', 'database');

?>


<?php
$host = 'your_host';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
    echo "Connection failed: " . $e->getMessage();
}
?>


<?php
function get_products() {
    global $pdo;
    $stmt = $pdo->prepare("SELECT * FROM products");
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function add_to_cart($product_id, $quantity) {
    global $pdo;
    $stmt = $pdo->prepare("INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)");
    $stmt->bindParam(':order_id', 0); // to be set later
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':quantity', $quantity);
    return $stmt->execute();
}

function create_order($customer_name) {
    global $pdo;
    $stmt = $pdo->prepare("INSERT INTO orders (customer_name, total) VALUES (:customer_name, 0)");
    $stmt->bindParam(':customer_name', $customer_name);
    return $stmt->execute();
}
?>


<?php
include 'config.php';
include 'functions.php';

// retrieve products and add them to the cart
$products = get_products();

// display cart contents
echo '<h1>Cart Contents:</h1>';
foreach ($products as $product) {
    echo '<p>' . $product['name'] . ': ' . $product['price'] . '</p>';
}

// proceed to checkout
if (isset($_POST['checkout'])) {
    // retrieve order ID and customer name
    $order_id = 0; // to be set later
    $customer_name = $_POST['customer_name'];

    // create new order
    $order_id = create_order($customer_name);

    // add products to the order
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        add_to_cart($product_id, $quantity);
    }
}

?>


<?php
include 'config.php';
include 'functions.php';

// retrieve order ID and customer name
$order_id = 0; // to be set later
$customer_name = $_POST['customer_name'];

// calculate total price
$total_price = 0;
foreach ($_SESSION['cart'] as $product_id => $quantity) {
    $stmt = $pdo->prepare("SELECT price FROM products WHERE id = :id");
    $stmt->bindParam(':id', $product_id);
    $stmt->execute();
    $price = $stmt->fetchColumn();
    $total_price += $price * $quantity;
}

// update order total
$stmt = $pdo->prepare("UPDATE orders SET total = :total WHERE id = :order_id");
$stmt->bindParam(':total', $total_price);
$stmt->bindParam(':order_id', $order_id);
$stmt->execute();

echo 'Thank you for your purchase!';
?>


<?php

// Assuming you have a $products array with product details
$products = [
    ['id' => 1, 'name' => 'Product A', 'price' => 19.99],
    ['id' => 2, 'name' => 'Product B', 'price' => 29.99],
];

// If the form has been submitted...
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Retrieve selected products
    $selectedProducts = $_POST['selected_products'];
    
    // Calculate total cost
    $totalCost = array_sum(array_map(function($productId) use ($products) {
        return (int)$productId * $products[array_search($productId, array_column($products, 'id'))]['price'];
    }, explode(',', $selectedProducts)));
}

?>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Purchase Functionality Example</title>
<style>
table {
  border-collapse: collapse;
}
th, td {
  border: 1px solid #ddd;
  padding: 10px;
}
</style>
</head>
<body>

<h1>Purchase Products</h1>

<!-- Displaying products in a table -->
<table>
    <thead>
        <tr>
            <th>Product ID</th>
            <th>Product Name</th>
            <th>Price</th>
        </tr>
    </thead>
    <tbody>
    <?php foreach ($products as $product) { ?>
        <tr>
            <td><?php echo $product['id']; ?></td>
            <td><?php echo $product['name']; ?></td>
            <td>$<?php echo $product['price']; ?></td>
            <td><input type="checkbox" name="selected_products[]" value="<?php echo $product['id']; ?>"></td>
        </tr>
    <?php } ?>
    </tbody>
</table>

<!-- Displaying total cost -->
<p>Total Cost: $<?php if (isset($totalCost)) echo $totalCost; ?></p>

<!-- Purchase form -->
<form action="" method="post">
  <input type="submit" value="Purchase Selected Products">
</form>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
$(document).ready(function() {
    // Display total cost dynamically
    $('#selected-products').on('change', function() {
        var selectedProducts = $(this).val().split(',');
        var totalCost = 0;
        $.each(selectedProducts, function(index, value) {
            var productPrice = <?php echo json_encode(array_column($products, 'price')); ?>[<?php echo array_search(value, array_column($products, 'id')); ?>];
            totalCost += parseInt(productPrice);
        });
        $('#total-cost').text('$' + totalCost.toFixed(2));
    });
});
</script>
</body>
</html>


// config.php
<?php
$host = 'localhost';
$dbname = 'example_db';
$username = 'root';
$password = '';

$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>

// functions.php
<?php
function add_product($name, $price) {
    global $conn;
    $query = "INSERT INTO products (name, price) VALUES ('$name', '$price')";
    if ($conn->query($query)) {
        return true;
    } else {
        echo "Error: " . $conn->error;
        return false;
    }
}

function get_products() {
    global $conn;
    $query = "SELECT * FROM products";
    $result = $conn->query($query);
    if ($result) {
        $products = array();
        while ($row = $result->fetch_assoc()) {
            $products[] = $row;
        }
        return $products;
    } else {
        echo "Error: " . $conn->error;
        return false;
    }
}

function purchase($user_id, $product_id) {
    global $conn;
    $query = "INSERT INTO orders (user_id, product_id, order_date, total)
              VALUES ('$user_id', '$product_id', NOW(), (SELECT price FROM products WHERE id='$product_id'))";
    if ($conn->query($query)) {
        return true;
    } else {
        echo "Error: " . $conn->error;
        return false;
    }
}
?>

// purchase.php
<?php
require_once 'config.php';
require_once 'functions.php';

if (isset($_POST['submit'])) {
    $user_id = $_POST['user_id'];
    $product_id = $_POST['product_id'];

    if ($purchase($user_id, $product_id)) {
        echo "Purchase successful!";
    } else {
        echo "Error purchasing product.";
    }
}

$products = get_products();
?>

<html>
  <body>
    <?php foreach ($products as $product) { ?>
      <p>
        <b><?php echo $product['name']; ?></b> - $<?php echo number_format($product['price'], 2); ?>
        <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
          <input type="hidden" name="user_id" value="<?php echo $_POST['user_id']; ?>">
          <input type="hidden" name="product_id" value="<?php echo $product['id']; ?>">
          <button type="submit" name="submit">Purchase</button>
        </form>
      </p>
    <?php } ?>
  </body>
</html>


<?php

// Include configuration and database connection files
require 'config.php';
require 'db.php';

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
  header('Location: login.php');
  exit;
}

// Get product ID and quantity from form submission
if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
  $productId = intval($_POST['product_id']);
  $quantity = intval($_POST['quantity']);

  // Validate input
  if ($quantity <= 0) {
    echo "Invalid quantity";
    exit;
  }

  // Get product details from database
  $sql = "SELECT * FROM products WHERE id = ?";
  $stmt = $mysqli->prepare($sql);
  $stmt->bind_param('i', $productId);
  $stmt->execute();
  $productDetails = $stmt->get_result()->fetch_assoc();

  if (!$productDetails) {
    echo "Product not found";
    exit;
  }

  // Calculate total cost
  $total = $productDetails['price'] * $quantity;

  // Insert order into database
  $sql = "INSERT INTO orders (user_id, product_id, quantity, total, status)
          VALUES (?, ?, ?, ?, 'pending')";
  $stmt = $mysqli->prepare($sql);
  $stmt->bind_param('iisi', $_SESSION['user_id'], $productId, $quantity, $total);
  $stmt->execute();

  // Update product stock
  $sql = "UPDATE products SET stock = stock - ? WHERE id = ?";
  $stmt = $mysqli->prepare($sql);
  $stmt->bind_param('ii', $quantity, $productId);
  $stmt->execute();

  echo "Order placed successfully!";
} else {
  // Display form to enter product ID and quantity
?>
<form method="post">
  <label for="product_id">Product ID:</label>
  <input type="text" id="product_id" name="product_id"><br><br>
  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity"><br><br>
  <button type="submit">Purchase</button>
</form>
<?php
}
?>


<?php

// Configuration file (replace with your database credentials)
require 'config.php';

// Form data from the user
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $amount = $_POST['amount'];
    $product_id = $_POST['product_id'];

    // Check if user is logged in (for example, using a session variable)
    if (!isset($_SESSION['user_id'])) {
        echo "You must be logged in to make a purchase.";
        exit;
    }

    // Validate amount and product ID
    if (!is_numeric($amount) || !ctype_digit($product_id)) {
        echo "Invalid input. Please try again.";
        exit;
    }

    // Get the user's balance from the database
    $user_id = $_SESSION['user_id'];
    $query = mysqli_query($db, "SELECT balance FROM users WHERE id = '$user_id'") or die(mysqli_error($db));
    $balance = mysqli_fetch_assoc($query)['balance'];

    // Check if user has sufficient funds
    if ($balance < $amount) {
        echo "Insufficient funds.";
        exit;
    }

    // Update the product quantity in the database (assuming a simple table structure)
    $product_query = mysqli_query($db, "UPDATE products SET quantity = quantity - '$amount' WHERE id = '$product_id'") or die(mysqli_error($db));

    // Update the user's balance
    $update_balance = mysqli_query($db, "UPDATE users SET balance = balance - '$amount' WHERE id = '$user_id'") or die(mysqli_error($db));

    echo "Purchase successful!";
} else {
    ?>
    <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
        <label for="product_id">Product ID:</label>
        <input type="text" name="product_id" id="product_id"><br><br>
        <label for="amount">Amount:</label>
        <input type="number" name="amount" id="amount"><br><br>
        <button type="submit">Make Purchase</button>
    </form>
    <?php
}

?>


<?php

// Database credentials
$db = mysqli_connect('localhost', 'username', 'password', 'database');

?>


class Product {
    public $id;
    public $name;
    public $price;

    function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }
}


class Order {
    public $id;
    public $customer_name;
    public $order_date;
    public $total;

    function __construct($id, $customer_name, $order_date, $total) {
        $this->id = $id;
        $this->customer_name = $customer_name;
        $this->order_date = $order_date;
        $this->total = $total;
    }
}


class OrderItem {
    public $id;
    public $order_id;
    public $product_id;
    public $quantity;

    function __construct($id, $order_id, $product_id, $quantity) {
        $this->id = $id;
        $this->order_id = $order_id;
        $this->product_id = $product_id;
        $this->quantity = $quantity;
    }
}


class PurchaseController {
    function index() {
        // Get all products
        $products = array();
        $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
        $stmt = $db->prepare('SELECT * FROM products');
        $stmt->execute();
        while ($row = $stmt->fetch()) {
            $product = new Product($row['id'], $row['name'], $row['price']);
            array_push($products, $product);
        }
        return view('purchase', array('products' => $products));
    }

    function addOrder() {
        // Get order form data
        $customer_name = $_POST['customer_name'];
        $order_date = date('Y-m-d');
        $total = 0;
        foreach ($_SESSION['cart'] as $item) {
            $product_id = $item['product_id'];
            $quantity = $item['quantity'];
            // Get product price
            $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
            $stmt = $db->prepare('SELECT * FROM products WHERE id = :id');
            $stmt->bindParam(':id', $product_id);
            $stmt->execute();
            $row = $stmt->fetch();
            $price = $row['price'];
            // Calculate order total
            $total += $quantity * $price;
        }
        // Insert new order into database
        $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
        $stmt = $db->prepare('INSERT INTO orders (customer_name, order_date, total) VALUES (:customer_name, :order_date, :total)');
        $stmt->bindParam(':customer_name', $customer_name);
        $stmt->bindParam(':order_date', $order_date);
        $stmt->bindParam(':total', $total);
        $stmt->execute();
        // Get new order ID
        $new_order_id = $db->lastInsertId();
        // Insert order items into database
        foreach ($_SESSION['cart'] as $item) {
            $product_id = $item['product_id'];
            $quantity = $item['quantity'];
            $stmt = $db->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');
            $stmt->bindParam(':order_id', $new_order_id);
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':quantity', $quantity);
            $stmt->execute();
        }
        // Clear cart
        unset($_SESSION['cart']);
    }

    function viewOrder() {
        // Get order ID from URL parameter
        $order_id = $_GET['id'];
        // Retrieve order data from database
        $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
        $stmt = $db->prepare('SELECT * FROM orders WHERE id = :id');
        $stmt->bindParam(':id', $order_id);
        $stmt->execute();
        $row = $stmt->fetch();
        $order = new Order($row['id'], $row['customer_name'], $row['order_date'], $row['total']);
        // Retrieve order items from database
        $order_items = array();
        $stmt = $db->prepare('SELECT * FROM order_items WHERE order_id = :order_id');
        $stmt->bindParam(':order_id', $order_id);
        $stmt->execute();
        while ($row = $stmt->fetch()) {
            $product_id = $row['product_id'];
            // Get product data from database
            $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
            $stmt = $db->prepare('SELECT * FROM products WHERE id = :id');
            $stmt->bindParam(':id', $product_id);
            $stmt->execute();
            $row = $stmt->fetch();
            $product = new Product($row['id'], $row['name'], $row['price']);
            array_push($order_items, new OrderItem($row['id'], $order_id, $product_id, $row['quantity']));
        }
        return view('view_order', array('order' => $order, 'order_items' => $order_items));
    }
}


class Session {
    public static function start() {
        session_start();
    }

    public static function getCart() {
        if (!isset($_SESSION['cart'])) {
            $_SESSION['cart'] = array();
        }
        return $_SESSION['cart'];
    }

    public static function addProductToCart($product_id, $quantity) {
        $cart = self::getCart();
        foreach ($cart as &$item) {
            if ($item['product_id'] == $product_id) {
                $item['quantity'] += $quantity;
                return;
            }
        }
        array_push($cart, array('product_id' => $product_id, 'quantity' => $quantity));
    }

    public static function removeProductFromCart($product_id) {
        $cart = self::getCart();
        foreach ($cart as $key => &$item) {
            if ($item['product_id'] == $product_id) {
                unset($cart[$key]);
                return;
            }
        }
    }
}


class View {
    public static function render($template, $data = array()) {
        extract($data);
        include 'templates/' . $template . '.php';
    }

    public static function purchase() {
        self::render('purchase', array('products' => $_SESSION['cart']));
    }

    public static function view_order() {
        self::render('view_order', array('order' => new Order(), 'order_items' => array()));
    }
}


$routes = array(
    '/' => function () { PurchaseController::index(); },
    '/add-order' => function () { PurchaseController::addOrder(); },
    '/view/order/:id' => function ($params) { PurchaseController::viewOrder($params['id']); }
);


// config.php
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

// Establish database connection
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

// purchase.php
require_once 'config.php';

if (isset($_POST['submit'])) {
  // Validate form data
  $customer_name = trim($_POST['customer_name']);
  $product_ids = array_map('intval', explode(',', $_POST['product_ids']));
  $quantities = array_map('intval', explode(',', $_POST['quantities']));

  if (empty($customer_name) || empty($product_ids) || empty($quantities)) {
    echo 'Error: Invalid form data';
    exit;
  }

  // Calculate total price
  $total_price = 0;
  foreach ($product_ids as $i => $product_id) {
    $price = $conn->query("SELECT price FROM products WHERE id = $product_id")->fetchColumn();
    if (!$price) {
      echo 'Error: Product not found';
      exit;
    }
    $total_price += $price * $quantities[$i];
  }

  // Insert order and order items
  $order_id = $conn->query("INSERT INTO orders (customer_name, total_price) VALUES ('$customer_name', '$total_price')")->fetchColumn();
  foreach ($product_ids as $i => $product_id) {
    $conn->query("INSERT INTO order_items (order_id, product_id, quantity) VALUES ($order_id, $product_id, ${quantities[$i]})");
  }

  echo 'Order successfully placed!';
} else {
?>
<!DOCTYPE html>
<html>
<head>
  <title>Purchase</title>
</head>
<body>
  <h1>Purchase Form</h1>
  <form action="" method="post">
    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name"><br><br>
    <label for="product_ids">Product IDs (comma-separated):</label>
    <input type="text" id="product_ids" name="product_ids"><br><br>
    <label for="quantities">Quantities (comma-separated):</label>
    <input type="text" id="quantities" name="quantities"><br><br>
    <input type="submit" name="submit" value="Place Order">
  </form>
<?php
}


// database connection settings
$host = 'localhost';
$dbname = 'store';
$username = 'root';
$password = '';

// create a new PDO instance
$dsn = "mysql:host=$host;dbname=$dbname";
$conn = new PDO($dsn, $username, $password);


class Product {
    private $id;
    private $name;
    private $price;

    public function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }

    // getters and setters
    public function getId() { return $this->id; }
    public function getName() { return $this->name; }
    public function getPrice() { return $this->price; }
}


class Cart {
    private $products = array();

    public function addProduct(Product $product) {
        $this->products[] = $product;
    }

    public function getProducts() { return $this->products; }
}


class Purchase {
    private $cart;
    private $customer;

    public function __construct(Cart $cart, Customer $customer) {
        $this->cart = $cart;
        $this->customer = $customer;
    }

    // calculate the total cost of the purchase
    public function getTotal() {
        $total = 0;
        foreach ($this->cart->getProducts() as $product) {
            $total += $product->getPrice();
        }
        return $total;
    }

    // create a new order in the database
    public function processOrder() {
        $sql = "INSERT INTO orders (customer_id, total_cost)
                VALUES (:customer_id, :total_cost)";
        $stmt = $this->conn->prepare($sql);
        $stmt->bindParam(':customer_id', $this->customer->getId());
        $stmt->bindParam(':total_cost', $this->getTotal());
        $stmt->execute();

        // insert the products into the order items table
        foreach ($this->cart->getProducts() as $product) {
            $sql = "INSERT INTO order_items (order_id, product_id, quantity)
                    VALUES (:order_id, :product_id, 1)";
            $stmt = $this->conn->prepare($sql);
            $stmt->bindParam(':order_id', $this->conn->lastInsertId());
            $stmt->bindParam(':product_id', $product->getId());
            $stmt->execute();
        }
    }
}


class Customer {
    private $id;
    private $name;

    public function __construct($id, $name) {
        $this->id = $id;
        $this->name = $name;
    }

    // getters and setters
    public function getId() { return $this->id; }
    public function getName() { return $this->name; }
}


// create a new cart instance
$cart = new Cart();

// add some products to the cart
$product1 = new Product(1, 'Product 1', 10.99);
$product2 = new Product(2, 'Product 2', 5.99);
$cart->addProduct($product1);
$cart->addProduct($product2);

// create a new customer instance
$customer = new Customer(1, 'John Doe');

// create a new purchase instance
$purchase = new Purchase($cart, $customer);

// process the order
$purchase->processOrder();


<?php
// Initialize cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function addToCart($item_id, $quantity) {
    // Check if item is already in cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $item_id) {
            // Update quantity if item exists
            $item['quantity'] += $quantity;
            return;
        }
    }

    // Add new item to cart
    $_SESSION['cart'][] = array('id' => $item_id, 'quantity' => $quantity);
}

// Function to update item in cart
function updateItemInCart($item_id, $new_quantity) {
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $item_id) {
            $item['quantity'] = $new_quantity;
            return;
        }
    }
}

// Function to remove item from cart
function removeFromCart($item_id) {
    foreach (array_keys($_SESSION['cart']) as $index) {
        if ($_SESSION['cart'][$index]['id'] == $item_id) {
            unset($_SESSION['cart'][$index]);
            break;
        }
    }
}

// Function to calculate total cost of cart
function calculateTotal() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        // Assuming item prices are stored in a database or array
        $price = getPrice($item['id']); // Replace with actual price retrieval logic
        $total += $price * $item['quantity'];
    }
    return $total;
}

// Function to display cart contents
function displayCart() {
    ?>
    <table>
        <tr>
            <th>Item</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Total</th>
        </tr>
    <?php
    foreach ($_SESSION['cart'] as $item) {
        ?>
        <tr>
            <td><?= getItemName($item['id']) ?></td>
            <td><?= $item['quantity'] ?></td>
            <td><?= getPrice($item['id']) ?></td>
            <td><?= $item['quantity'] * getPrice($item['id']) ?></td>
        </tr>
    <?php
    }
    ?>
    </table>
    <?php
}

// Function to display cart total
function displayTotal() {
    echo "Subtotal: $" . calculateTotal();
}


// Add item to cart
addToCart(1, 2); // Add item with ID 1 and quantity 2

// Display cart contents
displayCart();

// Update item in cart
updateItemInCart(1, 3);

// Remove item from cart
removeFromCart(1);

// Display cart total
displayTotal();


// Include database connection file
require_once 'db.php';

// Function to register a new user
function register_user($username, $password) {
    global $conn;
    // Hash password before storing it in database
    $hashed_password = password_hash($password, PASSWORD_DEFAULT);
    $query = "INSERT INTO users (username, password_hash) VALUES ('$username', '$hashed_password')";
    return mysqli_query($conn, $query);
}

// Function to login a user
function login_user($username, $password) {
    global $conn;
    $query = "SELECT * FROM users WHERE username = '$username'";
    $result = mysqli_query($conn, $query);
    if (mysqli_num_rows($result) > 0) {
        // Retrieve the user's details from the database
        $row = mysqli_fetch_assoc($result);
        // Check password
        if (password_verify($password, $row['password_hash'])) {
            return true; // Login successful
        } else {
            return false; // Incorrect password
        }
    } else {
        return false; // User does not exist
    }
}

// Function to add a product to the database
function add_product($name, $description, $price) {
    global $conn;
    $query = "INSERT INTO products (name, description, price) VALUES ('$name', '$description', '$price')";
    return mysqli_query($conn, $query);
}

// Function to display all products in the database
function display_products() {
    global $conn;
    $query = "SELECT * FROM products";
    $result = mysqli_query($conn, $query);
    if (mysqli_num_rows($result) > 0) {
        return mysqli_fetch_all($result, MYSQLI_ASSOC);
    } else {
        return array(); // No products found
    }
}

// Function to process a purchase
function process_purchase($user_id, $product_id) {
    global $conn;
    // Check if user has sufficient balance
    $query = "SELECT * FROM orders WHERE user_id = '$user_id' AND product_id = '$product_id'";
    $result = mysqli_query($conn, $query);
    if (mysqli_num_rows($result) > 0) {
        return false; // User already purchased this product
    } else {
        // Calculate total cost of purchase
        $total = calculate_total();
        // Update balance in database
        update_balance($user_id, $total);
        // Insert order into database
        insert_order($user_id, $product_id, $total);
        return true; // Purchase successful
    }
}

// Function to calculate the total cost of a purchase
function calculate_total() {
    global $conn;
    // For simplicity, let's assume the total is just the product price
    $query = "SELECT price FROM products WHERE id = '1'";
    $result = mysqli_query($conn, $query);
    return mysqli_fetch_assoc($result)['price'];
}

// Function to update a user's balance in the database
function update_balance($user_id, $new_balance) {
    global $conn;
    $query = "UPDATE users SET balance = '$new_balance' WHERE id = '$user_id'";
    return mysqli_query($conn, $query);
}

// Function to insert an order into the database
function insert_order($user_id, $product_id, $total) {
    global $conn;
    $query = "INSERT INTO orders (user_id, product_id, total) VALUES ('$user_id', '$product_id', '$total')";
    return mysqli_query($conn, $query);
}


// Register user
$register_result = register_user('john_doe', 'password123');
echo "User registered successfully!" . PHP_EOL;

// Login user
$login_result = login_user('john_doe', 'password123');
if ($login_result) {
    echo "Login successful!" . PHP_EOL;
} else {
    echo "Incorrect username or password." . PHP_EOL;
}

// Add product
$product_id = add_product('Apple iPhone 14', 'The latest Apple iPhone model.', 999.99);
echo "Product added successfully! ID: $product_id" . PHP_EOL;

// Display all products
$products = display_products();
echo "Products:" . PHP_EOL;
foreach ($products as $product) {
    echo "- Name: {$product['name']}, Price: {$product['price']} euros" . PHP_EOL;
}

// Process purchase
$purchased = process_purchase(1, 1);
if ($purchased) {
    echo "Purchase successful!" . PHP_EOL;
} else {
    echo "Failed to process purchase." . PHP_EOL;
}


<?php

// Configuration
$host = 'localhost';
$username = 'your_username';
$password = 'your_password';
$dbname = 'your_database';

// Connect to database
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get product ID from URL parameter
$productId = $_GET['id'];

// Check if product exists
$result = $conn->query("SELECT * FROM products WHERE id = '$productId'");

if (!$result->num_rows > 0) {
    echo 'Product not found!';
    exit;
}

// Get user input (quantity)
$quantity = isset($_POST['quantity']) ? $_POST['quantity'] : '';

// Validate quantity
if (!ctype_digit($quantity)) {
    echo 'Invalid quantity!';
    exit;
}

// Calculate total price
$totalPrice = $result->fetch_assoc()['price'] * $quantity;

// Insert order into database
$sql = "INSERT INTO orders (user_id, product_id, quantity, total_price) VALUES (?, ?, ?, ?)";
$stmt = $conn->prepare($sql);
$stmt->bind_param('iiii', $_SESSION['user_id'], $productId, $quantity, $totalPrice);
$stmt->execute();

// Redirect to confirmation page
header('Location: confirmation.php');
exit;

?>


<?php

// Configuration file for database connection
require 'config.php';

// User Registration
if (isset($_POST['register'])) {
  $name = $_POST['name'];
  $email = $_POST['email'];
  $password = password_hash($_POST['password'], PASSWORD_DEFAULT);
  
  // Insert user data into users table
  $stmt = $pdo->prepare("INSERT INTO users (name, email, password) VALUES (:name, :email, :password)");
  $stmt->execute([
    ':name' => $name,
    ':email' => $email,
    ':password' => $password
  ]);
  
  // Redirect to login page
  header('Location: index.php');
}

// User Login
if (isset($_POST['login'])) {
  $email = $_POST['email'];
  $password = $_POST['password'];
  
  // Retrieve user data from users table
  $stmt = $pdo->prepare("SELECT * FROM users WHERE email = :email");
  $stmt->execute([
    ':email' => $email
  ]);
  
  $user = $stmt->fetch();
  
  if ($user && password_verify($password, $user['password'])) {
    // Log user in
    $_SESSION['user_id'] = $user['id'];
    
    // Redirect to cart page
    header('Location: cart.php');
  }
}

// Add Item to Cart
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];
  
  // Insert item into cart table
  $stmt = $pdo->prepare("INSERT INTO cart (user_id, product_id, quantity) VALUES (:user_id, :product_id, :quantity)");
  $stmt->execute([
    ':user_id' => $_SESSION['user_id'],
    ':product_id' => $product_id,
    ':quantity' => $quantity
  ]);
  
  // Redirect to cart page
  header('Location: cart.php');
}

// View Cart Contents
if (isset($_GET['cart'])) {
  $stmt = $pdo->prepare("SELECT * FROM cart WHERE user_id = :user_id");
  $stmt->execute([
    ':user_id' => $_SESSION['user_id']
  ]);
  
  $cart_contents = $stmt->fetchAll();
}

// Make Purchase
if (isset($_POST['make_purchase'])) {
  // Update stock quantities for each product in cart
  foreach ($cart_contents as $item) {
    $product_id = $item['product_id'];
    $quantity = $item['quantity'];
    
    $stmt = $pdo->prepare("UPDATE products SET quantity = quantity - :quantity WHERE id = :product_id");
    $stmt->execute([
      ':quantity' => $quantity,
      ':product_id' => $product_id
    ]);
  }
  
  // Remove items from cart table
  $stmt = $pdo->prepare("DELETE FROM cart WHERE user_id = :user_id");
  $stmt->execute([
    ':user_id' => $_SESSION['user_id']
  ]);
}

?>


<?php

// Configuration file for database connection
require_once 'config.php';

// Function to create a new customer
function createCustomer($name, $email) {
    global $conn;
    $query = "INSERT INTO customers (name, email) VALUES (:name, :email)";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':name', $name);
    $stmt->bindParam(':email', $email);
    return $stmt->execute();
}

// Function to get all products
function getAllProducts() {
    global $conn;
    $query = "SELECT * FROM products";
    $stmt = $conn->prepare($query);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Function to add a new order
function createOrder($customer_id, $product_id, $quantity) {
    global $conn;
    $query = "INSERT INTO orders (customer_id, product_id, quantity, total_price) VALUES (:customer_id, :product_id, :quantity, :total_price)";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':customer_id', $customer_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':quantity', $quantity);
    // Calculate total price
    $price = getProductPrice($product_id);
    $total_price = $price * $quantity;
    $stmt->bindParam(':total_price', $total_price);
    return $stmt->execute();
}

// Function to get product price
function getProductPrice($id) {
    global $conn;
    $query = "SELECT price FROM products WHERE id = :id";
    $stmt = $conn->prepare($query);
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetchColumn();
}

// Function to purchase a product
function purchaseProduct() {
    if (isset($_POST['customer_name']) && isset($_POST['customer_email'])) {
        createCustomer($_POST['customer_name'], $_POST['customer_email']);
        $customer_id = getLastInsertId('customers');
        
        if (isset($_POST['product_id'])) {
            foreach ($_POST['product_id'] as $id) {
                $quantity = $_POST['quantity'][$id];
                createOrder($customer_id, $id, $quantity);
            }
        }
    }
}

// Get products
$products = getAllProducts();

?>


// Product.php
class Product {
  private $id;
  private $name;
  private $price;

  public function __construct($id, $name, $price) {
    $this->id = $id;
    $this->name = $name;
    $this->price = $price;
  }

  public function getId() {
    return $this->id;
  }

  public function getName() {
    return $this->name;
  }

  public function getPrice() {
    return $this->price;
  }
}

// Order.php
class Order {
  private $id;
  private $userId;
  private $total;
  private $status;

  public function __construct($id, $userId, $total) {
    $this->id = $id;
    $this->userId = $userId;
    $this->total = $total;
    $this->status = 'pending';
  }

  public function getId() {
    return $this->id;
  }

  public function getUserId() {
    return $this->userId;
  }

  public function getTotal() {
    return $this->total;
  }

  public function getStatus() {
    return $this->status;
  }
}

// OrderItem.php
class OrderItem {
  private $id;
  private $orderId;
  private $productId;
  private $quantity;

  public function __construct($id, $orderId, $productId, $quantity) {
    $this->id = $id;
    $this->orderId = $orderId;
    $this->productId = $productId;
    $this->quantity = $quantity;
  }

  public function getId() {
    return $this->id;
  }

  public function getOrderId() {
    return $this->orderId;
  }

  public function getProductId() {
    return $this->productId;
  }

  public function getQuantity() {
    return $this->quantity;
  }
}

// PurchaseController.php
class PurchaseController {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function processOrder($userId, $products) {
    // Create a new order for the user
    $order = new Order(null, $userId, 0);
    $orderId = $this->db->insert('orders', array(
      'user_id' => $userId,
      'total' => 0
    ))['id'];

    foreach ($products as $product) {
      // Add each product to the order
      $orderItem = new OrderItem(null, $orderId, $product['id'], $product['quantity']);
      $this->db->insert('order_items', array(
        'order_id' => $orderId,
        'product_id' => $product['id'],
        'quantity' => $product['quantity']
      ));

      // Update the order total
      $orderTotal = $this->db->selectOne('orders', array(
        'id' => $orderId
      ))['total'] + ($product['price'] * $product['quantity']);
      $this->db->update('orders', array(
        'id' => $orderId,
        'total' => $orderTotal
      ));
    }

    // Commit the changes to the database
    $this->db->commit();

    return $orderId;
  }
}


$db = new PDO('mysql:host=localhost;dbname=mydatabase', 'username', 'password');

$controller = new PurchaseController($db);

// Simulate a user purchasing some products
$products = array(
  array('id' => 1, 'name' => 'Product A', 'price' => 10.99),
  array('id' => 2, 'name' => 'Product B', 'price' => 5.99)
);

$orderId = $controller->processOrder(12345, $products);
echo "Order ID: $orderId";


// Configuration
$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'store';

// Connect to database
$conn = mysqli_connect($dbHost, $dbUsername, $dbPassword, $dbName);

if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

function registerUser() {
  global $conn;
  
  if (isset($_POST['register'])) {
    $username = $_POST['username'];
    $password = password_hash($_POST['password'], PASSWORD_DEFAULT);
    
    // Validate user input
    if (empty($username) || empty($password)) {
      echo 'Please fill in all fields';
      return;
    }
    
    // Insert new user into database
    $query = "INSERT INTO users (username, password) VALUES ('$username', '$password')";
    mysqli_query($conn, $query);
  }
}

function loginUser() {
  global $conn;
  
  if (isset($_POST['login'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];
    
    // Validate user input
    if (empty($username) || empty($password)) {
      echo 'Please fill in all fields';
      return;
    }
    
    // Check existing username and password in database
    $query = "SELECT * FROM users WHERE username='$username' AND password='$password'";
    $result = mysqli_query($conn, $query);
    
    if (mysqli_num_rows($result) > 0) {
      $_SESSION['loggedIn'] = true;
    } else {
      echo 'Invalid username or password';
    }
  }
}

function purchaseProduct() {
  global $conn;
  
  if (isset($_POST['purchase'])) {
    $productId = $_POST['product'];
    $quantity = $_POST['quantity'];
    
    // Validate user input
    if (empty($productId) || empty($quantity)) {
      echo 'Please fill in all fields';
      return;
    }
    
    // Insert new order into database
    $query = "INSERT INTO orders (user_id, product_id, quantity) VALUES ('$_SESSION[user_id]', '$productId', '$quantity')";
    mysqli_query($conn, $query);
  }
}

// Check if user is logged in
if (!isset($_SESSION['loggedIn'])) {
  echo 'Please login or register to purchase a product';
} else {
  // Display products for sale
  $query = "SELECT * FROM products";
  $result = mysqli_query($conn, $query);
  
  while ($row = mysqli_fetch_assoc($result)) {
    echo '<h2>' . $row['name'] . '</h2>';
    echo 'Price: $' . $row['price'];
    
    // Display purchase form
    echo '<form action="" method="post">';
    echo '<input type="hidden" name="product" value="' . $row['id'] . '">';
    echo '<label>Quantity:</label>';
    echo '<input type="number" name="quantity"><br><br>';
    echo '<button type="submit" name="purchase">Purchase</button>';
    echo '</form>';
  }
}

// Check if user has clicked register button
if (isset($_POST['register'])) {
  registerUser();
}

// Check if user has clicked login button
if (isset($_POST['login'])) {
  loginUser();
}

// Check if user has clicked purchase button
if (isset($_POST['purchase'])) {
  purchaseProduct();
}


class PurchaseController {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=shop', 'username', 'password');
  }

  /**
   * Add product to cart
   *
   * @param int $product_id Product ID
   * @return void
   */
  public function addToCart($product_id) {
    $stmt = $this->db->prepare("SELECT * FROM products WHERE id = :id");
    $stmt->bindParam(':id', $product_id);
    $stmt->execute();
    $product = $stmt->fetch();

    if ($product) {
      // Check if product is already in cart
      $cart = $_SESSION['cart'] ?? [];
      if (isset($cart[$product_id])) {
        $cart[$product_id]['quantity']++;
      } else {
        $cart[$product_id] = [
          'id' => $product_id,
          'name' => $product['name'],
          'price' => $product['price'],
          'quantity' => 1
        ];
      }

      $_SESSION['cart'] = $cart;
    }
  }

  /**
   * Create order and process payment
   *
   * @return void
   */
  public function checkout() {
    if (!isset($_SESSION['cart'])) {
      echo "Cart is empty.";
      return;
    }

    // Get user data (assuming we have a logged-in user)
    $user_id = $_SESSION['user_id'];
    $total = array_sum(array_column($_SESSION['cart'], 'price') * array_column($_SESSION['cart'], 'quantity'));

    // Create order
    $stmt = $this->db->prepare("INSERT INTO orders (user_id, total) VALUES (:id, :total)");
    $stmt->bindParam(':id', $user_id);
    $stmt->bindParam(':total', $total);
    $stmt->execute();
    $order_id = $this->db->lastInsertId();

    // Process payment
    echo "Processing payment...";

    // Remove products from cart and save order items
    foreach ($_SESSION['cart'] as $product) {
      $stmt = $this->db->prepare("INSERT INTO order_items (order_id, product_id, quantity) VALUES (:id, :pid, :quantity)");
      $stmt->bindParam(':id', $order_id);
      $stmt->bindParam(':pid', $product['id']);
      $stmt->bindParam(':quantity', $product['quantity']);
      $stmt->execute();
    }

    // Clear cart
    unset($_SESSION['cart']);

    echo "Order created successfully!";
  }
}


require_once 'PurchaseController.php';

$controller = new PurchaseController();
$controller->addToCart(1); // Add product with ID 1 to cart
$controller->checkout(); // Create order and process payment


<?php

// Database connection settings
$host = 'localhost';
$username = 'root';
$password = '';
$dbname = 'shop';

// Establish database connection
$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Process login form submission
if (isset($_POST['submit'])) {
    $email = $_POST['email'];
    $password = $_POST['password'];

    // Query database for user credentials
    $query = "SELECT * FROM users WHERE email = '$email'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            if (password_verify($password, $row['password'])) {
                // Login successful
                session_start();
                $_SESSION['user_id'] = $row['id'];
                header('Location: products.php');
                exit;
            }
        }
    }

    echo "Invalid email or password";
}

// Close database connection
$conn->close();

?>


<?php

// Retrieve product data from database
$query = "SELECT * FROM products";
$result = $conn->query($query);

?>

<h1>Available Products</h1>

<ul>
    <?php while ($row = $result->fetch_assoc()) { ?>
        <li>
            <?php echo $row['name']; ?> (<?php echo $row['price']; ?>)
            <a href="cart.php?product_id=<?php echo $row['id']; ?>">Add to Cart</a>
        </li>
    <?php } ?>
</ul>

<?php
$conn->close();
?>


<?php

// Retrieve cart data from session
if (isset($_SESSION['user_id'])) {
    $user_id = $_SESSION['user_id'];

    // Query database for cart items
    $query = "SELECT * FROM cart WHERE user_id = '$user_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            echo "Product: " . $row['product_name'] . ", Quantity: " . $row['quantity'];
        }
    }
}

// Add product to cart
if (isset($_GET['product_id'])) {
    $product_id = $_GET['product_id'];

    // Update cart database with new item
    $query = "INSERT INTO cart (user_id, product_id) VALUES ('$user_id', '$product_id')";
    $conn->query($query);

    echo "Product added to cart!";
}

// Close database connection
$conn->close();

?>


<?php

// Retrieve user ID from session
$user_id = $_SESSION['user_id'];

// Query database for total cost
$query = "SELECT SUM(quantity * price) AS total FROM cart WHERE user_id = '$user_id'";
$result = $conn->query($query);

if ($result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
        $total = $row['total'];
    }
}

// Create order in database
$query = "INSERT INTO orders (user_id, total) VALUES ('$user_id', '$total')";
$conn->query($query);

echo "Order created!";

// Empty cart and close connection
$query = "DELETE FROM cart WHERE user_id = '$user_id'";
$conn->query($query);
$conn->close();

?>


<?php
// config.php

define('DB_HOST', 'your_host');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


<?php
require_once 'config.php';

if (isset($_POST['submit'])) {
    $username = $_POST['username'];
    $email = $_POST['email'];
    $password = $_POST['password'];

    $query = "INSERT INTO users (username, email, password) VALUES ('$username', '$email', '$password')";
    $result = mysqli_query($conn, $query);

    if ($result) {
        echo 'User registered successfully!';
    } else {
        echo 'Error registering user: ' . mysqli_error($conn);
    }
}

?>


<?php
require_once 'config.php';

if (isset($_POST['submit'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];

    $query = "SELECT * FROM users WHERE username = '$username' AND password = '$password'";
    $result = mysqli_query($conn, $query);

    if ($result) {
        echo 'User logged in successfully!';
    } else {
        echo 'Error logging in user: ' . mysqli_error($conn);
    }
}

?>


<?php
require_once 'config.php';

$query = "SELECT * FROM products";
$result = mysqli_query($conn, $query);

while ($row = mysqli_fetch_assoc($result)) {
    echo '<h2>' . $row['name'] . '</h2>';
    echo '<p>Price: ' . $row['price'] . '</p>';
    echo '<p>Description: ' . $row['description'] . '</p>';
}

?>


<?php
require_once 'config.php';

if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $user_id = $_SESSION['id']; // Assuming user is logged in

    $query = "INSERT INTO cart (user_id, product_id) VALUES ('$user_id', '$product_id')";
    $result = mysqli_query($conn, $query);

    if ($result) {
        echo 'Product added to cart successfully!';
    } else {
        echo 'Error adding product to cart: ' . mysqli_error($conn);
    }
}

?>


<?php
require_once 'config.php';

$query = "SELECT * FROM cart WHERE user_id = '$user_id'";
$result = mysqli_query($conn, $query);

while ($row = mysqli_fetch_assoc($result)) {
    echo '<h2>' . $row['product_name'] . '</h2>';
    echo '<p>Price: ' . $row['price'] . '</p>';
}

?>


<?php
require_once 'config.php';

if (isset($_POST['submit'])) {
    // Payment gateway integration (e.g. Stripe, PayPal)
    $payment_gateway = new PaymentGateway();
    if ($payment_gateway->process_payment()) {
        echo 'Payment successful!';
    } else {
        echo 'Error processing payment: ' . $payment_gateway->error;
    }
}

?>


class PaymentGateway {
    private $secret_key;

    public function __construct($secret_key) {
        $this->secret_key = $secret_key;
    }

    public function process_payment() {
        // Process payment with Stripe API
        // ...

        return true; // or false on error
    }
}


<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
if ($mysqli->connect_error) {
    die("Connection failed: " . $mysqli->connect_error);
}


<?php

function authenticateUser($username, $password) {
    global $mysqli;
    $query = "SELECT * FROM users WHERE username = '$username'";
    $result = $mysqli->query($query);
    if ($result->num_rows > 0) {
        $row = $result->fetch_assoc();
        if (password_verify($password, $row['password_hash'])) {
            return true;
        }
    }
    return false;
}

function purchaseProduct($user_id, $product_name, $product_price) {
    global $mysqli;
    $query = "INSERT INTO purchases (user_id, product_name, product_price) VALUES ('$user_id', '$product_name', '$product_price')";
    if ($mysqli->query($query)) {
        return true;
    } else {
        return false;
    }
}

?>


<?php

require_once 'config.php';
require_once 'functions.php';

if (!empty($_POST['username']) && !empty($_POST['password'])) {
    $username = $_POST['username'];
    $password = $_POST['password'];

    if (authenticateUser($username, $password)) {
        // User authenticated, proceed with purchase
        $product_name = $_POST['product_name'];
        $product_price = $_POST['product_price'];
        $user_id = get_user_id_by_username($username); // Assume this function exists

        if (purchaseProduct($user_id, $product_name, $product_price)) {
            echo "Purchase successful!";
        } else {
            echo "Error processing purchase.";
        }
    } else {
        echo "Invalid username or password.";
    }
}

?>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <label for="username">Username:</label>
    <input type="text" id="username" name="username"><br><br>
    <label for="password">Password:</label>
    <input type="password" id="password" name="password"><br><br>
    <label for="product_name">Product Name:</label>
    <input type="text" id="product_name" name="product_name"><br><br>
    <label for="product_price">Product Price:</label>
    <input type="number" id="product_price" name="product_price"><br><br>
    <input type="submit" value="Purchase">
</form>


<?php
// Initialize the cart array
$cart = [];

// Function to add item to cart
function add_item($item_id, $quantity) {
  global $cart;
  if (!isset($cart[$item_id])) {
    $cart[$item_id] = ['quantity' => $quantity];
  } else {
    $cart[$item_id]['quantity'] += $quantity;
  }
}

// Function to remove item from cart
function remove_item($item_id) {
  global $cart;
  unset($cart[$item_id]);
}

// Function to update quantity of item in cart
function update_quantity($item_id, $new_quantity) {
  global $cart;
  if (isset($cart[$item_id])) {
    $cart[$item_id]['quantity'] = $new_quantity;
  }
}

// Function to calculate total cost
function calculate_total() {
  global $cart;
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

// Display cart contents
function display_cart() {
  global $cart;
  echo '<h2>Cart Contents:</h2>';
  echo '<ul>';
  foreach ($cart as $item_id => $item) {
    echo '<li>' . $item_id . ' x' . $item['quantity'] . '</li>';
  }
  echo '</ul>';
}

// Display cart summary
function display_cart_summary() {
  global $cart;
  echo '<h2>Cart Summary:</h2>';
  echo 'Total Items: ' . count($cart) . '<br>';
  echo 'Subtotal: $' . calculate_total() . '<br>';
}
?>


<?php
// Example item data (replace with actual database or API call)
$item_data = [
  1 => ['price' => 9.99, 'name' => 'Example Item'],
  2 => ['price' => 19.99, 'name' => 'Another Example Item']
];

// Function to retrieve item price from cart ID
function get_item_price($item_id) {
  global $item_data;
  return isset($item_data[$item_id]) ? $item_data[$item_id]['price'] : 0;
}

// Function to calculate total cost with tax (example)
function calculate_total_with_tax() {
  global $cart;
  $total = calculate_total();
  return $total + ($total * 0.08); // Example: 8% sales tax
}
?>


// Connect to database
$conn = mysqli_connect("localhost", "username", "password", "database");

// Function to add product to cart
function add_to_cart($product_id, $quantity) {
  global $conn;
  $query = "INSERT INTO order_items (order_id, product_id, quantity)
            VALUES ('', '$product_id', '$quantity')";
  mysqli_query($conn, $query);
}

// Function to checkout and process payment
function checkout() {
  global $conn;
  // Get total cost of items in cart
  $total = 0;
  $query = "SELECT SUM(p.price * oi.quantity) as total
            FROM order_items oi
            JOIN products p ON oi.product_id = p.id";
  $result = mysqli_query($conn, $query);
  while ($row = mysqli_fetch_assoc($result)) {
    $total += $row['total'];
  }

  // Create new order and update order items with new order id
  $order_id = mysqli_insert_id($conn);
  $query = "UPDATE order_items SET order_id = '$order_id' WHERE product_id IN (SELECT id FROM products)";
  mysqli_query($conn, $query);

  // Process payment (for demonstration purposes, just saving to database)
  $payment_method = $_POST['payment_method'];
  $query = "INSERT INTO payments (order_id, method) VALUES ('$order_id', '$payment_method')";
  mysqli_query($conn, $query);
}

// Function to display products and cart
function display_products() {
  global $conn;
  // Get all products
  $query = "SELECT * FROM products";
  $result = mysqli_query($conn, $query);
  while ($row = mysqli_fetch_assoc($result)) {
    echo "<p>ID: $row[id], Name: $row[name], Price: $row[price]</p>";
  }

  // Get all items in cart
  $query = "SELECT * FROM order_items WHERE order_id = ''";
  $result = mysqli_query($conn, $query);
  while ($row = mysqli_fetch_assoc($result)) {
    echo "<p>ID: $row[id], Product ID: $row[product_id], Quantity: $row[quantity]</p>";
  }
}

// Function to display checkout page
function display_checkout() {
  global $conn;
  // Get total cost of items in cart
  $total = 0;
  $query = "SELECT SUM(p.price * oi.quantity) as total
            FROM order_items oi
            JOIN products p ON oi.product_id = p.id";
  $result = mysqli_query($conn, $query);
  while ($row = mysqli_fetch_assoc($result)) {
    $total += $row['total'];
  }
  echo "<p>Total: $total</p>";
}

// Display products and cart
display_products();

// Add product to cart
if (isset($_POST['add_to_cart'])) {
  add_to_cart($_POST['product_id'], $_POST['quantity']);
}

// Checkout and process payment
if (isset($_POST['checkout'])) {
  checkout();
}


// src/Controllers/PurchaseController.php

class PurchaseController
{
    private $db;

    public function __construct()
    {
        $this->db = new Database();
    }

    /**
     * Display the cart page
     */
    public function displayCart()
    {
        // Retrieve user ID from session or cookie
        $userId = $_SESSION['user_id'];

        // Get items in cart for current user
        $itemsInCart = $this->db->query("SELECT * FROM cart WHERE user_id = ?", [$userId]);

        require_once 'views/cart.php';
    }

    /**
     * Add item to cart
     */
    public function addItemToCart()
    {
        // Retrieve user ID from session or cookie
        $userId = $_SESSION['user_id'];

        // Get item ID and quantity from request
        $itemId = $_POST['item_id'];
        $quantity = $_POST['quantity'];

        // Check if item is available in stock
        $itemData = $this->db->query("SELECT * FROM items WHERE id = ?", [$itemId]);
        if ($itemData && $itemData[0]['stock'] >= $quantity) {
            // Add item to cart
            $this->db->query("INSERT INTO cart (user_id, item_id, quantity) VALUES (?, ?, ?)", [$userId, $itemId, $quantity]);

            header('Location: ' . $_SERVER['HTTP_REFERER']);
        } else {
            echo "Item not available in stock";
        }
    }

    /**
     * Make a purchase
     */
    public function makePurchase()
    {
        // Retrieve user ID from session or cookie
        $userId = $_SESSION['user_id'];

        // Get cart contents for current user
        $cartContents = $this->db->query("SELECT * FROM cart WHERE user_id = ?", [$userId]);

        // Calculate total cost and update item stock levels
        foreach ($cartContents as $item) {
            $itemId = $item['item_id'];
            $quantity = $item['quantity'];

            // Update item stock level
            $this->db->query("UPDATE items SET stock = stock - ? WHERE id = ?", [$quantity, $itemId]);

            // Calculate total cost
            $totalCost += $this->db->query("SELECT price FROM items WHERE id = ?", [$itemId])[0]['price'] * $quantity;
        }

        // Update user balance (if applicable)
        if (isset($_POST['pay_method'])) {
            // Process payment using chosen method (e.g. PayPal, Stripe)
            // ...
        } else {
            echo "Please select a payment method";
        }
    }
}


// Database connection settings
$host = "localhost";
$dbname = "store";
$username = "root";
$password = "";

// Connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

class Store {
    public function __construct() {
        // Initialize cart array
        if (!isset($_SESSION['cart'])) {
            $_SESSION['cart'] = array();
        }
    }

    // Add product to cart
    public function addToCart($product_id) {
        if (array_key_exists($product_id, $_SESSION['cart'])) {
            $_SESSION['cart'][$product_id] += 1;
        } else {
            $_SESSION['cart'][$product_id] = 1;
        }
    }

    // View cart
    public function viewCart() {
        foreach ($_SESSION['cart'] as $product_id => $quantity) {
            echo "Product ID: $product_id, Quantity: $quantity<br>";
        }
    }

    // Delete item from cart
    public function deleteFromCart($product_id) {
        unset($_SESSION['cart'][$product_id]);
    }

    // Place order
    public function placeOrder() {
        // Get products and quantities from session
        $products = array();
        foreach ($_SESSION['cart'] as $product_id => $quantity) {
            $products[] = array('id' => $product_id, 'quantity' => $quantity);
        }

        // Insert into database
        $stmt = $conn->prepare("INSERT INTO orders (user_id, product_id, quantity)
                                VALUES (:user_id, :product_id, :quantity)");
        foreach ($products as $product) {
            $stmt->execute(array(
                ':user_id' => $_SESSION['user_id'],
                ':product_id' => $product['id'],
                ':quantity' => $product['quantity']
            ));
        }

        // Clear cart
        unset($_SESSION['cart']);
    }
}


// Include the store class
include 'store.php';

// Create a new instance of the Store class
$store = new Store();

// Add product to cart
$store->addToCart(1);

// View cart
$store->viewCart();

// Delete item from cart
$store->deleteFromCart(1);

// Place order
$store->placeOrder();


<?php
// config.php
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database_name');

$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

function getProducts() {
    global $conn;
    $query = "SELECT * FROM products";
    return $conn->query($query)->fetch_all(MYSQLI_ASSOC);
}

function addProductToCart($product_id, $quantity) {
    // logic to update the cart table
}

function viewCart() {
    // logic to display the current cart contents
}

function checkout() {
    global $conn;
    // logic to create a new order and save it in the database
}
?>


<?php
// functions.php
function addProductToCart($product_id, $quantity) {
    global $conn;
    // assuming you have a cart table with columns id, user_id, product_id, quantity
    $query = "INSERT INTO cart (user_id, product_id, quantity)
              VALUES (?, ?, ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("iis", $_SESSION['user_id'], $product_id, $quantity);
    return $stmt->execute();
}

function viewCart() {
    global $conn;
    // assuming you have a cart table with columns id, user_id, product_id, quantity
    $query = "SELECT * FROM cart WHERE user_id = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $_SESSION['user_id']);
    return $stmt->execute()->get_result();
}

function checkout() {
    global $conn;
    // assuming you have an orders table with columns id, user_id, order_date, total
    $total = 0; // calculate the total cost of items in cart
    $query = "INSERT INTO orders (user_id, total)
              VALUES (?, ?)";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("di", $_SESSION['user_id'], $total);
    return $stmt->execute();
}
?>


<?php
// index.php
require 'config.php';
require 'functions.php';

// assuming user has logged in and is on the cart page

if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    addProductToCart($product_id, $quantity);
}

if (isset($_POST['checkout'])) {
    checkout();
}
?>


<?php

// Database connection settings
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "mydatabase";

// Create a database connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product to cart
function add_product_to_cart() {
    global $conn;
    
    if (isset($_POST['add_to_cart'])) {
        $product_id = $_POST['product_id'];
        $quantity = $_POST['quantity'];

        // Get the product details from database
        $query = "SELECT * FROM products WHERE id = '$product_id'";
        $result = $conn->query($query);

        if ($result->num_rows > 0) {
            $row = $result->fetch_assoc();
            $product_name = $row['name'];
            $price = $row['price'];

            // Update the cart with product details
            $_SESSION['cart'][$product_id]['quantity'] = $quantity;
            $_SESSION['cart'][$product_id]['price'] = $price;

            header("Location: view_cart.php");
            exit();
        } else {
            echo "Product not found.";
        }
    }
}

// Function to view cart
function view_cart() {
    global $conn;
    
    if (isset($_SESSION['cart'])) {
        // Get the cart details from session
        foreach ($_SESSION['cart'] as $product_id => $product) {
            $query = "SELECT * FROM products WHERE id = '$product_id'";
            $result = $conn->query($query);

            if ($result->num_rows > 0) {
                $row = $result->fetch_assoc();
                $product_name = $row['name'];
                $price = $row['price'];

                echo "Product Name: $product_name <br>";
                echo "Quantity: " . $_SESSION['cart'][$product_id]['quantity'] . "<br>";
                echo "Price: $" . $_SESSION['cart'][$product_id]['price'] . "<br><hr>";
            }
        }

        // Calculate the total cost
        $total_cost = 0;
        foreach ($_SESSION['cart'] as $product_id => $product) {
            $total_cost += $_SESSION['cart'][$product_id]['price'] * $_SESSION['cart'][$product_id]['quantity'];
        }

        echo "Total Cost: $" . $total_cost . "<br>";

        // Create an order
        if (isset($_POST['place_order'])) {
            $customer_name = $_POST['customer_name'];
            $order_status = 'pending';

            // Insert the order details into database
            $query = "INSERT INTO orders (customer_name, total_cost, date, status) VALUES ('$customer_name', '$total_cost', NOW(), '$order_status')";
            $conn->query($query);

            echo "Order placed successfully.";
        }
    } else {
        echo "Cart is empty.";
    }
}

// Function to remove product from cart
function remove_product_from_cart() {
    global $conn;
    
    if (isset($_POST['remove'])) {
        $product_id = $_POST['product_id'];

        // Remove the product from session and database
        unset($_SESSION['cart'][$product_id]);

        header("Location: view_cart.php");
        exit();
    }
}

// Add event listeners to buttons
if (isset($_POST['add_to_cart'])) {
    add_product_to_cart();
} elseif (isset($_POST['place_order'])) {
    view_cart();
} elseif (isset($_POST['remove'])) {
    remove_product_from_cart();
}


// config.php (database connection settings)
$host = 'localhost';
$dbname = 'mydb';
$username = 'root';
$password = '';

// connect to database
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

// purchase function
function purchase($conn, $customer_name, $product_id, $quantity) {
  // get product details
  $stmt = $conn->prepare("SELECT price FROM products WHERE id = :id");
  $stmt->bindParam(':id', $product_id);
  $stmt->execute();
  $price = $stmt->fetchColumn();

  // check if quantity is available
  $stmt = $conn->prepare("SELECT * FROM order_items WHERE product_id = :id AND quantity > :quantity");
  $stmt->bindParam(':id', $product_id);
  $stmt->bindParam(':quantity', $quantity);
  $stmt->execute();
  if ($stmt->fetchColumn() !== false) {
    echo "Sorry, we don't have enough stock for this product.";
    return;
  }

  // create new order
  $stmt = $conn->prepare("INSERT INTO orders (customer_name, total_price) VALUES (:name, :price)");
  $stmt->bindParam(':name', $customer_name);
  $stmt->bindParam(':price', $price * $quantity);
  $stmt->execute();
  $order_id = $conn->lastInsertId();

  // create new order item
  $stmt = $conn->prepare("INSERT INTO order_items (order_id, product_id, quantity) VALUES (:id, :pid, :quantity)");
  $stmt->bindParam(':id', $order_id);
  $stmt->bindParam(':pid', $product_id);
  $stmt->bindParam(':quantity', $quantity);
  $stmt->execute();

  echo "Order created successfully!";
}

// purchase page
if (isset($_POST['submit'])) {
  $customer_name = $_POST['customer_name'];
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  purchase($conn, $customer_name, $product_id, $quantity);
}


// config.php

$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}


// products.php

require_once 'config.php';

// Retrieve products from database
$query = "SELECT * FROM products";
$result = $conn->query($query);

if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
        echo "
            <div>
                <h2>" . $row["name"] . "</h2>
                <p>Price: $" . $row["price"] . "</p>
                <button id='add-to-cart' data-id='" . $row["id"] . "'>Add to Cart</button>
            </div>
        ";
    }
} else {
    echo "No products found.";
}

// Add event listener for add to cart button
$(document).ready(function() {
    $('#add-to-cart').on('click', function() {
        var productId = $(this).data('id');
        var quantity = 1;
        
        // Insert product into cart table
        $query = "INSERT INTO cart (user_id, product_id, quantity) VALUES (1, ?, ?)";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("ii", productId, quantity);
        $stmt->execute();
        
        echo "Product added to cart!";
    });
});


// cart.php

require_once 'config.php';

// Retrieve products from cart table
$query = "SELECT * FROM cart WHERE user_id = 1";
$result = $conn->query($query);

if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
        echo "
            <div>
                <h2>" . $row["product_name"] . "</h2>
                <p>Quantity: " . $row["quantity"] . "</p>
                <button id='remove-from-cart' data-id='" . $row["id"] . "'>Remove from Cart</button>
            </div>
        ";
    }
} else {
    echo "No products in cart.";
}

// Add event listener for remove from cart button
$(document).ready(function() {
    $('#remove-from-cart').on('click', function() {
        var cartId = $(this).data('id');
        
        // Delete product from cart table
        $query = "DELETE FROM cart WHERE id = ?";
        $stmt = $conn->prepare($query);
        $stmt->bind_param("i", cartId);
        $stmt->execute();
        
        echo "Product removed from cart!";
    });
});

// Checkout button
echo "
    <button id='checkout'>Checkout</button>
";

$(document).ready(function() {
    $('#checkout').on('click', function() {
        // Retrieve all products in cart and calculate total price
        $query = "SELECT product_id, quantity FROM cart WHERE user_id = 1";
        $result = $conn->query($query);
        
        $totalPrice = 0;
        while($row = $result->fetch_assoc()) {
            $priceQuery = "SELECT price FROM products WHERE id = ?";
            $priceResult = $conn->prepare($priceQuery);
            $priceResult->bind_param("i", $row["product_id"]);
            $priceResult->execute();
            $priceRow = $priceResult->get_result()->fetch_assoc();
            $totalPrice += ($priceRow["price"] * $row["quantity"]);
        }
        
        // Display total price and confirm checkout
        echo "
            <p>Total Price: $" . $totalPrice . "</p>
            <button id='confirm-checkout'>Confirm Checkout</button>
        ";
    });
});


<?php
require_once 'database.php';
require_once 'config.php';

// Display cart contents
function displayCart() {
  global $db;
  $query = "SELECT * FROM cart WHERE customer_id = ".$_SESSION['customer']['id']."";
  $result = mysqli_query($db, $query);
  while ($row = mysqli_fetch_assoc($result)) {
    echo $row['product_name'] . ' x ' . $row['quantity'];
  }
}

// Add item to cart
function addCartItem($product_id, $quantity) {
  global $db;
  $query = "INSERT INTO cart (customer_id, product_id, quantity) VALUES (".$_SESSION['customer']['id'].", $product_id, $quantity)";
  mysqli_query($db, $query);
}

// Remove item from cart
function removeCartItem($cart_item_id) {
  global $db;
  $query = "DELETE FROM cart WHERE id = $cart_item_id";
  mysqli_query($db, $query);
}
?>


<?php
require_once 'database.php';
require_once 'config.php';

// Process payment and update inventory
function processPurchase() {
  global $db;
  
  // Get customer ID from session
  $customer_id = $_SESSION['customer']['id'];
  
  // Calculate total cost of order
  $total_cost = 0;
  $query = "SELECT * FROM cart WHERE customer_id = $customer_id";
  $result = mysqli_query($db, $query);
  while ($row = mysqli_fetch_assoc($result)) {
    $total_cost += $row['product_price'] * $row['quantity'];
  }
  
  // Create new order
  $order_id = mysqli_insert_id($db);
  $query = "INSERT INTO orders (customer_id, total) VALUES ($customer_id, $total_cost)";
  mysqli_query($db, $query);
  
  // Add order items
  foreach ($result as $row) {
    $product_id = $row['product_id'];
    $quantity = $row['quantity'];
    
    $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ($order_id, $product_id, $quantity)";
    mysqli_query($db, $query);
    
    // Update inventory
    $inventory_query = "UPDATE products SET stock = stock - $quantity WHERE id = $product_id";
    mysqli_query($db, $inventory_query);
  }
  
  // Clear cart
  clearCart();
}

// Clear cart after purchase
function clearCart() {
  global $db;
  $query = "TRUNCATE TABLE cart";
  mysqli_query($db, $query);
}
?>


<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database_name');

$_SESSION['customer'] = array(
  'id' => $_POST['customer_id'],
  'name' => $_POST['customer_name'],
  'email' => $_POST['customer_email']
);
?>


// configuration.php
$dsn = 'mysql:host=localhost;dbname=shop';
$username = 'root';
$password = '';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// functions.php
function getCustomer($id) {
    global $pdo;
    $stmt = $pdo->prepare('SELECT * FROM customers WHERE id = :id');
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch();
}

function getProduct($id) {
    global $pdo;
    $stmt = $pdo->prepare('SELECT * FROM products WHERE id = :id');
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch();
}

function placeOrder() {
    global $pdo;
    $customerId = $_POST['customer_id'];
    $orderDate = date('Y-m-d');
    $total = 0;

    // get customer data
    $customer = getCustomer($customerId);
    if (!$customer) {
        throw new Exception('Invalid customer ID');
    }

    // create order
    $stmt = $pdo->prepare('INSERT INTO orders (customer_id, order_date, total) VALUES (:customer_id, :order_date, :total)');
    $stmt->bindParam(':customer_id', $customerId);
    $stmt->bindParam(':order_date', $orderDate);
    $stmt->bindParam(':total', $total);
    $stmt->execute();
    $orderId = $pdo->lastInsertId();

    // create order items
    foreach ($_POST['products'] as $productId => $quantity) {
        $product = getProduct($productId);
        if (!$product) {
            throw new Exception('Invalid product ID');
        }

        $itemTotal = $product['price'] * $quantity;
        $stmt = $pdo->prepare('INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (:order_id, :product_id, :quantity, :price)');
        $stmt->bindParam(':order_id', $orderId);
        $stmt->bindParam(':product_id', $productId);
        $stmt->bindParam(':quantity', $quantity);
        $stmt->bindParam(':price', $itemTotal);
        $stmt->execute();
    }

    return array('success' => true, 'message' => 'Order placed successfully');
}

// index.php
<?php
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    try {
        placeOrder();
        echo json_encode(array('success' => true));
    } catch (Exception $e) {
        echo json_encode(array('success' => false, 'message' => $e->getMessage()));
    }
} else {
?>
<html>
  <body>
    <h1>Place an Order</h1>
    <form action="" method="post">
      <label for="customer_id">Customer ID:</label>
      <input type="text" id="customer_id" name="customer_id"><br><br>

      <?php
        // display available products
        $stmt = $pdo->prepare('SELECT * FROM products');
        $stmt->execute();
        $products = $stmt->fetchAll();
        foreach ($products as $product) {
            echo '<input type="checkbox" id="product_'.$product['id'].'" name="products['.$product['id'].']">';
            echo '<label for="product_'.$product['id'].'">'.$product['name'].'</label><br>';
        }
      ?>

      <input type="submit" value="Place Order">
    </form>
  </body>
</html>
<?php
}
?>


<?php

// Config file for database connection and other settings
require_once 'config.php';

// Function to authenticate user
function authenticateUser($email, $password) {
  global $conn;
  $query = "SELECT * FROM users WHERE email = '$email' AND password = '$password'";
  $result = mysqli_query($conn, $query);
  if (mysqli_num_rows($result) > 0) {
    return true;
  } else {
    return false;
  }
}

// Function to add product to cart
function addProductToCart($userId, $productId) {
  global $conn;
  $query = "INSERT INTO orders (user_id, product_id) VALUES ('$userId', '$productId')";
  mysqli_query($conn, $query);
}

// Function to remove product from cart
function removeProductFromCart($orderId) {
  global $conn;
  $query = "DELETE FROM orders WHERE id = '$orderId'";
  mysqli_query($conn, $query);
}

// Function to update order total
function updateOrderTotal($orderId, $newTotal) {
  global $conn;
  $query = "UPDATE orders SET total = '$newTotal' WHERE id = '$orderId'";
  mysqli_query($conn, $query);
}

// Function to complete purchase
function completePurchase($userId) {
  global $conn;
  $query = "SELECT * FROM orders WHERE user_id = '$userId' AND status = 'pending'";
  $result = mysqli_query($conn, $query);
  if (mysqli_num_rows($result) > 0) {
    while ($row = mysqli_fetch_assoc($result)) {
      $productId = $row['product_id'];
      $total = $row['total'];
      // Update product stock
      $query = "UPDATE products SET stock = stock - 1 WHERE id = '$productId'";
      mysqli_query($conn, $query);
      // Update order status
      $query = "UPDATE orders SET status = 'completed' WHERE id = '$row[id]'";
      mysqli_query($conn, $query);
    }
  }
}

// Function to process payment
function processPayment($orderId) {
  global $conn;
  $query = "SELECT * FROM orders WHERE id = '$orderId'";
  $result = mysqli_query($conn, $query);
  if (mysqli_num_rows($result) > 0) {
    $row = mysqli_fetch_assoc($result);
    // Process payment using a payment gateway
    // For example, using Stripe API
    $amount = $row['total'];
    $currency = 'USD';
    $paymentMethod = 'card'; // Replace with actual payment method
    try {
      \Stripe\Stripe::setApiKey('YOUR_STRIPE_SECRET_KEY');
      $charge = \Stripe\Charge::create(array(
        'amount' => $amount,
        'currency' => $currency,
        'source' => $paymentMethod, // Replace with actual payment method
        'description' => 'Purchase'
      ));
      if ($charge['status'] == 'succeeded') {
        updateOrderTotal($orderId, $amount);
      } else {
        throw new Exception('Payment failed');
      }
    } catch (Exception $e) {
      echo "Error processing payment: " . $e->getMessage();
    }
  }
}

// Example usage
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  if (isset($_POST['login'])) {
    // Login user
    $email = $_POST['email'];
    $password = $_POST['password'];
    if (authenticateUser($email, $password)) {
      echo "Logged in successfully";
    } else {
      echo "Invalid email or password";
    }
  } elseif (isset($_POST['addToCart'])) {
    // Add product to cart
    $userId = $_SESSION['user_id']; // Replace with actual user ID
    $productId = $_POST['product_id'];
    addProductToCart($userId, $productId);
  } elseif (isset($_POST['removeFromCart'])) {
    // Remove product from cart
    $orderId = $_POST['order_id'];
    removeProductFromCart($orderId);
  } elseif (isset($_POST['completePurchase'])) {
    // Complete purchase
    $userId = $_SESSION['user_id']; // Replace with actual user ID
    completePurchase($userId);
  }
}

?>


<?php
// session_start() starts a new session or resumes an existing one
session_start();

// If there's no cart in the session, create a new one
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function addItemToCart($product_id) {
    global $wpdb;
    // Check if product is already in cart
    foreach ($_SESSION['cart'] as $key => $value) {
        if ($value['product_id'] == $product_id) {
            return; // Product is already in cart, so do nothing
        }
    }
    
    // Get product details from database
    $product = get_product($wpdb, $product_id);
    
    // Add item to cart array with quantity set to 1
    $_SESSION['cart'][] = array('product_id' => $product_id, 'quantity' => 1);
}

// Function to remove item from cart
function removeItemFromCart($product_id) {
    global $wpdb;
    // Check if product is in cart
    foreach ($_SESSION['cart'] as $key => $value) {
        if ($value['product_id'] == $product_id) {
            unset($_SESSION['cart'][$key]);
            return; // Product removed from cart, so do nothing
        }
    }
}

// Function to view cart contents
function viewCart() {
    global $wpdb;
    
    // Get product details for each item in cart
    foreach ($_SESSION['cart'] as &$value) {
        $product = get_product($wpdb, $value['product_id']);
        
        // Add price and quantity to item array
        $value['price'] = $product['price'];
        $value['quantity'] = $value['quantity'];
    }
}

// Function to calculate total cost of items in cart
function calculateTotalCost() {
    global $wpdb;
    
    // Initialize total cost to 0
    $total_cost = 0;
    
    // Loop through each item in cart and add price multiplied by quantity to total cost
    foreach ($_SESSION['cart'] as &$value) {
        $total_cost += $value['price'] * $value['quantity'];
    }
    
    return $total_cost;
}

// Function to display cart contents
function displayCart() {
    global $wpdb;
    
    // View cart contents
    viewCart();
    
    // Calculate total cost of items in cart
    $total_cost = calculateTotalCost();
    
    ?>
    <h1>Cart Contents</h1>
    <table border="1">
        <tr>
            <th>Product ID</th>
            <th>Quantity</th>
            <th>Price</th>
        </tr>
        <?php foreach ($_SESSION['cart'] as $value) { ?>
            <tr>
                <td><?php echo $value['product_id']; ?></td>
                <td><?php echo $value['quantity']; ?></td>
                <td><?php echo $value['price']; ?></td>
            </tr>
        <?php } ?>
    </table>
    
    <p>Total cost: <?php echo $total_cost; ?></p>
    <?php
}

// Function to display add item form
function displayAddItemForm() {
    global $wpdb;
    
    // Get products from database
    $products = get_products($wpdb);
    
    ?>
    <h1>Add Item</h1>
    <form action="" method="post">
        <select name="product_id">
            <?php foreach ($products as $product) { ?>
                <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?></option>
            <?php } ?>
        </select>
        
        <input type="submit" value="Add to Cart">
    </form>
    <?php
}

// Function to display remove item form
function displayRemoveItemForm() {
    global $wpdb;
    
    // Get products from database
    $products = get_products($wpdb);
    
    ?>
    <h1>Remove Item</h1>
    <form action="" method="post">
        <select name="product_id">
            <?php foreach ($products as $product) { ?>
                <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?></option>
            <?php } ?>
        </select>
        
        <input type="submit" value="Remove from Cart">
    </form>
    <?php
}

// Display cart contents and add item form
displayCart();
displayAddItemForm();

?>


<?php

// Function to get product details from database
function get_product($wpdb, $product_id) {
    global $wpdb;
    
    // Query database for product with given ID
    $result = $wpdb->get_row("SELECT * FROM products WHERE id = '$product_id'");
    
    return $result;
}

// Function to get all products from database
function get_products($wpdb) {
    global $wpdb;
    
    // Query database for all products
    $results = $wpdb->get_results("SELECT * FROM products");
    
    return $results;
}


<?php
// Configuration variables
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Function to insert order into database
function insertOrder() {
  global $conn;
  
  // Get product data from session or post request (not shown in this example)
  $customerName = $_POST['customer_name'];
  $email = $_POST['email'];
  $total = $_POST['total'];

  // Prepare and execute query
  $sql = "INSERT INTO orders (customer_name, email, total) VALUES (?, ?, ?)";
  $stmt = $conn->prepare($sql);
  $stmt->bind_param("sss", $customerName, $email, $total);
  if (!$stmt->execute()) {
    echo 'Error: ' . $stmt->error;
  } else {
    echo "Order placed successfully!";
  }
}

// Function to display order form
function showForm() {
  ?>
  <form action="" method="post">
    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name"><br><br>
    <label for="email">Email:</label>
    <input type of="email" id="email" name="email"><br><br>
    <label for="total">Total:</label>
    <input type="number" id="total" name="total"><br><br>
    <button type="submit" name="submit">Place Order</button>
  </form>
  <?php
}

// Process form submission or display order form
if (isset($_POST['submit'])) {
  insertOrder();
} else {
  showForm();
}
?>


<?php

// Connect to database
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "shop";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

?>


<?php

// Get products from database
$query = "SELECT * FROM products";
$result = mysqli_query($conn, $query);

while ($row = mysqli_fetch_assoc($result)) {
    echo "<div>";
    echo "<h2>" . $row['name'] . "</h2>";
    echo "<p>Price: $" . $row['price'] . "</p>";
    echo "<button>Add to Cart</button>";
    echo "</div>";
}

?>


<?php

// Get products in cart from session
if (isset($_SESSION['cart'])) {
    echo "<h2>Cart:</h2>";
    foreach ($_SESSION['cart'] as $product) {
        echo "<p>" . $product['name'] . " x " . $product['quantity'] . "</p>";
    }
}

?>


<?php

// Process purchase form data
if (isset($_POST['purchase'])) {
    // Get product ID from session
    $product_id = $_SESSION['cart']['product_id'];

    // Get user details from database
    $query = "SELECT * FROM users WHERE id = '" . $_SESSION['user_id'] . "'";
    $result = mysqli_query($conn, $query);
    $row = mysqli_fetch_assoc($result);

    // Calculate total cost
    $total_cost = $_SESSION['cart']['quantity'] * $_SESSION['cart']['price'];

    // Update user balance
    $query = "UPDATE users SET balance = balance - '$total_cost' WHERE id = '" . $_SESSION['user_id'] . "'";
    mysqli_query($conn, $query);

    // Insert purchase into database
    $query = "INSERT INTO purchases (product_id, user_id, date) VALUES ('" . $product_id . "', '" . $_SESSION['user_id'] . "', NOW())";
    mysqli_query($conn, $query);

    // Clear cart session variable
    unset($_SESSION['cart']);

    echo "<p>Purchase successful!</p>";
}

?>


<?php

// Initialize session variables
session_start();

// Check if user is logged in
if (!isset($_SESSION['user_id'])) {
    header("Location: login.php");
    exit;
}

// Get products from database
$query = "SELECT * FROM products";
$result = mysqli_query($conn, $query);

while ($row = mysqli_fetch_assoc($result)) {
    echo "<div>";
    echo "<h2>" . $row['name'] . "</h2>";
    echo "<p>Price: $" . $row['price'] . "</p>";
    echo "<button>Add to Cart</button>";
    echo "</div>";
}

?>

<form action="process_purchase.php" method="post">
    <input type="submit" name="purchase" value="Purchase">
</form>


<?php

// Your database connection settings
define('DB_HOST', 'your_host');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Create a PDO instance for the database connection
function getPDO() {
    try {
        return new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USERNAME, DB_PASSWORD);
    } catch (PDOException $e) {
        echo "Database Connection Error: " . $e->getMessage();
    }
}

?>


<?php

// Include the database connection settings
require_once 'database.php';

// Create a PDO instance for the database connection
$pdo = getPDO();

if (isset($_POST['purchase'])) {
    // Process the form data and save to the database
    $stmt = $pdo->prepare("INSERT INTO purchases (name, email, address, items) VALUES (:name, :email, :address, :items)");
    $stmt->execute([
        ':name' => $_POST['name'],
        ':email' => $_POST['email'],
        ':address' => $_POST['address'],
        ':items' => $_POST['items']
    ]);

    // Store purchase details in session
    $_SESSION['purchase_success'] = true;
}

?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Purchase</title>
</head>
<body>

<form action="" method="post">
    <input type="text" name="name" placeholder="Name"><br><br>
    <input type="email" name="email" placeholder="Email"><br><br>
    <input type="text" name="address" placeholder="Address"><br><br>
    <select name="items[]" multiple>
        <?php
        // Example items list, replace with your logic to retrieve from database or other source.
        $items = array('Item 1', 'Item 2', 'Item 3');
        foreach ($items as $item) {
            echo '<option value="' . $item . '">' . $item . '</option>';
        }
        ?>
    </select><br><br>
    <input type="submit" name="purchase" value="Purchase">
</form>

<?php
if (isset($_SESSION['purchase_success'])) {
    echo 'Purchase successful!';
    unset($_SESSION['purchase_success']);
}
?>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
// Example JavaScript code to populate the items list based on the database query.
$.get('items.php', function(data) {
    data.forEach(item => {
        $('select[name="items[]"]').append('<option value="' + item + '">' + item + '</option>');
    });
});
</script>

</body>
</html>


<?php

// Include the database connection settings
require_once 'database.php';

// Create a PDO instance for the database connection
$pdo = getPDO();

// Example query to retrieve list of items from the database.
$stmt = $pdo->prepare("SELECT * FROM items");
$stmt->execute();
$data = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Output JSON data for the JavaScript code to populate the items select list.
header('Content-Type: application/json');
echo json_encode($data);
?>


<?php

// Configuration file for database connection details
require_once 'config.php';

class Purchase {
    private $conn;

    function __construct() {
        $this->conn = new mysqli(HOST, USERNAME, PASSWORD, DATABASE);
    }

    // User registration
    function registerUser($username, $password) {
        if ($this->conn->query("INSERT INTO users (username, password) VALUES ('$username', '$password')")) {
            return true;
        } else {
            return false;
        }
    }

    // User login
    function loginUser($username, $password) {
        $result = $this->conn->query("SELECT * FROM users WHERE username = '$username' AND password = '$password'");
        if ($result->num_rows > 0) {
            return true;
        } else {
            return false;
        }
    }

    // Add product to cart
    function addProductToCart($user_id, $product_id, $quantity) {
        $this->conn->query("INSERT INTO orders (user_id, product_id, quantity) VALUES ($user_id, $product_id, $quantity)");
    }

    // Get user's cart contents
    function getCartContents($user_id) {
        $result = $this->conn->query("SELECT * FROM orders WHERE user_id = $user_id");
        return $result;
    }

    // Calculate total cost of products in cart
    function calculateTotalCost($cart_contents) {
        $total_cost = 0;
        foreach ($cart_contents as $product) {
            $total_cost += $product['price'] * $product['quantity'];
        }
        return $total_cost;
    }

    // Process payment and update order status
    function processPayment($user_id, $payment_method, $payment_details) {
        if ($this->conn->query("UPDATE orders SET status = 'paid' WHERE user_id = $user_id")) {
            return true;
        } else {
            return false;
        }
    }

    // Remove product from cart
    function removeProductFromCart($user_id, $product_id) {
        $this->conn->query("DELETE FROM orders WHERE user_id = $user_id AND product_id = $product_id");
    }

}

// Example usage:
$purchase = new Purchase();

// Register a user
$username = 'john';
$password = 'password123';
echo $purchase->registerUser($username, $password) ? "User registered successfully" : "Failed to register user";

// Login as the newly created user
echo $purchase->loginUser($username, $password) ? "Login successful" : "Login failed";

// Add a product to cart
$product_id = 1;
$quantity = 2;
echo $purchase->addProductToCart(1, $product_id, $quantity) ? "Product added to cart successfully" : "Failed to add product to cart";

// Get cart contents
$cart_contents = $purchase->getCartContents(1);
echo var_dump($cart_contents);

// Calculate total cost of products in cart
$total_cost = $purchase->calculateTotalCost($cart_contents);
echo "Total cost: $" . number_format($total_cost, 2) . "
";

// Process payment and update order status
$payment_method = 'credit_card';
$payment_details = array('card_number' => '1234-5678-9012-3456', 'expiration_date' => '2025-01');
echo $purchase->processPayment(1, $payment_method, $payment_details) ? "Payment processed successfully" : "Failed to process payment";

// Remove product from cart
echo $purchase->removeProductFromCart(1, 1) ? "Product removed from cart successfully" : "Failed to remove product from cart";


<?php

// Configuration file for database connection details
define('HOST', 'localhost');
define('USERNAME', 'root');
define('PASSWORD', '');
define('DATABASE', 'purchase');

?>


<?php
require_once 'functions.php';

// Get products from database
$products = getProducts();

?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <link rel="stylesheet" href="style.css">
</head>

<body>
    <h1>Shopping Cart</h1>

    <!-- Display products -->
    <?php foreach ($products as $product) { ?>
        <div class="product">
            <h2><?= $product['name'] ?></h2>
            <p>$<?= $product['price'] ?></p>
            <button onclick="addToCart(<?= $product['id'] ?>)">Add to Cart</button>
        </div>
    <?php } ?>

    <!-- Display cart contents -->
    <div id="cart">
        <h2>Cart Contents:</h2>

        <?php
        // Check if cart is not empty
        if (!empty($_SESSION['cart'])) {
            foreach ($_SESSION['cart'] as $product_id => $quantity) {
                $product = getProduct($product_id);
                ?>
                <div class="cart-item">
                    <p><?= $product['name'] ?></p>
                    <p>x<?= $quantity ?></p>
                    <p>$<?= getPrice($product_id, $quantity) ?></p>
                </div>
            <?php
            }
        } else {
            echo "<p>Cart is empty.</p>";
        }
        ?>

        <!-- Apply discount -->
        <label for="discount">Discount (%):</label>
        <input type="number" id="discount" value="10">
        <button onclick="applyDiscount()">Apply Discount</button>

        <!-- Checkout button -->
        <button onclick="checkout()">Checkout</button>
    </div>

    <script src="script.js"></script>
</body>
</html>


<?php

// Database connection (replace with your own database)
$db = new PDO('mysql:host=localhost;dbname=shopping_cart', 'username', 'password');

function getProducts() {
    global $db;
    $stmt = $db->prepare("SELECT * FROM products");
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function getProduct($id) {
    global $db;
    $stmt = $db->prepare("SELECT * FROM products WHERE id = ?");
    $stmt->execute([$id]);
    return $stmt->fetch(PDO::FETCH_ASSOC);
}

function getPrice($product_id, $quantity) {
    // Retrieve product price and multiply by quantity
    $price = getProduct($product_id)['price'];
    return number_format($price * $quantity, 2);
}
?>


<?php
// Database connection settings
$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'online_store';

// Connect to the database
$conn = mysqli_connect($dbHost, $dbUsername, $dbPassword, $dbName);

if (!$conn) {
    die('Could not connect: ' . mysqli_error());
}

// Get the product ID from the URL
$productID = $_GET['product_id'];

// Query the products table for the selected product
$query = "SELECT * FROM products WHERE id = '$productID'";
$result = mysqli_query($conn, $query);

if (mysqli_num_rows($result) > 0) {
    // Get the product details
    $product = mysqli_fetch_assoc($result);
?>

<!-- Display the product details -->
<h1><?php echo $product['name']; ?></h1>
<p>Price: <?php echo $product['price']; ?></p>
<form action="process_purchase.php" method="post">
    <input type="hidden" name="product_id" value="<?php echo $productID; ?>">
    <input type="submit" value="Purchase">
</form>

<?php
} else {
    echo "Product not found.";
}
?>

<!-- Close the database connection -->
mysqli_close($conn);
?>


<?php
// Get the product ID from the form submission
$productID = $_POST['product_id'];

// Update the products table to mark the product as sold
$query = "UPDATE products SET quantity = quantity - 1 WHERE id = '$productID'";
mysqli_query($conn, $query);

// Insert a new order into the orders table
$query = "INSERT INTO orders (product_id, user_id) VALUES ('$productID', 'NULL')";
mysqli_query($conn, $query);

// Send an email to the user confirming their purchase
// ...

// Redirect the user back to the products page
header('Location: index.php');
exit;
?>


<?php

// Configuration settings
$databaseHost = 'localhost';
$databaseName = 'e-commerce';
$databaseUsername = 'root';
$databasePassword = '';

// Connect to database
$conn = new mysqli($databaseHost, $databaseUsername, $databasePassword, $databaseName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product to cart
function addToCart($productId, $quantity) {
    global $conn;
    
    // Check if product exists in database
    $query = "SELECT * FROM products WHERE id = '$productId'";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        // Get product details
        $productDetails = $result->fetch_assoc();
        
        // Check if product is already in cart
        $cartQuery = "SELECT * FROM cart WHERE productId = '$productId' AND userId = '".$_SESSION['userId']."'";
        $cartResult = $conn->query($cartQuery);
        
        if ($cartResult->num_rows > 0) {
            // Update quantity in cart
            $updateQuantity = "UPDATE cart SET quantity = quantity + '$quantity' WHERE productId = '$productId' AND userId = '".$_SESSION['userId']."'";
            $conn->query($updateQuantity);
        } else {
            // Add product to cart
            $addProductToCart = "INSERT INTO cart (productId, userId, quantity) VALUES ('$productId', '".$_SESSION['userId']."', '$quantity')";
            $conn->query($addProductToCart);
        }
    }
}

// Function to remove product from cart
function removeFromCart($productId) {
    global $conn;
    
    // Check if product exists in database
    $query = "SELECT * FROM products WHERE id = '$productId'";
    $result = $conn->query($query);
    
    if ($result->num_rows > 0) {
        // Get product details
        $productDetails = $result->fetch_assoc();
        
        // Check if product is in cart
        $cartQuery = "SELECT * FROM cart WHERE productId = '$productId' AND userId = '".$_SESSION['userId']."'";
        $cartResult = $conn->query($cartQuery);
        
        if ($cartResult->num_rows > 0) {
            // Remove product from cart
            $removeProductFromCart = "DELETE FROM cart WHERE productId = '$productId' AND userId = '".$_SESSION['userId']."'";
            $conn->query($removeProductFromCart);
        }
    }
}

// Function to checkout
function checkout() {
    global $conn;
    
    // Get user ID from session
    $userId = $_SESSION['userId'];
    
    // Check if cart is not empty
    $cartQuery = "SELECT * FROM cart WHERE userId = '$userId'";
    $cartResult = $conn->query($cartQuery);
    
    if ($cartResult->num_rows > 0) {
        // Get product details from database
        while ($row = $cartResult->fetch_assoc()) {
            $productId = $row['productId'];
            $quantity = $row['quantity'];
            
            // Update stock in products table
            $updateStockQuery = "UPDATE products SET quantity = quantity - '$quantity' WHERE id = '$productId'";
            $conn->query($updateStockQuery);
        }
        
        // Insert order into database
        $insertOrderQuery = "INSERT INTO orders (userId, totalPrice) VALUES ('$userId', '0')";
        $conn->query($insertOrderQuery);
        
        // Get order ID from database
        $orderIDQuery = "SELECT id FROM orders WHERE userId = '$userId' ORDER BY id DESC LIMIT 1";
        $orderResult = $conn->query($orderIDQuery);
        $orderID = $orderResult->fetch_assoc()['id'];
        
        // Insert order items into database
        while ($row = $cartResult->fetch_assoc()) {
            $productId = $row['productId'];
            $quantity = $row['quantity'];
            
            $insertOrderItemQuery = "INSERT INTO order_items (orderId, productId, quantity) VALUES ('$orderID', '$productId', '$quantity')";
            $conn->query($insertOrderItemQuery);
        }
        
        // Update cart to reflect new status
        $updateCartStatusQuery = "UPDATE cart SET status = 'paid' WHERE userId = '$userId'";
        $conn->query($updateCartStatusQuery);
    }
}

// Example usage
if (isset($_POST['add_to_cart'])) {
    $productId = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    
    addToCart($productId, $quantity);
} elseif (isset($_POST['remove_from_cart'])) {
    $productId = $_POST['product_id'];
    
    removeFromCart($productId);
} elseif (isset($_POST['checkout'])) {
    checkout();
}

?>


<form action="purchase.php" method="post">
    <input type="hidden" name="add_to_cart" value="true">
    <input type="hidden" name="product_id" value="<?php echo $productId; ?>">
    <input type="hidden" name="quantity" value="<?php echo $quantity; ?>">
</form>


<form action="purchase.php" method="post">
    <input type="hidden" name="remove_from_cart" value="true">
    <input type="hidden" name="product_id" value="<?php echo $productId; ?>">
</form>


<form action="purchase.php" method="post">
    <input type="hidden" name="checkout" value="true">
</form>


// Configuration
$dbHost = 'localhost';
$dbUsername = 'username';
$dbPassword = 'password';
$dbName = 'database';

// Connect to database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add product to cart
function add_product_to_cart() {
    global $conn;
    
    if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
        $product_id = $_POST['product_id'];
        $quantity = $_POST['quantity'];
        
        // Check if product exists in cart
        $cart = get_cart();
        if (array_key_exists($product_id, $cart)) {
            $cart[$product_id] += $quantity;
        } else {
            $cart[$product_id] = $quantity;
        }
        
        // Update total in session
        $total = 0;
        foreach ($cart as $pid => $qty) {
            $product = get_product($pid);
            $total += $product['price'] * $qty;
        }
        $_SESSION['total'] = $total;
    }
}

// Function to view cart
function view_cart() {
    global $conn;
    
    if (isset($_SESSION['cart'])) {
        echo "<h2>Cart:</h2>";
        echo "<ul>";
        foreach ($_SESSION['cart'] as $product_id => $quantity) {
            $product = get_product($product_id);
            echo "<li>$quantity x $product[name] - \$${product['price']} each</li>";
        }
        echo "</ul>";
    } else {
        echo "<p>Cart is empty.</p>";
    }
}

// Function to checkout
function checkout() {
    global $conn;
    
    if (isset($_POST['payment_method'])) {
        // Get user ID and order total
        $user_id = $_SESSION['user_id'];
        $total = $_SESSION['total'];
        
        // Create new order
        $order = array();
        $order['user_id'] = $user_id;
        $order['total'] = $total;
        insert_order($order);
        
        // Get order ID and update total in session
        $last_insert_id = $conn->insert_id;
        $_SESSION['order_id'] = $last_insert_id;
        
        // Update product quantities
        $cart = get_cart();
        foreach ($cart as $product_id => $quantity) {
            update_product_quantity($product_id, -$quantity);
        }
    }
}

// Function to display products
function display_products() {
    global $conn;
    
    $query = "SELECT * FROM products";
    $result = $conn->query($query);
    while ($row = $result->fetch_assoc()) {
        echo "<div class='product'>";
        echo "<h2>$row[name]</h2>";
        echo "<p>\$${row['price']}</p>";
        echo "<form action='' method='post'>";
        echo "<input type='hidden' name='product_id' value='$row[id]'>";
        echo "<button type='submit'>Add to Cart</button>";
        echo "</form>";
        echo "</div>";
    }
}

// Function to get product
function get_product($id) {
    global $conn;
    
    $query = "SELECT * FROM products WHERE id = '$id'";
    $result = $conn->query($query);
    return $result->fetch_assoc();
}

// Function to add order
function insert_order($order) {
    global $conn;
    
    $query = "INSERT INTO orders (user_id, total, status) VALUES ('$order[user_id]', '$order[total]', 'pending')";
    $conn->query($query);
}

// Function to get cart
function get_cart() {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = array();
    }
    return $_SESSION['cart'];
}

// Function to update product quantity
function update_product_quantity($id, $quantity) {
    global $conn;
    
    $query = "UPDATE products SET quantity = quantity - '$quantity' WHERE id = '$id'";
    $conn->query($query);
}


<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'ecommerce');

$connection = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}
?>


<?php
function addProductToCart($product_id, $quantity) {
    global $connection;
    
    // Check if product exists in cart already
    $query = "SELECT * FROM cart WHERE user_id = $_SESSION['user_id'] AND product_id = '$product_id'";
    $result = $connection->query($query);
    
    if ($result->num_rows > 0) {
        // Update quantity if item is already in cart
        $row = $result->fetch_assoc();
        $newQuantity = $row['quantity'] + $quantity;
        
        $updateQuery = "UPDATE cart SET quantity = '$newQuantity' WHERE id = '$row[id]'";
        $connection->query($updateQuery);
    } else {
        // Insert new product into cart
        $insertQuery = "INSERT INTO cart (user_id, product_id, quantity) VALUES ('$_SESSION[user_id]', '$product_id', '$quantity')";
        $connection->query($insertQuery);
    }
}

function viewCart() {
    global $connection;
    
    // Retrieve all products in user's cart
    $query = "SELECT p.name, c.quantity FROM cart c JOIN products p ON c.product_id = p.id WHERE c.user_id = $_SESSION['user_id'] GROUP BY c.product_id";
    $result = $connection->query($query);
    
    if ($result->num_rows > 0) {
        return $result;
    } else {
        return null;
    }
}

function checkout() {
    global $connection;
    
    // Clear cart after successful checkout
    $clearQuery = "DELETE FROM cart WHERE user_id = $_SESSION['user_id']";
    $connection->query($clearQuery);
}
?>


<?php
require_once 'config.php';
require_once 'functions.php';

// Session management for logged-in users
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

// Display cart contents
$cartContents = viewCart();
?>

<h1>Shopping Cart</h1>

<table>
    <tr>
        <th>Product Name</th>
        <th>Quantity</th>
        <th>Total Price</th>
    </tr>
    
    <?php foreach ($cartContents as $row) : ?>
    <tr>
        <td><?php echo $row['name']; ?></td>
        <td><?php echo $row['quantity']; ?></td>
        <td><?php echo $row['quantity'] * 10.99; ?></td> <!-- Assuming price is $10.99 -->
    </tr>
    <?php endforeach; ?>
</table>

<form action="checkout.php" method="post">
    <input type="submit" value="Checkout" />
</form>


<?php
require_once 'config.php';
require_once 'functions.php';

// Clear cart after successful checkout
checkout();

header('Location: success.php');
exit;
?>


class Purchase {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
  }

  public function getAllPurchases() {
    $stmt = $this->db->prepare('SELECT * FROM purchases');
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getPurchase($id) {
    $stmt = $this->db->prepare('SELECT * FROM purchases WHERE id = :id');
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
  }

  public function addPurchase($customer_id, $product_id, $quantity) {
    $total = $quantity * (getProductPrice($product_id));
    $stmt = $this->db->prepare('INSERT INTO purchases (customer_id, product_id, quantity, total) VALUES (:customer_id, :product_id, :quantity, :total)');
    $stmt->bindParam(':customer_id', $customer_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':quantity', $quantity);
    $stmt->bindParam(':total', $total);
    return $stmt->execute();
  }

  public function deletePurchase($id) {
    $stmt = $this->db->prepare('DELETE FROM purchases WHERE id = :id');
    $stmt->bindParam(':id', $id);
    return $stmt->execute();
  }
}


function getProductPrice($product_id) {
  // Retrieve price from database or external API
  $price = 19.99; // Replace with actual price retrieval code
  return $price;
}


class PurchaseController {
  public function __construct() {
    $this->purchaseModel = new Purchase();
  }

  public function getAllPurchases() {
    $purchases = $this->purchaseModel->getAllPurchases();
    return json_encode($purchases);
  }

  public function getPurchase($id) {
    $purchase = $this->purchaseModel->getPurchase($id);
    return json_encode($purchase);
  }

  public function addPurchase() {
    $data = $_POST;
    $customer_id = isset($data['customer_id']) ? $data['customer_id'] : '';
    $product_id = isset($data['product_id']) ? $data['product_id'] : '';
    $quantity = isset($data['quantity']) ? $data['quantity'] : '';

    if ($customer_id && $product_id && $quantity) {
      $result = $this->purchaseModel->addPurchase($customer_id, $product_id, $quantity);
      return json_encode(['success' => $result]);
    } else {
      return json_encode(['error' => 'Invalid data']);
    }
  }

  public function deletePurchase() {
    $id = isset($_GET['id']) ? $_GET['id'] : '';
    if ($id) {
      $result = $this->purchaseModel->deletePurchase($id);
      return json_encode(['success' => $result]);
    } else {
      return json_encode(['error' => 'Invalid ID']);
    }
  }
}


class Cart {
  private $cartId;
  private $items;

  public function __construct($cartId = null) {
    if ($cartId) {
      $this->cartId = $cartId;
    } else {
      // Generate a new cart ID if none is provided
      $this->cartId = uniqid();
    }
    $this->items = array();
  }

  public function addItem($productId, $quantity) {
    if (!isset($this->items[$productId])) {
      $this->items[$productId] = array('quantity' => 0);
    }
    $this->items[$productId]['quantity'] += $quantity;
    // Insert the item into the cart_items table
    db::insert('cart_items', array(
      'product_id' => $productId,
      'quantity' => $quantity,
      'cart_id' => $this->cartId
    ));
  }

  public function removeItem($productId) {
    if (isset($this->items[$productId])) {
      unset($this->items[$productId]);
      // Delete the item from the cart_items table
      db::delete('cart_items', array(
        'product_id' => $productId,
        'cart_id' => $this->cartId
      ));
    }
  }

  public function getItems() {
    return $this->items;
  }

  public function getCartTotal() {
    $total = 0;
    foreach ($this->items as $item) {
      $total += $item['quantity'] * db::select('products', array(
        'id' => $item['product_id']
      ))[0]['price'];
    }
    return $total;
  }

  public function isEmpty() {
    return empty($this->items);
  }
}


class db {
  private static $connection;

  public static function connect() {
    self::$connection = new mysqli('localhost', 'username', 'password', 'database');
    if (self::$connection->connect_error) {
      die('Connection failed: ' . self::$connection->connect_error);
    }
  }

  public static function select($table, $conditions) {
    $query = "SELECT * FROM $table WHERE ";
    foreach ($conditions as $key => $value) {
      $query .= "$key = '$value' AND ";
    }
    $query = rtrim($query, ' AND ');
    return self::$connection->query($query)->fetch_assoc();
  }

  public static function insert($table, $data) {
    $fields = implode(', ', array_keys($data));
    $values = implode(', ', array_map(function($v){ return "'$v'"; }, array_values($data)));
    return self::$connection->query("INSERT INTO $table ($fields) VALUES ($values)");
  }

  public static function delete($table, $conditions) {
    $query = "DELETE FROM $table WHERE ";
    foreach ($conditions as $key => $value) {
      $query .= "$key = '$value' AND ";
    }
    $query = rtrim($query, ' AND ');
    return self::$connection->query($query);
  }
}


$cart = new Cart();
$cart->addItem(1, 2); // Add product with ID 1 and quantity 2 to the cart
$cart->addItem(3, 1); // Add product with ID 3 and quantity 1 to the cart

print_r($cart->getItems()); // Output: Array ( [1] => Array ( [product_id] => 1 [quantity] => 2 ) [3] => Array ( [product_id] => 3 [quantity] => 1 ) )

echo $cart->getCartTotal(); // Output: Total price of the cart

$cart->removeItem(1); // Remove product with ID 1 from the cart

print_r($cart->getItems()); // Output: Array ( [3] => Array ( [product_id] => 3 [quantity] => 1 ) )

echo $cart->isEmpty(); // Output: boolean true


<?php

// Configuration
$db = mysqli_connect('localhost', 'username', 'password', 'database');

// Function to get products from database
function getProducts() {
  global $db;
  $query = "SELECT * FROM products";
  $result = mysqli_query($db, $query);
  return $result;
}

// Function to add order and order items to database
function placeOrder($user_id, $products) {
  global $db;
  // Get total price of order
  $total = 0;
  foreach ($products as $product) {
    $total += $product['price'] * $product['quantity'];
  }
  
  // Insert order into database
  $query = "INSERT INTO orders (user_id, total, status) VALUES ('$user_id', '$total', 'pending')";
  mysqli_query($db, $query);
  
  // Get last inserted order ID
  $order_id = mysqli_insert_id($db);
  
  // Insert order items into database
  foreach ($products as $product) {
    $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product[id]', '$product[quantity]')";
    mysqli_query($db, $query);
  }
}

// Function to update order status in database
function updateOrderStatus($order_id, $status) {
  global $db;
  $query = "UPDATE orders SET status = '$status' WHERE id = '$order_id'";
  mysqli_query($db, $query);
}

// Function to get order details from database
function getOrderDetails($order_id) {
  global $db;
  $query = "SELECT * FROM orders WHERE id = '$order_id'";
  $result = mysqli_query($db, $query);
  return $result;
}

// Main code
if (isset($_POST['buy'])) {
  // Get user ID from session or database
  $user_id = $_SESSION['id'];
  
  // Get products to buy
  $products = array();
  foreach ($_POST['products'] as $product) {
    $products[] = array(
      'id' => $product,
      'quantity' => $_POST['quantities'][$product]
    );
  }
  
  // Place order and add order items to database
  placeOrder($user_id, $products);
  
  // Update order status in database (optional)
  updateOrderStatus(mysqli_insert_id($db), 'shipped');
}

// Display products and buy form
?>
<html>
<head>
  <title>Purchase</title>
</head>
<body>
  <?php
  $result = getProducts();
  while ($row = mysqli_fetch_assoc($result)) {
    ?>
    <p>
      <?php echo $row['name']; ?> (<?php echo number_format($row['price'], 2); ?>)
      <input type="checkbox" name="products[]" value="<?php echo $row['id']; ?>">
      Quantity: <input type="number" name="quantities[<?php echo $row['id']; ?>]" value="1">
    </p>
    <?php
  }
  ?>
  
  <form action="" method="post">
    <input type="submit" name="buy" value="Buy Now">
  </form>

  <?php
  // Display order details (optional)
  $order_id = $_SESSION['id'];
  if (!empty($order_id)) {
    $result = getOrderDetails($order_id);
    while ($row = mysqli_fetch_assoc($result)) {
      ?>
      <p>Order ID: <?php echo $row['id']; ?></p>
      <p>Status: <?php echo $row['status']; ?></p>
      <p>Total: <?php echo number_format($row['total'], 2); ?></p>
      <?php
    }
  }
  ?>
</body>
</html>


class Purchase {
  private $db;

  public function __construct() {
    // Initialize database connection
    $this->db = new mysqli("localhost", "username", "password", "database");
  }

  /**
   * Add product to cart
   *
   * @param int $product_id Product ID
   * @param int $quantity Quantity of product to add
   */
  public function addToCart($product_id, $quantity) {
    // Check if product exists
    $result = $this->db->query("SELECT * FROM products WHERE id = '$product_id'");
    if ($result->num_rows == 0) {
      return false; // Product not found
    }

    // Add item to cart (simulated using session)
    $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
  }

  /**
   * Checkout and create order
   *
   * @param int $customer_id Customer ID
   */
  public function checkout($customer_id) {
    // Get products in cart
    $cart = $_SESSION['cart'];

    // Create new order
    $order_id = $this->createOrder($customer_id);

    // Add items to order
    foreach ($cart as $product_id => $item) {
      $this->addOrderItem($order_id, $product_id, $item['quantity']);
    }
  }

  /**
   * Create new order
   *
   * @param int $customer_id Customer ID
   */
  private function createOrder($customer_id) {
    // Generate unique order ID
    $order_id = uniqid();

    // Insert order into database
    $this->db->query("INSERT INTO orders (customer_id, date) VALUES ('$customer_id', NOW())");

    return $order_id;
  }

  /**
   * Add item to order
   *
   * @param int $order_id Order ID
   * @param int $product_id Product ID
   * @param int $quantity Quantity of product
   */
  private function addOrderItem($order_id, $product_id, $quantity) {
    // Check if product exists
    $result = $this->db->query("SELECT * FROM products WHERE id = '$product_id'");
    if ($result->num_rows == 0) {
      return false; // Product not found
    }

    // Insert order item into database
    $this->db->query("INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', '$quantity')");
  }
}


// Create new purchase instance
$purchase = new Purchase();

// Add products to cart
$purchase->addToCart(1, 2); // Add 2 units of product with ID 1 to cart
$purchase->addToCart(2, 3); // Add 3 units of product with ID 2 to cart

// Checkout and create order
$purchase->checkout(1);


<?php

// Database connection settings
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

// Create a PDO instance
$conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

// Function to authenticate user
function authenticate($username, $password) {
  global $conn;
  $stmt = $conn->prepare("SELECT * FROM users WHERE username = :username AND password_hash = :password");
  $stmt->bindParam(':username', $username);
  $stmt->bindParam(':password', $password);
  $stmt->execute();
  return $stmt->fetch();
}

// Function to get products
function getProducts() {
  global $conn;
  $stmt = $conn->prepare("SELECT * FROM products");
  $stmt->execute();
  return $stmt->fetchAll();
}

// Function to create order
function createOrder($user_id, $product_id) {
  global $conn;
  $stmt = $conn->prepare("INSERT INTO orders (user_id, product_id, status) VALUES (:user_id, :product_id, 'pending')");
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
}

// Function to update order status
function updateOrderStatus($order_id, $status) {
  global $conn;
  $stmt = $conn->prepare("UPDATE orders SET status = :status WHERE id = :order_id");
  $stmt->bindParam(':order_id', $order_id);
  $stmt->bindParam(':status', $status);
  $stmt->execute();
}

// Check if user is authenticated
if (isset($_SESSION['username'])) {
  $user = authenticate($_SESSION['username'], $_SESSION['password']);
} else {
  header('Location: login.php');
  exit;
}

// Get products
$products = getProducts();

// Process purchase form submission
if (isset($_POST['purchase'])) {
  $product_id = $_POST['product_id'];
  createOrder($user->id, $product_id);
  updateOrderStatus($conn->lastInsertId(), 'shipped');
}

?>


<?php

// Connect to database
$db = new PDO('mysql:host=localhost;dbname=store', 'username', 'password');

// Check if form is submitted
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // Get product ID from form data
  $product_id = $_POST['product_id'];

  // Get product details from database
  $stmt = $db->prepare('SELECT * FROM products WHERE id = :id');
  $stmt->bindParam(':id', $product_id);
  $stmt->execute();
  $product = $stmt->fetch();

  if ($product) {
    // Calculate total price
    $total_price = $product['price'];

    // Insert new order into database
    $stmt = $db->prepare('INSERT INTO orders (customer_name, order_date, total_price, product_id) VALUES (:name, NOW(), :price, :id)');
    $stmt->bindParam(':name', $_POST['customer_name']);
    $stmt->bindParam(':price', $total_price);
    $stmt->bindParam(':id', $product_id);
    $stmt->execute();

    // Update stock quantity
    $stmt = $db->prepare('UPDATE products SET stock_quantity = stock_quantity - 1 WHERE id = :id');
    $stmt->bindParam(':id', $product_id);
    $stmt->execute();

    // Display success message
    echo 'Order placed successfully!';
  } else {
    echo 'Product not found.';
  }
}

// Display form
?>
<form action="" method="post">
  <label for="product_id">Select Product:</label>
  <select name="product_id" id="product_id">
    <?php
      // Get all products from database
      $stmt = $db->prepare('SELECT * FROM products');
      $stmt->execute();
      while ($row = $stmt->fetch()) {
        echo '<option value="' . $row['id'] . '">' . $row['name'] . '</option>';
      }
    ?>
  </select>
  <br><br>
  <label for="customer_name">Customer Name:</label>
  <input type="text" name="customer_name" id="customer_name">
  <br><br>
  <input type="submit" value="Place Order">
</form>


<?php

// Configuration settings
define('DB_HOST', 'your_database_host');
define('DB_USER', 'your_database_username');
define('DB_PASSWORD', 'your_database_password');
define('DB_NAME', 'your_database_name');

// Function to connect to the database
function db_connect() {
    $conn = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
    if (!$conn) {
        die("Connection failed: " . mysqli_error($conn));
    }
    return $conn;
}

// Function to create a new order in the database
function create_order($customer_name, $customer_email, $order_total) {
    $conn = db_connect();
    $sql = "INSERT INTO orders (customer_name, customer_email, order_total) VALUES ('$customer_name', '$customer_email', '$order_total')";
    mysqli_query($conn, $sql);
    mysqli_close($conn);
}

// Function to process payment using PayPal
function process_payment($amount, $currency_code, $payment_token) {
    // This is a simplified example and should be replaced with the actual PayPal API calls.
    $ch = curl_init('https://api.paypal.com/v1/payments/payment');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, "amount=$amount&currency_code=$currency_code&payment_token=$payment_token");
    $response = curl_exec($ch);
    if ($response === false) {
        die("Error processing payment: " . curl_error($ch));
    }
    return $response;
}

// Function to update the order status in the database
function update_order_status($order_id, $status) {
    $conn = db_connect();
    $sql = "UPDATE orders SET status='$status' WHERE id='$order_id'";
    mysqli_query($conn, $sql);
    mysqli_close($conn);
}

// Create a new order and process payment on form submission
if (isset($_POST['submit'])) {
    // Get form data
    $customer_name = $_POST['customer_name'];
    $customer_email = $_POST['customer_email'];
    $order_total = $_POST['order_total'];

    // Process payment using PayPal
    $payment_token = $_POST['payment_token'];
    $response = process_payment($order_total, 'USD', $payment_token);
    if ($response !== false) {
        // If the payment is successful, create a new order in the database
        create_order($customer_name, $customer_email, $order_total);

        // Update the order status to "paid" in the database
        update_order_status(mysqli_insert_id(db_connect()), 'Paid');
    } else {
        echo "Error processing payment.";
    }
}

?>

<!-- Form to input customer details and submit for purchase -->
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name"><br><br>

    <label for="customer_email">Customer Email:</label>
    <input type="email" id="customer_email" name="customer_email"><br><br>

    <label for="order_total">Order Total:</label>
    <input type="number" id="order_total" name="order_total"><br><br>

    <!-- PayPal payment token is generated here -->
    <button type="submit" name="submit">Submit</button>
</form>


<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'username');
define('DB_PASSWORD', 'password');
define('DB_NAME', 'database_name');

$conn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>


<?php
function getCustomer($id) {
  global $conn;
  $sql = "SELECT * FROM customers WHERE id = '$id'";
  $result = $conn->query($sql);
  return $result->fetch_assoc();
}

function getProduct($id) {
  global $conn;
  $sql = "SELECT * FROM products WHERE id = '$id'";
  $result = $conn->query($sql);
  return $result->fetch_assoc();
}

function addOrder() {
  global $conn;
  $customer_id = $_POST['customer_id'];
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  $sql = "INSERT INTO orders (customer_id, product_id, quantity)
          VALUES ('$customer_id', '$product_id', '$quantity')";
  if ($conn->query($sql) === TRUE) {
    return true;
  } else {
    return false;
  }
}

function processPayment() {
  global $conn;
  // Implement payment processing logic here
}
?>


<?php
include 'includes/config.php';
include 'includes/functions.php';

if (isset($_POST['submit'])) {
  // Process form data
  $customer_id = $_POST['customer_id'];
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  // Add order to database
  if (addOrder()) {
    echo "Order added successfully!";
  } else {
    echo "Error adding order.";
  }
} else {
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <label for="customer_id">Customer ID:</label>
  <input type="text" id="customer_id" name="customer_id"><br><br>

  <label for="product_id">Product ID:</label>
  <input type="text" id="product_id" name="product_id"><br><br>

  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity"><br><br>

  <button type="submit" name="submit">Add Order</button>
</form>
<?php } ?>


// Product.php

class Product {
  private $id;
  private $name;
  private $price;

  public function __construct($id, $name, $price) {
    $this->id = $id;
    $this->name = $name;
    $this->price = $price;
  }

  public function getId() { return $this->id; }
  public function getName() { return $this->name; }
  public function getPrice() { return $this->price; }
}

// Order.php

class Order {
  private $id;
  private $customerName;
  private $orderDate;
  private $totalCost;

  public function __construct($customerId, $customerName) {
    $this->customerName = $customerName;
    $this->orderDate = date('Y-m-d');
    $this->totalCost = 0.00;
  }

  public function getId() { return $this->id; }
  public function getCustomerName() { return $this->customerName; }
  public function getOrderDate() { return $this->orderDate; }
  public function getTotalCost() { return $this->totalCost; }

  public function addItem(Product $product, $quantity) {
    $item = new OrderItem($this->id, $product->getId(), $quantity);
    $this->addOrderItem($item);
  }

  private function addOrderItem(OrderItem $item) {
    // save order item to database
    // for example:
    // $sql = 'INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)';
    // $stmt = $db->prepare($sql);
    // $stmt->execute([$this->id, $item->getProductId(), $item->getQuantity()]);
  }
}

// OrderItem.php

class OrderItem {
  private $id;
  private $orderId;
  private $productId;
  private $quantity;

  public function __construct($orderId, $productId, $quantity) {
    $this->orderId = $orderId;
    $this->productId = $productId;
    $this->quantity = $quantity;
  }

  public function getOrderId() { return $this->orderId; }
  public function getProductId() { return $this->productId; }
  public function getQuantity() { return $this->quantity; }
}


// PurchaseController.php

class PurchaseController {
  private $db;

  public function __construct($db) {
    $this->db = $db;
  }

  public function processOrder() {
    if (isset($_POST['customer_name']) && isset($_POST['product_id'])) {
      $customerId = $_SESSION['customer_id'];
      $customerName = $_POST['customer_name'];
      $productId = $_POST['product_id'];

      // get product from database
      $sql = 'SELECT * FROM products WHERE id = ?';
      $stmt = $this->db->prepare($sql);
      $stmt->execute([$productId]);
      $product = $stmt->fetch();

      if ($product) {
        $order = new Order($customerId, $customerName);

        // get product quantity from database
        $quantitySql = 'SELECT * FROM products WHERE id = ?';
        $quantityStmt = $this->db->prepare($quantitySql);
        $quantityStmt->execute([$productId]);
        $productQuantity = $quantityStmt->fetch()['quantity'];

        if ($productQuantity >= $_POST['quantity']) {
          // add item to order
          $order->addItem(new Product($productId, $product['name'], $product['price']), $_POST['quantity']);

          // save order to database
          $sql = 'INSERT INTO orders (customer_name, total_cost) VALUES (?, ?)';
          $stmt = $this->db->prepare($sql);
          $stmt->execute([$order->getCustomerName(), $order->getTotalCost()]);

          // update product quantity in database
          $updateSql = 'UPDATE products SET quantity = quantity - ? WHERE id = ?';
          $updateStmt = $this->db->prepare($updateSql);
          $updateStmt->execute([$_POST['quantity'], $productId]);
        }
      }

      header('Location: index.php');
      exit;
    }
  }
}


class User {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function register($username, $email, $password) {
        $query = "INSERT INTO users (username, email, password) VALUES (:username, :email, :password)";
        return $this->db->prepare($query)->execute([':username' => $username, ':email' => $email, ':password' => $password]);
    }

    public function login($email, $password) {
        $query = "SELECT * FROM users WHERE email = :email AND password = :password";
        return $this->db->prepare($query)->execute([':email' => $email, ':password' => $password])->fetch();
    }
}


class Product {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function getAllProducts() {
        $query = "SELECT * FROM products";
        return $this->db->prepare($query)->execute()->fetchAll();
    }

    public function getProductById($id) {
        $query = "SELECT * FROM products WHERE id = :id";
        return $this->db->prepare($query)->execute([':id' => $id])->fetch();
    }
}


class Order {
    private $db;

    public function __construct($db) {
        $this->db = $db;
    }

    public function placeOrder($userId, $products, $total) {
        $query = "INSERT INTO orders (user_id, order_date, total) VALUES (:user_id, NOW(), :total)";
        $this->db->prepare($query)->execute([':user_id' => $userId, ':total' => $total]);
        return $this->db->lastInsertId();
    }

    public function getOrderItems($orderId) {
        $query = "SELECT * FROM order_items WHERE order_id = :order_id";
        return $this->db->prepare($query)->execute([':order_id' => $orderId])->fetchAll();
    }
}


class Controller {
    private $user;
    private $product;
    private $order;

    public function __construct(User $user, Product $product, Order $order) {
        $this->user = $user;
        $this->product = $product;
        $this->order = $order;
    }

    public function registerUser($username, $email, $password) {
        return $this->user->register($username, $email, $password);
    }

    public function loginUser($email, $password) {
        return $this->user->login($email, $password);
    }

    public function placeOrder($userId, $products, $total) {
        return $this->order->placeOrder($userId, $products, $total);
    }
}


$db = new PDO('sqlite:database.db');
$user = new User($db);
$product = new Product($db);
$order = new Order($db);

$controller = new Controller($user, $product, $order);

$username = 'john';
$email = 'john@example.com';
$password = 'password';

if ($controller->registerUser($username, $email, $password)) {
    echo 'User registered successfully!';
}

$email = 'john@example.com';
$password = 'password';

$userData = $controller->loginUser($email, $password);

if (!empty($userData)) {
    echo 'User logged in successfully!';

    $products = [
        ['id' => 1, 'quantity' => 2],
        ['id' => 2, 'quantity' => 3]
    ];

    $total = 100.00;

    $orderId = $controller->placeOrder($userData['id'], $products, $total);

    if (!empty($orderId)) {
        echo 'Order placed successfully!';
    }
}


class Purchase {
    private $db;

    public function __construct() {
        // Connect to database using PDO
        $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');
    }

    /**
     * Add product to cart
     *
     * @param int $user_id
     * @param int $product_id
     * @param int $quantity
     */
    public function addProductToCart($user_id, $product_id, $quantity) {
        // Get current user's cart id
        $cartId = $this->getCartIdByUser($user_id);

        if (!$cartId) {
            // Create new cart for the user
            $stmt = $this->db->prepare('INSERT INTO carts (user_id) VALUES (:user_id)');
            $stmt->execute([':user_id' => $user_id]);
            $cartId = $this->db->lastInsertId();
        }

        // Add product to cart
        $stmt = $this->db->prepare('INSERT INTO cart_items (cart_id, product_id, quantity, price) VALUES (:cart_id, :product_id, :quantity, :price)');
        $product = $this->getProduct($product_id);
        $stmt->execute([
            ':cart_id' => $cartId,
            ':product_id' => $product_id,
            ':quantity' => $quantity,
            ':price' => $product['price']
        ]);

        // Update cart total
        $this->updateCartTotal($cartId, $product['price'] * $quantity);
    }

    /**
     * Get product details by id
     *
     * @param int $productId
     * @return array
     */
    private function getProduct($productId) {
        $stmt = $this->db->prepare('SELECT * FROM products WHERE id = :product_id');
        $stmt->execute([':product_id' => $productId]);
        return $stmt->fetch();
    }

    /**
     * Get cart id by user
     *
     * @param int $userId
     * @return int|null
     */
    private function getCartIdByUser($userId) {
        $stmt = $this->db->prepare('SELECT id FROM carts WHERE user_id = :user_id');
        $stmt->execute([':user_id' => $userId]);
        return $stmt->fetchColumn();
    }

    /**
     * Update cart total
     *
     * @param int $cartId
     * @param float $newTotal
     */
    private function updateCartTotal($cartId, $newTotal) {
        $stmt = $this->db->prepare('UPDATE carts SET total = :total WHERE id = :cart_id');
        $stmt->execute([':total' => $newTotal, ':cart_id' => $cartId]);
    }

    /**
     * Process payment and create order
     *
     * @param int $cartId
     */
    public function processPayment($cartId) {
        // Get cart contents
        $cartItems = $this->getCartItems($cartId);

        // Create new order
        $stmt = $this->db->prepare('INSERT INTO orders (user_id, total, created_at) VALUES (:user_id, :total, NOW())');
        $cartTotal = $this->getCartTotal($cartId);
        $stmt->execute([':user_id' => $userId, ':total' => $cartTotal]);

        // Update product quantities
        foreach ($cartItems as $item) {
            $this->updateProductQuantity($item['product_id'], $item['quantity']);
        }

        // Remove cart items
        $this->removeCartItems($cartId);
    }

    /**
     * Get cart contents by id
     *
     * @param int $cartId
     * @return array
     */
    private function getCartItems($cartId) {
        $stmt = $this->db->prepare('SELECT ci.*, p.name AS product_name FROM cart_items ci INNER JOIN products p ON ci.product_id = p.id WHERE ci.cart_id = :cart_id');
        $stmt->execute([':cart_id' => $cartId]);
        return $stmt->fetchAll();
    }

    /**
     * Get cart total
     *
     * @param int $cartId
     * @return float
     */
    private function getCartTotal($cartId) {
        $stmt = $this->db->prepare('SELECT total FROM carts WHERE id = :cart_id');
        $stmt->execute([':cart_id' => $cartId]);
        return $stmt->fetchColumn();
    }

    /**
     * Update product quantity
     *
     * @param int $productId
     * @param int $newQuantity
     */
    private function updateProductQuantity($productId, $newQuantity) {
        $stmt = $this->db->prepare('UPDATE products SET quantity = :quantity WHERE id = :product_id');
        $stmt->execute([':quantity' => $newQuantity, ':product_id' => $productId]);
    }

    /**
     * Remove cart items
     *
     * @param int $cartId
     */
    private function removeCartItems($cartId) {
        $stmt = $this->db->prepare('DELETE FROM cart_items WHERE cart_id = :cart_id');
        $stmt->execute([':cart_id' => $cartId]);
    }
}


$purchase = new Purchase();

// Add product to cart
$userId = 1;
$product_id = 1;
$quantity = 2;
$purchase->addProductToCart($userId, $product_id, $quantity);

// Process payment and create order
$cartId = // get current user's cart id
$purchase->processPayment($cartId);


<?php
session_start();

// Create a new cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function addItemToCart($id, $quantity) {
    global $_SESSION;
    
    // Check if item is already in cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $id) {
            $item['quantity'] += $quantity;
            return;
        }
    }
    
    // Add new item to cart
    $_SESSION['cart'][] = array('id' => $id, 'quantity' => $quantity);
}

// Function to display cart contents
function displayCart() {
    global $_SESSION;
    
    echo "Cart Contents:<br>";
    foreach ($_SESSION['cart'] as $item) {
        echo "$item[quantity] x Item ID: $item[id]<br>";
    }
}
?>


<?php
session_start();

// Display cart contents
include 'cart.php';
displayCart();

// Get user details from form submission
$userDetails = array(
    'name' => $_POST['name'],
    'email' => $_POST['email'],
    'address' => $_POST['address']
);

// Process payment using PayPal API (example)
if ($_POST['submit']) {
    // Replace with your actual payment processing script
    $paypalToken = paypalAPI('token', $userDetails);
    
    if ($paypalToken) {
        // Update database with order details
        updateOrderDatabase($paypalToken, $_SESSION['cart']);
        
        echo "Payment successful!";
    } else {
        echo "Error processing payment.";
    }
}
?>


function updateOrderDatabase($paypalToken, $cart) {
    // Connect to database
    
    // Insert order details into database table
    foreach ($cart as $item) {
        $query = "INSERT INTO orders (user_id, item_id, quantity)
                  VALUES ('$paypalToken', '$item[id]', '$item[quantity]')";
        
        // Execute query and check for errors
    }
}


<?php

// Set session variables
session_start();
$_SESSION['cart'] = array();

// Function to add item to cart
function add_to_cart($product_id, $quantity) {
  if (!isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id] = array('quantity' => 0);
  }
  $_SESSION['cart'][$product_id]['quantity'] += $quantity;
}

// Function to remove item from cart
function remove_from_cart($product_id) {
  unset($_SESSION['cart'][$product_id]);
}

// Function to update quantity of item in cart
function update_quantity($product_id, $new_quantity) {
  if (isset($_SESSION['cart'][$product_id])) {
    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
  }
}

// Function to get contents of cart
function get_cart_contents() {
  return $_SESSION['cart'];
}

?>


<?php include 'cart.php'; ?>

<h1>Cart Contents:</h1>

<ul>
  <?php foreach (get_cart_contents() as $product_id => $item) { ?>
    <li>
      <?php echo get_product_name($product_id); ?> x <?php echo $item['quantity']; ?>
      (<a href="?remove=<?php echo $product_id; ?>">Remove</a>)
      (<a href="?update=<?php echo $product_id; ?>">Update Quantity</a>)
    </li>
  <?php } ?>
</ul>

<h2>Total:</h2>
<?php echo calculate_total(); ?>

<a href="checkout.php">Checkout</a>

<?php
// Assume we have a function to get the product name and price from the database
function get_product_name($product_id) {
  // Query database for product name
}

function calculate_total() {
  $total = 0;
  foreach (get_cart_contents() as $item) {
    $total += $item['quantity'] * get_product_price($item['product_id']);
  }
  return $total;
}
?>


<?php include 'cart.php'; ?>

<?php
$product_id = $_GET['id'];
$quantity = $_POST['quantity'];

if ($product_id && $quantity) {
  add_to_cart($product_id, $quantity);
} else {
  echo "Error adding to cart.";
}
?>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="hidden" name="id" value="<?php echo $product_id; ?>">
  Quantity: <input type="text" name="quantity" value="<?php echo $quantity; ?>">
  <input type="submit" value="Add to Cart">
</form>


<?php include 'cart.php'; ?>

<?php
$product_id = $_GET['id'];

if ($product_id) {
  remove_from_cart($product_id);
} else {
  echo "Error removing from cart.";
}
?>


<?php include 'cart.php'; ?>

<?php
$product_id = $_GET['id'];
$new_quantity = $_POST['quantity'];

if ($product_id && $new_quantity) {
  update_quantity($product_id, $new_quantity);
} else {
  echo "Error updating quantity.";
}
?>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="hidden" name="id" value="<?php echo $product_id; ?>">
  Quantity: <input type="text" name="quantity" value="<?php echo $new_quantity; ?>">
  <input type="submit" value="Update Quantity">
</form>


<?php
session_start();

// Connect to database
$conn = mysqli_connect("localhost", "username", "password", "database");

if (!$conn) {
  die("Connection failed: " . mysqli_connect_error());
}

// Get products from database
$sql = "SELECT * FROM products";
$result = mysqli_query($conn, $sql);

?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Shop</title>
</head>

<body>
  <!-- Display products -->
  <?php while ($row = mysqli_fetch_assoc($result)) { ?>
    <div class="product">
      <h2><?php echo $row['name']; ?></h2>
      <p>Price: $<?php echo $row['price']; ?></p>
      <button onclick="addToCart(<?php echo $row['id']; ?>)">Add to Cart</button>
    </div>
  <?php } ?>

  <!-- Display cart contents -->
  <?php if (isset($_SESSION['cart'])) { ?>
    <h2>Cart Contents:</h2>
    <ul>
      <?php foreach ($_SESSION['cart'] as $item) { ?>
        <li><?php echo $item; ?></li>
      <?php } ?>
    </ul>

    <!-- Place Order button -->
    <button onclick="placeOrder()">Place Order</button>
  <?php } ?>

  <!-- JavaScript code for adding to cart and placing order -->
  <script>
    function addToCart(productId) {
      // Add item to cart array
      var cart = <?php echo json_encode($_SESSION['cart']) ?>;
      cart.push(productId);
      $_SESSION['cart'] = cart;

      // Update cart display
      document.getElementById('cart-display').innerHTML = '';
      cart.forEach(function(item) {
        document.getElementById('cart-display').innerHTML += '<li>' + item + '</li>';
      });
    }

    function placeOrder() {
      // Get total price from database
      var totalPrice = <?php echo json_encode(getTotalPrice()); ?>;

      // Place order in database
      var orderData = {
        customer_name: '<?php echo $_SESSION['customer_name']; ?>',
        total: totalPrice,
        timestamp: new Date().toISOString()
      };
      $.ajax({
        type: 'POST',
        url: 'place_order.php',
        data: JSON.stringify(orderData),
        contentType: 'application/json'
      });
    }
  </script>
</body>

<?php mysqli_close($conn); ?>


<?php
session_start();

// Connect to database
$conn = mysqli_connect("localhost", "username", "password", "database");

if (!$conn) {
  die("Connection failed: " . mysqli_connect_error());
}

// Get product id from URL parameter
$productId = $_GET['id'];

// Add item to cart array in session
$_SESSION['cart'][] = $productId;

// Update cart display on index.php page
header('Location: index.php');
?>


<?php
session_start();

// Display cart contents
echo '<h2>Cart Contents:</h2>';
foreach ($_SESSION['cart'] as $item) {
  echo '<li>' . $item . '</li>';
}
?>


<?php
session_start();

// Connect to database
$conn = mysqli_connect("localhost", "username", "password", "database");

if (!$conn) {
  die("Connection failed: " . mysqli_connect_error());
}

// Get order data from AJAX request
$orderData = json_decode($_POST['order_data'], true);

// Update orders table in database
$sql = "INSERT INTO orders (customer_name, total, timestamp)
        VALUES (?, ?, ?)";
$stmt = $conn->prepare($sql);
$stmt->bind_param('sss', $orderData['customer_name'], $orderData['total'], $orderData['timestamp']);
$stmt->execute();

// Update products table in database
$sql = "UPDATE products SET stock_level = stock_level - 1 WHERE id = ?";
$stmt->bind_param('i', $orderData['product_id']);
$stmt->execute();
?>


// database.php

class Database {
    private $db;

    public function __construct() {
        $this->db = array();
        if (!file_exists('data')) {
            mkdir('data', 0777, true);
        }
        $this->loadDatabase();
    }

    private function loadDatabase() {
        foreach (glob('data/*.txt') as $filename) {
            $content = file_get_contents($filename);
            $lines = explode("
", $content);
            foreach ($lines as $line) {
                list($key, $value) = explode(":", $line);
                $this->db[$key] = trim($value);
            }
        }
    }

    public function saveDatabase() {
        foreach ($this->db as $key => $value) {
            file_put_contents('data/' . $key . '.txt', $key . ':' . $value . "
");
        }
    }
}


// register.php

require_once 'database.php';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $username = $_POST['username'];
    $password = $_POST['password'];

    if ($username && $password) {
        $db = new Database();
        $user_id = uniqid();
        $users = array();
        if (file_exists('data/users.txt')) {
            $content = file_get_contents('data/users.txt');
            $lines = explode("
", $content);
            foreach ($lines as $line) {
                list($key, $value) = explode(":", $line);
                $users[$key] = trim($value);
            }
        }

        if (!isset($users['user_id_' . $username])) {
            $users['user_id_' . $username] = $password;
            file_put_contents('data/users.txt', serialize($users) . "
");
            echo "User created successfully!";
        } else {
            echo "Username already exists!";
        }
    } else {
        echo "Please enter username and password!";
    }
}


// login.php

require_once 'database.php';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $username = $_POST['username'];
    $password = $_POST['password'];

    if ($username && $password) {
        $db = new Database();
        $users = array();
        if (file_exists('data/users.txt')) {
            $content = file_get_contents('data/users.txt');
            $lines = explode("
", $content);
            foreach ($lines as $line) {
                list($key, $value) = explode(":", $line);
                $users[$key] = trim($value);
            }
        }

        if (isset($users['user_id_' . $username]) && $users['user_id_' . $username] == $password) {
            session_start();
            $_SESSION['user_id'] = $username;
            echo "Logged in successfully!";
        } else {
            echo "Invalid username or password!";
        }
    } else {
        echo "Please enter username and password!";
    }
}


// products.php

require_once 'database.php';

$db = new Database();
$products = array();

if (file_exists('data/products.txt')) {
    $content = file_get_contents('data/products.txt');
    $lines = explode("
", $content);
    foreach ($lines as $line) {
        list($key, $value) = explode(":", $line);
        $products[$key] = trim($value);
    }
}

echo "<h1>Products</h1>";
foreach ($products as $product_id => $product_info) {
    list($name, $price) = explode(",", $product_info);
    echo "<p>ID: $product_id, Name: $name, Price: \$" . number_format($price) . "</p>";
}


// cart.php

require_once 'database.php';

$db = new Database();

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $user_id = $_SESSION['user_id'];
    $product_id = $_POST['product_id'];

    if ($user_id && $product_id) {
        $cart = array();
        if (file_exists('data/cart.txt')) {
            $content = file_get_contents('data/cart.txt');
            $lines = explode("
", $content);
            foreach ($lines as $line) {
                list($key, $value) = explode(":", $line);
                $cart[$key] = trim($value);
            }
        }

        if (!isset($cart['product_id_' . $product_id])) {
            $cart['product_id_' . $product_id] = '1';
            file_put_contents('data/cart.txt', serialize($cart) . "
");
            echo "Added to cart successfully!";
        } else {
            echo "Product already in cart!";
        }
    } else {
        echo "Please log in and select a product!";
    }
}


// checkout.php

require_once 'database.php';

$db = new Database();

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $user_id = $_SESSION['user_id'];
    $cart = array();
    if (file_exists('data/cart.txt')) {
        $content = file_get_contents('data/cart.txt');
        $lines = explode("
", $content);
        foreach ($lines as $line) {
            list($key, $value) = explode(":", $line);
            $cart[$key] = trim($value);
        }
    }

    if (isset($user_id)) {
        echo "<h1>Checkout</h1>";
        echo "<p>Total: \$" . number_format(array_sum(explode(',', implode(',', $cart)))) . "</p>";

        // process payment
        // ...

        // clear cart
        file_put_contents('data/cart.txt', '');
        echo "Thank you for your purchase!";
    } else {
        echo "Please log in to checkout!";
    }
}


<?php
// Database connection settings
$host = 'localhost';
$dbname = 'mydatabase';
$username = 'myuser';
$password = 'mypassword';

// Connect to the database
$conn = new mysqli($host, $username, $password, $dbname);

// Create table if it doesn't exist
$sql = "CREATE TABLE IF NOT EXISTS purchases (
  id INT PRIMARY KEY AUTO_INCREMENT,
  customer_id INT,
  product_id INT,
  quantity INT,
  amount DECIMAL(10,2)
)";
$conn->query($sql);

// Close connection
$conn->close();
?>


<?php
// Include database setup file
require_once 'db_setup.php';

// Process purchase form submission
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
  // Extract form data
  $customer_id = $_POST['customer_id'];
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  // Validate input data
  if (!isset($customer_id) || !isset($product_id) || !isset($quantity)) {
    echo 'Error: Missing form data.';
    exit;
  }

  // Get product price from database (assuming we have a products table)
  $conn = new mysqli($host, $username, $password, $dbname);
  $sql = "SELECT price FROM products WHERE id = '$product_id'";
  $result = $conn->query($sql);
  if ($row = $result->fetch_assoc()) {
    $price = $row['price'];
  } else {
    echo 'Error: Product not found.';
    exit;
  }

  // Calculate total amount
  $amount = $quantity * $price;

  // Insert purchase data into database
  $sql = "INSERT INTO purchases (customer_id, product_id, quantity, amount) VALUES ('$customer_id', '$product_id', '$quantity', '$amount')";
  if ($conn->query($sql)) {
    echo 'Purchase successful!';
  } else {
    echo 'Error: Failed to insert purchase data.';
  }

  // Close connection
  $conn->close();
} else {
  // Display purchase form
?>
  <h1>Purchase Form</h1>
  <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <label for="customer_id">Customer ID:</label>
    <input type="text" id="customer_id" name="customer_id"><br><br>
    <label for="product_id">Product ID:</label>
    <input type="text" id="product_id" name="product_id"><br><br>
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity"><br><br>
    <input type="submit" value="Purchase">
  </form>
<?php } ?>


<?php
session_start();

// Connect to database
$db = new PDO('mysql:host=localhost;dbname=shop', 'username', 'password');

// Get all products from database
$stmt = $db->prepare('SELECT * FROM products');
$stmt->execute();
$products = $stmt->fetchAll();

// Display products
?>
<html>
<head>
    <title>Shop</title>
</head>
<body>
    <h1>Shop</h1>
    <?php foreach ($products as $product): ?>
        <p><?= $product['name'] ?>: <?= $product['price'] ?></p>
        <form action="add_to_cart.php" method="post">
            <input type="hidden" name="product_id" value="<?= $product['id'] ?>">
            <button>Add to cart</button>
        </form>
    <?php endforeach; ?>
</body>
</html>


<?php
session_start();

// Get product ID from form data
$product_id = $_POST['product_id'];

// Add product to user's cart
if (isset($_SESSION['cart'])) {
    $cart = $_SESSION['cart'];
} else {
    $cart = array();
}
$cart[] = array('product_id' => $product_id, 'quantity' => 1);
$_SESSION['cart'] = $cart;

// Redirect back to index.php
header('Location: index.php');
exit;
?>


<?php
session_start();

// Get products from user's cart
if (isset($_SESSION['cart'])) {
    $cart = $_SESSION['cart'];
} else {
    $cart = array();
}

// Display products in cart
?>
<html>
<head>
    <title>Cart</title>
</head>
<body>
    <h1>Cart</h1>
    <?php foreach ($cart as $item): ?>
        <?= $item['product_id'] ?> (<?= $item['quantity'] ?>)
        <form action="remove_from_cart.php" method="post">
            <input type="hidden" name="product_id" value="<?= $item['product_id'] ?>">
            <button>Remove</button>
        </form>
    <?php endforeach; ?>
</body>
</html>


<?php
session_start();

// Get product ID from form data
$product_id = $_POST['product_id'];

// Remove product from user's cart
if (isset($_SESSION['cart'])) {
    $cart = $_SESSION['cart'];
} else {
    $cart = array();
}
$cart = array_filter($cart, function ($item) use ($product_id) {
    return $item['product_id'] !== $product_id;
});
$_SESSION['cart'] = $cart;

// Redirect back to view_cart.php
header('Location: view_cart.php');
exit;
?>


<?php
session_start();

// Get products from user's cart
if (isset($_SESSION['cart'])) {
    $cart = $_SESSION['cart'];
} else {
    $cart = array();
}

// Display order form
?>
<html>
<head>
    <title>Checkout</title>
</head>
<body>
    <h1>Checkout</h1>
    <?php foreach ($cart as $item): ?>
        <?= $item['product_id'] ?> (<?= $item['quantity'] ?>)
    <?php endforeach; ?>
    <form action="place_order.php" method="post">
        <input type="hidden" name="order_data" value="<?= json_encode($cart) ?>">
        <button>Place order</button>
    </form>
</body>
</html>


<?php
session_start();

// Get order data from form data
$order_data = $_POST['order_data'];

// Create new order in database
$db = new PDO('mysql:host=localhost;dbname=shop', 'username', 'password');
$stmt = $db->prepare('INSERT INTO orders (customer_name, order_date) VALUES (:customer_name, NOW())');
$stmt->execute(array(':customer_name' => $_SESSION['customer_name']));
$order_id = $db->lastInsertId();

// Create new order items in database
foreach ($order_data as $item) {
    $stmt = $db->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');
    $stmt->execute(array(':order_id' => $order_id, ':product_id' => $item['product_id'], ':quantity' => $item['quantity']));
}

// Clear cart
$_SESSION['cart'] = array();

// Redirect back to index.php
header('Location: index.php');
exit;
?>


<?php
// database connection settings
$dsn = 'mysql:host=localhost;dbname=mydatabase';
$username = 'myuser';
$password = 'mypassword';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

// function to add product to cart
function add_to_cart($customer_id, $product_id, $quantity) {
    global $pdo;
    
    try {
        $stmt = $pdo->prepare("INSERT INTO cart (customer_id, product_id, quantity) VALUES (:customer_id, :product_id, :quantity)");
        $stmt->bindParam(':customer_id', $customer_id);
        $stmt->bindParam(':product_id', $product_id);
        $stmt->bindParam(':quantity', $quantity);
        $stmt->execute();
    } catch (PDOException $e) {
        echo 'Error adding to cart: ' . $e->getMessage();
    }
}

// function to view cart contents
function view_cart($customer_id) {
    global $pdo;
    
    try {
        $stmt = $pdo->prepare("SELECT * FROM cart WHERE customer_id = :customer_id");
        $stmt->bindParam(':customer_id', $customer_id);
        $stmt->execute();
        
        return $stmt->fetchAll();
    } catch (PDOException $e) {
        echo 'Error viewing cart: ' . $e->getMessage();
    }
}

// function to remove item from cart
function remove_from_cart($cart_id) {
    global $pdo;
    
    try {
        $stmt = $pdo->prepare("DELETE FROM cart WHERE id = :id");
        $stmt->bindParam(':id', $cart_id);
        $stmt->execute();
    } catch (PDOException $e) {
        echo 'Error removing from cart: ' . $e->getMessage();
    }
}

// function to complete purchase
function complete_purchase($customer_id, $total) {
    global $pdo;
    
    try {
        // insert order into database
        $stmt = $pdo->prepare("INSERT INTO orders (customer_id, total, order_date) VALUES (:customer_id, :total, NOW())");
        $stmt->bindParam(':customer_id', $customer_id);
        $stmt->bindParam(':total', $total);
        $stmt->execute();
        
        // delete all items from cart
        $stmt = $pdo->prepare("DELETE FROM cart WHERE customer_id = :customer_id");
        $stmt->bindParam(':customer_id', $customer_id);
        $stmt->execute();
    } catch (PDOException $e) {
        echo 'Error completing purchase: ' . $e->getMessage();
    }
}
?>


<?php

// Configuration
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = mysqli_connect($db_host, $db_username, $db_password, $db_name);

if (!$conn) {
    die('Could not connect: ' . mysqli_error());
}

// Function to display products
function displayProducts() {
    global $conn;
    $sql = "SELECT * FROM products";
    $result = mysqli_query($conn, $sql);
    
    if (mysqli_num_rows($result) > 0) {
        echo '<table border="1" cellpadding="5">';
        while ($row = mysqli_fetch_assoc($result)) {
            echo '<tr>';
            echo '<td>' . $row['name'] . '</td>';
            echo '<td>Price: $' . number_format($row['price'], 2) . '</td>';
            echo '<td>Quantity: ' . $row['quantity'] . '</td>';
            echo '<td><button class="add-to-cart" data-id="' . $row['id'] . '">Add to Cart</button></td>';
            echo '</tr>';
        }
        echo '</table>';
    } else {
        echo 'No products found.';
    }
}

// Function to add product to cart
function addToCart($product_id) {
    global $conn;
    $_SESSION['cart'][$product_id] = true;
    header('Location: purchase.php');
    exit;
}

// Function to display cart contents
function displayCart() {
    global $conn, $_SESSION;
    
    if (isset($_SESSION['cart'])) {
        echo '<h2>Cart Contents:</h2>';
        echo '<ul>';
        foreach ($_SESSION['cart'] as $product_id => $value) {
            $sql = "SELECT * FROM products WHERE id = '$product_id'";
            $result = mysqli_query($conn, $sql);
            
            if (mysqli_num_rows($result) > 0) {
                while ($row = mysqli_fetch_assoc($result)) {
                    echo '<li>';
                    echo $row['name'] . ' - Price: $' . number_format($row['price'], 2);
                    echo '</li>';
                }
            } else {
                echo '<li>Product not found.</li>';
            }
        }
        echo '</ul>';
    } else {
        echo '<h2>No products in cart.</h2>';
    }
}

// Function to process purchase
function processPurchase() {
    global $conn, $_SESSION;
    
    if (isset($_POST['submit'])) {
        // Validate form data
        if (!empty($_POST['customer_name']) && !empty($_POST['payment_method'])) {
            // Process payment and update database
            // For simplicity, we'll just print a success message
            echo 'Purchase processed successfully!';
        } else {
            echo 'Please fill out all fields.';
        }
    }
}

// Display products
displayProducts();

// Add event listeners to buttons
?>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const addToCartButtons = document.querySelectorAll('.add-to-cart');
        
        addToCartButtons.forEach(button => {
            button.addEventListener('click', function() {
                const productId = this.getAttribute('data-id');
                addToCart(productId);
            });
        });
    });
</script>

<?php
// Display cart contents and process purchase form
displayCart();
?>

<h2>Purchase Form:</h2>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name"><br><br>
    <label for="payment_method">Payment Method:</label>
    <select id="payment_method" name="payment_method">
        <option value="">Select a payment method</option>
        <option value="credit_card">Credit Card</option>
        <option value="paypal">PayPal</option>
    </select><br><br>
    <input type="submit" name="submit" value="Purchase">
</form>

<?php
processPurchase();
?>


// Include the database connection file (assuming it's named 'db.php')
include 'db.php';

// Form handling and purchase logic
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $customerName = $_POST['customer_name'];
    $productId = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Validate the form data
    if (empty($customerName) || empty($productId) || empty($quantity)) {
        echo "Please fill in all fields.";
        return;
    }

    // Retrieve product details for validation and calculation
    $sql = "SELECT * FROM products WHERE id = '$productId'";
    $result = mysqli_query($conn, $sql);
    if (mysqli_num_rows($result) == 0) {
        echo "Invalid product ID.";
        return;
    }
    $productData = mysqli_fetch_assoc($result);

    // Calculate the total cost
    $totalCost = $productData['price'] * $quantity;

    // Insert the order into the database
    $sql = "
        INSERT INTO orders (customer_name, product_id, quantity, total_cost)
        VALUES ('$customerName', '$productId', '$quantity', '$totalCost')
    ";
    if (!mysqli_query($conn, $sql)) {
        echo "Failed to insert order.";
        return;
    }

    // Update the stock of the product
    $newQuantity = $productData['stock'] - $quantity;
    $sql = "UPDATE products SET stock = '$newQuantity' WHERE id = '$productId'";
    if (!mysqli_query($conn, $sql)) {
        echo "Failed to update product stock.";
        return;
    }

    // Success message
    echo "Order placed successfully!";
}

// Display the purchase form
?>

<form action="" method="post">
    <label for="customer_name">Customer Name:</label>
    <input type="text" id="customer_name" name="customer_name"><br><br>

    <label for="product_id">Product ID:</label>
    <select id="product_id" name="product_id">
        <?php
        // Retrieve products from the database and display them in a dropdown menu
        $sql = "SELECT * FROM products";
        $result = mysqli_query($conn, $sql);
        while ($row = mysqli_fetch_assoc($result)) {
            echo "<option value='" . $row['id'] . "'>" . $row['name'] . "</option>";
        }
        ?>
    </select><br><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity"><br><br>

    <button type="submit">Place Order</button>
</form>


// connect.php (configuration file for database connection)
<?php
  $db_host = 'localhost';
  $db_username = 'your_username';
  $db_password = 'your_password';
  $db_name = 'your_database';

  $conn = new mysqli($db_host, $db_username, $db_password, $db_name);

  if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
  }
?>

// index.php (main page for purchase functionality)
<?php
  require_once 'connect.php';

  // display all products
  $query = "SELECT * FROM products";
  $result = $conn->query($query);

  if ($result->num_rows > 0) {
    echo "<table><tr><th>Product Name</th><th>Price</th></tr>";
    while ($row = $result->fetch_assoc()) {
      echo "<tr><td>" . $row["name"] . "</td><td>$" . $row["price"] . "</td><td><a href='add_to_cart.php?id=" . $row["id"] . "'>Add to Cart</a></td></tr>";
    }
    echo "</table>";
  } else {
    echo "No products available.";
  }

  // add product to cart functionality
  if (isset($_GET['id'])) {
    $product_id = $_GET['id'];
    $query = "SELECT * FROM products WHERE id = '$product_id'";
    $result = $conn->query($query);
    $row = $result->fetch_assoc();

    // update user's cart
    session_start();
    if (!isset($_SESSION["cart"])) {
      $_SESSION["cart"] = array();
    }
    if (array_key_exists($product_id, $_SESSION["cart"])) {
      $_SESSION["cart"][$product_id] += 1;
    } else {
      $_SESSION["cart"][$product_id] = 1;
    }

    // redirect to cart page
    header("Location: cart.php");
    exit();
  }
?>

// cart.php (page for displaying user's cart)
<?php
  require_once 'connect.php';

  session_start();

  if (!isset($_SESSION["cart"])) {
    echo "Your cart is empty.";
  } else {
    // display all products in cart
    $total = 0;
    echo "<table><tr><th>Product Name</th><th>Quantity</th><th>Total</th></tr>";
    foreach ($_SESSION["cart"] as $product_id => $quantity) {
      $query = "SELECT * FROM products WHERE id = '$product_id'";
      $result = $conn->query($query);
      $row = $result->fetch_assoc();
      echo "<tr><td>" . $row["name"] . "</td><td>" . $quantity . "</td><td>$" . ($row["price"] * $quantity) . "</td></tr>";
      $total += ($row["price"] * $quantity);
    }
    echo "</table>";

    // process payment and update order table
    if (isset($_POST['checkout'])) {
      $user_id = $_SESSION["user_id"]; // assuming user is logged in
      foreach ($_SESSION["cart"] as $product_id => $quantity) {
        $query = "INSERT INTO orders (user_id, product_id, quantity, total) VALUES ('$user_id', '$product_id', '$quantity', '" . ($row["price"] * $quantity) . "')";

        if (!$conn->query($query)) {
          echo "Error updating order table: " . $conn->error;
        }
      }

      // update user's cart
      unset($_SESSION["cart"]);

      header("Location: thank_you.php");
      exit();
    }
  }
?>

// thankyou.php (page for displaying thank you message)
<!DOCTYPE html>
<html>
<head>
  <title>Thank You</title>
</head>
<body>
  <h1>Thank you for your purchase!</h1>
</body>
</html>



// db.php - database connection settings

class PurchaseController {
    private $db;

    function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
    }

    // Function to add a product to cart
    function add_to_cart($product_id, $quantity) {
        try {
            $query = "INSERT INTO order_items (order_id, product_id, quantity)
                      VALUES (:order_id, :product_id, :quantity)";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':order_id', $_SESSION['cart_order_id']);
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':quantity', $quantity);
            $stmt->execute();
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }

    // Function to create a new order
    function create_order() {
        try {
            $query = "INSERT INTO orders (customer_id, order_date)
                      VALUES (:customer_id, NOW())";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':customer_id', $_SESSION['customer_id']);
            $stmt->execute();
            return $this->db->lastInsertId('orders');
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }

    // Function to update the cart
    function update_cart() {
        try {
            $query = "SELECT order_id FROM orders WHERE customer_id = :customer_id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':customer_id', $_SESSION['customer_id']);
            $stmt->execute();
            if ($row = $stmt->fetch()) {
                $_SESSION['cart_order_id'] = $row['order_id'];
                return true;
            } else {
                return false;
            }
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }

    // Function to checkout
    function checkout() {
        try {
            if ($this->update_cart()) {
                $order_id = $this->create_order();
                $_SESSION['cart'] = array();
                return $order_id;
            } else {
                return false;
            }
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }

    // Function to display cart contents
    function display_cart() {
        try {
            $query = "SELECT oi.product_id, p.name, oi.quantity, oi.order_id
                      FROM order_items oi
                      JOIN products p ON oi.product_id = p.id
                      WHERE oi.order_id = :order_id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':order_id', $_SESSION['cart_order_id']);
            $stmt->execute();
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }

    // Function to calculate subtotal
    function calculate_subtotal() {
        try {
            $query = "SELECT SUM(oi.quantity * p.price) AS subtotal
                      FROM order_items oi
                      JOIN products p ON oi.product_id = p.id
                      WHERE oi.order_id = :order_id";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':order_id', $_SESSION['cart_order_id']);
            $stmt->execute();
            return $stmt->fetchColumn();
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }

    // Function to process payment
    function process_payment($amount) {
        try {
            // Process payment using a payment gateway
            // For example:
            $payment_gateway = new PayPalGateway('YOUR_PAYPAL_ID', 'YOUR_PAYPAL_SECRET');
            $response = $payment_gateway->pay($amount);
            if ($response['status'] == 'success') {
                return true;
            } else {
                return false;
            }
        } catch (Exception $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }

    // Function to save order
    function save_order($order_id, $customer_id) {
        try {
            $query = "INSERT INTO orders (id, customer_id, order_date)
                      VALUES (:order_id, :customer_id, NOW())";
            $stmt = $this->db->prepare($query);
            $stmt->bindParam(':order_id', $order_id);
            $stmt->bindParam(':customer_id', $customer_id);
            $stmt->execute();
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }

    // Function to save order items
    function save_order_items($order_id) {
        try {
            $query = "INSERT INTO order_items (id, order_id, product_id, quantity)
                      VALUES (:id, :order_id, :product_id, :quantity)";
            $stmt = $this->db->prepare($query);
            foreach ($_SESSION['cart'] as $item) {
                $stmt->bindParam(':id', $item['id']);
                $stmt->bindParam(':order_id', $order_id);
                $stmt->bindParam(':product_id', $item['product_id']);
                $stmt->bindParam(':quantity', $item['quantity']);
                $stmt->execute();
            }
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }

    // Function to complete purchase
    function complete_purchase() {
        try {
            $order_id = $this->checkout();
            if ($order_id !== false) {
                foreach ($_SESSION['cart'] as $item) {
                    $this->add_to_cart($item['product_id'], $item['quantity']);
                }
                $this->save_order($order_id, $_SESSION['customer_id']);
                $this->save_order_items($order_id);
            } else {
                return false;
            }
        } catch (PDOException $e) {
            echo 'Error: ' . $e->getMessage();
        }
    }
}


$controller = new PurchaseController();

// Add a product to cart
$controller->add_to_cart(1, 2);

// Update cart contents
if ($controller->update_cart()) {
    // Cart contents are updated
} else {
    // Cart contents could not be updated
}

// Display cart contents
/cart_contents = $controller->display_cart();

// Calculate subtotal
$sub_total = $controller->calculate_subtotal();

// Process payment
$payment_result = $controller->process_payment($sub_total);

// Save order and items
$order_id = $controller->complete_purchase();


// db.php: Database connection file
<?php
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "store";

$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}
?>

// products.php: Display all products
<?php
include 'db.php';

$sql = "SELECT * FROM products";
$result = $conn->query($sql);

if ($result->num_rows > 0) {
    // output data of each row
    while($row = $result->fetch_assoc()) {
        echo "Product ID: " . $row["id"]. " - Product Name: " . $row["name"]. " (" . $row["price"] . ")" . "<br>";
    }
} else {
    echo "0 results";
}
?>

// cart.php: Display products in cart and add product to cart
<?php
include 'db.php';

if (isset($_SESSION['cart'])) {
    // Display products in cart
    echo "Products in Cart:<br>";
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        $sql = "SELECT * FROM products WHERE id = '$product_id'";
        $result = $conn->query($sql);
        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                echo "Product Name: " . $row["name"]. ", Quantity: $quantity, Price: " . $row["price"] . "<br>";
                $total += $row["price"] * $quantity;
            }
        } else {
            echo "0 results";
        }
    }
} else {
    // Display empty cart
}

// Add product to cart
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = 1;
    } else {
        $_SESSION['cart'][$product_id]++;
    }
}

// Checkout button
if (isset($_POST['checkout'])) {
    // Process checkout logic here
}
?>

// index.php: Main page with product list and cart functionality
<?php
include 'db.php';

?>
<html>
<head>
  <title>Store</title>
</head>
<body>

<h2>Products:</h2>

<form action="cart.php" method="post">
    <?php
        // Display products
        $sql = "SELECT * FROM products";
        $result = $conn->query($sql);
        
        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                echo "<input type='hidden' name='product_id[]' value='" . $row["id"] . "'><br>";
                echo $row["name"]. " (" . $row["price"] . ")<br>";
                echo "<button name='add_to_cart'>Add to Cart</button><br>";
            }
        } else {
            echo "0 results";
        }
    ?>
</form>

<?php
// Display cart and checkout button
?>

<form action="" method="post">
    <input type="submit" name="checkout" value="Checkout">
</form>

</body>
</html>


<?php
// Initialize session
session_start();

// Define cart array to store items
$cart = array();

// Function to add item to cart
function add_item_to_cart($item_id, $quantity) {
  global $cart;
  if (!isset($cart[$item_id])) {
    $cart[$item_id] = array('quantity' => $quantity);
  } else {
    $cart[$item_id]['quantity'] += $quantity;
  }
}

// Function to update cart item quantity
function update_cart_item_quantity($item_id, $new_quantity) {
  global $cart;
  if (isset($cart[$item_id])) {
    $cart[$item_id]['quantity'] = $new_quantity;
  }
}

// Function to remove item from cart
function remove_item_from_cart($item_id) {
  global $cart;
  unset($cart[$item_id]);
}

// Function to calculate total cost of items in cart
function calculate_total_cost() {
  global $cart;
  $total = 0;
  foreach ($cart as $item_id => $item) {
    // Retrieve item price from database or a cache (e.g. using `$items = array(1 => 'Item 1' => 9.99, 2 => 'Item 2' => 19.99);`)
    $item_price = $items[$item_id];
    $total += $item_price * $item['quantity'];
  }
  return $total;
}

// Add item to cart
if (isset($_POST['add_to_cart'])) {
  $item_id = $_POST['item_id'];
  $quantity = $_POST['quantity'];
  add_item_to_cart($item_id, $quantity);
}

// Update cart item quantity
if (isset($_POST['update_quantity'])) {
  $item_id = $_POST['item_id'];
  $new_quantity = $_POST['new_quantity'];
  update_cart_item_quantity($item_id, $new_quantity);
}

// Remove item from cart
if (isset($_POST['remove_from_cart'])) {
  $item_id = $_POST['item_id'];
  remove_item_from_cart($item_id);
}
?>


<?php
// Retrieve item prices from database or a cache (e.g. using `$items = array(1 => 'Item 1' => 9.99, 2 => 'Item 2' => 19.99);`)
$items = array(
  1 => 'Item 1' => 9.99,
  2 => 'Item 2' => 19.99
);

// Retrieve item IDs from database or a cache (e.g. using `$item_ids = array(1, 2);`)
$item_ids = array(1, 2);
?>


<?php
// Array to hold items for sale
$items = array(
    'Item 1' => 10.99,
    'Item 2' => 5.99,
    'Item 3' => 7.99
);

// Function to display items for sale
function displayItems() {
    echo "<h2>Items for Sale:</h2>";
    foreach ($items as $item => $price) {
        echo "$item: \$$price <br>";
    }
}

// Function to add item to cart
function addItemToCart($itemName, $quantity) {
    global $cart;
    if (array_key_exists($itemName, $cart)) {
        $cart[$itemName] += $quantity;
    } else {
        $cart[$itemName] = $quantity;
    }
}

// Initialize cart array
$cart = array();

// Check for POST request to add item to cart
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    if (isset($_POST['item'])) {
        addItemToCart($_POST['item'], $_POST['quantity']);
    }
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase</title>
</head>
<body>
    <?php displayItems(); ?>
    <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
        <select name="item">
            <?php foreach ($items as $item => $price) { ?>
                <option value="<?php echo $item; ?>"><?php echo $item; ?></option>
            <?php } ?>
        </select>
        Quantity: <input type="number" name="quantity" />
        <button type="submit">Add to Cart</button>
    </form>

    <h2>Cart:</h2>
    <?php
    // Display items in cart
    if (!empty($cart)) {
        echo "<ul>";
        foreach ($cart as $item => $quantity) {
            echo "<li>$item: $quantity x \$$items[$item]</li>";
        }
        echo "</ul>";
    } else {
        echo "Cart is empty.";
    }

    // Display total cost
    if (!empty($cart)) {
        $total = 0;
        foreach ($cart as $item => $quantity) {
            $total += ($items[$item] * $quantity);
        }
        echo "<p>Total: \$$total</p>";
    }
    ?>
</body>
</html>


<?php

// Configuration
$db_host = 'localhost';
$db_username = 'your_username';
$db_password = 'your_password';
$db_name = 'your_database';

// Connect to database
$conn = new mysqli($db_host, $db_username, $db_password, $db_name);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add purchase
function add_purchase($user_id, $product_id, $quantity) {
  global $conn;

  // Get product price
  $sql = "SELECT price FROM products WHERE id = '$product_id'";
  $result = $conn->query($sql);
  if ($result->num_rows > 0) {
    $row = $result->fetch_assoc();
    $price = $row['price'];
    $total = $price * $quantity;

    // Add purchase to database
    $sql = "INSERT INTO purchases (user_id, product_id, quantity, total)
            VALUES ('$user_id', '$product_id', '$quantity', '$total')";
    if ($conn->query($sql) === TRUE) {
      echo "Purchase added successfully!";
    } else {
      echo "Error adding purchase: " . $conn->error;
    }
  } else {
    echo "Product not found.";
  }
}

// Function to get products
function get_products() {
  global $conn;

  // Get all products from database
  $sql = "SELECT * FROM products";
  $result = $conn->query($sql);
  if ($result->num_rows > 0) {
    while($row = $result->fetch_assoc()) {
      echo "<option value='" . $row['id'] . "'>" . $row['name'] . "</option>";
    }
  } else {
    echo "No products found.";
  }
}

// Function to get user ID
function get_user_id() {
  global $conn;

  // Get user ID from session or database (not implemented here)
  return $_SESSION['user_id']; // Replace with actual implementation
}

// Handle form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
    $user_id = get_user_id();
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Validate quantity and product ID
    if ($quantity > 0 && ctype_digit($product_id)) {
      add_purchase($user_id, $product_id, $quantity);
    } else {
      echo "Invalid input.";
    }
  }
}

?>


<?php
// Configuration file

define('ROOT', $_SERVER['DOCUMENT_ROOT'].'/project/');
define('DATABASE_FILE', 'products.txt');

function getProducts() {
    $data = array();
    if (file_exists(DATABASE_FILE)) {
        $lines = file(DATABASE_FILE, FILE_IGNORE_NEW_LINES);
        foreach ($lines as $line) {
            list($id, $name, $price) = explode(',', $line);
            $data[] = array(
                'id' => trim($id),
                'name' => trim($name),
                'price' => (float)trim($price)
            );
        }
    }

    return $data;
}
?>


<?php
// Get products from database file
$products = getProducts();

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Process purchase here
    $product_id = trim($_POST['product_id']);
    $quantity = (int)trim($_POST['quantity']);
    $price = floatval(trim($_POST['price']));
    
    if ($product_id && $quantity > 0 && $price > 0) {
        // Update product quantity and store purchase
        updateProductQuantity($product_id, -$quantity);
        
        echo 'Purchase successful!';
    } else {
        echo 'Invalid inputs. Please try again.';
    }
}

?>

<!-- Form to input product name, quantity, and price -->
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <label for="product_name">Product Name:</label>
    <select id="product_name" name="product_id">
        <?php foreach ($products as $product) : ?>
            <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?></option>
        <?php endforeach; ?>
    </select><br>

    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity"><br>

    <label for="price">Price:</label>
    <input type="number" id="price" name="price"><br>

    <button type="submit">Purchase</button>
</form>


<?php
// Update product quantity in database file
function updateProductQuantity($id, $new_quantity) {
    if (file_exists(DATABASE_FILE)) {
        $products = getProducts();
        
        foreach ($products as &$product) {
            if ($product['id'] == $id) {
                $product['quantity'] -= $new_quantity;
                break;
            }
        }

        file_put_contents(DATABASE_FILE, '');
        
        foreach ($products as $product) {
            file_put_contents(DATABASE_FILE, implode(',', array(
                $product['id'],
                $product['name'],
                $product['price']
            )) . "
", FILE_APPEND);
        }
    } else {
        // Create database file if it does not exist
        touch(DATABASE_FILE);
        
        // Add new product to database file
        file_put_contents(DATABASE_FILE, implode(',', array(
            $id,
            'Product Name',
            0
        )) . "
");
    }
}
?>


// user.php

class User {
  private $conn;

  public function __construct($db) {
    $this->conn = $db;
  }

  public function registerUser($username, $email, $password) {
    // Insert user data into database
    $query = "INSERT INTO users (username, email, password) VALUES (:username, :email, :password)";
    $stmt = $this->conn->prepare($query);
    $stmt->bindParam(':username', $username);
    $stmt->bindParam(':email', $email);
    $stmt->bindParam(':password', $password);
    return $stmt->execute();
  }

  public function loginUser($username, $password) {
    // Retrieve user data from database
    $query = "SELECT * FROM users WHERE username = :username";
    $stmt = $this->conn->prepare($query);
    $stmt->bindParam(':username', $username);
    if ($stmt->execute()) {
      $user = $stmt->fetch();
      if (password_verify($password, $user['password'])) {
        return true;
      }
    }
    return false;
  }
}


// product.php

class Product {
  private $conn;

  public function __construct($db) {
    $this->conn = $db;
  }

  public function getProducts() {
    // Retrieve all products from database
    $query = "SELECT * FROM products";
    return $stmt = $this->conn->prepare($query)->execute()->fetchAll();
  }
}


// order.php

class Order {
  private $conn;

  public function __construct($db) {
    $this->conn = $db;
  }

  public function placeOrder($user_id, $products) {
    // Insert order data into database
    $query = "INSERT INTO orders (user_id, total) VALUES (:user_id, :total)";
    $stmt = $this->conn->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':total', $total);

    // Insert order items data into database
    foreach ($products as $product) {
      $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)";
      $stmt2 = $this->conn->prepare($query);
      $stmt2->bindParam(':order_id', $order_id);
      $stmt2->bindParam(':product_id', $product['id']);
      $stmt2->bindParam(':quantity', $product['quantity']);
    }

    return array($stmt->execute(), $stmt2->execute());
  }
}


// index.php

require_once 'user.php';
require_once 'product.php';
require_once 'order.php';

$db = new PDO('mysql:host=localhost;dbname=example', 'username', 'password');

$user = new User($db);
$product = new Product($db);
$order = new Order($db);

if (isset($_POST['register'])) {
  $username = $_POST['username'];
  $email = $_POST['email'];
  $password = password_hash($_POST['password'], PASSWORD_DEFAULT);
  if ($user->registerUser($username, $email, $password)) {
    echo "User registered successfully!";
  } else {
    echo "Error registering user.";
  }
}

if (isset($_POST['login'])) {
  $username = $_POST['username'];
  $password = $_POST['password'];
  if ($user->loginUser($username, $password)) {
    echo "Logged in successfully!";
  } else {
    echo "Invalid username or password.";
  }
}

if (isset($_POST['placeOrder'])) {
  $products = array();
  foreach ($_POST['products'] as $product) {
    $products[] = array(
      'id' => $product,
      'quantity' => $_POST['quantity'][$product]
    );
  }

  if ($order->placeOrder($user_id, $products)) {
    echo "Order placed successfully!";
  } else {
    echo "Error placing order.";
  }
}

?>


// Product class (for demonstration purposes)
class Product {
    public $id;
    public $name;
    public $price;

    function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }
}

// Cart class
class Cart {
    public $items;

    function __construct() {
        $this->items = array();
    }

    // Add item to cart
    function addItem($item, $quantity) {
        if (array_key_exists($item->id, $this->items)) {
            $this->items[$item->id]['quantity'] += $quantity;
        } else {
            $this->items[$item->id] = array('product' => $item, 'quantity' => $quantity);
        }
    }

    // Update quantity of an item
    function updateQuantity($itemId, $newQuantity) {
        if (array_key_exists($itemId, $this->items)) {
            $this->items[$itemId]['quantity'] = $newQuantity;
        } else {
            throw new Exception("Item not found in cart");
        }
    }

    // Remove item from cart
    function removeItem($itemId) {
        unset($this->items[$itemId]);
    }

    // View cart contents
    function viewCart() {
        echo "Cart Contents:
";
        foreach ($this->items as $item) {
            echo "Product: " . $item['product']->name . ", Quantity: " . $item['quantity'] . "
";
        }
    }
}

// Example usage
$cart = new Cart();

$product1 = new Product(1, "Book", 10.99);
$product2 = new Product(2, "Pencil", 0.99);

$cart->addItem($product1, 3);
$cart->addItem($product2, 5);

echo "Initial cart contents:
";
$cart->viewCart();

// Update quantity of an item
$cart->updateQuantity(1, 4);

echo "
Updated cart contents after updating quantity:
";
$cart->viewCart();

// Remove an item from the cart
$cart->removeItem(2);

echo "
Cart contents after removing an item:
";
$cart->viewCart();


<?php
require_once 'db_connect.php';

// Function to generate a unique order ID
function generate_order_id() {
    return substr(uniqid(rand(), true), 0, 8);
}

// Function to get cart contents
function get_cart_contents($cart) {
    $contents = array();
    foreach ($cart as $product_id => $quantity) {
        $contents[] = array(
            'product_id' => $product_id,
            'quantity' => $quantity
        );
    }
    return $contents;
}

// Function to process a purchase
function process_purchase($order_id, $customer_name, $total) {
    // Update orders table with new order information
    $query = "INSERT INTO orders (order_id, customer_name, total)
              VALUES ('$order_id', '$customer_name', '$total')";
    mysql_query($query);

    // Get the ID of the newly created order
    $order_id = mysql_insert_id();

    // Update order_items table with new item information
    foreach ($cart as $product_id => $quantity) {
        $query = "INSERT INTO order_items (order_id, product_id, quantity, price)
                  VALUES ('$order_id', '$product_id', '$quantity', 'price')";
        mysql_query($query);
    }

    // Update stock levels in products table
    foreach ($cart as $product_id => $quantity) {
        $query = "UPDATE products SET stock_level = stock_level - '$quantity'
                  WHERE id = '$product_id'";
        mysql_query($query);
    }
}

// Function to display the cart contents
function display_cart_contents($cart) {
    echo '<h2>Cart Contents:</h2>';
    foreach ($cart as $product_id => $quantity) {
        $product_info = get_product_info($product_id);
        echo "<p>$product_info['name'] x $quantity</p>";
    }
}

// Function to display the checkout form
function display_checkout_form() {
    ?>
    <h2>Checkout:</h2>
    <form action="checkout.php" method="post">
        <label for="customer_name">Customer Name:</label>
        <input type="text" id="customer_name" name="customer_name"><br><br>
        <input type="submit" value="Proceed to Checkout">
    </form>
    <?php
}

// Function to display the success message after checkout
function display_success_message() {
    echo '<h2>Success!</h2>';
    echo '<p>Your order has been successfully processed.</p>';
}

?>


<?php
require_once 'purchase.php';

// Check if customer has submitted the form
if (isset($_POST['customer_name'])) {
    $order_id = generate_order_id();
    $cart_contents = $_SESSION['cart'];
    process_purchase($order_id, $_POST['customer_name'], calculate_total($cart_contents));
    display_success_message();
} else {
    display_checkout_form();
}

function calculate_total($cart) {
    $total = 0;
    foreach ($cart as $product_id => $quantity) {
        $product_info = get_product_info($product_id);
        $total += $product_info['price'] * $quantity;
    }
    return $total;
}
?>


<?php
require_once 'db_connect.php';

// Get the product ID from the URL parameter
$product_id = $_GET['product_id'];

// Check if product exists in the database
$query = "SELECT * FROM products WHERE id = '$product_id'";
$result = mysql_query($query);
if (mysql_num_rows($result) == 1) {
    // Get the product information
    $product_info = mysql_fetch_array($result);

    // Check if cart is already populated with this product
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = array('quantity' => 0, 'price' => $product_info['price']);
    }

    // Increment the quantity of the product in the cart
    $_SESSION['cart'][$product_id]['quantity']++;

    // Redirect to cart page
    header("Location: cart.php");
} else {
    echo "Product not found!";
}
?>


<?php
require_once 'db_connect.php';

// Get the cart contents from the session
$cart = $_SESSION['cart'];

display_cart_contents($cart);
?>


<?php

// Database connection settings
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "store";

// Create database connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to get all products from database
function getProducts() {
    global $conn;
    $query = "SELECT * FROM products";
    $result = $conn->query($query);
    return $result;
}

// Function to add a new order to the database
function addOrder($customer_id, $product_id, $quantity) {
    global $conn;
    $total_price = getProductIdPrice($product_id) * $quantity;
    $query = "INSERT INTO orders (customer_id, product_id, quantity, total_price) VALUES ('$customer_id', '$product_id', '$quantity', '$total_price')";
    $result = $conn->query($query);
    return $result;
}

// Function to get the price of a specific product
function getProductIdPrice($id) {
    global $conn;
    $query = "SELECT price FROM products WHERE id='$id'";
    $result = $conn->query($query);
    if ($row = $result->fetch_assoc()) {
        return $row['price'];
    } else {
        return 0;
    }
}

// Check if the user has submitted the form
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Get customer information from form data
    $name = $_POST['name'];
    $email = $_POST['email'];
    $address = $_POST['address'];

    // Add new customer to database
    $query = "INSERT INTO customers (name, email, address) VALUES ('$name', '$email', '$address')";
    $result = $conn->query($query);

    // Get the ID of the newly added customer
    $customer_id = $conn->insert_id;

    // Check if a product has been selected for purchase
    if (isset($_POST['product_id'])) {
        // Add new order to database
        addOrder($customer_id, $_POST['product_id'], 1);

        echo "Thank you for your purchase! Your order ID is: " . $conn->insert_id;
    } else {
        echo "Please select a product to purchase.";
    }
}

// Get all products from database and display them in the form
$products = getProducts();
?>

<!DOCTYPE html>
<html>
<head>
    <title>Purchase</title>
</head>
<body>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    Customer Information:
    <br />
    Name: <input type="text" name="name" required />
    Email: <input type="email" name="email" required />
    Address: <textarea name="address" rows="5" cols="30"></textarea>
    <br />
    Select a product to purchase:
    <select name="product_id">
        <?php foreach ($products as $row) { ?>
            <option value="<?php echo $row['id']; ?>"><?php echo $row['name']; ?> - Price: $<?php echo number_format($row['price'], 2); ?></option>
        <?php } ?>
    </select>
    <br />
    <input type="submit" name="submit" value="Purchase" />
</form>

<?php
// Close database connection
$conn->close();
?>

</body>
</html>


// config.php: database connection settings
$db_host = 'localhost';
$db_username = 'root';
$db_password = '';
$db_name = 'store';

// Create a new instance of the PDO class
$pdo = new PDO("mysql:host=$db_host;dbname=$db_name", $db_username, $db_password);

function purchase($user_id, $product_ids, $quantities) {
  // Validate user ID and product IDs
  if (!is_int($user_id)) throw new Exception('User ID must be an integer');
  if (!is_array($product_ids)) throw new Exception('Product IDs must be an array');
  foreach ($product_ids as $id => $pid) {
    if (!is_int($id) || !is_int($pid)) throw new Exception('Invalid product ID: ' . var_export($pid, true));
  }

  // Validate quantities
  foreach (array_combine($product_ids, $quantities) as $pid => $quantity) {
    if (!is_int($quantity) || $quantity <= 0) throw new Exception('Invalid quantity for product with ID ' . $pid);
  }

  try {
    // Insert order into orders table
    $stmt = $pdo->prepare('INSERT INTO orders (user_id, total) VALUES (:user_id, :total)');
    $stmt->bindParam(':user_id', $user_id);
    $order_total = array_sum(array_combine($product_ids, $quantities));
    $stmt->bindParam(':total', $order_total);
    $stmt->execute();

    // Get the ID of the newly inserted order
    $order_id = $pdo->lastInsertId();

    // Insert order items into order_items table
    foreach (array_combine($product_ids, $quantities) as $pid => $quantity) {
      $stmt = $pdo->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');
      $stmt->bindParam(':order_id', $order_id);
      $stmt->bindParam(':product_id', $pid);
      $stmt->bindParam(':quantity', $quantity);
      $stmt->execute();
    }

    return array('success' => true, 'message' => 'Purchase successful');
  } catch (PDOException $e) {
    throw new Exception($e->getMessage());
  }
}

// Example usage:
$user_id = 1;
$product_ids = array(1, 2, 3);
$quantities = array(2, 5, 7);

try {
  $result = purchase($user_id, $product_ids, $quantities);
  print_r($result);
} catch (Exception $e) {
  echo 'Error: ' . $e->getMessage();
}


// Configuration file (db.php)
<?php
class Database {
    private $conn;

    function __construct() {
        $this->conn = new mysqli('localhost', 'username', 'password', 'database');
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
    }

    public function select($query) {
        return $this->conn->query($query);
    }

    public function insert($query, array $data) {
        foreach ($data as $field => $value) {
            $query .= '?, ';
        }
        $query = rtrim($query, ', ') . ';';
        $stmt = $this->conn->prepare($query);
        foreach ($data as $field => $value) {
            $stmt->bind_param($field === 'quantity' ? 'i' : 's', $value);
        }
        return $stmt->execute();
    }

    public function getConn() {
        return $this->conn;
    }
}

// Controller (cart.php)
<?php
class CartController {
    private $db;

    function __construct(Database $db) {
        $this->db = $db;
    }

    // Function to add product to cart
    public function addProduct($productId, $quantity) {
        try {
            if ($quantity <= 0) {
                throw new Exception('Invalid quantity');
            }
            $query = 'INSERT INTO `cart_items` (`product_id`, `quantity`) VALUES (?, ?)';
            return $this->db->insert($query, array(
                'product_id' => $productId,
                'quantity' => $quantity
            ));
        } catch (Exception $e) {
            echo $e->getMessage();
            return false;
        }
    }

    // Function to update cart items
    public function updateCart() {
        try {
            $cartItems = array();
            $query = 'SELECT * FROM `cart_items` WHERE `quantity` != 1';
            foreach ($this->db->select($query) as $row) {
                $cartItems[] = array(
                    'id' => $row['id'],
                    'product_id' => $row['product_id'],
                    'quantity' => $row['quantity']
                );
            }
            return $cartItems;
        } catch (Exception $e) {
            echo $e->getMessage();
            return false;
        }
    }

    // Function to checkout
    public function checkout() {
        try {
            $order = array(
                'customer_name' => '',
                'email' => ''
            );
            $totalCost = 0;

            $query = 'INSERT INTO `orders` (`customer_name`, `email`, `total_cost`) VALUES (?, ?, ?)';
            $this->db->insert($query, array(
                'customer_name' => $order['customer_name'],
                'email' => $order['email'],
                'total_cost' => $totalCost
            ));

            $order_id = $this->db->getConn()->insert_id;
            foreach ($cartItems as $item) {
                $query = 'INSERT INTO `order_items` (`order_id`, `product_id`, `quantity`) VALUES (?, ?, ?)';
                $this->db->insert($query, array(
                    'order_id' => $order_id,
                    'product_id' => $item['product_id'],
                    'quantity' => $item['quantity']
                ));
            }
            return true;
        } catch (Exception $e) {
            echo $e->getMessage();
            return false;
        }
    }
}

// Initialize database
$db = new Database();

// Initialize cart controller
$cartController = new CartController($db);

// Sample usage:
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['add_product'])) {
    $productId = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    if ($cartController->addProduct($productId, $quantity)) {
        echo 'Product added to cart!';
    } else {
        echo 'Error adding product to cart';
    }
}

if ($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['checkout'])) {
    $cartItems = $cartController->updateCart();
    if ($cartController->checkout()) {
        echo 'Order successfully placed!';
    } else {
        echo 'Error placing order';
    }
}


// config.php (database connection settings)
$dsn = 'mysql:host=localhost;dbname=your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
    $pdo = new PDO($dsn, $username, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

class PurchaseController
{
    private $pdo;

    public function __construct()
    {
        $this->pdo = $pdo;
    }

    // Function to add a new customer
    public function addCustomer($name, $email, $password)
    {
        $stmt = $this->pdo->prepare('INSERT INTO customers (name, email, password) VALUES (:name, :email, :password)');
        $stmt->bindParam(':name', $name);
        $stmt->bindParam(':email', $email);
        $stmt->bindParam(':password', $password);
        $stmt->execute();

        return $this->pdo->lastInsertId();
    }

    // Function to add a new product
    public function addProduct($name, $price, $description)
    {
        $stmt = $this->pdo->prepare('INSERT INTO products (name, price, description) VALUES (:name, :price, :description)');
        $stmt->bindParam(':name', $name);
        $stmt->bindParam(':price', $price);
        $stmt->bindParam(':description', $description);
        $stmt->execute();

        return $this->pdo->lastInsertId();
    }

    // Function to add a new order
    public function placeOrder($customer_id, $product_ids)
    {
        $order_date = date('Y-m-d H:i:s');
        $total = 0;

        foreach ($product_ids as $product_id) {
            $stmt = $this->pdo->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, 1)');
            $stmt->bindParam(':order_id', $customer_id);
            $stmt->bindParam(':product_id', $product_id);
            $stmt->execute();

            $total += $this->getProductPrice($product_id);
        }

        $stmt = $this->pdo->prepare('INSERT INTO orders (customer_id, order_date, total) VALUES (:customer_id, :order_date, :total)');
        $stmt->bindParam(':customer_id', $customer_id);
        $stmt->bindParam(':order_date', $order_date);
        $stmt->bindParam(':total', $total);
        $stmt->execute();

        return $this->pdo->lastInsertId();
    }

    // Function to get the price of a product
    public function getProductPrice($product_id)
    {
        $stmt = $this->pdo->prepare('SELECT price FROM products WHERE id = :id');
        $stmt->bindParam(':id', $product_id);
        $stmt->execute();

        return $stmt->fetchColumn();
    }
}

// Usage example
$purchaseController = new PurchaseController();

$customer_id = $purchaseController->addCustomer('John Doe', 'john@example.com', 'password123');
$product_ids = array(1, 2, 3);
$order_id = $purchaseController->placeOrder($customer_id, $product_ids);

echo "Order placed successfully! Order ID: $order_id";


<!DOCTYPE html>
<html>
<head>
    <title>Purchase Form</title>
</head>
<body>

<form action="" method="post">
    <label>Customer Name:</label><br/>
    <input type="text" name="customer_name"><br/>

    <label>Email:</label><br/>
    <input type="email" name="customer_email"><br/>

    <label>Password:</label><br/>
    <input type="password" name="customer_password"><br/>

    <label>Product IDs (comma-separated):</label><br/>
    <input type="text" name="product_ids"><br/>

    <button type="submit">Place Order</button>
</form>

<?php
$purchaseController = new PurchaseController();

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $customer_name = $_POST['customer_name'];
    $customer_email = $_POST['customer_email'];
    $customer_password = $_POST['customer_password'];
    $product_ids = explode(',', $_POST['product_ids']);

    $customer_id = $purchaseController->addCustomer($customer_name, $customer_email, $customer_password);
    $order_id = $purchaseController->placeOrder($customer_id, $product_ids);

    echo "Order placed successfully! Order ID: $order_id";
}
?>
</body>
</html>


<?php

// Initialize the cart array
$cart = array();

// Function to add item to cart
function add_item_to_cart($item_id, $quantity) {
  global $cart;
  
  // Check if item is already in cart
  foreach ($cart as $key => $value) {
    if ($key == $item_id) {
      // If item is already in cart, update quantity
      $cart[$key]['quantity'] += $quantity;
      break;
    }
  }

  // Add new item to cart if not already present
  if (!isset($cart[$item_id])) {
    $cart[$item_id] = array('name' => '', 'price' => 0, 'quantity' => $quantity);
  }
}

// Function to update quantity of an item in the cart
function update_item_quantity($item_id, $new_quantity) {
  global $cart;
  
  // Check if item is already in cart
  foreach ($cart as $key => $value) {
    if ($key == $item_id) {
      // Update quantity
      $cart[$item_id]['quantity'] = $new_quantity;
      break;
    }
  }
}

// Function to remove an item from the cart
function remove_item_from_cart($item_id) {
  global $cart;
  
  // Remove item from cart
  unset($cart[$item_id]);
}

// Function to calculate total cost of items in cart
function calculate_total_cost() {
  global $cart;
  
  $total_cost = 0;
  
  foreach ($cart as $key => $value) {
    $total_cost += $value['price'] * $value['quantity'];
  }
  
  return $total_cost;
}

// Function to display cart contents
function display_cart_contents() {
  global $cart;
  
  echo '<table>';
  echo '<tr><th>Item</th><th>Price</th><th>Quantity</th></tr>';
  
  foreach ($cart as $key => $value) {
    echo '<tr>';
    echo '<td>' . $value['name'] . '</td>';
    echo '<td>$' . number_format($value['price'], 2) . '</td>';
    echo '<td>' . $value['quantity'] . '</td>';
    echo '</tr>';
  }
  
  echo '</table>';
}

// Function to display cart total cost
function display_cart_total_cost() {
  global $cart;
  
  echo 'Total Cost: $' . number_format(calculate_total_cost(), 2);
}

?>


<?php

include 'cart.php';

// Assume we have a database with products and their prices
$products = array(
  1 => array('name' => 'Product A', 'price' => 9.99),
  2 => array('name' => 'Product B', 'price' => 19.99),
  3 => array('name' => 'Product C', 'price' => 29.99)
);

// Display products
echo '<h1>Products</h1>';
echo '<ul>';
foreach ($products as $key => $value) {
  echo '<li><a href="#" onclick="add_item_to_cart(' . $key . ', 1)">Add to Cart (' . $value['name'] . ' - $' . number_format($value['price'], 2) . ')</a></li>';
}
echo '</ul>';

// Display cart
echo '<h1>Cart</h1>';
display_cart_contents();
display_cart_total_cost();

?>


<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASSWORD', '');
define('DB_NAME', 'database_name');

$connection = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);

if (!$connection) {
    die("Connection failed: " . mysqli_connect_error());
}
?>


<?php
require_once 'config.php';

if (isset($_POST['name']) && isset($_POST['email']) && isset($_POST['password'])) {
    $name = $_POST['name'];
    $email = $_POST['email'];
    $password = password_hash($_POST['password'], PASSWORD_DEFAULT);

    $query = "INSERT INTO users (name, email, password) VALUES ('$name', '$email', '$password')";
    mysqli_query($connection, $query);

    header('Location: login.php');
}
?>
<form action="" method="post">
    <label for="name">Name:</label>
    <input type="text" id="name" name="name"><br><br>
    <label for="email">Email:</label>
    <input type="email" id="email" name="email"><br><br>
    <label for="password">Password:</label>
    <input type="password" id="password" name="password"><br><br>
    <input type="submit" value="Register">
</form>


<?php
require_once 'config.php';

if (isset($_POST['email']) && isset($_POST['password'])) {
    $email = $_POST['email'];
    $password = $_POST['password'];

    $query = "SELECT * FROM users WHERE email='$email'";
    $result = mysqli_query($connection, $query);

    if ($row = mysqli_fetch_assoc($result)) {
        if (password_verify($_POST['password'], $row['password'])) {
            // Login successful
            session_start();
            $_SESSION['user_id'] = $row['id'];
            header('Location: index.php');
        } else {
            echo 'Invalid password';
        }
    } else {
        echo 'User not found';
    }
}
?>
<form action="" method="post">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email"><br><br>
    <label for="password">Password:</label>
    <input type="password" id="password" name="password"><br><br>
    <input type="submit" value="Login">
</form>


<?php
require_once 'config.php';

if (isset($_SESSION['user_id'])) {
    $query = "SELECT * FROM products";
    $result = mysqli_query($connection, $query);

    echo '<h1>Products:</h1>';
    while ($row = mysqli_fetch_assoc($result)) {
        echo '<p>ID: ' . $row['id'] . ', Name: ' . $row['name'] . ', Price: ' . $row['price'] . '</p>';

        if (isset($_POST['buy-' . $row['id']])) {
            $quantity = $_POST['buy-' . $row['id']];
            $query2 = "INSERT INTO orders (user_id, product_id, quantity, total) VALUES ('" . $_SESSION['user_id'] . "', '" . $row['id'] . "', '$quantity', '" . $row['price'] * $quantity . "')";

            if (mysqli_query($connection, $query2)) {
                echo 'Item added to cart';
            } else {
                echo 'Error adding item to cart';
            }
        }
    }

    echo '<h1>Cart:</h1>';
    $query3 = "SELECT * FROM orders WHERE user_id='" . $_SESSION['user_id'] . "'";
    $result3 = mysqli_query($connection, $query3);

    while ($row3 = mysqli_fetch_assoc($result3)) {
        echo 'ID: ' . $row3['id'] . ', Product ID: ' . $row3['product_id'] . ', Quantity: ' . $row3['quantity'] . ', Total: ' . $row3['total'];
    }
}
?>
<form action="" method="post">
    <?php
        $query = "SELECT * FROM products";
        $result = mysqli_query($connection, $query);

        while ($row = mysqli_fetch_assoc($result)) {
            echo '<p>ID: ' . $row['id'] . ', Name: ' . $row['name'] . ', Price: ' . $row['price'];
            echo '<input type="submit" value="Buy" name="buy-' . $row['id'] . '">';
        }
    ?>
</form>


<?php
// Include database connection script
require_once 'db.php';

// Function to display products
function displayProducts() {
    global $conn;
    $query = "SELECT * FROM products";
    $result = mysqli_query($conn, $query);
    while ($row = mysqli_fetch_assoc($result)) {
        echo "<p>" . $row['name'] . ": $" . $row['price'] . "</p>";
    }
}

// Function to process order
function processOrder() {
    global $conn;
    // Retrieve form data
    $customerName = $_POST['customer_name'];
    $orderDate = date("Y-m-d");
    $total = 0;

    // Calculate total
    foreach ($_SESSION['cart'] as $item) {
        $productQuery = "SELECT price FROM products WHERE id=" . $item;
        $result = mysqli_query($conn, $productQuery);
        $row = mysqli_fetch_assoc($result);
        $total += $row['price'];
    }

    // Insert order into database
    $query = "INSERT INTO orders (customer_name, order_date, total) VALUES ('$customerName', '$orderDate', '$total')";
    mysqli_query($conn, $query);

    // Get the ID of the newly inserted order
    $orderId = mysqli_insert_id($conn);

    // Insert order items into database
    foreach ($_SESSION['cart'] as $item) {
        $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$orderId', '$item', 1)";
        mysqli_query($conn, $query);
    }

    // Clear cart
    unset($_SESSION['cart']);

    // Display confirmation message
    echo "<p>Order placed successfully!</p>";
}

// Check if form has been submitted
if (isset($_POST['submit'])) {
    processOrder();
} else {
    displayProducts();

    // If the user wants to add a product to their cart, retrieve its ID and quantity
    if (isset($_GET['add_to_cart'])) {
        $productId = $_GET['add_to_cart'];
        $_SESSION['cart'][] = $productId;
    }
}
?>


<?php
// Database connection settings
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "store";

// Create a new PDO instance
$conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);

// Function to add product to cart
function add_product_to_cart($product_id) {
  global $conn;
  // Get the current session user ID
  $user_id = $_SESSION['user_id'];
  
  // Check if product is already in cart
  $stmt = $conn->prepare("SELECT * FROM cart WHERE user_id = :user_id AND product_id = :product_id");
  $stmt->bindParam(":user_id", $user_id);
  $stmt->bindParam(":product_id", $product_id);
  $stmt->execute();
  
  if ($stmt->rowCount() == 0) {
    // Add product to cart
    $stmt = $conn->prepare("INSERT INTO cart (user_id, product_id) VALUES (:user_id, :product_id)");
    $stmt->bindParam(":user_id", $user_id);
    $stmt->bindParam(":product_id", $product_id);
    $stmt->execute();
  }
}

// Function to purchase products in cart
function purchase_products() {
  global $conn;
  
  // Get the current session user ID and product IDs in cart
  $user_id = $_SESSION['user_id'];
  $product_ids = array();
  
  // Retrieve product IDs from cart
  $stmt = $conn->prepare("SELECT product_id FROM cart WHERE user_id = :user_id");
  $stmt->bindParam(":user_id", $user_id);
  $stmt->execute();
  
  while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
    $product_ids[] = $row['product_id'];
  }
  
  // Update product stock levels
  foreach ($product_ids as $product_id) {
    $stmt = $conn->prepare("UPDATE products SET stock_level = stock_level - 1 WHERE id = :product_id");
    $stmt->bindParam(":product_id", $product_id);
    $stmt->execute();
  }
  
  // Remove products from cart
  $stmt = $conn->prepare("DELETE FROM cart WHERE user_id = :user_id");
  $stmt->bindParam(":user_id", $user_id);
  $stmt->execute();
}

// Check if form has been submitted
if (isset($_POST['submit'])) {
  $product_id = $_POST['product_id'];
  
  // Add product to cart and purchase products in cart
  add_product_to_cart($product_id);
  purchase_products();
  
  header("Location: index.php");
}
?>


<?php
// Include the database connection settings
include_once "purchase.php";
?>

<!-- Create a form to submit product ID -->
<form action="purchase.php" method="post">
  <input type="hidden" name="product_id" value="<?php echo $_GET['id']; ?>">
  <button type="submit" name="submit">Purchase</button>
</form>


<?php
// Database connection settings
$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'shop';

// Connect to database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to get products from database
function getProducts() {
    global $conn;
    $sql = "SELECT * FROM products";
    $result = $conn->query($sql);
    return $result;
}

// Function to add product to cart
function addToCart($productId, $quantity) {
    global $conn;
    $cartId = $_SESSION['cart_id'];
    if (!$cartId) {
        // Create new cart
        $sql = "INSERT INTO carts (customer_id) VALUES ('".$_SESSION['customer_id']."')";
        $result = $conn->query($sql);
        $cartId = $conn->insert_id;
    }
    $sql = "INSERT INTO cart_items (cart_id, product_id, quantity) VALUES ('$cartId', '$productId', '$quantity')";
    return $conn->query($sql);
}

// Function to purchase products
function purchaseProducts() {
    global $conn;
    // Get cart items
    $cartItems = $_SESSION['cart'];
    
    // Calculate total cost
    $totalCost = 0;
    foreach ($cartItems as $item) {
        $product = get_product($item['product_id']);
        $totalCost += $product['price'] * $item['quantity'];
    }
    
    // Create order
    $sql = "INSERT INTO orders (customer_id, total_cost) VALUES ('".$_SESSION['customer_id']."', '$totalCost')";
    return $conn->query($sql);
}

// Function to get product details
function get_product($productId) {
    global $conn;
    $sql = "SELECT * FROM products WHERE id = '$productId'";
    return $conn->query($sql)->fetch_assoc();
}
?>


<?php
session_start();

// Include purchase functionality file
include 'purchase.php';

// Get all products from database
$products = getProducts();

// Display product list
foreach ($products as $product) {
    echo "<div>";
    echo "<h2>" . $product['name'] . "</h2>";
    echo "<p>Price: $" . $product['price'] . "</p>";
    echo "<form action='add_to_cart.php' method='post'>";
    echo "<input type='hidden' name='product_id' value='" . $product['id'] . "'>";
    echo "<button type='submit'>Add to Cart</button>";
    echo "</form>";
    echo "</div>";
}

// Check if user is logged in
if (isset($_SESSION['customer_id'])) {
    // Display cart contents
    echo "<h2>Your Cart:</h2>";
    foreach ($_SESSION['cart'] as $item) {
        echo "<p>" . get_product($item['product_id'])['name'] . " x " . $item['quantity'] . "</p>";
    }
    
    // Create purchase button
    echo "<form action='purchase.php' method='post'>";
    echo "<button type='submit'>Purchase</button>";
    echo "</form>";
} else {
    echo "<p>Please log in to view your cart.</p>";
}
?>


<?php
// Include purchase functionality file
include 'purchase.php';

// Get product ID and quantity from form data
$productId = $_POST['product_id'];
$quantity = $_POST['quantity'];

// Add product to cart
addToCart($productId, $quantity);

// Redirect back to index page
header("Location: index.php");
exit;
?>


<?php
// ...

// Function to purchase products
function purchaseProducts() {
    global $conn;
    // Get cart items
    $cartItems = $_SESSION['cart'];
    
    // Calculate total cost
    $totalCost = 0;
    foreach ($cartItems as $item) {
        $product = get_product($item['product_id']);
        $totalCost += $product['price'] * $item['quantity'];
    }
    
    // Create order
    $sql = "INSERT INTO orders (customer_id, total_cost) VALUES ('".$_SESSION['customer_id']."', '$totalCost')";
    return $conn->query($sql);
}

// ...
?>


<?php

// Database connection settings
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "database_name";

// Create a database connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check if the connection is successful
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to add an order
function addOrder($customer_id, $total_cost) {
    // Insert a new row into the orders table
    $sql = "INSERT INTO orders (customer_id, total_cost) VALUES ('$customer_id', '$total_cost')";
    if ($conn->query($sql)) {
        echo "Order added successfully!";
    } else {
        echo "Error adding order: " . $conn->error;
    }
}

// Function to add an item to an existing order
function addItemToOrder($order_id, $product_id, $quantity) {
    // Insert a new row into the order_items table
    $sql = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$order_id', '$product_id', '$quantity')";
    if ($conn->query($sql)) {
        echo "Item added to order successfully!";
    } else {
        echo "Error adding item to order: " . $conn->error;
    }
}

// Function to get the total cost of an order
function getOrderTotal($order_id) {
    // Select the total cost from the orders table where the id matches the provided order_id
    $sql = "SELECT total_cost FROM orders WHERE id = '$order_id'";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        return $result->fetch_assoc()["total_cost"];
    } else {
        return 0;
    }
}

// Function to get the items in an order
function getOrderItems($order_id) {
    // Select all rows from the order_items table where the order_id matches the provided id
    $sql = "SELECT * FROM order_items WHERE order_id = '$order_id'";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        return $result->fetch_all();
    } else {
        return array();
    }
}

// Process a purchase
if (isset($_POST["submit"])) {
    // Get the customer's ID from the session or some other storage mechanism
    $customer_id = $_SESSION["customer_id"];

    // Get the product IDs and quantities from the form data
    $product_ids = $_POST["products"];
    $quantities = $_POST["quantities"];

    // Calculate the total cost of the order
    $total_cost = 0;
    foreach ($product_ids as $key => $value) {
        $total_cost += getProductPrice($value);
    }

    // Add an order to the database with the customer's ID and total cost
    addOrder($customer_id, $total_cost);

    // Loop through each product and quantity, adding an item to the order for each one
    foreach ($product_ids as $key => $value) {
        addItemToOrder($_SESSION["order_id"], $value, $quantities[$key]);
    }

    // Display a success message or redirect the user to a confirmation page
    echo "Purchase completed successfully!";
}

// Function to get the price of a product by ID
function getProductPrice($product_id) {
    // Select the price from the products table where the id matches the provided id
    $sql = "SELECT price FROM products WHERE id = '$product_id'";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        return $result->fetch_assoc()["price"];
    } else {
        return 0;
    }
}

?>


<?php

// Database connection settings
$dbHost = 'localhost';
$dbUsername = 'root';
$dbPassword = '';
$dbName = 'online_store';

// Connect to the database
$conn = new mysqli($dbHost, $dbUsername, $dbPassword, $dbName);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to display products
function displayProducts() {
    global $conn;
    $query = "SELECT * FROM products";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        echo "<table>";
        while ($row = $result->fetch_assoc()) {
            echo "<tr>";
            echo "<td>" . $row["id"] . "</td>";
            echo "<td>" . $row["name"] . "</td>";
            echo "<td>" . $row["price"] . "</td>";
            echo "<td><button id='" . $row["id"] . "' class='buy-button'>Buy Now</button></td>";
            echo "</tr>";
        }
        echo "</table>";
    } else {
        echo "No products available.";
    }
}

// Function to add product to cart
function addToCart($productId) {
    global $conn;
    $query = "INSERT INTO cart (product_id, user_id) VALUES ('$productId', '$_SESSION[user_id]')";
    if ($conn->query($query)) {
        echo "Product added to cart.";
    } else {
        echo "Error adding product to cart.";
    }
}

// Function to checkout
function checkout() {
    global $conn;
    // Get the products in the cart
    $query = "SELECT * FROM cart WHERE user_id = '$_SESSION[user_id]'";
    $result = $conn->query($query);
    if ($result->num_rows > 0) {
        echo "<table>";
        while ($row = $result->fetch_assoc()) {
            echo "<tr>";
            echo "<td>" . $row["product_id"] . "</td>";
            echo "<td>" . getProductDetails($row["product_id"])["name"] . "</td>";
            echo "<td>" . getProductDetails($row["product_id"])["price"] . "</td>";
            echo "</tr>";
        }
        echo "</table>";

        // Calculate the total cost
        $totalCost = 0;
        while ($row = $result->fetch_assoc()) {
            $totalCost += getProductDetails($row["product_id"])["price"];
        }

        // Display the checkout form
        echo "<form action='' method='post'>";
        echo "<input type='hidden' name='total_cost' value='" . $totalCost . "'>";
        echo "<button type='submit'>Checkout</button>";
        echo "</form>";

        if ($_SERVER["REQUEST_METHOD"] == "POST") {
            // Process the checkout form
            processCheckout();
        }
    } else {
        echo "Cart is empty.";
    }
}

// Function to get product details
function getProductDetails($productId) {
    global $conn;
    $query = "SELECT * FROM products WHERE id = '$productId'";
    $result = $conn->query($query);
    return $result->fetch_assoc();
}

// Function to process checkout
function processCheckout() {
    global $conn;
    // Get the total cost from the form
    $totalCost = $_POST["total_cost"];

    // Update the cart with the purchased products
    $query = "UPDATE cart SET purchased = '1' WHERE user_id = '$_SESSION[user_id]'";
    if ($conn->query($query)) {
        echo "Checkout successful.";
    } else {
        echo "Error processing checkout.";
    }
}

// Display the page
displayProducts();

?>


<?php

// Include the database connection settings
require_once 'purchase.php';

// Start the session
session_start();

// Check if the user is logged in
if (!isset($_SESSION["user_id"])) {
    echo "Please log in to access this feature.";
} else {
    // Display the checkout button
    echo "<button id='checkout-button'>Checkout</button>";

    // Add event listener to the checkout button
    addEventListener("click", "#checkout-button", function() {
        checkout();
    });
}
?>


<?php

// Configuration
define('DB_HOST', 'localhost');
define('DB_USERNAME', 'your_username');
define('DB_PASSWORD', 'your_password');
define('DB_NAME', 'your_database');

// Connect to database
$mysqli = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

// Check connection
if ($mysqli->connect_errno) {
    echo "Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error;
}

// Function to add product to cart
function add_to_cart($product_id, $quantity) {
    // Get product details
    $query = "SELECT price FROM products WHERE id = '$product_id'";
    $result = $mysqli->query($query);
    $row = $result->fetch_assoc();
    $price = $row['price'];

    // Add to cart
    $query = "INSERT INTO order_items (order_id, product_id, quantity) VALUES ('', '$product_id', '$quantity')";
    $mysqli->query($query);

    // Update total cost in orders table
    $query = "UPDATE orders SET total_cost = total_cost + ($price * $quantity) WHERE id = (SELECT MAX(id) FROM orders)";
    $mysqli->query($query);
}

// Function to checkout
function checkout() {
    // Get order details
    $query = "SELECT * FROM orders WHERE id = (SELECT MAX(id) FROM orders)";
    $result = $mysqli->query($query);
    $row = $result->fetch_assoc();

    // Remove items from cart
    $query = "DELETE FROM order_items WHERE order_id = '" . $row['id'] . "'";
    $mysqli->query($query);

    // Insert new order
    $query = "INSERT INTO orders (customer_name, total_cost) VALUES ('" . $_POST['name'] . "', " . $row['total_cost'] . ")";
    $mysqli->query($query);
}

// Add product to cart
if ($_SERVER['REQUEST_METHOD'] == 'GET') {
    if (isset($_GET['product_id']) && isset($_GET['quantity'])) {
        add_to_cart($_GET['product_id'], $_GET['quantity']);
        header('Location: purchase.php');
        exit;
    }
}

// Checkout
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    checkout();
    header('Location: thank_you.php');
    exit;
}
?>


<?php
// Product catalog
$products = [
    ['id' => 1, 'name' => 'Product A', 'price' => 19.99],
    ['id' => 2, 'name' => 'Product B', 'price' => 9.99],
    ['id' => 3, 'name' => 'Product C', 'price' => 29.99]
];

// Session variables to store selected products
if (!isset($_SESSION)) {
    session_start();
}

// Process form submission
if (isset($_POST['submit'])) {
    // Extract selected products from POST data
    $selectedProducts = [];
    foreach ($_POST['products'] as $productId => $isSelected) {
        if ($isSelected == 'on') {
            $selectedProducts[] = [
                'id' => $productId,
                'name' => $products[$productId - 1]['name'],
                'price' => $products[$productId - 1]['price']
            ];
        }
    }

    // Calculate total price
    $totalPrice = array_sum(array_column($selectedProducts, 'price'));

    // Process payment (for demonstration purposes, just echo the result)
    if ($totalPrice > 0) {
        echo "Payment processed successfully!";
    } else {
        echo "No products selected.";
    }
}

// Display form
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <h2>Product Selection</h2>
    <?php foreach ($products as $product): ?>
        <input type="checkbox" name="products[<?php echo $product['id']; ?>]" id="product-<?php echo $product['id']; ?>">
        <label for="product-<?php echo $product['id']; ?>"><?php echo $product['name']; ?></label><br>
    <?php endforeach; ?>
    <button type="submit" name="submit">Proceed to Payment</button>
    <input type="hidden" name="totalPrice" value="<?php echo isset($totalPrice) ? $totalPrice : 0; ?>">
</form>

<?php if (isset($_POST['submit'])): ?>
    <p>Total Price: <?php echo $totalPrice; ?></p>
<?php endif; ?>


// database connection settings
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "ecommerce";

// connect to database
$conn = new mysqli($servername, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// function to purchase a product
function purchaseProduct() {
    global $conn;

    // get user ID and product ID from session or URL parameters
    if (isset($_SESSION['user_id'])) {
        $user_id = $_SESSION['user_id'];
    } elseif (isset($_GET['user_id'])) {
        $user_id = $_GET['user_id'];
    } else {
        echo "Error: User ID not found.";
        return false;
    }

    if (isset($_SESSION['product_id'])) {
        $product_id = $_SESSION['product_id'];
    } elseif (isset($_GET['product_id'])) {
        $product_id = $_GET['product_id'];
    } else {
        echo "Error: Product ID not found.";
        return false;
    }

    // retrieve product price from database
    $query = "SELECT price FROM products WHERE id = '$product_id'";
    $result = $conn->query($query);

    if ($result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $price = $row['price'];
        }
    } else {
        echo "Error: Product not found.";
        return false;
    }

    // calculate total cost
    $quantity = isset($_SESSION['quantity']) ? $_SESSION['quantity'] : 1;
    $total_cost = $price * $quantity;

    // insert order into database
    $query = "INSERT INTO orders (user_id, product_id, quantity, total_cost) VALUES ('$user_id', '$product_id', '$quantity', '$total_cost')";
    $conn->query($query);

    // update inventory and customer balance (if applicable)
    // ...

    return true;
}

// call the purchaseProduct function
if (isset($_POST['purchase'])) {
    if (purchaseProduct()) {
        echo "Order placed successfully!";
    } else {
        echo "Error: Unable to place order.";
    }
}


<?php

// Database connection settings
$servername = "your_database";
$username = "username";
$password = "password";
$dbname = "your_database";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

$name = $_POST['name'];
$email = $_POST['email'];
$address = $_POST['address'];
$payment_method = $_POST['payment_method'];
$amount = $_POST['amount'];

// Check if amount is valid
if ($amount < 0) {
    echo "Invalid amount";
} else {
    // Process payment (e.g., via PayPal API, Stripe)
    // For simplicity, let's just insert the order into the database
    
    $sql = "INSERT INTO orders (name, email, address, payment_method, amount)
            VALUES ('$name', '$email', '$address', '$payment_method', '$amount')";
    
    if ($conn->query($sql) === TRUE) {
        echo "Order placed successfully!";
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
    }
}

$conn->close();

?>


<?php

// Initialize cart array
$cart = [];

// Function to add item to cart
function addToCart($itemId, $itemName, $itemPrice) {
  global $cart;
  if (array_key_exists($itemId, $cart)) {
    // Item already in cart, increment quantity
    $cart[$itemId]['quantity']++;
  } else {
    // New item, add it to cart
    $cart[$itemId] = ['name' => $itemName, 'price' => $itemPrice, 'quantity' => 1];
  }
}

// Function to remove item from cart
function removeFromCart($itemId) {
  global $cart;
  if (array_key_exists($itemId, $cart)) {
    unset($cart[$itemId]);
  }
}

// Function to update quantity of item in cart
function updateQuantity($itemId, $newQuantity) {
  global $cart;
  if (array_key_exists($itemId, $cart)) {
    $cart[$itemId]['quantity'] = $newQuantity;
  }
}

// Function to calculate total cost of items in cart
function calculateTotal() {
  global $cart;
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}

?>


<?php
require_once 'cart.php';

// Check if the cart session exists
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Display the cart contents
cartDisplay();

// Add items to the cart
if (isset($_POST['add_to_cart'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];

    // Check if the product is already in the cart
    foreach ($_SESSION['cart'] as $key => $value) {
        if ($value['id'] == $product_id) {
            // Increase quantity of existing item
            $_SESSION['cart'][$key]['quantity'] += $quantity;
            break;
        }
    }

    // Add new product to the cart if not already present
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = array('id' => $product_id, 'quantity' => $quantity);
    }

    header('Location: index.php');
}

// Remove items from the cart
if (isset($_POST['remove_from_cart'])) {
    $product_id = $_POST['product_id'];

    // Check if the product is in the cart
    foreach ($_SESSION['cart'] as $key => $value) {
        if ($value['id'] == $product_id) {
            unset($_SESSION['cart'][$key]);
            break;
        }
    }

    header('Location: index.php');
}

// Update quantity of items in the cart
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['quantity'];

    // Check if the product is in the cart
    foreach ($_SESSION['cart'] as $key => $value) {
        if ($value['id'] == $product_id) {
            $_SESSION['cart'][$key]['quantity'] = $new_quantity;
            break;
        }
    }

    header('Location: index.php');
}
?>
<!DOCTYPE html>
<html>
<head>
    <title>Cart</title>
</head>
<body>
    <h1>Cart Contents:</h1>

    <?php cartDisplay(); ?>

    <form action="" method="post">
        <label for="product_id">Product ID:</label>
        <input type="text" id="product_id" name="product_id"><br><br>
        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity"><br><br>

        <!-- Add item to cart button -->
        <input type="submit" value="Add to Cart" name="add_to_cart">
    </form>

    <?php
    // Display remove and update buttons for each item in the cart
    foreach ($_SESSION['cart'] as $product) {
        ?>
        <h2>Product ID: <?= $product['id']; ?></h2>
        Quantity: <?= $product['quantity']; ?><br><br>
        <!-- Remove item from cart button -->
        <input type="submit" value="Remove from Cart" name="remove_from_cart" formaction="" product_id="<?= $product['id']; ?>">
        <!-- Update quantity of item in cart button -->
        <input type="submit" value="Update Quantity" name="update_quantity" formaction="" product_id="<?= $product['id']; ?>" quantity="<?= $product['quantity']; ?>">
    <?php } ?>
</body>
</html>


<?php
function cartDisplay() {
    // Display the contents of the cart
    foreach ($_SESSION['cart'] as $product) {
        echo '<h2>Product ID: ' . $product['id'] . '</h2>';
        echo 'Quantity: ' . $product['quantity'] . '<br><br>';
    }
}
?>


<?php
session_start();

// Check if user is already logged in
if (isset($_SESSION['logged_in'])) {
    header('Location: index.php');
    exit;
}

// Handle login form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = $_POST['username'];
    $password = $_POST['password'];

    // Query database for user
    $query = "SELECT * FROM users WHERE username = '$username'";
    $result = mysqli_query($conn, $query);

    if (mysqli_num_rows($result) === 1) {
        $user = mysqli_fetch_assoc($result);
        if (password_verify($password, $user['password_hash'])) {
            $_SESSION['logged_in'] = true;
            header('Location: index.php');
            exit;
        } else {
            echo "Invalid password";
        }
    } else {
        echo "User not found";
    }
}

// Display login form
?>
<form method="post">
    <input type="text" name="username" placeholder="Username">
    <input type="password" name="password" placeholder="Password">
    <button type="submit">Login</button>
</form>


<?php
session_start();

// Check if user is logged in
if (!isset($_SESSION['logged_in'])) {
    header('Location: login.php');
    exit;
}

// Display products for sale
$query = "SELECT * FROM products";
$result = mysqli_query($conn, $query);

?>
<table>
    <tr>
        <th>Product Name</th>
        <th>Price</th>
        <th>Purchase</th>
    </tr>
    <?php foreach ($result as $product) : ?>
    <tr>
        <td><?= $product['name'] ?></td>
        <td>$<?= number_format($product['price'], 2) ?></td>
        <td><button type="submit" onclick="buyProduct(<?= $product['id'] ?>)">Buy</button></td>
    </tr>
    <?php endforeach; ?>
</table>

<script>
function buyProduct(productId) {
    // Call JavaScript function to process payment
    // For example, using Stripe.js
    stripe.confirmCardPayment('paymentIntentId', {amount: <?= $product['price'] ?>});
}
</script>


<?php
session_start();

// Check if user is logged in
if (!isset($_SESSION['logged_in'])) {
    header('Location: login.php');
    exit;
}

// Get product ID from query string
$productId = $_GET['id'];

// Query database for product
$query = "SELECT * FROM products WHERE id = $productId";
$result = mysqli_query($conn, $query);

if (mysqli_num_rows($result) === 1) {
    $product = mysqli_fetch_assoc($result);

    // Process payment using Stripe.js or other gateway
    stripe.processPayment($product['price']);

    // Update product quantity and user balance
    query("UPDATE products SET quantity = quantity - 1");
    query("UPDATE users SET balance = balance + $product['price']");

    header('Location: success.php');
} else {
    echo "Product not found";
}
?>


<?php
session_start();

// Display confirmation message
echo "Thank you for your purchase!";
?>


<?php
// Check if the cart is already set in the session
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add an item to the cart
function addItemToCart($id, $name, $price) {
    // Check if the item is already in the cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $id) {
            // Increase the quantity of the item
            $item['quantity'] += 1;
            return;
        }
    }

    // Add new item to the cart
    $_SESSION['cart'][] = array('id' => $id, 'name' => $name, 'price' => $price, 'quantity' => 1);
}

// Function to update an item in the cart
function updateItemInCart($id, $newQuantity) {
    // Find the index of the item in the cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $id) {
            // Update the quantity of the item
            $item['quantity'] = $newQuantity;
            return;
        }
    }

    // Item not found, do nothing
}

// Function to remove an item from the cart
function removeItemFromCart($id) {
    // Find the index of the item in the cart
    foreach (array_keys($_SESSION['cart']) as $index) {
        if ($_SESSION['cart'][$index]['id'] == $id) {
            // Remove the item from the cart
            unset($_SESSION['cart'][$index]);
            return;
        }
    }

    // Item not found, do nothing
}

// Function to calculate the total cost of the cart items
function calculateTotalCost() {
    $totalCost = 0;

    foreach ($_SESSION['cart'] as &$item) {
        $totalCost += $item['price'] * $item['quantity'];
    }

    return $totalCost;
}


<?php
// Include the cart functionality file
include 'cart.php';

// Display the shopping cart
?>

<h1>Shopping Cart</h1>

<form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
    <input type="hidden" name="action" value="add">
    <input type="text" name="id" placeholder="Product ID">
    <input type="text" name="name" placeholder="Product Name">
    <input type="number" name="price" placeholder="Price">
    <button type="submit">Add to Cart</button>
</form>

<?php
// Display the cart items
foreach ($_SESSION['cart'] as $item) {
    ?>
    <p>
        <?php echo $item['name']; ?> x <?php echo $item['quantity']; ?>
        = <?php echo $item['price'] * $item['quantity']; ?>
    </p>
    <?php
}

// Display the total cost of the cart items
?>

<p>Total Cost: <?php echo calculateTotalCost(); ?></p>

<?php
// Handle add item to cart form submission
if (isset($_POST['action']) && $_POST['action'] == 'add') {
    addItemToCart($_POST['id'], $_POST['name'], $_POST['price']);
}

// Handle remove item from cart link click
?>

<a href="<?php echo $_SERVER['PHP_SELF']; ?>?remove=<?php echo $_GET['id']; ?>">Remove</a>

<?php
// Remove item from cart if the remove link was clicked
if (isset($_GET['remove'])) {
    removeItemFromCart($_GET['remove']);
}
?>


<?php
// Define the cart array to store items
$cart = array();

// Function to add item to cart
function add_item_to_cart($item_id, $quantity) {
    global $cart;
    
    // Check if item already exists in cart
    foreach ($cart as &$item) {
        if ($item['id'] == $item_id) {
            // If item exists, increment quantity
            $item['quantity'] += $quantity;
            return;
        }
    }
    
    // If item does not exist, add it to cart
    $cart[] = array('id' => $item_id, 'quantity' => $quantity);
}

// Function to remove item from cart
function remove_item_from_cart($item_id) {
    global $cart;
    
    // Find index of item in cart
    foreach ($cart as &$item) {
        if ($item['id'] == $item_id) {
            // Remove item from cart
            unset($item);
            return;
        }
    }
}

// Function to update quantity of item in cart
function update_item_quantity($item_id, $new_quantity) {
    global $cart;
    
    // Find index of item in cart
    foreach ($cart as &$item) {
        if ($item['id'] == $item_id) {
            // Update quantity
            $item['quantity'] = $new_quantity;
            return;
        }
    }
}

// Function to display cart contents
function display_cart() {
    global $cart;
    
    echo "<h2>Cart Contents:</h2>";
    echo "<table border='1'>";
    echo "<tr><th>Item ID</th><th>Quantity</th></tr>";
    
    foreach ($cart as $item) {
        echo "<tr><td>" . $item['id'] . "</td><td>" . $item['quantity'] . "</td></tr>";
    }
    
    echo "</table>";
}

// Function to calculate total cost of cart
function calculate_total_cost() {
    global $cart;
    
    $total_cost = 0;
    
    // Assume item prices are stored in an array (replace with actual data)
    $item_prices = array(
        'item1' => 9.99,
        'item2' => 19.99,
        'item3' => 29.99
    );
    
    foreach ($cart as $item) {
        $total_cost += $item['quantity'] * $item_prices[$item['id']];
    }
    
    return $total_cost;
}

// Test the functions
add_item_to_cart('item1', 2);
add_item_to_cart('item2', 3);
display_cart();
echo "<p>Total Cost: $" . calculate_total_cost() . "</p>";
remove_item_from_cart('item2');
update_item_quantity('item1', 4);
display_cart();
echo "<p>Total Cost: $" . calculate_total_cost() . "</p>";

?>


<?php
session_start();

// If the session doesn't exist, create it
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function add_item_to_cart($product_id) {
    global $db;
    
    // Get product details from database
    $query = "SELECT * FROM products WHERE id = '$product_id'";
    $result = mysqli_query($db, $query);
    $product = mysqli_fetch_assoc($result);

    // Check if product is already in cart
    if (in_array($product['id'], $_SESSION['cart'])) {
        echo 'Product is already in cart!';
    } else {
        // Add product to cart
        array_push($_SESSION['cart'], $product['id']);
        
        // Update session cart count
        $_SESSION['cart_count'] = count($_SESSION['cart']);
    }
}

// Function to remove item from cart
function remove_item_from_cart($product_id) {
    global $db;
    
    // Check if product is in cart
    if (in_array($product_id, $_SESSION['cart'])) {
        // Remove product from cart
        unset($_SESSION['cart'][array_search($product_id, $_SESSION['cart'])]);
        
        // Update session cart count
        $_SESSION['cart_count'] = count($_SESSION['cart']);
    }
}

// Function to update item quantity in cart
function update_item_quantity($product_id, $quantity) {
    global $db;
    
    // Check if product is in cart
    if (in_array($product_id, $_SESSION['cart'])) {
        // Get product details from database
        $query = "SELECT * FROM products WHERE id = '$product_id'";
        $result = mysqli_query($db, $query);
        $product = mysqli_fetch_assoc($result);

        // Update quantity in cart
        for ($i = 0; $i < count($_SESSION['cart']); $i++) {
            if ($_SESSION['cart'][$i] == $product_id) {
                $_SESSION['cart'][$i]['quantity'] = $quantity;
                break;
            }
        }

        // Update session cart count
        $_SESSION['cart_count'] = count($_SESSION['cart']);
    }
}

// Function to view cart contents
function view_cart_contents() {
    global $db;
    
    echo '<h2>Cart Contents:</h2>';
    echo '<table border="1">';
    echo '<tr><th>Product ID</th><th>Product Name</th><th>Quantity</th></tr>';

    foreach ($_SESSION['cart'] as $product_id) {
        // Get product details from database
        $query = "SELECT * FROM products WHERE id = '$product_id'";
        $result = mysqli_query($db, $query);
        $product = mysqli_fetch_assoc($result);

        echo '<tr>';
        echo '<td>' . $product['id'] . '</td>';
        echo '<td>' . $product['name'] . '</td>';
        // If product has quantity in cart, display it
        if (isset($_SESSION['cart'][$product_id]['quantity'])) {
            echo '<td>' . $_SESSION['cart'][$product_id]['quantity'] . '</td>';
        } else {
            echo '<td>1</td>'; // Default quantity is 1
        }
        echo '</tr>';
    }

    echo '</table>';
}

// Add items to cart
add_item_to_cart(1);
add_item_to_cart(2);

// View cart contents
view_cart_contents();

// Remove item from cart
remove_item_from_cart(1);

?>


<?php
// Initialize session data if it doesn't exist yet
if (!isset($_SESSION)) {
    session_start();
}

// Set default values for cart and total cost
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}
if (!isset($_SESSION['total_cost'])) {
    $_SESSION['total_cost'] = 0;
}

// Function to add item to cart
function addItemToCart($id, $name, $price) {
    global $_SESSION;

    // Check if the item is already in the cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $id) {
            // If it is, increment the quantity and update the total cost
            $item['quantity'] += 1;
            $_SESSION['total_cost'] -= $item['price'];
            $item['price'] = $price;
            $_SESSION['total_cost'] += $item['price'];
            return;
        }
    }

    // If not, add a new item to the cart
    array_push($_SESSION['cart'], array(
        'id' => $id,
        'name' => $name,
        'price' => $price,
        'quantity' => 1
    ));

    $_SESSION['total_cost'] += $price;
}

// Function to display cart contents
function displayCart() {
    global $_SESSION;

    echo '<h2>Cart Contents:</h2>';
    foreach ($_SESSION['cart'] as &$item) {
        echo $item['name'] . ' x ' . $item['quantity'] . ' = $' . $item['price'] * $item['quantity'] . '<br>';
    }
    echo '<p>Total Cost: $' . $_SESSION['total_cost'] . '</p>';
}

// Display cart contents
displayCart();

// Example usage:
// Add item to cart with id 1, name "Product A", and price 10.99
addItemToCart(1, 'Product A', 10.99);

?>


<?php
include 'cart.php';

// Example usage:
// Add a few items to the cart
addItemToCart(1, 'Product A', 10.99);
addItemToCart(2, 'Product B', 5.99);
addItemToCart(3, 'Product C', 7.99);

?>


// Start the session
session_start();

// Create an array to hold the cart items
$cart = $_SESSION['cart'] ?? [];


function add_to_cart($product_id, $quantity) {
    global $cart;

    // Check if the product is already in the cart
    foreach ($cart as &$item) {
        if ($item['id'] == $product_id) {
            // If it's already in the cart, increment its quantity
            $item['quantity'] += $quantity;
            return;
        }
    }

    // If not, add a new item to the cart
    $cart[] = ['id' => $product_id, 'quantity' => $quantity];
}


function update_cart_quantity($product_id, $new_quantity) {
    global $cart;

    // Find the item to update
    foreach ($cart as &$item) {
        if ($item['id'] == $product_id) {
            $item['quantity'] = $new_quantity;
            return;
        }
    }

    // If not found, add a new item to the cart with the updated quantity
    $cart[] = ['id' => $product_id, 'quantity' => $new_quantity];
}


function remove_from_cart($product_id) {
    global $cart;

    // Find the item to remove
    foreach ($cart as $key => &$item) {
        if ($item['id'] == $product_id) {
            unset($cart[$key]);
            return;
        }
    }

    // If not found, do nothing
}


function display_cart() {
    global $cart;

    echo "<h2>Cart:</h2>";
    foreach ($cart as $item) {
        echo "Product ID: $item[id] - Quantity: $item[quantity]<br>";
    }
}


function checkout() {
    global $cart;

    // Process the payment and update the database (not shown)
    echo "Checkout successful!";
}


// Start the session
session_start();

// Add some products to the cart
add_to_cart(1, 2);
add_to_cart(2, 3);

// Display the cart
display_cart();

// Update the quantity of item 1
update_cart_quantity(1, 4);

// Remove item 2 from the cart
remove_from_cart(2);

// Display the updated cart
display_cart();

// Checkout the cart
checkout();


class Cart {
  private $items;

  public function __construct() {
    $this->items = array();
  }

  /**
   * Add an item to the cart
   *
   * @param string $item_name
   * @param float $price
   * @return void
   */
  public function addItem($item_name, $price) {
    $this->items[] = array('name' => $item_name, 'price' => $price);
  }

  /**
   * Remove an item from the cart
   *
   * @param string $item_name
   * @return void
   */
  public function removeItem($item_name) {
    foreach ($this->items as $key => $item) {
      if ($item['name'] == $item_name) {
        unset($this->items[$key]);
        break;
      }
    }
  }

  /**
   * Get the total price of all items in the cart
   *
   * @return float
   */
  public function getTotalPrice() {
    $total = 0;
    foreach ($this->items as $item) {
      $total += $item['price'];
    }
    return $total;
  }

  /**
   * Display the contents of the cart
   *
   * @return string
   */
  public function displayCart() {
    $output = '<h2>Shopping Cart</h2>';
    foreach ($this->items as $item) {
      $output .= sprintf('<p>%s: $%.2f</p>', $item['name'], $item['price']);
    }
    return $output;
  }

  /**
   * Empty the cart
   *
   * @return void
   */
  public function emptyCart() {
    $this->items = array();
  }
}


$cart = new Cart();

// Add items to the cart
$cart->addItem('Apple', 1.99);
$cart->addItem('Banana', 0.50);

// Display the contents of the cart
echo $cart->displayCart();

// Remove an item from the cart
$cart->removeItem('Apple');

// Get the total price of all items in the cart
$totalPrice = $cart->getTotalPrice();
echo sprintf('Total Price: $%.2f', $totalPrice);

// Empty the cart
$cart->emptyCart();


<?php
// Initialize session variables
session_start();

// Set default values for cart and items arrays
$_SESSION['cart'] = array();
$_SESSION['items'] = array();

// Function to add item to cart
function addItemToCart($itemId, $itemName, $itemPrice) {
  // Check if item already exists in cart
  foreach ($_SESSION['cart'] as $key => $value) {
    if ($value['id'] == $itemId) {
      $_SESSION['cart'][$key]['quantity']++;
      break;
    }
  }

  // Add new item to cart if it doesn't exist
  else {
    $_SESSION['cart'][] = array('id' => $itemId, 'name' => $itemName, 'price' => $itemPrice, 'quantity' => 1);
  }
}

// Function to remove item from cart
function removeItemFromCart($itemId) {
  // Find index of item in cart array
  foreach ($_SESSION['cart'] as $key => $value) {
    if ($value['id'] == $itemId) {
      unset($_SESSION['cart'][$key]);
      break;
    }
  }

  // If no items left, reset cart and items arrays
  if (empty($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
    $_SESSION['items'] = array();
  }
}

// Function to update quantity of item in cart
function updateQuantity($itemId, $newQuantity) {
  // Find index of item in cart array
  foreach ($_SESSION['cart'] as $key => $value) {
    if ($value['id'] == $itemId) {
      $_SESSION['cart'][$key]['quantity'] = $newQuantity;
      break;
    }
  }
}

// Function to calculate total cost of items in cart
function calculateTotal() {
  $total = 0;
  foreach ($_SESSION['cart'] as $item) {
    $total += $item['price'] * $item['quantity'];
  }
  return $total;
}
?>


<?php
include 'cart.php';

// Display cart contents and total cost
echo '<h2>Cart:</h2>';
echo '<table border="1">';
echo '<tr><th>ID</th><th>Name</th><th>Price</th><th>Quantity</th></tr>';

foreach ($_SESSION['cart'] as $item) {
  echo '<tr>';
  echo '<td>' . $item['id'] . '</td>';
  echo '<td>' . $item['name'] . '</td>';
  echo '<td>$' . number_format($item['price'], 2) . '</td>';
  echo '<td>' . $item['quantity'] . '</td>';
  echo '</tr>';
}

echo '</table>';
echo 'Total: $"' . number_format(calculateTotal(), 2) . '"';

// Add buttons to add, remove and update items
if (isset($_GET['add'])) {
  addItemToCart($_GET['id'], $_GET['name'], $_GET['price']);
} elseif (isset($_GET['remove'])) {
  removeItemFromCart($_GET['id']);
} elseif (isset($_GET['update'])) {
  updateQuantity($_GET['id'], $_GET['quantity']);
}

// Display items to add to cart
echo '<h2>Items:</h2>';
echo '<table border="1">';
echo '<tr><th>ID</th><th>Name</th><th>Price</th></tr>';

foreach ($_SESSION['items'] as $item) {
  echo '<tr>';
  echo '<td>' . $item['id'] . '</td>';
  echo '<td>' . $item['name'] . '</td>';
  echo '<td>$' . number_format($item['price'], 2) . '</td>';
  echo '<td><a href="?add&id=' . $item['id'] . '&name=' . $item['name'] . '&price=' . $item['price'] . '">Add to Cart</a></td>';
  echo '</tr>';
}

echo '</table>';
?>


<?php

// Initialize session
session_start();

// Define cart array in session
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function add_item_to_cart($item_id, $quantity) {
    // Check if item already exists in cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $item_id) {
            // Increment quantity of existing item
            $item['quantity'] += $quantity;
            return;
        }
    }

    // Add new item to cart
    $_SESSION['cart'][] = array('id' => $item_id, 'quantity' => $quantity);
}

// Function to remove item from cart
function remove_item_from_cart($item_id) {
    // Find index of item in cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $item_id) {
            unset($item);
            return;
        }
    }

    // Remove empty element
    array_splice($_SESSION['cart'], array_search(false, $_SESSION['cart']), 1);
}

// Function to update quantity of item in cart
function update_item_quantity($item_id, $new_quantity) {
    // Find index of item in cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $item_id) {
            $item['quantity'] = $new_quantity;
            return;
        }
    }
}

// Function to calculate total cost of items in cart
function calculate_total_cost() {
    $total_cost = 0;

    // Iterate over each item in cart
    foreach ($_SESSION['cart'] as $item) {
        // Assume price is stored in a database or array for simplicity
        $price = get_price($item['id']);
        $total_cost += $price * $item['quantity'];
    }

    return $total_cost;
}

// Function to display cart contents
function display_cart_contents() {
    echo '<h2>Cart Contents:</h2>';
    echo '<table border="1">';
    echo '<tr><th>Item ID</th><th>Quantity</th><th>Price</th></tr>';

    // Iterate over each item in cart
    foreach ($_SESSION['cart'] as $item) {
        echo '<tr>';
        echo '<td>' . $item['id'] . '</td>';
        echo '<td>' . $item['quantity'] . '</td>';
        echo '<td>$' . get_price($item['id']) . '</td>';
        echo '</tr>';
    }

    echo '</table>';
}

// Function to process checkout
function process_checkout() {
    // Assume payment processing is handled separately for simplicity
    echo 'Thank you for your purchase!';
}

?>


<?php

// Assume price is stored in a database or array for simplicity
function get_price($item_id) {
    // Replace with actual database query or array lookup
    $prices = array(
        '1' => 9.99,
        '2' => 19.99,
        '3' => 29.99
    );
    return $prices[$item_id];
}

?>


// functions.php

function add_item_to_cart($user_id, $product_id, $quantity = 1) {
    // Check if product exists and is available in stock
    $product = get_product($product_id);
    if (!$product || $product['stock'] < $quantity) {
        return false;
    }

    // Add item to cart
    $cart_item = array(
        'cart_id' => get_cart_id($user_id),
        'product_id' => $product_id,
        'quantity' => $quantity
    );
    add_cart_item($cart_item);

    return true;
}

function view_cart_contents($user_id) {
    // Get cart items for the user
    $carts = get_carts_for_user($user_id);
    if (!$carts) {
        return array();
    }

    // Calculate total cost of cart contents
    $total_cost = 0;
    foreach ($carts as $cart_item) {
        $product = get_product($cart_item['product_id']);
        $total_cost += $product['price'] * $cart_item['quantity'];
    }

    return array(
        'cart_items' => $carts,
        'total_cost' => $total_cost
    );
}

function update_quantity($user_id, $product_id, $new_quantity) {
    // Update quantity of product in cart
    update_cart_item_quantity($user_id, $product_id, $new_quantity);
}

function remove_item_from_cart($user_id, $product_id) {
    // Remove item from cart
    delete_cart_item($user_id, $product_id);
}


// db.php

function get_product($id) {
    global $db;
    $query = "SELECT * FROM products WHERE id = :id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
}

function get_cart_id($user_id) {
    global $db;
    $query = "SELECT id FROM carts WHERE user_id = :user_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchColumn();
}

function get_carts_for_user($user_id) {
    global $db;
    $query = "SELECT ci.* FROM cart_items ci JOIN carts c ON ci.cart_id = c.id WHERE c.user_id = :user_id";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

function add_cart_item($cart_item) {
    global $db;
    $query = "INSERT INTO cart_items (cart_id, product_id, quantity) VALUES (:cart_id, :product_id, :quantity)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':cart_id', $cart_item['cart_id']);
    $stmt->bindParam(':product_id', $cart_item['product_id']);
    $stmt->bindParam(':quantity', $cart_item['quantity']);
    $stmt->execute();
}

function update_cart_item_quantity($user_id, $product_id, $new_quantity) {
    global $db;
    $query = "UPDATE cart_items SET quantity = :quantity WHERE product_id = :product_id AND cart_id = (SELECT id FROM carts WHERE user_id = :user_id)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':quantity', $new_quantity);
    $stmt->execute();
}

function delete_cart_item($user_id, $product_id) {
    global $db;
    $query = "DELETE FROM cart_items WHERE product_id = :product_id AND cart_id = (SELECT id FROM carts WHERE user_id = :user_id)";
    $stmt = $db->prepare($query);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
}


// index.php

require_once 'functions.php';
require_once 'db.php';

// ...

if (isset($_POST['add_to_cart'])) {
    $user_id = $_SESSION['user_id'];
    $product_id = $_POST['product_id'];
    $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1;

    add_item_to_cart($user_id, $product_id, $quantity);
}

if (isset($_POST['update_quantity'])) {
    $user_id = $_SESSION['user_id'];
    $product_id = $_POST['product_id'];
    $new_quantity = $_POST['new_quantity'];

    update_quantity($user_id, $product_id, $new_quantity);
}

if (isset($_POST['remove_item'])) {
    $user_id = $_SESSION['user_id'];
    $product_id = $_POST['product_id'];

    remove_item_from_cart($user_id, $product_id);
}

// ...

?>

<form action="" method="post">
    <input type="hidden" name="add_to_cart" value="1">
    <select name="product_id">
        <?php foreach (get_products() as $product): ?>
            <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?></option>
        <?php endforeach; ?>
    </select>
    <input type="number" name="quantity" value="1">
    <button type="submit">Add to Cart</button>
</form>

<?php if ($cart_contents = view_cart_contents($_SESSION['user_id'])): ?>

<form action="" method="post">
    <?php foreach ($cart_contents['cart_items'] as $cart_item): ?>
        <p>
            <?php echo $cart_item['product_name']; ?> (x<?php echo $cart_item['quantity']; ?>) - <?php echo format_price($cart_item['price'] * $cart_item['quantity']); ?>
            <button type="submit" name="remove_item" value="<?php echo $cart_item['id']; ?>">Remove</button>
        </p>
    <?php endforeach; ?>

    <p>Total: <?php echo format_price($cart_contents['total_cost']); ?></p>

    <?php if (isset($_POST['update_quantity'])): ?>
        <form action="" method="post">
            <input type="hidden" name="update_quantity" value="1">
            <select name="product_id">
                <?php foreach ($cart_contents['cart_items'] as $cart_item): ?>
                    <option value="<?php echo $cart_item['id']; ?>"><?php echo $cart_item['product_name']; ?></option>
                <?php endforeach; ?>
            </select>
            <input type="number" name="new_quantity">
            <button type="submit">Update Quantity</button>
        </form>
    <?php endif; ?>
</form>

<?php endif; ?>


class Cart {
  private $db;

  public function __construct() {
    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');
  }

  public function add($user_id, $product_id, $quantity) {
    try {
      $stmt = $this->db->prepare("INSERT INTO cart_items (cart_id, product_id, quantity, price)
        SELECT id, ?, ? * price FROM carts
        WHERE user_id = ?
          AND IFNULL(quantity, 0) + ? <= quantity");
      $stmt->execute([$product_id, $quantity, $user_id, $quantity]);
      return $this->db->lastInsertId();
    } catch (PDOException $e) {
      echo 'Error adding item to cart: ' . $e->getMessage();
    }
  }

  public function getCartItems($cart_id) {
    try {
      $stmt = $this->db->prepare("SELECT ci.id, p.name AS product_name, p.price, ci.quantity
        FROM cart_items ci
        JOIN products p ON ci.product_id = p.id
        WHERE ci.cart_id = ?");
      $stmt->execute([$cart_id]);
      return $stmt->fetchAll();
    } catch (PDOException $e) {
      echo 'Error fetching cart items: ' . $e->getMessage();
    }
  }

  public function updateQuantity($item_id, $new_quantity) {
    try {
      $stmt = $this->db->prepare("UPDATE cart_items SET quantity = ? WHERE id = ?");
      $stmt->execute([$new_quantity, $item_id]);
      return true;
    } catch (PDOException $e) {
      echo 'Error updating item quantity: ' . $e->getMessage();
    }
  }

  public function deleteItem($item_id) {
    try {
      $stmt = $this->db->prepare("DELETE FROM cart_items WHERE id = ?");
      $stmt->execute([$item_id]);
      return true;
    } catch (PDOException $e) {
      echo 'Error deleting item: ' . $e->getMessage();
    }
  }

  public function getTotalCost($cart_id) {
    try {
      $stmt = $this->db->prepare("SELECT SUM(ci.quantity * p.price) AS total_cost
        FROM cart_items ci
        JOIN products p ON ci.product_id = p.id
        WHERE ci.cart_id = ?");
      $stmt->execute([$cart_id]);
      return $stmt->fetchColumn();
    } catch (PDOException $e) {
      echo 'Error fetching total cost: ' . $e->getMessage();
    }
  }
}


class CartController {
  private $cart;

  public function __construct() {
    $this->cart = new Cart();
  }

  public function addProduct($user_id, $product_id) {
    // Validate user input and product ID
    // ...
    $quantity = $_POST['quantity'];
    $result = $this->cart->add($user_id, $product_id, $quantity);
    if ($result !== false) {
      echo 'Item added to cart successfully!';
    } else {
      echo 'Error adding item to cart.';
    }
  }

  public function viewCart() {
    // Validate user input and cart ID
    // ...
    $cart_id = $_GET['id'];
    $items = $this->cart->getCartItems($cart_id);
    echo json_encode($items); // Return JSON response for client-side rendering
  }

  public function updateQuantity($item_id, $new_quantity) {
    // Validate user input and item ID
    // ...
    $result = $this->cart->updateQuantity($item_id, $new_quantity);
    if ($result !== false) {
      echo 'Item quantity updated successfully!';
    } else {
      echo 'Error updating item quantity.';
    }
  }

  public function deleteProduct($item_id) {
    // Validate user input and item ID
    // ...
    $result = $this->cart->deleteItem($item_id);
    if ($result !== false) {
      echo 'Item deleted from cart successfully!';
    } else {
      echo 'Error deleting item.';
    }
  }

  public function getTotalCost() {
    // Validate user input and cart ID
    // ...
    $cart_id = $_GET['id'];
    $total_cost = $this->cart->getTotalCost($cart_id);
    echo json_encode(['total_cost' => $total_cost]); // Return JSON response for client-side rendering
  }
}


<?php
// Initialize cart session
if (!isset($_SESSION['cart'])) {
  $_SESSION['cart'] = array();
}

// Function to add item to cart
function addToCart($item_id, $quantity) {
  global $_SESSION;
  if (array_key_exists($item_id, $_SESSION['cart'])) {
    // If item is already in cart, increment quantity
    $_SESSION['cart'][$item_id] += $quantity;
  } else {
    // Add new item to cart with specified quantity
    $_SESSION['cart'][$item_id] = $quantity;
  }
}

// Function to update item quantity in cart
function updateItemQuantity($item_id, $new_quantity) {
  global $_SESSION;
  if (array_key_exists($item_id, $_SESSION['cart'])) {
    // Update item quantity
    $_SESSION['cart'][$item_id] = $new_quantity;
  }
}

// Function to remove item from cart
function removeFromCart($item_id) {
  global $_SESSION;
  if (array_key_exists($item_id, $_SESSION['cart'])) {
    // Remove item from cart
    unset($_SESSION['cart'][$item_id]);
  }
}

// Function to display cart contents
function displayCart() {
  global $_SESSION;
  echo "<h2>Shopping Cart</h2>";
  echo "<table border='1'>";
  echo "<tr><th>Item ID</th><th>Name</th><th>Quantity</th><th>Price</th></tr>";
  foreach ($_SESSION['cart'] as $item_id => $quantity) {
    // Display item details from database (or other data source)
    // For example:
    // $db = new PDO('sqlite:example.db');
    // $stmt = $db->prepare("SELECT * FROM products WHERE id=:id");
    // $stmt->bindParam(':id', $item_id);
    // $stmt->execute();
    // $row = $stmt->fetch();
    // echo "<tr><td>" . $item_id . "</td><td>" . $row['name'] . "</td><td>" . $quantity . "</td><td>" . $row['price'] . "</td></tr>";
  }
  echo "</table>";
}

// Display cart contents
displayCart();

// Example usage:
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="hidden" name="item_id" value="123">
  <input type="text" name="quantity" placeholder="Quantity">
  <button type="submit">Add to Cart</button>
</form>

<?php
if (isset($_POST['item_id']) && isset($_POST['quantity'])) {
  addToCart($_POST['item_id'], $_POST['quantity']);
}

// Display cart contents again after adding item
displayCart();
?>


<?php
// Initialize session
session_start();

// Cart configuration
$cart = array();
$maxItems = 10;

// Function to add item to cart
function addItemToCart($item, $quantity) {
    global $cart;
    if (array_key_exists($item['id'], $cart)) {
        // Update existing item in cart
        $cart[$item['id']]['quantity'] += $quantity;
    } else {
        // Add new item to cart
        $cart[$item['id']] = array('name' => $item['name'], 'price' => $item['price'], 'quantity' => $quantity);
    }
}

// Function to update item in cart
function updateItemInCart($itemId, $newQuantity) {
    global $cart;
    if (array_key_exists($itemId, $cart)) {
        // Update quantity of existing item in cart
        $cart[$itemId]['quantity'] = $newQuantity;
    }
}

// Function to remove item from cart
function removeItemFromCart($itemId) {
    global $cart;
    if (array_key_exists($itemId, $cart)) {
        // Remove item from cart
        unset($cart[$itemId]);
    }
}

// Display cart contents
function displayCart() {
    global $cart;
    echo "<h2>Shopping Cart</h2>";
    echo "<table border='1'>";
    echo "<tr><th>Item</th><th>Quantity</th><th>Price</th></tr>";
    foreach ($cart as $item) {
        echo "<tr><td>" . $item['name'] . "</td><td>" . $item['quantity'] . "</td><td>$" . number_format($item['price'], 2) . "</td></tr>";
    }
    echo "</table>";
}

// Check if user has added items to cart
if (isset($_POST['add'])) {
    // Get item ID and quantity from form submission
    $itemId = $_POST['id'];
    $quantity = $_POST['quantity'];
    addItemToCart(array('id' => $itemId, 'name' => $_POST['name'], 'price' => $_POST['price']), $quantity);
}

// Check if user has updated item in cart
if (isset($_POST['update'])) {
    // Get item ID and new quantity from form submission
    $itemId = $_POST['id'];
    $newQuantity = $_POST['quantity'];
    updateItemInCart($itemId, $newQuantity);
}

// Check if user has removed item from cart
if (isset($_POST['remove'])) {
    // Get item ID from form submission
    $itemId = $_POST['id'];
    removeItemFromCart($itemId);
}

// Display cart contents and add item form
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
    <label for="add-item">Add Item:</label>
    <select name="id" id="add-item">
        <?php
        // Assume we have a database or array of items to display in the select box
        $items = array(
            array('id' => 1, 'name' => 'Item 1', 'price' => 9.99),
            array('id' => 2, 'name' => 'Item 2', 'price' => 19.99),
            // Add more items here...
        );
        foreach ($items as $item) {
            echo "<option value='" . $item['id'] . "'>" . $item['name'] . "</option>";
        }
        ?>
    </select>
    <input type="number" name="quantity" id="quantity">
    <input type="submit" name="add" value="Add to Cart">
</form>

<?php
// Display cart contents and update form (if user has items in cart)
if (!empty($cart)) {
    ?>
    <h2>Shopping Cart Contents:</h2>
    <?php displayCart(); ?>

    <h2>Update Items:</h2>
    <table border='1'>
        <tr><th>Item</th><th>Quantity</th></tr>
        <?php
        foreach ($cart as $item) {
            echo "<tr>";
            echo "<td>" . $item['name'] . "</td>";
            echo "<td><input type='number' name='" . $item['id'] . "' value='" . $item['quantity'] . "'>";
            echo "<button name='update'>Update</button></td>";
            echo "</tr>";
        }
        ?>
    </table>

    <h2>Remove Item:</h2>
    <form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
        <select name="id" id="remove-item">
            <?php
            foreach ($cart as $item) {
                echo "<option value='" . $item['id'] . "'>" . $item['name'] . "</option>";
            }
            ?>
        </select>
        <button type="submit" name="remove">Remove</button>
    </form>

<?php
}
?>


// item.php
class Item {
    public $id;
    public $name;
    public $price;

    function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }
}

// cart.php
class Cart {
    private $user_id;
    private $items;

    function __construct($user_id) {
        $this->user_id = $user_id;
        $this->items = array();
    }

    // Add item to cart
    public function addItem(Item $item, $quantity) {
        if (array_key_exists($item->id, $this->items)) {
            $this->items[$item->id]->quantity += $quantity;
        } else {
            $this->items[$item->id] = new ItemInCart($item->id, $item->name, $item->price, $quantity);
        }
    }

    // Remove item from cart
    public function removeItem($item_id) {
        if (array_key_exists($item_id, $this->items)) {
            unset($this->items[$item_id]);
        }
    }

    // Update quantity of an item in cart
    public function updateQuantity($item_id, $quantity) {
        if (array_key_exists($item_id, $this->items)) {
            $this->items[$item_id]->quantity = $quantity;
        }
    }

    // Get total cost of items in cart
    public function getTotalCost() {
        $total_cost = 0;
        foreach ($this->items as $item) {
            $total_cost += $item->price * $item->quantity;
        }
        return $total_cost;
    }

    // Display all items in cart with quantities and prices
    public function displayCart() {
        echo "Your Cart:
";
        foreach ($this->items as $item) {
            echo "$item->name: $item->quantity x £$item->price = £" . ($item->price * $item->quantity) . "
";
        }
        echo "Total cost: £" . $this->getTotalCost() . "

";
    }
}

class ItemInCart {
    public $id;
    public $name;
    public $price;
    public $quantity;

    function __construct($id, $name, $price, $quantity) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
        $this->quantity = $quantity;
    }
}


// item_list.php (example items in store)
$items = array(
    new Item(1, "Apple", 0.50),
    new Item(2, "Banana", 0.25),
    new Item(3, "Orange", 0.75)
);

// user adds some items to cart
$user_id = 1; // replace with actual user ID
$cart = new Cart($user_id);
foreach ($items as $item) {
    $quantity = 2; // quantity to add for each item
    if (isset($_GET['add_item'])) {
        if ($_GET['add_item'] == $item->id) {
            $cart->addItem($item, $quantity);
        }
    }
}

// display current cart contents and total cost
$cart->displayCart();


<form action="" method="get">
    <?php foreach ($items as $item): ?>
        <input type="checkbox" name="add_item[]" value="<?php echo $item->id; ?>">
        <label for="<?php echo $item->name; ?>"><?php echo $item->name; ?> (<?php echo $item->price; ?>)</label>
    <?php endforeach; ?>
    <button type="submit">Add to Cart</button>
</form>


<form action="" method="get">
    <input type="checkbox" name="remove_item[]" value="<?php echo $item->id; ?>">
    <label for="<?php echo $item->name; ?>"><?php echo $item->name; ?></label>
</form>

<button type="submit">Remove from Cart</button>


<?php
// Initialize the cart array
$cart = [];

// Function to add item to cart
function add_to_cart($product_id, $quantity) {
  global $cart;
  if (!isset($cart[$product_id])) {
    $cart[$product_id] = ['quantity' => 0];
  }
  $cart[$product_id]['quantity'] += $quantity;
}

// Function to remove item from cart
function remove_from_cart($product_id) {
  global $cart;
  if (isset($cart[$product_id])) {
    unset($cart[$product_id]);
  }
}

// Function to update quantity in cart
function update_quantity($product_id, $new_quantity) {
  global $cart;
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $new_quantity;
  }
}

// Function to display cart contents
function display_cart() {
  global $cart;
  ?>
  <h2>Cart Contents</h2>
  <table border="1">
    <tr>
      <th>Product ID</th>
      <th>Quantity</th>
      <th>Total Price</th>
    </tr>
  <?php
  foreach ($cart as $product_id => $details) {
    // Get product details from database (e.g. price, name)
    $product = get_product_details($product_id);
    ?>
    <tr>
      <td><?= $product['name'] ?></td>
      <td><?= $details['quantity'] ?></td>
      <td><?= $details['quantity'] * $product['price'] ?></td>
    </tr>
  <?php
  }
  ?>
  </table>
  <?php
}

// Function to calculate total cost of cart contents
function calculate_total() {
  global $cart;
  $total = 0;
  foreach ($cart as $product_id => $details) {
    // Get product details from database (e.g. price, name)
    $product = get_product_details($product_id);
    $total += $details['quantity'] * $product['price'];
  }
  return $total;
}

// Example usage:
add_to_cart(1, 2); // Add 2 units of product with ID 1 to cart
display_cart(); // Display current cart contents
remove_from_cart(1); // Remove product with ID 1 from cart
update_quantity(2, 3); // Update quantity of product with ID 2 to 3 units
echo calculate_total(); // Output total cost of current cart contents

?>


<?php
// Session variables for cart data
$_SESSION['cart'] = array();

// Function to add item to cart
function addToCart($item, $quantity) {
  global $_SESSION;
  if (isset($_SESSION['cart'][$item])) {
    $_SESSION['cart'][$item] += $quantity;
  } else {
    $_SESSION['cart'][$item] = $quantity;
  }
}

// Function to remove item from cart
function removeFromCart($item) {
  global $_SESSION;
  unset($_SESSION['cart'][$item]);
}

// Function to update quantity of item in cart
function updateQuantity($item, $new_quantity) {
  global $_SESSION;
  if (isset($_SESSION['cart'][$item])) {
    $_SESSION['cart'][$item] = $new_quantity;
  }
}

// Function to calculate total cost of items in cart
function calculateTotal() {
  global $_SESSION;
  $total = 0;
  foreach ($_SESSION['cart'] as $item => $quantity) {
    // Assuming prices are stored in an array
    if (isset($prices[$item])) {
      $total += $prices[$item] * $quantity;
    }
  }
  return $total;
}

// Function to display cart contents
function displayCart() {
  global $_SESSION;
  echo '<h2>Shopping Cart</h2>';
  foreach ($_SESSION['cart'] as $item => $quantity) {
    echo '<p>' . $item . ': ' . $quantity . '</p>';
  }
}


<?php
// Include cart functions
include 'cart.php';

// Initialize session
session_start();

// Prices of items (example)
$prices = array(
  'apple' => 1.00,
  'banana' => 0.50,
  'orange' => 1.25,
);

// Display cart contents and buttons to add/remove items
displayCart();
echo '<button onclick="addToCart(\'apple\', 2)">Add Apple (2)</button>';
echo '<button onclick="removeFromCart(\'banana\')">Remove Banana</button>';

// JavaScript code to handle adding/removing items from cart
?>
<script>
function addToCart(item, quantity) {
  <?php addToCart($item, $quantity); ?>
  displayCart();
}

function removeFromCart(item) {
  <?php removeFromCart($item); ?>
  displayCart();
}
</script>


<?php
// Initialize session variables
session_start();

// Set default values for cart and items
$_SESSION['cart'] = array();
$_SESSION['total_cost'] = 0;
?>

<!-- HTML to display the cart -->
<h2>Shopping Cart</h2>
<ul>
    <?php foreach ($_SESSION['cart'] as $item_id => $item) { ?>
        <li>
            <?php echo $item['name']; ?> x <?php echo $item['quantity']; ?>
            <button class="remove-item" data-id="<?php echo $item_id; ?>">Remove</button>
        </li>
    <?php } ?>
    <p>Total Cost: <?php echo $_SESSION['total_cost']; ?></p>
</ul>

<!-- Form to add items to cart -->
<form action="cart.php" method="post">
    <label>Product Name:</label>
    <input type="text" name="product_name"><br><br>
    <label>Quantity:</label>
    <input type="number" name="quantity"><br><br>
    <button type="submit">Add to Cart</button>
</form>

<?php
// If form is submitted, add item to cart
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Get product name and quantity from form
    $product_name = $_POST['product_name'];
    $quantity = $_POST['quantity'];

    // Check if product already exists in cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['name'] == $product_name) {
            // If it does, increment quantity and update total cost
            $item['quantity'] += $quantity;
            $_SESSION['total_cost'] += (floatval($item['price']) * $quantity);
            break;
        }
    }

    // If product doesn't exist in cart, add new item
    if (!isset($_SESSION['cart'][$product_name])) {
        $_SESSION['cart'][$product_name] = array(
            'name' => $product_name,
            'price' => 0.00, // replace with actual price
            'quantity' => $quantity
        );
        $_SESSION['total_cost'] += (floatval($_SESSION['cart'][$product_name]['price']) * $quantity);
    }
}
?>

<script>
// Remove item from cart
$('.remove-item').on('click', function() {
    var id = $(this).data('id');
    delete $_SESSION['cart'][id];
    updateCart();
});

function updateCart() {
    // Update cart display and total cost
    $('.cart-list').html('');
    $.each($_SESSION['cart'], function(key, value) {
        $('.cart-list').append('<li>' + value.name + ' x ' + value.quantity + '</li>');
    });
    $('.total-cost').text('Total Cost: ' + $_SESSION['total_cost']);
}
</script>


class Product {
    private $id;
    private $name;
    private $price;

    public function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }

    public function getId() {
        return $this->id;
    }

    public function getName() {
        return $this->name;
    }

    public function getPrice() {
        return $this->price;
    }
}


class Cart {
    private $cart_items;

    public function __construct() {
        $this->cart_items = array();
    }

    public function addItem($product_id, $quantity) {
        if (isset($this->cart_items[$product_id])) {
            $this->cart_items[$product_id]['quantity'] += $quantity;
        } else {
            $this->cart_items[$product_id] = array('product' => new Product($product_id, '', 0), 'quantity' => $quantity);
        }
    }

    public function removeItem($product_id) {
        if (isset($this->cart_items[$product_id])) {
            unset($this->cart_items[$product_id]);
        }
    }

    public function getItems() {
        return $this->cart_items;
    }

    public function getTotal() {
        $total = 0;
        foreach ($this->cart_items as $item) {
            $total += $item['product']->getPrice() * $item['quantity'];
        }
        return $total;
    }
}


class CartController {
    private $cart;

    public function __construct() {
        $this->cart = new Cart();
    }

    public function addItem($product_id, $quantity) {
        $this->cart->addItem($product_id, $quantity);
    }

    public function removeItem($product_id) {
        $this->cart->removeItem($product_id);
    }

    public function getItems() {
        return $this->cart->getItems();
    }

    public function getTotal() {
        return $this->cart->getTotal();
    }
}


// index.php

require_once 'CartController.php';

$controller = new CartController();

?>
<form action="" method="post">
    <?php foreach ($controller->getItems() as $item): ?>
        <input type="hidden" name="product_id[]" value="<?= $item['product']->getId() ?>">
        <input type="number" name="quantity[]" value="<?= $item['quantity'] ?>" class="form-control">
        <span><?= $item['product']->getName() ?></span>
        <a href="#" class="btn btn-danger">Remove</a>
    <?php endforeach; ?>
    <button class="btn btn-primary">Update Cart</button>
</form>

<?php
if (isset($_POST['update'])) {
    foreach ($_POST['product_id'] as $key => $value) {
        if (isset($_POST['quantity'][$key])) {
            $controller->addItem($value, $_POST['quantity'][$key]);
        }
    }
}
?>


$controller = new CartController();
$controller->addItem(1, 2); // Add product with ID 1 and quantity 2.


$controller = new CartController();
$controller->removeItem(1);


$controller = new CartController();
echo $controller->getTotal(); // Output: Total cost of all items.


class Cart {
    private $items;

    public function __construct() {
        $this->items = array();
    }

    public function addItem($product_id, $quantity) {
        if (!isset($this->items[$product_id])) {
            $this->items[$product_id] = array('quantity' => 0);
        }
        $this->items[$product_id]['quantity'] += $quantity;
    }

    public function removeItem($product_id) {
        unset($this->items[$product_id]);
    }

    public function updateQuantity($product_id, $new_quantity) {
        if (isset($this->items[$product_id])) {
            $this->items[$product_id]['quantity'] = $new_quantity;
        }
    }

    public function getItems() {
        return $this->items;
    }

    public function getTotalCost() {
        $total_cost = 0;
        foreach ($this->items as $item) {
            $total_cost += $item['quantity'] * $this->getProductPrice($item['product_id']);
        }
        return $total_cost;
    }

    private function getProductPrice($product_id) {
        // For demonstration purposes, assume we have a static array of product prices.
        // In a real-world application, you'd fetch the price from your database or external API.
        $products = array(
            '1' => 9.99,
            '2' => 19.99,
            '3' => 29.99
        );
        return isset($products[$product_id]) ? $products[$product_id] : 0;
    }
}


class CartController {
    private $cart;

    public function __construct() {
        $this->cart = new Cart();
    }

    public function addProductToCart() {
        if (isset($_POST['product_id']) && isset($_POST['quantity'])) {
            $product_id = $_POST['product_id'];
            $quantity = (int) $_POST['quantity'];
            $this->cart->addItem($product_id, $quantity);
            echo 'Product added to cart.';
        } else {
            echo 'Invalid request.';
        }
    }

    public function viewCart() {
        $items = $this->cart->getItems();
        echo '<h2>Cart Contents:</h2>';
        foreach ($items as $item) {
            echo '<p>ID: ' . $item['product_id'] . ', Quantity: ' . $item['quantity'] . '</p>';
        }
        echo '<p>Total Cost: $' . number_format($this->cart->getTotalCost(), 2) . '</p>';
    }

    public function removeProductFromCart() {
        if (isset($_POST['product_id'])) {
            $product_id = $_POST['product_id'];
            $this->cart->removeItem($product_id);
            echo 'Product removed from cart.';
        } else {
            echo 'Invalid request.';
        }
    }

    public function updateQuantity() {
        if (isset($_POST['product_id']) && isset($_POST['new_quantity'])) {
            $product_id = $_POST['product_id'];
            $new_quantity = (int) $_POST['new_quantity'];
            $this->cart->updateQuantity($product_id, $new_quantity);
            echo 'Quantity updated.';
        } else {
            echo 'Invalid request.';
        }
    }

    public function emptyCart() {
        $this->cart = new Cart();
        echo 'Cart emptied.';
    }
}


$cartController = new CartController();
echo $cartController->viewCart();


$cartController = new CartController();
echo $cartController->removeProductFromCart();


$cartController = new CartController();
echo $cartController->updateQuantity();


$cartController = new CartController();
echo $cartController->emptyCart();


class Cart {
  private $sessionName;

  public function __construct() {
    $this->sessionName = 'cart';
  }

  // Get the current cart contents
  public function getContents() {
    $contents = $_SESSION[$this->sessionName];
    if (!$contents) {
      $contents = array();
    }
    return $contents;
  }

  // Add an item to the cart
  public function addItem($productId, $quantity = 1) {
    $contents = $this->getContents();
    if (!isset($contents[$productId])) {
      $contents[$productId] = array('product_id' => $productId, 'quantity' => $quantity);
    } else {
      $contents[$productId]['quantity'] += $quantity;
    }
    $_SESSION[$this->sessionName] = $contents;
  }

  // Remove an item from the cart
  public function removeItem($productId) {
    $contents = $this->getContents();
    if (isset($contents[$productId])) {
      unset($contents[$productId]);
    }
    $_SESSION[$this->sessionName] = $contents;
  }

  // Update the quantity of an item in the cart
  public function updateQuantity($productId, $quantity) {
    $contents = $this->getContents();
    if (isset($contents[$productId])) {
      $contents[$productId]['quantity'] = $quantity;
    }
    $_SESSION[$this->sessionName] = $contents;
  }

  // Get the total cost of items in the cart
  public function getTotalCost() {
    $contents = $this->getContents();
    $totalCost = 0;
    foreach ($contents as $item) {
      $price = getPrice($item['product_id']); // Assuming a getPrice function exists
      $totalCost += $price * $item['quantity'];
    }
    return $totalCost;
  }

  // Display the cart contents
  public function displayContents() {
    $contents = $this->getContents();
    echo '<ul>';
    foreach ($contents as $item) {
      echo '<li>Product ID: ' . $item['product_id'] . ', Quantity: ' . $item['quantity'] . '</li>';
    }
    echo '</ul>';
  }
}


// Create a new cart instance
$cart = new Cart();

// Add an item to the cart
$cart->addItem(1, 2);

// Remove an item from the cart
$cart->removeItem(1);

// Update the quantity of an item in the cart
$cart->updateQuantity(1, 3);

// Display the cart contents
$cart->displayContents();

// Get the total cost of items in the cart
echo 'Total Cost: ' . $cart->getTotalCost();


<?php
session_start();

// ... rest of your code ...
?>


<?php
// Database connection settings
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
  // Establish database connection
  $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
} catch (PDOException $e) {
  echo "Error connecting to database: " . $e->getMessage();
  exit;
}

// Function to add product to cart
function add_to_cart($user_id, $product_id, $quantity) {
  global $conn;

  // Check if product exists in cart
  $stmt = $conn->prepare("SELECT * FROM carts WHERE user_id = :user_id AND product_id = :product_id");
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
  $existing_cart_item = $stmt->fetch();

  if ($existing_cart_item) {
    // Update quantity of existing cart item
    $stmt = $conn->prepare("UPDATE carts SET quantity = :quantity WHERE user_id = :user_id AND product_id = :product_id");
    $stmt->bindParam(':quantity', $quantity);
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->execute();
  } else {
    // Add new cart item
    $stmt = $conn->prepare("INSERT INTO carts (user_id, product_id, quantity) VALUES (:user_id, :product_id, :quantity)");
    $stmt->bindParam(':user_id', $user_id);
    $stmt->bindParam(':product_id', $product_id);
    $stmt->bindParam(':quantity', $quantity);
    $stmt->execute();
  }
}

// Function to view cart contents
function view_cart($user_id) {
  global $conn;

  // Get all cart items for user
  $stmt = $conn->prepare("SELECT * FROM carts WHERE user_id = :user_id");
  $stmt->bindParam(':user_id', $user_id);
  $stmt->execute();
  $cart_items = $stmt->fetchAll();

  return $cart_items;
}

// Function to remove product from cart
function remove_from_cart($user_id, $product_id) {
  global $conn;

  // Delete cart item by user ID and product ID
  $stmt = $conn->prepare("DELETE FROM carts WHERE user_id = :user_id AND product_id = :product_id");
  $stmt->bindParam(':user_id', $user_id);
  $stmt->bindParam(':product_id', $product_id);
  $stmt->execute();
}
?>


<?php
require_once 'cart.php';

// Initialize cart variables
$cart = array();

// Check if user is logged in (for simplicity, we'll use a hardcoded example)
$user_id = 1;

// Add product to cart
if (isset($_POST['add_to_cart'])) {
  $product_id = $_POST['product_id'];
  $quantity = $_POST['quantity'];

  add_to_cart($user_id, $product_id, $quantity);
}

// View cart contents
$cart_items = view_cart($user_id);

// Remove product from cart
if (isset($_POST['remove_from_cart'])) {
  $product_id = $_POST['product_id'];
  remove_from_cart($user_id, $product_id);
}
?>

<!DOCTYPE html>
<html>
<head>
  <title>Purchase Cart</title>
</head>
<body>

  <!-- Add product to cart form -->
  <form action="" method="post">
    <input type="hidden" name="add_to_cart" value="1">
    <select name="product_id">
      <?php
      $stmt = $conn->prepare("SELECT * FROM products");
      $stmt->execute();
      $products = $stmt->fetchAll();

      foreach ($products as $product) {
        echo "<option value='{$product['id']}'>{$product['name']}</option>";
      }
      ?>
    </select>
    <input type="number" name="quantity">
    <button type="submit">Add to Cart</button>
  </form>

  <!-- View cart contents table -->
  <h2>Cart Contents:</h2>
  <table border="1">
    <?php
    foreach ($cart_items as $item) {
      echo "<tr><td>{$item['product_id']}</td><td>{$item['quantity']}</td></tr>";
    }
    ?>
  </table>

  <!-- Remove product from cart form -->
  <form action="" method="post">
    <input type="hidden" name="remove_from_cart" value="1">
    <select name="product_id">
      <?php
      foreach ($cart_items as $item) {
        echo "<option value='{$item['id']}'>{$item['product_id']}</option>";
      }
      ?>
    </select>
    <button type="submit">Remove from Cart</button>
  </form>

</body>
</html>


// Configuration
$database = array(
    'host' => 'localhost',
    'username' => 'your_username',
    'password' => 'your_password',
    'name' => 'your_database'
);

// Database connection function
function connectDB() {
    $conn = new mysqli($GLOBALS['database']['host'], $GLOBALS['database']['username'], $GLOBALS['database']['password'], $GLOBALS['database']['name']);
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error);
    }
    return $conn;
}

// Get all products
function getAllProducts($conn) {
    $sql = "SELECT * FROM products";
    $result = $conn->query($sql);
    return $result->fetch_all(MYSQLI_ASSOC);
}

// Add product to cart
function addProductToCart($user_id, $product_id, $quantity) {
    $conn = connectDB();
    $sql = "INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iii", $user_id, $product_id, $quantity);
    $result = $stmt->execute();
    return $result;
}

// Get user's cart
function getUserCart($user_id) {
    $conn = connectDB();
    $sql = "SELECT * FROM cart WHERE user_id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $user_id);
    $result = $stmt->execute();
    return $result;
}

// Update product quantity in cart
function updateProductQuantityInCart($cart_id, $new_quantity) {
    $conn = connectDB();
    $sql = "UPDATE cart SET quantity = ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ii", $new_quantity, $cart_id);
    $result = $stmt->execute();
    return $result;
}

// Example usage
$user_id = 1; // Replace with actual user ID

// Get all products
$products = getAllProducts(connectDB());
foreach ($products as $product) {
    echo $product['name'] . ' - ' . $product['price'] . '<br>';
}

// Add product to cart
$product_id = 1; // Replace with actual product ID
$new_quantity = 2;
$result = addProductToCart($user_id, $product_id, $new_quantity);
echo $result ? 'Added to cart successfully!' : 'Failed to add to cart.';

// Get user's cart
$cart = getUserCart($user_id);
if ($cart) {
    foreach ($cart as $item) {
        echo $item['name'] . ' - ' . $item['quantity'] . '<br>';
    }
} else {
    echo 'No items in cart.';
}

// Update product quantity in cart
$cart_id = 1; // Replace with actual cart ID
$new_quantity = 3;
$result = updateProductQuantityInCart($cart_id, $new_quantity);
echo $result ? 'Updated successfully!' : 'Failed to update.';


class Cart {
  private $db;

  public function __construct() {
    $this->db = new Database(); // Assuming we have a `Database` class for database connection
  }

  public function addProduct($userId, $productId) {
    $query = "INSERT INTO cart (user_id, product_id, quantity, total_price)
              VALUES (:user_id, :product_id, 1, 0)";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->bindParam(':product_id', $productId);
    return $stmt->execute();
  }

  public function updateQuantity($cartId, $newQuantity) {
    $query = "UPDATE cart SET quantity = :quantity WHERE id = :cart_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':quantity', $newQuantity);
    $stmt->bindParam(':cart_id', $cartId);
    return $stmt->execute();
  }

  public function removeProduct($cartId) {
    $query = "DELETE FROM cart WHERE id = :cart_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':cart_id', $cartId);
    return $stmt->execute();
  }

  public function getCartItems($userId) {
    $query = "SELECT * FROM cart WHERE user_id = :user_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':user_id', $userId);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }

  public function getTotalCost($cartId) {
    $query = "SELECT total_price FROM cart WHERE id = :cart_id";
    $stmt = $this->db->prepare($query);
    $stmt->bindParam(':cart_id', $cartId);
    $stmt->execute();
    return $stmt->fetchColumn();
  }

  public function placeOrder() {
    // This method will calculate the total cost, update cart items, and insert a new order into the database
    // For simplicity, we'll assume this is done elsewhere in your codebase
  }
}


$cart = new Cart();
// Add product to cart
$userId = 1;
$productId = 5;
$success = $cart->addProduct($userId, $productId);
if ($success) {
  echo "Product added to cart successfully!";
}

// Update quantity of an item in the cart
$cartId = 10;
$newQuantity = 3;
$success = $cart->updateQuantity($cartId, $newQuantity);
if ($success) {
  echo "Quantity updated successfully!";
}

// Get all items in the cart for a user
$userId = 1;
$items = $cart->getCartItems($userId);
print_r($items);

// Remove an item from the cart
$cartId = 10;
$success = $cart->removeProduct($cartId);
if ($success) {
  echo "Item removed from cart successfully!";
}


<?php
// Initialize session
session_start();

// Set default values for cart
$_SESSION['cart'] = array();
$cart = $_SESSION['cart'];

// Function to add item to cart
function add_to_cart($item_id, $quantity) {
  global $cart;
  if (array_key_exists($item_id, $cart)) {
    $cart[$item_id] += $quantity;
  } else {
    $cart[$item_id] = $quantity;
  }
}

// Function to remove item from cart
function remove_from_cart($item_id) {
  global $cart;
  unset($cart[$item_id]);
}

// Function to update quantity in cart
function update_quantity($item_id, $new_quantity) {
  global $cart;
  if (array_key_exists($item_id, $cart)) {
    $cart[$item_id] = $new_quantity;
  }
}

// Function to get total cost of items in cart
function get_total_cost() {
  global $cart;
  $total_cost = 0;
  foreach ($cart as $item_id => $quantity) {
    // Assume prices are stored in a database or an array for simplicity
    $prices = array(
      'product1' => 9.99,
      'product2' => 14.99,
      // Add more products here...
    );
    if (array_key_exists($item_id, $prices)) {
      $total_cost += $quantity * $prices[$item_id];
    }
  }
  return $total_cost;
}

// Function to display cart contents
function display_cart() {
  global $cart;
  echo '<h2>Cart Contents:</h2>';
  foreach ($cart as $item_id => $quantity) {
    // Assume product names are stored in a database or an array for simplicity
    $product_names = array(
      'product1' => 'Product 1',
      'product2' => 'Product 2',
      // Add more products here...
    );
    if (array_key_exists($item_id, $product_names)) {
      echo '<p>' . $quantity . ' x ' . $product_names[$item_id] . '</p>';
    }
  }
}
?>


<?php
require_once 'cart.php';

// Display cart contents and add item to cart form
display_cart();

echo '<form action="add_to_cart.php" method="post">';
echo '<select name="product">';
foreach (array('product1', 'product2') as $product) {
  echo '<option value="' . $product . '">' . $product . '</option>';
}
echo '</select>';
echo '<input type="number" name="quantity" min="1">';
echo '<button type="submit">Add to Cart</button>';
echo '</form>';

// Display total cost of items in cart
echo '<p>Total Cost: ' . get_total_cost() . '</p>';
?>


<?php
require_once 'cart.php';

// Get product ID and quantity from form submission
$product_id = $_POST['product'];
$quantity = (int) $_POST['quantity'];

// Add item to cart
add_to_cart($product_id, $quantity);

// Redirect back to index.php with updated cart contents
header('Location: index.php');
exit;
?>


<?php
// Initialize session
session_start();

// Define the cart array
$cart = [];

// Function to add item to cart
function add_item($product_id, $quantity) {
  global $cart;
  if (!isset($cart[$product_id])) {
    $cart[$product_id] = ['quantity' => 0, 'price' => 0];
  }
  $cart[$product_id]['quantity'] += $quantity;
}

// Function to update quantity of item in cart
function update_quantity($product_id, $new_quantity) {
  global $cart;
  if (isset($cart[$product_id])) {
    $cart[$product_id]['quantity'] = $new_quantity;
  }
}

// Function to remove item from cart
function remove_item($product_id) {
  global $cart;
  unset($cart[$product_id]);
}

// Function to get total cost of items in cart
function get_total() {
  global $cart;
  $total = 0;
  foreach ($cart as $item) {
    $total += $item['quantity'] * $item['price'];
  }
  return $total;
}

// Initialize cart with sample data
$products = [
  '1' => ['name' => 'Product A', 'price' => 19.99],
  '2' => ['name' => 'Product B', 'price' => 29.99],
  '3' => ['name' => 'Product C', 'price' => 39.99]
];

?>


<?php include_once 'cart.php'; ?>

<!-- Display cart contents -->
<h1>Cart Contents:</h1>
<table border="1">
  <tr>
    <th>Product</th>
    <th>Quantity</th>
    <th>Price</th>
    <th>Total</th>
  </tr>
  <?php foreach ($cart as $product_id => $item) { ?>
    <tr>
      <td><?php echo $products[$product_id]['name']; ?></td>
      <td><?php echo $item['quantity']; ?></td>
      <td>$<?php echo number_format($items['price'], 2); ?></td>
      <td>$<?php echo number_format($item['quantity'] * $items['price'], 2); ?></td>
    </tr>
  <?php } ?>
</table>

<!-- Add item to cart form -->
<form action="" method="post">
  <label for="product_id">Product:</label>
  <select name="product_id" id="product_id">
    <?php foreach ($products as $product_id => $item) { ?>
      <option value="<?php echo $product_id; ?>"><?php echo $item['name']; ?></option>
    <?php } ?>
  </select>

  <label for="quantity">Quantity:</label>
  <input type="number" name="quantity" id="quantity" min="1">

  <button type="submit" name="add_to_cart">Add to Cart</button>
</form>

<!-- Update quantity form -->
<form action="" method="post">
  <label for="product_id">Product:</label>
  <select name="product_id" id="product_id">
    <?php foreach ($products as $product_id => $item) { ?>
      <option value="<?php echo $product_id; ?>"><?php echo $item['name']; ?></option>
    <?php } ?>
  </select>

  <label for="new_quantity">New Quantity:</label>
  <input type="number" name="new_quantity" id="new_quantity">

  <button type="submit" name="update_quantity">Update Quantity</button>
</form>

<!-- Remove item from cart form -->
<form action="" method="post">
  <label for="product_id">Product:</label>
  <select name="product_id" id="product_id">
    <?php foreach ($products as $product_id => $item) { ?>
      <option value="<?php echo $product_id; ?>"><?php echo $item['name']; ?></option>
    <?php } ?>
  </select>

  <button type="submit" name="remove_item">Remove from Cart</button>
</form>

<!-- Display total cost of items in cart -->
<h2>Total Cost: $<?php echo number_format(get_total(), 2); ?></h2>


<?php

// Add item to cart
if (isset($_POST['add_to_cart'])) {
  add_item($_POST['product_id'], $_POST['quantity']);
}

// Update quantity of item in cart
if (isset($_POST['update_quantity'])) {
  update_quantity($_POST['product_id'], $_POST['new_quantity']);
}

// Remove item from cart
if (isset($_POST['remove_item'])) {
  remove_item($_POST['product_id']);
}

?>


<?php
// Initialize the session
session_start();

// Array to hold product information
$products = array(
    'product1' => array('name' => 'Product 1', 'price' => 9.99),
    'product2' => array('name' => 'Product 2', 'price' => 19.99),
    'product3' => array('name' => 'Product 3', 'price' => 29.99)
);

// Function to add product to cart
function add_product_to_cart($product_id) {
    // Get the current session data
    $cart = $_SESSION['cart'] ?? [];

    // Add product to cart if not already there
    if (!isset($cart[$product_id])) {
        $cart[$product_id] = 1; // default quantity is 1
    } else {
        $cart[$product_id]++;
    }

    // Update session data with new cart contents
    $_SESSION['cart'] = $cart;

    // Redirect to cart page for updated view
    header('Location: cart.php');
}

// Function to remove product from cart
function remove_product_from_cart($product_id) {
    // Get the current session data
    $cart = $_SESSION['cart'] ?? [];

    // Remove product from cart if it exists
    unset($cart[$product_id]);

    // Update session data with new cart contents
    $_SESSION['cart'] = $cart;

    // Redirect to cart page for updated view
    header('Location: cart.php');
}

// Function to update quantity of product in cart
function update_quantity_in_cart($product_id, $quantity) {
    // Get the current session data
    $cart = $_SESSION['cart'] ?? [];

    // Update quantity of product if it exists
    if (isset($cart[$product_id])) {
        $cart[$product_id] = max(1, $quantity); // ensure quantity is at least 1
    }

    // Update session data with new cart contents
    $_SESSION['cart'] = $cart;

    // Redirect to cart page for updated view
    header('Location: cart.php');
}

// Display the cart content
?>
<table>
    <tr>
        <th>Product</th>
        <th>Quantity</th>
        <th>Total</th>
    </tr>
<?php
// Get the current session data
$cart = $_SESSION['cart'] ?? [];

// Loop through each product in cart and display its details
foreach ($products as $product_id => $product) {
    if (isset($cart[$product_id])) {
        ?>
        <tr>
            <td><?php echo $product['name']; ?></td>
            <td><?php echo $cart[$product_id]; ?></td>
            <td>$<?php echo number_format($product['price'] * $cart[$product_id], 2); ?></td>
        </tr>
        <?php
    }
}
?>
</table>

<a href="#" onclick="add_product_to_cart('product1')">Add Product 1 to Cart</a> |
<a href="#" onclick="add_product_to_cart('product2')">Add Product 2 to Cart</a> |
<a href="#" onclick="remove_product_from_cart('product3')">Remove Product 3 from Cart</a>

<form action="" method="post">
    <input type="hidden" name="product_id" value="product1">
    <input type="number" name="quantity" value="2">
    <button type="submit">Update Quantity of Product 1 in Cart</button>
</form>


<?php
// Initialize session array
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function addToCart($productId) {
    global $db;
    // Check if product is in stock
    $query = "SELECT * FROM products WHERE id = '$productId'";
    $result = mysqli_query($db, $query);
    $productInfo = mysqli_fetch_assoc($result);

    // Add item to cart array if it's not already there
    if (!isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId] = 1;
    } else {
        // If product is already in cart, increment quantity
        $_SESSION['cart'][$productId]++;
    }

    // Update stock levels (optional)
    $query = "UPDATE products SET stock_level = stock_level - ".$_SESSION['cart'][$productId]." WHERE id = '$productId'";
    mysqli_query($db, $query);
}

// Function to view cart contents
function viewCart() {
    global $_SESSION;
    echo "<h2>Cart Contents:</h2>";
    echo "<table border='1'>";
    foreach ($_SESSION['cart'] as $productId => $quantity) {
        $productInfo = getProductInfo($productId);
        echo "<tr><td>" . $productInfo['name'] . "</td><td>$" . number_format($productInfo['price'] * $quantity) . "</td></tr>";
    }
    echo "</table>";
}

// Function to calculate total cost
function calculateTotal() {
    global $_SESSION;
    $total = 0;
    foreach ($_SESSION['cart'] as $productId => $quantity) {
        $productInfo = getProductInfo($productId);
        $total += $productInfo['price'] * $quantity;
    }
    return number_format($total);
}

// Function to clear cart
function clearCart() {
    global $_SESSION;
    unset($_SESSION['cart']);
}
?>


<?php
// Database connection settings
$db = mysqli_connect('localhost', 'username', 'password', 'database');

// Function to get product info
function getProductInfo($productId) {
    $query = "SELECT * FROM products WHERE id = '$productId'";
    $result = mysqli_query($db, $query);
    return mysqli_fetch_assoc($result);
}
?>


<?php
require_once 'cart.php';
require_once 'cartFunctions.php';

// Add item to cart
addToCart(1);

// View cart contents
viewCart();

// Calculate total cost
echo "Total: $" . calculateTotal();

// Clear cart
clearCart();
?>


<?php
// Initialize the cart array
$cart = [];

// Function to add item to cart
function addItemToCart($itemId, $itemName, $price) {
  global $cart;
  if (!isset($cart[$itemId])) {
    $cart[$itemId] = [
      'name' => $itemName,
      'price' => $price,
      'quantity' => 1
    ];
  } else {
    $cart[$itemId]['quantity']++;
  }
}

// Function to remove item from cart
function removeItemFromCart($itemId) {
  global $cart;
  if (isset($cart[$itemId])) {
    unset($cart[$itemId]);
  }
}

// Function to update quantity of item in cart
function updateQuantity($itemId, $newQuantity) {
  global $cart;
  if (isset($cart[$itemId]) && $newQuantity > 0) {
    $cart[$itemId]['quantity'] = $newQuantity;
  } else {
    // If new quantity is invalid, remove item from cart
    removeItemFromCart($itemId);
  }
}

// Function to calculate total cost of items in cart
function calculateTotalCost() {
  global $cart;
  $totalCost = 0;
  foreach ($cart as $item) {
    $totalCost += $item['price'] * $item['quantity'];
  }
  return $totalCost;
}

// Function to display cart contents
function displayCart() {
  global $cart;
  ?>
  <h2>Cart Contents:</h2>
  <table border="1">
    <tr>
      <th>Item</th>
      <th>Quantity</th>
      <th>Price</th>
    </tr>
  <?php
  foreach ($cart as $item) {
    ?>
    <tr>
      <td><?= $item['name'] ?></td>
      <td><?= $item['quantity'] ?></td>
      <td><?= $item['price'] ?></td>
    </tr>
  <?php
  }
  ?>
  </table>
  <p>Total Cost: <?= calculateTotalCost() ?></p>
  <?php
}

// Example usage:
addItemToCart(1, "Apple", 0.99);
addItemToCart(2, "Banana", 0.59);

displayCart();

?>


// Start session
session_start();

// Initialize cart array
$cart = array();

// Function to add item to cart
function add_item($id, $name, $price) {
  global $cart;
  if (isset($_SESSION['cart'])) {
    $cart = unserialize($_SESSION['cart']);
  }
  $cart[] = array('id' => $id, 'name' => $name, 'price' => $price);
  $_SESSION['cart'] = serialize($cart);
}

// Function to remove item from cart
function remove_item($id) {
  global $cart;
  if (isset($_SESSION['cart'])) {
    $cart = unserialize($_SESSION['cart']);
    foreach ($cart as $key => $item) {
      if ($item['id'] == $id) {
        unset($cart[$key]);
      }
    }
    $_SESSION['cart'] = serialize(array_values($cart));
  }
}

// Function to update item quantity
function update_quantity($id, $quantity) {
  global $cart;
  if (isset($_SESSION['cart'])) {
    $cart = unserialize($_SESSION['cart']);
    foreach ($cart as &$item) {
      if ($item['id'] == $id) {
        $item['quantity'] = $quantity;
      }
    }
    $_SESSION['cart'] = serialize($cart);
  }
}

// Function to display cart contents
function display_cart() {
  global $cart;
  if (isset($_SESSION['cart'])) {
    $cart = unserialize($_SESSION['cart']);
    echo "<table border='1'>";
    foreach ($cart as $item) {
      echo "<tr>";
      echo "<td>" . $item['name'] . "</td>";
      echo "<td>Price: $" . number_format($item['price'], 2) . "</td>";
      echo "<td>Quantity:</td>";
      echo "<td><input type='number' value='" . (isset($item['quantity']) ? $item['quantity'] : 1) . "'></td>";
      echo "<td><button class='remove'>Remove</button></td>";
      echo "</tr>";
    }
    echo "</table>";
  } else {
    echo "Your cart is empty!";
  }
}


<?php include 'cart.php'; ?>
<!DOCTYPE html>
<html>
<head>
  <title>Purchase Cart</title>
</head>
<body>
  <h1>Purchase Cart</h1>
  <?php display_cart(); ?>

  <form action="add_item.php" method="post">
    <input type="text" name="id" placeholder="Item ID">
    <input type="text" name="name" placeholder="Item Name">
    <input type="number" name="price" step="0.01">
    <button type="submit">Add to Cart</button>
  </form>

  <?php if (isset($_SESSION['cart'])) : ?>
    <form action="update_quantity.php" method="post">
      <input type="hidden" name="id" value="<?= $_POST['id']; ?>">
      <input type="number" name="quantity" step="1">
      <button type="submit">Update Quantity</button>
    </form>

    <?php foreach ($_SESSION['cart'] as $key => $item) : ?>
      <button class="remove" onclick="removeItem(<?= $key; ?>)">Remove Item <?= $key; ?></button>
    <?php endforeach; ?>
  <?php endif; ?>

  <script>
    function removeItem(key) {
      fetch('/remove_item.php', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({ key: key })
      });
    }
  </script>

</body>
</html>


<?php
  $id = $_POST['id'];
  $name = $_POST['name'];
  $price = floatval($_POST['price']);

  add_item($id, $name, $price);
?>


class Cart {
    private $products;

    public function __construct() {
        $this->products = array();
    }

    public function addProduct($productId, $quantity) {
        if (isset($this->products[$productId])) {
            $this->products[$productId]['quantity'] += $quantity;
        } else {
            $this->products[$productId] = array('id' => $productId, 'name' => '', 'price' => 0, 'quantity' => $quantity);
        }
    }

    public function removeProduct($productId) {
        if (isset($this->products[$productId])) {
            unset($this->products[$productId]);
        }
    }

    public function updateQuantity($productId, $newQuantity) {
        if (isset($this->products[$productId])) {
            $this->products[$productId]['quantity'] = $newQuantity;
        }
    }

    public function getProducts() {
        return $this->products;
    }
}


class Product {
    private $id;
    private $name;
    private $price;

    public function __construct($id, $name, $price) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
    }

    public function getId() {
        return $this->id;
    }

    public function getName() {
        return $this->name;
    }

    public function getPrice() {
        return $this->price;
    }
}


class CartController {
    private $cart;

    public function __construct(Cart $cart) {
        $this->cart = $cart;
    }

    public function addProduct($productId, $quantity) {
        $product = new Product($productId, '', 0);
        $this->cart->addProduct($productId, $quantity);
    }

    public function removeProduct($productId) {
        $this->cart->removeProduct($productId);
    }

    public function updateQuantity($productId, $newQuantity) {
        $this->cart->updateQuantity($productId, $newQuantity);
    }

    public function getCart() {
        return $this->cart;
    }
}


// index.php

$cart = new Cart();
$controller = new CartController($cart);

if (isset($_POST['add'])) {
    $controller->addProduct($_POST['product_id'], $_POST['quantity']);
}

if (isset($_POST['remove'])) {
    $controller->removeProduct($_POST['product_id']);
}

if (isset($_POST['update'])) {
    $controller->updateQuantity($_POST['product_id'], $_POST['new_quantity']);
}

$products = $controller->getCart()->getProducts();

?>


<form action="" method="post">
    <label>Product ID:</label>
    <input type="text" name="product_id"><br><br>
    <label>Quantity:</label>
    <input type="number" name="quantity"><br><br>
    <input type="submit" name="add" value="Add to Cart">
</form>


<?php
// session variables to store cart contents
$_SESSION['cart'] = array();

// function to add item to cart
function add_item_to_cart($product_id, $product_name, $price) {
    global $_SESSION;
    if (!isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] = array(
            'name' => $product_name,
            'price' => $price,
            'quantity' => 1
        );
    } else {
        $_SESSION['cart'][$product_id]['quantity']++;
    }
}

// function to update quantity of item in cart
function update_quantity($product_id, $new_quantity) {
    global $_SESSION;
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// function to remove item from cart
function remove_item_from_cart($product_id) {
    global $_SESSION;
    unset($_SESSION['cart'][$product_id]);
}

// function to calculate total cost of items in cart
function calculate_total_cost() {
    global $_SESSION;
    $total_cost = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total_cost += $item['price'] * $item['quantity'];
    }
    return $total_cost;
}

// function to display contents of cart
function display_cart() {
    global $_SESSION;
    echo "<h2>Cart Contents:</h2>";
    foreach ($_SESSION['cart'] as $product_id => $item) {
        echo "$item[name] x $item[quantity] = $" . ($item['price'] * $item['quantity']) . "<br>";
    }
}

// function to display cart summary
function display_cart_summary() {
    global $_SESSION;
    $total_cost = calculate_total_cost();
    echo "<h2>Cart Summary:</h2>";
    echo "Total Cost: $" . $total_cost . "<br>";
    echo "Number of Items: " . count($_SESSION['cart']) . "<br>";
}
?>


// add item to cart
add_item_to_cart(1, 'Product A', 10.99);
add_item_to_cart(2, 'Product B', 5.99);

// display cart contents
display_cart();

// update quantity of item in cart
update_quantity(1, 3);

// remove item from cart
remove_item_from_cart(2);

// display updated cart contents
display_cart();

// calculate total cost of items in cart
$total_cost = calculate_total_cost();
echo "Total Cost: $" . $total_cost;

// display cart summary
display_cart_summary();


<?php
// Initialize session
session_start();

// Set cart as array if not set before
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function add_item_to_cart($item_id, $quantity) {
    global $db;
    
    // Check if item is already in cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $item_id && $item['quantity'] < 10) { // max quantity is 10 for example
            $item['quantity'] += $quantity;
            return true; // item added successfully
        }
    }
    
    // Item not in cart, add it
    $db->query("SELECT * FROM products WHERE id = '$item_id'");
    $product = $db->fetch_array();
    
    $_SESSION['cart'][] = array(
        'id' => $item_id,
        'name' => $product['name'],
        'price' => $product['price'],
        'quantity' => $quantity
    );
    
    return true;
}

// Function to update quantity of item in cart
function update_quantity($item_id, $new_quantity) {
    global $db;
    
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $item_id) {
            $item['quantity'] = $new_quantity;
            break;
        }
    }
}

// Function to remove item from cart
function remove_item($item_id) {
    global $db;
    
    foreach ($_SESSION['cart'] as $key => &$item) {
        if ($item['id'] == $item_id) {
            unset($_SESSION['cart'][$key]);
            break;
        }
    }
}

// Function to calculate total cost of items in cart
function calculate_total() {
    global $db;
    
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $product = $db->query("SELECT * FROM products WHERE id = '$item[id]'");
        $total += $product['price'] * $item['quantity'];
    }
    
    return $total;
}

// Function to display cart contents
function display_cart() {
    global $db;
    
    echo '<table>';
    foreach ($_SESSION['cart'] as $item) {
        echo '<tr>';
        echo '<td>' . $item['name'] . '</td>';
        echo '<td>Quantity: ' . $item['quantity'] . '</td>';
        echo '<td>Price: $' . number_format($item['price'], 2) . '</td>';
        echo '</tr>';
    }
    echo '</table>';
}

// Example usage
if (isset($_GET['add'])) {
    add_item_to_cart($_GET['id'], $_GET['quantity']);
} elseif (isset($_GET['update'])) {
    update_quantity($_GET['id'], $_GET['new_quantity']);
} elseif (isset($_GET['remove'])) {
    remove_item($_GET['id']);
}

?>


<?php include 'cart.php'; ?>

<!DOCTYPE html>
<html>
<head>
    <title>Cart Example</title>
</head>
<body>

<h1>Purchase Cart</h1>

<form action="cart.php" method="get">
    <input type="hidden" name="add" value="true">
    <select name="id">
        <?php
            global $db;
            $products = $db->query("SELECT * FROM products");
            foreach ($products as $product) {
                echo '<option value="' . $product['id'] . '">' . $product['name'] . '</option>';
            }
        ?>
    </select>
    Quantity: <input type="number" name="quantity">
    <button type="submit">Add to Cart</button>
</form>

<form action="cart.php" method="get">
    <input type="hidden" name="update" value="true">
    <select name="id">
        <?php
            global $db;
            $products = $db->query("SELECT * FROM products");
            foreach ($products as $product) {
                echo '<option value="' . $product['id'] . '">' . $product['name'] . '</option>';
            }
        ?>
    </select>
    New Quantity: <input type="number" name="new_quantity">
    <button type="submit">Update Quantity</button>
</form>

<form action="cart.php" method="get">
    <input type="hidden" name="remove" value="true">
    <select name="id">
        <?php
            global $db;
            $products = $db->query("SELECT * FROM products");
            foreach ($products as $product) {
                echo '<option value="' . $product['id'] . '">' . $product['name'] . '</option>';
            }
        ?>
    </select>
    <button type="submit">Remove from Cart</button>
</form>

<h2>Cart Contents:</h2>
<?php display_cart(); ?>

<h2>Total Cost: $<?php echo number_format(calculate_total(), 2); ?></h2>

</body>
</html>


<?php
// Set session variables for cart data
session_start();

// Initialize cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function add_item_to_cart($product_id, $quantity) {
    // Check if product is already in cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $product_id) {
            $item['quantity'] += $quantity;
            return true;
        }
    }

    // Add new item to cart
    $_SESSION['cart'][] = array('id' => $product_id, 'quantity' => $quantity);
    return true;
}

// Function to remove item from cart
function remove_item_from_cart($product_id) {
    // Check if product is in cart
    foreach ($_SESSION['cart'] as $key => &$item) {
        if ($item['id'] == $product_id) {
            unset($_SESSION['cart'][$key]);
            return true;
        }
    }

    // Product not found, do nothing
    return false;
}

// Function to update item quantity in cart
function update_item_quantity($product_id, $new_quantity) {
    // Check if product is in cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $product_id) {
            $item['quantity'] = $new_quantity;
            return true;
        }
    }

    // Product not found, do nothing
    return false;
}

// Function to get total cart cost
function get_total_cart_cost() {
    $total = 0;
    foreach ($_SESSION['cart'] as &$item) {
        // Assuming product prices are stored in a database or array
        // For this example, we'll use a simple hardcoded price array
        $prices = array(
            1 => 10.99,
            2 => 9.99,
            3 => 12.99,
            // ...
        );
        $total += $item['quantity'] * $prices[$item['id']];
    }

    return $total;
}

// Example usage: add item to cart
if (isset($_GET['add_to_cart'])) {
    $product_id = $_GET['add_to_cart'];
    $quantity = 1; // Default quantity
    if (isset($_GET['quantity'])) {
        $quantity = $_GET['quantity'];
    }
    add_item_to_cart($product_id, $quantity);
}

// Example usage: remove item from cart
if (isset($_GET['remove_from_cart'])) {
    $product_id = $_GET['remove_from_cart'];
    remove_item_from_cart($product_id);
}

// Example usage: update item quantity in cart
if (isset($_POST['update_quantity'])) {
    $product_id = $_POST['update_quantity'];
    $new_quantity = $_POST['quantity'];
    update_item_quantity($product_id, $new_quantity);
}
?>


<?php include 'cart.php'; ?>

<!-- Display cart contents -->
<h2>Cart Contents</h2>
<table border="1">
  <tr>
    <th>Product ID</th>
    <th>Quantity</th>
    <th>Total Cost</th>
  </tr>
  <?php foreach ($_SESSION['cart'] as $item): ?>
  <tr>
    <td><?= $item['id']; ?></td>
    <td><?= $item['quantity']; ?></td>
    <td><?= number_format(get_total_cart_cost() / count($_SESSION['cart']), 2); ?></td>
  </tr>
  <?php endforeach; ?>
</table>

<!-- Display total cart cost -->
<h3>Total Cart Cost: <?= number_format(get_total_cart_cost(), 2); ?></h3>

<!-- Add item to cart form -->
<form action="" method="get">
  <input type="hidden" name="add_to_cart" value="<?= $_GET['product_id']; ?>">
  <label>Quantity:</label>
  <input type="number" name="quantity" value="1">
  <button type="submit">Add to Cart</button>
</form>

<!-- Remove item from cart form -->
<form action="" method="get">
  <input type="hidden" name="remove_from_cart" value="<?= $_GET['product_id']; ?>">
  <button type="submit">Remove from Cart</button>
</form>

<!-- Update item quantity in cart form -->
<form action="" method="post">
  <label>Update Quantity:</label>
  <input type="number" name="quantity" value="">
  <input type="hidden" name="update_quantity" value="<?= $_POST['product_id']; ?>">
  <button type="submit">Update Quantity</button>
</form>


// Define cart configuration constants
define('CART_SESSION_NAME', 'cart');


function cartSessionCreate() {
    // Create a new cart session if it doesn't exist
    if (!isset($_SESSION[CART_SESSION_NAME])) {
        $_SESSION[CART_SESSION_NAME] = array();
    }
}

function cartSessionDestroy() {
    // Destroy the cart session
    unset($_SESSION[CART_SESSION_NAME]);
}


function cartAddProduct($id, $quantity) {
    // Add a product to the cart
    if (isset($_SESSION[CART_SESSION_NAME][$id])) {
        $_SESSION[CART_SESSION_NAME][$id]['quantity'] += $quantity;
    } else {
        $_SESSION[CART_SESSION_NAME][$id] = array('product_id' => $id, 'quantity' => $quantity);
    }
}

function cartRemoveProduct($id) {
    // Remove a product from the cart
    if (isset($_SESSION[CART_SESSION_NAME][$id])) {
        unset($_SESSION[CART_SESSION_NAME][$id]);
    }
}

function cartUpdateQuantity($id, $new_quantity) {
    // Update the quantity of a product in the cart
    if (isset($_SESSION[CART_SESSION_NAME][$id])) {
        $_SESSION[CART_SESSION_NAME][$id]['quantity'] = $new_quantity;
    }
}

function cartGetContents() {
    // Get the contents of the cart
    return $_SESSION[CART_SESSION_NAME];
}


// Create a new cart session
cartSessionCreate();

// Add some products to the cart
cartAddProduct(1, 2); // Product ID: 1, Quantity: 2
cartAddProduct(2, 3); // Product ID: 2, Quantity: 3

// Update the quantity of a product in the cart
cartUpdateQuantity(1, 4);

// Remove a product from the cart
cartRemoveProduct(2);

// Get the contents of the cart
$cart_contents = cartGetContents();

// Print the contents of the cart
print_r($cart_contents);


function cartCalculateTotalCost() {
    // Calculate the total cost of the items in the cart
    $total_cost = 0;
    foreach (cartGetContents() as $item) {
        // Get the price of the product from the database
        $price = get_product_price($item['product_id']);
        $total_cost += $price * $item['quantity'];
    }
    return $total_cost;
}


<?php
// Initialize the cart array
$cart = [];

// Function to add item to cart
function add_item_to_cart($item_id, $quantity) {
  global $cart;
  if (!isset($cart[$item_id])) {
    $cart[$item_id] = ['quantity' => 0];
  }
  $cart[$item_id]['quantity'] += $quantity;
}

// Function to remove item from cart
function remove_item_from_cart($item_id) {
  global $cart;
  unset($cart[$item_id]);
}

// Function to update quantity of an item in the cart
function update_quantity_in_cart($item_id, $new_quantity) {
  global $cart;
  if (isset($cart[$item_id])) {
    $cart[$item_id]['quantity'] = $new_quantity;
  }
}

// Function to display items in cart
function display_cart() {
  global $cart;
  echo '<h2>Your Cart:</h2>';
  foreach ($cart as $item_id => $item_data) {
    echo '<p>' . get_item_name($item_id) . ' x ' . $item_data['quantity'] . '</p>';
  }
}

// Function to calculate total cost of items in cart
function calculate_total_cost() {
  global $cart;
  $total = 0;
  foreach ($cart as $item_id => $item_data) {
    $price = get_item_price($item_id);
    $total += $price * $item_data['quantity'];
  }
  return $total;
}

// Function to display total cost
function display_total_cost() {
  echo '<p>Total: £' . calculate_total_cost() . '</p>';
}

// Function to process checkout ( dummy implementation )
function process_checkout() {
  // TO DO: implement actual payment processing
  echo '<h2>Thank you for your order!</h2>';
}


<?php include 'cart.php'; ?>

<h1>Shop</h1>

<!-- Example product data -->
<?php $products = [
  ['id' => 1, 'name' => 'Product A', 'price' => 10.99],
  ['id' => 2, 'name' => 'Product B', 'price' => 5.99],
  ['id' => 3, 'name' => 'Product C', 'price' => 7.99],
]; ?>

<!-- Display products -->
<?php foreach ($products as $product) : ?>
  <p>
    <?php echo $product['name']; ?> (£<?php echo $product['price']; ?>)
    <button onclick="add_item_to_cart(<?php echo $product['id']; ?>, 1)">Add to Cart</button>
  </p>
<?php endforeach; ?>

<!-- Display cart -->
<?php display_cart(); ?>
<?php display_total_cost(); ?>

<button onclick="process_checkout()">Checkout</button>

<script>
  function add_item_to_cart(item_id, quantity) {
    // TO DO: implement JavaScript equivalent of PHP's add_item_to_cart()
    console.log('Adding item to cart:', item_id, quantity);
  }
</script>


<?php
// Initialize the cart session variable
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function addToCart($id, $name, $price) {
    global $_SESSION;
    if (array_key_exists($id, $_SESSION['cart'])) {
        // If the item already exists in the cart, increment its quantity
        $_SESSION['cart'][$id]['quantity']++;
    } else {
        // Add new item to the cart with initial quantity of 1
        $_SESSION['cart'][$id] = array('name' => $name, 'price' => $price, 'quantity' => 1);
    }
}

// Function to remove item from cart
function removeFromCart($id) {
    global $_SESSION;
    unset($_SESSION['cart'][$id]);
}

// Function to update quantity of an item in the cart
function updateQuantity($id, $newQuantity) {
    global $_SESSION;
    if (array_key_exists($id, $_SESSION['cart'])) {
        // Update the quantity of the existing item
        $_SESSION['cart'][$id]['quantity'] = $newQuantity;
    }
}

// Function to display cart contents
function displayCart() {
    global $_SESSION;
    echo "<h2>Shopping Cart</h2>";
    if (!empty($_SESSION['cart'])) {
        // Display each item in the cart with its quantity and price
        foreach ($_SESSION['cart'] as $item) {
            echo "<p>$item[name] x $item[quantity] = $" . ($item['price'] * $item['quantity']) . "</p>";
        }
    } else {
        echo "<p>No items in the cart.</p>";
    }

    // Display total cost
    $totalCost = 0;
    foreach ($_SESSION['cart'] as $item) {
        $totalCost += ($item['price'] * $item['quantity']);
    }
    echo "<h3>Total Cost: $" . number_format($totalCost, 2) . "</h3>";
}

// Add some example items to the cart
addToCart(1, "Item 1", 10.99);
addToCart(2, "Item 2", 5.99);

// Display initial cart contents
displayCart();
?>


<?php include 'cart.php'; ?>

<!-- Add a form to update the quantity of an item in the cart -->
<form action="" method="post">
    <select name="item_id">
        <?php foreach ($_SESSION['cart'] as $item) { ?>
            <option value="<?php echo $item['id']; ?>"><?php echo $item['name']; ?></option>
        <?php } ?>
    </select>
    Quantity: <input type="number" name="quantity">
    <input type="submit" name="update_quantity" value="Update Quantity">
</form>

<!-- Display the cart contents again after updating quantity -->
<?php if (isset($_POST['update_quantity'])) { ?>
    updateQuantity($_POST['item_id'], $_POST['quantity']);
    displayCart();
<?php } ?>


<?php include 'cart.php'; ?>

<!-- Add a form to remove an item from the cart -->
<form action="" method="post">
    <select name="item_id">
        <?php foreach ($_SESSION['cart'] as $item) { ?>
            <option value="<?php echo $item['id']; ?>"><?php echo $item['name']; ?></option>
        <?php } ?>
    </select>
    <input type="submit" name="remove_item" value="Remove Item">
</form>

<!-- Display the cart contents again after removing an item -->
<?php if (isset($_POST['remove_item'])) { ?>
    removeFromCart($_POST['item_id']);
    displayCart();
<?php } ?>


<?php
session_start();

// Set default values for the cart
$_SESSION['cart'] = array();
$_SESSION['total_cost'] = 0;

// Function to add item to cart
function add_item_to_cart($product_id, $quantity) {
    global $_SESSION;
    
    // Check if product is already in cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['product_id'] == $product_id) {
            // Update quantity if product is already in cart
            $item['quantity'] += $quantity;
            return;
        }
    }
    
    // Add new item to cart
    $_SESSION['cart'][] = array('product_id' => $product_id, 'quantity' => $quantity);
}

// Function to update cart
function update_cart($product_id, $new_quantity) {
    global $_SESSION;
    
    // Find product in cart and update quantity
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['product_id'] == $product_id) {
            $item['quantity'] = $new_quantity;
            return;
        }
    }
}

// Function to remove item from cart
function remove_item_from_cart($product_id) {
    global $_SESSION;
    
    // Find product in cart and remove it
    foreach ($_SESSION['cart'] as $key => &$item) {
        if ($item['product_id'] == $product_id) {
            unset($_SESSION['cart'][$key]);
            return;
        }
    }
}

// Function to calculate total cost
function calculate_total_cost() {
    global $_SESSION;
    
    // Calculate total cost by summing up all product prices multiplied by quantity
    $total_cost = 0;
    foreach ($_SESSION['cart'] as $item) {
        $product_price = // Get product price from database (replace with your own logic)
        $total_cost += $product_price * $item['quantity'];
    }
    
    $_SESSION['total_cost'] = $total_cost;
}

// Function to display cart contents
function display_cart_contents() {
    global $_SESSION;
    
    // Display each item in the cart, including product name and price
    echo "<h2>Cart Contents:</h2>";
    foreach ($_SESSION['cart'] as $item) {
        $product_name = // Get product name from database (replace with your own logic)
        $product_price = // Get product price from database (replace with your own logic)
        
        echo "$product_name ($item[quantity]) x $product_price = $" . $product_price * $item['quantity'] . "<br>";
    }
}

// Add item to cart
add_item_to_cart(1, 2); // Product ID 1, Quantity 2

// Update cart
update_cart(1, 3);

// Remove item from cart
remove_item_from_cart(1);

// Display cart contents
display_cart_contents();

// Calculate total cost
calculate_total_cost();
?>


<?php
include 'cart.php';

// Display cart contents and calculate total cost on page load
display_cart_contents();
calculate_total_cost();
?>

<!-- HTML for adding items to cart -->
<form action="" method="post">
    <input type="text" name="product_id" value="1"> // Product ID 1
    <input type="number" name="quantity" value="2"> // Quantity 2
    <button type="submit">Add to Cart</button>
</form>

<!-- HTML for updating cart -->
<form action="" method="post">
    <input type="text" name="product_id" value="1"> // Product ID 1
    <input type="number" name="new_quantity" value="3"> // New quantity 3
    <button type="submit">Update Cart</button>
</form>

<!-- HTML for removing item from cart -->
<form action="" method="post">
    <input type="text" name="product_id" value="1"> // Product ID 1
    <button type="submit">Remove from Cart</button>
</form>


<?php
// Initialize session
session_start();

// Define cart array to store items
$_SESSION['cart'] = array();

// Function to add item to cart
function add_to_cart($product_id, $quantity) {
  global $_SESSION;
  // Check if product is already in cart
  foreach ($_SESSION['cart'] as &$item) {
    if ($item['id'] == $product_id) {
      // Increase quantity of existing item
      $item['quantity'] += $quantity;
      return;
    }
  }
  // Add new item to cart
  $_SESSION['cart'][] = array('id' => $product_id, 'quantity' => $quantity);
}

// Function to remove item from cart
function remove_from_cart($product_id) {
  global $_SESSION;
  foreach ($_SESSION['cart'] as $key => &$item) {
    if ($item['id'] == $product_id) {
      unset($_SESSION['cart'][$key]);
      return;
    }
  }
}

// Function to update quantity of item in cart
function update_quantity($product_id, $new_quantity) {
  global $_SESSION;
  foreach ($_SESSION['cart'] as &$item) {
    if ($item['id'] == $product_id) {
      $item['quantity'] = $new_quantity;
      return;
    }
  }
}

// Function to display cart contents
function display_cart() {
  global $_SESSION;
  echo '<h2>Cart Contents:</h2>';
  foreach ($_SESSION['cart'] as $item) {
    echo 'Product ID: ' . $item['id'] . ', Quantity: ' . $item['quantity'] . '<br>';
  }
}
?>


<?php
require_once 'cart.php';
?>

<!-- HTML form to add items to cart -->
<form action="" method="post">
  <input type="hidden" name="product_id" value="<?php echo $_GET['id']; ?>">
  <input type="text" name="quantity" placeholder="Quantity">
  <button type="submit">Add to Cart</button>
</form>

<?php
if (isset($_POST['product_id'])) {
  add_to_cart($_POST['product_id'], $_POST['quantity']);
}
?>

<!-- Display cart contents -->
<?php display_cart(); ?>


<?php
require_once 'cart.php';
?>

<!-- HTML form to update quantity of item in cart -->
<form action="" method="post">
  <input type="hidden" name="product_id" value="<?php echo $_GET['id']; ?>">
  <input type="text" name="new_quantity" placeholder="New Quantity">
  <button type="submit">Update Quantity</button>
</form>

<?php
if (isset($_POST['product_id'])) {
  update_quantity($_POST['product_id'], $_POST['new_quantity']);
}
?>

<!-- Display cart contents -->
<?php display_cart(); ?>


<?php
require_once 'cart.php';
?>

<!-- HTML form to remove item from cart -->
<form action="" method="post">
  <input type="hidden" name="product_id" value="<?php echo $_GET['id']; ?>">
  <button type="submit">Remove from Cart</button>
</form>

<?php
if (isset($_POST['product_id'])) {
  remove_from_cart($_POST['product_id']);
}
?>

<!-- Display cart contents -->
<?php display_cart(); ?>


// cart.php

class Cart {
    private $items = array();
    private $subtotal = 0;
    private $tax_rate = 0.08; // default tax rate is 8%

    public function add_item($item_id, $quantity) {
        if (isset($this->items[$item_id])) {
            $this->items[$item_id]['quantity'] += $quantity;
        } else {
            $this->items[$item_id] = array('price' => 0, 'quantity' => $quantity);
        }
    }

    public function remove_item($item_id) {
        if (isset($this->items[$item_id])) {
            unset($this->items[$item_id]);
        }
    }

    public function update_quantity($item_id, $new_quantity) {
        if (isset($this->items[$item_id])) {
            $this->items[$item_id]['quantity'] = $new_quantity;
        }
    }

    public function get_subtotal() {
        foreach ($this->items as $item) {
            $this->subtotal += $item['price'] * $item['quantity'];
        }
        return $this->subtotal;
    }

    public function get_tax() {
        return $this->get_subtotal() * $this->tax_rate;
    }

    public function get_total() {
        return $this->get_subtotal() + $this->get_tax();
    }

    public function get_items() {
        return $this->items;
    }
}


// cart.php

class CartView {
    private $cart;

    public function __construct($cart) {
        $this->cart = $cart;
    }

    public function display_cart() {
        echo '<h1>Shopping Cart</h1>';
        echo '<table border="1">';
        echo '<tr><th>Item ID</th><th>Quantity</th><th>Price</th></tr>';

        foreach ($this->cart->get_items() as $item_id => $item) {
            echo '<tr>';
            echo '<td>' . $item_id . '</td>';
            echo '<td>' . $item['quantity'] . '</td>';
            echo '<td>$' . number_format($item['price'] * $item['quantity'], 2) . '</td>';
            echo '</tr>';
        }

        echo '</table>';

        echo 'Subtotal: $' . number_format($this->cart->get_subtotal(), 2);
        echo '<br> Tax (8%): $' . number_format($this->cart->get_tax(), 2);
        echo '<br> Total: $' . number_format($this->cart->get_total(), 2);
    }
}


// cart.php

class CartController {
    private $cart;

    public function __construct() {
        $this->cart = new Cart();
    }

    public function add_item($item_id, $quantity) {
        $this->cart->add_item($item_id, $quantity);
    }

    public function remove_item($item_id) {
        $this->cart->remove_item($item_id);
    }

    public function update_quantity($item_id, $new_quantity) {
        $this->cart->update_quantity($item_id, $new_quantity);
    }

    public function display_cart() {
        $view = new CartView($this->cart);
        $view->display_cart();
    }
}


// products.php

class Products {
    private $items = array(
        'item1' => array('price' => 9.99, 'name' => 'Product 1'),
        'item2' => array('price' => 19.99, 'name' => 'Product 2'),
        // ...
    );

    public function get_items() {
        return $this->items;
    }
}


// index.php

require_once 'cart.php';
require_once 'products.php';

$products = new Products();
$product_list = $products->get_items();

$cart_controller = new CartController();

echo '<h1>Shopping Cart</h1>';
echo '<form action="index.php" method="post">';

foreach ($product_list as $item_id => $item) {
    echo '<input type="checkbox" name="items[]" value="' . $item_id . '">';
    echo '<label>' . $item['name'] . '</label> <br>';
}

echo '<button type="submit">Add to Cart</button>';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    foreach ($_POST['items'] as $item_id) {
        $cart_controller->add_item($item_id, 1);
    }
}

$cart_controller->display_cart();

?>


class Cart {
    private $db;

    public function __construct() {
        $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');
    }

    // Add a product to the cart
    public function addProduct($userId, $productId) {
        try {
            $stmt = $this->db->prepare("INSERT INTO cart (user_id, product_id, quantity) VALUES (:user_id, :product_id, 1)");
            $stmt->bindParam(':user_id', $userId);
            $stmt->bindParam(':product_id', $productId);
            $stmt->execute();
        } catch (PDOException $e) {
            echo "Error adding product to cart: " . $e->getMessage();
        }
    }

    // Remove a product from the cart
    public function removeProduct($cartId) {
        try {
            $this->db->exec("DELETE FROM cart WHERE id = :id");
            $stmt = $this->db->prepare("UPDATE products SET quantity = quantity + 1 WHERE id = (SELECT product_id FROM cart WHERE id = :id)");
            $stmt->bindParam(':id', $cartId);
            $stmt->execute();
        } catch (PDOException $e) {
            echo "Error removing product from cart: " . $e->getMessage();
        }
    }

    // Get the contents of the cart
    public function getCart($userId) {
        try {
            $stmt = $this->db->prepare("SELECT c.id, p.name, p.price, c.quantity FROM cart c JOIN products p ON c.product_id = p.id WHERE c.user_id = :user_id");
            $stmt->bindParam(':user_id', $userId);
            $stmt->execute();
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            echo "Error fetching cart contents: " . $e->getMessage();
        }
    }

    // Update the quantity of a product in the cart
    public function updateQuantity($cartId, $newQuantity) {
        try {
            $this->db->exec("UPDATE cart SET quantity = :quantity WHERE id = :id");
            $stmt = $this->db->prepare("UPDATE products SET quantity = quantity - 1 WHERE id = (SELECT product_id FROM cart WHERE id = :id)");
            $stmt->bindParam(':quantity', $newQuantity);
            $stmt->bindParam(':id', $cartId);
            $stmt->execute();
        } catch (PDOException $e) {
            echo "Error updating quantity: " . $e->getMessage();
        }
    }

    // Calculate the total cost of the cart
    public function calculateTotal($userId) {
        try {
            $stmt = $this->db->prepare("SELECT SUM(p.price * c.quantity) AS total FROM cart c JOIN products p ON c.product_id = p.id WHERE c.user_id = :user_id");
            $stmt->bindParam(':user_id', $userId);
            $stmt->execute();
            return $stmt->fetchColumn();
        } catch (PDOException $e) {
            echo "Error calculating total: " . $e->getMessage();
        }
    }
}


$cart = new Cart();

// Add a product to the cart
$userId = 1;
$productIds = array(1, 2, 3);
foreach ($productIds as $productId) {
    $cart->addProduct($userId, $productId);
}

// Get the contents of the cart
$cartContents = $cart->getCart($userId);

// Update the quantity of a product in the cart
$cartId = 1;
$newQuantity = 2;
$cart->updateQuantity($cartId, $newQuantity);

// Calculate the total cost of the cart
$totalCost = $cart->calculateTotal($userId);


<?php

// Initialize cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function addToCart($productID, $productName, $price) {
    $item = array(
        'id' => $productID,
        'name' => $productName,
        'price' => $price
    );
    $_SESSION['cart'][] = $item;
}

// Function to display cart contents
function showCart() {
    if (count($_SESSION['cart']) == 0) {
        echo "Your cart is empty.";
        return;
    }
    
    echo "<h2>Your Cart:</h2>";
    echo "<table border='1'>";
    echo "<tr><th>Product Name</th><th>Price</th></tr>";
    foreach ($_SESSION['cart'] as $item) {
        echo "<tr><td>$item[name]</td><td>$item[price]</td></tr>";
    }
    echo "</table>";
}

// Function to remove item from cart
function removeFromCart($productID) {
    foreach ($_SESSION['cart'] as $key => $item) {
        if ($item['id'] == $productID) {
            unset($_SESSION['cart'][$key]);
            return;
        }
    }
}

// Function to calculate total cost of items in cart
function getTotalCost() {
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['price'];
    }
    return $total;
}

?>


<?php

// Assume we have a database connection set up here...

// Retrieve products from database
$query = "SELECT * FROM products";
$result = mysqli_query($conn, $query);

echo "<h2>Products:</h2>";
while ($row = mysqli_fetch_assoc($result)) {
    echo "<a href='cart.php?add=$row[id]'>$row[name]</a> - $" . number_format($row['price'], 2);
}

?>


<?php

// Include cart functionality file
include 'cart.php';

// Check if user has clicked "Add to Cart" button
if (isset($_GET['add'])) {
    $productID = $_GET['add'];
    // Retrieve product details from database
    $query = "SELECT * FROM products WHERE id='$productID'";
    $result = mysqli_query($conn, $query);
    $row = mysqli_fetch_assoc($result);
    
    addToCart($productID, $row['name'], $row['price']);
}

// Display cart contents
showCart();

?>


class Cart {
    private $cart;

    public function __construct() {
        $this->cart = array();
    }

    // Method to add an item to the cart
    public function addItem($product_id) {
        if (isset($this->cart[$product_id])) {
            $this->cart[$product_id]['quantity']++;
        } else {
            $this->cart[$product_id] = array('id' => $product_id, 'price' => 0.00);
            $product_data = get_product_info($product_id); // Function to retrieve product info from database
            $this->cart[$product_id]['price'] = $product_data['price'];
        }
    }

    // Method to remove an item from the cart
    public function removeItem($product_id) {
        if (isset($this->cart[$product_id])) {
            unset($this->cart[$product_id]);
        }
    }

    // Method to update quantity of an item in the cart
    public function updateQuantity($product_id, $quantity) {
        if (isset($this->cart[$product_id])) {
            $this->cart[$product_id]['quantity'] = $quantity;
        }
    }

    // Method to clear entire cart
    public function clearCart() {
        $this->cart = array();
    }

    // Method to calculate total cost of all items in the cart
    public function calculateTotal() {
        $total = 0.00;
        foreach ($this->cart as $item) {
            $total += $item['price'] * $item['quantity'];
        }
        return $total;
    }

    // Method to display contents of the cart
    public function displayCart() {
        echo '<table>';
        foreach ($this->cart as $item) {
            echo '<tr><td>' . get_product_name($item['id']) . '</td><td>Quantity: ' . $item['quantity'] . '</td><td>Price: ' . $item['price'] . '</td></tr>';
        }
        echo '</table>';
    }

    // Method to save cart items to database
    public function saveToDatabase() {
        foreach ($this->cart as $product_id => $item) {
            if (isset($item['id'])) {
                $data = array('product_id' => $item['id'], 'quantity' => $item['quantity']);
                insert_cart_item($product_id, $data); // Function to insert cart item into database
            }
        }
    }

    // Method to load cart items from database
    public function loadFromDatabase() {
        $cart_items = get_cart_items(); // Function to retrieve cart items from database
        foreach ($cart_items as $item) {
            if (isset($this->cart[$item['product_id']])) {
                $this->cart[$item['product_id']]['quantity'] += $item['quantity'];
            } else {
                $this->cart[$item['product_id']] = array('id' => $item['product_id'], 'price' => 0.00);
                $product_data = get_product_info($item['product_id']); // Function to retrieve product info from database
                $this->cart[$item['product_id']]['price'] = $product_data['price'];
            }
        }
    }
}


function get_product_info($id) {
    global $db;
    $query = "SELECT * FROM products WHERE id = '$id'";
    $result = mysqli_query($db, $query);
    return mysqli_fetch_assoc($result);
}

function insert_cart_item($cart_id, $data) {
    global $db;
    $query = "INSERT INTO cart (product_id, quantity) VALUES ('$data[product_id]', '$data[quantity]')";
    if (mysqli_query($db, $query)) {
        return true;
    } else {
        return false;
    }
}

function get_cart_items() {
    global $db;
    $query = "SELECT * FROM cart";
    $result = mysqli_query($db, $query);
    return mysqli_fetch_all($result, MYSQLI_ASSOC);
}


$cart = new Cart();
$cart->loadFromDatabase(); // Load cart items from database

// Add items to cart
$cart->addItem(1);
$cart->addItem(2);

// Remove item from cart
$cart->removeItem(1);

// Update quantity of an item in the cart
$cart->updateQuantity(2, 3);

// Display contents of the cart
$cart->displayCart();

// Save cart items to database
$cart->saveToDatabase();


<?php
session_start();

// Check if the cart is already loaded in session
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function addItemToCart($product_id, $quantity) {
    global $_SESSION;
    // Check if product is already in cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $product_id) {
            // Update quantity if it's the same product
            $item['quantity'] += $quantity;
            return true;
        }
    }
    // Add new item to cart
    $_SESSION['cart'][] = array('id' => $product_id, 'quantity' => $quantity);
    return true;
}

// Function to remove item from cart
function removeItemFromCart($product_id) {
    global $_SESSION;
    foreach ($_SESSION['cart'] as $key => &$item) {
        if ($item['id'] == $product_id) {
            unset($_SESSION['cart'][$key]);
            return true;
        }
    }
    return false;
}

// Function to update quantity of item in cart
function updateQuantity($product_id, $new_quantity) {
    global $_SESSION;
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $product_id) {
            $item['quantity'] = $new_quantity;
            return true;
        }
    }
    return false;
}

// Function to calculate total cost of cart
function calculateTotal() {
    global $_SESSION;
    $total = 0;
    foreach ($_SESSION['cart'] as &$item) {
        $total += $item['price'] * $item['quantity'];
    }
    return $total;
}
?>


<?php
require_once 'cart.php';

// Initialize cart with some sample products (you can replace this with your database or API)
$_SESSION['products'] = array(
    1 => array('name' => 'Product 1', 'price' => 9.99),
    2 => array('name' => 'Product 2', 'price' => 14.99),
    3 => array('name' => 'Product 3', 'price' => 19.99)
);

// Example usage: add item to cart
addItemToCart(1, 2);
addItemToCart(2, 1);
addItemToCart(1, 3); // quantity will be increased for product 1

// Get total cost of cart
$total = calculateTotal();
echo 'Total: $' . number_format($total, 2);

// Example usage: remove item from cart
removeItemFromCart(2);

// Example usage: update quantity of item in cart
updateQuantity(1, 5);
?>


<?php
session_start();

// Initialize cart array if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function add_item($product_id, $quantity) {
    global $_SESSION;
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] += $quantity;
    } else {
        $_SESSION['cart'][$product_id] = array('quantity' => $quantity);
    }
}

// Function to remove item from cart
function remove_item($product_id) {
    global $_SESSION;
    unset($_SESSION['cart'][$product_id]);
}

// Function to update quantity of an item in the cart
function update_quantity($product_id, $new_quantity) {
    global $_SESSION;
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;
    }
}

// Function to calculate total cost of items in cart
function calculate_total() {
    global $_SESSION;
    $total = 0;
    foreach ($_SESSION['cart'] as $item) {
        $total += $item['quantity'] * $item['price'];
    }
    return $total;
}

// Example product data
$products = array(
    array('id' => 1, 'name' => 'Product A', 'price' => 9.99),
    array('id' => 2, 'name' => 'Product B', 'price' => 14.99),
    array('id' => 3, 'name' => 'Product C', 'price' => 19.99)
);

?>


<?php include 'cart.php'; ?>

<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Shopping Cart</h1>

<form action="add_item.php" method="post">
    <select name="product_id">
        <?php foreach ($products as $product) { ?>
            <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?> - <?php echo $product['price']; ?></option>
        <?php } ?>
    </select>
    <input type="text" name="quantity" placeholder="Quantity">
    <button type="submit">Add to Cart</button>
</form>

<h2>Cart Contents:</h2>

<ul>
    <?php foreach ($_SESSION['cart'] as $product_id => $item) { ?>
        <li><?php echo $products[$product_id]['name']; ?> x <?php echo $item['quantity']; ?> = <?php echo $products[$product_id]['price'] * $item['quantity']; ?></li>
    <?php } ?>
</ul>

<h2>Total:</h2>
<p><?php echo calculate_total(); ?></p>

<form action="remove_item.php" method="post">
    <select name="product_id">
        <?php foreach ($products as $product) { ?>
            <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?> - <?php echo $product['price']; ?></option>
        <?php } ?>
    </select>
    <button type="submit">Remove from Cart</button>
</form>

<form action="update_quantity.php" method="post">
    <select name="product_id">
        <?php foreach ($products as $product) { ?>
            <option value="<?php echo $product['id']; ?>"><?php echo $product['name']; ?> - <?php echo $product['price']; ?></option>
        <?php } ?>
    </select>
    <input type="text" name="new_quantity" placeholder="New Quantity">
    <button type="submit">Update Quantity</button>
</form>

</body>
</html>


<?php include 'cart.php'; ?>

<?php add_item($_POST['product_id'], $_POST['quantity']); ?>
<meta http-equiv="refresh" content="0; url=index.php">


<?php include 'cart.php'; ?>

<?php remove_item($_POST['product_id']); ?>
<meta http-equiv="refresh" content="0; url=index.php">


<?php include 'cart.php'; ?>

<?php update_quantity($_POST['product_id'], $_POST['new_quantity']); ?>
<meta http-equiv="refresh" content="0; url=index.php">


<?php
// Initialize session
session_start();

// Define cart array to store items
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function add_item_to_cart($item_id, $quantity) {
    global $_SESSION;
    
    // Check if item is already in cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $item_id) {
            // Update quantity if item is already in cart
            $item['quantity'] += $quantity;
            return true;
        }
    }
    
    // Add new item to cart
    $_SESSION['cart'][] = array('id' => $item_id, 'quantity' => $quantity);
    return true;
}

// Function to update quantity of item in cart
function update_item_quantity($item_id, $new_quantity) {
    global $_SESSION;
    
    // Find item in cart and update its quantity
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['id'] == $item_id) {
            $item['quantity'] = $new_quantity;
            return true;
        }
    }
    return false;
}

// Function to remove item from cart
function remove_item_from_cart($item_id) {
    global $_SESSION;
    
    // Find and remove item from cart
    foreach ($_SESSION['cart'] as $key => &$item) {
        if ($item['id'] == $item_id) {
            unset($_SESSION['cart'][$key]);
            return true;
        }
    }
    return false;
}

// Function to calculate total cost of items in cart
function calculate_total() {
    global $_SESSION;
    
    // Initialize total cost to 0
    $total = 0;
    
    // Calculate total cost by summing up quantities and prices of all items in cart
    foreach ($_SESSION['cart'] as &$item) {
        $total += $item['quantity'] * get_item_price($item['id']);
    }
    
    return $total;
}

// Function to retrieve item price (example: assume we have a function `get_item_price` that retrieves the price of an item from database)
function get_item_price($item_id) {
    // Example implementation:
    $prices = array(
        1 => 9.99,
        2 => 19.99,
        3 => 29.99
    );
    
    return isset($prices[$item_id]) ? $prices[$item_id] : 0;
}

// Function to display cart contents
function display_cart_contents() {
    global $_SESSION;
    
    // Display each item in cart with its quantity and price
    echo "<h2>Cart Contents:</h2>";
    foreach ($_SESSION['cart'] as &$item) {
        echo "Item ID: $item[id] - Quantity: $item[quantity] - Price: $" . get_item_price($item['id']) . "<br>";
    }
    
    // Display total cost
    echo "<p>Total Cost: $" . calculate_total() . "</p>";
}

// Example usage:
if (isset($_POST['add_to_cart'])) {
    add_item_to_cart($_POST['item_id'], $_POST['quantity']);
} elseif (isset($_POST['update_quantity'])) {
    update_item_quantity($_POST['item_id'], $_POST['new_quantity']);
} elseif (isset($_POST['remove_from_cart'])) {
    remove_item_from_cart($_POST['item_id']);
}

// Display cart contents
display_cart_contents();
?>


<?php
include 'cart.php';
?>

<form action="cart.php" method="post">
    <label for="item_id">Item ID:</label>
    <input type="text" id="item_id" name="item_id"><br><br>
    <label for="quantity">Quantity:</label>
    <input type="number" id="quantity" name="quantity"><br><br>
    <button type="submit" name="add_to_cart">Add to Cart</button>
</form>

<form action="cart.php" method="post">
    <label for="item_id">Item ID:</label>
    <input type="text" id="item_id" name="item_id"><br><br>
    <label for="new_quantity">New Quantity:</label>
    <input type="number" id="new_quantity" name="new_quantity"><br><br>
    <button type="submit" name="update_quantity">Update Quantity</button>
</form>

<form action="cart.php" method="post">
    <label for="item_id">Item ID:</label>
    <input type="text" id="item_id" name="item_id"><br><br>
    <button type="submit" name="remove_from_cart">Remove from Cart</button>
</form>

<?php
// Display cart contents (same as in cart.php)
display_cart_contents();
?>


class Cart {
    private $items = array();
    private $totalPrice = 0;
    private $taxRate = 0.08; // default tax rate

    public function add($item, $quantity) {
        if (!isset($this->items[$item['id']])) {
            $this->items[$item['id']] = array(
                'name' => $item['name'],
                'price' => $item['price'],
                'quantity' => 0,
                'totalPrice' => 0
            );
        }

        $this->items[$item['id']]['quantity'] += $quantity;
        $this->items[$item['id']]['totalPrice'] = $item['price'] * $quantity;

        $this->updateTotalPrice();
    }

    public function remove($itemId) {
        if (isset($this->items[$itemId])) {
            unset($this->items[$itemId]);
            $this->updateTotalPrice();
        }
    }

    private function updateTotalPrice() {
        $this->totalPrice = 0;
        foreach ($this->items as $item) {
            $this->totalPrice += $item['totalPrice'];
        }

        // apply tax
        $this->totalPrice *= (1 + $this->taxRate);
    }
}


session_start();


$_SESSION['cart'] = new Cart();
$_SESSION['cart']->totalPrice = 0;


function addProductToCart($productId, $quantity) {
    // get the product data from the database or wherever it is stored
    $product = getProductById($productId);

    // add the product to the cart
    $_SESSION['cart']->add(array(
        'id' => $productId,
        'name' => $product['name'],
        'price' => $product['price']
    ), $quantity);
}


function displayCart() {
    echo "Cart Contents:<br>";
    foreach ($_SESSION['cart']->items as $item) {
        echo "$" . number_format($item['price']) . " x " . $item['quantity'] . " = $" . number_format($item['totalPrice']) . "<br>";
    }

    echo "Total Price: $" . number_format($_SESSION['cart']->totalPrice);
}


// add 2 products to the cart
addProductToCart(1, 2);
addProductToCart(3, 1);

// display the cart contents
displayCart();

// remove one product from the cart
$_SESSION['cart']->remove(1);

// display the updated cart contents
displayCart();


<?php
// Initialize session variables
session_start();

// Function to add product to cart
function addToCart($productId) {
    // Get product details from database
    $product = getProduct($productId);

    // If product is not found, return false
    if (!$product) {
        return false;
    }

    // Check if product is already in cart
    $cartItems = getCartItems();
    foreach ($cartItems as &$item) {
        if ($item['id'] == $productId) {
            // Increment quantity of existing item
            $item['quantity']++;
            break;
        }
    }

    // If product is not in cart, add it with quantity 1
    if (!isset($cartItems[$productId])) {
        $cartItems[$productId] = array(
            'id' => $product->id,
            'name' => $product->name,
            'price' => $product->price,
            'quantity' => 1
        );
    }

    // Update session cart data
    $_SESSION['cart'] = $cartItems;

    return true;
}

// Function to remove product from cart
function removeFromCart($productId) {
    // Get current cart items
    $cartItems = getCartItems();

    // If product is in cart, delete it
    if (isset($cartItems[$productId])) {
        unset($cartItems[$productId]);
    }

    // Update session cart data
    $_SESSION['cart'] = $cartItems;

    return true;
}

// Function to update quantity of a product in the cart
function updateQuantity($productId, $quantity) {
    // Get current cart items
    $cartItems = getCartItems();

    // If product is in cart and quantity is valid, update it
    if (isset($cartItems[$productId]) && $quantity > 0) {
        $cartItems[$productId]['quantity'] = $quantity;
    }

    // Update session cart data
    $_SESSION['cart'] = $cartItems;

    return true;
}

// Function to calculate total cost of the cart
function calculateTotal() {
    // Get current cart items
    $cartItems = getCartItems();

    // Calculate total cost by summing up the product prices and quantities
    $total = 0;
    foreach ($cartItems as &$item) {
        $total += $item['price'] * $item['quantity'];
    }

    return $total;
}

// Function to get all cart items
function getCartItems() {
    // Return session cart data if it exists, otherwise initialize an empty array
    return $_SESSION['cart'] ?? [];
}


<?php
include 'cart.php';

// Get products from database ( example )
$products = array(
    array('id' => 1, 'name' => 'Product A', 'price' => 10.99),
    array('id' => 2, 'name' => 'Product B', 'price' => 5.49),
    // ...
);

// Display cart
?>
<h1>Shopping Cart</h1>

<table>
    <tr>
        <th>Product Name</th>
        <th>Price</th>
        <th>Quantity</th>
        <th>Total</th>
    </tr>
    <?php foreach (getCartItems() as $item): ?>
    <tr>
        <td><?= $item['name'] ?></td>
        <td><?= $item['price'] ?></td>
        <td><?= $item['quantity'] ?></td>
        <td><?= $item['price'] * $item['quantity'] ?></td>
    </tr>
    <?php endforeach; ?>
</table>

<h2>Total: <?= calculateTotal() ?></h2>

<?php if (isset($_SESSION['cart'])): ?>
<a href="checkout.php">Checkout</a>
<?php endif; ?>

<form action="" method="post">
    <select name="product_id" id="product_id">
        <?php foreach ($products as $product): ?>
            <option value="<?= $product['id'] ?>"><?= $product['name'] ?></option>
        <?php endforeach; ?>
    </select>

    <input type="number" name="quantity" id="quantity" value="1">

    <button type="submit">Add to Cart</button>
</form>


<?php
include 'cart.php';

// Process checkout form submission ( example )
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Save cart data to database
    saveCartData();
}

// Display saved cart data
?>
<h1>Checkout Successful!</h1>

<p>Your order has been successfully processed.</p>


class Cart {
    private $db;

    function __construct($db) {
        $this->db = $db;
    }

    // Add an item to the cart
    function addItem($product_id, $quantity = 1) {
        try {
            $stmt = $this->db->prepare("INSERT INTO cart_items (cart_id, product_id, quantity) VALUES (:cart_id, :product_id, :quantity)");
            $stmt->bindParam(":cart_id", $_SESSION["cart_id"]);
            $stmt->bindParam(":product_id", $product_id);
            $stmt->bindParam(":quantity", $quantity);
            $stmt->execute();
        } catch (PDOException $e) {
            echo "Error adding item to cart: " . $e->getMessage();
        }
    }

    // Remove an item from the cart
    function removeItem($product_id) {
        try {
            $stmt = $this->db->prepare("DELETE FROM cart_items WHERE product_id = :product_id AND cart_id = :cart_id");
            $stmt->bindParam(":product_id", $product_id);
            $stmt->bindParam(":cart_id", $_SESSION["cart_id"]);
            $stmt->execute();
        } catch (PDOException $e) {
            echo "Error removing item from cart: " . $e->getMessage();
        }
    }

    // Update the quantity of an item in the cart
    function updateQuantity($product_id, $new_quantity) {
        try {
            $stmt = $this->db->prepare("UPDATE cart_items SET quantity = :quantity WHERE product_id = :product_id AND cart_id = :cart_id");
            $stmt->bindParam(":quantity", $new_quantity);
            $stmt->bindParam(":product_id", $product_id);
            $stmt->bindParam(":cart_id", $_SESSION["cart_id"]);
            $stmt->execute();
        } catch (PDOException $e) {
            echo "Error updating quantity: " . $e->getMessage();
        }
    }

    // Get the total cost of items in the cart
    function getTotalCost() {
        try {
            $stmt = $this->db->prepare("SELECT SUM(ci.quantity * p.price) AS total FROM cart_items ci INNER JOIN products p ON ci.product_id = p.id WHERE ci.cart_id = :cart_id");
            $stmt->bindParam(":cart_id", $_SESSION["cart_id"]);
            $stmt->execute();
            return $stmt->fetchColumn();
        } catch (PDOException $e) {
            echo "Error getting total cost: " . $e->getMessage();
        }
    }

    // Checkout the cart
    function checkout() {
        try {
            // Clear the cart items table for this user
            $this->db->query("DELETE FROM cart_items WHERE cart_id = :cart_id", array(":cart_id" => $_SESSION["cart_id"]));

            // Insert a new order into the database
            $stmt = $this->db->prepare("INSERT INTO orders (user_id, total_cost) VALUES (:user_id, :total_cost)");
            $stmt->bindParam(":user_id", $_SESSION["user_id"]);
            $stmt->bindParam(":total_cost", $this->getTotalCost());
            $stmt->execute();
        } catch (PDOException $e) {
            echo "Error checking out cart: " . $e->getMessage();
        }
    }
}


// Initialize the Cart class with a database connection
$db = new PDO("mysql:host=localhost;dbname=example", "username", "password");
$cart = new Cart($db);

// Add items to the cart
$_SESSION["cart_id"] = 1;
$cart->addItem(1, 2);
$cart->addItem(3, 4);

// Remove an item from the cart
$cart->removeItem(3);

// Update quantity of an item in the cart
$cart->updateQuantity(1, 5);

// Get total cost of items in the cart
echo $cart->getTotalCost();

// Checkout the cart
$cart->checkout();


class Cart {
    private $items;

    public function __construct() {
        $this->items = array();
    }

    public function add_item($product_id, $quantity) {
        if (array_key_exists($product_id, $this->items)) {
            $this->items[$product_id]['quantity'] += $quantity;
        } else {
            $this->items[$product_id] = array('product' => get_product($product_id), 'quantity' => $quantity);
        }
    }

    public function remove_item($product_id) {
        if (array_key_exists($product_id, $this->items)) {
            unset($this->items[$product_id]);
        }
    }

    public function update_quantity($product_id, $new_quantity) {
        if (array_key_exists($product_id, $this->items)) {
            $this->items[$product_id]['quantity'] = $new_quantity;
        }
    }

    public function get_total() {
        $total = 0;
        foreach ($this->items as $item) {
            $price = $item['product']['price'];
            $total += $price * $item['quantity'];
        }
        return $total;
    }

    public function display_cart() {
        echo '<h2>Cart:</h2>';
        foreach ($this->items as $item) {
            echo $item['product']['name'] . ' x' . $item['quantity'] . ': $' . number_format($item['product']['price'] * $item['quantity'], 2) . '<br>';
        }
        echo 'Total: $' . number_format($this->get_total(), 2);
    }
}


function get_product($product_id) {
    // Connect to database and retrieve product data
    $db = new mysqli('localhost', 'username', 'password', 'database');
    if ($result = $db->query("SELECT * FROM products WHERE id = '$product_id'")) {
        return $result->fetch_assoc();
    }
}


$cart = new Cart();

// Add items to cart
$cart->add_item(1, 2);
$cart->add_item(3, 1);

// Display cart
$cart->display_cart();

// Update quantity of item in cart
$cart->update_quantity(1, 3);

// Remove item from cart
$cart->remove_item(3);

// Display updated cart
$cart->display_cart();


<?php
session_start();

// Initialize cart array if not set
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

function add_to_cart($product_id) {
    global $conn;

    // Get product details from database
    $query = "SELECT * FROM products WHERE id='$product_id'";
    $result = mysqli_query($conn, $query);

    if (mysqli_num_rows($result) > 0) {
        while ($row = mysqli_fetch_assoc($result)) {
            $product_name = $row['name'];
            $price = $row['price'];

            // Add to session cart
            array_push($_SESSION['cart'], array('id' => $product_id, 'name' => $product_name, 'price' => $price));
        }
    }

    return mysqli_affected_rows($conn);
}

function remove_from_cart($product_id) {
    global $conn;

    // Check if product exists in cart
    foreach ($_SESSION['cart'] as $key => $value) {
        if ($value['id'] == $product_id) {
            unset($_SESSION['cart'][$key]);
            break;
        }
    }

    return count($_SESSION['cart']);
}

function get_cart() {
    global $conn;

    // Get product details from database
    $cart = array();
    foreach ($_SESSION['cart'] as $item) {
        $query = "SELECT * FROM products WHERE id='$item[id]'";
        $result = mysqli_query($conn, $query);

        if (mysqli_num_rows($result) > 0) {
            while ($row = mysqli_fetch_assoc($result)) {
                $product_name = $row['name'];
                $price = $row['price'];

                array_push($cart, array('id' => $item['id'], 'name' => $product_name, 'price' => $price));
            }
        }
    }

    return $cart;
}

function calculate_total() {
    global $conn;

    // Calculate total cost
    $total = 0;
    foreach ($_SESSION['cart'] as $value) {
        $query = "SELECT * FROM products WHERE id='$value[id]'";
        $result = mysqli_query($conn, $query);

        if (mysqli_num_rows($result) > 0) {
            while ($row = mysqli_fetch_assoc($result)) {
                $price = $row['price'];

                $total += $price;
            }
        }
    }

    return $total;
}

function clear_cart() {
    unset($_SESSION['cart']);
}
?>


<?php
if (isset($_POST['add_to_cart'])) {
    add_to_cart($_POST['product_id']);
}

if (isset($_GET['remove'])) {
    remove_from_cart($_GET['remove']);
}

if (isset($_GET['clear'])) {
    clear_cart();
}
?>


<?php
$cart = get_cart();

echo "Your Cart Contents:
";
foreach ($cart as $value) {
    echo "ID: {$value['id']} | Name: {$value['name']} | Price: {$value['price']}
";
}

echo "
Total Cost: $" . calculate_total();
?>


<?php
// Initialize the cart session variable
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function add_item_to_cart($product_id, $quantity) {
    global $_SESSION;
    
    // Check if product is already in cart
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['product_id'] == $product_id) {
            $item['quantity'] += $quantity;
            return true; // Product already in cart, increment quantity
        }
    }
    
    // Add new item to cart
    $_SESSION['cart'][] = array('product_id' => $product_id, 'quantity' => $quantity);
    return false; // New product added to cart
}

// Function to remove item from cart
function remove_item_from_cart($product_id) {
    global $_SESSION;
    
    foreach ($_SESSION['cart'] as $key => &$item) {
        if ($item['product_id'] == $product_id) {
            unset($_SESSION['cart'][$key]);
            return true; // Item removed from cart
        }
    }
    return false; // Item not found in cart
}

// Function to update quantity of item in cart
function update_quantity_in_cart($product_id, $new_quantity) {
    global $_SESSION;
    
    foreach ($_SESSION['cart'] as &$item) {
        if ($item['product_id'] == $product_id) {
            $item['quantity'] = $new_quantity;
            return true; // Quantity updated
        }
    }
    return false; // Item not found in cart
}

// Function to calculate total cost of items in cart
function calculate_total_cost() {
    global $_SESSION;
    
    $total_cost = 0;
    foreach ($_SESSION['cart'] as &$item) {
        $product_price = get_product_price($item['product_id']);
        $total_cost += $product_price * $item['quantity'];
    }
    return $total_cost;
}

// Function to display cart contents
function display_cart_contents() {
    global $_SESSION;
    
    echo '<h2>Cart Contents:</h2>';
    echo '<table border="1">';
    echo '<tr><th>Product</th><th>Quantity</th><th>Total Cost</th></tr>';
    foreach ($_SESSION['cart'] as $item) {
        echo '<tr><td>' . get_product_name($item['product_id']) . '</td><td>' . $item['quantity'] . '</td><td>$' . (get_product_price($item['product_id']) * $item['quantity']) . '</td></tr>';
    }
    echo '</table>';
}

// Function to process checkout (simple example, may need to be modified for actual use case)
function process_checkout() {
    global $_SESSION;
    
    // For this example, we'll just clear the cart and redirect back to the home page
    unset($_SESSION['cart']);
    header('Location: index.php');
}

// Helper function to get product price (replace with your own database query or logic)
function get_product_price($product_id) {
    return 9.99; // Just a placeholder, replace with actual product prices
}

// Helper function to get product name (replace with your own database query or logic)
function get_product_name($product_id) {
    return 'Example Product'; // Just a placeholder, replace with actual product names
}


<?php
require_once('cart.php');

// Add item to cart
add_item_to_cart(1, 2);
add_item_to_cart(2, 3);

// Display cart contents
display_cart_contents();

// Remove item from cart
remove_item_from_cart(2);

// Update quantity of item in cart
update_quantity_in_cart(1, 4);

// Calculate total cost of items in cart
echo '<p>Total Cost: $' . calculate_total_cost() . '</p>';

// Process checkout (simple example)
process_checkout();
?>


<?php

class Cart {
    private $items;

    function __construct() {
        $this->items = array();
    }

    // Add an item to the cart with a specific quantity
    function add_item($product_id, $quantity) {
        if (array_key_exists($product_id, $this->items)) {
            $this->items[$product_id]['quantity'] += $quantity;
        } else {
            $this->items[$product_id] = array(
                'product_name' => $_SESSION['products'][$product_id]['name'],
                'price' => $_SESSION['products'][$product_id]['price'],
                'quantity' => $quantity
            );
        }
    }

    // Remove an item from the cart
    function remove_item($product_id) {
        if (array_key_exists($product_id, $this->items)) {
            unset($this->items[$product_id]);
        }
    }

    // Update the quantity of an item in the cart
    function update_quantity($product_id, $quantity) {
        if (array_key_exists($product_id, $this->items)) {
            $this->items[$product_id]['quantity'] = max(1, min($quantity, 1000));
        }
    }

    // Calculate the total cost of items in the cart
    function calculate_total() {
        $total = 0;
        foreach ($this->items as $item) {
            $total += $item['price'] * $item['quantity'];
        }
        return $total;
    }

    // Display the contents of the cart
    function display_cart() {
        ?>
        <table>
            <tr>
                <th>Product Name</th>
                <th>Quantity</th>
                <th>Price per unit</th>
                <th>Total Price</th>
            </tr>
        <?php
        foreach ($this->items as $item) { ?>
            <tr>
                <td><?= $item['product_name'] ?></td>
                <td><?= $item['quantity'] ?></td>
                <td><?= number_format($item['price'], 2) ?></td>
                <td><?= number_format($item['price'] * $item['quantity'], 2) ?></td>
            </tr>
        <?php } ?>
            <tr>
                <th>Total</th>
                <th colspan="3"><?= number_format($this->calculate_total(), 2) ?></th>
            </tr>
        </table>
        <?php
    }
}

// Initialize the cart and display it
$cart = new Cart();
if (isset($_SESSION['products'])) {
    $cart->display_cart();
}
?>


<?php
require_once 'cart.php';

// Mock products data
$_SESSION['products'] = array(
    1 => array('name' => 'Product 1', 'price' => 9.99),
    2 => array('name' => 'Product 2', 'price' => 19.99)
);

// Handle form submission to add items to the cart
if (isset($_POST['add'])) {
    $product_id = $_POST['product_id'];
    $quantity = $_POST['quantity'];
    $cart->add_item($product_id, $quantity);
}

// Display the cart and forms to add or remove items
?>
<form action="" method="post">
    <select name="product_id" id="product-id">
        <?php foreach ($_SESSION['products'] as $id => $product) { ?>
            <option value="<?= $id ?>"><?= $product['name'] ?></option>
        <?php } ?>
    </select>
    <input type="number" name="quantity" min="1" max="1000">
    <button type="submit" name="add">Add to Cart</button>
</form>

<?= $cart->display_cart() ?>

<form action="" method="post">
    <select name="product_id" id="remove-product-id">
        <?php foreach ($cart->items as $id => $item) { ?>
            <option value="<?= $id ?>"><?= $item['product_name'] ?></option>
        <?php } ?>
    </select>
    <button type="submit" name="remove">Remove from Cart</button>
</form>

<form action="" method="post">
    <input type="hidden" name="update_product_id" value="">
    <input type="number" name="new_quantity" min="1" max="1000">
    <button type="submit" name="update">Update Quantity</button>
</form>


<?php

// Set session variables for cart and order
session_start();
$cart = array();
$order_id = uniqid();

if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = array();
}

// Function to add item to cart
function add_item_to_cart($product_id, $quantity) {
    global $cart;
    if (array_key_exists($product_id, $cart)) {
        $cart[$product_id] += $quantity;
    } else {
        $cart[$product_id] = $quantity;
    }
}

// Function to remove item from cart
function remove_item_from_cart($product_id) {
    global $cart;
    if (array_key_exists($product_id, $cart)) {
        unset($cart[$product_id]);
    }
}

// Function to update quantity of item in cart
function update_quantity_in_cart($product_id, $quantity) {
    global $cart;
    if (array_key_exists($product_id, $cart)) {
        $cart[$product_id] = $quantity;
    } else {
        echo "Product not found in cart.";
    }
}

// Function to display total cost
function calculate_total_cost() {
    global $cart;
    $total_cost = 0;
    foreach ($cart as $product_id => $quantity) {
        // Retrieve product price from database or external API
        $price = get_product_price($product_id);
        $total_cost += $price * $quantity;
    }
    return $total_cost;
}

// Function to checkout
function checkout() {
    global $order_id, $cart;
    // Create new order in database
    create_new_order($order_id, $cart);
    // Clear cart and session variables
    clear_cart_and_session();
}

?>


<?php include 'cart.php'; ?>

<!DOCTYPE html>
<html>
<head>
    <title>Shopping Cart</title>
</head>
<body>

<h1>Shopping Cart</h1>

<!-- Display current cart contents -->
<table border="1">
    <tr>
        <th>Product ID</th>
        <th>Quantity</th>
        <th>Price</th>
        <th>Total Cost</th>
        <th>Actions</th>
    </tr>
    <?php
        foreach ($cart as $product_id => $quantity) {
            // Retrieve product details from database or external API
            $price = get_product_price($product_id);
            $total_cost = $price * $quantity;
            ?>
            <tr>
                <td><?= $product_id ?></td>
                <td><?= $quantity ?></td>
                <td><?= $price ?></td>
                <td><?= $total_cost ?></td>
                <td>
                    <!-- Update quantity -->
                    <form action="" method="post">
                        <input type="hidden" name="update_quantity" value="<?= $product_id ?>">
                        <select name="new_quantity">
                            <?php for ($i = 1; $i <= 10; $i++) { ?>
                                <option value="<?= $i ?>" <?= ($quantity == $i) ? 'selected' : '' ?>><?= $i ?></option>
                            <?php } ?>
                        </select>
                        <button type="submit">Update Quantity</button>
                    </form>

                    <!-- Remove item from cart -->
                    <form action="" method="post">
                        <input type="hidden" name="remove_item" value="<?= $product_id ?>">
                        <button type="submit">Remove Item</button>
                    </form>
                </td>
            </tr>
        <?php } ?>
    </table>

<!-- Display total cost -->
<p>Total Cost: <?= calculate_total_cost() ?></p>

<!-- Add item to cart form -->
<form action="" method="post">
    <input type="hidden" name="add_item" value="1">
    <select name="product_id">
        <?php
            // Retrieve list of products from database or external API
            $products = get_products();
            foreach ($products as $product) {
                ?>
                <option value="<?= $product['id'] ?>"><?= $product['name'] ?></option>
                <?php
            }
        ?>
    </select>
    <input type="number" name="quantity" placeholder="Quantity">
    <button type="submit">Add to Cart</button>
</form>

<!-- Checkout button -->
<button onclick="checkout()">Checkout</button>

<script>
function checkout() {
    // Call PHP function to create new order
    <?php echo "alert('Order created successfully!');"; ?>
}
</script>


<?php

// Function to get product price from database or external API
function get_product_price($product_id) {
    // Retrieve price from database or external API
    $price = 10.99; // Replace with actual price logic
    return $price;
}

// Function to retrieve list of products from database or external API
function get_products() {
    // Retrieve products from database or external API
    $products = array(
        array('id' => 1, 'name' => 'Product A'),
        array('id' => 2, 'name' => 'Product B'),
        array('id' => 3, 'name' => 'Product C')
    );
    return $products;
}

// Function to create new order in database
function create_new_order($order_id, $cart) {
    // Create new order in database
    // Replace with actual database logic
    echo "Order created successfully!";
}

// Function to clear cart and session variables
function clear_cart_and_session() {
    global $cart;
    $_SESSION['cart'] = array();
    unset($_SESSION['order_id']);
}
?>


<?php

// Initialize session variables
session_start();

// Define products array
$products = [
    ['id' => 1, 'name' => 'Product A', 'price' => 9.99],
    ['id' => 2, 'name' => 'Product B', 'price' => 19.99],
    ['id' => 3, 'name' => 'Product C', 'price' => 29.99]
];

// Initialize cart array
$_SESSION['cart'] = [];

// Display cart contents
function display_cart() {
    global $products;
    global $_SESSION;
    echo '<h2>Cart Contents:</h2>';
    echo '<table border="1">';
    echo '<tr><th>Product</th><th>Price</th><th>Quantity</th></tr>';
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        $product = array_filter($products, function ($p) use ($product_id) { return $p['id'] == $product_id; });
        echo '<tr><td>' . $product[0]['name'] . '</td><td>$' . number_format($product[0]['price'], 2) . '</td><td>' . $quantity . '</td></tr>';
    }
    echo '</table>';
}

// Add product to cart
function add_to_cart($product_id, $quantity = 1) {
    global $_SESSION;
    if (isset($_SESSION['cart'][$product_id])) {
        $_SESSION['cart'][$product_id] += $quantity;
    } else {
        $_SESSION['cart'][$product_id] = $quantity;
    }
}

// Remove product from cart
function remove_from_cart($product_id) {
    global $_SESSION;
    unset($_SESSION['cart'][$product_id]);
}

// Calculate total cost of cart contents
function calculate_total() {
    global $_SESSION;
    global $products;
    $total = 0;
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        $product = array_filter($products, function ($p) use ($product_id) { return $p['id'] == $product_id; });
        $total += $product[0]['price'] * $quantity;
    }
    return number_format($total, 2);
}

// Display checkout form
function display_checkout_form() {
    global $_SESSION;
    echo '<h2>Checkout:</h2>';
    echo '<form action="checkout.php" method="post">';
    echo '<table border="1">';
    echo '<tr><th>Product</th><th>Price</th><th>Quantity</th></tr>';
    foreach ($_SESSION['cart'] as $product_id => $quantity) {
        $product = array_filter($products, function ($p) use ($product_id) { return $p['id'] == $product_id; });
        echo '<tr><td>' . $product[0]['name'] . '</td><td>$' . number_format($product[0]['price'], 2) . '</td><td>' . $quantity . '</td></tr>';
    }
    echo '</table>';
    echo '<input type="submit" value="Proceed to Checkout">';
    echo '</form>';
}

// Display cart contents and checkout form
display_cart();
echo '<p>Total: $' . calculate_total() . '</p>';
display_checkout_form();

?>


<?php

// Initialize session variables
session_start();

// Process checkout form submission
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Get cart contents from session variable
    global $_SESSION;
    $cart = $_SESSION['cart'];

    // Calculate total cost of cart contents
    $total = 0;
    foreach ($cart as $product_id => $quantity) {
        $product = array_filter($products, function ($p) use ($product_id) { return $p['id'] == $product_id; });
        $total += $product[0]['price'] * $quantity;
    }

    // Process payment (e.g. via PayPal or Stripe)
    echo 'Payment processed successfully! Thank you for your order.';
} else {
    header('Location: cart.php');
}

?>


// config.php (configuration file)
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

// db.php (database connection file)
function connectToDB() {
    $conn = new PDO("mysql:host=$GLOBALS['host'];dbname=$GLOBALS['dbname']", $GLOBALS['username'], $GLOBALS['password']);
    return $conn;
}

// cart.php (cart functionality file)
require_once 'config.php';
require_once 'db.php';

class Cart {
    private $conn;

    function __construct() {
        $this->conn = connectToDB();
    }

    // Add item to cart
    public function addItem($product_id, $quantity) {
        try {
            $stmt = $this->conn->prepare("SELECT * FROM products WHERE id = :product_id");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->execute();
            $product = $stmt->fetch();

            if ($product) {
                $cartStmt = $this->conn->prepare("SELECT * FROM carts WHERE user_id = :user_id AND total >= :total");
                $cartStmt->bindParam(':user_id', $_SESSION['user_id']);
                $cartStmt->bindParam(':total', $product['price'] * $quantity);
                $cartStmt->execute();
                $cart = $cartStmt->fetch();

                if (!$cart) {
                    // Create new cart
                    $newCartStmt = $this->conn->prepare("INSERT INTO carts (user_id, total) VALUES (:user_id, :total)");
                    $newCartStmt->bindParam(':user_id', $_SESSION['user_id']);
                    $newCartStmt->bindParam(':total', $product['price'] * $quantity);
                    $newCartStmt->execute();
                    $cartId = $this->conn->lastInsertId();

                    // Add item to cart
                    $addItemStmt = $this->conn->prepare("INSERT INTO cart_items (cart_id, product_id, quantity) VALUES (:cart_id, :product_id, :quantity)");
                    $addItemStmt->bindParam(':cart_id', $cartId);
                    $addItemStmt->bindParam(':product_id', $product['id']);
                    $addItemStmt->bindParam(':quantity', $quantity);
                    $addItemStmt->execute();
                } else {
                    // Add item to existing cart
                    $existingItemStmt = $this->conn->prepare("SELECT * FROM cart_items WHERE product_id = :product_id AND cart_id = :cart_id");
                    $existingItemStmt->bindParam(':product_id', $product['id']);
                    $existingItemStmt->bindParam(':cart_id', $_SESSION['cart_id']);
                    $existingItemStmt->execute();
                    $existingItem = $existingItemStmt->fetch();

                    if (!$existingItem) {
                        // Update quantity in cart
                        $updateQuantityStmt = $this->conn->prepare("UPDATE cart_items SET quantity = quantity + :quantity WHERE product_id = :product_id AND cart_id = :cart_id");
                        $updateQuantityStmt->bindParam(':product_id', $product['id']);
                        $updateQuantityStmt->bindParam(':quantity', $quantity);
                        $updateQuantityStmt->bindParam(':cart_id', $_SESSION['cart_id']);
                        $updateQuantityStmt->execute();
                    } else {
                        // Update quantity in existing item
                        $updateExistingItemStmt = $this->conn->prepare("UPDATE cart_items SET quantity = :quantity WHERE product_id = :product_id AND cart_id = :cart_id");
                        $updateExistingItemStmt->bindParam(':product_id', $product['id']);
                        $updateExistingItemStmt->bindParam(':quantity', $quantity);
                        $updateExistingItemStmt->bindParam(':cart_id', $_SESSION['cart_id']);
                        $updateExistingItemStmt->execute();
                    }
                }

                // Update cart total
                $updateTotalStmt = $this->conn->prepare("UPDATE carts SET total = :total WHERE id = :id");
                $updateTotalStmt->bindParam(':id', $_SESSION['cart_id']);
                $updateTotalStmt->bindParam(':total', $this->getCartTotal());
                $updateTotalStmt->execute();

                // Update session cart ID
                $_SESSION['cart_id'] = $cartId;
            }
        } catch (PDOException $e) {
            print "Error: " . $e->getMessage();
        }
    }

    // Get cart total
    public function getCartTotal() {
        try {
            $stmt = $this->conn->prepare("SELECT * FROM carts WHERE id = :cart_id");
            $stmt->bindParam(':cart_id', $_SESSION['cart_id']);
            $stmt->execute();
            $cart = $stmt->fetch();

            if ($cart) {
                return $cart['total'];
            } else {
                return 0;
            }
        } catch (PDOException $e) {
            print "Error: " . $e->getMessage();
        }
    }

    // Remove item from cart
    public function removeItem($product_id, $quantity = null) {
        try {
            if ($quantity === null) {
                $quantity = 1;
            }

            $stmt = $this->conn->prepare("SELECT * FROM cart_items WHERE product_id = :product_id AND cart_id = :cart_id");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':cart_id', $_SESSION['cart_id']);
            $stmt->execute();
            $item = $stmt->fetch();

            if ($item) {
                // Update quantity in cart
                $updateQuantityStmt = $this->conn->prepare("UPDATE cart_items SET quantity = :quantity WHERE product_id = :product_id AND cart_id = :cart_id");
                $updateQuantityStmt->bindParam(':product_id', $product_id);
                $updateQuantityStmt->bindParam(':quantity', 0);
                $updateQuantityStmt->bindParam(':cart_id', $_SESSION['cart_id']);
                $updateQuantityStmt->execute();

                // Update cart total
                $updateTotalStmt = $this->conn->prepare("UPDATE carts SET total = :total WHERE id = :id");
                $updateTotalStmt->bindParam(':id', $_SESSION['cart_id']);
                $updateTotalStmt->bindParam(':total', $this->getCartTotal());
                $updateTotalStmt->execute();
            }
        } catch (PDOException $e) {
            print "Error: " . $e->getMessage();
        }
    }

    // Update quantity of item in cart
    public function updateQuantity($product_id, $quantity) {
        try {
            $stmt = $this->conn->prepare("SELECT * FROM cart_items WHERE product_id = :product_id AND cart_id = :cart_id");
            $stmt->bindParam(':product_id', $product_id);
            $stmt->bindParam(':cart_id', $_SESSION['cart_id']);
            $stmt->execute();
            $item = $stmt->fetch();

            if ($item) {
                // Update quantity in cart
                $updateQuantityStmt = $this->conn->prepare("UPDATE cart_items SET quantity = :quantity WHERE product_id = :product_id AND cart_id = :cart_id");
                $updateQuantityStmt->bindParam(':product_id', $product_id);
                $updateQuantityStmt->bindParam(':quantity', $quantity);
                $updateQuantityStmt->bindParam(':cart_id', $_SESSION['cart_id']);
                $updateQuantityStmt->execute();

                // Update cart total
                $updateTotalStmt = $this->conn->prepare("UPDATE carts SET total = :total WHERE id = :id");
                $updateTotalStmt->bindParam(':id', $_SESSION['cart_id']);
                $updateTotalStmt->bindParam(':total', $this->getCartTotal());
                $updateTotalStmt->execute();
            }
        } catch (PDOException $e) {
            print "Error: " . $e->getMessage();
        }
    }

    // Get cart items
    public function getCartItems() {
        try {
            $stmt = $this->conn->prepare("SELECT * FROM cart_items WHERE cart_id = :cart_id");
            $stmt->bindParam(':cart_id', $_SESSION['cart_id']);
            $stmt->execute();
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            print "Error: " . $e->getMessage();
        }
    }
}

// Example usage
$cart = new Cart();

// Add item to cart
$cart->addItem(1, 2);

// View cart items
print_r($cart->getCartItems());

// Update quantity of item in cart
$cart->updateQuantity(1, 3);

// Remove item from cart
$cart->removeItem(1);


<?php

// Initialize the cart array
$cart = array();

// Function to add item to cart
function addItem($item_id, $quantity) {
  global $cart;
  if (isset($cart[$item_id])) {
    // If item is already in cart, increment quantity
    $cart[$item_id] += $quantity;
  } else {
    // Add new item to cart with specified quantity
    $cart[$item_id] = $quantity;
  }
}

// Function to remove item from cart
function removeItem($item_id) {
  global $cart;
  if (isset($cart[$item_id])) {
    unset($cart[$item_id]);
  }
}

// Function to update quantity of item in cart
function updateQuantity($item_id, $new_quantity) {
  global $cart;
  if (isset($cart[$item_id])) {
    $cart[$item_id] = $new_quantity;
  }
}

// Function to get total cost of items in cart
function getTotalCost() {
  global $cart;
  $total_cost = 0;
  foreach ($cart as $item_id => $quantity) {
    // Assume we have a function get_item_price($item_id) that returns the price of an item
    $price = get_item_price($item_id);
    $total_cost += $price * $quantity;
  }
  return $total_cost;
}

// Function to display cart contents
function displayCart() {
  global $cart;
  echo "<h2>Shopping Cart</h2>";
  echo "<table border='1'>";
  echo "<tr><th>Item ID</th><th>Quantity</th><th>Price</th></tr>";
  foreach ($cart as $item_id => $quantity) {
    // Assume we have a function get_item_price($item_id) that returns the price of an item
    $price = get_item_price($item_id);
    echo "<tr><td>$item_id</td><td>$quantity</td><td>\$$price</td></tr>";
  }
  echo "</table>";
}

// Example usage:
if (isset($_POST['add'])) {
  addItem($_POST['item_id'], $_POST['quantity']);
} elseif (isset($_POST['remove'])) {
  removeItem($_POST['item_id']);
} elseif (isset($_POST['update'])) {
  updateQuantity($_POST['item_id'], $_POST['new_quantity']);
}

if (isset($_POST['display_cart'])) {
  displayCart();
}

// Display cart contents and form for adding/removing/updating items
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="hidden" name="item_id" value="<?php echo $cart_item; ?>">
  <input type="number" name="quantity" value="<?php echo $cart_quantity; ?>">
  <input type="submit" name="add" value="Add to Cart">
</form>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="hidden" name="item_id" value="<?php echo $cart_item; ?>">
  <input type="submit" name="remove" value="Remove from Cart">
</form>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="hidden" name="item_id" value="<?php echo $cart_item; ?>">
  <input type="number" name="new_quantity" value="<?php echo $new_quantity; ?>">
  <input type="submit" name="update" value="Update Quantity">
</form>

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">
  <input type="submit" name="display_cart" value="Display Cart">
</form>

<?php
// Display total cost of items in cart
echo "Total Cost: \$$getTotalCost()";
?>

