{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a simple purchase functionality using PHP, including the following features:\n\n1.  **Adding items to cart**:\n    *   The user can select products and add them to their cart.\n2.  **Viewing cart contents**:\n    *   The user can view all the items currently in their cart.\n3.  **Updating quantity of items in cart**:\n    *   The user can increase or decrease the quantity of an item in their cart.\n4.  **Removing items from cart**:\n    *   The user can remove individual items from their cart.\n\nHere's a sample code to implement these features:\n\n```php\n// Product class (for demonstration purposes)\nclass Product {\n    public $id;\n    public $name;\n    public $price;\n\n    function __construct($id, $name, $price) {\n        $this->id = $id;\n        $this->name = $name;\n        $this->price = $price;\n    }\n}\n\n// Cart class\nclass Cart {\n    public $items;\n\n    function __construct() {\n        $this->items = array();\n    }\n\n    // Add item to cart\n    function addItem($item, $quantity) {\n        if (array_key_exists($item->id, $this->items)) {\n            $this->items[$item->id]['quantity'] += $quantity;\n        } else {\n            $this->items[$item->id] = array('product' => $item, 'quantity' => $quantity);\n        }\n    }\n\n    // Update quantity of an item\n    function updateQuantity($itemId, $newQuantity) {\n        if (array_key_exists($itemId, $this->items)) {\n            $this->items[$itemId]['quantity'] = $newQuantity;\n        } else {\n            throw new Exception(\"Item not found in cart\");\n        }\n    }\n\n    // Remove item from cart\n    function removeItem($itemId) {\n        unset($this->items[$itemId]);\n    }\n\n    // View cart contents\n    function viewCart() {\n        echo \"Cart Contents:\\n\";\n        foreach ($this->items as $item) {\n            echo \"Product: \" . $item['product']->name . \", Quantity: \" . $item['quantity'] . \"\\n\";\n        }\n    }\n}\n\n// Example usage\n$cart = new Cart();\n\n$product1 = new Product(1, \"Book\", 10.99);\n$product2 = new Product(2, \"Pencil\", 0.99);\n\n$cart->addItem($product1, 3);\n$cart->addItem($product2, 5);\n\necho \"Initial cart contents:\\n\";\n$cart->viewCart();\n\n// Update quantity of an item\n$cart->updateQuantity(1, 4);\n\necho \"\\nUpdated cart contents after updating quantity:\\n\";\n$cart->viewCart();\n\n// Remove an item from the cart\n$cart->removeItem(2);\n\necho \"\\nCart contents after removing an item:\\n\";\n$cart->viewCart();\n```\n\nThis code includes a `Product` class for simplicity, and a `Cart` class with methods to add items, update quantities, remove items, and view cart contents. You can extend this basic implementation according to your specific needs.\n\nPlease note that you'll need a database connection (for example using MySQL) or other storage solution in a real-world application to persist the cart data across sessions.", "code_blocks": ["```php\n// Product class (for demonstration purposes)\nclass Product {\n    public $id;\n    public $name;\n    public $price;\n\n    function __construct($id, $name, $price) {\n        $this->id = $id;\n        $this->name = $name;\n        $this->price = $price;\n    }\n}\n\n// Cart class\nclass Cart {\n    public $items;\n\n    function __construct() {\n        $this->items = array();\n    }\n\n    // Add item to cart\n    function addItem($item, $quantity) {\n        if (array_key_exists($item->id, $this->items)) {\n            $this->items[$item->id]['quantity'] += $quantity;\n        } else {\n            $this->items[$item->id] = array('product' => $item, 'quantity' => $quantity);\n        }\n    }\n\n    // Update quantity of an item\n    function updateQuantity($itemId, $newQuantity) {\n        if (array_key_exists($itemId, $this->items)) {\n            $this->items[$itemId]['quantity'] = $newQuantity;\n        } else {\n            throw new Exception(\"Item not found in cart\");\n        }\n    }\n\n    // Remove item from cart\n    function removeItem($itemId) {\n        unset($this->items[$itemId]);\n    }\n\n    // View cart contents\n    function viewCart() {\n        echo \"Cart Contents:\\n\";\n        foreach ($this->items as $item) {\n            echo \"Product: \" . $item['product']->name . \", Quantity: \" . $item['quantity'] . \"\\n\";\n        }\n    }\n}\n\n// Example usage\n$cart = new Cart();\n\n$product1 = new Product(1, \"Book\", 10.99);\n$product2 = new Product(2, \"Pencil\", 0.99);\n\n$cart->addItem($product1, 3);\n$cart->addItem($product2, 5);\n\necho \"Initial cart contents:\\n\";\n$cart->viewCart();\n\n// Update quantity of an item\n$cart->updateQuantity(1, 4);\n\necho \"\\nUpdated cart contents after updating quantity:\\n\";\n$cart->viewCart();\n\n// Remove an item from the cart\n$cart->removeItem(2);\n\necho \"\\nCart contents after removing an item:\\n\";\n$cart->viewCart();\n```"]}
