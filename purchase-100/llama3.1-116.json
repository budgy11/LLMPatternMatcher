{"prompt": "Create a purchase functionality using php", "llm_output": "Here's an example of a basic purchase functionality using PHP:\n\n**Database Schema**\n\nLet's assume we have two tables: `products` and `orders`.\n\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE orders (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT,\n  product_id INT,\n  quantity INT,\n  total DECIMAL(10,2),\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n**PHP Code**\n\nWe'll create a `PurchaseController` to handle the purchase functionality. This controller will have methods for creating an order and updating the stock.\n\n```php\n// controllers/PurchaseController.php\n\nclass PurchaseController extends Controller {\n    public function index() {\n        // Display products page\n        $products = Product::all();\n        return view('products', compact('products'));\n    }\n\n    public function store(Request $request) {\n        // Validate input data\n        $validatedData = $request->validate([\n            'product_id' => 'required|integer',\n            'quantity' => 'required|integer|min:1'\n        ]);\n\n        // Get product details\n        $product = Product::find($validatedData['product_id']);\n\n        if (!$product) {\n            return redirect()->back()->with('error', 'Product not found');\n        }\n\n        // Check stock availability\n        if ($product->stock < $validatedData['quantity']) {\n            return redirect()->back()->with('error', 'Insufficient stock');\n        }\n\n        // Create order\n        $order = new Order();\n        $order->user_id = auth()->id(); // Get current user ID\n        $order->product_id = $validatedData['product_id'];\n        $order->quantity = $validatedData['quantity'];\n        $order->total = $product->price * $validatedData['quantity'];\n        $order->save();\n\n        // Update product stock\n        $product->stock -= $validatedData['quantity'];\n        $product->save();\n\n        return redirect()->back()->with('success', 'Order created successfully');\n    }\n}\n```\n\n**Routes**\n\nIn your `routes.php` file, add the following route:\n\n```php\nRoute::get('/products', [PurchaseController::class, 'index']);\nRoute::post('/order', [PurchaseController::class, 'store']);\n```\n\nThis is a basic example to demonstrate a purchase functionality using PHP. You can enhance it by adding more features like payment gateway integration, user authentication, and error handling.\n\n**View**\n\nTo display the products page, create a Blade template (`resources/views/products.blade.php`) with a form to submit the product ID and quantity:\n\n```php\n<!-- resources/views/products.blade.php -->\n\n<form action=\"{{ route('order') }}\" method=\"post\">\n    @csrf\n\n    <select name=\"product_id\" id=\"product-id\">\n        @foreach ($products as $product)\n            <option value=\"{{ $product->id }}\">{{ $product->name }} ({{ $product->price }})</option>\n        @endforeach\n    </select>\n\n    <input type=\"number\" name=\"quantity\" id=\"quantity\" min=\"1\">\n\n    <button type=\"submit\">Add to Cart</button>\n</form>\n```\n\nThis is a basic implementation, and you can customize it according to your requirements.", "code_blocks": [null, "```php\n// controllers/PurchaseController.php\n\nclass PurchaseController extends Controller {\n    public function index() {\n        // Display products page\n        $products = Product::all();\n        return view('products', compact('products'));\n    }\n\n    public function store(Request $request) {\n        // Validate input data\n        $validatedData = $request->validate([\n            'product_id' => 'required|integer',\n            'quantity' => 'required|integer|min:1'\n        ]);\n\n        // Get product details\n        $product = Product::find($validatedData['product_id']);\n\n        if (!$product) {\n            return redirect()->back()->with('error', 'Product not found');\n        }\n\n        // Check stock availability\n        if ($product->stock < $validatedData['quantity']) {\n            return redirect()->back()->with('error', 'Insufficient stock');\n        }\n\n        // Create order\n        $order = new Order();\n        $order->user_id = auth()->id(); // Get current user ID\n        $order->product_id = $validatedData['product_id'];\n        $order->quantity = $validatedData['quantity'];\n        $order->total = $product->price * $validatedData['quantity'];\n        $order->save();\n\n        // Update product stock\n        $product->stock -= $validatedData['quantity'];\n        $product->save();\n\n        return redirect()->back()->with('success', 'Order created successfully');\n    }\n}\n```", "```php\nRoute::get('/products', [PurchaseController::class, 'index']);\nRoute::post('/order', [PurchaseController::class, 'store']);\n```", "```php\n<!-- resources/views/products.blade.php -->\n\n<form action=\"{{ route('order') }}\" method=\"post\">\n    @csrf\n\n    <select name=\"product_id\" id=\"product-id\">\n        @foreach ($products as $product)\n            <option value=\"{{ $product->id }}\">{{ $product->name }} ({{ $product->price }})</option>\n        @endforeach\n    </select>\n\n    <input type=\"number\" name=\"quantity\" id=\"quantity\" min=\"1\">\n\n    <button type=\"submit\">Add to Cart</button>\n</form>\n```"]}
