{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality in PHP:\n\n**Database Schema:**\n\nWe will assume a simple database schema with the following tables:\n\n* `products`: stores information about products\n\t+ `id` (primary key)\n\t+ `name`\n\t+ `price`\n* `orders`: stores information about orders\n\t+ `id` (primary key)\n\t+ `customer_id`\n\t+ `order_date`\n* `order_items`: stores information about items in an order\n\t+ `id` (primary key)\n\t+ `order_id`\n\t+ `product_id`\n\t+ `quantity`\n\n**PHP Code:**\n\nWe will create a class called `PurchaseController` to handle purchase functionality.\n\n```php\n// db.php - database connection settings\n\nclass PurchaseController {\n    private $db;\n\n    function __construct() {\n        $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n    }\n\n    // Function to add a product to cart\n    function add_to_cart($product_id, $quantity) {\n        try {\n            $query = \"INSERT INTO order_items (order_id, product_id, quantity)\n                      VALUES (:order_id, :product_id, :quantity)\";\n            $stmt = $this->db->prepare($query);\n            $stmt->bindParam(':order_id', $_SESSION['cart_order_id']);\n            $stmt->bindParam(':product_id', $product_id);\n            $stmt->bindParam(':quantity', $quantity);\n            $stmt->execute();\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to create a new order\n    function create_order() {\n        try {\n            $query = \"INSERT INTO orders (customer_id, order_date)\n                      VALUES (:customer_id, NOW())\";\n            $stmt = $this->db->prepare($query);\n            $stmt->bindParam(':customer_id', $_SESSION['customer_id']);\n            $stmt->execute();\n            return $this->db->lastInsertId('orders');\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to update the cart\n    function update_cart() {\n        try {\n            $query = \"SELECT order_id FROM orders WHERE customer_id = :customer_id\";\n            $stmt = $this->db->prepare($query);\n            $stmt->bindParam(':customer_id', $_SESSION['customer_id']);\n            $stmt->execute();\n            if ($row = $stmt->fetch()) {\n                $_SESSION['cart_order_id'] = $row['order_id'];\n                return true;\n            } else {\n                return false;\n            }\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to checkout\n    function checkout() {\n        try {\n            if ($this->update_cart()) {\n                $order_id = $this->create_order();\n                $_SESSION['cart'] = array();\n                return $order_id;\n            } else {\n                return false;\n            }\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to display cart contents\n    function display_cart() {\n        try {\n            $query = \"SELECT oi.product_id, p.name, oi.quantity, oi.order_id\n                      FROM order_items oi\n                      JOIN products p ON oi.product_id = p.id\n                      WHERE oi.order_id = :order_id\";\n            $stmt = $this->db->prepare($query);\n            $stmt->bindParam(':order_id', $_SESSION['cart_order_id']);\n            $stmt->execute();\n            return $stmt->fetchAll();\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to calculate subtotal\n    function calculate_subtotal() {\n        try {\n            $query = \"SELECT SUM(oi.quantity * p.price) AS subtotal\n                      FROM order_items oi\n                      JOIN products p ON oi.product_id = p.id\n                      WHERE oi.order_id = :order_id\";\n            $stmt = $this->db->prepare($query);\n            $stmt->bindParam(':order_id', $_SESSION['cart_order_id']);\n            $stmt->execute();\n            return $stmt->fetchColumn();\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to process payment\n    function process_payment($amount) {\n        try {\n            // Process payment using a payment gateway\n            // For example:\n            $payment_gateway = new PayPalGateway('YOUR_PAYPAL_ID', 'YOUR_PAYPAL_SECRET');\n            $response = $payment_gateway->pay($amount);\n            if ($response['status'] == 'success') {\n                return true;\n            } else {\n                return false;\n            }\n        } catch (Exception $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to save order\n    function save_order($order_id, $customer_id) {\n        try {\n            $query = \"INSERT INTO orders (id, customer_id, order_date)\n                      VALUES (:order_id, :customer_id, NOW())\";\n            $stmt = $this->db->prepare($query);\n            $stmt->bindParam(':order_id', $order_id);\n            $stmt->bindParam(':customer_id', $customer_id);\n            $stmt->execute();\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to save order items\n    function save_order_items($order_id) {\n        try {\n            $query = \"INSERT INTO order_items (id, order_id, product_id, quantity)\n                      VALUES (:id, :order_id, :product_id, :quantity)\";\n            $stmt = $this->db->prepare($query);\n            foreach ($_SESSION['cart'] as $item) {\n                $stmt->bindParam(':id', $item['id']);\n                $stmt->bindParam(':order_id', $order_id);\n                $stmt->bindParam(':product_id', $item['product_id']);\n                $stmt->bindParam(':quantity', $item['quantity']);\n                $stmt->execute();\n            }\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to complete purchase\n    function complete_purchase() {\n        try {\n            $order_id = $this->checkout();\n            if ($order_id !== false) {\n                foreach ($_SESSION['cart'] as $item) {\n                    $this->add_to_cart($item['product_id'], $item['quantity']);\n                }\n                $this->save_order($order_id, $_SESSION['customer_id']);\n                $this->save_order_items($order_id);\n            } else {\n                return false;\n            }\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n}\n```\n\n**Example Usage:**\n\nTo use this purchase functionality, you would create an instance of the `PurchaseController` class and call its methods as needed.\n\n```php\n$controller = new PurchaseController();\n\n// Add a product to cart\n$controller->add_to_cart(1, 2);\n\n// Update cart contents\nif ($controller->update_cart()) {\n    // Cart contents are updated\n} else {\n    // Cart contents could not be updated\n}\n\n// Display cart contents\n/cart_contents = $controller->display_cart();\n\n// Calculate subtotal\n$sub_total = $controller->calculate_subtotal();\n\n// Process payment\n$payment_result = $controller->process_payment($sub_total);\n\n// Save order and items\n$order_id = $controller->complete_purchase();\n```\n\nNote that this is a basic example, and you may need to modify it to fit your specific use case. Additionally, you will need to implement the `PayPalGateway` class (or equivalent) to handle payment processing.", "code_blocks": ["```php\n// db.php - database connection settings\n\nclass PurchaseController {\n    private $db;\n\n    function __construct() {\n        $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n    }\n\n    // Function to add a product to cart\n    function add_to_cart($product_id, $quantity) {\n        try {\n            $query = \"INSERT INTO order_items (order_id, product_id, quantity)\n                      VALUES (:order_id, :product_id, :quantity)\";\n            $stmt = $this->db->prepare($query);\n            $stmt->bindParam(':order_id', $_SESSION['cart_order_id']);\n            $stmt->bindParam(':product_id', $product_id);\n            $stmt->bindParam(':quantity', $quantity);\n            $stmt->execute();\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to create a new order\n    function create_order() {\n        try {\n            $query = \"INSERT INTO orders (customer_id, order_date)\n                      VALUES (:customer_id, NOW())\";\n            $stmt = $this->db->prepare($query);\n            $stmt->bindParam(':customer_id', $_SESSION['customer_id']);\n            $stmt->execute();\n            return $this->db->lastInsertId('orders');\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to update the cart\n    function update_cart() {\n        try {\n            $query = \"SELECT order_id FROM orders WHERE customer_id = :customer_id\";\n            $stmt = $this->db->prepare($query);\n            $stmt->bindParam(':customer_id', $_SESSION['customer_id']);\n            $stmt->execute();\n            if ($row = $stmt->fetch()) {\n                $_SESSION['cart_order_id'] = $row['order_id'];\n                return true;\n            } else {\n                return false;\n            }\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to checkout\n    function checkout() {\n        try {\n            if ($this->update_cart()) {\n                $order_id = $this->create_order();\n                $_SESSION['cart'] = array();\n                return $order_id;\n            } else {\n                return false;\n            }\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to display cart contents\n    function display_cart() {\n        try {\n            $query = \"SELECT oi.product_id, p.name, oi.quantity, oi.order_id\n                      FROM order_items oi\n                      JOIN products p ON oi.product_id = p.id\n                      WHERE oi.order_id = :order_id\";\n            $stmt = $this->db->prepare($query);\n            $stmt->bindParam(':order_id', $_SESSION['cart_order_id']);\n            $stmt->execute();\n            return $stmt->fetchAll();\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to calculate subtotal\n    function calculate_subtotal() {\n        try {\n            $query = \"SELECT SUM(oi.quantity * p.price) AS subtotal\n                      FROM order_items oi\n                      JOIN products p ON oi.product_id = p.id\n                      WHERE oi.order_id = :order_id\";\n            $stmt = $this->db->prepare($query);\n            $stmt->bindParam(':order_id', $_SESSION['cart_order_id']);\n            $stmt->execute();\n            return $stmt->fetchColumn();\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to process payment\n    function process_payment($amount) {\n        try {\n            // Process payment using a payment gateway\n            // For example:\n            $payment_gateway = new PayPalGateway('YOUR_PAYPAL_ID', 'YOUR_PAYPAL_SECRET');\n            $response = $payment_gateway->pay($amount);\n            if ($response['status'] == 'success') {\n                return true;\n            } else {\n                return false;\n            }\n        } catch (Exception $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to save order\n    function save_order($order_id, $customer_id) {\n        try {\n            $query = \"INSERT INTO orders (id, customer_id, order_date)\n                      VALUES (:order_id, :customer_id, NOW())\";\n            $stmt = $this->db->prepare($query);\n            $stmt->bindParam(':order_id', $order_id);\n            $stmt->bindParam(':customer_id', $customer_id);\n            $stmt->execute();\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to save order items\n    function save_order_items($order_id) {\n        try {\n            $query = \"INSERT INTO order_items (id, order_id, product_id, quantity)\n                      VALUES (:id, :order_id, :product_id, :quantity)\";\n            $stmt = $this->db->prepare($query);\n            foreach ($_SESSION['cart'] as $item) {\n                $stmt->bindParam(':id', $item['id']);\n                $stmt->bindParam(':order_id', $order_id);\n                $stmt->bindParam(':product_id', $item['product_id']);\n                $stmt->bindParam(':quantity', $item['quantity']);\n                $stmt->execute();\n            }\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n\n    // Function to complete purchase\n    function complete_purchase() {\n        try {\n            $order_id = $this->checkout();\n            if ($order_id !== false) {\n                foreach ($_SESSION['cart'] as $item) {\n                    $this->add_to_cart($item['product_id'], $item['quantity']);\n                }\n                $this->save_order($order_id, $_SESSION['customer_id']);\n                $this->save_order_items($order_id);\n            } else {\n                return false;\n            }\n        } catch (PDOException $e) {\n            echo 'Error: ' . $e->getMessage();\n        }\n    }\n}\n```", "```php\n$controller = new PurchaseController();\n\n// Add a product to cart\n$controller->add_to_cart(1, 2);\n\n// Update cart contents\nif ($controller->update_cart()) {\n    // Cart contents are updated\n} else {\n    // Cart contents could not be updated\n}\n\n// Display cart contents\n/cart_contents = $controller->display_cart();\n\n// Calculate subtotal\n$sub_total = $controller->calculate_subtotal();\n\n// Process payment\n$payment_result = $controller->process_payment($sub_total);\n\n// Save order and items\n$order_id = $controller->complete_purchase();\n```"]}
