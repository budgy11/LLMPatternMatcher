{"prompt": "Create a purchase functionality using php", "llm_output": "Here's an example of how you can create a basic purchase functionality using PHP. This will include creating a cart, adding items to the cart, calculating the total cost, and processing the payment.\n\n**Database Setup**\n\nFirst, let's set up our database with two tables: `products` and `carts`.\n\n```sql\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2)\n);\n\nCREATE TABLE carts (\n    id INT PRIMARY KEY,\n    user_id INT,\n    product_id INT,\n    quantity INT,\n    total_cost DECIMAL(10,2)\n);\n```\n\n**PHP Code**\n\nWe'll create a `Cart` class to handle the cart operations.\n\n```php\n// Cart.php\n\nclass Cart {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Add item to cart\n    public function addItem($productId, $quantity) {\n        try {\n            $stmt = $this->db->prepare(\"SELECT * FROM products WHERE id = :id\");\n            $stmt->execute(['id' => $productId]);\n            $product = $stmt->fetch();\n\n            if ($product && $quantity > 0) {\n                $cartItem = [\n                    'user_id' => $_SESSION['user_id'],\n                    'product_id' => $productId,\n                    'quantity' => $quantity\n                ];\n\n                // Check if product is already in cart\n                $stmt = $this->db->prepare(\"SELECT * FROM carts WHERE user_id = :userId AND product_id = :productId\");\n                $stmt->execute($cartItem);\n                $existingCartItem = $stmt->fetch();\n\n                if ($existingCartItem) {\n                    // Update existing item\n                    $updateStmt = $this->db->prepare(\"UPDATE carts SET quantity = quantity + :quantity WHERE user_id = :userId AND product_id = :productId\");\n                    $updateStmt->execute(array_merge($cartItem, ['quantity' => $quantity]));\n                } else {\n                    // Add new item to cart\n                    $insertStmt = $this->db->prepare(\"INSERT INTO carts (user_id, product_id, quantity) VALUES (:userId, :productId, :quantity)\");\n                    $insertStmt->execute($cartItem);\n                }\n\n                return true;\n            }\n        } catch (Exception $e) {\n            // Handle database error\n            echo \"Error adding item to cart: \" . $e->getMessage();\n        }\n    }\n\n    // Get cart contents\n    public function getContents() {\n        try {\n            $stmt = $this->db->prepare(\"SELECT * FROM carts WHERE user_id = :userId\");\n            $stmt->execute(['userId' => $_SESSION['user_id']]);\n            return $stmt->fetchAll();\n        } catch (Exception $e) {\n            // Handle database error\n            echo \"Error retrieving cart contents: \" . $e->getMessage();\n        }\n    }\n\n    // Calculate total cost of cart\n    public function calculateTotal() {\n        try {\n            $total = 0;\n            foreach ($this->getContents() as $cartItem) {\n                $productPrice = $this->db->prepare(\"SELECT price FROM products WHERE id = :id\")->execute(['id' => $cartItem['product_id']])->fetch()['price'];\n                $total += $cartItem['quantity'] * $productPrice;\n            }\n            return $total;\n        } catch (Exception $e) {\n            // Handle database error\n            echo \"Error calculating total cost: \" . $e->getMessage();\n        }\n    }\n\n    // Process payment (simply for demonstration purposes)\n    public function processPayment() {\n        try {\n            // Assume we have a payment gateway integrated here...\n            // Simulate payment processing by updating cart status to 'paid'\n            $updateStmt = $this->db->prepare(\"UPDATE carts SET status = 'paid' WHERE user_id = :userId\");\n            $updateStmt->execute(['userId' => $_SESSION['user_id']]);\n        } catch (Exception $e) {\n            // Handle database error\n            echo \"Error processing payment: \" . $e->getMessage();\n        }\n    }\n}\n```\n\n**Usage**\n\nTo use the `Cart` class, you would need to:\n\n1. Include the PHP file in your script.\n2. Create a new instance of the `Cart` class, passing the database object as an argument.\n3. Use methods like `addItem()`, `getContents()`, and `calculateTotal()` to manage the cart.\n\n```php\n// example.php\n\nrequire_once 'cart.php';\n\n$db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n\n$cart = new Cart($db);\n\n// Add item to cart\n$cart->addItem(1, 2); // Product ID 1, quantity 2\n\n// Get cart contents\n$cartsContents = $cart->getContents();\n\n// Calculate total cost of cart\n$totalCost = $cart->calculateTotal();\n\necho \"Cart Contents: \";\nprint_r($cartsContents);\necho \"\\n\";\necho \"Total Cost: $\" . number_format($totalCost, 2);\n\n// Process payment (simply for demonstration purposes)\n$cart->processPayment();\n```\n\nThis is a basic example to demonstrate the purchase functionality using PHP. You may need to adapt it according to your specific requirements and database schema.\n\n**Please Note**: This code is not secure for production use as it does not include input validation, sanitization, or error handling mechanisms that are essential in real-world applications. Always ensure to implement proper security measures when developing a production-ready e-commerce system.", "code_blocks": [null, "```php\n// Cart.php\n\nclass Cart {\n    private $db;\n\n    public function __construct($db) {\n        $this->db = $db;\n    }\n\n    // Add item to cart\n    public function addItem($productId, $quantity) {\n        try {\n            $stmt = $this->db->prepare(\"SELECT * FROM products WHERE id = :id\");\n            $stmt->execute(['id' => $productId]);\n            $product = $stmt->fetch();\n\n            if ($product && $quantity > 0) {\n                $cartItem = [\n                    'user_id' => $_SESSION['user_id'],\n                    'product_id' => $productId,\n                    'quantity' => $quantity\n                ];\n\n                // Check if product is already in cart\n                $stmt = $this->db->prepare(\"SELECT * FROM carts WHERE user_id = :userId AND product_id = :productId\");\n                $stmt->execute($cartItem);\n                $existingCartItem = $stmt->fetch();\n\n                if ($existingCartItem) {\n                    // Update existing item\n                    $updateStmt = $this->db->prepare(\"UPDATE carts SET quantity = quantity + :quantity WHERE user_id = :userId AND product_id = :productId\");\n                    $updateStmt->execute(array_merge($cartItem, ['quantity' => $quantity]));\n                } else {\n                    // Add new item to cart\n                    $insertStmt = $this->db->prepare(\"INSERT INTO carts (user_id, product_id, quantity) VALUES (:userId, :productId, :quantity)\");\n                    $insertStmt->execute($cartItem);\n                }\n\n                return true;\n            }\n        } catch (Exception $e) {\n            // Handle database error\n            echo \"Error adding item to cart: \" . $e->getMessage();\n        }\n    }\n\n    // Get cart contents\n    public function getContents() {\n        try {\n            $stmt = $this->db->prepare(\"SELECT * FROM carts WHERE user_id = :userId\");\n            $stmt->execute(['userId' => $_SESSION['user_id']]);\n            return $stmt->fetchAll();\n        } catch (Exception $e) {\n            // Handle database error\n            echo \"Error retrieving cart contents: \" . $e->getMessage();\n        }\n    }\n\n    // Calculate total cost of cart\n    public function calculateTotal() {\n        try {\n            $total = 0;\n            foreach ($this->getContents() as $cartItem) {\n                $productPrice = $this->db->prepare(\"SELECT price FROM products WHERE id = :id\")->execute(['id' => $cartItem['product_id']])->fetch()['price'];\n                $total += $cartItem['quantity'] * $productPrice;\n            }\n            return $total;\n        } catch (Exception $e) {\n            // Handle database error\n            echo \"Error calculating total cost: \" . $e->getMessage();\n        }\n    }\n\n    // Process payment (simply for demonstration purposes)\n    public function processPayment() {\n        try {\n            // Assume we have a payment gateway integrated here...\n            // Simulate payment processing by updating cart status to 'paid'\n            $updateStmt = $this->db->prepare(\"UPDATE carts SET status = 'paid' WHERE user_id = :userId\");\n            $updateStmt->execute(['userId' => $_SESSION['user_id']]);\n        } catch (Exception $e) {\n            // Handle database error\n            echo \"Error processing payment: \" . $e->getMessage();\n        }\n    }\n}\n```", "```php\n// example.php\n\nrequire_once 'cart.php';\n\n$db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n\n$cart = new Cart($db);\n\n// Add item to cart\n$cart->addItem(1, 2); // Product ID 1, quantity 2\n\n// Get cart contents\n$cartsContents = $cart->getContents();\n\n// Calculate total cost of cart\n$totalCost = $cart->calculateTotal();\n\necho \"Cart Contents: \";\nprint_r($cartsContents);\necho \"\\n\";\necho \"Total Cost: $\" . number_format($totalCost, 2);\n\n// Process payment (simply for demonstration purposes)\n$cart->processPayment();\n```"]}
