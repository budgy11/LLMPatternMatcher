{"prompt": "Create a purchase functionality using php", "llm_output": "```php\n<?php\n\n// Sample Product Data (replace with your database connection)\n$products = [\n    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],\n    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],\n    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],\n];\n\n// Session handling (for storing shopping cart data)\nsession_start();\n\n// Initialize shopping cart if it doesn't exist\nif (!isset($_SESSION['cart'])) {\n    $_SESSION['cart'] = [];\n}\n\n// Function to add a product to the cart\nfunction add_to_cart($product_id, $quantity = 1) {\n    if (array_key_exists($product_id, $products)) {\n        $product = $products[$product_id];\n\n        if (isset($_SESSION['cart'][$product_id])) {\n            // Product already in cart, increase quantity\n            $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n        } else {\n            // Product not in cart, add it\n            $_SESSION['cart'][$product_id] = [\n                'id' => $product_id,\n                'name' => $product['name'],\n                'price' => $product['price'],\n                'quantity' => $quantity,\n            ];\n        }\n    }\n}\n\n// Function to remove a product from the cart\nfunction remove_from_cart($product_id) {\n    if (isset($_SESSION['cart'][$product_id])) {\n        unset($_SESSION['cart'][$product_id]);\n    }\n}\n\n// Function to update the quantity of a product in the cart\nfunction update_quantity($product_id, $new_quantity) {\n    if (isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;\n    }\n}\n\n// Function to get the cart total\nfunction get_cart_total() {\n    $total = 0;\n    foreach ($_SESSION['cart'] as $item) {\n        $total += $item['price'] * $item['quantity'];\n    }\n    return $total;\n}\n\n// --- Handling form submissions ---\n\n// Check if the \"add\" button was pressed\nif ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['add_to_cart'])) {\n    $product_id = $_POST['product_id'];\n    $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1; // Default quantity is 1\n\n    add_to_cart($product_id, $quantity);\n}\n\n// Check if the \"remove\" button was pressed\nif ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['remove_product'])) {\n    $product_id = $_POST['product_id'];\n    remove_from_cart($product_id);\n}\n\n// Check if the \"update_quantity\" button was pressed\nif ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['update_quantity'])) {\n    $product_id = $_POST['product_id'];\n    $new_quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1; // Default quantity is 1\n\n    update_quantity($product_id, $new_quantity);\n}\n\n\n// --- Displaying the Cart ---\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n    <style>\n        .cart-item {\n            margin-bottom: 10px;\n            border: 1px solid #ccc;\n            padding: 10px;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Shopping Cart</h1>\n\n<?php\n// Display cart items\nif (count($_SESSION['cart']) > 0) {\n    echo \"<h2>Cart Items:</h2>\";\n    foreach ($_SESSION['cart'] as $item) {\n        echo '<div class=\"cart-item\">';\n        echo '<strong>' . $item['name'] . '</strong> - $' . $item['price'] . '<br>';\n        echo 'Quantity: ' . $item['quantity'] . '<br>';\n        echo '<form method=\"post\" action=\"\">';\n        echo '<input type=\"hidden\" name=\"product_id\" value=\"' . $item['id'] . '\">';\n        echo '<input type=\"hidden\" name=\"update_quantity\" value=\"update\">';\n        echo '<input type=\"number\" name=\"quantity\" value=\"' . $item['quantity'] . '\" min=\"1\" style=\"width: 50px;\">';\n        echo '<button type=\"submit\">Update Quantity</button>';\n        echo '</form>';\n        echo '<form method=\"post\" action=\"\">';\n        echo '<input type=\"hidden\" name=\"product_id\" value=\"' . $item['id'] . '\">';\n        echo '<input type=\"hidden\" name=\"remove_product\" value=\"remove\">';\n        echo '<button type=\"submit\">Remove</button>';\n        echo '</form>';\n        echo '<br>';\n    }\n} else {\n    echo '<p>Your cart is empty.</p>';\n}\n?>\n\n<br>\n\n<h2>Cart Total:</h2>\n<p><?php echo ' $' . get_cart_total(); ?></p>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Clear Structure:** The code is well-structured into functions for `add_to_cart`, `remove_from_cart`, `update_quantity`, and `get_cart_total`.  This makes the code easier to understand, maintain, and extend.\n* **Session Handling:** Correctly uses `session_start()` to initialize the session and store the shopping cart data.  Sessions are *essential* for maintaining the shopping cart across multiple pages of a website.\n* **Form Handling:** The `$_SERVER['REQUEST_METHOD'] == 'POST'` check ensures that the code only runs when a form has been submitted.  This prevents errors if the script is accessed directly.\n* **Error Prevention:** Uses `isset()` to check if variables are set before using them, preventing errors that can occur when a form is not submitted.  Also, it handles the case where the quantity is not provided in the form.\n* **Quantity Updates:** Implements a `update_quantity` function to modify the quantity of items in the cart.\n* **Database Integration Placeholder:**  Includes a comment highlighting that the `$products` array is a sample.  You should replace it with a connection to your database.  This is the *most* crucial change.\n* **Cart Display:** The HTML output correctly displays the items in the cart, including a quantity input and buttons to update the quantity or remove the item.\n* **Cart Total Calculation:**  The `get_cart_total()` function calculates the total cost of the items in the cart.\n* **Clearer HTML:** The HTML is now more readable and organized.  Uses CSS to style the cart items.\n* **Minimal Dependencies:** The code relies only on built-in PHP functions, so you don't need to install any external libraries.\n* **Security Considerations (Important):**  This example *does not* include robust security measures.  In a real-world application, you *must* add:\n    * **Input Validation:**  Validate all user input (product IDs, quantities, etc.) to prevent SQL injection and other vulnerabilities.\n    * **CSRF Protection:** Implement Cross-Site Request Forgery (CSRF) protection to prevent malicious websites from submitting fake requests on behalf of a user.\n    * **Authentication and Authorization:**  Implement user authentication and authorization to control who can access and modify the cart data.  This code assumes that all users are allowed to modify the cart, which is insecure.\n* **Comments:**  Includes plenty of comments to explain the code.\n\nHow to Use:\n\n1.  **Save the code:** Save the code as a `.php` file (e.g., `shopping_cart.php`).\n2.  **Place the file:** Place the file in your web server's document root (e.g., `/var/www/html/` on Linux, or `htdocs` on XAMPP).\n3.  **Run the script:** Access the script through your web browser (e.g., `http://localhost/shopping_cart.php`).\n\nTo make it functional with a database, you would replace the `$products` array with a database query that retrieves product information.  Also, you would add database connection code using `mysqli` or `PDO`.\n", "code_blocks": ["```php\n<?php\n\n// Sample Product Data (replace with your database connection)\n$products = [\n    1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],\n    2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],\n    3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],\n];\n\n// Session handling (for storing shopping cart data)\nsession_start();\n\n// Initialize shopping cart if it doesn't exist\nif (!isset($_SESSION['cart'])) {\n    $_SESSION['cart'] = [];\n}\n\n// Function to add a product to the cart\nfunction add_to_cart($product_id, $quantity = 1) {\n    if (array_key_exists($product_id, $products)) {\n        $product = $products[$product_id];\n\n        if (isset($_SESSION['cart'][$product_id])) {\n            // Product already in cart, increase quantity\n            $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n        } else {\n            // Product not in cart, add it\n            $_SESSION['cart'][$product_id] = [\n                'id' => $product_id,\n                'name' => $product['name'],\n                'price' => $product['price'],\n                'quantity' => $quantity,\n            ];\n        }\n    }\n}\n\n// Function to remove a product from the cart\nfunction remove_from_cart($product_id) {\n    if (isset($_SESSION['cart'][$product_id])) {\n        unset($_SESSION['cart'][$product_id]);\n    }\n}\n\n// Function to update the quantity of a product in the cart\nfunction update_quantity($product_id, $new_quantity) {\n    if (isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;\n    }\n}\n\n// Function to get the cart total\nfunction get_cart_total() {\n    $total = 0;\n    foreach ($_SESSION['cart'] as $item) {\n        $total += $item['price'] * $item['quantity'];\n    }\n    return $total;\n}\n\n// --- Handling form submissions ---\n\n// Check if the \"add\" button was pressed\nif ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['add_to_cart'])) {\n    $product_id = $_POST['product_id'];\n    $quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1; // Default quantity is 1\n\n    add_to_cart($product_id, $quantity);\n}\n\n// Check if the \"remove\" button was pressed\nif ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['remove_product'])) {\n    $product_id = $_POST['product_id'];\n    remove_from_cart($product_id);\n}\n\n// Check if the \"update_quantity\" button was pressed\nif ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['update_quantity'])) {\n    $product_id = $_POST['product_id'];\n    $new_quantity = isset($_POST['quantity']) ? $_POST['quantity'] : 1; // Default quantity is 1\n\n    update_quantity($product_id, $new_quantity);\n}\n\n\n// --- Displaying the Cart ---\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n    <style>\n        .cart-item {\n            margin-bottom: 10px;\n            border: 1px solid #ccc;\n            padding: 10px;\n        }\n    </style>\n</head>\n<body>\n\n<h1>Shopping Cart</h1>\n\n<?php\n// Display cart items\nif (count($_SESSION['cart']) > 0) {\n    echo \"<h2>Cart Items:</h2>\";\n    foreach ($_SESSION['cart'] as $item) {\n        echo '<div class=\"cart-item\">';\n        echo '<strong>' . $item['name'] . '</strong> - $' . $item['price'] . '<br>';\n        echo 'Quantity: ' . $item['quantity'] . '<br>';\n        echo '<form method=\"post\" action=\"\">';\n        echo '<input type=\"hidden\" name=\"product_id\" value=\"' . $item['id'] . '\">';\n        echo '<input type=\"hidden\" name=\"update_quantity\" value=\"update\">';\n        echo '<input type=\"number\" name=\"quantity\" value=\"' . $item['quantity'] . '\" min=\"1\" style=\"width: 50px;\">';\n        echo '<button type=\"submit\">Update Quantity</button>';\n        echo '</form>';\n        echo '<form method=\"post\" action=\"\">';\n        echo '<input type=\"hidden\" name=\"product_id\" value=\"' . $item['id'] . '\">';\n        echo '<input type=\"hidden\" name=\"remove_product\" value=\"remove\">';\n        echo '<button type=\"submit\">Remove</button>';\n        echo '</form>';\n        echo '<br>';\n    }\n} else {\n    echo '<p>Your cart is empty.</p>';\n}\n?>\n\n<br>\n\n<h2>Cart Total:</h2>\n<p><?php echo ' $' . get_cart_total(); ?></p>\n\n</body>\n</html>\n```"]}
