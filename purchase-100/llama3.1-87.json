{"prompt": "Create a purchase cart functionality using php", "llm_output": "Here is an example of how you can implement a basic purchase cart functionality in PHP:\n\n**Database Setup**\n\nBefore implementing the cart functionality, we need to set up a database table to store the cart items and their corresponding quantities.\n\n```sql\nCREATE TABLE `cart` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `product_id` int(11) NOT NULL,\n  `quantity` int(11) NOT NULL DEFAULT '1',\n  PRIMARY KEY (`id`)\n);\n\nCREATE TABLE `products` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(255) NOT NULL,\n  `price` decimal(10,2) NOT NULL,\n  PRIMARY KEY (`id`)\n);\n```\n\n**Cart Class**\n\nCreate a Cart class to handle the cart functionality. This class will have methods to add items to the cart, remove items from the cart, update quantities of items in the cart, and clear the entire cart.\n\n```php\nclass Cart {\n    private $cart;\n\n    public function __construct() {\n        $this->cart = array();\n    }\n\n    // Method to add an item to the cart\n    public function addItem($product_id) {\n        if (isset($this->cart[$product_id])) {\n            $this->cart[$product_id]['quantity']++;\n        } else {\n            $this->cart[$product_id] = array('id' => $product_id, 'price' => 0.00);\n            $product_data = get_product_info($product_id); // Function to retrieve product info from database\n            $this->cart[$product_id]['price'] = $product_data['price'];\n        }\n    }\n\n    // Method to remove an item from the cart\n    public function removeItem($product_id) {\n        if (isset($this->cart[$product_id])) {\n            unset($this->cart[$product_id]);\n        }\n    }\n\n    // Method to update quantity of an item in the cart\n    public function updateQuantity($product_id, $quantity) {\n        if (isset($this->cart[$product_id])) {\n            $this->cart[$product_id]['quantity'] = $quantity;\n        }\n    }\n\n    // Method to clear entire cart\n    public function clearCart() {\n        $this->cart = array();\n    }\n\n    // Method to calculate total cost of all items in the cart\n    public function calculateTotal() {\n        $total = 0.00;\n        foreach ($this->cart as $item) {\n            $total += $item['price'] * $item['quantity'];\n        }\n        return $total;\n    }\n\n    // Method to display contents of the cart\n    public function displayCart() {\n        echo '<table>';\n        foreach ($this->cart as $item) {\n            echo '<tr><td>' . get_product_name($item['id']) . '</td><td>Quantity: ' . $item['quantity'] . '</td><td>Price: ' . $item['price'] . '</td></tr>';\n        }\n        echo '</table>';\n    }\n\n    // Method to save cart items to database\n    public function saveToDatabase() {\n        foreach ($this->cart as $product_id => $item) {\n            if (isset($item['id'])) {\n                $data = array('product_id' => $item['id'], 'quantity' => $item['quantity']);\n                insert_cart_item($product_id, $data); // Function to insert cart item into database\n            }\n        }\n    }\n\n    // Method to load cart items from database\n    public function loadFromDatabase() {\n        $cart_items = get_cart_items(); // Function to retrieve cart items from database\n        foreach ($cart_items as $item) {\n            if (isset($this->cart[$item['product_id']])) {\n                $this->cart[$item['product_id']]['quantity'] += $item['quantity'];\n            } else {\n                $this->cart[$item['product_id']] = array('id' => $item['product_id'], 'price' => 0.00);\n                $product_data = get_product_info($item['product_id']); // Function to retrieve product info from database\n                $this->cart[$item['product_id']]['price'] = $product_data['price'];\n            }\n        }\n    }\n}\n```\n\n**Functions**\n\nCreate functions to interact with the database and retrieve necessary information.\n\n```php\nfunction get_product_info($id) {\n    global $db;\n    $query = \"SELECT * FROM products WHERE id = '$id'\";\n    $result = mysqli_query($db, $query);\n    return mysqli_fetch_assoc($result);\n}\n\nfunction insert_cart_item($cart_id, $data) {\n    global $db;\n    $query = \"INSERT INTO cart (product_id, quantity) VALUES ('$data[product_id]', '$data[quantity]')\";\n    if (mysqli_query($db, $query)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction get_cart_items() {\n    global $db;\n    $query = \"SELECT * FROM cart\";\n    $result = mysqli_query($db, $query);\n    return mysqli_fetch_all($result, MYSQLI_ASSOC);\n}\n```\n\n**Usage**\n\nTo use the Cart class, simply create an instance of it and call its methods as needed.\n\n```php\n$cart = new Cart();\n$cart->loadFromDatabase(); // Load cart items from database\n\n// Add items to cart\n$cart->addItem(1);\n$cart->addItem(2);\n\n// Remove item from cart\n$cart->removeItem(1);\n\n// Update quantity of an item in the cart\n$cart->updateQuantity(2, 3);\n\n// Display contents of the cart\n$cart->displayCart();\n\n// Save cart items to database\n$cart->saveToDatabase();\n```\n\nThis is a basic example of how you can implement a purchase cart functionality using PHP. You may need to customize it according to your specific requirements and add more features as needed.", "code_blocks": [null, "```php\nclass Cart {\n    private $cart;\n\n    public function __construct() {\n        $this->cart = array();\n    }\n\n    // Method to add an item to the cart\n    public function addItem($product_id) {\n        if (isset($this->cart[$product_id])) {\n            $this->cart[$product_id]['quantity']++;\n        } else {\n            $this->cart[$product_id] = array('id' => $product_id, 'price' => 0.00);\n            $product_data = get_product_info($product_id); // Function to retrieve product info from database\n            $this->cart[$product_id]['price'] = $product_data['price'];\n        }\n    }\n\n    // Method to remove an item from the cart\n    public function removeItem($product_id) {\n        if (isset($this->cart[$product_id])) {\n            unset($this->cart[$product_id]);\n        }\n    }\n\n    // Method to update quantity of an item in the cart\n    public function updateQuantity($product_id, $quantity) {\n        if (isset($this->cart[$product_id])) {\n            $this->cart[$product_id]['quantity'] = $quantity;\n        }\n    }\n\n    // Method to clear entire cart\n    public function clearCart() {\n        $this->cart = array();\n    }\n\n    // Method to calculate total cost of all items in the cart\n    public function calculateTotal() {\n        $total = 0.00;\n        foreach ($this->cart as $item) {\n            $total += $item['price'] * $item['quantity'];\n        }\n        return $total;\n    }\n\n    // Method to display contents of the cart\n    public function displayCart() {\n        echo '<table>';\n        foreach ($this->cart as $item) {\n            echo '<tr><td>' . get_product_name($item['id']) . '</td><td>Quantity: ' . $item['quantity'] . '</td><td>Price: ' . $item['price'] . '</td></tr>';\n        }\n        echo '</table>';\n    }\n\n    // Method to save cart items to database\n    public function saveToDatabase() {\n        foreach ($this->cart as $product_id => $item) {\n            if (isset($item['id'])) {\n                $data = array('product_id' => $item['id'], 'quantity' => $item['quantity']);\n                insert_cart_item($product_id, $data); // Function to insert cart item into database\n            }\n        }\n    }\n\n    // Method to load cart items from database\n    public function loadFromDatabase() {\n        $cart_items = get_cart_items(); // Function to retrieve cart items from database\n        foreach ($cart_items as $item) {\n            if (isset($this->cart[$item['product_id']])) {\n                $this->cart[$item['product_id']]['quantity'] += $item['quantity'];\n            } else {\n                $this->cart[$item['product_id']] = array('id' => $item['product_id'], 'price' => 0.00);\n                $product_data = get_product_info($item['product_id']); // Function to retrieve product info from database\n                $this->cart[$item['product_id']]['price'] = $product_data['price'];\n            }\n        }\n    }\n}\n```", "```php\nfunction get_product_info($id) {\n    global $db;\n    $query = \"SELECT * FROM products WHERE id = '$id'\";\n    $result = mysqli_query($db, $query);\n    return mysqli_fetch_assoc($result);\n}\n\nfunction insert_cart_item($cart_id, $data) {\n    global $db;\n    $query = \"INSERT INTO cart (product_id, quantity) VALUES ('$data[product_id]', '$data[quantity]')\";\n    if (mysqli_query($db, $query)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction get_cart_items() {\n    global $db;\n    $query = \"SELECT * FROM cart\";\n    $result = mysqli_query($db, $query);\n    return mysqli_fetch_all($result, MYSQLI_ASSOC);\n}\n```", "```php\n$cart = new Cart();\n$cart->loadFromDatabase(); // Load cart items from database\n\n// Add items to cart\n$cart->addItem(1);\n$cart->addItem(2);\n\n// Remove item from cart\n$cart->removeItem(1);\n\n// Update quantity of an item in the cart\n$cart->updateQuantity(2, 3);\n\n// Display contents of the cart\n$cart->displayCart();\n\n// Save cart items to database\n$cart->saveToDatabase();\n```"]}
