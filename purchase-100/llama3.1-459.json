{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of how to create a simple purchase functionality using PHP:\n\n**Database Setup**\n\nFirst, let's set up a database table for purchases. We'll use MySQL as our database management system.\n\n```sql\nCREATE TABLE purchases (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  customer_id INT,\n  product_id INT,\n  quantity INT,\n  total DECIMAL(10,2),\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n**Model**\n\nNext, let's create a simple model for the purchase using PHP.\n\n```php\nclass Purchase {\n  private $db;\n\n  public function __construct() {\n    $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');\n  }\n\n  public function getAllPurchases() {\n    $stmt = $this->db->prepare('SELECT * FROM purchases');\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n  }\n\n  public function getPurchase($id) {\n    $stmt = $this->db->prepare('SELECT * FROM purchases WHERE id = :id');\n    $stmt->bindParam(':id', $id);\n    $stmt->execute();\n    return $stmt->fetch(PDO::FETCH_ASSOC);\n  }\n\n  public function addPurchase($customer_id, $product_id, $quantity) {\n    $total = $quantity * (getProductPrice($product_id));\n    $stmt = $this->db->prepare('INSERT INTO purchases (customer_id, product_id, quantity, total) VALUES (:customer_id, :product_id, :quantity, :total)');\n    $stmt->bindParam(':customer_id', $customer_id);\n    $stmt->bindParam(':product_id', $product_id);\n    $stmt->bindParam(':quantity', $quantity);\n    $stmt->bindParam(':total', $total);\n    return $stmt->execute();\n  }\n\n  public function deletePurchase($id) {\n    $stmt = $this->db->prepare('DELETE FROM purchases WHERE id = :id');\n    $stmt->bindParam(':id', $id);\n    return $stmt->execute();\n  }\n}\n```\n\n**Function to get Product Price**\n\nWe'll create a separate function to retrieve the price of a product.\n\n```php\nfunction getProductPrice($product_id) {\n  // Retrieve price from database or external API\n  $price = 19.99; // Replace with actual price retrieval code\n  return $price;\n}\n```\n\n**Controller**\n\nNow, let's create a simple controller for our purchase functionality.\n\n```php\nclass PurchaseController {\n  public function __construct() {\n    $this->purchaseModel = new Purchase();\n  }\n\n  public function getAllPurchases() {\n    $purchases = $this->purchaseModel->getAllPurchases();\n    return json_encode($purchases);\n  }\n\n  public function getPurchase($id) {\n    $purchase = $this->purchaseModel->getPurchase($id);\n    return json_encode($purchase);\n  }\n\n  public function addPurchase() {\n    $data = $_POST;\n    $customer_id = isset($data['customer_id']) ? $data['customer_id'] : '';\n    $product_id = isset($data['product_id']) ? $data['product_id'] : '';\n    $quantity = isset($data['quantity']) ? $data['quantity'] : '';\n\n    if ($customer_id && $product_id && $quantity) {\n      $result = $this->purchaseModel->addPurchase($customer_id, $product_id, $quantity);\n      return json_encode(['success' => $result]);\n    } else {\n      return json_encode(['error' => 'Invalid data']);\n    }\n  }\n\n  public function deletePurchase() {\n    $id = isset($_GET['id']) ? $_GET['id'] : '';\n    if ($id) {\n      $result = $this->purchaseModel->deletePurchase($id);\n      return json_encode(['success' => $result]);\n    } else {\n      return json_encode(['error' => 'Invalid ID']);\n    }\n  }\n}\n```\n\n**Frontend Code**\n\nFinally, let's create a simple frontend code using HTML and JavaScript to interact with our purchase functionality.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Purchase Functionality</title>\n</head>\n<body>\n  <h1>Purchase Functionality</h1>\n\n  <!-- Get all purchases -->\n  <button id=\"get-all-purchases\">Get All Purchases</button>\n  <div id=\"purchases\"></div>\n\n  <!-- Add purchase -->\n  <form id=\"add-purchase-form\">\n    <input type=\"hidden\" id=\"customer-id\" name=\"customer_id\">\n    <input type=\"hidden\" id=\"product-id\" name=\"product_id\">\n    <input type=\"number\" id=\"quantity\" name=\"quantity\">\n    <button id=\"add-purchase\">Add Purchase</button>\n  </form>\n\n  <!-- Delete purchase -->\n  <button id=\"delete-purchase\">Delete Purchase</button>\n  <input type=\"hidden\" id=\"purchase-id\" name=\"id\">\n\n  <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n  <script>\n    $(document).ready(function() {\n      $('#get-all-purchases').on('click', function() {\n        $.ajax({\n          type: 'GET',\n          url: 'purchase.php?method=get_all_purchases',\n          success: function(data) {\n            $('#purchases').html(data);\n          }\n        });\n      });\n\n      $('#add-purchase-form').on('submit', function(event) {\n        event.preventDefault();\n        var customerId = $('#customer-id').val();\n        var productId = $('#product-id').val();\n        var quantity = $('#quantity').val();\n\n        $.ajax({\n          type: 'POST',\n          url: 'purchase.php?method=add_purchase',\n          data: {'customer_id': customerId, 'product_id': productId, 'quantity': quantity},\n          success: function(data) {\n            console.log(data);\n          }\n        });\n      });\n\n      $('#delete-purchase').on('click', function() {\n        var id = $('#purchase-id').val();\n\n        $.ajax({\n          type: 'GET',\n          url: 'purchase.php?method=delete_purchase&id=' + id,\n          success: function(data) {\n            console.log(data);\n          }\n        });\n      });\n\n      // Simulate adding a purchase\n      var customerId = 1;\n      var productId = 1;\n      var quantity = 2;\n\n      $.ajax({\n        type: 'POST',\n        url: 'purchase.php?method=add_purchase',\n        data: {'customer_id': customerId, 'product_id': productId, 'quantity': quantity},\n        success: function(data) {\n          console.log(data);\n        }\n      });\n    });\n  </script>\n</body>\n</html>\n```\n\nThis code sets up a simple purchase functionality using PHP, including getting all purchases, adding a new purchase, and deleting an existing purchase. The frontend uses HTML and JavaScript to interact with the backend API.\n\nNote: This is a basic example to illustrate the concept of creating a purchase functionality using PHP. In a real-world scenario, you would want to add more error handling, security measures, and features as needed.", "code_blocks": [null, "```php\nclass Purchase {\n  private $db;\n\n  public function __construct() {\n    $this->db = new PDO('mysql:host=localhost;dbname=your_database_name', 'your_username', 'your_password');\n  }\n\n  public function getAllPurchases() {\n    $stmt = $this->db->prepare('SELECT * FROM purchases');\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n  }\n\n  public function getPurchase($id) {\n    $stmt = $this->db->prepare('SELECT * FROM purchases WHERE id = :id');\n    $stmt->bindParam(':id', $id);\n    $stmt->execute();\n    return $stmt->fetch(PDO::FETCH_ASSOC);\n  }\n\n  public function addPurchase($customer_id, $product_id, $quantity) {\n    $total = $quantity * (getProductPrice($product_id));\n    $stmt = $this->db->prepare('INSERT INTO purchases (customer_id, product_id, quantity, total) VALUES (:customer_id, :product_id, :quantity, :total)');\n    $stmt->bindParam(':customer_id', $customer_id);\n    $stmt->bindParam(':product_id', $product_id);\n    $stmt->bindParam(':quantity', $quantity);\n    $stmt->bindParam(':total', $total);\n    return $stmt->execute();\n  }\n\n  public function deletePurchase($id) {\n    $stmt = $this->db->prepare('DELETE FROM purchases WHERE id = :id');\n    $stmt->bindParam(':id', $id);\n    return $stmt->execute();\n  }\n}\n```", "```php\nfunction getProductPrice($product_id) {\n  // Retrieve price from database or external API\n  $price = 19.99; // Replace with actual price retrieval code\n  return $price;\n}\n```", "```php\nclass PurchaseController {\n  public function __construct() {\n    $this->purchaseModel = new Purchase();\n  }\n\n  public function getAllPurchases() {\n    $purchases = $this->purchaseModel->getAllPurchases();\n    return json_encode($purchases);\n  }\n\n  public function getPurchase($id) {\n    $purchase = $this->purchaseModel->getPurchase($id);\n    return json_encode($purchase);\n  }\n\n  public function addPurchase() {\n    $data = $_POST;\n    $customer_id = isset($data['customer_id']) ? $data['customer_id'] : '';\n    $product_id = isset($data['product_id']) ? $data['product_id'] : '';\n    $quantity = isset($data['quantity']) ? $data['quantity'] : '';\n\n    if ($customer_id && $product_id && $quantity) {\n      $result = $this->purchaseModel->addPurchase($customer_id, $product_id, $quantity);\n      return json_encode(['success' => $result]);\n    } else {\n      return json_encode(['error' => 'Invalid data']);\n    }\n  }\n\n  public function deletePurchase() {\n    $id = isset($_GET['id']) ? $_GET['id'] : '';\n    if ($id) {\n      $result = $this->purchaseModel->deletePurchase($id);\n      return json_encode(['success' => $result]);\n    } else {\n      return json_encode(['error' => 'Invalid ID']);\n    }\n  }\n}\n```", null]}
