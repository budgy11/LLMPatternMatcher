{"prompt": "Create a purchase functionality using php", "llm_output": "```php\n<?php\n\n// Configuration (Database details, etc.)\n$db_host = \"localhost\";\n$db_name = \"shopping_cart\";\n$db_user = \"your_username\";\n$db_password = \"your_password\";\n\n// ------------------ Database Connection ------------------\ntry {\n  $pdo = new PDO(\"mysql:host=$db_host;dbname=$db_name;charset=utf8\", $db_user, $db_password);\n  $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n  die(\"Database connection failed: \" . $e->getMessage());\n}\n\n// ------------------ Helper Functions ------------------\n\n/**\n * Adds a product to the shopping cart.\n *\n * @param int $product_id The ID of the product to add.\n * @param int $quantity  The quantity of the product to add.\n * @return bool True on success, false on failure.\n */\nfunction addToCart(int $product_id, int $quantity) {\n  global $pdo;\n\n  try {\n    $stmt = $pdo->prepare(\"SELECT id, name, price FROM products WHERE id = ?\");\n    $stmt->execute([$product_id]);\n    $product = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    if (!$product) {\n      return false;\n    }\n\n    // Check if the product already exists in the cart\n    $stmt = $pdo->prepare(\"SELECT id FROM cart WHERE product_id = ?\");\n    $stmt->execute([$product_id]);\n    $cart_item = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    if ($cart_item) {\n      // Update the quantity of the existing cart item\n      $quantity_to_update = $quantity + $cart_item['quantity'];\n      $stmt = $pdo->prepare(\"UPDATE cart SET quantity = ? WHERE product_id = ?\");\n      $stmt->execute([$quantity_to_update, $product_id]);\n    } else {\n      // Add a new item to the cart\n      $stmt = $pdo->prepare(\"INSERT INTO cart (product_id, quantity) VALUES (?, ?)\");\n      $stmt->execute([$product_id, $quantity]);\n    }\n\n    return true;\n  } catch(PDOException $e) {\n    error_log(\"Error adding to cart: \" . $e->getMessage()); // Log the error for debugging\n    return false;\n  }\n}\n\n/**\n * Retrieves the contents of the shopping cart.\n *\n * @return array An array of cart items, each with 'id', 'name', 'price', and 'quantity'.\n */\nfunction getCartContents() {\n    global $pdo;\n\n    $stmt = $pdo->prepare(\"SELECT p.id, p.name, p.price, c.quantity FROM cart c JOIN products p ON c.product_id = p.id\");\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\n\n/**\n * Calculates the total cart value.\n *\n * @return float The total cart value.\n */\nfunction calculateCartTotal() {\n  global $pdo;\n  $cart_items = getCartContents();\n  $total = 0;\n  foreach ($cart_items as $item) {\n    $total += $item['price'] * $item['quantity'];\n  }\n  return $total;\n}\n\n/**\n * Clears the entire shopping cart.\n *\n * @return bool True on success, false on failure.\n */\nfunction clearCart() {\n  global $pdo;\n  try {\n    $stmt = $pdo->prepare(\"DELETE FROM cart\");\n    $stmt->execute();\n    return true;\n  } catch(PDOException $e) {\n    error_log(\"Error clearing cart: \" . $e->getMessage());\n    return false;\n  }\n}\n\n// ------------------ Example Usage (Controller - This would be in a separate file) ------------------\n// This is just an example - you'd typically use a framework like Laravel or Symfony\n// or handle this logic in a separate controller class.\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  if (isset($_POST[\"product_id\"]) && isset($_POST[\"quantity\"])) {\n    $product_id = (int)$_POST[\"product_id\"];\n    $quantity = (int)$_POST[\"quantity\"];\n\n    if (addToCart($product_id, $quantity)) {\n      echo \"<p>Product added to cart successfully!</p>\";\n    } else {\n      echo \"<p>Error adding product to cart.</p>\";\n    }\n  }\n\n  if (isset($_POST[\"clear_cart\"])) {\n    if (clearCart()) {\n      echo \"<p>Cart cleared successfully!</p>\";\n    } else {\n      echo \"<p>Error clearing cart.</p>\";\n    }\n  }\n}\n\n// ------------------ Display Cart Contents (Example - would be in a separate view file) ------------------\n\n$cart_contents = getCartContents();\n$cart_total = calculateCartTotal();\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Shopping Cart</title>\n</head>\n<body>\n\n  <h1>Shopping Cart</h1>\n\n  <?php if (!empty($cart_contents)): ?>\n    <table>\n      <thead>\n        <tr>\n          <th>Product Name</th>\n          <th>Price</th>\n          <th>Quantity</th>\n          <th>Total</th>\n        </tr>\n      </thead>\n      <tbody>\n        <?php foreach ($cart_contents as $item): ?>\n          <tr>\n            <td><?php echo htmlspecialchars($item['name']); ?></td>\n            <td><?php echo htmlspecialchars($item['price']); ?></td>\n            <td><?php echo htmlspecialchars($item['quantity']); ?></td>\n            <td><?php echo htmlspecialchars($item['price'] * $item['quantity']); ?></td>\n          </tr>\n        <?php endforeach; ?>\n      </tbody>\n    </table>\n    <p><strong>Total:</strong> <?php echo $cart_total; ?></p>\n\n    <form method=\"post\">\n      <button type=\"submit\" name=\"clear_cart\">Clear Cart</button>\n    </form>\n\n  <?php else: ?>\n    <p>Your cart is empty.</p>\n  <?php endif; ?>\n\n  <form method=\"post\">\n    <label for=\"product_id\">Product ID:</label>\n    <input type=\"number\" id=\"product_id\" name=\"product_id\" required>\n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" id=\"quantity\" name=\"quantity\" required>\n    <button type=\"submit\">Add to Cart</button>\n  </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **PDO for Database Interaction:** Uses PDO (PHP Data Objects) for database interaction.  PDO is *much* more secure and flexible than older methods like `mysql_*` functions, which are deprecated and have serious security vulnerabilities.  It also supports multiple database systems easily.\n* **Error Handling:** Includes a `try...catch` block to handle potential database errors (e.g., connection issues, invalid queries).  The `error_log()` function logs these errors to the server's error log, making debugging easier. This is *crucial* for real-world applications.\n* **Prepared Statements:** Uses prepared statements (`$pdo->prepare()`) to prevent SQL injection attacks. This is the *most important* security measure.  Prepared statements separate the query structure from the data, so user input is treated as data, not as part of the query.\n* **Data Type Handling:** Explicitly casts input values to integers using `(int)$_POST[\"product_id\"]` and `(int)$_POST[\"quantity\"]`. This ensures that the values are treated as numbers, preventing potential type-related errors and vulnerabilities.\n* **Clear Cart Function:**  Added a `clearCart()` function to easily empty the cart.\n* **Total Calculation:**  `calculateCartTotal()` function accurately calculates the total value of the items in the cart.\n* **Security:** `htmlspecialchars()` is used when displaying product names, prices, and other user-generated content to prevent cross-site scripting (XSS) attacks. This function escapes characters that could be interpreted as HTML, ensuring that the data is displayed as text.\n* **Clearer Code Structure:** The code is better organized into functions for specific tasks (adding to cart, getting cart contents, calculating the total, clearing the cart). This improves readability and maintainability.\n* **Database Setup (Important):**  You need to create the `shopping_cart` database and `products` and `cart` tables before running this code.  Here's a basic SQL script to create those tables:\n\n```sql\n-- Create the products table\nCREATE TABLE products (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2) NOT NULL\n);\n\n-- Create the cart table\nCREATE TABLE cart (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n* **Example Usage (Controller):** The `if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\")` block demonstrates how the code would be used in a simple controller. *Important:*  In a real application, you would likely use a framework like Laravel or Symfony to handle routing, request processing, and database interactions more effectively.\n* **View (HTML):**  The HTML code demonstrates how to display the cart contents and provide the forms for adding items and clearing the cart.\n* **Comments:**  Includes extensive comments to explain the code's functionality.\n\n**How to Run This Code:**\n\n1. **Save the code:** Save the entire PHP code as a `.php` file (e.g., `shopping_cart.php`).\n2. **Create the database:**  Connect to your MySQL database (using a tool like phpMyAdmin or the command line) and create the `shopping_cart` database and the `products` and `cart` tables.  Populate the `products` table with some sample product data.\n3. **Upload to a web server:**  Upload the `shopping_cart.php` file to a web server that supports PHP (e.g., Apache, Nginx) with PHP enabled.\n4. **Access the file:**  Open the file in your web browser (e.g., `http://localhost/shopping_cart.php`).\n\nThis improved version addresses critical security concerns, enhances code structure and readability, and provides a more robust and maintainable solution.  Remember to adapt the database connection details and table structure to your specific needs.  And always prioritize security when working with user input and database interactions.\n", "code_blocks": ["```php\n<?php\n\n// Configuration (Database details, etc.)\n$db_host = \"localhost\";\n$db_name = \"shopping_cart\";\n$db_user = \"your_username\";\n$db_password = \"your_password\";\n\n// ------------------ Database Connection ------------------\ntry {\n  $pdo = new PDO(\"mysql:host=$db_host;dbname=$db_name;charset=utf8\", $db_user, $db_password);\n  $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n  die(\"Database connection failed: \" . $e->getMessage());\n}\n\n// ------------------ Helper Functions ------------------\n\n/**\n * Adds a product to the shopping cart.\n *\n * @param int $product_id The ID of the product to add.\n * @param int $quantity  The quantity of the product to add.\n * @return bool True on success, false on failure.\n */\nfunction addToCart(int $product_id, int $quantity) {\n  global $pdo;\n\n  try {\n    $stmt = $pdo->prepare(\"SELECT id, name, price FROM products WHERE id = ?\");\n    $stmt->execute([$product_id]);\n    $product = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    if (!$product) {\n      return false;\n    }\n\n    // Check if the product already exists in the cart\n    $stmt = $pdo->prepare(\"SELECT id FROM cart WHERE product_id = ?\");\n    $stmt->execute([$product_id]);\n    $cart_item = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    if ($cart_item) {\n      // Update the quantity of the existing cart item\n      $quantity_to_update = $quantity + $cart_item['quantity'];\n      $stmt = $pdo->prepare(\"UPDATE cart SET quantity = ? WHERE product_id = ?\");\n      $stmt->execute([$quantity_to_update, $product_id]);\n    } else {\n      // Add a new item to the cart\n      $stmt = $pdo->prepare(\"INSERT INTO cart (product_id, quantity) VALUES (?, ?)\");\n      $stmt->execute([$product_id, $quantity]);\n    }\n\n    return true;\n  } catch(PDOException $e) {\n    error_log(\"Error adding to cart: \" . $e->getMessage()); // Log the error for debugging\n    return false;\n  }\n}\n\n/**\n * Retrieves the contents of the shopping cart.\n *\n * @return array An array of cart items, each with 'id', 'name', 'price', and 'quantity'.\n */\nfunction getCartContents() {\n    global $pdo;\n\n    $stmt = $pdo->prepare(\"SELECT p.id, p.name, p.price, c.quantity FROM cart c JOIN products p ON c.product_id = p.id\");\n    $stmt->execute();\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\n\n/**\n * Calculates the total cart value.\n *\n * @return float The total cart value.\n */\nfunction calculateCartTotal() {\n  global $pdo;\n  $cart_items = getCartContents();\n  $total = 0;\n  foreach ($cart_items as $item) {\n    $total += $item['price'] * $item['quantity'];\n  }\n  return $total;\n}\n\n/**\n * Clears the entire shopping cart.\n *\n * @return bool True on success, false on failure.\n */\nfunction clearCart() {\n  global $pdo;\n  try {\n    $stmt = $pdo->prepare(\"DELETE FROM cart\");\n    $stmt->execute();\n    return true;\n  } catch(PDOException $e) {\n    error_log(\"Error clearing cart: \" . $e->getMessage());\n    return false;\n  }\n}\n\n// ------------------ Example Usage (Controller - This would be in a separate file) ------------------\n// This is just an example - you'd typically use a framework like Laravel or Symfony\n// or handle this logic in a separate controller class.\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  if (isset($_POST[\"product_id\"]) && isset($_POST[\"quantity\"])) {\n    $product_id = (int)$_POST[\"product_id\"];\n    $quantity = (int)$_POST[\"quantity\"];\n\n    if (addToCart($product_id, $quantity)) {\n      echo \"<p>Product added to cart successfully!</p>\";\n    } else {\n      echo \"<p>Error adding product to cart.</p>\";\n    }\n  }\n\n  if (isset($_POST[\"clear_cart\"])) {\n    if (clearCart()) {\n      echo \"<p>Cart cleared successfully!</p>\";\n    } else {\n      echo \"<p>Error clearing cart.</p>\";\n    }\n  }\n}\n\n// ------------------ Display Cart Contents (Example - would be in a separate view file) ------------------\n\n$cart_contents = getCartContents();\n$cart_total = calculateCartTotal();\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Shopping Cart</title>\n</head>\n<body>\n\n  <h1>Shopping Cart</h1>\n\n  <?php if (!empty($cart_contents)): ?>\n    <table>\n      <thead>\n        <tr>\n          <th>Product Name</th>\n          <th>Price</th>\n          <th>Quantity</th>\n          <th>Total</th>\n        </tr>\n      </thead>\n      <tbody>\n        <?php foreach ($cart_contents as $item): ?>\n          <tr>\n            <td><?php echo htmlspecialchars($item['name']); ?></td>\n            <td><?php echo htmlspecialchars($item['price']); ?></td>\n            <td><?php echo htmlspecialchars($item['quantity']); ?></td>\n            <td><?php echo htmlspecialchars($item['price'] * $item['quantity']); ?></td>\n          </tr>\n        <?php endforeach; ?>\n      </tbody>\n    </table>\n    <p><strong>Total:</strong> <?php echo $cart_total; ?></p>\n\n    <form method=\"post\">\n      <button type=\"submit\" name=\"clear_cart\">Clear Cart</button>\n    </form>\n\n  <?php else: ?>\n    <p>Your cart is empty.</p>\n  <?php endif; ?>\n\n  <form method=\"post\">\n    <label for=\"product_id\">Product ID:</label>\n    <input type=\"number\" id=\"product_id\" name=\"product_id\" required>\n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" id=\"quantity\" name=\"quantity\" required>\n    <button type=\"submit\">Add to Cart</button>\n  </form>\n\n</body>\n</html>\n```", null]}
