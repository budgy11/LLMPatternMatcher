{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nAlright, I need to help the user create a purchase functionality using PHP. Let me break down what that entails.\n\nFirst, I should outline the main components of such a system. There's the product listing, allowing users to add items to their cart, and then processing the checkout. So, I'll need product details, a shopping cart, and an order management section.\n\nNext, I'll consider the necessary databases. Products table makes sense with fields like id, name, description, price, and stock. Then, a users table for customer info\u2014id, name, email, password (hashed), and address. Lastly, an orders table to track each purchase with order ID, user ID, product ID, quantity, total amount, and timestamp.\n\nFor the PHP code structure, I'll need classes for Products, Users, and Orders. Each class should handle CRUD operations\u2014create, read, update, delete. This will make the system modular and easier to manage.\n\nThinking about security, sanitizing inputs is crucial to prevent SQL injection. I'll include a sanitize method in each class that escapes user inputs before processing them into database queries.\n\nThe user needs to add products, so an admin interface would be necessary, but for simplicity, I can mention it without detailing here. For adding items to the cart, using sessions makes sense since they're temporary and tied to a user's browsing session.\n\nIn the checkout process, after selecting items, users should enter their details. The order processing function will calculate the total price and handle stock updates. It's important to deduct the quantity from the product once it's ordered to prevent overselling.\n\nI'll also need to include error handling\u2014checking if products are in stock before allowing purchase and ensuring all form fields are filled out correctly. Session management is another key point; starting a session at the beginning of each script ensures that user data persists across pages.\n\nFinally, I'll outline how to use these classes in practice, such as including them in an index.php file and creating methods for adding products and processing orders. This gives the user a clear starting point.\n\nI should mention that this is a basic example and suggest additional features like payment integration, admin panels, more security measures, error logging, and email notifications for completeness. But I'll keep it simple to avoid overwhelming the user.\n</think>\n\nCreating a purchase functionality using PHP involves several steps including:\n\n1. Creating a product listing page\n2. Allowing users to add items to their cart\n3. Processing the checkout\n4. Storing order information in the database\n\nHere's a basic example of how you can implement this.\n\nFirst, create your database tables:\n\n```sql\n-- Products table\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255),\n    description TEXT,\n    price DECIMAL(10, 2),\n    stock INT\n);\n\n-- Users table\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    password VARCHAR(255), -- Remember to hash passwords in real application\n    address TEXT\n);\n\n-- Orders table\nCREATE TABLE orders (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT,\n    product_id INT,\n    quantity INT,\n    total DECIMAL(10, 2),\n    order_date DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n```\n\nNow, create your PHP classes for managing products, users, and orders:\n\n```php\n<?php\n// Database connection\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'purchase_system';\n\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Product class\nclass Product {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Sanitize input to prevent SQL injection\n    private function sanitize($data) {\n        return htmlspecialchars(strip_tags($this->conn->real_escape_string(trim($data))));\n    }\n\n    // Add product\n    public function addProduct($name, $description, $price, $stock) {\n        $name = $this->sanitize($name);\n        $description = $this->sanitize($description);\n\n        $sql = \"INSERT INTO products (name, description, price, stock)\n                VALUES ('$name', '$description', $price, $stock)\";\n\n        if ($this->conn->query($sql)) {\n            return true;\n        } else {\n            echo \"Error: \" . $this->conn->error;\n            return false;\n        }\n    }\n\n    // Get all products\n    public function getAllProducts() {\n        $sql = \"SELECT * FROM products\";\n        $result = $this->conn->query($sql);\n\n        if ($result->num_rows > 0) {\n            while ($row = $result->fetch_assoc()) {\n                echo \"<div class='product'>\";\n                echo \"<h3>\" . $row['name'] . \"</h3>\";\n                echo \"<p>\" . $row['description'] . \"</p>\";\n                echo \"<p>Price: $\" . number_format($row['price'], 2) . \"</p>\";\n                echo \"<p>Stock: \" . $row['stock'] . \"</p>\";\n                echo \"<a href='add_to_cart.php?id=\" . $row['id'] . \"'>Add to Cart</a>\";\n                echo \"</div>\";\n            }\n        } else {\n            echo \"No products found.\";\n        }\n    }\n\n    // Update product\n    public function updateProduct($id, $name, $description, $price, $stock) {\n        $id = $this->sanitize($id);\n        $name = $this->sanitize($name);\n        $description = $this->sanitize($description);\n\n        $sql = \"UPDATE products SET name='$name', description='$description', price=$price, stock=$stock WHERE id=$id\";\n\n        if ($this->conn->query($sql)) {\n            return true;\n        } else {\n            echo \"Error: \" . $this->conn->error;\n            return false;\n        }\n    }\n\n    // Delete product\n    public function deleteProduct($id) {\n        $id = $this->sanitize($id);\n\n        $sql = \"DELETE FROM products WHERE id=$id\";\n\n        if ($this->conn->query($sql)) {\n            return true;\n        } else {\n            echo \"Error: \" . $this->conn->error;\n            return false;\n        }\n    }\n}\n\n// User class\nclass User {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Sanitize input to prevent SQL injection\n    private function sanitize($data) {\n        return htmlspecialchars(strip_tags($this->conn->real_escape_string(trim($data))));\n    }\n\n    // Register user\n    public function registerUser($name, $email, $password, $address) {\n        $name = $this->sanitize($name);\n        $email = $this->sanitize($email);\n        $address = $this->sanitize($address);\n\n        $sql = \"SELECT * FROM users WHERE email='$email'\";\n        $result = $this->conn->query($sql);\n\n        if ($result->num_rows > 0) {\n            echo \"User already exists!\";\n            return false;\n        }\n\n        // Hash password\n        $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n        $sql = \"INSERT INTO users (name, email, password, address)\n                VALUES ('$name', '$email', '$hashed_password', '$address')\";\n\n        if ($this->conn->query($sql)) {\n            return true;\n        } else {\n            echo \"Error: \" . $this->conn->error;\n            return false;\n        }\n    }\n\n    // Login user\n    public function loginUser($email, $password) {\n        $email = $this->sanitize($email);\n\n        $sql = \"SELECT * FROM users WHERE email='$email'\";\n        $result = $this->conn->query($sql);\n\n        if ($result->num_rows == 1) {\n            $user = $result->fetch_assoc();\n            if (password_verify($password, $user['password'])) {\n                // Start session and store user data\n                session_start();\n                $_SESSION['user_id'] = $user['id'];\n                $_SESSION['user_name'] = $user['name'];\n                return true;\n            } else {\n                echo \"Invalid password!\";\n                return false;\n            }\n        } else {\n            echo \"User not found!\";\n            return false;\n        }\n    }\n\n    // Update user\n    public function updateUser($id, $name, $email, $password, $address) {\n        $id = $this->sanitize($id);\n        $name = $this->sanitize($name);\n        $email = $this->sanitize($email);\n        $address = $this->sanitize($address);\n\n        // Hash password if it's not empty\n        if (!empty($password)) {\n            $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n            $sql = \"UPDATE users SET name='$name', email='$email', password='$hashed_password', address='$address' WHERE id=$id\";\n        } else {\n            $sql = \"UPDATE users SET name='$name', email='$email', address='$address' WHERE id=$id\";\n        }\n\n        if ($this->conn->query($sql)) {\n            return true;\n        } else {\n            echo \"Error: \" . $this->conn->error;\n            return false;\n        }\n    }\n\n    // Delete user\n    public function deleteUser($id) {\n        $id = $this->sanitize($id);\n\n        $sql = \"DELETE FROM users WHERE id=$id\";\n\n        if ($this->conn->query($sql)) {\n            return true;\n        } else {\n            echo \"Error: \" . $this->conn->error;\n            return false;\n        }\n    }\n\n    // Get user by ID\n    public function getUserById($id) {\n        $id = $this->sanitize($id);\n\n        $sql = \"SELECT * FROM users WHERE id=$id\";\n        $result = $this->conn->query($sql);\n\n        if ($result->num_rows == 1) {\n            return $result->fetch_assoc();\n        } else {\n            return false;\n        }\n    }\n}\n\n// Order class\nclass Order {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Sanitize input to prevent SQL injection\n    private function sanitize($data) {\n        return htmlspecialchars(strip_tags($this->conn->real_escape_string(trim($data))));\n    }\n\n    // Add order\n    public function addOrder($user_id, $product_id, $quantity) {\n        $user_id = $this->sanitize($user_id);\n        $product_id = $this->sanitize($product_id);\n        $quantity = $this->sanitize($quantity);\n\n        // Get product price\n        $sql = \"SELECT price FROM products WHERE id=$product_id\";\n        $result = $this->conn->query($sql);\n\n        if ($result->num_rows == 1) {\n            $product_price = $result->fetch_assoc()['price'];\n            $total = $quantity * $product_price;\n\n            $sql = \"INSERT INTO orders (user_id, product_id, quantity, total)\n                    VALUES ('$user_id', '$product_id', '$quantity', '$total')\";\n\n            if ($this->conn->query($sql)) {\n                return true;\n            } else {\n                echo \"Error: \" . $this->conn->error;\n                return false;\n            }\n        } else {\n            echo \"Product not found!\";\n            return false;\n        }\n    }\n\n    // Get all orders for a user\n    public function getAllOrders($user_id) {\n        $user_id = $this->sanitize($user_id);\n\n        $sql = \"SELECT * FROM orders WHERE user_id=$user_id\";\n        $result = $this->conn->query($sql);\n\n        if ($result->num_rows > 0) {\n            while ($row = $result->fetch_assoc()) {\n                echo \"<div class='order'>\";\n                echo \"<p>Order ID: \" . $row['id'] . \"</p>\";\n                echo \"<p>Product ID: \" . $row['product_id'] . \"</p>\";\n                echo \"<p>Quantity: \" . $row['quantity'] . \"</p>\";\n                echo \"<p>Total: $\" . number_format($row['total'], 2) . \"</p>\";\n                echo \"<p>Order Date: \" . $row['order_date'] . \"</p>\";\n                echo \"</div>\";\n            }\n        } else {\n            echo \"No orders found.\";\n        }\n    }\n\n    // Cancel order\n    public function cancelOrder($id) {\n        $id = $this->sanitize($id);\n\n        $sql = \"DELETE FROM orders WHERE id=$id\";\n\n        if ($this->conn->query($sql)) {\n            return true;\n        } else {\n            echo \"Error: \" . $this->conn->error;\n            return false;\n        }\n    }\n\n    // Update order quantity\n    public function updateOrderQuantity($id, $quantity) {\n        $id = $this->sanitize($id);\n        $quantity = $this->sanitize($quantity);\n\n        $sql = \"UPDATE orders SET quantity=$quantity WHERE id=$id\";\n\n        if ($this->conn->query($sql)) {\n            return true;\n        } else {\n            echo \"Error: \" . $this->conn->error;\n            return false;\n        }\n    }\n}\n?>\n```\n\nTo use these classes, you would include them in your main file:\n\n```php\n<?php\ninclude 'classes.php';\n\n// Initialize classes\n$product = new Product($conn);\n$user = new User($conn);\n$order = new Order($conn);\n\n// Example usage:\n// Add a product\nif ($product->addProduct('Laptop', 'High performance laptop with 16GB RAM and 500GB SSD', 999.99, 5)) {\n    echo \"Product added successfully!\";\n}\n\n// Register user\nif ($user->registerUser('John Doe', 'john@example.com', 'password123', '123 Street')) {\n    echo \"User registered successfully!\";\n}\n\n// Login user\nif ($user->loginUser('john@example.com', 'password123')) {\n    echo \"Login successful!\";\n}\n\n// Add order\nsession_start();\n$user_id = $_SESSION['user_id'];\n$product_id = 1;\n$quantity = 1;\n\nif ($order->addOrder($user_id, $product_id, $quantity)) {\n    echo \"Order added successfully!\";\n}\n?>\n```\n\nThis is a basic example and would need additional features such as:\n\n1. A proper frontend with HTML/CSS\n2. Form validation\n3. Error handling\n4. Cart functionality using sessions\n5. More secure password management\n6. Admin panel for managing products and users\n7. Payment integration\n8. Email notifications\n9. Order tracking\n\nRemember to handle security aspects like:\n\n1. Input sanitization\n2. Password hashing\n3. Session management\n4. Protection against SQL injection and XSS\n5. CSRF protection\n6. Secure file handling\n\nThis is just a starting point and would need to be expanded based on your specific requirements.\n\nTo use this code:\n\n1. Create the necessary database tables\n2. Include the classes in your PHP files\n3. Start sessions at the beginning of each PHP script\n4. Use appropriate error handling and security measures\n\nRemember that this is a simplified example and should not be used directly in production without proper testing, security measures, and additional functionality as needed.\n\nAlso, make sure to handle the cart functionality using PHP sessions:\n\n```php\n// Add to cart (add_to_cart.php)\nsession_start();\n\nif (!isset($_SESSION['cart'])) {\n    $_SESSION['cart'] = array();\n}\n\n$product_id = isset($_GET['id']) ? intval($_GET['id']) : 0;\n\nif ($product_id > 0) {\n    if (!isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id] = 1;\n    } else {\n        $_SESSION['cart'][$product_id]++;\n    }\n}\n\nheader(\"Location: index.php\");\nexit();\n```\n\nThen, when processing the checkout:\n\n```php\n// Checkout (checkout.php)\nsession_start();\n\nif (!isset($_SESSION['user_id'])) {\n    header(\"Location: login.php\");\n    exit();\n}\n\n$user_id = $_SESSION['user_id'];\n\nforeach ($_SESSION['cart'] as $product_id => $quantity) {\n    if ($order->addOrder($user_id, $product_id, $quantity)) {\n        // Remove from cart\n        unset($_SESSION['cart'][$product_id]);\n    }\n}\n```\n\nThis is a very basic implementation and would need to be expanded with proper error handling, stock checks, total calculation, etc.\n\nTo check out the products:\n\n```php\n// Process order (process_order.php)\nsession_start();\n\nif (!isset($_SESSION['user_id'])) {\n    header(\"Location: login.php\");\n    exit();\n}\n\n$user_id = $_SESSION['user_id'];\n$total_amount = 0;\n\nforeach ($_SESSION['cart'] as $product_id => $quantity) {\n    // Get product price\n    $sql = \"SELECT price, stock FROM products WHERE id=$product_id\";\n    $result = $conn->query($sql);\n\n    if ($result->num_rows == 1) {\n        $row = $result->fetch_assoc();\n        $price = $row['price'];\n        $stock = $row['stock'];\n\n        if ($quantity > $stock) {\n            echo \"Not enough stock for product: $product_id\";\n            continue;\n        }\n\n        // Calculate total\n        $total_amount += $price * $quantity;\n\n        // Deduct quantity from stock\n        $sql = \"UPDATE products SET stock=stock-$quantity WHERE id=$product_id\";\n        if (!$conn->query($sql)) {\n            echo \"Error updating stock: \" . $conn->error;\n        }\n\n        // Add to orders\n        $sql = \"INSERT INTO orders (user_id, product_id, quantity, total)\n                VALUES ($user_id, $product_id, $quantity, $price * $quantity)\";\n        if (!$conn->query($sql)) {\n            echo \"Error adding order: \" . $conn->error;\n        }\n    } else {\n        echo \"Product not found: $product_id\";\n    }\n}\n\n// Clear cart\nunset($_SESSION['cart']);\n\nheader(\"Location: thank_you.php\");\nexit();\n```\n\nThis implementation covers the basic functionality but lacks many features you would expect in a real-world application, such as:\n\n1. Payment processing (e.g., Stripe, PayPal)\n2. Order confirmation emails\n3. Shipping options\n4. Product images\n5. Reviews and ratings\n6. Search functionality\n7. Sorting and filtering\n8. User notifications\n9. Admin dashboard\n10. Reports\n\nRemember to always sanitize user inputs and protect against SQL injection and other security vulnerabilities.\n\nThis should give you a basic understanding of how to implement a purchase functionality using PHP. You can expand upon this foundation based on your specific needs and requirements.", "code_blocks": [null, "```php\n<?php\n// Database connection\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'purchase_system';\n\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Product class\nclass Product {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Sanitize input to prevent SQL injection\n    private function sanitize($data) {\n        return htmlspecialchars(strip_tags($this->conn->real_escape_string(trim($data))));\n    }\n\n    // Add product\n    public function addProduct($name, $description, $price, $stock) {\n        $name = $this->sanitize($name);\n        $description = $this->sanitize($description);\n\n        $sql = \"INSERT INTO products (name, description, price, stock)\n                VALUES ('$name', '$description', $price, $stock)\";\n\n        if ($this->conn->query($sql)) {\n            return true;\n        } else {\n            echo \"Error: \" . $this->conn->error;\n            return false;\n        }\n    }\n\n    // Get all products\n    public function getAllProducts() {\n        $sql = \"SELECT * FROM products\";\n        $result = $this->conn->query($sql);\n\n        if ($result->num_rows > 0) {\n            while ($row = $result->fetch_assoc()) {\n                echo \"<div class='product'>\";\n                echo \"<h3>\" . $row['name'] . \"</h3>\";\n                echo \"<p>\" . $row['description'] . \"</p>\";\n                echo \"<p>Price: $\" . number_format($row['price'], 2) . \"</p>\";\n                echo \"<p>Stock: \" . $row['stock'] . \"</p>\";\n                echo \"<a href='add_to_cart.php?id=\" . $row['id'] . \"'>Add to Cart</a>\";\n                echo \"</div>\";\n            }\n        } else {\n            echo \"No products found.\";\n        }\n    }\n\n    // Update product\n    public function updateProduct($id, $name, $description, $price, $stock) {\n        $id = $this->sanitize($id);\n        $name = $this->sanitize($name);\n        $description = $this->sanitize($description);\n\n        $sql = \"UPDATE products SET name='$name', description='$description', price=$price, stock=$stock WHERE id=$id\";\n\n        if ($this->conn->query($sql)) {\n            return true;\n        } else {\n            echo \"Error: \" . $this->conn->error;\n            return false;\n        }\n    }\n\n    // Delete product\n    public function deleteProduct($id) {\n        $id = $this->sanitize($id);\n\n        $sql = \"DELETE FROM products WHERE id=$id\";\n\n        if ($this->conn->query($sql)) {\n            return true;\n        } else {\n            echo \"Error: \" . $this->conn->error;\n            return false;\n        }\n    }\n}\n\n// User class\nclass User {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Sanitize input to prevent SQL injection\n    private function sanitize($data) {\n        return htmlspecialchars(strip_tags($this->conn->real_escape_string(trim($data))));\n    }\n\n    // Register user\n    public function registerUser($name, $email, $password, $address) {\n        $name = $this->sanitize($name);\n        $email = $this->sanitize($email);\n        $address = $this->sanitize($address);\n\n        $sql = \"SELECT * FROM users WHERE email='$email'\";\n        $result = $this->conn->query($sql);\n\n        if ($result->num_rows > 0) {\n            echo \"User already exists!\";\n            return false;\n        }\n\n        // Hash password\n        $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n        $sql = \"INSERT INTO users (name, email, password, address)\n                VALUES ('$name', '$email', '$hashed_password', '$address')\";\n\n        if ($this->conn->query($sql)) {\n            return true;\n        } else {\n            echo \"Error: \" . $this->conn->error;\n            return false;\n        }\n    }\n\n    // Login user\n    public function loginUser($email, $password) {\n        $email = $this->sanitize($email);\n\n        $sql = \"SELECT * FROM users WHERE email='$email'\";\n        $result = $this->conn->query($sql);\n\n        if ($result->num_rows == 1) {\n            $user = $result->fetch_assoc();\n            if (password_verify($password, $user['password'])) {\n                // Start session and store user data\n                session_start();\n                $_SESSION['user_id'] = $user['id'];\n                $_SESSION['user_name'] = $user['name'];\n                return true;\n            } else {\n                echo \"Invalid password!\";\n                return false;\n            }\n        } else {\n            echo \"User not found!\";\n            return false;\n        }\n    }\n\n    // Update user\n    public function updateUser($id, $name, $email, $password, $address) {\n        $id = $this->sanitize($id);\n        $name = $this->sanitize($name);\n        $email = $this->sanitize($email);\n        $address = $this->sanitize($address);\n\n        // Hash password if it's not empty\n        if (!empty($password)) {\n            $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n            $sql = \"UPDATE users SET name='$name', email='$email', password='$hashed_password', address='$address' WHERE id=$id\";\n        } else {\n            $sql = \"UPDATE users SET name='$name', email='$email', address='$address' WHERE id=$id\";\n        }\n\n        if ($this->conn->query($sql)) {\n            return true;\n        } else {\n            echo \"Error: \" . $this->conn->error;\n            return false;\n        }\n    }\n\n    // Delete user\n    public function deleteUser($id) {\n        $id = $this->sanitize($id);\n\n        $sql = \"DELETE FROM users WHERE id=$id\";\n\n        if ($this->conn->query($sql)) {\n            return true;\n        } else {\n            echo \"Error: \" . $this->conn->error;\n            return false;\n        }\n    }\n\n    // Get user by ID\n    public function getUserById($id) {\n        $id = $this->sanitize($id);\n\n        $sql = \"SELECT * FROM users WHERE id=$id\";\n        $result = $this->conn->query($sql);\n\n        if ($result->num_rows == 1) {\n            return $result->fetch_assoc();\n        } else {\n            return false;\n        }\n    }\n}\n\n// Order class\nclass Order {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Sanitize input to prevent SQL injection\n    private function sanitize($data) {\n        return htmlspecialchars(strip_tags($this->conn->real_escape_string(trim($data))));\n    }\n\n    // Add order\n    public function addOrder($user_id, $product_id, $quantity) {\n        $user_id = $this->sanitize($user_id);\n        $product_id = $this->sanitize($product_id);\n        $quantity = $this->sanitize($quantity);\n\n        // Get product price\n        $sql = \"SELECT price FROM products WHERE id=$product_id\";\n        $result = $this->conn->query($sql);\n\n        if ($result->num_rows == 1) {\n            $product_price = $result->fetch_assoc()['price'];\n            $total = $quantity * $product_price;\n\n            $sql = \"INSERT INTO orders (user_id, product_id, quantity, total)\n                    VALUES ('$user_id', '$product_id', '$quantity', '$total')\";\n\n            if ($this->conn->query($sql)) {\n                return true;\n            } else {\n                echo \"Error: \" . $this->conn->error;\n                return false;\n            }\n        } else {\n            echo \"Product not found!\";\n            return false;\n        }\n    }\n\n    // Get all orders for a user\n    public function getAllOrders($user_id) {\n        $user_id = $this->sanitize($user_id);\n\n        $sql = \"SELECT * FROM orders WHERE user_id=$user_id\";\n        $result = $this->conn->query($sql);\n\n        if ($result->num_rows > 0) {\n            while ($row = $result->fetch_assoc()) {\n                echo \"<div class='order'>\";\n                echo \"<p>Order ID: \" . $row['id'] . \"</p>\";\n                echo \"<p>Product ID: \" . $row['product_id'] . \"</p>\";\n                echo \"<p>Quantity: \" . $row['quantity'] . \"</p>\";\n                echo \"<p>Total: $\" . number_format($row['total'], 2) . \"</p>\";\n                echo \"<p>Order Date: \" . $row['order_date'] . \"</p>\";\n                echo \"</div>\";\n            }\n        } else {\n            echo \"No orders found.\";\n        }\n    }\n\n    // Cancel order\n    public function cancelOrder($id) {\n        $id = $this->sanitize($id);\n\n        $sql = \"DELETE FROM orders WHERE id=$id\";\n\n        if ($this->conn->query($sql)) {\n            return true;\n        } else {\n            echo \"Error: \" . $this->conn->error;\n            return false;\n        }\n    }\n\n    // Update order quantity\n    public function updateOrderQuantity($id, $quantity) {\n        $id = $this->sanitize($id);\n        $quantity = $this->sanitize($quantity);\n\n        $sql = \"UPDATE orders SET quantity=$quantity WHERE id=$id\";\n\n        if ($this->conn->query($sql)) {\n            return true;\n        } else {\n            echo \"Error: \" . $this->conn->error;\n            return false;\n        }\n    }\n}\n?>\n```", "```php\n<?php\ninclude 'classes.php';\n\n// Initialize classes\n$product = new Product($conn);\n$user = new User($conn);\n$order = new Order($conn);\n\n// Example usage:\n// Add a product\nif ($product->addProduct('Laptop', 'High performance laptop with 16GB RAM and 500GB SSD', 999.99, 5)) {\n    echo \"Product added successfully!\";\n}\n\n// Register user\nif ($user->registerUser('John Doe', 'john@example.com', 'password123', '123 Street')) {\n    echo \"User registered successfully!\";\n}\n\n// Login user\nif ($user->loginUser('john@example.com', 'password123')) {\n    echo \"Login successful!\";\n}\n\n// Add order\nsession_start();\n$user_id = $_SESSION['user_id'];\n$product_id = 1;\n$quantity = 1;\n\nif ($order->addOrder($user_id, $product_id, $quantity)) {\n    echo \"Order added successfully!\";\n}\n?>\n```", "```php\n// Add to cart (add_to_cart.php)\nsession_start();\n\nif (!isset($_SESSION['cart'])) {\n    $_SESSION['cart'] = array();\n}\n\n$product_id = isset($_GET['id']) ? intval($_GET['id']) : 0;\n\nif ($product_id > 0) {\n    if (!isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id] = 1;\n    } else {\n        $_SESSION['cart'][$product_id]++;\n    }\n}\n\nheader(\"Location: index.php\");\nexit();\n```", "```php\n// Checkout (checkout.php)\nsession_start();\n\nif (!isset($_SESSION['user_id'])) {\n    header(\"Location: login.php\");\n    exit();\n}\n\n$user_id = $_SESSION['user_id'];\n\nforeach ($_SESSION['cart'] as $product_id => $quantity) {\n    if ($order->addOrder($user_id, $product_id, $quantity)) {\n        // Remove from cart\n        unset($_SESSION['cart'][$product_id]);\n    }\n}\n```", "```php\n// Process order (process_order.php)\nsession_start();\n\nif (!isset($_SESSION['user_id'])) {\n    header(\"Location: login.php\");\n    exit();\n}\n\n$user_id = $_SESSION['user_id'];\n$total_amount = 0;\n\nforeach ($_SESSION['cart'] as $product_id => $quantity) {\n    // Get product price\n    $sql = \"SELECT price, stock FROM products WHERE id=$product_id\";\n    $result = $conn->query($sql);\n\n    if ($result->num_rows == 1) {\n        $row = $result->fetch_assoc();\n        $price = $row['price'];\n        $stock = $row['stock'];\n\n        if ($quantity > $stock) {\n            echo \"Not enough stock for product: $product_id\";\n            continue;\n        }\n\n        // Calculate total\n        $total_amount += $price * $quantity;\n\n        // Deduct quantity from stock\n        $sql = \"UPDATE products SET stock=stock-$quantity WHERE id=$product_id\";\n        if (!$conn->query($sql)) {\n            echo \"Error updating stock: \" . $conn->error;\n        }\n\n        // Add to orders\n        $sql = \"INSERT INTO orders (user_id, product_id, quantity, total)\n                VALUES ($user_id, $product_id, $quantity, $price * $quantity)\";\n        if (!$conn->query($sql)) {\n            echo \"Error adding order: \" . $conn->error;\n        }\n    } else {\n        echo \"Product not found: $product_id\";\n    }\n}\n\n// Clear cart\nunset($_SESSION['cart']);\n\nheader(\"Location: thank_you.php\");\nexit();\n```"]}
