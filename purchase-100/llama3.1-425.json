{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality using PHP:\n\n**Note:** This is a simplified example and should not be used in production without proper error handling, security measures, and testing.\n\n**Database Setup:**\n\nCreate a database table `orders` with the following columns:\n```sql\nCREATE TABLE orders (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT,\n  product_id INT,\n  quantity INT,\n  total DECIMAL(10,2),\n  status VARCHAR(50),\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n**PHP Code:**\n\nCreate a new file called `purchase.php` with the following code:\n```php\n<?php\n\n// Include configuration and database connection files\nrequire 'config.php';\nrequire 'db.php';\n\n// Check if user is logged in\nif (!isset($_SESSION['user_id'])) {\n  header('Location: login.php');\n  exit;\n}\n\n// Get product ID and quantity from form submission\nif (isset($_POST['product_id']) && isset($_POST['quantity'])) {\n  $productId = intval($_POST['product_id']);\n  $quantity = intval($_POST['quantity']);\n\n  // Validate input\n  if ($quantity <= 0) {\n    echo \"Invalid quantity\";\n    exit;\n  }\n\n  // Get product details from database\n  $sql = \"SELECT * FROM products WHERE id = ?\";\n  $stmt = $mysqli->prepare($sql);\n  $stmt->bind_param('i', $productId);\n  $stmt->execute();\n  $productDetails = $stmt->get_result()->fetch_assoc();\n\n  if (!$productDetails) {\n    echo \"Product not found\";\n    exit;\n  }\n\n  // Calculate total cost\n  $total = $productDetails['price'] * $quantity;\n\n  // Insert order into database\n  $sql = \"INSERT INTO orders (user_id, product_id, quantity, total, status)\n          VALUES (?, ?, ?, ?, 'pending')\";\n  $stmt = $mysqli->prepare($sql);\n  $stmt->bind_param('iisi', $_SESSION['user_id'], $productId, $quantity, $total);\n  $stmt->execute();\n\n  // Update product stock\n  $sql = \"UPDATE products SET stock = stock - ? WHERE id = ?\";\n  $stmt = $mysqli->prepare($sql);\n  $stmt->bind_param('ii', $quantity, $productId);\n  $stmt->execute();\n\n  echo \"Order placed successfully!\";\n} else {\n  // Display form to enter product ID and quantity\n?>\n<form method=\"post\">\n  <label for=\"product_id\">Product ID:</label>\n  <input type=\"text\" id=\"product_id\" name=\"product_id\"><br><br>\n  <label for=\"quantity\">Quantity:</label>\n  <input type=\"number\" id=\"quantity\" name=\"quantity\"><br><br>\n  <button type=\"submit\">Purchase</button>\n</form>\n<?php\n}\n?>\n```\n**Explanation:**\n\n1. The code first checks if the user is logged in and redirects them to the login page if not.\n2. It then checks if a form has been submitted with `product_id` and `quantity`.\n3. If valid input is received, it retrieves product details from the database using the provided product ID.\n4. It calculates the total cost by multiplying the product price with the quantity.\n5. It inserts an order into the database with the user's ID, product ID, quantity, total cost, and status set to \"pending\".\n6. It updates the product stock by subtracting the ordered quantity from the existing stock.\n7. Finally, it displays a success message if everything goes smoothly.\n\n**Security Measures:**\n\n1. Input validation is performed on `product_id` and `quantity`.\n2. SQL injection protection is achieved using prepared statements with parameter binding.\n3. User authentication is implemented to prevent unauthorized purchases.\n\nRemember that this is a basic example and should not be used in production without proper testing, error handling, and security measures.", "code_blocks": [null, "```php\n<?php\n\n// Include configuration and database connection files\nrequire 'config.php';\nrequire 'db.php';\n\n// Check if user is logged in\nif (!isset($_SESSION['user_id'])) {\n  header('Location: login.php');\n  exit;\n}\n\n// Get product ID and quantity from form submission\nif (isset($_POST['product_id']) && isset($_POST['quantity'])) {\n  $productId = intval($_POST['product_id']);\n  $quantity = intval($_POST['quantity']);\n\n  // Validate input\n  if ($quantity <= 0) {\n    echo \"Invalid quantity\";\n    exit;\n  }\n\n  // Get product details from database\n  $sql = \"SELECT * FROM products WHERE id = ?\";\n  $stmt = $mysqli->prepare($sql);\n  $stmt->bind_param('i', $productId);\n  $stmt->execute();\n  $productDetails = $stmt->get_result()->fetch_assoc();\n\n  if (!$productDetails) {\n    echo \"Product not found\";\n    exit;\n  }\n\n  // Calculate total cost\n  $total = $productDetails['price'] * $quantity;\n\n  // Insert order into database\n  $sql = \"INSERT INTO orders (user_id, product_id, quantity, total, status)\n          VALUES (?, ?, ?, ?, 'pending')\";\n  $stmt = $mysqli->prepare($sql);\n  $stmt->bind_param('iisi', $_SESSION['user_id'], $productId, $quantity, $total);\n  $stmt->execute();\n\n  // Update product stock\n  $sql = \"UPDATE products SET stock = stock - ? WHERE id = ?\";\n  $stmt = $mysqli->prepare($sql);\n  $stmt->bind_param('ii', $quantity, $productId);\n  $stmt->execute();\n\n  echo \"Order placed successfully!\";\n} else {\n  // Display form to enter product ID and quantity\n?>\n<form method=\"post\">\n  <label for=\"product_id\">Product ID:</label>\n  <input type=\"text\" id=\"product_id\" name=\"product_id\"><br><br>\n  <label for=\"quantity\">Quantity:</label>\n  <input type=\"number\" id=\"quantity\" name=\"quantity\"><br><br>\n  <button type=\"submit\">Purchase</button>\n</form>\n<?php\n}\n?>\n```"]}
