{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of how to create a basic purchase functionality in PHP:\n\n**Database Schema**\n\nLet's assume we have the following database tables:\n\n* `products` table with columns: `id`, `name`, `price`\n* `orders` table with columns: `id`, `customer_name`, `order_date`\n* `order_items` table with columns: `id`, `order_id`, `product_id`, `quantity`\n\n**PHP Code**\n\nCreate a new PHP file, e.g. `purchase.php`, and add the following code:\n```php\n<?php\n\n// Database connection settings\n$host = 'localhost';\n$dbname = 'mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\n// Connect to database\n$conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n\n// Function to add a product to the cart\nfunction add_to_cart($product_id) {\n  global $conn;\n  $stmt = $conn->prepare('SELECT * FROM products WHERE id = :id');\n  $stmt->bindParam(':id', $product_id);\n  $stmt->execute();\n  $product = $stmt->fetch();\n  if ($product) {\n    // Product exists, add to cart\n    return array(\n      'success' => true,\n      'message' => 'Product added to cart',\n      'data' => array('id' => $product['id'], 'name' => $product['name'], 'price' => $product['price'])\n    );\n  } else {\n    // Product does not exist\n    return array(\n      'success' => false,\n      'message' => 'Product not found'\n    );\n  }\n}\n\n// Function to place an order\nfunction place_order() {\n  global $conn;\n  // Get the cart contents\n  $cart_contents = $_SESSION['cart'];\n  \n  // Validate cart contents\n  if (!$cart_contents) {\n    return array(\n      'success' => false,\n      'message' => 'Cart is empty'\n    );\n  }\n  \n  // Create a new order\n  $stmt = $conn->prepare('INSERT INTO orders (customer_name, order_date) VALUES (:customer_name, :order_date)');\n  $stmt->bindParam(':customer_name', $_SESSION['customer_name']);\n  $stmt->bindParam(':order_date', date('Y-m-d H:i:s'));\n  $stmt->execute();\n  \n  // Get the new order ID\n  $order_id = $conn->lastInsertId();\n  \n  // Create a new order item for each product in the cart\n  foreach ($cart_contents as $product) {\n    $stmt = $conn->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');\n    $stmt->bindParam(':order_id', $order_id);\n    $stmt->bindParam(':product_id', $product['id']);\n    $stmt->bindParam(':quantity', $product['quantity']);\n    $stmt->execute();\n  }\n  \n  return array(\n    'success' => true,\n    'message' => 'Order placed successfully',\n    'data' => array('order_id' => $order_id)\n  );\n}\n\n// Check if the user is logged in\nif (!isset($_SESSION['customer_name'])) {\n  echo \"You must be logged in to place an order\";\n  exit;\n}\n\n// Handle form submission (i.e. when the user clicks the \"Place Order\" button)\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  $product_id = $_POST['product_id'];\n  \n  // Add product to cart\n  $result = add_to_cart($product_id);\n  if ($result['success']) {\n    // Product added to cart, proceed with order placement\n    $order_result = place_order();\n    echo json_encode($order_result);\n  } else {\n    echo json_encode($result);\n  }\n} else {\n  // Display the form\n?>\n\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n  <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product_id; ?>\">\n  <button type=\"submit\">Place Order</button>\n</form>\n\n<?php\n}\n?>\n```\n**Explanation**\n\nThis code assumes that you have already set up a database with the `products`, `orders`, and `order_items` tables. The code uses PDO (PHP Data Objects) to connect to the database.\n\nThe `add_to_cart()` function takes a product ID as input, checks if the product exists in the database, and returns an array containing success/failure information along with any relevant data.\n\nThe `place_order()` function gets the cart contents from the session, validates them, creates a new order, and inserts each product into the order items table.\n\nThe code also includes a form that is displayed to the user. When the form is submitted (i.e. when the user clicks the \"Place Order\" button), the code calls the `place_order()` function to create the order.\n\n**Note**\n\nThis is just an example code and you should adapt it to your specific needs. You may want to add error handling, validate user input, etc. Additionally, this code assumes that you have already set up a session system on your website.", "code_blocks": ["```php\n<?php\n\n// Database connection settings\n$host = 'localhost';\n$dbname = 'mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\n// Connect to database\n$conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n\n// Function to add a product to the cart\nfunction add_to_cart($product_id) {\n  global $conn;\n  $stmt = $conn->prepare('SELECT * FROM products WHERE id = :id');\n  $stmt->bindParam(':id', $product_id);\n  $stmt->execute();\n  $product = $stmt->fetch();\n  if ($product) {\n    // Product exists, add to cart\n    return array(\n      'success' => true,\n      'message' => 'Product added to cart',\n      'data' => array('id' => $product['id'], 'name' => $product['name'], 'price' => $product['price'])\n    );\n  } else {\n    // Product does not exist\n    return array(\n      'success' => false,\n      'message' => 'Product not found'\n    );\n  }\n}\n\n// Function to place an order\nfunction place_order() {\n  global $conn;\n  // Get the cart contents\n  $cart_contents = $_SESSION['cart'];\n  \n  // Validate cart contents\n  if (!$cart_contents) {\n    return array(\n      'success' => false,\n      'message' => 'Cart is empty'\n    );\n  }\n  \n  // Create a new order\n  $stmt = $conn->prepare('INSERT INTO orders (customer_name, order_date) VALUES (:customer_name, :order_date)');\n  $stmt->bindParam(':customer_name', $_SESSION['customer_name']);\n  $stmt->bindParam(':order_date', date('Y-m-d H:i:s'));\n  $stmt->execute();\n  \n  // Get the new order ID\n  $order_id = $conn->lastInsertId();\n  \n  // Create a new order item for each product in the cart\n  foreach ($cart_contents as $product) {\n    $stmt = $conn->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');\n    $stmt->bindParam(':order_id', $order_id);\n    $stmt->bindParam(':product_id', $product['id']);\n    $stmt->bindParam(':quantity', $product['quantity']);\n    $stmt->execute();\n  }\n  \n  return array(\n    'success' => true,\n    'message' => 'Order placed successfully',\n    'data' => array('order_id' => $order_id)\n  );\n}\n\n// Check if the user is logged in\nif (!isset($_SESSION['customer_name'])) {\n  echo \"You must be logged in to place an order\";\n  exit;\n}\n\n// Handle form submission (i.e. when the user clicks the \"Place Order\" button)\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  $product_id = $_POST['product_id'];\n  \n  // Add product to cart\n  $result = add_to_cart($product_id);\n  if ($result['success']) {\n    // Product added to cart, proceed with order placement\n    $order_result = place_order();\n    echo json_encode($order_result);\n  } else {\n    echo json_encode($result);\n  }\n} else {\n  // Display the form\n?>\n\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n  <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product_id; ?>\">\n  <button type=\"submit\">Place Order</button>\n</form>\n\n<?php\n}\n?>\n```"]}
