{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nAlright, I need to create a purchase functionality using PHP. Let me think about how to approach this.\n\nFirst, I should outline the main components involved in a purchase process. Typically, there's a user interface where customers can add items to their cart. Then, they review their order before confirming the purchase. After that, the system processes the payment and updates the database accordingly.\n\nI'll start by setting up the database. It makes sense to have separate tables for products, orders, and order details. The products table will store each product's information like ID, name, price, description, and stock. Orders will track each purchase with an order ID, user ID, total amount, payment status, and timestamps. The order details table will link each order to the products purchased, storing quantity and subtotal for each item.\n\nNext, I need to create PHP scripts to handle different parts of the process. Adding items to the cart is essential. I'll use a session variable to store the cart contents. When a user adds a product, it checks if the product is already in the cart. If so, it increments the quantity; otherwise, it adds a new entry.\n\nReviewing the order involves displaying all items in the cart. I'll calculate the total price by summing up each item's subtotal. This step also allows users to make any last-minute changes before checkout.\n\nProcessing the payment is critical. For now, I'll simulate this with a placeholder function that returns success or failure. In a real-world scenario, this would integrate with a payment gateway. After processing, the system needs to update the orders and order details tables, insert new records reflecting the purchase, and deduct the purchased quantity from the product stock.\n\nOrder confirmation is next. If the payment is successful, display a thank you message with the order ID. If not, inform the user of the failure and ask them to try again or contact support.\n\nI should also consider including a navigation menu for ease of use, allowing users to return to the shop, view their cart, or check out at any time.\n\nTesting each part step by step is important. I'll make sure that adding products to the cart works correctly, the total price calculation is accurate, and the payment processing simulation behaves as expected. After each purchase, checking the database updates will ensure everything is working smoothly.\n\nFinally, I'll note that this is a basic implementation and mention additional features like user authentication, error handling, CSRF protection, and integration with real payment gateways that would be necessary for a production environment.\n</think>\n\nHere's an example of how to create a purchase functionality using PHP:\n\nThis example includes the following steps:\n1. Add products to cart\n2. Review order\n3. Process payment\n4. Confirmation\n\n### Step 1: Database Setup\n\nFirst, you need to create a database with tables for your products and orders.\n\n```sql\nCREATE TABLE `products` (\n    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n    `name` varchar(255) NOT NULL,\n    `price` decimal(10,2) NOT NULL,\n    `description` text,\n    `stock` int(10) unsigned NOT NULL,\n    PRIMARY KEY (`id`)\n);\n\nCREATE TABLE `orders` (\n    `order_id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n    `user_id` int(10) unsigned NOT NULL,\n    `total_amount` decimal(10,2) NOT NULL,\n    `payment_status` varchar(20) NOT NULL DEFAULT 'pending',\n    `created_at` datetime NOT NULL,\n    PRIMARY KEY (`order_id`)\n);\n\nCREATE TABLE `order_details` (\n    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n    `order_id` int(10) unsigned NOT NULL,\n    `product_id` int(10) unsigned NOT NULL,\n    `quantity` int(10) unsigned NOT NULL,\n    `subtotal` decimal(10,2) NOT NULL,\n    PRIMARY KEY (`id`)\n);\n```\n\n### Step 2: Adding Products to Cart\n\n```php\n<?php\nsession_start();\n\n// Connect to database\n$host = 'localhost';\n$dbname = 'your_database';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\nif (!isset($_SESSION['cart'])) {\n    $_SESSION['cart'] = array();\n}\n\n// Add product to cart\nif (isset($_GET['action']) && $_GET['action'] == 'add') {\n    $product_id = intval($_GET['id']);\n    \n    if (isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id]['quantity']++;\n    } else {\n        $sql = \"SELECT * FROM products WHERE id = ?\";\n        $stmt = $conn->prepare($sql);\n        $stmt->execute([$product_id]);\n        \n        $product = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        if ($product) {\n            $_SESSION['cart'][$product_id] = array(\n                'name' => $product['name'],\n                'price' => $product['price'],\n                'quantity' => 1,\n                'subtotal' => $product['price']\n            );\n        }\n    }\n}\n\n// Display cart contents\nif (isset($_GET['action']) && $_GET['action'] == 'view') {\n    if (!empty($_SESSION['cart'])) {\n        echo \"<table>\";\n        echo \"<tr><th>Product</th><th>Price</th><th>Quantity</th><th>Subtotal</th></tr>\";\n        \n        $total_price = 0;\n        foreach ($_SESSION['cart'] as $id => $item) {\n            echo \"<tr>\";\n            echo \"<td>{$item['name']}</td>\";\n            echo \"<td>\u00a3{$item['price']}</td>\";\n            echo \"<td><input type='number' min='1' value='{$item['quantity']}'></td>\";\n            echo \"<td>\u00a3{$item['subtotal']}</td>\";\n            echo \"</tr>\";\n            \n            $total_price += $item['subtotal'];\n        }\n        \n        echo \"<tr><th colspan='3'>Total:</th><th>\u00a3$total_price</th></tr>\";\n        echo \"</table>\";\n    } else {\n        echo \"Your cart is empty!\";\n    }\n}\n?>\n```\n\n### Step 3: Processing Payment\n\n```php\n<?php\nsession_start();\n\nif (isset($_POST['process_payment'])) {\n    // Simulate payment processing\n    $payment_status = 'success'; // In real application, this would be determined by the payment gateway\n    \n    if ($payment_status == 'success') {\n        // Insert order into database\n        $user_id = 1; // Replace with actual user ID\n        \n        $sql = \"INSERT INTO orders (user_id, total_amount, payment_status, created_at) \n                VALUES (?, ?, ?, NOW())\";\n        \n        try {\n            $stmt = $conn->prepare($sql);\n            $stmt->execute([$user_id, $_SESSION['total_price'], 'completed']);\n            \n            // Get the order ID\n            $order_id = $conn->lastInsertId();\n            \n            // Insert order details\n            foreach ($_SESSION['cart'] as $id => $item) {\n                $sql_details = \"INSERT INTO order_details (order_id, product_id, quantity, subtotal)\n                               VALUES (?, ?, ?, ?)\";\n                \n                $stmt_details = $conn->prepare($sql_details);\n                $stmt_details->execute([$order_id, $id, $item['quantity'], $item['subtotal']]);\n            }\n            \n            // Clear cart\n            unset($_SESSION['cart']);\n            \n            echo \"Payment successful! Your order has been processed.\";\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n        }\n    } else {\n        echo \"Payment failed. Please try again.\";\n    }\n}\n?>\n```\n\n### Step 4: Order Confirmation\n\n```php\n<?php\nsession_start();\n\nif (isset($_GET['order_id'])) {\n    // Retrieve order details from database\n    $sql = \"SELECT * FROM orders WHERE order_id = ?\";\n    \n    $stmt = $conn->prepare($sql);\n    $stmt->execute([$_GET['order_id']]);\n    \n    $order = $stmt->fetch(PDO::FETCH_ASSOC);\n    \n    if ($order) {\n        echo \"<h2>Order Confirmation</h2>\";\n        echo \"<p>Your order has been processed successfully!</p>\";\n        echo \"<p>Order ID: {$order['order_id']}</p>\";\n        echo \"<p>Total Amount: \u00a3{$order['total_amount']}</p>\";\n        echo \"<p>Payment Status: {$order['payment_status']}</p>\";\n    } else {\n        echo \"Invalid order ID!\";\n    }\n}\n?>\n```\n\n### Usage Instructions:\n\n1. First, set up your database with the tables mentioned above.\n2. Create a simple HTML interface to display products and allow users to add them to their cart.\n3. Use the `add` action to add products to the cart.\n4. Use the `view` action to display the contents of the cart.\n5. When the user is ready to purchase, submit the form with the `process_payment` action.\n6. After processing, redirect the user to an order confirmation page.\n\n### Note:\n\nThis is a basic implementation and should be adapted to your specific needs. You might want to add:\n- User authentication\n- Error handling\n- CSRF protection\n- Real payment integration (e.g., PayPal, Stripe)\n- More detailed order tracking\n- Email notifications\n\nRemember to secure your application properly, especially when handling payments.", "code_blocks": [null, "```php\n<?php\nsession_start();\n\n// Connect to database\n$host = 'localhost';\n$dbname = 'your_database';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\nif (!isset($_SESSION['cart'])) {\n    $_SESSION['cart'] = array();\n}\n\n// Add product to cart\nif (isset($_GET['action']) && $_GET['action'] == 'add') {\n    $product_id = intval($_GET['id']);\n    \n    if (isset($_SESSION['cart'][$product_id])) {\n        $_SESSION['cart'][$product_id]['quantity']++;\n    } else {\n        $sql = \"SELECT * FROM products WHERE id = ?\";\n        $stmt = $conn->prepare($sql);\n        $stmt->execute([$product_id]);\n        \n        $product = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        if ($product) {\n            $_SESSION['cart'][$product_id] = array(\n                'name' => $product['name'],\n                'price' => $product['price'],\n                'quantity' => 1,\n                'subtotal' => $product['price']\n            );\n        }\n    }\n}\n\n// Display cart contents\nif (isset($_GET['action']) && $_GET['action'] == 'view') {\n    if (!empty($_SESSION['cart'])) {\n        echo \"<table>\";\n        echo \"<tr><th>Product</th><th>Price</th><th>Quantity</th><th>Subtotal</th></tr>\";\n        \n        $total_price = 0;\n        foreach ($_SESSION['cart'] as $id => $item) {\n            echo \"<tr>\";\n            echo \"<td>{$item['name']}</td>\";\n            echo \"<td>\u00a3{$item['price']}</td>\";\n            echo \"<td><input type='number' min='1' value='{$item['quantity']}'></td>\";\n            echo \"<td>\u00a3{$item['subtotal']}</td>\";\n            echo \"</tr>\";\n            \n            $total_price += $item['subtotal'];\n        }\n        \n        echo \"<tr><th colspan='3'>Total:</th><th>\u00a3$total_price</th></tr>\";\n        echo \"</table>\";\n    } else {\n        echo \"Your cart is empty!\";\n    }\n}\n?>\n```", "```php\n<?php\nsession_start();\n\nif (isset($_POST['process_payment'])) {\n    // Simulate payment processing\n    $payment_status = 'success'; // In real application, this would be determined by the payment gateway\n    \n    if ($payment_status == 'success') {\n        // Insert order into database\n        $user_id = 1; // Replace with actual user ID\n        \n        $sql = \"INSERT INTO orders (user_id, total_amount, payment_status, created_at) \n                VALUES (?, ?, ?, NOW())\";\n        \n        try {\n            $stmt = $conn->prepare($sql);\n            $stmt->execute([$user_id, $_SESSION['total_price'], 'completed']);\n            \n            // Get the order ID\n            $order_id = $conn->lastInsertId();\n            \n            // Insert order details\n            foreach ($_SESSION['cart'] as $id => $item) {\n                $sql_details = \"INSERT INTO order_details (order_id, product_id, quantity, subtotal)\n                               VALUES (?, ?, ?, ?)\";\n                \n                $stmt_details = $conn->prepare($sql_details);\n                $stmt_details->execute([$order_id, $id, $item['quantity'], $item['subtotal']]);\n            }\n            \n            // Clear cart\n            unset($_SESSION['cart']);\n            \n            echo \"Payment successful! Your order has been processed.\";\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n        }\n    } else {\n        echo \"Payment failed. Please try again.\";\n    }\n}\n?>\n```", "```php\n<?php\nsession_start();\n\nif (isset($_GET['order_id'])) {\n    // Retrieve order details from database\n    $sql = \"SELECT * FROM orders WHERE order_id = ?\";\n    \n    $stmt = $conn->prepare($sql);\n    $stmt->execute([$_GET['order_id']]);\n    \n    $order = $stmt->fetch(PDO::FETCH_ASSOC);\n    \n    if ($order) {\n        echo \"<h2>Order Confirmation</h2>\";\n        echo \"<p>Your order has been processed successfully!</p>\";\n        echo \"<p>Order ID: {$order['order_id']}</p>\";\n        echo \"<p>Total Amount: \u00a3{$order['total_amount']}</p>\";\n        echo \"<p>Payment Status: {$order['payment_status']}</p>\";\n    } else {\n        echo \"Invalid order ID!\";\n    }\n}\n?>\n```"]}
