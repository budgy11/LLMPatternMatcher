{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality in PHP. This will include a form to input the product details, a database connection to store the purchase, and some error handling.\n\n**Note:** This example assumes you have a MySQL database set up with a table called \"purchases\" with columns \"id\", \"product_name\", \"price\", and \"quantity\".\n\n**purchase_function.php**\n```php\n<?php\n\n// Database connection settings\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n// Connect to database\n$conn = new mysqli($host, $username, $password, $dbname);\n\n// Check if connection was successful\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Form data from user input\n$product_name = $_POST['product_name'];\n$price = floatval($_POST['price']);\n$quantity = intval($_POST['quantity']);\n\n// Validate form data\nif (empty($product_name)) {\n    echo 'Please enter product name';\n} elseif (!is_numeric($price) || $price <= 0) {\n    echo 'Please enter valid price';\n} elseif (!is_numeric($quantity) || $quantity <= 0) {\n    echo 'Please enter valid quantity';\n}\n\n// If form data is valid, insert purchase into database\nif ($product_name && $price > 0 && $quantity > 0) {\n    // Prepare SQL statement\n    $stmt = $conn->prepare(\"INSERT INTO purchases (product_name, price, quantity) VALUES (?, ?, ?)\");\n    \n    // Bind parameters\n    $stmt->bind_param('dii', $product_name, $price, $quantity);\n    \n    // Execute query\n    if ($stmt->execute()) {\n        echo 'Purchase added successfully!';\n    } else {\n        echo 'Error adding purchase: ' . $conn->error;\n    }\n}\n\n// Close connection\n$conn->close();\n\n?>\n```\n**purchase_form.php**\n```php\n<?php include 'purchase_function.php'; ?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Purchase Form</title>\n</head>\n<body>\n\n<h1>Purchase Form</h1>\n\n<form action=\"\" method=\"post\">\n    <label for=\"product_name\">Product Name:</label>\n    <input type=\"text\" id=\"product_name\" name=\"product_name\"><br><br>\n    \n    <label for=\"price\">Price:</label>\n    <input type=\"number\" id=\"price\" name=\"price\" step=\"0.01\"><br><br>\n    \n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" id=\"quantity\" name=\"quantity\"><br><br>\n    \n    <input type=\"submit\" value=\"Submit\">\n</form>\n\n</body>\n</html>\n```\n**Explanation:**\n\n1. The `purchase_function.php` file contains the PHP code for handling form data and inserting it into the database.\n2. The `purchase_form.php` file is an HTML form that sends a POST request to the same script when submitted.\n3. When the form is submitted, the `$_POST` superglobal is used to retrieve the form data.\n4. Form data is validated using simple checks (e.g., checking if input fields are not empty).\n5. If form data is valid, an SQL statement is prepared and executed to insert a new row into the \"purchases\" table.\n\nNote that this example uses MySQLi for database connections, but you can modify it to use other databases or libraries like PDO.\n\n**Security note:** This example includes basic validation checks, but in a real-world application, you should use more robust methods (e.g., using prepared statements with parameterized queries) to prevent SQL injection attacks.", "code_blocks": ["```php\n<?php\n\n// Database connection settings\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n// Connect to database\n$conn = new mysqli($host, $username, $password, $dbname);\n\n// Check if connection was successful\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Form data from user input\n$product_name = $_POST['product_name'];\n$price = floatval($_POST['price']);\n$quantity = intval($_POST['quantity']);\n\n// Validate form data\nif (empty($product_name)) {\n    echo 'Please enter product name';\n} elseif (!is_numeric($price) || $price <= 0) {\n    echo 'Please enter valid price';\n} elseif (!is_numeric($quantity) || $quantity <= 0) {\n    echo 'Please enter valid quantity';\n}\n\n// If form data is valid, insert purchase into database\nif ($product_name && $price > 0 && $quantity > 0) {\n    // Prepare SQL statement\n    $stmt = $conn->prepare(\"INSERT INTO purchases (product_name, price, quantity) VALUES (?, ?, ?)\");\n    \n    // Bind parameters\n    $stmt->bind_param('dii', $product_name, $price, $quantity);\n    \n    // Execute query\n    if ($stmt->execute()) {\n        echo 'Purchase added successfully!';\n    } else {\n        echo 'Error adding purchase: ' . $conn->error;\n    }\n}\n\n// Close connection\n$conn->close();\n\n?>\n```", "```php\n<?php include 'purchase_function.php'; ?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Purchase Form</title>\n</head>\n<body>\n\n<h1>Purchase Form</h1>\n\n<form action=\"\" method=\"post\">\n    <label for=\"product_name\">Product Name:</label>\n    <input type=\"text\" id=\"product_name\" name=\"product_name\"><br><br>\n    \n    <label for=\"price\">Price:</label>\n    <input type=\"number\" id=\"price\" name=\"price\" step=\"0.01\"><br><br>\n    \n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" id=\"quantity\" name=\"quantity\"><br><br>\n    \n    <input type=\"submit\" value=\"Submit\">\n</form>\n\n</body>\n</html>\n```"]}
