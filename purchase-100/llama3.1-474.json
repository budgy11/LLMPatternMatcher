{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a simple purchase functionality using PHP, HTML, and CSS. This example includes features for adding items to cart, viewing the cart contents, removing items from the cart, and completing a purchase.\n\n**Note:** This example assumes that you have PHP installed on your server and have access to create a database. It also assumes that you are familiar with basic SQL commands and database design.\n\n### Database Design\n\nFirst, we need to create a database schema for our application. We will use three tables: `products`, `cart`, and `orders`.\n\n```sql\nCREATE TABLE products (\n    id INT AUTO_INCREMENT,\n    name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\nCREATE TABLE cart (\n    id INT AUTO_INCREMENT,\n    customer_id INT,\n    product_id INT,\n    quantity INT,\n    FOREIGN KEY (customer_id) REFERENCES customers(id),\n    FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\nCREATE TABLE orders (\n    id INT AUTO_INCREMENT,\n    customer_id INT,\n    order_date DATE,\n    total DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n```\n\n### PHP Code\n\nNext, we will create a basic PHP script that includes the necessary functions for adding products to cart and completing purchases.\n\n**`cart.php`:**\n```php\n<?php\n// database connection settings\n$dsn = 'mysql:host=localhost;dbname=mydatabase';\n$username = 'myuser';\n$password = 'mypassword';\n\ntry {\n    $pdo = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n    echo 'Connection failed: ' . $e->getMessage();\n}\n\n// function to add product to cart\nfunction add_to_cart($customer_id, $product_id, $quantity) {\n    global $pdo;\n    \n    try {\n        $stmt = $pdo->prepare(\"INSERT INTO cart (customer_id, product_id, quantity) VALUES (:customer_id, :product_id, :quantity)\");\n        $stmt->bindParam(':customer_id', $customer_id);\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->bindParam(':quantity', $quantity);\n        $stmt->execute();\n    } catch (PDOException $e) {\n        echo 'Error adding to cart: ' . $e->getMessage();\n    }\n}\n\n// function to view cart contents\nfunction view_cart($customer_id) {\n    global $pdo;\n    \n    try {\n        $stmt = $pdo->prepare(\"SELECT * FROM cart WHERE customer_id = :customer_id\");\n        $stmt->bindParam(':customer_id', $customer_id);\n        $stmt->execute();\n        \n        return $stmt->fetchAll();\n    } catch (PDOException $e) {\n        echo 'Error viewing cart: ' . $e->getMessage();\n    }\n}\n\n// function to remove item from cart\nfunction remove_from_cart($cart_id) {\n    global $pdo;\n    \n    try {\n        $stmt = $pdo->prepare(\"DELETE FROM cart WHERE id = :id\");\n        $stmt->bindParam(':id', $cart_id);\n        $stmt->execute();\n    } catch (PDOException $e) {\n        echo 'Error removing from cart: ' . $e->getMessage();\n    }\n}\n\n// function to complete purchase\nfunction complete_purchase($customer_id, $total) {\n    global $pdo;\n    \n    try {\n        // insert order into database\n        $stmt = $pdo->prepare(\"INSERT INTO orders (customer_id, total, order_date) VALUES (:customer_id, :total, NOW())\");\n        $stmt->bindParam(':customer_id', $customer_id);\n        $stmt->bindParam(':total', $total);\n        $stmt->execute();\n        \n        // delete all items from cart\n        $stmt = $pdo->prepare(\"DELETE FROM cart WHERE customer_id = :customer_id\");\n        $stmt->bindParam(':customer_id', $customer_id);\n        $stmt->execute();\n    } catch (PDOException $e) {\n        echo 'Error completing purchase: ' . $e->getMessage();\n    }\n}\n?>\n```\n\n### HTML and CSS Code\n\nFinally, we will create a simple HTML form to add products to cart and view cart contents. We will also include a button to complete the purchase.\n\n**`index.html`:**\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Cart</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <!-- add product form -->\n    <form id=\"add-product-form\">\n        <input type=\"hidden\" id=\"customer-id\" name=\"customer_id\" value=\"<?php echo $_SESSION['customer_id']; ?>\">\n        <select id=\"product-select\" name=\"product_id\">\n            <?php\n                $stmt = $pdo->prepare(\"SELECT * FROM products\");\n                $stmt->execute();\n                \n                foreach ($stmt->fetchAll() as $row) {\n                    echo '<option value=\"' . $row['id'] . '\">' . $row['name'] . '</option>';\n                }\n            ?>\n        </select>\n        <input type=\"number\" id=\"quantity-input\" name=\"quantity\">\n        <button type=\"submit\">Add to Cart</button>\n    </form>\n\n    <!-- view cart contents -->\n    <h2>Cart Contents:</h2>\n    <ul id=\"cart-contents\"></ul>\n\n    <!-- complete purchase button -->\n    <button id=\"complete-purchase-button\">Complete Purchase</button>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n**`style.css`:**\n```css\n/* add basic styling here */\n```\n\n### JavaScript Code\n\nFinally, we will create a simple JavaScript script to handle form submissions and display cart contents.\n\n**`script.js`:**\n```javascript\n// get elements by id\nconst addProductForm = document.getElementById('add-product-form');\nconst productSelect = document.getElementById('product-select');\nconst quantityInput = document.getElementById('quantity-input');\nconst cartContents = document.getElementById('cart-contents');\nconst completePurchaseButton = document.getElementById('complete-purchase-button');\n\n// handle form submission\naddProductForm.addEventListener('submit', (e) => {\n    e.preventDefault();\n    \n    const customerId = document.getElementById('customer-id').value;\n    const productId = productSelect.value;\n    const quantity = parseInt(quantityInput.value);\n    \n    // call PHP function to add product to cart\n    fetch('/cart.php?method=add_to_cart&customer_id=' + customerId + '&product_id=' + productId + '&quantity=' + quantity)\n        .then((response) => response.json())\n        .then((data) => {\n            console.log(data);\n            \n            // update cart contents display\n            const cartItem = document.createElement('li');\n            cartItem.textContent = data.name + ' x ' + data.quantity;\n            cartContents.appendChild(cartItem);\n        })\n        .catch((error) => console.error(error));\n});\n\n// handle complete purchase button click\ncompletePurchaseButton.addEventListener('click', () => {\n    // get total from PHP function\n    fetch('/cart.php?method=view_cart&customer_id=' + customerId)\n        .then((response) => response.json())\n        .then((data) => {\n            const total = data.reduce((acc, current) => acc + (current.price * current.quantity), 0);\n            \n            // call PHP function to complete purchase\n            fetch('/cart.php?method=complete_purchase&customer_id=' + customerId + '&total=' + total)\n                .then((response) => response.json())\n                .then((data) => {\n                    console.log(data);\n                    \n                    // clear cart contents display\n                    cartContents.innerHTML = '';\n                })\n                .catch((error) => console.error(error));\n        })\n        .catch((error) => console.error(error));\n});\n```\n\nThis is a basic example of how you can create a purchase functionality using PHP, HTML, CSS, and JavaScript. You will need to modify the code to fit your specific needs and implement additional features such as user authentication and payment processing.\n\n**Note:** This example assumes that you have PHP installed on your server and have access to create a database. It also assumes that you are familiar with basic SQL commands and database design.", "code_blocks": [null, "```php\n<?php\n// database connection settings\n$dsn = 'mysql:host=localhost;dbname=mydatabase';\n$username = 'myuser';\n$password = 'mypassword';\n\ntry {\n    $pdo = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n    echo 'Connection failed: ' . $e->getMessage();\n}\n\n// function to add product to cart\nfunction add_to_cart($customer_id, $product_id, $quantity) {\n    global $pdo;\n    \n    try {\n        $stmt = $pdo->prepare(\"INSERT INTO cart (customer_id, product_id, quantity) VALUES (:customer_id, :product_id, :quantity)\");\n        $stmt->bindParam(':customer_id', $customer_id);\n        $stmt->bindParam(':product_id', $product_id);\n        $stmt->bindParam(':quantity', $quantity);\n        $stmt->execute();\n    } catch (PDOException $e) {\n        echo 'Error adding to cart: ' . $e->getMessage();\n    }\n}\n\n// function to view cart contents\nfunction view_cart($customer_id) {\n    global $pdo;\n    \n    try {\n        $stmt = $pdo->prepare(\"SELECT * FROM cart WHERE customer_id = :customer_id\");\n        $stmt->bindParam(':customer_id', $customer_id);\n        $stmt->execute();\n        \n        return $stmt->fetchAll();\n    } catch (PDOException $e) {\n        echo 'Error viewing cart: ' . $e->getMessage();\n    }\n}\n\n// function to remove item from cart\nfunction remove_from_cart($cart_id) {\n    global $pdo;\n    \n    try {\n        $stmt = $pdo->prepare(\"DELETE FROM cart WHERE id = :id\");\n        $stmt->bindParam(':id', $cart_id);\n        $stmt->execute();\n    } catch (PDOException $e) {\n        echo 'Error removing from cart: ' . $e->getMessage();\n    }\n}\n\n// function to complete purchase\nfunction complete_purchase($customer_id, $total) {\n    global $pdo;\n    \n    try {\n        // insert order into database\n        $stmt = $pdo->prepare(\"INSERT INTO orders (customer_id, total, order_date) VALUES (:customer_id, :total, NOW())\");\n        $stmt->bindParam(':customer_id', $customer_id);\n        $stmt->bindParam(':total', $total);\n        $stmt->execute();\n        \n        // delete all items from cart\n        $stmt = $pdo->prepare(\"DELETE FROM cart WHERE customer_id = :customer_id\");\n        $stmt->bindParam(':customer_id', $customer_id);\n        $stmt->execute();\n    } catch (PDOException $e) {\n        echo 'Error completing purchase: ' . $e->getMessage();\n    }\n}\n?>\n```", null, null, null]}
