{"prompt": "Create a purchase cart functionality using php", "llm_output": "Here is an example of how to implement a basic purchase cart functionality using PHP. This example uses a MySQL database to store the products and their prices, and a shopping cart that stores the items added by the user.\n\n**Database Setup:**\n\nFirst, you need to set up your database with two tables: `products` and `cart`. The `products` table will store information about each product, while the `cart` table will store the items added by the user.\n\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE cart (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT,\n  product_id INT,\n  quantity INT,\n  FOREIGN KEY (user_id) REFERENCES users(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n**PHP Code:**\n\nNext, you need to create the PHP code that will handle the purchase cart functionality. This example uses a simple object-oriented approach.\n\n```php\nclass Product {\n  public $id;\n  public $name;\n  public $price;\n\n  function __construct($id, $name, $price) {\n    $this->id = $id;\n    $this->name = $name;\n    $this->price = $price;\n  }\n}\n\nclass Cart {\n  private $products = array();\n\n  function addProduct($product) {\n    array_push($this->products, $product);\n  }\n\n  function removeProduct($product_id) {\n    foreach ($this->products as $key => $product) {\n      if ($product->id == $product_id) {\n        unset($this->products[$key]);\n      }\n    }\n  }\n\n  function getProducts() {\n    return $this->products;\n  }\n\n  function calculateTotal() {\n    $total = 0;\n    foreach ($this->products as $product) {\n      $total += $product->price * $this->getQuantity($product);\n    }\n    return $total;\n  }\n\n  private function getQuantity($product) {\n    $count = 0;\n    foreach ($this->products as $item) {\n      if ($item == $product) {\n        $count++;\n      }\n    }\n    return $count;\n  }\n}\n\n// Function to add product to cart\nfunction addToCart($user_id, $product_id, $quantity) {\n  global $db;\n  $query = \"INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)\";\n  $stmt = $db->prepare($query);\n  $stmt->execute(array($user_id, $product_id, $quantity));\n}\n\n// Function to remove product from cart\nfunction removeFromCart($user_id, $product_id) {\n  global $db;\n  $query = \"DELETE FROM cart WHERE user_id = ? AND product_id = ?\";\n  $stmt = $db->prepare($query);\n  $stmt->execute(array($user_id, $product_id));\n}\n\n// Function to get products in cart\nfunction getCartProducts($user_id) {\n  global $db;\n  $query = \"SELECT p.id, p.name, c.quantity FROM products p JOIN cart c ON p.id = c.product_id WHERE c.user_id = ?\";\n  $stmt = $db->prepare($query);\n  $stmt->execute(array($user_id));\n  return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\n\n// Function to calculate total cost of items in cart\nfunction getCartTotal($user_id) {\n  global $db;\n  $query = \"SELECT SUM(c.quantity * p.price) AS total FROM products p JOIN cart c ON p.id = c.product_id WHERE c.user_id = ?\";\n  $stmt = $db->prepare($query);\n  $stmt->execute(array($user_id));\n  return $stmt->fetchColumn();\n}\n```\n\n**Example Use Cases:**\n\nTo add a product to the cart, you can use the following code:\n\n```php\n$user_id = 1;\n$product_id = 1;\n$quantity = 2;\n\naddToCart($user_id, $product_id, $quantity);\n```\n\nTo remove a product from the cart, you can use the following code:\n\n```php\n$user_id = 1;\n$product_id = 1;\n\nremoveFromCart($user_id, $product_id);\n```\n\nTo get all products in the cart, you can use the following code:\n\n```php\n$user_id = 1;\n$products = getCartProducts($user_id);\n\nforeach ($products as $product) {\n  echo $product['name'] . \" x \" . $product['quantity'];\n}\n```\n\nTo calculate the total cost of items in the cart, you can use the following code:\n\n```php\n$user_id = 1;\n$total = getCartTotal($user_id);\necho \"Total: $\" . number_format($total, 2);\n```\n\nNote that this is a very basic example and you may want to add additional features such as product variations, discounts, taxes, etc.", "code_blocks": [null, "```php\nclass Product {\n  public $id;\n  public $name;\n  public $price;\n\n  function __construct($id, $name, $price) {\n    $this->id = $id;\n    $this->name = $name;\n    $this->price = $price;\n  }\n}\n\nclass Cart {\n  private $products = array();\n\n  function addProduct($product) {\n    array_push($this->products, $product);\n  }\n\n  function removeProduct($product_id) {\n    foreach ($this->products as $key => $product) {\n      if ($product->id == $product_id) {\n        unset($this->products[$key]);\n      }\n    }\n  }\n\n  function getProducts() {\n    return $this->products;\n  }\n\n  function calculateTotal() {\n    $total = 0;\n    foreach ($this->products as $product) {\n      $total += $product->price * $this->getQuantity($product);\n    }\n    return $total;\n  }\n\n  private function getQuantity($product) {\n    $count = 0;\n    foreach ($this->products as $item) {\n      if ($item == $product) {\n        $count++;\n      }\n    }\n    return $count;\n  }\n}\n\n// Function to add product to cart\nfunction addToCart($user_id, $product_id, $quantity) {\n  global $db;\n  $query = \"INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)\";\n  $stmt = $db->prepare($query);\n  $stmt->execute(array($user_id, $product_id, $quantity));\n}\n\n// Function to remove product from cart\nfunction removeFromCart($user_id, $product_id) {\n  global $db;\n  $query = \"DELETE FROM cart WHERE user_id = ? AND product_id = ?\";\n  $stmt = $db->prepare($query);\n  $stmt->execute(array($user_id, $product_id));\n}\n\n// Function to get products in cart\nfunction getCartProducts($user_id) {\n  global $db;\n  $query = \"SELECT p.id, p.name, c.quantity FROM products p JOIN cart c ON p.id = c.product_id WHERE c.user_id = ?\";\n  $stmt = $db->prepare($query);\n  $stmt->execute(array($user_id));\n  return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\n\n// Function to calculate total cost of items in cart\nfunction getCartTotal($user_id) {\n  global $db;\n  $query = \"SELECT SUM(c.quantity * p.price) AS total FROM products p JOIN cart c ON p.id = c.product_id WHERE c.user_id = ?\";\n  $stmt = $db->prepare($query);\n  $stmt->execute(array($user_id));\n  return $stmt->fetchColumn();\n}\n```", "```php\n$user_id = 1;\n$product_id = 1;\n$quantity = 2;\n\naddToCart($user_id, $product_id, $quantity);\n```", "```php\n$user_id = 1;\n$product_id = 1;\n\nremoveFromCart($user_id, $product_id);\n```", "```php\n$user_id = 1;\n$products = getCartProducts($user_id);\n\nforeach ($products as $product) {\n  echo $product['name'] . \" x \" . $product['quantity'];\n}\n```", "```php\n$user_id = 1;\n$total = getCartTotal($user_id);\necho \"Total: $\" . number_format($total, 2);\n```"]}
