{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, the user wants to create a purchase functionality using PHP. Let me think about how to approach this.\n\nFirst, I need to outline what features are essential. The user mentioned handling product inventory, processing orders, payments, and managing users. So, I should cover each of these areas.\n\nI'll start by setting up the database tables. Products table will have details like ID, name, price, description, quantity, and category. Orders table needs to track order IDs, user IDs, product IDs, quantities, timestamps, status, and payment methods. Users table will store user info: ID, username, email, password hash, address, phone, and creation date.\n\nNext, I'll think about the PHP classes. A Product class to manage products with CRUD operations. An Order class to handle order processing, checking stock, updating inventory, getting order history. A User class for user management\u2014registering, logging in, updating info.\n\nFor the front-end, I need forms for product display, user registration and login, and checkout. Using Bootstrap will make it look clean and responsive.\n\nIn the purchase process, users must be logged in to view checkout. So, I'll include a check for the user session at the beginning of the checkout script. If not logged in, redirect them to the login page.\n\nProcessing the order involves validating form data, checking stock availability, updating the product quantity, creating an order record, and handling payment status. Since this is a basic example, I'm setting payment status as unpaid for now, but in real scenarios, integration with a payment gateway would be needed.\n\nI'll also handle errors gracefully\u2014like if the user tries to buy more than what's available or if form fields are empty. Displaying error messages helps users correct their inputs.\n\nFinally, I'll include security measures such as using prepared statements to prevent SQL injection and hashing passwords when storing user data.\n\nPutting it all together, I'll structure the code with classes in separate files for better organization and easier maintenance.\n</think>\n\nHere's an example of a purchase functionality using PHP. This includes basic features like product inventory, order processing, payment handling, and user management:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'shopping_cart';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Product class\nclass Product {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Get all products\n    public function getProducts() {\n        try {\n            $stmt = $this->conn->query(\"SELECT * FROM products\");\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Get product by ID\n    public function getProductById($id) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n            $stmt->execute([$id]);\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Add product\n    public function addProduct($data) {\n        try {\n            $stmt = $this->conn->prepare(\"INSERT INTO products SET \n                name = ?, \n                price = ?, \n                description = ?, \n                quantity = ?, \n                category = ?\");\n            $stmt->execute([\n                $data['name'],\n                $data['price'],\n                $data['description'],\n                $data['quantity'],\n                $data['category']\n            ]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Update product\n    public function updateProduct($id, $data) {\n        try {\n            $stmt = $this->conn->prepare(\"UPDATE products SET \n                name = ?, \n                price = ?, \n                description = ?, \n                quantity = ?, \n                category = ? WHERE id = ?\");\n            $stmt->execute([\n                $data['name'],\n                $data['price'],\n                $data['description'],\n                $data['quantity'],\n                $data['category'],\n                $id\n            ]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Delete product\n    public function deleteProduct($id) {\n        try {\n            $stmt = $this->conn->prepare(\"DELETE FROM products WHERE id = ?\");\n            $stmt->execute([$id]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n\n// Order class\nclass Order {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Get all orders\n    public function getOrders() {\n        try {\n            $stmt = $this->conn->query(\"SELECT * FROM orders\");\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Get order by ID\n    public function getOrderById($id) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM orders WHERE id = ?\");\n            $stmt->execute([$id]);\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Process order\n    public function processOrder($data, $product_id, $user_id) {\n        try {\n            // Check if product is in stock\n            $product = new Product($this->conn);\n            $product_details = $product->getProductById($product_id);\n            \n            if ($product_details['quantity'] < $data['quantity']) {\n                return false; // Not enough stock\n            }\n\n            // Update product quantity\n            $new_quantity = $product_details['quantity'] - $data['quantity'];\n            $update_stmt = $this->conn->prepare(\"UPDATE products SET quantity = ? WHERE id = ?\");\n            $update_stmt->execute([$new_quantity, $product_id]);\n\n            // Insert order\n            $order_stmt = $this->conn->prepare(\"INSERT INTO orders SET \n                user_id = ?, \n                product_id = ?, \n                quantity = ?, \n                order_date = NOW(), \n                status = 'pending', \n                payment_method = ?\");\n            $order_stmt->execute([\n                $user_id,\n                $product_id,\n                $data['quantity'],\n                $data['payment_method']\n            ]);\n            \n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get order history for user\n    public function getOrderHistory($user_id) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM orders WHERE user_id = ?\");\n            $stmt->execute([$user_id]);\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n        }\n    }\n}\n\n// User class\nclass User {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Register user\n    public function register($data) {\n        try {\n            // Check if username exists\n            $check_stmt = $this->conn->prepare(\"SELECT * FROM users WHERE username = ?\");\n            $check_stmt->execute([$data['username']]);\n            \n            if ($check_stmt->rowCount() > 0) {\n                return false; // Username already exists\n            }\n\n            // Hash password\n            $hashed_password = password_hash($data['password'], PASSWORD_DEFAULT);\n\n            // Insert user\n            $stmt = $this->conn->prepare(\"INSERT INTO users SET \n                username = ?, \n                email = ?, \n                password = ?, \n                address = ?, \n                phone = ?, \n                created_at = NOW()\");\n            $stmt->execute([\n                $data['username'],\n                $data['email'],\n                $hashed_password,\n                $data['address'],\n                $data['phone']\n            ]);\n            \n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Login user\n    public function login($username, $password) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM users WHERE username = ?\");\n            $stmt->execute([$username]);\n            $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n            if (!$user || !password_verify($password, $user['password'])) {\n                return false;\n            }\n\n            // Start session\n            session_start();\n            $_SESSION['user_id'] = $user['id'];\n            $_SESSION['username'] = $user['username'];\n            \n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get user by ID\n    public function getUserById($id) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM users WHERE id = ?\");\n            $stmt->execute([$id]);\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Update user\n    public function updateUser($id, $data) {\n        try {\n            $stmt = $this->conn->prepare(\"UPDATE users SET \n                username = ?, \n                email = ?, \n                address = ?, \n                phone = ? WHERE id = ?\");\n            $stmt->execute([\n                $data['username'],\n                $data['email'],\n                $data['address'],\n                $data['phone'],\n                $id\n            ]);\n            \n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Delete user\n    public function deleteUser($id) {\n        try {\n            $stmt = $this->conn->prepare(\"DELETE FROM users WHERE id = ?\");\n            $stmt->execute([$id]);\n            \n            session_unset();\n            session_destroy();\n            \n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n\n// Create tables if not exists\ntry {\n    // Products table\n    $conn->exec(\"CREATE TABLE IF NOT EXISTS products (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        name VARCHAR(255) NOT NULL,\n        price DECIMAL(10, 2) NOT NULL,\n        description TEXT,\n        quantity INT NOT NULL,\n        category VARCHAR(255)\n    )\");\n\n    // Orders table\n    $conn->exec(\"CREATE TABLE IF NOT EXISTS orders (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        user_id INT NOT NULL,\n        product_id INT NOT NULL,\n        quantity INT NOT NULL,\n        order_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n        status ENUM('pending', 'completed', 'cancelled') DEFAULT 'pending',\n        payment_method VARCHAR(255)\n    )\");\n\n    // Users table\n    $conn->exec(\"CREATE TABLE IF NOT EXISTS users (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        username VARCHAR(255) UNIQUE NOT NULL,\n        email VARCHAR(255) UNIQUE NOT NULL,\n        password VARCHAR(255) NOT NULL,\n        address TEXT,\n        phone VARCHAR(20),\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    )\");\n} catch (PDOException $e) {\n    echo \"Error creating tables: \" . $e->getMessage();\n}\n\n// Front-end code example (checkout.php)\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Checkout</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <?php\n    // Check if user is logged in\n    session_start();\n    if (!isset($_SESSION['user_id'])) {\n        header(\"Location: login.php\");\n        exit();\n    }\n\n    $order = new Order($conn);\n    $product = new Product($conn);\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n        // Process order\n        $data = [\n            'quantity' => $_POST['quantity'],\n            'payment_method' => $_POST['payment_method']\n        ];\n        \n        $user_id = $_SESSION['user_id'];\n        $product_id = $_GET['id'];\n\n        if ($order->processOrder($data, $product_id, $user_id)) {\n            echo \"<div class='alert alert-success'>Order processed successfully!</div>\";\n        } else {\n            echo \"<div class='alert alert-danger'>Error processing order!</div>\";\n        }\n    }\n\n    // Get product details\n    if (isset($_GET['id'])) {\n        $product_details = $product->getProductById($_GET['id']);\n    ?>\n\n    <div class=\"container mt-5\">\n        <h2>Checkout</h2>\n        <form method=\"POST\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">\n            <input type=\"hidden\" name=\"id\" value=\"<?php echo $product_details['id']; ?>\">\n            \n            <div class=\"form-group\">\n                <label>Product:</label>\n                <input type=\"text\" class=\"form-control\" value=\"<?php echo $product_details['name']; ?>\" readonly>\n            </div>\n\n            <div class=\"form-group\">\n                <label>Price:</label>\n                <input type=\"number\" step=\"0.01\" class=\"form-control\" value=\"<?php echo $product_details['price']; ?>\" readonly>\n            </div>\n\n            <div class=\"form-group\">\n                <label>Quantity:</label>\n                <input type=\"number\" min=\"1\" max=\"<?php echo $product_details['quantity']; ?>\" name=\"quantity\" class=\"form-control\" required>\n            </div>\n\n            <div class=\"form-group\">\n                <label>Payment Method:</label>\n                <select name=\"payment_method\" class=\"form-control\" required>\n                    <option value=\"\">Select Payment Method</option>\n                    <option value=\"credit_card\">Credit Card</option>\n                    <option value=\"paypal\">PayPal</option>\n                </select>\n            </div>\n\n            <button type=\"submit\" class=\"btn btn-primary\">Place Order</button>\n        </form>\n    </div>\n\n    <?php } ?>\n\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>\n```\n\nThis example includes:\n\n1. Database setup with three tables: `products`, `orders`, and `users`\n2. Three classes:\n   - Product class for managing products\n   - Order class for handling orders\n   - User class for user management\n\n3. Basic functionality:\n   - Product CRUD operations\n   - Order processing\n   - Payment handling (basic implementation)\n   - User registration and login\n   - Order history\n\n4. Front-end example with Bootstrap styling\n\nTo use this code:\n\n1. Create a database named `shopping_cart`\n2. Set up the tables using the SQL statements provided\n3. Configure your database connection details in the `$host`, `$dbname`, `$username`, and `$password` variables\n4. Use the classes to manage products, orders, and users\n\nNote: This is a basic implementation and should be extended with additional security measures, error handling, and features for a production environment.\n\nYou can extend this functionality by adding:\n\n- Payment gateway integration (e.g., Stripe, PayPal)\n- User authentication (password hashing, session management)\n- Order tracking\n- Product reviews\n- Cart functionality\n- More comprehensive error handling\n- API endpoints\n- Front-end enhancements\n\nRemember to secure your application by:\n- Sanitizing user input\n- Using prepared statements\n- Hashing passwords\n- Implementing proper session management\n- Adding CSRF protection\n- Validating all inputs", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'shopping_cart';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Product class\nclass Product {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Get all products\n    public function getProducts() {\n        try {\n            $stmt = $this->conn->query(\"SELECT * FROM products\");\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Get product by ID\n    public function getProductById($id) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n            $stmt->execute([$id]);\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Add product\n    public function addProduct($data) {\n        try {\n            $stmt = $this->conn->prepare(\"INSERT INTO products SET \n                name = ?, \n                price = ?, \n                description = ?, \n                quantity = ?, \n                category = ?\");\n            $stmt->execute([\n                $data['name'],\n                $data['price'],\n                $data['description'],\n                $data['quantity'],\n                $data['category']\n            ]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Update product\n    public function updateProduct($id, $data) {\n        try {\n            $stmt = $this->conn->prepare(\"UPDATE products SET \n                name = ?, \n                price = ?, \n                description = ?, \n                quantity = ?, \n                category = ? WHERE id = ?\");\n            $stmt->execute([\n                $data['name'],\n                $data['price'],\n                $data['description'],\n                $data['quantity'],\n                $data['category'],\n                $id\n            ]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Delete product\n    public function deleteProduct($id) {\n        try {\n            $stmt = $this->conn->prepare(\"DELETE FROM products WHERE id = ?\");\n            $stmt->execute([$id]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n\n// Order class\nclass Order {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Get all orders\n    public function getOrders() {\n        try {\n            $stmt = $this->conn->query(\"SELECT * FROM orders\");\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Get order by ID\n    public function getOrderById($id) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM orders WHERE id = ?\");\n            $stmt->execute([$id]);\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Process order\n    public function processOrder($data, $product_id, $user_id) {\n        try {\n            // Check if product is in stock\n            $product = new Product($this->conn);\n            $product_details = $product->getProductById($product_id);\n            \n            if ($product_details['quantity'] < $data['quantity']) {\n                return false; // Not enough stock\n            }\n\n            // Update product quantity\n            $new_quantity = $product_details['quantity'] - $data['quantity'];\n            $update_stmt = $this->conn->prepare(\"UPDATE products SET quantity = ? WHERE id = ?\");\n            $update_stmt->execute([$new_quantity, $product_id]);\n\n            // Insert order\n            $order_stmt = $this->conn->prepare(\"INSERT INTO orders SET \n                user_id = ?, \n                product_id = ?, \n                quantity = ?, \n                order_date = NOW(), \n                status = 'pending', \n                payment_method = ?\");\n            $order_stmt->execute([\n                $user_id,\n                $product_id,\n                $data['quantity'],\n                $data['payment_method']\n            ]);\n            \n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get order history for user\n    public function getOrderHistory($user_id) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM orders WHERE user_id = ?\");\n            $stmt->execute([$user_id]);\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n        }\n    }\n}\n\n// User class\nclass User {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Register user\n    public function register($data) {\n        try {\n            // Check if username exists\n            $check_stmt = $this->conn->prepare(\"SELECT * FROM users WHERE username = ?\");\n            $check_stmt->execute([$data['username']]);\n            \n            if ($check_stmt->rowCount() > 0) {\n                return false; // Username already exists\n            }\n\n            // Hash password\n            $hashed_password = password_hash($data['password'], PASSWORD_DEFAULT);\n\n            // Insert user\n            $stmt = $this->conn->prepare(\"INSERT INTO users SET \n                username = ?, \n                email = ?, \n                password = ?, \n                address = ?, \n                phone = ?, \n                created_at = NOW()\");\n            $stmt->execute([\n                $data['username'],\n                $data['email'],\n                $hashed_password,\n                $data['address'],\n                $data['phone']\n            ]);\n            \n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Login user\n    public function login($username, $password) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM users WHERE username = ?\");\n            $stmt->execute([$username]);\n            $user = $stmt->fetch(PDO::FETCH_ASSOC);\n\n            if (!$user || !password_verify($password, $user['password'])) {\n                return false;\n            }\n\n            // Start session\n            session_start();\n            $_SESSION['user_id'] = $user['id'];\n            $_SESSION['username'] = $user['username'];\n            \n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Get user by ID\n    public function getUserById($id) {\n        try {\n            $stmt = $this->conn->prepare(\"SELECT * FROM users WHERE id = ?\");\n            $stmt->execute([$id]);\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n        }\n    }\n\n    // Update user\n    public function updateUser($id, $data) {\n        try {\n            $stmt = $this->conn->prepare(\"UPDATE users SET \n                username = ?, \n                email = ?, \n                address = ?, \n                phone = ? WHERE id = ?\");\n            $stmt->execute([\n                $data['username'],\n                $data['email'],\n                $data['address'],\n                $data['phone'],\n                $id\n            ]);\n            \n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    // Delete user\n    public function deleteUser($id) {\n        try {\n            $stmt = $this->conn->prepare(\"DELETE FROM users WHERE id = ?\");\n            $stmt->execute([$id]);\n            \n            session_unset();\n            session_destroy();\n            \n            return true;\n        } catch (PDOException $e) {\n            echo \"Error: \" . $e->getMessage();\n            return false;\n        }\n    }\n}\n\n// Create tables if not exists\ntry {\n    // Products table\n    $conn->exec(\"CREATE TABLE IF NOT EXISTS products (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        name VARCHAR(255) NOT NULL,\n        price DECIMAL(10, 2) NOT NULL,\n        description TEXT,\n        quantity INT NOT NULL,\n        category VARCHAR(255)\n    )\");\n\n    // Orders table\n    $conn->exec(\"CREATE TABLE IF NOT EXISTS orders (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        user_id INT NOT NULL,\n        product_id INT NOT NULL,\n        quantity INT NOT NULL,\n        order_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n        status ENUM('pending', 'completed', 'cancelled') DEFAULT 'pending',\n        payment_method VARCHAR(255)\n    )\");\n\n    // Users table\n    $conn->exec(\"CREATE TABLE IF NOT EXISTS users (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        username VARCHAR(255) UNIQUE NOT NULL,\n        email VARCHAR(255) UNIQUE NOT NULL,\n        password VARCHAR(255) NOT NULL,\n        address TEXT,\n        phone VARCHAR(20),\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    )\");\n} catch (PDOException $e) {\n    echo \"Error creating tables: \" . $e->getMessage();\n}\n\n// Front-end code example (checkout.php)\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Checkout</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <?php\n    // Check if user is logged in\n    session_start();\n    if (!isset($_SESSION['user_id'])) {\n        header(\"Location: login.php\");\n        exit();\n    }\n\n    $order = new Order($conn);\n    $product = new Product($conn);\n\n    if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n        // Process order\n        $data = [\n            'quantity' => $_POST['quantity'],\n            'payment_method' => $_POST['payment_method']\n        ];\n        \n        $user_id = $_SESSION['user_id'];\n        $product_id = $_GET['id'];\n\n        if ($order->processOrder($data, $product_id, $user_id)) {\n            echo \"<div class='alert alert-success'>Order processed successfully!</div>\";\n        } else {\n            echo \"<div class='alert alert-danger'>Error processing order!</div>\";\n        }\n    }\n\n    // Get product details\n    if (isset($_GET['id'])) {\n        $product_details = $product->getProductById($_GET['id']);\n    ?>\n\n    <div class=\"container mt-5\">\n        <h2>Checkout</h2>\n        <form method=\"POST\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">\n            <input type=\"hidden\" name=\"id\" value=\"<?php echo $product_details['id']; ?>\">\n            \n            <div class=\"form-group\">\n                <label>Product:</label>\n                <input type=\"text\" class=\"form-control\" value=\"<?php echo $product_details['name']; ?>\" readonly>\n            </div>\n\n            <div class=\"form-group\">\n                <label>Price:</label>\n                <input type=\"number\" step=\"0.01\" class=\"form-control\" value=\"<?php echo $product_details['price']; ?>\" readonly>\n            </div>\n\n            <div class=\"form-group\">\n                <label>Quantity:</label>\n                <input type=\"number\" min=\"1\" max=\"<?php echo $product_details['quantity']; ?>\" name=\"quantity\" class=\"form-control\" required>\n            </div>\n\n            <div class=\"form-group\">\n                <label>Payment Method:</label>\n                <select name=\"payment_method\" class=\"form-control\" required>\n                    <option value=\"\">Select Payment Method</option>\n                    <option value=\"credit_card\">Credit Card</option>\n                    <option value=\"paypal\">PayPal</option>\n                </select>\n            </div>\n\n            <button type=\"submit\" class=\"btn btn-primary\">Place Order</button>\n        </form>\n    </div>\n\n    <?php } ?>\n\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>\n```"]}
