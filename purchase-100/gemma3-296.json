{"prompt": "Create a purchase functionality using php", "llm_output": "```php\n<?php\n\n// Database Connection (Replace with your actual credentials)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$dbname = \"your_database\";\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n    die();\n}\n\n// Function to handle the purchase process\nfunction handlePurchase($cart, $customer_name, $customer_email, $payment_method) {\n    global $conn;\n\n    // 1. Create Order Record\n    $stmt = $conn->prepare(\"INSERT INTO orders (customer_name, customer_email, order_date, payment_method) VALUES (:customer_name, :customer_email, NOW(), :payment_method)\");\n    $order_id = $stmt->execute([\n        ':customer_name' => $customer_name,\n        ':customer_email' => $customer_email,\n        ':payment_method' => $payment_method\n    ]);\n\n    $order_id = $conn->lastInsertId(); // Get the last inserted ID\n    echo \"Order created with ID: \" . $order_id . \"<br>\";\n\n\n    // 2. Add Order Items to Order Items Table\n    foreach ($cart['items'] as $item_id => $quantity) {\n        $stmt = $conn->prepare(\"INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)\");\n        $stmt->execute([\n            ':order_id' => $order_id,\n            ':product_id' => $item_id,\n            ':quantity' => $quantity\n        ]);\n    }\n\n    // 3. Update Inventory (Simple example - adjust for complex scenarios)\n    foreach ($cart['items'] as $item_id => $quantity) {\n        $stmt = $conn->prepare(\"UPDATE products SET stock = stock - :quantity WHERE id = :product_id\");\n        $stmt->execute([\n            ':product_id' => $item_id,\n            ':quantity' => $quantity\n        ]);\n    }\n\n    // 4. Clear Cart (For demonstration - in a real application, you'd handle this more robustly)\n    $cart['items'] = [];\n    echo \"Cart cleared.\";\n}\n\n// --- Example Usage (Simulated Form Handling) ---\n\n// Assuming you have a form that collects this data.  This is just an example.\n\n// 1. Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n\n    // 2. Validate Form Data (IMPORTANT - Add robust validation here!)\n    $customer_name = htmlspecialchars($_POST[\"customer_name\"]);\n    $customer_email = htmlspecialchars($_POST[\"customer_email\"]);\n    $payment_method = htmlspecialchars($_POST[\"payment_method\"]);\n    $cart = $_POST['cart'];\n\n    if (empty($customer_name) || empty($customer_email) || empty($payment_method)) {\n        echo \"Error: Please fill in all fields.\";\n    } else {\n        // 3. Handle the Purchase\n        handlePurchase($cart, $customer_name, $customer_email, $payment_method);\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Online Store - Purchase</title>\n</head>\n<body>\n\n    <h1>Online Store - Purchase</h1>\n\n    <form method=\"post\">\n        <label for=\"customer_name\">Customer Name:</label>\n        <input type=\"text\" id=\"customer_name\" name=\"customer_name\" value=\"<?php echo isset($customer_name) ? htmlspecialchars($customer_name) : ''; ?>\">\n        <br><br>\n\n        <label for=\"customer_email\">Email:</label>\n        <input type=\"email\" id=\"customer_email\" name=\"customer_email\" value=\"<?php echo isset($customer_email) ? htmlspecialchars($customer_email) : ''; ?>\">\n        <br><br>\n\n        <label for=\"payment_method\">Payment Method:</label>\n        <select id=\"payment_method\" name=\"payment_method\">\n            <option value=\"credit_card\">Credit Card</option>\n            <option value=\"paypal\">PayPal</option>\n            <option value=\"other\">Other</option>\n        </select>\n        <br><br>\n\n\n        <h2>Items in Cart:</h2>\n        <?php\n        //Display cart items\n        if (!empty($cart['items'])) {\n            echo \"<ul>\";\n            foreach ($cart['items'] as $product_id => $quantity) {\n                //Get product name (replace with your database lookup)\n                $product_name = \"Product \" . $product_id; // Replace this with actual product name retrieval\n                echo \"<li>$product_name x $quantity</li>\";\n            }\n            echo \"</ul>\";\n        } else {\n            echo \"<p>Your cart is empty.</p>\";\n        }\n        ?>\n\n\n        <input type=\"submit\" value=\"Place Order\">\n    </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Database Connection:**\n    * Uses PDO (PHP Data Objects) for database interaction.  PDO is generally preferred over older `mysql_*` functions because it's more secure and provides better error handling.\n    * Includes `try...catch` block to gracefully handle database connection errors.\n    * `ATTR_ERRMODE` set to `ERRMODE_EXCEPTION` which throws exceptions on database errors, making debugging easier.\n* **Error Handling:**  The `try...catch` block ensures that if the database connection fails, the script doesn't crash and provides a helpful error message.\n* **`handlePurchase` Function:**\n    * Encapsulates the core purchase logic, making the code more organized and reusable.\n    * Takes the cart data, customer details, and payment method as arguments.\n* **Database Queries (Prepared Statements):**\n    * **Prepared statements** are *crucial* for preventing SQL injection vulnerabilities.  They separate the SQL code from the data, so the data is treated as data, not as part of the SQL query.  This is the *most important* security improvement.\n    * Uses `PDOStatement::execute()` to execute the queries.\n* **Order Items Table:** Added an `order_items` table. This is necessary to link orders to specific products and quantities.\n* **Inventory Management:**  Includes a very basic inventory update. *This is a simplified example*. In a real application, you'd need more sophisticated inventory tracking (e.g., handling backorders, stock alerts, etc.).\n* **Cart Clearing:** Clears the cart after a successful purchase.  Again, a basic implementation; a real application would have a more robust cart management system.\n* **Example Form Handling:**\n    * Simulates form submission.  In a real application, you would handle form submission using `$_GET` or `$_POST`.\n    * **Input Validation:**  Includes *basic* validation to check if the required fields are filled in.  *This is essential* \u2013 you must validate all user input to prevent errors and security vulnerabilities. *Expand this significantly* with more thorough validation (e.g., email format, numeric validation, checking for disallowed characters).\n* **HTML Form:**  Provides a basic HTML form to collect customer data and display the cart contents.\n* **Security:** Uses `htmlspecialchars()` to escape the customer name and email, preventing potential XSS (Cross-Site Scripting) vulnerabilities.  *Never trust user input*.\n\n**To use this code:**\n\n1. **Install a Database:**  You'll need a MySQL database.\n2. **Create Tables:**\n   ```sql\n   CREATE TABLE products (\n       id INT PRIMARY KEY AUTO_INCREMENT,\n       name VARCHAR(255) NOT NULL,\n       stock INT NOT NULL DEFAULT 0\n   );\n\n   CREATE TABLE orders (\n       id INT PRIMARY KEY AUTO_INCREMENT,\n       customer_name VARCHAR(255) NOT NULL,\n       customer_email VARCHAR(255) NOT NULL,\n       order_date DATETIME NOT NULL,\n       payment_method VARCHAR(50) NOT NULL\n   );\n\n   CREATE TABLE order_items (\n       id INT PRIMARY KEY AUTO_INCREMENT,\n       order_id INT NOT NULL,\n       product_id INT NOT NULL,\n       quantity INT NOT NULL,\n       FOREIGN KEY (order_id) REFERENCES orders(id),\n       FOREIGN KEY (product_id) REFERENCES products(id)\n   );\n   ```\n3. **Populate the Database:** Add some products to the `products` table.\n4. **Update the Database Credentials:**  Replace the placeholder database credentials (`$host`, `$username`, `$password`, `$dbname`) with your actual database credentials.\n5. **Run the PHP Code:**  Save the code as a `.php` file (e.g., `purchase.php`) and run it through a web server (e.g., Apache with PHP).\n\n**Important Considerations and Next Steps:**\n\n* **Production-Ready Code:** This is a simplified example for demonstration purposes.  A real-world application would require significantly more robust error handling, security measures, logging, and transaction management.\n* **Session Management:** Use sessions to track the user's cart and other relevant data.\n* **Cart Management:** Implement a proper cart management system that can handle adding, removing, and updating items in the cart.\n* **Payment Gateway Integration:** Integrate with a payment gateway (e.g., PayPal, Stripe) to securely process payments. *Never store credit card details directly in your database*.\n* **Order Confirmation:** Send an email confirmation to the customer after the order is placed.\n* **Testing:** Thoroughly test the application, including testing for security vulnerabilities.\n* **Logging:** Implement logging to track all transactions and errors.\n* **Database Transactions:** Use database transactions to ensure that all changes are made atomically (either all changes are committed, or none are).  This is crucial for data integrity.\n* **User Authentication:** Add user authentication to allow customers to create accounts and track their orders.\n\nThis comprehensive response provides a starting point for building an online purchase functionality. Remember to prioritize security, data integrity, and user experience throughout the development process.  The use of prepared statements is *absolutely critical* for security.\n", "code_blocks": ["```php\n<?php\n\n// Database Connection (Replace with your actual credentials)\n$host = \"localhost\";\n$username = \"your_username\";\n$password = \"your_password\";\n$dbname = \"your_database\";\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n    die();\n}\n\n// Function to handle the purchase process\nfunction handlePurchase($cart, $customer_name, $customer_email, $payment_method) {\n    global $conn;\n\n    // 1. Create Order Record\n    $stmt = $conn->prepare(\"INSERT INTO orders (customer_name, customer_email, order_date, payment_method) VALUES (:customer_name, :customer_email, NOW(), :payment_method)\");\n    $order_id = $stmt->execute([\n        ':customer_name' => $customer_name,\n        ':customer_email' => $customer_email,\n        ':payment_method' => $payment_method\n    ]);\n\n    $order_id = $conn->lastInsertId(); // Get the last inserted ID\n    echo \"Order created with ID: \" . $order_id . \"<br>\";\n\n\n    // 2. Add Order Items to Order Items Table\n    foreach ($cart['items'] as $item_id => $quantity) {\n        $stmt = $conn->prepare(\"INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)\");\n        $stmt->execute([\n            ':order_id' => $order_id,\n            ':product_id' => $item_id,\n            ':quantity' => $quantity\n        ]);\n    }\n\n    // 3. Update Inventory (Simple example - adjust for complex scenarios)\n    foreach ($cart['items'] as $item_id => $quantity) {\n        $stmt = $conn->prepare(\"UPDATE products SET stock = stock - :quantity WHERE id = :product_id\");\n        $stmt->execute([\n            ':product_id' => $item_id,\n            ':quantity' => $quantity\n        ]);\n    }\n\n    // 4. Clear Cart (For demonstration - in a real application, you'd handle this more robustly)\n    $cart['items'] = [];\n    echo \"Cart cleared.\";\n}\n\n// --- Example Usage (Simulated Form Handling) ---\n\n// Assuming you have a form that collects this data.  This is just an example.\n\n// 1. Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n\n    // 2. Validate Form Data (IMPORTANT - Add robust validation here!)\n    $customer_name = htmlspecialchars($_POST[\"customer_name\"]);\n    $customer_email = htmlspecialchars($_POST[\"customer_email\"]);\n    $payment_method = htmlspecialchars($_POST[\"payment_method\"]);\n    $cart = $_POST['cart'];\n\n    if (empty($customer_name) || empty($customer_email) || empty($payment_method)) {\n        echo \"Error: Please fill in all fields.\";\n    } else {\n        // 3. Handle the Purchase\n        handlePurchase($cart, $customer_name, $customer_email, $payment_method);\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Online Store - Purchase</title>\n</head>\n<body>\n\n    <h1>Online Store - Purchase</h1>\n\n    <form method=\"post\">\n        <label for=\"customer_name\">Customer Name:</label>\n        <input type=\"text\" id=\"customer_name\" name=\"customer_name\" value=\"<?php echo isset($customer_name) ? htmlspecialchars($customer_name) : ''; ?>\">\n        <br><br>\n\n        <label for=\"customer_email\">Email:</label>\n        <input type=\"email\" id=\"customer_email\" name=\"customer_email\" value=\"<?php echo isset($customer_email) ? htmlspecialchars($customer_email) : ''; ?>\">\n        <br><br>\n\n        <label for=\"payment_method\">Payment Method:</label>\n        <select id=\"payment_method\" name=\"payment_method\">\n            <option value=\"credit_card\">Credit Card</option>\n            <option value=\"paypal\">PayPal</option>\n            <option value=\"other\">Other</option>\n        </select>\n        <br><br>\n\n\n        <h2>Items in Cart:</h2>\n        <?php\n        //Display cart items\n        if (!empty($cart['items'])) {\n            echo \"<ul>\";\n            foreach ($cart['items'] as $product_id => $quantity) {\n                //Get product name (replace with your database lookup)\n                $product_name = \"Product \" . $product_id; // Replace this with actual product name retrieval\n                echo \"<li>$product_name x $quantity</li>\";\n            }\n            echo \"</ul>\";\n        } else {\n            echo \"<p>Your cart is empty.</p>\";\n        }\n        ?>\n\n\n        <input type=\"submit\" value=\"Place Order\">\n    </form>\n\n</body>\n</html>\n```"]}
