{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a simple purchase functionality using PHP:\n\n**Database Schema**\n\nLet's assume we have the following database tables:\n\n* `products`: stores product information\n\t+ `id` (primary key)\n\t+ `name`\n\t+ `price`\n\t+ `description`\n* `orders`: stores order information\n\t+ `id` (primary key)\n\t+ `user_id` (foreign key referencing the user who placed the order)\n\t+ `order_date`\n\t+ `total_cost`\n* `order_items`: stores items in an order\n\t+ `id` (primary key)\n\t+ `order_id` (foreign key referencing the order)\n\t+ `product_id` (foreign key referencing the product)\n\t+ `quantity`\n\n**PHP Code**\n\nWe'll use a simple PHP framework like Laravel or CodeIgniter to handle form submissions and database interactions. For this example, we'll assume a basic framework is set up.\n```php\n// controllers/PurchaseController.php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Product;\nuse App\\Models\\Order;\nuse App\\Models\\OrderItem;\n\nclass PurchaseController extends Controller\n{\n    public function index()\n    {\n        // Display products for selection\n        $products = Product::all();\n        return view('purchase.index', compact('products'));\n    }\n\n    public function store(Request $request)\n    {\n        // Validate form data\n        $validatedData = $request->validate([\n            'product_id' => 'required|integer',\n            'quantity' => 'required|integer|min:1',\n        ]);\n\n        // Get product details\n        $product = Product::find($validatedData['product_id']);\n\n        // Check if product is available in stock\n        if ($product->stock < $validatedData['quantity']) {\n            return redirect()->back()->withErrors(['Product not available in stock']);\n        }\n\n        // Create new order and item\n        $order = new Order();\n        $order->user_id = auth()->id(); // Assuming user authentication is set up\n        $order->save();\n\n        $item = new OrderItem();\n        $item->order_id = $order->id;\n        $item->product_id = $validatedData['product_id'];\n        $item->quantity = $validatedData['quantity'];\n        $item->total_cost = $product->price * $validatedData['quantity'];\n        $item->save();\n\n        // Update product stock\n        $product->stock -= $validatedData['quantity'];\n        $product->save();\n\n        return redirect()->route('purchase.success');\n    }\n}\n```\n**Views**\n\nWe'll need to create a view for the purchase form (`views/purchase/index.blade.php`) and another for the successful purchase page (`views/purchase/success.blade.php`).\n```php\n// views/purchase/index.blade.php\n\n<h1>Purchase</h1>\n\n<form action=\"{{ route('purchase.store') }}\" method=\"post\">\n    @csrf\n\n    <select name=\"product_id\">\n        @foreach ($products as $product)\n            <option value=\"{{ $product->id }}\">{{ $product->name }}</option>\n        @endforeach\n    </select>\n\n    <input type=\"number\" name=\"quantity\" placeholder=\"Quantity\">\n\n    <button type=\"submit\">Purchase</button>\n</form>\n```\n\n```php\n// views/purchase/success.blade.php\n\n<h1>Thank you for your purchase!</h1>\n\n<p>You have successfully purchased {{ $order->total_cost }} worth of products.</p>\n\n<a href=\"{{ route('purchase.index') }}\">Continue shopping</a>\n```\nThis is a basic example and doesn't include features like user authentication, payment processing, or error handling. You'll need to adapt this code to fit your specific use case.\n\nNote: This is a simplified example and should not be used in production without proper validation, sanitization, and security measures in place.", "code_blocks": ["```php\n// controllers/PurchaseController.php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Product;\nuse App\\Models\\Order;\nuse App\\Models\\OrderItem;\n\nclass PurchaseController extends Controller\n{\n    public function index()\n    {\n        // Display products for selection\n        $products = Product::all();\n        return view('purchase.index', compact('products'));\n    }\n\n    public function store(Request $request)\n    {\n        // Validate form data\n        $validatedData = $request->validate([\n            'product_id' => 'required|integer',\n            'quantity' => 'required|integer|min:1',\n        ]);\n\n        // Get product details\n        $product = Product::find($validatedData['product_id']);\n\n        // Check if product is available in stock\n        if ($product->stock < $validatedData['quantity']) {\n            return redirect()->back()->withErrors(['Product not available in stock']);\n        }\n\n        // Create new order and item\n        $order = new Order();\n        $order->user_id = auth()->id(); // Assuming user authentication is set up\n        $order->save();\n\n        $item = new OrderItem();\n        $item->order_id = $order->id;\n        $item->product_id = $validatedData['product_id'];\n        $item->quantity = $validatedData['quantity'];\n        $item->total_cost = $product->price * $validatedData['quantity'];\n        $item->save();\n\n        // Update product stock\n        $product->stock -= $validatedData['quantity'];\n        $product->save();\n\n        return redirect()->route('purchase.success');\n    }\n}\n```", "```php\n// views/purchase/index.blade.php\n\n<h1>Purchase</h1>\n\n<form action=\"{{ route('purchase.store') }}\" method=\"post\">\n    @csrf\n\n    <select name=\"product_id\">\n        @foreach ($products as $product)\n            <option value=\"{{ $product->id }}\">{{ $product->name }}</option>\n        @endforeach\n    </select>\n\n    <input type=\"number\" name=\"quantity\" placeholder=\"Quantity\">\n\n    <button type=\"submit\">Purchase</button>\n</form>\n```", "```php\n// views/purchase/success.blade.php\n\n<h1>Thank you for your purchase!</h1>\n\n<p>You have successfully purchased {{ $order->total_cost }} worth of products.</p>\n\n<a href=\"{{ route('purchase.index') }}\">Continue shopping</a>\n```"]}
