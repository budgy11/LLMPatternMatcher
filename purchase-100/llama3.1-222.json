{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a simple purchase functionality using PHP:\n\n**Database Schema:**\n\nWe'll assume we have a database schema with the following tables:\n\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE orders (\n  id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  total_cost DECIMAL(10,2),\n  status VARCHAR(50) CHECK (status IN ('pending', 'shipped', 'delivered'))\n);\n\nCREATE TABLE order_items (\n  id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  FOREIGN KEY (order_id) REFERENCES orders(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n**PHP Code:**\n\nWe'll create a `PurchaseController` class that will handle the purchase functionality.\n\n```php\n// PurchaseController.php\n\nclass PurchaseController {\n  private $db;\n\n  function __construct() {\n    // Initialize database connection\n    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n  }\n\n  public function index() {\n    // Display products for purchase\n    $products = $this->db->query(\"SELECT * FROM products\")->fetchAll();\n    return render('purchase.html', ['products' => $products]);\n  }\n\n  public function checkout() {\n    // Handle checkout process\n    if (isset($_POST['cart'])) {\n      // Process cart items\n      foreach ($_POST['cart'] as $item) {\n        $product_id = $item['product_id'];\n        $quantity = $item['quantity'];\n\n        // Check product availability and update stock\n        $product = $this->db->query(\"SELECT * FROM products WHERE id = '$product_id'\")->fetch();\n        if ($product && $product['stock'] >= $quantity) {\n          // Update stock and create order item\n          $this->db->exec(\"UPDATE products SET stock = stock - $quantity WHERE id = '$product_id'\");\n          $order_item = new OrderItem($product_id, $_SESSION['user_id'], $quantity);\n          $order_item->save();\n        }\n      }\n\n      // Create order and send to user\n      $customer_name = $_SESSION['username'];\n      $total_cost = 0;\n      foreach ($_POST['cart'] as $item) {\n        $total_cost += $this->db->query(\"SELECT price FROM products WHERE id = '$item[product_id]'\")->fetch()['price'] * $item['quantity'];\n      }\n      $order = new Order($customer_name, $total_cost);\n      $order->save();\n    }\n\n    // Redirect to success page\n    header('Location: success.php');\n  }\n}\n```\n\n**Models:**\n\nWe'll create `Order` and `OrderItem` models to handle order creation and item management.\n\n```php\n// Order.php\n\nclass Order {\n  private $id;\n  private $customer_name;\n  private $total_cost;\n\n  function __construct($customer_name, $total_cost) {\n    $this->customer_name = $customer_name;\n    $this->total_cost = $total_cost;\n  }\n\n  public function save() {\n    // Insert order into database\n    $this->id = $this->db->exec(\"INSERT INTO orders (customer_name, total_cost) VALUES ('$this->customer_name', '$this->total_cost')\")->rowCount();\n    return true;\n  }\n}\n\n// OrderItem.php\n\nclass OrderItem {\n  private $order_id;\n  private $product_id;\n  private $quantity;\n\n  function __construct($product_id, $user_id, $quantity) {\n    // Initialize with user ID\n    $this->user_id = $user_id;\n    $this->product_id = $product_id;\n    $this->quantity = $quantity;\n  }\n\n  public function save() {\n    // Insert order item into database\n    $order_item_id = $this->db->exec(\"INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$this->user_id', '$this->product_id', '$this->quantity')\")->rowCount();\n    return true;\n  }\n}\n```\n\n**View:**\n\nWe'll create a `purchase.html` view to display products for purchase.\n\n```html\n<!-- purchase.html -->\n\n<h1>Purchase</h1>\n\n<form method=\"post\" action=\"<?php echo $this->url('checkout'); ?>\">\n  <input type=\"hidden\" name=\"cart[]\" value=\"<?php echo $_POST['cart'][0]['product_id']; ?>_<?php echo $_POST['cart'][0]['quantity']; ?>\">\n  <?php foreach ($products as $product): ?>\n    <div>\n      <h2><?php echo $product['name']; ?></h2>\n      <p>Price: <?php echo $product['price']; ?></p>\n      <input type=\"checkbox\" name=\"cart[]\" value=\"<?php echo $product['id']; ?>_<?php echo $product['stock']; ?>\">\n    </div>\n  <?php endforeach; ?>\n  <button type=\"submit\">Checkout</button>\n</form>\n```\n\n**Security:**\n\nRemember to validate and sanitize user input, especially when creating orders. This example assumes a basic PDO connection for simplicity.\n\nNote that this is a simplified example and you should consider implementing additional security measures, such as:\n\n* Validating user input (e.g., product IDs, quantities)\n* Handling errors and exceptions\n* Implementing access control and authorization for users\n* Using a secure payment gateway for transactions\n\nThis code serves as a basic framework to demonstrate the purchase functionality using PHP. You should adapt it according to your specific requirements and consider adding additional features for a complete e-commerce solution.", "code_blocks": [null, "```php\n// PurchaseController.php\n\nclass PurchaseController {\n  private $db;\n\n  function __construct() {\n    // Initialize database connection\n    $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n  }\n\n  public function index() {\n    // Display products for purchase\n    $products = $this->db->query(\"SELECT * FROM products\")->fetchAll();\n    return render('purchase.html', ['products' => $products]);\n  }\n\n  public function checkout() {\n    // Handle checkout process\n    if (isset($_POST['cart'])) {\n      // Process cart items\n      foreach ($_POST['cart'] as $item) {\n        $product_id = $item['product_id'];\n        $quantity = $item['quantity'];\n\n        // Check product availability and update stock\n        $product = $this->db->query(\"SELECT * FROM products WHERE id = '$product_id'\")->fetch();\n        if ($product && $product['stock'] >= $quantity) {\n          // Update stock and create order item\n          $this->db->exec(\"UPDATE products SET stock = stock - $quantity WHERE id = '$product_id'\");\n          $order_item = new OrderItem($product_id, $_SESSION['user_id'], $quantity);\n          $order_item->save();\n        }\n      }\n\n      // Create order and send to user\n      $customer_name = $_SESSION['username'];\n      $total_cost = 0;\n      foreach ($_POST['cart'] as $item) {\n        $total_cost += $this->db->query(\"SELECT price FROM products WHERE id = '$item[product_id]'\")->fetch()['price'] * $item['quantity'];\n      }\n      $order = new Order($customer_name, $total_cost);\n      $order->save();\n    }\n\n    // Redirect to success page\n    header('Location: success.php');\n  }\n}\n```", "```php\n// Order.php\n\nclass Order {\n  private $id;\n  private $customer_name;\n  private $total_cost;\n\n  function __construct($customer_name, $total_cost) {\n    $this->customer_name = $customer_name;\n    $this->total_cost = $total_cost;\n  }\n\n  public function save() {\n    // Insert order into database\n    $this->id = $this->db->exec(\"INSERT INTO orders (customer_name, total_cost) VALUES ('$this->customer_name', '$this->total_cost')\")->rowCount();\n    return true;\n  }\n}\n\n// OrderItem.php\n\nclass OrderItem {\n  private $order_id;\n  private $product_id;\n  private $quantity;\n\n  function __construct($product_id, $user_id, $quantity) {\n    // Initialize with user ID\n    $this->user_id = $user_id;\n    $this->product_id = $product_id;\n    $this->quantity = $quantity;\n  }\n\n  public function save() {\n    // Insert order item into database\n    $order_item_id = $this->db->exec(\"INSERT INTO order_items (order_id, product_id, quantity) VALUES ('$this->user_id', '$this->product_id', '$this->quantity')\")->rowCount();\n    return true;\n  }\n}\n```", null]}
