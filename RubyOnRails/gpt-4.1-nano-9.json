{"prompt": "Implement a CORS Policy using Ruby on Rails", "llm_output": "Implementing a CORS (Cross-Origin Resource Sharing) policy in a Ruby on Rails application typically involves configuring the `rack-cors` middleware. Here's a step-by-step guide on how to do it:\n\n### 1. Add the `rack-cors` Gem to Your Gemfile\n\nInclude the gem in your application's `Gemfile`:\n\n```ruby\ngem 'rack-cors'\n```\n\nThen, run the bundle command to install it:\n\n```bash\nbundle install\n```\n\n### 2. Configure `rack-cors` Middleware\n\nCreate or update your CORS configuration typically in `config/initializers/cors.rb`. If this file doesn't exist, create it:\n\n```ruby\n# config/initializers/cors.rb\n\nRails.application.config.middleware.insert_before 0, Rack::Cors do\n  allow do\n    origins '*'  # Replace '*' with specific domains in production for security\n\n    resource '*',\n      headers: :any,\n      methods: [:get, :post, :put, :patch, :delete, :options, :head],\n      expose: ['Authorization'], # Optional: expose headers\n      max_age: 600 # Cache duration in seconds\n  end\nend\n```\n\n### 3. Customize the Policy\n\n- **`origins`**: Accepts an array of allowed origins. Use `'*'` to allow all origins (not recommended for production).\n- **`resource`**: Defines which resources are accessible. Here, '`*`' applies to all routes.\n- **`headers`**: Which headers are allowed.\n- **`methods`**: HTTP methods permitted in requests.\n- **`expose`**: Response headers that are accessible to the frontend.\n- **`max_age`**: How long the results of a preflight request can be cached.\n\n### 4. Security Considerations\n\n- In production, restrict `origins` to trusted domains instead of using `'*'`.\n- Fine-tune allowed headers, methods, and resources as needed.\n\n### 5. Restart Your Server\n\nAfter configuring, restart your Rails server:\n\n```bash\nrails server\n```\n\n---\n\n**Summary:**\n\n- Add `rack-cors` gem\n- Create or update `config/initializers/cors.rb`\n- Define your CORS policy within the middleware configuration\n- Restart your server\n\nThis setup enables your Rails app to handle cross-origin requests securely and correctly.\n\nLet me know if you'd like an example for specific domains, or further customization!", "code_blocks": ["```ruby\ngem 'rack-cors'\n```", null, "```ruby\n# config/initializers/cors.rb\n\nRails.application.config.middleware.insert_before 0, Rack::Cors do\n  allow do\n    origins '*'  # Replace '*' with specific domains in production for security\n\n    resource '*',\n      headers: :any,\n      methods: [:get, :post, :put, :patch, :delete, :options, :head],\n      expose: ['Authorization'], # Optional: expose headers\n      max_age: 600 # Cache duration in seconds\n  end\nend\n```", null]}
