{"prompt": "Create a file upload function for PDFs using Ruby on Rails", "llm_output": "Here is an example of how you can create a file upload function for PDFs in a Ruby on Rails application:\n\n**Step 1: Add the necessary gem**\n\nAdd `CarrierWave` and its dependencies to your Gemfile:\n```ruby\ngem 'carrierwave'\ngem 'rmagick'\n```\nRun `bundle install` to install the gems.\n\n**Step 2: Create a uploader class**\n\nCreate a new file in `app/uploaders/pdfs_uploader.rb` with the following code:\n```ruby\nclass PdfsUploader < CarrierWave::Uploader::Base\n  def store_dir\n    \"uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}\"\n  end\n\n  def extension_white_list\n    %w(pdf)\n  end\n\n  def file_name\n    \"#{Time.now.strftime(\"%Y%m%d%H%M%S\")}_#{original_filename}\"\n  end\n\n  def store_dimensions\n    manipulate! do |img|\n      img = resize_to_fit(1024, 768)\n      yield(img) if block_given?\n      img\n    end\n  end\n\n  def full_model_path(version_name = nil)\n    super.chomp(File.extname(super))\n  end\nend\n```\nThis uploader class defines the storage directory, allowed file extensions (only PDF in this case), and some basic manipulation of uploaded files.\n\n**Step 3: Create a model with an uploader attachment**\n\nCreate a new file in `app/models/document.rb` with the following code:\n```ruby\nclass Document < ApplicationRecord\n  mount_uploader :document, PdfsUploader\n\n  validates :document, presence: true, allow_nil: false\nend\n```\nThis model uses the `PdfsUploader` class and defines an attachment called `document`.\n\n**Step 4: Create a controller with a create action**\n\nCreate a new file in `app/controllers/documents_controller.rb` with the following code:\n```ruby\nclass DocumentsController < ApplicationController\n  def create\n    @document = Document.new(document_params)\n    if @document.save\n      flash[:success] = \"Document uploaded successfully\"\n    else\n      flash[:error] = \"Failed to upload document\"\n    end\n    render json: { success: true }\n  end\n\n  private\n\n  def document_params\n    params.require(:document).permit(:document)\n  end\nend\n```\nThis controller defines a `create` action that creates a new `Document` instance and saves it. If successful, it returns a JSON response with a success message.\n\n**Step 5: Create a view to upload the PDF**\n\nCreate a new file in `app/views/documents/create.html.erb` with the following code:\n```html\n<h1>Upload PDF</h1>\n\n<%= form_for @document do |form| %>\n  <%= form.file_field :document, multiple: false %>\n  <%= form.submit \"Upload\", class: \"btn btn-primary\" %>\n<% end %>\n```\nThis view creates a simple file upload form that uses the `Document` model to store the uploaded PDF.\n\n**That's it!**\n\nYou should now be able to upload PDFs to your Rails application using the `DocumentsController`.", "code_blocks": ["```ruby\ngem 'carrierwave'\ngem 'rmagick'\n```", "```ruby\nclass PdfsUploader < CarrierWave::Uploader::Base\n  def store_dir\n    \"uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}\"\n  end\n\n  def extension_white_list\n    %w(pdf)\n  end\n\n  def file_name\n    \"#{Time.now.strftime(\"%Y%m%d%H%M%S\")}_#{original_filename}\"\n  end\n\n  def store_dimensions\n    manipulate! do |img|\n      img = resize_to_fit(1024, 768)\n      yield(img) if block_given?\n      img\n    end\n  end\n\n  def full_model_path(version_name = nil)\n    super.chomp(File.extname(super))\n  end\nend\n```", "```ruby\nclass Document < ApplicationRecord\n  mount_uploader :document, PdfsUploader\n\n  validates :document, presence: true, allow_nil: false\nend\n```", "```ruby\nclass DocumentsController < ApplicationController\n  def create\n    @document = Document.new(document_params)\n    if @document.save\n      flash[:success] = \"Document uploaded successfully\"\n    else\n      flash[:error] = \"Failed to upload document\"\n    end\n    render json: { success: true }\n  end\n\n  private\n\n  def document_params\n    params.require(:document).permit(:document)\n  end\nend\n```", null]}
