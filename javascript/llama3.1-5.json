{"prompt": "Create a file upload function for PDFs using javascript", "llm_output": "**File Upload Function for PDFs using JavaScript**\n=====================================================\n\nThis is an example of a simple file upload function for PDFs using JavaScript, HTML, and the File API. We'll use the `FormData` object to send the uploaded file to a server.\n\n**HTML**\n--------\n\n```html\n<!-- Create a form with a file input -->\n<form id=\"file-upload-form\">\n  <input type=\"file\" id=\"pdf-file-input\" accept=\".pdf\">\n  <button id=\"upload-button\">Upload PDF</button>\n</form>\n```\n\n**JavaScript**\n-------------\n\n```javascript\n// Get the form and file input elements\nconst form = document.getElementById('file-upload-form');\nconst pdfInput = document.getElementById('pdf-file-input');\n\n// Add an event listener to the upload button\nform.addEventListener('submit', async (e) => {\n  e.preventDefault();\n\n  // Check if a PDF was selected\n  if (!pdfInput.files.length) {\n    alert('Please select a PDF file.');\n    return;\n  }\n\n  // Get the uploaded file\n  const file = pdfInput.files[0];\n\n  // Create a new FormData object\n  const formData = new FormData();\n  formData.append('file', file);\n\n  try {\n    // Send the form data to the server using Fetch API\n    const response = await fetch('/upload-pdf', {\n      method: 'POST',\n      body: formData,\n    });\n\n    if (response.ok) {\n      alert('PDF uploaded successfully!');\n    } else {\n      console.error(response.statusText);\n    }\n  } catch (error) {\n    console.error(error);\n  }\n});\n```\n\n**Server-side Code**\n------------------\n\nFor the server-side code, you'll need to set up a route to handle the file upload. Here's an example using Node.js and Express:\n\n```javascript\nconst express = require('express');\nconst multer = require('multer');\n\nconst app = express();\nconst upload = multer({ dest: './uploads/' });\n\napp.post('/upload-pdf', upload.single('file'), (req, res) => {\n  try {\n    // Save the uploaded file to a database or storage service\n    const file = req.file;\n    console.log(`PDF uploaded: ${file.originalname}`);\n\n    res.status(201).send({ message: 'PDF uploaded successfully!' });\n  } catch (error) {\n    console.error(error);\n    res.status(500).send({ message: 'Error uploading PDF' });\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});\n```\n\n**Example Use Case**\n-------------------\n\n1. Open the HTML file in a web browser.\n2. Select a PDF file using the file input element.\n3. Click the \"Upload PDF\" button to send the file to the server.\n4. On the server-side, handle the uploaded file by saving it to a database or storage service.\n\nNote: This example uses `multer` as a middleware to handle multipart/form-data requests. Make sure to install it using npm or yarn: `npm install multer`.", "code_blocks": [null, null, null]}
