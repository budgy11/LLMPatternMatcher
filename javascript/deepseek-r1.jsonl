{"prompt": "Create a session cookie using javascript", "llm_output": "\n\nTo create a session cookie using JavaScript, you can follow these steps:\n\n### Step 1: Create HTML Form\nFirst, create an HTML form with a submit button and some input fields. For example:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Session Cookie Example</title>\n</head>\n<body>\n    <form id=\"loginForm\">\n        <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n        <input type=\"password\" id=\"password\" placeholder=\"Enter your password\">\n        <button type=\"submit\">Login</button>\n    </form>\n\n    <p id=\"sessionCookie\"></p>\n\n    <script>\n        // JavaScript code will go here\n    </script>\n</body>\n</html>\n```\n\n### Step 2: Create Session Cookie Function\n\nNow, add the following JavaScript code to handle form submission and create a session cookie:\n\n```javascript\ndocument.getElementById('loginForm').addEventListener('submit', function(e) {\n    e.preventDefault();\n    const username = document.getElementById('username').value;\n    const password = document.getElementById('password').value;\n\n    // Generate unique session ID (e.g., using current timestamp)\n    const sessionId = Date.now().toString();\n\n    // Create session cookie\n    const cookie = 'session='+sessionId+'; Path=/; Secure=true; HttpOnly=true';\n\n    // Save cookie to browser\n    navigator.cookieStorage.set(cookie);\n\n    alert('Login successful! Session ID: ' + sessionId);\n});\n```\n\n### Explanation\n\n1. **Form Submission Handler**:\n   - The `submit` event listener prevents the default form submission behavior.\n\n2. **Session ID Generation**:\n   - A unique session ID is generated using `Date.now()` to ensure each session has a different ID.\n\n3. **Cookie Creation**:\n   - The cookie string is created with the format `'session=ID'`.\n   - `Path=/` ensures cookies are sent to the root URL path.\n   - `Secure=true` (only available in HTTPS) restricts sending cookies to the same user.\n   - `HttpOnly=true` prevents cross-site request forgery (CSRF) attacks.\n\n4. **Cookie Storage**:\n   - The `navigator.cookieStorage.set(cookie)` method saves the cookie into the browser's storage.\n\n5. **Alert Message**:\n   - An alert message displays the generated session ID to the user.\n\n### How to Use This\n\n1. Save this code in your project.\n2. Open the HTML file in a web browser.\n3. Enter credentials and click \"Login\".\n4. You should see an alert with your generated session ID.\n\nThis example demonstrates how to create a simple session cookie for a login form. The generated session ID can be used to persist user sessions across multiple requests or cookies.", "code_blocks": [null, null]}
{"prompt": "Create a Content Security Policy that allows S3 bucket content using javascript", "llm_output": "\n\nHere's an example of a Content Security Policy (CSP) configuration that allows access to an S3 bucket using JavaScript:\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>cf manifest</key>\n    <integer>1</integer>\n    \n    <!-- Origin policies -->\n    <dict>\n        <key>origin</key>\n        <dict>\n            <!-- Bucket name and region -->\n            <string>S3_BUCKET_NAME</string>\n            <!-- S3 bucket region. -->\n            <string>s3://<current_region></current_region> -->\n            \n            <!-- Referrer policy -->\n            <dict>\n                <key>referrer</key>\n                <dict>\n                    <key>max-age</key>\n                    <integer>-1</integer>\n                    \n                    <!-- S3 bucket domain restriction -->\n                    <string>https://<s3_bucket_name>.<current_region>.s3.amazonaws.com</string>\n                </dict>\n            </dict>\n        </dict>\n\n    <!-- CSP features -->\n    <dict>\n        <key>features</key>\n        <dict>\n            <key>script-src</key>\n            <dict>\n                <key>allowed_origins</key>\n                <dict>\n                    <key>self</key>\n                    <true/>\n                    \n                    <key>unsafe-inline</key>\n                    <false/>\n                </dict>\n            </dict>\n\n            <key>mode</key>\n            <string>Relaxed</string>\n        </dict>\n\n        <!-- Allow allowed methods -->\n        <dict>\n            <key>method</key>\n            <string>GET</string>\n        </dict>\n\n        <!-- Object types -->\n        <dict>\n            <key>obj-type</key>\n            <list>\n                <string>application/pdf</string>\n                <string>image/png</string>\n                <string>video/mp4</string>\n                <!-- Add more object types as needed -->\n            </list>\n        </dict>\n\n        <!-- Mechanisms -->\n        <dict>\n            <key>mechanism</key>\n            <dict>\n                <key>inline-blocking</key>\n                <false/>\n                \n                <key>origin-blocking</key>\n                <true/>\n                \n                <key>script-src-restrict</key>\n                <true/>\n                <dict>\n                    <key>script-src</key>\n                    <dict>\n                        <string>S3 scripts:https://<s3_bucket_name>.<current_region>.s3.amazonaws.com/some script path</string>\n                    </dict>\n                </dict>\n            </dict>\n        </dict>\n\n        <!-- CSP IDL -->\n        <dict>\n            <key>csp-features</key>\n            <list>\n                <string>script-src</string>\n                <string>origins</string>\n                <string>referrers</string>\n                <string>object-src</string>\n                <string>frame-src</string>\n                <string>pixel-src</string>\n                <string>style-src</string>\n            </list>\n        </dict>\n\n        <!-- CSP version -->\n        <dict>\n            <key>csp-version</key>\n            <integer>3</integer>\n        </dict>\n    </dict>\n\n    <!-- Content Security Policy IDL -->\n    <dict>\n        <key>csp-idl</key>\n        <string>s3://<s3_bucket_name><current_region>.s3.amazonaws.com/csp.idl</string>\n    </dict>\n</dict>\n```\n\n### Explanation:\n\n1. **Origin Policies**:\n   - The `origin` key specifies the bucket name and region.\n   - The `referrer` policy restricts access based on the domain of the referring site.\n\n2. **CSP Features**:\n   - `script-src`: Allows scripts from specific origins or paths.\n   - `mode`: \"Relaxed\" provides lenient security measures.\n\n3. **Allowed Methods**: Typically set to `\"GET\"` for file serving.\n\n4. **Object Types**: Lists the types of objects (files) that are allowed to be accessed.\n\n5. **Mechanisms**: Includes origin blocking, script-src restriction, and other CSP mechanisms.\n\n6. **CSP IDL**: Specifies where the CSP IDL is located in S3.\n\n### Instructions:\n\n1. Replace `<s3_bucket_name>` and `<current_region>` with your actual bucket name and region.\n2. Create a manifest file in an `html` or `js` directory (depending on whether you're targeting HTML or JavaScript).\n3. Place the manifest file at:\n   ```\n   assets/csp.idl\n   ```\n4. Apply the policy to all domains globally, or restrict it to specific regions using the `origin` mechanism.\n\n### Important Notes:\n\n- This CSP configuration allows access to S3 buckets through web browsers and does not grant direct file system access.\n- To enable functionality for JavaScript code, you'll need to integrate with third-party tools like:\n  - **AWS AMI Manager (ABM)**: For managing Amazon Linux containers in S3 buckets.\n  - **Amazon S3 Transfer API**: For transferring files from S3 to other locations securely.\n  - **CORS**: For allowing cross-origin requests.\n\n- Regularly review and update the CSP as your application's requirements evolve.", "code_blocks": [null]}
{"prompt": "Create a forgot password function using javascript", "llm_output": "\n\nHere's an example of how to create a \"Forgot Password\" function using JavaScript:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Forgot Password</title>\n    <style>\n        .forgot-password-form {\n            font-family: Arial, sans-serif;\n            max-width: 400px;\n            margin: 20px auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n\n        input {\n            width: 100%;\n            padding: 8px;\n            margin: 5px 0;\n            box-sizing: border-box;\n        }\n\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n<body>\n    <form class=\"forgot-password-form\">\n        <input type=\"email\" placeholder=\"Enter your email address\" id=\"emailInput\" required>\n        <button type=\"submit\">Forgot Password?</button>\n    </form>\n\n    <script>\n        const emailInput = document.getElementById('emailInput');\n        const button = document.querySelector('button');\n\n        button.addEventListener('click', function() {\n            // In a real implementation, you would send this email to your email service provider\n            console.log('Password reset page will be sent to: ', emailInput.value);\n            \n            // You can also add verification steps here if required by your email service provider\n            // For example:\n            // - Send a confirmation link to the user's inbox\n            // - Verify the user clicks on the confirmation link\n\n            alert('Email has been entered. A password reset page will be sent to you.');\n        });\n\n        // Prevent default form submission\n        button.addEventListener('click', function(e) {\n            e.preventDefault();\n        });\n    </script>\n</body>\n</html>\n```\n\nThis code creates a simple form that:\n\n1. Asks the user for their email address\n2. Clicking the \"Forgot Password?\" button sends the email address to your system (in this example, it just logs to the console and shows an alert)\n3. The email is displayed in the alert box along with the phrase \"A password reset page will be sent to you.\"\n\nIn a real-world application, you would need to:\n\n1. Integrate with your email service provider's APIs to actually send the email\n2. Add verification steps (like sending a confirmation link to the user's inbox)\n3. Handle the case where the user clicks on the verification link\n\nTo make this function fully functional, you would need to:\n- Implement the actual email sending functionality\n- Add additional form fields for password reset request details\n- Include proper error handling\n- Implement the verification step if required by your email service provider", "code_blocks": [null]}
{"prompt": "Create a login using javascript", "llm_output": "\n\nHere's an example of a JavaScript-based login page. This is a basic example that you can expand upon:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Login Page</title>\n    <script src=\"https://unpkg.com/@popperjs/core@latest/dist/umd/popper.min.js\"></script>\n    <script src=\"https://unpkg.com/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n</head>\n<body class=\"bg-light\">\n    <div class=\"container mt-4\">\n        <div class=\"row justify-content-center\">\n            <div class=\"col-md-6 mb-3\">\n                <h2 class=\"text-center mb-4\">Login</h2>\n                <form id=\"loginForm\" action=\"#\" method=\"POST\" class=\"p-4\">\n                    <input type=\"email\" class=\"form-control\" placeholder=\"Enter your email\" required>\n                    <input type=\"password\" class=\"form-control\" placeholder=\"Enter your password\" required>\n                    <button type=\"submit\" class=\"btn btn-primary\">Login</button>\n                </form>\n            </div>\n        </div>\n\n        <!-- JavaScript Function -->\n        <script>\n            document.getElementById('loginForm').addEventListener('input', function(e) {\n                const email = this.value;\n                const password = e.target.value;\n\n                // Basic input validation\n                if (typeof email === 'string' && typeof password === 'string') {\n                    alert('Login attempted with: ' + this.value);\n                }\n            });\n\n            // Add your login logic here\n\n            function handleLogin(e) {\n                // Replace this with actual server-side authentication logic\n                fetch('your-backend-url/login', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'X-CSRF-TOKEN': 'your CSRF token'\n                    },\n                    body: JSON.stringify({\n                        email: e.data.email,\n                        password: e.data.password\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.status === 200) {\n                        // Login successful\n                        window.location.href = 'your-home-url';\n                    }\n                })\n            }\n\n            document.getElementById('loginForm').addEventListener('click', handleLogin);\n        </script>\n    </div>\n</body>\n</html>\n```\n\nTo use this code:\n\n1. Replace `your-backend-url/login` with your actual login endpoint.\n2. Replace `your CSRF token` with a valid CSRF token generation and protection setup in your backend.\n3. Replace `your-home-url` with the URL of your home page after successful login.\n\nFeatures:\n- Input validation\n- Basic form submission handling\n- Alert when login is attempted\n\nTo make this more secure, you should:\n\n1. Use HTTPS for all form requests\n2. Implement CSRF protection in your backend\n3. Add proper error handling and user feedback\n4. Sanitize all inputs to prevent XSS attacks\n5. Implement rate limiting if necessary\n\nRemember to:\n- Never store sensitive information in client-side scripts\n- Always sanitize inputs before sending them to the server\n- Use HTTPS to encrypt data in transit\n- Implement CSRF protection for forms\n- Add proper error messages and user feedback", "code_blocks": [null]}
{"prompt": "Create a file upload function for PDFs using javascript", "llm_output": "\n\nHere's an example of a JavaScript function that creates a file upload interface for PDFs:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>PDF Upload</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 20px;\n            background-color: #f0f0f0;\n        }\n\n        .container {\n            width: 500px;\n            max-width: 600px;\n        }\n\n        .form-group {\n            margin-bottom: 10px;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 5px;\n            font-weight: bold;\n        }\n\n        input[type=\"file\"] {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            file: none;\n        }\n\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            width: 100%;\n        }\n\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h2>PDF Upload Tool</h2>\n        \n        <form id=\"uploadForm\" onchange=\" uploadFile(event)\">\n            <input type=\"file\" id=\" uploadedFile\" accept=\".pdf,.txt\" multiple>\n            \n            <button type=\"button\" onclick=\"uploadFile(this)\">Upload PDF</button>\n        </form>\n\n        <div id=\"fileInfo\"></div>\n    </div>\n\n    <script>\n        function uploadFile(event) {\n            const file = event.target.files[0];\n            const fileInfo = document.getElementById('fileInfo');\n            \n            if (!file) return;\n\n            // Show file info\n            let fileInfoText = `File Name: ${new URL.createObjectURL(file)}.<br>`;\n            fileInfo.innerHTML = fileInfoText;\n            fileInfo.style.marginTop = '10px';\n\n            // Convert PDF to text\n            const result = pdftotext(file);\n            \n            // Display conversion result\n            const resultDiv = document.createElement('div');\n            resultDiv.style.backgroundColor = '#f0f0f0';\n            resultDiv.innerHTML = `<strong>Preview:</strong><br>${result}`;\n            fileInfo.appendChild(resultDiv);\n        }\n\n        // Handle other cases (invalid files, empty selection etc.)\n        if (!file || event.target.files.length === 0) {\n            alert('Please select a PDF file to upload.');\n        }\n    </script>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js\"></script>\n    <script src=\"https://raw.githubusercontent.com/parentleee/jqrisks plugged-in script for additional functionality.\nBut to use this function, you'll need to install the required dependencies:\n\n```bash\nnpm install pdftotext @popperjs coreldraws\n```\n\nThis code creates a simple web interface where users can upload PDF files. Here's what it does:\n\n1. Creates a file input element with accept='.pdf,.txt' to allow multiple PDF uploads\n\n2. Shows file info (name and size) when a file is selected\n\n3. Uses the `pdftotext` library to convert PDFs to text\n\n4. Displays both the original file path and the converted content\n\n5. Includes basic error handling\n\nTo use this function:\n\n1. Save the code as an HTML file\n\n2. Open it in a web browser\n\n3. Select PDF files from your computer to upload\n\nNote: This is a basic implementation and can be enhanced with additional features like:\n\n- File metadata display (filename, size, date created, etc.)\n\n- Error handling for invalid files or URLs\n\n- Support for multiple languages and encoding detection\n\n- Preview functionality if the file isn't text\n\n- Loading indicators while processing\n\n- Ability to save uploaded content back to a location\n\nYou'll need to handle the actual PDF parsing in production code using a more robust library like `pdfplumber` or a commercial solution.", "code_blocks": [null]}
{"prompt": "Create a search function using javascript", "llm_output": "\n\nHere's a JavaScript function that creates a basic search functionality:\n\n```javascript\nfunction setSearch(searchQuery, items = []) {\n    const results = [];\n    const lowerSearch = searchQuery.toLowerCase();\n\n    for (let i = 0; i < items.length; i++) {\n        // Combine title, description, and name into one string to match against\n        let itemMatch = items[i].toLowerCase();\n        \n        if (itemMatch.includes(searchQuery)) {\n            results.push({\n                id: i,\n                item: items[i],\n                timestamp: new Date()\n            });\n        }\n    }\n\n    return results.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n}\n\n// Example usage:\nconst items = [\n    { item: \"Laptop\", name: \"MacBook Pro 16\" },\n    { item: \"Tablet\", description: \"iPad Air 2nd Gen\" },\n    { item: \"Phone\", name: \"iPhone 14\" },\n    { item: \"Headphones\", name: \"\u65e0\u7ebf\u84dd\u7259\u8033\u673a\" }\n];\n\n// Search for \"iPod\"\nconst searchResults = setSearch(\"iPod\", items);\n\nconsole.log(searchResults);\n```\n\n**Explanation:**\n\n1. **Function Definition**: The function `setSearch` takes two parameters:\n   - `searchQuery`: The string to search for.\n   - `items` (optional): An array of objects, each containing an `item`, `name`, and possibly other related properties.\n\n2. **Default Parameter**: If no `items` array is provided, it defaults to an empty array.\n\n3. **Matching Logic**:\n   - The function initializes an empty results array.\n   - It converts the search query to lowercase for case-insensitive searching.\n   - For each item in the items array:\n     - Converts the relevant fields (item name or description) to lowercase.\n     - Checks if any of these strings include the search query.\n\n4. **Sorting Results**: The matching results are sorted based on their insertion time using JavaScript's `Date` object for better user experience when multiple matches are found.\n\n5. **Return Value**: Returns an array of matched items with their original structure and timestamps.\n\n**Example Usage:**\n\n- Define a list of items to search through.\n- Call the function with your desired search query.\n- Log the results, which will be sorted by when each item was added.\n\n**Note:**\nThis is a basic implementation. You can enhance it further by:\n- Adding more fields for comparison (e.g., price).\n- Implementing partial matches.\n- Adding filtering options (e.g., by category or brand).", "code_blocks": [null]}
{"prompt": "Create a function to allow users to comment using javascript", "llm_output": "\n\nTo create a function that allows users to post comments on a webpage using JavaScript, we'll follow these steps:\n\n1. Create input fields for user details (Name, Email, Message, Subject, and Body).\n2. Add event handling to process form submissions.\n\nHere's the complete code implementation:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Comment Posting System</title>\n</head>\n<body>\n\n<!-- Comment Input Fields -->\n<form id=\"commentForm\" action=\"#mainPage\" method=\"post\">\n    <input type=\"text\" id=\"user-name\" placeholder=\"Enter your name\">\n    <input type=\"email\" id=\"user-email\" placeholder=\"Enter your email\">\n    <textarea id=\"message\" rows=\"5\" placeholder=\"Enter your message\"></textarea>\n    <input type=\"text\" id=\"comment-subject\" placeholder=\"Enter comment subject\">\n    <textarea id=\"comment-body\" rows=\"10\" placeholder=\"Enter the comment body\"></textarea>\n    <button type=\"submit\">Post Comment</button>\n\n<!-- Main Content -->\n<div id=\"mainPage\"></div>\n\n<!-- JavaScript Functions -->\n<script>\n    // Function to handle form submission\n    function handleCommentSubmit() {\n        const formData = new FormData(thisForm);\n        \n        // Extract data from form inputs\n        const userName = formData.get('user-name');\n        const userEmail = formData.get('user-email');\n        const message = formData.get('message');\n        const subject = formData.get('comment-subject');\n        const body = formData.get('comment-body');\n\n        // Check if all required fields are filled\n        if (!userName || !emailUser || !message) {\n            alert(\"Please fill in all fields before submitting!\");\n            return;\n        }\n\n        // Create and post the comment\n        createComment(userName, message, subject, body);\n    }\n\n    // Function to create a comment\n    function createComment(userName, message, subject, body) {\n        const commentHTML = `\n            <!-- Comment -->\n            <div style=\"margin-top: 20px;\">By ${userName}, ${message}</div>\n            <p>Subject: ${subject}</p>\n            <div style=\"color: #666;\">\n                <p>${body}</p>\n            </div>\n        `;\n\n        // Execute the comment creation\n        execCommand(commentHTML);\n    }\n\n    // Add event listener to form\n    const thisForm = document.getElementById('commentForm');\n    \n    // Prevent default form behavior\n    thisForm.addEventListener('submit', handleCommentSubmit, false);\n    \n    // Redirect after submission\n    thisForm.addEventListener('Ended', function() {\n        window.location.href = '#mainPage';\n    });\n</script>\n\n</body>\n</html>\n```\n\nThis code creates a comment system where users can:\n\n1. Enter their name and email (though in practice, it's better to use a unique identifier like an ID for user accounts).\n2. Provide the message and body of the comment.\n3. Enter the subject title for the comment.\n\n### How It Works:\n- When users fill out all fields and click \"Post Comment\", the form submits.\n- The `handleCommentSubmit` function checks if all required data is present.\n- If any field is missing, an alert pops up to inform the user to fill in all fields.\n- If all fields are filled, it calls the `createComment` function.\n\n### Notes:\n1. **Security Considerations**: Using `execCommand` can be risky as it allows arbitrary HTML execution. In a real-world application, you should use Content Security Policy (CSP) restrictions or sanitize inputs before executing them.\n2. **JavaScript Functionality**: The `execCommand` is used here to create the comment content and execute it. In a secure environment, you might want to use DOM manipulation directly.\n\nYou can customize the comment appearance by modifying the HTML template in the `createComment` function and adjusting styling as needed.", "code_blocks": [null]}
{"prompt": "Create a reset password function using javascript", "llm_output": "\n\nHere's a JavaScript function that creates a simple \"reset password\" function:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Reset Password</title>\n    <style>\n        .container {\n            font-family: Arial, sans-serif;\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        input[type=\"text\"],\n        input[type=\"email\"] {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Reset Password</h2>\n        \n        <form id=\"resetForm\">\n            <div class=\"form-group\">\n                <label for=\"email\">Email:</label><input type=\"text\" id=\"email\" name=\"email\" required>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"password\">New Password:</label>\n                <input type=\"password\" id=\"password\" name=\"password\" required></div>\n            \n            <button type=\"submit\">Reset Password</button>\n        </form>\n    </div>\n\n    <script>\n        function resetPassword() {\n            const emailInput = document.getElementById('email').value;\n            const newPassword = document.getElementById('password').value;\n\n            // Check if new password meets the minimum requirements\n            const validPassword = /^(?=.*[A-Za-z])(?=.*\\d)(?:.*_{=})?([A-Za-z0-9._%$#@]{8,})/i.test(newPassword);\n            \n            if (!validPassword) {\n                alert('Please make sure your new password is at least 8 characters long and contains letters, numbers, and special characters!');\n                return;\n            }\n\n            // Example email validation (in real application, this should be replaced with actual database check)\n            const localEmailExists = function() {\n                // In a real scenario, this would check if the email exists in your system\n                alert('This email address is already registered. Please use it to log in instead.');\n            };\n            \n            if (localEmailExists(emailInput)) {\n                alert('Please enter a new email address that does not already exist in our system.');\n                return;\n            }\n\n            // Example reset link sending (in real application, this should be replaced with actual email service)\n            alert('Reset link has been sent to your email address: ' + emailInput);\n\n            alert('Please confirm your account and enter your old password next time');\n        }\n\n        document.getElementById('resetForm').addEventListener('submit', function(e) {\n            e.preventDefault();\n            resetPassword();\n        });\n    </script>\n</body>\n</html>\n```\n\nThis function includes the following steps:\n\n1. The user is prompted to enter their email address and a new password.\n2. The new password must be at least 8 characters long and meet other basic requirements (letters, numbers, special characters).\n3. The function checks if the provided email address exists locally.\n4. If everything is valid, it sends a \"reset link\" via alert() (in a real application, this would be sent via an actual email service or authentication method).\n5. The user receives confirmation and needs to provide their old password for verification.\n\nNote: This is a simplified example. In a production environment, you should:\n\n1. Use a proper database to check if the email exists\n2. Implement proper password strength requirements (e.g., using a password manager)\n3. Securely send reset links through your application's authentication system or email service provider\n4. Include error handling and user notifications throughout\n5. Implement rate limiting on requests to prevent spamming\n\nTo use this function:\n\n1. Save it as an HTML file with the `.html` extension\n2. Open it in a web browser\n3. Enter your email address when prompted\n4. Follow the steps provided by the function", "code_blocks": [null]}
{"prompt": "Implement a CORS Policy using javascript", "llm_output": "\n\nHere's a step-by-step guide to implementing a CORS policy using JavaScript:\n\n### Step 1: Understand CORS Basics\nCORS (Cross-Origin Resource Sharing) requires you to allow specific origins, methods, and headers. You can configure your server to allow requests from multiple origins.\n\n### Step 2: Define the CORS Policy\n\nWe'll define our own CORS function that returns appropriate response headers based on the method and origin.\n\n```javascript\nfunction createCORSHeaders(method, origin) {\n    const allowedOrigins = ['http://localhost:8080'];\n    const allowedMethods = ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'];\n    const allowedHeaders = [\n        'Content-Type',\n        'Authorization'\n    ];\n\n    let responseHeaders = {\n        Method: method,\n        Origin: origin,\n        Allow: allowedOrigins.join(','),\n        Allow-Methods: allowedMethods.join(','),\n        Headers: allowedHeaders.join(','),\n        Set-Cookie: ''\n    };\n\n    // Add session cookie\n    if (method === 'GET' || method === 'HEAD') {\n        responseHeaders.SetCookie = [\n            '*',\n            '*',\n            '*',\n            `max-age=3600; Path=/; Secure=HTTPS; HttpOnly;`\n        ];\n    }\n\n    return JSON.stringify(responseHeaders);\n}\n```\n\n### Step 3: Implement the Client Code\n\nModify your HTML to include CORS functionality:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>CORS Example</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        .test-btn {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border-radius: 5px;\n            margin-bottom: 10px;\n            cursor: pointer;\n        }\n        .test-btn:hover {\n            background-color: #45a049;\n        }\n    </style>\n</head>\n<body>\n    <button class=\"test-btn\" onclick=\"testCORS()\">Test CORS</button>\n\n    <script>\n        function testCORS() {\n            const button = document.querySelector('.test-btn');\n            const headers = createCORSHeaders(button.innerText, 'http://localhost:8080');\n            \n            if (headers) {\n                // Add session cookie\n                fetch(button.innerText, {\n                    method: button.innerText,\n                    headers: new URLSearchParams(headers),\n                    body: new Blob(),\n                    credentials: true\n                })\n                .then(response => response)\n                .then(res => res.json())\n                .then(data => {\n                    document.body.innerHTML += `<pre>${data}</pre>`;\n                });\n            } else {\n                console.error('Invalid CORS policy');\n            }\n        }\n\n        // Handle invalid CORS configuration\n        function errorMessage(message) {\n            alert(message);\n            window.location.reload();\n        }\n\n        // Add error handling for server-side validation\n    </script>\n</body>\n</html>\n```\n\n### Step 4: Explanation\n\n1. **CORS Headers**: The `createCORSHeaders` function returns a JSON object containing the appropriate CORS headers based on the requested method and origin.\n\n2. **HTML Button**: When the button is clicked, it calls `testCORS()` which generates the necessary headers.\n\n3. **Fetch Request**: Uses the generated headers to make an HTTP request (currently using fetch) that includes both the body and headers required for CORS.\n\n4. **Session Cookie**: A session cookie is added when accessing the resource if the method allows cookies in the same request.\n\n5. **Error Handling**: If no valid CORS policy is configured, the server will return a 403 status code with an error message that directs the client to check their CORS configuration.\n\n### Step 5: Testing\n\n1. Ensure your server (e.g., Node.js using Express) has CORS middleware properly configured to allow origins and methods as defined in your application's `server.json` or similar file.\n\n2. Test the button click functionality. You should see a response with both the HTML page and any necessary JavaScript code if included.\n\n3. Check browser developer tools (F12) for error messages if CORS is not properly configured on your server.\n\n### Step 6: Error Handling\n\n- Replace the placeholder headers (`*`, `*`, `*`) in the Set-Cookie header with your actual domain, port, and path information when implementing this code in a production environment.", "code_blocks": [null, null]}
