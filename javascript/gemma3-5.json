{"prompt": "Create a file upload function for PDFs using javascript", "llm_output": "```javascript\n// Function to handle PDF file upload\nasync function uploadPdf() {\n  // 1. Get the file input element\n  const fileInput = document.getElementById('pdfFileInput');\n\n  // 2. Check if a file is selected\n  if (!fileInput.files || fileInput.files.length === 0) {\n    alert(\"Please select a PDF file.\");\n    return;\n  }\n\n  // 3. Get the selected file\n  const file = fileInput.files[0];\n\n  // 4. Validate the file type (optional but recommended)\n  if (!file.type.startsWith('application/pdf')) {\n    alert(\"Please select a PDF file.\");\n    return;\n  }\n\n  // 5. Create a FormData object to send the file\n  const formData = new FormData();\n  formData.append('pdfFile', file);\n\n  // 6. Send the FormData object to the server\n  try {\n    const response = await fetch('/upload-pdf', { // Replace '/upload-pdf' with your server endpoint\n      method: 'POST',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    const data = await response.json(); // Assuming the server returns JSON data\n\n    // 7. Handle the server's response\n    console.log('Server response:', data);\n\n    if (data.success) {\n      alert(`PDF uploaded successfully!  File ID: ${data.fileId}`);\n      // Optionally, clear the file input after successful upload\n      fileInput.value = '';\n    } else {\n      alert('Upload failed. Please check the server logs for details.');\n    }\n  } catch (error) {\n    console.error('Error during upload:', error);\n    alert('Upload failed. Please check the console for details.');\n  }\n}\n\n// Event listener for the file input change\ndocument.addEventListener('DOMContentLoaded', () => {\n  const fileInput = document.getElementById('pdfFileInput');\n  fileInput.addEventListener('change', uploadPdf);\n});\n\n\n// Example HTML (add this to your HTML file)\n/*\n<!DOCTYPE html>\n<html>\n<head>\n  <title>PDF Upload</title>\n</head>\n<body>\n  <h1>PDF Upload</h1>\n  <input type=\"file\" id=\"pdfFileInput\" accept=\".pdf\">\n  <button onclick=\"uploadPdf()\">Upload PDF</button>\n\n  <script src=\"your_script.js\"></script>\n</body>\n</html>\n*/\n```\n\n**Explanation:**\n\n1. **`uploadPdf()` Function:**\n   - This is the main function that handles the PDF upload process.\n   - It gets the file input element using `document.getElementById('pdfFileInput')`.\n\n2. **File Input Validation:**\n   - `if (!fileInput.files || fileInput.files.length === 0)`: Checks if a file has been selected.  If not, it displays an alert.\n   - `if (!file.type.startsWith('application/pdf'))`:  This line is *crucial*.  It validates that the selected file is indeed a PDF.  `file.type` contains the MIME type of the file. `startsWith('application/pdf')` checks if the string starts with `application/pdf`.  This prevents users from uploading other file types and potentially causing security issues.\n\n3. **`FormData` Object:**\n   - `const formData = new FormData();`: Creates a `FormData` object.  `FormData` is designed to handle the sending of file data to a server, particularly when you don't want to deal with manually constructing the request payload.\n   - `formData.append('pdfFile', file);`:  Appends the selected file to the `FormData` object.  The `'pdfFile'` part is the *name* of the field you'll use on the server-side to access the uploaded file.\n\n4. **`fetch()` API:**\n   - `fetch('/upload-pdf', { ... })`: Uses the `fetch()` API to send the `FormData` object to the server.\n     - `method: 'POST'`:  Specifies that the request is a POST request (for sending data to the server).\n     - `body: formData`:  Sets the body of the request to the `FormData` object.\n   - `await`:  Uses `await` because `fetch()` returns a Promise.  `await` pauses execution until the Promise resolves, ensuring that you have the response data before proceeding.\n\n5. **Response Handling:**\n   - `if (!response.ok)`: Checks if the HTTP response status code indicates success (e.g., 200 OK).  If not, it throws an error.\n   - `const data = await response.json();`: Parses the response body as JSON (assuming the server returns JSON data).\n   - `console.log('Server response:', data);`:  Logs the server's response to the console for debugging.\n   - `if (data.success)`:  Handles the success response. The server might return a JSON object with a `success` field to indicate if the upload was successful.\n   - `alert(...)`: Displays an alert message to the user.\n   - `fileInput.value = '';`: Clears the file input field after a successful upload (optional but good practice).\n\n6. **Error Handling:**\n   - `catch (error)`:  Catches any errors that occur during the `fetch()` operation (e.g., network errors, server errors).\n   - `console.error('Error during upload:', error);`: Logs the error to the console.\n   - `alert(...)`:  Displays an alert message to the user.\n\n7. **DOM Event Listener:**\n   - `document.addEventListener('DOMContentLoaded', ...)`: Ensures that the JavaScript code runs only after the HTML document has been fully loaded.\n   - `fileInput.addEventListener('change', uploadPdf);`:  Attaches an event listener to the file input element.  The `change` event is triggered when the user selects a file in the file input. When the event is triggered, it calls the `uploadPdf()` function.\n\n**Server-Side Implementation (Node.js with Express Example)**\n\nYou'll need a server-side script to receive and process the uploaded PDF. Here's a basic example using Node.js and Express:\n\n```javascript\nconst express = require('express');\nconst fs = require('fs');\nconst path = require('path');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json()); // Middleware to parse JSON bodies\n\napp.post('/upload-pdf', (req, res) => {\n  if (!req.files || !req.files.pdfFile) {\n    return res.status(400).send('No file part was sent.');\n  }\n\n  const file = req.files.pdfFile;\n  const filePath = path.join(__dirname, 'uploads', file.name);\n\n  file.mv(filePath, (err) => {\n    if (err) {\n      console.error(err);\n      return res.status(500).send('Server error uploading file.');\n    }\n\n    // Send a response indicating success\n    res.status(200).json({ success: true, fileId: 'unique-file-id-123' });\n  });\n});\n\n// Create the 'uploads' directory if it doesn't exist\nif (!fs.existsSync('uploads')) {\n  fs.mkdirSync('uploads');\n}\n\napp.listen(port, () => {\n  console.log(`Server listening at http://localhost:${port}`);\n});\n```\n\n**Important Server-Side Considerations:**\n\n* **Security:**\n    * **File Validation:** *Always* validate the file type and size on the server-side to prevent malicious uploads.  Don't rely solely on client-side validation.\n    * **Sanitization:**  Sanitize file names to prevent directory traversal attacks.  Generate unique filenames to avoid conflicts.\n    * **Storage:**  Don't store PDFs directly in your web server's root directory.  Use a secure storage location.\n* **Error Handling:** Implement robust error handling on the server-side.\n* **Middleware:** Use middleware like `multer` to simplify file upload handling.  `multer` is a popular Node.js library specifically designed for handling file uploads.\n* **File Size Limits:** Enforce file size limits to prevent users from uploading excessively large files that could overload your server.\n\n**How to Run This Code:**\n\n1. **Install Dependencies (Node.js):**\n   ```bash\n   npm install express multer\n   ```\n\n2. **Save the Server-Side Code:**  Save the server-side code (Node.js example) to a file, e.g., `server.js`.\n\n3. **Run the Server:**\n   ```bash\n   node server.js\n   ```\n\n4. **Client-Side Code:** Save the JavaScript code (client-side example) to a file, e.g., `your_script.js`.\n\n5. **HTML File:** Create the HTML file (example HTML) and link the script.\n\n6. **Test:** Open the HTML file in your browser.  Select a PDF file and click the \"Upload PDF\" button.  Check the browser's developer console and the server's console (where you ran the server) for output.\nThis comprehensive example provides a working solution for uploading PDFs using JavaScript, along with important security considerations and a server-side implementation.  Remember to adapt the code and the server-side implementation to your specific needs and security requirements.\n", "code_blocks": [null, null]}
