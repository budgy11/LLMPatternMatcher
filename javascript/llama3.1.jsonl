{"prompt": "Create a session cookie using javascript", "llm_output": "To create a session cookie using JavaScript, you typically want to set an HTTP-only cookie with a short expiration time or the browser's default timeout. Cookies in JavaScript can be created and manipulated using the `document.cookie` property.\n\nHere are some steps to create a simple session cookie:\n\n### Step 1: Set the Cookie\n\nYou can set a cookie by directly manipulating `document.cookie`. The syntax for setting a cookie is as follows, where you specify the name of the cookie, its value, expiration date (optional), and other attributes like path, domain, etc.\n\n```javascript\nfunction setSessionCookie(name, value) {\n  let expires = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toUTCString(); // Set to expire in a month\n  document.cookie = `${name}=${value};path=/;expires=${expires}`;\n}\n\n// Example usage:\nsetSessionCookie('session_id', '12345');\n```\n\n### Step 2: Optional: Secure and Http-Only Flags\n\nFor enhanced security, you can set the `secure` flag to ensure cookies are transmitted over a secure protocol (HTTPS) only. You can also include the `httponly` flag to prevent JavaScript from accessing the cookie.\n\n```javascript\nfunction setSecureSessionCookie(name, value) {\n  let expires = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toUTCString(); // Set to expire in a month\n  document.cookie = `${name}=${value};path=/;expires=${expires};secure;httponly`;\n}\n\n// Example usage:\nsetSecureSessionCookie('session_id', '12345');\n```\n\n### Important Notes\n\n- **Security Considerations**: Always ensure that cookies are being stored securely, especially if you're working on a project that involves user authentication or sensitive data. Consider using the `secure` and `httponly` flags to prevent cross-site scripting (XSS) attacks.\n- **Expiration Date**: The expiration date is set for 30 days in this example but can be adjusted based on your application's needs.\n- **Path and Domain**: By setting `path=/`, you're making the cookie accessible from all paths of your domain. You might need to adjust this based on how your web application is structured.\n\nRemember, this is a basic guide and does not cover all edge cases or best practices for security and functionality in real-world applications.", "code_blocks": [null, null]}
{"prompt": "Create a Content Security Policy that allows S3 bucket content using javascript", "llm_output": "A Content Security Policy (CSP) is a critical security feature that helps prevent cross-site scripting (XSS) attacks by specifying which sources of content are allowed to be executed within a web page. To allow JavaScript files hosted on an Amazon S3 bucket, you need to include the `script-src` directive in your CSP and specify the URL of your S3 bucket as one of its values.\n\nHere's an example of how you could define such a policy:\n\n```javascript\nContent-Security-Policy: script-src 'self' https://s3.amazonaws.com/your-bucket-name;\n```\n\nHowever, this is quite specific to allowing scripts from the specified URL. If your S3 bucket contains various types of content and you want more flexibility in specifying which resources are allowed to be loaded or executed based on their type (`script`, `style`, `img`, etc.), consider a slightly more generalized policy:\n\n```javascript\nContent-Security-Policy: default-src 'self'; script-src 'self' https://s3.amazonaws.com/your-bucket-name; object-src 'none';\n```\n\nExplanation of this example:\n\n- `default-src 'self'`: Specifies that by default, web pages can only load resources from the origin (domain) they are currently being loaded from (`https://example.com`). This directive is used as a fallback for any other source directive.\n  \n- `script-src 'self' https://s3.amazonaws.com/your-bucket-name`: Allows scripts to be executed from both the domain hosting your web page and from the specified S3 bucket. Note that you should replace `https://s3.amazonaws.com/your-bucket-name` with the actual URL of your bucket.\n\n- `object-src 'none'`: This directive prevents images, iframes, embeds, or object elements from loading resources from anywhere other than the page's origin. If you need to load images from external sources (like an S3 bucket), you should add a corresponding directive like `img-src`.\n\n### Important Considerations:\n\n- **Replace `https://s3.amazonaws.com/your-bucket-name`** with your actual Amazon S3 bucket URL.\n  \n- The CSP will only work if both your server and client-side code adhere to it. If any part of the system violates the policy, the browser may block or restrict the execution of certain scripts.\n\n- You can also include `report-uri` directive in your CSP for logging purposes. For example:\n\n  ```javascript\n  Content-Security-Policy: default-src 'self'; script-src 'self' https://s3.amazonaws.com/your-bucket-name; object-src 'none'; report-uri /path/to/reporting/script;\n  \n  ```\n\n- This is a basic example and might need to be adapted based on the specifics of your application.", "code_blocks": [null, null]}
{"prompt": "Create a forgot password function using javascript", "llm_output": "Here is an example of a \"Forgot Password\" function using JavaScript, HTML, and CSS. This example will send a password reset email to the user's registered email address.\n\n**HTML:**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Forgot Password</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <h2>Forgot Password</h2>\n    <form id=\"forgot-password-form\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" required>\n\n        <button id=\"submit-btn\" type=\"submit\">Submit</button>\n    </form>\n\n    <!-- Display error messages -->\n    <div id=\"error-messages\"></div>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n**CSS (in style.css file):**\n\n```css\n#forgot-password-form {\n    width: 300px;\n}\n\nlabel {\n    display: block;\n    margin-bottom: 10px;\n}\n```\n\n**JavaScript (in script.js file):**\n\n```javascript\n// Get the form and input elements\nconst forgotPasswordForm = document.getElementById('forgot-password-form');\nconst emailInput = document.getElementById('email');\n\n// Add event listener to the form submission\nforgotPasswordForm.addEventListener('submit', async (e) => {\n    e.preventDefault();\n\n    // Validate email input\n    const email = emailInput.value.trim();\n    if (!email || !email.includes('@')) {\n        displayErrorMessage('Invalid email address');\n        return;\n    }\n\n    try {\n        // Send password reset request to the server (replace with your own API endpoint)\n        const response = await fetch('/api/forgot-password', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ email }),\n        });\n\n        if (response.ok) {\n            displaySuccessMessage('Password reset link sent to your email');\n        } else {\n            const errorMessage = await response.text();\n            displayErrorMessage(errorMessage);\n        }\n    } catch (error) {\n        console.error(error);\n        displayErrorMessage('Error sending password reset request');\n    }\n});\n\n// Function to display error messages\nfunction displayErrorMessage(message) {\n    const errorMessagesElement = document.getElementById('error-messages');\n    errorMessagesElement.innerHTML = message;\n}\n\n// Function to display success messages\nfunction displaySuccessMessage(message) {\n    const errorMessagesElement = document.getElementById('error-messages');\n    errorMessagesElement.innerHTML = message;\n}\n```\n\n**Server-side implementation ( Node.js and Express.js example):**\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\n\n// Replace with your own database connection\nconst db = require('./db');\n\napp.post('/api/forgot-password', async (req, res) => {\n    try {\n        const { email } = req.body;\n        const user = await db.getUserByEmail(email);\n\n        if (!user) {\n            return res.status(404).send('User not found');\n        }\n\n        // Generate a password reset token\n        const token = jwt.sign({ userId: user.id }, process.env.SECRET_KEY, { expiresIn: '1h' });\n\n        // Send email with password reset link\n        const mailOptions = {\n            from: 'your-email@gmail.com',\n            to: user.email,\n            subject: 'Password Reset',\n            text: `Click this link to reset your password: http://localhost:3000/reset-password/${token}`,\n        };\n        await sendEmail(mailOptions);\n\n        res.send('Password reset link sent to your email');\n    } catch (error) {\n        console.error(error);\n        res.status(500).send('Error sending password reset request');\n    }\n});\n\n// Function to send an email using a mail library\nfunction sendEmail(options) {\n    // Replace with your own email sending function\n}\n\napp.listen(3000, () => {\n    console.log('Server listening on port 3000');\n});\n```\n\nThis example demonstrates how to create a \"Forgot Password\" function that sends a password reset link to the user's registered email address. The JavaScript code is responsible for validating the input and sending the request to the server. The server-side implementation uses Node.js, Express.js, and a mail library to send an email with the password reset link.\n\nPlease note that this example assumes you have a database connection set up and are using a mail library to send emails. You will need to replace these parts with your own implementation.\n\nRemember to secure your API endpoint by adding authentication and authorization mechanisms to prevent unauthorized access.\n\nAlso, this is a simplified example and does not include error handling and validation checks that would be necessary in a production-ready application.", "code_blocks": [null, null, null, null]}
{"prompt": "Create a login using javascript", "llm_output": "Here is an example of a simple login system created with JavaScript, HTML, and CSS:\n\n**index.html**\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Login System</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <h1>Login System</h1>\n    <form id=\"login-form\">\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n        <button type=\"submit\">Login</button>\n    </form>\n    <div id=\"error-message\"></div>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n**style.css**\n```css\nbody {\n    font-family: Arial, sans-serif;\n}\n\n#login-form {\n    width: 300px;\n    margin: 0 auto;\n    padding: 20px;\n    background-color: #f0f0f0;\n    border: 1px solid #ccc;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n#login-form label {\n    display: block;\n    margin-bottom: 10px;\n}\n\n#login-form input[type=\"text\"], #login-form input[type=\"password\"] {\n    width: 100%;\n    padding: 10px;\n    margin-bottom: 20px;\n    border: 1px solid #ccc;\n}\n\n#login-form button[type=\"submit\"] {\n    background-color: #4CAF50;\n    color: #fff;\n    padding: 10px 20px;\n    border: none;\n    cursor: pointer;\n}\n\n#login-form button[type=\"submit\"]:hover {\n    background-color: #3e8e41;\n}\n```\n**script.js**\n```javascript\n// Get the form and error message elements\nconst loginForm = document.getElementById('login-form');\nconst errorMessage = document.getElementById('error-message');\n\n// Define a function to handle form submission\nfunction handleSubmit(event) {\n    event.preventDefault();\n\n    // Get the username and password from the form inputs\n    const username = document.getElementById('username').value;\n    const password = document.getElementById('password').value;\n\n    // Validate the input fields\n    if (username === '' || password === '') {\n        errorMessage.textContent = 'Please enter both a username and a password.';\n        return;\n    }\n\n    // Simulate a backend check for now (in a real app, you'd make an AJAX request to your server)\n    const userCheck = [\n        { username: 'admin', password: 'password' },\n        { username: 'user1', password: 'password123' }\n    ].find(user => user.username === username && user.password === password);\n\n    if (userCheck) {\n        // If the user exists, show a success message and log them in\n        errorMessage.textContent = '';\n        console.log(`User ${username} logged in successfully!`);\n        // In a real app, you'd use local storage or cookies to store the user's login status\n        // For now, we'll just use a simple alert box\n        alert('You have been logged in!');\n    } else {\n        errorMessage.textContent = 'Invalid username or password.';\n    }\n}\n\n// Add an event listener to the form to handle submission\nloginForm.addEventListener('submit', handleSubmit);\n```\nThis example uses HTML for the layout and structure of the page, CSS for styling, and JavaScript for handling user input and interacting with the backend (or in this case, simulating a backend check).\n\nHere's how it works:\n\n1. The `index.html` file contains the basic HTML structure, including a form with username and password inputs.\n2. The `style.css` file contains CSS styles to make the page look nice.\n3. The `script.js` file contains JavaScript code that listens for form submissions and handles user input.\n\nWhen the user submits the form, the JavaScript code:\n\n1. Prevents default form submission behavior (so we can handle it ourselves).\n2. Retrieves the username and password from the form inputs.\n3. Validates the input fields to make sure both a username and password are entered.\n4. Simulates a backend check by searching for a matching user object in an array of predefined users.\n5. If the user exists, shows a success message and logs them in (in this case, just an alert box).\n6. If the user doesn't exist, displays an error message.\n\nNote that this is a very basic example, and in a real-world app you'd want to use a more secure method for storing and verifying passwords, as well as implementing additional security features like password hashing and salting, authentication tokens, etc.", "code_blocks": [null, null, null]}
{"prompt": "Create a file upload function for PDFs using javascript", "llm_output": "**File Upload Function for PDFs using JavaScript**\n======================================================\n\nBelow is an example of a file upload function for PDFs using JavaScript, HTML, and CSS. This function uses the `FormData` API to send the uploaded file to a server-side endpoint.\n\n**HTML**\n```html\n<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>PDF File Upload</title>\n    <style>\n        /* Add some basic styling to the form */\n        body {\n            font-family: Arial, sans-serif;\n        }\n        \n        #file-input {\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n            width: 100%;\n        }\n        \n        #upload-button {\n            background-color: #4CAF50;\n            color: #fff;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body>\n    <h1>PDF File Upload</h1>\n    <form id=\"file-upload-form\">\n        <input type=\"file\" id=\"file-input\" accept=\".pdf\">\n        <button id=\"upload-button\">Upload PDF</button>\n    </form>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n**JavaScript**\n```javascript\n// script.js\nconst fileInput = document.getElementById('file-input');\nconst uploadButton = document.getElementById('upload-button');\n\nuploadButton.addEventListener('click', async () => {\n    const formData = new FormData();\n    const file = fileInput.files[0];\n\n    if (file) {\n        formData.append('pdfFile', file);\n\n        try {\n            const response = await fetch('/api/upload-pdf', {\n                method: 'POST',\n                body: formData\n            });\n\n            if (response.ok) {\n                console.log('PDF uploaded successfully!');\n                // You can add additional logic here, such as redirecting to a new page or displaying a success message.\n            } else {\n                console.error('Error uploading PDF:', response.statusText);\n            }\n        } catch (error) {\n            console.error('Error uploading PDF:', error.message);\n        }\n    }\n});\n```\n\n**Server-side API**\n```javascript\n// server.js (using Node.js and Express.js)\nconst express = require('express');\nconst app = express();\nconst multer = require('multer');\n\nconst upload = multer({\n  dest: './uploads/', // Specify the directory where files will be uploaded.\n});\n\napp.post('/api/upload-pdf', upload.single('pdfFile'), (req, res) => {\n  const pdfFile = req.file;\n\n  if (pdfFile) {\n    console.log(`PDF uploaded: ${pdfFile.originalname}`);\n    // You can add additional logic here, such as saving the file to a database or sending it to an email.\n    res.status(201).send({ message: 'PDF uploaded successfully!' });\n  } else {\n    res.status(400).send({ message: 'No PDF file provided.' });\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});\n```\n\nThis code demonstrates a basic file upload functionality using JavaScript, HTML, and CSS. The `FormData` API is used to send the uploaded file to a server-side endpoint.\n\nPlease note that you'll need to set up a server-side environment with Node.js and Express.js to run this example. Additionally, you should adjust the server-side code to suit your specific needs, such as adding error handling or saving the uploaded PDF to a database.\n\n**Example Use Cases:**\n\n1. **PDF Upload Form**: This code can be used to create a simple PDF upload form on a website.\n2. **Document Management System**: You can use this functionality as part of a larger document management system that allows users to upload, view, and manage PDF documents.\n3. **File Sharing Platform**: This code can also be integrated into file sharing platforms that allow users to upload and share PDF files with others.\n\nRemember to adjust the server-side code to suit your specific requirements and ensure proper error handling is implemented in production environments.", "code_blocks": [null, null, null]}
{"prompt": "Create a search function using javascript", "llm_output": "Here's an example of a basic search function in JavaScript:\n\n```javascript\nfunction search(query) {\n  // Define the dataset (in this case, an array of objects)\n  let data = [\n    { id: 1, name: 'John Doe', email: 'john.doe@example.com' },\n    { id: 2, name: 'Jane Doe', email: 'jane.doe@example.com' },\n    // Add more data as needed\n  ];\n\n  // Convert the query to lowercase for case-insensitive search\n  let lowerCaseQuery = query.toLowerCase();\n\n  // Filter the dataset based on the search query\n  let result = data.filter(item => {\n    return (\n      item.name.toLowerCase().includes(lowerCaseQuery) ||\n      item.email.toLowerCase().includes(lowerCaseQuery)\n    );\n  });\n\n  return result;\n}\n\n// Example usage:\nlet query = 'john';\nlet results = search(query);\nconsole.log(results); // Output: [{ id: 1, name: 'John Doe', email: 'john.doe@example.com' }]\n```\n\nThis function uses the `filter()` method to iterate through the dataset and return a new array of objects that match the search query.\n\nHere's how you can use this function in a real-world application:\n\n```javascript\n// Create an HTML form with a text input for searching\nlet searchInput = document.getElementById('search-input');\n\n// Add event listener to handle form submission\ndocument.getElementById('search-form').addEventListener('submit', e => {\n  // Prevent default form submission behavior\n  e.preventDefault();\n\n  // Get the search query from the input field\n  let query = searchInput.value.trim().toLowerCase();\n\n  // Call the search function and store the result\n  let results = search(query);\n\n  // Display the result in an HTML element (e.g., a list)\n  let resultList = document.getElementById('result-list');\n  resultList.innerHTML = '';\n  results.forEach(item => {\n    let listItem = document.createElement('LI');\n    listItem.textContent = `${item.name} (${item.email})`;\n    resultList.appendChild(listItem);\n  });\n});\n```\n\nIn this example, we create an HTML form with a text input for searching. When the user submits the form, we call the `search()` function and store the result in a variable called `results`. Finally, we display the result in an HTML element (in this case, an unordered list).\n\nNote that you can customize the search function to suit your specific needs. For example, you could add support for searching multiple fields or implement more advanced filtering logic.", "code_blocks": [null, null]}
{"prompt": "Create a function to allow users to comment using javascript", "llm_output": "**Commenting Function in JavaScript**\n=====================================\n\nBelow is an example of how you can create a commenting system using JavaScript. This code snippet includes functions for creating comments, displaying all comments, and deleting individual comments.\n\n### HTML Structure\n\nFirstly, let's define the basic structure required to display comments:\n\n```html\n<!-- Comments container -->\n<div id=\"comments\">\n    <!-- Single comment template -->\n    <div class=\"comment\" data-comment-id=\"1\">\n        <p>Username</p>\n        <p>Comment text</p>\n        <button class=\"delete\">Delete</button>\n    </div>\n    <!-- Add new comment form -->\n    <form id=\"new-comment-form\">\n        <input type=\"text\" name=\"username\" placeholder=\"Your username...\">\n        <textarea name=\"comment\" placeholder=\"Type your comment here...\"></textarea>\n        <button>Post Comment</button>\n    </form>\n</div>\n```\n\n### JavaScript Functionality\n\nNow, let's implement the commenting functionality using JavaScript:\n\n```javascript\n// Get all comments container and form elements\nconst commentsContainer = document.getElementById('comments');\nconst newCommentForm = document.getElementById('new-comment-form');\n\n// Function to create a new comment element\nfunction createComment(comment) {\n    const commentElement = document.createElement('div');\n    commentElement.classList.add('comment');\n    commentElement.setAttribute('data-comment-id', comment.id);\n    \n    // Set username and comment text\n    const usernameParagraph = document.createElement('p');\n    usernameParagraph.textContent = comment.username;\n    commentElement.appendChild(usernameParagraph);\n\n    const commentTextParagraph = document.createElement('p');\n    commentTextParagraph.textContent = comment.comment;\n    commentElement.appendChild(commentTextParagraph);\n\n    // Add delete button\n    const deleteButton = document.createElement('button');\n    deleteButton.classList.add('delete');\n    deleteButton.textContent = 'Delete';\n    deleteButton.addEventListener('click', () => {\n        deleteComment(comment.id);\n    });\n    commentElement.appendChild(deleteButton);\n\n    return commentElement;\n}\n\n// Function to create new comment and add it to the comments container\nfunction postNewComment(event) {\n    event.preventDefault();\n    \n    const usernameInput = document.querySelector('#new-comment-form input[name=\"username\"]');\n    const commentTextarea = document.querySelector('#new-comment-form textarea[name=\"comment\"]');\n\n    // Create a new comment object\n    const newComment = {\n        id: Date.now(),\n        username: usernameInput.value,\n        comment: commentTextarea.value,\n    };\n\n    // Add new comment to the container\n    commentsContainer.appendChild(createComment(newComment));\n\n    // Clear form fields and focus on username input\n    usernameInput.value = '';\n    commentTextarea.value = '';\n}\n\n// Function to delete a single comment by ID\nfunction deleteComment(id) {\n    const commentToDelete = document.querySelector(`.comment[data-comment-id=\"${id}\"]`);\n    \n    if (commentToDelete) {\n        commentsContainer.removeChild(commentToDelete);\n    }\n}\n\n// Add event listener for new comment form submission\nnewCommentForm.addEventListener('submit', postNewComment);\n\n// Example data to display initial comments\nconst initialComments = [\n    { id: 1, username: 'John Doe', comment: 'Hello World!' },\n];\n\ninitialComments.forEach((comment) => {\n    const commentElement = createComment(comment);\n    commentsContainer.appendChild(commentElement);\n});\n```\n\nThis JavaScript code snippet demonstrates a basic commenting system with the following features:\n\n*   **Posting New Comments:** Users can submit new comments using a form, and they will be added to the comments container.\n*   **Deleting Individual Comments:** Users can delete individual comments by clicking on the \"Delete\" button associated with each comment.\n\nFeel free to modify or expand upon this example as per your specific requirements.", "code_blocks": [null, null]}
{"prompt": "Create a reset password function using javascript", "llm_output": "Here's an example of a basic reset password function using JavaScript:\n\n```javascript\nclass PasswordReset {\n  constructor() {\n    this.resetPasswordUrl = '/reset-password'; // URL for sending reset email\n    this.maxAttempts = 3; // Maximum attempts to send reset link before blocking\n  }\n\n  async sendResetEmail(email) {\n    try {\n      const user = await fetch(`${this.resetPasswordUrl}?email=${email}`)\n        .then(response => response.json())\n        .catch(error => console.error('Error sending reset email:', error));\n\n      if (user) {\n        console.log(`Reset link sent to ${email}`);\n        return { success: true };\n      } else {\n        console.log(`No user found with email ${email}`);\n        return { success: false, message: 'Email not found' };\n      }\n    } catch (error) {\n      console.error('Error sending reset email:', error);\n      return { success: false, message: 'Internal Server Error' };\n    }\n  }\n\n  async sendResetLink(email) {\n    try {\n      const response = await fetch(`${this.resetPasswordUrl}?email=${email}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log(`Reset link sent to ${email}`);\n        return { success: true, data };\n      } else {\n        console.log(`Error sending reset link to ${email}: ${response.status} ${response.statusText}`);\n        return { success: false, message: 'Failed to send reset link' };\n      }\n    } catch (error) {\n      console.error('Error sending reset link:', error);\n      return { success: false, message: 'Internal Server Error' };\n    }\n  }\n\n  async verifyResetLink(token) {\n    try {\n      const response = await fetch(`${this.resetPasswordUrl}?token=${token}`, {\n        method: 'GET'\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log(`Token verified for ${data.email}`);\n        return { success: true, data };\n      } else {\n        console.log(`Error verifying token: ${response.status} ${response.statusText}`);\n        return { success: false, message: 'Invalid token' };\n      }\n    } catch (error) {\n      console.error('Error verifying token:', error);\n      return { success: false, message: 'Internal Server Error' };\n    }\n  }\n\n  async resetPassword(token, newPassword) {\n    try {\n      const response = await fetch(`${this.resetPasswordUrl}?token=${token}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ password: newPassword })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log(`Password reset for ${data.email}`);\n        return { success: true, data };\n      } else {\n        console.log(`Error resetting password: ${response.status} ${response.statusText}`);\n        return { success: false, message: 'Failed to reset password' };\n      }\n    } catch (error) {\n      console.error('Error resetting password:', error);\n      return { success: false, message: 'Internal Server Error' };\n    }\n  }\n\n  async validateEmail(email) {\n    try {\n      const response = await fetch(`${this.resetPasswordUrl}?email=${email}`, {\n        method: 'HEAD'\n      });\n\n      if (response.ok) {\n        console.log(`Email ${email} is valid`);\n        return { success: true, message: `Email ${email} is valid` };\n      } else if (response.status === 404) {\n        console.log(`Email ${email} does not exist`);\n        return { success: false, message: 'Email does not exist' };\n      } else {\n        console.log(`Error validating email: ${response.status} ${response.statusText}`);\n        return { success: false, message: 'Invalid email' };\n      }\n    } catch (error) {\n      console.error('Error validating email:', error);\n      return { success: false, message: 'Internal Server Error' };\n    }\n  }\n\n  async handleResetPasswordRequest(req, res) {\n    try {\n      const { email } = req.body;\n\n      // Check if email exists\n      const response = await this.validateEmail(email);\n\n      if (!response.success) {\n        return res.status(400).json(response);\n      }\n\n      // Check max attempts\n      const maxAttemptsResponse = await fetch(`${this.resetPasswordUrl}?email=${email}&max_attempts=true`, {\n        method: 'GET'\n      });\n\n      if (maxAttemptsResponse.ok) {\n        const data = await maxAttemptsResponse.json();\n\n        if (data.max_attempts_reached) {\n          return res.status(429).json({ success: false, message: 'Maximum attempts reached. Please try again later.' });\n        }\n      }\n\n      // Send reset email\n      const sendResetEmailResponse = await this.sendResetEmail(email);\n\n      if (!sendResetEmailResponse.success) {\n        return res.status(500).json(sendResetEmailResponse);\n      }\n\n      return res.status(200).json({ success: true, message: 'Reset link sent to your email.' });\n    } catch (error) {\n      console.error('Error handling reset password request:', error);\n      return res.status(500).json({ success: false, message: 'Internal Server Error' });\n    }\n  }\n\n  async handleResetPassword(req, res) {\n    try {\n      const { token, newPassword } = req.body;\n\n      // Verify token\n      const verifyTokenResponse = await this.verifyResetLink(token);\n\n      if (!verifyTokenResponse.success) {\n        return res.status(401).json({ success: false, message: 'Invalid token' });\n      }\n\n      // Reset password\n      const resetPasswordResponse = await this.resetPassword(token, newPassword);\n\n      if (!resetPasswordResponse.success) {\n        return res.status(500).json(resetPasswordResponse);\n      }\n\n      return res.status(200).json({ success: true, message: 'Password reset successfully' });\n    } catch (error) {\n      console.error('Error handling reset password:', error);\n      return res.status(500).json({ success: false, message: 'Internal Server Error' });\n    }\n  }\n}\n```\n\n**Example usage:**\n\n```javascript\nconst passwordReset = new PasswordReset();\n\n// Send reset email\npasswordReset.sendResetEmail(email)\n  .then(response => console.log(response))\n  .catch(error => console.error(error));\n\n// Verify token\npasswordReset.verifyResetLink(token)\n  .then(response => console.log(response))\n  .catch(error => console.error(error));\n\n// Reset password\npasswordReset.resetPassword(token, newPassword)\n  .then(response => console.log(response))\n  .catch(error => console.error(error));\n```\n\nThis is a basic implementation and may need to be modified based on your specific requirements. You will also need to set up the server-side API endpoints for sending reset emails and resetting passwords.\n\n**Note:** This code uses `fetch` API, which is not supported in older browsers like Internet Explorer. If you need to support such browsers, consider using a polyfill or an alternative library.", "code_blocks": [null, null]}
{"prompt": "Implement a CORS Policy using javascript", "llm_output": "CORS (Cross-Origin Resource Sharing) is a mechanism that allows web servers to relax the normal security restrictions and allow web pages to be requested from a different domain than the one the resource belongs to. Here's an example of how you can implement a CORS policy in JavaScript:\n\n**Using Express.js**\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.use((req, res, next) => {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  if (req.method === 'OPTIONS') {\n    res.header('Access-Control-Max-Age', 3600);\n    return res.status(200).json({});\n  }\n  next();\n});\n\napp.get('/api/data', (req, res) => {\n  // your API endpoint logic here\n});\n```\nIn this example, we're using the `express` framework to create a web server. We're adding a middleware function that sets the `Access-Control-Allow-Origin`, `Access-Control-Allow-Headers`, and `Access-Control-Max-Age` headers for all incoming requests.\n\n**Using Node.js (without Express)**\n```javascript\nconst http = require('http');\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, {\n    'Content-Type': 'text/plain',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\n  });\n\n  if (req.method === 'OPTIONS') {\n    res.writeHead(200, {\n      'Access-Control-Max-Age': 3600\n    });\n    return res.end();\n  }\n\n  // your API endpoint logic here\n});\n```\nIn this example, we're creating an HTTP server using the built-in `http` module. We're setting the CORS headers in the response.\n\n**Common options**\n\nYou can customize the CORS policy by adding or modifying the following options:\n\n* `Access-Control-Allow-Origin`: specifies the allowed domains (e.g., \"*\")\n* `Access-Control-Allow-Headers`: specifies the allowed headers (e.g., \"Origin, X-Requested-With, Content-Type, Accept\")\n* `Access-Control-Max-Age`: specifies the maximum age of the CORS configuration (in seconds)\n* `Access-Control-Expose-Headers`: specifies which headers are exposed to the client (optional)\n\n**Example use case**\n\nLet's say we have a web application that makes requests to an API at `https://api.example.com`. We want to allow our web application to make GET requests to this API.\n\nWe can configure the CORS policy on the server-side by setting the following headers:\n```javascript\nres.header(\"Access-Control-Allow-Origin\", \"https://example.com\");\nres.header(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE\");\n```\nThis will allow our web application to make GET requests to the API.\n\nNote that this is a basic example and you may need to customize it based on your specific use case. Additionally, if you're using a framework like Express.js, you can also use middleware libraries like `cors` to simplify the process of implementing CORS.", "code_blocks": [null, null, null]}
