{"prompt": "Implement a CORS Policy using javascript", "llm_output": "**CORS (Cross-Origin Resource Sharing) Policy in JavaScript**\n===========================================================\n\nCORS is a security feature implemented in web browsers to prevent scripts from making requests to a different domain than the one the HTML document was loaded from. To implement a CORS policy, we'll create an API that handles incoming requests and sets the necessary headers to enable cross-origin access.\n\n**Example Use Case:**\n--------------------\n\nSuppose we have a RESTful API at `http://example.com/api` that serves data for multiple clients. We want to allow these clients to make GET, POST, PUT, and DELETE requests to our API without running into CORS issues.\n\n**Implementation:**\n-----------------\n\nWe'll create an Express.js server with the necessary middleware to implement the CORS policy.\n```javascript\nconst express = require('express');\nconst cors = require('cors');\n\nconst app = express();\n\n// Enable CORS for all routes\napp.use(cors());\n\n// Define allowed origins, methods, and headers\nconst whiteListedOrigins = ['http://client1.com', 'http://client2.com'];\nconst allowedMethods = ['GET', 'POST', 'PUT', 'DELETE'];\nconst allowedHeaders = ['Content-Type', 'Authorization'];\n\n// Function to handle incoming requests and set CORS headers\nfunction handleRequest(req, res) {\n  // Check if origin is whitelisted\n  const origin = req.headers.origin;\n  if (!whiteListedOrigins.includes(origin)) {\n    return res.status(403).send('Forbidden');\n  }\n\n  // Set CORS headers\n  res.header('Access-Control-Allow-Origin', origin);\n  res.header('Access-Control-Allow-Methods', allowedMethods.join(', '));\n  res.header('Access-Control-Allow-Headers', allowedHeaders.join(', '));\n\n  // Handle request (e.g., fetch data from database)\n  const data = fetchDataFromDatabase(req.query.params);\n  res.json(data);\n}\n\n// Define routes\napp.get('/api/data/:id', handleRequest);\napp.post('/api/create', handleRequest);\napp.put('/api/update/:id', handleRequest);\napp.delete('/api/delete/:id', handleRequest);\n\nconst port = 3000;\napp.listen(port, () => {\n  console.log(`Server listening on port ${port}`);\n});\n```\n**Key Components:**\n\n*   `cors` middleware is used to enable CORS for all routes.\n*   We define a whitelist of allowed origins and set the necessary headers in the `handleRequest` function.\n*   The `allowedMethods` and `allowedHeaders` arrays specify which methods and headers are permitted for cross-origin requests.\n\n**Example Request:**\n-------------------\n\nSuppose we have a client at `http://client1.com` making a GET request to our API:\n```bash\nGET /api/data/123 HTTP/1.1\nHost: http://example.com\nOrigin: http://client1.com\nAuthorization: Bearer your_token\n```\nOur server will respond with the following headers, enabling cross-origin access:\n```http\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: http://client1.com\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE\nAccess-Control-Allow-Headers: Content-Type, Authorization\nContent-Type: application/json\n\n{\n    \"data\": {...}\n}\n```\nWith this implementation, clients can make requests to our API without running into CORS issues. Remember to update your client-side code to include the `Origin` header and handle the response headers accordingly.", "code_blocks": [null, null, null]}
