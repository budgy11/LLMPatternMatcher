{"prompt": "Create a forgot password function using javascript", "llm_output": "Certainly! Here's a simple example of a \"Forgot Password\" functionality using JavaScript. This example assumes a basic scenario where users enter their email, and the system sends a password reset link (simulated here).\n\n### Basic Example\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n<title>Forgot Password Example</title>\n</head>\n<body>\n\n<h2>Forgot Password</h2>\n<form id=\"forgotPasswordForm\">\n  <label for=\"email\">Enter your email:</label><br>\n  <input type=\"email\" id=\"email\" name=\"email\" required /><br><br>\n  <button type=\"submit\">Reset Password</button>\n</form>\n\n<div id=\"message\"></div>\n\n<script>\n  document.getElementById('forgotPasswordForm').addEventListener('submit', function(e) {\n    e.preventDefault(); // prevent form from submitting normally\n\n    const email = document.getElementById('email').value;\n    const messageDiv = document.getElementById('message');\n\n    // Simple email validation\n    if (!email || !validateEmail(email)) {\n      messageDiv.innerText = 'Please enter a valid email address.';\n      return;\n    }\n\n    // Simulate sending reset email\n    // In a real application, you'd make an AJAX call to your backend here\n    sendResetLink(email)\n      .then(() => {\n        messageDiv.innerText = `A password reset link has been sent to ${email}.`;\n      })\n      .catch((err) => {\n        messageDiv.innerText = `Error: ${err}`;\n      });\n  });\n\n  function validateEmail(email) {\n    // Basic email pattern\n    const pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return pattern.test(email);\n  }\n\n  function sendResetLink(email) {\n    // Simulate AJAX request to backend\n    return new Promise((resolve, reject) => {\n      // Simulate async behavior\n      setTimeout(() => {\n        // For demonstration, we'll assume success\n        resolve();\n        // To simulate failure, reject with an error message\n        // reject('Failed to send email. Please try again.');\n      }, 1000);\n    });\n  }\n</script>\n\n</body>\n</html>\n```\n\n---\n\n### How it works:\n\n1. User enters their email and clicks \"Reset Password.\"\n2. JavaScript validates the email format.\n3. In real scenarios, you'd send an AJAX request to your server with the email to handle the reset process.\n4. Here, the `sendResetLink` function simulates an asynchronous operation (e.g., server email sending) using `setTimeout`.\n\n---\n\n### Notes for a real implementation:\n\n- Integrate with backend API endpoints to handle password reset requests.\n- Ensure server-side validation and security.\n- Implement proper user notifications and error handling.\n- Use secure methods for generating and validating password reset tokens.\n\nIf you'd like a more specific example (e.g., React, Vue, or with backend code), let me know!", "code_blocks": [null]}
