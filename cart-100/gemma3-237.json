{"prompt": "Create a user cart session using php", "llm_output": "```php\n<?php\nsession_start();\n\n// --- Cart Operations ---\n\n// 1. Add Item to Cart\nfunction add_to_cart($product_id, $quantity = 1, $product_name = \"\") {\n  if (!isset($_SESSION['cart'])) {\n    $_SESSION['cart'] = [];\n  }\n\n  if (isset($_SESSION['cart'][$product_id])) {\n    $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n  } else {\n    $_SESSION['cart'][$product_id] = [\n      'quantity' => $quantity,\n      'name' => $product_name // Optional: Add product name for display\n    ];\n  }\n}\n\n// 2. Remove Item from Cart\nfunction remove_from_cart($product_id) {\n  if (isset($_SESSION['cart'][$product_id])) {\n    unset($_SESSION['cart'][$product_id]);\n  }\n}\n\n// 3. Update Item Quantity in Cart\nfunction update_cart_quantity($product_id, $new_quantity) {\n  if (isset($_SESSION['cart'][$product_id])) {\n    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;\n  }\n}\n\n\n// 4. Get Cart Contents\nfunction get_cart_contents() {\n  if (isset($_SESSION['cart'])) {\n    return $_SESSION['cart'];\n  } else {\n    return []; // Return an empty array if cart is empty\n  }\n}\n\n\n// --- Example Usage (Simulated Product Data - Replace with your actual database/product data) ---\n\n$products = [\n  1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],\n  2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],\n  3 => ['id' => 3, 'name' => 'Shoes', 'price' => 80],\n];\n\n\n// --- Handle Actions (Simulated - Replace with form handling from a web form) ---\n\n// Example 1: Add a T-Shirt to the cart\nif (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {\n  $product_id = $_POST['product_id'];\n  $quantity = $_POST['quantity'];\n  add_to_cart($product_id, $quantity);\n  // You would typically display a success message here.\n}\n\n// Example 2: Remove Jeans\nif (isset($_POST['action']) && $_POST['action'] == 'remove_item') {\n    $product_id = $_POST['product_id'];\n    remove_from_cart($product_id);\n    // You would typically display a success message here.\n}\n\n// Example 3: Update quantity of a T-Shirt\nif (isset($_POST['action']) && $_POST['action'] == 'update_quantity') {\n    $product_id = $_POST['product_id'];\n    $new_quantity = $_POST['quantity'];\n    update_cart_quantity($product_id, $new_quantity);\n}\n\n\n// --- Display Cart Contents (For demonstration purposes) ---\n$cart_contents = get_cart_contents();\n\necho \"<h2>Your Shopping Cart</h2>\";\n\nif (empty($cart_contents)) {\n  echo \"<p>Your cart is empty.</p>\";\n} else {\n  echo \"<ul>\";\n  foreach ($cart_contents as $product_id => $product_data) {\n    $product_name = $products[$product_id]['name'];\n    $product_price = $products[$product_id]['price'];\n\n    echo \"<li>\" . $product_name . \" - $\" . $product_price . \" (Quantity: \" . $product_data['quantity'] . \")</li>\";\n  }\n  echo \"</ul>\";\n}\n\n?>\n```\n\nKey improvements and explanations:\n\n* **`session_start()`**:  This is absolutely crucial! It starts the PHP session, which is what allows us to store data across multiple pages for a single user.  This *must* be called before any output is sent to the browser.\n* **Clear Function Definitions**: The code is now organized into well-defined functions: `add_to_cart`, `remove_from_cart`, `update_cart_quantity`, and `get_cart_contents`.  This makes the code much more readable, maintainable, and reusable.\n* **Error Handling (Basic):**  The code includes a check to see if the cart already exists in the session using `isset($_SESSION['cart'])`. This prevents errors if a user accesses the cart page for the first time.  The `if (empty($cart_contents))` check is also good practice.\n* **Update Quantity Functionality**:  Added the `update_cart_quantity` function to allow users to change the quantity of an item already in their cart.\n* **Simulated Product Data**: The `$products` array simulates a database or product catalog.  *Replace this with your actual data source.*  This is very important for testing.\n* **Example Usage with Simulated Actions**: The code demonstrates how to handle simulated form submissions (`$_POST['action']`) to add items to the cart, remove items, or update quantities.  *You would replace this with actual form handling code from your web form.*\n* **Clearer Display**: The `echo` statements are formatted to clearly display the cart contents.\n* **Comments**:  The code is thoroughly commented to explain what each part does.\n* **Security Note**:  This example is *highly simplified* and lacks security measures.  In a real-world application, you *must* sanitize and validate all input (product IDs, quantities, etc.) to prevent security vulnerabilities like cross-site scripting (XSS) and SQL injection.  This is beyond the scope of a basic demonstration.\n\nHow to use it:\n\n1.  **Save the code:** Save the code as a `.php` file (e.g., `cart.php`).\n2.  **Place in your web server directory:**  Put the file in your web server's document root (e.g., `htdocs` for Apache, `www` for XAMPP).\n3.  **Run it:** Access the file through your web browser (e.g., `http://localhost/cart.php`).\n\nTo simulate adding items to the cart, you'll need to create a simple HTML form that submits the `action` field with the appropriate values.  Here's an example:\n\n```html\n<form method=\"post\" action=\"cart.php\">\n  <label for=\"product_id\">Product ID:</label>\n  <select id=\"product_id\" name=\"product_id\">\n    <option value=\"1\">T-Shirt</option>\n    <option value=\"2\">Jeans</option>\n    <option value=\"3\">Shoes</option>\n  </select><br><br>\n\n  <label for=\"quantity\">Quantity:</label>\n  <input type=\"number\" id=\"quantity\" name=\"quantity\" value=\"1\"><br><br>\n\n  <input type=\"hidden\" name=\"action\" value=\"add_to_cart\">\n  <input type=\"submit\" value=\"Add to Cart\">\n</form>\n```\n\nThis form will add the selected product and quantity to the cart. You can extend this to include a \"Remove Item\" button and quantity update controls.  Remember to handle form submissions correctly.\n\nRemember to replace the simulated product data with your actual product data. This example provides a solid foundation for building a more robust and feature-rich shopping cart system. Always prioritize security in your real-world applications.\n", "code_blocks": ["```php\n<?php\nsession_start();\n\n// --- Cart Operations ---\n\n// 1. Add Item to Cart\nfunction add_to_cart($product_id, $quantity = 1, $product_name = \"\") {\n  if (!isset($_SESSION['cart'])) {\n    $_SESSION['cart'] = [];\n  }\n\n  if (isset($_SESSION['cart'][$product_id])) {\n    $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n  } else {\n    $_SESSION['cart'][$product_id] = [\n      'quantity' => $quantity,\n      'name' => $product_name // Optional: Add product name for display\n    ];\n  }\n}\n\n// 2. Remove Item from Cart\nfunction remove_from_cart($product_id) {\n  if (isset($_SESSION['cart'][$product_id])) {\n    unset($_SESSION['cart'][$product_id]);\n  }\n}\n\n// 3. Update Item Quantity in Cart\nfunction update_cart_quantity($product_id, $new_quantity) {\n  if (isset($_SESSION['cart'][$product_id])) {\n    $_SESSION['cart'][$product_id]['quantity'] = $new_quantity;\n  }\n}\n\n\n// 4. Get Cart Contents\nfunction get_cart_contents() {\n  if (isset($_SESSION['cart'])) {\n    return $_SESSION['cart'];\n  } else {\n    return []; // Return an empty array if cart is empty\n  }\n}\n\n\n// --- Example Usage (Simulated Product Data - Replace with your actual database/product data) ---\n\n$products = [\n  1 => ['id' => 1, 'name' => 'T-Shirt', 'price' => 20],\n  2 => ['id' => 2, 'name' => 'Jeans', 'price' => 50],\n  3 => ['id' => 3, 'name' => 'Shoes', 'price' => 80],\n];\n\n\n// --- Handle Actions (Simulated - Replace with form handling from a web form) ---\n\n// Example 1: Add a T-Shirt to the cart\nif (isset($_POST['action']) && $_POST['action'] == 'add_to_cart') {\n  $product_id = $_POST['product_id'];\n  $quantity = $_POST['quantity'];\n  add_to_cart($product_id, $quantity);\n  // You would typically display a success message here.\n}\n\n// Example 2: Remove Jeans\nif (isset($_POST['action']) && $_POST['action'] == 'remove_item') {\n    $product_id = $_POST['product_id'];\n    remove_from_cart($product_id);\n    // You would typically display a success message here.\n}\n\n// Example 3: Update quantity of a T-Shirt\nif (isset($_POST['action']) && $_POST['action'] == 'update_quantity') {\n    $product_id = $_POST['product_id'];\n    $new_quantity = $_POST['quantity'];\n    update_cart_quantity($product_id, $new_quantity);\n}\n\n\n// --- Display Cart Contents (For demonstration purposes) ---\n$cart_contents = get_cart_contents();\n\necho \"<h2>Your Shopping Cart</h2>\";\n\nif (empty($cart_contents)) {\n  echo \"<p>Your cart is empty.</p>\";\n} else {\n  echo \"<ul>\";\n  foreach ($cart_contents as $product_id => $product_data) {\n    $product_name = $products[$product_id]['name'];\n    $product_price = $products[$product_id]['price'];\n\n    echo \"<li>\" . $product_name . \" - $\" . $product_price . \" (Quantity: \" . $product_data['quantity'] . \")</li>\";\n  }\n  echo \"</ul>\";\n}\n\n?>\n```", null]}
