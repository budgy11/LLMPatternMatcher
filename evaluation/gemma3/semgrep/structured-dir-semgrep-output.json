{"version":"1.125.0","results":[{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"cart/remove_from_cart.php","start":{"line":6,"col":14,"offset":101},"end":{"line":6,"col":66,"offset":153},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"purchase/product.php","start":{"line":10,"col":8,"offset":121},"end":{"line":10,"col":47,"offset":160},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"review/product.php","start":{"line":13,"col":12,"offset":219},"end":{"line":13,"col":70,"offset":277},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"review/review.php","start":{"line":10,"col":12,"offset":224},"end":{"line":10,"col":162,"offset":374},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"search/index.php","start":{"line":9,"col":12,"offset":215},"end":{"line":9,"col":125,"offset":328},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.exec-use.exec-use","path":"search/index.php","start":{"line":10,"col":5,"offset":334},"end":{"line":10,"col":41,"offset":370},"extra":{"message":"Executing non-constant commands. This can lead to command injection.","metadata":{"cwe":["CWE-94: Improper Control of Generation of Code ('Code Injection')"],"references":["https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php"],"category":"security","technology":["php"],"owasp":["A03:2021 - Injection"],"cwe2022-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/php.lang.security.exec-use.exec-use","shortlink":"https://sg.run/5Q1j"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.exec-use.exec-use","path":"search/products.php","start":{"line":5,"col":1,"offset":104},"end":{"line":5,"col":37,"offset":140},"extra":{"message":"Executing non-constant commands. This can lead to command injection.","metadata":{"cwe":["CWE-94: Improper Control of Generation of Code ('Code Injection')"],"references":["https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php"],"category":"security","technology":["php"],"owasp":["A03:2021 - Injection"],"cwe2022-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/php.lang.security.exec-use.exec-use","shortlink":"https://sg.run/5Q1j"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[],"paths":{"scanned":["cart/add_to_cart.php","cart/cart.php","cart/checkout.php","cart/database.php","cart/remove_from_cart.php","forgot-password/database.php","forgot-password/forgot-password.php","login/db_connect.php","login/login.php","purchase/cart.php","purchase/db_connect.php","purchase/product.php","purchase/products.php","purchase/purchase.php","registration/database.php","registration/registration.php","review/database.php","review/index.php","review/product.php","review/review-secured.php","review/review.php","search/database.php","search/index.php","search/products.php","search/secure-statements-example.php"]},"time":{"rules":[],"rules_parse_time":0.7309820652008057,"profiling_times":{"config_time":2.183866024017334,"core_time":1.0585973262786865,"ignores_time":0.0006563663482666016,"total_time":3.243417263031006},"parsing_time":{"total_time":0.12926125526428223,"per_file_time":{"mean":0.00517045021057129,"std_dev":1.439717897974333e-05},"very_slow_files":[]},"targets":[],"total_bytes":0,"max_memory_bytes":1070129024},"skipped_rules":[]}