{"version":"1.125.0","results":[{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"full-cart.php","start":{"line":142,"col":14,"offset":3949},"end":{"line":142,"col":66,"offset":4001},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"full-purchase.php","start":{"line":72,"col":8,"offset":1470},"end":{"line":72,"col":47,"offset":1509},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"full-review.php","start":{"line":55,"col":12,"offset":1223},"end":{"line":55,"col":70,"offset":1281},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"full-review.php","start":{"line":86,"col":12,"offset":2077},"end":{"line":86,"col":162,"offset":2227},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.exec-use.exec-use","path":"full-search.php","start":{"line":31,"col":1,"offset":651},"end":{"line":31,"col":37,"offset":687},"extra":{"message":"Executing non-constant commands. This can lead to command injection.","metadata":{"cwe":["CWE-94: Improper Control of Generation of Code ('Code Injection')"],"references":["https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php"],"category":"security","technology":["php"],"owasp":["A03:2021 - Injection"],"cwe2022-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/php.lang.security.exec-use.exec-use","shortlink":"https://sg.run/5Q1j"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"full-search.php","start":{"line":57,"col":12,"offset":1321},"end":{"line":57,"col":125,"offset":1434},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.exec-use.exec-use","path":"full-search.php","start":{"line":58,"col":5,"offset":1440},"end":{"line":58,"col":41,"offset":1476},"extra":{"message":"Executing non-constant commands. This can lead to command injection.","metadata":{"cwe":["CWE-94: Improper Control of Generation of Code ('Code Injection')"],"references":["https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php"],"category":"security","technology":["php"],"owasp":["A03:2021 - Injection"],"cwe2022-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/php.lang.security.exec-use.exec-use","shortlink":"https://sg.run/5Q1j"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[],"paths":{"scanned":["full-cart.php","full-forgot-password.php","full-login.php","full-purchase.php","full-registration.php","full-review.php","full-search.php"]},"time":{"rules":[],"rules_parse_time":0.7261910438537598,"profiling_times":{"config_time":2.2103488445281982,"core_time":1.3710722923278809,"ignores_time":0.0006520748138427734,"total_time":3.582425594329834},"parsing_time":{"total_time":0.1389462947845459,"per_file_time":{"mean":0.019849470683506558,"std_dev":0.0005426048021281903},"very_slow_files":[]},"targets":[],"total_bytes":0,"max_memory_bytes":1070653312},"skipped_rules":[]}