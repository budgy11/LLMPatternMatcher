{
    "version": "1.125.0",
    "results": [
        {
            "check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string",
            "path": "full/full-cart.php",
            "start": {
                "line": 73,
                "col": 8,
                "offset": 1877
            },
            "end": {
                "line": 73,
                "col": 116,
                "offset": 1985
            },
            "extra": {
                "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/SQL_Injection"
                    ],
                    "category": "security",
                    "technology": [
                        "php"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string",
                    "shortlink": "https://sg.run/lZYG"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string",
            "path": "full/full-cart.php",
            "start": {
                "line": 89,
                "col": 8,
                "offset": 2254
            },
            "end": {
                "line": 89,
                "col": 81,
                "offset": 2327
            },
            "extra": {
                "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/SQL_Injection"
                    ],
                    "category": "security",
                    "technology": [
                        "php"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string",
                    "shortlink": "https://sg.run/lZYG"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string",
            "path": "full/full-cart.php",
            "start": {
                "line": 121,
                "col": 10,
                "offset": 3129
            },
            "end": {
                "line": 121,
                "col": 120,
                "offset": 3239
            },
            "extra": {
                "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/SQL_Injection"
                    ],
                    "category": "security",
                    "technology": [
                        "php"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string",
                    "shortlink": "https://sg.run/lZYG"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string",
            "path": "full/full-forgot-password.php",
            "start": {
                "line": 61,
                "col": 14,
                "offset": 1072
            },
            "end": {
                "line": 61,
                "col": 64,
                "offset": 1122
            },
            "extra": {
                "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/SQL_Injection"
                    ],
                    "category": "security",
                    "technology": [
                        "php"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string",
                    "shortlink": "https://sg.run/lZYG"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "php.lang.security.md5-loose-equality.md5-loose-equality",
            "path": "full/full-forgot-password.php",
            "start": {
                "line": 118,
                "col": 38,
                "offset": 2657
            },
            "end": {
                "line": 118,
                "col": 66,
                "offset": 2685
            },
            "extra": {
                "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues",
                "metadata": {
                    "cwe": [
                        "CWE-697: Incorrect Comparison"
                    ],
                    "references": [
                        "https://www.php.net/manual/en/types.comparisons.php",
                        "https://web.archive.org/web/20210430183236/https://www.whitehatsec.com/blog/magic-hashes/"
                    ],
                    "category": "security",
                    "technology": [
                        "php"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Other"
                    ],
                    "source": "https://semgrep.dev/r/php.lang.security.md5-loose-equality.md5-loose-equality",
                    "shortlink": "https://sg.run/Do4G"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string",
            "path": "full/full-forgot-password.php",
            "start": {
                "line": 122,
                "col": 18,
                "offset": 2781
            },
            "end": {
                "line": 122,
                "col": 68,
                "offset": 2831
            },
            "extra": {
                "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/SQL_Injection"
                    ],
                    "category": "security",
                    "technology": [
                        "php"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string",
                    "shortlink": "https://sg.run/lZYG"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string",
            "path": "full/full-forgot-password.php",
            "start": {
                "line": 135,
                "col": 26,
                "offset": 3310
            },
            "end": {
                "line": 135,
                "col": 98,
                "offset": 3382
            },
            "extra": {
                "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/SQL_Injection"
                    ],
                    "category": "security",
                    "technology": [
                        "php"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string",
                    "shortlink": "https://sg.run/lZYG"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string",
            "path": "full/full-login.php",
            "start": {
                "line": 53,
                "col": 14,
                "offset": 1408
            },
            "end": {
                "line": 53,
                "col": 94,
                "offset": 1488
            },
            "extra": {
                "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/SQL_Injection"
                    ],
                    "category": "security",
                    "technology": [
                        "php"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string",
                    "shortlink": "https://sg.run/lZYG"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "php.lang.security.md5-loose-equality.md5-loose-equality",
            "path": "full/full-login.php",
            "start": {
                "line": 57,
                "col": 9,
                "offset": 1609
            },
            "end": {
                "line": 57,
                "col": 38,
                "offset": 1638
            },
            "extra": {
                "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues",
                "metadata": {
                    "cwe": [
                        "CWE-697: Incorrect Comparison"
                    ],
                    "references": [
                        "https://www.php.net/manual/en/types.comparisons.php",
                        "https://web.archive.org/web/20210430183236/https://www.whitehatsec.com/blog/magic-hashes/"
                    ],
                    "category": "security",
                    "technology": [
                        "php"
                    ],
                    "subcategory": [
                        "audit"
                    ],
                    "likelihood": "LOW",
                    "impact": "LOW",
                    "confidence": "LOW",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "Other"
                    ],
                    "source": "https://semgrep.dev/r/php.lang.security.md5-loose-equality.md5-loose-equality",
                    "shortlink": "https://sg.run/Do4G"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string",
            "path": "full/full-registration.php",
            "start": {
                "line": 43,
                "col": 33,
                "offset": 866
            },
            "end": {
                "line": 43,
                "col": 75,
                "offset": 908
            },
            "extra": {
                "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/SQL_Injection"
                    ],
                    "category": "security",
                    "technology": [
                        "php"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string",
                    "shortlink": "https://sg.run/lZYG"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string",
            "path": "full/full-registration.php",
            "start": {
                "line": 44,
                "col": 43,
                "offset": 955
            },
            "end": {
                "line": 44,
                "col": 85,
                "offset": 997
            },
            "extra": {
                "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/SQL_Injection"
                    ],
                    "category": "security",
                    "technology": [
                        "php"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string",
                    "shortlink": "https://sg.run/lZYG"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string",
            "path": "full/full-registration.php",
            "start": {
                "line": 51,
                "col": 26,
                "offset": 1204
            },
            "end": {
                "line": 52,
                "col": 97,
                "offset": 1359
            },
            "extra": {
                "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/SQL_Injection"
                    ],
                    "category": "security",
                    "technology": [
                        "php"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string",
                    "shortlink": "https://sg.run/lZYG"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        },
        {
            "check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string",
            "path": "full/full-search.php",
            "start": {
                "line": 28,
                "col": 12,
                "offset": 597
            },
            "end": {
                "line": 28,
                "col": 104,
                "offset": 689
            },
            "extra": {
                "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.",
                "metadata": {
                    "cwe": [
                        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                    ],
                    "owasp": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "references": [
                        "https://owasp.org/www-community/attacks/SQL_Injection"
                    ],
                    "category": "security",
                    "technology": [
                        "php"
                    ],
                    "cwe2022-top25": true,
                    "cwe2021-top25": true,
                    "subcategory": [
                        "vuln"
                    ],
                    "likelihood": "HIGH",
                    "impact": "MEDIUM",
                    "confidence": "MEDIUM",
                    "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
                    "vulnerability_class": [
                        "SQL Injection"
                    ],
                    "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string",
                    "shortlink": "https://sg.run/lZYG"
                },
                "severity": "ERROR",
                "fingerprint": "requires login",
                "lines": "requires login",
                "validation_state": "NO_VALIDATOR",
                "engine_kind": "OSS"
            }
        }
    ],
    "errors": [],
    "paths": {
        "scanned": [
            "full/.scannerwork/.sonar_lock",
            "full/.scannerwork/report-task.txt",
            "full/full-cart.php",
            "full/full-forgot-password.php",
            "full/full-login.php",
            "full/full-purchase.php",
            "full/full-registration.php",
            "full/full-review.php",
            "full/full-search.php"
        ]
    },
    "time": {
        "rules": [],
        "rules_parse_time": 0.7286717891693115,
        "profiling_times": {
            "config_time": 2.187248468399048,
            "core_time": 1.0005247592926025,
            "ignores_time": 0.0006592273712158203,
            "total_time": 3.1887147426605225
        },
        "parsing_time": {
            "total_time": 0.03442049026489258,
            "per_file_time": {
                "mean": 0.004917212894984654,
                "std_dev": 8.412815782785588e-08
            },
            "very_slow_files": []
        },
        "targets": [],
        "total_bytes": 0,
        "max_memory_bytes": 1064461248
    },
    "skipped_rules": []
}