{"version":"1.125.0","results":[{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"cart/cart_add.php","start":{"line":11,"col":8,"offset":189},"end":{"line":11,"col":116,"offset":297},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"cart/cart_remove.php","start":{"line":10,"col":8,"offset":170},"end":{"line":10,"col":81,"offset":243},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"cart/cart_update.php","start":{"line":26,"col":10,"offset":703},"end":{"line":26,"col":120,"offset":813},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"forgot-password/forgot-password.php","start":{"line":17,"col":14,"offset":385},"end":{"line":17,"col":64,"offset":435},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"forgot-password/reset-password.php","start":{"line":22,"col":18,"offset":540},"end":{"line":22,"col":68,"offset":590},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"forgot-password/reset-password.php","start":{"line":35,"col":26,"offset":1069},"end":{"line":35,"col":98,"offset":1141},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"login/login.php","start":{"line":53,"col":14,"offset":1408},"end":{"line":53,"col":94,"offset":1488},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.md5-loose-equality.md5-loose-equality","path":"login/login.php","start":{"line":57,"col":9,"offset":1609},"end":{"line":57,"col":38,"offset":1638},"extra":{"message":"Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues","metadata":{"cwe":["CWE-697: Incorrect Comparison"],"references":["https://www.php.net/manual/en/types.comparisons.php","https://web.archive.org/web/20210430183236/https://www.whitehatsec.com/blog/magic-hashes/"],"category":"security","technology":["php"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/php.lang.security.md5-loose-equality.md5-loose-equality","shortlink":"https://sg.run/Do4G"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"registration/registration.php","start":{"line":15,"col":33,"offset":336},"end":{"line":15,"col":75,"offset":378},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"registration/registration.php","start":{"line":16,"col":43,"offset":425},"end":{"line":16,"col":85,"offset":467},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"registration/registration.php","start":{"line":23,"col":26,"offset":674},"end":{"line":24,"col":97,"offset":829},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"php.lang.security.injection.tainted-sql-string.tainted-sql-string","path":"search/search.php","start":{"line":12,"col":12,"offset":275},"end":{"line":12,"col":104,"offset":367},"extra":{"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","technology":["php"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/lZYG"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[],"paths":{"scanned":["cart/.scannerwork/.sonar_lock","cart/.scannerwork/report-task.txt","cart/cart.php","cart/cart_add.php","cart/cart_remove.php","cart/cart_update.php","cart/db.php","forgot-password/config.php","forgot-password/footer.php","forgot-password/forgot-password.php","forgot-password/header.php","forgot-password/reset-password.php","login/login.php","purchase/includes/config.php","purchase/includes/database.php","purchase/includes/functions.php","purchase/puchase.php","registration/config.php","registration/db_connect.php","registration/registration.php","review/index.php","review/product.php","review/review.php","search/config.php","search/search.php"]},"time":{"rules":[],"rules_parse_time":0.7232580184936523,"profiling_times":{"config_time":2.224090337753296,"core_time":0.9937596321105957,"ignores_time":0.0006327629089355469,"total_time":3.2187469005584717},"parsing_time":{"total_time":0.12134885787963867,"per_file_time":{"mean":0.005276037299114724,"std_dev":1.2773833944674977e-05},"very_slow_files":[]},"targets":[],"total_bytes":0,"max_memory_bytes":1064739776},"skipped_rules":[]}