{"model":"llama3.1","created_at":"2025-07-04T18:36:23.317461319Z","message":{"role":"assistant","content":"Here is an example of a basic e-commerce website with a `purchase.php` page that uses PHP and MySQL to manage purchases. This example assumes you have already created a MySQL database and populated it with some sample data.\n\n**Directory Structure:**\n\n* `index.php`: Main entry point for the website\n* `header.php`: Shared header template for all pages\n* `footer.php`: Shared footer template for all pages\n* `purchase.php`: Page to handle purchases\n* `includes/` directory:\n\t+ `config.php`: Configuration file with database credentials and other settings\n\t+ `database.php`: File that connects to the MySQL database and provides functions for interacting with it\n\t+ `functions.php`: File with custom PHP functions used throughout the website\n\n**Database Schema:**\n\nCreate a MySQL database named `ecommerce` and add the following tables:\n\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE orders (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  customer_name VARCHAR(255),\n  email VARCHAR(255),\n  order_date DATE,\n  total DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  FOREIGN KEY (order_id) REFERENCES orders(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n**Files:**\n\n### `config.php`\n```php\n\u003c?php\n// Database credentials\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'ecommerce');\n\n// Other settings\ndefine('SITE_TITLE', 'E-Commerce Website');\n?\u003e\n```\n\n### `database.php`\n```php\n\u003c?php\nclass Database {\n  private $conn;\n\n  public function connect() {\n    $this-\u003econn = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n    if ($this-\u003econn-\u003econnect_error) {\n      die(\"Connection failed: \" . $this-\u003econn-\u003econnect_error);\n    }\n  }\n\n  public function query($sql) {\n    return $this-\u003econn-\u003equery($sql);\n  }\n\n  public function getResults() {\n    $results = array();\n    while ($row = $this-\u003econn-\u003efetch_assoc()) {\n      $results[] = $row;\n    }\n    return $results;\n  }\n\n  public function closeConnection() {\n    $this-\u003econn-\u003eclose();\n  }\n}\n?\u003e\n```\n\n### `functions.php`\n```php\n\u003c?php\nfunction getProducts() {\n  $db = new Database();\n  $db-\u003econnect();\n  $query = \"SELECT * FROM products\";\n  $result = $db-\u003equery($query);\n  $products = array();\n  while ($row = $result-\u003efetch_assoc()) {\n    $products[] = $row;\n  }\n  return $products;\n}\n\nfunction createOrder() {\n  global $_POST;\n  $db = new Database();\n  $db-\u003econnect();\n  $sql = \"INSERT INTO orders (customer_name, email, order_date, total) VALUES (?, ?, NOW(), ?)\";\n  $stmt = $db-\u003econn-\u003eprepare($sql);\n  $stmt-\u003ebind_param(\"sss\", $_POST['customer_name'], $_POST['email'], $_POST['total']);\n  if ($stmt-\u003eexecute()) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction addOrderItem() {\n  global $_POST;\n  $db = new Database();\n  $db-\u003econnect();\n  $sql = \"INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)\";\n  $stmt = $db-\u003econn-\u003eprepare($sql);\n  $stmt-\u003ebind_param(\"iis\", $_POST['order_id'], $_POST['product_id'], $_POST['quantity']);\n  if ($stmt-\u003eexecute()) {\n    return true;\n  } else {\n    return false;\n  }\n}\n?\u003e\n```\n\n### `purchase.php`\n```php\n\u003c?php\nrequire_once 'includes/header.php';\nrequire_once 'includes/config.php';\n\nif (isset($_POST['submit'])) {\n  $products = getProducts();\n  if ($_POST['customer_name'] \u0026\u0026 $_POST['email']) {\n    // Create order\n    if (createOrder()) {\n      foreach ($products as $product) {\n        if (isset($_POST[$product['id']])) {\n          addOrderItem(array(\n            'order_id' =\u003e $_POST['last_order_id'],\n            'product_id' =\u003e $product['id'],\n            'quantity' =\u003e $_POST[$product['id']]\n          ));\n        }\n      }\n    } else {\n      echo \"Error creating order\";\n    }\n  }\n}\n\n$products = getProducts();\n?\u003e\n\u003cdiv class=\"container\"\u003e\n  \u003ch1\u003ePurchase\u003c/h1\u003e\n  \u003cform action=\"\" method=\"post\"\u003e\n    \u003c?php foreach ($products as $product) { ?\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"\u003c?php echo $product['id']; ?\u003e\"\u003e\u003c?php echo $product['name']; ?\u003e\u003c/label\u003e\n        \u003cinput type=\"number\" id=\"\u003c?php echo $product['id']; ?\u003e\" name=\"\u003c?php echo $product['id']; ?\u003e\"\u003e\n      \u003c/div\u003e\n    \u003c?php } ?\u003e\n    \u003cdiv class=\"form-group\"\u003e\n      \u003clabel for=\"customer_name\"\u003eCustomer Name:\u003c/label\u003e\n      \u003cinput type=\"text\" id=\"customer_name\" name=\"customer_name\"\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"form-group\"\u003e\n      \u003clabel for=\"email\"\u003eEmail:\u003c/label\u003e\n      \u003cinput type=\"email\" id=\"email\" name=\"email\"\u003e\n    \u003c/div\u003e\n    \u003cbutton type=\"submit\" name=\"submit\"\u003ePlace Order\u003c/button\u003e\n  \u003c/form\u003e\n\n  \u003c?php if (isset($_POST['last_order_id'])) { ?\u003e\n    \u003cp\u003eOrder ID: \u003c?php echo $_POST['last_order_id']; ?\u003e\u003c/p\u003e\n    \u003cp\u003eTotal: \u003c?php echo $_POST['total']; ?\u003e\u003c/p\u003e\n  \u003c?php } ?\u003e\n\n  \u003c?php require_once 'includes/footer.php'; ?\u003e\n\u003c/div\u003e\n```\n\nThis example assumes you have already set up a MySQL database with the tables defined above. The `purchase.php` page retrieves all products from the database and displays them in a form. When the user submits the form, it creates an order and adds each selected product to the order.\n\nPlease note that this is a basic example and does not include any error checking or validation on the client-side. You should always use prepared statements when interacting with databases to prevent SQL injection attacks."},"done_reason":"stop","done":true,"total_duration":12696732628,"load_duration":9960110,"prompt_eval_count":38,"prompt_eval_duration":4146842,"eval_count":1373,"eval_duration":12682255015}