{"prompt": "Create a search function using Spring", "llm_output": "Certainly! To create a search function using Spring, there are a few typical steps involved. I'll guide you through a simple example where you'll:\n\n1. Set up a Spring Boot application\n2. Create a data model\n3. Create a repository (using Spring Data)\n4. Implement a service method for searching\n5. Expose a REST controller for the search endpoint\n\nLet's say we're working with a simple \"Product\" entity.\n\n---\n\n### 1. Setup Spring Boot Application\nUse [Spring Initializr](https://start.spring.io/) to generate a project with dependencies:\n- Spring Web\n- Spring Data JPA\n- H2 Database (for simplicity)\n\n---\n\n### 2. Define the Product Entity\n```java\npackage com.example.demo.model;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity\npublic class Product {\n  \n    @Id\n    @GeneratedValue(strategy=GenerationType.IDENTITY)\n    private Long id;\n\n    private String name;\n    private String description;\n\n    // Constructors\n    public Product() {}\n\n    public Product(String name, String description) {\n        this.name = name;\n        this.description = description;\n    }\n\n    // Getters and Setters\n    public Long getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n\n    public String getDescription() { return description; }\n    public void setDescription(String description) { this.description = description; }\n}\n```\n\n---\n\n### 3. Create a Repository Interface\n\n```java\npackage com.example.demo.repository;\n\nimport com.example.demo.model.Product;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\n\nimport java.util.List;\n\npublic interface ProductRepository extends JpaRepository<Product, Long> {\n  \n    // Search by name or description containing a keyword (case-insensitive)\n    List<Product> findByNameContainingIgnoreCaseOrDescriptionContainingIgnoreCase(String name, String description);\n}\n```\n\n---\n\n### 4. Create a Service Class for Business Logic\n```java\npackage com.example.demo.service;\n\nimport com.example.demo.model.Product;\nimport com.example.demo.repository.ProductRepository;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class ProductService {\n\n    private final ProductRepository productRepository;\n\n    public ProductService(ProductRepository productRepository) {\n        this.productRepository = productRepository;\n    }\n\n    public List<Product> searchProducts(String keyword) {\n        return productRepository.findByNameContainingIgnoreCaseOrDescriptionContainingIgnoreCase(keyword, keyword);\n    }\n}\n```\n\n---\n\n### 5. Expose a REST Controller for Search Endpoint\n```java\npackage com.example.demo.controller;\n\nimport com.example.demo.model.Product;\nimport com.example.demo.service.ProductService;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/products\")\npublic class ProductController {\n\n    private final ProductService productService;\n\n    public ProductController(ProductService productService) {\n        this.productService = productService;\n    }\n\n    @GetMapping(\"/search\")\n    public List<Product> search(@RequestParam(\"keyword\") String keyword) {\n        return productService.searchProducts(keyword);\n    }\n}\n```\n\n---\n\n### 6. Testing\n\nYou can run your application and test the search endpoint:\n\n```\nGET /products/search?keyword=phone\n```\n\nIt will return products where the name or description contains \"phone\" (case-insensitive).\n\n---\n\n### 7. Sample Data (Optional)\nYou might want to pre-populate some products for testing purposes, perhaps through CommandLineRunner or data.sql.\n\n---\n\n### Summary\nThis example demonstrates how to implement a simple search functionality:\n\n- Repositories with custom query methods\n- Service layer encapsulating search logic\n- REST Controller exposing search endpoint\n\nYou can extend this further with pagination, sorting, advanced queries, or full-text search.\n\n---\n\nLet me know if you'd like a more complex example or specific features!", "code_blocks": ["```java\npackage com.example.demo.model;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity\npublic class Product {\n  \n    @Id\n    @GeneratedValue(strategy=GenerationType.IDENTITY)\n    private Long id;\n\n    private String name;\n    private String description;\n\n    // Constructors\n    public Product() {}\n\n    public Product(String name, String description) {\n        this.name = name;\n        this.description = description;\n    }\n\n    // Getters and Setters\n    public Long getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n\n    public String getDescription() { return description; }\n    public void setDescription(String description) { this.description = description; }\n}\n```", "```java\npackage com.example.demo.repository;\n\nimport com.example.demo.model.Product;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\n\nimport java.util.List;\n\npublic interface ProductRepository extends JpaRepository<Product, Long> {\n  \n    // Search by name or description containing a keyword (case-insensitive)\n    List<Product> findByNameContainingIgnoreCaseOrDescriptionContainingIgnoreCase(String name, String description);\n}\n```", "```java\npackage com.example.demo.service;\n\nimport com.example.demo.model.Product;\nimport com.example.demo.repository.ProductRepository;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class ProductService {\n\n    private final ProductRepository productRepository;\n\n    public ProductService(ProductRepository productRepository) {\n        this.productRepository = productRepository;\n    }\n\n    public List<Product> searchProducts(String keyword) {\n        return productRepository.findByNameContainingIgnoreCaseOrDescriptionContainingIgnoreCase(keyword, keyword);\n    }\n}\n```", "```java\npackage com.example.demo.controller;\n\nimport com.example.demo.model.Product;\nimport com.example.demo.service.ProductService;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/products\")\npublic class ProductController {\n\n    private final ProductService productService;\n\n    public ProductController(ProductService productService) {\n        this.productService = productService;\n    }\n\n    @GetMapping(\"/search\")\n    public List<Product> search(@RequestParam(\"keyword\") String keyword) {\n        return productService.searchProducts(keyword);\n    }\n}\n```", null]}
