{"prompt": "Create a session cookie using Spring", "llm_output": "Creating a session cookie in a Spring application typically involves configuring your application to manage HTTP sessions, which are backed by cookies by default. When a user starts a session, a session ID is generated and sent back to the client as a cookie (usually named `JSESSIONID`), and this cookie is then used for subsequent requests to identify the session.\n\nHere's how you can ensure session cookies are created and managed in a Spring Boot application:\n\n### 1. Basic setup: Ensure Spring Boot manages sessions\n\nSpring Boot applications using `spring-boot-starter-web` will automatically create a session and a corresponding cookie when you start storing something in the session.\n\n```java\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.servlet.http.HttpSession;\n\n@RestController\npublic class SessionController {\n\n    @GetMapping(\"/create-session\")\n    public String createSession(HttpSession session) {\n        session.setAttribute(\"key\", \"value\");\n        return \"Session created with ID: \" + session.getId();\n    }\n}\n```\n\n### 2. Enabling and customizing session cookie\n\nSpring's default session handling will create a cookie named `JSESSIONID`. You can customize its properties using `application.properties` or Java configuration.\n\n**Using `application.properties`:**\n\n```properties\n# Set the session cookie name\nserver.servlet.session.cookie.name=MYSESSIONID\n\n# Set the cookie to be secure\nserver.servlet.session.cookie.secure=true\n\n# Set the cookie's max age (in seconds)\nserver.servlet.session.cookie.max-age=3600\n\n# Set the domain (optional)\nserver.servlet.session.cookie.domain=example.com\n```\n\n**Or, programmatically configure session cookie:**\n\n```java\nimport org.springframework.boot.web.server.Cookie;\nimport org.springframework.boot.web.servlet.server.Session;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SessionConfig {\n\n    @Bean\n    public org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory> cookieCustomizer() {\n        return (factory) -> factory.addContextCustomizers((context) -> {\n            context.setSessionCookiePath(\"/\");\n            context.setSessionCookieName(\"MYSESSIONID\");\n            // Additional cookie properties\n        });\n    }\n}\n```\n\n### 3. Use Spring Session (Optional)\n\nFor more advanced session management across multiple servers or persistence, you can use [Spring Session](https://spring.io/projects/spring-session), which allows storing sessions in Redis, JDBC, Hazelcast, etc. Spring Session can create and manage session cookies similarly, with more control.\n\n---\n\n### Summary:\n\n- Spring Boot automatically creates a session cookie (`JSESSIONID`) when you store data in `HttpSession`.\n- You can customize the cookie's name, security, and lifespan using configuration properties.\n- For advanced requirements, consider using Spring Session.\n\n---\n\nWould you like a full example, or do you need help with customizing specific cookie attributes?", "code_blocks": ["```java\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.servlet.http.HttpSession;\n\n@RestController\npublic class SessionController {\n\n    @GetMapping(\"/create-session\")\n    public String createSession(HttpSession session) {\n        session.setAttribute(\"key\", \"value\");\n        return \"Session created with ID: \" + session.getId();\n    }\n}\n```", null, "```java\nimport org.springframework.boot.web.server.Cookie;\nimport org.springframework.boot.web.servlet.server.Session;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SessionConfig {\n\n    @Bean\n    public org.springframework.boot.web.server.WebServerFactoryCustomizer<org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory> cookieCustomizer() {\n        return (factory) -> factory.addContextCustomizers((context) -> {\n            context.setSessionCookiePath(\"/\");\n            context.setSessionCookieName(\"MYSESSIONID\");\n            // Additional cookie properties\n        });\n    }\n}\n```"]}
