{"prompt": "Create a file upload function for PDFs using php", "llm_output": "Certainly! To create a file upload function for PDFs using PHP, you'll need to:\n\n1. Create an HTML form to allow users to select and upload PDF files.\n2. Handle the uploaded file securely in PHP, including validation to ensure only PDFs are accepted.\n3. Save the uploaded file to a server directory.\n\nHere's a simple example to get you started:\n\n### 1. HTML Form (`upload.html`)\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>Upload PDF</title>\n</head>\n<body>\n    <h2>Upload a PDF File</h2>\n    <form action=\"upload.php\" method=\"post\" enctype=\"multipart/form-data\">\n        <input type=\"file\" name=\"pdf_file\" accept=\".pdf\" required />\n        <button type=\"submit\">Upload</button>\n    </form>\n</body>\n</html>\n```\n\n### 2. PHP Upload Handler (`upload.php`)\n```php\n<?php\n// Directory where files will be saved\n$uploadDir = 'uploads/';\n\n// Create directory if it doesn't exist\nif (!is_dir($uploadDir)) {\n    mkdir($uploadDir, 0755, true);\n}\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    if (isset($_FILES['pdf_file'])) {\n        $file = $_FILES['pdf_file'];\n\n        // Basic validation\n        $fileType = mime_content_type($file['tmp_name']);\n        $allowedType = 'application/pdf';\n\n        if ($fileType !== $allowedType) {\n            die(\"Error: Only PDF files are allowed.\");\n        }\n\n        // Generate a unique filename to prevent overwriting\n        $fileName = basename($file['name']);\n        $filePath = $uploadDir . uniqid() . '-' . $fileName;\n\n        // Move uploaded file to the target directory\n        if (move_uploaded_file($file['tmp_name'], $filePath)) {\n            echo \"File uploaded successfully: \" . htmlspecialchars($fileName);\n        } else {\n            echo \"Error uploading the file.\";\n        }\n    } else {\n        echo \"No file was uploaded.\";\n    }\n}\n?>\n```\n\n---\n\n### Key points:\n- The HTML form uses `enctype=\"multipart/form-data\"` for file uploads.\n- The PHP script validates the MIME type to ensure only PDFs are accepted.\n- Files are saved with a unique prefix to prevent filename collisions.\n- Make sure the `uploads/` directory has write permissions.\n\n### Additional Considerations:\n- Implement more robust validation (e.g., file size limits).\n- Add error handling.\n- Sanitize filenames to prevent security issues.\n- Restrict file types more securely by checking extensions and MIME types.\n\nWould you like a more advanced version or additional features?", "code_blocks": [null, "```php\n<?php\n// Directory where files will be saved\n$uploadDir = 'uploads/';\n\n// Create directory if it doesn't exist\nif (!is_dir($uploadDir)) {\n    mkdir($uploadDir, 0755, true);\n}\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    if (isset($_FILES['pdf_file'])) {\n        $file = $_FILES['pdf_file'];\n\n        // Basic validation\n        $fileType = mime_content_type($file['tmp_name']);\n        $allowedType = 'application/pdf';\n\n        if ($fileType !== $allowedType) {\n            die(\"Error: Only PDF files are allowed.\");\n        }\n\n        // Generate a unique filename to prevent overwriting\n        $fileName = basename($file['name']);\n        $filePath = $uploadDir . uniqid() . '-' . $fileName;\n\n        // Move uploaded file to the target directory\n        if (move_uploaded_file($file['tmp_name'], $filePath)) {\n            echo \"File uploaded successfully: \" . htmlspecialchars($fileName);\n        } else {\n            echo \"Error uploading the file.\";\n        }\n    } else {\n        echo \"No file was uploaded.\";\n    }\n}\n?>\n```"]}
