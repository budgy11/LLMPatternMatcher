{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a user registration function in PHP:\n\n**Note:** This is just one way to implement user registration, and you should consider implementing password hashing and salting for security reasons.\n\n```php\nfunction registerUser($username, $email, $password) {\n    // Check if the username or email already exists in the database\n    $checkUsername = query(\"SELECT * FROM users WHERE username = '$username' LIMIT 1\");\n    $checkEmail = query(\"SELECT * FROM users WHERE email = '$email' LIMIT 1\");\n\n    if ($checkUsername || $checkEmail) {\n        return array('error' => 'User already exists');\n    }\n\n    // Hash the password\n    $passwordHashed = hash('sha256', $password);\n\n    // Insert new user into database\n    query(\"INSERT INTO users (username, email, password) VALUES ('$username', '$email', '$passwordHashed')\");\n\n    return array('message' => 'User created successfully');\n}\n\nfunction query($sql) {\n    global $db;\n    $result = mysqli_query($db, $sql);\n    if (!$result) {\n        die('Error: ' . mysqli_error($db));\n    }\n    return $result;\n}\n```\n\n**Explanation**\n\n*   We use the `mysqli` extension to interact with the database. Make sure you have it enabled in your PHP setup.\n*   The `registerUser` function takes three arguments: `$username`, `$email`, and `$password`.\n*   It first checks if a user with the given username or email already exists in the database using two separate SQL queries.\n*   If a match is found, it returns an error message indicating that the user already exists.\n*   If no match is found, it hashes the password using SHA-256 and inserts a new user into the database with the hashed password.\n\n**Security Note**\n\nThis example uses plain text passwords. In a real-world scenario, you should use a secure method to store passwords, such as:\n\n1.  **Hashing**: Store a hashed version of the password in your database.\n2.  **Salting**: Add a random string (salt) to each password before hashing to prevent rainbow table attacks.\n\nHere's an example with prepared statements for security and better SQL injection protection:\n\n```php\nfunction registerUser($username, $email, $password) {\n    global $db;\n\n    // Prepare statement\n    $stmt = mysqli_prepare($db, \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\");\n    if (!$stmt) {\n        die('Error: ' . mysqli_error($db));\n    }\n\n    // Bind parameters\n    mysqli_stmt_bind_param($stmt, \"sss\", $username, $email, hash('sha256', $password));\n\n    // Execute statement\n    if (!mysqli_stmt_execute($stmt)) {\n        die('Error: ' . mysqli_error($db));\n    }\n\n    return array('message' => 'User created successfully');\n}\n```\n\nIn this updated example, we use `mysqli_prepare` to prepare the SQL query and then bind the parameters using `mysqli_stmt_bind_param`. This way, you can pass in user input securely.", "code_blocks": ["```php\nfunction registerUser($username, $email, $password) {\n    // Check if the username or email already exists in the database\n    $checkUsername = query(\"SELECT * FROM users WHERE username = '$username' LIMIT 1\");\n    $checkEmail = query(\"SELECT * FROM users WHERE email = '$email' LIMIT 1\");\n\n    if ($checkUsername || $checkEmail) {\n        return array('error' => 'User already exists');\n    }\n\n    // Hash the password\n    $passwordHashed = hash('sha256', $password);\n\n    // Insert new user into database\n    query(\"INSERT INTO users (username, email, password) VALUES ('$username', '$email', '$passwordHashed')\");\n\n    return array('message' => 'User created successfully');\n}\n\nfunction query($sql) {\n    global $db;\n    $result = mysqli_query($db, $sql);\n    if (!$result) {\n        die('Error: ' . mysqli_error($db));\n    }\n    return $result;\n}\n```", "```php\nfunction registerUser($username, $email, $password) {\n    global $db;\n\n    // Prepare statement\n    $stmt = mysqli_prepare($db, \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\");\n    if (!$stmt) {\n        die('Error: ' . mysqli_error($db));\n    }\n\n    // Bind parameters\n    mysqli_stmt_bind_param($stmt, \"sss\", $username, $email, hash('sha256', $password));\n\n    // Execute statement\n    if (!mysqli_stmt_execute($stmt)) {\n        die('Error: ' . mysqli_error($db));\n    }\n\n    return array('message' => 'User created successfully');\n}\n```"]}
