{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of how you can create a simple user registration function in PHP:\n\n**`register.php`**\n```php\n<?php\n// Configuration settings\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to database\n$mysqli = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\nif ($mysqli->connect_errno) {\n    exit(\"Failed to connect to MySQL: (\" . $mysqli->connect_errno . \") \" . $mysqli->connect_error);\n}\n\n// Function to register user\nfunction registerUser($name, $email, $password, $confirm_password) {\n    // Check if passwords match\n    if ($password !== $confirm_password) {\n        return array('success' => false, 'message' => 'Passwords do not match');\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Prepare query to insert user data into database\n    $stmt = $mysqli->prepare(\"INSERT INTO users (name, email, password) VALUES (?, ?, ?)\");\n    if (!$stmt->bind_param(\"sss\", $name, $email, $hashedPassword)) {\n        return array('success' => false, 'message' => 'Error binding parameters');\n    }\n\n    // Execute query to insert user data into database\n    if (!$stmt->execute()) {\n        return array('success' => false, 'message' => 'Error registering user');\n    }\n\n    $user_id = $mysqli->insert_id;\n    return array('success' => true, 'message' => 'User registered successfully', 'id' => $user_id);\n}\n\n// Get POST data from form submission\n$name = $_POST['name'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n$confirm_password = $_POST['confirm_password'];\n\n// Register user and output result\n$result = registerUser($name, $email, $password, $confirm_password);\necho json_encode($result);\n\n// Close database connection\n$mysqli->close();\n?>\n```\n\n**`register_form.html`**\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Register User</title>\n</head>\n<body>\n    <form id=\"register-form\" method=\"post\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" name=\"name\"><br><br>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" name=\"email\"><br><br>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" name=\"password\"><br><br>\n        <label for=\"confirm_password\">Confirm Password:</label>\n        <input type=\"password\" name=\"confirm_password\"><br><br>\n        <button type=\"submit\">Register</button>\n    </form>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\n    <script>\n        $(document).ready(function() {\n            $('#register-form').submit(function(e) {\n                e.preventDefault();\n                $.ajax({\n                    type: 'POST',\n                    url: 'register.php',\n                    data: $(this).serialize(),\n                    success: function(data) {\n                        console.log(data);\n                        // Output result to user\n                        alert('User registered successfully!');\n                    },\n                    error: function(xhr, status, error) {\n                        console.error(error);\n                        // Output error message to user\n                        alert('Error registering user');\n                    }\n                });\n            });\n        });\n    </script>\n</body>\n</html>\n```\nThis example uses the `mysqli` extension for database interactions. The `registerUser()` function checks if passwords match, hashes the password using `password_hash()`, and then executes a prepared query to insert user data into the database. If successful, it returns an array with success message and user ID.\n\nThe `register_form.html` example uses jQuery to send the form data as an AJAX request to the `register.php` script, which then processes the registration logic.\n\n**Please note that you should never store plain text passwords in your database. Always hash them using a secure hashing algorithm like `password_hash()` and verify passwords by comparing hashed values.**\n\nAlso, remember to replace `your_username`, `your_password`, and `your_database` with your actual database credentials.", "code_blocks": ["```php\n<?php\n// Configuration settings\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n// Connect to database\n$mysqli = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\nif ($mysqli->connect_errno) {\n    exit(\"Failed to connect to MySQL: (\" . $mysqli->connect_errno . \") \" . $mysqli->connect_error);\n}\n\n// Function to register user\nfunction registerUser($name, $email, $password, $confirm_password) {\n    // Check if passwords match\n    if ($password !== $confirm_password) {\n        return array('success' => false, 'message' => 'Passwords do not match');\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Prepare query to insert user data into database\n    $stmt = $mysqli->prepare(\"INSERT INTO users (name, email, password) VALUES (?, ?, ?)\");\n    if (!$stmt->bind_param(\"sss\", $name, $email, $hashedPassword)) {\n        return array('success' => false, 'message' => 'Error binding parameters');\n    }\n\n    // Execute query to insert user data into database\n    if (!$stmt->execute()) {\n        return array('success' => false, 'message' => 'Error registering user');\n    }\n\n    $user_id = $mysqli->insert_id;\n    return array('success' => true, 'message' => 'User registered successfully', 'id' => $user_id);\n}\n\n// Get POST data from form submission\n$name = $_POST['name'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n$confirm_password = $_POST['confirm_password'];\n\n// Register user and output result\n$result = registerUser($name, $email, $password, $confirm_password);\necho json_encode($result);\n\n// Close database connection\n$mysqli->close();\n?>\n```", null]}
