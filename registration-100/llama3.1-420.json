{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a simple user registration function in PHP:\n\n```php\n<?php\n// Configuration settings for the database connection and password hashing\nrequire_once 'config.php';\n\nfunction registerUser($username, $email, $password) {\n    // Check if username already exists\n    $query = \"SELECT * FROM users WHERE username = :username\";\n    try {\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->execute();\n        $result = $stmt->fetch();\n        if ($result) {\n            throw new Exception('Username already exists');\n        }\n    } catch (PDOException $e) {\n        echo 'An error occurred while checking username: ' . $e->getMessage();\n        return false;\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    try {\n        $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n        return true;\n    } catch (PDOException $e) {\n        echo 'An error occurred while registering user: ' . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage:\nif (isset($_POST['register'])) {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    if ($username && $email && $password) {\n        if (registerUser($username, $email, $password)) {\n            echo 'Registration successful!';\n        } else {\n            echo 'Registration failed.';\n        }\n    } else {\n        echo 'Please fill in all fields.';\n    }\n}\n?>\n```\n\n**Explanation:**\n\n1. The `registerUser` function takes three arguments: `$username`, `$email`, and `$password`.\n2. It first checks if the username already exists in the database using a prepared statement.\n3. If the username does not exist, it hashes the password using PHP's built-in `password_hash` function.\n4. Finally, it inserts the new user into the database with their hashed password.\n\n**Security Notes:**\n\n* The password is hashed using PHP's built-in `password_hash` function, which uses a cryptographically secure hash algorithm (in this case, `PASSWORD_DEFAULT`, which corresponds to Argon2).\n* We use prepared statements to prevent SQL injection attacks.\n* We do not store the original password in plaintext; only the hashed version is stored.\n\n**Usage:**\n\nThis code should be placed inside a PHP file (e.g., `register.php`) and called as a POST request from an HTML form with input fields for username, email, and password. The registration process will be triggered when the user submits the form.\n\n**Remember to configure your database connection settings in the `config.php` file!**\n\n```php\n// config.php\n\n$dsn = 'mysql:host=localhost;dbname=mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\ntry {\n    $pdo = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n    echo 'Connection failed: ' . $e->getMessage();\n}\n```", "code_blocks": ["```php\n<?php\n// Configuration settings for the database connection and password hashing\nrequire_once 'config.php';\n\nfunction registerUser($username, $email, $password) {\n    // Check if username already exists\n    $query = \"SELECT * FROM users WHERE username = :username\";\n    try {\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->execute();\n        $result = $stmt->fetch();\n        if ($result) {\n            throw new Exception('Username already exists');\n        }\n    } catch (PDOException $e) {\n        echo 'An error occurred while checking username: ' . $e->getMessage();\n        return false;\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    try {\n        $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n        return true;\n    } catch (PDOException $e) {\n        echo 'An error occurred while registering user: ' . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage:\nif (isset($_POST['register'])) {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    if ($username && $email && $password) {\n        if (registerUser($username, $email, $password)) {\n            echo 'Registration successful!';\n        } else {\n            echo 'Registration failed.';\n        }\n    } else {\n        echo 'Please fill in all fields.';\n    }\n}\n?>\n```", "```php\n// config.php\n\n$dsn = 'mysql:host=localhost;dbname=mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\ntry {\n    $pdo = new PDO($dsn, $username, $password);\n} catch (PDOException $e) {\n    echo 'Connection failed: ' . $e->getMessage();\n}\n```"]}
