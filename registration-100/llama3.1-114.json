{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a basic user registration function using PHP:\n\n```php\n<?php\n\n// Configuration variables\ndefine('MIN_USERNAME_LENGTH', 3);\ndefine('MAX_USERNAME_LENGTH', 32);\ndefine('MIN_PASSWORD_LENGTH', 6);\n\nfunction registerUser() {\n    // Check if form has been submitted\n    if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n        // Extract user input from form\n        $username = $_POST['username'];\n        $password = $_POST['password'];\n        $confirmPassword = $_POST['confirm_password'];\n\n        // Validate username and password\n        $errors = array();\n        if (strlen($username) < MIN_USERNAME_LENGTH || strlen($username) > MAX_USERNAME_LENGTH) {\n            $errors[] = 'Username must be between ' . MIN_USERNAME_LENGTH . ' and ' . MAX_USERNAME_LENGTH . ' characters long.';\n        }\n        if (strlen($password) < MIN_PASSWORD_LENGTH) {\n            $errors[] = 'Password must be at least ' . MIN_PASSWORD_LENGTH . ' characters long.';\n        }\n        if ($password != $confirmPassword) {\n            $errors[] = 'Passwords do not match.';\n        }\n\n        // Check for errors\n        if (!empty($errors)) {\n            return array(false, $errors);\n        } else {\n            // Hash password and add user to database\n            $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n            // Insert into database (assuming a connection to the database is already established)\n            // You should replace this with your actual database code\n            $stmt = $conn->prepare(\"INSERT INTO users (username, password) VALUES (:username, :password)\");\n            $stmt->bindParam(':username', $username);\n            $stmt->bindParam(':password', $hashedPassword);\n            try {\n                $stmt->execute();\n                return array(true, \"Registration successful!\");\n            } catch (PDOException $e) {\n                return array(false, \"Failed to register: \" . $e->getMessage());\n            }\n        }\n    }\n\n    // If form hasn't been submitted\n    return array(false, \"Invalid request method.\");\n}\n\n?>\n```\n\n### Example Usage:\n\nTo use this function in a PHP application, you would typically call it when the user submits the registration form. Here's an example of how to do that using a simple `index.php` file:\n```php\n<?php include 'register_user.php'; ?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Register</title>\n</head>\n\n<body>\n    <?php if (isset($response)) { ?>\n        <?php if ($response[0]) { ?>\n            <p><?php echo $response[1]; ?></p>\n        <?php } else { ?>\n            <ul>\n                <?php foreach ($response[1] as $error) { ?>\n                    <li><?php echo $error; ?></li>\n                <?php } ?>\n            </ul>\n        <?php } ?>\n    <?php } else { ?>\n        <form action=\"\" method=\"post\">\n            Username: <input type=\"text\" name=\"username\"><br><br>\n            Password: <input type=\"password\" name=\"password\"><br><br>\n            Confirm Password: <input type=\"password\" name=\"confirm_password\"><br><br>\n            <input type=\"submit\" value=\"Register\">\n        </form>\n    <?php } ?>\n</body>\n</html>\n\n<?php\n$response = registerUser();\n?>\n```\nThis example includes the `register_user.php` file (which contains the function we defined earlier) and then checks if a response has been generated by calling the function. If there's an error, it displays the error message; otherwise, it shows the registration form.\n\nKeep in mind that this is just a basic implementation and you should adapt it to your specific application requirements, including database setup and security considerations (e.g., hashing passwords properly).", "code_blocks": ["```php\n<?php\n\n// Configuration variables\ndefine('MIN_USERNAME_LENGTH', 3);\ndefine('MAX_USERNAME_LENGTH', 32);\ndefine('MIN_PASSWORD_LENGTH', 6);\n\nfunction registerUser() {\n    // Check if form has been submitted\n    if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n        // Extract user input from form\n        $username = $_POST['username'];\n        $password = $_POST['password'];\n        $confirmPassword = $_POST['confirm_password'];\n\n        // Validate username and password\n        $errors = array();\n        if (strlen($username) < MIN_USERNAME_LENGTH || strlen($username) > MAX_USERNAME_LENGTH) {\n            $errors[] = 'Username must be between ' . MIN_USERNAME_LENGTH . ' and ' . MAX_USERNAME_LENGTH . ' characters long.';\n        }\n        if (strlen($password) < MIN_PASSWORD_LENGTH) {\n            $errors[] = 'Password must be at least ' . MIN_PASSWORD_LENGTH . ' characters long.';\n        }\n        if ($password != $confirmPassword) {\n            $errors[] = 'Passwords do not match.';\n        }\n\n        // Check for errors\n        if (!empty($errors)) {\n            return array(false, $errors);\n        } else {\n            // Hash password and add user to database\n            $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n            // Insert into database (assuming a connection to the database is already established)\n            // You should replace this with your actual database code\n            $stmt = $conn->prepare(\"INSERT INTO users (username, password) VALUES (:username, :password)\");\n            $stmt->bindParam(':username', $username);\n            $stmt->bindParam(':password', $hashedPassword);\n            try {\n                $stmt->execute();\n                return array(true, \"Registration successful!\");\n            } catch (PDOException $e) {\n                return array(false, \"Failed to register: \" . $e->getMessage());\n            }\n        }\n    }\n\n    // If form hasn't been submitted\n    return array(false, \"Invalid request method.\");\n}\n\n?>\n```", "```php\n<?php include 'register_user.php'; ?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Register</title>\n</head>\n\n<body>\n    <?php if (isset($response)) { ?>\n        <?php if ($response[0]) { ?>\n            <p><?php echo $response[1]; ?></p>\n        <?php } else { ?>\n            <ul>\n                <?php foreach ($response[1] as $error) { ?>\n                    <li><?php echo $error; ?></li>\n                <?php } ?>\n            </ul>\n        <?php } ?>\n    <?php } else { ?>\n        <form action=\"\" method=\"post\">\n            Username: <input type=\"text\" name=\"username\"><br><br>\n            Password: <input type=\"password\" name=\"password\"><br><br>\n            Confirm Password: <input type=\"password\" name=\"confirm_password\"><br><br>\n            <input type=\"submit\" value=\"Register\">\n        </form>\n    <?php } ?>\n</body>\n</html>\n\n<?php\n$response = registerUser();\n?>\n```"]}
