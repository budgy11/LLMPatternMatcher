{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nHere's an example of a simple user registration function using PHP, including validation and security measures to prevent common web application vulnerabilities.\n\n```php\n<?php\n\n// Define the database connection details\n$host = 'localhost';\n$dbname = 'users';\n$username = 'root';\n$password = '';\n\n// Create a new PDO object\ntry {\n    $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    die('Connection failed: ' . $e->getMessage());\n}\n\nfunction registerUser($name, $email, $password)\n{\n    // Validate input data\n    if (empty($name) || empty($email) || empty($password)) {\n        throw new Exception(\"All fields are required.\");\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception(\"Invalid email address.\");\n    }\n\n    if (strlen($password) < 8) {\n        throw new Exception(\"Password must be at least 8 characters long.\");\n    }\n\n    // Hash the password using bcrypt\n    $hashedPassword = password_hash($password, PASSWORD_BCRYPT);\n\n    // Prepare and execute the query to insert a new user\n    try {\n        $stmt = $pdo->prepare('INSERT INTO users (name, email, password) VALUES (:name, :email, :password)');\n        $stmt->bindParam(':name', $name);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        return true;\n    } catch (PDOException $e) {\n        throw new Exception(\"Error registering user: \" . $e->getMessage());\n    }\n}\n\n// Example usage:\ntry {\n    registerUser('John Doe', 'johndoe@example.com', 'password123');\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n```\n\n**Security Considerations**\n\n*   Use prepared statements and parameterized queries to prevent SQL injection.\n*   Validate user input using built-in PHP functions (`filter_var()` for email validation).\n*   Store passwords securely using bcrypt or other secure password hashing algorithms.\n\n**Example Output**\n\nThe code will insert a new user into the database with the specified name, email address, and hashed password. If an error occurs during registration (e.g., duplicate email), it will catch the exception and display an error message.", "code_blocks": ["```php\n<?php\n\n// Define the database connection details\n$host = 'localhost';\n$dbname = 'users';\n$username = 'root';\n$password = '';\n\n// Create a new PDO object\ntry {\n    $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    die('Connection failed: ' . $e->getMessage());\n}\n\nfunction registerUser($name, $email, $password)\n{\n    // Validate input data\n    if (empty($name) || empty($email) || empty($password)) {\n        throw new Exception(\"All fields are required.\");\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception(\"Invalid email address.\");\n    }\n\n    if (strlen($password) < 8) {\n        throw new Exception(\"Password must be at least 8 characters long.\");\n    }\n\n    // Hash the password using bcrypt\n    $hashedPassword = password_hash($password, PASSWORD_BCRYPT);\n\n    // Prepare and execute the query to insert a new user\n    try {\n        $stmt = $pdo->prepare('INSERT INTO users (name, email, password) VALUES (:name, :email, :password)');\n        $stmt->bindParam(':name', $name);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        return true;\n    } catch (PDOException $e) {\n        throw new Exception(\"Error registering user: \" . $e->getMessage());\n    }\n}\n\n// Example usage:\ntry {\n    registerUser('John Doe', 'johndoe@example.com', 'password123');\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n```"]}
