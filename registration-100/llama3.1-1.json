{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nThe following is an example of a user registration function in PHP that includes input validation, password hashing, and database insertion.\n\n### **Database Setup**\n\nAssuming you have a MySQL database with the following table structure:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255) NOT NULL,\n  email VARCHAR(255) NOT NULL,\n  password VARCHAR(255) NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### **User Registration Function**\n\n```php\nfunction registerUser($data) {\n  // Input validation\n  if (empty($data['username']) || empty($data['email']) || empty($data['password'])) {\n    throw new Exception(\"All fields are required.\");\n  }\n\n  if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n    throw new Exception(\"Invalid email address.\");\n  }\n\n  // Password hashing\n  $hashedPassword = password_hash($data['password'], PASSWORD_DEFAULT);\n\n  // Database insertion\n  $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n  $stmt = db()->prepare($query);\n  $stmt->execute([\n    ':username' => $data['username'],\n    ':email' => $data['email'],\n    ':password' => $hashedPassword\n  ]);\n\n  // Return the newly inserted user ID\n  return db()->lastInsertId();\n}\n```\n\n### **Example Usage**\n\n```php\n$data = [\n  'username' => 'johnDoe',\n  'email' => 'johndoe@example.com',\n  'password' => 'password123'\n];\n\ntry {\n  $userId = registerUser($data);\n  echo \"User registered successfully with ID: $userId\";\n} catch (Exception $e) {\n  echo \"Error registering user: \" . $e->getMessage();\n}\n```\n\n### **Notes**\n\n*   This example uses a simple password hashing algorithm (`password_hash()`). In a real-world application, consider using more secure methods like bcrypt or Argon2.\n*   For database interactions, we assume the existence of a `db()` function that returns an instance of PDO (PHP Data Objects).\n*   Error handling is minimal in this example. You should consider implementing more robust error handling and logging mechanisms in your production code.\n\nThis user registration function takes care of basic input validation, password hashing, and database insertion. However, remember to adapt it according to your specific application's requirements and security needs.", "code_blocks": [null, "```php\nfunction registerUser($data) {\n  // Input validation\n  if (empty($data['username']) || empty($data['email']) || empty($data['password'])) {\n    throw new Exception(\"All fields are required.\");\n  }\n\n  if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n    throw new Exception(\"Invalid email address.\");\n  }\n\n  // Password hashing\n  $hashedPassword = password_hash($data['password'], PASSWORD_DEFAULT);\n\n  // Database insertion\n  $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n  $stmt = db()->prepare($query);\n  $stmt->execute([\n    ':username' => $data['username'],\n    ':email' => $data['email'],\n    ':password' => $hashedPassword\n  ]);\n\n  // Return the newly inserted user ID\n  return db()->lastInsertId();\n}\n```", "```php\n$data = [\n  'username' => 'johnDoe',\n  'email' => 'johndoe@example.com',\n  'password' => 'password123'\n];\n\ntry {\n  $userId = registerUser($data);\n  echo \"User registered successfully with ID: $userId\";\n} catch (Exception $e) {\n  echo \"Error registering user: \" . $e->getMessage();\n}\n```"]}
