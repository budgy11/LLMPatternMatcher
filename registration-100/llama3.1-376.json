{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nThe following code creates a simple user registration system using PHP. It includes functions for validating input data, hashing passwords, and storing users in a database.\n\n**Database Configuration**\n-------------------------\n\nBefore running this code, you need to configure your database settings in the `config.php` file:\n```php\n// config.php\n\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'username');\ndefine('DB_PASSWORD', 'password');\ndefine('DB_NAME', 'database_name');\n\n$db = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USER, DB_PASSWORD);\n```\n**User Registration Function**\n-----------------------------\n\n```php\n// registration.php\n\nrequire_once 'config.php';\n\nfunction validateRegistrationData($data) {\n    // Validate input data\n    if (empty($data['name']) || empty($data['email']) || empty($data['password'])) {\n        return array('error' => 'All fields are required');\n    }\n\n    if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n        return array('error' => 'Invalid email address');\n    }\n\n    if (strlen($data['password']) < 8) {\n        return array('error' => 'Password must be at least 8 characters long');\n    }\n\n    return true;\n}\n\nfunction hashPassword($password) {\n    // Hash password using bcrypt\n    $options = array('cost' => 12);\n    return password_hash($password, PASSWORD_BCRYPT, $options);\n}\n\nfunction registerUser($data) {\n    global $db;\n\n    // Validate input data\n    if (validateRegistrationData($data)) {\n\n        // Insert user into database\n        $stmt = $db->prepare('INSERT INTO users (name, email, password) VALUES (:name, :email, :password)');\n        $stmt->bindParam(':name', $data['name']);\n        $stmt->bindParam(':email', $data['email']);\n        $stmt->bindParam(':password', hashPassword($data['password']));\n        if ($stmt->execute()) {\n            return array('success' => 'User registered successfully');\n        } else {\n            return array('error' => 'Error registering user');\n        }\n    }\n\n    // Return validation errors\n    return $data;\n}\n\n// Example usage:\n$data = array(\n    'name' => 'John Doe',\n    'email' => 'john.doe@example.com',\n    'password' => 'mysecretpassword'\n);\n\n$result = registerUser($data);\nprint_r($result);\n```\n**Explanation**\n\n1. The `validateRegistrationData` function checks if all required fields are filled in and if the email address is valid.\n2. The `hashPassword` function hashes the user's password using bcrypt for secure storage.\n3. The `registerUser` function inserts a new user into the database after validating the input data.\n\nNote: This code assumes you have a MySQL database set up with a table named \"users\" containing columns for name, email, and password. You'll need to modify the database configuration and SQL queries according to your specific setup.", "code_blocks": ["```php\n// config.php\n\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'username');\ndefine('DB_PASSWORD', 'password');\ndefine('DB_NAME', 'database_name');\n\n$db = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USER, DB_PASSWORD);\n```", "```php\n// registration.php\n\nrequire_once 'config.php';\n\nfunction validateRegistrationData($data) {\n    // Validate input data\n    if (empty($data['name']) || empty($data['email']) || empty($data['password'])) {\n        return array('error' => 'All fields are required');\n    }\n\n    if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n        return array('error' => 'Invalid email address');\n    }\n\n    if (strlen($data['password']) < 8) {\n        return array('error' => 'Password must be at least 8 characters long');\n    }\n\n    return true;\n}\n\nfunction hashPassword($password) {\n    // Hash password using bcrypt\n    $options = array('cost' => 12);\n    return password_hash($password, PASSWORD_BCRYPT, $options);\n}\n\nfunction registerUser($data) {\n    global $db;\n\n    // Validate input data\n    if (validateRegistrationData($data)) {\n\n        // Insert user into database\n        $stmt = $db->prepare('INSERT INTO users (name, email, password) VALUES (:name, :email, :password)');\n        $stmt->bindParam(':name', $data['name']);\n        $stmt->bindParam(':email', $data['email']);\n        $stmt->bindParam(':password', hashPassword($data['password']));\n        if ($stmt->execute()) {\n            return array('success' => 'User registered successfully');\n        } else {\n            return array('error' => 'Error registering user');\n        }\n    }\n\n    // Return validation errors\n    return $data;\n}\n\n// Example usage:\n$data = array(\n    'name' => 'John Doe',\n    'email' => 'john.doe@example.com',\n    'password' => 'mysecretpassword'\n);\n\n$result = registerUser($data);\nprint_r($result);\n```"]}
