{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a basic user registration function in PHP, including input validation and password hashing:\n```php\n<?php\n\n// Configuration settings\n$dbHost = 'localhost';\n$dbName = 'database_name';\n$dbUsername = 'username';\n$dbPassword = 'password';\n\nfunction registerUser($name, $email, $password) {\n    // Connect to database\n    try {\n        $conn = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUsername, $dbPassword);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Input validation\n        if (empty($name)) {\n            throw new Exception('Name is required');\n        }\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n            throw new Exception('Invalid email address');\n        }\n        if (strlen($password) < 8) {\n            throw new Exception('Password must be at least 8 characters long');\n        }\n\n        // Hash password\n        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n        // Insert user data into database\n        $stmt = $conn->prepare(\"INSERT INTO users (name, email, password) VALUES (:name, :email, :password)\");\n        $stmt->bindParam(':name', $name);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        if ($stmt->execute()) {\n            return true; // User registration successful\n        } else {\n            throw new Exception('Failed to register user');\n        }\n\n    } catch (PDOException $e) {\n        echo 'Connection failed: ' . $e->getMessage();\n    }\n}\n\n// Example usage:\ntry {\n    $name = $_POST['name'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    if (registerUser($name, $email, $password)) {\n        echo 'Registration successful!';\n    } else {\n        echo 'Failed to register user';\n    }\n} catch (Exception $e) {\n    echo 'Error: ' . $e->getMessage();\n}\n\n?>\n```\nThis example assumes you have a database named `database_name` on your server with a table called `users` containing columns for name, email, and password. You'll need to replace the placeholders (`$dbHost`, `$dbName`, etc.) with your actual database credentials.\n\n**Security Notes:**\n\n1.  Always validate user input before inserting it into your database.\n2.  Use prepared statements to prevent SQL injection attacks.\n3.  Passwords should be hashed using a secure hash function (like `password_hash` in PHP).\n4.  Never store plaintext passwords or sensitive data in your database.\n\n**Best Practices:**\n\n1.  Ensure all user input is validated and sanitized before processing it.\n2.  Keep your code organized with clear, descriptive variable names and functions.\n3.  Regularly review your code for security vulnerabilities and best practices.", "code_blocks": ["```php\n<?php\n\n// Configuration settings\n$dbHost = 'localhost';\n$dbName = 'database_name';\n$dbUsername = 'username';\n$dbPassword = 'password';\n\nfunction registerUser($name, $email, $password) {\n    // Connect to database\n    try {\n        $conn = new PDO(\"mysql:host=$dbHost;dbname=$dbName\", $dbUsername, $dbPassword);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Input validation\n        if (empty($name)) {\n            throw new Exception('Name is required');\n        }\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n            throw new Exception('Invalid email address');\n        }\n        if (strlen($password) < 8) {\n            throw new Exception('Password must be at least 8 characters long');\n        }\n\n        // Hash password\n        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n        // Insert user data into database\n        $stmt = $conn->prepare(\"INSERT INTO users (name, email, password) VALUES (:name, :email, :password)\");\n        $stmt->bindParam(':name', $name);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        if ($stmt->execute()) {\n            return true; // User registration successful\n        } else {\n            throw new Exception('Failed to register user');\n        }\n\n    } catch (PDOException $e) {\n        echo 'Connection failed: ' . $e->getMessage();\n    }\n}\n\n// Example usage:\ntry {\n    $name = $_POST['name'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    if (registerUser($name, $email, $password)) {\n        echo 'Registration successful!';\n    } else {\n        echo 'Failed to register user';\n    }\n} catch (Exception $e) {\n    echo 'Error: ' . $e->getMessage();\n}\n\n?>\n```"]}
