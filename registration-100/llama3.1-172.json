{"prompt": "Create a user registration function using php", "llm_output": "Here is an example of a user registration function in PHP:\n\n**`register.php`**\n```php\n<?php\n\n// Configuration settings\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'root');\ndefine('DB_PASSWORD', '');\ndefine('DB_NAME', 'database');\n\n// Function to register new users\nfunction registerUser($username, $email, $password) {\n  // Check if username and email are valid (e.g. not empty)\n  if (!$username || !$email) {\n    return array(\n      'success' => false,\n      'error' => 'Invalid username or email'\n    );\n  }\n\n  // Connect to database\n  try {\n    $conn = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USERNAME, DB_PASSWORD);\n  } catch (PDOException $e) {\n    return array(\n      'success' => false,\n      'error' => 'Database connection failed: ' . $e->getMessage()\n    );\n  }\n\n  // Hash password\n  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n  // Insert new user into database\n  try {\n    $stmt = $conn->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashedPassword);\n    $stmt->execute();\n\n    // Return success response\n    return array(\n      'success' => true,\n      'message' => 'User registered successfully'\n    );\n  } catch (PDOException $e) {\n    return array(\n      'success' => false,\n      'error' => 'Database error: ' . $e->getMessage()\n    );\n  }\n\n  // Close database connection\n  $conn = null;\n}\n\n// Call the function with POST data from form submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $username = $_POST['username'];\n  $email = $_POST['email'];\n  $password = $_POST['password'];\n\n  $response = registerUser($username, $email, $password);\n  echo json_encode($response);\n}\n\n?>\n```\n**How it works:**\n\n1. The function `registerUser` takes three arguments: `$username`, `$email`, and `$password`.\n2. It checks if the username and email are valid (not empty).\n3. If they are valid, it connects to a MySQL database using PDO.\n4. It hashes the password using the `password_hash` function.\n5. It inserts the new user into the `users` table in the database using a prepared statement.\n6. If successful, it returns a success response with a message.\n7. If there's an error, it returns an error response with the corresponding message.\n\n**Example use case:**\n\nTo test this function, you can create a simple HTML form that submits to `register.php`:\n```html\n<form action=\"register.php\" method=\"post\">\n  <label>Username:</label>\n  <input type=\"text\" name=\"username\"><br><br>\n  <label>Email:</label>\n  <input type=\"email\" name=\"email\"><br><br>\n  <label>Password:</label>\n  <input type=\"password\" name=\"password\"><br><br>\n  <button type=\"submit\">Register</button>\n</form>\n```\nWhen the form is submitted, the `register.php` script will be executed and a JSON response will be returned. You can then parse this response on the client-side to display success or error messages.\n\nNote that in a real-world application, you should also implement additional security measures such as validating user input, sanitizing SQL queries, and using secure password storage practices (e.g., storing salted hashes).", "code_blocks": ["```php\n<?php\n\n// Configuration settings\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'root');\ndefine('DB_PASSWORD', '');\ndefine('DB_NAME', 'database');\n\n// Function to register new users\nfunction registerUser($username, $email, $password) {\n  // Check if username and email are valid (e.g. not empty)\n  if (!$username || !$email) {\n    return array(\n      'success' => false,\n      'error' => 'Invalid username or email'\n    );\n  }\n\n  // Connect to database\n  try {\n    $conn = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USERNAME, DB_PASSWORD);\n  } catch (PDOException $e) {\n    return array(\n      'success' => false,\n      'error' => 'Database connection failed: ' . $e->getMessage()\n    );\n  }\n\n  // Hash password\n  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n  // Insert new user into database\n  try {\n    $stmt = $conn->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashedPassword);\n    $stmt->execute();\n\n    // Return success response\n    return array(\n      'success' => true,\n      'message' => 'User registered successfully'\n    );\n  } catch (PDOException $e) {\n    return array(\n      'success' => false,\n      'error' => 'Database error: ' . $e->getMessage()\n    );\n  }\n\n  // Close database connection\n  $conn = null;\n}\n\n// Call the function with POST data from form submission\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $username = $_POST['username'];\n  $email = $_POST['email'];\n  $password = $_POST['password'];\n\n  $response = registerUser($username, $email, $password);\n  echo json_encode($response);\n}\n\n?>\n```", null]}
