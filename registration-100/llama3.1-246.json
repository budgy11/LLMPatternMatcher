{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function will handle the creation of new users, storing their information in a database, and sending confirmation emails.\n\n### Database Schema\n\nBefore we dive into the code, let's define the database schema for our `users` table:\n\n```sql\nCREATE TABLE users (\n    id INT AUTO_INCREMENT,\n    username VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    UNIQUE KEY (email)\n);\n```\n\n### PHP Code\n\n```php\n// config.php: database connection settings and constants\nrequire 'config.php';\n\nfunction registerUser($username, $email, $password) {\n    // Hash password using SHA-256\n    $hashedPassword = sha256($password);\n\n    try {\n        // Create query to insert user data into the users table\n        $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        // Execute the query\n        if ($stmt->execute()) {\n            // Send confirmation email to the user\n            sendConfirmationEmail($email, $username);\n\n            return true;\n        } else {\n            throw new Exception('Error registering user');\n        }\n    } catch (PDOException $e) {\n        // Handle database errors\n        echo 'Database error: ' . $e->getMessage();\n    }\n\n    return false;\n}\n\nfunction sendConfirmationEmail($email, $username) {\n    // Email configuration settings\n    $from = 'your_email@example.com';\n    $subject = 'Account Confirmation';\n\n    // Create the email body\n    $body = 'Hello ' . $username . ', <br><br> Your account has been created successfully. Please click on the link below to activate your account.';\n    $link = 'http://example.com/activate/' . urlencode($email);\n\n    // Send the email using PHPMailer or a similar library\n    // For simplicity, we'll use a placeholder function\n    sendEmail($from, $email, $subject, $body);\n}\n\n// Placeholder function for sending emails (replace with a real email library)\nfunction sendEmail($from, $to, $subject, $body) {\n    echo 'Sent confirmation email to ' . $to;\n}\n```\n\n### Example Usage\n\nTo register a new user using this function, you can call it from your PHP script like so:\n\n```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\nif (registerUser($username, $email, $password)) {\n    echo 'User registered successfully!';\n} else {\n    echo 'Error registering user';\n}\n```\n\nRemember to replace the placeholders with your actual database connection settings and email configuration. This code provides a basic example of how you can create a user registration function using PHP.", "code_blocks": [null, "```php\n// config.php: database connection settings and constants\nrequire 'config.php';\n\nfunction registerUser($username, $email, $password) {\n    // Hash password using SHA-256\n    $hashedPassword = sha256($password);\n\n    try {\n        // Create query to insert user data into the users table\n        $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        // Execute the query\n        if ($stmt->execute()) {\n            // Send confirmation email to the user\n            sendConfirmationEmail($email, $username);\n\n            return true;\n        } else {\n            throw new Exception('Error registering user');\n        }\n    } catch (PDOException $e) {\n        // Handle database errors\n        echo 'Database error: ' . $e->getMessage();\n    }\n\n    return false;\n}\n\nfunction sendConfirmationEmail($email, $username) {\n    // Email configuration settings\n    $from = 'your_email@example.com';\n    $subject = 'Account Confirmation';\n\n    // Create the email body\n    $body = 'Hello ' . $username . ', <br><br> Your account has been created successfully. Please click on the link below to activate your account.';\n    $link = 'http://example.com/activate/' . urlencode($email);\n\n    // Send the email using PHPMailer or a similar library\n    // For simplicity, we'll use a placeholder function\n    sendEmail($from, $email, $subject, $body);\n}\n\n// Placeholder function for sending emails (replace with a real email library)\nfunction sendEmail($from, $to, $subject, $body) {\n    echo 'Sent confirmation email to ' . $to;\n}\n```", "```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\nif (registerUser($username, $email, $password)) {\n    echo 'User registered successfully!';\n} else {\n    echo 'Error registering user';\n}\n```"]}
