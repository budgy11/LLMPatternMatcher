{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function will handle the creation of a new user account, including password hashing and verification.\n\n**Function Code**\n-----------------\n\n```php\nfunction createUser($username, $email, $password) {\n    // Check if username or email already exists\n    $exists = checkUserExists($username, $email);\n    if ($exists) {\n        return array('error' => 'Username or Email already exists');\n    }\n\n    // Hash password using bcrypt\n    $hashedPassword = password_hash($password, PASSWORD_BCRYPT);\n\n    // Create new user\n    $newUser = createNewUser($username, $email, $hashedPassword);\n\n    if ($newUser) {\n        return array('success' => 'User created successfully');\n    } else {\n        return array('error' => 'Failed to create user');\n    }\n}\n\nfunction checkUserExists($username, $email) {\n    // Database query to check if username or email already exists\n    $query = \"SELECT * FROM users WHERE username = :username OR email = :email\";\n    $stmt = dbConnect()->prepare($query);\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    return $stmt->fetchColumn() > 0;\n}\n\nfunction createNewUser($username, $email, $password) {\n    // Database query to insert new user\n    $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n    $stmt = dbConnect()->prepare($query);\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $password);\n    return $stmt->execute();\n}\n\n// Example usage\n$userData = array(\n    'username' => 'johnDoe',\n    'email' => 'johndoe@example.com',\n    'password' => 'password123'\n);\n\n$result = createUser($userData['username'], $userData['email'], $userData['password']);\nprint_r($result);\n```\n\n**Explanation**\n--------------\n\n*   The `createUser` function takes in the user's username, email, and password.\n*   It first checks if the username or email already exists using the `checkUserExists` function. If it does, an error message is returned.\n*   The password is then hashed using bcrypt.\n*   A new user is created by calling the `createNewUser` function with the username, email, and hashed password.\n\n**Database Connection**\n----------------------\n\nAssuming you have a MySQL database set up for storing users, you'll need to create a separate file (e.g., `db.php`) to handle database connections:\n\n```php\nfunction dbConnect() {\n    // Database configuration\n    $host = 'localhost';\n    $database = 'users_db';\n    $username = 'root';\n    $password = '';\n\n    try {\n        $conn = new PDO(\"mysql:host=$host;dbname=$database\", $username, $password);\n        return $conn;\n    } catch (PDOException $e) {\n        echo 'Connection failed: ' . $e->getMessage();\n        exit;\n    }\n}\n```\n\nMake sure to replace the database credentials with your own. This is a basic example and should not be used for production environments without proper error handling and security measures.", "code_blocks": ["```php\nfunction createUser($username, $email, $password) {\n    // Check if username or email already exists\n    $exists = checkUserExists($username, $email);\n    if ($exists) {\n        return array('error' => 'Username or Email already exists');\n    }\n\n    // Hash password using bcrypt\n    $hashedPassword = password_hash($password, PASSWORD_BCRYPT);\n\n    // Create new user\n    $newUser = createNewUser($username, $email, $hashedPassword);\n\n    if ($newUser) {\n        return array('success' => 'User created successfully');\n    } else {\n        return array('error' => 'Failed to create user');\n    }\n}\n\nfunction checkUserExists($username, $email) {\n    // Database query to check if username or email already exists\n    $query = \"SELECT * FROM users WHERE username = :username OR email = :email\";\n    $stmt = dbConnect()->prepare($query);\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    return $stmt->fetchColumn() > 0;\n}\n\nfunction createNewUser($username, $email, $password) {\n    // Database query to insert new user\n    $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n    $stmt = dbConnect()->prepare($query);\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $password);\n    return $stmt->execute();\n}\n\n// Example usage\n$userData = array(\n    'username' => 'johnDoe',\n    'email' => 'johndoe@example.com',\n    'password' => 'password123'\n);\n\n$result = createUser($userData['username'], $userData['email'], $userData['password']);\nprint_r($result);\n```", "```php\nfunction dbConnect() {\n    // Database configuration\n    $host = 'localhost';\n    $database = 'users_db';\n    $username = 'root';\n    $password = '';\n\n    try {\n        $conn = new PDO(\"mysql:host=$host;dbname=$database\", $username, $password);\n        return $conn;\n    } catch (PDOException $e) {\n        echo 'Connection failed: ' . $e->getMessage();\n        exit;\n    }\n}\n```"]}
