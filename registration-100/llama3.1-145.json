{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a simple user registration function written in PHP. This example includes validation for username, email, and password, as well as hashing the password for security.\n\n```php\n<?php\n\nfunction register_user($data) {\n    // Validation\n    if (empty($data['username']) || empty($data['email']) || empty($data['password'])) {\n        return array('error' => 'All fields are required.');\n    }\n\n    if (!preg_match('/^[a-zA-Z0-9_]+$/', $data['username'])) {\n        return array('error' => 'Username can only contain letters, numbers and underscores.');\n    }\n\n    if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n        return array('error' => 'Invalid email address.');\n    }\n\n    if (strlen($data['password']) < 8) {\n        return array('error' => 'Password must be at least 8 characters long.');\n    }\n\n    // Hash password\n    $hashed_password = password_hash($data['password'], PASSWORD_DEFAULT);\n\n    // Insert into database\n    try {\n        $db = new PDO('mysql:host=localhost;dbname=database', 'username', 'password');\n        $stmt = $db->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $data['username']);\n        $stmt->bindParam(':email', $data['email']);\n        $stmt->bindParam(':password', $hashed_password);\n        $stmt->execute();\n\n        return array('success' => 'User registered successfully.');\n    } catch (PDOException $e) {\n        return array('error' => 'Database error: ' . $e->getMessage());\n    }\n}\n\n// Example usage\n$data = array(\n    'username' => 'john_doe',\n    'email' => 'johndoe@example.com',\n    'password' => 'mysecretpassword'\n);\n\n$result = register_user($data);\nprint_r($result);\n\n?>\n```\n\nThis example assumes you have a MySQL database set up with a table named `users` containing the fields `username`, `email`, and `password`.\n\nNote: You should always use prepared statements to prevent SQL injection attacks. Also, do not store passwords in plain text; always hash them using a secure hashing algorithm like bcrypt.\n\n**How it works**\n\n1. The function takes an array of user data as input.\n2. It validates the input data (username, email, and password) for correctness.\n3. If all validation checks pass, it hashes the password using the `password_hash` function.\n4. It then attempts to insert the user data into a database table named `users`.\n5. Finally, it returns an array indicating whether the registration was successful or not.\n\nRemember to adjust the database connection settings and table schema according to your specific setup.", "code_blocks": ["```php\n<?php\n\nfunction register_user($data) {\n    // Validation\n    if (empty($data['username']) || empty($data['email']) || empty($data['password'])) {\n        return array('error' => 'All fields are required.');\n    }\n\n    if (!preg_match('/^[a-zA-Z0-9_]+$/', $data['username'])) {\n        return array('error' => 'Username can only contain letters, numbers and underscores.');\n    }\n\n    if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n        return array('error' => 'Invalid email address.');\n    }\n\n    if (strlen($data['password']) < 8) {\n        return array('error' => 'Password must be at least 8 characters long.');\n    }\n\n    // Hash password\n    $hashed_password = password_hash($data['password'], PASSWORD_DEFAULT);\n\n    // Insert into database\n    try {\n        $db = new PDO('mysql:host=localhost;dbname=database', 'username', 'password');\n        $stmt = $db->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $data['username']);\n        $stmt->bindParam(':email', $data['email']);\n        $stmt->bindParam(':password', $hashed_password);\n        $stmt->execute();\n\n        return array('success' => 'User registered successfully.');\n    } catch (PDOException $e) {\n        return array('error' => 'Database error: ' . $e->getMessage());\n    }\n}\n\n// Example usage\n$data = array(\n    'username' => 'john_doe',\n    'email' => 'johndoe@example.com',\n    'password' => 'mysecretpassword'\n);\n\n$result = register_user($data);\nprint_r($result);\n\n?>\n```"]}
