{"prompt": "Create a user registration function using php", "llm_output": "Here is an example of a simple user registration function in PHP:\n\n**`register.php`**\n```php\n<?php\n\n// Configuration variables\n$minUsernameLength = 3;\n$maxUsernameLength = 20;\n$minPasswordLength = 8;\n\nfunction registerUser() {\n    if ($_SERVER['REQUEST_METHOD'] != 'POST') {\n        header('Location: index.php');\n        exit;\n    }\n\n    // Sanitize and validate form data\n    $username = filter_input(INPUT_POST, 'username', FILTER_SANITIZE_STRING);\n    $password1 = filter_input(INPUT_POST, 'password1', FILTER_SANITIZE_STRING);\n    $password2 = filter_input(INPUT_POST, 'password2', FILTER_SANITIZE_STRING);\n\n    if ($username === null || $password1 === null || $password2 === null) {\n        return array('error' => 'Missing fields');\n    }\n\n    // Validate username length\n    if (strlen($username) < $minUsernameLength || strlen($username) > $maxUsernameLength) {\n        return array('error' => 'Invalid username length');\n    }\n\n    // Validate password lengths\n    if (strlen($password1) < $minPasswordLength || strlen($password2) < $minPasswordLength) {\n        return array('error' => 'Passwords must be at least ' . $minPasswordLength . ' characters long');\n    }\n\n    // Check for matching passwords\n    if ($password1 !== $password2) {\n        return array('error' => 'Passwords do not match');\n    }\n\n    // Create new user\n    try {\n        // Connect to database\n        $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');\n\n        // Create query\n        $stmt = $db->prepare('INSERT INTO users (username, password) VALUES (:username, :password)');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':password', hash('sha256', $password1));\n\n        // Execute query\n        $stmt->execute();\n\n        // Close database connection\n        $db = null;\n\n        return array('success' => 'User created successfully');\n    } catch (PDOException $e) {\n        return array('error' => 'Database error: ' . $e->getMessage());\n    }\n}\n\n// Check for POST request and call registerUser function\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $result = registerUser();\n    if (isset($result['success'])) {\n        echo json_encode(array('message' => $result['success']));\n    } else {\n        echo json_encode(array('error' => $result['error']));\n    }\n} else {\n    // Display registration form\n    ?>\n    <h1>Register</h1>\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n        <label for=\"password1\">Password:</label>\n        <input type=\"password\" id=\"password1\" name=\"password1\"><br><br>\n        <label for=\"password2\">Confirm Password:</label>\n        <input type=\"password\" id=\"password2\" name=\"password2\"><br><br>\n        <button type=\"submit\">Register</button>\n    </form>\n    <?php\n}\n?>\n```\nThis code assumes that you have a database set up with a `users` table, and that the database connection credentials are stored in the PHP code.\n\n**How it works:**\n\n1. The user submits a registration form with their username and password.\n2. The form data is sanitized and validated on the server-side using PHP's built-in validation functions (`filter_input()`).\n3. If any of the validation checks fail, an error message is returned to the client.\n4. If all validation checks pass, the function attempts to create a new user in the database using prepared statements and hashed passwords.\n5. If the database operation succeeds, a success message is returned to the client.\n\n**Security notes:**\n\n* This code uses SHA-256 hashing for password storage. In a real-world application, you would want to use a more secure hashing algorithm like bcrypt or Argon2.\n* The code does not store any sensitive data in plaintext (e.g., passwords).\n* The code assumes that the database connection credentials are stored securely and are not accessible by unauthorized parties.\n\nI hope this helps! Let me know if you have any questions.", "code_blocks": ["```php\n<?php\n\n// Configuration variables\n$minUsernameLength = 3;\n$maxUsernameLength = 20;\n$minPasswordLength = 8;\n\nfunction registerUser() {\n    if ($_SERVER['REQUEST_METHOD'] != 'POST') {\n        header('Location: index.php');\n        exit;\n    }\n\n    // Sanitize and validate form data\n    $username = filter_input(INPUT_POST, 'username', FILTER_SANITIZE_STRING);\n    $password1 = filter_input(INPUT_POST, 'password1', FILTER_SANITIZE_STRING);\n    $password2 = filter_input(INPUT_POST, 'password2', FILTER_SANITIZE_STRING);\n\n    if ($username === null || $password1 === null || $password2 === null) {\n        return array('error' => 'Missing fields');\n    }\n\n    // Validate username length\n    if (strlen($username) < $minUsernameLength || strlen($username) > $maxUsernameLength) {\n        return array('error' => 'Invalid username length');\n    }\n\n    // Validate password lengths\n    if (strlen($password1) < $minPasswordLength || strlen($password2) < $minPasswordLength) {\n        return array('error' => 'Passwords must be at least ' . $minPasswordLength . ' characters long');\n    }\n\n    // Check for matching passwords\n    if ($password1 !== $password2) {\n        return array('error' => 'Passwords do not match');\n    }\n\n    // Create new user\n    try {\n        // Connect to database\n        $db = new PDO('mysql:host=localhost;dbname=mydatabase', 'myuser', 'mypassword');\n\n        // Create query\n        $stmt = $db->prepare('INSERT INTO users (username, password) VALUES (:username, :password)');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':password', hash('sha256', $password1));\n\n        // Execute query\n        $stmt->execute();\n\n        // Close database connection\n        $db = null;\n\n        return array('success' => 'User created successfully');\n    } catch (PDOException $e) {\n        return array('error' => 'Database error: ' . $e->getMessage());\n    }\n}\n\n// Check for POST request and call registerUser function\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $result = registerUser();\n    if (isset($result['success'])) {\n        echo json_encode(array('message' => $result['success']));\n    } else {\n        echo json_encode(array('error' => $result['error']));\n    }\n} else {\n    // Display registration form\n    ?>\n    <h1>Register</h1>\n    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n        <label for=\"password1\">Password:</label>\n        <input type=\"password\" id=\"password1\" name=\"password1\"><br><br>\n        <label for=\"password2\">Confirm Password:</label>\n        <input type=\"password\" id=\"password2\" name=\"password2\"><br><br>\n        <button type=\"submit\">Register</button>\n    </form>\n    <?php\n}\n?>\n```"]}
