{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nThe following code demonstrates a basic user registration function using PHP. This function includes validation for username, email, and password.\n\n```php\n// User class to store user data\nclass User {\n    public $id;\n    public $username;\n    public $email;\n    public $password;\n\n    // Constructor to initialize user data\n    public function __construct($id, $username, $email, $password) {\n        $this->id = $id;\n        $this->username = $username;\n        $this->email = $email;\n        $this->password = hash('sha256', $password);\n    }\n}\n\n// Function to register a new user\nfunction registerUser($data) {\n    // Validate input data\n    if (empty($data['username']) || empty($data['email']) || empty($data['password'])) {\n        return array('success' => false, 'message' => 'Please fill in all fields');\n    }\n\n    $existingUsers = getUsers();\n\n    foreach ($existingUsers as $user) {\n        // Check if username or email already exists\n        if ($user->username == $data['username'] || $user->email == $data['email']) {\n            return array('success' => false, 'message' => 'Username or email already taken');\n        }\n    }\n\n    // Register new user\n    $newUser = new User(null, $data['username'], $data['email'], $data['password']);\n    array_push($existingUsers, $newUser);\n\n    return array('success' => true, 'message' => 'Registration successful');\n}\n\n// Function to get all existing users (in-memory database)\nfunction getUsers() {\n    // In a real application, this would be replaced with a database query\n    $users = array(\n        new User(1, 'john', 'john@example.com', 'password123'),\n        new User(2, 'jane', 'jane@example.com', 'password456')\n    );\n\n    return $users;\n}\n\n// Example usage:\n$data = array('username' => 'newuser', 'email' => 'newuser@example.com', 'password' => 'newpassword');\n\n$result = registerUser($data);\n\nif ($result['success']) {\n    echo \"Registration successful!\";\n} else {\n    echo \"Error: \" . $result['message'];\n}\n```\n\n**Note:** This code uses a simple in-memory database to store user data. In a real application, you would replace this with a proper database connection and query.\n\n**Commit Message:**\n\n`Added basic user registration function using PHP.`", "code_blocks": ["```php\n// User class to store user data\nclass User {\n    public $id;\n    public $username;\n    public $email;\n    public $password;\n\n    // Constructor to initialize user data\n    public function __construct($id, $username, $email, $password) {\n        $this->id = $id;\n        $this->username = $username;\n        $this->email = $email;\n        $this->password = hash('sha256', $password);\n    }\n}\n\n// Function to register a new user\nfunction registerUser($data) {\n    // Validate input data\n    if (empty($data['username']) || empty($data['email']) || empty($data['password'])) {\n        return array('success' => false, 'message' => 'Please fill in all fields');\n    }\n\n    $existingUsers = getUsers();\n\n    foreach ($existingUsers as $user) {\n        // Check if username or email already exists\n        if ($user->username == $data['username'] || $user->email == $data['email']) {\n            return array('success' => false, 'message' => 'Username or email already taken');\n        }\n    }\n\n    // Register new user\n    $newUser = new User(null, $data['username'], $data['email'], $data['password']);\n    array_push($existingUsers, $newUser);\n\n    return array('success' => true, 'message' => 'Registration successful');\n}\n\n// Function to get all existing users (in-memory database)\nfunction getUsers() {\n    // In a real application, this would be replaced with a database query\n    $users = array(\n        new User(1, 'john', 'john@example.com', 'password123'),\n        new User(2, 'jane', 'jane@example.com', 'password456')\n    );\n\n    return $users;\n}\n\n// Example usage:\n$data = array('username' => 'newuser', 'email' => 'newuser@example.com', 'password' => 'newpassword');\n\n$result = registerUser($data);\n\nif ($result['success']) {\n    echo \"Registration successful!\";\n} else {\n    echo \"Error: \" . $result['message'];\n}\n```"]}
