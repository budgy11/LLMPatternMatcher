{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nThis example demonstrates a basic user registration function in PHP, including validation and password hashing.\n\n### Function Code\n```php\n/**\n * Register a new user.\n *\n * @param string $username Unique username.\n * @param string $email User email address.\n * @param string $password User password (hashed).\n * @return bool True on successful registration, false otherwise.\n */\nfunction registerUser($username, $email, $password)\n{\n    // Validate input data\n    if (!validateUsername($username) || !validateEmail($email)) {\n        return false;\n    }\n\n    // Hash the password\n    $hashedPassword = hashPassword($password);\n\n    // Insert user into database\n    try {\n        $db = new Database();\n        $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n        $stmt = $db->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n    } catch (PDOException $e) {\n        // Handle database error\n        echo \"Error registering user: \" . $e->getMessage() . \"\\n\";\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Validate a username.\n *\n * @param string $username Unique username to validate.\n * @return bool True if valid, false otherwise.\n */\nfunction validateUsername($username)\n{\n    // Check length (min 3 characters)\n    if (strlen($username) < 3) {\n        return false;\n    }\n\n    // Check for invalid characters\n    if (!preg_match(\"/^[a-zA-Z0-9_]+$/\", $username)) {\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Validate an email address.\n *\n * @param string $email User email address to validate.\n * @return bool True if valid, false otherwise.\n */\nfunction validateEmail($email)\n{\n    // Check format using regular expression\n    if (!preg_match(\"/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\", $email)) {\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Hash a password.\n *\n * @param string $password User password to hash.\n * @return string Hashed password.\n */\nfunction hashPassword($password)\n{\n    // Use a secure hashing algorithm (e.g. bcrypt)\n    return password_hash($password, PASSWORD_BCRYPT);\n}\n```\n### Explanation\n\nThis example includes:\n\n1. The `registerUser` function, which takes three parameters: `$username`, `$email`, and `$password`.\n2. Input validation using the `validateUsername` and `validateEmail` functions.\n3. Password hashing using the `hashPassword` function (using bcrypt).\n4. Database interaction to insert the new user into the database.\n\n### Example Usage\n```php\n$username = 'johnDoe';\n$email = 'johndoe@example.com';\n$password = 'password123';\n\nif (registerUser($username, $email, $password)) {\n    echo \"User registered successfully!\";\n} else {\n    echo \"Error registering user.\";\n}\n```\nNote that this example assumes a `Database` class is available for interacting with the database. You will need to modify the code to match your specific database setup and configuration.", "code_blocks": ["```php\n/**\n * Register a new user.\n *\n * @param string $username Unique username.\n * @param string $email User email address.\n * @param string $password User password (hashed).\n * @return bool True on successful registration, false otherwise.\n */\nfunction registerUser($username, $email, $password)\n{\n    // Validate input data\n    if (!validateUsername($username) || !validateEmail($email)) {\n        return false;\n    }\n\n    // Hash the password\n    $hashedPassword = hashPassword($password);\n\n    // Insert user into database\n    try {\n        $db = new Database();\n        $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n        $stmt = $db->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n    } catch (PDOException $e) {\n        // Handle database error\n        echo \"Error registering user: \" . $e->getMessage() . \"\\n\";\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Validate a username.\n *\n * @param string $username Unique username to validate.\n * @return bool True if valid, false otherwise.\n */\nfunction validateUsername($username)\n{\n    // Check length (min 3 characters)\n    if (strlen($username) < 3) {\n        return false;\n    }\n\n    // Check for invalid characters\n    if (!preg_match(\"/^[a-zA-Z0-9_]+$/\", $username)) {\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Validate an email address.\n *\n * @param string $email User email address to validate.\n * @return bool True if valid, false otherwise.\n */\nfunction validateEmail($email)\n{\n    // Check format using regular expression\n    if (!preg_match(\"/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\", $email)) {\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Hash a password.\n *\n * @param string $password User password to hash.\n * @return string Hashed password.\n */\nfunction hashPassword($password)\n{\n    // Use a secure hashing algorithm (e.g. bcrypt)\n    return password_hash($password, PASSWORD_BCRYPT);\n}\n```", "```php\n$username = 'johnDoe';\n$email = 'johndoe@example.com';\n$password = 'password123';\n\nif (registerUser($username, $email, $password)) {\n    echo \"User registered successfully!\";\n} else {\n    echo \"Error registering user.\";\n}\n```"]}
