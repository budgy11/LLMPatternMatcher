{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function checks if the username and email address already exist, and then inserts the new user into the database.\n\n**Database Schema**\n\nAssuming we have the following database schema:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255) NOT NULL UNIQUE,\n  email VARCHAR(255) NOT NULL UNIQUE,\n  password VARCHAR(255) NOT NULL\n);\n```\n**User Registration Function**\n```php\nfunction registerUser($username, $email, $password) {\n  // Check if username and email already exist\n  $query = \"SELECT * FROM users WHERE username = :username OR email = :email\";\n  $stmt = db::getInstance()->prepare($query);\n  $stmt->bindParam(':username', $username);\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  \n  if ($stmt->rowCount() > 0) {\n    return array('error' => 'Username or email already exists');\n  }\n  \n  // Hash password\n  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n  \n  // Insert new user into database\n  $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n  $stmt = db::getInstance()->prepare($query);\n  $stmt->bindParam(':username', $username);\n  $stmt->bindParam(':email', $email);\n  $stmt->bindParam(':password', $hashedPassword);\n  $stmt->execute();\n  \n  return array('message' => 'User registered successfully');\n}\n```\n**Note**: `db::getInstance()` is an example of a database connection class that provides a singleton instance of the database connection.\n\n**Usage**\n```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($username, $email, $password);\n\nif (isset($result['error'])) {\n  echo json_encode(array('error' => $result['error']));\n} else {\n  echo json_encode($result);\n}\n```\nThis function returns a JSON response with either an error message or a success message. You can modify the return values to suit your application's needs.\n\n**Security Considerations**\n\n* Use prepared statements and parameterized queries to prevent SQL injection attacks.\n* Hash passwords using a strong hashing algorithm like `password_hash()`.\n* Use secure password storage practices, such as storing salted hashes instead of plain text passwords.", "code_blocks": [null, "```php\nfunction registerUser($username, $email, $password) {\n  // Check if username and email already exist\n  $query = \"SELECT * FROM users WHERE username = :username OR email = :email\";\n  $stmt = db::getInstance()->prepare($query);\n  $stmt->bindParam(':username', $username);\n  $stmt->bindParam(':email', $email);\n  $stmt->execute();\n  \n  if ($stmt->rowCount() > 0) {\n    return array('error' => 'Username or email already exists');\n  }\n  \n  // Hash password\n  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n  \n  // Insert new user into database\n  $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n  $stmt = db::getInstance()->prepare($query);\n  $stmt->bindParam(':username', $username);\n  $stmt->bindParam(':email', $email);\n  $stmt->bindParam(':password', $hashedPassword);\n  $stmt->execute();\n  \n  return array('message' => 'User registered successfully');\n}\n```", "```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($username, $email, $password);\n\nif (isset($result['error'])) {\n  echo json_encode(array('error' => $result['error']));\n} else {\n  echo json_encode($result);\n}\n```"]}
