{"prompt": "Create a user registration function using php", "llm_output": "<think>\nOkay, I need to create a user registration function using PHP. Let me think about how to approach this.\n\nFirst, I should consider the essential components of a registration system. The user needs to submit their details, so an HTML form is necessary. It should include fields like username, email, password, confirm password, full name, and date of birth. \n\nNext, on the server side, I'll need a PHP script that processes this form data. I remember that using POST method for forms is standard because it keeps data hidden from the URL.\n\nData validation is crucial. I should check if all required fields are filled in. For each field, I'll need specific checks: username and email can't be empty, password must match the confirm password, and they should both meet certain criteria like length and special characters. Email needs to be validated using a regex pattern.\n\nSanitization is also important to prevent SQL injection or XSS attacks. Using htmlspecialchars will help with that when displaying data later.\n\nFor security, I'll hash the password before storing it in the database. PHP's password_hash function is suitable for this purpose.\n\nNow, handling the database part. I need to connect to a MySQL database. Using mysqli_connect with proper credentials is essential. Then, prepare an SQL query to insert the user's data into the users table. Prepared statements are better to prevent SQL injection.\n\nI should check if the username or email already exists in the database before inserting a new record. This avoids duplicate entries and ensures each user is unique.\n\nAfter successful registration, redirecting the user to a welcome page makes sense. If there's an error, displaying messages on the same form will help the user correct their input.\n\nI should also consider including a session or cookie to keep the user logged in after registration, but that can be added later.\n\nTesting each part step by step is important: check form submission, validate data, sanitize inputs, hash passwords, connect and query the database, handle errors, and ensure redirects work correctly.\n\nFinally, I'll structure the code with clear sections for HTML form, PHP processing, and the database connection. Using placeholders like [your_database_name], [username], and [password] reminds me to replace them with actual credentials before deployment.\n</think>\n\nHere's a user registration function using PHP:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$username = 'root'; // Change this to your database username\n$password = '';      // Change this to your database password\n$db_name = 'user_registration';\n\n// Connect to the database\n$conn = mysqli_connect($host, $username, $password, $db_name);\n\n// Check connection\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// Session initialization\nsession_start();\n\n// Function to sanitize input data\nfunction sanitizeInput($data) {\n    $data = trim($data);\n    $data = htmlspecialchars($data);\n    return $data;\n}\n\n// Check if form is submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n\n    // Get user inputs\n    $username = sanitizeInput($_POST['username']);\n    $email = sanitizeInput($_POST['email']);\n    $password = $_POST['password'];\n    $confirm_password = $_POST['confirm_password'];\n    $full_name = sanitizeInput($_POST['full_name']);\n    $date_of_birth = $_POST['date_of_birth'];\n\n    // Validate inputs\n    $errors = array();\n\n    if (empty($username)) {\n        $errors[] = \"Username is required\";\n    }\n\n    if (empty($email)) {\n        $errors[] = \"Email is required\";\n    }\n\n    if (empty($password)) {\n        $errors[] = \"Password is required\";\n    }\n\n    if ($password !== $confirm_password) {\n        $errors[] = \"Passwords do not match\";\n    }\n\n    // Check password strength\n    if (!preg_match(\"/^[a-zA-Z0-9\\!\\@\\#\\$\\%\\&\\*\\(\\)\\_\\+]+$/', $password)) {\n        $errors[] = \"Password can only contain letters, numbers, and special characters (!@#$%^&*()+)\";\n    }\n\n    if (strlen($password) < 8) {\n        $errors[] = \"Password must be at least 8 characters long\";\n    }\n\n    // Validate email format\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        $errors[] = \"Invalid email format\";\n    }\n\n    // If there are no errors\n    if (empty($errors)) {\n\n        // Hash the password\n        $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n        // Prepare SQL statement to check if username or email already exists\n        $stmt_check = $conn->prepare(\"SELECT id FROM users WHERE username = ? OR email = ?\");\n        $stmt_check->bind_param(\"ss\", $username, $email);\n        $stmt_check->execute();\n        $result_check = $stmt_check->get_result();\n\n        if ($result_check->num_rows > 0) {\n            $errors[] = \"Username or email already exists\";\n        } else {\n\n            // Prepare SQL statement to insert new user\n            $stmt = $conn->prepare(\"INSERT INTO users (username, email, password, full_name, date_of_birth) VALUES (?, ?, ?, ?, ?)\");\n            $stmt->bind_param(\"sssss\", $username, $email, $hashed_password, $full_name, $date_of_birth);\n\n            if ($stmt->execute()) {\n                // Registration successful\n                $_SESSION['username'] = $username;\n                header(\"Location: welcome.php\");\n                exit();\n            } else {\n                $errors[] = \"Error registering user. Please try again.\";\n            }\n        }\n\n    }\n\n}\n\n// Close the database connection\nmysqli_close($conn);\n\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Registration Page</title>\n    <style>\n        .error {\n            color: red;\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n\n<?php\nif (!empty($errors)) {\n    foreach ($errors as $error) {\n        echo \"<div class='error'>$error</div>\";\n    }\n}\n?>\n\n<form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n    <label>Username:</label><br>\n    <input type=\"text\" name=\"username\"><br>\n\n    <label>Email:</label><br>\n    <input type=\"email\" name=\"email\"><br>\n\n    <label>Password:</label><br>\n    <input type=\"password\" name=\"password\"><br>\n\n    <label>Confirm Password:</label><br>\n    <input type=\"password\" name=\"confirm_password\"><br>\n\n    <label>Full Name:</label><br>\n    <input type=\"text\" name=\"full_name\"><br>\n\n    <label>Date of Birth:</label><br>\n    <input type=\"date\" name=\"date_of_birth\"><br>\n\n    <input type=\"submit\" value=\"Register\">\n</form>\n\n<p>Already have an account? <a href=\"login.php\">Login here</a></p>\n\n</body>\n</html>\n```\n\nThis registration script includes the following features:\n\n1. Data validation for all fields\n2. Password strength requirements:\n   - At least 8 characters long\n   - Can contain letters, numbers, and special characters (!@#$%^&*()+)\n\n3. Email validation\n4. Username availability check\n5. Email uniqueness check\n6. Error handling and messages\n7. Password hashing using PHP's `password_hash()` function\n8. Secure database connection using mysqli\n9. Input sanitization\n\nTo use this script:\n\n1. Create a MySQL database named 'user_registration' (or modify the $db_name variable)\n2. Create a table named 'users' with the following columns:\n   - id (INT, AUTO_INCREMENT, PRIMARY KEY)\n   - username (VARCHAR(50))\n   - email (VARCHAR(100))\n   - password (VARCHAR(255))\n   - full_name (VARCHAR(100))\n   - date_of_birth (DATE)\n3. Update the database connection details ($host, $username, $password) to match your environment\n4. Create a 'welcome.php' page for successful registration redirect\n\nThe script also includes:\n- Session initialization for user authentication\n- Secure form submission using POST method\n- Input sanitization and validation\n- Error messages display\n- Registration success redirect\n- Link to login page\n\nRemember to:\n\n1. Never store passwords in plain text (we use password_hash() for secure storage)\n2. Always sanitize user input data\n3. Use HTTPS in production environment\n4. Implement additional security measures like CSRF protection and rate limiting in a production environment", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$username = 'root'; // Change this to your database username\n$password = '';      // Change this to your database password\n$db_name = 'user_registration';\n\n// Connect to the database\n$conn = mysqli_connect($host, $username, $password, $db_name);\n\n// Check connection\nif (!$conn) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\n// Session initialization\nsession_start();\n\n// Function to sanitize input data\nfunction sanitizeInput($data) {\n    $data = trim($data);\n    $data = htmlspecialchars($data);\n    return $data;\n}\n\n// Check if form is submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n\n    // Get user inputs\n    $username = sanitizeInput($_POST['username']);\n    $email = sanitizeInput($_POST['email']);\n    $password = $_POST['password'];\n    $confirm_password = $_POST['confirm_password'];\n    $full_name = sanitizeInput($_POST['full_name']);\n    $date_of_birth = $_POST['date_of_birth'];\n\n    // Validate inputs\n    $errors = array();\n\n    if (empty($username)) {\n        $errors[] = \"Username is required\";\n    }\n\n    if (empty($email)) {\n        $errors[] = \"Email is required\";\n    }\n\n    if (empty($password)) {\n        $errors[] = \"Password is required\";\n    }\n\n    if ($password !== $confirm_password) {\n        $errors[] = \"Passwords do not match\";\n    }\n\n    // Check password strength\n    if (!preg_match(\"/^[a-zA-Z0-9\\!\\@\\#\\$\\%\\&\\*\\(\\)\\_\\+]+$/', $password)) {\n        $errors[] = \"Password can only contain letters, numbers, and special characters (!@#$%^&*()+)\";\n    }\n\n    if (strlen($password) < 8) {\n        $errors[] = \"Password must be at least 8 characters long\";\n    }\n\n    // Validate email format\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        $errors[] = \"Invalid email format\";\n    }\n\n    // If there are no errors\n    if (empty($errors)) {\n\n        // Hash the password\n        $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n        // Prepare SQL statement to check if username or email already exists\n        $stmt_check = $conn->prepare(\"SELECT id FROM users WHERE username = ? OR email = ?\");\n        $stmt_check->bind_param(\"ss\", $username, $email);\n        $stmt_check->execute();\n        $result_check = $stmt_check->get_result();\n\n        if ($result_check->num_rows > 0) {\n            $errors[] = \"Username or email already exists\";\n        } else {\n\n            // Prepare SQL statement to insert new user\n            $stmt = $conn->prepare(\"INSERT INTO users (username, email, password, full_name, date_of_birth) VALUES (?, ?, ?, ?, ?)\");\n            $stmt->bind_param(\"sssss\", $username, $email, $hashed_password, $full_name, $date_of_birth);\n\n            if ($stmt->execute()) {\n                // Registration successful\n                $_SESSION['username'] = $username;\n                header(\"Location: welcome.php\");\n                exit();\n            } else {\n                $errors[] = \"Error registering user. Please try again.\";\n            }\n        }\n\n    }\n\n}\n\n// Close the database connection\nmysqli_close($conn);\n\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Registration Page</title>\n    <style>\n        .error {\n            color: red;\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n\n<?php\nif (!empty($errors)) {\n    foreach ($errors as $error) {\n        echo \"<div class='error'>$error</div>\";\n    }\n}\n?>\n\n<form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n    <label>Username:</label><br>\n    <input type=\"text\" name=\"username\"><br>\n\n    <label>Email:</label><br>\n    <input type=\"email\" name=\"email\"><br>\n\n    <label>Password:</label><br>\n    <input type=\"password\" name=\"password\"><br>\n\n    <label>Confirm Password:</label><br>\n    <input type=\"password\" name=\"confirm_password\"><br>\n\n    <label>Full Name:</label><br>\n    <input type=\"text\" name=\"full_name\"><br>\n\n    <label>Date of Birth:</label><br>\n    <input type=\"date\" name=\"date_of_birth\"><br>\n\n    <input type=\"submit\" value=\"Register\">\n</form>\n\n<p>Already have an account? <a href=\"login.php\">Login here</a></p>\n\n</body>\n</html>\n```"]}
