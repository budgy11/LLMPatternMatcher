{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a basic user registration function in PHP. This function includes validation for username, email, and password.\n\n```php\n<?php\n\nfunction registerUser($username, $email, $password) {\n    // Database connection (replace with your own database credentials)\n    $dbhost = 'localhost';\n    $dbuser = 'your_username';\n    $dbpass = 'your_password';\n    $dbname = 'your_database';\n\n    try {\n        $conn = new PDO(\"mysql:host=$dbhost;dbname=$dbname\", $dbuser, $dbpass);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Hash password\n        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n        // Insert user data into database\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        if ($stmt->execute()) {\n            return true; // User successfully registered\n        } else {\n            return false; // Error registering user\n        }\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n        return false;\n    }\n}\n\n?>\n```\n\n**Example Usage**\n---------------\n\nTo use this function, simply call it with the desired username, email address, and password as arguments.\n\n```php\nif (registerUser('newuser', 'newuser@example.com', 'password123')) {\n    echo \"User successfully registered!\";\n} else {\n    echo \"Error registering user.\";\n}\n```\n\n**Validation**\n-------------\n\nThis function does not include any validation for the username, email address, or password. You may want to add this functionality depending on your specific needs.\n\n```php\nif (!preg_match('/^[a-zA-Z0-9]+$/', $username)) {\n    echo \"Invalid username.\";\n} elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo \"Invalid email address.\";\n} elseif (strlen($password) < 8) {\n    echo \"Password must be at least 8 characters long.\";\n}\n```\n\nRemember to replace the database credentials with your own and adjust the validation rules as needed.", "code_blocks": ["```php\n<?php\n\nfunction registerUser($username, $email, $password) {\n    // Database connection (replace with your own database credentials)\n    $dbhost = 'localhost';\n    $dbuser = 'your_username';\n    $dbpass = 'your_password';\n    $dbname = 'your_database';\n\n    try {\n        $conn = new PDO(\"mysql:host=$dbhost;dbname=$dbname\", $dbuser, $dbpass);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Hash password\n        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n        // Insert user data into database\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        if ($stmt->execute()) {\n            return true; // User successfully registered\n        } else {\n            return false; // Error registering user\n        }\n    } catch (PDOException $e) {\n        echo 'Error: ' . $e->getMessage();\n        return false;\n    }\n}\n\n?>\n```", "```php\nif (registerUser('newuser', 'newuser@example.com', 'password123')) {\n    echo \"User successfully registered!\";\n} else {\n    echo \"Error registering user.\";\n}\n```", "```php\nif (!preg_match('/^[a-zA-Z0-9]+$/', $username)) {\n    echo \"Invalid username.\";\n} elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo \"Invalid email address.\";\n} elseif (strlen($password) < 8) {\n    echo \"Password must be at least 8 characters long.\";\n}\n```"]}
