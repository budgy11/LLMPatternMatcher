{"prompt": "Create a user registration function using php", "llm_output": "Here is an example of a simple user registration function in PHP:\n\n**`register.php`**\n```php\n<?php\nrequire_once 'db.php'; // assume you have a db.php file for database connection\n\nfunction registerUser($name, $email, $password) {\n  // sanitize input\n  $name = strip_tags(trim($name));\n  $email = filter_var($email, FILTER_VALIDATE_EMAIL);\n  $password = password_hash($password, PASSWORD_DEFAULT);\n\n  // prepare query to insert user into database\n  $query = \"INSERT INTO users (name, email, password) VALUES (:name, :email, :password)\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':name', $name);\n  $stmt->bindParam(':email', $email);\n  $stmt->bindParam(':password', $password);\n\n  // execute query and get last insert id\n  try {\n    $stmt->execute();\n    $userId = $pdo->lastInsertId();\n\n    return array('success' => true, 'message' => 'User registered successfully!', 'userId' => $userId);\n  } catch (PDOException $e) {\n    return array('success' => false, 'message' => 'Error registering user: ' . $e->getMessage());\n  }\n}\n\n// example usage\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $name = $_POST['name'];\n  $email = $_POST['email'];\n  $password = $_POST['password'];\n\n  $result = registerUser($name, $email, $password);\n  echo json_encode($result);\n}\n?>\n```\n\n**`db.php`**\n```php\n<?php\n$dsn = 'mysql:host=localhost;dbname=mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\ntry {\n  $pdo = new PDO($dsn, $username, $password);\n  $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n  echo 'Connection failed: ' . $e->getMessage();\n}\n?>\n```\n\n**`index.html`**\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Register User</title>\n</head>\n<body>\n  <form action=\"register.php\" method=\"post\">\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n    <button type=\"submit\">Register</button>\n  </form>\n\n  <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n  <script>\n    $(document).ready(function() {\n      $('form').submit(function(e) {\n        e.preventDefault();\n        var name = $('#name').val();\n        var email = $('#email').val();\n        var password = $('#password').val();\n\n        $.ajax({\n          type: 'POST',\n          url: 'register.php',\n          data: {name: name, email: email, password: password},\n          success: function(response) {\n            console.log(response);\n          },\n          error: function(xhr, status, error) {\n            console.log(error);\n          }\n        });\n      });\n    });\n  </script>\n</body>\n</html>\n```\n\nThis code registers a user with a provided name, email, and password. The `registerUser` function takes care of input validation, hashing the password, and inserting the user into the database using PDO.\n\nRemember to replace the placeholders in `db.php` with your actual database credentials and connection details.\n\nAlso note that this is a basic example and you should consider implementing additional security measures such as:\n\n* Client-side form validation\n* Server-side validation (e.g., email format, password length)\n* Token-based authentication for subsequent logins\n* Error handling and logging\n\nPlease adapt the code to fit your specific requirements and development environment.", "code_blocks": ["```php\n<?php\nrequire_once 'db.php'; // assume you have a db.php file for database connection\n\nfunction registerUser($name, $email, $password) {\n  // sanitize input\n  $name = strip_tags(trim($name));\n  $email = filter_var($email, FILTER_VALIDATE_EMAIL);\n  $password = password_hash($password, PASSWORD_DEFAULT);\n\n  // prepare query to insert user into database\n  $query = \"INSERT INTO users (name, email, password) VALUES (:name, :email, :password)\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':name', $name);\n  $stmt->bindParam(':email', $email);\n  $stmt->bindParam(':password', $password);\n\n  // execute query and get last insert id\n  try {\n    $stmt->execute();\n    $userId = $pdo->lastInsertId();\n\n    return array('success' => true, 'message' => 'User registered successfully!', 'userId' => $userId);\n  } catch (PDOException $e) {\n    return array('success' => false, 'message' => 'Error registering user: ' . $e->getMessage());\n  }\n}\n\n// example usage\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n  $name = $_POST['name'];\n  $email = $_POST['email'];\n  $password = $_POST['password'];\n\n  $result = registerUser($name, $email, $password);\n  echo json_encode($result);\n}\n?>\n```", "```php\n<?php\n$dsn = 'mysql:host=localhost;dbname=mydatabase';\n$username = 'myusername';\n$password = 'mypassword';\n\ntry {\n  $pdo = new PDO($dsn, $username, $password);\n  $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n  echo 'Connection failed: ' . $e->getMessage();\n}\n?>\n```", null]}
