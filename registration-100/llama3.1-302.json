{"prompt": "Create a user registration function using php", "llm_output": "Here is an example of a user registration function in PHP:\n```php\n<?php\n\n// Configuration variables\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database_name');\n\nfunction registerUser($username, $email, $password) {\n    // Check if username and email are not empty\n    if (empty($username) || empty($email)) {\n        return array(\n            'success' => false,\n            'error_message' => 'Please fill in all fields.'\n        );\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n        // Connect to database\n        $conn = new PDO(\"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME, DB_USER, DB_PASSWORD);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Prepare query\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n\n        // Bind parameters\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        // Execute query\n        if ($stmt->execute()) {\n            return array(\n                'success' => true,\n                'message' => 'User registered successfully.'\n            );\n        } else {\n            return array(\n                'success' => false,\n                'error_message' => 'Failed to register user.'\n            );\n        }\n    } catch (PDOException $e) {\n        return array(\n            'success' => false,\n            'error_message' => 'Database error: ' . $e->getMessage()\n        );\n    } finally {\n        // Close connection\n        if ($conn !== null) {\n            $conn = null;\n        }\n    }\n}\n\n// Example usage:\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$response = registerUser($username, $email, $password);\n\nif ($response['success']) {\n    echo json_encode(array('message' => $response['message']));\n} else {\n    echo json_encode(array('error_message' => $response['error_message']));\n}\n?>\n```\nThis code defines a `registerUser` function that takes three parameters: `$username`, `$email`, and `$password`. It checks if the username and email are not empty, hashes the password using `password_hash`, and then attempts to insert the user data into the database using PDO. If the query executes successfully, it returns an array with a success message; otherwise, it returns an error message.\n\nNote that this code assumes you have a `users` table in your database with columns for `username`, `email`, and `password`. You'll need to modify the SQL queries to match your actual database schema.\n\nYou can also use prepared statements to prevent SQL injection attacks. In this example, I've used PDO's `bindParam` method to bind the parameters, which helps prevent SQL injection.\n\nThis is just a basic example, you should add more error checking and validation as per your requirements.", "code_blocks": ["```php\n<?php\n\n// Configuration variables\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database_name');\n\nfunction registerUser($username, $email, $password) {\n    // Check if username and email are not empty\n    if (empty($username) || empty($email)) {\n        return array(\n            'success' => false,\n            'error_message' => 'Please fill in all fields.'\n        );\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n        // Connect to database\n        $conn = new PDO(\"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME, DB_USER, DB_PASSWORD);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Prepare query\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n\n        // Bind parameters\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        // Execute query\n        if ($stmt->execute()) {\n            return array(\n                'success' => true,\n                'message' => 'User registered successfully.'\n            );\n        } else {\n            return array(\n                'success' => false,\n                'error_message' => 'Failed to register user.'\n            );\n        }\n    } catch (PDOException $e) {\n        return array(\n            'success' => false,\n            'error_message' => 'Database error: ' . $e->getMessage()\n        );\n    } finally {\n        // Close connection\n        if ($conn !== null) {\n            $conn = null;\n        }\n    }\n}\n\n// Example usage:\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$response = registerUser($username, $email, $password);\n\nif ($response['success']) {\n    echo json_encode(array('message' => $response['message']));\n} else {\n    echo json_encode(array('error_message' => $response['error_message']));\n}\n?>\n```"]}
