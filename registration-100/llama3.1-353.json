{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a simple user registration function in PHP, including error handling and password hashing:\n\n```php\n// Configuration\n$minUsernameLength = 3;\n$maxUsernameLength = 30;\n$minPasswordLength = 8;\n\nfunction registerUser($username, $email, $password) {\n    global $minUsernameLength, $maxUsernameLength, $minPasswordLength;\n\n    // Validate input\n    if (strlen($username) < $minUsernameLength || strlen($username) > $maxUsernameLength) {\n        throw new Exception(\"Invalid username. Must be between $minUsernameLength and $maxUsernameLength characters.\");\n    }\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception(\"Invalid email address.\");\n    }\n    if (strlen($password) < $minPasswordLength) {\n        throw new Exception(\"Password must be at least $minPasswordLength characters.\");\n    }\n\n    // Hash password\n    try {\n        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n    } catch (Exception $e) {\n        throw new Exception(\"Failed to hash password: \" . $e->getMessage());\n    }\n\n    // Store user in database (replace with your own database code)\n    $query = \"INSERT INTO users SET username = ?, email = ?, password = ?\";\n    try {\n        $stmt = $GLOBALS['db']->prepare($query);\n        $stmt->execute([$username, $email, $hashedPassword]);\n    } catch (Exception $e) {\n        throw new Exception(\"Failed to store user in database: \" . $e->getMessage());\n    }\n\n    return true;\n}\n```\n\nExample usage:\n\n```php\ntry {\n    registerUser('johnDoe', 'johndoe@example.com', 'password123');\n} catch (Exception $e) {\n    echo 'Registration failed: ' . $e->getMessage();\n}\n```\n\nRemember to replace the database code with your own, and ensure you're using a secure password hashing algorithm like `PASSWORD_DEFAULT`. Also note that this example uses prepared statements for security reasons.\n\nThis is just one way of doing it. Depending on your project requirements, you might want to add more error handling or validation rules.", "code_blocks": ["```php\n// Configuration\n$minUsernameLength = 3;\n$maxUsernameLength = 30;\n$minPasswordLength = 8;\n\nfunction registerUser($username, $email, $password) {\n    global $minUsernameLength, $maxUsernameLength, $minPasswordLength;\n\n    // Validate input\n    if (strlen($username) < $minUsernameLength || strlen($username) > $maxUsernameLength) {\n        throw new Exception(\"Invalid username. Must be between $minUsernameLength and $maxUsernameLength characters.\");\n    }\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception(\"Invalid email address.\");\n    }\n    if (strlen($password) < $minPasswordLength) {\n        throw new Exception(\"Password must be at least $minPasswordLength characters.\");\n    }\n\n    // Hash password\n    try {\n        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n    } catch (Exception $e) {\n        throw new Exception(\"Failed to hash password: \" . $e->getMessage());\n    }\n\n    // Store user in database (replace with your own database code)\n    $query = \"INSERT INTO users SET username = ?, email = ?, password = ?\";\n    try {\n        $stmt = $GLOBALS['db']->prepare($query);\n        $stmt->execute([$username, $email, $hashedPassword]);\n    } catch (Exception $e) {\n        throw new Exception(\"Failed to store user in database: \" . $e->getMessage());\n    }\n\n    return true;\n}\n```", "```php\ntry {\n    registerUser('johnDoe', 'johndoe@example.com', 'password123');\n} catch (Exception $e) {\n    echo 'Registration failed: ' . $e->getMessage();\n}\n```"]}
