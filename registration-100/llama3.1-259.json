{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a simple user registration function using PHP. This example uses prepared statements to prevent SQL injection attacks.\n\n### Prerequisites:\n\n*   Database connection (MySQL) set up and accessible\n*   The following tables are created:\n    *   `users` with columns `id`, `username`, `email`, `password`\n    *   `sessions` with columns `id`, `user_id`, `session_token`\n\n### PHP Function\n\n```php\n<?php\n\n// Configuration variables (replace with your own)\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\nfunction dbConnect() {\n    $conn = new PDO(\"mysql:host=\".DB_HOST.\";dbname=\".DB_NAME, DB_USER, DB_PASSWORD);\n    return $conn;\n}\n\nfunction registerUser($username, $email, $password) {\n    // Validate input\n    if (empty($username) || empty($email) || empty($password)) {\n        throw new Exception('All fields are required');\n    }\n\n    try {\n        // Create connection to database\n        $db = dbConnect();\n\n        // Prepare SQL query\n        $stmt = $db->prepare(\"INSERT INTO users (username, email, password)\n                              VALUES (:username, :email, :password)\");\n\n        // Bind parameters\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $password);\n\n        // Execute query\n        if ($stmt->execute()) {\n            $newUserId = $db->lastInsertId();\n\n            // Generate session token and insert into sessions table\n            $sessionToken = uniqid();\n            $stmt = $db->prepare(\"INSERT INTO sessions (user_id, session_token)\n                                  VALUES (:user_id, :session_token)\");\n            $stmt->bindParam(':user_id', $newUserId);\n            $stmt->bindParam(':session_token', $sessionToken);\n            $stmt->execute();\n\n            // Return user data and session token\n            return array(\n                'username' => $username,\n                'email' => $email,\n                'sessionId' => $db->lastInsertId(),\n                'sessionToken' => $sessionToken\n            );\n        } else {\n            throw new Exception('Registration failed');\n        }\n    } catch (PDOException $e) {\n        throw new Exception('Database error: ' . $e->getMessage());\n    }\n}\n\n?>\n```\n\n### Example Usage:\n\n```php\n$username = \"johnDoe\";\n$email = \"johndoe@example.com\";\n$password = \"password123\";\n\ntry {\n    $userData = registerUser($username, $email, $password);\n    echo \"Registration successful! User data:\\n\";\n    print_r($userData);\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```\n\nNote that this is a basic implementation. You should consider implementing additional security measures such as:\n\n*   Hashing and salting passwords\n*   Implementing a more secure way to generate session tokens\n*   Using HTTPS for all communication between client and server\n\nRemember to replace the configuration variables (`DB_HOST`, `DB_USER`, `DB_PASSWORD`, `DB_NAME`) with your own database credentials.", "code_blocks": ["```php\n<?php\n\n// Configuration variables (replace with your own)\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\nfunction dbConnect() {\n    $conn = new PDO(\"mysql:host=\".DB_HOST.\";dbname=\".DB_NAME, DB_USER, DB_PASSWORD);\n    return $conn;\n}\n\nfunction registerUser($username, $email, $password) {\n    // Validate input\n    if (empty($username) || empty($email) || empty($password)) {\n        throw new Exception('All fields are required');\n    }\n\n    try {\n        // Create connection to database\n        $db = dbConnect();\n\n        // Prepare SQL query\n        $stmt = $db->prepare(\"INSERT INTO users (username, email, password)\n                              VALUES (:username, :email, :password)\");\n\n        // Bind parameters\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $password);\n\n        // Execute query\n        if ($stmt->execute()) {\n            $newUserId = $db->lastInsertId();\n\n            // Generate session token and insert into sessions table\n            $sessionToken = uniqid();\n            $stmt = $db->prepare(\"INSERT INTO sessions (user_id, session_token)\n                                  VALUES (:user_id, :session_token)\");\n            $stmt->bindParam(':user_id', $newUserId);\n            $stmt->bindParam(':session_token', $sessionToken);\n            $stmt->execute();\n\n            // Return user data and session token\n            return array(\n                'username' => $username,\n                'email' => $email,\n                'sessionId' => $db->lastInsertId(),\n                'sessionToken' => $sessionToken\n            );\n        } else {\n            throw new Exception('Registration failed');\n        }\n    } catch (PDOException $e) {\n        throw new Exception('Database error: ' . $e->getMessage());\n    }\n}\n\n?>\n```", "```php\n$username = \"johnDoe\";\n$email = \"johndoe@example.com\";\n$password = \"password123\";\n\ntry {\n    $userData = registerUser($username, $email, $password);\n    echo \"Registration successful! User data:\\n\";\n    print_r($userData);\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```"]}
