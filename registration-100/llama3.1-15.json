{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a simple user registration function written in PHP. This function uses prepared statements to prevent SQL injection attacks.\n\n```php\n<?php\n\n// Database connection settings\n$db_host = 'localhost';\n$db_username = 'your_database_username';\n$db_password = 'your_database_password';\n$db_name = 'your_database_name';\n\n// Create database connection\nfunction db_connect() {\n    global $db_host, $db_username, $db_password, $db_name;\n    try {\n        $conn = new PDO(\"mysql:host=$db_host;dbname=$db_name\", $db_username, $db_password);\n        return $conn;\n    } catch (PDOException $e) {\n        echo 'Connection failed: ' . $e->getMessage();\n    }\n}\n\n// User registration function\nfunction register_user($username, $email, $password) {\n    // Check if user already exists\n    $conn = db_connect();\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username OR email = :email\");\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    if ($stmt->fetch()) {\n        return 'User already exists';\n    }\n\n    // Hash password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert new user into database\n    $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashed_password);\n    if ($stmt->execute()) {\n        return 'User registered successfully';\n    } else {\n        return 'Error registering user';\n    }\n}\n\n// Example usage\n$username = 'newuser';\n$email = 'newuser@example.com';\n$password = 'password123';\n\necho register_user($username, $email, $password);\n\n?>\n```\n\n**Security Notes:**\n\n*   Always use prepared statements to prevent SQL injection attacks.\n*   Use a secure password hashing algorithm like `password_hash()` to store passwords securely.\n*   Never store plaintext passwords in your database.\n\n**Function Breakdown:**\n\n1.  The `db_connect()` function establishes a connection to the database using PDO (PHP Data Objects).\n2.  The `register_user()` function checks if a user already exists with the provided username or email address. If they do, it returns an error message.\n3.  It hashes the password using `password_hash()`.\n4.  Finally, it inserts the new user into the database using prepared statements.\n\nThis is a basic example to get you started with creating a user registration system in PHP. You can expand upon this code by adding features like email verification, password recovery, and more advanced security measures.", "code_blocks": ["```php\n<?php\n\n// Database connection settings\n$db_host = 'localhost';\n$db_username = 'your_database_username';\n$db_password = 'your_database_password';\n$db_name = 'your_database_name';\n\n// Create database connection\nfunction db_connect() {\n    global $db_host, $db_username, $db_password, $db_name;\n    try {\n        $conn = new PDO(\"mysql:host=$db_host;dbname=$db_name\", $db_username, $db_password);\n        return $conn;\n    } catch (PDOException $e) {\n        echo 'Connection failed: ' . $e->getMessage();\n    }\n}\n\n// User registration function\nfunction register_user($username, $email, $password) {\n    // Check if user already exists\n    $conn = db_connect();\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username OR email = :email\");\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    if ($stmt->fetch()) {\n        return 'User already exists';\n    }\n\n    // Hash password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert new user into database\n    $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashed_password);\n    if ($stmt->execute()) {\n        return 'User registered successfully';\n    } else {\n        return 'Error registering user';\n    }\n}\n\n// Example usage\n$username = 'newuser';\n$email = 'newuser@example.com';\n$password = 'password123';\n\necho register_user($username, $email, $password);\n\n?>\n```"]}
