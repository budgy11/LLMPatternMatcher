{"prompt": "Create a user registration function using php", "llm_output": "Here is an example of a user registration function in PHP:\n\n**registration.php**\n```php\n<?php\n\n// Configuration settings\n$required_fields = array('username', 'email', 'password');\n$error_messages = array();\n$username = '';\n$email = '';\n$password = '';\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  // Handle form submission\n  $username = $_POST['username'];\n  $email = $_POST['email'];\n  $password = $_POST['password'];\n\n  // Validate user input\n  foreach ($required_fields as $field) {\n    if (empty($_POST[$field])) {\n      $error_messages[] = 'Please fill out the required field: ' . $field;\n    }\n  }\n\n  // Check for valid email address\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    $error_messages[] = 'Invalid email address';\n  }\n\n  // Check for password requirements\n  if (strlen($password) < 8 || !preg_match('/[a-zA-Z]/', $password) || !preg_match('/[0-9]/', $password)) {\n    $error_messages[] = 'Password must be at least 8 characters, contain a letter and a number';\n  }\n\n  // Check for duplicate username\n  require_once 'database.php'; // Include your database connection file\n  $query = \"SELECT * FROM users WHERE username = :username\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':username', $username);\n  $stmt->execute();\n  if ($stmt->fetch()) {\n    $error_messages[] = 'Username already taken';\n  }\n\n  // If no errors, create new user\n  if (empty($error_messages)) {\n    try {\n      $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n      $stmt = $pdo->prepare($query);\n      $stmt->bindParam(':username', $username);\n      $stmt->bindParam(':email', $email);\n      $stmt->bindParam(':password', password_hash($password, PASSWORD_DEFAULT));\n      $stmt->execute();\n      echo 'User created successfully!';\n    } catch (PDOException $e) {\n      echo 'Error creating user: ' . $e->getMessage();\n    }\n  }\n}\n\n?>\n\n<!-- Display form -->\n<form action=\"\" method=\"post\">\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n  <label for=\"email\">Email:</label>\n  <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n  <label for=\"password\">Password:</label>\n  <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n  <?php if (!empty($error_messages)): ?>\n    <ul style=\"color: red;\">\n      <?php foreach ($error_messages as $message): ?>\n        <li><?php echo $message; ?></li>\n      <?php endforeach; ?>\n    </ul>\n  <?php endif; ?>\n  <button type=\"submit\">Register</button>\n</form>\n\n```\nThis script assumes you have a database connection established in the `database.php` file. It uses prepared statements to prevent SQL injection.\n\n**database.php**\n```php\n<?php\n\n$pdo = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n\n?>\n```\nMake sure to replace `'your_database'`, `'your_username'`, and `'your_password'` with your actual database credentials.\n\nPlease note that this is a basic example, you should consider implementing additional security measures such as password strength requirements, email verification, and rate limiting.", "code_blocks": ["```php\n<?php\n\n// Configuration settings\n$required_fields = array('username', 'email', 'password');\n$error_messages = array();\n$username = '';\n$email = '';\n$password = '';\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  // Handle form submission\n  $username = $_POST['username'];\n  $email = $_POST['email'];\n  $password = $_POST['password'];\n\n  // Validate user input\n  foreach ($required_fields as $field) {\n    if (empty($_POST[$field])) {\n      $error_messages[] = 'Please fill out the required field: ' . $field;\n    }\n  }\n\n  // Check for valid email address\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    $error_messages[] = 'Invalid email address';\n  }\n\n  // Check for password requirements\n  if (strlen($password) < 8 || !preg_match('/[a-zA-Z]/', $password) || !preg_match('/[0-9]/', $password)) {\n    $error_messages[] = 'Password must be at least 8 characters, contain a letter and a number';\n  }\n\n  // Check for duplicate username\n  require_once 'database.php'; // Include your database connection file\n  $query = \"SELECT * FROM users WHERE username = :username\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':username', $username);\n  $stmt->execute();\n  if ($stmt->fetch()) {\n    $error_messages[] = 'Username already taken';\n  }\n\n  // If no errors, create new user\n  if (empty($error_messages)) {\n    try {\n      $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n      $stmt = $pdo->prepare($query);\n      $stmt->bindParam(':username', $username);\n      $stmt->bindParam(':email', $email);\n      $stmt->bindParam(':password', password_hash($password, PASSWORD_DEFAULT));\n      $stmt->execute();\n      echo 'User created successfully!';\n    } catch (PDOException $e) {\n      echo 'Error creating user: ' . $e->getMessage();\n    }\n  }\n}\n\n?>\n\n<!-- Display form -->\n<form action=\"\" method=\"post\">\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n  <label for=\"email\">Email:</label>\n  <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n  <label for=\"password\">Password:</label>\n  <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n  <?php if (!empty($error_messages)): ?>\n    <ul style=\"color: red;\">\n      <?php foreach ($error_messages as $message): ?>\n        <li><?php echo $message; ?></li>\n      <?php endforeach; ?>\n    </ul>\n  <?php endif; ?>\n  <button type=\"submit\">Register</button>\n</form>\n\n```", "```php\n<?php\n\n$pdo = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n\n?>\n```"]}
