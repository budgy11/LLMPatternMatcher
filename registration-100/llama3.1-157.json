{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nThis code snippet provides a simple user registration function using PHP. It includes input validation, password hashing, and error handling.\n\n**Function: `registerUser`**\n\n```php\nfunction registerUser($username, $email, $password) {\n    // Validate inputs\n    if (empty($username)) {\n        throw new Exception('Username is required');\n    }\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address');\n    }\n\n    // Hash password using bcrypt\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n        // Connect to database ( assumed to be a MySQL database )\n        $conn = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n\n        // Prepare and execute INSERT statement\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        // Execute statement and get ID of newly inserted user\n        $conn->exec($stmt);\n\n        // Close connection\n        $conn = null;\n\n        return true;\n    } catch (PDOException $e) {\n        // Handle database errors\n        throw new Exception('Failed to register user: ' . $e->getMessage());\n    }\n}\n```\n\n**Example Usage:**\n```php\ntry {\n    $registered = registerUser('johnDoe', 'johndoe@example.com', 'password123');\n    if ($registered) {\n        echo \"User registered successfully!\";\n    } else {\n        echo \"Failed to register user\";\n    }\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```\n\n**Notes:**\n\n* This function assumes you have a MySQL database set up and are connecting using PDO.\n* You should replace `'your_database'`, `'your_username'`, and `'your_password'` with your actual database credentials.\n* This example uses `PASSWORD_DEFAULT` for password hashing, which is the recommended approach in PHP 5.5+.", "code_blocks": ["```php\nfunction registerUser($username, $email, $password) {\n    // Validate inputs\n    if (empty($username)) {\n        throw new Exception('Username is required');\n    }\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address');\n    }\n\n    // Hash password using bcrypt\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n        // Connect to database ( assumed to be a MySQL database )\n        $conn = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n\n        // Prepare and execute INSERT statement\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        // Execute statement and get ID of newly inserted user\n        $conn->exec($stmt);\n\n        // Close connection\n        $conn = null;\n\n        return true;\n    } catch (PDOException $e) {\n        // Handle database errors\n        throw new Exception('Failed to register user: ' . $e->getMessage());\n    }\n}\n```", "```php\ntry {\n    $registered = registerUser('johnDoe', 'johndoe@example.com', 'password123');\n    if ($registered) {\n        echo \"User registered successfully!\";\n    } else {\n        echo \"Failed to register user\";\n    }\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```"]}
