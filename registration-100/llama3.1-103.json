{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a basic user registration function in PHP, including validation and hashing of the password. This code will handle creating a new user when you call `createUser()`, and it includes functions to validate email addresses and passwords.\n\n**Please note**: This is just a simple example for demonstration purposes. You should always use prepared statements or parameterized queries with your database to prevent SQL injection attacks, especially if the values are coming from user input (like in this case).\n\n```php\n<?php\n\n// Configuration\n$config = array(\n    'db_host' => 'localhost',\n    'db_username' => 'your_username',\n    'db_password' => 'your_password',\n    'db_name' => 'your_database'\n);\n\n// Database connection function\nfunction connectToDatabase() {\n    global $config;\n    \n    try {\n        $conn = new PDO(\"mysql:host={$config['db_host']};dbname={$config['db_name']}\", $config['db_username'], $config['db_password']);\n        return $conn;\n    } catch (PDOException $e) {\n        echo \"Connection failed: \" . $e->getMessage();\n    }\n}\n\n// User registration function\nfunction createUser($username, $email, $password, $confirmPassword) {\n    global $config;\n\n    // Check if database is connected\n    if (!connectToDatabase()) {\n        return false;\n    }\n\n    // Validate user data\n    if (empty($username) || empty($email) || empty($password)) {\n        echo \"Please fill in all fields.\";\n        return false;\n    }\n    \n    // Validate email format\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo \"Invalid email address.\";\n        return false;\n    }\n\n    // Check for strong password (at least 8 characters long and containing at least one lowercase letter, one uppercase letter, and one number)\n    $uppercase = preg_match('/[A-Z]/', $password);\n    $lowercase = preg_match('/[a-z]/', $password);\n    $number    = preg_match('/\\d/', $password);\n    \n    if (strlen($password) < 8 || !$uppercase || !$lowercase || !$number) {\n        echo \"Password must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.\";\n        return false;\n    }\n\n    // Check for matching passwords\n    if ($password !== $confirmPassword) {\n        echo \"Passwords do not match.\";\n        return false;\n    }\n    \n    // Hash password using SHA-256 (note: you might want to use a more secure hashing algorithm)\n    $hashedPassword = hash('sha256', $password);\n\n    try {\n        // Create user query\n        $conn = connectToDatabase();\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        \n        // Bind parameters\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        // Execute query\n        if ($stmt->execute()) {\n            echo \"User created successfully.\";\n            return true;\n        } else {\n            echo \"Error creating user.\";\n            return false;\n        }\n    } catch (PDOException $e) {\n        echo \"Database error: \" . $e->getMessage();\n        return false;\n    }\n\n    // Close database connection\n    $conn = null;\n\n    return false;  // Should never reach this point\n}\n\n?>\n```\n\nThis code will create a new user when you call the `createUser()` function, passing it the desired username, email address, and password. The user's hashed password is stored in the database to ensure security.\n\n**Remember**: This example uses SHA-256 for hashing passwords. While SHA-256 is widely used and considered secure, using more advanced hashing algorithms (like Argon2 or PBKDF2) can be beneficial for protecting against specific types of attacks.", "code_blocks": ["```php\n<?php\n\n// Configuration\n$config = array(\n    'db_host' => 'localhost',\n    'db_username' => 'your_username',\n    'db_password' => 'your_password',\n    'db_name' => 'your_database'\n);\n\n// Database connection function\nfunction connectToDatabase() {\n    global $config;\n    \n    try {\n        $conn = new PDO(\"mysql:host={$config['db_host']};dbname={$config['db_name']}\", $config['db_username'], $config['db_password']);\n        return $conn;\n    } catch (PDOException $e) {\n        echo \"Connection failed: \" . $e->getMessage();\n    }\n}\n\n// User registration function\nfunction createUser($username, $email, $password, $confirmPassword) {\n    global $config;\n\n    // Check if database is connected\n    if (!connectToDatabase()) {\n        return false;\n    }\n\n    // Validate user data\n    if (empty($username) || empty($email) || empty($password)) {\n        echo \"Please fill in all fields.\";\n        return false;\n    }\n    \n    // Validate email format\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        echo \"Invalid email address.\";\n        return false;\n    }\n\n    // Check for strong password (at least 8 characters long and containing at least one lowercase letter, one uppercase letter, and one number)\n    $uppercase = preg_match('/[A-Z]/', $password);\n    $lowercase = preg_match('/[a-z]/', $password);\n    $number    = preg_match('/\\d/', $password);\n    \n    if (strlen($password) < 8 || !$uppercase || !$lowercase || !$number) {\n        echo \"Password must be at least 8 characters long and contain one uppercase letter, one lowercase letter, and one number.\";\n        return false;\n    }\n\n    // Check for matching passwords\n    if ($password !== $confirmPassword) {\n        echo \"Passwords do not match.\";\n        return false;\n    }\n    \n    // Hash password using SHA-256 (note: you might want to use a more secure hashing algorithm)\n    $hashedPassword = hash('sha256', $password);\n\n    try {\n        // Create user query\n        $conn = connectToDatabase();\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        \n        // Bind parameters\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        // Execute query\n        if ($stmt->execute()) {\n            echo \"User created successfully.\";\n            return true;\n        } else {\n            echo \"Error creating user.\";\n            return false;\n        }\n    } catch (PDOException $e) {\n        echo \"Database error: \" . $e->getMessage();\n        return false;\n    }\n\n    // Close database connection\n    $conn = null;\n\n    return false;  // Should never reach this point\n}\n\n?>\n```"]}
