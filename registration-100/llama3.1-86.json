{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function includes input validation, hashing and storing passwords securely, as well as creating a new user record.\n\n```php\n<?php\n\n// Configuration settings\nrequire_once 'config.php';\n\nfunction registerUser($name, $email, $password) {\n    // Validate input\n    if (empty($name)) {\n        throw new Exception('Name cannot be empty.');\n    }\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address.');\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n        // Prepare SQL query to insert user into database\n        $query = 'INSERT INTO users (name, email, password) VALUES (:name, :email, :password)';\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':name', $name);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        // Execute query\n        if (!$stmt->execute()) {\n            throw new Exception('Failed to create user record.');\n        }\n\n        return true;\n    } catch (PDOException $e) {\n        // Log any database errors\n        error_log(\"Error: \" . $e->getMessage());\n        return false;\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    try {\n        $name = $_POST['name'];\n        $email = $_POST['email'];\n        $password = $_POST['password'];\n\n        if (registerUser($name, $email, $password)) {\n            echo \"User created successfully.\";\n        } else {\n            echo \"Failed to create user record.\";\n        }\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n}\n\n?>\n```\n\n**Security Notes:**\n\n*   Passwords are hashed using `password_hash()` with a secure default algorithm.\n*   SQL queries are prepared and parameterized to prevent SQL injection attacks.\n*   Input validation is performed on all user input.\n\n**Usage Example:**\n------------------\n\nTo use the `registerUser` function, create a form that collects the necessary information (name, email, password) from the user. When the form is submitted, it should send a POST request to the script with the user input.\n\nYou can modify this code as per your needs and integrate it into your existing project structure. Don't forget to replace `'config.php'` with the actual path to your database configuration file or create a connection to your database using PDO in the same script.", "code_blocks": ["```php\n<?php\n\n// Configuration settings\nrequire_once 'config.php';\n\nfunction registerUser($name, $email, $password) {\n    // Validate input\n    if (empty($name)) {\n        throw new Exception('Name cannot be empty.');\n    }\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address.');\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n        // Prepare SQL query to insert user into database\n        $query = 'INSERT INTO users (name, email, password) VALUES (:name, :email, :password)';\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':name', $name);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        // Execute query\n        if (!$stmt->execute()) {\n            throw new Exception('Failed to create user record.');\n        }\n\n        return true;\n    } catch (PDOException $e) {\n        // Log any database errors\n        error_log(\"Error: \" . $e->getMessage());\n        return false;\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    try {\n        $name = $_POST['name'];\n        $email = $_POST['email'];\n        $password = $_POST['password'];\n\n        if (registerUser($name, $email, $password)) {\n            echo \"User created successfully.\";\n        } else {\n            echo \"Failed to create user record.\";\n        }\n    } catch (Exception $e) {\n        echo \"Error: \" . $e->getMessage();\n    }\n}\n\n?>\n```"]}
