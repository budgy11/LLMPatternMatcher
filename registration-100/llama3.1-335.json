{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function in PHP that includes validation and password hashing.\n\n### User Registration Function\n```php\nfunction registerUser($username, $email, $password) {\n    // Validate input\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('success' => false, 'error' => 'Please fill in all fields');\n    }\n\n    // Validate email\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return array('success' => false, 'error' => 'Invalid email address');\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    try {\n        // Assuming a MySQL connection is established\n        $stmt = $pdo->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        return array('success' => true, 'message' => 'User registered successfully');\n    } catch (PDOException $e) {\n        return array('success' => false, 'error' => 'Error registering user: ' . $e->getMessage());\n    }\n}\n```\n### Example Usage\n```php\n// Register a new user\n$result = registerUser('johnDoe', 'johndoe@example.com', 'password123');\n\nif ($result['success']) {\n    echo \"User registered successfully!\";\n} else {\n    echo \"Error registering user: \" . $result['error'];\n}\n```\n### Explanation\n\n1. The `registerUser` function takes three parameters: `$username`, `$email`, and `$password`.\n2. Input is validated to ensure all fields are filled in, and the email address is valid.\n3. The password is hashed using PHP's built-in `password_hash` function with a default algorithm (currently bcrypt).\n4. A prepared statement is used to insert the user into the database.\n5. If successful, a success message is returned; otherwise, an error message is returned.\n\n**Note:** This example assumes a MySQL connection has been established and is available as `$pdo`. You will need to modify this code to fit your specific database setup. Additionally, you should ensure that user input is sanitized to prevent SQL injection attacks.", "code_blocks": ["```php\nfunction registerUser($username, $email, $password) {\n    // Validate input\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('success' => false, 'error' => 'Please fill in all fields');\n    }\n\n    // Validate email\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return array('success' => false, 'error' => 'Invalid email address');\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    try {\n        // Assuming a MySQL connection is established\n        $stmt = $pdo->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        return array('success' => true, 'message' => 'User registered successfully');\n    } catch (PDOException $e) {\n        return array('success' => false, 'error' => 'Error registering user: ' . $e->getMessage());\n    }\n}\n```", "```php\n// Register a new user\n$result = registerUser('johnDoe', 'johndoe@example.com', 'password123');\n\nif ($result['success']) {\n    echo \"User registered successfully!\";\n} else {\n    echo \"Error registering user: \" . $result['error'];\n}\n```"]}
