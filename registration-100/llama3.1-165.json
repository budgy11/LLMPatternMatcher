{"prompt": "Create a user registration function using php", "llm_output": "Here is an example of a simple user registration function in PHP:\n\n**User Registration Function**\n```php\nfunction register_user($username, $email, $password) {\n    // Validate input data\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('error' => 'All fields are required');\n    }\n\n    // Check for duplicate username or email\n    $query = \"SELECT * FROM users WHERE username = '$username' OR email = '$email'\";\n    $result = mysqli_query($GLOBALS['db'], $query);\n    if (mysqli_num_rows($result) > 0) {\n        return array('error' => 'Username or email already exists');\n    }\n\n    // Hash password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    $query = \"INSERT INTO users (username, email, password) VALUES ('$username', '$email', '$hashed_password')\";\n    mysqli_query($GLOBALS['db'], $query);\n\n    return array('success' => 'User created successfully');\n}\n```\n**Example Usage**\n```php\n$db = new mysqli('localhost', 'username', 'password', 'database');\n\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = register_user($username, $email, $password);\n\nif ($result['success']) {\n    echo \"User created successfully!\";\n} else {\n    echo \"Error: \" . $result['error'];\n}\n```\n**Notes**\n\n* This example uses the `mysqli` extension to interact with the database. You may want to use a more modern PHP framework or library, such as PDO.\n* The `register_user` function assumes that you have a table named `users` in your database with columns for `username`, `email`, and `password`.\n* The password is hashed using the `password_hash` function, which uses a cryptographically secure algorithm to generate a unique hash for each password.\n* This example does not include any error handling or security measures beyond basic input validation. In a real-world application, you would want to add additional checks and balances to ensure that user data is stored securely.\n\n**Security Considerations**\n\n* Always use prepared statements to prevent SQL injection attacks.\n* Never store passwords in plaintext.\n* Use a secure algorithm for hashing passwords (such as `password_hash`).\n* Validate all input data to prevent malicious code from being injected into your database.", "code_blocks": ["```php\nfunction register_user($username, $email, $password) {\n    // Validate input data\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('error' => 'All fields are required');\n    }\n\n    // Check for duplicate username or email\n    $query = \"SELECT * FROM users WHERE username = '$username' OR email = '$email'\";\n    $result = mysqli_query($GLOBALS['db'], $query);\n    if (mysqli_num_rows($result) > 0) {\n        return array('error' => 'Username or email already exists');\n    }\n\n    // Hash password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    $query = \"INSERT INTO users (username, email, password) VALUES ('$username', '$email', '$hashed_password')\";\n    mysqli_query($GLOBALS['db'], $query);\n\n    return array('success' => 'User created successfully');\n}\n```", "```php\n$db = new mysqli('localhost', 'username', 'password', 'database');\n\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = register_user($username, $email, $password);\n\nif ($result['success']) {\n    echo \"User created successfully!\";\n} else {\n    echo \"Error: \" . $result['error'];\n}\n```"]}
