{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a basic user registration function written in PHP. This function will handle the creation of new users, verification of their email address, and encryption of their password.\n\n### **`register.php`**\n```php\n<?php\nrequire 'vendor/autoload.php'; // Composer autoloader\n\nuse Illuminate\\Database\\Capsule\\Manager as Capsule;\n\n// Initialize database connection using Laravel's Eloquent ORM\n$capsule = new Capsule();\n$capsule->addConnection([\n    'driver' => 'mysql',\n    'host' => 'localhost',\n    'database' => 'my_database',\n    'username' => 'my_username',\n    'password' => 'my_password',\n]);\n$capsule->setAsGlobal();\n\n// User registration function\nfunction registerUser($name, $email, $password) {\n    // Validate user input\n    if (empty($name) || empty($email) || empty($password)) {\n        throw new Exception('Please fill in all required fields');\n    }\n\n    try {\n        // Hash password using bcrypt\n        $hashedPassword = bcrypt($password);\n\n        // Create a new user instance\n        $user = new App\\Models\\User();\n        $user->name = $name;\n        $user->email = $email;\n        $user->password = $hashedPassword;\n\n        // Save the user to the database\n        $user->save();\n\n        // Send verification email (optional)\n        sendVerificationEmail($user);\n\n        return 'User created successfully!';\n    } catch (Exception $e) {\n        throw new Exception('Error creating user: ' . $e->getMessage());\n    }\n}\n\n// Verification email function (optional)\nfunction sendVerificationEmail($user) {\n    // Set up email variables\n    $from = 'your_email@example.com';\n    $to = $user->email;\n    $subject = 'Verify your account';\n\n    // Generate a random verification code\n    $verificationCode = str_random(32);\n\n    // Store the verification code in the user's record\n    $user->verification_code = $verificationCode;\n\n    // Send the email using a mail library (e.g. PHPMailer)\n    $mail = new PHPMailer();\n    $mail->setFrom($from);\n    $mail->addAddress($to);\n    $mail->Subject = $subject;\n    $mail->Body = 'Please click this link to verify your account: ' . url('/verify', ['code' => $verificationCode]);\n    $mail->send();\n\n    return 'Verification email sent successfully!';\n}\n\n// Example usage\n$name = 'John Doe';\n$email = 'john@example.com';\n$password = 'password123';\n\ntry {\n    echo registerUser($name, $email, $password);\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n```\n### **Explanation:**\n\n1.  The `register.php` file initializes a database connection using Laravel's Eloquent ORM.\n2.  The `registerUser()` function takes in the user's name, email address, and password as parameters. It validates the input data to ensure that all fields are filled in.\n3.  If the validation passes, it hashes the user's password using bcrypt and creates a new user instance with the provided details.\n4.  The `registerUser()` function saves the user to the database and sends a verification email (if enabled).\n5.  The example usage section demonstrates how to use the `registerUser()` function.\n\nThis code provides a basic structure for handling user registration in PHP. You can customize it according to your specific requirements, such as implementing additional validation rules or integrating with other systems.", "code_blocks": ["```php\n<?php\nrequire 'vendor/autoload.php'; // Composer autoloader\n\nuse Illuminate\\Database\\Capsule\\Manager as Capsule;\n\n// Initialize database connection using Laravel's Eloquent ORM\n$capsule = new Capsule();\n$capsule->addConnection([\n    'driver' => 'mysql',\n    'host' => 'localhost',\n    'database' => 'my_database',\n    'username' => 'my_username',\n    'password' => 'my_password',\n]);\n$capsule->setAsGlobal();\n\n// User registration function\nfunction registerUser($name, $email, $password) {\n    // Validate user input\n    if (empty($name) || empty($email) || empty($password)) {\n        throw new Exception('Please fill in all required fields');\n    }\n\n    try {\n        // Hash password using bcrypt\n        $hashedPassword = bcrypt($password);\n\n        // Create a new user instance\n        $user = new App\\Models\\User();\n        $user->name = $name;\n        $user->email = $email;\n        $user->password = $hashedPassword;\n\n        // Save the user to the database\n        $user->save();\n\n        // Send verification email (optional)\n        sendVerificationEmail($user);\n\n        return 'User created successfully!';\n    } catch (Exception $e) {\n        throw new Exception('Error creating user: ' . $e->getMessage());\n    }\n}\n\n// Verification email function (optional)\nfunction sendVerificationEmail($user) {\n    // Set up email variables\n    $from = 'your_email@example.com';\n    $to = $user->email;\n    $subject = 'Verify your account';\n\n    // Generate a random verification code\n    $verificationCode = str_random(32);\n\n    // Store the verification code in the user's record\n    $user->verification_code = $verificationCode;\n\n    // Send the email using a mail library (e.g. PHPMailer)\n    $mail = new PHPMailer();\n    $mail->setFrom($from);\n    $mail->addAddress($to);\n    $mail->Subject = $subject;\n    $mail->Body = 'Please click this link to verify your account: ' . url('/verify', ['code' => $verificationCode]);\n    $mail->send();\n\n    return 'Verification email sent successfully!';\n}\n\n// Example usage\n$name = 'John Doe';\n$email = 'john@example.com';\n$password = 'password123';\n\ntry {\n    echo registerUser($name, $email, $password);\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n```"]}
