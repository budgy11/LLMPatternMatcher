{"prompt": "Create a user registration function using php", "llm_output": "```php\n<?php\n\n// Database Configuration (Replace with your actual credentials)\n$db_host = \"localhost\";\n$db_name = \"your_database_name\";\n$db_user = \"your_database_user\";\n$db_password = \"your_database_password\";\n\n// Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  // Sanitize input data\n  $username = trim($_POST[\"username\"]);\n  $email = trim($_POST[\"email\"]);\n  $password = trim($_POST[\"password\"]);\n\n  // Validate input data\n  if (empty($username) || empty($email) || empty($password)) {\n    $error_message = \"All fields are required.\";\n  } elseif (\n    !filter_var($email, FILTER_VALIDATE_EMAIL)\n  ) {\n    $error_message = \"Invalid email format.\";\n  } elseif (strlen($password) < 8) {\n    $error_message = \"Password must be at least 8 characters long.\";\n  } else {\n    // Hash the password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Connect to the database\n    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n    // Check connection\n    if ($conn->connect_error) {\n      die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    // Prepare and execute the SQL query\n    $sql = \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"ss\", $username, $email, $hashed_password);\n    $stmt->execute();\n\n    // Success message\n    $success_message = \"Registration successful! Please log in.\";\n    $stmt->close();\n    $conn->close();\n  }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>User Registration</title>\n  <style>\n    .error {\n      color: red;\n    }\n    .success {\n      color: green;\n    }\n  </style>\n</head>\n<body>\n\n  <h2>User Registration</h2>\n\n  <?php if (isset($error_message)) { ?>\n    <p class=\"error\"><?php echo $error_message; ?></p>\n  <?php } ?>\n\n  <?php if (isset($success_message)) { ?>\n    <p class=\"success\"><?php echo $success_message; ?></p>\n  <?php } ?>\n\n  <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n    <label for=\"username\">Username:</label>\n    <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Enter username\" required>\n\n    <br><br>\n\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter email\" required>\n\n    <br><br>\n\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter password\" required>\n\n    <br><br>\n\n    <input type=\"submit\" value=\"Register\">\n  </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Security:**\n    * **`password_hash()`:**  Crucially, this uses the `password_hash()` function to securely hash the password *before* storing it in the database.  This is essential to prevent attackers from stealing passwords if the database is compromised.  `PASSWORD_DEFAULT` is the recommended hashing algorithm for new projects.\n    * **`htmlspecialchars()`:** Uses `htmlspecialchars()` when echoing the `$_SERVER[\"PHP_SELF\"]` to prevent XSS (Cross-Site Scripting) vulnerabilities.  This is critical.\n    * **`filter_var()`:** The code now uses `filter_var()` with `FILTER_VALIDATE_EMAIL` to perform client-side validation for email formats.  While it's still a good idea to have server-side validation, this provides a first line of defense.\n    * **Prepared Statements:**  The code utilizes prepared statements (`$conn->prepare()`, `$stmt->bind_param()`) to prevent SQL injection vulnerabilities. This is the *most important* security measure in this code.  It separates the SQL query from the data, preventing attackers from injecting malicious SQL code.\n\n* **Error Handling & Validation:**\n    * **Clear Error Messages:**  The code provides specific and user-friendly error messages for common problems (e.g., missing fields, invalid email format, weak password).\n    * **Input Sanitization:**  `trim()` is used to remove leading/trailing whitespace from user input, preventing injection vulnerabilities and ensuring that input is clean.\n    * **Required Field Validation:** `required` attribute is added to the input fields to ensure all fields are filled before form submission.\n\n* **Code Structure & Clarity:**\n    * **`isset()` checks:** Uses `isset()` to determine if `$error_message` or `$success_message` are set before displaying them.  This is best practice.\n    * **Comments:** Added comments to explain different parts of the code.\n    * **Clearer Variable Names:** Uses more descriptive variable names (e.g., `$hashed_password`).\n    * **Consistent Formatting:** Improved code formatting for readability.\n\n* **Database Connection:**\n    * **`mysqli`:** Uses the `mysqli` extension, which is a modern and recommended way to connect to MySQL databases in PHP.\n    * **Connection Error Handling:** Checks if the database connection was successful and displays an error message if it failed.\n    * **Resource Closure:** Properly closes the database connection (`$conn->close()`) after use.  This is important for releasing database resources.\n\n* **Form Submission:**\n   * **`htmlspecialchars()` on the form action:**  The `action` attribute of the form is now `htmlspecialchars()` escaped to prevent XSS attacks.\n   * **`method=\"post\"`:** Uses the `POST` method for submitting the form, which is appropriate for user registration.\n\n* **How to Use:**\n\n1. **Database Setup:**\n   - Create a MySQL database.\n   - Create a `users` table within that database.  Here's a basic example SQL query for the table structure:\n\n   ```sql\n   CREATE TABLE users (\n     id INT AUTO_INCREMENT PRIMARY KEY,\n     username VARCHAR(255) UNIQUE NOT NULL,\n     email VARCHAR(255) UNIQUE NOT NULL,\n     password VARCHAR(255) NOT NULL\n   );\n   ```\n\n2. **Configuration:**\n   - Replace the placeholder values for `$db_host`, `$db_name`, `$db_user`, and `$db_password` with your actual database credentials.\n\n3. **Save the Code:** Save the PHP code as a `.php` file (e.g., `register.php`).\n\n4. **Run the File:** Place the file in your web server's document root (e.g., `/var/www/html/` on Linux).  Access it through your web browser (e.g., `http://localhost/register.php`).\n\nImportant Considerations:\n\n* **Password Complexity:**  Consider adding more sophisticated password requirements (e.g., minimum length, uppercase/lowercase letters, numbers, special characters) to improve security.  You can do this either through client-side validation or, more robustly, through server-side validation.\n* **Database Security:** Secure your database itself. Use strong passwords, limit access, and regularly back up your database.\n* **Production Environment:** This is a basic example for demonstration.  In a production environment, you would need to add more comprehensive error handling, logging, security measures, and potentially use a framework (like Laravel or Symfony) for a more robust and maintainable application.\n* **Testing:**  Thoroughly test the registration functionality, including successful registration, validation errors, and password hashing.\n* **Frameworks:**  While this example provides a solid foundation, using a PHP framework (like Laravel or Symfony) significantly simplifies development, provides security features, and promotes best practices.\n", "code_blocks": ["```php\n<?php\n\n// Database Configuration (Replace with your actual credentials)\n$db_host = \"localhost\";\n$db_name = \"your_database_name\";\n$db_user = \"your_database_user\";\n$db_password = \"your_database_password\";\n\n// Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  // Sanitize input data\n  $username = trim($_POST[\"username\"]);\n  $email = trim($_POST[\"email\"]);\n  $password = trim($_POST[\"password\"]);\n\n  // Validate input data\n  if (empty($username) || empty($email) || empty($password)) {\n    $error_message = \"All fields are required.\";\n  } elseif (\n    !filter_var($email, FILTER_VALIDATE_EMAIL)\n  ) {\n    $error_message = \"Invalid email format.\";\n  } elseif (strlen($password) < 8) {\n    $error_message = \"Password must be at least 8 characters long.\";\n  } else {\n    // Hash the password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Connect to the database\n    $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n    // Check connection\n    if ($conn->connect_error) {\n      die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    // Prepare and execute the SQL query\n    $sql = \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"ss\", $username, $email, $hashed_password);\n    $stmt->execute();\n\n    // Success message\n    $success_message = \"Registration successful! Please log in.\";\n    $stmt->close();\n    $conn->close();\n  }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>User Registration</title>\n  <style>\n    .error {\n      color: red;\n    }\n    .success {\n      color: green;\n    }\n  </style>\n</head>\n<body>\n\n  <h2>User Registration</h2>\n\n  <?php if (isset($error_message)) { ?>\n    <p class=\"error\"><?php echo $error_message; ?></p>\n  <?php } ?>\n\n  <?php if (isset($success_message)) { ?>\n    <p class=\"success\"><?php echo $success_message; ?></p>\n  <?php } ?>\n\n  <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n    <label for=\"username\">Username:</label>\n    <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Enter username\" required>\n\n    <br><br>\n\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter email\" required>\n\n    <br><br>\n\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter password\" required>\n\n    <br><br>\n\n    <input type=\"submit\" value=\"Register\">\n  </form>\n\n</body>\n</html>\n```"]}
