{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nHere is an example of a simple user registration function in PHP, including validation and error handling.\n\n### `register_user.php`\n\n```php\n<?php\n\n// Configuration\n$minUsernameLength = 3;\n$maxUsernameLength = 20;\n$maxPasswordLength = 50;\n\nfunction registerUser($username, $password, $email) {\n    // Validate input data\n    if (!validateUsername($username)) {\n        throw new Exception('Invalid username. Must be between ' . $minUsernameLength . ' and ' . $maxUsernameLength . ' characters.');\n    }\n    if (strlen($password) > $maxPasswordLength || !preg_match('/^[a-zA-Z0-9]+$/', $password)) {\n        throw new Exception('Invalid password. Must be no more than 50 characters long and only contain letters and numbers.');\n    }\n    if (!validateEmail($email)) {\n        throw new Exception('Invalid email address.');\n    }\n\n    // Hash the password\n    $hashedPassword = hash('sha256', $password);\n\n    // Insert user into database (example using PDO)\n    try {\n        $dsn = 'mysql:host=localhost;dbname=database';\n        $usernameDb = 'db_username';\n        $passwordDb = 'db_password';\n\n        $pdo = new PDO($dsn, $usernameDb, $passwordDb);\n        $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        return true;\n    } catch (PDOException $e) {\n        throw new Exception('Database error: ' . $e->getMessage());\n    }\n}\n\nfunction validateUsername($username) {\n    return strlen($username) >= $minUsernameLength && strlen($username) <= $maxUsernameLength;\n}\n\nfunction validateEmail($email) {\n    return preg_match('/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/', $email);\n}\n```\n\n### **Usage Example**\n\n```php\ntry {\n    registerUser('johnDoe', 'mysecretpassword123', 'johndoe@example.com');\n    echo \"User created successfully.\";\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```\n\nThis code defines a `registerUser` function that takes three parameters: `$username`, `$password`, and `$email`. It checks for invalid input data, hashes the password using SHA-256, and inserts the user into a database table called `users`.\n\nNote: This is a basic example. In a real-world application, you should also consider storing the hashed password securely, using salting, and implementing additional security measures such as validation on form submission.\n\n**Security Considerations**\n\n*   This code uses SHA-256 to hash passwords, which provides good protection against rainbow table attacks.\n*   The `validateUsername` function checks for username length within a reasonable range (3-20 characters).\n*   The `validateEmail` function checks for basic email address validity using a regular expression.\n*   Passwords are hashed securely and stored in the database.", "code_blocks": ["```php\n<?php\n\n// Configuration\n$minUsernameLength = 3;\n$maxUsernameLength = 20;\n$maxPasswordLength = 50;\n\nfunction registerUser($username, $password, $email) {\n    // Validate input data\n    if (!validateUsername($username)) {\n        throw new Exception('Invalid username. Must be between ' . $minUsernameLength . ' and ' . $maxUsernameLength . ' characters.');\n    }\n    if (strlen($password) > $maxPasswordLength || !preg_match('/^[a-zA-Z0-9]+$/', $password)) {\n        throw new Exception('Invalid password. Must be no more than 50 characters long and only contain letters and numbers.');\n    }\n    if (!validateEmail($email)) {\n        throw new Exception('Invalid email address.');\n    }\n\n    // Hash the password\n    $hashedPassword = hash('sha256', $password);\n\n    // Insert user into database (example using PDO)\n    try {\n        $dsn = 'mysql:host=localhost;dbname=database';\n        $usernameDb = 'db_username';\n        $passwordDb = 'db_password';\n\n        $pdo = new PDO($dsn, $usernameDb, $passwordDb);\n        $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n\n        return true;\n    } catch (PDOException $e) {\n        throw new Exception('Database error: ' . $e->getMessage());\n    }\n}\n\nfunction validateUsername($username) {\n    return strlen($username) >= $minUsernameLength && strlen($username) <= $maxUsernameLength;\n}\n\nfunction validateEmail($email) {\n    return preg_match('/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/', $email);\n}\n```", "```php\ntry {\n    registerUser('johnDoe', 'mysecretpassword123', 'johndoe@example.com');\n    echo \"User created successfully.\";\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```"]}
