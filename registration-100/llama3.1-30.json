{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function includes validation for email, password strength, and username uniqueness.\n\n### **register_user.php**\n\n```php\n<?php\n\n// Configuration settings\n$minPasswordLength = 8;\n$maxUsernameLength = 50;\n\nfunction registerUser($username, $email, $password) {\n    // Validate input data\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('error' => 'All fields are required');\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return array('error' => 'Invalid email address');\n    }\n\n    // Validate username length\n    if (strlen($username) > $maxUsernameLength || strlen($username) < 3) {\n        return array('error' => 'Username must be between 3 and ' . $maxUsernameLength . ' characters long');\n    }\n\n    // Validate password strength\n    if (strlen($password) < $minPasswordLength) {\n        return array('error' => 'Password must be at least ' . $minPasswordLength . ' characters long');\n    }\n\n    try {\n        // Connect to database\n        $conn = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n\n        // Check if username is unique\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username\");\n        $stmt->bindParam(':username', $username);\n        $stmt->execute();\n        if ($stmt->rowCount() > 0) {\n            return array('error' => 'Username already exists');\n        }\n\n        // Insert new user into database\n        $hashPassword = password_hash($password, PASSWORD_DEFAULT);\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashPassword);\n        $stmt->execute();\n\n        // Return success message\n        return array('success' => 'User registered successfully');\n    } catch (PDOException $e) {\n        // Handle database error\n        return array('error' => 'Database error: ' . $e->getMessage());\n    }\n}\n\n?>\n```\n\n### **Usage Example**\n\n```php\nrequire_once 'register_user.php';\n\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$response = registerUser($username, $email, $password);\n\nif ($response['success']) {\n    echo 'User registered successfully!';\n} else {\n    echo '<pre>' . print_r($response) . '</pre>';\n}\n```\n\nThis function uses PDO for database operations and includes basic input validation. It also checks if the username is unique in the database before inserting a new user.\n\n**Security Considerations**\n\n*   Store passwords securely using `password_hash()` and verify them with `password_verify()`.\n*   Use prepared statements to prevent SQL injection.\n*   Validate user input on both client-side (JavaScript) and server-side (PHP).\n\nRemember to replace `'your_database'`, `'username'`, and `'password'` placeholders in the PDO connection string with your actual database credentials.", "code_blocks": ["```php\n<?php\n\n// Configuration settings\n$minPasswordLength = 8;\n$maxUsernameLength = 50;\n\nfunction registerUser($username, $email, $password) {\n    // Validate input data\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('error' => 'All fields are required');\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return array('error' => 'Invalid email address');\n    }\n\n    // Validate username length\n    if (strlen($username) > $maxUsernameLength || strlen($username) < 3) {\n        return array('error' => 'Username must be between 3 and ' . $maxUsernameLength . ' characters long');\n    }\n\n    // Validate password strength\n    if (strlen($password) < $minPasswordLength) {\n        return array('error' => 'Password must be at least ' . $minPasswordLength . ' characters long');\n    }\n\n    try {\n        // Connect to database\n        $conn = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n\n        // Check if username is unique\n        $stmt = $conn->prepare(\"SELECT * FROM users WHERE username = :username\");\n        $stmt->bindParam(':username', $username);\n        $stmt->execute();\n        if ($stmt->rowCount() > 0) {\n            return array('error' => 'Username already exists');\n        }\n\n        // Insert new user into database\n        $hashPassword = password_hash($password, PASSWORD_DEFAULT);\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashPassword);\n        $stmt->execute();\n\n        // Return success message\n        return array('success' => 'User registered successfully');\n    } catch (PDOException $e) {\n        // Handle database error\n        return array('error' => 'Database error: ' . $e->getMessage());\n    }\n}\n\n?>\n```", "```php\nrequire_once 'register_user.php';\n\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$response = registerUser($username, $email, $password);\n\nif ($response['success']) {\n    echo 'User registered successfully!';\n} else {\n    echo '<pre>' . print_r($response) . '</pre>';\n}\n```"]}
