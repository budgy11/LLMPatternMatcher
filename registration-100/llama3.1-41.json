{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function in PHP. This function takes input from the user, checks for validation rules, and stores the user's data into a database (in this case, MySQL).\n\n```php\n<?php\n\n// Database connection settings\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database_name');\n\n// Function to register new user\nfunction registerUser($username, $email, $password)\n{\n    // Validate input data\n    if (empty($username) || empty($email) || empty($password)) {\n        return array(\n            'status' => 'error',\n            'message' => 'Please fill in all fields.'\n        );\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return array(\n            'status' => 'error',\n            'message' => 'Invalid email address.'\n        );\n    }\n\n    // Hash password using bcrypt\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Connect to database\n    try {\n        $conn = new PDO(\"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME, DB_USERNAME, DB_PASSWORD);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Prepare and execute query\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        if ($stmt->execute()) {\n            return array(\n                'status' => 'success',\n                'message' => 'User registered successfully.'\n            );\n        } else {\n            return array(\n                'status' => 'error',\n                'message' => 'Failed to register user.'\n            );\n        }\n    } catch (PDOException $e) {\n        return array(\n            'status' => 'error',\n            'message' => 'Database connection failed: ' . $e->getMessage()\n        );\n    } finally {\n        // Close database connection\n        if ($conn !== null) {\n            $conn = null;\n        }\n    }\n}\n\n// Example usage:\n$username = 'johnDoe';\n$email = 'johndoe@example.com';\n$password = 'password123';\n\n$result = registerUser($username, $email, $password);\n\nif ($result['status'] === 'success') {\n    echo $result['message'];\n} else {\n    echo $result['message'];\n}\n\n?>\n```\n\n**Note:**\n\n1. You'll need to replace the placeholders (`your_username`, `your_password`, `your_database_name`) with your actual database credentials and name.\n2. This example uses MySQL as the database management system, but you can easily modify it to work with other databases (e.g., PostgreSQL).\n3. The `registerUser` function takes three parameters: `$username`, `$email`, and `$password`. You'll need to call this function from your registration form handler code.\n4. Error handling is implemented using try-catch blocks for the database connection and query execution. You can customize it as needed.\n\nI hope this helps you create a robust user registration system in PHP!", "code_blocks": ["```php\n<?php\n\n// Database connection settings\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database_name');\n\n// Function to register new user\nfunction registerUser($username, $email, $password)\n{\n    // Validate input data\n    if (empty($username) || empty($email) || empty($password)) {\n        return array(\n            'status' => 'error',\n            'message' => 'Please fill in all fields.'\n        );\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return array(\n            'status' => 'error',\n            'message' => 'Invalid email address.'\n        );\n    }\n\n    // Hash password using bcrypt\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Connect to database\n    try {\n        $conn = new PDO(\"mysql:host=\" . DB_HOST . \";dbname=\" . DB_NAME, DB_USERNAME, DB_PASSWORD);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Prepare and execute query\n        $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        if ($stmt->execute()) {\n            return array(\n                'status' => 'success',\n                'message' => 'User registered successfully.'\n            );\n        } else {\n            return array(\n                'status' => 'error',\n                'message' => 'Failed to register user.'\n            );\n        }\n    } catch (PDOException $e) {\n        return array(\n            'status' => 'error',\n            'message' => 'Database connection failed: ' . $e->getMessage()\n        );\n    } finally {\n        // Close database connection\n        if ($conn !== null) {\n            $conn = null;\n        }\n    }\n}\n\n// Example usage:\n$username = 'johnDoe';\n$email = 'johndoe@example.com';\n$password = 'password123';\n\n$result = registerUser($username, $email, $password);\n\nif ($result['status'] === 'success') {\n    echo $result['message'];\n} else {\n    echo $result['message'];\n}\n\n?>\n```"]}
