{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nHere is an example of a user registration function written in PHP. This function will register a new user with the provided email, password, and other details.\n\n```php\n<?php\n\n/**\n * User Registration Function\n *\n * Registers a new user with the provided email, password, and other details.\n *\n * @param string $email    The user's email address.\n * @param string $password The user's password (hashed before storing).\n * @param string $name     The user's name.\n * @return array          An array containing the registered user's data or an error message if registration fails.\n */\nfunction registerUser($email, $password, $name)\n{\n    // Check for empty fields\n    if (empty($email) || empty($password) || empty($name)) {\n        return [\n            'success' => false,\n            'message' => 'Please fill in all fields.'\n        ];\n    }\n\n    // Validate email address\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return [\n            'success' => false,\n            'message' => 'Invalid email address.'\n        ];\n    }\n\n    // Hash the password for storage\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Connect to database (example using PDO)\n    try {\n        $dbConnection = new PDO('sqlite:users.db');\n        $dbConnection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    } catch (PDOException $e) {\n        return [\n            'success' => false,\n            'message' => 'Database connection failed.'\n        ];\n    }\n\n    // Insert new user data into database\n    try {\n        $query = \"INSERT INTO users (email, password, name) VALUES (:email, :password, :name)\";\n        $stmt = $dbConnection->prepare($query);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->bindParam(':name', $name);\n        $result = $stmt->execute();\n    } catch (PDOException $e) {\n        return [\n            'success' => false,\n            'message' => 'Database insertion failed.'\n        ];\n    }\n\n    // Return registered user data\n    if ($result) {\n        return [\n            'success' => true,\n            'email'   => $email,\n            'name'    => $name\n        ];\n    } else {\n        return [\n            'success' => false,\n            'message' => 'Registration failed.'\n        ];\n    }\n}\n\n?>\n```\n\n### Example Usage\n\n```php\n$email = 'user@example.com';\n$password = 'password123';\n$name = 'John Doe';\n\n$result = registerUser($email, $password, $name);\n\nif ($result['success']) {\n    echo \"User registered successfully!\";\n} else {\n    echo \"Registration failed: \" . $result['message'];\n}\n```\n\nNote that this example uses a SQLite database for simplicity. In a real-world application, you would typically use a more robust database system like MySQL or PostgreSQL. Additionally, remember to secure your password storage and handling practices by using a library or framework-specific solutions (e.g., Laravel's `Hash::make()` function).", "code_blocks": ["```php\n<?php\n\n/**\n * User Registration Function\n *\n * Registers a new user with the provided email, password, and other details.\n *\n * @param string $email    The user's email address.\n * @param string $password The user's password (hashed before storing).\n * @param string $name     The user's name.\n * @return array          An array containing the registered user's data or an error message if registration fails.\n */\nfunction registerUser($email, $password, $name)\n{\n    // Check for empty fields\n    if (empty($email) || empty($password) || empty($name)) {\n        return [\n            'success' => false,\n            'message' => 'Please fill in all fields.'\n        ];\n    }\n\n    // Validate email address\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return [\n            'success' => false,\n            'message' => 'Invalid email address.'\n        ];\n    }\n\n    // Hash the password for storage\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Connect to database (example using PDO)\n    try {\n        $dbConnection = new PDO('sqlite:users.db');\n        $dbConnection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    } catch (PDOException $e) {\n        return [\n            'success' => false,\n            'message' => 'Database connection failed.'\n        ];\n    }\n\n    // Insert new user data into database\n    try {\n        $query = \"INSERT INTO users (email, password, name) VALUES (:email, :password, :name)\";\n        $stmt = $dbConnection->prepare($query);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->bindParam(':name', $name);\n        $result = $stmt->execute();\n    } catch (PDOException $e) {\n        return [\n            'success' => false,\n            'message' => 'Database insertion failed.'\n        ];\n    }\n\n    // Return registered user data\n    if ($result) {\n        return [\n            'success' => true,\n            'email'   => $email,\n            'name'    => $name\n        ];\n    } else {\n        return [\n            'success' => false,\n            'message' => 'Registration failed.'\n        ];\n    }\n}\n\n?>\n```", "```php\n$email = 'user@example.com';\n$password = 'password123';\n$name = 'John Doe';\n\n$result = registerUser($email, $password, $name);\n\nif ($result['success']) {\n    echo \"User registered successfully!\";\n} else {\n    echo \"Registration failed: \" . $result['message'];\n}\n```"]}
