{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function that checks for valid input, hashes the password, and stores it in a database.\n\n### Code\n```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\nfunction registerUser($data) {\n    // Validate input data\n    if (!isset($data['username']) || !isset($data['email']) || !isset($data['password'])) {\n        throw new Exception('Missing required fields');\n    }\n\n    $username = trim($data['username']);\n    $email = trim($data['email']);\n    $password = trim($data['password']);\n\n    // Check for valid input\n    if (empty($username) || empty($email) || empty($password)) {\n        throw new Exception('All fields are required');\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address');\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n        // Connect to database\n        $conn = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USER, DB_PASSWORD);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Insert user data into database\n        $stmt = $conn->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        if ($stmt->execute()) {\n            return true;\n        } else {\n            throw new Exception('Failed to register user');\n        }\n\n    } catch (PDOException $e) {\n        echo 'Database error: ' . $e->getMessage();\n        return false;\n\n    } finally {\n        // Close database connection\n        unset($conn);\n    }\n}\n\n?>\n```\n\n### Explanation\n\nThis function takes an array of input data as an argument. It checks for the presence and validity of `username`, `email`, and `password` fields. If any field is missing or invalid, it throws an exception.\n\nThe password is then hashed using the `password_hash()` function with a cryptographically secure algorithm (such as bcrypt).\n\nFinally, the function attempts to connect to the database using PDO and insert the user data into the `users` table. If successful, it returns `true`. Otherwise, it catches any database errors, echoes an error message, and returns `false`.\n\n### Example Usage\n\nTo use this function, simply call it with an array of input data:\n```php\n$data = [\n    'username' => 'johnDoe',\n    'email' => 'johndoe@example.com',\n    'password' => 'mysecretpassword'\n];\n\nif (registerUser($data)) {\n    echo 'User registered successfully!';\n} else {\n    echo 'Failed to register user.';\n}\n```\n\nRemember to replace `config.php` with your own configuration file containing database credentials and settings. Also, adjust the SQL queries and table names according to your database schema.", "code_blocks": ["```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\nfunction registerUser($data) {\n    // Validate input data\n    if (!isset($data['username']) || !isset($data['email']) || !isset($data['password'])) {\n        throw new Exception('Missing required fields');\n    }\n\n    $username = trim($data['username']);\n    $email = trim($data['email']);\n    $password = trim($data['password']);\n\n    // Check for valid input\n    if (empty($username) || empty($email) || empty($password)) {\n        throw new Exception('All fields are required');\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address');\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n        // Connect to database\n        $conn = new PDO('mysql:host=' . DB_HOST . ';dbname=' . DB_NAME, DB_USER, DB_PASSWORD);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Insert user data into database\n        $stmt = $conn->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n\n        if ($stmt->execute()) {\n            return true;\n        } else {\n            throw new Exception('Failed to register user');\n        }\n\n    } catch (PDOException $e) {\n        echo 'Database error: ' . $e->getMessage();\n        return false;\n\n    } finally {\n        // Close database connection\n        unset($conn);\n    }\n}\n\n?>\n```", "```php\n$data = [\n    'username' => 'johnDoe',\n    'email' => 'johndoe@example.com',\n    'password' => 'mysecretpassword'\n];\n\nif (registerUser($data)) {\n    echo 'User registered successfully!';\n} else {\n    echo 'Failed to register user.';\n}\n```"]}
