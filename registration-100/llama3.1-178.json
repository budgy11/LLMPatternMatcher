{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a basic user registration function in PHP that includes input validation and error handling:\n\n**`register.php`**\n```php\n<?php\n\n// Configuration settings\ndefine('MIN_USERNAME_LENGTH', 3);\ndefine('MAX_USERNAME_LENGTH', 20);\ndefine('MIN_PASSWORD_LENGTH', 6);\ndefine('MAX_PASSWORD_LENGTH', 40);\n\nfunction registerUser($username, $email, $password) {\n    // Input validation\n    if (strlen($username) < MIN_USERNAME_LENGTH || strlen($username) > MAX_USERNAME_LENGTH) {\n        throw new InvalidArgumentException(\"Username must be between \" . MIN_USERNAME_LENGTH . \" and \" . MAX_USERNAME_LENGTH . \" characters.\");\n    }\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new InvalidArgumentException(\"Invalid email address.\");\n    }\n    if (strlen($password) < MIN_PASSWORD_LENGTH || strlen($password) > MAX_PASSWORD_LENGTH) {\n        throw new InvalidArgumentException(\"Password must be between \" . MIN_PASSWORD_LENGTH . \" and \" . MAX_PASSWORD_LENGTH . \" characters.\");\n    }\n\n    // Connect to database\n    $db = new PDO('sqlite:users.db');\n\n    try {\n        // Insert user into database\n        $stmt = $db->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $passwordHash = hash('sha256', $password); // Use a secure password hashing algorithm\n        $stmt->bindParam(':password', $passwordHash);\n        $stmt->execute();\n\n        // Commit changes and close database connection\n        $db->commit();\n        $db = null;\n\n        return true;\n    } catch (PDOException $e) {\n        // Rollback changes if an error occurs\n        $db->rollBack();\n        throw new RuntimeException(\"Failed to register user: \" . $e->getMessage());\n    }\n}\n\n// Example usage:\ntry {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    if (registerUser($username, $email, $password)) {\n        echo \"User registered successfully!\";\n    } else {\n        echo \"Registration failed.\";\n    }\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```\n**Explanation**\n\nThis script defines a `registerUser` function that takes three arguments: `$username`, `$email`, and `$password`. It performs the following steps:\n\n1. **Input validation**: Checks if the input values meet the minimum and maximum length requirements.\n2. **Database connection**: Establishes a connection to a SQLite database using PDO (PHP Data Objects).\n3. **Insert user into database**: Prepares an SQL statement to insert the user's data into the `users` table, hashing the password with SHA-256.\n4. **Commit changes and close database connection**: Commits the changes to the database and closes the connection.\n\n**Example Usage**\n\nTo use this script, you would need to create a form that submits the user's input values (username, email, and password) as POST requests to this PHP script. For example:\n\n```html\n<form action=\"register.php\" method=\"post\">\n    <label for=\"username\">Username:</label>\n    <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n    <input type=\"submit\" value=\"Register\">\n</form>\n```\nThis is a basic example, and you should consider implementing additional features such as:\n\n* **Password strength validation**: To ensure users create strong passwords.\n* **Email verification**: To send a confirmation email to the user after registration.\n* **Error handling and logging**: To handle errors and log them for debugging purposes.\n\nRemember to replace `users.db` with your actual database file name, and update the PDO connection settings as needed.", "code_blocks": ["```php\n<?php\n\n// Configuration settings\ndefine('MIN_USERNAME_LENGTH', 3);\ndefine('MAX_USERNAME_LENGTH', 20);\ndefine('MIN_PASSWORD_LENGTH', 6);\ndefine('MAX_PASSWORD_LENGTH', 40);\n\nfunction registerUser($username, $email, $password) {\n    // Input validation\n    if (strlen($username) < MIN_USERNAME_LENGTH || strlen($username) > MAX_USERNAME_LENGTH) {\n        throw new InvalidArgumentException(\"Username must be between \" . MIN_USERNAME_LENGTH . \" and \" . MAX_USERNAME_LENGTH . \" characters.\");\n    }\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new InvalidArgumentException(\"Invalid email address.\");\n    }\n    if (strlen($password) < MIN_PASSWORD_LENGTH || strlen($password) > MAX_PASSWORD_LENGTH) {\n        throw new InvalidArgumentException(\"Password must be between \" . MIN_PASSWORD_LENGTH . \" and \" . MAX_PASSWORD_LENGTH . \" characters.\");\n    }\n\n    // Connect to database\n    $db = new PDO('sqlite:users.db');\n\n    try {\n        // Insert user into database\n        $stmt = $db->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $passwordHash = hash('sha256', $password); // Use a secure password hashing algorithm\n        $stmt->bindParam(':password', $passwordHash);\n        $stmt->execute();\n\n        // Commit changes and close database connection\n        $db->commit();\n        $db = null;\n\n        return true;\n    } catch (PDOException $e) {\n        // Rollback changes if an error occurs\n        $db->rollBack();\n        throw new RuntimeException(\"Failed to register user: \" . $e->getMessage());\n    }\n}\n\n// Example usage:\ntry {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    if (registerUser($username, $email, $password)) {\n        echo \"User registered successfully!\";\n    } else {\n        echo \"Registration failed.\";\n    }\n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n```", null]}
