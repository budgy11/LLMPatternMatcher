{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a basic user registration function in PHP, including form validation and password hashing:\n\n**Note:** This is just a starting point and should be adapted to your specific needs.\n\n```php\n// Configuration settings\n$requiredFields = array('username', 'email', 'password');\n$maxUsernameLength = 20;\n$maxEmailLength = 100;\n$maxPasswordLength = 50;\n\nfunction registerUser() {\n    if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n        $data = $_POST;\n        \n        // Validate form data\n        if (validateData($data)) {\n            // Hash password\n            $passwordHash = hash('sha256', $data['password']);\n            \n            // Connect to database and insert user\n            require_once 'dbConnect.php';\n            $mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n            if ($mysqli->connect_error) {\n                echo \"Connection failed: \" . $mysqli->connect_error;\n                exit();\n            }\n            \n            // Insert user data into database\n            $query = \"INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)\";\n            $stmt = $mysqli->prepare($query);\n            $stmt->bind_param('sss', $data['username'], $data['email'], $passwordHash);\n            if ($stmt->execute()) {\n                echo \"User registered successfully!\";\n            } else {\n                echo \"Error registering user: \" . $mysqli->error;\n            }\n            \n            // Close database connection\n            $mysqli->close();\n        } else {\n            // Show form with validation errors\n            require_once 'registerForm.php';\n            echo \"<p class='error'>\" . join(\"<br>\", getValidationErrors()) . \"</p>\";\n        }\n    } else {\n        // Display registration form\n        require_once 'registerForm.php';\n    }\n}\n\nfunction validateData($data) {\n    $validationErrors = array();\n    \n    if (!in_array('username', $requiredFields)) {\n        $validationErrors[] = \"Username is required.\";\n    } elseif (strlen($data['username']) > $maxUsernameLength || strlen($data['username']) < 3) {\n        $validationErrors[] = \"Username must be between 3 and $maxUsernameLength characters long.\";\n    }\n    \n    if (!in_array('email', $requiredFields)) {\n        $validationErrors[] = \"Email is required.\";\n    } elseif (strlen($data['email']) > $maxEmailLength || !preg_match('/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/', $data['email'])) {\n        $validationErrors[] = \"Invalid email address.\";\n    }\n    \n    if (!in_array('password', $requiredFields)) {\n        $validationErrors[] = \"Password is required.\";\n    } elseif (strlen($data['password']) > $maxPasswordLength || strlen($data['password']) < 8) {\n        $validationErrors[] = \"Password must be between 8 and $maxPasswordLength characters long.\";\n    }\n    \n    if (!empty($validationErrors)) {\n        return false;\n    }\n    \n    return true;\n}\n\nfunction getValidationErrors() {\n    global $validationErrors;\n    return $validationErrors;\n}\n```\n\nThis example demonstrates the following key concepts:\n\n1. **Form validation**: The `validateData` function checks that all required fields are present and that their values meet certain criteria (e.g., username length, email format).\n2. **Password hashing**: The password is hashed using SHA-256 before being stored in the database.\n3. **Database interaction**: The script connects to a MySQL database using the `mysqli` extension and inserts user data into the `users` table.\n\nRemember to adapt this code to your specific needs and integrate it with your own registration form template (`registerForm.php`).", "code_blocks": ["```php\n// Configuration settings\n$requiredFields = array('username', 'email', 'password');\n$maxUsernameLength = 20;\n$maxEmailLength = 100;\n$maxPasswordLength = 50;\n\nfunction registerUser() {\n    if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n        $data = $_POST;\n        \n        // Validate form data\n        if (validateData($data)) {\n            // Hash password\n            $passwordHash = hash('sha256', $data['password']);\n            \n            // Connect to database and insert user\n            require_once 'dbConnect.php';\n            $mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);\n            if ($mysqli->connect_error) {\n                echo \"Connection failed: \" . $mysqli->connect_error;\n                exit();\n            }\n            \n            // Insert user data into database\n            $query = \"INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)\";\n            $stmt = $mysqli->prepare($query);\n            $stmt->bind_param('sss', $data['username'], $data['email'], $passwordHash);\n            if ($stmt->execute()) {\n                echo \"User registered successfully!\";\n            } else {\n                echo \"Error registering user: \" . $mysqli->error;\n            }\n            \n            // Close database connection\n            $mysqli->close();\n        } else {\n            // Show form with validation errors\n            require_once 'registerForm.php';\n            echo \"<p class='error'>\" . join(\"<br>\", getValidationErrors()) . \"</p>\";\n        }\n    } else {\n        // Display registration form\n        require_once 'registerForm.php';\n    }\n}\n\nfunction validateData($data) {\n    $validationErrors = array();\n    \n    if (!in_array('username', $requiredFields)) {\n        $validationErrors[] = \"Username is required.\";\n    } elseif (strlen($data['username']) > $maxUsernameLength || strlen($data['username']) < 3) {\n        $validationErrors[] = \"Username must be between 3 and $maxUsernameLength characters long.\";\n    }\n    \n    if (!in_array('email', $requiredFields)) {\n        $validationErrors[] = \"Email is required.\";\n    } elseif (strlen($data['email']) > $maxEmailLength || !preg_match('/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/', $data['email'])) {\n        $validationErrors[] = \"Invalid email address.\";\n    }\n    \n    if (!in_array('password', $requiredFields)) {\n        $validationErrors[] = \"Password is required.\";\n    } elseif (strlen($data['password']) > $maxPasswordLength || strlen($data['password']) < 8) {\n        $validationErrors[] = \"Password must be between 8 and $maxPasswordLength characters long.\";\n    }\n    \n    if (!empty($validationErrors)) {\n        return false;\n    }\n    \n    return true;\n}\n\nfunction getValidationErrors() {\n    global $validationErrors;\n    return $validationErrors;\n}\n```"]}
