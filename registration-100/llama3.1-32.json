{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of how you can create a simple user registration system in PHP:\n\n```php\n<?php\n\n// Configuration\n$dsn = 'mysql:host=localhost;dbname=mydb';\n$username = 'myuser';\n$password = 'mypassword';\n\ntry {\n    // Connect to database\n    $pdo = new PDO($dsn, $username, $password);\n\n    if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n        // Process form data\n        $name = $_POST['name'];\n        $email = $_POST['email'];\n        $password = $_POST['password'];\n\n        // Validate user input\n        if (empty($name) || empty($email) || empty($password)) {\n            echo \"Please fill out all fields.\";\n            exit;\n        }\n\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n            echo \"Invalid email address.\";\n            exit;\n        }\n\n        // Hash password for secure storage\n        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n        try {\n            // Insert user data into database\n            $stmt = $pdo->prepare(\"INSERT INTO users (name, email, password) VALUES (:name, :email, :password)\");\n            $stmt->bindParam(':name', $name);\n            $stmt->bindParam(':email', $email);\n            $stmt->bindParam(':password', $hashedPassword);\n\n            if ($stmt->execute()) {\n                echo \"User created successfully!\";\n            } else {\n                throw new PDOException('Error creating user.', 0, null);\n            }\n        } catch (PDOException $e) {\n            // Handle database errors\n            echo \"An error occurred: \" . $e->getMessage();\n        }\n\n    }\n\n} catch (PDOException $e) {\n    // Handle connection errors\n    echo \"Could not connect to the database.\";\n}\n\n?>\n```\n\nAnd here's a simple registration form:\n\n```php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Register</title>\n</head>\n<body>\n\n<form action=\"\" method=\"post\">\n\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n\n    <button type=\"submit\">Register</button>\n\n</form>\n\n</body>\n</html>\n```\n\n**Important security notes:**\n\n*   **Never store plain text passwords**: Always use a password hashing function like `password_hash()` to securely store passwords.\n*   **Validate user input**: This code checks for empty fields and invalid email addresses. You should also consider validating other user inputs (e.g., username, phone number).\n*   **Use prepared statements with parameterized queries**: This example uses PDO's prepared statement feature to prevent SQL injection attacks.\n\n**Remember to replace the `$dsn`, `$username`, and `$password` variables with your actual database credentials!**", "code_blocks": ["```php\n<?php\n\n// Configuration\n$dsn = 'mysql:host=localhost;dbname=mydb';\n$username = 'myuser';\n$password = 'mypassword';\n\ntry {\n    // Connect to database\n    $pdo = new PDO($dsn, $username, $password);\n\n    if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n        // Process form data\n        $name = $_POST['name'];\n        $email = $_POST['email'];\n        $password = $_POST['password'];\n\n        // Validate user input\n        if (empty($name) || empty($email) || empty($password)) {\n            echo \"Please fill out all fields.\";\n            exit;\n        }\n\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n            echo \"Invalid email address.\";\n            exit;\n        }\n\n        // Hash password for secure storage\n        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n        try {\n            // Insert user data into database\n            $stmt = $pdo->prepare(\"INSERT INTO users (name, email, password) VALUES (:name, :email, :password)\");\n            $stmt->bindParam(':name', $name);\n            $stmt->bindParam(':email', $email);\n            $stmt->bindParam(':password', $hashedPassword);\n\n            if ($stmt->execute()) {\n                echo \"User created successfully!\";\n            } else {\n                throw new PDOException('Error creating user.', 0, null);\n            }\n        } catch (PDOException $e) {\n            // Handle database errors\n            echo \"An error occurred: \" . $e->getMessage();\n        }\n\n    }\n\n} catch (PDOException $e) {\n    // Handle connection errors\n    echo \"Could not connect to the database.\";\n}\n\n?>\n```", "```php\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Register</title>\n</head>\n<body>\n\n<form action=\"\" method=\"post\">\n\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n\n    <button type=\"submit\">Register</button>\n\n</form>\n\n</body>\n</html>\n```"]}
