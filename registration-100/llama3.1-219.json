{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function includes validation for username, email, password, and confirm password.\n\n```php\nfunction registerUser($username, $email, $password, $confirmPassword) {\n    // Check if all fields are provided\n    if (empty($username) || empty($email) || empty($password) || empty($confirmPassword)) {\n        return array('status' => 'error', 'message' => 'All fields are required');\n    }\n\n    // Validate username length and character restrictions\n    if (strlen($username) < 3 || strlen($username) > 30) {\n        return array('status' => 'error', 'message' => 'Username must be between 3-30 characters');\n    }\n    if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {\n        return array('status' => 'error', 'message' => 'Username can only contain letters, numbers, and underscores');\n    }\n\n    // Validate email format\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return array('status' => 'error', 'message' => 'Invalid email address');\n    }\n\n    // Validate password length and character restrictions\n    if (strlen($password) < 8 || strlen($password) > 50) {\n        return array('status' => 'error', 'message' => 'Password must be between 8-50 characters');\n    }\n    if (!preg_match('/[a-zA-Z]/', $password)) {\n        return array('status' => 'error', 'message' => 'Password must contain at least one letter');\n    }\n    if (!preg_match('/\\d/', $password)) {\n        return array('status' => 'error', 'message' => 'Password must contain at least one number');\n    }\n\n    // Validate confirm password\n    if ($password !== $confirmPassword) {\n        return array('status' => 'error', 'message' => 'Passwords do not match');\n    }\n\n    // Create user account (insert into database)\n    try {\n        // Connect to database and insert user data\n        $dbConnection = new PDO('sqlite:users.db');\n        $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n        $stmt = $dbConnection->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', password_hash($password, PASSWORD_DEFAULT));\n        $stmt->execute();\n        return array('status' => 'success', 'message' => 'User registered successfully');\n    } catch (PDOException $e) {\n        return array('status' => 'error', 'message' => 'Error registering user: ' . $e->getMessage());\n    }\n}\n```\n\n**Example Usage**\n---------------\n\n```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n$confirmPassword = $_POST['confirm_password'];\n\n$response = registerUser($username, $email, $password, $confirmPassword);\n\nif ($response['status'] == 'success') {\n    echo 'User registered successfully!';\n} else {\n    echo 'Error: ' . $response['message'];\n}\n```\n\nNote that this is a basic example and you should adapt it to your specific needs. Also, make sure to follow best practices for security and database interaction.\n\n**Security Notes**\n----------------\n\n* This function uses the `password_hash` function to store passwords securely.\n* It uses prepared statements with parameterized queries to prevent SQL injection attacks.\n* The `$username`, `$email`, and `$confirmPassword` variables should be sanitized and validated before passing them to the function.", "code_blocks": ["```php\nfunction registerUser($username, $email, $password, $confirmPassword) {\n    // Check if all fields are provided\n    if (empty($username) || empty($email) || empty($password) || empty($confirmPassword)) {\n        return array('status' => 'error', 'message' => 'All fields are required');\n    }\n\n    // Validate username length and character restrictions\n    if (strlen($username) < 3 || strlen($username) > 30) {\n        return array('status' => 'error', 'message' => 'Username must be between 3-30 characters');\n    }\n    if (!preg_match('/^[a-zA-Z0-9_]+$/', $username)) {\n        return array('status' => 'error', 'message' => 'Username can only contain letters, numbers, and underscores');\n    }\n\n    // Validate email format\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return array('status' => 'error', 'message' => 'Invalid email address');\n    }\n\n    // Validate password length and character restrictions\n    if (strlen($password) < 8 || strlen($password) > 50) {\n        return array('status' => 'error', 'message' => 'Password must be between 8-50 characters');\n    }\n    if (!preg_match('/[a-zA-Z]/', $password)) {\n        return array('status' => 'error', 'message' => 'Password must contain at least one letter');\n    }\n    if (!preg_match('/\\d/', $password)) {\n        return array('status' => 'error', 'message' => 'Password must contain at least one number');\n    }\n\n    // Validate confirm password\n    if ($password !== $confirmPassword) {\n        return array('status' => 'error', 'message' => 'Passwords do not match');\n    }\n\n    // Create user account (insert into database)\n    try {\n        // Connect to database and insert user data\n        $dbConnection = new PDO('sqlite:users.db');\n        $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n        $stmt = $dbConnection->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', password_hash($password, PASSWORD_DEFAULT));\n        $stmt->execute();\n        return array('status' => 'success', 'message' => 'User registered successfully');\n    } catch (PDOException $e) {\n        return array('status' => 'error', 'message' => 'Error registering user: ' . $e->getMessage());\n    }\n}\n```", "```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n$confirmPassword = $_POST['confirm_password'];\n\n$response = registerUser($username, $email, $password, $confirmPassword);\n\nif ($response['status'] == 'success') {\n    echo 'User registered successfully!';\n} else {\n    echo 'Error: ' . $response['message'];\n}\n```"]}
