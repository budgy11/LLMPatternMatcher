{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nHere is an example of a user registration function in PHP that includes input validation, password hashing, and database interaction.\n\n### Database Setup\n\nFirst, create a MySQL database with the following schema:\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  password VARCHAR(255) NOT NULL\n);\n```\n### PHP Function\n```php\nfunction registerUser($username, $email, $password) {\n  // Input validation\n  if (empty($username)) {\n    throw new Exception(\"Username is required\");\n  }\n  if (!preg_match(\"/^[a-zA-Z0-9]+$/\", $username)) {\n    throw new Exception(\"Invalid username\");\n  }\n  if (empty($email)) {\n    throw new Exception(\"Email is required\");\n  }\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    throw new Exception(\"Invalid email\");\n  }\n\n  // Password hashing\n  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n  // Database interaction\n  try {\n    $conn = new PDO('mysql:host=localhost;dbname=your_database_name', 'username', 'password');\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashedPassword);\n    $stmt->execute();\n    $conn = null;\n  } catch (PDOException $e) {\n    throw new Exception(\"Database error: \" . $e->getMessage());\n  }\n\n  return true;\n}\n```\n### Example Usage\n```php\ntry {\n  registerUser('johnDoe', 'johndoe@example.com', 'password123');\n} catch (Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}\n```\nThis code defines a `registerUser` function that takes three parameters: `$username`, `$email`, and `$password`. The function performs the following tasks:\n\n1. Input validation:\n\t* Checks if username is empty or contains invalid characters.\n\t* Checks if email is empty or does not conform to standard email format.\n2. Password hashing using `password_hash`.\n3. Database interaction:\n\t* Establishes a PDO connection to the database.\n\t* Prepares an INSERT statement with parameterized values.\n\t* Executes the query and stores the result in the `users` table.\n\nThe function returns `true` if successful, or throws an exception if any of the validation checks fail or if there is a database error.", "code_blocks": [null, "```php\nfunction registerUser($username, $email, $password) {\n  // Input validation\n  if (empty($username)) {\n    throw new Exception(\"Username is required\");\n  }\n  if (!preg_match(\"/^[a-zA-Z0-9]+$/\", $username)) {\n    throw new Exception(\"Invalid username\");\n  }\n  if (empty($email)) {\n    throw new Exception(\"Email is required\");\n  }\n  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    throw new Exception(\"Invalid email\");\n  }\n\n  // Password hashing\n  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n  // Database interaction\n  try {\n    $conn = new PDO('mysql:host=localhost;dbname=your_database_name', 'username', 'password');\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashedPassword);\n    $stmt->execute();\n    $conn = null;\n  } catch (PDOException $e) {\n    throw new Exception(\"Database error: \" . $e->getMessage());\n  }\n\n  return true;\n}\n```", "```php\ntry {\n  registerUser('johnDoe', 'johndoe@example.com', 'password123');\n} catch (Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}\n```"]}
