{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a simple user registration function in PHP:\n\n```php\n// Configuration\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'root');\ndefine('DB_PASSWORD', '');\ndefine('DB_NAME', 'your_database_name');\n\nfunction registerUser($username, $email, $password) {\n    // Connect to database\n    $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\n    if ($conn->connect_error) {\n        die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    // Prepare query\n    $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\");\n    $stmt->bind_param(\"sss\", $username, $email, $password);\n\n    // Execute query\n    if ($stmt->execute()) {\n        echo \"User registered successfully!\";\n    } else {\n        echo \"Error: \" . $conn->error;\n    }\n\n    // Close connection and statement\n    $conn->close();\n    $stmt->close();\n\n    return true;\n}\n\n// Example usage:\n$username = 'newuser';\n$email = 'newuser@example.com';\n$password = password_hash('password123', PASSWORD_DEFAULT);\n\nregisterUser($username, $email, $password);\n```\n\nThis example code creates a function `registerUser` that takes three parameters: `$username`, `$email`, and `$password`. It uses the MySQLi extension to connect to a database. The `prepare` method is used to prepare an SQL query with parameterized placeholders for the values. The `bind_param` method binds the user input values to the placeholders, and the `execute` method executes the prepared query.\n\nPlease note that:\n\n* You should replace `'localhost'`, `'root'`, `''`, and `'your_database_name'` with your actual database credentials.\n* This code uses a simple password hashing function (`password_hash`) for demonstration purposes. In a real application, consider using a more secure method such as bcrypt or Argon2.\n* It's recommended to use prepared statements and parameterized queries to prevent SQL injection attacks.\n\nHere are some tips:\n\n1. **Use prepared statements**: Prepared statements can help prevent SQL injection attacks by treating user input values as parameters rather than code.\n2. **Hash passwords securely**: Use a secure password hashing algorithm such as bcrypt or Argon2 to protect users' passwords.\n3. **Validate and sanitize user input**: Always validate and sanitize user input data to prevent unexpected behavior or security vulnerabilities.\n\nBefore running this code, ensure that you:\n\n* Create the database schema (e.g., `CREATE TABLE users (id INT PRIMARY KEY AUTO_INCREMENT, username VARCHAR(255), email VARCHAR(255), password VARCHAR(255))`).\n* Replace `'your_database_name'`, `'localhost'`, `'root'`, and `''` with your actual database credentials.", "code_blocks": ["```php\n// Configuration\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'root');\ndefine('DB_PASSWORD', '');\ndefine('DB_NAME', 'your_database_name');\n\nfunction registerUser($username, $email, $password) {\n    // Connect to database\n    $conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\n    if ($conn->connect_error) {\n        die(\"Connection failed: \" . $conn->connect_error);\n    }\n\n    // Prepare query\n    $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\");\n    $stmt->bind_param(\"sss\", $username, $email, $password);\n\n    // Execute query\n    if ($stmt->execute()) {\n        echo \"User registered successfully!\";\n    } else {\n        echo \"Error: \" . $conn->error;\n    }\n\n    // Close connection and statement\n    $conn->close();\n    $stmt->close();\n\n    return true;\n}\n\n// Example usage:\n$username = 'newuser';\n$email = 'newuser@example.com';\n$password = password_hash('password123', PASSWORD_DEFAULT);\n\nregisterUser($username, $email, $password);\n```"]}
