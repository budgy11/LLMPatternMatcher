{"prompt": "Create a user registration function using php", "llm_output": "Here is an example of a user registration function in PHP:\n\n**`register.php`**\n```php\n<?php\n// Configuration settings\n$db_host = 'localhost';\n$db_username = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Create database connection\n$conn = new mysqli($db_host, $db_username, $db_password, $db_name);\n\n// Check if connection is successful\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to register user\nfunction registerUser($username, $email, $password) {\n    // Validate input fields\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('success' => false, 'message' => 'All fields are required');\n    }\n\n    // Hash password using SHA-256\n    $hashedPassword = sha256($password);\n\n    // Prepare SQL query to insert user data into database\n    $sql = \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"sss\", $username, $email, $hashedPassword);\n\n    // Execute query and get result\n    if ($stmt->execute()) {\n        return array('success' => true, 'message' => 'User registered successfully');\n    } else {\n        return array('success' => false, 'message' => 'Error registering user');\n    }\n}\n\n// Handle form submission\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    // Call registerUser function and display result\n    $result = registerUser($username, $email, $password);\n    echo json_encode($result);\n}\n\n// Close database connection\n$conn->close();\n?>\n```\n**`register.html`**\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Register</title>\n</head>\n<body>\n    <h1>Register</h1>\n    <form action=\"register.php\" method=\"post\">\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n        <button type=\"submit\">Register</button>\n    </form>\n\n    <script src=\"register.js\"></script>\n</body>\n</html>\n```\n**`register.js`**\n```javascript\n// Get result from server and display message\nfunction getResult() {\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', 'register.php', true);\n    xhr.onload = function() {\n        if (xhr.status == 200) {\n            var result = JSON.parse(xhr.responseText);\n            document.getElementById('result').innerHTML = result.message;\n        } else {\n            console.log('Error: ' + xhr.statusText);\n        }\n    };\n    xhr.send();\n}\n```\nThis example demonstrates a basic user registration system using PHP and MySQL. Here's how it works:\n\n1. The `register.php` file connects to the database, checks if the connection is successful, and defines the `registerUser` function.\n2. When the form is submitted, the `registerUser` function is called with the user input fields as arguments.\n3. The function validates the input fields, hashes the password using SHA-256, prepares a SQL query to insert the user data into the database, executes the query, and returns a result object with success status and message.\n4. If the registration is successful, a JSON response is sent back to the client.\n5. The `register.html` file contains a simple form that sends the user input fields to the server when submitted.\n6. When the server responds with a JSON result, the `getResult` function in `register.js` is called to display the message.\n\nNote: This example uses SHA-256 for password hashing, which is considered insecure for production use. For a more secure solution, consider using a library like PHPass or bcrypt. Additionally, this example assumes that you have a MySQL database set up with a `users` table containing `username`, `email`, and `password` columns.", "code_blocks": ["```php\n<?php\n// Configuration settings\n$db_host = 'localhost';\n$db_username = 'your_username';\n$db_password = 'your_password';\n$db_name = 'your_database';\n\n// Create database connection\n$conn = new mysqli($db_host, $db_username, $db_password, $db_name);\n\n// Check if connection is successful\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to register user\nfunction registerUser($username, $email, $password) {\n    // Validate input fields\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('success' => false, 'message' => 'All fields are required');\n    }\n\n    // Hash password using SHA-256\n    $hashedPassword = sha256($password);\n\n    // Prepare SQL query to insert user data into database\n    $sql = \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"sss\", $username, $email, $hashedPassword);\n\n    // Execute query and get result\n    if ($stmt->execute()) {\n        return array('success' => true, 'message' => 'User registered successfully');\n    } else {\n        return array('success' => false, 'message' => 'Error registering user');\n    }\n}\n\n// Handle form submission\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    // Call registerUser function and display result\n    $result = registerUser($username, $email, $password);\n    echo json_encode($result);\n}\n\n// Close database connection\n$conn->close();\n?>\n```", null, null]}
