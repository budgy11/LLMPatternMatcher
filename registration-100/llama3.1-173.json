{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a user registration function in PHP that stores the information in a database using MySQL.\n\n**Function:** `registerUser`\n\n**Parameters:**\n\n- `$username`\n- `$email`\n- `$password` (hashed before storing)\n- `$firstname`\n- `$lastname`\n\n**Description:** This function takes care of user registrations by validating and sanitizing inputs, hashing passwords, and adding new users to the database.\n\n```php\n<?php\n\n// Include connection to MySQL database\nrequire_once 'db_config.php';\n\nfunction registerUser($username, $email, $password, $firstname, $lastname) {\n    // Validate inputs\n    if (empty($username) || empty($email) || empty($password) || empty($firstname) || empty($lastname)) {\n        throw new Exception(\"All fields must be filled.\");\n    }\n\n    // Hash password for security\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n        // Prepare and execute query to add user to database\n        $stmt = $conn->prepare('INSERT INTO users (username, email, password, firstname, lastname) VALUES (:username, :email, :password, :firstname, :lastname)');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->bindParam(':firstname', $firstname);\n        $stmt->bindParam(':lastname', $lastname);\n        $stmt->execute();\n\n        // If query executes successfully, return user ID\n        return $conn->lastInsertId();\n    } catch (PDOException $e) {\n        throw new Exception(\"Database error: \" . $e->getMessage());\n    }\n}\n\n?>\n```\n\n**Example Usage:**\n\n```php\n// Assuming you're using this function in a larger script or application\n\ntry {\n    // Get input from form submission, for example\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n    $firstname = $_POST['firstname'];\n    $lastname = $_POST['lastname'];\n\n    // Call the function to register user\n    $newUserId = registerUser($username, $email, $password, $firstname, $lastname);\n\n    echo \"New user registered with ID: $newUserId\";\n} catch (Exception $e) {\n    echo \"Registration failed: \" . $e->getMessage();\n}\n```\n\n**Database Schema for Users Table:**\n\n```sql\nCREATE TABLE users (\n    id INT AUTO_INCREMENT,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL UNIQUE,\n    password VARCHAR(255) NOT NULL,\n    firstname VARCHAR(30),\n    lastname VARCHAR(40),\n    PRIMARY KEY (id)\n);\n```\n\nThis example demonstrates a simple registration system. Real-world applications might require additional validation, error handling, and security measures to ensure robustness against malicious inputs or database vulnerabilities.", "code_blocks": ["```php\n<?php\n\n// Include connection to MySQL database\nrequire_once 'db_config.php';\n\nfunction registerUser($username, $email, $password, $firstname, $lastname) {\n    // Validate inputs\n    if (empty($username) || empty($email) || empty($password) || empty($firstname) || empty($lastname)) {\n        throw new Exception(\"All fields must be filled.\");\n    }\n\n    // Hash password for security\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n        // Prepare and execute query to add user to database\n        $stmt = $conn->prepare('INSERT INTO users (username, email, password, firstname, lastname) VALUES (:username, :email, :password, :firstname, :lastname)');\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->bindParam(':firstname', $firstname);\n        $stmt->bindParam(':lastname', $lastname);\n        $stmt->execute();\n\n        // If query executes successfully, return user ID\n        return $conn->lastInsertId();\n    } catch (PDOException $e) {\n        throw new Exception(\"Database error: \" . $e->getMessage());\n    }\n}\n\n?>\n```", "```php\n// Assuming you're using this function in a larger script or application\n\ntry {\n    // Get input from form submission, for example\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n    $firstname = $_POST['firstname'];\n    $lastname = $_POST['lastname'];\n\n    // Call the function to register user\n    $newUserId = registerUser($username, $email, $password, $firstname, $lastname);\n\n    echo \"New user registered with ID: $newUserId\";\n} catch (Exception $e) {\n    echo \"Registration failed: \" . $e->getMessage();\n}\n```", null]}
