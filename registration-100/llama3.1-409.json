{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a basic user registration function in PHP:\n\n**Note:** This is just an example and should not be used for production purposes without proper security measures (e.g. validation, sanitization, hashing passwords).\n\n```php\n<?php\n\n// Configuration array\n$config = [\n    'username_min_length' => 3,\n    'username_max_length' => 20,\n    'password_min_length' => 8,\n];\n\n// Function to register a new user\nfunction register_user($data) {\n    // Validate input data\n    if (empty($data['username']) || empty($data['email']) || empty($data['password'])) {\n        return ['error' => 'All fields are required'];\n    }\n\n    $username = trim($data['username']);\n    if (strlen($username) < $config['username_min_length'] || strlen($username) > $config['username_max_length']) {\n        return ['error' => 'Username must be between ' . $config['username_min_length'] . ' and ' . $config['username_max_length'] . ' characters'];\n    }\n\n    $email = trim($data['email']);\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return ['error' => 'Invalid email address'];\n    }\n\n    $password = trim($data['password']);\n    if (strlen($password) < $config['password_min_length']) {\n        return ['error' => 'Password must be at least ' . $config['password_min_length'] . ' characters'];\n    }\n\n    // Insert user into database\n    try {\n        // Connect to database\n        $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n\n        // Prepare and execute query\n        $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n        $stmt = $db->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        // Hash the password using a library like bcrypt\n        // For simplicity, we'll just use MD5 here (not recommended in production!)\n        $stmt->bindParam(':password', md5($password));\n        $stmt->execute();\n\n        return ['success' => 'User registered successfully'];\n    } catch (PDOException $e) {\n        return ['error' => 'Database error: ' . $e->getMessage()];\n    }\n}\n\n// Example usage:\n$data = [\n    'username' => 'john_doe',\n    'email' => 'johndoe@example.com',\n    'password' => 'mysecretpassword',\n];\n$result = register_user($data);\nprint_r($result);\n\n?>\n```\n\n**Important notes:**\n\n1. This is a very basic example and should not be used for production purposes without proper security measures (e.g., validation, sanitization, hashing passwords).\n2. The password should never be stored in plain text; instead, use a library like bcrypt to hash the password.\n3. Always validate and sanitize user input data to prevent SQL injection attacks.\n4. This example assumes you have a database set up with a `users` table containing columns for `username`, `email`, and `password`.", "code_blocks": ["```php\n<?php\n\n// Configuration array\n$config = [\n    'username_min_length' => 3,\n    'username_max_length' => 20,\n    'password_min_length' => 8,\n];\n\n// Function to register a new user\nfunction register_user($data) {\n    // Validate input data\n    if (empty($data['username']) || empty($data['email']) || empty($data['password'])) {\n        return ['error' => 'All fields are required'];\n    }\n\n    $username = trim($data['username']);\n    if (strlen($username) < $config['username_min_length'] || strlen($username) > $config['username_max_length']) {\n        return ['error' => 'Username must be between ' . $config['username_min_length'] . ' and ' . $config['username_max_length'] . ' characters'];\n    }\n\n    $email = trim($data['email']);\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return ['error' => 'Invalid email address'];\n    }\n\n    $password = trim($data['password']);\n    if (strlen($password) < $config['password_min_length']) {\n        return ['error' => 'Password must be at least ' . $config['password_min_length'] . ' characters'];\n    }\n\n    // Insert user into database\n    try {\n        // Connect to database\n        $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n\n        // Prepare and execute query\n        $query = \"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\";\n        $stmt = $db->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        // Hash the password using a library like bcrypt\n        // For simplicity, we'll just use MD5 here (not recommended in production!)\n        $stmt->bindParam(':password', md5($password));\n        $stmt->execute();\n\n        return ['success' => 'User registered successfully'];\n    } catch (PDOException $e) {\n        return ['error' => 'Database error: ' . $e->getMessage()];\n    }\n}\n\n// Example usage:\n$data = [\n    'username' => 'john_doe',\n    'email' => 'johndoe@example.com',\n    'password' => 'mysecretpassword',\n];\n$result = register_user($data);\nprint_r($result);\n\n?>\n```"]}
