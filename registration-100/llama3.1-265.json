{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function will handle the creation of a new user account and insert it into a database.\n\n**Database Setup**\n\nFirst, you'll need to set up your database with a `users` table that has the following columns:\n\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255) NOT NULL,\n  email VARCHAR(255) NOT NULL,\n  password_hash VARCHAR(255) NOT NULL\n);\n```\n\n**PHP Registration Function**\n\n```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\nfunction registerUser($username, $email, $password) {\n  // Validate user input\n  if (empty($username) || empty($email) || empty($password)) {\n    return array('error' => 'Please fill in all fields');\n  }\n\n  // Hash password for security\n  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n  // Insert new user into database\n  $query = \"INSERT INTO users (username, email, password_hash) VALUES (:username, :email, :password)\";\n  try {\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashedPassword);\n    if ($stmt->execute()) {\n      return array('success' => 'User created successfully');\n    } else {\n      return array('error' => 'Failed to create user');\n    }\n  } catch (PDOException $e) {\n    return array('error' => 'Database error: ' . $e->getMessage());\n  }\n}\n\n?>\n```\n\n**Example Usage**\n\n```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($username, $email, $password);\nif ($result['success']) {\n  echo \"User created successfully!\";\n} elseif ($result['error']) {\n  echo \"Error: \" . $result['error'];\n}\n```\n\n**Security Notes**\n\n*   This example uses the `password_hash()` function to securely hash passwords. Make sure your PHP version is compatible (PHP 5.5 or later).\n*   Use prepared statements and parameterized queries to prevent SQL injection attacks.\n*   Always validate user input on the client-side and server-side.\n\n**Remember to replace `$pdo` with your actual PDO instance, and adjust the database configuration as needed.**", "code_blocks": [null, "```php\n<?php\n\n// Configuration\nrequire_once 'config.php';\n\nfunction registerUser($username, $email, $password) {\n  // Validate user input\n  if (empty($username) || empty($email) || empty($password)) {\n    return array('error' => 'Please fill in all fields');\n  }\n\n  // Hash password for security\n  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n  // Insert new user into database\n  $query = \"INSERT INTO users (username, email, password_hash) VALUES (:username, :email, :password)\";\n  try {\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashedPassword);\n    if ($stmt->execute()) {\n      return array('success' => 'User created successfully');\n    } else {\n      return array('error' => 'Failed to create user');\n    }\n  } catch (PDOException $e) {\n    return array('error' => 'Database error: ' . $e->getMessage());\n  }\n}\n\n?>\n```", "```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($username, $email, $password);\nif ($result['success']) {\n  echo \"User created successfully!\";\n} elseif ($result['error']) {\n  echo \"Error: \" . $result['error'];\n}\n```"]}
