{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP, including input validation and error handling.\n\n### User.php (Model)\n```php\nclass User {\n    private $username;\n    private $email;\n    private $password;\n\n    public function __construct($username, $email, $password) {\n        $this->username = $username;\n        $this->email = $email;\n        $this->password = $password;\n    }\n\n    public function getUsername() {\n        return $this->username;\n    }\n\n    public function getEmail() {\n        return $this->email;\n    }\n\n    public function getPassword() {\n        return $this->password;\n    }\n}\n```\n\n### registration.php (Controller)\n```php\nrequire_once 'User.php';\n\nfunction registerUser($username, $email, $password) {\n    // Input validation\n    if (empty($username) || empty($email) || empty($password)) {\n        throw new Exception('All fields are required.');\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email format.');\n    }\n\n    if (strlen($password) < 8) {\n        throw new Exception('Password must be at least 8 characters long.');\n    }\n\n    try {\n        // Attempt to create a user\n        $user = new User($username, $email, password_hash($password, PASSWORD_DEFAULT));\n        return $user;\n    } catch (Exception $e) {\n        throw new Exception('Error registering user: ' . $e->getMessage());\n    }\n}\n\ntry {\n    // Example usage:\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    $user = registerUser($username, $email, $password);\n\n    // Save the user to a database (example)\n    // ...\n} catch (Exception $e) {\n    echo 'Error: ' . $e->getMessage();\n}\n```\n\n### registration.html (View)\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Register</title>\n</head>\n<body>\n    <h1>Register</h1>\n    <form action=\"registration.php\" method=\"post\">\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n        <button type=\"submit\">Register</button>\n    </form>\n</body>\n</html>\n```\n\n**Notes:**\n\n* This example uses a simple `User` class to represent the registered user. You may want to add more properties or methods depending on your application's requirements.\n* The password is hashed using PHP's built-in `password_hash()` function, which provides secure password hashing.\n* Error handling and input validation are implemented in the `registerUser()` function.\n* In a real-world scenario, you would likely use a database library (e.g., PDO) to interact with your database instead of relying on string concatenation.", "code_blocks": ["```php\nclass User {\n    private $username;\n    private $email;\n    private $password;\n\n    public function __construct($username, $email, $password) {\n        $this->username = $username;\n        $this->email = $email;\n        $this->password = $password;\n    }\n\n    public function getUsername() {\n        return $this->username;\n    }\n\n    public function getEmail() {\n        return $this->email;\n    }\n\n    public function getPassword() {\n        return $this->password;\n    }\n}\n```", "```php\nrequire_once 'User.php';\n\nfunction registerUser($username, $email, $password) {\n    // Input validation\n    if (empty($username) || empty($email) || empty($password)) {\n        throw new Exception('All fields are required.');\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email format.');\n    }\n\n    if (strlen($password) < 8) {\n        throw new Exception('Password must be at least 8 characters long.');\n    }\n\n    try {\n        // Attempt to create a user\n        $user = new User($username, $email, password_hash($password, PASSWORD_DEFAULT));\n        return $user;\n    } catch (Exception $e) {\n        throw new Exception('Error registering user: ' . $e->getMessage());\n    }\n}\n\ntry {\n    // Example usage:\n    $username = $_POST['username'];\n    $email = $_POST['email'];\n    $password = $_POST['password'];\n\n    $user = registerUser($username, $email, $password);\n\n    // Save the user to a database (example)\n    // ...\n} catch (Exception $e) {\n    echo 'Error: ' . $e->getMessage();\n}\n```", null]}
