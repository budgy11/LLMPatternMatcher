{"prompt": "Create a user registration function using php", "llm_output": "Here is an example of a basic user registration function using PHP:\n\n**register.php**\n```php\n<?php\n\n// Configuration variables\n$database = 'users.db';\n$username = 'root';\n\n// Function to register new users\nfunction registerUser($name, $email, $password) {\n  // Check if email already exists in database\n  if (checkEmailExists($email)) {\n    echo \"Error: Email already exists\";\n    return false;\n  }\n\n  // Hash password for secure storage\n  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n  // Insert new user into database\n  try {\n    $conn = new PDO('sqlite:' . $database);\n    $stmt = $conn->prepare('INSERT INTO users (name, email, password) VALUES (:name, :email, :password)');\n    $stmt->bindParam(':name', $name);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashedPassword);\n    $stmt->execute();\n\n    echo \"User registered successfully!\";\n    return true;\n  } catch (PDOException $e) {\n    echo \"Error: \" . $e->getMessage();\n    return false;\n  }\n}\n\n// Function to check if email already exists in database\nfunction checkEmailExists($email) {\n  try {\n    $conn = new PDO('sqlite:' . $database);\n    $stmt = $conn->prepare('SELECT * FROM users WHERE email = :email');\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    if ($stmt->fetch()) {\n      return true;\n    }\n  } catch (PDOException $e) {\n    echo \"Error: \" . $e->getMessage();\n  }\n  return false;\n}\n\n// Main registration form\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  // Get user input\n  $name = $_POST['name'];\n  $email = $_POST['email'];\n  $password = $_POST['password'];\n\n  // Register new user\n  registerUser($name, $email, $password);\n}\n\n?>\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Register</title>\n</head>\n<body>\n  <h1>Register</h1>\n  <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n    <button type=\"submit\">Register</button>\n  </form>\n</body>\n</html>\n```\nThis script creates a basic user registration form with fields for name, email, and password. When the form is submitted, it calls the `registerUser` function to verify that the email does not already exist in the database and to insert the new user's data into the database.\n\n**Important notes:**\n\n1. This example uses SQLite as a lightweight database system for simplicity.\n2. Passwords are hashed using PHP's built-in `password_hash` function, which is recommended for secure password storage.\n3. Email validation is basic and does not check for email format or availability.\n4. Error handling is minimal; consider adding more robust error handling in a production environment.\n\nTo use this script, create a new file called `register.php`, copy the code into it, and upload it to your web server. Access the script through your web browser to register a new user.", "code_blocks": ["```php\n<?php\n\n// Configuration variables\n$database = 'users.db';\n$username = 'root';\n\n// Function to register new users\nfunction registerUser($name, $email, $password) {\n  // Check if email already exists in database\n  if (checkEmailExists($email)) {\n    echo \"Error: Email already exists\";\n    return false;\n  }\n\n  // Hash password for secure storage\n  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n  // Insert new user into database\n  try {\n    $conn = new PDO('sqlite:' . $database);\n    $stmt = $conn->prepare('INSERT INTO users (name, email, password) VALUES (:name, :email, :password)');\n    $stmt->bindParam(':name', $name);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $hashedPassword);\n    $stmt->execute();\n\n    echo \"User registered successfully!\";\n    return true;\n  } catch (PDOException $e) {\n    echo \"Error: \" . $e->getMessage();\n    return false;\n  }\n}\n\n// Function to check if email already exists in database\nfunction checkEmailExists($email) {\n  try {\n    $conn = new PDO('sqlite:' . $database);\n    $stmt = $conn->prepare('SELECT * FROM users WHERE email = :email');\n    $stmt->bindParam(':email', $email);\n    $stmt->execute();\n    if ($stmt->fetch()) {\n      return true;\n    }\n  } catch (PDOException $e) {\n    echo \"Error: \" . $e->getMessage();\n  }\n  return false;\n}\n\n// Main registration form\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  // Get user input\n  $name = $_POST['name'];\n  $email = $_POST['email'];\n  $password = $_POST['password'];\n\n  // Register new user\n  registerUser($name, $email, $password);\n}\n\n?>\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Register</title>\n</head>\n<body>\n  <h1>Register</h1>\n  <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n    <button type=\"submit\">Register</button>\n  </form>\n</body>\n</html>\n```"]}
