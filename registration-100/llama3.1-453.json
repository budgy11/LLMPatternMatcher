{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a user registration function in PHP that includes validation and encryption for the password.\n\n**`register.php`**\n```php\n<?php\n\nrequire 'config.php'; // Load database connection settings\n\nfunction registerUser($name, $email, $password) {\n  // Validate input data\n  if (empty($name) || empty($email) || empty($password)) {\n    return array('error' => 'All fields are required');\n  }\n\n  // Check for valid email address\n  if (!preg_match(\"/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\", $email)) {\n    return array('error' => 'Invalid email address');\n  }\n\n  // Encrypt password using SHA256 (not recommended for secure applications)\n  // For secure applications, use a library like PHPass or BCrypt\n  $password = sha1($password);\n\n  try {\n    // Connect to database\n    $conn = new PDO(\"mysql:host=$host;dbname=$db\", $username, $password);\n\n    // Prepare query\n    $stmt = $conn->prepare(\"INSERT INTO users (name, email, password) VALUES (:name, :email, :password)\");\n\n    // Bind parameters\n    $stmt->bindParam(':name', $name);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $password);\n\n    // Execute query\n    if ($stmt->execute()) {\n      return array('success' => 'User registered successfully');\n    } else {\n      return array('error' => 'Failed to register user');\n    }\n\n  } catch (PDOException $e) {\n    return array('error' => 'Database connection error: ' . $e->getMessage());\n  }\n}\n\n// Example usage:\n$name = $_POST['name'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($name, $email, $password);\n\necho json_encode($result);\n```\n**`config.php`**\n```php\n<?php\n\n$host = 'localhost';\n$db = 'mydatabase'; // Database name\n$username = 'myuser'; // Database username\n$password = 'mypassword'; // Database password\n```\nThis code defines a `registerUser` function that takes three arguments: `$name`, `$email`, and `$password`. It performs the following steps:\n\n1. Validates input data by checking for empty fields.\n2. Checks if the email address is valid using a regular expression.\n3. Encrypts the password using SHA256 (not recommended for secure applications).\n4. Connects to the database using PDO.\n5. Prepares an SQL query to insert the new user into the `users` table.\n6. Binds the input parameters to the prepared statement.\n7. Executes the query and returns a success or error message.\n\nYou can modify this code to suit your specific requirements, such as changing the encryption method or adding more validation rules.\n\n**Security Note:** This example uses SHA256 for password encryption, which is not recommended for secure applications. Consider using a library like PHPass or BCrypt for more secure password storage.", "code_blocks": ["```php\n<?php\n\nrequire 'config.php'; // Load database connection settings\n\nfunction registerUser($name, $email, $password) {\n  // Validate input data\n  if (empty($name) || empty($email) || empty($password)) {\n    return array('error' => 'All fields are required');\n  }\n\n  // Check for valid email address\n  if (!preg_match(\"/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\", $email)) {\n    return array('error' => 'Invalid email address');\n  }\n\n  // Encrypt password using SHA256 (not recommended for secure applications)\n  // For secure applications, use a library like PHPass or BCrypt\n  $password = sha1($password);\n\n  try {\n    // Connect to database\n    $conn = new PDO(\"mysql:host=$host;dbname=$db\", $username, $password);\n\n    // Prepare query\n    $stmt = $conn->prepare(\"INSERT INTO users (name, email, password) VALUES (:name, :email, :password)\");\n\n    // Bind parameters\n    $stmt->bindParam(':name', $name);\n    $stmt->bindParam(':email', $email);\n    $stmt->bindParam(':password', $password);\n\n    // Execute query\n    if ($stmt->execute()) {\n      return array('success' => 'User registered successfully');\n    } else {\n      return array('error' => 'Failed to register user');\n    }\n\n  } catch (PDOException $e) {\n    return array('error' => 'Database connection error: ' . $e->getMessage());\n  }\n}\n\n// Example usage:\n$name = $_POST['name'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($name, $email, $password);\n\necho json_encode($result);\n```", "```php\n<?php\n\n$host = 'localhost';\n$db = 'mydatabase'; // Database name\n$username = 'myuser'; // Database username\n$password = 'mypassword'; // Database password\n```"]}
