{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function will handle the registration process, including validating user input and storing it in a database.\n\n**Function Code:**\n```php\nfunction register_user($username, $email, $password) {\n    // Validate user input\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('error' => 'All fields are required');\n    }\n\n    // Hash password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Connect to database\n    require_once 'database.php';\n    $conn = new mysqli($servername, $username, $password, $dbname);\n\n    if ($conn->connect_error) {\n        return array('error' => 'Database connection failed');\n    }\n\n    // Prepare and execute INSERT query\n    $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\");\n    $stmt->bind_param(\"sss\", $username, $email, $hashed_password);\n    $result = $stmt->execute();\n\n    if (!$result) {\n        return array('error' => 'Database query failed');\n    }\n\n    // Close database connection\n    $conn->close();\n\n    // Return success message\n    return array('message' => 'User registered successfully');\n}\n```\n**Explanation:**\n\n* The function takes three parameters: `$username`, `$email`, and `$password`.\n* It first validates the user input by checking if all fields are not empty.\n* If validation fails, it returns an error message.\n* The password is then hashed using `password_hash()` function to store it securely in the database.\n* The function connects to a MySQL database using the provided credentials (you'll need to replace these with your own).\n* It prepares and executes an INSERT query to add the new user to the database.\n* If the query fails, it returns an error message. Otherwise, it closes the database connection and returns a success message.\n\n**Example Usage:**\n```php\n$username = 'john_doe';\n$email = 'johndoe@example.com';\n$password = 'password123';\n\n$result = register_user($username, $email, $password);\n\nif (isset($result['error'])) {\n    echo \"Error: \" . $result['error'];\n} else {\n    echo \"Success! User registered with ID: \" . $result['message'];\n}\n```\nNote that this is a basic example and you should modify it to fit your specific use case. Additionally, make sure to replace the database credentials with your own secure ones.", "code_blocks": ["```php\nfunction register_user($username, $email, $password) {\n    // Validate user input\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('error' => 'All fields are required');\n    }\n\n    // Hash password\n    $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n    // Connect to database\n    require_once 'database.php';\n    $conn = new mysqli($servername, $username, $password, $dbname);\n\n    if ($conn->connect_error) {\n        return array('error' => 'Database connection failed');\n    }\n\n    // Prepare and execute INSERT query\n    $stmt = $conn->prepare(\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\");\n    $stmt->bind_param(\"sss\", $username, $email, $hashed_password);\n    $result = $stmt->execute();\n\n    if (!$result) {\n        return array('error' => 'Database query failed');\n    }\n\n    // Close database connection\n    $conn->close();\n\n    // Return success message\n    return array('message' => 'User registered successfully');\n}\n```", "```php\n$username = 'john_doe';\n$email = 'johndoe@example.com';\n$password = 'password123';\n\n$result = register_user($username, $email, $password);\n\nif (isset($result['error'])) {\n    echo \"Error: \" . $result['error'];\n} else {\n    echo \"Success! User registered with ID: \" . $result['message'];\n}\n```"]}
