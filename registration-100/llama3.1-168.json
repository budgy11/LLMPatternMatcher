{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a simple user registration function in PHP:\n\n**`register.php`**\n```php\n<?php\n\n// Configuration settings\n$config = array(\n    'database' => array(\n        'host' => 'localhost',\n        'username' => 'your_username',\n        'password' => 'your_password',\n        'database' => 'your_database'\n    ),\n    'hash_salt' => 'your_hash_salt' // Keep this secret!\n);\n\n// Function to register a new user\nfunction registerUser($firstName, $lastName, $email, $password) {\n    global $config;\n\n    // Validate input data\n    if (empty($firstName) || empty($lastName) || empty($email) || empty($password)) {\n        return array('error' => 'Please fill in all fields');\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return array('error' => 'Invalid email address');\n    }\n\n    // Hash password\n    $hashedPassword = hash('sha256', $password . $config['hash_salt']);\n\n    try {\n        // Connect to database\n        $conn = new PDO('mysql:host=' . $config['database']['host'] . ';dbname=' . $config['database']['database'], $config['database']['username'], $config['database']['password']);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Prepare and execute query\n        $stmt = $conn->prepare('INSERT INTO users (first_name, last_name, email, password) VALUES (?, ?, ?, ?)');\n        $stmt->bindParam(1, $firstName);\n        $stmt->bindParam(2, $lastName);\n        $stmt->bindParam(3, $email);\n        $stmt->bindParam(4, $hashedPassword);\n        $stmt->execute();\n\n        // Close connection\n        $conn = null;\n\n        return array('success' => 'User registered successfully');\n    } catch (PDOException $e) {\n        return array('error' => 'Database error: ' . $e->getMessage());\n    }\n}\n\n// Call the function and print result\n$result = registerUser($_POST['firstName'], $_POST['lastName'], $_POST['email'], $_POST['password']);\n\nprint_r($result);\n\n?>\n```\n**`index.html` (example form)**\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>User Registration</title>\n</head>\n<body>\n\n<form action=\"register.php\" method=\"post\">\n    <label for=\"firstName\">First Name:</label>\n    <input type=\"text\" id=\"firstName\" name=\"firstName\"><br><br>\n    <label for=\"lastName\">Last Name:</label>\n    <input type=\"text\" id=\"lastName\" name=\"lastName\"><br><br>\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n    <input type=\"submit\" value=\"Register\">\n</form>\n\n</body>\n</html>\n```\n**Important notes:**\n\n* This is a basic example and does not include any error handling or validation beyond what's necessary to demonstrate the registration process.\n* In a real-world application, you should use prepared statements and parameterized queries to prevent SQL injection attacks.\n* You should also hash passwords using a more secure algorithm like bcrypt or PBKDF2.\n* This example uses `$_POST` variables directly, which is insecure. You should validate and sanitize user input data before processing it.\n\nThis code creates a simple registration form that sends the input data to the `register.php` script, which validates the input, hashes the password, and inserts the new user into the database using a prepared statement. If the operation is successful, it returns a success message; otherwise, an error message is returned with details about what went wrong.", "code_blocks": ["```php\n<?php\n\n// Configuration settings\n$config = array(\n    'database' => array(\n        'host' => 'localhost',\n        'username' => 'your_username',\n        'password' => 'your_password',\n        'database' => 'your_database'\n    ),\n    'hash_salt' => 'your_hash_salt' // Keep this secret!\n);\n\n// Function to register a new user\nfunction registerUser($firstName, $lastName, $email, $password) {\n    global $config;\n\n    // Validate input data\n    if (empty($firstName) || empty($lastName) || empty($email) || empty($password)) {\n        return array('error' => 'Please fill in all fields');\n    }\n\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        return array('error' => 'Invalid email address');\n    }\n\n    // Hash password\n    $hashedPassword = hash('sha256', $password . $config['hash_salt']);\n\n    try {\n        // Connect to database\n        $conn = new PDO('mysql:host=' . $config['database']['host'] . ';dbname=' . $config['database']['database'], $config['database']['username'], $config['database']['password']);\n        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        // Prepare and execute query\n        $stmt = $conn->prepare('INSERT INTO users (first_name, last_name, email, password) VALUES (?, ?, ?, ?)');\n        $stmt->bindParam(1, $firstName);\n        $stmt->bindParam(2, $lastName);\n        $stmt->bindParam(3, $email);\n        $stmt->bindParam(4, $hashedPassword);\n        $stmt->execute();\n\n        // Close connection\n        $conn = null;\n\n        return array('success' => 'User registered successfully');\n    } catch (PDOException $e) {\n        return array('error' => 'Database error: ' . $e->getMessage());\n    }\n}\n\n// Call the function and print result\n$result = registerUser($_POST['firstName'], $_POST['lastName'], $_POST['email'], $_POST['password']);\n\nprint_r($result);\n\n?>\n```", null]}
