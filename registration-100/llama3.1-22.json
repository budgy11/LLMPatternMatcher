{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nThis code provides a basic user registration function that verifies user input, checks for duplicate usernames and emails, and stores the registered users in an array. For security reasons, we'll be using prepared statements to prevent SQL injection attacks.\n\n**db_connection.php**\n```php\n<?php\n  $servername = \"localhost\";\n  $username = \"root\";\n  $password = \"\";\n  $dbname = \"users\";\n\n  try {\n    $conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n    // set the PDO error mode to exception\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  } catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n  }\n\n  function prepare_query($query, $params = array()) {\n    global $conn;\n    return $conn->prepare($query);\n  }\n?>\n```\n\n**register_user.php**\n```php\n<?php\nrequire_once 'db_connection.php';\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  // Get the user input\n  $username = $_POST['username'];\n  $email = $_POST['email'];\n  $password = $_POST['password'];\n\n  // Validate the user input\n  if (empty($username) || empty($email) || empty($password)) {\n    echo \"Please fill in all fields\";\n  } else {\n    try {\n      // Check for duplicate usernames and emails\n      $stmt = prepare_query(\"SELECT * FROM users WHERE username = ? OR email = ?\");\n      $stmt->execute(array($username, $email));\n      $count = $stmt->rowCount();\n      if ($count > 0) {\n        echo \"Username or Email already exists\";\n      } else {\n        // Hash the password\n        $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n        // Insert the new user into the database\n        $stmt = prepare_query(\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\");\n        $stmt->execute(array($username, $email, $hashed_password));\n        echo \"User registered successfully\";\n      }\n    } catch (PDOException $e) {\n      echo \"Error registering user: \" . $e->getMessage();\n    }\n  }\n} else {\n  // Display the registration form\n?>\n<form action=\"\" method=\"post\">\n  <label>Username:</label>\n  <input type=\"text\" name=\"username\"><br><br>\n  <label>Email:</label>\n  <input type=\"email\" name=\"email\"><br><br>\n  <label>Password:</label>\n  <input type=\"password\" name=\"password\"><br><br>\n  <input type=\"submit\" value=\"Register\">\n</form>\n<?php\n}\n?>\n```\n\n**Usage:**\n\n1. Create a new database named \"users\".\n2. Create a table named \"users\" with the following columns:\n\t* id (primary key)\n\t* username\n\t* email\n\t* password (hashed using `password_hash`)\n3. Modify the `db_connection.php` file to connect to your database.\n4. Include the `register_user.php` file in your HTML page.\n5. Fill out the registration form and submit it.\n\nNote: This code uses prepared statements for security, but you should still validate user input on the server-side to prevent SQL injection attacks.", "code_blocks": ["```php\n<?php\n  $servername = \"localhost\";\n  $username = \"root\";\n  $password = \"\";\n  $dbname = \"users\";\n\n  try {\n    $conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n    // set the PDO error mode to exception\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  } catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n  }\n\n  function prepare_query($query, $params = array()) {\n    global $conn;\n    return $conn->prepare($query);\n  }\n?>\n```", "```php\n<?php\nrequire_once 'db_connection.php';\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  // Get the user input\n  $username = $_POST['username'];\n  $email = $_POST['email'];\n  $password = $_POST['password'];\n\n  // Validate the user input\n  if (empty($username) || empty($email) || empty($password)) {\n    echo \"Please fill in all fields\";\n  } else {\n    try {\n      // Check for duplicate usernames and emails\n      $stmt = prepare_query(\"SELECT * FROM users WHERE username = ? OR email = ?\");\n      $stmt->execute(array($username, $email));\n      $count = $stmt->rowCount();\n      if ($count > 0) {\n        echo \"Username or Email already exists\";\n      } else {\n        // Hash the password\n        $hashed_password = password_hash($password, PASSWORD_DEFAULT);\n\n        // Insert the new user into the database\n        $stmt = prepare_query(\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\");\n        $stmt->execute(array($username, $email, $hashed_password));\n        echo \"User registered successfully\";\n      }\n    } catch (PDOException $e) {\n      echo \"Error registering user: \" . $e->getMessage();\n    }\n  }\n} else {\n  // Display the registration form\n?>\n<form action=\"\" method=\"post\">\n  <label>Username:</label>\n  <input type=\"text\" name=\"username\"><br><br>\n  <label>Email:</label>\n  <input type=\"email\" name=\"email\"><br><br>\n  <label>Password:</label>\n  <input type=\"password\" name=\"password\"><br><br>\n  <input type=\"submit\" value=\"Register\">\n</form>\n<?php\n}\n?>\n```"]}
