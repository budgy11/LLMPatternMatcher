{"prompt": "Create a user registration function using php", "llm_output": "Here's an example of a simple user registration function in PHP. This example includes basic validation for the input fields, such as ensuring that passwords match and that both username and email are unique.\n\nFirstly, let's assume we have a database table named `users` with columns `username`, `email`, and `password` (hashed for security). You will need to replace this with your actual database connection setup. \n\n```php\n<?php\n\n// Database credentials\n$host = 'localhost';\n$dbname = 'yourdatabase';\n$username = 'yourusername';\n$password = 'yourpassword';\n\n// Connect to the database\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\nfunction registerUser($username, $email, $password1, $password2)\n{\n    // Validate inputs\n    if ($password1 !== $password2) {\n        return array(false, 'Passwords do not match');\n    }\n\n    try {\n        $query = \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\";\n        $stmt = $conn->prepare($query);\n        $hashedPassword = password_hash($password1, PASSWORD_DEFAULT); // Hash the password\n        $stmt->execute([$username, $email, $hashedPassword]);\n        \n        return array(true, 'User registered successfully');\n    } catch (PDOException $e) {\n        if ($e->getCode() === '23000') { // Duplicate entry for email or username\n            return array(false, 'Username or Email already exists');\n        }\n        echo \"Error: \" . $e->getMessage();\n        return array(false, 'Registration failed');\n    } finally {\n        unset($conn);\n    }\n}\n\n// Example usage:\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password1 = $_POST['password1'];\n$password2 = $_POST['password2'];\n\n$result = registerUser($username, $email, $password1, $password2);\n\nif ($result[0]) {\n    echo 'Registration successful';\n} else {\n    echo 'Error: ' . $result[1];\n}\n\n?>\n```\n\nThis example covers the following:\n\n- It securely connects to a MySQL database.\n- It registers new users by inserting them into the `users` table with hashed passwords for security.\n- It validates inputs (passwords match and checks for unique username and email).\n- Finally, it includes basic error handling.\n\nYou will need to adapt this example according to your specific database setup. Ensure you use prepared statements or parameterized queries to prevent SQL injection attacks.", "code_blocks": ["```php\n<?php\n\n// Database credentials\n$host = 'localhost';\n$dbname = 'yourdatabase';\n$username = 'yourusername';\n$password = 'yourpassword';\n\n// Connect to the database\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n} catch (PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\nfunction registerUser($username, $email, $password1, $password2)\n{\n    // Validate inputs\n    if ($password1 !== $password2) {\n        return array(false, 'Passwords do not match');\n    }\n\n    try {\n        $query = \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\";\n        $stmt = $conn->prepare($query);\n        $hashedPassword = password_hash($password1, PASSWORD_DEFAULT); // Hash the password\n        $stmt->execute([$username, $email, $hashedPassword]);\n        \n        return array(true, 'User registered successfully');\n    } catch (PDOException $e) {\n        if ($e->getCode() === '23000') { // Duplicate entry for email or username\n            return array(false, 'Username or Email already exists');\n        }\n        echo \"Error: \" . $e->getMessage();\n        return array(false, 'Registration failed');\n    } finally {\n        unset($conn);\n    }\n}\n\n// Example usage:\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password1 = $_POST['password1'];\n$password2 = $_POST['password2'];\n\n$result = registerUser($username, $email, $password1, $password2);\n\nif ($result[0]) {\n    echo 'Registration successful';\n} else {\n    echo 'Error: ' . $result[1];\n}\n\n?>\n```"]}
