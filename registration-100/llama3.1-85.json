{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nThe following is an example of a user registration function written in PHP. This function will take input from the user, validate their data, and store it in a database.\n\n### Database Setup\n\nFirstly, we need to set up our database with the required tables. For this example, let's assume we have two tables: `users` and `roles`.\n\n**users table**\n\n| Field Name | Data Type |\n| --- | --- |\n| id | int (primary key) |\n| username | varchar(255) |\n| password | varchar(255) |\n| role_id | int |\n\n**roles table**\n\n| Field Name | Data Type |\n| --- | --- |\n| id | int (primary key) |\n| name | varchar(255) |\n\n### PHP Code\n\n```php\n<?php\n\n// Configuration file for database connection\nrequire_once 'config.php';\n\nfunction registerUser($username, $email, $password, $role_id) {\n    // Validate input data\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address');\n    }\n    \n    try {\n        // Prepare SQL query to insert user into database\n        $query = \"\n            INSERT INTO users (username, email, password, role_id)\n            VALUES (:username, :email, :password, :role_id)\n        \";\n        \n        // Prepare PDO statement with parameters\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $password);\n        $stmt->bindParam(':role_id', $role_id);\n        \n        // Execute query and commit changes\n        if ($stmt->execute()) {\n            return true;\n        } else {\n            throw new Exception('Error registering user');\n        }\n    } catch (PDOException $e) {\n        echo 'Database error: ' . $e->getMessage();\n        return false;\n    } catch (Exception $e) {\n        echo 'Error registering user: ' . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    try {\n        $username = $_POST['username'];\n        $email = $_POST['email'];\n        $password = $_POST['password'];\n        $role_id = (int) $_POST['role_id']; // Convert to integer\n        \n        if ($username && $email && $password && $role_id) {\n            $registered = registerUser($username, $email, password_hash($password, PASSWORD_DEFAULT), $role_id);\n            \n            if ($registered) {\n                echo 'User registered successfully!';\n            } else {\n                echo 'Error registering user. Please try again.';\n            }\n        } else {\n            echo 'Please fill out all fields';\n        }\n    } catch (Exception $e) {\n        echo 'An error occurred: ' . $e->getMessage();\n    }\n}\n\n?>\n```\n\n### Notes\n\n1. This code uses the PDO extension for database interactions, which provides a safer and more efficient way to execute SQL queries.\n2. The `password_hash` function is used to securely store passwords in the database. It's recommended to use a strong hashing algorithm like bcrypt or Argon2.\n3. Error handling is implemented using try-catch blocks to catch any exceptions that may occur during execution.\n4. This code assumes you have already set up your database configuration and connected to it successfully.\n\nRemember to modify this code according to your specific requirements and security considerations. Always prioritize user security when handling sensitive information like passwords.", "code_blocks": ["```php\n<?php\n\n// Configuration file for database connection\nrequire_once 'config.php';\n\nfunction registerUser($username, $email, $password, $role_id) {\n    // Validate input data\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address');\n    }\n    \n    try {\n        // Prepare SQL query to insert user into database\n        $query = \"\n            INSERT INTO users (username, email, password, role_id)\n            VALUES (:username, :email, :password, :role_id)\n        \";\n        \n        // Prepare PDO statement with parameters\n        $stmt = $pdo->prepare($query);\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $password);\n        $stmt->bindParam(':role_id', $role_id);\n        \n        // Execute query and commit changes\n        if ($stmt->execute()) {\n            return true;\n        } else {\n            throw new Exception('Error registering user');\n        }\n    } catch (PDOException $e) {\n        echo 'Database error: ' . $e->getMessage();\n        return false;\n    } catch (Exception $e) {\n        echo 'Error registering user: ' . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage:\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    try {\n        $username = $_POST['username'];\n        $email = $_POST['email'];\n        $password = $_POST['password'];\n        $role_id = (int) $_POST['role_id']; // Convert to integer\n        \n        if ($username && $email && $password && $role_id) {\n            $registered = registerUser($username, $email, password_hash($password, PASSWORD_DEFAULT), $role_id);\n            \n            if ($registered) {\n                echo 'User registered successfully!';\n            } else {\n                echo 'Error registering user. Please try again.';\n            }\n        } else {\n            echo 'Please fill out all fields';\n        }\n    } catch (Exception $e) {\n        echo 'An error occurred: ' . $e->getMessage();\n    }\n}\n\n?>\n```"]}
