{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nBelow is an example of a user registration function written in PHP. This function will validate user input, hash passwords, and store user data in a database.\n\n### Dependencies\n\n*   PHP 7.x\n*   PDO (PHP Data Objects) for database interactions\n*   A MySQL database with the following schema:\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(255),\n    email VARCHAR(255) UNIQUE,\n    password VARCHAR(255)\n);\n```\n\n### User Registration Function\n\n```php\n// config.php (database configuration file)\n$pdo = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');\n\nfunction registerUser($username, $email, $password) {\n    // Validate input data\n    if (empty($username) || empty($email) || empty($password)) {\n        throw new Exception(\"All fields are required.\");\n    }\n\n    try {\n        // Check for duplicate email\n        $stmt = $pdo->prepare(\"SELECT * FROM users WHERE email = ?\");\n        $stmt->execute([$email]);\n        if ($stmt->fetch()) {\n            throw new Exception(\"Email already in use.\");\n        }\n    } catch (PDOException $e) {\n        throw new Exception(\"Database error: \" . $e->getMessage());\n    }\n\n    // Hash password\n    $passwordHash = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n        // Insert user data into database\n        $stmt = $pdo->prepare(\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\");\n        $stmt->execute([$username, $email, $passwordHash]);\n    } catch (PDOException $e) {\n        throw new Exception(\"Database error: \" . $e->getMessage());\n    }\n\n    return true;\n}\n```\n\n### Example Usage\n\n```php\ntry {\n    registerUser('john_doe', 'johndoe@example.com', 'password123');\n    echo \"User registered successfully.\";\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n```\n\n**Security Considerations:**\n\n*   Always validate user input data.\n*   Use a secure password hashing algorithm like `PASSWORD_DEFAULT` or `bcrypt`.\n*   Store hashed passwords in the database to prevent plaintext password storage.\n\n**Advice:**\n\n*   Implement additional validation and security measures, such as email verification and password strength checks.\n*   Regularly update PHP and dependencies to ensure you're using the latest security patches.", "code_blocks": [null, "```php\n// config.php (database configuration file)\n$pdo = new PDO('mysql:host=localhost;dbname=database_name', 'username', 'password');\n\nfunction registerUser($username, $email, $password) {\n    // Validate input data\n    if (empty($username) || empty($email) || empty($password)) {\n        throw new Exception(\"All fields are required.\");\n    }\n\n    try {\n        // Check for duplicate email\n        $stmt = $pdo->prepare(\"SELECT * FROM users WHERE email = ?\");\n        $stmt->execute([$email]);\n        if ($stmt->fetch()) {\n            throw new Exception(\"Email already in use.\");\n        }\n    } catch (PDOException $e) {\n        throw new Exception(\"Database error: \" . $e->getMessage());\n    }\n\n    // Hash password\n    $passwordHash = password_hash($password, PASSWORD_DEFAULT);\n\n    try {\n        // Insert user data into database\n        $stmt = $pdo->prepare(\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\");\n        $stmt->execute([$username, $email, $passwordHash]);\n    } catch (PDOException $e) {\n        throw new Exception(\"Database error: \" . $e->getMessage());\n    }\n\n    return true;\n}\n```", "```php\ntry {\n    registerUser('john_doe', 'johndoe@example.com', 'password123');\n    echo \"User registered successfully.\";\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n```"]}
