{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nThis example demonstrates a basic user registration system using PHP. The system includes functions for validating user input, hashing passwords, and storing users in a database.\n\n**Database Schema**\n------------------\n\nFor this example, we'll assume a simple database schema with the following tables:\n\n*   `users`: stores user information\n*   `passwords`: stores hashed user passwords\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(50) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE passwords (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    user_id INT NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n\n**User Registration Function**\n-----------------------------\n\nThe following function handles user registration, including input validation and password hashing.\n\n```php\n// Include the database connection file\nrequire_once 'db.php';\n\nfunction registerUser($username, $email, $password) {\n    // Validate user input\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('success' => false, 'message' => 'Please fill in all fields.');\n    }\n\n    // Check for duplicate usernames and emails\n    if ($this->checkDuplicateUsername($username) || $this->checkDuplicateEmail($email)) {\n        return array('success' => false, 'message' => 'Username or email already taken.');\n    }\n\n    // Hash the password\n    $passwordHash = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    $query = \"INSERT INTO users (username, email) VALUES (:username, :email)\";\n    $stmt = $this->db->prepare($query);\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    if ($stmt->execute()) {\n        // Insert password hash into database\n        $query = \"INSERT INTO passwords (user_id, password_hash) VALUES (:userId, :passwordHash)\";\n        $stmt = $this->db->prepare($query);\n        $stmt->bindParam(':userId', $this->db->lastInsertId());\n        $stmt->bindParam(':passwordHash', $passwordHash);\n        if ($stmt->execute()) {\n            return array('success' => true, 'message' => 'User created successfully.');\n        } else {\n            return array('success' => false, 'message' => 'Failed to create user.');\n        }\n    } else {\n        return array('success' => false, 'message' => 'Failed to create user.');\n    }\n}\n```\n\n**Example Usage**\n-----------------\n\nTo use this function, you can call it from your PHP script with the required parameters.\n\n```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($username, $email, $password);\necho json_encode($result);\n```\n\nRemember to replace `$_POST` with the correct method of receiving form data (e.g., `$_GET`, `$_REQUEST`, etc.).\n\nNote: This example uses a simplified database schema and does not include error handling or security measures like email verification or password reset functionality. You should adapt this code to fit your specific requirements and ensure it follows best practices for secure coding.", "code_blocks": [null, "```php\n// Include the database connection file\nrequire_once 'db.php';\n\nfunction registerUser($username, $email, $password) {\n    // Validate user input\n    if (empty($username) || empty($email) || empty($password)) {\n        return array('success' => false, 'message' => 'Please fill in all fields.');\n    }\n\n    // Check for duplicate usernames and emails\n    if ($this->checkDuplicateUsername($username) || $this->checkDuplicateEmail($email)) {\n        return array('success' => false, 'message' => 'Username or email already taken.');\n    }\n\n    // Hash the password\n    $passwordHash = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    $query = \"INSERT INTO users (username, email) VALUES (:username, :email)\";\n    $stmt = $this->db->prepare($query);\n    $stmt->bindParam(':username', $username);\n    $stmt->bindParam(':email', $email);\n    if ($stmt->execute()) {\n        // Insert password hash into database\n        $query = \"INSERT INTO passwords (user_id, password_hash) VALUES (:userId, :passwordHash)\";\n        $stmt = $this->db->prepare($query);\n        $stmt->bindParam(':userId', $this->db->lastInsertId());\n        $stmt->bindParam(':passwordHash', $passwordHash);\n        if ($stmt->execute()) {\n            return array('success' => true, 'message' => 'User created successfully.');\n        } else {\n            return array('success' => false, 'message' => 'Failed to create user.');\n        }\n    } else {\n        return array('success' => false, 'message' => 'Failed to create user.');\n    }\n}\n```", "```php\n$username = $_POST['username'];\n$email = $_POST['email'];\n$password = $_POST['password'];\n\n$result = registerUser($username, $email, $password);\necho json_encode($result);\n```"]}
