{"prompt": "Create a user registration function using php", "llm_output": "**User Registration Function in PHP**\n=====================================\n\nHere's an example of a simple user registration function written in PHP. This function will handle form validation, password hashing, and database insertion.\n\n### Database Setup\n\nFirst, create a MySQL database with the following schema:\n\n```sql\nCREATE TABLE users (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL UNIQUE,\n  email VARCHAR(100) NOT NULL UNIQUE,\n  password VARCHAR(255) NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### PHP Function\n\nCreate a new file called `register.php` and add the following code:\n\n```php\n<?php\n\n// Define database connection parameters\n$host = 'your_host';\n$dbname = 'your_database';\n$user = 'your_username';\n$password = 'your_password';\n\n// Connect to database\ntry {\n    $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $password);\n} catch (PDOException $e) {\n    echo \"Error connecting to database: \" . $e->getMessage();\n    exit;\n}\n\n// Define registration function\nfunction register($username, $email, $password) {\n    // Validate form data\n    if (empty($username) || empty($email) || empty($password)) {\n        throw new Exception('All fields are required.');\n    }\n    if (!preg_match('/^[a-zA-Z0-9]+$/', $username)) {\n        throw new Exception('Username can only contain letters and numbers.');\n    }\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address.');\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    try {\n        $stmt = $pdo->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n        return true;\n    } catch (PDOException $e) {\n        echo \"Error inserting user: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage\ntry {\n    register($_POST['username'], $_POST['email'], $_POST['password']);\n} catch (Exception $e) {\n    echo 'Registration failed: ' . $e->getMessage();\n}\n\n?>\n```\n\n### Form Example\n\nCreate a simple form in `register.html`:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Register</title>\n</head>\n<body>\n    <form action=\"register.php\" method=\"post\">\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n        <input type=\"submit\" value=\"Register\">\n    </form>\n</body>\n</html>\n```\n\nNote: This is a simplified example. In a real-world application, you should consider using prepared statements with parameterized queries to prevent SQL injection attacks. Additionally, password hashing and verification should be implemented securely.", "code_blocks": [null, "```php\n<?php\n\n// Define database connection parameters\n$host = 'your_host';\n$dbname = 'your_database';\n$user = 'your_username';\n$password = 'your_password';\n\n// Connect to database\ntry {\n    $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $password);\n} catch (PDOException $e) {\n    echo \"Error connecting to database: \" . $e->getMessage();\n    exit;\n}\n\n// Define registration function\nfunction register($username, $email, $password) {\n    // Validate form data\n    if (empty($username) || empty($email) || empty($password)) {\n        throw new Exception('All fields are required.');\n    }\n    if (!preg_match('/^[a-zA-Z0-9]+$/', $username)) {\n        throw new Exception('Username can only contain letters and numbers.');\n    }\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n        throw new Exception('Invalid email address.');\n    }\n\n    // Hash password\n    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n\n    // Insert user into database\n    try {\n        $stmt = $pdo->prepare(\"INSERT INTO users (username, email, password) VALUES (:username, :email, :password)\");\n        $stmt->bindParam(':username', $username);\n        $stmt->bindParam(':email', $email);\n        $stmt->bindParam(':password', $hashedPassword);\n        $stmt->execute();\n        return true;\n    } catch (PDOException $e) {\n        echo \"Error inserting user: \" . $e->getMessage();\n        return false;\n    }\n}\n\n// Example usage\ntry {\n    register($_POST['username'], $_POST['email'], $_POST['password']);\n} catch (Exception $e) {\n    echo 'Registration failed: ' . $e->getMessage();\n}\n\n?>\n```", null]}
