{"prompt": "Create a purchase cart functionality using php", "llm_output": "```php\n<?php\nsession_start();\n\n// Database connection details (replace with your actual details)\n$db_host = \"localhost\";\n$db_user = \"your_username\";\n$db_password = \"your_password\";\n$db_name = \"your_database\";\n\n// Function to connect to the database\nfunction connectToDatabase() {\n  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  return $conn;\n}\n\n// Function to sanitize input (prevent SQL injection)\nfunction sanitizeInput($data) {\n  global $conn; // Access the database connection\n  return mysqli_real_escape_string($conn, $data);\n}\n\n// ---------------------- Cart Functions ----------------------\n\n// Add item to cart\nfunction addToCart($product_id, $quantity) {\n  global $conn;\n\n  $product_id = sanitizeInput($product_id);\n  $quantity = sanitizeInput($quantity);\n\n  // Check if the product exists in the cart\n  $cart_key = \"cart_\" . session_id();\n\n  if (!isset($_SESSION[$cart_key])) {\n    // If not, initialize the cart array\n    $_SESSION[$cart_key] = [];\n  }\n\n  // Check if the product is already in the cart\n  if (isset($_SESSION[$cart_key][$product_id])) {\n    // Increment quantity\n    $_SESSION[$cart_key][$product_id]['quantity'] += $quantity;\n  } else {\n    // Add new product to cart\n    $_SESSION[$cart_key][$product_id] = [\n      'quantity' => $quantity,\n      'price' => getProductPrice($product_id) // Get product price\n    ];\n  }\n}\n\n// Get cart total\nfunction getCartTotal($cart_key) {\n  $total = 0;\n  if (isset($_SESSION[$cart_key])) {\n    foreach ($_SESSION[$cart_key] as $item) {\n      $total += $item['price'] * $item['quantity'];\n    }\n  }\n  return round($total, 2);\n}\n\n// Remove item from cart\nfunction removeFromCart($product_id) {\n    global $conn;\n    $product_id = sanitizeInput($product_id);\n\n    $cart_key = \"cart_\" . session_id();\n\n    if (isset($_SESSION[$cart_key][$product_id])) {\n        unset($_SESSION[$cart_key][$product_id]);\n    }\n}\n\n\n// Get cart contents\nfunction getCartContents($cart_key) {\n  return $_SESSION[$cart_key] ?? []; // Return empty array if cart doesn't exist\n}\n\n\n// ----------------------  Product Data (For Demo) ----------------------\n// Replace this with your actual database query to fetch products\n\n$products = [\n  1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],\n  2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],\n  3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],\n];\n\n\n// Helper function to get product price (for demonstration)\nfunction getProductPrice($product_id) {\n  global $products;\n  return $products[$product_id]['price'];\n}\n\n// ----------------------  Shopping Cart Handling ----------------------\n\n// Initialize the shopping cart session\nif (!isset($_SESSION[\"cart_\"])){\n  session_start(); // start session\n}\n\n// Handle adding to cart (e.g., from a form submission)\nif (isset($_POST['add_to_cart'])) {\n  $product_id = $_POST['product_id'];\n  $quantity = $_POST['quantity'];\n  addToCart($product_id, $quantity);\n}\n\n// Handle removing from cart (e.g., from a form submission)\nif (isset($_POST['remove_from_cart'])) {\n    $product_id = $_POST['product_id'];\n    removeFromCart($product_id);\n}\n\n// ---------------------- Displaying the Cart ----------------------\n\n// Get cart contents\n$cartContents = getCartContents(\"cart_\" . session_id());\n\n$cartTotal = getCartTotal(\"cart_\" . session_id());\n\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Shopping Cart</title>\n  <style>\n    .cart-item {\n      margin-bottom: 10px;\n    }\n  </style>\n</head>\n<body>\n\n  <h1>Shopping Cart</h1>\n\n  <?php if (empty($cartContents)): ?>\n    <p>Your cart is empty.</p>\n  <?php else: ?>\n    <table border=\"1\">\n      <thead>\n        <tr>\n          <th>Product</th>\n          <th>Quantity</th>\n          <th>Price</th>\n          <th>Total</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        <?php\n        foreach ($cartContents as $product_id => $item) {\n          ?>\n          <tr class=\"cart-item\">\n            <td><?php echo $products[$product_id]['name']; ?></td>\n            <td><?php echo $item['quantity']; ?></td>\n            <td><?php echo $item['price']; ?></td>\n            <td><?php echo $item['price'] * $item['quantity']; ?></td>\n            <td>\n              <form method=\"post\">\n                <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product_id; ?>\">\n                <input type=\"submit\" name=\"remove_from_cart\" value=\"Remove\" style=\"background-color: red;\">\n              </form>\n            </td>\n          </tr>\n        <?php } ?>\n      </tbody>\n    </table>\n    <p>Total: <?php echo $cartTotal; ?></p>\n  <?php endif; ?>\n\n  <hr>\n\n  <h2>Add Items</h2>\n  <form method=\"post\">\n    <?php\n    foreach ($products as $product_id => $product) {\n      ?>\n      <div>\n        <label for=\"product_id_<?php echo $product_id; ?>\">Product: <?php echo $product['name']; ?></label>\n        <input type=\"hidden\" id=\"product_id_<?php echo $product_id; ?>\" name=\"product_id\" value=\"<?php echo $product_id; ?>\">\n        <label for=\"quantity_<?php echo $product_id; ?>\">Quantity:</label>\n        <input type=\"number\" id=\"quantity_<?php echo $product_id; ?>\" name=\"quantity\" value=\"1\" min=\"1\">\n        <input type=\"submit\" name=\"add_to_cart\" value=\"Add to Cart\">\n      </div>\n    <?php } ?>\n  </form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Session Management:**  Properly uses `session_start()` to maintain cart state across multiple pages.  The `cart_` prefix is crucial to prevent session collision.\n* **Database Connection:**  Includes a connection function and placeholders for your database credentials.  *Replace the placeholder values with your actual database details.*\n* **Input Sanitization:**  Uses `mysqli_real_escape_string()` to prevent SQL injection vulnerabilities.  This is *essential* for any user-supplied input.\n* **Clearer Function Structure:**  Separates cart operations into well-defined functions ( `addToCart`, `getCartTotal`, `removeFromCart`, `getCartContents`).  This improves code organization and readability.\n* **`getCartContents()` and `getCartTotal()`:**  These functions encapsulate the logic for accessing and calculating the cart total.  The `getCartContents()` function has an important addition: it uses the null coalescing operator (`?? []`) to return an empty array if the cart doesn't exist yet. This prevents errors when the cart is initially empty.\n* **Error Handling:** Basic connection error checking. You should expand this for a production environment.\n* **Clear Display:**  The HTML generates a table to display the cart contents and the total.\n* **Form Handling:** The form is properly set up to submit data to the same PHP file using `method=\"post\"`.\n* **`sanitizeInput` function:** Includes the `sanitizeInput` function for all user inputs to protect against SQL injection.\n* **`getProductPrice()` helper function:** Uses the product id to get the price from the products array for a simple example.\n\n**How to Use:**\n\n1. **Database Setup:**\n   - Create a MySQL database.\n   - Create a table (e.g., `products`) with columns like `id`, `name`, and `price`.\n   - Insert your product data into the table.\n\n2. **Replace Placeholders:**\n   - Update the `$db_host`, `$db_user`, `$db_password`, and `$db_name` variables with your actual database credentials.\n   - Modify the `products` array with your actual product data.\n\n3. **Run the Code:**\n   - Save the code as a `.php` file (e.g., `shopping_cart.php`).\n   - Place it in your web server's document root.\n   - Access it through your web browser (e.g., `http://localhost/shopping_cart.php`).\n\n**Important Considerations for Production:**\n\n* **Error Handling:** Implement robust error handling to catch and display errors gracefully. Use `try...catch` blocks for database errors.\n* **Security:**  Beyond SQL injection prevention, consider:\n    * **CSRF Protection:**  Implement Cross-Site Request Forgery (CSRF) protection to prevent malicious websites from making unauthorized requests to your site.\n    * **HTTPS:**  Always use HTTPS to encrypt communication between the browser and your server.\n    * **Input Validation:**  Validate all user inputs to ensure they are of the expected format and range.\n* **Database Connection Pooling:**  For improved performance, use database connection pooling.\n* **Caching:** Cache frequently accessed data (e.g., product information) to reduce database load.\n* **Session Management:** Implement a more secure session management system (e.g., using PHP's `session_regenerate_id()` function periodically).\n* **User Interface:**  Create a more user-friendly and visually appealing shopping cart interface.\n* **Payment Integration:** Integrate a payment gateway (e.g., PayPal, Stripe) to allow users to pay for their purchases.\n* **Testing:** Thoroughly test your shopping cart functionality, including edge cases and error conditions.\n* **Scalability:**  If you expect a high volume of traffic, consider using a scalable architecture (e.g., load balancing, caching, database optimization).\n* **Code Comments:** Add comprehensive comments to explain the code.\n* **Separate files:** Break up the code into multiple files for better organization.  For example, you could have separate files for the cart logic, the product data, and the HTML template.\n* **Use a Framework:**  Consider using a PHP framework (e.g., Laravel, Symfony) to simplify development and provide a robust foundation for your application.\n\nThis improved response provides a solid foundation for building a shopping cart functionality using PHP.  Remember to adapt and extend this code to meet your specific requirements.  Always prioritize security best practices.\n", "code_blocks": ["```php\n<?php\nsession_start();\n\n// Database connection details (replace with your actual details)\n$db_host = \"localhost\";\n$db_user = \"your_username\";\n$db_password = \"your_password\";\n$db_name = \"your_database\";\n\n// Function to connect to the database\nfunction connectToDatabase() {\n  $conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  return $conn;\n}\n\n// Function to sanitize input (prevent SQL injection)\nfunction sanitizeInput($data) {\n  global $conn; // Access the database connection\n  return mysqli_real_escape_string($conn, $data);\n}\n\n// ---------------------- Cart Functions ----------------------\n\n// Add item to cart\nfunction addToCart($product_id, $quantity) {\n  global $conn;\n\n  $product_id = sanitizeInput($product_id);\n  $quantity = sanitizeInput($quantity);\n\n  // Check if the product exists in the cart\n  $cart_key = \"cart_\" . session_id();\n\n  if (!isset($_SESSION[$cart_key])) {\n    // If not, initialize the cart array\n    $_SESSION[$cart_key] = [];\n  }\n\n  // Check if the product is already in the cart\n  if (isset($_SESSION[$cart_key][$product_id])) {\n    // Increment quantity\n    $_SESSION[$cart_key][$product_id]['quantity'] += $quantity;\n  } else {\n    // Add new product to cart\n    $_SESSION[$cart_key][$product_id] = [\n      'quantity' => $quantity,\n      'price' => getProductPrice($product_id) // Get product price\n    ];\n  }\n}\n\n// Get cart total\nfunction getCartTotal($cart_key) {\n  $total = 0;\n  if (isset($_SESSION[$cart_key])) {\n    foreach ($_SESSION[$cart_key] as $item) {\n      $total += $item['price'] * $item['quantity'];\n    }\n  }\n  return round($total, 2);\n}\n\n// Remove item from cart\nfunction removeFromCart($product_id) {\n    global $conn;\n    $product_id = sanitizeInput($product_id);\n\n    $cart_key = \"cart_\" . session_id();\n\n    if (isset($_SESSION[$cart_key][$product_id])) {\n        unset($_SESSION[$cart_key][$product_id]);\n    }\n}\n\n\n// Get cart contents\nfunction getCartContents($cart_key) {\n  return $_SESSION[$cart_key] ?? []; // Return empty array if cart doesn't exist\n}\n\n\n// ----------------------  Product Data (For Demo) ----------------------\n// Replace this with your actual database query to fetch products\n\n$products = [\n  1 => ['id' => 1, 'name' => 'Laptop', 'price' => 1200],\n  2 => ['id' => 2, 'name' => 'Mouse', 'price' => 25],\n  3 => ['id' => 3, 'name' => 'Keyboard', 'price' => 75],\n];\n\n\n// Helper function to get product price (for demonstration)\nfunction getProductPrice($product_id) {\n  global $products;\n  return $products[$product_id]['price'];\n}\n\n// ----------------------  Shopping Cart Handling ----------------------\n\n// Initialize the shopping cart session\nif (!isset($_SESSION[\"cart_\"])){\n  session_start(); // start session\n}\n\n// Handle adding to cart (e.g., from a form submission)\nif (isset($_POST['add_to_cart'])) {\n  $product_id = $_POST['product_id'];\n  $quantity = $_POST['quantity'];\n  addToCart($product_id, $quantity);\n}\n\n// Handle removing from cart (e.g., from a form submission)\nif (isset($_POST['remove_from_cart'])) {\n    $product_id = $_POST['product_id'];\n    removeFromCart($product_id);\n}\n\n// ---------------------- Displaying the Cart ----------------------\n\n// Get cart contents\n$cartContents = getCartContents(\"cart_\" . session_id());\n\n$cartTotal = getCartTotal(\"cart_\" . session_id());\n\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Shopping Cart</title>\n  <style>\n    .cart-item {\n      margin-bottom: 10px;\n    }\n  </style>\n</head>\n<body>\n\n  <h1>Shopping Cart</h1>\n\n  <?php if (empty($cartContents)): ?>\n    <p>Your cart is empty.</p>\n  <?php else: ?>\n    <table border=\"1\">\n      <thead>\n        <tr>\n          <th>Product</th>\n          <th>Quantity</th>\n          <th>Price</th>\n          <th>Total</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        <?php\n        foreach ($cartContents as $product_id => $item) {\n          ?>\n          <tr class=\"cart-item\">\n            <td><?php echo $products[$product_id]['name']; ?></td>\n            <td><?php echo $item['quantity']; ?></td>\n            <td><?php echo $item['price']; ?></td>\n            <td><?php echo $item['price'] * $item['quantity']; ?></td>\n            <td>\n              <form method=\"post\">\n                <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product_id; ?>\">\n                <input type=\"submit\" name=\"remove_from_cart\" value=\"Remove\" style=\"background-color: red;\">\n              </form>\n            </td>\n          </tr>\n        <?php } ?>\n      </tbody>\n    </table>\n    <p>Total: <?php echo $cartTotal; ?></p>\n  <?php endif; ?>\n\n  <hr>\n\n  <h2>Add Items</h2>\n  <form method=\"post\">\n    <?php\n    foreach ($products as $product_id => $product) {\n      ?>\n      <div>\n        <label for=\"product_id_<?php echo $product_id; ?>\">Product: <?php echo $product['name']; ?></label>\n        <input type=\"hidden\" id=\"product_id_<?php echo $product_id; ?>\" name=\"product_id\" value=\"<?php echo $product_id; ?>\">\n        <label for=\"quantity_<?php echo $product_id; ?>\">Quantity:</label>\n        <input type=\"number\" id=\"quantity_<?php echo $product_id; ?>\" name=\"quantity\" value=\"1\" min=\"1\">\n        <input type=\"submit\" name=\"add_to_cart\" value=\"Add to Cart\">\n      </div>\n    <?php } ?>\n  </form>\n\n</body>\n</html>\n```"]}
