{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, I need to create a purchase functionality using PHP. Let me think about how to approach this step by step.\n\nFirst, I should outline what the user needs. They want a system where users can add items to their cart and then checkout. So, I'll need a product list, an add-to-cart feature, a shopping cart display, and a checkout page.\n\nI remember that PHP is server-side, so I'll use it to handle form submissions and sessions. Sessions are good for storing the cart data because they persist across pages as long as the session is active.\n\nStarting with the database setup, I think I need two tables: one for products and another for orders. The products table should have product ID, name, description, price, and stock. The orders table will store each order's details like user info, total amount, and timestamps.\n\nNext, I'll create a configuration file to connect to the database. This makes it easier to manage credentials in one place. Using PDO is better than mysqli for PHP 7+ because of its support for prepared statements and exceptions.\n\nFor the product list page, I'll fetch all products from the database and display them with an \"Add to Cart\" button. Each button should have a form that submits the product ID and quantity to the server. Using a POST method makes sense here to send data securely.\n\nHandling the add-to-cart functionality, I'll check if the user is logged in by verifying the session. If not, redirect them to login or display an error. Then, retrieve the product details from the database using the provided product ID and quantity. Validate that the stock is sufficient; if not, show an error message.\n\nStoring the cart items in a session array seems efficient. I'll structure it with product IDs as keys and include product name, price, quantity, and total price for each item. This way, when displaying the cart, I can easily loop through the session data.\n\nMoving to the checkout page, I need to collect user details like name, email, address, and payment method. After validation, I'll process the order by inserting into the orders table and updating the product stock. Using transactions is important here to ensure both operations succeed or fail together, maintaining data integrity.\n\nFor the cart display, I'll loop through each item in the session, calculate totals on-the-fly, and provide options to remove items. This keeps the cart dynamic without needing a database for temporary storage.\n\nI should also include error handling throughout, using try-catch blocks for database operations and checking for issues like insufficient stock or form validation errors before proceeding.\n\nSecurity is another concern. I'll use prepared statements to prevent SQL injection and ensure that session data is properly sanitized. Also, redirecting with headers after processing forms helps prevent resubmission issues.\n\nTesting each part step by step will be crucial. I'll check adding items to the cart, updating quantities, removing items, and completing checkout. Making sure all edge cases are handled, like zero stock or invalid user inputs.\n\nFinally, I'll provide clear instructions on how to use the code, including setting up the database, creating users if necessary, and ensuring sessions are configured properly in PHP.\n</think>\n\nHere's an example of a purchase functionality using PHP:\n\n```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'shopping_cart';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Start session\nsession_start();\n\n// Product list page\nif ($_SERVER['PHP_SELF'] == '/product_list.php') {\n    // Display products from database\n    try {\n        $stmt = $conn->query(\"SELECT * FROM products\");\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            echo \"<div class='product'>\";\n            echo \"<h3>{$row['name']}</h3>\";\n            echo \"<p>Price: \\${$row['price']}</p>\";\n            echo \"<form action='add_to_cart.php' method='post'>\";\n            echo \"<input type='hidden' name='id' value='{$row['id']}'>\";\n            echo \"<input type='number' name='quantity' min='1' max='{$row['stock']}' placeholder='Quantity'>\";\n            echo \"<button type='submit'>Add to Cart</button>\";\n            echo \"</form>\";\n            echo \"</div>\";\n        }\n    } catch(PDOException $e) {\n        die(\"Error fetching products: \" . $e->getMessage());\n    }\n}\n\n// Add to cart functionality\nelseif ($_SERVER['PHP_SELF'] == '/add_to_cart.php') {\n    if (!isset($_SESSION['user_id'])) {\n        header('Location: login.php');\n        exit();\n    }\n\n    $id = $_POST['id'];\n    $quantity = $_POST['quantity'];\n\n    try {\n        // Check product exists and has stock\n        $stmt = $conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n        $stmt->execute([$id]);\n        $product = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if (!$product || $product['stock'] < $quantity) {\n            die(\"Product not available or insufficient stock.\");\n        }\n\n        // Add to cart\n        $cart = $_SESSION['cart'] ?? [];\n        if (isset($cart[$id])) {\n            $cart[$id]['quantity'] += $quantity;\n        } else {\n            $cart[$id] = [\n                'name' => $product['name'],\n                'price' => $product['price'],\n                'quantity' => $quantity,\n                'total_price' => $product['price'] * $quantity\n            ];\n        }\n        $_SESSION['cart'] = $cart;\n\n    } catch(PDOException $e) {\n        die(\"Error adding to cart: \" . $e->getMessage());\n    }\n\n    header('Location: cart.php');\n}\n\n// Cart page\nelseif ($_SERVER['PHP_SELF'] == '/cart.php') {\n    if (!isset($_SESSION['user_id'])) {\n        header('Location: login.php');\n        exit();\n    }\n\n    $cart = $_SESSION['cart'] ?? [];\n    $total = 0;\n\n    echo \"<h2>Your Cart</h2>\";\n    if (empty($cart)) {\n        echo \"<p>Your cart is empty.</p>\";\n    } else {\n        foreach ($cart as $id => $item) {\n            echo \"<div class='cart-item'>\";\n            echo \"<h3>{$item['name']}</h3>\";\n            echo \"<p>Quantity: {$item['quantity']}</p>\";\n            echo \"<p>Price: \\${$item['price']}</p>\";\n            echo \"<p>Total: \\${$item['total_price']}</p>\";\n            echo \"</div>\";\n            $total += $item['total_price'];\n        }\n        echo \"<h3>Total Amount: \\${$total}</h3>\";\n    }\n\n    echo \"<form action='checkout.php' method='post'>\";\n    echo \"<button type='submit'>Checkout</button>\";\n    echo \"</form>\";\n}\n\n// Checkout functionality\nelseif ($_SERVER['PHP_SELF'] == '/checkout.php') {\n    if (!isset($_SESSION['user_id'])) {\n        header('Location: login.php');\n        exit();\n    }\n\n    $cart = $_SESSION['cart'];\n    $total = array_sum(array_column($cart, 'total_price'));\n\n    try {\n        // Insert order into database\n        $stmt = $conn->prepare(\"INSERT INTO orders (user_id, total_amount) VALUES (?, ?)\");\n        $stmt->execute([$_SESSION['user_id'], $total]);\n        $order_id = $conn->lastInsertId();\n\n        // Update product stock\n        foreach ($cart as $id => $item) {\n            $stmt = $conn->prepare(\"UPDATE products SET stock = stock - ? WHERE id = ?\");\n            $stmt->execute([$item['quantity'], $id]);\n        }\n\n        // Clear cart\n        unset($_SESSION['cart']);\n\n    } catch(PDOException $e) {\n        die(\"Error processing order: \" . $e->getMessage());\n    }\n\n    header('Location: order_confirmation.php?order_id=' . $order_id);\n}\n?>\n```\n\nThis example includes:\n\n1. **Database Setup**:\n   - Creates a connection to the database\n   - Uses PDO for secure database interactions\n\n2. **Product List Page**:\n   - Displays products from the database\n   - Allows users to add items to their cart with specified quantities\n\n3. **Add to Cart Functionality**:\n   - Checks if user is logged in\n   - Validates product availability and stock\n   - Adds selected quantity of product to session-based cart\n\n4. **Cart Page**:\n   - Displays current cart contents\n   - Shows total amount\n   - Provides checkout option\n\n5. **Checkout Process**:\n   - Requires user login\n   - Calculates total order amount\n   - Inserts order into database\n   - Updates product stock levels\n   - Clears cart after successful purchase\n\nTo use this code:\n\n1. Create a database named `shopping_cart` with the following tables:\n\n```sql\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    stock INT DEFAULT 0\n);\n\nCREATE TABLE orders (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n```\n\n2. Create a `users` table for authentication purposes.\n\n3. Modify the database credentials in the configuration section to match your environment.\n\n4. Add appropriate error handling and user interface elements as needed.\n\n5. Ensure session management is properly configured in your PHP environment.\n\nRemember to:\n- Implement proper security measures (e.g., CSRF protection, input validation)\n- Add form validation\n- Include proper error messages for users\n- Secure sensitive data\n- Implement transaction management for database operations\n\nThis is a basic implementation and should be adapted according to your specific needs. You might want to add features like:\n- User authentication system\n- Shipping options\n- Payment gateways integration\n- Order tracking\n- Refunds and returns functionality\n- Cart item quantity updates\n- Remove items from cart\n- Coupon codes and discounts", "code_blocks": ["```php\n<?php\n// Database configuration\n$host = 'localhost';\n$dbname = 'shopping_cart';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    echo \"Connection failed: \" . $e->getMessage();\n}\n\n// Start session\nsession_start();\n\n// Product list page\nif ($_SERVER['PHP_SELF'] == '/product_list.php') {\n    // Display products from database\n    try {\n        $stmt = $conn->query(\"SELECT * FROM products\");\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            echo \"<div class='product'>\";\n            echo \"<h3>{$row['name']}</h3>\";\n            echo \"<p>Price: \\${$row['price']}</p>\";\n            echo \"<form action='add_to_cart.php' method='post'>\";\n            echo \"<input type='hidden' name='id' value='{$row['id']}'>\";\n            echo \"<input type='number' name='quantity' min='1' max='{$row['stock']}' placeholder='Quantity'>\";\n            echo \"<button type='submit'>Add to Cart</button>\";\n            echo \"</form>\";\n            echo \"</div>\";\n        }\n    } catch(PDOException $e) {\n        die(\"Error fetching products: \" . $e->getMessage());\n    }\n}\n\n// Add to cart functionality\nelseif ($_SERVER['PHP_SELF'] == '/add_to_cart.php') {\n    if (!isset($_SESSION['user_id'])) {\n        header('Location: login.php');\n        exit();\n    }\n\n    $id = $_POST['id'];\n    $quantity = $_POST['quantity'];\n\n    try {\n        // Check product exists and has stock\n        $stmt = $conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n        $stmt->execute([$id]);\n        $product = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if (!$product || $product['stock'] < $quantity) {\n            die(\"Product not available or insufficient stock.\");\n        }\n\n        // Add to cart\n        $cart = $_SESSION['cart'] ?? [];\n        if (isset($cart[$id])) {\n            $cart[$id]['quantity'] += $quantity;\n        } else {\n            $cart[$id] = [\n                'name' => $product['name'],\n                'price' => $product['price'],\n                'quantity' => $quantity,\n                'total_price' => $product['price'] * $quantity\n            ];\n        }\n        $_SESSION['cart'] = $cart;\n\n    } catch(PDOException $e) {\n        die(\"Error adding to cart: \" . $e->getMessage());\n    }\n\n    header('Location: cart.php');\n}\n\n// Cart page\nelseif ($_SERVER['PHP_SELF'] == '/cart.php') {\n    if (!isset($_SESSION['user_id'])) {\n        header('Location: login.php');\n        exit();\n    }\n\n    $cart = $_SESSION['cart'] ?? [];\n    $total = 0;\n\n    echo \"<h2>Your Cart</h2>\";\n    if (empty($cart)) {\n        echo \"<p>Your cart is empty.</p>\";\n    } else {\n        foreach ($cart as $id => $item) {\n            echo \"<div class='cart-item'>\";\n            echo \"<h3>{$item['name']}</h3>\";\n            echo \"<p>Quantity: {$item['quantity']}</p>\";\n            echo \"<p>Price: \\${$item['price']}</p>\";\n            echo \"<p>Total: \\${$item['total_price']}</p>\";\n            echo \"</div>\";\n            $total += $item['total_price'];\n        }\n        echo \"<h3>Total Amount: \\${$total}</h3>\";\n    }\n\n    echo \"<form action='checkout.php' method='post'>\";\n    echo \"<button type='submit'>Checkout</button>\";\n    echo \"</form>\";\n}\n\n// Checkout functionality\nelseif ($_SERVER['PHP_SELF'] == '/checkout.php') {\n    if (!isset($_SESSION['user_id'])) {\n        header('Location: login.php');\n        exit();\n    }\n\n    $cart = $_SESSION['cart'];\n    $total = array_sum(array_column($cart, 'total_price'));\n\n    try {\n        // Insert order into database\n        $stmt = $conn->prepare(\"INSERT INTO orders (user_id, total_amount) VALUES (?, ?)\");\n        $stmt->execute([$_SESSION['user_id'], $total]);\n        $order_id = $conn->lastInsertId();\n\n        // Update product stock\n        foreach ($cart as $id => $item) {\n            $stmt = $conn->prepare(\"UPDATE products SET stock = stock - ? WHERE id = ?\");\n            $stmt->execute([$item['quantity'], $id]);\n        }\n\n        // Clear cart\n        unset($_SESSION['cart']);\n\n    } catch(PDOException $e) {\n        die(\"Error processing order: \" . $e->getMessage());\n    }\n\n    header('Location: order_confirmation.php?order_id=' . $order_id);\n}\n?>\n```", null]}
