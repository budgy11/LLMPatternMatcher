{"prompt": "Create a purchase functionality using php", "llm_output": "Here's an example of how you can create a basic \"Add to Cart\" and \"Checkout\" functionality in PHP. This example uses a simple shopping cart system where products are added to the cart and then checked out.\n\n**Database Schema:**\n\nFirst, we'll need to set up our database schema to store product information and cart items:\n\n```sql\nCREATE TABLE `products` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(255) NOT NULL,\n  `price` decimal(10,2) NOT NULL DEFAULT '0.00',\n  PRIMARY KEY (`id`)\n);\n\nCREATE TABLE `cart_items` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `product_id` int(10) unsigned NOT NULL,\n  `quantity` tinyint(3) unsigned NOT NULL DEFAULT '1',\n  PRIMARY KEY (`id`),\n  KEY `product_id` (`product_id`)\n);\n\nCREATE TABLE `orders` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `customer_name` varchar(255) NOT NULL,\n  `email` varchar(255) NOT NULL,\n  `total_cost` decimal(10,2) NOT NULL DEFAULT '0.00',\n  PRIMARY KEY (`id`)\n);\n\nCREATE TABLE `order_items` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `order_id` int(10) unsigned NOT NULL,\n  `product_id` int(10) unsigned NOT NULL,\n  `quantity` tinyint(3) unsigned NOT NULL DEFAULT '1',\n  PRIMARY KEY (`id`),\n  KEY `order_id` (`order_id`)\n);\n```\n\n**PHP Code:**\n\nHere's the PHP code to handle product addition, cart updates, and checkout:\n\n```php\n// Configuration file (db.php)\n<?php\nclass Database {\n    private $conn;\n\n    function __construct() {\n        $this->conn = new mysqli('localhost', 'username', 'password', 'database');\n        if ($this->conn->connect_error) {\n            die(\"Connection failed: \" . $this->conn->connect_error);\n        }\n    }\n\n    public function select($query) {\n        return $this->conn->query($query);\n    }\n\n    public function insert($query, array $data) {\n        foreach ($data as $field => $value) {\n            $query .= '?, ';\n        }\n        $query = rtrim($query, ', ') . ';';\n        $stmt = $this->conn->prepare($query);\n        foreach ($data as $field => $value) {\n            $stmt->bind_param($field === 'quantity' ? 'i' : 's', $value);\n        }\n        return $stmt->execute();\n    }\n\n    public function getConn() {\n        return $this->conn;\n    }\n}\n\n// Controller (cart.php)\n<?php\nclass CartController {\n    private $db;\n\n    function __construct(Database $db) {\n        $this->db = $db;\n    }\n\n    // Function to add product to cart\n    public function addProduct($productId, $quantity) {\n        try {\n            if ($quantity <= 0) {\n                throw new Exception('Invalid quantity');\n            }\n            $query = 'INSERT INTO `cart_items` (`product_id`, `quantity`) VALUES (?, ?)';\n            return $this->db->insert($query, array(\n                'product_id' => $productId,\n                'quantity' => $quantity\n            ));\n        } catch (Exception $e) {\n            echo $e->getMessage();\n            return false;\n        }\n    }\n\n    // Function to update cart items\n    public function updateCart() {\n        try {\n            $cartItems = array();\n            $query = 'SELECT * FROM `cart_items` WHERE `quantity` != 1';\n            foreach ($this->db->select($query) as $row) {\n                $cartItems[] = array(\n                    'id' => $row['id'],\n                    'product_id' => $row['product_id'],\n                    'quantity' => $row['quantity']\n                );\n            }\n            return $cartItems;\n        } catch (Exception $e) {\n            echo $e->getMessage();\n            return false;\n        }\n    }\n\n    // Function to checkout\n    public function checkout() {\n        try {\n            $order = array(\n                'customer_name' => '',\n                'email' => ''\n            );\n            $totalCost = 0;\n\n            $query = 'INSERT INTO `orders` (`customer_name`, `email`, `total_cost`) VALUES (?, ?, ?)';\n            $this->db->insert($query, array(\n                'customer_name' => $order['customer_name'],\n                'email' => $order['email'],\n                'total_cost' => $totalCost\n            ));\n\n            $order_id = $this->db->getConn()->insert_id;\n            foreach ($cartItems as $item) {\n                $query = 'INSERT INTO `order_items` (`order_id`, `product_id`, `quantity`) VALUES (?, ?, ?)';\n                $this->db->insert($query, array(\n                    'order_id' => $order_id,\n                    'product_id' => $item['product_id'],\n                    'quantity' => $item['quantity']\n                ));\n            }\n            return true;\n        } catch (Exception $e) {\n            echo $e->getMessage();\n            return false;\n        }\n    }\n}\n\n// Initialize database\n$db = new Database();\n\n// Initialize cart controller\n$cartController = new CartController($db);\n\n// Sample usage:\nif ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['add_product'])) {\n    $productId = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n\n    if ($cartController->addProduct($productId, $quantity)) {\n        echo 'Product added to cart!';\n    } else {\n        echo 'Error adding product to cart';\n    }\n}\n\nif ($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['checkout'])) {\n    $cartItems = $cartController->updateCart();\n    if ($cartController->checkout()) {\n        echo 'Order successfully placed!';\n    } else {\n        echo 'Error placing order';\n    }\n}\n```\n\nThis code assumes a basic understanding of PHP, MySQL, and OOP. Please modify it according to your specific requirements.\n\nPlease note that this is a very simplified example, in real-world application you will need to handle errors more robustly, implement authentication and authorization, add input validation, use prepared statements for security purposes etc.", "code_blocks": [null, "```php\n// Configuration file (db.php)\n<?php\nclass Database {\n    private $conn;\n\n    function __construct() {\n        $this->conn = new mysqli('localhost', 'username', 'password', 'database');\n        if ($this->conn->connect_error) {\n            die(\"Connection failed: \" . $this->conn->connect_error);\n        }\n    }\n\n    public function select($query) {\n        return $this->conn->query($query);\n    }\n\n    public function insert($query, array $data) {\n        foreach ($data as $field => $value) {\n            $query .= '?, ';\n        }\n        $query = rtrim($query, ', ') . ';';\n        $stmt = $this->conn->prepare($query);\n        foreach ($data as $field => $value) {\n            $stmt->bind_param($field === 'quantity' ? 'i' : 's', $value);\n        }\n        return $stmt->execute();\n    }\n\n    public function getConn() {\n        return $this->conn;\n    }\n}\n\n// Controller (cart.php)\n<?php\nclass CartController {\n    private $db;\n\n    function __construct(Database $db) {\n        $this->db = $db;\n    }\n\n    // Function to add product to cart\n    public function addProduct($productId, $quantity) {\n        try {\n            if ($quantity <= 0) {\n                throw new Exception('Invalid quantity');\n            }\n            $query = 'INSERT INTO `cart_items` (`product_id`, `quantity`) VALUES (?, ?)';\n            return $this->db->insert($query, array(\n                'product_id' => $productId,\n                'quantity' => $quantity\n            ));\n        } catch (Exception $e) {\n            echo $e->getMessage();\n            return false;\n        }\n    }\n\n    // Function to update cart items\n    public function updateCart() {\n        try {\n            $cartItems = array();\n            $query = 'SELECT * FROM `cart_items` WHERE `quantity` != 1';\n            foreach ($this->db->select($query) as $row) {\n                $cartItems[] = array(\n                    'id' => $row['id'],\n                    'product_id' => $row['product_id'],\n                    'quantity' => $row['quantity']\n                );\n            }\n            return $cartItems;\n        } catch (Exception $e) {\n            echo $e->getMessage();\n            return false;\n        }\n    }\n\n    // Function to checkout\n    public function checkout() {\n        try {\n            $order = array(\n                'customer_name' => '',\n                'email' => ''\n            );\n            $totalCost = 0;\n\n            $query = 'INSERT INTO `orders` (`customer_name`, `email`, `total_cost`) VALUES (?, ?, ?)';\n            $this->db->insert($query, array(\n                'customer_name' => $order['customer_name'],\n                'email' => $order['email'],\n                'total_cost' => $totalCost\n            ));\n\n            $order_id = $this->db->getConn()->insert_id;\n            foreach ($cartItems as $item) {\n                $query = 'INSERT INTO `order_items` (`order_id`, `product_id`, `quantity`) VALUES (?, ?, ?)';\n                $this->db->insert($query, array(\n                    'order_id' => $order_id,\n                    'product_id' => $item['product_id'],\n                    'quantity' => $item['quantity']\n                ));\n            }\n            return true;\n        } catch (Exception $e) {\n            echo $e->getMessage();\n            return false;\n        }\n    }\n}\n\n// Initialize database\n$db = new Database();\n\n// Initialize cart controller\n$cartController = new CartController($db);\n\n// Sample usage:\nif ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['add_product'])) {\n    $productId = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n\n    if ($cartController->addProduct($productId, $quantity)) {\n        echo 'Product added to cart!';\n    } else {\n        echo 'Error adding product to cart';\n    }\n}\n\nif ($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['checkout'])) {\n    $cartItems = $cartController->updateCart();\n    if ($cartController->checkout()) {\n        echo 'Order successfully placed!';\n    } else {\n        echo 'Error placing order';\n    }\n}\n```"]}
