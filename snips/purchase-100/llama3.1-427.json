{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a simple purchase functionality using PHP. This example assumes you have already set up a database with the necessary tables for products and orders.\n\n**Database Schema:**\n\n```sql\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2)\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    customer_name VARCHAR(255),\n    order_date DATE,\n    total DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n    id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    FOREIGN KEY (order_id) REFERENCES orders(id),\n    FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n**PHP Code:**\n\n**`models/Product.php`:**\n```php\nclass Product {\n    public $id;\n    public $name;\n    public $price;\n\n    function __construct($id, $name, $price) {\n        $this->id = $id;\n        $this->name = $name;\n        $this->price = $price;\n    }\n}\n```\n\n**`models/Order.php`:**\n```php\nclass Order {\n    public $id;\n    public $customer_name;\n    public $order_date;\n    public $total;\n\n    function __construct($id, $customer_name, $order_date, $total) {\n        $this->id = $id;\n        $this->customer_name = $customer_name;\n        $this->order_date = $order_date;\n        $this->total = $total;\n    }\n}\n```\n\n**`models/OrderItem.php`:**\n```php\nclass OrderItem {\n    public $id;\n    public $order_id;\n    public $product_id;\n    public $quantity;\n\n    function __construct($id, $order_id, $product_id, $quantity) {\n        $this->id = $id;\n        $this->order_id = $order_id;\n        $this->product_id = $product_id;\n        $this->quantity = $quantity;\n    }\n}\n```\n\n**`controllers/PurchaseController.php`:**\n```php\nclass PurchaseController {\n    function index() {\n        // Get all products\n        $products = array();\n        $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n        $stmt = $db->prepare('SELECT * FROM products');\n        $stmt->execute();\n        while ($row = $stmt->fetch()) {\n            $product = new Product($row['id'], $row['name'], $row['price']);\n            array_push($products, $product);\n        }\n        return view('purchase', array('products' => $products));\n    }\n\n    function addOrder() {\n        // Get order form data\n        $customer_name = $_POST['customer_name'];\n        $order_date = date('Y-m-d');\n        $total = 0;\n        foreach ($_SESSION['cart'] as $item) {\n            $product_id = $item['product_id'];\n            $quantity = $item['quantity'];\n            // Get product price\n            $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n            $stmt = $db->prepare('SELECT * FROM products WHERE id = :id');\n            $stmt->bindParam(':id', $product_id);\n            $stmt->execute();\n            $row = $stmt->fetch();\n            $price = $row['price'];\n            // Calculate order total\n            $total += $quantity * $price;\n        }\n        // Insert new order into database\n        $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n        $stmt = $db->prepare('INSERT INTO orders (customer_name, order_date, total) VALUES (:customer_name, :order_date, :total)');\n        $stmt->bindParam(':customer_name', $customer_name);\n        $stmt->bindParam(':order_date', $order_date);\n        $stmt->bindParam(':total', $total);\n        $stmt->execute();\n        // Get new order ID\n        $new_order_id = $db->lastInsertId();\n        // Insert order items into database\n        foreach ($_SESSION['cart'] as $item) {\n            $product_id = $item['product_id'];\n            $quantity = $item['quantity'];\n            $stmt = $db->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');\n            $stmt->bindParam(':order_id', $new_order_id);\n            $stmt->bindParam(':product_id', $product_id);\n            $stmt->bindParam(':quantity', $quantity);\n            $stmt->execute();\n        }\n        // Clear cart\n        unset($_SESSION['cart']);\n    }\n\n    function viewOrder() {\n        // Get order ID from URL parameter\n        $order_id = $_GET['id'];\n        // Retrieve order data from database\n        $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n        $stmt = $db->prepare('SELECT * FROM orders WHERE id = :id');\n        $stmt->bindParam(':id', $order_id);\n        $stmt->execute();\n        $row = $stmt->fetch();\n        $order = new Order($row['id'], $row['customer_name'], $row['order_date'], $row['total']);\n        // Retrieve order items from database\n        $order_items = array();\n        $stmt = $db->prepare('SELECT * FROM order_items WHERE order_id = :order_id');\n        $stmt->bindParam(':order_id', $order_id);\n        $stmt->execute();\n        while ($row = $stmt->fetch()) {\n            $product_id = $row['product_id'];\n            // Get product data from database\n            $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n            $stmt = $db->prepare('SELECT * FROM products WHERE id = :id');\n            $stmt->bindParam(':id', $product_id);\n            $stmt->execute();\n            $row = $stmt->fetch();\n            $product = new Product($row['id'], $row['name'], $row['price']);\n            array_push($order_items, new OrderItem($row['id'], $order_id, $product_id, $row['quantity']));\n        }\n        return view('view_order', array('order' => $order, 'order_items' => $order_items));\n    }\n}\n```\n\n**`models/Session.php`:**\n```php\nclass Session {\n    public static function start() {\n        session_start();\n    }\n\n    public static function getCart() {\n        if (!isset($_SESSION['cart'])) {\n            $_SESSION['cart'] = array();\n        }\n        return $_SESSION['cart'];\n    }\n\n    public static function addProductToCart($product_id, $quantity) {\n        $cart = self::getCart();\n        foreach ($cart as &$item) {\n            if ($item['product_id'] == $product_id) {\n                $item['quantity'] += $quantity;\n                return;\n            }\n        }\n        array_push($cart, array('product_id' => $product_id, 'quantity' => $quantity));\n    }\n\n    public static function removeProductFromCart($product_id) {\n        $cart = self::getCart();\n        foreach ($cart as $key => &$item) {\n            if ($item['product_id'] == $product_id) {\n                unset($cart[$key]);\n                return;\n            }\n        }\n    }\n}\n```\n\n**`models/View.php`:**\n```php\nclass View {\n    public static function render($template, $data = array()) {\n        extract($data);\n        include 'templates/' . $template . '.php';\n    }\n\n    public static function purchase() {\n        self::render('purchase', array('products' => $_SESSION['cart']));\n    }\n\n    public static function view_order() {\n        self::render('view_order', array('order' => new Order(), 'order_items' => array()));\n    }\n}\n```\n\n**`routes.php`:**\n```php\n$routes = array(\n    '/' => function () { PurchaseController::index(); },\n    '/add-order' => function () { PurchaseController::addOrder(); },\n    '/view/order/:id' => function ($params) { PurchaseController::viewOrder($params['id']); }\n);\n```\n\nThis is a basic example and you may need to adjust it according to your requirements. The code is divided into several classes: `Product`, `Order`, `OrderItem`, `PurchaseController`, `Session` and `View`. The `routes.php` file defines the routes for the application.\n\nThe `purchase` function in the `PurchaseController` class retrieves all products from the database and passes them to the view. The `add_order` function handles the form submission, calculates the total order cost and inserts a new order into the database along with its items. Finally, the `view_order` function displays an individual order with its items.\n\nThis code assumes you have a basic understanding of PHP, MySQL and object-oriented programming concepts. It also assumes that you have set up a database with the necessary tables for products, orders and order items.\n\nRemember to replace `'your_database'`, `'your_username'` and `'your_password'` with your actual database credentials.\n\nYou can access the application through the following URLs:\n\n* `http://localhost/`: Displays all available products.\n* `http://localhost/add-order`: Submits a new order. This URL should be accessed after you have added items to your cart.\n* `http://localhost/view/order/:id`: Displays an individual order with its items. Replace `:id` with the actual ID of the order you want to view.\n\nPlease note that this is a simplified example and does not cover all possible edge cases or error handling scenarios. You should always validate user input, handle potential errors and implement proper security measures in your production application.", "code_blocks": [null, "```php\nclass Product {\n    public $id;\n    public $name;\n    public $price;\n\n    function __construct($id, $name, $price) {\n        $this->id = $id;\n        $this->name = $name;\n        $this->price = $price;\n    }\n}\n```", "```php\nclass Order {\n    public $id;\n    public $customer_name;\n    public $order_date;\n    public $total;\n\n    function __construct($id, $customer_name, $order_date, $total) {\n        $this->id = $id;\n        $this->customer_name = $customer_name;\n        $this->order_date = $order_date;\n        $this->total = $total;\n    }\n}\n```", "```php\nclass OrderItem {\n    public $id;\n    public $order_id;\n    public $product_id;\n    public $quantity;\n\n    function __construct($id, $order_id, $product_id, $quantity) {\n        $this->id = $id;\n        $this->order_id = $order_id;\n        $this->product_id = $product_id;\n        $this->quantity = $quantity;\n    }\n}\n```", "```php\nclass PurchaseController {\n    function index() {\n        // Get all products\n        $products = array();\n        $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n        $stmt = $db->prepare('SELECT * FROM products');\n        $stmt->execute();\n        while ($row = $stmt->fetch()) {\n            $product = new Product($row['id'], $row['name'], $row['price']);\n            array_push($products, $product);\n        }\n        return view('purchase', array('products' => $products));\n    }\n\n    function addOrder() {\n        // Get order form data\n        $customer_name = $_POST['customer_name'];\n        $order_date = date('Y-m-d');\n        $total = 0;\n        foreach ($_SESSION['cart'] as $item) {\n            $product_id = $item['product_id'];\n            $quantity = $item['quantity'];\n            // Get product price\n            $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n            $stmt = $db->prepare('SELECT * FROM products WHERE id = :id');\n            $stmt->bindParam(':id', $product_id);\n            $stmt->execute();\n            $row = $stmt->fetch();\n            $price = $row['price'];\n            // Calculate order total\n            $total += $quantity * $price;\n        }\n        // Insert new order into database\n        $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n        $stmt = $db->prepare('INSERT INTO orders (customer_name, order_date, total) VALUES (:customer_name, :order_date, :total)');\n        $stmt->bindParam(':customer_name', $customer_name);\n        $stmt->bindParam(':order_date', $order_date);\n        $stmt->bindParam(':total', $total);\n        $stmt->execute();\n        // Get new order ID\n        $new_order_id = $db->lastInsertId();\n        // Insert order items into database\n        foreach ($_SESSION['cart'] as $item) {\n            $product_id = $item['product_id'];\n            $quantity = $item['quantity'];\n            $stmt = $db->prepare('INSERT INTO order_items (order_id, product_id, quantity) VALUES (:order_id, :product_id, :quantity)');\n            $stmt->bindParam(':order_id', $new_order_id);\n            $stmt->bindParam(':product_id', $product_id);\n            $stmt->bindParam(':quantity', $quantity);\n            $stmt->execute();\n        }\n        // Clear cart\n        unset($_SESSION['cart']);\n    }\n\n    function viewOrder() {\n        // Get order ID from URL parameter\n        $order_id = $_GET['id'];\n        // Retrieve order data from database\n        $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n        $stmt = $db->prepare('SELECT * FROM orders WHERE id = :id');\n        $stmt->bindParam(':id', $order_id);\n        $stmt->execute();\n        $row = $stmt->fetch();\n        $order = new Order($row['id'], $row['customer_name'], $row['order_date'], $row['total']);\n        // Retrieve order items from database\n        $order_items = array();\n        $stmt = $db->prepare('SELECT * FROM order_items WHERE order_id = :order_id');\n        $stmt->bindParam(':order_id', $order_id);\n        $stmt->execute();\n        while ($row = $stmt->fetch()) {\n            $product_id = $row['product_id'];\n            // Get product data from database\n            $db = new PDO('mysql:host=localhost;dbname=your_database', 'your_username', 'your_password');\n            $stmt = $db->prepare('SELECT * FROM products WHERE id = :id');\n            $stmt->bindParam(':id', $product_id);\n            $stmt->execute();\n            $row = $stmt->fetch();\n            $product = new Product($row['id'], $row['name'], $row['price']);\n            array_push($order_items, new OrderItem($row['id'], $order_id, $product_id, $row['quantity']));\n        }\n        return view('view_order', array('order' => $order, 'order_items' => $order_items));\n    }\n}\n```", "```php\nclass Session {\n    public static function start() {\n        session_start();\n    }\n\n    public static function getCart() {\n        if (!isset($_SESSION['cart'])) {\n            $_SESSION['cart'] = array();\n        }\n        return $_SESSION['cart'];\n    }\n\n    public static function addProductToCart($product_id, $quantity) {\n        $cart = self::getCart();\n        foreach ($cart as &$item) {\n            if ($item['product_id'] == $product_id) {\n                $item['quantity'] += $quantity;\n                return;\n            }\n        }\n        array_push($cart, array('product_id' => $product_id, 'quantity' => $quantity));\n    }\n\n    public static function removeProductFromCart($product_id) {\n        $cart = self::getCart();\n        foreach ($cart as $key => &$item) {\n            if ($item['product_id'] == $product_id) {\n                unset($cart[$key]);\n                return;\n            }\n        }\n    }\n}\n```", "```php\nclass View {\n    public static function render($template, $data = array()) {\n        extract($data);\n        include 'templates/' . $template . '.php';\n    }\n\n    public static function purchase() {\n        self::render('purchase', array('products' => $_SESSION['cart']));\n    }\n\n    public static function view_order() {\n        self::render('view_order', array('order' => new Order(), 'order_items' => array()));\n    }\n}\n```", "```php\n$routes = array(\n    '/' => function () { PurchaseController::index(); },\n    '/add-order' => function () { PurchaseController::addOrder(); },\n    '/view/order/:id' => function ($params) { PurchaseController::viewOrder($params['id']); }\n);\n```"]}
