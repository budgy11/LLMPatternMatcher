{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, I need to create a purchase functionality using PHP. Let me think about how to approach this.\n\nFirst, I should consider the main components involved in a purchase process. Typically, there's a product catalog where users can view items, add them to their cart, and then proceed to checkout. So, I'll need a database to store products and orders.\n\nI'll start by setting up the database. Maybe create two tables: one for products with details like id, name, description, price, stock, etc., and another for orders that will track each purchase including user info, product details, quantity, total price, and order status.\n\nNext, I need to handle the front-end where users can view products. I'll use PHP to fetch data from the database and display it on an HTML page with some styling using CSS. Each product should have a button to add it to the cart.\n\nFor adding items to the cart, since this is a basic example without sessions, maybe I can use cookies or a local storage alternative in JavaScript. But since the user asked for PHP, perhaps using a session-based approach would be better. Wait, but in the initial answer, I used JavaScript's localStorage. Maybe that's acceptable for simplicity.\n\nSo, when a user clicks \"Add to Cart,\" an AJAX call is made to add the product ID and quantity to the cart stored in cookies or localStorage. Then, on the checkout page, I can retrieve this data to display the items being purchased.\n\nOn the checkout page, I'll need a form where users enter their details: name, email, address. After submission, PHP will process the order, insert it into the orders table, and update the product stock if necessary.\n\nI should also handle cases where products are out of stock. Before processing the order, check each item's stock against the quantity ordered. If any item is not available in sufficient quantity, display an error message.\n\nSecurity is important too. I'll need to sanitize user inputs to prevent SQL injection and other attacks. Using prepared statements with PDO would be a good approach.\n\nLet me outline the steps:\n\n1. Set up the database with products and orders tables.\n2. Create product listing pages using PHP to fetch and display products.\n3. Implement add to cart functionality, possibly using cookies or localStorage for simplicity.\n4. Develop checkout page with user form and payment details (maybe just a simple submit for this example).\n5. Process the order upon submission: validate inputs, check stock, insert into orders table.\n6. Provide an order confirmation page with details of the purchase.\n\nI should also consider error handling at each step. For instance, if adding to cart fails or if there's an issue processing the payment, users should be informed clearly.\n\nTesting is crucial. I'll need to test adding different products, checking out with various quantities, ensuring stock updates correctly, and verifying that all data is stored properly in the database.\n\nIn terms of code structure, separating concerns into different files would help: a config file for database connection, product functions, order functions, etc. This makes the code more manageable and scalable.\n\nI might also want to include some basic error logging or debugging statements during development to catch any issues early on.\n\nFinally, I'll ensure that all data being displayed is properly escaped to prevent XSS attacks. Using htmlspecialchars when echoing user inputs can help with this.\n\nOverall, breaking down the problem into smaller parts and tackling each component step by step will make it manageable. Starting with setting up the database and basic product display, then moving on to cart functionality, checkout, and order processing.\n</think>\n\nCreating a purchase functionality involves several steps, including displaying products, allowing users to add items to their cart, proceeding to checkout, and processing the order. Below is an example implementation using PHP and MySQL.\n\n### Step 1: Set Up Your Database\n\nFirst, create a database to store your products and orders.\n\n```sql\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    stock INT NOT NULL,\n    image_url VARCHAR(255)\n);\n\nCREATE TABLE orders (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    address TEXT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    total_price DECIMAL(10, 2) NOT NULL,\n    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\n### Step 2: Create the Product Listing Page\n\nCreate a PHP file (`index.php`) to display your products.\n\n```php\n<?php\nrequire 'config.php';\n\n// Fetch all products from the database\n$sql = \"SELECT * FROM products\";\n$stmt = $pdo->query($sql);\n$products = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product Store</title>\n    <style>\n        .product {\n            border: 1px solid #ddd;\n            padding: 10px;\n            margin: 5px;\n        }\n        .price {\n            color: red;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <h1>Product Store</h1>\n    <?php foreach ($products as $product): ?>\n        <div class=\"product\">\n            <?php if ($product['image_url']): ?>\n                <img src=\"<?php echo htmlspecialchars($product['image_url'], ENT_QUOTES, 'UTF-8'); ?>\" alt=\"<?php echo htmlspecialchars($product['name'], ENT_QUOTES, 'UTF-8'); ?>\" style=\"max-width: 200px;\">\n            <?php endif; ?>\n            <h3><?php echo htmlspecialchars($product['name'], ENT_QUOTES, 'UTF-8'); ?></h3>\n            <p><?php echo nl2br(htmlspecialchars($product['description'], ENT_QUOTES, 'UTF-8')); ?></p>\n            <p class=\"price\">$<?php echo number_format($product['price'], 2); ?></p>\n            <?php if ($product['stock'] > 0): ?>\n                <form action=\"add_to_cart.php\" method=\"post\">\n                    <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product['id']; ?>\">\n                    <input type=\"number\" name=\"quantity\" min=\"1\" max=\"<?php echo $product['stock']; ?>\" value=\"1\">\n                    <button type=\"submit\">Add to Cart</button>\n                </form>\n            <?php else: ?>\n                <p>Out of Stock</p>\n            <?php endif; ?>\n        </div>\n    <?php endforeach; ?>\n\n    <a href=\"cart.php\">View Cart</a>\n</body>\n</html>\n```\n\n### Step 3: Add to Cart Functionality\n\nCreate a PHP file (`add_to_cart.php`) to handle adding items to the cart. This example uses cookies to store the cart data.\n\n```php\n<?php\nsession_start();\n\nif (isset($_POST['product_id']) && isset($_POST['quantity'])) {\n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n\n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n\n    // Check if the product is already in the cart\n    if (array_key_exists($product_id, $_SESSION['cart'])) {\n        $_SESSION['cart'][$product_id] += $quantity;\n    } else {\n        $_SESSION['cart'][$product_id] = $quantity;\n    }\n\n    header('Location: index.php');\n} else {\n    header('Location: index.php');\n}\n```\n\n### Step 4: Cart Display Page\n\nCreate a PHP file (`cart.php`) to display the contents of the cart.\n\n```php\n<?php\nsession_start();\n\nrequire 'config.php';\n\n// Get product details for items in the cart\n$cart = array();\nif (isset($_SESSION['cart'])) {\n    foreach ($_SESSION['cart'] as $product_id => $quantity) {\n        $sql = \"SELECT * FROM products WHERE id = ?\";\n        $stmt = $pdo->prepare($sql);\n        $stmt->execute([$product_id]);\n        $product = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if ($product && $product['stock'] >= $quantity) {\n            $cart[] = array_merge(['quantity' => $quantity], $product);\n        }\n    }\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n    <style>\n        .cart-item {\n            border: 1px solid #ddd;\n            padding: 10px;\n            margin: 5px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Your Shopping Cart</h1>\n    <?php if ($cart): ?>\n        <?php foreach ($cart as $item): ?>\n            <div class=\"cart-item\">\n                <h3><?php echo htmlspecialchars($item['name'], ENT_QUOTES, 'UTF-8'); ?></h3>\n                <p>Quantity: <?php echo $item['quantity']; ?></p>\n                <p>Price: $<?php echo number_format($item['price'], 2); ?></p>\n                <form action=\"remove_from_cart.php\" method=\"post\">\n                    <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $item['id']; ?>\">\n                    <button type=\"submit\">Remove</button>\n                </form>\n            </div>\n        <?php endforeach; ?>\n\n        <h3>Total: $<?php \n            $total = 0;\n            foreach ($cart as $item) {\n                $total += $item['price'] * $item['quantity'];\n            }\n            echo number_format($total, 2); \n        ?></h3>\n        \n        <a href=\"checkout.php\">Proceed to Checkout</a> |\n        <a href=\"index.php\">Continue Shopping</a>\n    <?php else: ?>\n        <p>Your cart is empty.</p>\n        <a href=\"index.php\">Go Back to Store</a>\n    <?php endif; ?>\n</body>\n</html>\n```\n\n### Step 5: Remove from Cart Functionality\n\nCreate a PHP file (`remove_from_cart.php`) to handle removing items from the cart.\n\n```php\n<?php\nsession_start();\n\nif (isset($_POST['product_id'])) {\n    $product_id = $_POST['product_id'];\n\n    if (isset($_SESSION['cart'][$product_id])) {\n        unset($_SESSION['cart'][$product_id]);\n    }\n\n    header('Location: cart.php');\n} else {\n    header('Location: cart.php');\n}\n```\n\n### Step 6: Checkout Page\n\nCreate a PHP file (`checkout.php`) to handle the checkout process.\n\n```php\n<?php\nsession_start();\n\nif (!isset($_SESSION['cart']) || empty($_SESSION['cart'])) {\n    header('Location: index.php');\n}\n\nrequire 'config.php';\n\n// Calculate total price\n$total = 0;\nforeach ($_SESSION['cart'] as $product_id => $quantity) {\n    $sql = \"SELECT * FROM products WHERE id = ?\";\n    $stmt = $pdo->prepare($sql);\n    $stmt->execute([$product_id]);\n    $product = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    if ($product && $product['stock'] >= $quantity) {\n        $total += $product['price'] * $quantity;\n    }\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Checkout</title>\n</head>\n<body>\n    <h1>Checkout</h1>\n    <?php if (!isset($_SESSION['cart']) || empty($_SESSION['cart'])): ?>\n        <p>Your cart is empty.</p>\n        <a href=\"index.php\">Go Back to Store</a>\n    <?php else: ?>\n        <form action=\"process_order.php\" method=\"post\">\n            <div style=\"float: left; width: 50%; margin-right: 20px;\">\n                <h3>Shipping Information</h3>\n                <p>Please fill in your details:</p>\n                <input type=\"text\" name=\"name\" placeholder=\"Full Name\" required><br>\n                <input type=\"email\" name=\"email\" placeholder=\"Email Address\" required><br>\n                <textarea name=\"address\" placeholder=\"Shipping Address\" required></textarea><br>\n            </div>\n\n            <div style=\"float: left; width: 50%; background-color: #f0f0f0;\">\n                <h3>Your Order</h3>\n                <?php foreach ($_SESSION['cart'] as $product_id => $quantity): ?>\n                    <?php \n                        $sql = \"SELECT * FROM products WHERE id = ?\";\n                        $stmt = $pdo->prepare($sql);\n                        $stmt->execute([$product_id]);\n                        $product = $stmt->fetch(PDO::FETCH_ASSOC);\n                    ?>\n                    <p><?php echo htmlspecialchars($product['name'], ENT_QUOTES, 'UTF-8'); ?> x <?php echo $quantity; ?></p>\n                <?php endforeach; ?>\n\n                <h4>Total: $<?php echo number_format($total, 2); ?></h4>\n            </div>\n\n            <br style=\"clear: both;\">\n            <input type=\"submit\" value=\"Place Order\">\n        </form>\n    <?php endif; ?>\n</body>\n</html>\n```\n\n### Step 7: Process the Order\n\nCreate a PHP file (`process_order.php`) to handle the order processing.\n\n```php\n<?php\nsession_start();\n\nrequire 'config.php';\n\nif (isset($_POST['name'], $_POST['email'], $_POST['address'])) {\n    $cart = $_SESSION['cart'];\n    $total_price = 0;\n\n    foreach ($cart as $product_id => $quantity) {\n        $sql = \"SELECT * FROM products WHERE id = ?\";\n        $stmt = $pdo->prepare($sql);\n        $stmt->execute([$product_id]);\n        $product = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if (!$product || $product['stock'] < $quantity) {\n            // Not enough stock or product not found\n            header('Location: checkout.php');\n            exit();\n        }\n\n        $total_price += $product['price'] * $quantity;\n    }\n\n    // Insert the order into the orders table\n    $sql = \"INSERT INTO orders (user_name, email, address, product_id, quantity, total_price) \n            VALUES (:name, :email, :address, :product_id, :quantity, :total_price)\";\n\n    foreach ($cart as $product_id => $quantity) {\n        $stmt = $pdo->prepare($sql);\n        $stmt->execute([\n            'name' => $_POST['name'],\n            'email' => $_POST['email'],\n            'address' => $_POST['address'],\n            'product_id' => $product_id,\n            'quantity' => $quantity,\n            'total_price' => $total_price\n        ]);\n    }\n\n    // Clear the cart\n    unset($_SESSION['cart']);\n\n    header('Location: order_confirmation.php');\n} else {\n    header('Location: checkout.php');\n}\n```\n\n### Step 8: Order Confirmation Page\n\nCreate a PHP file (`order_confirmation.php`) to display an order confirmation message.\n\n```php\n<?php\nsession_start();\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Order Confirmation</title>\n</head>\n<body>\n    <h1>Thank You for Your Order!</h1>\n    <p>Your order has been received and will be processed shortly.</p>\n    <a href=\"index.php\">Continue Shopping</a>\n</body>\n</html>\n```\n\n### Step 9: Configure Database Connection\n\nCreate a `config.php` file to handle the database connection.\n\n```php\n<?php\n$host = 'localhost';\n$dbname = 'your_database_name';\n$user = 'your_username';\n$password = 'your_password';\n\ntry {\n    $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $password);\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die('Connection failed: ' . $e->getMessage());\n}\n?>\n```\n\n### Summary\n\nThis implementation provides a basic purchase functionality with the following features:\n\n1. **Product Display**: Displays products from the database.\n2. **Add to Cart**: Allows users to add products to their cart.\n3. **Cart Management**: Shows the contents of the cart and allows removal of items.\n4. **Checkout Process**: Collects shipping information and displays a summary of the order.\n5. **Order Processing**: Inserts orders into the database and confirms successful purchase.\n\n### Notes\n\n- **Security Considerations**: This example uses `htmlspecialchars` to prevent XSS attacks, but you should consider implementing additional security measures such as CSRF protection, input validation, and secure password handling if adding user authentication.\n- **Error Handling**: Basic error handling is included, but you may want to add more robust error messages and logging for a production environment.\n- **Payment Integration**: This example does not include payment processing. You would need to integrate with a payment gateway (e.g., Stripe, PayPal) for real-world transactions.\n\nThis code provides a foundation that you can build upon based on your specific needs and requirements.", "code_blocks": [null, "```php\n<?php\nrequire 'config.php';\n\n// Fetch all products from the database\n$sql = \"SELECT * FROM products\";\n$stmt = $pdo->query($sql);\n$products = $stmt->fetchAll(PDO::FETCH_ASSOC);\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product Store</title>\n    <style>\n        .product {\n            border: 1px solid #ddd;\n            padding: 10px;\n            margin: 5px;\n        }\n        .price {\n            color: red;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <h1>Product Store</h1>\n    <?php foreach ($products as $product): ?>\n        <div class=\"product\">\n            <?php if ($product['image_url']): ?>\n                <img src=\"<?php echo htmlspecialchars($product['image_url'], ENT_QUOTES, 'UTF-8'); ?>\" alt=\"<?php echo htmlspecialchars($product['name'], ENT_QUOTES, 'UTF-8'); ?>\" style=\"max-width: 200px;\">\n            <?php endif; ?>\n            <h3><?php echo htmlspecialchars($product['name'], ENT_QUOTES, 'UTF-8'); ?></h3>\n            <p><?php echo nl2br(htmlspecialchars($product['description'], ENT_QUOTES, 'UTF-8')); ?></p>\n            <p class=\"price\">$<?php echo number_format($product['price'], 2); ?></p>\n            <?php if ($product['stock'] > 0): ?>\n                <form action=\"add_to_cart.php\" method=\"post\">\n                    <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product['id']; ?>\">\n                    <input type=\"number\" name=\"quantity\" min=\"1\" max=\"<?php echo $product['stock']; ?>\" value=\"1\">\n                    <button type=\"submit\">Add to Cart</button>\n                </form>\n            <?php else: ?>\n                <p>Out of Stock</p>\n            <?php endif; ?>\n        </div>\n    <?php endforeach; ?>\n\n    <a href=\"cart.php\">View Cart</a>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\n\nif (isset($_POST['product_id']) && isset($_POST['quantity'])) {\n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n\n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n\n    // Check if the product is already in the cart\n    if (array_key_exists($product_id, $_SESSION['cart'])) {\n        $_SESSION['cart'][$product_id] += $quantity;\n    } else {\n        $_SESSION['cart'][$product_id] = $quantity;\n    }\n\n    header('Location: index.php');\n} else {\n    header('Location: index.php');\n}\n```", "```php\n<?php\nsession_start();\n\nrequire 'config.php';\n\n// Get product details for items in the cart\n$cart = array();\nif (isset($_SESSION['cart'])) {\n    foreach ($_SESSION['cart'] as $product_id => $quantity) {\n        $sql = \"SELECT * FROM products WHERE id = ?\";\n        $stmt = $pdo->prepare($sql);\n        $stmt->execute([$product_id]);\n        $product = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if ($product && $product['stock'] >= $quantity) {\n            $cart[] = array_merge(['quantity' => $quantity], $product);\n        }\n    }\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n    <style>\n        .cart-item {\n            border: 1px solid #ddd;\n            padding: 10px;\n            margin: 5px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Your Shopping Cart</h1>\n    <?php if ($cart): ?>\n        <?php foreach ($cart as $item): ?>\n            <div class=\"cart-item\">\n                <h3><?php echo htmlspecialchars($item['name'], ENT_QUOTES, 'UTF-8'); ?></h3>\n                <p>Quantity: <?php echo $item['quantity']; ?></p>\n                <p>Price: $<?php echo number_format($item['price'], 2); ?></p>\n                <form action=\"remove_from_cart.php\" method=\"post\">\n                    <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $item['id']; ?>\">\n                    <button type=\"submit\">Remove</button>\n                </form>\n            </div>\n        <?php endforeach; ?>\n\n        <h3>Total: $<?php \n            $total = 0;\n            foreach ($cart as $item) {\n                $total += $item['price'] * $item['quantity'];\n            }\n            echo number_format($total, 2); \n        ?></h3>\n        \n        <a href=\"checkout.php\">Proceed to Checkout</a> |\n        <a href=\"index.php\">Continue Shopping</a>\n    <?php else: ?>\n        <p>Your cart is empty.</p>\n        <a href=\"index.php\">Go Back to Store</a>\n    <?php endif; ?>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\n\nif (isset($_POST['product_id'])) {\n    $product_id = $_POST['product_id'];\n\n    if (isset($_SESSION['cart'][$product_id])) {\n        unset($_SESSION['cart'][$product_id]);\n    }\n\n    header('Location: cart.php');\n} else {\n    header('Location: cart.php');\n}\n```", "```php\n<?php\nsession_start();\n\nif (!isset($_SESSION['cart']) || empty($_SESSION['cart'])) {\n    header('Location: index.php');\n}\n\nrequire 'config.php';\n\n// Calculate total price\n$total = 0;\nforeach ($_SESSION['cart'] as $product_id => $quantity) {\n    $sql = \"SELECT * FROM products WHERE id = ?\";\n    $stmt = $pdo->prepare($sql);\n    $stmt->execute([$product_id]);\n    $product = $stmt->fetch(PDO::FETCH_ASSOC);\n\n    if ($product && $product['stock'] >= $quantity) {\n        $total += $product['price'] * $quantity;\n    }\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Checkout</title>\n</head>\n<body>\n    <h1>Checkout</h1>\n    <?php if (!isset($_SESSION['cart']) || empty($_SESSION['cart'])): ?>\n        <p>Your cart is empty.</p>\n        <a href=\"index.php\">Go Back to Store</a>\n    <?php else: ?>\n        <form action=\"process_order.php\" method=\"post\">\n            <div style=\"float: left; width: 50%; margin-right: 20px;\">\n                <h3>Shipping Information</h3>\n                <p>Please fill in your details:</p>\n                <input type=\"text\" name=\"name\" placeholder=\"Full Name\" required><br>\n                <input type=\"email\" name=\"email\" placeholder=\"Email Address\" required><br>\n                <textarea name=\"address\" placeholder=\"Shipping Address\" required></textarea><br>\n            </div>\n\n            <div style=\"float: left; width: 50%; background-color: #f0f0f0;\">\n                <h3>Your Order</h3>\n                <?php foreach ($_SESSION['cart'] as $product_id => $quantity): ?>\n                    <?php \n                        $sql = \"SELECT * FROM products WHERE id = ?\";\n                        $stmt = $pdo->prepare($sql);\n                        $stmt->execute([$product_id]);\n                        $product = $stmt->fetch(PDO::FETCH_ASSOC);\n                    ?>\n                    <p><?php echo htmlspecialchars($product['name'], ENT_QUOTES, 'UTF-8'); ?> x <?php echo $quantity; ?></p>\n                <?php endforeach; ?>\n\n                <h4>Total: $<?php echo number_format($total, 2); ?></h4>\n            </div>\n\n            <br style=\"clear: both;\">\n            <input type=\"submit\" value=\"Place Order\">\n        </form>\n    <?php endif; ?>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\n\nrequire 'config.php';\n\nif (isset($_POST['name'], $_POST['email'], $_POST['address'])) {\n    $cart = $_SESSION['cart'];\n    $total_price = 0;\n\n    foreach ($cart as $product_id => $quantity) {\n        $sql = \"SELECT * FROM products WHERE id = ?\";\n        $stmt = $pdo->prepare($sql);\n        $stmt->execute([$product_id]);\n        $product = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if (!$product || $product['stock'] < $quantity) {\n            // Not enough stock or product not found\n            header('Location: checkout.php');\n            exit();\n        }\n\n        $total_price += $product['price'] * $quantity;\n    }\n\n    // Insert the order into the orders table\n    $sql = \"INSERT INTO orders (user_name, email, address, product_id, quantity, total_price) \n            VALUES (:name, :email, :address, :product_id, :quantity, :total_price)\";\n\n    foreach ($cart as $product_id => $quantity) {\n        $stmt = $pdo->prepare($sql);\n        $stmt->execute([\n            'name' => $_POST['name'],\n            'email' => $_POST['email'],\n            'address' => $_POST['address'],\n            'product_id' => $product_id,\n            'quantity' => $quantity,\n            'total_price' => $total_price\n        ]);\n    }\n\n    // Clear the cart\n    unset($_SESSION['cart']);\n\n    header('Location: order_confirmation.php');\n} else {\n    header('Location: checkout.php');\n}\n```", "```php\n<?php\nsession_start();\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Order Confirmation</title>\n</head>\n<body>\n    <h1>Thank You for Your Order!</h1>\n    <p>Your order has been received and will be processed shortly.</p>\n    <a href=\"index.php\">Continue Shopping</a>\n</body>\n</html>\n```", "```php\n<?php\n$host = 'localhost';\n$dbname = 'your_database_name';\n$user = 'your_username';\n$password = 'your_password';\n\ntry {\n    $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $password);\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die('Connection failed: ' . $e->getMessage());\n}\n?>\n```"]}
