{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, so I need to create a purchase functionality using PHP. Hmm, where do I start? Let me think about what's involved in a purchase process.\n\nFirst, the user should be able to add items to their cart. So, I guess I need a way to display products and let users select quantities. Maybe a simple HTML form with product details and an \"Add to Cart\" button. But wait, how do I handle multiple products? Oh right, each product can have its own form or maybe use JavaScript to dynamically add items.\n\nNext, the cart itself. How do I store the selected items temporarily? Since PHP doesn't retain data between requests unless stored somewhere, I can use either cookies, sessions, or a database. Sessions seem easier and more secure than cookies because they're stored server-side. So, I'll start by initializing a session when the user starts adding items.\n\nWhen an item is added to the cart, it should be stored in the session array. Each product will have details like ID, name, price, and quantity. I need to check if the item already exists in the cart so that I don't add duplicates or overwrite the existing data incorrectly. Maybe when adding a new item, I loop through the cart items to see if the product ID is already there. If yes, update the quantity; otherwise, add it as a new entry.\n\nAfter setting up the cart, users should be able to view their cart contents. That means displaying each item with its details and allowing them to adjust quantities or remove items. So, in PHP, I'll retrieve the session data and loop through it to display each product. Each item can have an input field for quantity with a minus and plus button, maybe using JavaScript to handle the increment/decrement without reloading the page. But wait, if I'm going for a basic setup, maybe just use buttons that trigger form submissions or AJAX calls.\n\nThen comes the checkout process. The user needs to enter their shipping information and confirm the order. So, I'll create a form where they can input their name, email, address, etc. Once submitted, this data should be processed along with the cart items.\n\nProcessing the order involves several steps: validating the input data, calculating the total amount including any applicable taxes or discounts, generating an order ID, and then storing all this information in a database. Oh right, I need to set up a database table for orders that includes columns like order ID, user details, product IDs, quantities, prices, subtotal, tax, total, and the status.\n\nAfter processing, I should display a confirmation message with the order details so the user knows their purchase was successful. Maybe also send them an email receipt as a nice touch, but since this is a basic setup, perhaps that's optional for now.\n\nI need to make sure all the necessary security measures are in place. Sanitizing inputs to prevent SQL injection and XSS attacks is crucial. Also, using prepared statements when interacting with the database would help prevent SQL injection.\n\nWait, what about handling errors? I should check if the cart is empty before proceeding to checkout; otherwise, display an error message. Also, validate that all required fields in the checkout form are filled out correctly.\n\nLet me outline the steps again:\n\n1. Create a products list with add to cart functionality.\n2. Use PHP sessions to store the cart items.\n3. Implement functions to add and remove items from the cart.\n4. Display the cart contents on a separate page.\n5. Set up a checkout form that collects user information.\n6. Process the order, validate data, calculate totals.\n7. Store the order in the database with all necessary details.\n8. Show an order confirmation page.\n\nI think I should start by setting up the HTML structure for displaying products. Each product can be listed with its image, name, description, price, and an \"Add to Cart\" button. Using a loop from PHP to generate these product cards dynamically would be efficient.\n\nFor adding items to the cart, when a user clicks \"Add to Cart,\" it should send the product details to a PHP script that updates the session. The script will check if the item exists in the session array and either add it or update the quantity.\n\nIn the cart.php page, I'll retrieve the session data and display each item. Each row can have the product image, name, quantity input, unit price, subtotal, and a remove button. The total amount is calculated by summing all subtotals and adding tax if applicable.\n\nThe checkout process will involve capturing user information into the order table and the items into an order_items table for better normalization. Or maybe just store each item's details within the same order record as a serialized array, depending on database design preferences.\n\nI also need to handle cases where the cart is empty; perhaps redirecting the user or showing a message prompting them to add items before checking out.\n\nSecurity-wise, I'll ensure that all form inputs are sanitized and validated. Using prepared statements with PDO will help prevent SQL injection. Also, input validation on both client and server sides will enhance security.\n\nTesting each part step by step is important. First, test adding products to the cart and ensuring quantities update correctly. Then, check if removing items works without issues. Next, validate the checkout form submission and ensure orders are correctly stored in the database. Finally, make sure the order confirmation page displays all necessary details accurately.\n\nI think I have a plan. Now, let me try to structure the code accordingly, making sure each part is modular and well-organized.\n</think>\n\nCreating a purchase functionality using PHP involves several steps, including setting up product display, handling cart operations, processing checkout, and managing database interactions. Below is an organized approach with explanations and code snippets for each component.\n\n### Step-by-Step Explanation:\n\n1. **Display Products:**\n   - Create an HTML page to list products.\n   - Use a loop to generate product cards dynamically from the database or predefined array.\n\n2. **Add Items to Cart Using Sessions:**\n   - Initialize a session to store cart items.\n   - When adding an item, check if it exists in the session; update quantity if it does, otherwise add it.\n\n3. **View Cart Contents:**\n   - Retrieve and display items stored in the session.\n   - Allow users to adjust quantities or remove items.\n\n4. **Checkout Process:**\n   - Collect user information via a form.\n   - Validate input data on both client and server sides.\n\n5. **Process Order and Store in Database:**\n   - Calculate total amount, including tax if applicable.\n   - Insert order details into the database using prepared statements for security.\n\n6. **Order Confirmation:**\n   - Display confirmation message with order details.\n   - Optionally send an email receipt.\n\n### Code Examples:\n\n#### 1. Displaying Products (products.php)\n\n```php\n<?php\n// Assuming $products is an array of product data or fetched from the database.\nforeach ($products as $product) {\n    echo \"<div class='product'>\";\n    echo \"<img src='\" . htmlspecialchars($product['image']) . \"' alt='\" . htmlspecialchars($product['name']) . \"'>\";\n    echo \"<h3>\" . htmlspecialchars($product['name']) . \"</h3>\";\n    echo \"<p>\" . htmlspecialchars($product['description']) . \"</p>\";\n    echo \"<p>Price: $\" . number_format($product['price'], 2) . \"</p>\";\n    echo \"<form action='add_to_cart.php' method='post'>\";\n    echo \"<input type='hidden' name='id' value='\" . $product['id'] . \"'>\";\n    echo \"<input type='number' name='quantity' min='1' value='1'>\";\n    echo \"<button type='submit'>Add to Cart</button>\";\n    echo \"</form>\";\n    echo \"</div>\";\n}\n?>\n```\n\n#### 2. Adding Items to Cart (add_to_cart.php)\n\n```php\n<?php\nsession_start();\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $product_id = intval($_POST['id']);\n    $quantity = intval($_POST['quantity']);\n\n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n\n    // Check if product exists in cart\n    if (array_key_exists($product_id, $_SESSION['cart'])) {\n        $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n    } else {\n        // Fetch product details from database or predefined array\n        $products = array(\n            1 => array('name' => 'Product 1', 'price' => 29.99),\n            2 => array('name' => 'Product 2', 'price' => 49.99)\n            // Add more products as needed\n        );\n        \n        if (isset($products[$product_id])) {\n            $product = $products[$product_id];\n            $_SESSION['cart'][$product_id] = array(\n                'id' => $product_id,\n                'name' => $product['name'],\n                'price' => $product['price'],\n                'quantity' => $quantity\n            );\n        }\n    }\n\n    header(\"Location: cart.php\");\n    exit();\n}\n?>\n```\n\n#### 3. Viewing Cart Contents (cart.php)\n\n```php\n<?php\nsession_start();\n\n$total = 0;\n$taxRate = 0.08; // 8% tax\n\nif (!isset($_SESSION['cart'])) {\n    $_SESSION['cart'] = array();\n}\n\nforeach ($_SESSION['cart'] as $item) {\n    $subtotal = $item['price'] * $item['quantity'];\n    echo \"<div class='cart-item'>\";\n    echo \"<h3>\" . htmlspecialchars($item['name']) . \"</h3>\";\n    echo \"<p>Quantity: \" . $item['quantity'] . \"</p>\";\n    echo \"<p>Price: $\" . number_format($item['price'], 2) . \"</p>\";\n    echo \"<p>Subtotal: $\" . number_format($subtotal, 2) . \"</p>\";\n    echo \"<form action='remove_from_cart.php' method='post'>\";\n    echo \"<input type='hidden' name='id' value='\" . $item['id'] . \"'>\";\n    echo \"<button type='submit'>Remove</button>\";\n    echo \"</form>\";\n    echo \"</div>\";\n    \n    $total += $subtotal;\n}\n\n$tax = $total * $taxRate;\n$totalWithTax = $total + $tax;\n\necho \"<div class='cart-total'>\";\necho \"<p>Subtotal: $\" . number_format($total, 2) . \"</p>\";\necho \"<p>Tax: $\" . number_format($tax, 2) . \"</p>\";\necho \"<p>Total: $\" . number_format($totalWithTax, 2) . \"</p>\";\necho \"</div>\";\n\nif (!empty($_SESSION['cart'])) {\n    echo \"<a href='checkout.php' class='checkout-button'>Checkout</a>\";\n} else {\n    echo \"<p>Your cart is empty.</p>\";\n}\n?>\n```\n\n#### 4. Removing Items from Cart (remove_from_cart.php)\n\n```php\n<?php\nsession_start();\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $product_id = intval($_POST['id']);\n    \n    if (isset($_SESSION['cart'][$product_id])) {\n        unset($_SESSION['cart'][$product_id]);\n        $_SESSION['cart'] = array_values($_SESSION['cart']); // Re-index the array\n    }\n    \n    header(\"Location: cart.php\");\n    exit();\n}\n?>\n```\n\n#### 5. Checkout Process (checkout.php)\n\n```php\n<?php\nsession_start();\n\nif (!isset($_SESSION['cart']) || empty($_SESSION['cart'])) {\n    header(\"Location: products.php\");\n    exit();\n}\n\n// Initialize variables for order details\n$orderName = '';\n$orderEmail = '';\n$orderAddress = '';\n$errors = array();\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $orderName = htmlspecialchars(trim($_POST['name']));\n    $orderEmail = htmlspecialchars(trim($_POST['email']));\n    $orderAddress = htmlspecialchars(trim($_POST['address']));\n    \n    // Basic validation\n    if (empty($orderName)) {\n        $errors[] = \"Please enter your name.\";\n    }\n    if (empty($orderEmail) || !filter_var($orderEmail, FILTER_VALIDATE_EMAIL)) {\n        $errors[] = \"Please enter a valid email address.\";\n    }\n    if (empty($orderAddress)) {\n        $errors[] = \"Please enter your shipping address.\";\n    }\n    \n    if (empty($errors)) {\n        // Process the order\n        require_once('database.php');\n        \n        $totalAmount = calculateTotal();\n        $taxRate = 0.08;\n        $subTotal = $totalAmount / (1 + $taxRate);\n        $taxAmount = $totalAmount - $subTotal;\n        \n        try {\n            // Insert order into database\n            $stmt = $pdo->prepare(\"INSERT INTO orders (name, email, address, subtotal, tax, total) \n                                 VALUES (?, ?, ?, ?, ?, ?)\");\n            $stmt->execute([$orderName, $orderEmail, $orderAddress, $subTotal, $taxAmount, $totalAmount]);\n            $orderId = $pdo->lastInsertId();\n            \n            // Insert order items\n            foreach ($_SESSION['cart'] as $item) {\n                $stmt = $pdo->prepare(\"INSERT INTO order_items (order_id, product_id, name, price, quantity)\n                                     VALUES (?, ?, ?, ?, ?)\");\n                $stmt->execute([$orderId, $item['id'], $item['name'], $item['price'], $item['quantity']]);\n            }\n            \n            // Clear cart\n            unset($_SESSION['cart']);\n            \n            header(\"Location: confirmation.php?order_id=$orderId\");\n            exit();\n        } catch (PDOException $e) {\n            die(\"Error processing your order: \" . $e->getMessage());\n        }\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Checkout</title>\n</head>\n<body>\n    <?php if (!empty($errors)): ?>\n        <div class=\"error\">\n            <?php foreach ($errors as $error): ?>\n                <p><?php echo $error; ?></p>\n            <?php endforeach; ?>\n        </div>\n    <?php endif; ?>\n\n    <h1>Checkout</h1>\n    <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" value=\"<?php echo $orderName; ?>\" required>\n\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" value=\"<?php echo $orderEmail; ?>\" required>\n\n        <label for=\"address\">Shipping Address:</label>\n        <textarea id=\"address\" name=\"address\"><?php echo $orderAddress; ?></textarea>\n\n        <button type=\"submit\">Place Order</button>\n    </form>\n</body>\n</html>\n```\n\n#### 6. Order Confirmation (confirmation.php)\n\n```php\n<?php\nsession_start();\n\n$orderId = isset($_GET['order_id']) ? intval($_GET['order_id']) : null;\n\nif (!$orderId) {\n    header(\"Location: products.php\");\n    exit();\n}\n\n// Fetch order details from database\nrequire_once('database.php');\n\ntry {\n    $stmt = $pdo->prepare(\"SELECT * FROM orders WHERE id = ?\");\n    $stmt->execute([$orderId]);\n    $order = $stmt->fetch(PDO::FETCH_ASSOC);\n    \n    if (!$order) {\n        die(\"Invalid order ID.\");\n    }\n} catch (PDOException $e) {\n    die(\"Error fetching order: \" . $e->getMessage());\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Order Confirmation</title>\n</head>\n<body>\n    <h1>Your Order has been Placed!</h1>\n    <p>Order ID: <?php echo $order['id']; ?></p>\n    <p>Name: <?php echo htmlspecialchars($order['name']); ?></p>\n    <p>Email: <?php echo htmlspecialchars($order['email']); ?></p>\n    <p>Address: <?php echo nl2br(htmlspecialchars($order['address'])); ?></p>\n    <p>Subtotal: $<?php echo number_format($order['subtotal'], 2); ?></p>\n    <p>Tax: $<?php echo number_format($order['tax'], 2); ?></p>\n    <p>Total: $<?php echo number_format($order['total'], 2); ?></p>\n    <a href=\"products.php\">Continue Shopping</a>\n</body>\n</html>\n```\n\n### Database Setup:\n\nCreate the necessary tables in your database.\n\n```sql\nCREATE TABLE orders (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    address TEXT NOT NULL,\n    subtotal DECIMAL(10,2) NOT NULL,\n    tax DECIMAL(10,2) NOT NULL,\n    total DECIMAL(10,2) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE order_items (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    price DECIMAL(10,2) NOT NULL,\n    quantity INT NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(id)\n);\n```\n\n### Notes:\n\n- **Security:** Use prepared statements to prevent SQL injection and sanitize inputs.\n- **Error Handling:** Implement try-catch blocks and handle exceptions gracefully.\n- **Session Management:** Ensure sessions are properly started and managed across pages.\n- **Email Receipts:** You can add functionality to send a confirmation email using PHP's `mail()` function or a library like PHPMailer.\n\nThis setup provides a basic but functional purchase process, which can be expanded with additional features such as user authentication, payment gateways, more detailed product descriptions, and a better UI/UX design.", "code_blocks": ["```php\n<?php\n// Assuming $products is an array of product data or fetched from the database.\nforeach ($products as $product) {\n    echo \"<div class='product'>\";\n    echo \"<img src='\" . htmlspecialchars($product['image']) . \"' alt='\" . htmlspecialchars($product['name']) . \"'>\";\n    echo \"<h3>\" . htmlspecialchars($product['name']) . \"</h3>\";\n    echo \"<p>\" . htmlspecialchars($product['description']) . \"</p>\";\n    echo \"<p>Price: $\" . number_format($product['price'], 2) . \"</p>\";\n    echo \"<form action='add_to_cart.php' method='post'>\";\n    echo \"<input type='hidden' name='id' value='\" . $product['id'] . \"'>\";\n    echo \"<input type='number' name='quantity' min='1' value='1'>\";\n    echo \"<button type='submit'>Add to Cart</button>\";\n    echo \"</form>\";\n    echo \"</div>\";\n}\n?>\n```", "```php\n<?php\nsession_start();\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $product_id = intval($_POST['id']);\n    $quantity = intval($_POST['quantity']);\n\n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n\n    // Check if product exists in cart\n    if (array_key_exists($product_id, $_SESSION['cart'])) {\n        $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n    } else {\n        // Fetch product details from database or predefined array\n        $products = array(\n            1 => array('name' => 'Product 1', 'price' => 29.99),\n            2 => array('name' => 'Product 2', 'price' => 49.99)\n            // Add more products as needed\n        );\n        \n        if (isset($products[$product_id])) {\n            $product = $products[$product_id];\n            $_SESSION['cart'][$product_id] = array(\n                'id' => $product_id,\n                'name' => $product['name'],\n                'price' => $product['price'],\n                'quantity' => $quantity\n            );\n        }\n    }\n\n    header(\"Location: cart.php\");\n    exit();\n}\n?>\n```", "```php\n<?php\nsession_start();\n\n$total = 0;\n$taxRate = 0.08; // 8% tax\n\nif (!isset($_SESSION['cart'])) {\n    $_SESSION['cart'] = array();\n}\n\nforeach ($_SESSION['cart'] as $item) {\n    $subtotal = $item['price'] * $item['quantity'];\n    echo \"<div class='cart-item'>\";\n    echo \"<h3>\" . htmlspecialchars($item['name']) . \"</h3>\";\n    echo \"<p>Quantity: \" . $item['quantity'] . \"</p>\";\n    echo \"<p>Price: $\" . number_format($item['price'], 2) . \"</p>\";\n    echo \"<p>Subtotal: $\" . number_format($subtotal, 2) . \"</p>\";\n    echo \"<form action='remove_from_cart.php' method='post'>\";\n    echo \"<input type='hidden' name='id' value='\" . $item['id'] . \"'>\";\n    echo \"<button type='submit'>Remove</button>\";\n    echo \"</form>\";\n    echo \"</div>\";\n    \n    $total += $subtotal;\n}\n\n$tax = $total * $taxRate;\n$totalWithTax = $total + $tax;\n\necho \"<div class='cart-total'>\";\necho \"<p>Subtotal: $\" . number_format($total, 2) . \"</p>\";\necho \"<p>Tax: $\" . number_format($tax, 2) . \"</p>\";\necho \"<p>Total: $\" . number_format($totalWithTax, 2) . \"</p>\";\necho \"</div>\";\n\nif (!empty($_SESSION['cart'])) {\n    echo \"<a href='checkout.php' class='checkout-button'>Checkout</a>\";\n} else {\n    echo \"<p>Your cart is empty.</p>\";\n}\n?>\n```", "```php\n<?php\nsession_start();\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $product_id = intval($_POST['id']);\n    \n    if (isset($_SESSION['cart'][$product_id])) {\n        unset($_SESSION['cart'][$product_id]);\n        $_SESSION['cart'] = array_values($_SESSION['cart']); // Re-index the array\n    }\n    \n    header(\"Location: cart.php\");\n    exit();\n}\n?>\n```", "```php\n<?php\nsession_start();\n\nif (!isset($_SESSION['cart']) || empty($_SESSION['cart'])) {\n    header(\"Location: products.php\");\n    exit();\n}\n\n// Initialize variables for order details\n$orderName = '';\n$orderEmail = '';\n$orderAddress = '';\n$errors = array();\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $orderName = htmlspecialchars(trim($_POST['name']));\n    $orderEmail = htmlspecialchars(trim($_POST['email']));\n    $orderAddress = htmlspecialchars(trim($_POST['address']));\n    \n    // Basic validation\n    if (empty($orderName)) {\n        $errors[] = \"Please enter your name.\";\n    }\n    if (empty($orderEmail) || !filter_var($orderEmail, FILTER_VALIDATE_EMAIL)) {\n        $errors[] = \"Please enter a valid email address.\";\n    }\n    if (empty($orderAddress)) {\n        $errors[] = \"Please enter your shipping address.\";\n    }\n    \n    if (empty($errors)) {\n        // Process the order\n        require_once('database.php');\n        \n        $totalAmount = calculateTotal();\n        $taxRate = 0.08;\n        $subTotal = $totalAmount / (1 + $taxRate);\n        $taxAmount = $totalAmount - $subTotal;\n        \n        try {\n            // Insert order into database\n            $stmt = $pdo->prepare(\"INSERT INTO orders (name, email, address, subtotal, tax, total) \n                                 VALUES (?, ?, ?, ?, ?, ?)\");\n            $stmt->execute([$orderName, $orderEmail, $orderAddress, $subTotal, $taxAmount, $totalAmount]);\n            $orderId = $pdo->lastInsertId();\n            \n            // Insert order items\n            foreach ($_SESSION['cart'] as $item) {\n                $stmt = $pdo->prepare(\"INSERT INTO order_items (order_id, product_id, name, price, quantity)\n                                     VALUES (?, ?, ?, ?, ?)\");\n                $stmt->execute([$orderId, $item['id'], $item['name'], $item['price'], $item['quantity']]);\n            }\n            \n            // Clear cart\n            unset($_SESSION['cart']);\n            \n            header(\"Location: confirmation.php?order_id=$orderId\");\n            exit();\n        } catch (PDOException $e) {\n            die(\"Error processing your order: \" . $e->getMessage());\n        }\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Checkout</title>\n</head>\n<body>\n    <?php if (!empty($errors)): ?>\n        <div class=\"error\">\n            <?php foreach ($errors as $error): ?>\n                <p><?php echo $error; ?></p>\n            <?php endforeach; ?>\n        </div>\n    <?php endif; ?>\n\n    <h1>Checkout</h1>\n    <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER['PHP_SELF']); ?>\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" value=\"<?php echo $orderName; ?>\" required>\n\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" value=\"<?php echo $orderEmail; ?>\" required>\n\n        <label for=\"address\">Shipping Address:</label>\n        <textarea id=\"address\" name=\"address\"><?php echo $orderAddress; ?></textarea>\n\n        <button type=\"submit\">Place Order</button>\n    </form>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\n\n$orderId = isset($_GET['order_id']) ? intval($_GET['order_id']) : null;\n\nif (!$orderId) {\n    header(\"Location: products.php\");\n    exit();\n}\n\n// Fetch order details from database\nrequire_once('database.php');\n\ntry {\n    $stmt = $pdo->prepare(\"SELECT * FROM orders WHERE id = ?\");\n    $stmt->execute([$orderId]);\n    $order = $stmt->fetch(PDO::FETCH_ASSOC);\n    \n    if (!$order) {\n        die(\"Invalid order ID.\");\n    }\n} catch (PDOException $e) {\n    die(\"Error fetching order: \" . $e->getMessage());\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Order Confirmation</title>\n</head>\n<body>\n    <h1>Your Order has been Placed!</h1>\n    <p>Order ID: <?php echo $order['id']; ?></p>\n    <p>Name: <?php echo htmlspecialchars($order['name']); ?></p>\n    <p>Email: <?php echo htmlspecialchars($order['email']); ?></p>\n    <p>Address: <?php echo nl2br(htmlspecialchars($order['address'])); ?></p>\n    <p>Subtotal: $<?php echo number_format($order['subtotal'], 2); ?></p>\n    <p>Tax: $<?php echo number_format($order['tax'], 2); ?></p>\n    <p>Total: $<?php echo number_format($order['total'], 2); ?></p>\n    <a href=\"products.php\">Continue Shopping</a>\n</body>\n</html>\n```", null]}
