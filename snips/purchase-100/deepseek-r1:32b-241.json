{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, so the user wants to create a purchase functionality using PHP. I need to figure out how to approach this. Let me start by understanding what exactly they're asking for. Purchase functionality typically involves allowing users to add items to a cart, review them, and then proceed to checkout.\n\nFirst, I should outline the main components needed. That would include a product display page, an add-to-cart feature, a shopping cart page, and a checkout process. Also, handling the database interactions is crucial, so I'll need to set up tables for products and orders.\n\nI'll begin by designing the database. The products table will store item details like ID, name, price, description, and stock. The orders table will capture each purchase with order ID, product ID, user info, quantity, total price, and purchase date.\n\nNext, I'll create a connection file, db_connection.php, to handle connecting to the MySQL database. This keeps the code organized and secure, as credentials are stored in one place.\n\nFor displaying products, I'll write a function fetch_products() that queries the database and returns all product data. On the frontend, using PHP, I can loop through these results and display each product with an \"Add to Cart\" button. Styling with CSS will make it look presentable.\n\nThe add-to-cart functionality requires a form submission when the button is clicked. Using AJAX via jQuery can help send the request without reloading the page. The backend script, add_to_cart.php, will handle inserting the order into the database. It should check if the product is already in the cart to update quantity or add as new.\n\nOn the shopping cart page, I'll need to display all items a user has added. fetch_cart() function will query the orders table where the user's session ID matches. This displays each item with quantity and total price. Updating quantities can be done via AJAX again, calling update_quantity.php which modifies the database entry.\n\nProcessing payment is another step. A form on the checkout page collects user info and payment details. The backend script, process_payment.php, will validate inputs, check stock availability, deduct stocks, and then redirect to a confirmation page or handle errors if something goes wrong.\n\nI should also consider sessions for tracking logged-in users. Starting a session at the beginning of each script ensures that user data is preserved across pages. Security measures like prepared statements or parameterized queries are important to prevent SQL injection, but I might simplify in this example for clarity.\n\nTesting each part step by step is essential. Making sure adding items works, quantities update correctly, and payments process without issues. Also, checking if stock levels are accurately updated after a purchase.\n\nFinally, providing clear instructions on how to set up the environment, like installing Apache and MySQL, configuring PHP, setting database credentials, and creating tables. This ensures the user can run the code smoothly.\n\nIn summary, breaking down the problem into smaller parts\u2014database setup, product display, cart management, checkout\u2014and handling each with appropriate PHP scripts and AJAX calls should create a functional purchase system.\n</think>\n\nHere's an example of how to implement a purchase functionality using PHP:\n\n### 1. Database Setup\n\nFirst, you'll need to set up your database tables for products and orders.\n\n```sql\nCREATE TABLE `products` (\n    `id` INT AUTO_INCREMENT PRIMARY KEY,\n    `name` VARCHAR(255) NOT NULL,\n    `price` DECIMAL(10, 2) NOT NULL,\n    `description` TEXT,\n    `stock` INT NOT NULL\n);\n\nCREATE TABLE `orders` (\n    `order_id` INT AUTO_INCREMENT PRIMARY KEY,\n    `product_id` INT NOT NULL,\n    `user_id` INT NOT NULL,\n    `quantity` INT NOT NULL,\n    `total_price` DECIMAL(10, 2) NOT NULL,\n    `purchase_date` DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### 2. Database Connection\n\nCreate a file called `db_connection.php`:\n\n```php\n<?php\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'your_database_name';\n\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n?>\n```\n\n### 3. Product Display Page\n\nCreate a file called `products.php`:\n\n```php\n<?php\ninclude('db_connection.php');\n\nfunction fetch_products() {\n    global $conn;\n    $sql = \"SELECT * FROM products\";\n    $result = $conn->query($sql);\n    return $result;\n}\n\n$products = fetch_products();\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product List</title>\n    <style>\n        /* Add your CSS styles here */\n        .product-container {\n            padding: 20px;\n            margin: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <?php while ($row = $products->fetch_assoc()) { ?>\n        <div class=\"product-container\">\n            <h2><?php echo $row['name']; ?></h2>\n            <p><?php echo $row['description']; ?></p>\n            <p>Price: $<?php echo number_format($row['price'], 2); ?></p>\n            <form action=\"add_to_cart.php\" method=\"post\">\n                <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $row['id']; ?>\">\n                <input type=\"number\" name=\"quantity\" min=\"1\" max=\"<?php echo $row['stock']; ?>\" value=\"1\">\n                <button type=\"submit\">Add to Cart</button>\n            </form>\n        </div>\n    <?php } ?>\n</body>\n</html>\n```\n\n### 4. Add to Cart Functionality\n\nCreate a file called `add_to_cart.php`:\n\n```php\n<?php\nsession_start();\ninclude('db_connection.php');\n\nif (isset($_POST['product_id']) && isset($_SESSION['user_id'])) {\n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n    \n    // Check if the product is already in the cart\n    $check_sql = \"SELECT * FROM orders WHERE product_id = ? AND user_id = ?\";\n    $stmt = $conn->prepare($check_sql);\n    $stmt->bind_param(\"ii\", $product_id, $_SESSION['user_id']);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows > 0) {\n        // Update quantity\n        $update_sql = \"UPDATE orders SET quantity = ? WHERE product_id = ? AND user_id = ?\";\n        $stmt = $conn->prepare($update_sql);\n        $stmt->bind_param(\"iii\", $quantity, $product_id, $_SESSION['user_id']);\n        $stmt->execute();\n    } else {\n        // Insert new order\n        $insert_sql = \"INSERT INTO orders (product_id, user_id, quantity, total_price) \n                      VALUES (?, ?, ?, ?)\";\n        $price_sql = \"SELECT price FROM products WHERE id = ?\";\n        $stmt_price = $conn->prepare($price_sql);\n        $stmt_price->bind_param(\"i\", $product_id);\n        $stmt_price->execute();\n        $price_result = $stmt_price->get_result();\n        $price_row = $price_result->fetch_assoc();\n        \n        $total_price = $quantity * $price_row['price'];\n        \n        $stmt = $conn->prepare($insert_sql);\n        $stmt->bind_param(\"iid\", $product_id, $_SESSION['user_id'], $quantity, $total_price);\n        $stmt->execute();\n    }\n    \n    header(\"Location: cart.php\");\n    exit();\n}\n?>\n```\n\n### 5. Cart Page\n\nCreate a file called `cart.php`:\n\n```php\n<?php\nsession_start();\ninclude('db_connection.php');\n\nfunction fetch_cart() {\n    global $conn;\n    if (isset($_SESSION['user_id'])) {\n        $sql = \"SELECT o.*, p.name, p.price \n                FROM orders o \n                JOIN products p ON o.product_id = p.id \n                WHERE o.user_id = ?\";\n        $stmt = $conn->prepare($sql);\n        $stmt->bind_param(\"i\", $_SESSION['user_id']);\n        $stmt->execute();\n        return $stmt->get_result();\n    }\n    return false;\n}\n\n$cart_items = fetch_cart();\n$total = 0;\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n    <style>\n        /* Add your CSS styles here */\n        .cart-container {\n            padding: 20px;\n            margin: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <?php if ($cart_items && $cart_items->num_rows > 0) { ?>\n        <table>\n            <tr>\n                <th>Product</th>\n                <th>Price</th>\n                <th>Quantity</th>\n                <th>Total</th>\n                <th>Action</th>\n            </tr>\n            <?php while ($row = $cart_items->fetch_assoc()) { \n                $total += $row['quantity'] * $row['price'];\n            ?>\n            <tr>\n                <td><?php echo $row['name']; ?></td>\n                <td>$<?php echo number_format($row['price'], 2); ?></td>\n                <td>\n                    <form action=\"update_quantity.php\" method=\"post\">\n                        <input type=\"hidden\" name=\"order_id\" value=\"<?php echo $row['order_id']; ?>\">\n                        <input type=\"number\" name=\"quantity\" min=\"1\" max=\"10\" value=\"<?php echo $row['quantity']; ?>\">\n                        <button type=\"submit\">Update</button>\n                    </form>\n                </td>\n                <td>$<?php echo number_format($row['total_price'], 2); ?></td>\n                <td><a href=\"remove_from_cart.php?order_id=<?php echo $row['order_id']; ?>\">Remove</a></td>\n            </tr>\n            <?php } ?>\n        </table>\n        <h3>Total: $<?php echo number_format($total, 2); ?></h3>\n        <a href=\"checkout.php\">Checkout</a>\n    <?php } else { ?>\n        <p>Your cart is empty.</p>\n    <?php } ?>\n</body>\n</html>\n```\n\n### 6. Checkout Page\n\nCreate a file called `checkout.php`:\n\n```php\n<?php\nsession_start();\ninclude('db_connection.php');\n\nif (!isset($_SESSION['user_id'])) {\n    header(\"Location: login.php\");\n    exit();\n}\n\nfunction get_cart_total() {\n    global $conn;\n    if (isset($_SESSION['user_id'])) {\n        $sql = \"SELECT SUM(total_price) as total \n                FROM orders \n                WHERE user_id = ?\";\n        $stmt = $conn->prepare($sql);\n        $stmt->bind_param(\"i\", $_SESSION['user_id']);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        return $result->fetch_assoc()['total'];\n    }\n    return 0;\n}\n\n$total = get_cart_total();\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Checkout</title>\n</head>\n<body>\n    <h1>Checkout</h1>\n    <form action=\"process_payment.php\" method=\"post\">\n        <div>\n            <label for=\"card_number\">Card Number:</label>\n            <input type=\"text\" id=\"card_number\" name=\"card_number\" required>\n        </div>\n        <div>\n            <label for=\"expiry_date\">Expiry Date:</label>\n            <input type=\"text\" id=\"expiry_date\" name=\"expiry_date\" placeholder=\"MM/YY\" required>\n        </div>\n        <div>\n            <label for=\"cvv\">CVV:</label>\n            <input type=\"text\" id=\"cvv\" name=\"cvv\" required>\n        </div>\n        <div>\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n        </div>\n        <input type=\"hidden\" name=\"total_amount\" value=\"<?php echo $total; ?>\">\n        <button type=\"submit\">Pay Now</button>\n    </form>\n</body>\n</html>\n```\n\n### 7. Payment Processing\n\nCreate a file called `process_payment.php`:\n\n```php\n<?php\nsession_start();\ninclude('db_connection.php');\n\nif (isset($_POST['total_amount']) && isset($_SESSION['user_id'])) {\n    $total_amount = $_POST['total_amount'];\n    \n    // Here you would typically integrate with a payment gateway\n    \n    // For this example, we'll assume the payment was successful\n    // You should add your own payment processing logic here\n    \n    // Update order status in database\n    $update_sql = \"UPDATE orders SET purchase_date = CURRENT_TIMESTAMP WHERE user_id = ?\";\n    $stmt = $conn->prepare($update_sql);\n    $stmt->bind_param(\"i\", $_SESSION['user_id']);\n    $stmt->execute();\n    \n    header(\"Location: payment_success.php\");\n    exit();\n} else {\n    header(\"Location: checkout.php\");\n}\n?>\n```\n\n### 8. Payment Success Page\n\nCreate a file called `payment_success.php`:\n\n```php\n<?php\nsession_start();\ninclude('db_connection.php');\n\nif (!isset($_SESSION['user_id'])) {\n    header(\"Location: login.php\");\n    exit();\n}\n\n// Clear the cart\n$delete_sql = \"DELETE FROM orders WHERE user_id = ?\";\n$stmt = $conn->prepare($delete_sql);\n$stmt->bind_param(\"i\", $_SESSION['user_id']);\n$stmt->execute();\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Payment Successful</title>\n</head>\n<body>\n    <h1>Thank you for your purchase!</h1>\n    <p>Your order has been processed successfully.</p>\n    <a href=\"products.php\">Continue Shopping</a>\n</body>\n</html>\n```\n\n### 9. Update Quantity in Cart\n\nCreate a file called `update_quantity.php`:\n\n```php\n<?php\nsession_start();\ninclude('db_connection.php');\n\nif (isset($_POST['order_id']) && isset($_SESSION['user_id'])) {\n    $order_id = $_POST['order_id'];\n    $quantity = $_POST['quantity'];\n    \n    $sql = \"UPDATE orders SET quantity = ? WHERE order_id = ? AND user_id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"iii\", $quantity, $order_id, $_SESSION['user_id']);\n    $stmt->execute();\n    \n    header(\"Location: cart.php\");\n    exit();\n}\n?>\n```\n\n### 10. Remove from Cart\n\nCreate a file called `remove_from_cart.php`:\n\n```php\n<?php\nsession_start();\ninclude('db_connection.php');\n\nif (isset($_GET['order_id']) && isset($_SESSION['user_id'])) {\n    $order_id = $_GET['order_id'];\n    \n    $sql = \"DELETE FROM orders WHERE order_id = ? AND user_id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"ii\", $order_id, $_SESSION['user_id']);\n    $stmt->execute();\n    \n    header(\"Location: cart.php\");\n    exit();\n}\n?>\n```\n\n### 11. User Authentication\n\nYou'll need to implement user authentication (login and registration) as well. This example assumes that you have a `login.php` and `register.php` file set up with session management.\n\n### How to Use This System\n\n1. Set up your database using the SQL schema provided.\n2. Replace the database connection details in `db_connection.php` with your own.\n3. Create a user authentication system (login/register) to handle sessions.\n4. Test each page and functionality step by step.\n\nThis is a basic implementation of an e-commerce purchase functionality. You should enhance it with additional security measures, error handling, and more features as needed for your specific use case.", "code_blocks": [null, "```php\n<?php\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$dbname = 'your_database_name';\n\n$conn = new mysqli($host, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n?>\n```", "```php\n<?php\ninclude('db_connection.php');\n\nfunction fetch_products() {\n    global $conn;\n    $sql = \"SELECT * FROM products\";\n    $result = $conn->query($sql);\n    return $result;\n}\n\n$products = fetch_products();\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Product List</title>\n    <style>\n        /* Add your CSS styles here */\n        .product-container {\n            padding: 20px;\n            margin: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <?php while ($row = $products->fetch_assoc()) { ?>\n        <div class=\"product-container\">\n            <h2><?php echo $row['name']; ?></h2>\n            <p><?php echo $row['description']; ?></p>\n            <p>Price: $<?php echo number_format($row['price'], 2); ?></p>\n            <form action=\"add_to_cart.php\" method=\"post\">\n                <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $row['id']; ?>\">\n                <input type=\"number\" name=\"quantity\" min=\"1\" max=\"<?php echo $row['stock']; ?>\" value=\"1\">\n                <button type=\"submit\">Add to Cart</button>\n            </form>\n        </div>\n    <?php } ?>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\ninclude('db_connection.php');\n\nif (isset($_POST['product_id']) && isset($_SESSION['user_id'])) {\n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n    \n    // Check if the product is already in the cart\n    $check_sql = \"SELECT * FROM orders WHERE product_id = ? AND user_id = ?\";\n    $stmt = $conn->prepare($check_sql);\n    $stmt->bind_param(\"ii\", $product_id, $_SESSION['user_id']);\n    $stmt->execute();\n    $result = $stmt->get_result();\n\n    if ($result->num_rows > 0) {\n        // Update quantity\n        $update_sql = \"UPDATE orders SET quantity = ? WHERE product_id = ? AND user_id = ?\";\n        $stmt = $conn->prepare($update_sql);\n        $stmt->bind_param(\"iii\", $quantity, $product_id, $_SESSION['user_id']);\n        $stmt->execute();\n    } else {\n        // Insert new order\n        $insert_sql = \"INSERT INTO orders (product_id, user_id, quantity, total_price) \n                      VALUES (?, ?, ?, ?)\";\n        $price_sql = \"SELECT price FROM products WHERE id = ?\";\n        $stmt_price = $conn->prepare($price_sql);\n        $stmt_price->bind_param(\"i\", $product_id);\n        $stmt_price->execute();\n        $price_result = $stmt_price->get_result();\n        $price_row = $price_result->fetch_assoc();\n        \n        $total_price = $quantity * $price_row['price'];\n        \n        $stmt = $conn->prepare($insert_sql);\n        $stmt->bind_param(\"iid\", $product_id, $_SESSION['user_id'], $quantity, $total_price);\n        $stmt->execute();\n    }\n    \n    header(\"Location: cart.php\");\n    exit();\n}\n?>\n```", "```php\n<?php\nsession_start();\ninclude('db_connection.php');\n\nfunction fetch_cart() {\n    global $conn;\n    if (isset($_SESSION['user_id'])) {\n        $sql = \"SELECT o.*, p.name, p.price \n                FROM orders o \n                JOIN products p ON o.product_id = p.id \n                WHERE o.user_id = ?\";\n        $stmt = $conn->prepare($sql);\n        $stmt->bind_param(\"i\", $_SESSION['user_id']);\n        $stmt->execute();\n        return $stmt->get_result();\n    }\n    return false;\n}\n\n$cart_items = fetch_cart();\n$total = 0;\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n    <style>\n        /* Add your CSS styles here */\n        .cart-container {\n            padding: 20px;\n            margin: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <?php if ($cart_items && $cart_items->num_rows > 0) { ?>\n        <table>\n            <tr>\n                <th>Product</th>\n                <th>Price</th>\n                <th>Quantity</th>\n                <th>Total</th>\n                <th>Action</th>\n            </tr>\n            <?php while ($row = $cart_items->fetch_assoc()) { \n                $total += $row['quantity'] * $row['price'];\n            ?>\n            <tr>\n                <td><?php echo $row['name']; ?></td>\n                <td>$<?php echo number_format($row['price'], 2); ?></td>\n                <td>\n                    <form action=\"update_quantity.php\" method=\"post\">\n                        <input type=\"hidden\" name=\"order_id\" value=\"<?php echo $row['order_id']; ?>\">\n                        <input type=\"number\" name=\"quantity\" min=\"1\" max=\"10\" value=\"<?php echo $row['quantity']; ?>\">\n                        <button type=\"submit\">Update</button>\n                    </form>\n                </td>\n                <td>$<?php echo number_format($row['total_price'], 2); ?></td>\n                <td><a href=\"remove_from_cart.php?order_id=<?php echo $row['order_id']; ?>\">Remove</a></td>\n            </tr>\n            <?php } ?>\n        </table>\n        <h3>Total: $<?php echo number_format($total, 2); ?></h3>\n        <a href=\"checkout.php\">Checkout</a>\n    <?php } else { ?>\n        <p>Your cart is empty.</p>\n    <?php } ?>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\ninclude('db_connection.php');\n\nif (!isset($_SESSION['user_id'])) {\n    header(\"Location: login.php\");\n    exit();\n}\n\nfunction get_cart_total() {\n    global $conn;\n    if (isset($_SESSION['user_id'])) {\n        $sql = \"SELECT SUM(total_price) as total \n                FROM orders \n                WHERE user_id = ?\";\n        $stmt = $conn->prepare($sql);\n        $stmt->bind_param(\"i\", $_SESSION['user_id']);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        return $result->fetch_assoc()['total'];\n    }\n    return 0;\n}\n\n$total = get_cart_total();\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Checkout</title>\n</head>\n<body>\n    <h1>Checkout</h1>\n    <form action=\"process_payment.php\" method=\"post\">\n        <div>\n            <label for=\"card_number\">Card Number:</label>\n            <input type=\"text\" id=\"card_number\" name=\"card_number\" required>\n        </div>\n        <div>\n            <label for=\"expiry_date\">Expiry Date:</label>\n            <input type=\"text\" id=\"expiry_date\" name=\"expiry_date\" placeholder=\"MM/YY\" required>\n        </div>\n        <div>\n            <label for=\"cvv\">CVV:</label>\n            <input type=\"text\" id=\"cvv\" name=\"cvv\" required>\n        </div>\n        <div>\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n        </div>\n        <input type=\"hidden\" name=\"total_amount\" value=\"<?php echo $total; ?>\">\n        <button type=\"submit\">Pay Now</button>\n    </form>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\ninclude('db_connection.php');\n\nif (isset($_POST['total_amount']) && isset($_SESSION['user_id'])) {\n    $total_amount = $_POST['total_amount'];\n    \n    // Here you would typically integrate with a payment gateway\n    \n    // For this example, we'll assume the payment was successful\n    // You should add your own payment processing logic here\n    \n    // Update order status in database\n    $update_sql = \"UPDATE orders SET purchase_date = CURRENT_TIMESTAMP WHERE user_id = ?\";\n    $stmt = $conn->prepare($update_sql);\n    $stmt->bind_param(\"i\", $_SESSION['user_id']);\n    $stmt->execute();\n    \n    header(\"Location: payment_success.php\");\n    exit();\n} else {\n    header(\"Location: checkout.php\");\n}\n?>\n```", "```php\n<?php\nsession_start();\ninclude('db_connection.php');\n\nif (!isset($_SESSION['user_id'])) {\n    header(\"Location: login.php\");\n    exit();\n}\n\n// Clear the cart\n$delete_sql = \"DELETE FROM orders WHERE user_id = ?\";\n$stmt = $conn->prepare($delete_sql);\n$stmt->bind_param(\"i\", $_SESSION['user_id']);\n$stmt->execute();\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Payment Successful</title>\n</head>\n<body>\n    <h1>Thank you for your purchase!</h1>\n    <p>Your order has been processed successfully.</p>\n    <a href=\"products.php\">Continue Shopping</a>\n</body>\n</html>\n```", "```php\n<?php\nsession_start();\ninclude('db_connection.php');\n\nif (isset($_POST['order_id']) && isset($_SESSION['user_id'])) {\n    $order_id = $_POST['order_id'];\n    $quantity = $_POST['quantity'];\n    \n    $sql = \"UPDATE orders SET quantity = ? WHERE order_id = ? AND user_id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"iii\", $quantity, $order_id, $_SESSION['user_id']);\n    $stmt->execute();\n    \n    header(\"Location: cart.php\");\n    exit();\n}\n?>\n```", "```php\n<?php\nsession_start();\ninclude('db_connection.php');\n\nif (isset($_GET['order_id']) && isset($_SESSION['user_id'])) {\n    $order_id = $_GET['order_id'];\n    \n    $sql = \"DELETE FROM orders WHERE order_id = ? AND user_id = ?\";\n    $stmt = $conn->prepare($sql);\n    $stmt->bind_param(\"ii\", $order_id, $_SESSION['user_id']);\n    $stmt->execute();\n    \n    header(\"Location: cart.php\");\n    exit();\n}\n?>\n```"]}
