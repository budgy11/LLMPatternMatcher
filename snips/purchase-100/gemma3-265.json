{"prompt": "Create a purchase functionality using php", "llm_output": "```php\n<?php\n\n// This is a simplified example.  A real-world e-commerce application would be much more complex.\n// This example demonstrates the basic structure and concepts.\n\n// Data (simulated database)\n$products = [\n  1 => ['name' => 'T-Shirt', 'price' => 20, 'stock' => 10],\n  2 => ['name' => 'Jeans', 'price' => 50, 'stock' => 5],\n  3 => ['name' => 'Hat', 'price' => 15, 'stock' => 20]\n];\n\n$cart = []; // Array to hold the items in the customer's cart\n\n// Function to display the products\nfunction displayProducts($products) {\n  echo \"<h2>Available Products</h2>\";\n  echo \"<ul>\";\n  foreach ($products as $id => $product) {\n    echo \"<li>\";\n    echo \"<h3>\" . $product['name'] . \"</h3>\";\n    echo \"Price: $\" . $product['price'] . \"<br>\";\n    echo \"Stock: \" . $product['stock'] . \"<br>\";\n    echo \"<form method='post'>\";\n    echo \"<input type='hidden' name='product_id' value='\" . $id . \"'>\";\n    echo \"<button type='submit'>Add to Cart</button>\";\n    echo \"</form>\";\n    echo \"</li>\";\n  }\n  echo \"</ul>\";\n}\n\n// Function to add a product to the cart\nfunction addToCart($product_id, $cart) {\n  if (isset($products[$product_id])) {\n    if ($products[$product_id]['stock'] > 0) {\n      $product = $products[$product_id];\n      $cart[] = $product;\n      $product['stock']--; // Update stock\n      echo \"<p>Added '\" . $product['name'] . \"' to cart.</p>\";\n    } else {\n      echo \"<p>Sorry, this product is out of stock.</p>\";\n    }\n  } else {\n    echo \"<p>Product ID not found.</p>\";\n  }\n}\n\n// Function to display the cart\nfunction displayCart($cart) {\n  echo \"<h2>Your Cart</h2>\";\n  if (empty($cart)) {\n    echo \"<p>Your cart is empty.</p>\";\n  } else {\n    echo \"<ul>\";\n    foreach ($cart as $item) {\n      echo \"<li>\" . $item['name'] . \" - $\" . $item['price'] . \"</li>\";\n    }\n    echo \"</ul>\";\n    // Calculate total price\n    $totalPrice = 0;\n    foreach ($cart as $item) {\n      $totalPrice += $item['price'];\n    }\n    echo \"<p><strong>Total Price: $\" . $totalPrice . \"</strong></p>\";\n  }\n}\n\n// Handle form submission (add to cart)\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  if (isset($_POST['product_id'])) {\n    addToCart($_POST['product_id'], $cart);\n  }\n}\n\n// Display the page\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Simple E-Commerce</title>\n</head>\n<body>\n\n  <h1>Welcome to Our Store</h1>\n\n  <?php displayProducts($products); ?>\n\n  <?php displayCart($cart); ?>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Clearer Function Structure:** Uses functions (`displayProducts`, `addToCart`, `displayCart`) to organize the code.  This makes it much easier to read, understand, and maintain.\n* **Simulated Database:** The `$products` array simulates a database.  In a real application, you would query a database for product information.\n* **Stock Management:** Includes a `stock` property for each product and decrements it when an item is added to the cart. This is crucial for realistic behavior.  The code checks `stock > 0` before adding, preventing the cart from containing more items than are in stock.\n* **Form Handling:** Uses `$_SERVER['REQUEST_METHOD'] == 'POST'` to determine if the form has been submitted.  This is the standard way to handle form submissions in PHP.\n* **`$_POST` Data Handling:**  `$_POST['product_id']` retrieves the product ID from the submitted form.\n* **Cart Display:** The `displayCart` function shows the items in the cart and calculates the total price.\n* **HTML Structure:**  Provides a basic HTML structure for the page, including headings, lists, and a form.\n* **Comments:**  Includes comments to explain the code.\n* **Error Handling:**  Basic error handling included (e.g., checking for product ID not found, out-of-stock).  More robust error handling would be important in a production application.\n* **Security Considerations (Important):**  **This example is *not* secure and should *not* be used in a production environment.**  This simplified version does *not* include:\n    * **Input Validation:**  It doesn't validate the `product_id` to prevent malicious input.  You *must* validate all user input.\n    * **CSRF Protection:**  It's vulnerable to Cross-Site Request Forgery attacks.\n    * **SQL Injection Prevention:** (If using a database)  This example doesn't use a database, but if you did, you would need to use prepared statements or parameterized queries to prevent SQL injection.\n    * **Session Management:**  For a real application, you'd use sessions or cookies to maintain the user's cart contents across multiple pages.\n\nHow to run the code:\n\n1.  **Save the Code:** Save the code as a `.php` file (e.g., `e-commerce.php`).\n2.  **Web Server:** You need a web server (like Apache or Nginx) with PHP installed.\n3.  **Place the File:** Put the `e-commerce.php` file in the document root of your web server (usually `htdocs` or `www`).\n4.  **Access in Browser:** Open your web browser and go to the URL for the file (e.g., `http://localhost/e-commerce.php`).\n\nThis revised example provides a much more complete and understandable foundation for a simple e-commerce application.  Remember the security considerations and adapt it for a real-world application.  Always prioritize security and proper input validation.\n", "code_blocks": ["```php\n<?php\n\n// This is a simplified example.  A real-world e-commerce application would be much more complex.\n// This example demonstrates the basic structure and concepts.\n\n// Data (simulated database)\n$products = [\n  1 => ['name' => 'T-Shirt', 'price' => 20, 'stock' => 10],\n  2 => ['name' => 'Jeans', 'price' => 50, 'stock' => 5],\n  3 => ['name' => 'Hat', 'price' => 15, 'stock' => 20]\n];\n\n$cart = []; // Array to hold the items in the customer's cart\n\n// Function to display the products\nfunction displayProducts($products) {\n  echo \"<h2>Available Products</h2>\";\n  echo \"<ul>\";\n  foreach ($products as $id => $product) {\n    echo \"<li>\";\n    echo \"<h3>\" . $product['name'] . \"</h3>\";\n    echo \"Price: $\" . $product['price'] . \"<br>\";\n    echo \"Stock: \" . $product['stock'] . \"<br>\";\n    echo \"<form method='post'>\";\n    echo \"<input type='hidden' name='product_id' value='\" . $id . \"'>\";\n    echo \"<button type='submit'>Add to Cart</button>\";\n    echo \"</form>\";\n    echo \"</li>\";\n  }\n  echo \"</ul>\";\n}\n\n// Function to add a product to the cart\nfunction addToCart($product_id, $cart) {\n  if (isset($products[$product_id])) {\n    if ($products[$product_id]['stock'] > 0) {\n      $product = $products[$product_id];\n      $cart[] = $product;\n      $product['stock']--; // Update stock\n      echo \"<p>Added '\" . $product['name'] . \"' to cart.</p>\";\n    } else {\n      echo \"<p>Sorry, this product is out of stock.</p>\";\n    }\n  } else {\n    echo \"<p>Product ID not found.</p>\";\n  }\n}\n\n// Function to display the cart\nfunction displayCart($cart) {\n  echo \"<h2>Your Cart</h2>\";\n  if (empty($cart)) {\n    echo \"<p>Your cart is empty.</p>\";\n  } else {\n    echo \"<ul>\";\n    foreach ($cart as $item) {\n      echo \"<li>\" . $item['name'] . \" - $\" . $item['price'] . \"</li>\";\n    }\n    echo \"</ul>\";\n    // Calculate total price\n    $totalPrice = 0;\n    foreach ($cart as $item) {\n      $totalPrice += $item['price'];\n    }\n    echo \"<p><strong>Total Price: $\" . $totalPrice . \"</strong></p>\";\n  }\n}\n\n// Handle form submission (add to cart)\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n  if (isset($_POST['product_id'])) {\n    addToCart($_POST['product_id'], $cart);\n  }\n}\n\n// Display the page\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Simple E-Commerce</title>\n</head>\n<body>\n\n  <h1>Welcome to Our Store</h1>\n\n  <?php displayProducts($products); ?>\n\n  <?php displayCart($cart); ?>\n\n</body>\n</html>\n```"]}
