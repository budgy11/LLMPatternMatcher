{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of how to create a simple purchase functionality using PHP:\n\n**Database Schema**\n\nFirst, let's assume we have the following database schema for our e-commerce application:\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT,\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE orders (\n  id INT PRIMARY KEY,\n  customer_name VARCHAR(255),\n  order_date DATE,\n  total_cost DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n  id INT PRIMARY KEY,\n  order_id INT,\n  product_id INT,\n  quantity INT,\n  FOREIGN KEY (order_id) REFERENCES orders(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n**PHP Code**\n\nNow, let's create a simple purchase functionality using PHP:\n```php\n// Include database connection file\nrequire_once 'db.php';\n\n// Function to add product to cart\nfunction add_product_to_cart($product_id, $quantity) {\n  // Get current user ID (assuming logged in user)\n  $user_id = $_SESSION['user_id'];\n\n  // Check if product exists in cart\n  $cart_products = get_cart_products();\n  foreach ($cart_products as $cp) {\n    if ($cp['product_id'] == $product_id) {\n      // Update quantity if product already in cart\n      update_cart_product_quantity($cp['id'], $quantity);\n      return;\n    }\n  }\n\n  // Add new product to cart\n  $cart_id = insert_cart_product($user_id, $product_id, $quantity);\n\n  // Update order total and save changes\n  update_order_total();\n}\n\n// Function to get products in cart\nfunction get_cart_products() {\n  // Get current user ID (assuming logged in user)\n  $user_id = $_SESSION['user_id'];\n\n  // Retrieve cart products from database\n  $query = \"SELECT * FROM order_items WHERE order_id IN (SELECT id FROM orders WHERE customer_name = ?)\";\n  $stmt = $db->prepare($query);\n  $stmt->execute([$user_id]);\n  return $stmt->fetchAll();\n}\n\n// Function to update product quantity in cart\nfunction update_cart_product_quantity($cart_product_id, $quantity) {\n  // Update quantity of existing cart product\n  $query = \"UPDATE order_items SET quantity = ? WHERE id = ?\";\n  $db->prepare($query)->execute([$quantity, $cart_product_id]);\n}\n\n// Function to insert new product into cart\nfunction insert_cart_product($user_id, $product_id, $quantity) {\n  // Insert new cart product\n  $query = \"INSERT INTO order_items (order_id, product_id, quantity)\n            VALUES ((SELECT id FROM orders WHERE customer_name = ?), ?, ?)\";\n  $db->prepare($query)->execute([$user_id, $product_id, $quantity]);\n  return $db->lastInsertId();\n}\n\n// Function to update total cost of order\nfunction update_order_total() {\n  // Calculate new total cost\n  $total_cost = get_cart_products_total();\n\n  // Update order with new total cost\n  $query = \"UPDATE orders SET total_cost = ? WHERE customer_name = ?\";\n  $db->prepare($query)->execute([$total_cost, $_SESSION['user_id']]);\n}\n\n// Function to calculate total cost of products in cart\nfunction get_cart_products_total() {\n  // Get current user ID (assuming logged in user)\n  $user_id = $_SESSION['user_id'];\n\n  // Retrieve cart products from database\n  $query = \"SELECT SUM(quantity * p.price) AS total FROM order_items oi\n            JOIN products p ON oi.product_id = p.id\n            WHERE oi.order_id IN (SELECT id FROM orders WHERE customer_name = ?)\";\n  $stmt = $db->prepare($query);\n  $stmt->execute([$user_id]);\n  return $stmt->fetch()['total'];\n}\n\n// Function to process payment and save order\nfunction process_payment() {\n  // Get current user ID (assuming logged in user)\n  $user_id = $_SESSION['user_id'];\n\n  // Save new order with total cost\n  $query = \"INSERT INTO orders (customer_name, order_date, total_cost)\n            VALUES (?, ?, ?)\";\n  $db->prepare($query)->execute([$user_id, date('Y-m-d'), get_cart_products_total()]);\n\n  // Insert order items and save changes\n  foreach (get_cart_products() as $cp) {\n    insert_order_item($cp['id'], $cp['product_id']);\n  }\n\n  // Clear cart and reset total cost\n  clear_cart();\n}\n\n// Function to clear cart and reset total cost\nfunction clear_cart() {\n  // Get current user ID (assuming logged in user)\n  $user_id = $_SESSION['user_id'];\n\n  // Delete all order items for current user\n  $query = \"DELETE FROM order_items WHERE order_id IN (SELECT id FROM orders WHERE customer_name = ?)\";\n  $db->prepare($query)->execute([$user_id]);\n\n  // Reset total cost of order\n  update_order_total();\n}\n\n// Function to insert new order item into database\nfunction insert_order_item($order_id, $product_id) {\n  // Insert new order item\n  $query = \"INSERT INTO order_items (order_id, product_id)\n            VALUES (?, ?)\";\n  $db->prepare($query)->execute([$order_id, $product_id]);\n}\n```\nThis code provides basic functionality for adding products to cart, calculating total cost, processing payment, and saving orders. You can extend this example to fit your specific e-commerce requirements.\n\n**Example Use Cases**\n\n1. Adding product to cart:\n```php\nadd_product_to_cart(123, 2); // Add product with ID 123 to cart in quantity of 2\n```\n2. Processing payment and saving order:\n```php\nprocess_payment(); // Save new order with total cost\n```\n3. Clearing cart and resetting total cost:\n```php\nclear_cart(); // Delete all order items for current user and reset total cost\n```\nNote that this example assumes you have already set up a database connection using the `db.php` file, which is not included in this code snippet.\n\nAlso, keep in mind that this is a simplified example and does not include error handling, validation, or security measures. In a real-world e-commerce application, you would need to add additional functionality, such as:\n\n* Handling payment gateways (e.g., Stripe, PayPal)\n* Implementing authentication and authorization\n* Validating user input and product data\n* Adding logging and analytics\n* etc.\n\nPlease let me know if you have any questions or if there's anything else I can help with!", "code_blocks": [null, "```php\n// Include database connection file\nrequire_once 'db.php';\n\n// Function to add product to cart\nfunction add_product_to_cart($product_id, $quantity) {\n  // Get current user ID (assuming logged in user)\n  $user_id = $_SESSION['user_id'];\n\n  // Check if product exists in cart\n  $cart_products = get_cart_products();\n  foreach ($cart_products as $cp) {\n    if ($cp['product_id'] == $product_id) {\n      // Update quantity if product already in cart\n      update_cart_product_quantity($cp['id'], $quantity);\n      return;\n    }\n  }\n\n  // Add new product to cart\n  $cart_id = insert_cart_product($user_id, $product_id, $quantity);\n\n  // Update order total and save changes\n  update_order_total();\n}\n\n// Function to get products in cart\nfunction get_cart_products() {\n  // Get current user ID (assuming logged in user)\n  $user_id = $_SESSION['user_id'];\n\n  // Retrieve cart products from database\n  $query = \"SELECT * FROM order_items WHERE order_id IN (SELECT id FROM orders WHERE customer_name = ?)\";\n  $stmt = $db->prepare($query);\n  $stmt->execute([$user_id]);\n  return $stmt->fetchAll();\n}\n\n// Function to update product quantity in cart\nfunction update_cart_product_quantity($cart_product_id, $quantity) {\n  // Update quantity of existing cart product\n  $query = \"UPDATE order_items SET quantity = ? WHERE id = ?\";\n  $db->prepare($query)->execute([$quantity, $cart_product_id]);\n}\n\n// Function to insert new product into cart\nfunction insert_cart_product($user_id, $product_id, $quantity) {\n  // Insert new cart product\n  $query = \"INSERT INTO order_items (order_id, product_id, quantity)\n            VALUES ((SELECT id FROM orders WHERE customer_name = ?), ?, ?)\";\n  $db->prepare($query)->execute([$user_id, $product_id, $quantity]);\n  return $db->lastInsertId();\n}\n\n// Function to update total cost of order\nfunction update_order_total() {\n  // Calculate new total cost\n  $total_cost = get_cart_products_total();\n\n  // Update order with new total cost\n  $query = \"UPDATE orders SET total_cost = ? WHERE customer_name = ?\";\n  $db->prepare($query)->execute([$total_cost, $_SESSION['user_id']]);\n}\n\n// Function to calculate total cost of products in cart\nfunction get_cart_products_total() {\n  // Get current user ID (assuming logged in user)\n  $user_id = $_SESSION['user_id'];\n\n  // Retrieve cart products from database\n  $query = \"SELECT SUM(quantity * p.price) AS total FROM order_items oi\n            JOIN products p ON oi.product_id = p.id\n            WHERE oi.order_id IN (SELECT id FROM orders WHERE customer_name = ?)\";\n  $stmt = $db->prepare($query);\n  $stmt->execute([$user_id]);\n  return $stmt->fetch()['total'];\n}\n\n// Function to process payment and save order\nfunction process_payment() {\n  // Get current user ID (assuming logged in user)\n  $user_id = $_SESSION['user_id'];\n\n  // Save new order with total cost\n  $query = \"INSERT INTO orders (customer_name, order_date, total_cost)\n            VALUES (?, ?, ?)\";\n  $db->prepare($query)->execute([$user_id, date('Y-m-d'), get_cart_products_total()]);\n\n  // Insert order items and save changes\n  foreach (get_cart_products() as $cp) {\n    insert_order_item($cp['id'], $cp['product_id']);\n  }\n\n  // Clear cart and reset total cost\n  clear_cart();\n}\n\n// Function to clear cart and reset total cost\nfunction clear_cart() {\n  // Get current user ID (assuming logged in user)\n  $user_id = $_SESSION['user_id'];\n\n  // Delete all order items for current user\n  $query = \"DELETE FROM order_items WHERE order_id IN (SELECT id FROM orders WHERE customer_name = ?)\";\n  $db->prepare($query)->execute([$user_id]);\n\n  // Reset total cost of order\n  update_order_total();\n}\n\n// Function to insert new order item into database\nfunction insert_order_item($order_id, $product_id) {\n  // Insert new order item\n  $query = \"INSERT INTO order_items (order_id, product_id)\n            VALUES (?, ?)\";\n  $db->prepare($query)->execute([$order_id, $product_id]);\n}\n```", "```php\nadd_product_to_cart(123, 2); // Add product with ID 123 to cart in quantity of 2\n```", "```php\nprocess_payment(); // Save new order with total cost\n```", "```php\nclear_cart(); // Delete all order items for current user and reset total cost\n```"]}
