{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nAlright, I need to create a purchase functionality using PHP. Let me break down what that entails.\n\nFirst, the user should be able to view available products. So, I'll set up a simple HTML table displaying product details like ID, name, price, and description. Connecting this to a database makes sense, so I'll use MySQL for storing products.\n\nNext, users need a shopping cart. They can add items by clicking an \"Add to Cart\" button next to each product. I'll handle form submissions in PHP, checking if the item was added successfully. If not, display an error message.\n\nThen, displaying the cart contents is important. I'll retrieve the cart data from the session and show it in another table with options to remove items or proceed to checkout. Calculating the total price here will help users know what they're paying.\n\nFor checkout, capturing user details like name, email, address, and payment method is essential. I'll create a form for this, ensuring all fields are required. Once submitted, the order should be processed, saving it into an orders table in the database along with order items.\n\nAfter processing, redirecting the user to a confirmation page makes sense. This page will thank them and display their order details again.\n\nConsidering security, I'll include sanitization functions to clean input data and prevent SQL injection or XSS attacks. Also, setting up proper error handling ensures users know if something goes wrong, like database connection issues.\n\nFinally, I need to structure the code properly, separating HTML and PHP logic for clarity. Testing each part step by step will help catch any bugs early on.\n</think>\n\nHere's an example of a purchase functionality using PHP:\n\n```php\n<?php\nsession_start();\nrequire_once 'db.php';\n\n// Product class\nclass Product {\n    private $id;\n    private $name;\n    private $price;\n    private $description;\n\n    public function __construct($id, $name, $price, $description) {\n        $this->id = $id;\n        $this->name = $name;\n        $this->price = $price;\n        $this->description = $description;\n    }\n\n    public function getId() {\n        return $this->id;\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function getPrice() {\n        return $this->price;\n    }\n\n    public function getDescription() {\n        return $this->description;\n    }\n}\n\n// Shopping cart functionality\nclass ShoppingCart {\n    private $cartItems;\n\n    public function __construct() {\n        if (isset($_SESSION['shoppingCart'])) {\n            $this->cartItems = $_SESSION['shoppingCart'];\n        } else {\n            $this->cartItems = array();\n        }\n    }\n\n    public function addProduct($productId, $quantity) {\n        if (!isset($this->cartItems[$productId])) {\n            $this->cartItems[$productId] = 0;\n        }\n        $this->cartItems[$productId] += $quantity;\n        $_SESSION['shoppingCart'] = $this->cartItems;\n    }\n\n    public function removeProduct($productId) {\n        if (isset($this->cartItems[$productId])) {\n            unset($this->cartItems[$productId]);\n            $_SESSION['shoppingCart'] = $this->cartItems;\n        }\n    }\n\n    public function getCartItems() {\n        return $this->cartItems;\n    }\n\n    public function calculateTotalPrice($products) {\n        $total = 0;\n        foreach ($this->cartItems as $productId => $quantity) {\n            $product = $products[$productId];\n            $total += $product->getPrice() * $quantity;\n        }\n        return $total;\n    }\n}\n\n// Database connection\nclass DB {\n    private static $instance = null;\n\n    public static function getInstance() {\n        if (self::$instance == null) {\n            try {\n                self::$instance = new PDO('mysql:host=localhost;dbname=shopping_cart', 'root', '');\n                self::$instance->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n            } catch (PDOException $e) {\n                die(\"Could not connect to the database: \" . $e->getMessage());\n            }\n        }\n        return self::$instance;\n    }\n\n    private function __construct() {}\n}\n\n// Get products from database\nfunction getProducts() {\n    try {\n        $db = DB::getInstance();\n        $stmt = $db->query(\"SELECT id, name, price, description FROM products\");\n        $products = array();\n\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            $products[$row['id']] = new Product($row['id'], $row['name'], $row['price'], $row['description']);\n        }\n\n        return $products;\n    } catch (PDOException $e) {\n        die(\"Error fetching products: \" . $e->getMessage());\n    }\n}\n\n// Sanitize input\nfunction sanitizeInput($data) {\n    return htmlspecialchars(strip_tags(trim($data)));\n}\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Shopping Cart</title>\n    <style>\n        body { font-family: Arial, sans-serif; }\n        table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n        th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }\n        tr:hover { background-color: #f5f5f5; }\n    </style>\n</head>\n<body>\n    <h2>Available Products</h2>\n    <?php\n    $products = getProducts();\n    if (!empty($products)) {\n        echo \"<table>\";\n        echo \"<tr><th>ID</th><th>Name</th><th>Price</th><th>Description</th><th>Action</th></tr>\";\n        foreach ($products as $product) {\n            echo \"<tr>\";\n            echo \"<td>\" . $product->getId() . \"</td>\";\n            echo \"<td>\" . $product->getName() . \"</td>\";\n            echo \"<td>$\" . number_format($product->getPrice(), 2) . \"</td>\";\n            echo \"<td>\" . $product->getDescription() . \"</td>\";\n            echo \"<td><form action='add_to_cart.php' method='POST'>\";\n            echo \"<input type='hidden' name='productId' value='\" . $product->getId() . \"'>\";\n            echo \"<input type='number' name='quantity' min='1' value='1'>\";\n            echo \"<button type='submit'>Add to Cart</button>\";\n            echo \"</form></td>\";\n            echo \"</tr>\";\n        }\n        echo \"</table>\";\n    } else {\n        echo \"No products available.\";\n    }\n    ?>\n\n    <h2>Your Shopping Cart</h2>\n    <?php\n    $cart = new ShoppingCart();\n    if (!empty($cart->getCartItems())) {\n        echo \"<table>\";\n        echo \"<tr><th>Product ID</th><th>Quantity</th><th>Action</th></tr>\";\n        foreach ($cart->getCartItems() as $productId => $quantity) {\n            $product = $products[$productId];\n            echo \"<tr>\";\n            echo \"<td>\" . $product->getId() . \"</td>\";\n            echo \"<td>\" . $quantity . \"</td>\";\n            echo \"<td><form action='remove_from_cart.php' method='POST'>\";\n            echo \"<input type='hidden' name='productId' value='\" . $product->getId() . \"'>\";\n            echo \"<button type='submit'>Remove</button>\";\n            echo \"</form></td>\";\n            echo \"</tr>\";\n        }\n        echo \"</table>\";\n        \n        // Calculate and display total price\n        $totalPrice = $cart->calculateTotalPrice($products);\n        echo \"<h3>Total Price: $\" . number_format($totalPrice, 2) . \"</h3>\";\n        \n        // Proceed to checkout button\n        echo \"<a href='checkout.php'><button>Proceed to Checkout</button></a>\";\n    } else {\n        echo \"Your cart is empty.\";\n    }\n    ?>\n</body>\n</html>\n\n```\n\nThis code creates a basic shopping cart system with the following features:\n\n1. Displays available products from a database\n2. Allows users to add products to their shopping cart\n3. Shows current items in the shopping cart\n4. Calculates and displays total price of items\n5. Provides an option to remove items from the cart\n6. Includes error handling and input sanitization\n\nTo use this code:\n\n1. Create a MySQL database named `shopping_cart` with a table called `products` containing columns: id, name, price, description\n2. Add some test products to the database\n3. Update the database connection details in the `DB::getInstance()` method (host, dbname, username, password)\n4. Create additional pages for:\n   - Adding items to cart (`add_to_cart.php`)\n   - Removing items from cart (`remove_from_cart.php`)\n   - Checkout functionality (`checkout.php`)\n   \nThis is a basic implementation and you may want to add more features like:\n\n- User authentication\n- Order history\n- Payment integration\n- Product reviews\n- Search and filtering\n- Admin panel for managing products\n- Error handling and validation\n- Security measures (e.g., CSRF protection, SQL injection prevention)\n\nRemember to implement proper security measures and error handling in a production environment.\n\nEach of these additional pages would contain their own PHP logic for handling the specific functionality. For example, `add_to_cart.php` might look like this:\n\n```php\n<?php\nsession_start();\nrequire_once 'db.php';\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    if (isset($_POST['productId']) && isset($_POST['quantity'])) {\n        $productId = intval($_POST['productId']);\n        $quantity = intval($_POST['quantity']);\n\n        // Validate input\n        if ($quantity < 1) {\n            die(\"Quantity must be at least 1.\");\n        }\n\n        // Get products from database\n        try {\n            $db = DB::getInstance();\n            $stmt = $db->query(\"SELECT id, name, price, description FROM products WHERE id = ?\", array($productId));\n            if ($stmt->rowCount() > 0) {\n                $productData = $stmt->fetch(PDO::FETCH_ASSOC);\n                $cart = new ShoppingCart();\n                $cart->addProduct($productId, $quantity);\n                header(\"Location: index.php\");\n                exit;\n            } else {\n                die(\"Product not found.\");\n            }\n        } catch (PDOException $e) {\n            die(\"Error adding product to cart: \" . $e->getMessage());\n        }\n    } else {\n        die(\"Invalid request.\");\n    }\n}\n?>\n```\n\nThis code handles adding products to the shopping cart by validating input, checking if the product exists in the database, and updating the session-based shopping cart.", "code_blocks": ["```php\n<?php\nsession_start();\nrequire_once 'db.php';\n\n// Product class\nclass Product {\n    private $id;\n    private $name;\n    private $price;\n    private $description;\n\n    public function __construct($id, $name, $price, $description) {\n        $this->id = $id;\n        $this->name = $name;\n        $this->price = $price;\n        $this->description = $description;\n    }\n\n    public function getId() {\n        return $this->id;\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function getPrice() {\n        return $this->price;\n    }\n\n    public function getDescription() {\n        return $this->description;\n    }\n}\n\n// Shopping cart functionality\nclass ShoppingCart {\n    private $cartItems;\n\n    public function __construct() {\n        if (isset($_SESSION['shoppingCart'])) {\n            $this->cartItems = $_SESSION['shoppingCart'];\n        } else {\n            $this->cartItems = array();\n        }\n    }\n\n    public function addProduct($productId, $quantity) {\n        if (!isset($this->cartItems[$productId])) {\n            $this->cartItems[$productId] = 0;\n        }\n        $this->cartItems[$productId] += $quantity;\n        $_SESSION['shoppingCart'] = $this->cartItems;\n    }\n\n    public function removeProduct($productId) {\n        if (isset($this->cartItems[$productId])) {\n            unset($this->cartItems[$productId]);\n            $_SESSION['shoppingCart'] = $this->cartItems;\n        }\n    }\n\n    public function getCartItems() {\n        return $this->cartItems;\n    }\n\n    public function calculateTotalPrice($products) {\n        $total = 0;\n        foreach ($this->cartItems as $productId => $quantity) {\n            $product = $products[$productId];\n            $total += $product->getPrice() * $quantity;\n        }\n        return $total;\n    }\n}\n\n// Database connection\nclass DB {\n    private static $instance = null;\n\n    public static function getInstance() {\n        if (self::$instance == null) {\n            try {\n                self::$instance = new PDO('mysql:host=localhost;dbname=shopping_cart', 'root', '');\n                self::$instance->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n            } catch (PDOException $e) {\n                die(\"Could not connect to the database: \" . $e->getMessage());\n            }\n        }\n        return self::$instance;\n    }\n\n    private function __construct() {}\n}\n\n// Get products from database\nfunction getProducts() {\n    try {\n        $db = DB::getInstance();\n        $stmt = $db->query(\"SELECT id, name, price, description FROM products\");\n        $products = array();\n\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            $products[$row['id']] = new Product($row['id'], $row['name'], $row['price'], $row['description']);\n        }\n\n        return $products;\n    } catch (PDOException $e) {\n        die(\"Error fetching products: \" . $e->getMessage());\n    }\n}\n\n// Sanitize input\nfunction sanitizeInput($data) {\n    return htmlspecialchars(strip_tags(trim($data)));\n}\n?>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Shopping Cart</title>\n    <style>\n        body { font-family: Arial, sans-serif; }\n        table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n        th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }\n        tr:hover { background-color: #f5f5f5; }\n    </style>\n</head>\n<body>\n    <h2>Available Products</h2>\n    <?php\n    $products = getProducts();\n    if (!empty($products)) {\n        echo \"<table>\";\n        echo \"<tr><th>ID</th><th>Name</th><th>Price</th><th>Description</th><th>Action</th></tr>\";\n        foreach ($products as $product) {\n            echo \"<tr>\";\n            echo \"<td>\" . $product->getId() . \"</td>\";\n            echo \"<td>\" . $product->getName() . \"</td>\";\n            echo \"<td>$\" . number_format($product->getPrice(), 2) . \"</td>\";\n            echo \"<td>\" . $product->getDescription() . \"</td>\";\n            echo \"<td><form action='add_to_cart.php' method='POST'>\";\n            echo \"<input type='hidden' name='productId' value='\" . $product->getId() . \"'>\";\n            echo \"<input type='number' name='quantity' min='1' value='1'>\";\n            echo \"<button type='submit'>Add to Cart</button>\";\n            echo \"</form></td>\";\n            echo \"</tr>\";\n        }\n        echo \"</table>\";\n    } else {\n        echo \"No products available.\";\n    }\n    ?>\n\n    <h2>Your Shopping Cart</h2>\n    <?php\n    $cart = new ShoppingCart();\n    if (!empty($cart->getCartItems())) {\n        echo \"<table>\";\n        echo \"<tr><th>Product ID</th><th>Quantity</th><th>Action</th></tr>\";\n        foreach ($cart->getCartItems() as $productId => $quantity) {\n            $product = $products[$productId];\n            echo \"<tr>\";\n            echo \"<td>\" . $product->getId() . \"</td>\";\n            echo \"<td>\" . $quantity . \"</td>\";\n            echo \"<td><form action='remove_from_cart.php' method='POST'>\";\n            echo \"<input type='hidden' name='productId' value='\" . $product->getId() . \"'>\";\n            echo \"<button type='submit'>Remove</button>\";\n            echo \"</form></td>\";\n            echo \"</tr>\";\n        }\n        echo \"</table>\";\n        \n        // Calculate and display total price\n        $totalPrice = $cart->calculateTotalPrice($products);\n        echo \"<h3>Total Price: $\" . number_format($totalPrice, 2) . \"</h3>\";\n        \n        // Proceed to checkout button\n        echo \"<a href='checkout.php'><button>Proceed to Checkout</button></a>\";\n    } else {\n        echo \"Your cart is empty.\";\n    }\n    ?>\n</body>\n</html>\n\n```", "```php\n<?php\nsession_start();\nrequire_once 'db.php';\n\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    if (isset($_POST['productId']) && isset($_POST['quantity'])) {\n        $productId = intval($_POST['productId']);\n        $quantity = intval($_POST['quantity']);\n\n        // Validate input\n        if ($quantity < 1) {\n            die(\"Quantity must be at least 1.\");\n        }\n\n        // Get products from database\n        try {\n            $db = DB::getInstance();\n            $stmt = $db->query(\"SELECT id, name, price, description FROM products WHERE id = ?\", array($productId));\n            if ($stmt->rowCount() > 0) {\n                $productData = $stmt->fetch(PDO::FETCH_ASSOC);\n                $cart = new ShoppingCart();\n                $cart->addProduct($productId, $quantity);\n                header(\"Location: index.php\");\n                exit;\n            } else {\n                die(\"Product not found.\");\n            }\n        } catch (PDOException $e) {\n            die(\"Error adding product to cart: \" . $e->getMessage());\n        }\n    } else {\n        die(\"Invalid request.\");\n    }\n}\n?>\n```"]}
