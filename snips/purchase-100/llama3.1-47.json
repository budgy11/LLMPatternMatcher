{"prompt": "Create a purchase cart functionality using php", "llm_output": "Here's an example of how you can create a basic purchase cart functionality in PHP:\n\n**cart.php**\n```php\n<?php\n// Initialize session\nsession_start();\n\n// Define cart array to store items\n$cart = array();\n\n// Function to add item to cart\nfunction add_item_to_cart($item_id, $quantity) {\n  global $cart;\n  if (!isset($cart[$item_id])) {\n    $cart[$item_id] = array('quantity' => $quantity);\n  } else {\n    $cart[$item_id]['quantity'] += $quantity;\n  }\n}\n\n// Function to update cart item quantity\nfunction update_cart_item_quantity($item_id, $new_quantity) {\n  global $cart;\n  if (isset($cart[$item_id])) {\n    $cart[$item_id]['quantity'] = $new_quantity;\n  }\n}\n\n// Function to remove item from cart\nfunction remove_item_from_cart($item_id) {\n  global $cart;\n  unset($cart[$item_id]);\n}\n\n// Function to calculate total cost of items in cart\nfunction calculate_total_cost() {\n  global $cart;\n  $total = 0;\n  foreach ($cart as $item_id => $item) {\n    // Retrieve item price from database or a cache (e.g. using `$items = array(1 => 'Item 1' => 9.99, 2 => 'Item 2' => 19.99);`)\n    $item_price = $items[$item_id];\n    $total += $item_price * $item['quantity'];\n  }\n  return $total;\n}\n\n// Add item to cart\nif (isset($_POST['add_to_cart'])) {\n  $item_id = $_POST['item_id'];\n  $quantity = $_POST['quantity'];\n  add_item_to_cart($item_id, $quantity);\n}\n\n// Update cart item quantity\nif (isset($_POST['update_quantity'])) {\n  $item_id = $_POST['item_id'];\n  $new_quantity = $_POST['new_quantity'];\n  update_cart_item_quantity($item_id, $new_quantity);\n}\n\n// Remove item from cart\nif (isset($_POST['remove_from_cart'])) {\n  $item_id = $_POST['item_id'];\n  remove_item_from_cart($item_id);\n}\n?>\n```\n**cart.html**\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Cart</title>\n</head>\n<body>\n\n  <!-- Display items in cart -->\n  <?php if (!empty($cart)): ?>\n    <h2>Items in Cart:</h2>\n    <ul>\n      <?php foreach ($cart as $item_id => $item): ?>\n        <li>\n          <?= $items[$item_id] ?> (<?= $item['quantity'] ?> x) - $<?= number_format($items[$item_id] * $item['quantity'], 2) ?>\n          <form action=\"\" method=\"post\">\n            <input type=\"hidden\" name=\"update_quantity\" value=\"true\">\n            <input type=\"hidden\" name=\"item_id\" value=\"<?= $item_id ?>\">\n            <input type=\"number\" name=\"new_quantity\" value=\"<?= $item['quantity'] ?>\" min=\"1\">\n            <button type=\"submit\">Update Quantity</button>\n          </form>\n          <form action=\"\" method=\"post\">\n            <input type=\"hidden\" name=\"remove_from_cart\" value=\"true\">\n            <input type=\"hidden\" name=\"item_id\" value=\"<?= $item_id ?>\">\n            <button type=\"submit\">Remove from Cart</button>\n          </form>\n        </li>\n      <?php endforeach; ?>\n    </ul>\n\n  <?php endif; ?>\n\n  <!-- Add item to cart form -->\n  <h2>Add Item to Cart:</h2>\n  <form action=\"\" method=\"post\">\n    <label for=\"item_id\">Item ID:</label>\n    <input type=\"text\" name=\"item_id\" id=\"item_id\"><br><br>\n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" name=\"quantity\" id=\"quantity\" min=\"1\"><br><br>\n    <button type=\"submit\" name=\"add_to_cart\">Add to Cart</button>\n  </form>\n\n  <!-- Display total cost of items in cart -->\n  <?php if (!empty($cart)): ?>\n    <h2>Total Cost:</h2>\n    $<?= number_format(calculate_total_cost(), 2) ?>\n  <?php endif; ?>\n\n</body>\n</html>\n```\n**items.php**\n```php\n<?php\n// Retrieve item prices from database or a cache (e.g. using `$items = array(1 => 'Item 1' => 9.99, 2 => 'Item 2' => 19.99);`)\n$items = array(\n  1 => 'Item 1' => 9.99,\n  2 => 'Item 2' => 19.99\n);\n\n// Retrieve item IDs from database or a cache (e.g. using `$item_ids = array(1, 2);`)\n$item_ids = array(1, 2);\n?>\n```\nThis example uses PHP to store items in an array (`$cart`) and provides functions to add, update, and remove items from the cart. The `calculate_total_cost()` function calculates the total cost of all items in the cart.\n\nThe HTML template displays the items in the cart, allows users to add or remove items, and updates the quantity of each item. The total cost of the items is also displayed.\n\nNote: This example uses a simple array to store the cart contents. In a real-world application, you should use a database or a more robust data storage solution to persist the cart contents across requests.\n\nYou can save this code in separate files (e.g., `cart.php`, `cart.html`, and `items.php`) and include them in your PHP script as needed. Make sure to adjust the file paths and names according to your specific requirements.", "code_blocks": ["```php\n<?php\n// Initialize session\nsession_start();\n\n// Define cart array to store items\n$cart = array();\n\n// Function to add item to cart\nfunction add_item_to_cart($item_id, $quantity) {\n  global $cart;\n  if (!isset($cart[$item_id])) {\n    $cart[$item_id] = array('quantity' => $quantity);\n  } else {\n    $cart[$item_id]['quantity'] += $quantity;\n  }\n}\n\n// Function to update cart item quantity\nfunction update_cart_item_quantity($item_id, $new_quantity) {\n  global $cart;\n  if (isset($cart[$item_id])) {\n    $cart[$item_id]['quantity'] = $new_quantity;\n  }\n}\n\n// Function to remove item from cart\nfunction remove_item_from_cart($item_id) {\n  global $cart;\n  unset($cart[$item_id]);\n}\n\n// Function to calculate total cost of items in cart\nfunction calculate_total_cost() {\n  global $cart;\n  $total = 0;\n  foreach ($cart as $item_id => $item) {\n    // Retrieve item price from database or a cache (e.g. using `$items = array(1 => 'Item 1' => 9.99, 2 => 'Item 2' => 19.99);`)\n    $item_price = $items[$item_id];\n    $total += $item_price * $item['quantity'];\n  }\n  return $total;\n}\n\n// Add item to cart\nif (isset($_POST['add_to_cart'])) {\n  $item_id = $_POST['item_id'];\n  $quantity = $_POST['quantity'];\n  add_item_to_cart($item_id, $quantity);\n}\n\n// Update cart item quantity\nif (isset($_POST['update_quantity'])) {\n  $item_id = $_POST['item_id'];\n  $new_quantity = $_POST['new_quantity'];\n  update_cart_item_quantity($item_id, $new_quantity);\n}\n\n// Remove item from cart\nif (isset($_POST['remove_from_cart'])) {\n  $item_id = $_POST['item_id'];\n  remove_item_from_cart($item_id);\n}\n?>\n```", null, "```php\n<?php\n// Retrieve item prices from database or a cache (e.g. using `$items = array(1 => 'Item 1' => 9.99, 2 => 'Item 2' => 19.99);`)\n$items = array(\n  1 => 'Item 1' => 9.99,\n  2 => 'Item 2' => 19.99\n);\n\n// Retrieve item IDs from database or a cache (e.g. using `$item_ids = array(1, 2);`)\n$item_ids = array(1, 2);\n?>\n```"]}
