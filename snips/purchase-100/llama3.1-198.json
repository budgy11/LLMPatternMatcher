{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of how you can create a simple purchase functionality using PHP. This example will include creating users, products, and managing orders.\n\n**Database Setup**\n\nFirst, let's set up the database structure:\n\n```sql\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(10,2)\n);\n\nCREATE TABLE orders (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT,\n    total DECIMAL(10,2),\n    status VARCHAR(255),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n**PHP Code**\n\nNext, let's create the PHP code for managing users, products, and orders.\n\n```php\n// config.php (database connection settings)\n$host = 'localhost';\n$dbname = 'store';\n$username = 'root';\n$password = '';\n\n// db.php (database connection class)\nclass Database {\n    private $conn;\n\n    public function __construct() {\n        $this->conn = new PDO(\"mysql:host=$GLOBALS['host'];dbname=$GLOBALS['dbname']\", $GLOBALS['username'], $GLOBALS['password']);\n    }\n\n    public function query($sql, $params = array()) {\n        $stmt = $this->conn->prepare($sql);\n        foreach ($params as $key => $val) {\n            $stmt->bindParam($key, $val);\n        }\n        return $stmt->execute();\n    }\n\n    public function fetchAll($sql, $params = array()) {\n        $stmt = $this->conn->prepare($sql);\n        foreach ($params as $key => $val) {\n            $stmt->bindParam($key, $val);\n        }\n        return $stmt->fetchAll();\n    }\n}\n\n// users.php (user management)\nclass Users {\n    private $db;\n\n    public function __construct() {\n        $this->db = new Database();\n    }\n\n    public function create($name, $email) {\n        $sql = \"INSERT INTO users (name, email) VALUES (:name, :email)\";\n        return $this->db->query($sql, array(':name' => $name, ':email' => $email));\n    }\n\n    public function getAll() {\n        $sql = \"SELECT * FROM users\";\n        return $this->db->fetchAll($sql);\n    }\n}\n\n// products.php (product management)\nclass Products {\n    private $db;\n\n    public function __construct() {\n        $this->db = new Database();\n    }\n\n    public function create($name, $price) {\n        $sql = \"INSERT INTO products (name, price) VALUES (:name, :price)\";\n        return $this->db->query($sql, array(':name' => $name, ':price' => $price));\n    }\n\n    public function getAll() {\n        $sql = \"SELECT * FROM products\";\n        return $this->db->fetchAll($sql);\n    }\n}\n\n// orders.php (order management)\nclass Orders {\n    private $db;\n\n    public function __construct() {\n        $this->db = new Database();\n    }\n\n    public function create($user_id, $total, $status) {\n        $sql = \"INSERT INTO orders (user_id, total, status) VALUES (:user_id, :total, :status)\";\n        return $this->db->query($sql, array(':user_id' => $user_id, ':total' => $total, ':status' => $status));\n    }\n\n    public function getAll() {\n        $sql = \"SELECT * FROM orders\";\n        return $this->db->fetchAll($sql);\n    }\n}\n\n// purchase.php (purchase functionality)\nclass Purchase {\n    private $users;\n    private $products;\n    private $orders;\n\n    public function __construct() {\n        $this->users = new Users();\n        $this->products = new Products();\n        $this->orders = new Orders();\n    }\n\n    public function index() {\n        $users = $this->users->getAll();\n        $products = $this->products->getAll();\n        return array('users' => $users, 'products' => $products);\n    }\n\n    public function add_to_cart($user_id, $product_id) {\n        // Add product to cart\n        $sql = \"SELECT * FROM products WHERE id = :id\";\n        $product = $this->db->fetch($sql, array(':id' => $product_id));\n        if ($product) {\n            // Update order total and status\n            $order = $this->orders->getByUser($user_id);\n            if ($order) {\n                $total += $product['price'];\n                $status = 'pending';\n                $this->orders->update($order['id'], array('total' => $total, 'status' => $status));\n            } else {\n                // Create new order\n                $total = $product['price'];\n                $status = 'pending';\n                $new_order = $this->orders->create($user_id, $total, $status);\n            }\n        }\n    }\n\n    public function checkout($user_id) {\n        // Get user's cart products and total price\n        $cart_products = $this->db->fetchAll(\"SELECT * FROM orders WHERE user_id = :id\", array(':id' => $user_id));\n        $total_price = 0;\n        foreach ($cart_products as $product) {\n            $total_price += $product['price'];\n        }\n\n        // Create new order\n        $new_order = $this->orders->create($user_id, $total_price, 'pending');\n\n        // Update product stock and add to order history\n        foreach ($cart_products as $product) {\n            $sql = \"UPDATE products SET stock = stock - 1 WHERE id = :id\";\n            $this->db->query($sql, array(':id' => $product['id']));\n        }\n    }\n\n    public function view_order($order_id) {\n        // Get order details\n        $order = $this->orders->getById($order_id);\n        return $order;\n    }\n}\n```\n\n**Example Usage**\n\n```php\n$purchase = new Purchase();\n$result = $purchase->index();\nprint_r($result);\n\n// Add product to cart\n$user_id = 1;\n$product_id = 1;\n$purchase->add_to_cart($user_id, $product_id);\n\n// Checkout\n$purchase->checkout($user_id);\n\n// View order\n$order_id = 1;\n$order = $purchase->view_order($order_id);\nprint_r($order);\n```\n\nThis example provides a basic purchase functionality using PHP and MySQL. You can extend it to include more features like payment processing, user authentication, and product reviews.\n\nPlease note that this is just an example code and should not be used in production without proper testing, validation, and security measures.", "code_blocks": [null, "```php\n// config.php (database connection settings)\n$host = 'localhost';\n$dbname = 'store';\n$username = 'root';\n$password = '';\n\n// db.php (database connection class)\nclass Database {\n    private $conn;\n\n    public function __construct() {\n        $this->conn = new PDO(\"mysql:host=$GLOBALS['host'];dbname=$GLOBALS['dbname']\", $GLOBALS['username'], $GLOBALS['password']);\n    }\n\n    public function query($sql, $params = array()) {\n        $stmt = $this->conn->prepare($sql);\n        foreach ($params as $key => $val) {\n            $stmt->bindParam($key, $val);\n        }\n        return $stmt->execute();\n    }\n\n    public function fetchAll($sql, $params = array()) {\n        $stmt = $this->conn->prepare($sql);\n        foreach ($params as $key => $val) {\n            $stmt->bindParam($key, $val);\n        }\n        return $stmt->fetchAll();\n    }\n}\n\n// users.php (user management)\nclass Users {\n    private $db;\n\n    public function __construct() {\n        $this->db = new Database();\n    }\n\n    public function create($name, $email) {\n        $sql = \"INSERT INTO users (name, email) VALUES (:name, :email)\";\n        return $this->db->query($sql, array(':name' => $name, ':email' => $email));\n    }\n\n    public function getAll() {\n        $sql = \"SELECT * FROM users\";\n        return $this->db->fetchAll($sql);\n    }\n}\n\n// products.php (product management)\nclass Products {\n    private $db;\n\n    public function __construct() {\n        $this->db = new Database();\n    }\n\n    public function create($name, $price) {\n        $sql = \"INSERT INTO products (name, price) VALUES (:name, :price)\";\n        return $this->db->query($sql, array(':name' => $name, ':price' => $price));\n    }\n\n    public function getAll() {\n        $sql = \"SELECT * FROM products\";\n        return $this->db->fetchAll($sql);\n    }\n}\n\n// orders.php (order management)\nclass Orders {\n    private $db;\n\n    public function __construct() {\n        $this->db = new Database();\n    }\n\n    public function create($user_id, $total, $status) {\n        $sql = \"INSERT INTO orders (user_id, total, status) VALUES (:user_id, :total, :status)\";\n        return $this->db->query($sql, array(':user_id' => $user_id, ':total' => $total, ':status' => $status));\n    }\n\n    public function getAll() {\n        $sql = \"SELECT * FROM orders\";\n        return $this->db->fetchAll($sql);\n    }\n}\n\n// purchase.php (purchase functionality)\nclass Purchase {\n    private $users;\n    private $products;\n    private $orders;\n\n    public function __construct() {\n        $this->users = new Users();\n        $this->products = new Products();\n        $this->orders = new Orders();\n    }\n\n    public function index() {\n        $users = $this->users->getAll();\n        $products = $this->products->getAll();\n        return array('users' => $users, 'products' => $products);\n    }\n\n    public function add_to_cart($user_id, $product_id) {\n        // Add product to cart\n        $sql = \"SELECT * FROM products WHERE id = :id\";\n        $product = $this->db->fetch($sql, array(':id' => $product_id));\n        if ($product) {\n            // Update order total and status\n            $order = $this->orders->getByUser($user_id);\n            if ($order) {\n                $total += $product['price'];\n                $status = 'pending';\n                $this->orders->update($order['id'], array('total' => $total, 'status' => $status));\n            } else {\n                // Create new order\n                $total = $product['price'];\n                $status = 'pending';\n                $new_order = $this->orders->create($user_id, $total, $status);\n            }\n        }\n    }\n\n    public function checkout($user_id) {\n        // Get user's cart products and total price\n        $cart_products = $this->db->fetchAll(\"SELECT * FROM orders WHERE user_id = :id\", array(':id' => $user_id));\n        $total_price = 0;\n        foreach ($cart_products as $product) {\n            $total_price += $product['price'];\n        }\n\n        // Create new order\n        $new_order = $this->orders->create($user_id, $total_price, 'pending');\n\n        // Update product stock and add to order history\n        foreach ($cart_products as $product) {\n            $sql = \"UPDATE products SET stock = stock - 1 WHERE id = :id\";\n            $this->db->query($sql, array(':id' => $product['id']));\n        }\n    }\n\n    public function view_order($order_id) {\n        // Get order details\n        $order = $this->orders->getById($order_id);\n        return $order;\n    }\n}\n```", "```php\n$purchase = new Purchase();\n$result = $purchase->index();\nprint_r($result);\n\n// Add product to cart\n$user_id = 1;\n$product_id = 1;\n$purchase->add_to_cart($user_id, $product_id);\n\n// Checkout\n$purchase->checkout($user_id);\n\n// View order\n$order_id = 1;\n$order = $purchase->view_order($order_id);\nprint_r($order);\n```"]}
