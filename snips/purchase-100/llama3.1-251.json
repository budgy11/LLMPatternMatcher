{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality using PHP. This example assumes that you have already set up a database with the necessary tables for storing products and orders.\n\n**Database Schema:**\n\nLet's assume we have two tables:\n\n1. `products`: stores information about products\n\t* `id` (primary key)\n\t* `name`\n\t* `price`\n2. `orders`: stores information about customer purchases\n\t* `id` (primary key)\n\t* `customer_id` (foreign key referencing the `customers` table)\n\t* `product_id` (foreign key referencing the `products` table)\n\t* `quantity`\n\n**PHP Code:**\n\nWe'll create a `Purchase.php` file that will handle the purchase functionality.\n\n```php\n// Purchase.php\n\nclass Purchase {\n    private $db;\n\n    public function __construct() {\n        // Connect to database\n        $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n    }\n\n    public function addProductToCart($product_id, $quantity) {\n        // Check if product exists and quantity is valid\n        $stmt = $this->db->prepare(\"SELECT * FROM products WHERE id = ?\");\n        $stmt->execute([$product_id]);\n        $product = $stmt->fetch();\n        if (!$product || $product['price'] <= 0) {\n            return array('error' => 'Invalid product or quantity');\n        }\n\n        // Check if product is already in cart\n        $stmt = $this->db->prepare(\"SELECT * FROM orders WHERE customer_id = ? AND product_id = ?\");\n        $stmt->execute([$_SESSION['customer_id'], $product_id]);\n        $order = $stmt->fetch();\n        if ($order) {\n            // Update quantity\n            $updateStmt = $this->db->prepare(\"UPDATE orders SET quantity = quantity + ? WHERE id = ?\");\n            $updateStmt->execute([$quantity, $order['id']]);\n        } else {\n            // Add new order\n            $insertStmt = $this->db->prepare(\"INSERT INTO orders (customer_id, product_id, quantity) VALUES (?, ?, ?)\");\n            $insertStmt->execute([$_SESSION['customer_id'], $product_id, $quantity]);\n        }\n\n        return array('success' => 'Product added to cart');\n    }\n\n    public function checkout() {\n        // Get all products in cart\n        $stmt = $this->db->prepare(\"SELECT * FROM orders WHERE customer_id = ?\");\n        $stmt->execute([$_SESSION['customer_id']]);\n        $orders = $stmt->fetchAll();\n\n        // Calculate total cost\n        $totalCost = 0;\n        foreach ($orders as $order) {\n            $totalCost += $order['product_id'] * $order['quantity'];\n        }\n\n        // Create new order\n        $insertStmt = $this->db->prepare(\"INSERT INTO orders (customer_id, product_id, quantity, total_cost) VALUES (?, ?, ?, ?)\");\n        $insertStmt->execute([$_SESSION['customer_id'], null, 0, $totalCost]);\n\n        return array('success' => 'Order created');\n    }\n}\n```\n\n**Example Use Case:**\n\nTo add a product to cart:\n\n```php\n$purchase = new Purchase();\n$productId = 1;\n$quantity = 2;\n$result = $purchase->addProductToCart($productId, $quantity);\nprint_r($result); // Output: Array ( [success] => Product added to cart )\n```\n\nTo checkout:\n\n```php\n$purchase = new Purchase();\n$result = $purchase->checkout();\nprint_r($result); // Output: Array ( [success] => Order created )\n```\n\nNote that this is a basic example and you should consider implementing additional security measures, such as authentication and authorization. Additionally, the database schema and PHP code can be modified to fit your specific needs.", "code_blocks": ["```php\n// Purchase.php\n\nclass Purchase {\n    private $db;\n\n    public function __construct() {\n        // Connect to database\n        $this->db = new PDO('mysql:host=localhost;dbname=your_database', 'username', 'password');\n    }\n\n    public function addProductToCart($product_id, $quantity) {\n        // Check if product exists and quantity is valid\n        $stmt = $this->db->prepare(\"SELECT * FROM products WHERE id = ?\");\n        $stmt->execute([$product_id]);\n        $product = $stmt->fetch();\n        if (!$product || $product['price'] <= 0) {\n            return array('error' => 'Invalid product or quantity');\n        }\n\n        // Check if product is already in cart\n        $stmt = $this->db->prepare(\"SELECT * FROM orders WHERE customer_id = ? AND product_id = ?\");\n        $stmt->execute([$_SESSION['customer_id'], $product_id]);\n        $order = $stmt->fetch();\n        if ($order) {\n            // Update quantity\n            $updateStmt = $this->db->prepare(\"UPDATE orders SET quantity = quantity + ? WHERE id = ?\");\n            $updateStmt->execute([$quantity, $order['id']]);\n        } else {\n            // Add new order\n            $insertStmt = $this->db->prepare(\"INSERT INTO orders (customer_id, product_id, quantity) VALUES (?, ?, ?)\");\n            $insertStmt->execute([$_SESSION['customer_id'], $product_id, $quantity]);\n        }\n\n        return array('success' => 'Product added to cart');\n    }\n\n    public function checkout() {\n        // Get all products in cart\n        $stmt = $this->db->prepare(\"SELECT * FROM orders WHERE customer_id = ?\");\n        $stmt->execute([$_SESSION['customer_id']]);\n        $orders = $stmt->fetchAll();\n\n        // Calculate total cost\n        $totalCost = 0;\n        foreach ($orders as $order) {\n            $totalCost += $order['product_id'] * $order['quantity'];\n        }\n\n        // Create new order\n        $insertStmt = $this->db->prepare(\"INSERT INTO orders (customer_id, product_id, quantity, total_cost) VALUES (?, ?, ?, ?)\");\n        $insertStmt->execute([$_SESSION['customer_id'], null, 0, $totalCost]);\n\n        return array('success' => 'Order created');\n    }\n}\n```", "```php\n$purchase = new Purchase();\n$productId = 1;\n$quantity = 2;\n$result = $purchase->addProductToCart($productId, $quantity);\nprint_r($result); // Output: Array ( [success] => Product added to cart )\n```", "```php\n$purchase = new Purchase();\n$result = $purchase->checkout();\nprint_r($result); // Output: Array ( [success] => Order created )\n```"]}
