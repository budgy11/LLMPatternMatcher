{"prompt": "Create a purchase cart functionality using php", "llm_output": "**Purchase Cart Functionality in PHP**\n=====================================\n\nThis example demonstrates a basic purchase cart functionality using PHP. We'll create a class called `Cart` that will handle the cart's functionality.\n\n**cart.php**\n```php\nclass Cart {\n  private $items;\n\n  public function __construct() {\n    $this->items = array();\n  }\n\n  /**\n   * Add an item to the cart\n   *\n   * @param string $item_name\n   * @param float $price\n   * @return void\n   */\n  public function addItem($item_name, $price) {\n    $this->items[] = array('name' => $item_name, 'price' => $price);\n  }\n\n  /**\n   * Remove an item from the cart\n   *\n   * @param string $item_name\n   * @return void\n   */\n  public function removeItem($item_name) {\n    foreach ($this->items as $key => $item) {\n      if ($item['name'] == $item_name) {\n        unset($this->items[$key]);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Get the total price of all items in the cart\n   *\n   * @return float\n   */\n  public function getTotalPrice() {\n    $total = 0;\n    foreach ($this->items as $item) {\n      $total += $item['price'];\n    }\n    return $total;\n  }\n\n  /**\n   * Display the contents of the cart\n   *\n   * @return string\n   */\n  public function displayCart() {\n    $output = '<h2>Shopping Cart</h2>';\n    foreach ($this->items as $item) {\n      $output .= sprintf('<p>%s: $%.2f</p>', $item['name'], $item['price']);\n    }\n    return $output;\n  }\n\n  /**\n   * Empty the cart\n   *\n   * @return void\n   */\n  public function emptyCart() {\n    $this->items = array();\n  }\n}\n```\n**Example Usage:**\n```php\n$cart = new Cart();\n\n// Add items to the cart\n$cart->addItem('Apple', 1.99);\n$cart->addItem('Banana', 0.50);\n\n// Display the contents of the cart\necho $cart->displayCart();\n\n// Remove an item from the cart\n$cart->removeItem('Apple');\n\n// Get the total price of all items in the cart\n$totalPrice = $cart->getTotalPrice();\necho sprintf('Total Price: $%.2f', $totalPrice);\n\n// Empty the cart\n$cart->emptyCart();\n```\nThis implementation includes the following features:\n\n*   **Adding Items**: The `addItem` method allows you to add items to the cart. It takes two parameters: `$item_name` and `$price`.\n*   **Removing Items**: The `removeItem` method removes an item from the cart based on its name.\n*   **Total Price Calculation**: The `getTotalPrice` method calculates the total price of all items in the cart.\n*   **Cart Display**: The `displayCart` method returns a formatted string displaying the contents of the cart, including the name and price of each item.\n*   **Empty Cart**: The `emptyCart` method clears the cart by resetting its internal array.\n\nYou can extend this basic implementation to include additional features such as:\n\n*   **Item Quantity Management**: Allow users to add or remove quantities for existing items in their cart.\n*   **Discount and Coupon Handling**: Integrate discount calculations based on specific rules, like \"10% off for orders above $50\" or coupon codes.\n*   **Payment Gateway Integration**: Connect your cart system with a payment gateway (e.g., PayPal, Stripe) to facilitate transactions.", "code_blocks": ["```php\nclass Cart {\n  private $items;\n\n  public function __construct() {\n    $this->items = array();\n  }\n\n  /**\n   * Add an item to the cart\n   *\n   * @param string $item_name\n   * @param float $price\n   * @return void\n   */\n  public function addItem($item_name, $price) {\n    $this->items[] = array('name' => $item_name, 'price' => $price);\n  }\n\n  /**\n   * Remove an item from the cart\n   *\n   * @param string $item_name\n   * @return void\n   */\n  public function removeItem($item_name) {\n    foreach ($this->items as $key => $item) {\n      if ($item['name'] == $item_name) {\n        unset($this->items[$key]);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Get the total price of all items in the cart\n   *\n   * @return float\n   */\n  public function getTotalPrice() {\n    $total = 0;\n    foreach ($this->items as $item) {\n      $total += $item['price'];\n    }\n    return $total;\n  }\n\n  /**\n   * Display the contents of the cart\n   *\n   * @return string\n   */\n  public function displayCart() {\n    $output = '<h2>Shopping Cart</h2>';\n    foreach ($this->items as $item) {\n      $output .= sprintf('<p>%s: $%.2f</p>', $item['name'], $item['price']);\n    }\n    return $output;\n  }\n\n  /**\n   * Empty the cart\n   *\n   * @return void\n   */\n  public function emptyCart() {\n    $this->items = array();\n  }\n}\n```", "```php\n$cart = new Cart();\n\n// Add items to the cart\n$cart->addItem('Apple', 1.99);\n$cart->addItem('Banana', 0.50);\n\n// Display the contents of the cart\necho $cart->displayCart();\n\n// Remove an item from the cart\n$cart->removeItem('Apple');\n\n// Get the total price of all items in the cart\n$totalPrice = $cart->getTotalPrice();\necho sprintf('Total Price: $%.2f', $totalPrice);\n\n// Empty the cart\n$cart->emptyCart();\n```"]}
