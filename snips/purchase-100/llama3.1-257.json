{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality using PHP:\n\n**purchase.php**\n```php\n<?php\n// Configuration\n$cart = array(); // shopping cart\n$prices = array(\n    'product1' => 19.99,\n    'product2' => 29.99,\n    'product3' => 39.99\n);\n\n// Function to add item to cart\nfunction add_item_to_cart($item, $quantity) {\n    global $cart;\n    if (!isset($cart[$item])) {\n        $cart[$item] = array('quantity' => 0);\n    }\n    $cart[$item]['quantity'] += $quantity;\n}\n\n// Function to update quantity of item in cart\nfunction update_quantity_in_cart($item, $new_quantity) {\n    global $cart;\n    if (isset($cart[$item])) {\n        $cart[$item]['quantity'] = $new_quantity;\n    }\n}\n\n// Function to remove item from cart\nfunction remove_item_from_cart($item) {\n    global $cart;\n    unset($cart[$item]);\n}\n\n// Function to calculate total cost of items in cart\nfunction calculate_total_cost() {\n    global $cart, $prices;\n    $total = 0;\n    foreach ($cart as $item => $data) {\n        $total += $prices[$item] * $data['quantity'];\n    }\n    return $total;\n}\n\n// Function to display shopping cart\nfunction display_cart() {\n    global $cart, $prices;\n    echo \"<h2>Shopping Cart</h2>\";\n    foreach ($cart as $item => $data) {\n        echo \"Item: $item (x\" . $data['quantity'] . \") - $\" . number_format($prices[$item] * $data['quantity'], 2) . \"<br>\";\n    }\n    echo \"Total: $\" . number_format(calculate_total_cost(), 2);\n}\n\n// Function to process purchase\nfunction process_purchase() {\n    global $cart, $prices;\n    // Process payment (e.g. Stripe API)\n    // ...\n    // Update database with purchased items\n    // ...\n}\n\n// Add example items to cart\nadd_item_to_cart('product1', 2);\nadd_item_to_cart('product2', 3);\n\n// Display shopping cart\ndisplay_cart();\n\n// Process purchase\nprocess_purchase();\n?>\n```\nThis code defines a basic shopping cart and purchase functionality using PHP. The `$cart` array stores the items in the cart, along with their quantities. The `$prices` array contains the prices of each item.\n\nThe `add_item_to_cart`, `update_quantity_in_cart`, and `remove_item_from_cart` functions allow you to manage the contents of the shopping cart. The `calculate_total_cost` function calculates the total cost of items in the cart, and the `display_cart` function displays the current state of the shopping cart.\n\nThe `process_purchase` function simulates a payment processing system (you would replace this with your own implementation).\n\n**Example Use Cases:**\n\n* Add an item to the cart: `$add_item_to_cart('product1', 2);`\n* Update quantity of item in cart: `$update_quantity_in_cart('product1', 3);`\n* Remove item from cart: `$remove_item_from_cart('product1');`\n* Display shopping cart: `display_cart();`\n* Process purchase: `process_purchase();`\n\nNote that this is a very basic example and does not include features such as:\n\n* User authentication\n* Payment processing (e.g. Stripe API)\n* Database integration\n* Error handling\n\nYou would need to extend this code to suit your specific needs.", "code_blocks": ["```php\n<?php\n// Configuration\n$cart = array(); // shopping cart\n$prices = array(\n    'product1' => 19.99,\n    'product2' => 29.99,\n    'product3' => 39.99\n);\n\n// Function to add item to cart\nfunction add_item_to_cart($item, $quantity) {\n    global $cart;\n    if (!isset($cart[$item])) {\n        $cart[$item] = array('quantity' => 0);\n    }\n    $cart[$item]['quantity'] += $quantity;\n}\n\n// Function to update quantity of item in cart\nfunction update_quantity_in_cart($item, $new_quantity) {\n    global $cart;\n    if (isset($cart[$item])) {\n        $cart[$item]['quantity'] = $new_quantity;\n    }\n}\n\n// Function to remove item from cart\nfunction remove_item_from_cart($item) {\n    global $cart;\n    unset($cart[$item]);\n}\n\n// Function to calculate total cost of items in cart\nfunction calculate_total_cost() {\n    global $cart, $prices;\n    $total = 0;\n    foreach ($cart as $item => $data) {\n        $total += $prices[$item] * $data['quantity'];\n    }\n    return $total;\n}\n\n// Function to display shopping cart\nfunction display_cart() {\n    global $cart, $prices;\n    echo \"<h2>Shopping Cart</h2>\";\n    foreach ($cart as $item => $data) {\n        echo \"Item: $item (x\" . $data['quantity'] . \") - $\" . number_format($prices[$item] * $data['quantity'], 2) . \"<br>\";\n    }\n    echo \"Total: $\" . number_format(calculate_total_cost(), 2);\n}\n\n// Function to process purchase\nfunction process_purchase() {\n    global $cart, $prices;\n    // Process payment (e.g. Stripe API)\n    // ...\n    // Update database with purchased items\n    // ...\n}\n\n// Add example items to cart\nadd_item_to_cart('product1', 2);\nadd_item_to_cart('product2', 3);\n\n// Display shopping cart\ndisplay_cart();\n\n// Process purchase\nprocess_purchase();\n?>\n```"]}
