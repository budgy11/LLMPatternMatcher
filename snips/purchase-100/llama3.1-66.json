{"prompt": "Create a purchase cart functionality using php", "llm_output": "Here's an example of how you can implement a basic purchase cart functionality in PHP. We'll use the following features:\n\n1. Add items to cart\n2. View cart contents\n3. Remove items from cart\n4. Update item quantities\n5. Empty cart\n\n**Note:** This is just a simplified example and doesn't include any database integration, error handling or security measures.\n\n### Cart Class (cart.php)\n```php\nclass Cart {\n    private $items;\n\n    public function __construct() {\n        $this->items = array();\n    }\n\n    public function addItem($product_id, $quantity) {\n        if (!isset($this->items[$product_id])) {\n            $this->items[$product_id] = array('quantity' => 0);\n        }\n        $this->items[$product_id]['quantity'] += $quantity;\n    }\n\n    public function removeItem($product_id) {\n        unset($this->items[$product_id]);\n    }\n\n    public function updateQuantity($product_id, $new_quantity) {\n        if (isset($this->items[$product_id])) {\n            $this->items[$product_id]['quantity'] = $new_quantity;\n        }\n    }\n\n    public function getItems() {\n        return $this->items;\n    }\n\n    public function getTotalCost() {\n        $total_cost = 0;\n        foreach ($this->items as $item) {\n            $total_cost += $item['quantity'] * $this->getProductPrice($item['product_id']);\n        }\n        return $total_cost;\n    }\n\n    private function getProductPrice($product_id) {\n        // For demonstration purposes, assume we have a static array of product prices.\n        // In a real-world application, you'd fetch the price from your database or external API.\n        $products = array(\n            '1' => 9.99,\n            '2' => 19.99,\n            '3' => 29.99\n        );\n        return isset($products[$product_id]) ? $products[$product_id] : 0;\n    }\n}\n```\n### Controller (cart.php)\n```php\nclass CartController {\n    private $cart;\n\n    public function __construct() {\n        $this->cart = new Cart();\n    }\n\n    public function addProductToCart() {\n        if (isset($_POST['product_id']) && isset($_POST['quantity'])) {\n            $product_id = $_POST['product_id'];\n            $quantity = (int) $_POST['quantity'];\n            $this->cart->addItem($product_id, $quantity);\n            echo 'Product added to cart.';\n        } else {\n            echo 'Invalid request.';\n        }\n    }\n\n    public function viewCart() {\n        $items = $this->cart->getItems();\n        echo '<h2>Cart Contents:</h2>';\n        foreach ($items as $item) {\n            echo '<p>ID: ' . $item['product_id'] . ', Quantity: ' . $item['quantity'] . '</p>';\n        }\n        echo '<p>Total Cost: $' . number_format($this->cart->getTotalCost(), 2) . '</p>';\n    }\n\n    public function removeProductFromCart() {\n        if (isset($_POST['product_id'])) {\n            $product_id = $_POST['product_id'];\n            $this->cart->removeItem($product_id);\n            echo 'Product removed from cart.';\n        } else {\n            echo 'Invalid request.';\n        }\n    }\n\n    public function updateQuantity() {\n        if (isset($_POST['product_id']) && isset($_POST['new_quantity'])) {\n            $product_id = $_POST['product_id'];\n            $new_quantity = (int) $_POST['new_quantity'];\n            $this->cart->updateQuantity($product_id, $new_quantity);\n            echo 'Quantity updated.';\n        } else {\n            echo 'Invalid request.';\n        }\n    }\n\n    public function emptyCart() {\n        $this->cart = new Cart();\n        echo 'Cart emptied.';\n    }\n}\n```\n### Example Use Cases\n\n**Add Product to Cart**\n\n1. Create a form that posts the product ID and quantity.\n```html\n<form action=\"cart.php\" method=\"post\">\n    <input type=\"hidden\" name=\"product_id\" value=\"1\">\n    <input type=\"number\" name=\"quantity\" value=\"2\">\n    <button type=\"submit\">Add to Cart</button>\n</form>\n```\n**View Cart**\n\nCreate a page that calls the `viewCart()` method:\n```php\n$cartController = new CartController();\necho $cartController->viewCart();\n```\n**Remove Product from Cart**\n\n1. Create a form that posts the product ID.\n```html\n<form action=\"cart.php\" method=\"post\">\n    <input type=\"hidden\" name=\"product_id\" value=\"1\">\n    <button type=\"submit\">Remove from Cart</button>\n</form>\n```\n2. Call the `removeProductFromCart()` method:\n```php\n$cartController = new CartController();\necho $cartController->removeProductFromCart();\n```\n**Update Quantity**\n\n1. Create a form that posts the product ID and new quantity.\n```html\n<form action=\"cart.php\" method=\"post\">\n    <input type=\"hidden\" name=\"product_id\" value=\"1\">\n    <input type=\"number\" name=\"new_quantity\" value=\"3\">\n    <button type=\"submit\">Update Quantity</button>\n</form>\n```\n2. Call the `updateQuantity()` method:\n```php\n$cartController = new CartController();\necho $cartController->updateQuantity();\n```\n**Empty Cart**\n\nCall the `emptyCart()` method:\n```php\n$cartController = new CartController();\necho $cartController->emptyCart();\n```\nThis is a basic example and you should adapt it to your specific needs. Remember to add error handling, security measures, and database integration as required.", "code_blocks": ["```php\nclass Cart {\n    private $items;\n\n    public function __construct() {\n        $this->items = array();\n    }\n\n    public function addItem($product_id, $quantity) {\n        if (!isset($this->items[$product_id])) {\n            $this->items[$product_id] = array('quantity' => 0);\n        }\n        $this->items[$product_id]['quantity'] += $quantity;\n    }\n\n    public function removeItem($product_id) {\n        unset($this->items[$product_id]);\n    }\n\n    public function updateQuantity($product_id, $new_quantity) {\n        if (isset($this->items[$product_id])) {\n            $this->items[$product_id]['quantity'] = $new_quantity;\n        }\n    }\n\n    public function getItems() {\n        return $this->items;\n    }\n\n    public function getTotalCost() {\n        $total_cost = 0;\n        foreach ($this->items as $item) {\n            $total_cost += $item['quantity'] * $this->getProductPrice($item['product_id']);\n        }\n        return $total_cost;\n    }\n\n    private function getProductPrice($product_id) {\n        // For demonstration purposes, assume we have a static array of product prices.\n        // In a real-world application, you'd fetch the price from your database or external API.\n        $products = array(\n            '1' => 9.99,\n            '2' => 19.99,\n            '3' => 29.99\n        );\n        return isset($products[$product_id]) ? $products[$product_id] : 0;\n    }\n}\n```", "```php\nclass CartController {\n    private $cart;\n\n    public function __construct() {\n        $this->cart = new Cart();\n    }\n\n    public function addProductToCart() {\n        if (isset($_POST['product_id']) && isset($_POST['quantity'])) {\n            $product_id = $_POST['product_id'];\n            $quantity = (int) $_POST['quantity'];\n            $this->cart->addItem($product_id, $quantity);\n            echo 'Product added to cart.';\n        } else {\n            echo 'Invalid request.';\n        }\n    }\n\n    public function viewCart() {\n        $items = $this->cart->getItems();\n        echo '<h2>Cart Contents:</h2>';\n        foreach ($items as $item) {\n            echo '<p>ID: ' . $item['product_id'] . ', Quantity: ' . $item['quantity'] . '</p>';\n        }\n        echo '<p>Total Cost: $' . number_format($this->cart->getTotalCost(), 2) . '</p>';\n    }\n\n    public function removeProductFromCart() {\n        if (isset($_POST['product_id'])) {\n            $product_id = $_POST['product_id'];\n            $this->cart->removeItem($product_id);\n            echo 'Product removed from cart.';\n        } else {\n            echo 'Invalid request.';\n        }\n    }\n\n    public function updateQuantity() {\n        if (isset($_POST['product_id']) && isset($_POST['new_quantity'])) {\n            $product_id = $_POST['product_id'];\n            $new_quantity = (int) $_POST['new_quantity'];\n            $this->cart->updateQuantity($product_id, $new_quantity);\n            echo 'Quantity updated.';\n        } else {\n            echo 'Invalid request.';\n        }\n    }\n\n    public function emptyCart() {\n        $this->cart = new Cart();\n        echo 'Cart emptied.';\n    }\n}\n```", null, "```php\n$cartController = new CartController();\necho $cartController->viewCart();\n```", null, "```php\n$cartController = new CartController();\necho $cartController->removeProductFromCart();\n```", null, "```php\n$cartController = new CartController();\necho $cartController->updateQuantity();\n```", "```php\n$cartController = new CartController();\necho $cartController->emptyCart();\n```"]}
