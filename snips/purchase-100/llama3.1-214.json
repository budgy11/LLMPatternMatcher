{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality using PHP:\n\n**Database Setup**\n\nFirst, let's create a database table to store the purchases:\n```sql\nCREATE TABLE purchases (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT NOT NULL,\n  product_id INT NOT NULL,\n  quantity INT NOT NULL,\n  total_cost DECIMAL(10,2) NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255) NOT NULL,\n  email VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10,2) NOT NULL\n);\n```\n**PHP Code**\n\nNow let's create a PHP script to handle the purchase functionality:\n```php\n// Configuration file (e.g. config.php)\n$db_host = 'localhost';\n$db_username = 'root';\n$db_password = '';\n$db_name = 'store';\n\n// Connect to database\n$conn = new mysqli($db_host, $db_username, $db_password, $db_name);\n\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add a purchase\nfunction add_purchase($user_id, $product_id, $quantity) {\n  global $conn;\n  \n  // Validate input\n  if (!is_numeric($user_id) || !is_numeric($product_id) || !is_numeric($quantity)) {\n    throw new Exception('Invalid input');\n  }\n  \n  // Calculate total cost\n  $total_cost = get_product_price($product_id) * $quantity;\n  \n  // Insert purchase into database\n  $stmt = $conn->prepare(\"INSERT INTO purchases (user_id, product_id, quantity, total_cost)\n                            VALUES (?, ?, ?, ?)\");\n  $stmt->bind_param(\"iiii\", $user_id, $product_id, $quantity, $total_cost);\n  $stmt->execute();\n  \n  // Update product stock\n  update_product_stock($product_id, -$quantity);\n  \n  return true;\n}\n\n// Function to get a product's price\nfunction get_product_price($product_id) {\n  global $conn;\n  \n  // Retrieve product from database\n  $stmt = $conn->prepare(\"SELECT price FROM products WHERE id = ?\");\n  $stmt->bind_param(\"i\", $product_id);\n  $stmt->execute();\n  $result = $stmt->get_result();\n  $row = $result->fetch_assoc();\n  \n  return $row['price'];\n}\n\n// Function to update product stock\nfunction update_product_stock($product_id, $quantity) {\n  global $conn;\n  \n  // Retrieve current stock from database\n  $stmt = $conn->prepare(\"SELECT stock FROM products WHERE id = ?\");\n  $stmt->bind_param(\"i\", $product_id);\n  $stmt->execute();\n  $result = $stmt->get_result();\n  $row = $result->fetch_assoc();\n  \n  // Update stock\n  $new_stock = $row['stock'] - $quantity;\n  $stmt = $conn->prepare(\"UPDATE products SET stock = ? WHERE id = ?\");\n  $stmt->bind_param(\"ii\", $new_stock, $product_id);\n  $stmt->execute();\n}\n\n// Example usage:\ntry {\n  // Add a purchase\n  add_purchase(1, 1, 2);\n  \n  echo \"Purchase added successfully!\";\n} catch (Exception $e) {\n  echo \"Error: \" . $e->getMessage();\n}\n```\nThis code assumes that you have already created the database tables and populated them with some sample data. The `add_purchase` function takes three arguments: `user_id`, `product_id`, and `quantity`. It calculates the total cost of the purchase, inserts a new record into the `purchases` table, and updates the product stock accordingly.\n\nNote that this is a basic example and you should consider implementing additional features such as:\n\n* Authentication and authorization\n* Error handling and logging\n* Data validation and sanitization\n* Security measures (e.g. use of prepared statements, input validation)\n* Caching and performance optimization\n\nAlso, this example uses a simple `mysqli` connection, but in a real-world application you should consider using a more robust database library such as PDO or a framework-specific driver.", "code_blocks": [null, "```php\n// Configuration file (e.g. config.php)\n$db_host = 'localhost';\n$db_username = 'root';\n$db_password = '';\n$db_name = 'store';\n\n// Connect to database\n$conn = new mysqli($db_host, $db_username, $db_password, $db_name);\n\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Function to add a purchase\nfunction add_purchase($user_id, $product_id, $quantity) {\n  global $conn;\n  \n  // Validate input\n  if (!is_numeric($user_id) || !is_numeric($product_id) || !is_numeric($quantity)) {\n    throw new Exception('Invalid input');\n  }\n  \n  // Calculate total cost\n  $total_cost = get_product_price($product_id) * $quantity;\n  \n  // Insert purchase into database\n  $stmt = $conn->prepare(\"INSERT INTO purchases (user_id, product_id, quantity, total_cost)\n                            VALUES (?, ?, ?, ?)\");\n  $stmt->bind_param(\"iiii\", $user_id, $product_id, $quantity, $total_cost);\n  $stmt->execute();\n  \n  // Update product stock\n  update_product_stock($product_id, -$quantity);\n  \n  return true;\n}\n\n// Function to get a product's price\nfunction get_product_price($product_id) {\n  global $conn;\n  \n  // Retrieve product from database\n  $stmt = $conn->prepare(\"SELECT price FROM products WHERE id = ?\");\n  $stmt->bind_param(\"i\", $product_id);\n  $stmt->execute();\n  $result = $stmt->get_result();\n  $row = $result->fetch_assoc();\n  \n  return $row['price'];\n}\n\n// Function to update product stock\nfunction update_product_stock($product_id, $quantity) {\n  global $conn;\n  \n  // Retrieve current stock from database\n  $stmt = $conn->prepare(\"SELECT stock FROM products WHERE id = ?\");\n  $stmt->bind_param(\"i\", $product_id);\n  $stmt->execute();\n  $result = $stmt->get_result();\n  $row = $result->fetch_assoc();\n  \n  // Update stock\n  $new_stock = $row['stock'] - $quantity;\n  $stmt = $conn->prepare(\"UPDATE products SET stock = ? WHERE id = ?\");\n  $stmt->bind_param(\"ii\", $new_stock, $product_id);\n  $stmt->execute();\n}\n\n// Example usage:\ntry {\n  // Add a purchase\n  add_purchase(1, 1, 2);\n  \n  echo \"Purchase added successfully!\";\n} catch (Exception $e) {\n  echo \"Error: \" . $e->getMessage();\n}\n```"]}
