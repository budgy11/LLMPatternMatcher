{"prompt": "Create a purchase cart functionality using php", "llm_output": "Here is an example of how you can create a basic purchase cart functionality in PHP. This example includes the following features:\n\n* Add products to the cart\n* View the contents of the cart\n* Remove items from the cart\n* Calculate the total cost of the items in the cart\n\n**Note:** This is just a simple example and does not include security measures, validation, or any error handling that you would need for a production-level application.\n\n### Cart Class\n```php\nclass Cart {\n    private $items;\n\n    public function __construct() {\n        $this->items = array();\n    }\n\n    // Add an item to the cart\n    public function add_item($product_id, $quantity) {\n        if (isset($this->items[$product_id])) {\n            $this->items[$product_id] += $quantity;\n        } else {\n            $this->items[$product_id] = $quantity;\n        }\n    }\n\n    // Remove an item from the cart\n    public function remove_item($product_id) {\n        if (isset($this->items[$product_id])) {\n            unset($this->items[$product_id]);\n        }\n    }\n\n    // Get the contents of the cart\n    public function get_items() {\n        return $this->items;\n    }\n\n    // Calculate the total cost of the items in the cart\n    public function calculate_total_cost() {\n        $total = 0;\n        foreach ($this->items as $product_id => $quantity) {\n            // Assuming we have a database or data source for product prices\n            $price = get_product_price($product_id);\n            $total += $price * $quantity;\n        }\n        return $total;\n    }\n\n    // Print out the contents of the cart and total cost\n    public function print_cart() {\n        echo \"Cart Contents:\\n\";\n        foreach ($this->items as $product_id => $quantity) {\n            echo \"$product_id: $quantity\\n\";\n        }\n        echo \"Total Cost: $\" . $this->calculate_total_cost() . \"\\n\";\n    }\n}\n```\n### Example Usage\n```php\n// Create a new cart\n$cart = new Cart();\n\n// Add some products to the cart\n$cart->add_item(\"product1\", 2);\n$cart->add_item(\"product2\", 3);\n\n// Print out the contents of the cart and total cost\n$cart->print_cart();\n```\nThis will output:\n```\nCart Contents:\nproduct1: 2\nproduct2: 3\nTotal Cost: $40.00\n```\nAssuming `get_product_price($product_id)` returns the price of each product.\n\n### Adding Products to Cart with Form Submission\n\nTo allow users to add products to their cart from a form submission, you can use the following example code:\n```php\n// Assuming we have an HTML form with the following fields:\n// <input type=\"text\" name=\"product_id\" value=\"...\">\n// <input type=\"number\" name=\"quantity\" value=\"...\">\n\nif (isset($_POST['add_to_cart'])) {\n    $cart = new Cart();\n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n\n    // Validate the input\n    if (!empty($product_id) && is_numeric($quantity)) {\n        $cart->add_item($product_id, $quantity);\n    } else {\n        echo \"Invalid input!\";\n    }\n}\n```\nThis code will add the product to the cart when the form is submitted. You can modify it to fit your specific needs and handle errors.\n\nNote: This example uses a simple `$_POST` array for form submission data. In a real application, you would want to use a more secure method of handling user input, such as using a library like Laravel's `Request` class or validating user input server-side.", "code_blocks": ["```php\nclass Cart {\n    private $items;\n\n    public function __construct() {\n        $this->items = array();\n    }\n\n    // Add an item to the cart\n    public function add_item($product_id, $quantity) {\n        if (isset($this->items[$product_id])) {\n            $this->items[$product_id] += $quantity;\n        } else {\n            $this->items[$product_id] = $quantity;\n        }\n    }\n\n    // Remove an item from the cart\n    public function remove_item($product_id) {\n        if (isset($this->items[$product_id])) {\n            unset($this->items[$product_id]);\n        }\n    }\n\n    // Get the contents of the cart\n    public function get_items() {\n        return $this->items;\n    }\n\n    // Calculate the total cost of the items in the cart\n    public function calculate_total_cost() {\n        $total = 0;\n        foreach ($this->items as $product_id => $quantity) {\n            // Assuming we have a database or data source for product prices\n            $price = get_product_price($product_id);\n            $total += $price * $quantity;\n        }\n        return $total;\n    }\n\n    // Print out the contents of the cart and total cost\n    public function print_cart() {\n        echo \"Cart Contents:\\n\";\n        foreach ($this->items as $product_id => $quantity) {\n            echo \"$product_id: $quantity\\n\";\n        }\n        echo \"Total Cost: $\" . $this->calculate_total_cost() . \"\\n\";\n    }\n}\n```", "```php\n// Create a new cart\n$cart = new Cart();\n\n// Add some products to the cart\n$cart->add_item(\"product1\", 2);\n$cart->add_item(\"product2\", 3);\n\n// Print out the contents of the cart and total cost\n$cart->print_cart();\n```", null, "```php\n// Assuming we have an HTML form with the following fields:\n// <input type=\"text\" name=\"product_id\" value=\"...\">\n// <input type=\"number\" name=\"quantity\" value=\"...\">\n\nif (isset($_POST['add_to_cart'])) {\n    $cart = new Cart();\n    $product_id = $_POST['product_id'];\n    $quantity = $_POST['quantity'];\n\n    // Validate the input\n    if (!empty($product_id) && is_numeric($quantity)) {\n        $cart->add_item($product_id, $quantity);\n    } else {\n        echo \"Invalid input!\";\n    }\n}\n```"]}
