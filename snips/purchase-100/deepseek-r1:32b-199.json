{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, I need to create a purchase functionality using PHP. Let me think about how to approach this.\n\nFirst, the user needs to be logged in. So, I should check if they're authenticated. If not, redirect them to the login page. That makes sense because you don't want unauthorized users making purchases.\n\nNext, I'll need product data. Maybe fetch it from a database. But for now, I can hardcode some products to keep things simple. Each product should have an ID, name, price, and quantity available.\n\nThen, handle the purchase process. The user selects quantities of each product they want. So, on form submission, I'll get POST data with the selected quantities. I need to loop through these and calculate the total cost.\n\nWait, but I also need to check if the requested quantity is available. For example, if a product only has 5 units left and the user tries to buy 10, that's not possible. So, for each item, I'll compare the selected quantity with the available stock. If it's more than what's available, maybe set an error message.\n\nIf all quantities are valid, calculate the total price by multiplying each product's price by its quantity and summing them up. Then, deduct the purchased quantities from the inventory in the database.\n\nBut before updating the database, I should ensure that this process is atomic. Maybe use a transaction to handle the updates so that if something goes wrong midway, it doesn't leave the database in an inconsistent state.\n\nAfter updating the stock, store the purchase details in an orders table. This way, we can keep track of each purchase for future reference.\n\nOnce everything is done, show a confirmation message to the user with their order details. It's good to redirect them after processing to avoid resubmission issues when they refresh the page.\n\nAlso, security is important. I should sanitize any inputs to prevent SQL injection and XSS attacks. Using prepared statements in database queries will help mitigate SQL injection risks.\n\nLet me outline the steps:\n\n1. Check if the user is logged in. If not, redirect to login.\n2. Fetch available products (hardcoded for now).\n3. Display a form where users can select quantities of each product.\n4. On form submission, validate the selected quantities against stock availability.\n5. Calculate the total cost.\n6. Update the database: deduct purchased quantities and record the order.\n7. Show an order confirmation page.\n\nI should also handle any errors gracefully, like if a user tries to buy more than available or if there's a database error. Maybe display error messages on the same page so the user knows what went wrong.\n\nTesting each part step by step would be crucial. First, ensure that the login check works. Then, verify that products are displayed correctly. Next, test form submission with different scenarios\u2014valid quantities, invalid quantities, zero or negative numbers. Make sure the total cost is calculated accurately and that database updates reflect the purchases correctly.\n\nFinally, redirecting after purchase is important to prevent users from submitting the same order multiple times by refreshing the page. Using headers for redirects will handle this effectively.\n\nI think that covers the main points. Now, I'll structure the code accordingly, making sure each part is clear and well-commented for better understanding.\n</think>\n\nHere's an example of a purchase functionality using PHP:\n\n```php\n<?php\n// Configuration\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$db_name = 'purchase_system';\n\ntry {\n    // Create database connection\n    $conn = new PDO(\"mysql:host=$host;dbname=$db_name\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\n// Check if user is logged in\nsession_start();\nif (!isset($_SESSION['user_id'])) {\n    header('Location: login.php');\n    exit;\n}\n\n// Get products from database or define sample products\n$products = [\n    ['id' => 1, 'name' => 'Product A', 'price' => 20.00, 'quantity_available' => 5],\n    ['id' => 2, 'name' => 'Product B', 'price' => 30.00, 'quantity_available' => 10]\n];\n\n// Handle purchase submission\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $order = [];\n    $total_price = 0;\n\n    foreach ($products as $product) {\n        $quantity = isset($_POST[\"qty_{$product['id']}\"]) ? (int)$_POST[\"qty_{$product['id']}\"] : 0;\n        \n        if ($quantity > 0) {\n            // Check if quantity is available\n            if ($quantity > $product['quantity_available']) {\n                die(\"Not enough stock for {$product['name']}\");\n            }\n            \n            $order[] = [\n                'product_id' => $product['id'],\n                'quantity' => $quantity,\n                'price' => $product['price']\n            ];\n            \n            // Calculate total price\n            $total_price += $product['price'] * $quantity;\n        }\n    }\n\n    if (!empty($order)) {\n        try {\n            // Start transaction\n            $conn->beginTransaction();\n            \n            // Insert order into orders table\n            $stmt = $conn->prepare(\"INSERT INTO orders (user_id, total_price) VALUES (:user_id, :total_price)\");\n            $stmt->execute([\n                'user_id' => $_SESSION['user_id'],\n                'total_price' => $total_price\n            ]);\n            \n            $order_id = $conn->lastInsertId();\n            \n            // Insert order details into order_details table\n            foreach ($order as $item) {\n                $stmt = $conn->prepare(\"INSERT INTO order_details (order_id, product_id, quantity, price) VALUES (:order_id, :product_id, :quantity, :price)\");\n                $stmt->execute([\n                    'order_id' => $order_id,\n                    'product_id' => $item['product_id'],\n                    'quantity' => $item['quantity'],\n                    'price' => $item['price']\n                ]);\n                \n                // Update product quantity\n                $conn->prepare(\"UPDATE products SET quantity_available = quantity_available - :quantity WHERE id = :product_id\")\n                     ->execute([\n                         'quantity' => $item['quantity'],\n                         'product_id' => $item['product_id']\n                     ]);\n            }\n            \n            // Commit transaction\n            $conn->commit();\n            \n            // Show confirmation message\n            echo \"Purchase successful! Order ID: {$order_id}<br>\";\n            echo \"Total Price: \\$\" . number_format($total_price, 2);\n            \n            // Redirect to avoid form resubmission\n            header(\"Refresh: 3; url=products.php\");\n        } catch(PDOException $e) {\n            // Rollback transaction in case of error\n            $conn->rollback();\n            die(\"Error processing order: \" . $e->getMessage());\n        }\n    } else {\n        echo \"Please select at least one product to purchase.\";\n    }\n} else {\n    // Display products for selection\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Purchase Products</title>\n</head>\n<body>\n    <h2>Select Products to Purchase:</h2>\n    <form method=\"POST\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">\n        <?php foreach ($products as $product): ?>\n            <div>\n                <strong><?php echo $product['name']; ?></strong><br>\n                Price: \\$<?php echo number_format($product['price'], 2); ?><br>\n                Quantity Available: <?php echo $product['quantity_available']; ?><br>\n                <input type=\"number\" name=\"qty_<?php echo $product['id']; ?>\" min=\"0\">\n            </div><br>\n        <?php endforeach; ?>\n        <button type=\"submit\">Purchase Selected Items</button>\n    </form>\n</body>\n</html>\n<?php\n}\n?>\n```\n\nThis example includes:\n\n1. **Database Connection**: Establishes a connection to the MySQL database using PDO.\n\n2. **User Authentication Check**: Redirects users who are not logged in to the login page.\n\n3. **Product Display**: Shows available products with their prices and quantities.\n\n4. **Order Form Handling**: Processes the form submission when users submit their purchase request.\n\n5. **Purchase Validation**:\n   - Checks if selected quantities are available\n   - Calculates total price\n   - Updates database tables (orders, order_details, product quantities)\n\n6. **Transaction Management**: Uses transactions to ensure data consistency.\n\n7. **Error Handling**: Provides error messages and rolls back transactions in case of errors.\n\nTo use this code:\n\n1. Make sure your database is set up with the necessary tables:\n   - `users` table for user authentication\n   - `products` table for product information\n   - `orders` table to store order details\n   - `order_details` table to store individual line items of each order\n\n2. Adjust the database connection settings according to your environment.\n\n3. Create the necessary HTML templates and pages (login.php, products.php).\n\n4. Implement proper user authentication in login.php.\n\nKey features:\n\n- Secure with transaction management\n- Validates product quantities before purchase\n- Shows confirmation message after successful purchase\n- Prevents duplicate submissions using redirects\n- Includes error handling for database operations\n\nRemember to:\n- Add proper input validation and sanitization\n- Use prepared statements to prevent SQL injection\n- Implement secure password storage in the users table\n- Add additional error handling and user feedback as needed\n- Include CSS styling for better presentation\n- Add more fields (e.g., shipping information, payment methods) as required by your specific use case\n\nThis is a basic example that you can extend based on your project requirements.", "code_blocks": ["```php\n<?php\n// Configuration\n$host = 'localhost';\n$username = 'root';\n$password = '';\n$db_name = 'purchase_system';\n\ntry {\n    // Create database connection\n    $conn = new PDO(\"mysql:host=$host;dbname=$db_name\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\n// Check if user is logged in\nsession_start();\nif (!isset($_SESSION['user_id'])) {\n    header('Location: login.php');\n    exit;\n}\n\n// Get products from database or define sample products\n$products = [\n    ['id' => 1, 'name' => 'Product A', 'price' => 20.00, 'quantity_available' => 5],\n    ['id' => 2, 'name' => 'Product B', 'price' => 30.00, 'quantity_available' => 10]\n];\n\n// Handle purchase submission\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $order = [];\n    $total_price = 0;\n\n    foreach ($products as $product) {\n        $quantity = isset($_POST[\"qty_{$product['id']}\"]) ? (int)$_POST[\"qty_{$product['id']}\"] : 0;\n        \n        if ($quantity > 0) {\n            // Check if quantity is available\n            if ($quantity > $product['quantity_available']) {\n                die(\"Not enough stock for {$product['name']}\");\n            }\n            \n            $order[] = [\n                'product_id' => $product['id'],\n                'quantity' => $quantity,\n                'price' => $product['price']\n            ];\n            \n            // Calculate total price\n            $total_price += $product['price'] * $quantity;\n        }\n    }\n\n    if (!empty($order)) {\n        try {\n            // Start transaction\n            $conn->beginTransaction();\n            \n            // Insert order into orders table\n            $stmt = $conn->prepare(\"INSERT INTO orders (user_id, total_price) VALUES (:user_id, :total_price)\");\n            $stmt->execute([\n                'user_id' => $_SESSION['user_id'],\n                'total_price' => $total_price\n            ]);\n            \n            $order_id = $conn->lastInsertId();\n            \n            // Insert order details into order_details table\n            foreach ($order as $item) {\n                $stmt = $conn->prepare(\"INSERT INTO order_details (order_id, product_id, quantity, price) VALUES (:order_id, :product_id, :quantity, :price)\");\n                $stmt->execute([\n                    'order_id' => $order_id,\n                    'product_id' => $item['product_id'],\n                    'quantity' => $item['quantity'],\n                    'price' => $item['price']\n                ]);\n                \n                // Update product quantity\n                $conn->prepare(\"UPDATE products SET quantity_available = quantity_available - :quantity WHERE id = :product_id\")\n                     ->execute([\n                         'quantity' => $item['quantity'],\n                         'product_id' => $item['product_id']\n                     ]);\n            }\n            \n            // Commit transaction\n            $conn->commit();\n            \n            // Show confirmation message\n            echo \"Purchase successful! Order ID: {$order_id}<br>\";\n            echo \"Total Price: \\$\" . number_format($total_price, 2);\n            \n            // Redirect to avoid form resubmission\n            header(\"Refresh: 3; url=products.php\");\n        } catch(PDOException $e) {\n            // Rollback transaction in case of error\n            $conn->rollback();\n            die(\"Error processing order: \" . $e->getMessage());\n        }\n    } else {\n        echo \"Please select at least one product to purchase.\";\n    }\n} else {\n    // Display products for selection\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Purchase Products</title>\n</head>\n<body>\n    <h2>Select Products to Purchase:</h2>\n    <form method=\"POST\" action=\"<?php echo $_SERVER['PHP_SELF']; ?>\">\n        <?php foreach ($products as $product): ?>\n            <div>\n                <strong><?php echo $product['name']; ?></strong><br>\n                Price: \\$<?php echo number_format($product['price'], 2); ?><br>\n                Quantity Available: <?php echo $product['quantity_available']; ?><br>\n                <input type=\"number\" name=\"qty_<?php echo $product['id']; ?>\" min=\"0\">\n            </div><br>\n        <?php endforeach; ?>\n        <button type=\"submit\">Purchase Selected Items</button>\n    </form>\n</body>\n</html>\n<?php\n}\n?>\n```"]}
