{"prompt": "Create a purchase functionality using php", "llm_output": "```php\n<?php\n\n// Database connection details (replace with your actual values)\n$db_host = \"localhost\";\n$db_name = \"shopping_cart\";\n$db_user = \"your_user\";\n$db_password = \"your_password\";\n\n// Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n\n  // Validate and sanitize inputs\n  $product_name = trim($_POST[\"product_name\"]);\n  $product_price = floatval($_POST[\"product_price\"]);\n  $quantity = intval($_POST[\"quantity\"]);\n\n  //  Input validation (add more as needed!)\n  if (empty($product_name) || $product_price <= 0 || $quantity <= 0) {\n    $error_message = \"Please enter valid product name, price, and quantity.\";\n  } else {\n    // Prepare the SQL statement\n    $sql = \"INSERT INTO products (name, price, quantity) VALUES (?, ?, ?)\";\n\n    // Prepare the statement\n    $stmt = $conn->prepare($sql);\n\n    // Bind parameters\n    $stmt->bind_param(\"sii\", $product_name, $product_price, $quantity);\n\n    // Execute the statement\n    if ($stmt->execute()) {\n      $success_message = \"Product added successfully!\";\n    } else {\n      $error_message = \"Error adding product: \" . $stmt->error;\n    }\n\n    // Close the statement\n    $stmt->close();\n  }\n\n}\n\n// Establish database connection\n$conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n// Check connection\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Purchase Functionality</title>\n  <style>\n    body {\n      font-family: sans-serif;\n    }\n    .container {\n      width: 80%;\n      margin: 0 auto;\n      padding: 20px;\n      border: 1px solid #ccc;\n    }\n    .form-group {\n      margin-bottom: 15px;\n    }\n    label {\n      display: block;\n      margin-bottom: 5px;\n    }\n    input[type=\"text\"],\n    input[type=\"number\"] {\n      width: 100%;\n      padding: 8px;\n      box-sizing: border-box;\n      margin-bottom: 10px;\n    }\n    .success-message {\n      color: green;\n      margin-bottom: 10px;\n    }\n    .error-message {\n      color: red;\n      margin-bottom: 10px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Purchase Functionality</h1>\n\n    <?php if (isset($error_message)) { ?>\n      <p class=\"error-message\"><?php echo $error_message; ?></p>\n    <?php } ?>\n\n    <?php if (isset($success_message)) { ?>\n      <p class=\"success-message\"><?php echo $success_message; ?></p>\n    <?php } ?>\n\n    <form method=\"post\">\n      <div class=\"form-group\">\n        <label for=\"product_name\">Product Name:</label>\n        <input type=\"text\" id=\"product_name\" name=\"product_name\" required>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"product_price\">Product Price:</label>\n        <input type=\"number\" id=\"product_price\" name=\"product_price\" required>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"quantity\">Quantity:</label>\n        <input type=\"number\" id=\"quantity\" name=\"quantity\" required>\n      </div>\n      <button type=\"submit\">Add to Cart</button>\n    </form>\n  </div>\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Database Connection:**  Uses `mysqli` for a modern database connection.  Replace placeholders with your actual database credentials.  Includes error handling if the connection fails.\n* **Input Validation and Sanitization:**\n    * `trim()`: Removes leading/trailing whitespace from input.\n    * `floatval()`:  Converts the price input to a floating-point number. This is *crucial* because `$_POST[\"product_price\"]` will always be a string.\n    * `intval()`: Converts the quantity to an integer.\n    * `required`:  The `required` attribute on the input fields makes them mandatory, and the browser will prevent form submission if they are empty.\n* **SQL Injection Prevention:**  This version *correctly* uses *prepared statements* to prevent SQL injection. This is the *most important* change.  Using prepared statements separates the SQL code from the data, making it impossible for malicious users to inject SQL commands.\n* **Clearer Error Handling:** Provides a specific error message if the database insertion fails.\n* **Success Message:** Displays a success message if the product is added successfully.\n* **HTML Form:**  A simple HTML form is included to capture the product information.  Uses appropriate labels and input types.\n* **Clearer Code Structure:** Uses `if` statements to control the display of error and success messages.\n* **Comments:**  Includes comments to explain the code.\n* **Modern Practices:** Uses `mysqli`, prepared statements, `floatval()` and `intval()`, and HTML5 input types for better form handling.\n* **CSS Styling:** Includes basic CSS for better presentation.\n\nHow to use this code:\n\n1. **Create a Database:** Create a database named `shopping_cart` (or whatever you want).\n2. **Create a Table:**  Inside the database, create a table named `products` with the following columns:\n   * `id` (INT, PRIMARY KEY, AUTO_INCREMENT)\n   * `name` (VARCHAR(255))\n   * `price` (FLOAT)\n   * `quantity` (INT)\n\n   ```sql\n   CREATE TABLE products (\n       id INT AUTO_INCREMENT PRIMARY KEY,\n       name VARCHAR(255) NOT NULL,\n       price FLOAT NOT NULL,\n       quantity INT NOT NULL\n   );\n   ```\n\n3. **Update Credentials:** Change the `$db_host`, `$db_name`, `$db_user`, and `$db_password` variables in the PHP code to match your database settings.\n4. **Save the Code:** Save the PHP code to a file (e.g., `purchase.php`).\n5. **Place in Web Server Directory:**  Put the `purchase.php` file in your web server's document root (e.g., `htdocs` or `www`).\n6. **Access in Browser:**  Open the file in your web browser (e.g., `http://localhost/purchase.php`).\n\nThis improved version is more secure, robust, and follows best practices for PHP development.  It's a much better foundation for building a real-world purchase functionality.  Remember to always validate and sanitize user inputs to prevent security vulnerabilities.\n", "code_blocks": ["```php\n<?php\n\n// Database connection details (replace with your actual values)\n$db_host = \"localhost\";\n$db_name = \"shopping_cart\";\n$db_user = \"your_user\";\n$db_password = \"your_password\";\n\n// Check if the form has been submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n\n  // Validate and sanitize inputs\n  $product_name = trim($_POST[\"product_name\"]);\n  $product_price = floatval($_POST[\"product_price\"]);\n  $quantity = intval($_POST[\"quantity\"]);\n\n  //  Input validation (add more as needed!)\n  if (empty($product_name) || $product_price <= 0 || $quantity <= 0) {\n    $error_message = \"Please enter valid product name, price, and quantity.\";\n  } else {\n    // Prepare the SQL statement\n    $sql = \"INSERT INTO products (name, price, quantity) VALUES (?, ?, ?)\";\n\n    // Prepare the statement\n    $stmt = $conn->prepare($sql);\n\n    // Bind parameters\n    $stmt->bind_param(\"sii\", $product_name, $product_price, $quantity);\n\n    // Execute the statement\n    if ($stmt->execute()) {\n      $success_message = \"Product added successfully!\";\n    } else {\n      $error_message = \"Error adding product: \" . $stmt->error;\n    }\n\n    // Close the statement\n    $stmt->close();\n  }\n\n}\n\n// Establish database connection\n$conn = new mysqli($db_host, $db_user, $db_password, $db_name);\n\n// Check connection\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Purchase Functionality</title>\n  <style>\n    body {\n      font-family: sans-serif;\n    }\n    .container {\n      width: 80%;\n      margin: 0 auto;\n      padding: 20px;\n      border: 1px solid #ccc;\n    }\n    .form-group {\n      margin-bottom: 15px;\n    }\n    label {\n      display: block;\n      margin-bottom: 5px;\n    }\n    input[type=\"text\"],\n    input[type=\"number\"] {\n      width: 100%;\n      padding: 8px;\n      box-sizing: border-box;\n      margin-bottom: 10px;\n    }\n    .success-message {\n      color: green;\n      margin-bottom: 10px;\n    }\n    .error-message {\n      color: red;\n      margin-bottom: 10px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Purchase Functionality</h1>\n\n    <?php if (isset($error_message)) { ?>\n      <p class=\"error-message\"><?php echo $error_message; ?></p>\n    <?php } ?>\n\n    <?php if (isset($success_message)) { ?>\n      <p class=\"success-message\"><?php echo $success_message; ?></p>\n    <?php } ?>\n\n    <form method=\"post\">\n      <div class=\"form-group\">\n        <label for=\"product_name\">Product Name:</label>\n        <input type=\"text\" id=\"product_name\" name=\"product_name\" required>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"product_price\">Product Price:</label>\n        <input type=\"number\" id=\"product_price\" name=\"product_price\" required>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"quantity\">Quantity:</label>\n        <input type=\"number\" id=\"quantity\" name=\"quantity\" required>\n      </div>\n      <button type=\"submit\">Add to Cart</button>\n    </form>\n  </div>\n</body>\n</html>\n```"]}
