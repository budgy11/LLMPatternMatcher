{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, I need to create a purchase functionality using PHP. Let me think about how to approach this.\n\nFirst, I should understand what the user is asking for. They want a basic example of a shopping cart and checkout process. So, I'll outline the main components needed: adding items to the cart, viewing the cart, calculating totals, handling payment, order confirmation, and displaying past orders.\n\nI'll start by setting up the database. I'll need tables for products, users, orders, order details, and payments. Using MySQL seems appropriate here. I'll write the SQL statements to create these tables with necessary fields.\n\nNext, I'll plan the PHP classes. A Product class will handle product operations, an Order class for managing orders, and a Payment class for payment processing. Each class should have methods for CRUD operations relevant to their purpose.\n\nFor adding items to the cart, I'll use sessions since they're simple for maintaining state between pages. The cart can be stored in $_SESSION['cart'] as an array of product IDs and quantities. Functions will handle adding, removing, updating quantities, and clearing the cart.\n\nCalculating totals is straightforward. Loop through each item in the cart, retrieve the product price, multiply by quantity, and sum them up for subtotal. Adding tax (say 10%) gives the total amount.\n\nProcessing payment requires a form where users enter their details. I'll simulate payment processing without integrating an actual gateway. A function will check if the payment is successful and then create order records in the database.\n\nOrder confirmation will display order details after a successful payment. I'll redirect to a confirmation page showing order number, total, and payment status. For past orders, users can view their order history by querying the orders table with their user ID.\n\nI should also handle security considerations like using prepared statements to prevent SQL injection, sanitizing inputs, and managing sessions securely. Since this is a basic example, I'll keep it simple but note areas where more robust security measures are needed in production.\n\nFinally, I'll structure the code into separate files: classes for data handling, functions for cart management, forms for user interaction, and pages for displaying information. Testing each part step by step will ensure everything works as expected.\n</think>\n\nHere's an example of a purchase functionality using PHP. This includes:\n\n1. Adding items to shopping cart\n2. Viewing cart details\n3. Calculating totals\n4. Payment processing\n5. Order confirmation\n\n```php\n<?php\n// Database configuration\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"shop\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Product class\nclass Product {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Get product details\n    public function getProduct($id) {\n        $stmt = $this->conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n        $stmt->bind_param(\"i\", $id);\n        $stmt->execute();\n        return $result = $stmt->get_result()->fetch_assoc();\n    }\n}\n\n// Order class\nclass Order {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Create new order\n    public function createOrder($user_id, $total_amount) {\n        $stmt = $this->conn->prepare(\"INSERT INTO orders (user_id, total_amount) VALUES (?, ?)\");\n        $stmt->bind_param(\"is\", $user_id, $total_amount);\n        return $stmt->execute();\n    }\n\n    // Get order details\n    public function getOrderDetails($order_id) {\n        $stmt = $this->conn->prepare(\"SELECT * FROM orders WHERE id = ?\");\n        $stmt->bind_param(\"i\", $order_id);\n        $stmt->execute();\n        return $result = $stmt->get_result()->fetch_assoc();\n    }\n}\n\n// Payment class\nclass Payment {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Process payment\n    public function processPayment($order_id, $amount, $payment_method) {\n        $stmt = $this->conn->prepare(\"INSERT INTO payments (order_id, amount, payment_method) VALUES (?, ?, ?)\");\n        $stmt->bind_param(\"ids\", $order_id, $amount, $payment_method);\n        return $stmt->execute();\n    }\n}\n\n// Initialize classes\n$product = new Product($conn);\n$order = new Order($conn);\n$payment = new Payment($conn);\n\n// Add to cart functionality\nif (isset($_GET['action']) && $_GET['action'] == 'add_to_cart') {\n    if (!isset($_SESSION)) {\n        session_start();\n    }\n\n    $product_id = intval($_GET['id']);\n    $quantity = intval($_GET['quantity']);\n\n    if ($quantity <= 0) {\n        die(\"Quantity must be at least 1\");\n    }\n\n    // Get product details\n    $product_details = $product->getProduct($product_id);\n\n    // Add to cart\n    if (empty($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n\n    $_SESSION['cart'][$product_id] = array(\n        'name' => $product_details['name'],\n        'price' => $product_details['price'],\n        'quantity' => $quantity,\n        'total' => $product_details['price'] * $quantity\n    );\n\n    header(\"Location: cart.php\");\n}\n\n// Cart page (cart.php)\nsession_start();\n\n$cart = $_SESSION['cart'];\n$total = 0;\n\nforeach ($cart as $item) {\n    $total += $item['total'];\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n</head>\n<body>\n    <h1>Your Shopping Cart</h1>\n    <?php if (!empty($cart)) : ?>\n        <table>\n            <tr>\n                <th>Product</th>\n                <th>Price</th>\n                <th>Quantity</th>\n                <th>Total</th>\n            </tr>\n            <?php foreach ($cart as $item) : ?>\n                <tr>\n                    <td><?php echo $item['name']; ?></td>\n                    <td><?php echo \"$\" . number_format($item['price'], 2); ?></td>\n                    <td><?php echo $item['quantity']; ?></td>\n                    <td><?php echo \"$\" . number_format($item['total'], 2); ?></td>\n                </tr>\n            <?php endforeach; ?>\n        </table>\n        <h3>Subtotal: <?php echo \"$\" . number_format($total, 2); ?></h3>\n        <h3>Tax (10%): <?php echo \"$\" . number_format($total * 0.1, 2); ?></h3>\n        <h3>Total: <?php echo \"$\" . number_format(($total + $total * 0.1), 2); ?></h3>\n        <form action=\"checkout.php\" method=\"post\">\n            <input type=\"submit\" name=\"checkout\" value=\"Checkout\">\n        </form>\n    <?php else : ?>\n        <p>Your cart is empty</p>\n    <?php endif; ?>\n</body>\n</html>\n\n// Checkout page (checkout.php)\nsession_start();\n\nif (isset($_POST['checkout'])) {\n    $user_id = 1; // Replace with actual user authentication\n    $cart = $_SESSION['cart'];\n    $total = 0;\n\n    foreach ($cart as $item) {\n        $total += $item['total'];\n    }\n\n    $order_total = $total + $total * 0.1; // Adding 10% tax\n\n    // Create order\n    $order_id = $order->createOrder($user_id, $order_total);\n\n    if ($order_id) {\n        // Process payment\n        $payment_result = $payment->processPayment($order_id, $order_total, \"credit_card\"); // Replace with actual payment method\n\n        if ($payment_result) {\n            header(\"Location: confirmation.php?order_id=\" . $order_id);\n        } else {\n            die(\"Payment processing failed\");\n        }\n    } else {\n        die(\"Order creation failed\");\n    }\n}\n\n// Order confirmation page (confirmation.php)\nsession_start();\n\n$order_id = intval($_GET['order_id']);\n$order_details = $order->getOrderDetails($order_id);\n\nif ($order_details) : ?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Order Confirmation</title>\n</head>\n<body>\n    <h1>Order #<?php echo $order_id; ?></h1>\n    <p>Total Amount: <?php echo \"$\" . number_format($order_details['total_amount'], 2); ?></p>\n    <p>Status: Completed</p>\n    <a href=\"products.php\">Continue Shopping</a>\n</body>\n</html>\n<?php else : ?>\n    <h1>Order Not Found</h1>\n<?php endif; ?>\n\n// View past orders (orders.php)\nsession_start();\n\n$user_id = 1; // Replace with actual user authentication\n$stmt = $conn->prepare(\"SELECT * FROM orders WHERE user_id = ?\");\n$stmt->bind_param(\"i\", $user_id);\n$stmt->execute();\n$result = $stmt->get_result();\n\nif ($result->num_rows > 0) : ?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Past Orders</title>\n</head>\n<body>\n    <h1>Your Past Orders</h1>\n    <?php while ($order = $result->fetch_assoc()) : ?>\n        <div>\n            <h3>Order #<?php echo $order['id']; ?></h3>\n            <p>Date: <?php echo $order['created_at']; ?></p>\n            <p>Total Amount: <?php echo \"$\" . number_format($order['total_amount'], 2); ?></p>\n        </div>\n    <?php endwhile; ?>\n</body>\n</html>\n<?php endif; ?>\n\n// Database tables creation\n\nCREATE TABLE products (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(255),\n    price DECIMAL(10,2)\n);\n\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(255),\n    password_hash VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    user_id INT,\n    total_amount DECIMAL(10,2),\n    created_at DATETIME\n);\n\nCREATE TABLE order_details (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\nCREATE TABLE payments (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    order_id INT,\n    amount DECIMAL(10,2),\n    payment_method VARCHAR(255)\n);\n?>\n```\n\nThis is a basic implementation of purchase functionality. You can enhance it by:\n\n1. Adding user authentication\n2. Implementing secure payment processing using real payment gateways (e.g., Stripe, PayPal)\n3. Adding more product details and filtering options\n4. Implementing coupon codes and discounts\n5. Adding order tracking and notifications\n6. Improving the UI/UX with frontend frameworks\n7. Adding error handling and validation\n8. Implementing secure session management\n\nRemember to:\n- Use prepared statements to prevent SQL injection\n- Sanitize all user inputs\n- Secure sensitive data (e.g., passwords, payment information)\n- Implement proper error handling and logging\n- Add CSRF protection\n- Use HTTPS in production", "code_blocks": ["```php\n<?php\n// Database configuration\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"shop\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Product class\nclass Product {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Get product details\n    public function getProduct($id) {\n        $stmt = $this->conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n        $stmt->bind_param(\"i\", $id);\n        $stmt->execute();\n        return $result = $stmt->get_result()->fetch_assoc();\n    }\n}\n\n// Order class\nclass Order {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Create new order\n    public function createOrder($user_id, $total_amount) {\n        $stmt = $this->conn->prepare(\"INSERT INTO orders (user_id, total_amount) VALUES (?, ?)\");\n        $stmt->bind_param(\"is\", $user_id, $total_amount);\n        return $stmt->execute();\n    }\n\n    // Get order details\n    public function getOrderDetails($order_id) {\n        $stmt = $this->conn->prepare(\"SELECT * FROM orders WHERE id = ?\");\n        $stmt->bind_param(\"i\", $order_id);\n        $stmt->execute();\n        return $result = $stmt->get_result()->fetch_assoc();\n    }\n}\n\n// Payment class\nclass Payment {\n    private $conn;\n\n    public function __construct($db_connection) {\n        $this->conn = $db_connection;\n    }\n\n    // Process payment\n    public function processPayment($order_id, $amount, $payment_method) {\n        $stmt = $this->conn->prepare(\"INSERT INTO payments (order_id, amount, payment_method) VALUES (?, ?, ?)\");\n        $stmt->bind_param(\"ids\", $order_id, $amount, $payment_method);\n        return $stmt->execute();\n    }\n}\n\n// Initialize classes\n$product = new Product($conn);\n$order = new Order($conn);\n$payment = new Payment($conn);\n\n// Add to cart functionality\nif (isset($_GET['action']) && $_GET['action'] == 'add_to_cart') {\n    if (!isset($_SESSION)) {\n        session_start();\n    }\n\n    $product_id = intval($_GET['id']);\n    $quantity = intval($_GET['quantity']);\n\n    if ($quantity <= 0) {\n        die(\"Quantity must be at least 1\");\n    }\n\n    // Get product details\n    $product_details = $product->getProduct($product_id);\n\n    // Add to cart\n    if (empty($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n\n    $_SESSION['cart'][$product_id] = array(\n        'name' => $product_details['name'],\n        'price' => $product_details['price'],\n        'quantity' => $quantity,\n        'total' => $product_details['price'] * $quantity\n    );\n\n    header(\"Location: cart.php\");\n}\n\n// Cart page (cart.php)\nsession_start();\n\n$cart = $_SESSION['cart'];\n$total = 0;\n\nforeach ($cart as $item) {\n    $total += $item['total'];\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n</head>\n<body>\n    <h1>Your Shopping Cart</h1>\n    <?php if (!empty($cart)) : ?>\n        <table>\n            <tr>\n                <th>Product</th>\n                <th>Price</th>\n                <th>Quantity</th>\n                <th>Total</th>\n            </tr>\n            <?php foreach ($cart as $item) : ?>\n                <tr>\n                    <td><?php echo $item['name']; ?></td>\n                    <td><?php echo \"$\" . number_format($item['price'], 2); ?></td>\n                    <td><?php echo $item['quantity']; ?></td>\n                    <td><?php echo \"$\" . number_format($item['total'], 2); ?></td>\n                </tr>\n            <?php endforeach; ?>\n        </table>\n        <h3>Subtotal: <?php echo \"$\" . number_format($total, 2); ?></h3>\n        <h3>Tax (10%): <?php echo \"$\" . number_format($total * 0.1, 2); ?></h3>\n        <h3>Total: <?php echo \"$\" . number_format(($total + $total * 0.1), 2); ?></h3>\n        <form action=\"checkout.php\" method=\"post\">\n            <input type=\"submit\" name=\"checkout\" value=\"Checkout\">\n        </form>\n    <?php else : ?>\n        <p>Your cart is empty</p>\n    <?php endif; ?>\n</body>\n</html>\n\n// Checkout page (checkout.php)\nsession_start();\n\nif (isset($_POST['checkout'])) {\n    $user_id = 1; // Replace with actual user authentication\n    $cart = $_SESSION['cart'];\n    $total = 0;\n\n    foreach ($cart as $item) {\n        $total += $item['total'];\n    }\n\n    $order_total = $total + $total * 0.1; // Adding 10% tax\n\n    // Create order\n    $order_id = $order->createOrder($user_id, $order_total);\n\n    if ($order_id) {\n        // Process payment\n        $payment_result = $payment->processPayment($order_id, $order_total, \"credit_card\"); // Replace with actual payment method\n\n        if ($payment_result) {\n            header(\"Location: confirmation.php?order_id=\" . $order_id);\n        } else {\n            die(\"Payment processing failed\");\n        }\n    } else {\n        die(\"Order creation failed\");\n    }\n}\n\n// Order confirmation page (confirmation.php)\nsession_start();\n\n$order_id = intval($_GET['order_id']);\n$order_details = $order->getOrderDetails($order_id);\n\nif ($order_details) : ?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Order Confirmation</title>\n</head>\n<body>\n    <h1>Order #<?php echo $order_id; ?></h1>\n    <p>Total Amount: <?php echo \"$\" . number_format($order_details['total_amount'], 2); ?></p>\n    <p>Status: Completed</p>\n    <a href=\"products.php\">Continue Shopping</a>\n</body>\n</html>\n<?php else : ?>\n    <h1>Order Not Found</h1>\n<?php endif; ?>\n\n// View past orders (orders.php)\nsession_start();\n\n$user_id = 1; // Replace with actual user authentication\n$stmt = $conn->prepare(\"SELECT * FROM orders WHERE user_id = ?\");\n$stmt->bind_param(\"i\", $user_id);\n$stmt->execute();\n$result = $stmt->get_result();\n\nif ($result->num_rows > 0) : ?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Past Orders</title>\n</head>\n<body>\n    <h1>Your Past Orders</h1>\n    <?php while ($order = $result->fetch_assoc()) : ?>\n        <div>\n            <h3>Order #<?php echo $order['id']; ?></h3>\n            <p>Date: <?php echo $order['created_at']; ?></p>\n            <p>Total Amount: <?php echo \"$\" . number_format($order['total_amount'], 2); ?></p>\n        </div>\n    <?php endwhile; ?>\n</body>\n</html>\n<?php endif; ?>\n\n// Database tables creation\n\nCREATE TABLE products (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(255),\n    price DECIMAL(10,2)\n);\n\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(255),\n    password_hash VARCHAR(255),\n    email VARCHAR(255)\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    user_id INT,\n    total_amount DECIMAL(10,2),\n    created_at DATETIME\n);\n\nCREATE TABLE order_details (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    price DECIMAL(10,2)\n);\n\nCREATE TABLE payments (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    order_id INT,\n    amount DECIMAL(10,2),\n    payment_method VARCHAR(255)\n);\n?>\n```"]}
