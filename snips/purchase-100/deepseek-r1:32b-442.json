{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nOkay, I need to create a purchase functionality using PHP. Let me think about how to approach this.\n\nFirst, I should outline the main components involved in a purchase process. There's displaying products, adding them to a cart, viewing the cart, and then processing the checkout.\n\nI'll start by setting up a database connection because I need to retrieve product information and handle orders. Using MySQLi is a good choice since it's more secure and modern than the older mysql functions.\n\nNext, I'll create a simple HTML structure with CSS styling for better presentation. The page should display products in a grid layout so users can easily browse them.\n\nTo fetch the products from the database, I'll write a PHP script that queries the products table. Each product will be displayed as a card showing its name, description, price, and an \"Add to Cart\" button. Using while loops will help iterate through each product result.\n\nFor adding items to the cart, since this is a basic example without sessions, I'll use a cookie to store the cart data. When the user clicks \"Add to Cart,\" JavaScript will handle sending the product ID to a PHP script that updates the cookie. This way, the page doesn't need to reload, making it smoother for the user.\n\nDisplaying the cart items is crucial. I'll write another function that reads the cart from the cookie and displays each item along with its quantity and total price. There should also be an option to remove items from the cart.\n\nFinally, the checkout functionality will take the cart data, loop through each item, calculate the total amount, and insert the order into the orders table. Then, it'll clear the cart by setting the cookie expiration date in the past.\n\nI should also include some error handling, like checking if the product ID exists before adding to the cart and ensuring that all required fields are filled out during checkout. Additionally, using prepared statements can help prevent SQL injection attacks.\n\nTesting each part step by step is important. I'll make sure that adding products works, the cart updates correctly, and the checkout process accurately captures and stores the order information.\n\nOverall, this approach covers the essential features of a purchase system with PHP, using cookies for temporary storage and MySQLi for database interactions.\n</think>\n\nHere's an example of a purchase functionality using PHP. This implementation includes:\n\n1. Product display\n2. Cart management\n3. Checkout process\n\n```php\n<?php\nsession_start();\n\n// Database connection\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Get products from database\n$sql = \"SELECT * FROM products\";\n$result = $conn->query($sql);\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n    <style>\n        body { font-family: Arial, sans-serif; }\n        .product-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; padding: 20px; }\n        .product-card { border: 1px solid #ddd; padding: 10px; }\n        .cart { width: 300px; float: right; margin: 20px; }\n    </style>\n</head>\n<body>\n\n<?php\nif (isset($_GET['action']) && $_GET['action'] == 'checkout') {\n    // Process checkout\n    if (!empty($_SESSION['cart'])) {\n        // Insert order into database\n        $total = 0;\n        foreach ($_SESSION['cart'] as $item) {\n            $total += $item['price'] * $item['quantity'];\n        }\n        \n        $sql = \"INSERT INTO orders (total_amount, created_at) VALUES (?, NOW())\";\n        $stmt = $conn->prepare($sql);\n        $stmt->bind_param(\"d\", $total);\n        $stmt->execute();\n        \n        // Get order ID\n        $order_id = $conn->insert_id;\n        \n        foreach ($_SESSION['cart'] as $item) {\n            $sql = \"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\";\n            $stmt = $conn->prepare($sql);\n            $stmt->bind_param(\"iidi\", $order_id, $item['id'], $item['quantity'], $item['price']);\n            $stmt->execute();\n        }\n        \n        // Clear cart\n        unset($_SESSION['cart']);\n    } else {\n        echo \"Your cart is empty!\";\n    }\n} elseif (isset($_GET['action']) && $_GET['action'] == 'add_to_cart') {\n    // Add item to cart\n    if (isset($_GET['id'])) {\n        $product_id = $_GET['id'];\n        \n        $sql = \"SELECT * FROM products WHERE id = ?\";\n        $stmt = $conn->prepare($sql);\n        $stmt->bind_param(\"i\", $product_id);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        \n        if ($result->num_rows > 0) {\n            $product = $result->fetch_assoc();\n            \n            if (!isset($_SESSION['cart'])) {\n                $_SESSION['cart'] = array();\n            }\n            \n            if (array_key_exists($product_id, $_SESSION['cart'])) {\n                // Increment quantity\n                $_SESSION['cart'][$product_id]['quantity']++;\n            } else {\n                // Add new item\n                $_SESSION['cart'][$product_id] = array(\n                    'id' => $product['id'],\n                    'name' => $product['name'],\n                    'price' => $product['price'],\n                    'quantity' => 1\n                );\n            }\n        }\n    }\n} elseif (isset($_GET['action']) && $_GET['action'] == 'remove_from_cart') {\n    // Remove item from cart\n    if (isset($_GET['id'])) {\n        $product_id = $_GET['id'];\n        unset($_SESSION['cart'][$product_id]);\n    }\n}\n?>\n\n<div class=\"product-grid\">\n<?php\nif ($result->num_rows > 0) {\n    while ($row = $result->fetch_assoc()) {\n        echo \"<div class='product-card'>\";\n        echo \"<h3>\" . $row['name'] . \"</h3>\";\n        echo \"<p>\" . $row['description'] . \"</p>\";\n        echo \"<p>Price: $\" . $row['price'] . \"</p>\";\n        echo \"<a href='?action=add_to_cart&id=\" . $row['id'] . \"'>Add to Cart</a>\";\n        echo \"</div>\";\n    }\n}\n?>\n</div>\n\n<div class=\"cart\">\n<h2>Your Cart</h2>\n<?php\nif (!empty($_SESSION['cart'])) {\n    foreach ($_SESSION['cart'] as $item) {\n        echo \"<div>\" . $item['name'] . \" x\" . $item['quantity'] . \" - $\" . ($item['price'] * $item['quantity']) . \"</div>\";\n        echo \"<a href='?action=remove_from_cart&id=\" . $item['id'] . \"'>Remove</a><br>\";\n    }\n    \n    // Calculate total\n    $total = 0;\n    foreach ($_SESSION['cart'] as $item) {\n        $total += $item['price'] * $item['quantity'];\n    }\n    echo \"<h3>Total: $\" . $total . \"</h3>\";\n    echo \"<a href='?action=checkout'>Checkout</a>\";\n} else {\n    echo \"Your cart is empty!\";\n}\n?>\n</div>\n\n<?php\n// Close database connection\n$conn->close();\n?>\n```\n\nThis code includes:\n\n1. A product display section that fetches products from a database and displays them in a grid layout.\n\n2. Cart management functionality:\n- Adding items to the cart (with quantity increments)\n- Removing items from the cart\n\n3. Checkout process that:\n- Calculates total amount\n- Inserts order into the orders table\n- Records individual order items in an order_items table\n\nTo use this code:\n\n1. Create a database with at least these tables:\n- products (id, name, description, price)\n- orders (id, total_amount, created_at)\n- order_items (id, order_id, product_id, quantity, price)\n\n2. Update the database connection details in the code.\n\n3. Add your own styling and customize as needed.\n\nFeatures:\n- Session-based cart storage\n- Product display with image support (can be added by modifying the products table and displaying images)\n- Simple checkout process\n- Order tracking capabilities\n\nYou can enhance this basic implementation by adding features like:\n- User authentication\n- Payment integration (e.g., Stripe, PayPal)\n- Shipping options\n- Coupon codes\n- Order status updates\n- Product reviews\n- Wishlist functionality\n\nRemember to secure your application with proper input validation and sanitization, especially when dealing with user inputs and database queries.", "code_blocks": ["```php\n<?php\nsession_start();\n\n// Database connection\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n$conn = new mysqli($servername, $username, $password, $dbname);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Get products from database\n$sql = \"SELECT * FROM products\";\n$result = $conn->query($sql);\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Shopping Cart</title>\n    <style>\n        body { font-family: Arial, sans-serif; }\n        .product-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; padding: 20px; }\n        .product-card { border: 1px solid #ddd; padding: 10px; }\n        .cart { width: 300px; float: right; margin: 20px; }\n    </style>\n</head>\n<body>\n\n<?php\nif (isset($_GET['action']) && $_GET['action'] == 'checkout') {\n    // Process checkout\n    if (!empty($_SESSION['cart'])) {\n        // Insert order into database\n        $total = 0;\n        foreach ($_SESSION['cart'] as $item) {\n            $total += $item['price'] * $item['quantity'];\n        }\n        \n        $sql = \"INSERT INTO orders (total_amount, created_at) VALUES (?, NOW())\";\n        $stmt = $conn->prepare($sql);\n        $stmt->bind_param(\"d\", $total);\n        $stmt->execute();\n        \n        // Get order ID\n        $order_id = $conn->insert_id;\n        \n        foreach ($_SESSION['cart'] as $item) {\n            $sql = \"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\";\n            $stmt = $conn->prepare($sql);\n            $stmt->bind_param(\"iidi\", $order_id, $item['id'], $item['quantity'], $item['price']);\n            $stmt->execute();\n        }\n        \n        // Clear cart\n        unset($_SESSION['cart']);\n    } else {\n        echo \"Your cart is empty!\";\n    }\n} elseif (isset($_GET['action']) && $_GET['action'] == 'add_to_cart') {\n    // Add item to cart\n    if (isset($_GET['id'])) {\n        $product_id = $_GET['id'];\n        \n        $sql = \"SELECT * FROM products WHERE id = ?\";\n        $stmt = $conn->prepare($sql);\n        $stmt->bind_param(\"i\", $product_id);\n        $stmt->execute();\n        $result = $stmt->get_result();\n        \n        if ($result->num_rows > 0) {\n            $product = $result->fetch_assoc();\n            \n            if (!isset($_SESSION['cart'])) {\n                $_SESSION['cart'] = array();\n            }\n            \n            if (array_key_exists($product_id, $_SESSION['cart'])) {\n                // Increment quantity\n                $_SESSION['cart'][$product_id]['quantity']++;\n            } else {\n                // Add new item\n                $_SESSION['cart'][$product_id] = array(\n                    'id' => $product['id'],\n                    'name' => $product['name'],\n                    'price' => $product['price'],\n                    'quantity' => 1\n                );\n            }\n        }\n    }\n} elseif (isset($_GET['action']) && $_GET['action'] == 'remove_from_cart') {\n    // Remove item from cart\n    if (isset($_GET['id'])) {\n        $product_id = $_GET['id'];\n        unset($_SESSION['cart'][$product_id]);\n    }\n}\n?>\n\n<div class=\"product-grid\">\n<?php\nif ($result->num_rows > 0) {\n    while ($row = $result->fetch_assoc()) {\n        echo \"<div class='product-card'>\";\n        echo \"<h3>\" . $row['name'] . \"</h3>\";\n        echo \"<p>\" . $row['description'] . \"</p>\";\n        echo \"<p>Price: $\" . $row['price'] . \"</p>\";\n        echo \"<a href='?action=add_to_cart&id=\" . $row['id'] . \"'>Add to Cart</a>\";\n        echo \"</div>\";\n    }\n}\n?>\n</div>\n\n<div class=\"cart\">\n<h2>Your Cart</h2>\n<?php\nif (!empty($_SESSION['cart'])) {\n    foreach ($_SESSION['cart'] as $item) {\n        echo \"<div>\" . $item['name'] . \" x\" . $item['quantity'] . \" - $\" . ($item['price'] * $item['quantity']) . \"</div>\";\n        echo \"<a href='?action=remove_from_cart&id=\" . $item['id'] . \"'>Remove</a><br>\";\n    }\n    \n    // Calculate total\n    $total = 0;\n    foreach ($_SESSION['cart'] as $item) {\n        $total += $item['price'] * $item['quantity'];\n    }\n    echo \"<h3>Total: $\" . $total . \"</h3>\";\n    echo \"<a href='?action=checkout'>Checkout</a>\";\n} else {\n    echo \"Your cart is empty!\";\n}\n?>\n</div>\n\n<?php\n// Close database connection\n$conn->close();\n?>\n```"]}
