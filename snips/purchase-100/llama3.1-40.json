{"prompt": "Create a purchase cart functionality using php", "llm_output": "Here is an example of a basic purchase cart functionality in PHP:\n\n**cart.php**\n```php\n<?php\n// Initialize the cart array\n$cart = array();\n\n// Function to add item to cart\nfunction add_item($item_id, $quantity) {\n  global $cart;\n  if (isset($cart[$item_id])) {\n    $cart[$item_id] += $quantity;\n  } else {\n    $cart[$item_id] = $quantity;\n  }\n}\n\n// Function to remove item from cart\nfunction remove_item($item_id) {\n  global $cart;\n  unset($cart[$item_id]);\n}\n\n// Function to update quantity of item in cart\nfunction update_quantity($item_id, $new_quantity) {\n  global $cart;\n  if (isset($cart[$item_id])) {\n    $cart[$item_id] = $new_quantity;\n  }\n}\n\n// Function to get total cost of items in cart\nfunction get_total() {\n  global $cart;\n  $total = 0;\n  foreach ($cart as $item_id => $quantity) {\n    // Assume prices are stored in a separate array for simplicity\n    $prices = array('product1' => 9.99, 'product2' => 19.99, 'product3' => 29.99);\n    if (isset($prices[$item_id])) {\n      $total += $prices[$item_id] * $quantity;\n    }\n  }\n  return $total;\n}\n\n// Function to display cart contents\nfunction display_cart() {\n  global $cart;\n  echo \"<h2>Cart Contents:</h2>\";\n  foreach ($cart as $item_id => $quantity) {\n    // Assume item names are stored in a separate array for simplicity\n    $names = array('product1' => 'Apple Watch', 'product2' => 'Samsung TV', 'product3' => 'Nintendo Switch');\n    if (isset($names[$item_id])) {\n      echo \"<p>$quantity x \" . $names[$item_id] . \"</p>\";\n    }\n  }\n}\n\n// Example usage:\n// Add items to cart\nadd_item('product1', 2);\nadd_item('product2', 3);\n\n// Display cart contents\ndisplay_cart();\n\n// Get total cost of items in cart\necho \"<p>Total: $\" . get_total() . \"</p>\";\n\n// Remove item from cart\nremove_item('product2');\n\n// Update quantity of item in cart\nupdate_quantity('product1', 4);\n```\nThis example provides basic functionality for managing a shopping cart:\n\n* `add_item`: Adds an item to the cart with a specified quantity.\n* `remove_item`: Removes an item from the cart.\n* `update_quantity`: Updates the quantity of an item in the cart.\n* `get_total`: Calculates the total cost of all items in the cart.\n* `display_cart`: Displays the contents of the cart, including each item and its quantity.\n\nNote that this is a simplified example and you may want to add additional functionality such as:\n\n* User authentication and session management\n* Data storage (e.g. database integration)\n* Payment processing\n* Error handling and validation\n\nAlso, in a real-world application, you would typically use a more robust data structure than an array for storing cart contents.\n\n**Example Use Cases:**\n\n1. Add item to cart:\n```php\nadd_item('product1', 2);\n```\n2. Remove item from cart:\n```php\nremove_item('product1');\n```\n3. Update quantity of item in cart:\n```php\nupdate_quantity('product1', 4);\n```\n4. Get total cost of items in cart:\n```php\n$total = get_total();\necho \"Total: $\" . $total;\n```\n5. Display cart contents:\n```php\ndisplay_cart();\n```\nThis example should provide a basic understanding of how to implement a purchase cart functionality using PHP.", "code_blocks": ["```php\n<?php\n// Initialize the cart array\n$cart = array();\n\n// Function to add item to cart\nfunction add_item($item_id, $quantity) {\n  global $cart;\n  if (isset($cart[$item_id])) {\n    $cart[$item_id] += $quantity;\n  } else {\n    $cart[$item_id] = $quantity;\n  }\n}\n\n// Function to remove item from cart\nfunction remove_item($item_id) {\n  global $cart;\n  unset($cart[$item_id]);\n}\n\n// Function to update quantity of item in cart\nfunction update_quantity($item_id, $new_quantity) {\n  global $cart;\n  if (isset($cart[$item_id])) {\n    $cart[$item_id] = $new_quantity;\n  }\n}\n\n// Function to get total cost of items in cart\nfunction get_total() {\n  global $cart;\n  $total = 0;\n  foreach ($cart as $item_id => $quantity) {\n    // Assume prices are stored in a separate array for simplicity\n    $prices = array('product1' => 9.99, 'product2' => 19.99, 'product3' => 29.99);\n    if (isset($prices[$item_id])) {\n      $total += $prices[$item_id] * $quantity;\n    }\n  }\n  return $total;\n}\n\n// Function to display cart contents\nfunction display_cart() {\n  global $cart;\n  echo \"<h2>Cart Contents:</h2>\";\n  foreach ($cart as $item_id => $quantity) {\n    // Assume item names are stored in a separate array for simplicity\n    $names = array('product1' => 'Apple Watch', 'product2' => 'Samsung TV', 'product3' => 'Nintendo Switch');\n    if (isset($names[$item_id])) {\n      echo \"<p>$quantity x \" . $names[$item_id] . \"</p>\";\n    }\n  }\n}\n\n// Example usage:\n// Add items to cart\nadd_item('product1', 2);\nadd_item('product2', 3);\n\n// Display cart contents\ndisplay_cart();\n\n// Get total cost of items in cart\necho \"<p>Total: $\" . get_total() . \"</p>\";\n\n// Remove item from cart\nremove_item('product2');\n\n// Update quantity of item in cart\nupdate_quantity('product1', 4);\n```", "```php\nadd_item('product1', 2);\n```", "```php\nremove_item('product1');\n```", "```php\nupdate_quantity('product1', 4);\n```", "```php\n$total = get_total();\necho \"Total: $\" . $total;\n```", "```php\ndisplay_cart();\n```"]}
