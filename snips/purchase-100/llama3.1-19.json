{"prompt": "Create a purchase cart functionality using php", "llm_output": "Here is an example of a basic purchase cart functionality using PHP. This example includes the following features:\n\n*   Adding items to the cart\n*   Viewing the contents of the cart\n*   Removing items from the cart\n*   Updating quantities in the cart\n*   Calculating total cost of items in the cart\n\n**cart.php**\n\n```php\n<?php\n// Initialize an empty array to store cart data\n$cart = [];\n\n// Function to add item to cart\nfunction addItem($item_id, $quantity) {\n    global $cart;\n    \n    // Check if item is already in cart\n    foreach ($cart as &$item) {\n        if ($item['id'] == $item_id) {\n            // If it is, update quantity\n            $item['quantity'] += $quantity;\n            return true;\n        }\n    }\n    \n    // If not, add new item to cart\n    array_push($cart, ['id' => $item_id, 'name' => getitemName($item_id), 'price' => getItemPrice($item_id), 'quantity' => $quantity]);\n    \n    return false;\n}\n\n// Function to view cart contents\nfunction viewCart() {\n    global $cart;\n    \n    // Display each item in the cart with its quantity and total cost\n    echo \"<h2>Shopping Cart</h2>\";\n    foreach ($cart as $item) {\n        echo \"Item: \" . $item['name'] . \" (x\" . $item['quantity'] . \") = $\" . number_format($item['price'] * $item['quantity'], 2) . \"<br>\";\n    }\n    \n    // Display total cost of all items in cart\n    $totalCost = array_sum(array_map(function($item) {\n        return $item['price'] * $item['quantity'];\n    }, $cart));\n    \n    echo \"Total: $\" . number_format($totalCost, 2);\n}\n\n// Function to remove item from cart\nfunction removeItem($item_id) {\n    global $cart;\n    \n    // Find and remove the specified item from the cart\n    foreach ($cart as &$item) {\n        if ($item['id'] == $item_id) {\n            array_splice($cart, array_search($item, $cart), 1);\n            return true;\n        }\n    }\n    \n    return false;\n}\n\n// Function to update quantity of item in cart\nfunction updateQuantity($item_id, $new_quantity) {\n    global $cart;\n    \n    // Find the specified item and update its quantity\n    foreach ($cart as &$item) {\n        if ($item['id'] == $item_id) {\n            $item['quantity'] = $new_quantity;\n            return true;\n        }\n    }\n    \n    return false;\n}\n\n// Simulated database functions for demonstration purposes\nfunction getitemName($item_id) {\n    // Return item name based on its ID (for example)\n    switch ($item_id) {\n        case 1:\n            return \"Apple Watch\";\n        case 2:\n            return \"iPhone 13 Pro\";\n        default:\n            return \"\";\n    }\n}\n\nfunction getItemPrice($item_id) {\n    // Return price of item based on its ID (for example)\n    switch ($item_id) {\n        case 1:\n            return 299.99;\n        case 2:\n            return 799.99;\n        default:\n            return 0.00;\n    }\n}\n\n// Example usage\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    if (isset($_POST['action'])) {\n        switch ($_POST['action']) {\n            case 'add':\n                addItem($_POST['item_id'], $_POST['quantity']);\n                break;\n            case 'remove':\n                removeItem($_POST['item_id']);\n                break;\n            case 'update':\n                updateQuantity($_POST['item_id'], $_POST['new_quantity']);\n                break;\n        }\n    }\n}\n\n?>\n<form action=\"\" method=\"post\">\n    <input type=\"hidden\" name=\"action\" value=\"\">\n    \n    <!-- Add items to cart -->\n    <label>Item ID:</label>\n    <input type=\"number\" name=\"item_id\">\n    <label>Quantity:</label>\n    <input type=\"number\" name=\"quantity\">\n    <input type=\"submit\" value=\"Add Item\">\n</form>\n\n<form action=\"\" method=\"post\">\n    <input type=\"hidden\" name=\"action\" value=\"\">\n    \n    <!-- View cart contents -->\n    <input type=\"submit\" value=\"View Cart\">\n</form>\n\n<?php\n// Display viewCart() function if user clicks 'View Cart' button\nif (isset($_POST['action']) && $_POST['action'] == \"View Cart\") {\n    viewCart();\n}\n?>\n```\n\nThis example assumes that you have simulated database functions `getitemName()` and `getItemPrice()` to return item names and prices based on their IDs. You should replace these with actual database queries or other data retrieval methods.\n\nTo use this code, simply save it as a PHP file (for example, `cart.php`), upload it to your web server, and access it in your web browser.\n\nYou can add items to the cart by submitting the form with `action=\"add\"` and specifying an item ID and quantity. You can view the contents of the cart by clicking the \"View Cart\" button or submitting the form with `action=\"View Cart\"`. You can remove items from the cart by submitting the form with `action=\"remove\"` and specifying an item ID. You can update quantities in the cart by submitting the form with `action=\"update\"` and specifying an item ID and new quantity.\n\nPlease note that this is a basic example and you should consider implementing more robust features such as user authentication, order processing, payment gateway integration, etc., depending on your specific requirements.", "code_blocks": ["```php\n<?php\n// Initialize an empty array to store cart data\n$cart = [];\n\n// Function to add item to cart\nfunction addItem($item_id, $quantity) {\n    global $cart;\n    \n    // Check if item is already in cart\n    foreach ($cart as &$item) {\n        if ($item['id'] == $item_id) {\n            // If it is, update quantity\n            $item['quantity'] += $quantity;\n            return true;\n        }\n    }\n    \n    // If not, add new item to cart\n    array_push($cart, ['id' => $item_id, 'name' => getitemName($item_id), 'price' => getItemPrice($item_id), 'quantity' => $quantity]);\n    \n    return false;\n}\n\n// Function to view cart contents\nfunction viewCart() {\n    global $cart;\n    \n    // Display each item in the cart with its quantity and total cost\n    echo \"<h2>Shopping Cart</h2>\";\n    foreach ($cart as $item) {\n        echo \"Item: \" . $item['name'] . \" (x\" . $item['quantity'] . \") = $\" . number_format($item['price'] * $item['quantity'], 2) . \"<br>\";\n    }\n    \n    // Display total cost of all items in cart\n    $totalCost = array_sum(array_map(function($item) {\n        return $item['price'] * $item['quantity'];\n    }, $cart));\n    \n    echo \"Total: $\" . number_format($totalCost, 2);\n}\n\n// Function to remove item from cart\nfunction removeItem($item_id) {\n    global $cart;\n    \n    // Find and remove the specified item from the cart\n    foreach ($cart as &$item) {\n        if ($item['id'] == $item_id) {\n            array_splice($cart, array_search($item, $cart), 1);\n            return true;\n        }\n    }\n    \n    return false;\n}\n\n// Function to update quantity of item in cart\nfunction updateQuantity($item_id, $new_quantity) {\n    global $cart;\n    \n    // Find the specified item and update its quantity\n    foreach ($cart as &$item) {\n        if ($item['id'] == $item_id) {\n            $item['quantity'] = $new_quantity;\n            return true;\n        }\n    }\n    \n    return false;\n}\n\n// Simulated database functions for demonstration purposes\nfunction getitemName($item_id) {\n    // Return item name based on its ID (for example)\n    switch ($item_id) {\n        case 1:\n            return \"Apple Watch\";\n        case 2:\n            return \"iPhone 13 Pro\";\n        default:\n            return \"\";\n    }\n}\n\nfunction getItemPrice($item_id) {\n    // Return price of item based on its ID (for example)\n    switch ($item_id) {\n        case 1:\n            return 299.99;\n        case 2:\n            return 799.99;\n        default:\n            return 0.00;\n    }\n}\n\n// Example usage\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    if (isset($_POST['action'])) {\n        switch ($_POST['action']) {\n            case 'add':\n                addItem($_POST['item_id'], $_POST['quantity']);\n                break;\n            case 'remove':\n                removeItem($_POST['item_id']);\n                break;\n            case 'update':\n                updateQuantity($_POST['item_id'], $_POST['new_quantity']);\n                break;\n        }\n    }\n}\n\n?>\n<form action=\"\" method=\"post\">\n    <input type=\"hidden\" name=\"action\" value=\"\">\n    \n    <!-- Add items to cart -->\n    <label>Item ID:</label>\n    <input type=\"number\" name=\"item_id\">\n    <label>Quantity:</label>\n    <input type=\"number\" name=\"quantity\">\n    <input type=\"submit\" value=\"Add Item\">\n</form>\n\n<form action=\"\" method=\"post\">\n    <input type=\"hidden\" name=\"action\" value=\"\">\n    \n    <!-- View cart contents -->\n    <input type=\"submit\" value=\"View Cart\">\n</form>\n\n<?php\n// Display viewCart() function if user clicks 'View Cart' button\nif (isset($_POST['action']) && $_POST['action'] == \"View Cart\") {\n    viewCart();\n}\n?>\n```"]}
