{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of how you can create a simple purchase functionality using PHP. This will include form validation, database interaction to store the data, and display a success message after the purchase.\n\n```php\n<?php\n// Database connection settings\n$host = 'localhost';\n$dbname = 'mydatabase';\n$username = 'myuser';\n$password = 'mypassword';\n\n// Create a new connection\n$conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n\n// Purchase form\n?>\n<form action=\"\" method=\"post\">\n  <label for=\"product\">Product:</label>\n  <select name=\"product\" required>\n    <?php\n      // Retrieve products from database and display in select menu\n      $query = \"SELECT * FROM products\";\n      $stmt = $conn->prepare($query);\n      $stmt->execute();\n      while ($row = $stmt->fetch()) {\n        echo \"<option value='\" . $row['id'] . \"'>\" . $row['name'] . \"</option>\";\n      }\n    ?>\n  </select>\n  \n  <label for=\"quantity\">Quantity:</label>\n  <input type=\"number\" name=\"quantity\" required>\n\n  <label for=\"payment_method\">Payment Method:</label>\n  <select name=\"payment_method\" required>\n    <option value=\"cash\">Cash</option>\n    <option value=\"credit_card\">Credit Card</option>\n  </select>\n\n  <button type=\"submit\">Purchase</button>\n</form>\n\n<?php\nif (isset($_POST['product']) && isset($_POST['quantity']) && isset($_POST['payment_method'])) {\n  // Extract data from form submission\n  $product_id = $_POST['product'];\n  $quantity = $_POST['quantity'];\n  $payment_method = $_POST['payment_method'];\n\n  // Validate data\n  if ($quantity < 1) {\n    echo \"Invalid quantity. Please enter a number greater than zero.\";\n  } else {\n    try {\n      // Insert purchase into database\n      $query = \"INSERT INTO purchases (product_id, quantity, payment_method) VALUES (:id, :qty, :pm)\";\n      $stmt = $conn->prepare($query);\n      $stmt->bindParam(':id', $product_id);\n      $stmt->bindParam(':qty', $quantity);\n      $stmt->bindParam(':pm', $payment_method);\n      $stmt->execute();\n\n      // Retrieve the purchase ID\n      $purchase_id = $conn->lastInsertId();\n\n      echo \"Purchase successful. Your order number is: #\".$purchase_id.\".\";\n\n    } catch (PDOException $e) {\n      echo 'Error inserting into database: '. $e->getMessage();\n    }\n  }\n}\n?>\n```\nThis code:\n\n*   Establishes a connection to the MySQL database.\n*   Creates an HTML form with dropdown menus for product selection and payment methods, as well as an input field for quantity.\n*   Upon form submission, extracts the selected data and performs basic validation (checking if the quantity is greater than zero).\n*   Inserts a new record into the `purchases` table in the database if the data passes validation.\n\nThis code uses PDO for MySQL connection. The database tables (`products` and `purchases`) are assumed to have the following structure:\n\n```sql\nCREATE TABLE products (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  name VARCHAR(255),\n  description TEXT\n);\n\nCREATE TABLE purchases (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  product_id INT NOT NULL,\n  quantity INT NOT NULL,\n  payment_method VARCHAR(20) NOT NULL,\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n\nThis code is just an example. You should consider implementing additional features and error checking, such as:\n\n*   Verifying that the user has sufficient balance for a purchase\n*   Handling multiple purchases in one transaction\n*   Implementing more complex payment methods (e.g., PayPal, Stripe)\n*   Adding validation rules for product selection and quantity", "code_blocks": ["```php\n<?php\n// Database connection settings\n$host = 'localhost';\n$dbname = 'mydatabase';\n$username = 'myuser';\n$password = 'mypassword';\n\n// Create a new connection\n$conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n\n// Purchase form\n?>\n<form action=\"\" method=\"post\">\n  <label for=\"product\">Product:</label>\n  <select name=\"product\" required>\n    <?php\n      // Retrieve products from database and display in select menu\n      $query = \"SELECT * FROM products\";\n      $stmt = $conn->prepare($query);\n      $stmt->execute();\n      while ($row = $stmt->fetch()) {\n        echo \"<option value='\" . $row['id'] . \"'>\" . $row['name'] . \"</option>\";\n      }\n    ?>\n  </select>\n  \n  <label for=\"quantity\">Quantity:</label>\n  <input type=\"number\" name=\"quantity\" required>\n\n  <label for=\"payment_method\">Payment Method:</label>\n  <select name=\"payment_method\" required>\n    <option value=\"cash\">Cash</option>\n    <option value=\"credit_card\">Credit Card</option>\n  </select>\n\n  <button type=\"submit\">Purchase</button>\n</form>\n\n<?php\nif (isset($_POST['product']) && isset($_POST['quantity']) && isset($_POST['payment_method'])) {\n  // Extract data from form submission\n  $product_id = $_POST['product'];\n  $quantity = $_POST['quantity'];\n  $payment_method = $_POST['payment_method'];\n\n  // Validate data\n  if ($quantity < 1) {\n    echo \"Invalid quantity. Please enter a number greater than zero.\";\n  } else {\n    try {\n      // Insert purchase into database\n      $query = \"INSERT INTO purchases (product_id, quantity, payment_method) VALUES (:id, :qty, :pm)\";\n      $stmt = $conn->prepare($query);\n      $stmt->bindParam(':id', $product_id);\n      $stmt->bindParam(':qty', $quantity);\n      $stmt->bindParam(':pm', $payment_method);\n      $stmt->execute();\n\n      // Retrieve the purchase ID\n      $purchase_id = $conn->lastInsertId();\n\n      echo \"Purchase successful. Your order number is: #\".$purchase_id.\".\";\n\n    } catch (PDOException $e) {\n      echo 'Error inserting into database: '. $e->getMessage();\n    }\n  }\n}\n?>\n```", null]}
