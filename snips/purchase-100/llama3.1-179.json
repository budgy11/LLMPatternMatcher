{"prompt": "Create a purchase functionality using php", "llm_output": "**Purchase Functionality in PHP**\n=====================================\n\nThis is an example of a basic purchase functionality using PHP, including user authentication and payment processing.\n\n**Database Schema**\n--------------------\n\nFor this example, we will use a simple database schema with the following tables:\n\n*   **users**: stores user information (id, name, email)\n*   **products**: stores product information (id, name, price)\n*   **orders**: stores order information (id, user_id, product_id, quantity, total_price)\n\n**Database Connection**\n-----------------------\n\nWe will use the PDO extension to connect to our database.\n\n```php\n// db.php\n\nclass Database {\n    private static $conn;\n\n    public static function getConnection() {\n        if (!isset(self::$conn)) {\n            try {\n                self::$conn = new PDO('mysql:host=localhost;dbname=example', 'username', 'password');\n                self::$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n            } catch (PDOException $e) {\n                die(\"ERROR: Could not connect. \" . $e->getMessage());\n            }\n        }\n        return self::$conn;\n    }\n}\n```\n\n**User Authentication**\n----------------------\n\nWe will create a simple user authentication system using sessions and password hashing.\n\n```php\n// auth.php\n\nclass Auth {\n    private static $users;\n\n    public static function register($name, $email, $password) {\n        try {\n            $stmt = Database::getConnection()->prepare('INSERT INTO users (name, email, password) VALUES (?, ?, ?)');\n            $stmt->execute([$name, $email, password_hash($password, PASSWORD_DEFAULT)]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"ERROR: Could not register. \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    public static function login($email, $password) {\n        try {\n            $stmt = Database::getConnection()->prepare('SELECT * FROM users WHERE email = ?');\n            $stmt->execute([$email]);\n            $user = $stmt->fetch();\n            if ($user && password_verify($password, $user['password'])) {\n                $_SESSION['user_id'] = $user['id'];\n                return true;\n            }\n        } catch (PDOException $e) {\n            echo \"ERROR: Could not login. \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    public static function isLoggedIn() {\n        if (!isset($_SESSION['user_id'])) {\n            header('Location: index.php');\n            exit;\n        }\n        return true;\n    }\n}\n```\n\n**Product Model**\n------------------\n\nWe will create a simple product model to encapsulate business logic.\n\n```php\n// product.php\n\nclass Product {\n    private $id;\n    private $name;\n    private $price;\n\n    public function __construct($id, $name, $price) {\n        $this->id = $id;\n        $this->name = $name;\n        $this->price = $price;\n    }\n\n    public function getId() {\n        return $this->id;\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function getPrice() {\n        return $this->price;\n    }\n}\n```\n\n**Purchase Functionality**\n---------------------------\n\nWe will create a simple purchase functionality that allows users to add products to their cart and checkout.\n\n```php\n// index.php\n\nrequire_once 'db.php';\nrequire_once 'auth.php';\nrequire_once 'product.php';\n\nif (Auth::isLoggedIn()) {\n    $cart = array();\n    if (isset($_SESSION['cart'])) {\n        $cart = unserialize($_SESSION['cart']);\n    }\n\n    if (isset($_POST['add_to_cart'])) {\n        $product_id = $_POST['product_id'];\n        $quantity = $_POST['quantity'];\n\n        if (!array_key_exists($product_id, $cart)) {\n            $cart[$product_id] = array('quantity' => 1);\n        } else {\n            $cart[$product_id]['quantity'] += 1;\n        }\n\n        $_SESSION['cart'] = serialize($cart);\n\n        header('Location: index.php');\n        exit;\n    }\n\n    if (isset($_POST['checkout'])) {\n        // Process payment using a payment gateway like Stripe or PayPal\n        // ...\n\n        $stmt = Database::getConnection()->prepare('INSERT INTO orders (user_id, product_id, quantity, total_price) VALUES (?, ?, ?, ?)');\n        foreach ($cart as $product_id => $details) {\n            $stmt->execute([$_SESSION['user_id'], $product_id, $details['quantity'], $details['quantity'] * Product::getProduct($product_id)->getPrice()]);\n        }\n\n        unset($_SESSION['cart']);\n        header('Location: thankyou.php');\n        exit;\n    }\n} else {\n    // Redirect to login page if user is not logged in\n}\n```\n\n**Thank You Page**\n------------------\n\nWe will create a simple thank you page that confirms the order has been placed.\n\n```php\n// thankyou.php\n\nrequire_once 'db.php';\n\nif (Auth::isLoggedIn()) {\n    echo \"Thank you for your purchase!\";\n} else {\n    // Redirect to login page if user is not logged in\n}\n```\n\nThis is a basic example of a purchase functionality using PHP. You will need to adapt it to fit your specific requirements and database schema.\n\nNote: This code assumes that you have already set up a MySQL database with the required tables and data. Additionally, this code uses password hashing for user authentication, but you should use a secure password storage solution like bcrypt or Argon2 in production environments.", "code_blocks": ["```php\n// db.php\n\nclass Database {\n    private static $conn;\n\n    public static function getConnection() {\n        if (!isset(self::$conn)) {\n            try {\n                self::$conn = new PDO('mysql:host=localhost;dbname=example', 'username', 'password');\n                self::$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n            } catch (PDOException $e) {\n                die(\"ERROR: Could not connect. \" . $e->getMessage());\n            }\n        }\n        return self::$conn;\n    }\n}\n```", "```php\n// auth.php\n\nclass Auth {\n    private static $users;\n\n    public static function register($name, $email, $password) {\n        try {\n            $stmt = Database::getConnection()->prepare('INSERT INTO users (name, email, password) VALUES (?, ?, ?)');\n            $stmt->execute([$name, $email, password_hash($password, PASSWORD_DEFAULT)]);\n            return true;\n        } catch (PDOException $e) {\n            echo \"ERROR: Could not register. \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    public static function login($email, $password) {\n        try {\n            $stmt = Database::getConnection()->prepare('SELECT * FROM users WHERE email = ?');\n            $stmt->execute([$email]);\n            $user = $stmt->fetch();\n            if ($user && password_verify($password, $user['password'])) {\n                $_SESSION['user_id'] = $user['id'];\n                return true;\n            }\n        } catch (PDOException $e) {\n            echo \"ERROR: Could not login. \" . $e->getMessage();\n            return false;\n        }\n    }\n\n    public static function isLoggedIn() {\n        if (!isset($_SESSION['user_id'])) {\n            header('Location: index.php');\n            exit;\n        }\n        return true;\n    }\n}\n```", "```php\n// product.php\n\nclass Product {\n    private $id;\n    private $name;\n    private $price;\n\n    public function __construct($id, $name, $price) {\n        $this->id = $id;\n        $this->name = $name;\n        $this->price = $price;\n    }\n\n    public function getId() {\n        return $this->id;\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function getPrice() {\n        return $this->price;\n    }\n}\n```", "```php\n// index.php\n\nrequire_once 'db.php';\nrequire_once 'auth.php';\nrequire_once 'product.php';\n\nif (Auth::isLoggedIn()) {\n    $cart = array();\n    if (isset($_SESSION['cart'])) {\n        $cart = unserialize($_SESSION['cart']);\n    }\n\n    if (isset($_POST['add_to_cart'])) {\n        $product_id = $_POST['product_id'];\n        $quantity = $_POST['quantity'];\n\n        if (!array_key_exists($product_id, $cart)) {\n            $cart[$product_id] = array('quantity' => 1);\n        } else {\n            $cart[$product_id]['quantity'] += 1;\n        }\n\n        $_SESSION['cart'] = serialize($cart);\n\n        header('Location: index.php');\n        exit;\n    }\n\n    if (isset($_POST['checkout'])) {\n        // Process payment using a payment gateway like Stripe or PayPal\n        // ...\n\n        $stmt = Database::getConnection()->prepare('INSERT INTO orders (user_id, product_id, quantity, total_price) VALUES (?, ?, ?, ?)');\n        foreach ($cart as $product_id => $details) {\n            $stmt->execute([$_SESSION['user_id'], $product_id, $details['quantity'], $details['quantity'] * Product::getProduct($product_id)->getPrice()]);\n        }\n\n        unset($_SESSION['cart']);\n        header('Location: thankyou.php');\n        exit;\n    }\n} else {\n    // Redirect to login page if user is not logged in\n}\n```", "```php\n// thankyou.php\n\nrequire_once 'db.php';\n\nif (Auth::isLoggedIn()) {\n    echo \"Thank you for your purchase!\";\n} else {\n    // Redirect to login page if user is not logged in\n}\n```"]}
