{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nAlright, I need to create a purchase functionality using PHP. Let me break down what this entails.\n\nFirst, the user needs to be authenticated. So, I'll check if they're logged in by verifying their session or cookie. If not, redirect them to the login page with an error message.\n\nNext, I should retrieve product details from the database based on the provided product ID. This will let me display the correct item information and also verify that the product exists and is available for purchase.\n\nCalculating the total price is important. I'll multiply the product's price by the quantity selected. To prevent issues with floating-point arithmetic, I'll use number_format to handle it accurately.\n\nNow, handling the payment method. Since this example doesn't integrate external gateways, I'll create a placeholder function, process_payment(), which returns success for demonstration. In a real scenario, this would interact with an API.\n\nAfter successful payment processing, I need to insert the order into the database. This includes capturing the user's ID, product details, quantity, total price, and timestamp. I should use prepared statements to prevent SQL injection.\n\nI'll also deduct the purchased quantity from the product's stock. Again, using a prepared statement here ensures security and accuracy in updating the inventory.\n\nFinally, redirecting the user with a success message makes sense. Using header() for redirection is standard, but including an exit after it is crucial to prevent any further script execution.\n\nThroughout this process, I'll make sure all database interactions are secure, handle any potential errors gracefully, and ensure that the code is clean and well-structured.\n</think>\n\nHere's an example of a purchase functionality in PHP. This example assumes you have a database with products and users:\n\n```php\n<?php\n// Include necessary files\ninclude('database.php');\ninclude('session.php');\n\n// Check if user is logged in\nif (!isset($_SESSION['user_id'])) {\n    header(\"Location: login.php?error=Please%20login%20to%20continue.\");\n    exit();\n}\n\n// Get product details\n$product_id = isset($_GET['product_id']) ? intval($_GET['product_id']) : 0;\n\n$stmt = $conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n$stmt->bind_param('i', $product_id);\n$stmt->execute();\n$result = $stmt->get_result();\n\nif ($result->num_rows == 0) {\n    header(\"Location: index.php?error=Product%20not%20found.\");\n    exit();\n}\n\n$product = $result->fetch_assoc();\n\n// Handle purchase\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1;\n    \n    // Calculate total price\n    $total_price = number_format($product['price'] * $quantity, 2);\n    \n    // Payment processing\n    $payment_method = $_POST['payment_method'];\n    if (process_payment($payment_method, $total_price)) {\n        // Insert order into database\n        $order_query = \"INSERT INTO orders (user_id, product_id, quantity, total_price, purchase_date) \n                        VALUES (?, ?, ?, ?, NOW())\";\n        \n        $stmt_order = $conn->prepare($order_query);\n        $stmt_order->bind_param('iidi', $_SESSION['user_id'], $product_id, $quantity, $total_price);\n        \n        if ($stmt_order->execute()) {\n            // Deduct quantity from product stock\n            $update_stock = \"UPDATE products SET stock = stock - ? WHERE id = ?\";\n            $stmt_update = $conn->prepare($update_stock);\n            $stmt_update->bind_param('ii', $quantity, $product_id);\n            \n            if ($stmt_update->execute()) {\n                header(\"Location: success.php?message=Purchase%20successful.\");\n                exit();\n            } else {\n                // Error deducting stock\n                echo \"Error updating stock.\";\n                exit();\n            }\n        } else {\n            // Order insertion failed\n            echo \"Order could not be processed.\";\n            exit();\n        }\n    } else {\n        // Payment processing failed\n        header(\"Location: index.php?error=Payment%20failed.\");\n        exit();\n    }\n}\n\n// Close database connections\n$stmt->close();\n$conn->close();\n\nfunction process_payment($payment_method, $amount) {\n    // Implement actual payment processing logic here\n    // This is just a placeholder for demonstration\n    return true;\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Purchase Product</title>\n</head>\n<body>\n    <h1>Confirm Purchase</h1>\n    <form method=\"POST\">\n        <p><strong>Product:</strong> <?php echo $product['name']; ?></p>\n        <p><strong>Price:</strong> <?php echo \"$\" . number_format($product['price'], 2); ?></p>\n        <p><strong>Stock Available:</strong> <?php echo $product['stock']; ?></p>\n        \n        <label for=\"quantity\">Quantity:</label>\n        <input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"<?php echo $product['stock']; ?>\" value=\"1\">\n        \n        <h3>Payment Method</h3>\n        <input type=\"radio\" name=\"payment_method\" value=\"credit_card\"> Credit Card<br>\n        <input type=\"radio\" name=\"payment_method\" value=\"paypal\"> PayPal<br>\n        <input type=\"radio\" name=\"payment_method\" value=\"bank_transfer\"> Bank Transfer\n        \n        <br><br>\n        <button type=\"submit\">Purchase</button>\n    </form>\n</body>\n</html>\n```\n\nThis code provides the following functionality:\n\n1. Checks if user is logged in\n2. Retrieves product details from database\n3. Displays product information and purchase form\n4. Processes the purchase when form is submitted\n5. Calculates total price based on quantity\n6. Implements a basic payment processing system (placeholder)\n7. Updates orders table with purchase details\n8. Deducts purchased quantity from product stock\n\nKey features:\n\n- Secure database interactions using prepared statements\n- Quantity validation against available stock\n- Basic error handling and redirects\n- Payment method selection\n- Order tracking through the orders table\n\nTo implement this code properly, you need to:\n\n1. Create a database with tables for products, users, and orders\n2. Set up proper user authentication\n3. Implement real payment processing in the `process_payment()` function\n4. Add input validation and sanitization as needed\n5. Include proper error handling and logging\n\nYou should also consider adding:\n\n- More robust error handling\n- Input validation and sanitization\n- CSRF protection\n- Proper security measures for sensitive data\n- Additional fields and functionality as needed for your specific use case\n\nRemember that this is a basic example and might need to be modified based on your specific requirements. You should also implement proper security measures and best practices when dealing with real-world applications, especially those involving financial transactions.\n\nFor production-level code, you would want to:\n\n1. Use an actual payment gateway (e.g., Stripe, PayPal)\n2. Implement secure storage for sensitive information\n3. Add more comprehensive error handling\n4. Include transaction management for database operations\n5. Implement proper logging and monitoring\n6. Add input validation and sanitization\n7. Include CSRF protection\n8. Use HTTPS for all transactions", "code_blocks": ["```php\n<?php\n// Include necessary files\ninclude('database.php');\ninclude('session.php');\n\n// Check if user is logged in\nif (!isset($_SESSION['user_id'])) {\n    header(\"Location: login.php?error=Please%20login%20to%20continue.\");\n    exit();\n}\n\n// Get product details\n$product_id = isset($_GET['product_id']) ? intval($_GET['product_id']) : 0;\n\n$stmt = $conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n$stmt->bind_param('i', $product_id);\n$stmt->execute();\n$result = $stmt->get_result();\n\nif ($result->num_rows == 0) {\n    header(\"Location: index.php?error=Product%20not%20found.\");\n    exit();\n}\n\n$product = $result->fetch_assoc();\n\n// Handle purchase\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $quantity = isset($_POST['quantity']) ? intval($_POST['quantity']) : 1;\n    \n    // Calculate total price\n    $total_price = number_format($product['price'] * $quantity, 2);\n    \n    // Payment processing\n    $payment_method = $_POST['payment_method'];\n    if (process_payment($payment_method, $total_price)) {\n        // Insert order into database\n        $order_query = \"INSERT INTO orders (user_id, product_id, quantity, total_price, purchase_date) \n                        VALUES (?, ?, ?, ?, NOW())\";\n        \n        $stmt_order = $conn->prepare($order_query);\n        $stmt_order->bind_param('iidi', $_SESSION['user_id'], $product_id, $quantity, $total_price);\n        \n        if ($stmt_order->execute()) {\n            // Deduct quantity from product stock\n            $update_stock = \"UPDATE products SET stock = stock - ? WHERE id = ?\";\n            $stmt_update = $conn->prepare($update_stock);\n            $stmt_update->bind_param('ii', $quantity, $product_id);\n            \n            if ($stmt_update->execute()) {\n                header(\"Location: success.php?message=Purchase%20successful.\");\n                exit();\n            } else {\n                // Error deducting stock\n                echo \"Error updating stock.\";\n                exit();\n            }\n        } else {\n            // Order insertion failed\n            echo \"Order could not be processed.\";\n            exit();\n        }\n    } else {\n        // Payment processing failed\n        header(\"Location: index.php?error=Payment%20failed.\");\n        exit();\n    }\n}\n\n// Close database connections\n$stmt->close();\n$conn->close();\n\nfunction process_payment($payment_method, $amount) {\n    // Implement actual payment processing logic here\n    // This is just a placeholder for demonstration\n    return true;\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Purchase Product</title>\n</head>\n<body>\n    <h1>Confirm Purchase</h1>\n    <form method=\"POST\">\n        <p><strong>Product:</strong> <?php echo $product['name']; ?></p>\n        <p><strong>Price:</strong> <?php echo \"$\" . number_format($product['price'], 2); ?></p>\n        <p><strong>Stock Available:</strong> <?php echo $product['stock']; ?></p>\n        \n        <label for=\"quantity\">Quantity:</label>\n        <input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"<?php echo $product['stock']; ?>\" value=\"1\">\n        \n        <h3>Payment Method</h3>\n        <input type=\"radio\" name=\"payment_method\" value=\"credit_card\"> Credit Card<br>\n        <input type=\"radio\" name=\"payment_method\" value=\"paypal\"> PayPal<br>\n        <input type=\"radio\" name=\"payment_method\" value=\"bank_transfer\"> Bank Transfer\n        \n        <br><br>\n        <button type=\"submit\">Purchase</button>\n    </form>\n</body>\n</html>\n```"]}
