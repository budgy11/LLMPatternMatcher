{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of a basic purchase functionality using PHP, HTML, and MySQL. This example assumes that you have a database set up with the necessary tables for storing products and orders.\n\n**Database Schema**\n\n```sql\nCREATE TABLE products (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE orders (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT,\n  order_date DATE,\n  total DECIMAL(10,2)\n);\n\nCREATE TABLE order_items (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  order_id INT,\n  product_id INT,\n  quantity INT\n);\n```\n\n**PHP Code**\n\n```php\n<?php\n\n// Configuration file with database credentials and other settings\nrequire_once 'config.php';\n\n// Function to add a new order\nfunction addOrder($userId, $products) {\n  // Insert new order into orders table\n  $query = \"INSERT INTO orders (user_id, order_date, total)\n            VALUES (:user_id, NOW(), :total)\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':user_id', $userId);\n  $stmt->bindParam(':total', $products['total']);\n  $stmt->execute();\n\n  // Get the ID of the newly inserted order\n  $orderId = $pdo->lastInsertId();\n\n  // Insert new order items into order_items table\n  foreach ($products as $product) {\n    $query = \"INSERT INTO order_items (order_id, product_id, quantity)\n              VALUES (:order_id, :product_id, :quantity)\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':order_id', $orderId);\n    $stmt->bindParam(':product_id', $product['id']);\n    $stmt->bindParam(':quantity', $product['quantity']);\n    $stmt->execute();\n  }\n\n  return $orderId;\n}\n\n// Function to get the cart contents\nfunction getCartContents($userId) {\n  // Query the order_items table for all items in the user's cart\n  $query = \"SELECT p.name, oi.quantity, o.id AS order_id\n            FROM order_items oi\n            JOIN products p ON oi.product_id = p.id\n            JOIN orders o ON oi.order_id = o.id\n            WHERE o.user_id = :user_id\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':user_id', $userId);\n  $stmt->execute();\n\n  // Fetch the results and return them as an array\n  return $stmt->fetchAll();\n}\n\n// Function to update the quantity of a product in the cart\nfunction updateCartQuantity($orderId, $productId, $quantity) {\n  // Update the quantity of the product in the order_items table\n  $query = \"UPDATE order_items SET quantity = :quantity\n            WHERE order_id = :order_id AND product_id = :product_id\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':quantity', $quantity);\n  $stmt->bindParam(':order_id', $orderId);\n  $stmt->bindParam(':product_id', $productId);\n  $stmt->execute();\n}\n\n// Function to remove a product from the cart\nfunction removeProductFromCart($orderId, $productId) {\n  // Delete the order item from the order_items table\n  $query = \"DELETE FROM order_items WHERE order_id = :order_id AND product_id = :product_id\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':order_id', $orderId);\n  $stmt->bindParam(':product_id', $productId);\n  $stmt->execute();\n}\n\n// Example usage:\n$userId = 1; // Replace with the actual user ID\n$productIds = array(1, 2, 3); // Replace with the actual product IDs\n$quantities = array(2, 1, 3);\n\n// Add products to cart\nforeach ($productIds as $i => $productId) {\n  updateCartQuantity(addOrder($userId, array('total' => 0)), $productId, $quantities[$i]);\n}\n\n// Get the cart contents\n$cartContents = getCartContents($userId);\nprint_r($cartContents);\n\n?>\n```\n\n**HTML Code**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Purchase</title>\n</head>\n<body>\n\n  <?php if ($cartContents): ?>\n    <h1>Cart Contents:</h1>\n    <ul>\n      <?php foreach ($cartContents as $item): ?>\n        <li><?= $item['name'] ?> x <?= $item['quantity'] ?></li>\n      <?php endforeach; ?>\n    </ul>\n\n    <form action=\"process.php\" method=\"post\">\n      <button type=\"submit\">Proceed to Checkout</button>\n    </form>\n\n  <?php else: ?>\n    <p>Your cart is empty.</p>\n  <?php endif; ?>\n\n</body>\n</html>\n```\n\n**Process.php**\n\n```php\n<?php\n\n// Configuration file with database credentials and other settings\nrequire_once 'config.php';\n\n// Function to process the purchase\nfunction processPurchase($orderId) {\n  // Update the status of the order in the orders table\n  $query = \"UPDATE orders SET status = :status WHERE id = :order_id\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':status', 'paid');\n  $stmt->bindParam(':order_id', $orderId);\n  $stmt->execute();\n\n  // Insert a new payment into the payments table\n  $query = \"INSERT INTO payments (order_id, amount)\n            VALUES (:order_id, :amount)\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':order_id', $orderId);\n  $stmt->bindParam(':amount', '12.99'); // Replace with the actual amount\n  $stmt->execute();\n}\n\n// Example usage:\n$orderId = $_POST['order_id'];\n\nprocessPurchase($orderId);\n\n?>\n```\n\nThis is a basic example of how you can implement a purchase functionality using PHP and MySQL. You will need to adapt this code to fit your specific needs and requirements.\n\nPlease note that this example does not include any error handling, validation, or security measures that you should include in a production-ready application.\n\nAlso, the database schema and queries used in this example are simplified for illustration purposes only and may not be suitable for a real-world application. You should consult with a qualified professional to ensure that your database design and queries meet your specific requirements.", "code_blocks": [null, "```php\n<?php\n\n// Configuration file with database credentials and other settings\nrequire_once 'config.php';\n\n// Function to add a new order\nfunction addOrder($userId, $products) {\n  // Insert new order into orders table\n  $query = \"INSERT INTO orders (user_id, order_date, total)\n            VALUES (:user_id, NOW(), :total)\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':user_id', $userId);\n  $stmt->bindParam(':total', $products['total']);\n  $stmt->execute();\n\n  // Get the ID of the newly inserted order\n  $orderId = $pdo->lastInsertId();\n\n  // Insert new order items into order_items table\n  foreach ($products as $product) {\n    $query = \"INSERT INTO order_items (order_id, product_id, quantity)\n              VALUES (:order_id, :product_id, :quantity)\";\n    $stmt = $pdo->prepare($query);\n    $stmt->bindParam(':order_id', $orderId);\n    $stmt->bindParam(':product_id', $product['id']);\n    $stmt->bindParam(':quantity', $product['quantity']);\n    $stmt->execute();\n  }\n\n  return $orderId;\n}\n\n// Function to get the cart contents\nfunction getCartContents($userId) {\n  // Query the order_items table for all items in the user's cart\n  $query = \"SELECT p.name, oi.quantity, o.id AS order_id\n            FROM order_items oi\n            JOIN products p ON oi.product_id = p.id\n            JOIN orders o ON oi.order_id = o.id\n            WHERE o.user_id = :user_id\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':user_id', $userId);\n  $stmt->execute();\n\n  // Fetch the results and return them as an array\n  return $stmt->fetchAll();\n}\n\n// Function to update the quantity of a product in the cart\nfunction updateCartQuantity($orderId, $productId, $quantity) {\n  // Update the quantity of the product in the order_items table\n  $query = \"UPDATE order_items SET quantity = :quantity\n            WHERE order_id = :order_id AND product_id = :product_id\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':quantity', $quantity);\n  $stmt->bindParam(':order_id', $orderId);\n  $stmt->bindParam(':product_id', $productId);\n  $stmt->execute();\n}\n\n// Function to remove a product from the cart\nfunction removeProductFromCart($orderId, $productId) {\n  // Delete the order item from the order_items table\n  $query = \"DELETE FROM order_items WHERE order_id = :order_id AND product_id = :product_id\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':order_id', $orderId);\n  $stmt->bindParam(':product_id', $productId);\n  $stmt->execute();\n}\n\n// Example usage:\n$userId = 1; // Replace with the actual user ID\n$productIds = array(1, 2, 3); // Replace with the actual product IDs\n$quantities = array(2, 1, 3);\n\n// Add products to cart\nforeach ($productIds as $i => $productId) {\n  updateCartQuantity(addOrder($userId, array('total' => 0)), $productId, $quantities[$i]);\n}\n\n// Get the cart contents\n$cartContents = getCartContents($userId);\nprint_r($cartContents);\n\n?>\n```", null, "```php\n<?php\n\n// Configuration file with database credentials and other settings\nrequire_once 'config.php';\n\n// Function to process the purchase\nfunction processPurchase($orderId) {\n  // Update the status of the order in the orders table\n  $query = \"UPDATE orders SET status = :status WHERE id = :order_id\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':status', 'paid');\n  $stmt->bindParam(':order_id', $orderId);\n  $stmt->execute();\n\n  // Insert a new payment into the payments table\n  $query = \"INSERT INTO payments (order_id, amount)\n            VALUES (:order_id, :amount)\";\n  $stmt = $pdo->prepare($query);\n  $stmt->bindParam(':order_id', $orderId);\n  $stmt->bindParam(':amount', '12.99'); // Replace with the actual amount\n  $stmt->execute();\n}\n\n// Example usage:\n$orderId = $_POST['order_id'];\n\nprocessPurchase($orderId);\n\n?>\n```"]}
