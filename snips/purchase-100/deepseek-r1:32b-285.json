{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nAlright, so the user wants to create a purchase functionality using PHP. I need to figure out how to approach this. Let me break it down.\n\nFirst, I should consider what a basic purchase system entails. It usually involves allowing users to select items, add them to a cart, and then check out by entering their payment details. So, I'll need a way to display products, manage the shopping cart, and process payments.\n\nI'll start by setting up the database. That means creating tables for products, orders, order items, and customers. The product table should have details like id, name, description, price, and stock. Orders will track each purchase with an order number, customer info, total amount, payment status, and timestamps. Order items will link each product to an order, storing quantity and subtotal. Customers need their own table for personal data.\n\nNext, I'll write PHP functions for each part: adding products, displaying them, managing the cart via cookies or sessions, checking stock, handling orders, processing payments, sending receipts, and displaying purchase history.\n\nDisplaying products is straightforward\u2014fetch from the database and loop through to show each item. Adding a product to the cart can be done with cookies by encoding the product data into a string or using sessions which might be more secure and easier to manage.\n\nWhen adding items to the cart, I need to check if the product already exists in the cart so I can update its quantity instead of adding a new entry. Also, ensuring stock levels are sufficient is crucial; if there's not enough stock, the user should get an error message.\n\nProcessing the order involves checking out, where customers enter their details. I'll capture these, along with the total from the cart, and insert them into the orders table. Then, each item in the cart needs to be inserted into the order items table with quantities and subtotals.\n\nFor payment processing, since this is a basic example, I'll simulate it by checking if the provided card number meets certain criteria (like starting with 4242 and having 16 digits). In a real-world scenario, integrating with a payment gateway like Stripe or PayPal would be necessary.\n\nAfter successful payment, an order summary email should be sent to the customer. This can be done using PHP's mail function, which might require additional configuration depending on the server setup.\n\nFinally, displaying purchase history involves fetching all orders for a specific customer and listing them along with their items. This helps users track their past purchases.\n\nI also need to consider security aspects, like preventing SQL injection by using prepared statements or parameterized queries, especially when inserting user data into the database. Session management should be secure too, ensuring that session IDs are strong and not guessable.\n\nTesting each part step by step is important. I'll start by verifying if products display correctly, then check adding to cart functionality, ensure orders are recorded properly, test payment processing both successful and failed cases, confirm emails are sent, and that purchase history is accurate.\n\nDocumentation is another key aspect. Providing clear instructions on how to set up the database, install any necessary PHP extensions (like mbstring for encryption functions), and how to use each part of the system will help users implement it smoothly.\n\nPotential areas for improvement include implementing user authentication, handling different payment methods with real gateways, adding more error checking, and improving the frontend experience. But for a basic functionality, this should cover the essentials.\n</think>\n\nCreating a purchase functionality using PHP involves several steps, including setting up a database, creating product listings, managing a shopping cart, processing payments, and displaying purchase history. Below is an example implementation.\n\n### Step 1: Database Setup\n\nFirst, create a database and tables for products, orders, and customers:\n\n```sql\nCREATE DATABASE online_store;\n\nUSE online_store;\n\n-- Table to store product information\nCREATE TABLE products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    stock INT DEFAULT 0\n);\n\n-- Table to store customer orders\nCREATE TABLE orders (\n    order_id INT AUTO_INCREMENT PRIMARY KEY,\n    customer_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    payment_status ENUM('pending', 'completed') DEFAULT 'pending',\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Table to store order details\nCREATE TABLE order_items (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    subtotal DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(id)\n);\n\n-- Table to store customer information\nCREATE TABLE customers (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    first_name VARCHAR(255) NOT NULL,\n    last_name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone_number VARCHAR(15),\n    address TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### Step 2: Displaying Products\n\nCreate a PHP file (`display_products.php`) to display available products:\n\n```php\n<?php\ninclude 'db_connection.php';\n\n// Fetch all products from the database\n$sql = \"SELECT * FROM products\";\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    while ($row = $result->fetch_assoc()) {\n        echo \"<div class='product'>\";\n        echo \"<h2>\" . $row['name'] . \"</h2>\";\n        echo \"<p>Description: \" . $row['description'] . \"</p>\";\n        echo \"<p>Price: $\" . number_format($row['price'], 2) . \"</p>\";\n        echo \"<p>Stock: \" . $row['stock'] . \"</p>\";\n        echo \"<form action='add_to_cart.php' method='post'>\";\n        echo \"<input type='hidden' name='product_id' value='\" . $row['id'] . \"'>\";\n        echo \"<input type='number' name='quantity' min='1' max='\" . $row['stock'] . \"' required>\";\n        echo \"<button type='submit'>Add to Cart</button>\";\n        echo \"</form>\";\n        echo \"</div>\";\n    }\n} else {\n    echo \"No products available.\";\n}\n\n$conn->close();\n?>\n```\n\n### Step 3: Adding Products to the Cart\n\nCreate a PHP file (`add_to_cart.php`) to handle adding products to the cart:\n\n```php\n<?php\nsession_start();\n\n// Get product details from the form submission\n$product_id = $_POST['product_id'];\n$quantity = $_POST['quantity'];\n\n// Connect to the database\ninclude 'db_connection.php';\n\n// Fetch product information\n$sql = \"SELECT * FROM products WHERE id = $product_id\";\n$result = $conn->query($sql);\n$product = $result->fetch_assoc();\n\nif ($product) {\n    // Check if the cart exists in the session, create it if not\n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n\n    // Add the product to the cart or update its quantity\n    $cart_item = array(\n        'id' => $product_id,\n        'name' => $product['name'],\n        'price' => $product['price'],\n        'quantity' => $quantity\n    );\n\n    if (isset($_SESSION['cart'][$product_id])) {\n        // If the product is already in the cart, update its quantity\n        $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n    } else {\n        // Add the product to the cart\n        $_SESSION['cart'][$product_id] = $cart_item;\n    }\n\n    // Redirect back to the product list page\n    header(\"Location: display_products.php\");\n} else {\n    // Product not found in the database\n    echo \"Product not found.\";\n}\n\n$conn->close();\n?>\n```\n\n### Step 4: Processing Orders\n\nCreate a PHP file (`process_order.php`) to handle order processing:\n\n```php\n<?php\nsession_start();\n\ninclude 'db_connection.php';\n\n// Check if the cart is empty\nif (empty($_SESSION['cart'])) {\n    header(\"Location: display_products.php\");\n    exit();\n}\n\n// Get customer information from the form submission\n$first_name = $_POST['first_name'];\n$last_name = $_POST['last_name'];\n$email = $_POST['email'];\n$phone_number = $_POST['phone_number'];\n$address = $_POST['address'];\n\n// Calculate total amount\n$total_amount = 0;\nforeach ($_SESSION['cart'] as $product) {\n    $total_amount += ($product['price'] * $product['quantity']);\n}\n\n// Insert the order into the orders table\n$sql = \"INSERT INTO orders (customer_name, email, total_amount, payment_status)\n        VALUES ('$first_name $last_name', '$email', '$total_amount', 'pending')\";\n\nif ($conn->query($sql)) {\n    // Get the last inserted order ID\n    $order_id = $conn->insert_id;\n\n    // Insert each item into the order_items table\n    foreach ($_SESSION['cart'] as $product) {\n        $subtotal = $product['price'] * $product['quantity'];\n        $sql_item = \"INSERT INTO order_items (order_id, product_id, quantity, subtotal)\n                    VALUES ('$order_id', '$product[id]', '$product[quantity]', '$subtotal')\";\n\n        if (!$conn->query($sql_item)) {\n            // Error inserting order item\n            echo \"Error: \" . $sql_item . \"<br>\" . $conn->error;\n            exit();\n        }\n    }\n\n    // Clear the cart\n    unset($_SESSION['cart']);\n\n    // Display a success message\n    echo \"Order processed successfully!\";\n} else {\n    // Error inserting order\n    echo \"Error: \" . $sql . \"<br>\" . $conn->error;\n}\n\n$conn->close();\n?>\n```\n\n### Step 5: Payment Processing\n\nCreate a PHP file (`payment_processing.php`) to handle payment processing:\n\n```php\n<?php\nsession_start();\n\ninclude 'db_connection.php';\n\n// Get the order ID from the session\nif (isset($_SESSION['order_id'])) {\n    $order_id = $_SESSION['order_id'];\n} else {\n    // No order found\n    echo \"No order found.\";\n    exit();\n}\n\n// Process payment here (this is a simplified example)\n$card_number = $_POST['card_number'];\n$expiration_date = $_POST['expiration_date'];\n$cvv = $_POST['cvv'];\n\n// Validate the card information (simplified validation)\nif (\n    strlen($card_number) == 16 &&\n    ctype_digit($card_number) &&\n    strlen($cvv) == 3 &&\n    ctype_digit($cvv)\n) {\n    // Payment is successful\n    $sql = \"UPDATE orders SET payment_status = 'completed' WHERE order_id = $order_id\";\n    if ($conn->query($sql)) {\n        // Redirect to a thank you page or display a success message\n        header(\"Location: order_confirmation.php\");\n        exit();\n    } else {\n        echo \"Error updating payment status.\";\n    }\n} else {\n    // Payment failed due to invalid card information\n    echo \"Invalid card details. Please try again.\";\n}\n\n$conn->close();\n?>\n```\n\n### Step 6: Displaying Purchase History\n\nCreate a PHP file (`purchase_history.php`) to display the customer's purchase history:\n\n```php\n<?php\nsession_start();\n\ninclude 'db_connection.php';\n\n// Check if the user is logged in (you should implement your own authentication system)\nif (!isset($_SESSION['user_id'])) {\n    header(\"Location: login.php\");\n    exit();\n}\n\n// Get the customer's orders from the database\n$sql = \"SELECT * FROM orders WHERE email = '\".$_SESSION['email'].\"' ORDER BY created_at DESC\";\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    while ($row = $result->fetch_assoc()) {\n        echo \"<div class='order'>\";\n        echo \"<h2>Order #\" . $row['order_id'] . \"</h2>\";\n        echo \"<p>Total Amount: $\" . number_format($row['total_amount'], 2) . \"</p>\";\n        echo \"<p>Status: \" . strtoupper($row['payment_status']) . \"</p>\";\n        echo \"<p>Date: \" . date('Y-m-d H:i:s', strtotime($row['created_at'])) . \"</p>\";\n        echo \"</div>\";\n    }\n} else {\n    echo \"No purchase history available.\";\n}\n\n$conn->close();\n?>\n```\n\n### Step 7: Implementing a Shopping Cart\n\nTo implement a shopping cart, you can use PHP sessions to store the cart data. Here's an example of how to display the cart:\n\n```php\n<?php\nsession_start();\n\ninclude 'db_connection.php';\n\n// Check if the cart is empty\nif (empty($_SESSION['cart'])) {\n    echo \"Your cart is empty.\";\n} else {\n    $total = 0;\n    foreach ($_SESSION['cart'] as $product) {\n        $subtotal = $product['price'] * $product['quantity'];\n        $total += $subtotal;\n\n        echo \"<div class='cart-item'>\";\n        echo \"<h3>\" . $product['name'] . \"</h3>\";\n        echo \"<p>Quantity: \" . $product['quantity'] . \"</p>\";\n        echo \"<p>Price: $\" . number_format($product['price'], 2) . \"</p>\";\n        echo \"<p>Subtotal: $\" . number_format($subtotal, 2) . \"</p>\";\n        echo \"</div>\";\n    }\n\n    echo \"<h3>Total: $\" . number_format($total, 2) . \"</h3>\";\n\n    // Display a checkout button\n    echo \"<form action='checkout.php' method='post'>\";\n    echo \"<button type='submit'>Checkout</button>\";\n    echo \"</form>\";\n}\n\n$conn->close();\n?>\n```\n\n### Step 8: Implementing Checkout\n\nCreate a PHP file (`checkout.php`) to handle the checkout process:\n\n```php\n<?php\nsession_start();\n\ninclude 'db_connection.php';\n\n// Check if the cart is empty\nif (empty($_SESSION['cart'])) {\n    header(\"Location: display_products.php\");\n    exit();\n}\n\n// Display the checkout form\n?>\n\n<form action=\"process_order.php\" method=\"post\">\n    <h2>Checkout</h2>\n    <div class=\"checkout-info\">\n        <label for=\"first_name\">First Name:</label>\n        <input type=\"text\" id=\"first_name\" name=\"first_name\" required>\n\n        <label for=\"last_name\">Last Name:</label>\n        <input type=\"text\" id=\"last_name\" name=\"last_name\" required>\n\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n\n        <label for=\"phone_number\">Phone Number:</label>\n        <input type=\"tel\" id=\"phone_number\" name=\"phone_number\" required>\n\n        <label for=\"address\">Address:</label>\n        <textarea id=\"address\" name=\"address\" required></textarea>\n\n        <h3>Payment Information</h3>\n        <label for=\"card_number\">Card Number:</label>\n        <input type=\"text\" id=\"card_number\" name=\"card_number\" pattern=\"[0-9]{16}\" required>\n\n        <label for=\"expiration_date\">Expiration Date:</label>\n        <input type=\"month\" id=\"expiration_date\" name=\"expiration_date\" required>\n\n        <label for=\"cvv\">CVV:</label>\n        <input type=\"text\" id=\"cvv\" name=\"cvv\" pattern=\"[0-9]{3}\" required>\n\n        <button type=\"submit\">Place Order</button>\n    </div>\n</form>\n\n<?php\n$conn->close();\n?>\n```\n\n### Step 9: Sending Confirmation Emails\n\nYou can use PHP's `mail()` function or a library like PHPMailer to send confirmation emails. Here's an example using the `mail()` function:\n\n```php\n<?php\nsession_start();\n\ninclude 'db_connection.php';\n\n// Get the order details from the database\n$sql = \"SELECT * FROM orders WHERE order_id = $_SESSION['order_id']\";\n$result = $conn->query($sql);\n$order = $result->fetch_assoc();\n\n// Compose the email\n$to = $order['email'];\n$subject = \"Order Confirmation - Order #\" . $order['order_id'];\n$body = \"\n<html>\n<head>\n    <title>Order Confirmation</title>\n</head>\n<body>\n    <h2>Order Confirmation</h2>\n    <p>Your order has been processed successfully.</p>\n    <p><strong>Order ID:</strong> \" . $order['order_id'] . \"</p>\n    <p><strong>Total Amount:</strong> $\" . number_format($order['total_amount'], 2) . \"</p>\n    <p>Thank you for shopping with us!</p>\n</body>\n</html\"\n\";\n\n// Set the headers\n$headers = \"From: noreply@yourdomain.com\\r\\n\";\n$headers .= \"MIME-Version: 1.0\\r\\n\";\n$headers .= \"Content-Type: text/html; charset=UTF-8\\r\\n\";\n\nif (mail($to, $subject, $body, $headers)) {\n    echo \"Confirmation email sent successfully.\";\n} else {\n    echo \"Error sending confirmation email.\";\n}\n\n$conn->close();\n?>\n```\n\n### Step 10: Implementing Security\n\nMake sure to implement proper security measures, such as:\n\n- Using HTTPS\n- Sanitizing input data\n- Validating all user inputs\n- Preventing SQL injection\n- Securing session management\n- Implementing CSRF protection\n\n### Conclusion\n\nThis is a basic implementation of purchase functionality using PHP. You can extend it further by adding features like:\n\n- User authentication\n- Admin panel for managing products and orders\n- Payment integration with real payment gateways (e.g., Stripe, PayPal)\n- Order tracking\n- Product reviews and ratings\n- Discount codes\n- Wishlist functionality\n- Search and filtering options\n\nRemember to test your code thoroughly and secure it against common vulnerabilities.", "code_blocks": [null, "```php\n<?php\ninclude 'db_connection.php';\n\n// Fetch all products from the database\n$sql = \"SELECT * FROM products\";\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    while ($row = $result->fetch_assoc()) {\n        echo \"<div class='product'>\";\n        echo \"<h2>\" . $row['name'] . \"</h2>\";\n        echo \"<p>Description: \" . $row['description'] . \"</p>\";\n        echo \"<p>Price: $\" . number_format($row['price'], 2) . \"</p>\";\n        echo \"<p>Stock: \" . $row['stock'] . \"</p>\";\n        echo \"<form action='add_to_cart.php' method='post'>\";\n        echo \"<input type='hidden' name='product_id' value='\" . $row['id'] . \"'>\";\n        echo \"<input type='number' name='quantity' min='1' max='\" . $row['stock'] . \"' required>\";\n        echo \"<button type='submit'>Add to Cart</button>\";\n        echo \"</form>\";\n        echo \"</div>\";\n    }\n} else {\n    echo \"No products available.\";\n}\n\n$conn->close();\n?>\n```", "```php\n<?php\nsession_start();\n\n// Get product details from the form submission\n$product_id = $_POST['product_id'];\n$quantity = $_POST['quantity'];\n\n// Connect to the database\ninclude 'db_connection.php';\n\n// Fetch product information\n$sql = \"SELECT * FROM products WHERE id = $product_id\";\n$result = $conn->query($sql);\n$product = $result->fetch_assoc();\n\nif ($product) {\n    // Check if the cart exists in the session, create it if not\n    if (!isset($_SESSION['cart'])) {\n        $_SESSION['cart'] = array();\n    }\n\n    // Add the product to the cart or update its quantity\n    $cart_item = array(\n        'id' => $product_id,\n        'name' => $product['name'],\n        'price' => $product['price'],\n        'quantity' => $quantity\n    );\n\n    if (isset($_SESSION['cart'][$product_id])) {\n        // If the product is already in the cart, update its quantity\n        $_SESSION['cart'][$product_id]['quantity'] += $quantity;\n    } else {\n        // Add the product to the cart\n        $_SESSION['cart'][$product_id] = $cart_item;\n    }\n\n    // Redirect back to the product list page\n    header(\"Location: display_products.php\");\n} else {\n    // Product not found in the database\n    echo \"Product not found.\";\n}\n\n$conn->close();\n?>\n```", "```php\n<?php\nsession_start();\n\ninclude 'db_connection.php';\n\n// Check if the cart is empty\nif (empty($_SESSION['cart'])) {\n    header(\"Location: display_products.php\");\n    exit();\n}\n\n// Get customer information from the form submission\n$first_name = $_POST['first_name'];\n$last_name = $_POST['last_name'];\n$email = $_POST['email'];\n$phone_number = $_POST['phone_number'];\n$address = $_POST['address'];\n\n// Calculate total amount\n$total_amount = 0;\nforeach ($_SESSION['cart'] as $product) {\n    $total_amount += ($product['price'] * $product['quantity']);\n}\n\n// Insert the order into the orders table\n$sql = \"INSERT INTO orders (customer_name, email, total_amount, payment_status)\n        VALUES ('$first_name $last_name', '$email', '$total_amount', 'pending')\";\n\nif ($conn->query($sql)) {\n    // Get the last inserted order ID\n    $order_id = $conn->insert_id;\n\n    // Insert each item into the order_items table\n    foreach ($_SESSION['cart'] as $product) {\n        $subtotal = $product['price'] * $product['quantity'];\n        $sql_item = \"INSERT INTO order_items (order_id, product_id, quantity, subtotal)\n                    VALUES ('$order_id', '$product[id]', '$product[quantity]', '$subtotal')\";\n\n        if (!$conn->query($sql_item)) {\n            // Error inserting order item\n            echo \"Error: \" . $sql_item . \"<br>\" . $conn->error;\n            exit();\n        }\n    }\n\n    // Clear the cart\n    unset($_SESSION['cart']);\n\n    // Display a success message\n    echo \"Order processed successfully!\";\n} else {\n    // Error inserting order\n    echo \"Error: \" . $sql . \"<br>\" . $conn->error;\n}\n\n$conn->close();\n?>\n```", "```php\n<?php\nsession_start();\n\ninclude 'db_connection.php';\n\n// Get the order ID from the session\nif (isset($_SESSION['order_id'])) {\n    $order_id = $_SESSION['order_id'];\n} else {\n    // No order found\n    echo \"No order found.\";\n    exit();\n}\n\n// Process payment here (this is a simplified example)\n$card_number = $_POST['card_number'];\n$expiration_date = $_POST['expiration_date'];\n$cvv = $_POST['cvv'];\n\n// Validate the card information (simplified validation)\nif (\n    strlen($card_number) == 16 &&\n    ctype_digit($card_number) &&\n    strlen($cvv) == 3 &&\n    ctype_digit($cvv)\n) {\n    // Payment is successful\n    $sql = \"UPDATE orders SET payment_status = 'completed' WHERE order_id = $order_id\";\n    if ($conn->query($sql)) {\n        // Redirect to a thank you page or display a success message\n        header(\"Location: order_confirmation.php\");\n        exit();\n    } else {\n        echo \"Error updating payment status.\";\n    }\n} else {\n    // Payment failed due to invalid card information\n    echo \"Invalid card details. Please try again.\";\n}\n\n$conn->close();\n?>\n```", "```php\n<?php\nsession_start();\n\ninclude 'db_connection.php';\n\n// Check if the user is logged in (you should implement your own authentication system)\nif (!isset($_SESSION['user_id'])) {\n    header(\"Location: login.php\");\n    exit();\n}\n\n// Get the customer's orders from the database\n$sql = \"SELECT * FROM orders WHERE email = '\".$_SESSION['email'].\"' ORDER BY created_at DESC\";\n$result = $conn->query($sql);\n\nif ($result->num_rows > 0) {\n    while ($row = $result->fetch_assoc()) {\n        echo \"<div class='order'>\";\n        echo \"<h2>Order #\" . $row['order_id'] . \"</h2>\";\n        echo \"<p>Total Amount: $\" . number_format($row['total_amount'], 2) . \"</p>\";\n        echo \"<p>Status: \" . strtoupper($row['payment_status']) . \"</p>\";\n        echo \"<p>Date: \" . date('Y-m-d H:i:s', strtotime($row['created_at'])) . \"</p>\";\n        echo \"</div>\";\n    }\n} else {\n    echo \"No purchase history available.\";\n}\n\n$conn->close();\n?>\n```", "```php\n<?php\nsession_start();\n\ninclude 'db_connection.php';\n\n// Check if the cart is empty\nif (empty($_SESSION['cart'])) {\n    echo \"Your cart is empty.\";\n} else {\n    $total = 0;\n    foreach ($_SESSION['cart'] as $product) {\n        $subtotal = $product['price'] * $product['quantity'];\n        $total += $subtotal;\n\n        echo \"<div class='cart-item'>\";\n        echo \"<h3>\" . $product['name'] . \"</h3>\";\n        echo \"<p>Quantity: \" . $product['quantity'] . \"</p>\";\n        echo \"<p>Price: $\" . number_format($product['price'], 2) . \"</p>\";\n        echo \"<p>Subtotal: $\" . number_format($subtotal, 2) . \"</p>\";\n        echo \"</div>\";\n    }\n\n    echo \"<h3>Total: $\" . number_format($total, 2) . \"</h3>\";\n\n    // Display a checkout button\n    echo \"<form action='checkout.php' method='post'>\";\n    echo \"<button type='submit'>Checkout</button>\";\n    echo \"</form>\";\n}\n\n$conn->close();\n?>\n```", "```php\n<?php\nsession_start();\n\ninclude 'db_connection.php';\n\n// Check if the cart is empty\nif (empty($_SESSION['cart'])) {\n    header(\"Location: display_products.php\");\n    exit();\n}\n\n// Display the checkout form\n?>\n\n<form action=\"process_order.php\" method=\"post\">\n    <h2>Checkout</h2>\n    <div class=\"checkout-info\">\n        <label for=\"first_name\">First Name:</label>\n        <input type=\"text\" id=\"first_name\" name=\"first_name\" required>\n\n        <label for=\"last_name\">Last Name:</label>\n        <input type=\"text\" id=\"last_name\" name=\"last_name\" required>\n\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n\n        <label for=\"phone_number\">Phone Number:</label>\n        <input type=\"tel\" id=\"phone_number\" name=\"phone_number\" required>\n\n        <label for=\"address\">Address:</label>\n        <textarea id=\"address\" name=\"address\" required></textarea>\n\n        <h3>Payment Information</h3>\n        <label for=\"card_number\">Card Number:</label>\n        <input type=\"text\" id=\"card_number\" name=\"card_number\" pattern=\"[0-9]{16}\" required>\n\n        <label for=\"expiration_date\">Expiration Date:</label>\n        <input type=\"month\" id=\"expiration_date\" name=\"expiration_date\" required>\n\n        <label for=\"cvv\">CVV:</label>\n        <input type=\"text\" id=\"cvv\" name=\"cvv\" pattern=\"[0-9]{3}\" required>\n\n        <button type=\"submit\">Place Order</button>\n    </div>\n</form>\n\n<?php\n$conn->close();\n?>\n```", "```php\n<?php\nsession_start();\n\ninclude 'db_connection.php';\n\n// Get the order details from the database\n$sql = \"SELECT * FROM orders WHERE order_id = $_SESSION['order_id']\";\n$result = $conn->query($sql);\n$order = $result->fetch_assoc();\n\n// Compose the email\n$to = $order['email'];\n$subject = \"Order Confirmation - Order #\" . $order['order_id'];\n$body = \"\n<html>\n<head>\n    <title>Order Confirmation</title>\n</head>\n<body>\n    <h2>Order Confirmation</h2>\n    <p>Your order has been processed successfully.</p>\n    <p><strong>Order ID:</strong> \" . $order['order_id'] . \"</p>\n    <p><strong>Total Amount:</strong> $\" . number_format($order['total_amount'], 2) . \"</p>\n    <p>Thank you for shopping with us!</p>\n</body>\n</html\"\n\";\n\n// Set the headers\n$headers = \"From: noreply@yourdomain.com\\r\\n\";\n$headers .= \"MIME-Version: 1.0\\r\\n\";\n$headers .= \"Content-Type: text/html; charset=UTF-8\\r\\n\";\n\nif (mail($to, $subject, $body, $headers)) {\n    echo \"Confirmation email sent successfully.\";\n} else {\n    echo \"Error sending confirmation email.\";\n}\n\n$conn->close();\n?>\n```"]}
