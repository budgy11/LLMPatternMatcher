{"prompt": "Create a purchase functionality using php", "llm_output": "Here is an example of how you can create a basic purchase functionality using PHP:\n\n**database schema:**\n```sql\nCREATE TABLE users (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  username VARCHAR(255),\n  password VARCHAR(255)\n);\n\nCREATE TABLE products (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  name VARCHAR(255),\n  price DECIMAL(10,2)\n);\n\nCREATE TABLE orders (\n  id INT PRIMARY KEY AUTO_INCREMENT,\n  user_id INT,\n  product_id INT,\n  quantity INT,\n  total_price DECIMAL(10,2),\n  FOREIGN KEY (user_id) REFERENCES users(id),\n  FOREIGN KEY (product_id) REFERENCES products(id)\n);\n```\n**PHP code:**\n```php\n// config.php\n<?php\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n?>\n\n// index.php\n<?php\ninclude 'config.php';\n\nif (isset($_POST['buy'])) {\n  // get user input\n  $product_id = $_POST['product_id'];\n  $quantity = $_POST['quantity'];\n\n  // validate inputs\n  if (!ctype_digit($product_id) || !ctype_digit($quantity)) {\n    echo \"Invalid product ID or quantity\";\n    return;\n  }\n\n  // check if product exists\n  $sql = \"SELECT * FROM products WHERE id = '$product_id'\";\n  $result = $conn->query($sql);\n\n  if (!$result->num_rows > 0) {\n    echo \"Product not found\";\n    return;\n  }\n\n  // get product price and calculate total price\n  $row = $result->fetch_assoc();\n  $price = $row['price'];\n  $total_price = $price * $quantity;\n\n  // check if user has sufficient balance (in this case, we're assuming a balance of 0)\n  $user_id = $_SESSION['id']; // you'll need to implement session management for user ID\n  if ($total_price > 0) {\n    echo \"Insufficient balance\";\n    return;\n  }\n\n  // insert order into database\n  $sql = \"INSERT INTO orders (user_id, product_id, quantity, total_price)\n          VALUES ('$user_id', '$product_id', '$quantity', '$total_price')\";\n  if ($conn->query($sql) === TRUE) {\n    echo \"Order placed successfully!\";\n  } else {\n    echo \"Error: \" . $sql->error;\n  }\n}\n?>\n\n<!-- html form -->\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n  <input type=\"hidden\" name=\"product_id\" value=\"<?php echo isset($_POST['product_id']) ? $_POST['product_id'] : ''; ?>\">\n  <label for=\"quantity\">Quantity:</label>\n  <input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\">\n  <button type=\"submit\" name=\"buy\">Buy Now</button>\n</form>\n```\n**Explanation:**\n\nThis code assumes you have a database set up with the schema above. The `index.php` file handles user input and submits it to the server for processing.\n\nWhen the form is submitted, the PHP script checks if the product ID and quantity are valid numbers, and if the product exists in the database. If any of these checks fail, an error message is displayed.\n\nNext, the script calculates the total price by multiplying the product price with the quantity. It then checks if the user has sufficient balance (in this case, we're assuming a balance of 0). If the balance is insufficient, an error message is displayed.\n\nIf all checks pass, the script inserts an order into the database using the `INSERT INTO` query. The order is tied to the current user ID, which you'll need to implement session management for.\n\n**Note:**\n\n* This code assumes a very basic authentication system where users are identified by their username and password.\n* You should replace `'your_database'`, `'your_username'`, and `'your_password'` with your actual database credentials.\n* This is just an example, you may want to implement additional checks (e.g. product availability, user authentication) in a real-world application.\n\n**Security considerations:**\n\nThis code uses `mysqli` extension for database interaction, which has been deprecated since PHP 7.2. You should consider using prepared statements with PDO or another modern database library.\n\nAdditionally, you may want to implement additional security measures such as:\n\n* Validating user input data\n* Sanitizing and escaping user input data\n* Implementing a secure authentication system\n* Using HTTPS encryption for sensitive data transmission", "code_blocks": [null, "```php\n// config.php\n<?php\ndefine('DB_HOST', 'localhost');\ndefine('DB_USERNAME', 'your_username');\ndefine('DB_PASSWORD', 'your_password');\ndefine('DB_NAME', 'your_database');\n\n$conn = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);\n\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n?>\n\n// index.php\n<?php\ninclude 'config.php';\n\nif (isset($_POST['buy'])) {\n  // get user input\n  $product_id = $_POST['product_id'];\n  $quantity = $_POST['quantity'];\n\n  // validate inputs\n  if (!ctype_digit($product_id) || !ctype_digit($quantity)) {\n    echo \"Invalid product ID or quantity\";\n    return;\n  }\n\n  // check if product exists\n  $sql = \"SELECT * FROM products WHERE id = '$product_id'\";\n  $result = $conn->query($sql);\n\n  if (!$result->num_rows > 0) {\n    echo \"Product not found\";\n    return;\n  }\n\n  // get product price and calculate total price\n  $row = $result->fetch_assoc();\n  $price = $row['price'];\n  $total_price = $price * $quantity;\n\n  // check if user has sufficient balance (in this case, we're assuming a balance of 0)\n  $user_id = $_SESSION['id']; // you'll need to implement session management for user ID\n  if ($total_price > 0) {\n    echo \"Insufficient balance\";\n    return;\n  }\n\n  // insert order into database\n  $sql = \"INSERT INTO orders (user_id, product_id, quantity, total_price)\n          VALUES ('$user_id', '$product_id', '$quantity', '$total_price')\";\n  if ($conn->query($sql) === TRUE) {\n    echo \"Order placed successfully!\";\n  } else {\n    echo \"Error: \" . $sql->error;\n  }\n}\n?>\n\n<!-- html form -->\n<form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"post\">\n  <input type=\"hidden\" name=\"product_id\" value=\"<?php echo isset($_POST['product_id']) ? $_POST['product_id'] : ''; ?>\">\n  <label for=\"quantity\">Quantity:</label>\n  <input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\">\n  <button type=\"submit\" name=\"buy\">Buy Now</button>\n</form>\n```"]}
