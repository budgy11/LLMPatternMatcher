{"prompt": "Create a purchase functionality using php", "llm_output": "```php\n<?php\n\n// Database Configuration (Replace with your actual credentials)\n$dbHost = \"localhost\";\n$dbName = \"shop_db\";\n$dbUser = \"your_username\";\n$dbPassword = \"your_password\";\n\n// Function to connect to the database\nfunction connectToDatabase() {\n  $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  return $conn;\n}\n\n// Function to add a product to the cart\nfunction addToCart($conn, $product_id, $quantity) {\n  // Check if the product already exists in the cart\n  $query = \"SELECT * FROM cart WHERE product_id = '$product_id'\";\n  $result = $conn->query($query);\n\n  if ($result->num_rows > 0) {\n    // Product already in cart, update quantity\n    $row = $result->fetch_assoc();\n    $query = \"UPDATE cart SET quantity = quantity + $quantity WHERE product_id = '$product_id'\";\n    if ($conn->query($query) === TRUE) {\n      echo \"Product quantity updated successfully!\";\n    } else {\n      echo \"Error updating product quantity: \" . $conn->error;\n    }\n  } else {\n    // Product not in cart, add it\n    $query = \"INSERT INTO cart (product_id, quantity) VALUES ('$product_id', '$quantity')\";\n    if ($conn->query($query) === TRUE) {\n      echo \"Product added to cart successfully!\";\n    } else {\n      echo \"Error adding product to cart: \" . $conn->error;\n    }\n  }\n}\n\n// Function to view the cart\nfunction viewCart($conn) {\n  $query = \"SELECT * FROM cart\";\n  $result = $conn->query($query);\n\n  if ($result->num_rows > 0) {\n    echo \"<h2>Your Shopping Cart</h2>\";\n    while ($row = $result->fetch_assoc()) {\n      $product_id = $row[\"product_id\"];\n      $quantity = $row[\"quantity\"];\n      $product_name = getProductName($conn, $product_id); // Call a helper function to get product name\n\n      echo \"<tr>\";\n      echo \"<td>\" . $product_name . \"</td>\";\n      echo \"<td>\" . $quantity . \"</td>\";\n      echo \"<td><button onclick='removeFromCart(\" . $product_id . \")'>Remove</button></td>\"; // Button to remove\n      echo \"</tr>\";\n    }\n  } else {\n    echo \"<p>Your cart is empty.</p>\";\n  }\n}\n\n// Helper function to get the product name based on product_id\nfunction getProductName($conn, $product_id) {\n    $query = \"SELECT * FROM products WHERE product_id = '$product_id'\";\n    $result = $conn->query($query);\n\n    if ($result->num_rows > 0) {\n        $row = $result->fetch_assoc();\n        return $row[\"product_name\"];\n    } else {\n        return \"Unknown Product\";\n    }\n}\n\n\n// Check if the form is submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  // Check if 'add_to_cart' is set\n  if (isset($_POST[\"add_to_cart\"])) {\n    $product_id = $_POST[\"product_id\"];\n    $quantity = $_POST[\"quantity\"];\n    addToCart($conn, $product_id, $quantity);\n  }\n}\n\n// Database connection\n$conn = connectToDatabase();\n\n// View the cart (call this function to display the cart content)\nviewCart($conn);\n\n//  Example HTML for the form and display\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Shopping Cart</title>\n</head>\n<body>\n\n  <h1>Our Products</h1>\n\n  <h2>Product 1</h2>\n  <form method=\"post\">\n    <input type=\"hidden\" name=\"product_id\" value=\"1\">\n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" id=\"quantity\" name=\"quantity\" value=\"1\" min=\"1\">\n    <button type=\"submit\" name=\"add_to_cart\">Add to Cart</button>\n  </form>\n\n  <h2>Product 2</h2>\n  <form method=\"post\">\n    <input type=\"hidden\" name=\"product_id\" value=\"2\">\n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" id=\"quantity\" name=\"quantity\" value=\"1\" min=\"1\">\n    <button type=\"submit\" name=\"add_to_cart\">Add to Cart</button>\n  </form>\n\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Database Connection:**  Uses `mysqli` for database connectivity.  It also includes a `connectToDatabase()` function to encapsulate the connection logic, making it reusable and easier to manage. Critically, it includes error handling for the connection attempt.\n* **`addToCart()` Function:**  This function handles adding items to the cart. It checks if the product is already in the cart. If it is, it updates the quantity. If not, it inserts a new record into the `cart` table.  This prevents duplicate entries. Includes error handling for insertion and update queries.\n* **`viewCart()` Function:** This function retrieves all items from the `cart` table and displays them in an HTML table.  It also includes a \"Remove\" button that calls a JavaScript function `removeFromCart()` (which will need to be defined in the HTML).\n* **`getProductName()` Helper Function:**  This function retrieves the product name from the `products` table based on the `product_id`.  This is crucial because you need to display the product name in the cart. Handles the case where the product doesn't exist.\n* **Form Handling:** The code checks if the form has been submitted using `$_SERVER[\"REQUEST_METHOD\"] == \"POST\"`.  It then checks if the `add_to_cart` button has been clicked.\n* **Clearer HTML:** The example HTML is included to demonstrate how to use the functions.\n* **Error Handling:**  Includes error handling for database queries to prevent the script from crashing due to database errors.\n* **Security:**  While this code is a basic example, it highlights the importance of sanitizing user input *before* using it in database queries.  This example does *not* implement this sanitization to keep it simple, but you *must* do this in a production environment to prevent SQL injection vulnerabilities.  You would use functions like `mysqli_real_escape_string()` (though `mysqli_prepare` and `bind_param` are generally preferred now for better performance and security).\n* **Comments:**  The code is well-commented to explain each step.\n* **Table Representation:** Uses a basic HTML table to display the cart contents, which is straightforward for a simple implementation.\n\n**How to Use:**\n\n1. **Database Setup:** Create a database named `shop_db`.  Create two tables: `products` and `cart`.\n\n   * **`products` Table:**\n     ```sql\n     CREATE TABLE products (\n       product_id INT PRIMARY KEY,\n       product_name VARCHAR(255)\n     );\n     ```\n   * **`cart` Table:**\n     ```sql\n     CREATE TABLE cart (\n       product_id INT PRIMARY KEY,\n       quantity INT NOT NULL\n     );\n     ```\n\n2. **Populate Tables:** Insert some data into the tables.  For example:\n\n   ```sql\n   INSERT INTO products (product_id, product_name) VALUES\n   (1, 'Awesome T-Shirt'),\n   (2, 'Cool Mug');\n   ```\n\n3. **Update the Code:**  Replace the placeholder database credentials (`$dbHost`, `$dbName`, `$dbUser`, `$dbPassword`) with your actual database credentials.\n\n4. **Run the Code:**  Save the PHP code as a `.php` file (e.g., `shopping_cart.php`) and run it through a web server (e.g., Apache).\n\n**Important Considerations for Production:**\n\n* **Security:**\n    * **Input Validation:** *Always* validate and sanitize user input before using it in database queries. Use prepared statements (e.g., `mysqli_prepare` and `bind_param`) to prevent SQL injection.\n    * **Authentication and Authorization:**  Add user authentication and authorization to control access to the cart and other features.\n    * **HTTPS:** Use HTTPS to encrypt communication between the client and the server.\n* **Error Handling:** Implement robust error handling and logging to track errors and prevent unexpected issues.\n* **Scalability:**  Consider using a more robust database system (e.g., MySQL, PostgreSQL) for larger applications.\n* **Session Management:** Use sessions to track the user's cart contents across multiple pages.\n* **JavaScript (for a better user experience):**  Add JavaScript to handle removing items from the cart and updating the cart contents dynamically without page reloads.  You'll need to define the `removeFromCart()` function in your HTML and link it to JavaScript.\n* **Database Design:** The `cart` table is very simple.  For a production system, you'd likely want to add more columns (e.g., `session_id` to link to the user's session, a `price` column).\n\nThis revised response provides a much more complete and practical solution, along with the crucial security considerations you *must* address when building a real-world shopping cart application. Remember to prioritize security to protect your data and your users.\n", "code_blocks": ["```php\n<?php\n\n// Database Configuration (Replace with your actual credentials)\n$dbHost = \"localhost\";\n$dbName = \"shop_db\";\n$dbUser = \"your_username\";\n$dbPassword = \"your_password\";\n\n// Function to connect to the database\nfunction connectToDatabase() {\n  $conn = new mysqli($dbHost, $dbUser, $dbPassword, $dbName);\n  if ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n  }\n  return $conn;\n}\n\n// Function to add a product to the cart\nfunction addToCart($conn, $product_id, $quantity) {\n  // Check if the product already exists in the cart\n  $query = \"SELECT * FROM cart WHERE product_id = '$product_id'\";\n  $result = $conn->query($query);\n\n  if ($result->num_rows > 0) {\n    // Product already in cart, update quantity\n    $row = $result->fetch_assoc();\n    $query = \"UPDATE cart SET quantity = quantity + $quantity WHERE product_id = '$product_id'\";\n    if ($conn->query($query) === TRUE) {\n      echo \"Product quantity updated successfully!\";\n    } else {\n      echo \"Error updating product quantity: \" . $conn->error;\n    }\n  } else {\n    // Product not in cart, add it\n    $query = \"INSERT INTO cart (product_id, quantity) VALUES ('$product_id', '$quantity')\";\n    if ($conn->query($query) === TRUE) {\n      echo \"Product added to cart successfully!\";\n    } else {\n      echo \"Error adding product to cart: \" . $conn->error;\n    }\n  }\n}\n\n// Function to view the cart\nfunction viewCart($conn) {\n  $query = \"SELECT * FROM cart\";\n  $result = $conn->query($query);\n\n  if ($result->num_rows > 0) {\n    echo \"<h2>Your Shopping Cart</h2>\";\n    while ($row = $result->fetch_assoc()) {\n      $product_id = $row[\"product_id\"];\n      $quantity = $row[\"quantity\"];\n      $product_name = getProductName($conn, $product_id); // Call a helper function to get product name\n\n      echo \"<tr>\";\n      echo \"<td>\" . $product_name . \"</td>\";\n      echo \"<td>\" . $quantity . \"</td>\";\n      echo \"<td><button onclick='removeFromCart(\" . $product_id . \")'>Remove</button></td>\"; // Button to remove\n      echo \"</tr>\";\n    }\n  } else {\n    echo \"<p>Your cart is empty.</p>\";\n  }\n}\n\n// Helper function to get the product name based on product_id\nfunction getProductName($conn, $product_id) {\n    $query = \"SELECT * FROM products WHERE product_id = '$product_id'\";\n    $result = $conn->query($query);\n\n    if ($result->num_rows > 0) {\n        $row = $result->fetch_assoc();\n        return $row[\"product_name\"];\n    } else {\n        return \"Unknown Product\";\n    }\n}\n\n\n// Check if the form is submitted\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  // Check if 'add_to_cart' is set\n  if (isset($_POST[\"add_to_cart\"])) {\n    $product_id = $_POST[\"product_id\"];\n    $quantity = $_POST[\"quantity\"];\n    addToCart($conn, $product_id, $quantity);\n  }\n}\n\n// Database connection\n$conn = connectToDatabase();\n\n// View the cart (call this function to display the cart content)\nviewCart($conn);\n\n//  Example HTML for the form and display\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Shopping Cart</title>\n</head>\n<body>\n\n  <h1>Our Products</h1>\n\n  <h2>Product 1</h2>\n  <form method=\"post\">\n    <input type=\"hidden\" name=\"product_id\" value=\"1\">\n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" id=\"quantity\" name=\"quantity\" value=\"1\" min=\"1\">\n    <button type=\"submit\" name=\"add_to_cart\">Add to Cart</button>\n  </form>\n\n  <h2>Product 2</h2>\n  <form method=\"post\">\n    <input type=\"hidden\" name=\"product_id\" value=\"2\">\n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" id=\"quantity\" name=\"quantity\" value=\"1\" min=\"1\">\n    <button type=\"submit\" name=\"add_to_cart\">Add to Cart</button>\n  </form>\n\n\n</body>\n</html>\n```"]}
