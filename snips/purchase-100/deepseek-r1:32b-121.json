{"prompt": "Create a purchase functionality using php", "llm_output": "<think>\nAlright, the user wants to create a purchase functionality using PHP. Let me break down what that entails.\n\nFirst, I need to consider the basic components. A purchase function typically involves connecting to a database to handle products and orders. So, I'll start by setting up a database connection. Using PDO is a good choice because it's secure and supports multiple databases.\n\nNext, I should outline the main features. The user probably needs to display available products, allow users to add items to their cart, update quantities, and finally place an order. Each of these steps requires corresponding functions.\n\nFor displaying products, I'll write a function that fetches all product details from the database. This will help in listing them on the website. Then, adding an item to the cart involves checking if the product exists and handling stock. If the product isn't in the cart yet, it adds it with the requested quantity. If it's already there, it updates the quantity but ensures it doesn't exceed available stock.\n\nUpdating quantities is straightforward\u2014another function that either increments or decrements the item's quantity in the cart, again respecting stock levels. Removing an item from the cart should be simple, just removing the product from the session data.\n\nCalculating totals is essential for displaying the current order value. This function loops through each item in the cart and sums up the prices multiplied by quantities.\n\nNow, processing the order requires capturing customer details and saving them along with the order items. I'll need to insert into two tables: one for the order itself (like order ID, user, total) and another for each item ordered. After that, sending a confirmation email makes sense as a final step to confirm the purchase.\n\nI also need to handle sessions since PHP doesn't maintain state between requests naturally. Storing the cart in the session allows users to add items across different pages without losing their selection.\n\nSecurity is a concern too. Using prepared statements with PDO helps prevent SQL injection. Additionally, validating inputs and handling errors properly ensures that unexpected issues don't break the application.\n\nFinally, I'll include example usage to show how these functions work together. This helps the user understand how each part fits into the overall purchase flow. Testing each function step by step is crucial to ensure everything works as intended.\n</think>\n\nHere's an example of a purchase functionality using PHP. This implementation includes product display, adding items to cart, and processing payments.\n\n```php\n<?php\n// Database connection configuration\n$host = 'localhost';\n$dbname = 'ecommerce';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\n// Function to display available products\nfunction displayProducts() {\n    global $conn;\n    \n    try {\n        $stmt = $conn->query(\"SELECT * FROM products\");\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            echo \"<div class='product'>\";\n            echo \"<h3>\" . $row['name'] . \"</h3>\";\n            echo \"<p>Price: $\" . number_format($row['price'], 2) . \"</p>\";\n            echo \"<button onclick=\\\"addToCart(\" . $row['id'] . \")\\\">Add to Cart</button>\";\n            echo \"</div>\";\n        }\n    } catch (PDOException $e) {\n        die(\"Error displaying products: \" . $e->getMessage());\n    }\n}\n\n// Function to add item to cart\nfunction addToCart($productId) {\n    global $conn;\n    \n    try {\n        // Check if product exists\n        $stmt = $conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n        $stmt->execute([$productId]);\n        \n        if ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            $item = array(\n                'id' => $row['id'],\n                'name' => $row['name'],\n                'price' => $row['price'],\n                'quantity' => 1\n            );\n            \n            // Check if item is already in cart\n            if (isset($_SESSION['cart'][$productId])) {\n                $_SESSION['cart'][$productId]['quantity']++;\n            } else {\n                $_SESSION['cart'][$productId] = $item;\n            }\n        }\n    } catch (PDOException $e) {\n        die(\"Error adding to cart: \" . $e->getMessage());\n    }\n}\n\n// Function to update item quantity in cart\nfunction updateQuantity($productId, $quantity) {\n    global $conn;\n    \n    try {\n        // Validate quantity\n        if ($quantity <= 0) {\n            removeItem($productId);\n            return;\n        }\n        \n        $_SESSION['cart'][$productId]['quantity'] = $quantity;\n    } catch (PDOException $e) {\n        die(\"Error updating quantity: \" . $e->getMessage());\n    }\n}\n\n// Function to remove item from cart\nfunction removeItem($productId) {\n    global $conn;\n    \n    try {\n        unset($_SESSION['cart'][$productId]);\n    } catch (PDOException $e) {\n        die(\"Error removing item: \" . $e->getMessage());\n    }\n}\n\n// Function to calculate total price of items in cart\nfunction calculateTotal() {\n    if (!isset($_SESSION['cart'])) {\n        return 0;\n    }\n    \n    $total = 0;\n    foreach ($_SESSION['cart'] as $item) {\n        $total += ($item['price'] * $item['quantity']);\n    }\n    \n    return number_format($total, 2);\n}\n\n// Function to process the purchase\nfunction processPurchase() {\n    global $conn;\n    \n    try {\n        if (!isset($_SESSION['cart'])) {\n            die(\"Your cart is empty.\");\n        }\n        \n        // Get customer details from form submission\n        $customerId = $_POST['customer_id'];\n        $totalAmount = calculateTotal();\n        \n        // Insert order into orders table\n        $stmt = $conn->prepare(\"INSERT INTO orders (customer_id, total_amount, order_date) VALUES (?, ?, NOW())\");\n        $stmt->execute([$customerId, $totalAmount]);\n        $orderId = $conn->lastInsertId();\n        \n        // Insert order items into order_items table\n        foreach ($_SESSION['cart'] as $item) {\n            $stmt = $conn->prepare(\"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\");\n            $stmt->execute([$orderId, $item['id'], $item['quantity'], $item['price']]);\n        }\n        \n        // Clear cart\n        unset($_SESSION['cart']);\n        \n        // Optional: Send confirmation email\n        sendPurchaseConfirmation($customerId, $orderId, $totalAmount);\n        \n        echo \"Order placed successfully! Order ID: #\" . $orderId;\n    } catch (PDOException $e) {\n        die(\"Error processing purchase: \" . $e->getMessage());\n    }\n}\n\n// Function to send purchase confirmation email\nfunction sendPurchaseConfirmation($customerId, $orderId, $totalAmount) {\n    // Implement your email sending logic here\n    // You can use PHP's built-in mail() function or a library like PHPMailer\n    $to = \"customer@example.com\";\n    $subject = \"Order Confirmation - #\" . $orderId;\n    $message = \"Dear Customer,\\n\\nThank you for your purchase! Your order details are as follows:\\n\\nOrder ID: #\" . $orderId . \"\\nTotal Amount: $\" . $totalAmount . \"\\n\\nBest regards,\\nYour E-commerce Team\";\n    \n    mail($to, $subject, $message);\n}\n\n// Initialize session\nsession_start();\n\n// Example usage:\nif (isset($_POST['add_to_cart'])) {\n    addToCart($_POST['product_id']);\n} elseif (isset($_POST['update_quantity'])) {\n    updateQuantity($_POST['product_id'], $_POST['quantity']);\n} elseif (isset($_POST['remove_item'])) {\n    removeItem($_POST['product_id']);\n} elseif (isset($_POST['process_order'])) {\n    processPurchase();\n}\n?>\n```\n\nThis code includes the following features:\n\n1. Database connection setup\n2. Product display functionality\n3. Adding items to cart\n4. Updating item quantities\n5. Removing items from cart\n6. Calculating total price\n7. Processing purchases and saving to database\n8. Sending purchase confirmation emails\n\nTo use this code:\n\n1. Set up your database with the following tables:\n   - `products` (id, name, description, price)\n   - `orders` (id, customer_id, total_amount, order_date)\n   - `order_items` (id, order_id, product_id, quantity, price)\n\n2. Modify the database connection details (`host`, `dbname`, `username`, `password`) according to your environment.\n\n3. Include this PHP file in your HTML templates and use the provided functions to implement the purchase functionality.\n\n4. The code uses sessions to store the cart contents, so make sure session_start() is called at the beginning of each script that needs access to the cart.\n\n5. Add appropriate form elements in your HTML to trigger these functions:\n   - Add to Cart button\n   - Update Quantity input field\n   - Remove Item button\n   - Process Order button\n\n6. You may need to modify the email sending functionality (sendPurchaseConfirmation()) according to your requirements.\n\nRemember to:\n\n- Validate and sanitize all user inputs\n- Implement proper error handling\n- Use secure authentication methods for customer accounts\n- Add CSRF protection\n- Implement proper payment processing (this example doesn't handle actual payments)\n- Add additional security measures as needed\n\nThis is a basic implementation and should be adapted according to your specific project requirements.", "code_blocks": ["```php\n<?php\n// Database connection configuration\n$host = 'localhost';\n$dbname = 'ecommerce';\n$username = 'root';\n$password = '';\n\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\n// Function to display available products\nfunction displayProducts() {\n    global $conn;\n    \n    try {\n        $stmt = $conn->query(\"SELECT * FROM products\");\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            echo \"<div class='product'>\";\n            echo \"<h3>\" . $row['name'] . \"</h3>\";\n            echo \"<p>Price: $\" . number_format($row['price'], 2) . \"</p>\";\n            echo \"<button onclick=\\\"addToCart(\" . $row['id'] . \")\\\">Add to Cart</button>\";\n            echo \"</div>\";\n        }\n    } catch (PDOException $e) {\n        die(\"Error displaying products: \" . $e->getMessage());\n    }\n}\n\n// Function to add item to cart\nfunction addToCart($productId) {\n    global $conn;\n    \n    try {\n        // Check if product exists\n        $stmt = $conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n        $stmt->execute([$productId]);\n        \n        if ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            $item = array(\n                'id' => $row['id'],\n                'name' => $row['name'],\n                'price' => $row['price'],\n                'quantity' => 1\n            );\n            \n            // Check if item is already in cart\n            if (isset($_SESSION['cart'][$productId])) {\n                $_SESSION['cart'][$productId]['quantity']++;\n            } else {\n                $_SESSION['cart'][$productId] = $item;\n            }\n        }\n    } catch (PDOException $e) {\n        die(\"Error adding to cart: \" . $e->getMessage());\n    }\n}\n\n// Function to update item quantity in cart\nfunction updateQuantity($productId, $quantity) {\n    global $conn;\n    \n    try {\n        // Validate quantity\n        if ($quantity <= 0) {\n            removeItem($productId);\n            return;\n        }\n        \n        $_SESSION['cart'][$productId]['quantity'] = $quantity;\n    } catch (PDOException $e) {\n        die(\"Error updating quantity: \" . $e->getMessage());\n    }\n}\n\n// Function to remove item from cart\nfunction removeItem($productId) {\n    global $conn;\n    \n    try {\n        unset($_SESSION['cart'][$productId]);\n    } catch (PDOException $e) {\n        die(\"Error removing item: \" . $e->getMessage());\n    }\n}\n\n// Function to calculate total price of items in cart\nfunction calculateTotal() {\n    if (!isset($_SESSION['cart'])) {\n        return 0;\n    }\n    \n    $total = 0;\n    foreach ($_SESSION['cart'] as $item) {\n        $total += ($item['price'] * $item['quantity']);\n    }\n    \n    return number_format($total, 2);\n}\n\n// Function to process the purchase\nfunction processPurchase() {\n    global $conn;\n    \n    try {\n        if (!isset($_SESSION['cart'])) {\n            die(\"Your cart is empty.\");\n        }\n        \n        // Get customer details from form submission\n        $customerId = $_POST['customer_id'];\n        $totalAmount = calculateTotal();\n        \n        // Insert order into orders table\n        $stmt = $conn->prepare(\"INSERT INTO orders (customer_id, total_amount, order_date) VALUES (?, ?, NOW())\");\n        $stmt->execute([$customerId, $totalAmount]);\n        $orderId = $conn->lastInsertId();\n        \n        // Insert order items into order_items table\n        foreach ($_SESSION['cart'] as $item) {\n            $stmt = $conn->prepare(\"INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)\");\n            $stmt->execute([$orderId, $item['id'], $item['quantity'], $item['price']]);\n        }\n        \n        // Clear cart\n        unset($_SESSION['cart']);\n        \n        // Optional: Send confirmation email\n        sendPurchaseConfirmation($customerId, $orderId, $totalAmount);\n        \n        echo \"Order placed successfully! Order ID: #\" . $orderId;\n    } catch (PDOException $e) {\n        die(\"Error processing purchase: \" . $e->getMessage());\n    }\n}\n\n// Function to send purchase confirmation email\nfunction sendPurchaseConfirmation($customerId, $orderId, $totalAmount) {\n    // Implement your email sending logic here\n    // You can use PHP's built-in mail() function or a library like PHPMailer\n    $to = \"customer@example.com\";\n    $subject = \"Order Confirmation - #\" . $orderId;\n    $message = \"Dear Customer,\\n\\nThank you for your purchase! Your order details are as follows:\\n\\nOrder ID: #\" . $orderId . \"\\nTotal Amount: $\" . $totalAmount . \"\\n\\nBest regards,\\nYour E-commerce Team\";\n    \n    mail($to, $subject, $message);\n}\n\n// Initialize session\nsession_start();\n\n// Example usage:\nif (isset($_POST['add_to_cart'])) {\n    addToCart($_POST['product_id']);\n} elseif (isset($_POST['update_quantity'])) {\n    updateQuantity($_POST['product_id'], $_POST['quantity']);\n} elseif (isset($_POST['remove_item'])) {\n    removeItem($_POST['product_id']);\n} elseif (isset($_POST['process_order'])) {\n    processPurchase();\n}\n?>\n```"]}
