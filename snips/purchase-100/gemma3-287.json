{"prompt": "Create a purchase functionality using php", "llm_output": "```php\n<?php\n\n// Configuration\n$products = [\n    1 => ['name' => 'T-Shirt', 'price' => 20.00],\n    2 => ['name' => 'Jeans', 'price' => 50.00],\n    3 => ['name' => 'Hat', 'price' => 15.00],\n];\n\n$cart = []; // Initialize empty cart\n\n// Function to add item to cart\nfunction addToCart($productId, $quantity = 1, $cart) {\n    if (array_key_exists($productId, $products)) {\n        if (isset($cart[$productId])) {\n            $cart[$productId]['quantity'] += $quantity;\n        } else {\n            $cart[$productId] = ['name' => $products[$productId]['name'], 'price' => $products[$productId]['price'], 'quantity' => $quantity];\n        }\n    } else {\n        echo \"Product ID $productId not found.\";\n    }\n}\n\n// Function to display the cart\nfunction displayCart($cart) {\n    echo \"<h2>Your Shopping Cart</h2>\";\n    if (empty($cart)) {\n        echo \"<p>Your cart is empty.</p>\";\n        return;\n    }\n\n    echo \"<ul>\";\n    foreach ($cart as $productId => $item) {\n        echo \"<li>\" . $item['name'] . \" - $\" . number_format($item['price'], 2) . \" (Quantity: \" . $item['quantity'] . \") </li>\";\n    }\n    echo \"</ul>\";\n\n    // Calculate total price\n    $total = 0;\n    foreach ($cart as $productId => $item) {\n        $total += $item['price'] * $item['quantity'];\n    }\n\n    echo \"<p><strong>Total: $\" . number_format($total, 2) . \"</strong></p>\";\n}\n\n\n// Handle form submission (add to cart)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    if (isset($_POST['product_id']) && isset($_POST['quantity'])) {\n        $productId = (int)$_POST['product_id']; // Cast to integer\n        $quantity = (int)$_POST['quantity'];  // Cast to integer\n\n        addToCart($productId, $quantity, $cart); // Pass cart to addToCart\n        displayCart($cart); // Display updated cart\n    }\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Simple Purchase Functionality</title>\n</head>\n<body>\n\n<h1>Purchase Items</h1>\n\n<form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n    <label for=\"product_id\">Product ID:</label>\n    <select name=\"product_id\" id=\"product_id\">\n        <?php\n        foreach ($products as $id => $product) {\n            echo \"<option value=\\\"$id\\\">$id</option>\";\n        }\n        ?>\n    </select><br><br>\n\n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" id=\"quantity\" name=\"quantity\" value=\"1\" min=\"1\"><br><br>\n\n    <button type=\"submit\">Add to Cart</button>\n</form>\n\n</body>\n</html>\n```\n\nKey improvements and explanations:\n\n* **Clearer Code Structure:**  The code is now much better organized into functions (`addToCart`, `displayCart`) for maintainability and readability.\n* **`addToCart` Function:**\n    * Takes `$productId` and `$quantity` as arguments.\n    * Checks if the product exists in the `$products` array using `array_key_exists()`. This prevents errors if a product ID is invalid.\n    * If the product exists:\n        * Checks if the product is already in the cart.\n        * If it's in the cart, increments the `quantity`.\n        * If it's *not* in the cart, creates a new entry with the product details and quantity.\n* **`displayCart` Function:**\n    * Takes the `$cart` array as an argument.\n    * Displays the cart contents, including product name, price, and quantity.\n    * Calculates and displays the total price.\n* **Form Handling:**\n    * The `if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\")` block handles form submissions.\n    * **Type Casting:**  Crucially, `(int)$_POST['product_id']` and `(int)$_POST['quantity']` are used to cast the input values to integers *before* using them. This is essential for preventing errors and vulnerabilities (e.g., SQL injection if you were to use these values in a database query later \u2013 although this example doesn't do that, it's good practice).\n* **Input Validation (Basic):** The `min=\"1\"` attribute on the quantity input helps prevent users from entering invalid quantities.  More robust validation would be needed for a production application.\n* **HTML Form:**\n    * The HTML form now includes a `select` element for choosing the product ID, which is the best practice for a dropdown.\n    * Clear labels are used for each form input.\n* **`htmlspecialchars()`:**  Used in the form action to prevent XSS attacks.\n* **`number_format()`:**  Used to format the price and total to two decimal places, improving the user experience.\n* **Error Handling (Minimal):**  The `array_key_exists()` check in `addToCart` provides basic error handling for invalid product IDs.\n* **Security:** `htmlspecialchars()` helps prevent cross-site scripting (XSS) attacks. The type casting of the input values is an important security measure.  However, for a real application, you would need more comprehensive input validation and sanitization.\n\nHow to Run:\n\n1.  **Save the Code:** Save the code as a `.php` file (e.g., `purchase.php`).\n2.  **Web Server:**  You need a web server (like Apache, Nginx) with PHP installed.\n3.  **Place in Web Server Directory:**  Put the `purchase.php` file in your web server's document root (e.g., `htdocs`, `www`).\n4.  **Access in Browser:**  Open your web browser and navigate to the URL of the file (e.g., `http://localhost/purchase.php`).\n\nThis revised example is a much more robust, secure, and user-friendly solution for a basic purchase functionality.  Remember that for a real-world application, you would need to add features like:\n\n*   Database integration to store product information and order details.\n*   More robust error handling and validation.\n*   Security measures to prevent attacks.\n*   A more sophisticated user interface.\n*   Payment gateway integration.\n", "code_blocks": ["```php\n<?php\n\n// Configuration\n$products = [\n    1 => ['name' => 'T-Shirt', 'price' => 20.00],\n    2 => ['name' => 'Jeans', 'price' => 50.00],\n    3 => ['name' => 'Hat', 'price' => 15.00],\n];\n\n$cart = []; // Initialize empty cart\n\n// Function to add item to cart\nfunction addToCart($productId, $quantity = 1, $cart) {\n    if (array_key_exists($productId, $products)) {\n        if (isset($cart[$productId])) {\n            $cart[$productId]['quantity'] += $quantity;\n        } else {\n            $cart[$productId] = ['name' => $products[$productId]['name'], 'price' => $products[$productId]['price'], 'quantity' => $quantity];\n        }\n    } else {\n        echo \"Product ID $productId not found.\";\n    }\n}\n\n// Function to display the cart\nfunction displayCart($cart) {\n    echo \"<h2>Your Shopping Cart</h2>\";\n    if (empty($cart)) {\n        echo \"<p>Your cart is empty.</p>\";\n        return;\n    }\n\n    echo \"<ul>\";\n    foreach ($cart as $productId => $item) {\n        echo \"<li>\" . $item['name'] . \" - $\" . number_format($item['price'], 2) . \" (Quantity: \" . $item['quantity'] . \") </li>\";\n    }\n    echo \"</ul>\";\n\n    // Calculate total price\n    $total = 0;\n    foreach ($cart as $productId => $item) {\n        $total += $item['price'] * $item['quantity'];\n    }\n\n    echo \"<p><strong>Total: $\" . number_format($total, 2) . \"</strong></p>\";\n}\n\n\n// Handle form submission (add to cart)\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    if (isset($_POST['product_id']) && isset($_POST['quantity'])) {\n        $productId = (int)$_POST['product_id']; // Cast to integer\n        $quantity = (int)$_POST['quantity'];  // Cast to integer\n\n        addToCart($productId, $quantity, $cart); // Pass cart to addToCart\n        displayCart($cart); // Display updated cart\n    }\n}\n\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Simple Purchase Functionality</title>\n</head>\n<body>\n\n<h1>Purchase Items</h1>\n\n<form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n    <label for=\"product_id\">Product ID:</label>\n    <select name=\"product_id\" id=\"product_id\">\n        <?php\n        foreach ($products as $id => $product) {\n            echo \"<option value=\\\"$id\\\">$id</option>\";\n        }\n        ?>\n    </select><br><br>\n\n    <label for=\"quantity\">Quantity:</label>\n    <input type=\"number\" id=\"quantity\" name=\"quantity\" value=\"1\" min=\"1\"><br><br>\n\n    <button type=\"submit\">Add to Cart</button>\n</form>\n\n</body>\n</html>\n```"]}
